
Test3_ETH_NUCLEO-STM32H743.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015c0c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004478  08015eac  08015eac  00025eac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801a324  0801a324  0002a324  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801a32c  0801a32c  0002a32c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801a330  0801a330  0002a330  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000a4  24000000  0801a334  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00003c04  240000a4  0801a3d8  000300a4  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24003ca8  0801a3d8  00033ca8  2**0
                  ALLOC
  9 .lwip_sec     000019d0  30040000  30040000  00040000  2**2
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  000300a4  2**0
                  CONTENTS, READONLY
 11 .debug_info   0004c3a6  00000000  00000000  000300d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00007fc1  00000000  00000000  0007c478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001c88  00000000  00000000  00084440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00001b80  00000000  00000000  000860c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00045a29  00000000  00000000  00087c48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00030c3e  00000000  00000000  000cd671  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0017155c  00000000  00000000  000fe2af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  0026f80b  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00007f9c  00000000  00000000  0026f860  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240000a4 	.word	0x240000a4
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08015e94 	.word	0x08015e94

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240000a8 	.word	0x240000a8
 80002dc:	08015e94 	.word	0x08015e94

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b96e 	b.w	80006a4 <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	4604      	mov	r4, r0
 80003e8:	468c      	mov	ip, r1
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	f040 8083 	bne.w	80004f6 <__udivmoddi4+0x116>
 80003f0:	428a      	cmp	r2, r1
 80003f2:	4617      	mov	r7, r2
 80003f4:	d947      	bls.n	8000486 <__udivmoddi4+0xa6>
 80003f6:	fab2 f282 	clz	r2, r2
 80003fa:	b142      	cbz	r2, 800040e <__udivmoddi4+0x2e>
 80003fc:	f1c2 0020 	rsb	r0, r2, #32
 8000400:	fa24 f000 	lsr.w	r0, r4, r0
 8000404:	4091      	lsls	r1, r2
 8000406:	4097      	lsls	r7, r2
 8000408:	ea40 0c01 	orr.w	ip, r0, r1
 800040c:	4094      	lsls	r4, r2
 800040e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000412:	0c23      	lsrs	r3, r4, #16
 8000414:	fbbc f6f8 	udiv	r6, ip, r8
 8000418:	fa1f fe87 	uxth.w	lr, r7
 800041c:	fb08 c116 	mls	r1, r8, r6, ip
 8000420:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000424:	fb06 f10e 	mul.w	r1, r6, lr
 8000428:	4299      	cmp	r1, r3
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x60>
 800042c:	18fb      	adds	r3, r7, r3
 800042e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000432:	f080 8119 	bcs.w	8000668 <__udivmoddi4+0x288>
 8000436:	4299      	cmp	r1, r3
 8000438:	f240 8116 	bls.w	8000668 <__udivmoddi4+0x288>
 800043c:	3e02      	subs	r6, #2
 800043e:	443b      	add	r3, r7
 8000440:	1a5b      	subs	r3, r3, r1
 8000442:	b2a4      	uxth	r4, r4
 8000444:	fbb3 f0f8 	udiv	r0, r3, r8
 8000448:	fb08 3310 	mls	r3, r8, r0, r3
 800044c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000450:	fb00 fe0e 	mul.w	lr, r0, lr
 8000454:	45a6      	cmp	lr, r4
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x8c>
 8000458:	193c      	adds	r4, r7, r4
 800045a:	f100 33ff 	add.w	r3, r0, #4294967295
 800045e:	f080 8105 	bcs.w	800066c <__udivmoddi4+0x28c>
 8000462:	45a6      	cmp	lr, r4
 8000464:	f240 8102 	bls.w	800066c <__udivmoddi4+0x28c>
 8000468:	3802      	subs	r0, #2
 800046a:	443c      	add	r4, r7
 800046c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000470:	eba4 040e 	sub.w	r4, r4, lr
 8000474:	2600      	movs	r6, #0
 8000476:	b11d      	cbz	r5, 8000480 <__udivmoddi4+0xa0>
 8000478:	40d4      	lsrs	r4, r2
 800047a:	2300      	movs	r3, #0
 800047c:	e9c5 4300 	strd	r4, r3, [r5]
 8000480:	4631      	mov	r1, r6
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	b902      	cbnz	r2, 800048a <__udivmoddi4+0xaa>
 8000488:	deff      	udf	#255	; 0xff
 800048a:	fab2 f282 	clz	r2, r2
 800048e:	2a00      	cmp	r2, #0
 8000490:	d150      	bne.n	8000534 <__udivmoddi4+0x154>
 8000492:	1bcb      	subs	r3, r1, r7
 8000494:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000498:	fa1f f887 	uxth.w	r8, r7
 800049c:	2601      	movs	r6, #1
 800049e:	fbb3 fcfe 	udiv	ip, r3, lr
 80004a2:	0c21      	lsrs	r1, r4, #16
 80004a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80004a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ac:	fb08 f30c 	mul.w	r3, r8, ip
 80004b0:	428b      	cmp	r3, r1
 80004b2:	d907      	bls.n	80004c4 <__udivmoddi4+0xe4>
 80004b4:	1879      	adds	r1, r7, r1
 80004b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004ba:	d202      	bcs.n	80004c2 <__udivmoddi4+0xe2>
 80004bc:	428b      	cmp	r3, r1
 80004be:	f200 80e9 	bhi.w	8000694 <__udivmoddi4+0x2b4>
 80004c2:	4684      	mov	ip, r0
 80004c4:	1ac9      	subs	r1, r1, r3
 80004c6:	b2a3      	uxth	r3, r4
 80004c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80004d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004d4:	fb08 f800 	mul.w	r8, r8, r0
 80004d8:	45a0      	cmp	r8, r4
 80004da:	d907      	bls.n	80004ec <__udivmoddi4+0x10c>
 80004dc:	193c      	adds	r4, r7, r4
 80004de:	f100 33ff 	add.w	r3, r0, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x10a>
 80004e4:	45a0      	cmp	r8, r4
 80004e6:	f200 80d9 	bhi.w	800069c <__udivmoddi4+0x2bc>
 80004ea:	4618      	mov	r0, r3
 80004ec:	eba4 0408 	sub.w	r4, r4, r8
 80004f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004f4:	e7bf      	b.n	8000476 <__udivmoddi4+0x96>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d909      	bls.n	800050e <__udivmoddi4+0x12e>
 80004fa:	2d00      	cmp	r5, #0
 80004fc:	f000 80b1 	beq.w	8000662 <__udivmoddi4+0x282>
 8000500:	2600      	movs	r6, #0
 8000502:	e9c5 0100 	strd	r0, r1, [r5]
 8000506:	4630      	mov	r0, r6
 8000508:	4631      	mov	r1, r6
 800050a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050e:	fab3 f683 	clz	r6, r3
 8000512:	2e00      	cmp	r6, #0
 8000514:	d14a      	bne.n	80005ac <__udivmoddi4+0x1cc>
 8000516:	428b      	cmp	r3, r1
 8000518:	d302      	bcc.n	8000520 <__udivmoddi4+0x140>
 800051a:	4282      	cmp	r2, r0
 800051c:	f200 80b8 	bhi.w	8000690 <__udivmoddi4+0x2b0>
 8000520:	1a84      	subs	r4, r0, r2
 8000522:	eb61 0103 	sbc.w	r1, r1, r3
 8000526:	2001      	movs	r0, #1
 8000528:	468c      	mov	ip, r1
 800052a:	2d00      	cmp	r5, #0
 800052c:	d0a8      	beq.n	8000480 <__udivmoddi4+0xa0>
 800052e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000532:	e7a5      	b.n	8000480 <__udivmoddi4+0xa0>
 8000534:	f1c2 0320 	rsb	r3, r2, #32
 8000538:	fa20 f603 	lsr.w	r6, r0, r3
 800053c:	4097      	lsls	r7, r2
 800053e:	fa01 f002 	lsl.w	r0, r1, r2
 8000542:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000546:	40d9      	lsrs	r1, r3
 8000548:	4330      	orrs	r0, r6
 800054a:	0c03      	lsrs	r3, r0, #16
 800054c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000550:	fa1f f887 	uxth.w	r8, r7
 8000554:	fb0e 1116 	mls	r1, lr, r6, r1
 8000558:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800055c:	fb06 f108 	mul.w	r1, r6, r8
 8000560:	4299      	cmp	r1, r3
 8000562:	fa04 f402 	lsl.w	r4, r4, r2
 8000566:	d909      	bls.n	800057c <__udivmoddi4+0x19c>
 8000568:	18fb      	adds	r3, r7, r3
 800056a:	f106 3cff 	add.w	ip, r6, #4294967295
 800056e:	f080 808d 	bcs.w	800068c <__udivmoddi4+0x2ac>
 8000572:	4299      	cmp	r1, r3
 8000574:	f240 808a 	bls.w	800068c <__udivmoddi4+0x2ac>
 8000578:	3e02      	subs	r6, #2
 800057a:	443b      	add	r3, r7
 800057c:	1a5b      	subs	r3, r3, r1
 800057e:	b281      	uxth	r1, r0
 8000580:	fbb3 f0fe 	udiv	r0, r3, lr
 8000584:	fb0e 3310 	mls	r3, lr, r0, r3
 8000588:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800058c:	fb00 f308 	mul.w	r3, r0, r8
 8000590:	428b      	cmp	r3, r1
 8000592:	d907      	bls.n	80005a4 <__udivmoddi4+0x1c4>
 8000594:	1879      	adds	r1, r7, r1
 8000596:	f100 3cff 	add.w	ip, r0, #4294967295
 800059a:	d273      	bcs.n	8000684 <__udivmoddi4+0x2a4>
 800059c:	428b      	cmp	r3, r1
 800059e:	d971      	bls.n	8000684 <__udivmoddi4+0x2a4>
 80005a0:	3802      	subs	r0, #2
 80005a2:	4439      	add	r1, r7
 80005a4:	1acb      	subs	r3, r1, r3
 80005a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80005aa:	e778      	b.n	800049e <__udivmoddi4+0xbe>
 80005ac:	f1c6 0c20 	rsb	ip, r6, #32
 80005b0:	fa03 f406 	lsl.w	r4, r3, r6
 80005b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80005b8:	431c      	orrs	r4, r3
 80005ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80005be:	fa01 f306 	lsl.w	r3, r1, r6
 80005c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005ca:	431f      	orrs	r7, r3
 80005cc:	0c3b      	lsrs	r3, r7, #16
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fa1f f884 	uxth.w	r8, r4
 80005d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005de:	fb09 fa08 	mul.w	sl, r9, r8
 80005e2:	458a      	cmp	sl, r1
 80005e4:	fa02 f206 	lsl.w	r2, r2, r6
 80005e8:	fa00 f306 	lsl.w	r3, r0, r6
 80005ec:	d908      	bls.n	8000600 <__udivmoddi4+0x220>
 80005ee:	1861      	adds	r1, r4, r1
 80005f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005f4:	d248      	bcs.n	8000688 <__udivmoddi4+0x2a8>
 80005f6:	458a      	cmp	sl, r1
 80005f8:	d946      	bls.n	8000688 <__udivmoddi4+0x2a8>
 80005fa:	f1a9 0902 	sub.w	r9, r9, #2
 80005fe:	4421      	add	r1, r4
 8000600:	eba1 010a 	sub.w	r1, r1, sl
 8000604:	b2bf      	uxth	r7, r7
 8000606:	fbb1 f0fe 	udiv	r0, r1, lr
 800060a:	fb0e 1110 	mls	r1, lr, r0, r1
 800060e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000612:	fb00 f808 	mul.w	r8, r0, r8
 8000616:	45b8      	cmp	r8, r7
 8000618:	d907      	bls.n	800062a <__udivmoddi4+0x24a>
 800061a:	19e7      	adds	r7, r4, r7
 800061c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000620:	d22e      	bcs.n	8000680 <__udivmoddi4+0x2a0>
 8000622:	45b8      	cmp	r8, r7
 8000624:	d92c      	bls.n	8000680 <__udivmoddi4+0x2a0>
 8000626:	3802      	subs	r0, #2
 8000628:	4427      	add	r7, r4
 800062a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800062e:	eba7 0708 	sub.w	r7, r7, r8
 8000632:	fba0 8902 	umull	r8, r9, r0, r2
 8000636:	454f      	cmp	r7, r9
 8000638:	46c6      	mov	lr, r8
 800063a:	4649      	mov	r1, r9
 800063c:	d31a      	bcc.n	8000674 <__udivmoddi4+0x294>
 800063e:	d017      	beq.n	8000670 <__udivmoddi4+0x290>
 8000640:	b15d      	cbz	r5, 800065a <__udivmoddi4+0x27a>
 8000642:	ebb3 020e 	subs.w	r2, r3, lr
 8000646:	eb67 0701 	sbc.w	r7, r7, r1
 800064a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800064e:	40f2      	lsrs	r2, r6
 8000650:	ea4c 0202 	orr.w	r2, ip, r2
 8000654:	40f7      	lsrs	r7, r6
 8000656:	e9c5 2700 	strd	r2, r7, [r5]
 800065a:	2600      	movs	r6, #0
 800065c:	4631      	mov	r1, r6
 800065e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000662:	462e      	mov	r6, r5
 8000664:	4628      	mov	r0, r5
 8000666:	e70b      	b.n	8000480 <__udivmoddi4+0xa0>
 8000668:	4606      	mov	r6, r0
 800066a:	e6e9      	b.n	8000440 <__udivmoddi4+0x60>
 800066c:	4618      	mov	r0, r3
 800066e:	e6fd      	b.n	800046c <__udivmoddi4+0x8c>
 8000670:	4543      	cmp	r3, r8
 8000672:	d2e5      	bcs.n	8000640 <__udivmoddi4+0x260>
 8000674:	ebb8 0e02 	subs.w	lr, r8, r2
 8000678:	eb69 0104 	sbc.w	r1, r9, r4
 800067c:	3801      	subs	r0, #1
 800067e:	e7df      	b.n	8000640 <__udivmoddi4+0x260>
 8000680:	4608      	mov	r0, r1
 8000682:	e7d2      	b.n	800062a <__udivmoddi4+0x24a>
 8000684:	4660      	mov	r0, ip
 8000686:	e78d      	b.n	80005a4 <__udivmoddi4+0x1c4>
 8000688:	4681      	mov	r9, r0
 800068a:	e7b9      	b.n	8000600 <__udivmoddi4+0x220>
 800068c:	4666      	mov	r6, ip
 800068e:	e775      	b.n	800057c <__udivmoddi4+0x19c>
 8000690:	4630      	mov	r0, r6
 8000692:	e74a      	b.n	800052a <__udivmoddi4+0x14a>
 8000694:	f1ac 0c02 	sub.w	ip, ip, #2
 8000698:	4439      	add	r1, r7
 800069a:	e713      	b.n	80004c4 <__udivmoddi4+0xe4>
 800069c:	3802      	subs	r0, #2
 800069e:	443c      	add	r4, r7
 80006a0:	e724      	b.n	80004ec <__udivmoddi4+0x10c>
 80006a2:	bf00      	nop

080006a4 <__aeabi_idiv0>:
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop

080006a8 <mySSIHandler>:
/**** SSI handler ****/
// This function is called each time the HTTPD server detects a tag of the form
// <!--#name--> in a .shtml, .ssi or .shtm file
// It won't work if the file has a .html extension.
u16_t mySSIHandler(int iIndex, char *pcInsert, int iInsertLen)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	60f8      	str	r0, [r7, #12]
 80006b0:	60b9      	str	r1, [r7, #8]
 80006b2:	607a      	str	r2, [r7, #4]
	// see which tag in the array theSSItags to handle
	if (iIndex == 0) //is “tag1”
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d116      	bne.n	80006e8 <mySSIHandler+0x40>
	{
		//char myStr1[20] = "Hello from Tag #1!"; //string to be displayed on web page
		pmystr = &myStr1[0];
 80006ba:	4b33      	ldr	r3, [pc, #204]	; (8000788 <mySSIHandler+0xe0>)
 80006bc:	4a33      	ldr	r2, [pc, #204]	; (800078c <mySSIHandler+0xe4>)
 80006be:	601a      	str	r2, [r3, #0]
		//g_COUNT_SEC++;
		//pReg1 = &g_COUNT_SEC;
		sprintf(pmystr, "%ld", g_COUNT_SEC);
 80006c0:	4b31      	ldr	r3, [pc, #196]	; (8000788 <mySSIHandler+0xe0>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a32      	ldr	r2, [pc, #200]	; (8000790 <mySSIHandler+0xe8>)
 80006c6:	6812      	ldr	r2, [r2, #0]
 80006c8:	4932      	ldr	r1, [pc, #200]	; (8000794 <mySSIHandler+0xec>)
 80006ca:	4618      	mov	r0, r3
 80006cc:	f014 fa4e 	bl	8014b6c <siprintf>
		//sprintf(pmystr, "%2.1f", Reg1);
		//ADCVal = ADCVal + 1;
		//Reg1 = Reg1 + 1.2345;
		//copy the string to be displayed to pcInsert
		strcpy(pcInsert, pmystr);
 80006d0:	4b2d      	ldr	r3, [pc, #180]	; (8000788 <mySSIHandler+0xe0>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4619      	mov	r1, r3
 80006d6:	68b8      	ldr	r0, [r7, #8]
 80006d8:	f014 fa75 	bl	8014bc6 <strcpy>
		//return number of characters that need to be inserted in html
		return strlen(myStr1);
 80006dc:	482b      	ldr	r0, [pc, #172]	; (800078c <mySSIHandler+0xe4>)
 80006de:	f7ff fe09 	bl	80002f4 <strlen>
 80006e2:	4603      	mov	r3, r0
 80006e4:	b29b      	uxth	r3, r3
 80006e6:	e04b      	b.n	8000780 <mySSIHandler+0xd8>
	}
	else if (iIndex == 1) //is “tag2”
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	2b01      	cmp	r3, #1
 80006ec:	d115      	bne.n	800071a <mySSIHandler+0x72>
	{
		//char myStr2[] = "Hello from Tag #2!"; //string to be displayed on web page
		pmystr = &myStr1[0];
 80006ee:	4b26      	ldr	r3, [pc, #152]	; (8000788 <mySSIHandler+0xe0>)
 80006f0:	4a26      	ldr	r2, [pc, #152]	; (800078c <mySSIHandler+0xe4>)
 80006f2:	601a      	str	r2, [r3, #0]
		sprintf(pmystr, "%d", 2);
 80006f4:	4b24      	ldr	r3, [pc, #144]	; (8000788 <mySSIHandler+0xe0>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	2202      	movs	r2, #2
 80006fa:	4927      	ldr	r1, [pc, #156]	; (8000798 <mySSIHandler+0xf0>)
 80006fc:	4618      	mov	r0, r3
 80006fe:	f014 fa35 	bl	8014b6c <siprintf>

		//copy string to be displayed
		strcpy(pcInsert, pmystr);
 8000702:	4b21      	ldr	r3, [pc, #132]	; (8000788 <mySSIHandler+0xe0>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	4619      	mov	r1, r3
 8000708:	68b8      	ldr	r0, [r7, #8]
 800070a:	f014 fa5c 	bl	8014bc6 <strcpy>
		//return number of characters that need to be inserted in html
		return strlen(myStr1);
 800070e:	481f      	ldr	r0, [pc, #124]	; (800078c <mySSIHandler+0xe4>)
 8000710:	f7ff fdf0 	bl	80002f4 <strlen>
 8000714:	4603      	mov	r3, r0
 8000716:	b29b      	uxth	r3, r3
 8000718:	e032      	b.n	8000780 <mySSIHandler+0xd8>
	}
	else if (iIndex == 2) //is “tag3”
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	2b02      	cmp	r3, #2
 800071e:	d115      	bne.n	800074c <mySSIHandler+0xa4>
		{
			//char myStr2[] = "Hello from Tag #2!"; //string to be displayed on web page
			pmystr = &myStr1[0];
 8000720:	4b19      	ldr	r3, [pc, #100]	; (8000788 <mySSIHandler+0xe0>)
 8000722:	4a1a      	ldr	r2, [pc, #104]	; (800078c <mySSIHandler+0xe4>)
 8000724:	601a      	str	r2, [r3, #0]
			sprintf(pmystr, "%d", 3);
 8000726:	4b18      	ldr	r3, [pc, #96]	; (8000788 <mySSIHandler+0xe0>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	2203      	movs	r2, #3
 800072c:	491a      	ldr	r1, [pc, #104]	; (8000798 <mySSIHandler+0xf0>)
 800072e:	4618      	mov	r0, r3
 8000730:	f014 fa1c 	bl	8014b6c <siprintf>
			//copy string to be displayed
			strcpy(pcInsert, pmystr);
 8000734:	4b14      	ldr	r3, [pc, #80]	; (8000788 <mySSIHandler+0xe0>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4619      	mov	r1, r3
 800073a:	68b8      	ldr	r0, [r7, #8]
 800073c:	f014 fa43 	bl	8014bc6 <strcpy>
			//return number of characters that need to be inserted in html
			return strlen(myStr1);
 8000740:	4812      	ldr	r0, [pc, #72]	; (800078c <mySSIHandler+0xe4>)
 8000742:	f7ff fdd7 	bl	80002f4 <strlen>
 8000746:	4603      	mov	r3, r0
 8000748:	b29b      	uxth	r3, r3
 800074a:	e019      	b.n	8000780 <mySSIHandler+0xd8>
		}
	else if (iIndex == 3) //is “tag4”
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	2b03      	cmp	r3, #3
 8000750:	d115      	bne.n	800077e <mySSIHandler+0xd6>
		{
			//char myStr2[] = "Hello from Tag #2!"; //string to be displayed on web page
			pmystr = &myStr1[0];
 8000752:	4b0d      	ldr	r3, [pc, #52]	; (8000788 <mySSIHandler+0xe0>)
 8000754:	4a0d      	ldr	r2, [pc, #52]	; (800078c <mySSIHandler+0xe4>)
 8000756:	601a      	str	r2, [r3, #0]
			sprintf(pmystr, "%d", 4);
 8000758:	4b0b      	ldr	r3, [pc, #44]	; (8000788 <mySSIHandler+0xe0>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	2204      	movs	r2, #4
 800075e:	490e      	ldr	r1, [pc, #56]	; (8000798 <mySSIHandler+0xf0>)
 8000760:	4618      	mov	r0, r3
 8000762:	f014 fa03 	bl	8014b6c <siprintf>
			//copy string to be displayed
			strcpy(pcInsert, pmystr);
 8000766:	4b08      	ldr	r3, [pc, #32]	; (8000788 <mySSIHandler+0xe0>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	4619      	mov	r1, r3
 800076c:	68b8      	ldr	r0, [r7, #8]
 800076e:	f014 fa2a 	bl	8014bc6 <strcpy>
			//return number of characters that need to be inserted in html
			return strlen(myStr1);
 8000772:	4806      	ldr	r0, [pc, #24]	; (800078c <mySSIHandler+0xe4>)
 8000774:	f7ff fdbe 	bl	80002f4 <strlen>
 8000778:	4603      	mov	r3, r0
 800077a:	b29b      	uxth	r3, r3
 800077c:	e000      	b.n	8000780 <mySSIHandler+0xd8>
		}
	return 0;
 800077e:	2300      	movs	r3, #0
} //mySSIHandler
 8000780:	4618      	mov	r0, r3
 8000782:	3710      	adds	r7, #16
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	240006cc 	.word	0x240006cc
 800078c:	240006a4 	.word	0x240006a4
 8000790:	24000b8c 	.word	0x24000b8c
 8000794:	08015edc 	.word	0x08015edc
 8000798:	08015ee0 	.word	0x08015ee0

0800079c <http_server_init>:

/**
  * @brief  Http webserver Init
  */
void http_server_init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* Httpd Init */
  httpd_init();
 80007a0:	f009 fb52 	bl	8009e48 <httpd_init>
  
  /* configure SSI handlers (ADC page SSI) */
  //http_set_ssi_handler(ADC_Handler, (char const **)TAGS, 1);
  http_set_ssi_handler(mySSIHandler, (char const **)theSSItags, numSSItags);
 80007a4:	2204      	movs	r2, #4
 80007a6:	4903      	ldr	r1, [pc, #12]	; (80007b4 <http_server_init+0x18>)
 80007a8:	4803      	ldr	r0, [pc, #12]	; (80007b8 <http_server_init+0x1c>)
 80007aa:	f009 fb6d 	bl	8009e88 <http_set_ssi_handler>
  
  /* configure CGI handlers (LEDs control CGI) */
  //CGI_TAB[0] = LEDS_CGI;
  //http_set_cgi_handlers(CGI_TAB, 1);
}
 80007ae:	bf00      	nop
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	24000000 	.word	0x24000000
 80007b8:	080006a9 	.word	0x080006a9

080007bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b084      	sub	sp, #16
 80007c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80007c2:	f000 faa3 	bl	8000d0c <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80007c6:	4b41      	ldr	r3, [pc, #260]	; (80008cc <main+0x110>)
 80007c8:	695b      	ldr	r3, [r3, #20]
 80007ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d11b      	bne.n	800080a <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80007d2:	f3bf 8f4f 	dsb	sy
}
 80007d6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80007d8:	f3bf 8f6f 	isb	sy
}
 80007dc:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80007de:	4b3b      	ldr	r3, [pc, #236]	; (80008cc <main+0x110>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80007e6:	f3bf 8f4f 	dsb	sy
}
 80007ea:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80007ec:	f3bf 8f6f 	isb	sy
}
 80007f0:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80007f2:	4b36      	ldr	r3, [pc, #216]	; (80008cc <main+0x110>)
 80007f4:	695b      	ldr	r3, [r3, #20]
 80007f6:	4a35      	ldr	r2, [pc, #212]	; (80008cc <main+0x110>)
 80007f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007fc:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80007fe:	f3bf 8f4f 	dsb	sy
}
 8000802:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000804:	f3bf 8f6f 	isb	sy
}
 8000808:	e000      	b.n	800080c <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800080a:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800080c:	4b2f      	ldr	r3, [pc, #188]	; (80008cc <main+0x110>)
 800080e:	695b      	ldr	r3, [r3, #20]
 8000810:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000814:	2b00      	cmp	r3, #0
 8000816:	d138      	bne.n	800088a <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000818:	4b2c      	ldr	r3, [pc, #176]	; (80008cc <main+0x110>)
 800081a:	2200      	movs	r2, #0
 800081c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000820:	f3bf 8f4f 	dsb	sy
}
 8000824:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000826:	4b29      	ldr	r3, [pc, #164]	; (80008cc <main+0x110>)
 8000828:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800082c:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	0b5b      	lsrs	r3, r3, #13
 8000832:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000836:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	08db      	lsrs	r3, r3, #3
 800083c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000840:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000842:	68bb      	ldr	r3, [r7, #8]
 8000844:	015a      	lsls	r2, r3, #5
 8000846:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800084a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800084c:	687a      	ldr	r2, [r7, #4]
 800084e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000850:	491e      	ldr	r1, [pc, #120]	; (80008cc <main+0x110>)
 8000852:	4313      	orrs	r3, r2
 8000854:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	1e5a      	subs	r2, r3, #1
 800085c:	607a      	str	r2, [r7, #4]
 800085e:	2b00      	cmp	r3, #0
 8000860:	d1ef      	bne.n	8000842 <main+0x86>
    } while(sets-- != 0U);
 8000862:	68bb      	ldr	r3, [r7, #8]
 8000864:	1e5a      	subs	r2, r3, #1
 8000866:	60ba      	str	r2, [r7, #8]
 8000868:	2b00      	cmp	r3, #0
 800086a:	d1e5      	bne.n	8000838 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 800086c:	f3bf 8f4f 	dsb	sy
}
 8000870:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000872:	4b16      	ldr	r3, [pc, #88]	; (80008cc <main+0x110>)
 8000874:	695b      	ldr	r3, [r3, #20]
 8000876:	4a15      	ldr	r2, [pc, #84]	; (80008cc <main+0x110>)
 8000878:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800087c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800087e:	f3bf 8f4f 	dsb	sy
}
 8000882:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000884:	f3bf 8f6f 	isb	sy
}
 8000888:	e000      	b.n	800088c <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800088a:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800088c:	f001 f89a 	bl	80019c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000890:	f000 f822 	bl	80008d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000894:	f000 f918 	bl	8000ac8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000898:	f000 f898 	bl	80009cc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800089c:	f000 f8e2 	bl	8000a64 <MX_USB_OTG_FS_PCD_Init>
  MX_LWIP_Init();
 80008a0:	f007 faae 	bl	8007e00 <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */
  tcp_echoserver_init();
 80008a4:	f000 fd08 	bl	80012b8 <tcp_echoserver_init>
  http_server_init();
 80008a8:	f7ff ff78 	bl	800079c <http_server_init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	   if (Timer_sys[1] == 0)
 80008ac:	4b08      	ldr	r3, [pc, #32]	; (80008d0 <main+0x114>)
 80008ae:	885b      	ldrh	r3, [r3, #2]
 80008b0:	b29b      	uxth	r3, r3
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d106      	bne.n	80008c4 <main+0x108>
	  {
		 Timer_sys[1] = 200;
 80008b6:	4b06      	ldr	r3, [pc, #24]	; (80008d0 <main+0x114>)
 80008b8:	22c8      	movs	r2, #200	; 0xc8
 80008ba:	805a      	strh	r2, [r3, #2]
		 HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 80008bc:	2102      	movs	r1, #2
 80008be:	4805      	ldr	r0, [pc, #20]	; (80008d4 <main+0x118>)
 80008c0:	f003 fb15 	bl	8003eee <HAL_GPIO_TogglePin>
	  }
	  MX_LWIP_Process();
 80008c4:	f007 fbe8 	bl	8008098 <MX_LWIP_Process>
	   if (Timer_sys[1] == 0)
 80008c8:	e7f0      	b.n	80008ac <main+0xf0>
 80008ca:	bf00      	nop
 80008cc:	e000ed00 	.word	0xe000ed00
 80008d0:	24000b7c 	.word	0x24000b7c
 80008d4:	58021000 	.word	0x58021000

080008d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b09c      	sub	sp, #112	; 0x70
 80008dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008e2:	224c      	movs	r2, #76	; 0x4c
 80008e4:	2100      	movs	r1, #0
 80008e6:	4618      	mov	r0, r3
 80008e8:	f014 f8e0 	bl	8014aac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008ec:	1d3b      	adds	r3, r7, #4
 80008ee:	2220      	movs	r2, #32
 80008f0:	2100      	movs	r1, #0
 80008f2:	4618      	mov	r0, r3
 80008f4:	f014 f8da 	bl	8014aac <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80008f8:	2002      	movs	r0, #2
 80008fa:	f003 fc5b 	bl	80041b4 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008fe:	2300      	movs	r3, #0
 8000900:	603b      	str	r3, [r7, #0]
 8000902:	4b30      	ldr	r3, [pc, #192]	; (80009c4 <SystemClock_Config+0xec>)
 8000904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000906:	4a2f      	ldr	r2, [pc, #188]	; (80009c4 <SystemClock_Config+0xec>)
 8000908:	f023 0301 	bic.w	r3, r3, #1
 800090c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800090e:	4b2d      	ldr	r3, [pc, #180]	; (80009c4 <SystemClock_Config+0xec>)
 8000910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000912:	f003 0301 	and.w	r3, r3, #1
 8000916:	603b      	str	r3, [r7, #0]
 8000918:	4b2b      	ldr	r3, [pc, #172]	; (80009c8 <SystemClock_Config+0xf0>)
 800091a:	699b      	ldr	r3, [r3, #24]
 800091c:	4a2a      	ldr	r2, [pc, #168]	; (80009c8 <SystemClock_Config+0xf0>)
 800091e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000922:	6193      	str	r3, [r2, #24]
 8000924:	4b28      	ldr	r3, [pc, #160]	; (80009c8 <SystemClock_Config+0xf0>)
 8000926:	699b      	ldr	r3, [r3, #24]
 8000928:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800092c:	603b      	str	r3, [r7, #0]
 800092e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000930:	bf00      	nop
 8000932:	4b25      	ldr	r3, [pc, #148]	; (80009c8 <SystemClock_Config+0xf0>)
 8000934:	699b      	ldr	r3, [r3, #24]
 8000936:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800093a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800093e:	d1f8      	bne.n	8000932 <SystemClock_Config+0x5a>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000940:	2301      	movs	r3, #1
 8000942:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000944:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000948:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800094a:	2302      	movs	r3, #2
 800094c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800094e:	2302      	movs	r3, #2
 8000950:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000952:	2301      	movs	r3, #1
 8000954:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000956:	2364      	movs	r3, #100	; 0x64
 8000958:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800095a:	2302      	movs	r3, #2
 800095c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 13;
 800095e:	230d      	movs	r3, #13
 8000960:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000962:	2302      	movs	r3, #2
 8000964:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000966:	230c      	movs	r3, #12
 8000968:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800096a:	2300      	movs	r3, #0
 800096c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800096e:	2300      	movs	r3, #0
 8000970:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000972:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000976:	4618      	mov	r0, r3
 8000978:	f003 fc66 	bl	8004248 <HAL_RCC_OscConfig>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000982:	f000 fa0d 	bl	8000da0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000986:	233f      	movs	r3, #63	; 0x3f
 8000988:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800098a:	2303      	movs	r3, #3
 800098c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800098e:	2300      	movs	r3, #0
 8000990:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000992:	2308      	movs	r3, #8
 8000994:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000996:	2340      	movs	r3, #64	; 0x40
 8000998:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800099a:	2340      	movs	r3, #64	; 0x40
 800099c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800099e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009a2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80009a4:	2340      	movs	r3, #64	; 0x40
 80009a6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009a8:	1d3b      	adds	r3, r7, #4
 80009aa:	2102      	movs	r1, #2
 80009ac:	4618      	mov	r0, r3
 80009ae:	f004 f85b 	bl	8004a68 <HAL_RCC_ClockConfig>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <SystemClock_Config+0xe4>
  {
    Error_Handler();
 80009b8:	f000 f9f2 	bl	8000da0 <Error_Handler>
  }
}
 80009bc:	bf00      	nop
 80009be:	3770      	adds	r7, #112	; 0x70
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	58000400 	.word	0x58000400
 80009c8:	58024800 	.word	0x58024800

080009cc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009d0:	4b22      	ldr	r3, [pc, #136]	; (8000a5c <MX_USART3_UART_Init+0x90>)
 80009d2:	4a23      	ldr	r2, [pc, #140]	; (8000a60 <MX_USART3_UART_Init+0x94>)
 80009d4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009d6:	4b21      	ldr	r3, [pc, #132]	; (8000a5c <MX_USART3_UART_Init+0x90>)
 80009d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009dc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009de:	4b1f      	ldr	r3, [pc, #124]	; (8000a5c <MX_USART3_UART_Init+0x90>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009e4:	4b1d      	ldr	r3, [pc, #116]	; (8000a5c <MX_USART3_UART_Init+0x90>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009ea:	4b1c      	ldr	r3, [pc, #112]	; (8000a5c <MX_USART3_UART_Init+0x90>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009f0:	4b1a      	ldr	r3, [pc, #104]	; (8000a5c <MX_USART3_UART_Init+0x90>)
 80009f2:	220c      	movs	r2, #12
 80009f4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009f6:	4b19      	ldr	r3, [pc, #100]	; (8000a5c <MX_USART3_UART_Init+0x90>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009fc:	4b17      	ldr	r3, [pc, #92]	; (8000a5c <MX_USART3_UART_Init+0x90>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a02:	4b16      	ldr	r3, [pc, #88]	; (8000a5c <MX_USART3_UART_Init+0x90>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a08:	4b14      	ldr	r3, [pc, #80]	; (8000a5c <MX_USART3_UART_Init+0x90>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a0e:	4b13      	ldr	r3, [pc, #76]	; (8000a5c <MX_USART3_UART_Init+0x90>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a14:	4811      	ldr	r0, [pc, #68]	; (8000a5c <MX_USART3_UART_Init+0x90>)
 8000a16:	f005 ff15 	bl	8006844 <HAL_UART_Init>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000a20:	f000 f9be 	bl	8000da0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a24:	2100      	movs	r1, #0
 8000a26:	480d      	ldr	r0, [pc, #52]	; (8000a5c <MX_USART3_UART_Init+0x90>)
 8000a28:	f006 fe62 	bl	80076f0 <HAL_UARTEx_SetTxFifoThreshold>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000a32:	f000 f9b5 	bl	8000da0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a36:	2100      	movs	r1, #0
 8000a38:	4808      	ldr	r0, [pc, #32]	; (8000a5c <MX_USART3_UART_Init+0x90>)
 8000a3a:	f006 fe97 	bl	800776c <HAL_UARTEx_SetRxFifoThreshold>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000a44:	f000 f9ac 	bl	8000da0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000a48:	4804      	ldr	r0, [pc, #16]	; (8000a5c <MX_USART3_UART_Init+0x90>)
 8000a4a:	f006 fe18 	bl	800767e <HAL_UARTEx_DisableFifoMode>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000a54:	f000 f9a4 	bl	8000da0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a58:	bf00      	nop
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	240006dc 	.word	0x240006dc
 8000a60:	40004800 	.word	0x40004800

08000a64 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000a68:	4b15      	ldr	r3, [pc, #84]	; (8000ac0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a6a:	4a16      	ldr	r2, [pc, #88]	; (8000ac4 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000a6c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000a6e:	4b14      	ldr	r3, [pc, #80]	; (8000ac0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a70:	2209      	movs	r2, #9
 8000a72:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000a74:	4b12      	ldr	r3, [pc, #72]	; (8000ac0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a76:	2202      	movs	r2, #2
 8000a78:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000a7a:	4b11      	ldr	r3, [pc, #68]	; (8000ac0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a80:	4b0f      	ldr	r3, [pc, #60]	; (8000ac0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a82:	2202      	movs	r2, #2
 8000a84:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000a86:	4b0e      	ldr	r3, [pc, #56]	; (8000ac0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a88:	2201      	movs	r2, #1
 8000a8a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000a8c:	4b0c      	ldr	r3, [pc, #48]	; (8000ac0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000a92:	4b0b      	ldr	r3, [pc, #44]	; (8000ac0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000a98:	4b09      	ldr	r3, [pc, #36]	; (8000ac0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000a9e:	4b08      	ldr	r3, [pc, #32]	; (8000ac0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000aa4:	4b06      	ldr	r3, [pc, #24]	; (8000ac0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000aaa:	4805      	ldr	r0, [pc, #20]	; (8000ac0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000aac:	f003 fa39 	bl	8003f22 <HAL_PCD_Init>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000ab6:	f000 f973 	bl	8000da0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000aba:	bf00      	nop
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	24000770 	.word	0x24000770
 8000ac4:	40080000 	.word	0x40080000

08000ac8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b08c      	sub	sp, #48	; 0x30
 8000acc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ace:	f107 031c 	add.w	r3, r7, #28
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	601a      	str	r2, [r3, #0]
 8000ad6:	605a      	str	r2, [r3, #4]
 8000ad8:	609a      	str	r2, [r3, #8]
 8000ada:	60da      	str	r2, [r3, #12]
 8000adc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ade:	4b60      	ldr	r3, [pc, #384]	; (8000c60 <MX_GPIO_Init+0x198>)
 8000ae0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ae4:	4a5e      	ldr	r2, [pc, #376]	; (8000c60 <MX_GPIO_Init+0x198>)
 8000ae6:	f043 0304 	orr.w	r3, r3, #4
 8000aea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aee:	4b5c      	ldr	r3, [pc, #368]	; (8000c60 <MX_GPIO_Init+0x198>)
 8000af0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000af4:	f003 0304 	and.w	r3, r3, #4
 8000af8:	61bb      	str	r3, [r7, #24]
 8000afa:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000afc:	4b58      	ldr	r3, [pc, #352]	; (8000c60 <MX_GPIO_Init+0x198>)
 8000afe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b02:	4a57      	ldr	r2, [pc, #348]	; (8000c60 <MX_GPIO_Init+0x198>)
 8000b04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b08:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b0c:	4b54      	ldr	r3, [pc, #336]	; (8000c60 <MX_GPIO_Init+0x198>)
 8000b0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b16:	617b      	str	r3, [r7, #20]
 8000b18:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b1a:	4b51      	ldr	r3, [pc, #324]	; (8000c60 <MX_GPIO_Init+0x198>)
 8000b1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b20:	4a4f      	ldr	r2, [pc, #316]	; (8000c60 <MX_GPIO_Init+0x198>)
 8000b22:	f043 0301 	orr.w	r3, r3, #1
 8000b26:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b2a:	4b4d      	ldr	r3, [pc, #308]	; (8000c60 <MX_GPIO_Init+0x198>)
 8000b2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b30:	f003 0301 	and.w	r3, r3, #1
 8000b34:	613b      	str	r3, [r7, #16]
 8000b36:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b38:	4b49      	ldr	r3, [pc, #292]	; (8000c60 <MX_GPIO_Init+0x198>)
 8000b3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b3e:	4a48      	ldr	r2, [pc, #288]	; (8000c60 <MX_GPIO_Init+0x198>)
 8000b40:	f043 0302 	orr.w	r3, r3, #2
 8000b44:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b48:	4b45      	ldr	r3, [pc, #276]	; (8000c60 <MX_GPIO_Init+0x198>)
 8000b4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b4e:	f003 0302 	and.w	r3, r3, #2
 8000b52:	60fb      	str	r3, [r7, #12]
 8000b54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b56:	4b42      	ldr	r3, [pc, #264]	; (8000c60 <MX_GPIO_Init+0x198>)
 8000b58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b5c:	4a40      	ldr	r2, [pc, #256]	; (8000c60 <MX_GPIO_Init+0x198>)
 8000b5e:	f043 0308 	orr.w	r3, r3, #8
 8000b62:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b66:	4b3e      	ldr	r3, [pc, #248]	; (8000c60 <MX_GPIO_Init+0x198>)
 8000b68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b6c:	f003 0308 	and.w	r3, r3, #8
 8000b70:	60bb      	str	r3, [r7, #8]
 8000b72:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b74:	4b3a      	ldr	r3, [pc, #232]	; (8000c60 <MX_GPIO_Init+0x198>)
 8000b76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b7a:	4a39      	ldr	r2, [pc, #228]	; (8000c60 <MX_GPIO_Init+0x198>)
 8000b7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b80:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b84:	4b36      	ldr	r3, [pc, #216]	; (8000c60 <MX_GPIO_Init+0x198>)
 8000b86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b8e:	607b      	str	r3, [r7, #4]
 8000b90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b92:	4b33      	ldr	r3, [pc, #204]	; (8000c60 <MX_GPIO_Init+0x198>)
 8000b94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b98:	4a31      	ldr	r2, [pc, #196]	; (8000c60 <MX_GPIO_Init+0x198>)
 8000b9a:	f043 0310 	orr.w	r3, r3, #16
 8000b9e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ba2:	4b2f      	ldr	r3, [pc, #188]	; (8000c60 <MX_GPIO_Init+0x198>)
 8000ba4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ba8:	f003 0310 	and.w	r3, r3, #16
 8000bac:	603b      	str	r3, [r7, #0]
 8000bae:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	f244 0101 	movw	r1, #16385	; 0x4001
 8000bb6:	482b      	ldr	r0, [pc, #172]	; (8000c64 <MX_GPIO_Init+0x19c>)
 8000bb8:	f003 f980 	bl	8003ebc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	2140      	movs	r1, #64	; 0x40
 8000bc0:	4829      	ldr	r0, [pc, #164]	; (8000c68 <MX_GPIO_Init+0x1a0>)
 8000bc2:	f003 f97b 	bl	8003ebc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	2102      	movs	r1, #2
 8000bca:	4828      	ldr	r0, [pc, #160]	; (8000c6c <MX_GPIO_Init+0x1a4>)
 8000bcc:	f003 f976 	bl	8003ebc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000bd0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bd6:	4b26      	ldr	r3, [pc, #152]	; (8000c70 <MX_GPIO_Init+0x1a8>)
 8000bd8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000bde:	f107 031c 	add.w	r3, r7, #28
 8000be2:	4619      	mov	r1, r3
 8000be4:	4823      	ldr	r0, [pc, #140]	; (8000c74 <MX_GPIO_Init+0x1ac>)
 8000be6:	f002 ffb9 	bl	8003b5c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000bea:	f244 0301 	movw	r3, #16385	; 0x4001
 8000bee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bfc:	f107 031c 	add.w	r3, r7, #28
 8000c00:	4619      	mov	r1, r3
 8000c02:	4818      	ldr	r0, [pc, #96]	; (8000c64 <MX_GPIO_Init+0x19c>)
 8000c04:	f002 ffaa 	bl	8003b5c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000c08:	2340      	movs	r3, #64	; 0x40
 8000c0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c10:	2300      	movs	r3, #0
 8000c12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c14:	2300      	movs	r3, #0
 8000c16:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000c18:	f107 031c 	add.w	r3, r7, #28
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	4812      	ldr	r0, [pc, #72]	; (8000c68 <MX_GPIO_Init+0x1a0>)
 8000c20:	f002 ff9c 	bl	8003b5c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000c24:	2380      	movs	r3, #128	; 0x80
 8000c26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c30:	f107 031c 	add.w	r3, r7, #28
 8000c34:	4619      	mov	r1, r3
 8000c36:	480c      	ldr	r0, [pc, #48]	; (8000c68 <MX_GPIO_Init+0x1a0>)
 8000c38:	f002 ff90 	bl	8003b5c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c3c:	2302      	movs	r3, #2
 8000c3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c40:	2301      	movs	r3, #1
 8000c42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c44:	2300      	movs	r3, #0
 8000c46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c4c:	f107 031c 	add.w	r3, r7, #28
 8000c50:	4619      	mov	r1, r3
 8000c52:	4806      	ldr	r0, [pc, #24]	; (8000c6c <MX_GPIO_Init+0x1a4>)
 8000c54:	f002 ff82 	bl	8003b5c <HAL_GPIO_Init>

}
 8000c58:	bf00      	nop
 8000c5a:	3730      	adds	r7, #48	; 0x30
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	58024400 	.word	0x58024400
 8000c64:	58020400 	.word	0x58020400
 8000c68:	58021800 	.word	0x58021800
 8000c6c:	58021000 	.word	0x58021000
 8000c70:	11110000 	.word	0x11110000
 8000c74:	58020800 	.word	0x58020800

08000c78 <HAL_SYSTICK_Callback>:

/* USER CODE BEGIN 4 */

void HAL_SYSTICK_Callback(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
	uint16_t t_timer;
	uint8_t i;

	Licznikms++;                        /* increment counter necessary in Delay() */
 8000c7e:	4b1e      	ldr	r3, [pc, #120]	; (8000cf8 <HAL_SYSTICK_Callback+0x80>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	3301      	adds	r3, #1
 8000c84:	4a1c      	ldr	r2, [pc, #112]	; (8000cf8 <HAL_SYSTICK_Callback+0x80>)
 8000c86:	6013      	str	r3, [r2, #0]
	uwTickms++;
 8000c88:	4b1c      	ldr	r3, [pc, #112]	; (8000cfc <HAL_SYSTICK_Callback+0x84>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	3301      	adds	r3, #1
 8000c8e:	4a1b      	ldr	r2, [pc, #108]	; (8000cfc <HAL_SYSTICK_Callback+0x84>)
 8000c90:	6013      	str	r3, [r2, #0]
	Tickms++;
 8000c92:	4b1b      	ldr	r3, [pc, #108]	; (8000d00 <HAL_SYSTICK_Callback+0x88>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	3301      	adds	r3, #1
 8000c98:	4a19      	ldr	r2, [pc, #100]	; (8000d00 <HAL_SYSTICK_Callback+0x88>)
 8000c9a:	6013      	str	r3, [r2, #0]

	if (Tickms >= 1000)
 8000c9c:	4b18      	ldr	r3, [pc, #96]	; (8000d00 <HAL_SYSTICK_Callback+0x88>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000ca4:	d307      	bcc.n	8000cb6 <HAL_SYSTICK_Callback+0x3e>
	{
		Tickms = 0;
 8000ca6:	4b16      	ldr	r3, [pc, #88]	; (8000d00 <HAL_SYSTICK_Callback+0x88>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
		//Ticks++;
		g_COUNT_SEC++;
 8000cac:	4b15      	ldr	r3, [pc, #84]	; (8000d04 <HAL_SYSTICK_Callback+0x8c>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	3301      	adds	r3, #1
 8000cb2:	4a14      	ldr	r2, [pc, #80]	; (8000d04 <HAL_SYSTICK_Callback+0x8c>)
 8000cb4:	6013      	str	r3, [r2, #0]
	}

	// obsluga timerow systemowych
	for (i = 0; i< ELEMS(Timer_sys); i++)
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	71fb      	strb	r3, [r7, #7]
 8000cba:	e012      	b.n	8000ce2 <HAL_SYSTICK_Callback+0x6a>
	{
		t_timer = Timer_sys[i];
 8000cbc:	79fb      	ldrb	r3, [r7, #7]
 8000cbe:	4a12      	ldr	r2, [pc, #72]	; (8000d08 <HAL_SYSTICK_Callback+0x90>)
 8000cc0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000cc4:	80bb      	strh	r3, [r7, #4]
		if (t_timer) Timer_sys[i] = --t_timer;
 8000cc6:	88bb      	ldrh	r3, [r7, #4]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d007      	beq.n	8000cdc <HAL_SYSTICK_Callback+0x64>
 8000ccc:	88bb      	ldrh	r3, [r7, #4]
 8000cce:	3b01      	subs	r3, #1
 8000cd0:	80bb      	strh	r3, [r7, #4]
 8000cd2:	79fb      	ldrb	r3, [r7, #7]
 8000cd4:	490c      	ldr	r1, [pc, #48]	; (8000d08 <HAL_SYSTICK_Callback+0x90>)
 8000cd6:	88ba      	ldrh	r2, [r7, #4]
 8000cd8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for (i = 0; i< ELEMS(Timer_sys); i++)
 8000cdc:	79fb      	ldrb	r3, [r7, #7]
 8000cde:	3301      	adds	r3, #1
 8000ce0:	71fb      	strb	r3, [r7, #7]
 8000ce2:	79fb      	ldrb	r3, [r7, #7]
 8000ce4:	2b05      	cmp	r3, #5
 8000ce6:	d9e9      	bls.n	8000cbc <HAL_SYSTICK_Callback+0x44>

	}
}
 8000ce8:	bf00      	nop
 8000cea:	bf00      	nop
 8000cec:	370c      	adds	r7, #12
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	24000b88 	.word	0x24000b88
 8000cfc:	24000b78 	.word	0x24000b78
 8000d00:	2400076c 	.word	0x2400076c
 8000d04:	24000b8c 	.word	0x24000b8c
 8000d08:	24000b7c 	.word	0x24000b7c

08000d0c <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b084      	sub	sp, #16
 8000d10:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000d12:	463b      	mov	r3, r7
 8000d14:	2200      	movs	r2, #0
 8000d16:	601a      	str	r2, [r3, #0]
 8000d18:	605a      	str	r2, [r3, #4]
 8000d1a:	609a      	str	r2, [r3, #8]
 8000d1c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000d1e:	f001 f837 	bl	8001d90 <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000d22:	2301      	movs	r3, #1
 8000d24:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000d26:	2300      	movs	r3, #0
 8000d28:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 8000d2a:	4b1b      	ldr	r3, [pc, #108]	; (8000d98 <MPU_Config+0x8c>)
 8000d2c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 8000d2e:	230d      	movs	r3, #13
 8000d30:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000d32:	2300      	movs	r3, #0
 8000d34:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000d36:	2301      	movs	r3, #1
 8000d38:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000d3a:	2303      	movs	r3, #3
 8000d3c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000d42:	2300      	movs	r3, #0
 8000d44:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000d46:	2300      	movs	r3, #0
 8000d48:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000d4e:	463b      	mov	r3, r7
 8000d50:	4618      	mov	r0, r3
 8000d52:	f001 f855 	bl	8001e00 <HAL_MPU_ConfigRegion>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000d56:	2301      	movs	r3, #1
 8000d58:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30044000;
 8000d5a:	4b10      	ldr	r3, [pc, #64]	; (8000d9c <MPU_Config+0x90>)
 8000d5c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000d62:	2301      	movs	r3, #1
 8000d64:	73bb      	strb	r3, [r7, #14]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000d66:	463b      	mov	r3, r7
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f001 f849 	bl	8001e00 <HAL_MPU_ConfigRegion>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000d6e:	2302      	movs	r3, #2
 8000d70:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 8000d72:	4b09      	ldr	r3, [pc, #36]	; (8000d98 <MPU_Config+0x8c>)
 8000d74:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
 8000d76:	2307      	movs	r3, #7
 8000d78:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000d82:	463b      	mov	r3, r7
 8000d84:	4618      	mov	r0, r3
 8000d86:	f001 f83b 	bl	8001e00 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000d8a:	2004      	movs	r0, #4
 8000d8c:	f001 f818 	bl	8001dc0 <HAL_MPU_Enable>

}
 8000d90:	bf00      	nop
 8000d92:	3710      	adds	r7, #16
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	30040000 	.word	0x30040000
 8000d9c:	30044000 	.word	0x30044000

08000da0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000da4:	b672      	cpsid	i
}
 8000da6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000da8:	e7fe      	b.n	8000da8 <Error_Handler+0x8>
	...

08000dac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000db2:	4b0a      	ldr	r3, [pc, #40]	; (8000ddc <HAL_MspInit+0x30>)
 8000db4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000db8:	4a08      	ldr	r2, [pc, #32]	; (8000ddc <HAL_MspInit+0x30>)
 8000dba:	f043 0302 	orr.w	r3, r3, #2
 8000dbe:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000dc2:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <HAL_MspInit+0x30>)
 8000dc4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000dc8:	f003 0302 	and.w	r3, r3, #2
 8000dcc:	607b      	str	r3, [r7, #4]
 8000dce:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dd0:	bf00      	nop
 8000dd2:	370c      	adds	r7, #12
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr
 8000ddc:	58024400 	.word	0x58024400

08000de0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b0b8      	sub	sp, #224	; 0xe0
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	605a      	str	r2, [r3, #4]
 8000df2:	609a      	str	r2, [r3, #8]
 8000df4:	60da      	str	r2, [r3, #12]
 8000df6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000df8:	f107 0310 	add.w	r3, r7, #16
 8000dfc:	22bc      	movs	r2, #188	; 0xbc
 8000dfe:	2100      	movs	r1, #0
 8000e00:	4618      	mov	r0, r3
 8000e02:	f013 fe53 	bl	8014aac <memset>
  if(huart->Instance==USART3)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4a25      	ldr	r2, [pc, #148]	; (8000ea0 <HAL_UART_MspInit+0xc0>)
 8000e0c:	4293      	cmp	r3, r2
 8000e0e:	d142      	bne.n	8000e96 <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000e10:	2302      	movs	r3, #2
 8000e12:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000e14:	2300      	movs	r3, #0
 8000e16:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e1a:	f107 0310 	add.w	r3, r7, #16
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f004 f9ae 	bl	8005180 <HAL_RCCEx_PeriphCLKConfig>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000e2a:	f7ff ffb9 	bl	8000da0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e2e:	4b1d      	ldr	r3, [pc, #116]	; (8000ea4 <HAL_UART_MspInit+0xc4>)
 8000e30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e34:	4a1b      	ldr	r2, [pc, #108]	; (8000ea4 <HAL_UART_MspInit+0xc4>)
 8000e36:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e3a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000e3e:	4b19      	ldr	r3, [pc, #100]	; (8000ea4 <HAL_UART_MspInit+0xc4>)
 8000e40:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e48:	60fb      	str	r3, [r7, #12]
 8000e4a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e4c:	4b15      	ldr	r3, [pc, #84]	; (8000ea4 <HAL_UART_MspInit+0xc4>)
 8000e4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e52:	4a14      	ldr	r2, [pc, #80]	; (8000ea4 <HAL_UART_MspInit+0xc4>)
 8000e54:	f043 0308 	orr.w	r3, r3, #8
 8000e58:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e5c:	4b11      	ldr	r3, [pc, #68]	; (8000ea4 <HAL_UART_MspInit+0xc4>)
 8000e5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e62:	f003 0308 	and.w	r3, r3, #8
 8000e66:	60bb      	str	r3, [r7, #8]
 8000e68:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000e6a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e6e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e72:	2302      	movs	r3, #2
 8000e74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e84:	2307      	movs	r3, #7
 8000e86:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e8a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000e8e:	4619      	mov	r1, r3
 8000e90:	4805      	ldr	r0, [pc, #20]	; (8000ea8 <HAL_UART_MspInit+0xc8>)
 8000e92:	f002 fe63 	bl	8003b5c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e96:	bf00      	nop
 8000e98:	37e0      	adds	r7, #224	; 0xe0
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	40004800 	.word	0x40004800
 8000ea4:	58024400 	.word	0x58024400
 8000ea8:	58020c00 	.word	0x58020c00

08000eac <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b0b8      	sub	sp, #224	; 0xe0
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000eb8:	2200      	movs	r2, #0
 8000eba:	601a      	str	r2, [r3, #0]
 8000ebc:	605a      	str	r2, [r3, #4]
 8000ebe:	609a      	str	r2, [r3, #8]
 8000ec0:	60da      	str	r2, [r3, #12]
 8000ec2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ec4:	f107 0310 	add.w	r3, r7, #16
 8000ec8:	22bc      	movs	r2, #188	; 0xbc
 8000eca:	2100      	movs	r1, #0
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f013 fded 	bl	8014aac <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4a2f      	ldr	r2, [pc, #188]	; (8000f94 <HAL_PCD_MspInit+0xe8>)
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d156      	bne.n	8000f8a <HAL_PCD_MspInit+0xde>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000edc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000ee0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000ee2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000ee6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000eea:	f107 0310 	add.w	r3, r7, #16
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f004 f946 	bl	8005180 <HAL_RCCEx_PeriphCLKConfig>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 8000efa:	f7ff ff51 	bl	8000da0 <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8000efe:	f003 f993 	bl	8004228 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f02:	4b25      	ldr	r3, [pc, #148]	; (8000f98 <HAL_PCD_MspInit+0xec>)
 8000f04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f08:	4a23      	ldr	r2, [pc, #140]	; (8000f98 <HAL_PCD_MspInit+0xec>)
 8000f0a:	f043 0301 	orr.w	r3, r3, #1
 8000f0e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f12:	4b21      	ldr	r3, [pc, #132]	; (8000f98 <HAL_PCD_MspInit+0xec>)
 8000f14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f18:	f003 0301 	and.w	r3, r3, #1
 8000f1c:	60fb      	str	r3, [r7, #12]
 8000f1e:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000f20:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000f24:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f28:	2302      	movs	r3, #2
 8000f2a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f34:	2300      	movs	r3, #0
 8000f36:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000f3a:	230a      	movs	r3, #10
 8000f3c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f40:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000f44:	4619      	mov	r1, r3
 8000f46:	4815      	ldr	r0, [pc, #84]	; (8000f9c <HAL_PCD_MspInit+0xf0>)
 8000f48:	f002 fe08 	bl	8003b5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000f4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f50:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f54:	2300      	movs	r3, #0
 8000f56:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000f60:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000f64:	4619      	mov	r1, r3
 8000f66:	480d      	ldr	r0, [pc, #52]	; (8000f9c <HAL_PCD_MspInit+0xf0>)
 8000f68:	f002 fdf8 	bl	8003b5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000f6c:	4b0a      	ldr	r3, [pc, #40]	; (8000f98 <HAL_PCD_MspInit+0xec>)
 8000f6e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f72:	4a09      	ldr	r2, [pc, #36]	; (8000f98 <HAL_PCD_MspInit+0xec>)
 8000f74:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000f78:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000f7c:	4b06      	ldr	r3, [pc, #24]	; (8000f98 <HAL_PCD_MspInit+0xec>)
 8000f7e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f82:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000f86:	60bb      	str	r3, [r7, #8]
 8000f88:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000f8a:	bf00      	nop
 8000f8c:	37e0      	adds	r7, #224	; 0xe0
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	40080000 	.word	0x40080000
 8000f98:	58024400 	.word	0x58024400
 8000f9c:	58020000 	.word	0x58020000

08000fa0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fa4:	e7fe      	b.n	8000fa4 <NMI_Handler+0x4>

08000fa6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000faa:	e7fe      	b.n	8000faa <HardFault_Handler+0x4>

08000fac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fb0:	e7fe      	b.n	8000fb0 <MemManage_Handler+0x4>

08000fb2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fb2:	b480      	push	{r7}
 8000fb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fb6:	e7fe      	b.n	8000fb6 <BusFault_Handler+0x4>

08000fb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fbc:	e7fe      	b.n	8000fbc <UsageFault_Handler+0x4>

08000fbe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fc2:	bf00      	nop
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr

08000fcc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fd0:	bf00      	nop
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr

08000fda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fda:	b480      	push	{r7}
 8000fdc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fde:	bf00      	nop
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr

08000fe8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fec:	f000 fd5c 	bl	8001aa8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 8000ff0:	f000 ff4a 	bl	8001e88 <HAL_SYSTICK_IRQHandler>

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ff4:	bf00      	nop
 8000ff6:	bd80      	pop	{r7, pc}

08000ff8 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000ffc:	4802      	ldr	r0, [pc, #8]	; (8001008 <ETH_IRQHandler+0x10>)
 8000ffe:	f001 fbd1 	bl	80027a4 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001002:	bf00      	nop
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	24000cd0 	.word	0x24000cd0

0800100c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
	return 1;
 8001010:	2301      	movs	r3, #1
}
 8001012:	4618      	mov	r0, r3
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr

0800101c <_kill>:

int _kill(int pid, int sig)
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
 8001024:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001026:	4b05      	ldr	r3, [pc, #20]	; (800103c <_kill+0x20>)
 8001028:	2216      	movs	r2, #22
 800102a:	601a      	str	r2, [r3, #0]
	return -1;
 800102c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001030:	4618      	mov	r0, r3
 8001032:	370c      	adds	r7, #12
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr
 800103c:	24003c98 	.word	0x24003c98

08001040 <_exit>:

void _exit (int status)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001048:	f04f 31ff 	mov.w	r1, #4294967295
 800104c:	6878      	ldr	r0, [r7, #4]
 800104e:	f7ff ffe5 	bl	800101c <_kill>
	while (1) {}		/* Make sure we hang here */
 8001052:	e7fe      	b.n	8001052 <_exit+0x12>

08001054 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b086      	sub	sp, #24
 8001058:	af00      	add	r7, sp, #0
 800105a:	60f8      	str	r0, [r7, #12]
 800105c:	60b9      	str	r1, [r7, #8]
 800105e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001060:	2300      	movs	r3, #0
 8001062:	617b      	str	r3, [r7, #20]
 8001064:	e00a      	b.n	800107c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001066:	f3af 8000 	nop.w
 800106a:	4601      	mov	r1, r0
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	1c5a      	adds	r2, r3, #1
 8001070:	60ba      	str	r2, [r7, #8]
 8001072:	b2ca      	uxtb	r2, r1
 8001074:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	3301      	adds	r3, #1
 800107a:	617b      	str	r3, [r7, #20]
 800107c:	697a      	ldr	r2, [r7, #20]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	429a      	cmp	r2, r3
 8001082:	dbf0      	blt.n	8001066 <_read+0x12>
	}

return len;
 8001084:	687b      	ldr	r3, [r7, #4]
}
 8001086:	4618      	mov	r0, r3
 8001088:	3718      	adds	r7, #24
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}

0800108e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800108e:	b580      	push	{r7, lr}
 8001090:	b086      	sub	sp, #24
 8001092:	af00      	add	r7, sp, #0
 8001094:	60f8      	str	r0, [r7, #12]
 8001096:	60b9      	str	r1, [r7, #8]
 8001098:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800109a:	2300      	movs	r3, #0
 800109c:	617b      	str	r3, [r7, #20]
 800109e:	e009      	b.n	80010b4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	1c5a      	adds	r2, r3, #1
 80010a4:	60ba      	str	r2, [r7, #8]
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	4618      	mov	r0, r3
 80010aa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	3301      	adds	r3, #1
 80010b2:	617b      	str	r3, [r7, #20]
 80010b4:	697a      	ldr	r2, [r7, #20]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	429a      	cmp	r2, r3
 80010ba:	dbf1      	blt.n	80010a0 <_write+0x12>
	}
	return len;
 80010bc:	687b      	ldr	r3, [r7, #4]
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3718      	adds	r7, #24
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}

080010c6 <_close>:

int _close(int file)
{
 80010c6:	b480      	push	{r7}
 80010c8:	b083      	sub	sp, #12
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	6078      	str	r0, [r7, #4]
	return -1;
 80010ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	370c      	adds	r7, #12
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr

080010de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010de:	b480      	push	{r7}
 80010e0:	b083      	sub	sp, #12
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	6078      	str	r0, [r7, #4]
 80010e6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010ee:	605a      	str	r2, [r3, #4]
	return 0;
 80010f0:	2300      	movs	r3, #0
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	370c      	adds	r7, #12
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr

080010fe <_isatty>:

int _isatty(int file)
{
 80010fe:	b480      	push	{r7}
 8001100:	b083      	sub	sp, #12
 8001102:	af00      	add	r7, sp, #0
 8001104:	6078      	str	r0, [r7, #4]
	return 1;
 8001106:	2301      	movs	r3, #1
}
 8001108:	4618      	mov	r0, r3
 800110a:	370c      	adds	r7, #12
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr

08001114 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001114:	b480      	push	{r7}
 8001116:	b085      	sub	sp, #20
 8001118:	af00      	add	r7, sp, #0
 800111a:	60f8      	str	r0, [r7, #12]
 800111c:	60b9      	str	r1, [r7, #8]
 800111e:	607a      	str	r2, [r7, #4]
	return 0;
 8001120:	2300      	movs	r3, #0
}
 8001122:	4618      	mov	r0, r3
 8001124:	3714      	adds	r7, #20
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
	...

08001130 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001130:	b480      	push	{r7}
 8001132:	b087      	sub	sp, #28
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001138:	4a14      	ldr	r2, [pc, #80]	; (800118c <_sbrk+0x5c>)
 800113a:	4b15      	ldr	r3, [pc, #84]	; (8001190 <_sbrk+0x60>)
 800113c:	1ad3      	subs	r3, r2, r3
 800113e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001144:	4b13      	ldr	r3, [pc, #76]	; (8001194 <_sbrk+0x64>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d102      	bne.n	8001152 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800114c:	4b11      	ldr	r3, [pc, #68]	; (8001194 <_sbrk+0x64>)
 800114e:	4a12      	ldr	r2, [pc, #72]	; (8001198 <_sbrk+0x68>)
 8001150:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001152:	4b10      	ldr	r3, [pc, #64]	; (8001194 <_sbrk+0x64>)
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4413      	add	r3, r2
 800115a:	693a      	ldr	r2, [r7, #16]
 800115c:	429a      	cmp	r2, r3
 800115e:	d205      	bcs.n	800116c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001160:	4b0e      	ldr	r3, [pc, #56]	; (800119c <_sbrk+0x6c>)
 8001162:	220c      	movs	r2, #12
 8001164:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001166:	f04f 33ff 	mov.w	r3, #4294967295
 800116a:	e009      	b.n	8001180 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 800116c:	4b09      	ldr	r3, [pc, #36]	; (8001194 <_sbrk+0x64>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001172:	4b08      	ldr	r3, [pc, #32]	; (8001194 <_sbrk+0x64>)
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4413      	add	r3, r2
 800117a:	4a06      	ldr	r2, [pc, #24]	; (8001194 <_sbrk+0x64>)
 800117c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800117e:	68fb      	ldr	r3, [r7, #12]
}
 8001180:	4618      	mov	r0, r3
 8001182:	371c      	adds	r7, #28
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr
 800118c:	24080000 	.word	0x24080000
 8001190:	00000400 	.word	0x00000400
 8001194:	240000c0 	.word	0x240000c0
 8001198:	24003ca8 	.word	0x24003ca8
 800119c:	24003c98 	.word	0x24003c98

080011a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80011a4:	4b39      	ldr	r3, [pc, #228]	; (800128c <SystemInit+0xec>)
 80011a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011aa:	4a38      	ldr	r2, [pc, #224]	; (800128c <SystemInit+0xec>)
 80011ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80011b4:	4b36      	ldr	r3, [pc, #216]	; (8001290 <SystemInit+0xf0>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f003 030f 	and.w	r3, r3, #15
 80011bc:	2b06      	cmp	r3, #6
 80011be:	d807      	bhi.n	80011d0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80011c0:	4b33      	ldr	r3, [pc, #204]	; (8001290 <SystemInit+0xf0>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f023 030f 	bic.w	r3, r3, #15
 80011c8:	4a31      	ldr	r2, [pc, #196]	; (8001290 <SystemInit+0xf0>)
 80011ca:	f043 0307 	orr.w	r3, r3, #7
 80011ce:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80011d0:	4b30      	ldr	r3, [pc, #192]	; (8001294 <SystemInit+0xf4>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a2f      	ldr	r2, [pc, #188]	; (8001294 <SystemInit+0xf4>)
 80011d6:	f043 0301 	orr.w	r3, r3, #1
 80011da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80011dc:	4b2d      	ldr	r3, [pc, #180]	; (8001294 <SystemInit+0xf4>)
 80011de:	2200      	movs	r2, #0
 80011e0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80011e2:	4b2c      	ldr	r3, [pc, #176]	; (8001294 <SystemInit+0xf4>)
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	492b      	ldr	r1, [pc, #172]	; (8001294 <SystemInit+0xf4>)
 80011e8:	4b2b      	ldr	r3, [pc, #172]	; (8001298 <SystemInit+0xf8>)
 80011ea:	4013      	ands	r3, r2
 80011ec:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80011ee:	4b28      	ldr	r3, [pc, #160]	; (8001290 <SystemInit+0xf0>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f003 0308 	and.w	r3, r3, #8
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d007      	beq.n	800120a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80011fa:	4b25      	ldr	r3, [pc, #148]	; (8001290 <SystemInit+0xf0>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f023 030f 	bic.w	r3, r3, #15
 8001202:	4a23      	ldr	r2, [pc, #140]	; (8001290 <SystemInit+0xf0>)
 8001204:	f043 0307 	orr.w	r3, r3, #7
 8001208:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800120a:	4b22      	ldr	r3, [pc, #136]	; (8001294 <SystemInit+0xf4>)
 800120c:	2200      	movs	r2, #0
 800120e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001210:	4b20      	ldr	r3, [pc, #128]	; (8001294 <SystemInit+0xf4>)
 8001212:	2200      	movs	r2, #0
 8001214:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001216:	4b1f      	ldr	r3, [pc, #124]	; (8001294 <SystemInit+0xf4>)
 8001218:	2200      	movs	r2, #0
 800121a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800121c:	4b1d      	ldr	r3, [pc, #116]	; (8001294 <SystemInit+0xf4>)
 800121e:	4a1f      	ldr	r2, [pc, #124]	; (800129c <SystemInit+0xfc>)
 8001220:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001222:	4b1c      	ldr	r3, [pc, #112]	; (8001294 <SystemInit+0xf4>)
 8001224:	4a1e      	ldr	r2, [pc, #120]	; (80012a0 <SystemInit+0x100>)
 8001226:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001228:	4b1a      	ldr	r3, [pc, #104]	; (8001294 <SystemInit+0xf4>)
 800122a:	4a1e      	ldr	r2, [pc, #120]	; (80012a4 <SystemInit+0x104>)
 800122c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800122e:	4b19      	ldr	r3, [pc, #100]	; (8001294 <SystemInit+0xf4>)
 8001230:	2200      	movs	r2, #0
 8001232:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001234:	4b17      	ldr	r3, [pc, #92]	; (8001294 <SystemInit+0xf4>)
 8001236:	4a1b      	ldr	r2, [pc, #108]	; (80012a4 <SystemInit+0x104>)
 8001238:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800123a:	4b16      	ldr	r3, [pc, #88]	; (8001294 <SystemInit+0xf4>)
 800123c:	2200      	movs	r2, #0
 800123e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001240:	4b14      	ldr	r3, [pc, #80]	; (8001294 <SystemInit+0xf4>)
 8001242:	4a18      	ldr	r2, [pc, #96]	; (80012a4 <SystemInit+0x104>)
 8001244:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001246:	4b13      	ldr	r3, [pc, #76]	; (8001294 <SystemInit+0xf4>)
 8001248:	2200      	movs	r2, #0
 800124a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800124c:	4b11      	ldr	r3, [pc, #68]	; (8001294 <SystemInit+0xf4>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a10      	ldr	r2, [pc, #64]	; (8001294 <SystemInit+0xf4>)
 8001252:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001256:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001258:	4b0e      	ldr	r3, [pc, #56]	; (8001294 <SystemInit+0xf4>)
 800125a:	2200      	movs	r2, #0
 800125c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800125e:	4b12      	ldr	r3, [pc, #72]	; (80012a8 <SystemInit+0x108>)
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	4b12      	ldr	r3, [pc, #72]	; (80012ac <SystemInit+0x10c>)
 8001264:	4013      	ands	r3, r2
 8001266:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800126a:	d202      	bcs.n	8001272 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800126c:	4b10      	ldr	r3, [pc, #64]	; (80012b0 <SystemInit+0x110>)
 800126e:	2201      	movs	r2, #1
 8001270:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001272:	4b10      	ldr	r3, [pc, #64]	; (80012b4 <SystemInit+0x114>)
 8001274:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001278:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800127a:	4b04      	ldr	r3, [pc, #16]	; (800128c <SystemInit+0xec>)
 800127c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001280:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001282:	bf00      	nop
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr
 800128c:	e000ed00 	.word	0xe000ed00
 8001290:	52002000 	.word	0x52002000
 8001294:	58024400 	.word	0x58024400
 8001298:	eaf6ed7f 	.word	0xeaf6ed7f
 800129c:	02020200 	.word	0x02020200
 80012a0:	01ff0000 	.word	0x01ff0000
 80012a4:	01010280 	.word	0x01010280
 80012a8:	5c001000 	.word	0x5c001000
 80012ac:	ffff0000 	.word	0xffff0000
 80012b0:	51008108 	.word	0x51008108
 80012b4:	52004000 	.word	0x52004000

080012b8 <tcp_echoserver_init>:
  * @brief  Initializes the tcp echo server
  * @param  None
  * @retval None
  */
void tcp_echoserver_init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
  /* create new tcp pcb */
  tcp_echoserver_pcb = tcp_new();
 80012be:	f00c f8fd 	bl	800d4bc <tcp_new>
 80012c2:	4603      	mov	r3, r0
 80012c4:	4a16      	ldr	r2, [pc, #88]	; (8001320 <tcp_echoserver_init+0x68>)
 80012c6:	6013      	str	r3, [r2, #0]

  if (tcp_echoserver_pcb != NULL)
 80012c8:	4b15      	ldr	r3, [pc, #84]	; (8001320 <tcp_echoserver_init+0x68>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d022      	beq.n	8001316 <tcp_echoserver_init+0x5e>
  {
    err_t err;
    
    /* bind echo_pcb to port 7 (ECHO protocol) */
    err = tcp_bind(tcp_echoserver_pcb, IP_ADDR_ANY, 7);
 80012d0:	4b13      	ldr	r3, [pc, #76]	; (8001320 <tcp_echoserver_init+0x68>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	2207      	movs	r2, #7
 80012d6:	4913      	ldr	r1, [pc, #76]	; (8001324 <tcp_echoserver_init+0x6c>)
 80012d8:	4618      	mov	r0, r3
 80012da:	f00b f84b 	bl	800c374 <tcp_bind>
 80012de:	4603      	mov	r3, r0
 80012e0:	71fb      	strb	r3, [r7, #7]
    
    if (err == ERR_OK)
 80012e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d10f      	bne.n	800130a <tcp_echoserver_init+0x52>
    {
      /* start tcp listening for echo_pcb */
      tcp_echoserver_pcb = tcp_listen(tcp_echoserver_pcb);
 80012ea:	4b0d      	ldr	r3, [pc, #52]	; (8001320 <tcp_echoserver_init+0x68>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	21ff      	movs	r1, #255	; 0xff
 80012f0:	4618      	mov	r0, r3
 80012f2:	f00b f8f7 	bl	800c4e4 <tcp_listen_with_backlog>
 80012f6:	4603      	mov	r3, r0
 80012f8:	4a09      	ldr	r2, [pc, #36]	; (8001320 <tcp_echoserver_init+0x68>)
 80012fa:	6013      	str	r3, [r2, #0]
      
      /* initialize LwIP tcp_accept callback function */
      tcp_accept(tcp_echoserver_pcb, tcp_echoserver_accept);
 80012fc:	4b08      	ldr	r3, [pc, #32]	; (8001320 <tcp_echoserver_init+0x68>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4909      	ldr	r1, [pc, #36]	; (8001328 <tcp_echoserver_init+0x70>)
 8001302:	4618      	mov	r0, r3
 8001304:	f00c f968 	bl	800d5d8 <tcp_accept>
    {
      /* deallocate the pcb */
      memp_free(MEMP_TCP_PCB, tcp_echoserver_pcb);
    }
  }
}
 8001308:	e005      	b.n	8001316 <tcp_echoserver_init+0x5e>
      memp_free(MEMP_TCP_PCB, tcp_echoserver_pcb);
 800130a:	4b05      	ldr	r3, [pc, #20]	; (8001320 <tcp_echoserver_init+0x68>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4619      	mov	r1, r3
 8001310:	2001      	movs	r0, #1
 8001312:	f009 fc15 	bl	800ab40 <memp_free>
}
 8001316:	bf00      	nop
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	240000c4 	.word	0x240000c4
 8001324:	0801a1c4 	.word	0x0801a1c4
 8001328:	0800132d 	.word	0x0800132d

0800132c <tcp_echoserver_accept>:
  * @param  newpcb: pointer on tcp_pcb struct for the newly created tcp connection
  * @param  err: not used 
  * @retval err_t: error status
  */
static err_t tcp_echoserver_accept(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b086      	sub	sp, #24
 8001330:	af00      	add	r7, sp, #0
 8001332:	60f8      	str	r0, [r7, #12]
 8001334:	60b9      	str	r1, [r7, #8]
 8001336:	4613      	mov	r3, r2
 8001338:	71fb      	strb	r3, [r7, #7]

  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  /* set priority for the newly accepted tcp connection newpcb */
  tcp_setprio(newpcb, TCP_PRIO_MIN);
 800133a:	2101      	movs	r1, #1
 800133c:	68b8      	ldr	r0, [r7, #8]
 800133e:	f00b fecb 	bl	800d0d8 <tcp_setprio>

  /* allocate structure es to maintain tcp connection informations */
  es = (struct tcp_echoserver_struct *)mem_malloc(sizeof(struct tcp_echoserver_struct));
 8001342:	200c      	movs	r0, #12
 8001344:	f009 f9f8 	bl	800a738 <mem_malloc>
 8001348:	6138      	str	r0, [r7, #16]
  if (es != NULL)
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d01f      	beq.n	8001390 <tcp_echoserver_accept+0x64>
  {
    es->state = ES_ACCEPTED;
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	2201      	movs	r2, #1
 8001354:	701a      	strb	r2, [r3, #0]
    es->pcb = newpcb;
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	68ba      	ldr	r2, [r7, #8]
 800135a:	605a      	str	r2, [r3, #4]
    es->retries = 0;
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	2200      	movs	r2, #0
 8001360:	705a      	strb	r2, [r3, #1]
    es->p = NULL;
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	2200      	movs	r2, #0
 8001366:	609a      	str	r2, [r3, #8]
    
    /* pass newly allocated es structure as argument to newpcb */
    tcp_arg(newpcb, es);
 8001368:	6939      	ldr	r1, [r7, #16]
 800136a:	68b8      	ldr	r0, [r7, #8]
 800136c:	f00c f8bc 	bl	800d4e8 <tcp_arg>
    
    /* initialize lwip tcp_recv callback function for newpcb  */ 
    tcp_recv(newpcb, tcp_echoserver_recv);
 8001370:	490d      	ldr	r1, [pc, #52]	; (80013a8 <tcp_echoserver_accept+0x7c>)
 8001372:	68b8      	ldr	r0, [r7, #8]
 8001374:	f00c f8ca 	bl	800d50c <tcp_recv>
    
    /* initialize lwip tcp_err callback function for newpcb  */
    tcp_err(newpcb, tcp_echoserver_error);
 8001378:	490c      	ldr	r1, [pc, #48]	; (80013ac <tcp_echoserver_accept+0x80>)
 800137a:	68b8      	ldr	r0, [r7, #8]
 800137c:	f00c f90a 	bl	800d594 <tcp_err>
    
    /* initialize lwip tcp_poll callback function for newpcb */
    tcp_poll(newpcb, tcp_echoserver_poll, 0);
 8001380:	2200      	movs	r2, #0
 8001382:	490b      	ldr	r1, [pc, #44]	; (80013b0 <tcp_echoserver_accept+0x84>)
 8001384:	68b8      	ldr	r0, [r7, #8]
 8001386:	f00c f93f 	bl	800d608 <tcp_poll>
    
    ret_err = ERR_OK;
 800138a:	2300      	movs	r3, #0
 800138c:	75fb      	strb	r3, [r7, #23]
 800138e:	e005      	b.n	800139c <tcp_echoserver_accept+0x70>
  }
  else
  {
    /*  close tcp connection */
    tcp_echoserver_connection_close(newpcb, es);
 8001390:	6939      	ldr	r1, [r7, #16]
 8001392:	68b8      	ldr	r0, [r7, #8]
 8001394:	f000 f965 	bl	8001662 <tcp_echoserver_connection_close>
    /* return memory error */
    ret_err = ERR_MEM;
 8001398:	23ff      	movs	r3, #255	; 0xff
 800139a:	75fb      	strb	r3, [r7, #23]
  }
  return ret_err;  
 800139c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	3718      	adds	r7, #24
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	080013b5 	.word	0x080013b5
 80013ac:	080014e9 	.word	0x080014e9
 80013b0:	0800150d 	.word	0x0800150d

080013b4 <tcp_echoserver_recv>:
  * @param  pbuf: pointer on the received pbuf
  * @param  err: error information regarding the reveived pbuf
  * @retval err_t: error code
  */
static err_t tcp_echoserver_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b088      	sub	sp, #32
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	60f8      	str	r0, [r7, #12]
 80013bc:	60b9      	str	r1, [r7, #8]
 80013be:	607a      	str	r2, [r7, #4]
 80013c0:	70fb      	strb	r3, [r7, #3]
  struct tcp_echoserver_struct *es;
  err_t ret_err;

  LWIP_ASSERT("arg != NULL",arg != NULL);
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d105      	bne.n	80013d4 <tcp_echoserver_recv+0x20>
 80013c8:	4b43      	ldr	r3, [pc, #268]	; (80014d8 <tcp_echoserver_recv+0x124>)
 80013ca:	22ad      	movs	r2, #173	; 0xad
 80013cc:	4943      	ldr	r1, [pc, #268]	; (80014dc <tcp_echoserver_recv+0x128>)
 80013ce:	4844      	ldr	r0, [pc, #272]	; (80014e0 <tcp_echoserver_recv+0x12c>)
 80013d0:	f013 fb74 	bl	8014abc <iprintf>
  
  es = (struct tcp_echoserver_struct *)arg;
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	61bb      	str	r3, [r7, #24]
  
  /* if we receive an empty tcp frame from client => close connection */
  if (p == NULL)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d116      	bne.n	800140c <tcp_echoserver_recv+0x58>
  {
    /* remote host closed connection */
    es->state = ES_CLOSING;
 80013de:	69bb      	ldr	r3, [r7, #24]
 80013e0:	2203      	movs	r2, #3
 80013e2:	701a      	strb	r2, [r3, #0]
    if(es->p == NULL)
 80013e4:	69bb      	ldr	r3, [r7, #24]
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d104      	bne.n	80013f6 <tcp_echoserver_recv+0x42>
    {
       /* we're done sending, close connection */
       tcp_echoserver_connection_close(tpcb, es);
 80013ec:	69b9      	ldr	r1, [r7, #24]
 80013ee:	68b8      	ldr	r0, [r7, #8]
 80013f0:	f000 f937 	bl	8001662 <tcp_echoserver_connection_close>
 80013f4:	e007      	b.n	8001406 <tcp_echoserver_recv+0x52>
    }
    else
    {
      /* we're not done yet */
      /* acknowledge received packet */
      tcp_sent(tpcb, tcp_echoserver_sent);
 80013f6:	493b      	ldr	r1, [pc, #236]	; (80014e4 <tcp_echoserver_recv+0x130>)
 80013f8:	68b8      	ldr	r0, [r7, #8]
 80013fa:	f00c f8a9 	bl	800d550 <tcp_sent>
      
      /* send remaining data*/
      tcp_echoserver_send(tpcb, es);
 80013fe:	69b9      	ldr	r1, [r7, #24]
 8001400:	68b8      	ldr	r0, [r7, #8]
 8001402:	f000 f8db 	bl	80015bc <tcp_echoserver_send>
    }
    ret_err = ERR_OK;
 8001406:	2300      	movs	r3, #0
 8001408:	77fb      	strb	r3, [r7, #31]
 800140a:	e05f      	b.n	80014cc <tcp_echoserver_recv+0x118>
  }   
  /* else : a non empty frame was received from client but for some reason err != ERR_OK */
  else if(err != ERR_OK)
 800140c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d00b      	beq.n	800142c <tcp_echoserver_recv+0x78>
  {
    /* free received pbuf*/
    if (p != NULL)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d005      	beq.n	8001426 <tcp_echoserver_recv+0x72>
    {
      es->p = NULL;
 800141a:	69bb      	ldr	r3, [r7, #24]
 800141c:	2200      	movs	r2, #0
 800141e:	609a      	str	r2, [r3, #8]
      pbuf_free(p);
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	f00a fa03 	bl	800b82c <pbuf_free>
    }
    ret_err = err;
 8001426:	78fb      	ldrb	r3, [r7, #3]
 8001428:	77fb      	strb	r3, [r7, #31]
 800142a:	e04f      	b.n	80014cc <tcp_echoserver_recv+0x118>
  }
  else if(es->state == ES_ACCEPTED)
 800142c:	69bb      	ldr	r3, [r7, #24]
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	2b01      	cmp	r3, #1
 8001432:	d110      	bne.n	8001456 <tcp_echoserver_recv+0xa2>
  {
    /* first data chunk in p->payload */
    es->state = ES_RECEIVED;
 8001434:	69bb      	ldr	r3, [r7, #24]
 8001436:	2202      	movs	r2, #2
 8001438:	701a      	strb	r2, [r3, #0]
    
    /* store reference to incoming pbuf (chain) */
    es->p = p;
 800143a:	69bb      	ldr	r3, [r7, #24]
 800143c:	687a      	ldr	r2, [r7, #4]
 800143e:	609a      	str	r2, [r3, #8]
    
    /* initialize LwIP tcp_sent callback function */
    tcp_sent(tpcb, tcp_echoserver_sent);
 8001440:	4928      	ldr	r1, [pc, #160]	; (80014e4 <tcp_echoserver_recv+0x130>)
 8001442:	68b8      	ldr	r0, [r7, #8]
 8001444:	f00c f884 	bl	800d550 <tcp_sent>
    
    /* send back the received data (echo) */
    tcp_echoserver_send(tpcb, es);
 8001448:	69b9      	ldr	r1, [r7, #24]
 800144a:	68b8      	ldr	r0, [r7, #8]
 800144c:	f000 f8b6 	bl	80015bc <tcp_echoserver_send>
    
    ret_err = ERR_OK;
 8001450:	2300      	movs	r3, #0
 8001452:	77fb      	strb	r3, [r7, #31]
 8001454:	e03a      	b.n	80014cc <tcp_echoserver_recv+0x118>
  }
  else if (es->state == ES_RECEIVED)
 8001456:	69bb      	ldr	r3, [r7, #24]
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	2b02      	cmp	r3, #2
 800145c:	d115      	bne.n	800148a <tcp_echoserver_recv+0xd6>
  {
    /* more data received from client and previous data has been already sent*/
    if(es->p == NULL)
 800145e:	69bb      	ldr	r3, [r7, #24]
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d107      	bne.n	8001476 <tcp_echoserver_recv+0xc2>
    {
      es->p = p;
 8001466:	69bb      	ldr	r3, [r7, #24]
 8001468:	687a      	ldr	r2, [r7, #4]
 800146a:	609a      	str	r2, [r3, #8]
  
      /* send back received data */
      tcp_echoserver_send(tpcb, es);
 800146c:	69b9      	ldr	r1, [r7, #24]
 800146e:	68b8      	ldr	r0, [r7, #8]
 8001470:	f000 f8a4 	bl	80015bc <tcp_echoserver_send>
 8001474:	e006      	b.n	8001484 <tcp_echoserver_recv+0xd0>
    else
    {
      struct pbuf *ptr;

      /* chain pbufs to the end of what we recv'ed previously  */
      ptr = es->p;
 8001476:	69bb      	ldr	r3, [r7, #24]
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	617b      	str	r3, [r7, #20]
      pbuf_chain(ptr,p);
 800147c:	6879      	ldr	r1, [r7, #4]
 800147e:	6978      	ldr	r0, [r7, #20]
 8001480:	f00a faec 	bl	800ba5c <pbuf_chain>
    }
    ret_err = ERR_OK;
 8001484:	2300      	movs	r3, #0
 8001486:	77fb      	strb	r3, [r7, #31]
 8001488:	e020      	b.n	80014cc <tcp_echoserver_recv+0x118>
  }
  else if(es->state == ES_CLOSING)
 800148a:	69bb      	ldr	r3, [r7, #24]
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	2b03      	cmp	r3, #3
 8001490:	d10e      	bne.n	80014b0 <tcp_echoserver_recv+0xfc>
  {
    /* odd case, remote side closing twice, trash data */
    tcp_recved(tpcb, p->tot_len);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	891b      	ldrh	r3, [r3, #8]
 8001496:	4619      	mov	r1, r3
 8001498:	68b8      	ldr	r0, [r7, #8]
 800149a:	f00b f939 	bl	800c710 <tcp_recved>
    es->p = NULL;
 800149e:	69bb      	ldr	r3, [r7, #24]
 80014a0:	2200      	movs	r2, #0
 80014a2:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 80014a4:	6878      	ldr	r0, [r7, #4]
 80014a6:	f00a f9c1 	bl	800b82c <pbuf_free>
    ret_err = ERR_OK;
 80014aa:	2300      	movs	r3, #0
 80014ac:	77fb      	strb	r3, [r7, #31]
 80014ae:	e00d      	b.n	80014cc <tcp_echoserver_recv+0x118>
  }
  else
  {
    /* unkown es->state, trash data  */
    tcp_recved(tpcb, p->tot_len);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	891b      	ldrh	r3, [r3, #8]
 80014b4:	4619      	mov	r1, r3
 80014b6:	68b8      	ldr	r0, [r7, #8]
 80014b8:	f00b f92a 	bl	800c710 <tcp_recved>
    es->p = NULL;
 80014bc:	69bb      	ldr	r3, [r7, #24]
 80014be:	2200      	movs	r2, #0
 80014c0:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	f00a f9b2 	bl	800b82c <pbuf_free>
    ret_err = ERR_OK;
 80014c8:	2300      	movs	r3, #0
 80014ca:	77fb      	strb	r3, [r7, #31]
  }
  return ret_err;
 80014cc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	3720      	adds	r7, #32
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	08015f0c 	.word	0x08015f0c
 80014dc:	08015f2c 	.word	0x08015f2c
 80014e0:	08015f38 	.word	0x08015f38
 80014e4:	0800156d 	.word	0x0800156d

080014e8 <tcp_echoserver_error>:
  * @param  arg: pointer on argument parameter 
  * @param  err: not used
  * @retval None
  */
static void tcp_echoserver_error(void *arg, err_t err)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	460b      	mov	r3, r1
 80014f2:	70fb      	strb	r3, [r7, #3]
  struct tcp_echoserver_struct *es;

  LWIP_UNUSED_ARG(err);

  es = (struct tcp_echoserver_struct *)arg;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	60fb      	str	r3, [r7, #12]
  if (es != NULL)
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d002      	beq.n	8001504 <tcp_echoserver_error+0x1c>
  {
    /*  free es structure */
    mem_free(es);
 80014fe:	68f8      	ldr	r0, [r7, #12]
 8001500:	f008 ffae 	bl	800a460 <mem_free>
  }
}
 8001504:	bf00      	nop
 8001506:	3710      	adds	r7, #16
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}

0800150c <tcp_echoserver_poll>:
  * @param  arg: pointer on argument passed to callback
  * @param  tpcb: pointer on the tcp_pcb for the current tcp connection
  * @retval err_t: error code
  */
static err_t tcp_echoserver_poll(void *arg, struct tcp_pcb *tpcb)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	6039      	str	r1, [r7, #0]
  err_t ret_err;
  struct tcp_echoserver_struct *es;

  es = (struct tcp_echoserver_struct *)arg;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	60bb      	str	r3, [r7, #8]
  if (es != NULL)
 800151a:	68bb      	ldr	r3, [r7, #8]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d017      	beq.n	8001550 <tcp_echoserver_poll+0x44>
  {
    if (es->p != NULL)
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d008      	beq.n	800153a <tcp_echoserver_poll+0x2e>
    {
      tcp_sent(tpcb, tcp_echoserver_sent);
 8001528:	490f      	ldr	r1, [pc, #60]	; (8001568 <tcp_echoserver_poll+0x5c>)
 800152a:	6838      	ldr	r0, [r7, #0]
 800152c:	f00c f810 	bl	800d550 <tcp_sent>
      /* there is a remaining pbuf (chain) , try to send data */
      tcp_echoserver_send(tpcb, es);
 8001530:	68b9      	ldr	r1, [r7, #8]
 8001532:	6838      	ldr	r0, [r7, #0]
 8001534:	f000 f842 	bl	80015bc <tcp_echoserver_send>
 8001538:	e007      	b.n	800154a <tcp_echoserver_poll+0x3e>
    }
    else
    {
      /* no remaining pbuf (chain)  */
      if(es->state == ES_CLOSING)
 800153a:	68bb      	ldr	r3, [r7, #8]
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	2b03      	cmp	r3, #3
 8001540:	d103      	bne.n	800154a <tcp_echoserver_poll+0x3e>
      {
        /*  close tcp connection */
        tcp_echoserver_connection_close(tpcb, es);
 8001542:	68b9      	ldr	r1, [r7, #8]
 8001544:	6838      	ldr	r0, [r7, #0]
 8001546:	f000 f88c 	bl	8001662 <tcp_echoserver_connection_close>
      }
    }
    ret_err = ERR_OK;
 800154a:	2300      	movs	r3, #0
 800154c:	73fb      	strb	r3, [r7, #15]
 800154e:	e004      	b.n	800155a <tcp_echoserver_poll+0x4e>
  }
  else
  {
    /* nothing to be done */
    tcp_abort(tpcb);
 8001550:	6838      	ldr	r0, [r7, #0]
 8001552:	f00a ff03 	bl	800c35c <tcp_abort>
    ret_err = ERR_ABRT;
 8001556:	23f3      	movs	r3, #243	; 0xf3
 8001558:	73fb      	strb	r3, [r7, #15]
  }
  return ret_err;
 800155a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800155e:	4618      	mov	r0, r3
 8001560:	3710      	adds	r7, #16
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	0800156d 	.word	0x0800156d

0800156c <tcp_echoserver_sent>:
  *         is received from remote host for sent data) 
  * @param  None
  * @retval None
  */
static err_t tcp_echoserver_sent(void *arg, struct tcp_pcb *tpcb, u16_t len)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b086      	sub	sp, #24
 8001570:	af00      	add	r7, sp, #0
 8001572:	60f8      	str	r0, [r7, #12]
 8001574:	60b9      	str	r1, [r7, #8]
 8001576:	4613      	mov	r3, r2
 8001578:	80fb      	strh	r3, [r7, #6]
  struct tcp_echoserver_struct *es;

  LWIP_UNUSED_ARG(len);

  es = (struct tcp_echoserver_struct *)arg;
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	617b      	str	r3, [r7, #20]
  es->retries = 0;
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	2200      	movs	r2, #0
 8001582:	705a      	strb	r2, [r3, #1]
  
  if(es->p != NULL)
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d008      	beq.n	800159e <tcp_echoserver_sent+0x32>
  {
    /* still got pbufs to send */
    tcp_sent(tpcb, tcp_echoserver_sent);
 800158c:	490a      	ldr	r1, [pc, #40]	; (80015b8 <tcp_echoserver_sent+0x4c>)
 800158e:	68b8      	ldr	r0, [r7, #8]
 8001590:	f00b ffde 	bl	800d550 <tcp_sent>
    tcp_echoserver_send(tpcb, es);
 8001594:	6979      	ldr	r1, [r7, #20]
 8001596:	68b8      	ldr	r0, [r7, #8]
 8001598:	f000 f810 	bl	80015bc <tcp_echoserver_send>
 800159c:	e007      	b.n	80015ae <tcp_echoserver_sent+0x42>
  }
  else
  {
    /* if no more data to send and client closed connection*/
    if(es->state == ES_CLOSING)
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	2b03      	cmp	r3, #3
 80015a4:	d103      	bne.n	80015ae <tcp_echoserver_sent+0x42>
      tcp_echoserver_connection_close(tpcb, es);
 80015a6:	6979      	ldr	r1, [r7, #20]
 80015a8:	68b8      	ldr	r0, [r7, #8]
 80015aa:	f000 f85a 	bl	8001662 <tcp_echoserver_connection_close>
  }
  return ERR_OK;
 80015ae:	2300      	movs	r3, #0
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3718      	adds	r7, #24
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	0800156d 	.word	0x0800156d

080015bc <tcp_echoserver_send>:
  * @param  tpcb: pointer on the tcp_pcb connection
  * @param  es: pointer on echo_state structure
  * @retval None
  */
static void tcp_echoserver_send(struct tcp_pcb *tpcb, struct tcp_echoserver_struct *es)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b086      	sub	sp, #24
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	6039      	str	r1, [r7, #0]
  struct pbuf *ptr;
  err_t wr_err = ERR_OK;
 80015c6:	2300      	movs	r3, #0
 80015c8:	75fb      	strb	r3, [r7, #23]
 
  while ((wr_err == ERR_OK) &&
 80015ca:	e036      	b.n	800163a <tcp_echoserver_send+0x7e>
         (es->p != NULL) && 
         (es->p->len <= tcp_sndbuf(tpcb)))
  {
    
    /* get pointer on pbuf from es structure */
    ptr = es->p;
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	613b      	str	r3, [r7, #16]

    /* enqueue data for transmission */
    wr_err = tcp_write(tpcb, ptr->payload, ptr->len, 1);
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	6859      	ldr	r1, [r3, #4]
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	895a      	ldrh	r2, [r3, #10]
 80015da:	2301      	movs	r3, #1
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	f00e fec1 	bl	8010364 <tcp_write>
 80015e2:	4603      	mov	r3, r0
 80015e4:	75fb      	strb	r3, [r7, #23]
    
    if (wr_err == ERR_OK)
 80015e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d11d      	bne.n	800162a <tcp_echoserver_send+0x6e>
    {
      u16_t plen;
      u8_t freed;

      plen = ptr->len;
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	895b      	ldrh	r3, [r3, #10]
 80015f2:	81fb      	strh	r3, [r7, #14]
     
      /* continue with next pbuf in chain (if any) */
      es->p = ptr->next;
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	609a      	str	r2, [r3, #8]
      
      if(es->p != NULL)
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d004      	beq.n	800160e <tcp_echoserver_send+0x52>
      {
        /* increment reference count for es->p */
        pbuf_ref(es->p);
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	4618      	mov	r0, r3
 800160a:	f00a f9af 	bl	800b96c <pbuf_ref>
      
     /* chop first pbuf from chain */
      do
      {
        /* try hard to free pbuf */
        freed = pbuf_free(ptr);
 800160e:	6938      	ldr	r0, [r7, #16]
 8001610:	f00a f90c 	bl	800b82c <pbuf_free>
 8001614:	4603      	mov	r3, r0
 8001616:	737b      	strb	r3, [r7, #13]
      }
      while(freed == 0);
 8001618:	7b7b      	ldrb	r3, [r7, #13]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d0f7      	beq.n	800160e <tcp_echoserver_send+0x52>
     /* we can read more data now */
     tcp_recved(tpcb, plen);
 800161e:	89fb      	ldrh	r3, [r7, #14]
 8001620:	4619      	mov	r1, r3
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f00b f874 	bl	800c710 <tcp_recved>
 8001628:	e007      	b.n	800163a <tcp_echoserver_send+0x7e>
   }
   else if(wr_err == ERR_MEM)
 800162a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800162e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001632:	d102      	bne.n	800163a <tcp_echoserver_send+0x7e>
   {
      /* we are low on memory, try later / harder, defer to poll */
     es->p = ptr;
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	693a      	ldr	r2, [r7, #16]
 8001638:	609a      	str	r2, [r3, #8]
  while ((wr_err == ERR_OK) &&
 800163a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d10b      	bne.n	800165a <tcp_echoserver_send+0x9e>
         (es->p != NULL) && 
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	689b      	ldr	r3, [r3, #8]
  while ((wr_err == ERR_OK) &&
 8001646:	2b00      	cmp	r3, #0
 8001648:	d007      	beq.n	800165a <tcp_echoserver_send+0x9e>
         (es->p->len <= tcp_sndbuf(tpcb)))
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	895a      	ldrh	r2, [r3, #10]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
         (es->p != NULL) && 
 8001656:	429a      	cmp	r2, r3
 8001658:	d9b8      	bls.n	80015cc <tcp_echoserver_send+0x10>
   else
   {
     /* other problem ?? */
   }
  }
}
 800165a:	bf00      	nop
 800165c:	3718      	adds	r7, #24
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}

08001662 <tcp_echoserver_connection_close>:
  * @param  tcp_pcb: pointer on the tcp connection
  * @param  es: pointer on echo_state structure
  * @retval None
  */
static void tcp_echoserver_connection_close(struct tcp_pcb *tpcb, struct tcp_echoserver_struct *es)
{
 8001662:	b580      	push	{r7, lr}
 8001664:	b082      	sub	sp, #8
 8001666:	af00      	add	r7, sp, #0
 8001668:	6078      	str	r0, [r7, #4]
 800166a:	6039      	str	r1, [r7, #0]
  
  /* remove all callbacks */
  tcp_arg(tpcb, NULL);
 800166c:	2100      	movs	r1, #0
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	f00b ff3a 	bl	800d4e8 <tcp_arg>
  tcp_sent(tpcb, NULL);
 8001674:	2100      	movs	r1, #0
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	f00b ff6a 	bl	800d550 <tcp_sent>
  tcp_recv(tpcb, NULL);
 800167c:	2100      	movs	r1, #0
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	f00b ff44 	bl	800d50c <tcp_recv>
  tcp_err(tpcb, NULL);
 8001684:	2100      	movs	r1, #0
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	f00b ff84 	bl	800d594 <tcp_err>
  tcp_poll(tpcb, NULL, 0);
 800168c:	2200      	movs	r2, #0
 800168e:	2100      	movs	r1, #0
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f00b ffb9 	bl	800d608 <tcp_poll>
  
  /* delete es structure */
  if (es != NULL)
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d002      	beq.n	80016a2 <tcp_echoserver_connection_close+0x40>
  {
    mem_free(es);
 800169c:	6838      	ldr	r0, [r7, #0]
 800169e:	f008 fedf 	bl	800a460 <mem_free>
  }  
  
  /* close tcp connection */
  tcp_close(tpcb);
 80016a2:	6878      	ldr	r0, [r7, #4]
 80016a4:	f00a fd70 	bl	800c188 <tcp_close>
}
 80016a8:	bf00      	nop
 80016aa:	3708      	adds	r7, #8
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80016b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016e8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80016b4:	f7ff fd74 	bl	80011a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016b8:	480c      	ldr	r0, [pc, #48]	; (80016ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80016ba:	490d      	ldr	r1, [pc, #52]	; (80016f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80016bc:	4a0d      	ldr	r2, [pc, #52]	; (80016f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80016be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016c0:	e002      	b.n	80016c8 <LoopCopyDataInit>

080016c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016c6:	3304      	adds	r3, #4

080016c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016cc:	d3f9      	bcc.n	80016c2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016ce:	4a0a      	ldr	r2, [pc, #40]	; (80016f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016d0:	4c0a      	ldr	r4, [pc, #40]	; (80016fc <LoopFillZerobss+0x22>)
  movs r3, #0
 80016d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016d4:	e001      	b.n	80016da <LoopFillZerobss>

080016d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016d8:	3204      	adds	r2, #4

080016da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016dc:	d3fb      	bcc.n	80016d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016de:	f013 f98b 	bl	80149f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016e2:	f7ff f86b 	bl	80007bc <main>
  bx  lr
 80016e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016e8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80016ec:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80016f0:	240000a4 	.word	0x240000a4
  ldr r2, =_sidata
 80016f4:	0801a334 	.word	0x0801a334
  ldr r2, =_sbss
 80016f8:	240000a4 	.word	0x240000a4
  ldr r4, =_ebss
 80016fc:	24003ca8 	.word	0x24003ca8

08001700 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001700:	e7fe      	b.n	8001700 <ADC3_IRQHandler>

08001702 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8001702:	b480      	push	{r7}
 8001704:	b083      	sub	sp, #12
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
 800170a:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d00b      	beq.n	800172a <LAN8742_RegisterBusIO+0x28>
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	68db      	ldr	r3, [r3, #12]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d007      	beq.n	800172a <LAN8742_RegisterBusIO+0x28>
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d003      	beq.n	800172a <LAN8742_RegisterBusIO+0x28>
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	691b      	ldr	r3, [r3, #16]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d102      	bne.n	8001730 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 800172a:	f04f 33ff 	mov.w	r3, #4294967295
 800172e:	e014      	b.n	800175a <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	685a      	ldr	r2, [r3, #4]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	68da      	ldr	r2, [r3, #12]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	689a      	ldr	r2, [r3, #8]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	691a      	ldr	r2, [r3, #16]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8001758:	2300      	movs	r3, #0
}
 800175a:	4618      	mov	r0, r3
 800175c:	370c      	adds	r7, #12
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr

08001766 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8001766:	b580      	push	{r7, lr}
 8001768:	b086      	sub	sp, #24
 800176a:	af00      	add	r7, sp, #0
 800176c:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 800176e:	2300      	movs	r3, #0
 8001770:	60fb      	str	r3, [r7, #12]
 8001772:	2300      	movs	r3, #0
 8001774:	60bb      	str	r3, [r7, #8]
 8001776:	2300      	movs	r3, #0
 8001778:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 800177a:	2300      	movs	r3, #0
 800177c:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d17c      	bne.n	8001880 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d002      	beq.n	8001794 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2220      	movs	r2, #32
 8001798:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800179a:	2300      	movs	r3, #0
 800179c:	617b      	str	r3, [r7, #20]
 800179e:	e01c      	b.n	80017da <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	695b      	ldr	r3, [r3, #20]
 80017a4:	f107 0208 	add.w	r2, r7, #8
 80017a8:	2112      	movs	r1, #18
 80017aa:	6978      	ldr	r0, [r7, #20]
 80017ac:	4798      	blx	r3
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	da03      	bge.n	80017bc <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 80017b4:	f06f 0304 	mvn.w	r3, #4
 80017b8:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 80017ba:	e00b      	b.n	80017d4 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	f003 031f 	and.w	r3, r3, #31
 80017c2:	697a      	ldr	r2, [r7, #20]
 80017c4:	429a      	cmp	r2, r3
 80017c6:	d105      	bne.n	80017d4 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	697a      	ldr	r2, [r7, #20]
 80017cc:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 80017ce:	2300      	movs	r3, #0
 80017d0:	613b      	str	r3, [r7, #16]
         break;
 80017d2:	e005      	b.n	80017e0 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	3301      	adds	r3, #1
 80017d8:	617b      	str	r3, [r7, #20]
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	2b1f      	cmp	r3, #31
 80017de:	d9df      	bls.n	80017a0 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	2b1f      	cmp	r3, #31
 80017e6:	d902      	bls.n	80017ee <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 80017e8:	f06f 0302 	mvn.w	r3, #2
 80017ec:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d145      	bne.n	8001880 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	691b      	ldr	r3, [r3, #16]
 80017f8:	687a      	ldr	r2, [r7, #4]
 80017fa:	6810      	ldr	r0, [r2, #0]
 80017fc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001800:	2100      	movs	r1, #0
 8001802:	4798      	blx	r3
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	db37      	blt.n	800187a <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	695b      	ldr	r3, [r3, #20]
 800180e:	687a      	ldr	r2, [r7, #4]
 8001810:	6810      	ldr	r0, [r2, #0]
 8001812:	f107 0208 	add.w	r2, r7, #8
 8001816:	2100      	movs	r1, #0
 8001818:	4798      	blx	r3
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	db28      	blt.n	8001872 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	699b      	ldr	r3, [r3, #24]
 8001824:	4798      	blx	r3
 8001826:	4603      	mov	r3, r0
 8001828:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800182a:	e01c      	b.n	8001866 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	699b      	ldr	r3, [r3, #24]
 8001830:	4798      	blx	r3
 8001832:	4603      	mov	r3, r0
 8001834:	461a      	mov	r2, r3
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800183e:	d80e      	bhi.n	800185e <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	695b      	ldr	r3, [r3, #20]
 8001844:	687a      	ldr	r2, [r7, #4]
 8001846:	6810      	ldr	r0, [r2, #0]
 8001848:	f107 0208 	add.w	r2, r7, #8
 800184c:	2100      	movs	r1, #0
 800184e:	4798      	blx	r3
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	da07      	bge.n	8001866 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8001856:	f06f 0304 	mvn.w	r3, #4
 800185a:	613b      	str	r3, [r7, #16]
                 break;
 800185c:	e010      	b.n	8001880 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 800185e:	f06f 0301 	mvn.w	r3, #1
 8001862:	613b      	str	r3, [r7, #16]
               break;
 8001864:	e00c      	b.n	8001880 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800186c:	2b00      	cmp	r3, #0
 800186e:	d1dd      	bne.n	800182c <LAN8742_Init+0xc6>
 8001870:	e006      	b.n	8001880 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8001872:	f06f 0304 	mvn.w	r3, #4
 8001876:	613b      	str	r3, [r7, #16]
 8001878:	e002      	b.n	8001880 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 800187a:	f06f 0303 	mvn.w	r3, #3
 800187e:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d112      	bne.n	80018ac <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	699b      	ldr	r3, [r3, #24]
 800188a:	4798      	blx	r3
 800188c:	4603      	mov	r3, r0
 800188e:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8001890:	bf00      	nop
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	699b      	ldr	r3, [r3, #24]
 8001896:	4798      	blx	r3
 8001898:	4603      	mov	r3, r0
 800189a:	461a      	mov	r2, r3
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	1ad3      	subs	r3, r2, r3
 80018a0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80018a4:	d9f5      	bls.n	8001892 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2201      	movs	r2, #1
 80018aa:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 80018ac:	693b      	ldr	r3, [r7, #16]
 }
 80018ae:	4618      	mov	r0, r3
 80018b0:	3718      	adds	r7, #24
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}

080018b6 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 80018b6:	b580      	push	{r7, lr}
 80018b8:	b084      	sub	sp, #16
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80018be:	2300      	movs	r3, #0
 80018c0:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	695b      	ldr	r3, [r3, #20]
 80018c6:	687a      	ldr	r2, [r7, #4]
 80018c8:	6810      	ldr	r0, [r2, #0]
 80018ca:	f107 020c 	add.w	r2, r7, #12
 80018ce:	2101      	movs	r1, #1
 80018d0:	4798      	blx	r3
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	da02      	bge.n	80018de <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 80018d8:	f06f 0304 	mvn.w	r3, #4
 80018dc:	e06e      	b.n	80019bc <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	695b      	ldr	r3, [r3, #20]
 80018e2:	687a      	ldr	r2, [r7, #4]
 80018e4:	6810      	ldr	r0, [r2, #0]
 80018e6:	f107 020c 	add.w	r2, r7, #12
 80018ea:	2101      	movs	r1, #1
 80018ec:	4798      	blx	r3
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	da02      	bge.n	80018fa <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 80018f4:	f06f 0304 	mvn.w	r3, #4
 80018f8:	e060      	b.n	80019bc <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	f003 0304 	and.w	r3, r3, #4
 8001900:	2b00      	cmp	r3, #0
 8001902:	d101      	bne.n	8001908 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8001904:	2301      	movs	r3, #1
 8001906:	e059      	b.n	80019bc <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	695b      	ldr	r3, [r3, #20]
 800190c:	687a      	ldr	r2, [r7, #4]
 800190e:	6810      	ldr	r0, [r2, #0]
 8001910:	f107 020c 	add.w	r2, r7, #12
 8001914:	2100      	movs	r1, #0
 8001916:	4798      	blx	r3
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	da02      	bge.n	8001924 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 800191e:	f06f 0304 	mvn.w	r3, #4
 8001922:	e04b      	b.n	80019bc <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800192a:	2b00      	cmp	r3, #0
 800192c:	d11b      	bne.n	8001966 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001934:	2b00      	cmp	r3, #0
 8001936:	d006      	beq.n	8001946 <LAN8742_GetLinkState+0x90>
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001942:	2302      	movs	r3, #2
 8001944:	e03a      	b.n	80019bc <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001950:	2303      	movs	r3, #3
 8001952:	e033      	b.n	80019bc <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800195e:	2304      	movs	r3, #4
 8001960:	e02c      	b.n	80019bc <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001962:	2305      	movs	r3, #5
 8001964:	e02a      	b.n	80019bc <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	695b      	ldr	r3, [r3, #20]
 800196a:	687a      	ldr	r2, [r7, #4]
 800196c:	6810      	ldr	r0, [r2, #0]
 800196e:	f107 020c 	add.w	r2, r7, #12
 8001972:	211f      	movs	r1, #31
 8001974:	4798      	blx	r3
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	da02      	bge.n	8001982 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 800197c:	f06f 0304 	mvn.w	r3, #4
 8001980:	e01c      	b.n	80019bc <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001988:	2b00      	cmp	r3, #0
 800198a:	d101      	bne.n	8001990 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 800198c:	2306      	movs	r3, #6
 800198e:	e015      	b.n	80019bc <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	f003 031c 	and.w	r3, r3, #28
 8001996:	2b18      	cmp	r3, #24
 8001998:	d101      	bne.n	800199e <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800199a:	2302      	movs	r3, #2
 800199c:	e00e      	b.n	80019bc <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	f003 031c 	and.w	r3, r3, #28
 80019a4:	2b08      	cmp	r3, #8
 80019a6:	d101      	bne.n	80019ac <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80019a8:	2303      	movs	r3, #3
 80019aa:	e007      	b.n	80019bc <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	f003 031c 	and.w	r3, r3, #28
 80019b2:	2b14      	cmp	r3, #20
 80019b4:	d101      	bne.n	80019ba <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80019b6:	2304      	movs	r3, #4
 80019b8:	e000      	b.n	80019bc <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80019ba:	2305      	movs	r3, #5
    }				
  }
}
 80019bc:	4618      	mov	r0, r3
 80019be:	3710      	adds	r7, #16
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}

080019c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019ca:	2003      	movs	r0, #3
 80019cc:	f000 f9a0 	bl	8001d10 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80019d0:	f003 fa00 	bl	8004dd4 <HAL_RCC_GetSysClockFreq>
 80019d4:	4602      	mov	r2, r0
 80019d6:	4b15      	ldr	r3, [pc, #84]	; (8001a2c <HAL_Init+0x68>)
 80019d8:	699b      	ldr	r3, [r3, #24]
 80019da:	0a1b      	lsrs	r3, r3, #8
 80019dc:	f003 030f 	and.w	r3, r3, #15
 80019e0:	4913      	ldr	r1, [pc, #76]	; (8001a30 <HAL_Init+0x6c>)
 80019e2:	5ccb      	ldrb	r3, [r1, r3]
 80019e4:	f003 031f 	and.w	r3, r3, #31
 80019e8:	fa22 f303 	lsr.w	r3, r2, r3
 80019ec:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80019ee:	4b0f      	ldr	r3, [pc, #60]	; (8001a2c <HAL_Init+0x68>)
 80019f0:	699b      	ldr	r3, [r3, #24]
 80019f2:	f003 030f 	and.w	r3, r3, #15
 80019f6:	4a0e      	ldr	r2, [pc, #56]	; (8001a30 <HAL_Init+0x6c>)
 80019f8:	5cd3      	ldrb	r3, [r2, r3]
 80019fa:	f003 031f 	and.w	r3, r3, #31
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	fa22 f303 	lsr.w	r3, r2, r3
 8001a04:	4a0b      	ldr	r2, [pc, #44]	; (8001a34 <HAL_Init+0x70>)
 8001a06:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001a08:	4a0b      	ldr	r2, [pc, #44]	; (8001a38 <HAL_Init+0x74>)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a0e:	2000      	movs	r0, #0
 8001a10:	f000 f814 	bl	8001a3c <HAL_InitTick>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e002      	b.n	8001a24 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001a1e:	f7ff f9c5 	bl	8000dac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a22:	2300      	movs	r3, #0
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3708      	adds	r7, #8
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	58024400 	.word	0x58024400
 8001a30:	08018c58 	.word	0x08018c58
 8001a34:	24000014 	.word	0x24000014
 8001a38:	24000010 	.word	0x24000010

08001a3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001a44:	4b15      	ldr	r3, [pc, #84]	; (8001a9c <HAL_InitTick+0x60>)
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d101      	bne.n	8001a50 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e021      	b.n	8001a94 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001a50:	4b13      	ldr	r3, [pc, #76]	; (8001aa0 <HAL_InitTick+0x64>)
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	4b11      	ldr	r3, [pc, #68]	; (8001a9c <HAL_InitTick+0x60>)
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	4619      	mov	r1, r3
 8001a5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a62:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a66:	4618      	mov	r0, r3
 8001a68:	f000 f985 	bl	8001d76 <HAL_SYSTICK_Config>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e00e      	b.n	8001a94 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2b0f      	cmp	r3, #15
 8001a7a:	d80a      	bhi.n	8001a92 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	6879      	ldr	r1, [r7, #4]
 8001a80:	f04f 30ff 	mov.w	r0, #4294967295
 8001a84:	f000 f94f 	bl	8001d26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a88:	4a06      	ldr	r2, [pc, #24]	; (8001aa4 <HAL_InitTick+0x68>)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	e000      	b.n	8001a94 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3708      	adds	r7, #8
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	2400001c 	.word	0x2400001c
 8001aa0:	24000010 	.word	0x24000010
 8001aa4:	24000018 	.word	0x24000018

08001aa8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001aac:	4b06      	ldr	r3, [pc, #24]	; (8001ac8 <HAL_IncTick+0x20>)
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	4b06      	ldr	r3, [pc, #24]	; (8001acc <HAL_IncTick+0x24>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4413      	add	r3, r2
 8001ab8:	4a04      	ldr	r2, [pc, #16]	; (8001acc <HAL_IncTick+0x24>)
 8001aba:	6013      	str	r3, [r2, #0]
}
 8001abc:	bf00      	nop
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	2400001c 	.word	0x2400001c
 8001acc:	24000b90 	.word	0x24000b90

08001ad0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ad4:	4b03      	ldr	r3, [pc, #12]	; (8001ae4 <HAL_GetTick+0x14>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	24000b90 	.word	0x24000b90

08001ae8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001af0:	f7ff ffee 	bl	8001ad0 <HAL_GetTick>
 8001af4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b00:	d005      	beq.n	8001b0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b02:	4b0a      	ldr	r3, [pc, #40]	; (8001b2c <HAL_Delay+0x44>)
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	461a      	mov	r2, r3
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	4413      	add	r3, r2
 8001b0c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b0e:	bf00      	nop
 8001b10:	f7ff ffde 	bl	8001ad0 <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	68fa      	ldr	r2, [r7, #12]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d8f7      	bhi.n	8001b10 <HAL_Delay+0x28>
  {
  }
}
 8001b20:	bf00      	nop
 8001b22:	bf00      	nop
 8001b24:	3710      	adds	r7, #16
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	2400001c 	.word	0x2400001c

08001b30 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001b34:	4b03      	ldr	r3, [pc, #12]	; (8001b44 <HAL_GetREVID+0x14>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	0c1b      	lsrs	r3, r3, #16
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr
 8001b44:	5c001000 	.word	0x5c001000

08001b48 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001b50:	4b06      	ldr	r3, [pc, #24]	; (8001b6c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001b58:	4904      	ldr	r1, [pc, #16]	; (8001b6c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	604b      	str	r3, [r1, #4]
}
 8001b60:	bf00      	nop
 8001b62:	370c      	adds	r7, #12
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr
 8001b6c:	58000400 	.word	0x58000400

08001b70 <__NVIC_SetPriorityGrouping>:
{
 8001b70:	b480      	push	{r7}
 8001b72:	b085      	sub	sp, #20
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	f003 0307 	and.w	r3, r3, #7
 8001b7e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b80:	4b0b      	ldr	r3, [pc, #44]	; (8001bb0 <__NVIC_SetPriorityGrouping+0x40>)
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b86:	68ba      	ldr	r2, [r7, #8]
 8001b88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001b98:	4b06      	ldr	r3, [pc, #24]	; (8001bb4 <__NVIC_SetPriorityGrouping+0x44>)
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b9e:	4a04      	ldr	r2, [pc, #16]	; (8001bb0 <__NVIC_SetPriorityGrouping+0x40>)
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	60d3      	str	r3, [r2, #12]
}
 8001ba4:	bf00      	nop
 8001ba6:	3714      	adds	r7, #20
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr
 8001bb0:	e000ed00 	.word	0xe000ed00
 8001bb4:	05fa0000 	.word	0x05fa0000

08001bb8 <__NVIC_GetPriorityGrouping>:
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bbc:	4b04      	ldr	r3, [pc, #16]	; (8001bd0 <__NVIC_GetPriorityGrouping+0x18>)
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	0a1b      	lsrs	r3, r3, #8
 8001bc2:	f003 0307 	and.w	r3, r3, #7
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr
 8001bd0:	e000ed00 	.word	0xe000ed00

08001bd4 <__NVIC_EnableIRQ>:
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	4603      	mov	r3, r0
 8001bdc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001bde:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	db0b      	blt.n	8001bfe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001be6:	88fb      	ldrh	r3, [r7, #6]
 8001be8:	f003 021f 	and.w	r2, r3, #31
 8001bec:	4907      	ldr	r1, [pc, #28]	; (8001c0c <__NVIC_EnableIRQ+0x38>)
 8001bee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bf2:	095b      	lsrs	r3, r3, #5
 8001bf4:	2001      	movs	r0, #1
 8001bf6:	fa00 f202 	lsl.w	r2, r0, r2
 8001bfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001bfe:	bf00      	nop
 8001c00:	370c      	adds	r7, #12
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	e000e100 	.word	0xe000e100

08001c10 <__NVIC_SetPriority>:
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	4603      	mov	r3, r0
 8001c18:	6039      	str	r1, [r7, #0]
 8001c1a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001c1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	db0a      	blt.n	8001c3a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	b2da      	uxtb	r2, r3
 8001c28:	490c      	ldr	r1, [pc, #48]	; (8001c5c <__NVIC_SetPriority+0x4c>)
 8001c2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c2e:	0112      	lsls	r2, r2, #4
 8001c30:	b2d2      	uxtb	r2, r2
 8001c32:	440b      	add	r3, r1
 8001c34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001c38:	e00a      	b.n	8001c50 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	b2da      	uxtb	r2, r3
 8001c3e:	4908      	ldr	r1, [pc, #32]	; (8001c60 <__NVIC_SetPriority+0x50>)
 8001c40:	88fb      	ldrh	r3, [r7, #6]
 8001c42:	f003 030f 	and.w	r3, r3, #15
 8001c46:	3b04      	subs	r3, #4
 8001c48:	0112      	lsls	r2, r2, #4
 8001c4a:	b2d2      	uxtb	r2, r2
 8001c4c:	440b      	add	r3, r1
 8001c4e:	761a      	strb	r2, [r3, #24]
}
 8001c50:	bf00      	nop
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr
 8001c5c:	e000e100 	.word	0xe000e100
 8001c60:	e000ed00 	.word	0xe000ed00

08001c64 <NVIC_EncodePriority>:
{
 8001c64:	b480      	push	{r7}
 8001c66:	b089      	sub	sp, #36	; 0x24
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	60f8      	str	r0, [r7, #12]
 8001c6c:	60b9      	str	r1, [r7, #8]
 8001c6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	f003 0307 	and.w	r3, r3, #7
 8001c76:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	f1c3 0307 	rsb	r3, r3, #7
 8001c7e:	2b04      	cmp	r3, #4
 8001c80:	bf28      	it	cs
 8001c82:	2304      	movcs	r3, #4
 8001c84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	3304      	adds	r3, #4
 8001c8a:	2b06      	cmp	r3, #6
 8001c8c:	d902      	bls.n	8001c94 <NVIC_EncodePriority+0x30>
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	3b03      	subs	r3, #3
 8001c92:	e000      	b.n	8001c96 <NVIC_EncodePriority+0x32>
 8001c94:	2300      	movs	r3, #0
 8001c96:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c98:	f04f 32ff 	mov.w	r2, #4294967295
 8001c9c:	69bb      	ldr	r3, [r7, #24]
 8001c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca2:	43da      	mvns	r2, r3
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	401a      	ands	r2, r3
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cac:	f04f 31ff 	mov.w	r1, #4294967295
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8001cb6:	43d9      	mvns	r1, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cbc:	4313      	orrs	r3, r2
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3724      	adds	r7, #36	; 0x24
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
	...

08001ccc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	3b01      	subs	r3, #1
 8001cd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cdc:	d301      	bcc.n	8001ce2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e00f      	b.n	8001d02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ce2:	4a0a      	ldr	r2, [pc, #40]	; (8001d0c <SysTick_Config+0x40>)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	3b01      	subs	r3, #1
 8001ce8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cea:	210f      	movs	r1, #15
 8001cec:	f04f 30ff 	mov.w	r0, #4294967295
 8001cf0:	f7ff ff8e 	bl	8001c10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cf4:	4b05      	ldr	r3, [pc, #20]	; (8001d0c <SysTick_Config+0x40>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cfa:	4b04      	ldr	r3, [pc, #16]	; (8001d0c <SysTick_Config+0x40>)
 8001cfc:	2207      	movs	r2, #7
 8001cfe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d00:	2300      	movs	r3, #0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3708      	adds	r7, #8
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	e000e010 	.word	0xe000e010

08001d10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	f7ff ff29 	bl	8001b70 <__NVIC_SetPriorityGrouping>
}
 8001d1e:	bf00      	nop
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}

08001d26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d26:	b580      	push	{r7, lr}
 8001d28:	b086      	sub	sp, #24
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	60b9      	str	r1, [r7, #8]
 8001d30:	607a      	str	r2, [r7, #4]
 8001d32:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d34:	f7ff ff40 	bl	8001bb8 <__NVIC_GetPriorityGrouping>
 8001d38:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	68b9      	ldr	r1, [r7, #8]
 8001d3e:	6978      	ldr	r0, [r7, #20]
 8001d40:	f7ff ff90 	bl	8001c64 <NVIC_EncodePriority>
 8001d44:	4602      	mov	r2, r0
 8001d46:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001d4a:	4611      	mov	r1, r2
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7ff ff5f 	bl	8001c10 <__NVIC_SetPriority>
}
 8001d52:	bf00      	nop
 8001d54:	3718      	adds	r7, #24
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	b082      	sub	sp, #8
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	4603      	mov	r3, r0
 8001d62:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d64:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7ff ff33 	bl	8001bd4 <__NVIC_EnableIRQ>
}
 8001d6e:	bf00      	nop
 8001d70:	3708      	adds	r7, #8
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}

08001d76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d76:	b580      	push	{r7, lr}
 8001d78:	b082      	sub	sp, #8
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f7ff ffa4 	bl	8001ccc <SysTick_Config>
 8001d84:	4603      	mov	r3, r0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3708      	adds	r7, #8
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
	...

08001d90 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001d94:	f3bf 8f5f 	dmb	sy
}
 8001d98:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001d9a:	4b07      	ldr	r3, [pc, #28]	; (8001db8 <HAL_MPU_Disable+0x28>)
 8001d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d9e:	4a06      	ldr	r2, [pc, #24]	; (8001db8 <HAL_MPU_Disable+0x28>)
 8001da0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001da4:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001da6:	4b05      	ldr	r3, [pc, #20]	; (8001dbc <HAL_MPU_Disable+0x2c>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	605a      	str	r2, [r3, #4]
}
 8001dac:	bf00      	nop
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	e000ed00 	.word	0xe000ed00
 8001dbc:	e000ed90 	.word	0xe000ed90

08001dc0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001dc8:	4a0b      	ldr	r2, [pc, #44]	; (8001df8 <HAL_MPU_Enable+0x38>)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	f043 0301 	orr.w	r3, r3, #1
 8001dd0:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001dd2:	4b0a      	ldr	r3, [pc, #40]	; (8001dfc <HAL_MPU_Enable+0x3c>)
 8001dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd6:	4a09      	ldr	r2, [pc, #36]	; (8001dfc <HAL_MPU_Enable+0x3c>)
 8001dd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ddc:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001dde:	f3bf 8f4f 	dsb	sy
}
 8001de2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001de4:	f3bf 8f6f 	isb	sy
}
 8001de8:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001dea:	bf00      	nop
 8001dec:	370c      	adds	r7, #12
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	e000ed90 	.word	0xe000ed90
 8001dfc:	e000ed00 	.word	0xe000ed00

08001e00 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	785a      	ldrb	r2, [r3, #1]
 8001e0c:	4b1d      	ldr	r3, [pc, #116]	; (8001e84 <HAL_MPU_ConfigRegion+0x84>)
 8001e0e:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d029      	beq.n	8001e6c <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8001e18:	4a1a      	ldr	r2, [pc, #104]	; (8001e84 <HAL_MPU_ConfigRegion+0x84>)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	7b1b      	ldrb	r3, [r3, #12]
 8001e24:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	7adb      	ldrb	r3, [r3, #11]
 8001e2a:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001e2c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	7a9b      	ldrb	r3, [r3, #10]
 8001e32:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001e34:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	7b5b      	ldrb	r3, [r3, #13]
 8001e3a:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001e3c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	7b9b      	ldrb	r3, [r3, #14]
 8001e42:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001e44:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	7bdb      	ldrb	r3, [r3, #15]
 8001e4a:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001e4c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	7a5b      	ldrb	r3, [r3, #9]
 8001e52:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001e54:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	7a1b      	ldrb	r3, [r3, #8]
 8001e5a:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001e5c:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	7812      	ldrb	r2, [r2, #0]
 8001e62:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001e64:	4a07      	ldr	r2, [pc, #28]	; (8001e84 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001e66:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001e68:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8001e6a:	e005      	b.n	8001e78 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8001e6c:	4b05      	ldr	r3, [pc, #20]	; (8001e84 <HAL_MPU_ConfigRegion+0x84>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8001e72:	4b04      	ldr	r3, [pc, #16]	; (8001e84 <HAL_MPU_ConfigRegion+0x84>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	611a      	str	r2, [r3, #16]
}
 8001e78:	bf00      	nop
 8001e7a:	370c      	adds	r7, #12
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr
 8001e84:	e000ed90 	.word	0xe000ed90

08001e88 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001e8c:	f7fe fef4 	bl	8000c78 <HAL_SYSTICK_Callback>
}
 8001e90:	bf00      	nop
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d101      	bne.n	8001ea6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e0c6      	b.n	8002034 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d102      	bne.n	8001eb4 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f006 f90a 	bl	80080c8 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2223      	movs	r2, #35	; 0x23
 8001eb8:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eba:	4b60      	ldr	r3, [pc, #384]	; (800203c <HAL_ETH_Init+0x1a8>)
 8001ebc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001ec0:	4a5e      	ldr	r2, [pc, #376]	; (800203c <HAL_ETH_Init+0x1a8>)
 8001ec2:	f043 0302 	orr.w	r3, r3, #2
 8001ec6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001eca:	4b5c      	ldr	r3, [pc, #368]	; (800203c <HAL_ETH_Init+0x1a8>)
 8001ecc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001ed0:	f003 0302 	and.w	r3, r3, #2
 8001ed4:	60bb      	str	r3, [r7, #8]
 8001ed6:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	7a1b      	ldrb	r3, [r3, #8]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d103      	bne.n	8001ee8 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001ee0:	2000      	movs	r0, #0
 8001ee2:	f7ff fe31 	bl	8001b48 <HAL_SYSCFG_ETHInterfaceSelect>
 8001ee6:	e003      	b.n	8001ef0 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001ee8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001eec:	f7ff fe2c 	bl	8001b48 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f042 0201 	orr.w	r2, r2, #1
 8001f02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f06:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f08:	f7ff fde2 	bl	8001ad0 <HAL_GetTick>
 8001f0c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001f0e:	e00f      	b.n	8001f30 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8001f10:	f7ff fdde 	bl	8001ad0 <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001f1e:	d907      	bls.n	8001f30 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2204      	movs	r2, #4
 8001f24:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	22e0      	movs	r2, #224	; 0xe0
 8001f2a:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e081      	b.n	8002034 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 0301 	and.w	r3, r3, #1
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d1e6      	bne.n	8001f10 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f001 fa90 	bl	8003468 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001f48:	f003 f8be 	bl	80050c8 <HAL_RCC_GetHCLKFreq>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	4a3c      	ldr	r2, [pc, #240]	; (8002040 <HAL_ETH_Init+0x1ac>)
 8001f50:	fba2 2303 	umull	r2, r3, r2, r3
 8001f54:	0c9a      	lsrs	r2, r3, #18
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	3a01      	subs	r2, #1
 8001f5c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f001 f9e3 	bl	800332c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001f7c:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001f80:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	695b      	ldr	r3, [r3, #20]
 8001f86:	f003 0303 	and.w	r3, r3, #3
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d007      	beq.n	8001f9e <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2201      	movs	r2, #1
 8001f92:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	22e0      	movs	r2, #224	; 0xe0
 8001f98:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e04a      	b.n	8002034 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	f241 1308 	movw	r3, #4360	; 0x1108
 8001fa6:	4413      	add	r3, r2
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	4b26      	ldr	r3, [pc, #152]	; (8002044 <HAL_ETH_Init+0x1b0>)
 8001fac:	4013      	ands	r3, r2
 8001fae:	687a      	ldr	r2, [r7, #4]
 8001fb0:	6952      	ldr	r2, [r2, #20]
 8001fb2:	0052      	lsls	r2, r2, #1
 8001fb4:	6879      	ldr	r1, [r7, #4]
 8001fb6:	6809      	ldr	r1, [r1, #0]
 8001fb8:	431a      	orrs	r2, r3
 8001fba:	f241 1308 	movw	r3, #4360	; 0x1108
 8001fbe:	440b      	add	r3, r1
 8001fc0:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f001 faa8 	bl	8003518 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f001 faec 	bl	80035a6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	3305      	adds	r3, #5
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	021a      	lsls	r2, r3, #8
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	3304      	adds	r3, #4
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	430a      	orrs	r2, r1
 8001fe8:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	3303      	adds	r3, #3
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	061a      	lsls	r2, r3, #24
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	3302      	adds	r3, #2
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	041b      	lsls	r3, r3, #16
 8002000:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	3301      	adds	r3, #1
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800200c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800201a:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800201c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2200      	movs	r2, #0
 8002024:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2210      	movs	r2, #16
 800202a:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2210      	movs	r2, #16
 8002030:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8002032:	2300      	movs	r3, #0
}
 8002034:	4618      	mov	r0, r3
 8002036:	3710      	adds	r7, #16
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	58024400 	.word	0x58024400
 8002040:	431bde83 	.word	0x431bde83
 8002044:	ffff8001 	.word	0xffff8001

08002048 <HAL_ETH_DescAssignMemory>:
  * @param  pBuffer1: address of buffer 1
  * @param  pBuffer2: address of buffer 2 if available
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DescAssignMemory(ETH_HandleTypeDef *heth, uint32_t Index, uint8_t *pBuffer1, uint8_t *pBuffer2)
{
 8002048:	b480      	push	{r7}
 800204a:	b087      	sub	sp, #28
 800204c:	af00      	add	r7, sp, #0
 800204e:	60f8      	str	r0, [r7, #12]
 8002050:	60b9      	str	r1, [r7, #8]
 8002052:	607a      	str	r2, [r7, #4]
 8002054:	603b      	str	r3, [r7, #0]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[Index];
 8002056:	68fa      	ldr	r2, [r7, #12]
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	3310      	adds	r3, #16
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	4413      	add	r3, r2
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	617b      	str	r3, [r7, #20]

  if((pBuffer1 == NULL) || (Index >= (uint32_t)ETH_RX_DESC_CNT))
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d002      	beq.n	8002070 <HAL_ETH_DescAssignMemory+0x28>
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	2b03      	cmp	r3, #3
 800206e:	d904      	bls.n	800207a <HAL_ETH_DescAssignMemory+0x32>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2201      	movs	r2, #1
 8002074:	675a      	str	r2, [r3, #116]	; 0x74
    /* Return Error */
    return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e021      	b.n	80020be <HAL_ETH_DescAssignMemory+0x76>
  }

  /* write buffer address to RDES0 */
  WRITE_REG(dmarxdesc->DESC0, (uint32_t)pBuffer1);
 800207a:	687a      	ldr	r2, [r7, #4]
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	601a      	str	r2, [r3, #0]
  /* store buffer address */
  WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)pBuffer1);
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	611a      	str	r2, [r3, #16]
  /* set buffer address valid bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	68db      	ldr	r3, [r3, #12]
 800208a:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	60da      	str	r2, [r3, #12]

  if(pBuffer2 != NULL)
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d00b      	beq.n	80020b0 <HAL_ETH_DescAssignMemory+0x68>
  {
    /* write buffer 2 address to RDES1 */
    WRITE_REG(dmarxdesc->DESC2, (uint32_t)pBuffer2);
 8002098:	683a      	ldr	r2, [r7, #0]
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	609a      	str	r2, [r3, #8]
     /* store buffer 2 address */
    WRITE_REG(dmarxdesc->BackupAddr1, (uint32_t)pBuffer2);
 800209e:	683a      	ldr	r2, [r7, #0]
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	615a      	str	r2, [r3, #20]
    /* set buffer 2 address valid bit to RDES3 */
    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	60da      	str	r2, [r3, #12]
  }
  /* set OWN bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80020bc:	2300      	movs	r3, #0
}
 80020be:	4618      	mov	r0, r3
 80020c0:	371c      	adds	r7, #28
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr

080020ca <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 80020ca:	b480      	push	{r7}
 80020cc:	b083      	sub	sp, #12
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	6078      	str	r0, [r7, #4]
  if(heth->gState == HAL_ETH_STATE_READY)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80020d6:	2b10      	cmp	r3, #16
 80020d8:	d14c      	bne.n	8002174 <HAL_ETH_Start+0xaa>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2223      	movs	r2, #35	; 0x23
 80020de:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f042 0202 	orr.w	r2, r2, #2
 80020ee:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f042 0201 	orr.w	r2, r2, #1
 80020fe:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f042 0201 	orr.w	r2, r2, #1
 8002110:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	f241 1304 	movw	r3, #4356	; 0x1104
 800211c:	4413      	add	r3, r2
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	6811      	ldr	r1, [r2, #0]
 8002124:	f043 0201 	orr.w	r2, r3, #1
 8002128:	f241 1304 	movw	r3, #4356	; 0x1104
 800212c:	440b      	add	r3, r1
 800212e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	f241 1308 	movw	r3, #4360	; 0x1108
 8002138:	4413      	add	r3, r2
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	687a      	ldr	r2, [r7, #4]
 800213e:	6811      	ldr	r1, [r2, #0]
 8002140:	f043 0201 	orr.w	r2, r3, #1
 8002144:	f241 1308 	movw	r3, #4360	; 0x1108
 8002148:	440b      	add	r3, r1
 800214a:	601a      	str	r2, [r3, #0]

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f442 7281 	orr.w	r2, r2, #258	; 0x102
 800215e:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002162:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2210      	movs	r2, #16
 8002168:	66da      	str	r2, [r3, #108]	; 0x6c
    heth->RxState = HAL_ETH_STATE_BUSY_RX;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2222      	movs	r2, #34	; 0x22
 800216e:	671a      	str	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8002170:	2300      	movs	r3, #0
 8002172:	e000      	b.n	8002176 <HAL_ETH_Start+0xac>
  }
  else
  {
    return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
  }
}
 8002176:	4618      	mov	r0, r3
 8002178:	370c      	adds	r7, #12
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr

08002182 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8002182:	b480      	push	{r7}
 8002184:	b083      	sub	sp, #12
 8002186:	af00      	add	r7, sp, #0
 8002188:	6078      	str	r0, [r7, #4]
  if(heth->gState != HAL_ETH_STATE_RESET)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800218e:	2b00      	cmp	r3, #0
 8002190:	d040      	beq.n	8002214 <HAL_ETH_Stop+0x92>
  {
     /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2223      	movs	r2, #35	; 0x23
 8002196:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	f241 1304 	movw	r3, #4356	; 0x1104
 80021a0:	4413      	add	r3, r2
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	6811      	ldr	r1, [r2, #0]
 80021a8:	f023 0201 	bic.w	r2, r3, #1
 80021ac:	f241 1304 	movw	r3, #4356	; 0x1104
 80021b0:	440b      	add	r3, r1
 80021b2:	601a      	str	r2, [r3, #0]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	f241 1308 	movw	r3, #4360	; 0x1108
 80021bc:	4413      	add	r3, r2
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	687a      	ldr	r2, [r7, #4]
 80021c2:	6811      	ldr	r1, [r2, #0]
 80021c4:	f023 0201 	bic.w	r2, r3, #1
 80021c8:	f241 1308 	movw	r3, #4360	; 0x1108
 80021cc:	440b      	add	r3, r1
 80021ce:	601a      	str	r2, [r3, #0]

    /* Disable the MAC reception */
    CLEAR_BIT( heth->Instance->MACCR, ETH_MACCR_RE);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f022 0201 	bic.w	r2, r2, #1
 80021de:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f042 0201 	orr.w	r2, r2, #1
 80021f0:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f022 0202 	bic.w	r2, r2, #2
 8002202:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2210      	movs	r2, #16
 8002208:	66da      	str	r2, [r3, #108]	; 0x6c
    heth->RxState = HAL_ETH_STATE_READY;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2210      	movs	r2, #16
 800220e:	671a      	str	r2, [r3, #112]	; 0x70

    /* Return function status */
    return HAL_OK;
 8002210:	2300      	movs	r3, #0
 8002212:	e000      	b.n	8002216 <HAL_ETH_Stop+0x94>
  }
  else
  {
    return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
  }
}
 8002216:	4618      	mov	r0, r3
 8002218:	370c      	adds	r7, #12
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr

08002222 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8002222:	b580      	push	{r7, lr}
 8002224:	b086      	sub	sp, #24
 8002226:	af00      	add	r7, sp, #0
 8002228:	60f8      	str	r0, [r7, #12]
 800222a:	60b9      	str	r1, [r7, #8]
 800222c:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  const ETH_DMADescTypeDef *dmatxdesc;

  if(pTxConfig == NULL)
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d107      	bne.n	8002244 <HAL_ETH_Transmit+0x22>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002238:	f043 0201 	orr.w	r2, r3, #1
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	675a      	str	r2, [r3, #116]	; 0x74
    return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e073      	b.n	800232c <HAL_ETH_Transmit+0x10a>
  }

  if(heth->gState == HAL_ETH_STATE_READY)
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002248:	2b10      	cmp	r3, #16
 800224a:	d16e      	bne.n	800232a <HAL_ETH_Transmit+0x108>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 800224c:	2200      	movs	r2, #0
 800224e:	68b9      	ldr	r1, [r7, #8]
 8002250:	68f8      	ldr	r0, [r7, #12]
 8002252:	f001 fa05 	bl	8003660 <ETH_Prepare_Tx_Descriptors>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d007      	beq.n	800226c <HAL_ETH_Transmit+0x4a>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002260:	f043 0202 	orr.w	r2, r3, #2
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	675a      	str	r2, [r3, #116]	; 0x74
      return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e05f      	b.n	800232c <HAL_ETH_Transmit+0x10a>
    }

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	3206      	adds	r2, #6
 8002274:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002278:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800227e:	1c5a      	adds	r2, r3, #1
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	629a      	str	r2, [r3, #40]	; 0x28
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002288:	2b03      	cmp	r3, #3
 800228a:	d904      	bls.n	8002296 <HAL_ETH_Transmit+0x74>
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002290:	1f1a      	subs	r2, r3, #4
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	68fa      	ldr	r2, [r7, #12]
 80022a0:	3106      	adds	r1, #6
 80022a2:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80022a6:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 80022aa:	601a      	str	r2, [r3, #0]

    tickstart = HAL_GetTick();
 80022ac:	f7ff fc10 	bl	8001ad0 <HAL_GetTick>
 80022b0:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 80022b2:	e034      	b.n	800231e <HAL_ETH_Transmit+0xfc>
    {
      if((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d011      	beq.n	80022ea <HAL_ETH_Transmit+0xc8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022ca:	f043 0208 	orr.w	r2, r3, #8
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	675a      	str	r2, [r3, #116]	; 0x74
        heth->DMAErrorCode = heth->Instance->DMACSR;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	679a      	str	r2, [r3, #120]	; 0x78
        /* Set ETH HAL State to Ready */
        heth->gState = HAL_ETH_STATE_ERROR;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	22e0      	movs	r2, #224	; 0xe0
 80022e4:	66da      	str	r2, [r3, #108]	; 0x6c
        /* Return function status */
        return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e020      	b.n	800232c <HAL_ETH_Transmit+0x10a>
      }

      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022f0:	d015      	beq.n	800231e <HAL_ETH_Transmit+0xfc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout) || (Timeout == 0U))
 80022f2:	f7ff fbed 	bl	8001ad0 <HAL_GetTick>
 80022f6:	4602      	mov	r2, r0
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	429a      	cmp	r2, r3
 8002300:	d302      	bcc.n	8002308 <HAL_ETH_Transmit+0xe6>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d10a      	bne.n	800231e <HAL_ETH_Transmit+0xfc>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800230c:	f043 0204 	orr.w	r2, r3, #4
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	675a      	str	r2, [r3, #116]	; 0x74
          heth->gState = HAL_ETH_STATE_ERROR;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	22e0      	movs	r2, #224	; 0xe0
 8002318:	66da      	str	r2, [r3, #108]	; 0x6c
          return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e006      	b.n	800232c <HAL_ETH_Transmit+0x10a>
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	68db      	ldr	r3, [r3, #12]
 8002322:	2b00      	cmp	r3, #0
 8002324:	dbc6      	blt.n	80022b4 <HAL_ETH_Transmit+0x92>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8002326:	2300      	movs	r3, #0
 8002328:	e000      	b.n	800232c <HAL_ETH_Transmit+0x10a>
  }
  else
  {
    return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
  }
}
 800232c:	4618      	mov	r0, r3
 800232e:	3718      	adds	r7, #24
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}

08002334 <HAL_ETH_IsRxDataAvailable>:
  *         the configuration information for ETHERNET module
  * @retval  1: A Packet is received
  *          0: no Packet received
  */
uint8_t HAL_ETH_IsRxDataAvailable(ETH_HandleTypeDef *heth)
{
 8002334:	b480      	push	{r7}
 8002336:	b089      	sub	sp, #36	; 0x24
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	3344      	adds	r3, #68	; 0x44
 8002340:	60bb      	str	r3, [r7, #8]
  uint32_t descidx = dmarxdesclist->CurRxDesc;
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	691b      	ldr	r3, [r3, #16]
 8002346:	61fb      	str	r3, [r7, #28]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	69fa      	ldr	r2, [r7, #28]
 800234c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002350:	61bb      	str	r3, [r7, #24]
  uint32_t descscancnt = 0;
 8002352:	2300      	movs	r3, #0
 8002354:	617b      	str	r3, [r7, #20]
  uint32_t appdesccnt = 0, firstappdescidx = 0;
 8002356:	2300      	movs	r3, #0
 8002358:	613b      	str	r3, [r7, #16]
 800235a:	2300      	movs	r3, #0
 800235c:	60fb      	str	r3, [r7, #12]

  if(dmarxdesclist->AppDescNbr != 0U)
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	699b      	ldr	r3, [r3, #24]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d06b      	beq.n	800243e <HAL_ETH_IsRxDataAvailable+0x10a>
  {
    /* data already received by not yet processed*/
    return 0;
 8002366:	2300      	movs	r3, #0
 8002368:	e0ce      	b.n	8002508 <HAL_ETH_IsRxDataAvailable+0x1d4>
  }

  /* Check if descriptor is not owned by DMA */
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
  {
    descscancnt++;
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	3301      	adds	r3, #1
 800236e:	617b      	str	r3, [r7, #20]

    /* Check if last descriptor */
    if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8002370:	69bb      	ldr	r3, [r7, #24]
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002378:	2b00      	cmp	r3, #0
 800237a:	d036      	beq.n	80023ea <HAL_ETH_IsRxDataAvailable+0xb6>
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	3301      	adds	r3, #1
 8002380:	613b      	str	r3, [r7, #16]

      if(appdesccnt == 1U)
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	2b01      	cmp	r3, #1
 8002386:	d101      	bne.n	800238c <HAL_ETH_IsRxDataAvailable+0x58>
      {
        WRITE_REG(firstappdescidx, descidx);
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	60fb      	str	r3, [r7, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	3301      	adds	r3, #1
 8002390:	61fb      	str	r3, [r7, #28]
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	2b03      	cmp	r3, #3
 8002396:	d902      	bls.n	800239e <HAL_ETH_IsRxDataAvailable+0x6a>
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	3b04      	subs	r3, #4
 800239c:	61fb      	str	r3, [r7, #28]

      /* Check for Context descriptor */
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	69fa      	ldr	r2, [r7, #28]
 80023a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023a6:	61bb      	str	r3, [r7, #24]

      if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_OWN)  == (uint32_t)RESET)
 80023a8:	69bb      	ldr	r3, [r7, #24]
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	db11      	blt.n	80023d4 <HAL_ETH_IsRxDataAvailable+0xa0>
      {
        if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 80023b0:	69bb      	ldr	r3, [r7, #24]
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d00b      	beq.n	80023d4 <HAL_ETH_IsRxDataAvailable+0xa0>
        {
          /* Increment the number of descriptors to be passed to the application */
          dmarxdesclist->AppContextDesc = 1;
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	2201      	movs	r2, #1
 80023c0:	61da      	str	r2, [r3, #28]
          /* Increment current rx descriptor index */
          INCR_RX_DESC_INDEX(descidx, 1U);
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	3301      	adds	r3, #1
 80023c6:	61fb      	str	r3, [r7, #28]
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	2b03      	cmp	r3, #3
 80023cc:	d902      	bls.n	80023d4 <HAL_ETH_IsRxDataAvailable+0xa0>
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	3b04      	subs	r3, #4
 80023d2:	61fb      	str	r3, [r7, #28]
        }
      }
      /* Fill information to Rx descriptors list */
      dmarxdesclist->CurRxDesc = descidx;
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	69fa      	ldr	r2, [r7, #28]
 80023d8:	611a      	str	r2, [r3, #16]
      dmarxdesclist->FirstAppDesc = firstappdescidx;
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	68fa      	ldr	r2, [r7, #12]
 80023de:	615a      	str	r2, [r3, #20]
      dmarxdesclist->AppDescNbr = appdesccnt;
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	693a      	ldr	r2, [r7, #16]
 80023e4:	619a      	str	r2, [r3, #24]

      /* Return function status */
      return 1;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e08e      	b.n	8002508 <HAL_ETH_IsRxDataAvailable+0x1d4>
    }
    /* Check if first descriptor */
    else if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 80023ea:	69bb      	ldr	r3, [r7, #24]
 80023ec:	68db      	ldr	r3, [r3, #12]
 80023ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d012      	beq.n	800241c <HAL_ETH_IsRxDataAvailable+0xe8>
    {
      WRITE_REG(firstappdescidx, descidx);
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	60fb      	str	r3, [r7, #12]
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt = 1U;
 80023fa:	2301      	movs	r3, #1
 80023fc:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	3301      	adds	r3, #1
 8002402:	61fb      	str	r3, [r7, #28]
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	2b03      	cmp	r3, #3
 8002408:	d902      	bls.n	8002410 <HAL_ETH_IsRxDataAvailable+0xdc>
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	3b04      	subs	r3, #4
 800240e:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	69fa      	ldr	r2, [r7, #28]
 8002414:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002418:	61bb      	str	r3, [r7, #24]
 800241a:	e010      	b.n	800243e <HAL_ETH_IsRxDataAvailable+0x10a>
    }
    /* It should be an intermediate descriptor */
    else
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	3301      	adds	r3, #1
 8002420:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	3301      	adds	r3, #1
 8002426:	61fb      	str	r3, [r7, #28]
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	2b03      	cmp	r3, #3
 800242c:	d902      	bls.n	8002434 <HAL_ETH_IsRxDataAvailable+0x100>
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	3b04      	subs	r3, #4
 8002432:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	69fa      	ldr	r2, [r7, #28]
 8002438:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800243c:	61bb      	str	r3, [r7, #24]
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
 800243e:	69bb      	ldr	r3, [r7, #24]
 8002440:	68db      	ldr	r3, [r3, #12]
 8002442:	2b00      	cmp	r3, #0
 8002444:	db02      	blt.n	800244c <HAL_ETH_IsRxDataAvailable+0x118>
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	2b03      	cmp	r3, #3
 800244a:	d98e      	bls.n	800236a <HAL_ETH_IsRxDataAvailable+0x36>
    }
  }

  /* Build Descriptors if an incomplete Packet is received */
  if(appdesccnt > 0U)
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d056      	beq.n	8002500 <HAL_ETH_IsRxDataAvailable+0x1cc>
  {
    dmarxdesclist->CurRxDesc = descidx;
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	69fa      	ldr	r2, [r7, #28]
 8002456:	611a      	str	r2, [r3, #16]
    dmarxdesclist->FirstAppDesc = firstappdescidx;
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	68fa      	ldr	r2, [r7, #12]
 800245c:	615a      	str	r2, [r3, #20]
    descidx = firstappdescidx;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	61fb      	str	r3, [r7, #28]
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	69fa      	ldr	r2, [r7, #28]
 8002466:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800246a:	61bb      	str	r3, [r7, #24]

    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 800246c:	2300      	movs	r3, #0
 800246e:	617b      	str	r3, [r7, #20]
 8002470:	e03b      	b.n	80024ea <HAL_ETH_IsRxDataAvailable+0x1b6>
    {
      WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 8002472:	69bb      	ldr	r3, [r7, #24]
 8002474:	691a      	ldr	r2, [r3, #16]
 8002476:	69bb      	ldr	r3, [r7, #24]
 8002478:	601a      	str	r2, [r3, #0]
      WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 800247a:	69bb      	ldr	r3, [r7, #24]
 800247c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002480:	60da      	str	r2, [r3, #12]

      if (READ_REG(dmarxdesc->BackupAddr1) != ((uint32_t)RESET))
 8002482:	69bb      	ldr	r3, [r7, #24]
 8002484:	695b      	ldr	r3, [r3, #20]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d009      	beq.n	800249e <HAL_ETH_IsRxDataAvailable+0x16a>
      {
        WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 800248a:	69bb      	ldr	r3, [r7, #24]
 800248c:	695a      	ldr	r2, [r3, #20]
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	609a      	str	r2, [r3, #8]
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8002492:	69bb      	ldr	r3, [r7, #24]
 8002494:	68db      	ldr	r3, [r3, #12]
 8002496:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800249a:	69bb      	ldr	r3, [r7, #24]
 800249c:	60da      	str	r2, [r3, #12]
      }

      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 800249e:	69bb      	ldr	r3, [r7, #24]
 80024a0:	68db      	ldr	r3, [r3, #12]
 80024a2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80024a6:	69bb      	ldr	r3, [r7, #24]
 80024a8:	60da      	str	r2, [r3, #12]

      if(dmarxdesclist->ItMode != ((uint32_t)RESET))
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	6a1b      	ldr	r3, [r3, #32]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d005      	beq.n	80024be <HAL_ETH_IsRxDataAvailable+0x18a>
      {
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 80024b2:	69bb      	ldr	r3, [r7, #24]
 80024b4:	68db      	ldr	r3, [r3, #12]
 80024b6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80024ba:	69bb      	ldr	r3, [r7, #24]
 80024bc:	60da      	str	r2, [r3, #12]
      }
      if(descscancnt < (appdesccnt - 1U))
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	3b01      	subs	r3, #1
 80024c2:	697a      	ldr	r2, [r7, #20]
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d20d      	bcs.n	80024e4 <HAL_ETH_IsRxDataAvailable+0x1b0>
      {
        /* Increment rx descriptor index */
        INCR_RX_DESC_INDEX(descidx, 1U);
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	3301      	adds	r3, #1
 80024cc:	61fb      	str	r3, [r7, #28]
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	2b03      	cmp	r3, #3
 80024d2:	d902      	bls.n	80024da <HAL_ETH_IsRxDataAvailable+0x1a6>
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	3b04      	subs	r3, #4
 80024d8:	61fb      	str	r3, [r7, #28]
        /* Get descriptor address */
        dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	69fa      	ldr	r2, [r7, #28]
 80024de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024e2:	61bb      	str	r3, [r7, #24]
    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	3301      	adds	r3, #1
 80024e8:	617b      	str	r3, [r7, #20]
 80024ea:	697a      	ldr	r2, [r7, #20]
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	429a      	cmp	r2, r3
 80024f0:	d3bf      	bcc.n	8002472 <HAL_ETH_IsRxDataAvailable+0x13e>
      }
    }

    /* Set the Tail pointer address to the last rx descriptor hold by the app */
    WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6819      	ldr	r1, [r3, #0]
 80024f6:	69ba      	ldr	r2, [r7, #24]
 80024f8:	f241 1328 	movw	r3, #4392	; 0x1128
 80024fc:	440b      	add	r3, r1
 80024fe:	601a      	str	r2, [r3, #0]
  }

  /* Fill information to Rx descriptors list: No received Packet */
  dmarxdesclist->AppDescNbr = 0U;
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	2200      	movs	r2, #0
 8002504:	619a      	str	r2, [r3, #24]

  return 0;
 8002506:	2300      	movs	r3, #0
}
 8002508:	4618      	mov	r0, r3
 800250a:	3724      	adds	r7, #36	; 0x24
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr

08002514 <HAL_ETH_GetRxDataBuffer>:
  *         the configuration information for ETHERNET module
  * @param  RxBuffer: Pointer to a ETH_BufferTypeDef structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataBuffer(ETH_HandleTypeDef *heth, ETH_BufferTypeDef *RxBuffer)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b08a      	sub	sp, #40	; 0x28
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	3344      	adds	r3, #68	; 0x44
 8002522:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	695b      	ldr	r3, [r3, #20]
 8002528:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t index, accumulatedlen = 0, lastdesclen;
 800252a:	2300      	movs	r3, #0
 800252c:	61fb      	str	r3, [r7, #28]
  __IO const ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002532:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002536:	61bb      	str	r3, [r7, #24]
  ETH_BufferTypeDef *rxbuff = RxBuffer;
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	617b      	str	r3, [r7, #20]

  if(rxbuff == NULL)
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d104      	bne.n	800254c <HAL_ETH_GetRxDataBuffer+0x38>
  {
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2201      	movs	r2, #1
 8002546:	675a      	str	r2, [r3, #116]	; 0x74
    return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e07d      	b.n	8002648 <HAL_ETH_GetRxDataBuffer+0x134>
  }

  if(dmarxdesclist->AppDescNbr == 0U)
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	699b      	ldr	r3, [r3, #24]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d10f      	bne.n	8002574 <HAL_ETH_GetRxDataBuffer+0x60>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	f7ff feed 	bl	8002334 <HAL_ETH_IsRxDataAvailable>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d101      	bne.n	8002564 <HAL_ETH_GetRxDataBuffer+0x50>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e071      	b.n	8002648 <HAL_ETH_GetRxDataBuffer+0x134>
    }
    else
    {
      descidx = dmarxdesclist->FirstAppDesc;
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	695b      	ldr	r3, [r3, #20]
 8002568:	627b      	str	r3, [r7, #36]	; 0x24
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800256e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002572:	61bb      	str	r3, [r7, #24]
    }
  }

  /* Get intermediate descriptors buffers: in case of the Packet is split into multi descriptors */
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 8002574:	2300      	movs	r3, #0
 8002576:	623b      	str	r3, [r7, #32]
 8002578:	e031      	b.n	80025de <HAL_ETH_GetRxDataBuffer+0xca>
  {
    /* Get Address and length of the first buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 800257a:	69bb      	ldr	r3, [r7, #24]
 800257c:	691b      	ldr	r3, [r3, #16]
 800257e:	461a      	mov	r2, r3
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	601a      	str	r2, [r3, #0]
    rxbuff->len =  heth->Init.RxBuffLen;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	695a      	ldr	r2, [r3, #20]
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	605a      	str	r2, [r3, #4]

    /* Check if the second buffer address of this descriptor is valid */
    if(dmarxdesc->BackupAddr1 != 0U)
 800258c:	69bb      	ldr	r3, [r7, #24]
 800258e:	695b      	ldr	r3, [r3, #20]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d00b      	beq.n	80025ac <HAL_ETH_GetRxDataBuffer+0x98>
    {
      /* Point to next buffer */
      rxbuff = rxbuff->next;
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	617b      	str	r3, [r7, #20]
      /* Get Address and length of the second buffer address */
      rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 800259a:	69bb      	ldr	r3, [r7, #24]
 800259c:	695b      	ldr	r3, [r3, #20]
 800259e:	461a      	mov	r2, r3
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	601a      	str	r2, [r3, #0]
      rxbuff->len =  heth->Init.RxBuffLen;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	695a      	ldr	r2, [r3, #20]
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	605a      	str	r2, [r3, #4]
    {
      /* Nothing to do here */
    }

    /* get total length until this descriptor */
    accumulatedlen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 80025ac:	69bb      	ldr	r3, [r7, #24]
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80025b4:	61fb      	str	r3, [r7, #28]

    /* Increment to next descriptor */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80025b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b8:	3301      	adds	r3, #1
 80025ba:	627b      	str	r3, [r7, #36]	; 0x24
 80025bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025be:	2b03      	cmp	r3, #3
 80025c0:	d902      	bls.n	80025c8 <HAL_ETH_GetRxDataBuffer+0xb4>
 80025c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c4:	3b04      	subs	r3, #4
 80025c6:	627b      	str	r3, [r7, #36]	; 0x24
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025d0:	61bb      	str	r3, [r7, #24]

    /* Point to next buffer */
    rxbuff = rxbuff->next;
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	617b      	str	r3, [r7, #20]
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 80025d8:	6a3b      	ldr	r3, [r7, #32]
 80025da:	3301      	adds	r3, #1
 80025dc:	623b      	str	r3, [r7, #32]
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	699b      	ldr	r3, [r3, #24]
 80025e2:	3b01      	subs	r3, #1
 80025e4:	6a3a      	ldr	r2, [r7, #32]
 80025e6:	429a      	cmp	r2, r3
 80025e8:	d3c7      	bcc.n	800257a <HAL_ETH_GetRxDataBuffer+0x66>
  }

  /* last descriptor data length */
  lastdesclen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - accumulatedlen;
 80025ea:	69bb      	ldr	r3, [r7, #24]
 80025ec:	68db      	ldr	r3, [r3, #12]
 80025ee:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	60fb      	str	r3, [r7, #12]

  /* Get Address of the first buffer address */
  rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 80025f8:	69bb      	ldr	r3, [r7, #24]
 80025fa:	691b      	ldr	r3, [r3, #16]
 80025fc:	461a      	mov	r2, r3
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	601a      	str	r2, [r3, #0]

  /* data is in only one buffer */
  if(lastdesclen <= heth->Init.RxBuffLen)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	695b      	ldr	r3, [r3, #20]
 8002606:	68fa      	ldr	r2, [r7, #12]
 8002608:	429a      	cmp	r2, r3
 800260a:	d803      	bhi.n	8002614 <HAL_ETH_GetRxDataBuffer+0x100>
  {
    rxbuff->len = lastdesclen;
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	68fa      	ldr	r2, [r7, #12]
 8002610:	605a      	str	r2, [r3, #4]
 8002612:	e018      	b.n	8002646 <HAL_ETH_GetRxDataBuffer+0x132>
  }
  /* data is in two buffers */
  else if(dmarxdesc->BackupAddr1 != 0U)
 8002614:	69bb      	ldr	r3, [r7, #24]
 8002616:	695b      	ldr	r3, [r3, #20]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d012      	beq.n	8002642 <HAL_ETH_GetRxDataBuffer+0x12e>
  {
    /* Get the Length of the first buffer address */
    rxbuff->len = heth->Init.RxBuffLen;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	695a      	ldr	r2, [r3, #20]
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	605a      	str	r2, [r3, #4]
    /* Point to next buffer */
    rxbuff = rxbuff->next;
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	617b      	str	r3, [r7, #20]
    /* Get the Address the Length of the second buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 800262a:	69bb      	ldr	r3, [r7, #24]
 800262c:	695b      	ldr	r3, [r3, #20]
 800262e:	461a      	mov	r2, r3
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	601a      	str	r2, [r3, #0]
    rxbuff->len =  lastdesclen - (heth->Init.RxBuffLen);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	695b      	ldr	r3, [r3, #20]
 8002638:	68fa      	ldr	r2, [r7, #12]
 800263a:	1ad2      	subs	r2, r2, r3
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	605a      	str	r2, [r3, #4]
 8002640:	e001      	b.n	8002646 <HAL_ETH_GetRxDataBuffer+0x132>
  }
  else /* Buffer 2 not valid*/
  {
    return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e000      	b.n	8002648 <HAL_ETH_GetRxDataBuffer+0x134>
  }

  return HAL_OK;
 8002646:	2300      	movs	r3, #0
}
 8002648:	4618      	mov	r0, r3
 800264a:	3728      	adds	r7, #40	; 0x28
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}

08002650 <HAL_ETH_GetRxDataLength>:
  *         the configuration information for ETHERNET module
  * @param  Length: parameter to hold Rx packet length
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataLength(ETH_HandleTypeDef *heth, uint32_t *Length)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b086      	sub	sp, #24
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	3344      	adds	r3, #68	; 0x44
 800265e:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	695b      	ldr	r3, [r3, #20]
 8002664:	617b      	str	r3, [r7, #20]
  __IO const ETH_DMADescTypeDef *dmarxdesc;

  if(dmarxdesclist->AppDescNbr == 0U)
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	699b      	ldr	r3, [r3, #24]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d107      	bne.n	800267e <HAL_ETH_GetRxDataLength+0x2e>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f7ff fe60 	bl	8002334 <HAL_ETH_IsRxDataAvailable>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d101      	bne.n	800267e <HAL_ETH_GetRxDataLength+0x2e>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e017      	b.n	80026ae <HAL_ETH_GetRxDataLength+0x5e>
    }
  }

  /* Get index of last descriptor */
  INCR_RX_DESC_INDEX(descidx, (dmarxdesclist->AppDescNbr - 1U));
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	699a      	ldr	r2, [r3, #24]
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	4413      	add	r3, r2
 8002686:	3b01      	subs	r3, #1
 8002688:	617b      	str	r3, [r7, #20]
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	2b03      	cmp	r3, #3
 800268e:	d902      	bls.n	8002696 <HAL_ETH_GetRxDataLength+0x46>
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	3b04      	subs	r3, #4
 8002694:	617b      	str	r3, [r7, #20]
  /* Point to last descriptor */
  dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	697a      	ldr	r2, [r7, #20]
 800269a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800269e:	60fb      	str	r3, [r7, #12]

  *Length = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80026ac:	2300      	movs	r3, #0
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3718      	adds	r7, #24
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}

080026b6 <HAL_ETH_BuildRxDescriptors>:
* @param  heth: pointer to a ETH_HandleTypeDef structure that contains
*         the configuration information for ETHERNET module
* @retval HAL status.
*/
HAL_StatusTypeDef HAL_ETH_BuildRxDescriptors(ETH_HandleTypeDef *heth)
{
 80026b6:	b480      	push	{r7}
 80026b8:	b089      	sub	sp, #36	; 0x24
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	3344      	adds	r3, #68	; 0x44
 80026c2:	60fb      	str	r3, [r7, #12]
  uint32_t descindex = dmarxdesclist->FirstAppDesc;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	695b      	ldr	r3, [r3, #20]
 80026c8:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	69fa      	ldr	r2, [r7, #28]
 80026ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026d2:	61bb      	str	r3, [r7, #24]
  uint32_t totalappdescnbr = dmarxdesclist->AppDescNbr;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	699b      	ldr	r3, [r3, #24]
 80026d8:	617b      	str	r3, [r7, #20]
  uint32_t descscan;

  if(dmarxdesclist->AppDescNbr == 0U)
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	699b      	ldr	r3, [r3, #24]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d101      	bne.n	80026e6 <HAL_ETH_BuildRxDescriptors+0x30>
  {
    /* No Rx descriptors to build */
    return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e057      	b.n	8002796 <HAL_ETH_BuildRxDescriptors+0xe0>
  }

  if(dmarxdesclist->AppContextDesc != 0U)
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	69db      	ldr	r3, [r3, #28]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d002      	beq.n	80026f4 <HAL_ETH_BuildRxDescriptors+0x3e>
  {
    /* A context descriptor is available */
    totalappdescnbr += 1U;
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	3301      	adds	r3, #1
 80026f2:	617b      	str	r3, [r7, #20]
  }

  for(descscan =0; descscan < totalappdescnbr; descscan++)
 80026f4:	2300      	movs	r3, #0
 80026f6:	613b      	str	r3, [r7, #16]
 80026f8:	e03b      	b.n	8002772 <HAL_ETH_BuildRxDescriptors+0xbc>
  {
    WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 80026fa:	69bb      	ldr	r3, [r7, #24]
 80026fc:	691a      	ldr	r2, [r3, #16]
 80026fe:	69bb      	ldr	r3, [r7, #24]
 8002700:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8002702:	69bb      	ldr	r3, [r7, #24]
 8002704:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002708:	60da      	str	r2, [r3, #12]

    if (READ_REG(dmarxdesc->BackupAddr1) != 0U)
 800270a:	69bb      	ldr	r3, [r7, #24]
 800270c:	695b      	ldr	r3, [r3, #20]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d009      	beq.n	8002726 <HAL_ETH_BuildRxDescriptors+0x70>
    {
      WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 8002712:	69bb      	ldr	r3, [r7, #24]
 8002714:	695a      	ldr	r2, [r3, #20]
 8002716:	69bb      	ldr	r3, [r7, #24]
 8002718:	609a      	str	r2, [r3, #8]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 800271a:	69bb      	ldr	r3, [r7, #24]
 800271c:	68db      	ldr	r3, [r3, #12]
 800271e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002722:	69bb      	ldr	r3, [r7, #24]
 8002724:	60da      	str	r2, [r3, #12]
    }

    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8002726:	69bb      	ldr	r3, [r7, #24]
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800272e:	69bb      	ldr	r3, [r7, #24]
 8002730:	60da      	str	r2, [r3, #12]

    if(dmarxdesclist->ItMode != 0U)
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	6a1b      	ldr	r3, [r3, #32]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d005      	beq.n	8002746 <HAL_ETH_BuildRxDescriptors+0x90>
    {
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 800273a:	69bb      	ldr	r3, [r7, #24]
 800273c:	68db      	ldr	r3, [r3, #12]
 800273e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002742:	69bb      	ldr	r3, [r7, #24]
 8002744:	60da      	str	r2, [r3, #12]
    }

    if(descscan < (totalappdescnbr - 1U))
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	3b01      	subs	r3, #1
 800274a:	693a      	ldr	r2, [r7, #16]
 800274c:	429a      	cmp	r2, r3
 800274e:	d20d      	bcs.n	800276c <HAL_ETH_BuildRxDescriptors+0xb6>
    {
      /* Increment rx descriptor index */
      INCR_RX_DESC_INDEX(descindex, 1U);
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	3301      	adds	r3, #1
 8002754:	61fb      	str	r3, [r7, #28]
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	2b03      	cmp	r3, #3
 800275a:	d902      	bls.n	8002762 <HAL_ETH_BuildRxDescriptors+0xac>
 800275c:	69fb      	ldr	r3, [r7, #28]
 800275e:	3b04      	subs	r3, #4
 8002760:	61fb      	str	r3, [r7, #28]
      /* Get descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	69fa      	ldr	r2, [r7, #28]
 8002766:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800276a:	61bb      	str	r3, [r7, #24]
  for(descscan =0; descscan < totalappdescnbr; descscan++)
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	3301      	adds	r3, #1
 8002770:	613b      	str	r3, [r7, #16]
 8002772:	693a      	ldr	r2, [r7, #16]
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	429a      	cmp	r2, r3
 8002778:	d3bf      	bcc.n	80026fa <HAL_ETH_BuildRxDescriptors+0x44>
    }
  }

  /* Set the Tail pointer address to the last rx descriptor hold by the app */
  WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6819      	ldr	r1, [r3, #0]
 800277e:	69ba      	ldr	r2, [r7, #24]
 8002780:	f241 1328 	movw	r3, #4392	; 0x1128
 8002784:	440b      	add	r3, r1
 8002786:	601a      	str	r2, [r3, #0]

  /* reset the Application desc number */
  WRITE_REG(dmarxdesclist->AppDescNbr, 0);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2200      	movs	r2, #0
 800278c:	619a      	str	r2, [r3, #24]

  /*  reset the application context descriptor */
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2200      	movs	r2, #0
 8002792:	661a      	str	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8002794:	2300      	movs	r3, #0
}
 8002796:	4618      	mov	r0, r3
 8002798:	3724      	adds	r7, #36	; 0x24
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr
	...

080027a4 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b082      	sub	sp, #8
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027ba:	2b40      	cmp	r3, #64	; 0x40
 80027bc:	d113      	bne.n	80027e6 <HAL_ETH_IRQHandler+0x42>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	f241 1334 	movw	r3, #4404	; 0x1134
 80027c6:	4413      	add	r3, r2
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027ce:	2b40      	cmp	r3, #64	; 0x40
 80027d0:	d109      	bne.n	80027e6 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f000 f8de 	bl	8002994 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80027e0:	f248 0240 	movw	r2, #32832	; 0x8040
 80027e4:	601a      	str	r2, [r3, #0]
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 0301 	and.w	r3, r3, #1
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d113      	bne.n	8002820 <HAL_ETH_IRQHandler+0x7c>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	f241 1334 	movw	r3, #4404	; 0x1134
 8002800:	4413      	add	r3, r2
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0301 	and.w	r3, r3, #1
 8002808:	2b01      	cmp	r3, #1
 800280a:	d109      	bne.n	8002820 <HAL_ETH_IRQHandler+0x7c>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
        /*Call registered Transmit complete callback*/
        heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f000 f8b7 	bl	8002980 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800281a:	f248 0201 	movw	r2, #32769	; 0x8001
 800281e:	601a      	str	r2, [r3, #0]
    }
  }


  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800282e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002832:	d149      	bne.n	80028c8 <HAL_ETH_IRQHandler+0x124>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	f241 1334 	movw	r3, #4404	; 0x1134
 800283c:	4413      	add	r3, r2
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002844:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002848:	d13e      	bne.n	80028c8 <HAL_ETH_IRQHandler+0x124>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800284e:	f043 0208 	orr.w	r2, r3, #8
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	675a      	str	r2, [r3, #116]	; 0x74

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002864:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002868:	d11b      	bne.n	80028a2 <HAL_ETH_IRQHandler+0xfe>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	f241 1302 	movw	r3, #4354	; 0x1102
 8002878:	4013      	ands	r3, r2
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	6793      	str	r3, [r2, #120]	; 0x78

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	f241 1334 	movw	r3, #4404	; 0x1134
 8002886:	4413      	add	r3, r2
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	6811      	ldr	r1, [r2, #0]
 800288e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002892:	f241 1334 	movw	r3, #4404	; 0x1134
 8002896:	440b      	add	r3, r1
 8002898:	601a      	str	r2, [r3, #0]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	22e0      	movs	r2, #224	; 0xe0
 800289e:	66da      	str	r2, [r3, #108]	; 0x6c
 80028a0:	e00f      	b.n	80028c2 <HAL_ETH_IRQHandler+0x11e>
      }
      else
      {
        /* Get DMA error status  */
       heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f403 42cd 	and.w	r2, r3, #26240	; 0x6680
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	679a      	str	r2, [r3, #120]	; 0x78
                                                       ETH_DMACSR_RBU | ETH_DMACSR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80028bc:	f44f 42cd 	mov.w	r2, #26240	; 0x6680
 80028c0:	601a      	str	r2, [r3, #0]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered DMA Error callback*/
      heth->DMAErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_DMAErrorCallback(heth);
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	f000 f870 	bl	80029a8 <HAL_ETH_DMAErrorCallback>

    }
  }

  /* ETH MAC Error IT */
  if(__HAL_ETH_MAC_GET_IT(heth, (ETH_MACIER_RXSTSIE | ETH_MACIER_TXSTSIE)))
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80028d0:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 80028d4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80028d8:	d10e      	bne.n	80028f8 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	67da      	str	r2, [r3, #124]	; 0x7c

    heth->gState = HAL_ETH_STATE_ERROR;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	22e0      	movs	r2, #224	; 0xe0
 80028ea:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered MAC Error callback*/
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet MAC Error callback */
    HAL_ETH_MACErrorCallback(heth);
 80028ec:	6878      	ldr	r0, [r7, #4]
 80028ee:	f000 f865 	bl	80029bc <HAL_ETH_MACErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACErrorCode = (uint32_t)(0x0U);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2200      	movs	r2, #0
 80028f6:	67da      	str	r2, [r3, #124]	; 0x7c
  }

  /* ETH PMT IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002900:	f003 0310 	and.w	r3, r3, #16
 8002904:	2b10      	cmp	r3, #16
 8002906:	d10f      	bne.n	8002928 <HAL_ETH_IRQHandler+0x184>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002910:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f000 f858 	bl	80029d0 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2200      	movs	r2, #0
 8002924:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }

  /* ETH EEE IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002930:	f003 0320 	and.w	r3, r3, #32
 8002934:	2b20      	cmp	r3, #32
 8002936:	d10f      	bne.n	8002958 <HAL_ETH_IRQHandler+0x1b4>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002940:	f003 020f 	and.w	r2, r3, #15
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f000 f84a 	bl	80029e4 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2200      	movs	r2, #0
 8002954:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif
    }
  }
#else
  /* check ETH WAKEUP exti flag */
  if(__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8002958:	4b08      	ldr	r3, [pc, #32]	; (800297c <HAL_ETH_IRQHandler+0x1d8>)
 800295a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800295c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002960:	2b00      	cmp	r3, #0
 8002962:	d006      	beq.n	8002972 <HAL_ETH_IRQHandler+0x1ce>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8002964:	4b05      	ldr	r3, [pc, #20]	; (800297c <HAL_ETH_IRQHandler+0x1d8>)
 8002966:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800296a:	629a      	str	r2, [r3, #40]	; 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered WakeUp callback*/
      heth->WakeUpCallback(heth);
#else
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	f000 f843 	bl	80029f8 <HAL_ETH_WakeUpCallback>
#endif
  }
#endif
}
 8002972:	bf00      	nop
 8002974:	3708      	adds	r7, #8
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	58000080 	.word	0x58000080

08002980 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8002988:	bf00      	nop
 800298a:	370c      	adds	r7, #12
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr

08002994 <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 800299c:	bf00      	nop
 800299e:	370c      	adds	r7, #12
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr

080029a8 <HAL_ETH_DMAErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_DMAErrorCallback(ETH_HandleTypeDef *heth)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_DMAErrorCallback could be implemented in the user file
  */
}
 80029b0:	bf00      	nop
 80029b2:	370c      	adds	r7, #12
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr

080029bc <HAL_ETH_MACErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_MACErrorCallback(ETH_HandleTypeDef *heth)
{
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_MACErrorCallback could be implemented in the user file
  */
}
 80029c4:	bf00      	nop
 80029c6:	370c      	adds	r7, #12
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr

080029d0 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b083      	sub	sp, #12
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 80029d8:	bf00      	nop
 80029da:	370c      	adds	r7, #12
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr

080029e4 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 80029ec:	bf00      	nop
 80029ee:	370c      	adds	r7, #12
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr

080029f8 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8002a00:	bf00      	nop
 8002a02:	370c      	adds	r7, #12
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr

08002a0c <HAL_ETH_ReadPHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t *pRegValue)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b086      	sub	sp, #24
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	60f8      	str	r0, [r7, #12]
 8002a14:	60b9      	str	r1, [r7, #8]
 8002a16:	607a      	str	r2, [r7, #4]
 8002a18:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002a22:	f003 0301 	and.w	r3, r3, #1
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d001      	beq.n	8002a2e <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e03e      	b.n	8002aac <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002a36:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	055b      	lsls	r3, r3, #21
 8002a42:	4313      	orrs	r3, r2
 8002a44:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	041b      	lsls	r3, r3, #16
 8002a50:	4313      	orrs	r3, r2
 8002a52:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	f043 030c 	orr.w	r3, r3, #12
 8002a5a:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	f043 0301 	orr.w	r3, r3, #1
 8002a62:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	697a      	ldr	r2, [r7, #20]
 8002a6a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 8002a6e:	f7ff f82f 	bl	8001ad0 <HAL_GetTick>
 8002a72:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002a74:	e009      	b.n	8002a8a <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 8002a76:	f7ff f82b 	bl	8001ad0 <HAL_GetTick>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a84:	d901      	bls.n	8002a8a <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e010      	b.n	8002aac <HAL_ETH_ReadPHYRegister+0xa0>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002a92:	f003 0301 	and.w	r3, r3, #1
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d1ed      	bne.n	8002a76 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002aaa:	2300      	movs	r3, #0
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	3718      	adds	r7, #24
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}

08002ab4 <HAL_ETH_WritePHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t RegValue)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b086      	sub	sp, #24
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	60f8      	str	r0, [r7, #12]
 8002abc:	60b9      	str	r1, [r7, #8]
 8002abe:	607a      	str	r2, [r7, #4]
 8002ac0:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002aca:	f003 0301 	and.w	r3, r3, #1
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d001      	beq.n	8002ad6 <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e03c      	b.n	8002b50 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002ade:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	055b      	lsls	r3, r3, #21
 8002aea:	4313      	orrs	r3, r2
 8002aec:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	041b      	lsls	r3, r3, #16
 8002af8:	4313      	orrs	r3, r2
 8002afa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	f023 030c 	bic.w	r3, r3, #12
 8002b02:	f043 0304 	orr.w	r3, r3, #4
 8002b06:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	f043 0301 	orr.w	r3, r3, #1
 8002b0e:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	b29a      	uxth	r2, r3
 8002b14:	4b10      	ldr	r3, [pc, #64]	; (8002b58 <HAL_ETH_WritePHYRegister+0xa4>)
 8002b16:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8002b1a:	4a0f      	ldr	r2, [pc, #60]	; (8002b58 <HAL_ETH_WritePHYRegister+0xa4>)
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 8002b22:	f7fe ffd5 	bl	8001ad0 <HAL_GetTick>
 8002b26:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002b28:	e009      	b.n	8002b3e <HAL_ETH_WritePHYRegister+0x8a>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 8002b2a:	f7fe ffd1 	bl	8001ad0 <HAL_GetTick>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	1ad3      	subs	r3, r2, r3
 8002b34:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b38:	d901      	bls.n	8002b3e <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e008      	b.n	8002b50 <HAL_ETH_WritePHYRegister+0x9c>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002b46:	f003 0301 	and.w	r3, r3, #1
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d1ed      	bne.n	8002b2a <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 8002b4e:	2300      	movs	r3, #0
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3718      	adds	r7, #24
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	40028000 	.word	0x40028000

08002b5c <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b083      	sub	sp, #12
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d101      	bne.n	8002b70 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e1c3      	b.n	8002ef8 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 020c 	and.w	r2, r3, #12
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC)>> 4) > 0U) ? ENABLE : DISABLE;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0310 	and.w	r3, r3, #16
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	bf14      	ite	ne
 8002b8c:	2301      	movne	r3, #1
 8002b8e:	2300      	moveq	r3, #0
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	461a      	mov	r2, r3
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	bf0c      	ite	eq
 8002bb6:	2301      	moveq	r3, #1
 8002bb8:	2300      	movne	r3, #0
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U) ? ENABLE : DISABLE;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	bf14      	ite	ne
 8002bd2:	2301      	movne	r3, #1
 8002bd4:	2300      	moveq	r3, #0
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	461a      	mov	r2, r3
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	bf0c      	ite	eq
 8002bec:	2301      	moveq	r3, #1
 8002bee:	2300      	movne	r3, #0
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	bf14      	ite	ne
 8002c06:	2301      	movne	r3, #1
 8002c08:	2300      	moveq	r3, #0
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	bf14      	ite	ne
 8002c20:	2301      	movne	r3, #1
 8002c22:	2300      	moveq	r3, #0
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	461a      	mov	r2, r3
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	bf14      	ite	ne
 8002c56:	2301      	movne	r3, #1
 8002c58:	2300      	moveq	r3, #0
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >>17) == 0U) ? ENABLE : DISABLE;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	bf0c      	ite	eq
 8002c70:	2301      	moveq	r3, #1
 8002c72:	2300      	movne	r3, #0
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	461a      	mov	r2, r3
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >>19) == 0U) ? ENABLE : DISABLE;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	bf0c      	ite	eq
 8002c8a:	2301      	moveq	r3, #1
 8002c8c:	2300      	movne	r3, #0
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	461a      	mov	r2, r3
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	bf14      	ite	ne
 8002ca4:	2301      	movne	r3, #1
 8002ca6:	2300      	moveq	r3, #0
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	461a      	mov	r2, r3
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	bf14      	ite	ne
 8002cbe:	2301      	movne	r3, #1
 8002cc0:	2300      	moveq	r3, #0
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	bf14      	ite	ne
 8002cd8:	2301      	movne	r3, #1
 8002cda:	2300      	moveq	r3, #0
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	461a      	mov	r2, r3
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	bf14      	ite	ne
 8002cf2:	2301      	movne	r3, #1
 8002cf4:	2300      	moveq	r3, #0
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	bf14      	ite	ne
 8002d1a:	2301      	movne	r3, #1
 8002d1c:	2300      	moveq	r3, #0
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	461a      	mov	r2, r3
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	bf0c      	ite	eq
 8002d50:	2301      	moveq	r3, #1
 8002d52:	2300      	movne	r3, #0
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	461a      	mov	r2, r3
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	bf14      	ite	ne
 8002d6c:	2301      	movne	r3, #1
 8002d6e:	2300      	moveq	r3, #0
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	461a      	mov	r2, r3
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	bf14      	ite	ne
 8002d88:	2301      	movne	r3, #1
 8002d8a:	2300      	moveq	r3, #0
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	461a      	mov	r2, r3
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U) ? ENABLE : DISABLE;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	bf14      	ite	ne
 8002da4:	2301      	movne	r3, #1
 8002da6:	2300      	moveq	r3, #0
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	461a      	mov	r2, r3
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	0e5b      	lsrs	r3, r3, #25
 8002dba:	f003 021f 	and.w	r2, r3, #31
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	68db      	ldr	r3, [r3, #12]
 8002dc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	bf14      	ite	ne
 8002dd0:	2301      	movne	r3, #1
 8002dd2:	2300      	moveq	r3, #0
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	f003 020f 	and.w	r2, r3, #15
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002df2:	f003 0302 	and.w	r3, r3, #2
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	bf14      	ite	ne
 8002dfa:	2301      	movne	r3, #1
 8002dfc:	2300      	moveq	r3, #0
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	461a      	mov	r2, r3
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	bf0c      	ite	eq
 8002e16:	2301      	moveq	r3, #1
 8002e18:	2300      	movne	r3, #0
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e2a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e38:	0c1b      	lsrs	r3, r3, #16
 8002e3a:	b29a      	uxth	r2, r3
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e48:	f003 0301 	and.w	r3, r3, #1
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	bf14      	ite	ne
 8002e50:	2301      	movne	r3, #1
 8002e52:	2300      	moveq	r3, #0
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	461a      	mov	r2, r3
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U) ? ENABLE : DISABLE;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e66:	f003 0302 	and.w	r3, r3, #2
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	bf14      	ite	ne
 8002e6e:	2301      	movne	r3, #1
 8002e70:	2300      	moveq	r3, #0
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	461a      	mov	r2, r3
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8002e84:	f003 0272 	and.w	r2, r3, #114	; 0x72
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002e94:	f003 0223 	and.w	r2, r3, #35	; 0x23
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002ea4:	f003 0308 	and.w	r3, r3, #8
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	bf14      	ite	ne
 8002eac:	2301      	movne	r3, #1
 8002eae:	2300      	moveq	r3, #0
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002ec2:	f003 0310 	and.w	r3, r3, #16
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	bf14      	ite	ne
 8002eca:	2301      	movne	r3, #1
 8002ecc:	2300      	moveq	r3, #0
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	bf0c      	ite	eq
 8002ee8:	2301      	moveq	r3, #1
 8002eea:	2300      	movne	r3, #0
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	461a      	mov	r2, r3
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8002ef6:	2300      	movs	r3, #0
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	370c      	adds	r7, #12
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr

08002f04 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b082      	sub	sp, #8
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	6039      	str	r1, [r7, #0]
  if(macconf == NULL)
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d101      	bne.n	8002f18 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e00a      	b.n	8002f2e <HAL_ETH_SetMACConfig+0x2a>
  }

  if(heth->RxState == HAL_ETH_STATE_READY)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f1c:	2b10      	cmp	r3, #16
 8002f1e:	d105      	bne.n	8002f2c <HAL_ETH_SetMACConfig+0x28>
  {
    ETH_SetMACConfig(heth, macconf);
 8002f20:	6839      	ldr	r1, [r7, #0]
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f000 f860 	bl	8002fe8 <ETH_SetMACConfig>

    return HAL_OK;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	e000      	b.n	8002f2e <HAL_ETH_SetMACConfig+0x2a>
  }
  else
  {
    return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
  }
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3708      	adds	r7, #8
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
	...

08002f38 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b084      	sub	sp, #16
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002f48:	60fb      	str	r3, [r7, #12]

	/* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002f50:	60fb      	str	r3, [r7, #12]

	/* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002f52:	f002 f8b9 	bl	80050c8 <HAL_RCC_GetHCLKFreq>
 8002f56:	60b8      	str	r0, [r7, #8]

	/* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	4a1e      	ldr	r2, [pc, #120]	; (8002fd4 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d908      	bls.n	8002f72 <HAL_ETH_SetMDIOClockRange+0x3a>
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	4a1d      	ldr	r2, [pc, #116]	; (8002fd8 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d804      	bhi.n	8002f72 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f6e:	60fb      	str	r3, [r7, #12]
 8002f70:	e027      	b.n	8002fc2 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	4a18      	ldr	r2, [pc, #96]	; (8002fd8 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d908      	bls.n	8002f8c <HAL_ETH_SetMDIOClockRange+0x54>
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	4a17      	ldr	r2, [pc, #92]	; (8002fdc <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d204      	bcs.n	8002f8c <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002f88:	60fb      	str	r3, [r7, #12]
 8002f8a:	e01a      	b.n	8002fc2 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	4a13      	ldr	r2, [pc, #76]	; (8002fdc <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d303      	bcc.n	8002f9c <HAL_ETH_SetMDIOClockRange+0x64>
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	4a12      	ldr	r2, [pc, #72]	; (8002fe0 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d911      	bls.n	8002fc0 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	4a10      	ldr	r2, [pc, #64]	; (8002fe0 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d908      	bls.n	8002fb6 <HAL_ETH_SetMDIOClockRange+0x7e>
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	4a0f      	ldr	r2, [pc, #60]	; (8002fe4 <HAL_ETH_SetMDIOClockRange+0xac>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d804      	bhi.n	8002fb6 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fb2:	60fb      	str	r3, [r7, #12]
 8002fb4:	e005      	b.n	8002fc2 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002fbc:	60fb      	str	r3, [r7, #12]
 8002fbe:	e000      	b.n	8002fc2 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8002fc0:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	68fa      	ldr	r2, [r7, #12]
 8002fc8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8002fcc:	bf00      	nop
 8002fce:	3710      	adds	r7, #16
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	01312cff 	.word	0x01312cff
 8002fd8:	02160ebf 	.word	0x02160ebf
 8002fdc:	03938700 	.word	0x03938700
 8002fe0:	05f5e0ff 	.word	0x05f5e0ff
 8002fe4:	08f0d17f 	.word	0x08f0d17f

08002fe8 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b085      	sub	sp, #20
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8002ffa:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	791b      	ldrb	r3, [r3, #4]
 8003000:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8003002:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	7b1b      	ldrb	r3, [r3, #12]
 8003008:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 800300a:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	7b5b      	ldrb	r3, [r3, #13]
 8003010:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8003012:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	7b9b      	ldrb	r3, [r3, #14]
 8003018:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 800301a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	7bdb      	ldrb	r3, [r3, #15]
 8003020:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8003022:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8003024:	683a      	ldr	r2, [r7, #0]
 8003026:	7c12      	ldrb	r2, [r2, #16]
 8003028:	2a00      	cmp	r2, #0
 800302a:	d102      	bne.n	8003032 <ETH_SetMACConfig+0x4a>
 800302c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003030:	e000      	b.n	8003034 <ETH_SetMACConfig+0x4c>
 8003032:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8003034:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8003036:	683a      	ldr	r2, [r7, #0]
 8003038:	7c52      	ldrb	r2, [r2, #17]
 800303a:	2a00      	cmp	r2, #0
 800303c:	d102      	bne.n	8003044 <ETH_SetMACConfig+0x5c>
 800303e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003042:	e000      	b.n	8003046 <ETH_SetMACConfig+0x5e>
 8003044:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8003046:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	7c9b      	ldrb	r3, [r3, #18]
 800304c:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800304e:	431a      	orrs	r2, r3
                                macconf->Speed |
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8003054:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 800305a:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	7f1b      	ldrb	r3, [r3, #28]
 8003060:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8003062:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	7f5b      	ldrb	r3, [r3, #29]
 8003068:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 800306a:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 800306c:	683a      	ldr	r2, [r7, #0]
 800306e:	7f92      	ldrb	r2, [r2, #30]
 8003070:	2a00      	cmp	r2, #0
 8003072:	d102      	bne.n	800307a <ETH_SetMACConfig+0x92>
 8003074:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003078:	e000      	b.n	800307c <ETH_SetMACConfig+0x94>
 800307a:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 800307c:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	7fdb      	ldrb	r3, [r3, #31]
 8003082:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8003084:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8003086:	683a      	ldr	r2, [r7, #0]
 8003088:	f892 2020 	ldrb.w	r2, [r2, #32]
 800308c:	2a00      	cmp	r2, #0
 800308e:	d102      	bne.n	8003096 <ETH_SetMACConfig+0xae>
 8003090:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003094:	e000      	b.n	8003098 <ETH_SetMACConfig+0xb0>
 8003096:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8003098:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 800309e:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80030a6:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 80030a8:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 80030ae:	4313      	orrs	r3, r2
 80030b0:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	4b56      	ldr	r3, [pc, #344]	; (8003214 <ETH_SetMACConfig+0x22c>)
 80030ba:	4013      	ands	r3, r2
 80030bc:	687a      	ldr	r2, [r7, #4]
 80030be:	6812      	ldr	r2, [r2, #0]
 80030c0:	68f9      	ldr	r1, [r7, #12]
 80030c2:	430b      	orrs	r3, r1
 80030c4:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030ca:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80030d2:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80030d4:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80030dc:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 80030de:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80030e6:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 80030e8:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 80030ea:	683a      	ldr	r2, [r7, #0]
 80030ec:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80030f0:	2a00      	cmp	r2, #0
 80030f2:	d102      	bne.n	80030fa <ETH_SetMACConfig+0x112>
 80030f4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80030f8:	e000      	b.n	80030fc <ETH_SetMACConfig+0x114>
 80030fa:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80030fc:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8003102:	4313      	orrs	r3, r2
 8003104:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	685a      	ldr	r2, [r3, #4]
 800310c:	4b42      	ldr	r3, [pc, #264]	; (8003218 <ETH_SetMACConfig+0x230>)
 800310e:	4013      	ands	r3, r2
 8003110:	687a      	ldr	r2, [r7, #4]
 8003112:	6812      	ldr	r2, [r2, #0]
 8003114:	68f9      	ldr	r1, [r7, #12]
 8003116:	430b      	orrs	r3, r1
 8003118:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003120:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8003126:	4313      	orrs	r3, r2
 8003128:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	68da      	ldr	r2, [r3, #12]
 8003130:	4b3a      	ldr	r3, [pc, #232]	; (800321c <ETH_SetMACConfig+0x234>)
 8003132:	4013      	ands	r3, r2
 8003134:	687a      	ldr	r2, [r7, #4]
 8003136:	6812      	ldr	r2, [r2, #0]
 8003138:	68f9      	ldr	r1, [r7, #12]
 800313a:	430b      	orrs	r3, r1
 800313c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003144:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800314a:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 800314c:	683a      	ldr	r2, [r7, #0]
 800314e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8003152:	2a00      	cmp	r2, #0
 8003154:	d101      	bne.n	800315a <ETH_SetMACConfig+0x172>
 8003156:	2280      	movs	r2, #128	; 0x80
 8003158:	e000      	b.n	800315c <ETH_SetMACConfig+0x174>
 800315a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 800315c:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003162:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003164:	4313      	orrs	r3, r2
 8003166:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800316e:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8003172:	4013      	ands	r3, r2
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	6812      	ldr	r2, [r2, #0]
 8003178:	68f9      	ldr	r1, [r7, #12]
 800317a:	430b      	orrs	r3, r1
 800317c:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8003184:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800318c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800318e:	4313      	orrs	r3, r2
 8003190:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800319a:	f023 0103 	bic.w	r1, r3, #3
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	68fa      	ldr	r2, [r7, #12]
 80031a4:	430a      	orrs	r2, r1
 80031a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80031b2:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	430a      	orrs	r2, r1
 80031c0:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80031c8:	683a      	ldr	r2, [r7, #0]
 80031ca:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80031ce:	2a00      	cmp	r2, #0
 80031d0:	d101      	bne.n	80031d6 <ETH_SetMACConfig+0x1ee>
 80031d2:	2240      	movs	r2, #64	; 0x40
 80031d4:	e000      	b.n	80031d8 <ETH_SetMACConfig+0x1f0>
 80031d6:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80031d8:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80031e0:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80031e2:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80031ea:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80031ec:	4313      	orrs	r3, r2
 80031ee:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80031f8:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	68fa      	ldr	r2, [r7, #12]
 8003202:	430a      	orrs	r2, r1
 8003204:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8003208:	bf00      	nop
 800320a:	3714      	adds	r7, #20
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr
 8003214:	00048083 	.word	0x00048083
 8003218:	c0f88000 	.word	0xc0f88000
 800321c:	fffffef0 	.word	0xfffffef0

08003220 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003220:	b480      	push	{r7}
 8003222:	b085      	sub	sp, #20
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	4b38      	ldr	r3, [pc, #224]	; (8003318 <ETH_SetDMAConfig+0xf8>)
 8003236:	4013      	ands	r3, r2
 8003238:	683a      	ldr	r2, [r7, #0]
 800323a:	6812      	ldr	r2, [r2, #0]
 800323c:	6879      	ldr	r1, [r7, #4]
 800323e:	6809      	ldr	r1, [r1, #0]
 8003240:	431a      	orrs	r2, r3
 8003242:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8003246:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	791b      	ldrb	r3, [r3, #4]
 800324c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003252:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	7b1b      	ldrb	r3, [r3, #12]
 8003258:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800325a:	4313      	orrs	r3, r2
 800325c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	f241 0304 	movw	r3, #4100	; 0x1004
 8003266:	4413      	add	r3, r2
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	4b2c      	ldr	r3, [pc, #176]	; (800331c <ETH_SetDMAConfig+0xfc>)
 800326c:	4013      	ands	r3, r2
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	6811      	ldr	r1, [r2, #0]
 8003272:	68fa      	ldr	r2, [r7, #12]
 8003274:	431a      	orrs	r2, r3
 8003276:	f241 0304 	movw	r3, #4100	; 0x1004
 800327a:	440b      	add	r3, r1
 800327c:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	7b5b      	ldrb	r3, [r3, #13]
 8003282:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8003288:	4313      	orrs	r3, r2
 800328a:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	4b22      	ldr	r3, [pc, #136]	; (8003320 <ETH_SetDMAConfig+0x100>)
 8003298:	4013      	ands	r3, r2
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	6811      	ldr	r1, [r2, #0]
 800329e:	68fa      	ldr	r2, [r7, #12]
 80032a0:	431a      	orrs	r2, r3
 80032a2:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 80032a6:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	7d1b      	ldrb	r3, [r3, #20]
 80032b0:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80032b2:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	7f5b      	ldrb	r3, [r3, #29]
 80032b8:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80032ba:	4313      	orrs	r3, r2
 80032bc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	f241 1304 	movw	r3, #4356	; 0x1104
 80032c6:	4413      	add	r3, r2
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	4b16      	ldr	r3, [pc, #88]	; (8003324 <ETH_SetDMAConfig+0x104>)
 80032cc:	4013      	ands	r3, r2
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	6811      	ldr	r1, [r2, #0]
 80032d2:	68fa      	ldr	r2, [r7, #12]
 80032d4:	431a      	orrs	r2, r3
 80032d6:	f241 1304 	movw	r3, #4356	; 0x1104
 80032da:	440b      	add	r3, r1
 80032dc:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	7f1b      	ldrb	r3, [r3, #28]
 80032e2:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80032e8:	4313      	orrs	r3, r2
 80032ea:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	f241 1308 	movw	r3, #4360	; 0x1108
 80032f4:	4413      	add	r3, r2
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	4b0b      	ldr	r3, [pc, #44]	; (8003328 <ETH_SetDMAConfig+0x108>)
 80032fa:	4013      	ands	r3, r2
 80032fc:	687a      	ldr	r2, [r7, #4]
 80032fe:	6811      	ldr	r1, [r2, #0]
 8003300:	68fa      	ldr	r2, [r7, #12]
 8003302:	431a      	orrs	r2, r3
 8003304:	f241 1308 	movw	r3, #4360	; 0x1108
 8003308:	440b      	add	r3, r1
 800330a:	601a      	str	r2, [r3, #0]
}
 800330c:	bf00      	nop
 800330e:	3714      	adds	r7, #20
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr
 8003318:	ffff87fd 	.word	0xffff87fd
 800331c:	ffff2ffe 	.word	0xffff2ffe
 8003320:	fffec000 	.word	0xfffec000
 8003324:	ffc0efef 	.word	0xffc0efef
 8003328:	7fc0ffff 	.word	0x7fc0ffff

0800332c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b0a4      	sub	sp, #144	; 0x90
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8003334:	2301      	movs	r3, #1
 8003336:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800333a:	2300      	movs	r3, #0
 800333c:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800333e:	2300      	movs	r3, #0
 8003340:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003344:	2300      	movs	r3, #0
 8003346:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800334a:	2301      	movs	r3, #1
 800334c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8003350:	2301      	movs	r3, #1
 8003352:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8003356:	2301      	movs	r3, #1
 8003358:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 800335c:	2300      	movs	r3, #0
 800335e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8003362:	2301      	movs	r3, #1
 8003364:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003368:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800336c:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800336e:	2300      	movs	r3, #0
 8003370:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8003374:	2300      	movs	r3, #0
 8003376:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8003378:	2300      	movs	r3, #0
 800337a:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800337e:	2300      	movs	r3, #0
 8003380:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8003384:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8003388:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800338a:	2300      	movs	r3, #0
 800338c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8003390:	2300      	movs	r3, #0
 8003392:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8003394:	2301      	movs	r3, #1
 8003396:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800339a:	2300      	movs	r3, #0
 800339c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80033a0:	2300      	movs	r3, #0
 80033a2:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80033a6:	2300      	movs	r3, #0
 80033a8:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 80033aa:	2300      	movs	r3, #0
 80033ac:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80033ae:	2300      	movs	r3, #0
 80033b0:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80033b2:	2300      	movs	r3, #0
 80033b4:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80033b8:	2300      	movs	r3, #0
 80033ba:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80033be:	2301      	movs	r3, #1
 80033c0:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80033c4:	2320      	movs	r3, #32
 80033c6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80033ca:	2301      	movs	r3, #1
 80033cc:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80033d0:	2300      	movs	r3, #0
 80033d2:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80033d6:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80033da:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80033dc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80033e0:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80033e2:	2300      	movs	r3, #0
 80033e4:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80033e8:	2302      	movs	r3, #2
 80033ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80033ee:	2300      	movs	r3, #0
 80033f0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80033f4:	2300      	movs	r3, #0
 80033f6:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80033fa:	2300      	movs	r3, #0
 80033fc:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8003400:	2301      	movs	r3, #1
 8003402:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8003406:	2300      	movs	r3, #0
 8003408:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800340a:	2301      	movs	r3, #1
 800340c:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003410:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003414:	4619      	mov	r1, r3
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f7ff fde6 	bl	8002fe8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800341c:	2301      	movs	r3, #1
 800341e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003420:	2301      	movs	r3, #1
 8003422:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8003424:	2300      	movs	r3, #0
 8003426:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8003428:	2300      	movs	r3, #0
 800342a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800342e:	2300      	movs	r3, #0
 8003430:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8003432:	2300      	movs	r3, #0
 8003434:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003436:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800343a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 800343c:	2300      	movs	r3, #0
 800343e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003440:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003444:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8003446:	2300      	movs	r3, #0
 8003448:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 800344c:	f44f 7306 	mov.w	r3, #536	; 0x218
 8003450:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003452:	f107 0308 	add.w	r3, r7, #8
 8003456:	4619      	mov	r1, r3
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f7ff fee1 	bl	8003220 <ETH_SetDMAConfig>
}
 800345e:	bf00      	nop
 8003460:	3790      	adds	r7, #144	; 0x90
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
	...

08003468 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b084      	sub	sp, #16
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003478:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003480:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003482:	f001 fe21 	bl	80050c8 <HAL_RCC_GetHCLKFreq>
 8003486:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	4a1e      	ldr	r2, [pc, #120]	; (8003504 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d908      	bls.n	80034a2 <ETH_MAC_MDIO_ClkConfig+0x3a>
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	4a1d      	ldr	r2, [pc, #116]	; (8003508 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d804      	bhi.n	80034a2 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800349e:	60fb      	str	r3, [r7, #12]
 80034a0:	e027      	b.n	80034f2 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	4a18      	ldr	r2, [pc, #96]	; (8003508 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d908      	bls.n	80034bc <ETH_MAC_MDIO_ClkConfig+0x54>
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	4a17      	ldr	r2, [pc, #92]	; (800350c <ETH_MAC_MDIO_ClkConfig+0xa4>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d204      	bcs.n	80034bc <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80034b8:	60fb      	str	r3, [r7, #12]
 80034ba:	e01a      	b.n	80034f2 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	4a13      	ldr	r2, [pc, #76]	; (800350c <ETH_MAC_MDIO_ClkConfig+0xa4>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d303      	bcc.n	80034cc <ETH_MAC_MDIO_ClkConfig+0x64>
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	4a12      	ldr	r2, [pc, #72]	; (8003510 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d911      	bls.n	80034f0 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	4a10      	ldr	r2, [pc, #64]	; (8003510 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d908      	bls.n	80034e6 <ETH_MAC_MDIO_ClkConfig+0x7e>
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	4a0f      	ldr	r2, [pc, #60]	; (8003514 <ETH_MAC_MDIO_ClkConfig+0xac>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d804      	bhi.n	80034e6 <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034e2:	60fb      	str	r3, [r7, #12]
 80034e4:	e005      	b.n	80034f2 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80034ec:	60fb      	str	r3, [r7, #12]
 80034ee:	e000      	b.n	80034f2 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80034f0:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	68fa      	ldr	r2, [r7, #12]
 80034f8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80034fc:	bf00      	nop
 80034fe:	3710      	adds	r7, #16
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}
 8003504:	01312cff 	.word	0x01312cff
 8003508:	02160ebf 	.word	0x02160ebf
 800350c:	03938700 	.word	0x03938700
 8003510:	05f5e0ff 	.word	0x05f5e0ff
 8003514:	08f0d17f 	.word	0x08f0d17f

08003518 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003518:	b480      	push	{r7}
 800351a:	b085      	sub	sp, #20
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003520:	2300      	movs	r3, #0
 8003522:	60fb      	str	r3, [r7, #12]
 8003524:	e01d      	b.n	8003562 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	68d9      	ldr	r1, [r3, #12]
 800352a:	68fa      	ldr	r2, [r7, #12]
 800352c:	4613      	mov	r3, r2
 800352e:	005b      	lsls	r3, r3, #1
 8003530:	4413      	add	r3, r2
 8003532:	00db      	lsls	r3, r3, #3
 8003534:	440b      	add	r3, r1
 8003536:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	2200      	movs	r2, #0
 800353c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	2200      	movs	r2, #0
 8003542:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	2200      	movs	r2, #0
 8003548:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	2200      	movs	r2, #0
 800354e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003550:	68b9      	ldr	r1, [r7, #8]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	68fa      	ldr	r2, [r7, #12]
 8003556:	3206      	adds	r2, #6
 8003558:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	3301      	adds	r3, #1
 8003560:	60fb      	str	r3, [r7, #12]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2b03      	cmp	r3, #3
 8003566:	d9de      	bls.n	8003526 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2200      	movs	r2, #0
 800356c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	f241 132c 	movw	r3, #4396	; 0x112c
 8003576:	4413      	add	r3, r2
 8003578:	2203      	movs	r2, #3
 800357a:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	68d9      	ldr	r1, [r3, #12]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	f241 1314 	movw	r3, #4372	; 0x1114
 8003588:	4413      	add	r3, r2
 800358a:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	68da      	ldr	r2, [r3, #12]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8003598:	601a      	str	r2, [r3, #0]
}
 800359a:	bf00      	nop
 800359c:	3714      	adds	r7, #20
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr

080035a6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80035a6:	b480      	push	{r7}
 80035a8:	b085      	sub	sp, #20
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80035ae:	2300      	movs	r3, #0
 80035b0:	60fb      	str	r3, [r7, #12]
 80035b2:	e024      	b.n	80035fe <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6919      	ldr	r1, [r3, #16]
 80035b8:	68fa      	ldr	r2, [r7, #12]
 80035ba:	4613      	mov	r3, r2
 80035bc:	005b      	lsls	r3, r3, #1
 80035be:	4413      	add	r3, r2
 80035c0:	00db      	lsls	r3, r3, #3
 80035c2:	440b      	add	r3, r1
 80035c4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	2200      	movs	r2, #0
 80035ca:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	2200      	movs	r2, #0
 80035d0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	2200      	movs	r2, #0
 80035d6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	2200      	movs	r2, #0
 80035dc:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	2200      	movs	r2, #0
 80035e2:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	2200      	movs	r2, #0
 80035e8:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80035ea:	68ba      	ldr	r2, [r7, #8]
 80035ec:	6879      	ldr	r1, [r7, #4]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	3310      	adds	r3, #16
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	440b      	add	r3, r1
 80035f6:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	3301      	adds	r3, #1
 80035fc:	60fb      	str	r3, [r7, #12]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2b03      	cmp	r3, #3
 8003602:	d9d7      	bls.n	80035b4 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2200      	movs	r2, #0
 8003608:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2200      	movs	r2, #0
 800360e:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2200      	movs	r2, #0
 8003614:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2200      	movs	r2, #0
 8003620:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	f241 1330 	movw	r3, #4400	; 0x1130
 800362a:	4413      	add	r3, r2
 800362c:	2203      	movs	r2, #3
 800362e:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6919      	ldr	r1, [r3, #16]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	f241 131c 	movw	r3, #4380	; 0x111c
 800363c:	4413      	add	r3, r2
 800363e:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	691b      	ldr	r3, [r3, #16]
 8003644:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	f241 1328 	movw	r3, #4392	; 0x1128
 8003650:	4413      	add	r3, r2
 8003652:	6019      	str	r1, [r3, #0]
}
 8003654:	bf00      	nop
 8003656:	3714      	adds	r7, #20
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr

08003660 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8003660:	b480      	push	{r7}
 8003662:	b08d      	sub	sp, #52	; 0x34
 8003664:	af00      	add	r7, sp, #0
 8003666:	60f8      	str	r0, [r7, #12]
 8003668:	60b9      	str	r1, [r7, #8]
 800366a:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	3318      	adds	r3, #24
 8003670:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	691b      	ldr	r3, [r3, #16]
 8003676:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	691b      	ldr	r3, [r3, #16]
 800367c:	613b      	str	r3, [r7, #16]
  uint32_t descnbr = 0, idx;
 800367e:	2300      	movs	r3, #0
 8003680:	62bb      	str	r3, [r7, #40]	; 0x28
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003686:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800368a:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8003692:	2300      	movs	r3, #0
 8003694:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN) || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003696:	6a3b      	ldr	r3, [r7, #32]
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800369e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80036a2:	d007      	beq.n	80036b4 <ETH_Prepare_Tx_Descriptors+0x54>
 80036a4:	697a      	ldr	r2, [r7, #20]
 80036a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036a8:	3304      	adds	r3, #4
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	4413      	add	r3, r2
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d001      	beq.n	80036b8 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80036b4:	2302      	movs	r3, #2
 80036b6:	e24a      	b.n	8003b4e <ETH_Prepare_Tx_Descriptors+0x4ee>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 0304 	and.w	r3, r3, #4
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d044      	beq.n	800374e <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 80036c4:	6a3b      	ldr	r3, [r7, #32]
 80036c6:	68da      	ldr	r2, [r3, #12]
 80036c8:	4b72      	ldr	r3, [pc, #456]	; (8003894 <ETH_Prepare_Tx_Descriptors+0x234>)
 80036ca:	4013      	ands	r3, r2
 80036cc:	68ba      	ldr	r2, [r7, #8]
 80036ce:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80036d0:	431a      	orrs	r2, r3
 80036d2:	6a3b      	ldr	r3, [r7, #32]
 80036d4:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 80036d6:	6a3b      	ldr	r3, [r7, #32]
 80036d8:	68db      	ldr	r3, [r3, #12]
 80036da:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80036de:	6a3b      	ldr	r3, [r7, #32]
 80036e0:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80036f0:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != 0U)
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 0308 	and.w	r3, r3, #8
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d027      	beq.n	800374e <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 80036fe:	6a3b      	ldr	r3, [r7, #32]
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	b29a      	uxth	r2, r3
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003708:	041b      	lsls	r3, r3, #16
 800370a:	431a      	orrs	r2, r3
 800370c:	6a3b      	ldr	r3, [r7, #32]
 800370e:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8003710:	6a3b      	ldr	r3, [r7, #32]
 8003712:	68db      	ldr	r3, [r3, #12]
 8003714:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003718:	6a3b      	ldr	r3, [r7, #32]
 800371a:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 800371c:	6a3b      	ldr	r3, [r7, #32]
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003728:	431a      	orrs	r2, r3
 800372a:	6a3b      	ldr	r3, [r7, #32]
 800372c:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800373c:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800374c:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0310 	and.w	r3, r3, #16
 8003756:	2b00      	cmp	r3, #0
 8003758:	d00e      	beq.n	8003778 <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 800375a:	6a3b      	ldr	r3, [r7, #32]
 800375c:	689a      	ldr	r2, [r3, #8]
 800375e:	4b4e      	ldr	r3, [pc, #312]	; (8003898 <ETH_Prepare_Tx_Descriptors+0x238>)
 8003760:	4013      	ands	r3, r2
 8003762:	68ba      	ldr	r2, [r7, #8]
 8003764:	6992      	ldr	r2, [r2, #24]
 8003766:	431a      	orrs	r2, r3
 8003768:	6a3b      	ldr	r3, [r7, #32]
 800376a:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 800376c:	6a3b      	ldr	r3, [r7, #32]
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8003774:	6a3b      	ldr	r3, [r7, #32]
 8003776:	60da      	str	r2, [r3, #12]
  }

  if((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)|| (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U))
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 0304 	and.w	r3, r3, #4
 8003780:	2b00      	cmp	r3, #0
 8003782:	d105      	bne.n	8003790 <ETH_Prepare_Tx_Descriptors+0x130>
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 0310 	and.w	r3, r3, #16
 800378c:	2b00      	cmp	r3, #0
 800378e:	d030      	beq.n	80037f2 <ETH_Prepare_Tx_Descriptors+0x192>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8003790:	6a3b      	ldr	r3, [r7, #32]
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003798:	6a3b      	ldr	r3, [r7, #32]
 800379a:	60da      	str	r2, [r3, #12]
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 800379c:	6a3b      	ldr	r3, [r7, #32]
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80037a4:	6a3b      	ldr	r3, [r7, #32]
 80037a6:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80037a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037aa:	3301      	adds	r3, #1
 80037ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037b0:	2b03      	cmp	r3, #3
 80037b2:	d902      	bls.n	80037ba <ETH_Prepare_Tx_Descriptors+0x15a>
 80037b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037b6:	3b04      	subs	r3, #4
 80037b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037c2:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 80037c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037c6:	3301      	adds	r3, #1
 80037c8:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 80037ca:	6a3b      	ldr	r3, [r7, #32]
 80037cc:	68db      	ldr	r3, [r3, #12]
 80037ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80037d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80037d6:	d10c      	bne.n	80037f2 <ETH_Prepare_Tx_Descriptors+0x192>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	693a      	ldr	r2, [r7, #16]
 80037dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037e0:	623b      	str	r3, [r7, #32]
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 80037e2:	6a3b      	ldr	r3, [r7, #32]
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80037ea:	6a3b      	ldr	r3, [r7, #32]
 80037ec:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 80037ee:	2302      	movs	r3, #2
 80037f0:	e1ad      	b.n	8003b4e <ETH_Prepare_Tx_Descriptors+0x4ee>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 80037f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037f4:	3301      	adds	r3, #1
 80037f6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 80037f8:	69fb      	ldr	r3, [r7, #28]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	461a      	mov	r2, r3
 80037fe:	6a3b      	ldr	r3, [r7, #32]
 8003800:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8003802:	6a3b      	ldr	r3, [r7, #32]
 8003804:	689a      	ldr	r2, [r3, #8]
 8003806:	4b24      	ldr	r3, [pc, #144]	; (8003898 <ETH_Prepare_Tx_Descriptors+0x238>)
 8003808:	4013      	ands	r3, r2
 800380a:	69fa      	ldr	r2, [r7, #28]
 800380c:	6852      	ldr	r2, [r2, #4]
 800380e:	431a      	orrs	r2, r3
 8003810:	6a3b      	ldr	r3, [r7, #32]
 8003812:	609a      	str	r2, [r3, #8]

  if(txbuffer->next != NULL)
 8003814:	69fb      	ldr	r3, [r7, #28]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d012      	beq.n	8003842 <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    txbuffer = txbuffer->next;
 800381c:	69fb      	ldr	r3, [r7, #28]
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8003822:	69fb      	ldr	r3, [r7, #28]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	461a      	mov	r2, r3
 8003828:	6a3b      	ldr	r3, [r7, #32]
 800382a:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 800382c:	6a3b      	ldr	r3, [r7, #32]
 800382e:	689a      	ldr	r2, [r3, #8]
 8003830:	4b1a      	ldr	r3, [pc, #104]	; (800389c <ETH_Prepare_Tx_Descriptors+0x23c>)
 8003832:	4013      	ands	r3, r2
 8003834:	69fa      	ldr	r2, [r7, #28]
 8003836:	6852      	ldr	r2, [r2, #4]
 8003838:	0412      	lsls	r2, r2, #16
 800383a:	431a      	orrs	r2, r3
 800383c:	6a3b      	ldr	r3, [r7, #32]
 800383e:	609a      	str	r2, [r3, #8]
 8003840:	e008      	b.n	8003854 <ETH_Prepare_Tx_Descriptors+0x1f4>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003842:	6a3b      	ldr	r3, [r7, #32]
 8003844:	2200      	movs	r2, #0
 8003846:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8003848:	6a3b      	ldr	r3, [r7, #32]
 800384a:	689a      	ldr	r2, [r3, #8]
 800384c:	4b13      	ldr	r3, [pc, #76]	; (800389c <ETH_Prepare_Tx_Descriptors+0x23c>)
 800384e:	4013      	ands	r3, r2
 8003850:	6a3a      	ldr	r2, [r7, #32]
 8003852:	6093      	str	r3, [r2, #8]
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 0310 	and.w	r3, r3, #16
 800385c:	2b00      	cmp	r3, #0
 800385e:	d021      	beq.n	80038a4 <ETH_Prepare_Tx_Descriptors+0x244>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8003860:	6a3b      	ldr	r3, [r7, #32]
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	6a1b      	ldr	r3, [r3, #32]
 800386c:	04db      	lsls	r3, r3, #19
 800386e:	431a      	orrs	r2, r3
 8003870:	6a3b      	ldr	r3, [r7, #32]
 8003872:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8003874:	6a3b      	ldr	r3, [r7, #32]
 8003876:	68da      	ldr	r2, [r3, #12]
 8003878:	4b09      	ldr	r3, [pc, #36]	; (80038a0 <ETH_Prepare_Tx_Descriptors+0x240>)
 800387a:	4013      	ands	r3, r2
 800387c:	68ba      	ldr	r2, [r7, #8]
 800387e:	69d2      	ldr	r2, [r2, #28]
 8003880:	431a      	orrs	r2, r3
 8003882:	6a3b      	ldr	r3, [r7, #32]
 8003884:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8003886:	6a3b      	ldr	r3, [r7, #32]
 8003888:	68db      	ldr	r3, [r3, #12]
 800388a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800388e:	6a3b      	ldr	r3, [r7, #32]
 8003890:	60da      	str	r2, [r3, #12]
 8003892:	e02e      	b.n	80038f2 <ETH_Prepare_Tx_Descriptors+0x292>
 8003894:	ffff0000 	.word	0xffff0000
 8003898:	ffffc000 	.word	0xffffc000
 800389c:	c000ffff 	.word	0xc000ffff
 80038a0:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 80038a4:	6a3b      	ldr	r3, [r7, #32]
 80038a6:	68da      	ldr	r2, [r3, #12]
 80038a8:	4b93      	ldr	r3, [pc, #588]	; (8003af8 <ETH_Prepare_Tx_Descriptors+0x498>)
 80038aa:	4013      	ands	r3, r2
 80038ac:	68ba      	ldr	r2, [r7, #8]
 80038ae:	6852      	ldr	r2, [r2, #4]
 80038b0:	431a      	orrs	r2, r3
 80038b2:	6a3b      	ldr	r3, [r7, #32]
 80038b4:	60da      	str	r2, [r3, #12]

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 0301 	and.w	r3, r3, #1
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d008      	beq.n	80038d4 <ETH_Prepare_Tx_Descriptors+0x274>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 80038c2:	6a3b      	ldr	r3, [r7, #32]
 80038c4:	68db      	ldr	r3, [r3, #12]
 80038c6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	695b      	ldr	r3, [r3, #20]
 80038ce:	431a      	orrs	r2, r3
 80038d0:	6a3b      	ldr	r3, [r7, #32]
 80038d2:	60da      	str	r2, [r3, #12]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 0320 	and.w	r3, r3, #32
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d008      	beq.n	80038f2 <ETH_Prepare_Tx_Descriptors+0x292>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 80038e0:	6a3b      	ldr	r3, [r7, #32]
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	691b      	ldr	r3, [r3, #16]
 80038ec:	431a      	orrs	r2, r3
 80038ee:	6a3b      	ldr	r3, [r7, #32]
 80038f0:	60da      	str	r2, [r3, #12]
    }
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0304 	and.w	r3, r3, #4
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d008      	beq.n	8003910 <ETH_Prepare_Tx_Descriptors+0x2b0>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 80038fe:	6a3b      	ldr	r3, [r7, #32]
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800390a:	431a      	orrs	r2, r3
 800390c:	6a3b      	ldr	r3, [r7, #32]
 800390e:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8003910:	6a3b      	ldr	r3, [r7, #32]
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003918:	6a3b      	ldr	r3, [r7, #32]
 800391a:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 800391c:	6a3b      	ldr	r3, [r7, #32]
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003924:	6a3b      	ldr	r3, [r7, #32]
 8003926:	60da      	str	r2, [r3, #12]
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8003928:	6a3b      	ldr	r3, [r7, #32]
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003930:	6a3b      	ldr	r3, [r7, #32]
 8003932:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != 0U)
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 0302 	and.w	r3, r3, #2
 800393c:	2b00      	cmp	r3, #0
 800393e:	f000 80cb 	beq.w	8003ad8 <ETH_Prepare_Tx_Descriptors+0x478>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8003942:	6a3b      	ldr	r3, [r7, #32]
 8003944:	68db      	ldr	r3, [r3, #12]
 8003946:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	68db      	ldr	r3, [r3, #12]
 800394e:	431a      	orrs	r2, r3
 8003950:	6a3b      	ldr	r3, [r7, #32]
 8003952:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8003954:	e0c0      	b.n	8003ad8 <ETH_Prepare_Tx_Descriptors+0x478>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8003956:	6a3b      	ldr	r3, [r7, #32]
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800395e:	6a3b      	ldr	r3, [r7, #32]
 8003960:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8003962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003964:	3301      	adds	r3, #1
 8003966:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800396a:	2b03      	cmp	r3, #3
 800396c:	d902      	bls.n	8003974 <ETH_Prepare_Tx_Descriptors+0x314>
 800396e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003970:	3b04      	subs	r3, #4
 8003972:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003978:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800397c:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 800397e:	6a3b      	ldr	r3, [r7, #32]
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003986:	6a3b      	ldr	r3, [r7, #32]
 8003988:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN) || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800398a:	6a3b      	ldr	r3, [r7, #32]
 800398c:	68db      	ldr	r3, [r3, #12]
 800398e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003992:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003996:	d007      	beq.n	80039a8 <ETH_Prepare_Tx_Descriptors+0x348>
 8003998:	697a      	ldr	r2, [r7, #20]
 800399a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800399c:	3304      	adds	r3, #4
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	4413      	add	r3, r2
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d026      	beq.n	80039f6 <ETH_Prepare_Tx_Descriptors+0x396>
    {
      descidx = firstdescidx;
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039b4:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for(idx = 0; idx < descnbr; idx ++)
 80039b6:	2300      	movs	r3, #0
 80039b8:	627b      	str	r3, [r7, #36]	; 0x24
 80039ba:	e016      	b.n	80039ea <ETH_Prepare_Tx_Descriptors+0x38a>
      {
        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80039bc:	6a3b      	ldr	r3, [r7, #32]
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80039c4:	6a3b      	ldr	r3, [r7, #32]
 80039c6:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 80039c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ca:	3301      	adds	r3, #1
 80039cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039d0:	2b03      	cmp	r3, #3
 80039d2:	d902      	bls.n	80039da <ETH_Prepare_Tx_Descriptors+0x37a>
 80039d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039d6:	3b04      	subs	r3, #4
 80039d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039e2:	623b      	str	r3, [r7, #32]
      for(idx = 0; idx < descnbr; idx ++)
 80039e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e6:	3301      	adds	r3, #1
 80039e8:	627b      	str	r3, [r7, #36]	; 0x24
 80039ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039ee:	429a      	cmp	r2, r3
 80039f0:	d3e4      	bcc.n	80039bc <ETH_Prepare_Tx_Descriptors+0x35c>
      }

      return HAL_ETH_ERROR_BUSY;
 80039f2:	2302      	movs	r3, #2
 80039f4:	e0ab      	b.n	8003b4e <ETH_Prepare_Tx_Descriptors+0x4ee>
    }

    descnbr += 1U;
 80039f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039f8:	3301      	adds	r3, #1
 80039fa:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8003a02:	69fb      	ldr	r3, [r7, #28]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	461a      	mov	r2, r3
 8003a08:	6a3b      	ldr	r3, [r7, #32]
 8003a0a:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8003a0c:	6a3b      	ldr	r3, [r7, #32]
 8003a0e:	689a      	ldr	r2, [r3, #8]
 8003a10:	4b3a      	ldr	r3, [pc, #232]	; (8003afc <ETH_Prepare_Tx_Descriptors+0x49c>)
 8003a12:	4013      	ands	r3, r2
 8003a14:	69fa      	ldr	r2, [r7, #28]
 8003a16:	6852      	ldr	r2, [r2, #4]
 8003a18:	431a      	orrs	r2, r3
 8003a1a:	6a3b      	ldr	r3, [r7, #32]
 8003a1c:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 8003a1e:	69fb      	ldr	r3, [r7, #28]
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d012      	beq.n	8003a4c <ETH_Prepare_Tx_Descriptors+0x3ec>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 8003a26:	69fb      	ldr	r3, [r7, #28]
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	461a      	mov	r2, r3
 8003a32:	6a3b      	ldr	r3, [r7, #32]
 8003a34:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8003a36:	6a3b      	ldr	r3, [r7, #32]
 8003a38:	689a      	ldr	r2, [r3, #8]
 8003a3a:	4b31      	ldr	r3, [pc, #196]	; (8003b00 <ETH_Prepare_Tx_Descriptors+0x4a0>)
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	69fa      	ldr	r2, [r7, #28]
 8003a40:	6852      	ldr	r2, [r2, #4]
 8003a42:	0412      	lsls	r2, r2, #16
 8003a44:	431a      	orrs	r2, r3
 8003a46:	6a3b      	ldr	r3, [r7, #32]
 8003a48:	609a      	str	r2, [r3, #8]
 8003a4a:	e008      	b.n	8003a5e <ETH_Prepare_Tx_Descriptors+0x3fe>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003a4c:	6a3b      	ldr	r3, [r7, #32]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8003a52:	6a3b      	ldr	r3, [r7, #32]
 8003a54:	689a      	ldr	r2, [r3, #8]
 8003a56:	4b2a      	ldr	r3, [pc, #168]	; (8003b00 <ETH_Prepare_Tx_Descriptors+0x4a0>)
 8003a58:	4013      	ands	r3, r2
 8003a5a:	6a3a      	ldr	r2, [r7, #32]
 8003a5c:	6093      	str	r3, [r2, #8]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0310 	and.w	r3, r3, #16
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d00f      	beq.n	8003a8a <ETH_Prepare_Tx_Descriptors+0x42a>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8003a6a:	6a3b      	ldr	r3, [r7, #32]
 8003a6c:	68da      	ldr	r2, [r3, #12]
 8003a6e:	4b25      	ldr	r3, [pc, #148]	; (8003b04 <ETH_Prepare_Tx_Descriptors+0x4a4>)
 8003a70:	4013      	ands	r3, r2
 8003a72:	68ba      	ldr	r2, [r7, #8]
 8003a74:	69d2      	ldr	r2, [r2, #28]
 8003a76:	431a      	orrs	r2, r3
 8003a78:	6a3b      	ldr	r3, [r7, #32]
 8003a7a:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8003a7c:	6a3b      	ldr	r3, [r7, #32]
 8003a7e:	68db      	ldr	r3, [r3, #12]
 8003a80:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003a84:	6a3b      	ldr	r3, [r7, #32]
 8003a86:	60da      	str	r2, [r3, #12]
 8003a88:	e017      	b.n	8003aba <ETH_Prepare_Tx_Descriptors+0x45a>
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8003a8a:	6a3b      	ldr	r3, [r7, #32]
 8003a8c:	68da      	ldr	r2, [r3, #12]
 8003a8e:	4b1a      	ldr	r3, [pc, #104]	; (8003af8 <ETH_Prepare_Tx_Descriptors+0x498>)
 8003a90:	4013      	ands	r3, r2
 8003a92:	68ba      	ldr	r2, [r7, #8]
 8003a94:	6852      	ldr	r2, [r2, #4]
 8003a96:	431a      	orrs	r2, r3
 8003a98:	6a3b      	ldr	r3, [r7, #32]
 8003a9a:	60da      	str	r2, [r3, #12]

      if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 0301 	and.w	r3, r3, #1
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d008      	beq.n	8003aba <ETH_Prepare_Tx_Descriptors+0x45a>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8003aa8:	6a3b      	ldr	r3, [r7, #32]
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	695b      	ldr	r3, [r3, #20]
 8003ab4:	431a      	orrs	r2, r3
 8003ab6:	6a3b      	ldr	r3, [r7, #32]
 8003ab8:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 8003aba:	69bb      	ldr	r3, [r7, #24]
 8003abc:	3301      	adds	r3, #1
 8003abe:	61bb      	str	r3, [r7, #24]
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8003ac0:	6a3b      	ldr	r3, [r7, #32]
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003ac8:	6a3b      	ldr	r3, [r7, #32]
 8003aca:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8003acc:	6a3b      	ldr	r3, [r7, #32]
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003ad4:	6a3b      	ldr	r3, [r7, #32]
 8003ad6:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8003ad8:	69fb      	ldr	r3, [r7, #28]
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	f47f af3a 	bne.w	8003956 <ETH_Prepare_Tx_Descriptors+0x2f6>
  }

  if(ItMode != ((uint32_t)RESET))
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d00f      	beq.n	8003b08 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8003ae8:	6a3b      	ldr	r3, [r7, #32]
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003af0:	6a3b      	ldr	r3, [r7, #32]
 8003af2:	609a      	str	r2, [r3, #8]
 8003af4:	e00e      	b.n	8003b14 <ETH_Prepare_Tx_Descriptors+0x4b4>
 8003af6:	bf00      	nop
 8003af8:	ffff8000 	.word	0xffff8000
 8003afc:	ffffc000 	.word	0xffffc000
 8003b00:	c000ffff 	.word	0xc000ffff
 8003b04:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8003b08:	6a3b      	ldr	r3, [r7, #32]
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003b10:	6a3b      	ldr	r3, [r7, #32]
 8003b12:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8003b14:	6a3b      	ldr	r3, [r7, #32]
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003b1c:	6a3b      	ldr	r3, [r7, #32]
 8003b1e:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b24:	6979      	ldr	r1, [r7, #20]
 8003b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b28:	3304      	adds	r3, #4
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	440b      	add	r3, r1
 8003b2e:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b34:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8003b36:	b672      	cpsid	i
}
 8003b38:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b3e:	69bb      	ldr	r3, [r7, #24]
 8003b40:	4413      	add	r3, r2
 8003b42:	1c5a      	adds	r2, r3, #1
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8003b48:	b662      	cpsie	i
}
 8003b4a:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8003b4c:	2300      	movs	r3, #0
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3734      	adds	r7, #52	; 0x34
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr
 8003b5a:	bf00      	nop

08003b5c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b089      	sub	sp, #36	; 0x24
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003b66:	2300      	movs	r3, #0
 8003b68:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003b6a:	4b89      	ldr	r3, [pc, #548]	; (8003d90 <HAL_GPIO_Init+0x234>)
 8003b6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003b6e:	e194      	b.n	8003e9a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	2101      	movs	r1, #1
 8003b76:	69fb      	ldr	r3, [r7, #28]
 8003b78:	fa01 f303 	lsl.w	r3, r1, r3
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	f000 8186 	beq.w	8003e94 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d00b      	beq.n	8003ba8 <HAL_GPIO_Init+0x4c>
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	2b02      	cmp	r3, #2
 8003b96:	d007      	beq.n	8003ba8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003b9c:	2b11      	cmp	r3, #17
 8003b9e:	d003      	beq.n	8003ba8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	2b12      	cmp	r3, #18
 8003ba6:	d130      	bne.n	8003c0a <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003bae:	69fb      	ldr	r3, [r7, #28]
 8003bb0:	005b      	lsls	r3, r3, #1
 8003bb2:	2203      	movs	r2, #3
 8003bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb8:	43db      	mvns	r3, r3
 8003bba:	69ba      	ldr	r2, [r7, #24]
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	68da      	ldr	r2, [r3, #12]
 8003bc4:	69fb      	ldr	r3, [r7, #28]
 8003bc6:	005b      	lsls	r3, r3, #1
 8003bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bcc:	69ba      	ldr	r2, [r7, #24]
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	69ba      	ldr	r2, [r7, #24]
 8003bd6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003bde:	2201      	movs	r2, #1
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	fa02 f303 	lsl.w	r3, r2, r3
 8003be6:	43db      	mvns	r3, r3
 8003be8:	69ba      	ldr	r2, [r7, #24]
 8003bea:	4013      	ands	r3, r2
 8003bec:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	091b      	lsrs	r3, r3, #4
 8003bf4:	f003 0201 	and.w	r2, r3, #1
 8003bf8:	69fb      	ldr	r3, [r7, #28]
 8003bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8003bfe:	69ba      	ldr	r2, [r7, #24]
 8003c00:	4313      	orrs	r3, r2
 8003c02:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	69ba      	ldr	r2, [r7, #24]
 8003c08:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	68db      	ldr	r3, [r3, #12]
 8003c0e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003c10:	69fb      	ldr	r3, [r7, #28]
 8003c12:	005b      	lsls	r3, r3, #1
 8003c14:	2203      	movs	r2, #3
 8003c16:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1a:	43db      	mvns	r3, r3
 8003c1c:	69ba      	ldr	r2, [r7, #24]
 8003c1e:	4013      	ands	r3, r2
 8003c20:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	689a      	ldr	r2, [r3, #8]
 8003c26:	69fb      	ldr	r3, [r7, #28]
 8003c28:	005b      	lsls	r3, r3, #1
 8003c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c2e:	69ba      	ldr	r2, [r7, #24]
 8003c30:	4313      	orrs	r3, r2
 8003c32:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	69ba      	ldr	r2, [r7, #24]
 8003c38:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	2b02      	cmp	r3, #2
 8003c40:	d003      	beq.n	8003c4a <HAL_GPIO_Init+0xee>
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	2b12      	cmp	r3, #18
 8003c48:	d123      	bne.n	8003c92 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003c4a:	69fb      	ldr	r3, [r7, #28]
 8003c4c:	08da      	lsrs	r2, r3, #3
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	3208      	adds	r2, #8
 8003c52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003c58:	69fb      	ldr	r3, [r7, #28]
 8003c5a:	f003 0307 	and.w	r3, r3, #7
 8003c5e:	009b      	lsls	r3, r3, #2
 8003c60:	220f      	movs	r2, #15
 8003c62:	fa02 f303 	lsl.w	r3, r2, r3
 8003c66:	43db      	mvns	r3, r3
 8003c68:	69ba      	ldr	r2, [r7, #24]
 8003c6a:	4013      	ands	r3, r2
 8003c6c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	691a      	ldr	r2, [r3, #16]
 8003c72:	69fb      	ldr	r3, [r7, #28]
 8003c74:	f003 0307 	and.w	r3, r3, #7
 8003c78:	009b      	lsls	r3, r3, #2
 8003c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c7e:	69ba      	ldr	r2, [r7, #24]
 8003c80:	4313      	orrs	r3, r2
 8003c82:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003c84:	69fb      	ldr	r3, [r7, #28]
 8003c86:	08da      	lsrs	r2, r3, #3
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	3208      	adds	r2, #8
 8003c8c:	69b9      	ldr	r1, [r7, #24]
 8003c8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003c98:	69fb      	ldr	r3, [r7, #28]
 8003c9a:	005b      	lsls	r3, r3, #1
 8003c9c:	2203      	movs	r2, #3
 8003c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca2:	43db      	mvns	r3, r3
 8003ca4:	69ba      	ldr	r2, [r7, #24]
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	f003 0203 	and.w	r2, r3, #3
 8003cb2:	69fb      	ldr	r3, [r7, #28]
 8003cb4:	005b      	lsls	r3, r3, #1
 8003cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cba:	69ba      	ldr	r2, [r7, #24]
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	69ba      	ldr	r2, [r7, #24]
 8003cc4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	f000 80e0 	beq.w	8003e94 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cd4:	4b2f      	ldr	r3, [pc, #188]	; (8003d94 <HAL_GPIO_Init+0x238>)
 8003cd6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003cda:	4a2e      	ldr	r2, [pc, #184]	; (8003d94 <HAL_GPIO_Init+0x238>)
 8003cdc:	f043 0302 	orr.w	r3, r3, #2
 8003ce0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003ce4:	4b2b      	ldr	r3, [pc, #172]	; (8003d94 <HAL_GPIO_Init+0x238>)
 8003ce6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003cea:	f003 0302 	and.w	r3, r3, #2
 8003cee:	60fb      	str	r3, [r7, #12]
 8003cf0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003cf2:	4a29      	ldr	r2, [pc, #164]	; (8003d98 <HAL_GPIO_Init+0x23c>)
 8003cf4:	69fb      	ldr	r3, [r7, #28]
 8003cf6:	089b      	lsrs	r3, r3, #2
 8003cf8:	3302      	adds	r3, #2
 8003cfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003d00:	69fb      	ldr	r3, [r7, #28]
 8003d02:	f003 0303 	and.w	r3, r3, #3
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	220f      	movs	r2, #15
 8003d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0e:	43db      	mvns	r3, r3
 8003d10:	69ba      	ldr	r2, [r7, #24]
 8003d12:	4013      	ands	r3, r2
 8003d14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4a20      	ldr	r2, [pc, #128]	; (8003d9c <HAL_GPIO_Init+0x240>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d052      	beq.n	8003dc4 <HAL_GPIO_Init+0x268>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4a1f      	ldr	r2, [pc, #124]	; (8003da0 <HAL_GPIO_Init+0x244>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d031      	beq.n	8003d8a <HAL_GPIO_Init+0x22e>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4a1e      	ldr	r2, [pc, #120]	; (8003da4 <HAL_GPIO_Init+0x248>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d02b      	beq.n	8003d86 <HAL_GPIO_Init+0x22a>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	4a1d      	ldr	r2, [pc, #116]	; (8003da8 <HAL_GPIO_Init+0x24c>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d025      	beq.n	8003d82 <HAL_GPIO_Init+0x226>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4a1c      	ldr	r2, [pc, #112]	; (8003dac <HAL_GPIO_Init+0x250>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d01f      	beq.n	8003d7e <HAL_GPIO_Init+0x222>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	4a1b      	ldr	r2, [pc, #108]	; (8003db0 <HAL_GPIO_Init+0x254>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d019      	beq.n	8003d7a <HAL_GPIO_Init+0x21e>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	4a1a      	ldr	r2, [pc, #104]	; (8003db4 <HAL_GPIO_Init+0x258>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d013      	beq.n	8003d76 <HAL_GPIO_Init+0x21a>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	4a19      	ldr	r2, [pc, #100]	; (8003db8 <HAL_GPIO_Init+0x25c>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d00d      	beq.n	8003d72 <HAL_GPIO_Init+0x216>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	4a18      	ldr	r2, [pc, #96]	; (8003dbc <HAL_GPIO_Init+0x260>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d007      	beq.n	8003d6e <HAL_GPIO_Init+0x212>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	4a17      	ldr	r2, [pc, #92]	; (8003dc0 <HAL_GPIO_Init+0x264>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d101      	bne.n	8003d6a <HAL_GPIO_Init+0x20e>
 8003d66:	2309      	movs	r3, #9
 8003d68:	e02d      	b.n	8003dc6 <HAL_GPIO_Init+0x26a>
 8003d6a:	230a      	movs	r3, #10
 8003d6c:	e02b      	b.n	8003dc6 <HAL_GPIO_Init+0x26a>
 8003d6e:	2308      	movs	r3, #8
 8003d70:	e029      	b.n	8003dc6 <HAL_GPIO_Init+0x26a>
 8003d72:	2307      	movs	r3, #7
 8003d74:	e027      	b.n	8003dc6 <HAL_GPIO_Init+0x26a>
 8003d76:	2306      	movs	r3, #6
 8003d78:	e025      	b.n	8003dc6 <HAL_GPIO_Init+0x26a>
 8003d7a:	2305      	movs	r3, #5
 8003d7c:	e023      	b.n	8003dc6 <HAL_GPIO_Init+0x26a>
 8003d7e:	2304      	movs	r3, #4
 8003d80:	e021      	b.n	8003dc6 <HAL_GPIO_Init+0x26a>
 8003d82:	2303      	movs	r3, #3
 8003d84:	e01f      	b.n	8003dc6 <HAL_GPIO_Init+0x26a>
 8003d86:	2302      	movs	r3, #2
 8003d88:	e01d      	b.n	8003dc6 <HAL_GPIO_Init+0x26a>
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e01b      	b.n	8003dc6 <HAL_GPIO_Init+0x26a>
 8003d8e:	bf00      	nop
 8003d90:	58000080 	.word	0x58000080
 8003d94:	58024400 	.word	0x58024400
 8003d98:	58000400 	.word	0x58000400
 8003d9c:	58020000 	.word	0x58020000
 8003da0:	58020400 	.word	0x58020400
 8003da4:	58020800 	.word	0x58020800
 8003da8:	58020c00 	.word	0x58020c00
 8003dac:	58021000 	.word	0x58021000
 8003db0:	58021400 	.word	0x58021400
 8003db4:	58021800 	.word	0x58021800
 8003db8:	58021c00 	.word	0x58021c00
 8003dbc:	58022000 	.word	0x58022000
 8003dc0:	58022400 	.word	0x58022400
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	69fa      	ldr	r2, [r7, #28]
 8003dc8:	f002 0203 	and.w	r2, r2, #3
 8003dcc:	0092      	lsls	r2, r2, #2
 8003dce:	4093      	lsls	r3, r2
 8003dd0:	69ba      	ldr	r2, [r7, #24]
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003dd6:	4938      	ldr	r1, [pc, #224]	; (8003eb8 <HAL_GPIO_Init+0x35c>)
 8003dd8:	69fb      	ldr	r3, [r7, #28]
 8003dda:	089b      	lsrs	r3, r3, #2
 8003ddc:	3302      	adds	r3, #2
 8003dde:	69ba      	ldr	r2, [r7, #24]
 8003de0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	43db      	mvns	r3, r3
 8003dee:	69ba      	ldr	r2, [r7, #24]
 8003df0:	4013      	ands	r3, r2
 8003df2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d003      	beq.n	8003e08 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003e00:	69ba      	ldr	r2, [r7, #24]
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	4313      	orrs	r3, r2
 8003e06:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	69ba      	ldr	r2, [r7, #24]
 8003e0c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	43db      	mvns	r3, r3
 8003e18:	69ba      	ldr	r2, [r7, #24]
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d003      	beq.n	8003e32 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003e2a:	69ba      	ldr	r2, [r7, #24]
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	69ba      	ldr	r2, [r7, #24]
 8003e36:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003e38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	43db      	mvns	r3, r3
 8003e44:	69ba      	ldr	r2, [r7, #24]
 8003e46:	4013      	ands	r3, r2
 8003e48:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d003      	beq.n	8003e5e <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8003e56:	69ba      	ldr	r2, [r7, #24]
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003e5e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e62:	69bb      	ldr	r3, [r7, #24]
 8003e64:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003e66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	43db      	mvns	r3, r3
 8003e72:	69ba      	ldr	r2, [r7, #24]
 8003e74:	4013      	ands	r3, r2
 8003e76:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d003      	beq.n	8003e8c <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8003e84:	69ba      	ldr	r2, [r7, #24]
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003e8c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e90:	69bb      	ldr	r3, [r7, #24]
 8003e92:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8003e94:	69fb      	ldr	r3, [r7, #28]
 8003e96:	3301      	adds	r3, #1
 8003e98:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	fa22 f303 	lsr.w	r3, r2, r3
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	f47f ae63 	bne.w	8003b70 <HAL_GPIO_Init+0x14>
  }
}
 8003eaa:	bf00      	nop
 8003eac:	bf00      	nop
 8003eae:	3724      	adds	r7, #36	; 0x24
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr
 8003eb8:	58000400 	.word	0x58000400

08003ebc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b083      	sub	sp, #12
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	460b      	mov	r3, r1
 8003ec6:	807b      	strh	r3, [r7, #2]
 8003ec8:	4613      	mov	r3, r2
 8003eca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003ecc:	787b      	ldrb	r3, [r7, #1]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d003      	beq.n	8003eda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ed2:	887a      	ldrh	r2, [r7, #2]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003ed8:	e003      	b.n	8003ee2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003eda:	887b      	ldrh	r3, [r7, #2]
 8003edc:	041a      	lsls	r2, r3, #16
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	619a      	str	r2, [r3, #24]
}
 8003ee2:	bf00      	nop
 8003ee4:	370c      	adds	r7, #12
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr

08003eee <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003eee:	b480      	push	{r7}
 8003ef0:	b085      	sub	sp, #20
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	6078      	str	r0, [r7, #4]
 8003ef6:	460b      	mov	r3, r1
 8003ef8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	695b      	ldr	r3, [r3, #20]
 8003efe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003f00:	887a      	ldrh	r2, [r7, #2]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	4013      	ands	r3, r2
 8003f06:	041a      	lsls	r2, r3, #16
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	43d9      	mvns	r1, r3
 8003f0c:	887b      	ldrh	r3, [r7, #2]
 8003f0e:	400b      	ands	r3, r1
 8003f10:	431a      	orrs	r2, r3
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	619a      	str	r2, [r3, #24]
}
 8003f16:	bf00      	nop
 8003f18:	3714      	adds	r7, #20
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr

08003f22 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003f22:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f24:	b08f      	sub	sp, #60	; 0x3c
 8003f26:	af0a      	add	r7, sp, #40	; 0x28
 8003f28:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d101      	bne.n	8003f34 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	e116      	b.n	8004162 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d106      	bne.n	8003f54 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f7fc ffac 	bl	8000eac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2203      	movs	r2, #3
 8003f58:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d102      	bne.n	8003f6e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4618      	mov	r0, r3
 8003f74:	f003 fcf4 	bl	8007960 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	603b      	str	r3, [r7, #0]
 8003f7e:	687e      	ldr	r6, [r7, #4]
 8003f80:	466d      	mov	r5, sp
 8003f82:	f106 0410 	add.w	r4, r6, #16
 8003f86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f8c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f8e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003f92:	e885 0003 	stmia.w	r5, {r0, r1}
 8003f96:	1d33      	adds	r3, r6, #4
 8003f98:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f9a:	6838      	ldr	r0, [r7, #0]
 8003f9c:	f003 fc72 	bl	8007884 <USB_CoreInit>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d005      	beq.n	8003fb2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2202      	movs	r2, #2
 8003faa:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e0d7      	b.n	8004162 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	2100      	movs	r1, #0
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f003 fce2 	bl	8007982 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	73fb      	strb	r3, [r7, #15]
 8003fc2:	e04a      	b.n	800405a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003fc4:	7bfa      	ldrb	r2, [r7, #15]
 8003fc6:	6879      	ldr	r1, [r7, #4]
 8003fc8:	4613      	mov	r3, r2
 8003fca:	00db      	lsls	r3, r3, #3
 8003fcc:	1a9b      	subs	r3, r3, r2
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	440b      	add	r3, r1
 8003fd2:	333d      	adds	r3, #61	; 0x3d
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003fd8:	7bfa      	ldrb	r2, [r7, #15]
 8003fda:	6879      	ldr	r1, [r7, #4]
 8003fdc:	4613      	mov	r3, r2
 8003fde:	00db      	lsls	r3, r3, #3
 8003fe0:	1a9b      	subs	r3, r3, r2
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	440b      	add	r3, r1
 8003fe6:	333c      	adds	r3, #60	; 0x3c
 8003fe8:	7bfa      	ldrb	r2, [r7, #15]
 8003fea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003fec:	7bfa      	ldrb	r2, [r7, #15]
 8003fee:	7bfb      	ldrb	r3, [r7, #15]
 8003ff0:	b298      	uxth	r0, r3
 8003ff2:	6879      	ldr	r1, [r7, #4]
 8003ff4:	4613      	mov	r3, r2
 8003ff6:	00db      	lsls	r3, r3, #3
 8003ff8:	1a9b      	subs	r3, r3, r2
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	440b      	add	r3, r1
 8003ffe:	3342      	adds	r3, #66	; 0x42
 8004000:	4602      	mov	r2, r0
 8004002:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004004:	7bfa      	ldrb	r2, [r7, #15]
 8004006:	6879      	ldr	r1, [r7, #4]
 8004008:	4613      	mov	r3, r2
 800400a:	00db      	lsls	r3, r3, #3
 800400c:	1a9b      	subs	r3, r3, r2
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	440b      	add	r3, r1
 8004012:	333f      	adds	r3, #63	; 0x3f
 8004014:	2200      	movs	r2, #0
 8004016:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004018:	7bfa      	ldrb	r2, [r7, #15]
 800401a:	6879      	ldr	r1, [r7, #4]
 800401c:	4613      	mov	r3, r2
 800401e:	00db      	lsls	r3, r3, #3
 8004020:	1a9b      	subs	r3, r3, r2
 8004022:	009b      	lsls	r3, r3, #2
 8004024:	440b      	add	r3, r1
 8004026:	3344      	adds	r3, #68	; 0x44
 8004028:	2200      	movs	r2, #0
 800402a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800402c:	7bfa      	ldrb	r2, [r7, #15]
 800402e:	6879      	ldr	r1, [r7, #4]
 8004030:	4613      	mov	r3, r2
 8004032:	00db      	lsls	r3, r3, #3
 8004034:	1a9b      	subs	r3, r3, r2
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	440b      	add	r3, r1
 800403a:	3348      	adds	r3, #72	; 0x48
 800403c:	2200      	movs	r2, #0
 800403e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004040:	7bfa      	ldrb	r2, [r7, #15]
 8004042:	6879      	ldr	r1, [r7, #4]
 8004044:	4613      	mov	r3, r2
 8004046:	00db      	lsls	r3, r3, #3
 8004048:	1a9b      	subs	r3, r3, r2
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	440b      	add	r3, r1
 800404e:	3350      	adds	r3, #80	; 0x50
 8004050:	2200      	movs	r2, #0
 8004052:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004054:	7bfb      	ldrb	r3, [r7, #15]
 8004056:	3301      	adds	r3, #1
 8004058:	73fb      	strb	r3, [r7, #15]
 800405a:	7bfa      	ldrb	r2, [r7, #15]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	429a      	cmp	r2, r3
 8004062:	d3af      	bcc.n	8003fc4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004064:	2300      	movs	r3, #0
 8004066:	73fb      	strb	r3, [r7, #15]
 8004068:	e044      	b.n	80040f4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800406a:	7bfa      	ldrb	r2, [r7, #15]
 800406c:	6879      	ldr	r1, [r7, #4]
 800406e:	4613      	mov	r3, r2
 8004070:	00db      	lsls	r3, r3, #3
 8004072:	1a9b      	subs	r3, r3, r2
 8004074:	009b      	lsls	r3, r3, #2
 8004076:	440b      	add	r3, r1
 8004078:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800407c:	2200      	movs	r2, #0
 800407e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004080:	7bfa      	ldrb	r2, [r7, #15]
 8004082:	6879      	ldr	r1, [r7, #4]
 8004084:	4613      	mov	r3, r2
 8004086:	00db      	lsls	r3, r3, #3
 8004088:	1a9b      	subs	r3, r3, r2
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	440b      	add	r3, r1
 800408e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8004092:	7bfa      	ldrb	r2, [r7, #15]
 8004094:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004096:	7bfa      	ldrb	r2, [r7, #15]
 8004098:	6879      	ldr	r1, [r7, #4]
 800409a:	4613      	mov	r3, r2
 800409c:	00db      	lsls	r3, r3, #3
 800409e:	1a9b      	subs	r3, r3, r2
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	440b      	add	r3, r1
 80040a4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80040a8:	2200      	movs	r2, #0
 80040aa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80040ac:	7bfa      	ldrb	r2, [r7, #15]
 80040ae:	6879      	ldr	r1, [r7, #4]
 80040b0:	4613      	mov	r3, r2
 80040b2:	00db      	lsls	r3, r3, #3
 80040b4:	1a9b      	subs	r3, r3, r2
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	440b      	add	r3, r1
 80040ba:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80040be:	2200      	movs	r2, #0
 80040c0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80040c2:	7bfa      	ldrb	r2, [r7, #15]
 80040c4:	6879      	ldr	r1, [r7, #4]
 80040c6:	4613      	mov	r3, r2
 80040c8:	00db      	lsls	r3, r3, #3
 80040ca:	1a9b      	subs	r3, r3, r2
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	440b      	add	r3, r1
 80040d0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80040d4:	2200      	movs	r2, #0
 80040d6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80040d8:	7bfa      	ldrb	r2, [r7, #15]
 80040da:	6879      	ldr	r1, [r7, #4]
 80040dc:	4613      	mov	r3, r2
 80040de:	00db      	lsls	r3, r3, #3
 80040e0:	1a9b      	subs	r3, r3, r2
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	440b      	add	r3, r1
 80040e6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80040ea:	2200      	movs	r2, #0
 80040ec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040ee:	7bfb      	ldrb	r3, [r7, #15]
 80040f0:	3301      	adds	r3, #1
 80040f2:	73fb      	strb	r3, [r7, #15]
 80040f4:	7bfa      	ldrb	r2, [r7, #15]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d3b5      	bcc.n	800406a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	603b      	str	r3, [r7, #0]
 8004104:	687e      	ldr	r6, [r7, #4]
 8004106:	466d      	mov	r5, sp
 8004108:	f106 0410 	add.w	r4, r6, #16
 800410c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800410e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004110:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004112:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004114:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004118:	e885 0003 	stmia.w	r5, {r0, r1}
 800411c:	1d33      	adds	r3, r6, #4
 800411e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004120:	6838      	ldr	r0, [r7, #0]
 8004122:	f003 fc59 	bl	80079d8 <USB_DevInit>
 8004126:	4603      	mov	r3, r0
 8004128:	2b00      	cmp	r3, #0
 800412a:	d005      	beq.n	8004138 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2202      	movs	r2, #2
 8004130:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	e014      	b.n	8004162 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2200      	movs	r2, #0
 800413c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2201      	movs	r2, #1
 8004144:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414c:	2b01      	cmp	r3, #1
 800414e:	d102      	bne.n	8004156 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	f000 f80b 	bl	800416c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4618      	mov	r0, r3
 800415c:	f003 fdfb 	bl	8007d56 <USB_DevDisconnect>

  return HAL_OK;
 8004160:	2300      	movs	r3, #0
}
 8004162:	4618      	mov	r0, r3
 8004164:	3714      	adds	r7, #20
 8004166:	46bd      	mov	sp, r7
 8004168:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800416c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800416c:	b480      	push	{r7}
 800416e:	b085      	sub	sp, #20
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2201      	movs	r2, #1
 800417e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2200      	movs	r2, #0
 8004186:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	699b      	ldr	r3, [r3, #24]
 800418e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800419a:	4b05      	ldr	r3, [pc, #20]	; (80041b0 <HAL_PCDEx_ActivateLPM+0x44>)
 800419c:	4313      	orrs	r3, r2
 800419e:	68fa      	ldr	r2, [r7, #12]
 80041a0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80041a2:	2300      	movs	r3, #0
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	3714      	adds	r7, #20
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr
 80041b0:	10000003 	.word	0x10000003

080041b4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b084      	sub	sp, #16
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80041bc:	4b19      	ldr	r3, [pc, #100]	; (8004224 <HAL_PWREx_ConfigSupply+0x70>)
 80041be:	68db      	ldr	r3, [r3, #12]
 80041c0:	f003 0304 	and.w	r3, r3, #4
 80041c4:	2b04      	cmp	r3, #4
 80041c6:	d00a      	beq.n	80041de <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80041c8:	4b16      	ldr	r3, [pc, #88]	; (8004224 <HAL_PWREx_ConfigSupply+0x70>)
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	f003 0307 	and.w	r3, r3, #7
 80041d0:	687a      	ldr	r2, [r7, #4]
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d001      	beq.n	80041da <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	e01f      	b.n	800421a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80041da:	2300      	movs	r3, #0
 80041dc:	e01d      	b.n	800421a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80041de:	4b11      	ldr	r3, [pc, #68]	; (8004224 <HAL_PWREx_ConfigSupply+0x70>)
 80041e0:	68db      	ldr	r3, [r3, #12]
 80041e2:	f023 0207 	bic.w	r2, r3, #7
 80041e6:	490f      	ldr	r1, [pc, #60]	; (8004224 <HAL_PWREx_ConfigSupply+0x70>)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80041ee:	f7fd fc6f 	bl	8001ad0 <HAL_GetTick>
 80041f2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80041f4:	e009      	b.n	800420a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80041f6:	f7fd fc6b 	bl	8001ad0 <HAL_GetTick>
 80041fa:	4602      	mov	r2, r0
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	1ad3      	subs	r3, r2, r3
 8004200:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004204:	d901      	bls.n	800420a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e007      	b.n	800421a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800420a:	4b06      	ldr	r3, [pc, #24]	; (8004224 <HAL_PWREx_ConfigSupply+0x70>)
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004212:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004216:	d1ee      	bne.n	80041f6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004218:	2300      	movs	r3, #0
}
 800421a:	4618      	mov	r0, r3
 800421c:	3710      	adds	r7, #16
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}
 8004222:	bf00      	nop
 8004224:	58024800 	.word	0x58024800

08004228 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8004228:	b480      	push	{r7}
 800422a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800422c:	4b05      	ldr	r3, [pc, #20]	; (8004244 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800422e:	68db      	ldr	r3, [r3, #12]
 8004230:	4a04      	ldr	r2, [pc, #16]	; (8004244 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004232:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004236:	60d3      	str	r3, [r2, #12]
}
 8004238:	bf00      	nop
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr
 8004242:	bf00      	nop
 8004244:	58024800 	.word	0x58024800

08004248 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b08c      	sub	sp, #48	; 0x30
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d101      	bne.n	800425a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	e3ff      	b.n	8004a5a <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 0301 	and.w	r3, r3, #1
 8004262:	2b00      	cmp	r3, #0
 8004264:	f000 8087 	beq.w	8004376 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004268:	4b99      	ldr	r3, [pc, #612]	; (80044d0 <HAL_RCC_OscConfig+0x288>)
 800426a:	691b      	ldr	r3, [r3, #16]
 800426c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004270:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004272:	4b97      	ldr	r3, [pc, #604]	; (80044d0 <HAL_RCC_OscConfig+0x288>)
 8004274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004276:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800427a:	2b10      	cmp	r3, #16
 800427c:	d007      	beq.n	800428e <HAL_RCC_OscConfig+0x46>
 800427e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004280:	2b18      	cmp	r3, #24
 8004282:	d110      	bne.n	80042a6 <HAL_RCC_OscConfig+0x5e>
 8004284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004286:	f003 0303 	and.w	r3, r3, #3
 800428a:	2b02      	cmp	r3, #2
 800428c:	d10b      	bne.n	80042a6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800428e:	4b90      	ldr	r3, [pc, #576]	; (80044d0 <HAL_RCC_OscConfig+0x288>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004296:	2b00      	cmp	r3, #0
 8004298:	d06c      	beq.n	8004374 <HAL_RCC_OscConfig+0x12c>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d168      	bne.n	8004374 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e3d9      	b.n	8004a5a <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042ae:	d106      	bne.n	80042be <HAL_RCC_OscConfig+0x76>
 80042b0:	4b87      	ldr	r3, [pc, #540]	; (80044d0 <HAL_RCC_OscConfig+0x288>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a86      	ldr	r2, [pc, #536]	; (80044d0 <HAL_RCC_OscConfig+0x288>)
 80042b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042ba:	6013      	str	r3, [r2, #0]
 80042bc:	e02e      	b.n	800431c <HAL_RCC_OscConfig+0xd4>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d10c      	bne.n	80042e0 <HAL_RCC_OscConfig+0x98>
 80042c6:	4b82      	ldr	r3, [pc, #520]	; (80044d0 <HAL_RCC_OscConfig+0x288>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a81      	ldr	r2, [pc, #516]	; (80044d0 <HAL_RCC_OscConfig+0x288>)
 80042cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042d0:	6013      	str	r3, [r2, #0]
 80042d2:	4b7f      	ldr	r3, [pc, #508]	; (80044d0 <HAL_RCC_OscConfig+0x288>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a7e      	ldr	r2, [pc, #504]	; (80044d0 <HAL_RCC_OscConfig+0x288>)
 80042d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042dc:	6013      	str	r3, [r2, #0]
 80042de:	e01d      	b.n	800431c <HAL_RCC_OscConfig+0xd4>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042e8:	d10c      	bne.n	8004304 <HAL_RCC_OscConfig+0xbc>
 80042ea:	4b79      	ldr	r3, [pc, #484]	; (80044d0 <HAL_RCC_OscConfig+0x288>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a78      	ldr	r2, [pc, #480]	; (80044d0 <HAL_RCC_OscConfig+0x288>)
 80042f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042f4:	6013      	str	r3, [r2, #0]
 80042f6:	4b76      	ldr	r3, [pc, #472]	; (80044d0 <HAL_RCC_OscConfig+0x288>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a75      	ldr	r2, [pc, #468]	; (80044d0 <HAL_RCC_OscConfig+0x288>)
 80042fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004300:	6013      	str	r3, [r2, #0]
 8004302:	e00b      	b.n	800431c <HAL_RCC_OscConfig+0xd4>
 8004304:	4b72      	ldr	r3, [pc, #456]	; (80044d0 <HAL_RCC_OscConfig+0x288>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a71      	ldr	r2, [pc, #452]	; (80044d0 <HAL_RCC_OscConfig+0x288>)
 800430a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800430e:	6013      	str	r3, [r2, #0]
 8004310:	4b6f      	ldr	r3, [pc, #444]	; (80044d0 <HAL_RCC_OscConfig+0x288>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a6e      	ldr	r2, [pc, #440]	; (80044d0 <HAL_RCC_OscConfig+0x288>)
 8004316:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800431a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d013      	beq.n	800434c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004324:	f7fd fbd4 	bl	8001ad0 <HAL_GetTick>
 8004328:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800432a:	e008      	b.n	800433e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800432c:	f7fd fbd0 	bl	8001ad0 <HAL_GetTick>
 8004330:	4602      	mov	r2, r0
 8004332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004334:	1ad3      	subs	r3, r2, r3
 8004336:	2b64      	cmp	r3, #100	; 0x64
 8004338:	d901      	bls.n	800433e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800433a:	2303      	movs	r3, #3
 800433c:	e38d      	b.n	8004a5a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800433e:	4b64      	ldr	r3, [pc, #400]	; (80044d0 <HAL_RCC_OscConfig+0x288>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004346:	2b00      	cmp	r3, #0
 8004348:	d0f0      	beq.n	800432c <HAL_RCC_OscConfig+0xe4>
 800434a:	e014      	b.n	8004376 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800434c:	f7fd fbc0 	bl	8001ad0 <HAL_GetTick>
 8004350:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004352:	e008      	b.n	8004366 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004354:	f7fd fbbc 	bl	8001ad0 <HAL_GetTick>
 8004358:	4602      	mov	r2, r0
 800435a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800435c:	1ad3      	subs	r3, r2, r3
 800435e:	2b64      	cmp	r3, #100	; 0x64
 8004360:	d901      	bls.n	8004366 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004362:	2303      	movs	r3, #3
 8004364:	e379      	b.n	8004a5a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004366:	4b5a      	ldr	r3, [pc, #360]	; (80044d0 <HAL_RCC_OscConfig+0x288>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800436e:	2b00      	cmp	r3, #0
 8004370:	d1f0      	bne.n	8004354 <HAL_RCC_OscConfig+0x10c>
 8004372:	e000      	b.n	8004376 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004374:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 0302 	and.w	r3, r3, #2
 800437e:	2b00      	cmp	r3, #0
 8004380:	f000 80ae 	beq.w	80044e0 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004384:	4b52      	ldr	r3, [pc, #328]	; (80044d0 <HAL_RCC_OscConfig+0x288>)
 8004386:	691b      	ldr	r3, [r3, #16]
 8004388:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800438c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800438e:	4b50      	ldr	r3, [pc, #320]	; (80044d0 <HAL_RCC_OscConfig+0x288>)
 8004390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004392:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004394:	6a3b      	ldr	r3, [r7, #32]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d007      	beq.n	80043aa <HAL_RCC_OscConfig+0x162>
 800439a:	6a3b      	ldr	r3, [r7, #32]
 800439c:	2b18      	cmp	r3, #24
 800439e:	d13a      	bne.n	8004416 <HAL_RCC_OscConfig+0x1ce>
 80043a0:	69fb      	ldr	r3, [r7, #28]
 80043a2:	f003 0303 	and.w	r3, r3, #3
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d135      	bne.n	8004416 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80043aa:	4b49      	ldr	r3, [pc, #292]	; (80044d0 <HAL_RCC_OscConfig+0x288>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 0304 	and.w	r3, r3, #4
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d005      	beq.n	80043c2 <HAL_RCC_OscConfig+0x17a>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	68db      	ldr	r3, [r3, #12]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d101      	bne.n	80043c2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e34b      	b.n	8004a5a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043c2:	f7fd fbb5 	bl	8001b30 <HAL_GetREVID>
 80043c6:	4603      	mov	r3, r0
 80043c8:	f241 0203 	movw	r2, #4099	; 0x1003
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d817      	bhi.n	8004400 <HAL_RCC_OscConfig+0x1b8>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	691b      	ldr	r3, [r3, #16]
 80043d4:	2b40      	cmp	r3, #64	; 0x40
 80043d6:	d108      	bne.n	80043ea <HAL_RCC_OscConfig+0x1a2>
 80043d8:	4b3d      	ldr	r3, [pc, #244]	; (80044d0 <HAL_RCC_OscConfig+0x288>)
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80043e0:	4a3b      	ldr	r2, [pc, #236]	; (80044d0 <HAL_RCC_OscConfig+0x288>)
 80043e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043e6:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80043e8:	e07a      	b.n	80044e0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043ea:	4b39      	ldr	r3, [pc, #228]	; (80044d0 <HAL_RCC_OscConfig+0x288>)
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	691b      	ldr	r3, [r3, #16]
 80043f6:	031b      	lsls	r3, r3, #12
 80043f8:	4935      	ldr	r1, [pc, #212]	; (80044d0 <HAL_RCC_OscConfig+0x288>)
 80043fa:	4313      	orrs	r3, r2
 80043fc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80043fe:	e06f      	b.n	80044e0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004400:	4b33      	ldr	r3, [pc, #204]	; (80044d0 <HAL_RCC_OscConfig+0x288>)
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	691b      	ldr	r3, [r3, #16]
 800440c:	061b      	lsls	r3, r3, #24
 800440e:	4930      	ldr	r1, [pc, #192]	; (80044d0 <HAL_RCC_OscConfig+0x288>)
 8004410:	4313      	orrs	r3, r2
 8004412:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004414:	e064      	b.n	80044e0 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	68db      	ldr	r3, [r3, #12]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d045      	beq.n	80044aa <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800441e:	4b2c      	ldr	r3, [pc, #176]	; (80044d0 <HAL_RCC_OscConfig+0x288>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f023 0219 	bic.w	r2, r3, #25
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	68db      	ldr	r3, [r3, #12]
 800442a:	4929      	ldr	r1, [pc, #164]	; (80044d0 <HAL_RCC_OscConfig+0x288>)
 800442c:	4313      	orrs	r3, r2
 800442e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004430:	f7fd fb4e 	bl	8001ad0 <HAL_GetTick>
 8004434:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004436:	e008      	b.n	800444a <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004438:	f7fd fb4a 	bl	8001ad0 <HAL_GetTick>
 800443c:	4602      	mov	r2, r0
 800443e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	2b02      	cmp	r3, #2
 8004444:	d901      	bls.n	800444a <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8004446:	2303      	movs	r3, #3
 8004448:	e307      	b.n	8004a5a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800444a:	4b21      	ldr	r3, [pc, #132]	; (80044d0 <HAL_RCC_OscConfig+0x288>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f003 0304 	and.w	r3, r3, #4
 8004452:	2b00      	cmp	r3, #0
 8004454:	d0f0      	beq.n	8004438 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004456:	f7fd fb6b 	bl	8001b30 <HAL_GetREVID>
 800445a:	4603      	mov	r3, r0
 800445c:	f241 0203 	movw	r2, #4099	; 0x1003
 8004460:	4293      	cmp	r3, r2
 8004462:	d817      	bhi.n	8004494 <HAL_RCC_OscConfig+0x24c>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	691b      	ldr	r3, [r3, #16]
 8004468:	2b40      	cmp	r3, #64	; 0x40
 800446a:	d108      	bne.n	800447e <HAL_RCC_OscConfig+0x236>
 800446c:	4b18      	ldr	r3, [pc, #96]	; (80044d0 <HAL_RCC_OscConfig+0x288>)
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004474:	4a16      	ldr	r2, [pc, #88]	; (80044d0 <HAL_RCC_OscConfig+0x288>)
 8004476:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800447a:	6053      	str	r3, [r2, #4]
 800447c:	e030      	b.n	80044e0 <HAL_RCC_OscConfig+0x298>
 800447e:	4b14      	ldr	r3, [pc, #80]	; (80044d0 <HAL_RCC_OscConfig+0x288>)
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	691b      	ldr	r3, [r3, #16]
 800448a:	031b      	lsls	r3, r3, #12
 800448c:	4910      	ldr	r1, [pc, #64]	; (80044d0 <HAL_RCC_OscConfig+0x288>)
 800448e:	4313      	orrs	r3, r2
 8004490:	604b      	str	r3, [r1, #4]
 8004492:	e025      	b.n	80044e0 <HAL_RCC_OscConfig+0x298>
 8004494:	4b0e      	ldr	r3, [pc, #56]	; (80044d0 <HAL_RCC_OscConfig+0x288>)
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	691b      	ldr	r3, [r3, #16]
 80044a0:	061b      	lsls	r3, r3, #24
 80044a2:	490b      	ldr	r1, [pc, #44]	; (80044d0 <HAL_RCC_OscConfig+0x288>)
 80044a4:	4313      	orrs	r3, r2
 80044a6:	604b      	str	r3, [r1, #4]
 80044a8:	e01a      	b.n	80044e0 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044aa:	4b09      	ldr	r3, [pc, #36]	; (80044d0 <HAL_RCC_OscConfig+0x288>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a08      	ldr	r2, [pc, #32]	; (80044d0 <HAL_RCC_OscConfig+0x288>)
 80044b0:	f023 0301 	bic.w	r3, r3, #1
 80044b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044b6:	f7fd fb0b 	bl	8001ad0 <HAL_GetTick>
 80044ba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80044bc:	e00a      	b.n	80044d4 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044be:	f7fd fb07 	bl	8001ad0 <HAL_GetTick>
 80044c2:	4602      	mov	r2, r0
 80044c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c6:	1ad3      	subs	r3, r2, r3
 80044c8:	2b02      	cmp	r3, #2
 80044ca:	d903      	bls.n	80044d4 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 80044cc:	2303      	movs	r3, #3
 80044ce:	e2c4      	b.n	8004a5a <HAL_RCC_OscConfig+0x812>
 80044d0:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80044d4:	4ba4      	ldr	r3, [pc, #656]	; (8004768 <HAL_RCC_OscConfig+0x520>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 0304 	and.w	r3, r3, #4
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d1ee      	bne.n	80044be <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f003 0310 	and.w	r3, r3, #16
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	f000 80a9 	beq.w	8004640 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80044ee:	4b9e      	ldr	r3, [pc, #632]	; (8004768 <HAL_RCC_OscConfig+0x520>)
 80044f0:	691b      	ldr	r3, [r3, #16]
 80044f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80044f6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80044f8:	4b9b      	ldr	r3, [pc, #620]	; (8004768 <HAL_RCC_OscConfig+0x520>)
 80044fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044fc:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80044fe:	69bb      	ldr	r3, [r7, #24]
 8004500:	2b08      	cmp	r3, #8
 8004502:	d007      	beq.n	8004514 <HAL_RCC_OscConfig+0x2cc>
 8004504:	69bb      	ldr	r3, [r7, #24]
 8004506:	2b18      	cmp	r3, #24
 8004508:	d13a      	bne.n	8004580 <HAL_RCC_OscConfig+0x338>
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	f003 0303 	and.w	r3, r3, #3
 8004510:	2b01      	cmp	r3, #1
 8004512:	d135      	bne.n	8004580 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004514:	4b94      	ldr	r3, [pc, #592]	; (8004768 <HAL_RCC_OscConfig+0x520>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800451c:	2b00      	cmp	r3, #0
 800451e:	d005      	beq.n	800452c <HAL_RCC_OscConfig+0x2e4>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	69db      	ldr	r3, [r3, #28]
 8004524:	2b80      	cmp	r3, #128	; 0x80
 8004526:	d001      	beq.n	800452c <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	e296      	b.n	8004a5a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800452c:	f7fd fb00 	bl	8001b30 <HAL_GetREVID>
 8004530:	4603      	mov	r3, r0
 8004532:	f241 0203 	movw	r2, #4099	; 0x1003
 8004536:	4293      	cmp	r3, r2
 8004538:	d817      	bhi.n	800456a <HAL_RCC_OscConfig+0x322>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6a1b      	ldr	r3, [r3, #32]
 800453e:	2b20      	cmp	r3, #32
 8004540:	d108      	bne.n	8004554 <HAL_RCC_OscConfig+0x30c>
 8004542:	4b89      	ldr	r3, [pc, #548]	; (8004768 <HAL_RCC_OscConfig+0x520>)
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800454a:	4a87      	ldr	r2, [pc, #540]	; (8004768 <HAL_RCC_OscConfig+0x520>)
 800454c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004550:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004552:	e075      	b.n	8004640 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004554:	4b84      	ldr	r3, [pc, #528]	; (8004768 <HAL_RCC_OscConfig+0x520>)
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6a1b      	ldr	r3, [r3, #32]
 8004560:	069b      	lsls	r3, r3, #26
 8004562:	4981      	ldr	r1, [pc, #516]	; (8004768 <HAL_RCC_OscConfig+0x520>)
 8004564:	4313      	orrs	r3, r2
 8004566:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004568:	e06a      	b.n	8004640 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800456a:	4b7f      	ldr	r3, [pc, #508]	; (8004768 <HAL_RCC_OscConfig+0x520>)
 800456c:	68db      	ldr	r3, [r3, #12]
 800456e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6a1b      	ldr	r3, [r3, #32]
 8004576:	061b      	lsls	r3, r3, #24
 8004578:	497b      	ldr	r1, [pc, #492]	; (8004768 <HAL_RCC_OscConfig+0x520>)
 800457a:	4313      	orrs	r3, r2
 800457c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800457e:	e05f      	b.n	8004640 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	69db      	ldr	r3, [r3, #28]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d042      	beq.n	800460e <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004588:	4b77      	ldr	r3, [pc, #476]	; (8004768 <HAL_RCC_OscConfig+0x520>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a76      	ldr	r2, [pc, #472]	; (8004768 <HAL_RCC_OscConfig+0x520>)
 800458e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004592:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004594:	f7fd fa9c 	bl	8001ad0 <HAL_GetTick>
 8004598:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800459a:	e008      	b.n	80045ae <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800459c:	f7fd fa98 	bl	8001ad0 <HAL_GetTick>
 80045a0:	4602      	mov	r2, r0
 80045a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a4:	1ad3      	subs	r3, r2, r3
 80045a6:	2b02      	cmp	r3, #2
 80045a8:	d901      	bls.n	80045ae <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80045aa:	2303      	movs	r3, #3
 80045ac:	e255      	b.n	8004a5a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80045ae:	4b6e      	ldr	r3, [pc, #440]	; (8004768 <HAL_RCC_OscConfig+0x520>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d0f0      	beq.n	800459c <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80045ba:	f7fd fab9 	bl	8001b30 <HAL_GetREVID>
 80045be:	4603      	mov	r3, r0
 80045c0:	f241 0203 	movw	r2, #4099	; 0x1003
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d817      	bhi.n	80045f8 <HAL_RCC_OscConfig+0x3b0>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6a1b      	ldr	r3, [r3, #32]
 80045cc:	2b20      	cmp	r3, #32
 80045ce:	d108      	bne.n	80045e2 <HAL_RCC_OscConfig+0x39a>
 80045d0:	4b65      	ldr	r3, [pc, #404]	; (8004768 <HAL_RCC_OscConfig+0x520>)
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80045d8:	4a63      	ldr	r2, [pc, #396]	; (8004768 <HAL_RCC_OscConfig+0x520>)
 80045da:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80045de:	6053      	str	r3, [r2, #4]
 80045e0:	e02e      	b.n	8004640 <HAL_RCC_OscConfig+0x3f8>
 80045e2:	4b61      	ldr	r3, [pc, #388]	; (8004768 <HAL_RCC_OscConfig+0x520>)
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6a1b      	ldr	r3, [r3, #32]
 80045ee:	069b      	lsls	r3, r3, #26
 80045f0:	495d      	ldr	r1, [pc, #372]	; (8004768 <HAL_RCC_OscConfig+0x520>)
 80045f2:	4313      	orrs	r3, r2
 80045f4:	604b      	str	r3, [r1, #4]
 80045f6:	e023      	b.n	8004640 <HAL_RCC_OscConfig+0x3f8>
 80045f8:	4b5b      	ldr	r3, [pc, #364]	; (8004768 <HAL_RCC_OscConfig+0x520>)
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6a1b      	ldr	r3, [r3, #32]
 8004604:	061b      	lsls	r3, r3, #24
 8004606:	4958      	ldr	r1, [pc, #352]	; (8004768 <HAL_RCC_OscConfig+0x520>)
 8004608:	4313      	orrs	r3, r2
 800460a:	60cb      	str	r3, [r1, #12]
 800460c:	e018      	b.n	8004640 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800460e:	4b56      	ldr	r3, [pc, #344]	; (8004768 <HAL_RCC_OscConfig+0x520>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a55      	ldr	r2, [pc, #340]	; (8004768 <HAL_RCC_OscConfig+0x520>)
 8004614:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004618:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800461a:	f7fd fa59 	bl	8001ad0 <HAL_GetTick>
 800461e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004620:	e008      	b.n	8004634 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004622:	f7fd fa55 	bl	8001ad0 <HAL_GetTick>
 8004626:	4602      	mov	r2, r0
 8004628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462a:	1ad3      	subs	r3, r2, r3
 800462c:	2b02      	cmp	r3, #2
 800462e:	d901      	bls.n	8004634 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8004630:	2303      	movs	r3, #3
 8004632:	e212      	b.n	8004a5a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004634:	4b4c      	ldr	r3, [pc, #304]	; (8004768 <HAL_RCC_OscConfig+0x520>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800463c:	2b00      	cmp	r3, #0
 800463e:	d1f0      	bne.n	8004622 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 0308 	and.w	r3, r3, #8
 8004648:	2b00      	cmp	r3, #0
 800464a:	d036      	beq.n	80046ba <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	695b      	ldr	r3, [r3, #20]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d019      	beq.n	8004688 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004654:	4b44      	ldr	r3, [pc, #272]	; (8004768 <HAL_RCC_OscConfig+0x520>)
 8004656:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004658:	4a43      	ldr	r2, [pc, #268]	; (8004768 <HAL_RCC_OscConfig+0x520>)
 800465a:	f043 0301 	orr.w	r3, r3, #1
 800465e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004660:	f7fd fa36 	bl	8001ad0 <HAL_GetTick>
 8004664:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004666:	e008      	b.n	800467a <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004668:	f7fd fa32 	bl	8001ad0 <HAL_GetTick>
 800466c:	4602      	mov	r2, r0
 800466e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004670:	1ad3      	subs	r3, r2, r3
 8004672:	2b02      	cmp	r3, #2
 8004674:	d901      	bls.n	800467a <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8004676:	2303      	movs	r3, #3
 8004678:	e1ef      	b.n	8004a5a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800467a:	4b3b      	ldr	r3, [pc, #236]	; (8004768 <HAL_RCC_OscConfig+0x520>)
 800467c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800467e:	f003 0302 	and.w	r3, r3, #2
 8004682:	2b00      	cmp	r3, #0
 8004684:	d0f0      	beq.n	8004668 <HAL_RCC_OscConfig+0x420>
 8004686:	e018      	b.n	80046ba <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004688:	4b37      	ldr	r3, [pc, #220]	; (8004768 <HAL_RCC_OscConfig+0x520>)
 800468a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800468c:	4a36      	ldr	r2, [pc, #216]	; (8004768 <HAL_RCC_OscConfig+0x520>)
 800468e:	f023 0301 	bic.w	r3, r3, #1
 8004692:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004694:	f7fd fa1c 	bl	8001ad0 <HAL_GetTick>
 8004698:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800469a:	e008      	b.n	80046ae <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800469c:	f7fd fa18 	bl	8001ad0 <HAL_GetTick>
 80046a0:	4602      	mov	r2, r0
 80046a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a4:	1ad3      	subs	r3, r2, r3
 80046a6:	2b02      	cmp	r3, #2
 80046a8:	d901      	bls.n	80046ae <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80046aa:	2303      	movs	r3, #3
 80046ac:	e1d5      	b.n	8004a5a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80046ae:	4b2e      	ldr	r3, [pc, #184]	; (8004768 <HAL_RCC_OscConfig+0x520>)
 80046b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046b2:	f003 0302 	and.w	r3, r3, #2
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d1f0      	bne.n	800469c <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 0320 	and.w	r3, r3, #32
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d036      	beq.n	8004734 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	699b      	ldr	r3, [r3, #24]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d019      	beq.n	8004702 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80046ce:	4b26      	ldr	r3, [pc, #152]	; (8004768 <HAL_RCC_OscConfig+0x520>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a25      	ldr	r2, [pc, #148]	; (8004768 <HAL_RCC_OscConfig+0x520>)
 80046d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80046d8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80046da:	f7fd f9f9 	bl	8001ad0 <HAL_GetTick>
 80046de:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80046e0:	e008      	b.n	80046f4 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80046e2:	f7fd f9f5 	bl	8001ad0 <HAL_GetTick>
 80046e6:	4602      	mov	r2, r0
 80046e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ea:	1ad3      	subs	r3, r2, r3
 80046ec:	2b02      	cmp	r3, #2
 80046ee:	d901      	bls.n	80046f4 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80046f0:	2303      	movs	r3, #3
 80046f2:	e1b2      	b.n	8004a5a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80046f4:	4b1c      	ldr	r3, [pc, #112]	; (8004768 <HAL_RCC_OscConfig+0x520>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d0f0      	beq.n	80046e2 <HAL_RCC_OscConfig+0x49a>
 8004700:	e018      	b.n	8004734 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004702:	4b19      	ldr	r3, [pc, #100]	; (8004768 <HAL_RCC_OscConfig+0x520>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a18      	ldr	r2, [pc, #96]	; (8004768 <HAL_RCC_OscConfig+0x520>)
 8004708:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800470c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800470e:	f7fd f9df 	bl	8001ad0 <HAL_GetTick>
 8004712:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004714:	e008      	b.n	8004728 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004716:	f7fd f9db 	bl	8001ad0 <HAL_GetTick>
 800471a:	4602      	mov	r2, r0
 800471c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800471e:	1ad3      	subs	r3, r2, r3
 8004720:	2b02      	cmp	r3, #2
 8004722:	d901      	bls.n	8004728 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8004724:	2303      	movs	r3, #3
 8004726:	e198      	b.n	8004a5a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004728:	4b0f      	ldr	r3, [pc, #60]	; (8004768 <HAL_RCC_OscConfig+0x520>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004730:	2b00      	cmp	r3, #0
 8004732:	d1f0      	bne.n	8004716 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 0304 	and.w	r3, r3, #4
 800473c:	2b00      	cmp	r3, #0
 800473e:	f000 8085 	beq.w	800484c <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004742:	4b0a      	ldr	r3, [pc, #40]	; (800476c <HAL_RCC_OscConfig+0x524>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a09      	ldr	r2, [pc, #36]	; (800476c <HAL_RCC_OscConfig+0x524>)
 8004748:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800474c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800474e:	f7fd f9bf 	bl	8001ad0 <HAL_GetTick>
 8004752:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004754:	e00c      	b.n	8004770 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004756:	f7fd f9bb 	bl	8001ad0 <HAL_GetTick>
 800475a:	4602      	mov	r2, r0
 800475c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800475e:	1ad3      	subs	r3, r2, r3
 8004760:	2b64      	cmp	r3, #100	; 0x64
 8004762:	d905      	bls.n	8004770 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8004764:	2303      	movs	r3, #3
 8004766:	e178      	b.n	8004a5a <HAL_RCC_OscConfig+0x812>
 8004768:	58024400 	.word	0x58024400
 800476c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004770:	4b96      	ldr	r3, [pc, #600]	; (80049cc <HAL_RCC_OscConfig+0x784>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004778:	2b00      	cmp	r3, #0
 800477a:	d0ec      	beq.n	8004756 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	2b01      	cmp	r3, #1
 8004782:	d106      	bne.n	8004792 <HAL_RCC_OscConfig+0x54a>
 8004784:	4b92      	ldr	r3, [pc, #584]	; (80049d0 <HAL_RCC_OscConfig+0x788>)
 8004786:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004788:	4a91      	ldr	r2, [pc, #580]	; (80049d0 <HAL_RCC_OscConfig+0x788>)
 800478a:	f043 0301 	orr.w	r3, r3, #1
 800478e:	6713      	str	r3, [r2, #112]	; 0x70
 8004790:	e02d      	b.n	80047ee <HAL_RCC_OscConfig+0x5a6>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d10c      	bne.n	80047b4 <HAL_RCC_OscConfig+0x56c>
 800479a:	4b8d      	ldr	r3, [pc, #564]	; (80049d0 <HAL_RCC_OscConfig+0x788>)
 800479c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800479e:	4a8c      	ldr	r2, [pc, #560]	; (80049d0 <HAL_RCC_OscConfig+0x788>)
 80047a0:	f023 0301 	bic.w	r3, r3, #1
 80047a4:	6713      	str	r3, [r2, #112]	; 0x70
 80047a6:	4b8a      	ldr	r3, [pc, #552]	; (80049d0 <HAL_RCC_OscConfig+0x788>)
 80047a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047aa:	4a89      	ldr	r2, [pc, #548]	; (80049d0 <HAL_RCC_OscConfig+0x788>)
 80047ac:	f023 0304 	bic.w	r3, r3, #4
 80047b0:	6713      	str	r3, [r2, #112]	; 0x70
 80047b2:	e01c      	b.n	80047ee <HAL_RCC_OscConfig+0x5a6>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	2b05      	cmp	r3, #5
 80047ba:	d10c      	bne.n	80047d6 <HAL_RCC_OscConfig+0x58e>
 80047bc:	4b84      	ldr	r3, [pc, #528]	; (80049d0 <HAL_RCC_OscConfig+0x788>)
 80047be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047c0:	4a83      	ldr	r2, [pc, #524]	; (80049d0 <HAL_RCC_OscConfig+0x788>)
 80047c2:	f043 0304 	orr.w	r3, r3, #4
 80047c6:	6713      	str	r3, [r2, #112]	; 0x70
 80047c8:	4b81      	ldr	r3, [pc, #516]	; (80049d0 <HAL_RCC_OscConfig+0x788>)
 80047ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047cc:	4a80      	ldr	r2, [pc, #512]	; (80049d0 <HAL_RCC_OscConfig+0x788>)
 80047ce:	f043 0301 	orr.w	r3, r3, #1
 80047d2:	6713      	str	r3, [r2, #112]	; 0x70
 80047d4:	e00b      	b.n	80047ee <HAL_RCC_OscConfig+0x5a6>
 80047d6:	4b7e      	ldr	r3, [pc, #504]	; (80049d0 <HAL_RCC_OscConfig+0x788>)
 80047d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047da:	4a7d      	ldr	r2, [pc, #500]	; (80049d0 <HAL_RCC_OscConfig+0x788>)
 80047dc:	f023 0301 	bic.w	r3, r3, #1
 80047e0:	6713      	str	r3, [r2, #112]	; 0x70
 80047e2:	4b7b      	ldr	r3, [pc, #492]	; (80049d0 <HAL_RCC_OscConfig+0x788>)
 80047e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047e6:	4a7a      	ldr	r2, [pc, #488]	; (80049d0 <HAL_RCC_OscConfig+0x788>)
 80047e8:	f023 0304 	bic.w	r3, r3, #4
 80047ec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d015      	beq.n	8004822 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047f6:	f7fd f96b 	bl	8001ad0 <HAL_GetTick>
 80047fa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80047fc:	e00a      	b.n	8004814 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047fe:	f7fd f967 	bl	8001ad0 <HAL_GetTick>
 8004802:	4602      	mov	r2, r0
 8004804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004806:	1ad3      	subs	r3, r2, r3
 8004808:	f241 3288 	movw	r2, #5000	; 0x1388
 800480c:	4293      	cmp	r3, r2
 800480e:	d901      	bls.n	8004814 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8004810:	2303      	movs	r3, #3
 8004812:	e122      	b.n	8004a5a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004814:	4b6e      	ldr	r3, [pc, #440]	; (80049d0 <HAL_RCC_OscConfig+0x788>)
 8004816:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004818:	f003 0302 	and.w	r3, r3, #2
 800481c:	2b00      	cmp	r3, #0
 800481e:	d0ee      	beq.n	80047fe <HAL_RCC_OscConfig+0x5b6>
 8004820:	e014      	b.n	800484c <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004822:	f7fd f955 	bl	8001ad0 <HAL_GetTick>
 8004826:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004828:	e00a      	b.n	8004840 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800482a:	f7fd f951 	bl	8001ad0 <HAL_GetTick>
 800482e:	4602      	mov	r2, r0
 8004830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004832:	1ad3      	subs	r3, r2, r3
 8004834:	f241 3288 	movw	r2, #5000	; 0x1388
 8004838:	4293      	cmp	r3, r2
 800483a:	d901      	bls.n	8004840 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 800483c:	2303      	movs	r3, #3
 800483e:	e10c      	b.n	8004a5a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004840:	4b63      	ldr	r3, [pc, #396]	; (80049d0 <HAL_RCC_OscConfig+0x788>)
 8004842:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004844:	f003 0302 	and.w	r3, r3, #2
 8004848:	2b00      	cmp	r3, #0
 800484a:	d1ee      	bne.n	800482a <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004850:	2b00      	cmp	r3, #0
 8004852:	f000 8101 	beq.w	8004a58 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004856:	4b5e      	ldr	r3, [pc, #376]	; (80049d0 <HAL_RCC_OscConfig+0x788>)
 8004858:	691b      	ldr	r3, [r3, #16]
 800485a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800485e:	2b18      	cmp	r3, #24
 8004860:	f000 80bc 	beq.w	80049dc <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004868:	2b02      	cmp	r3, #2
 800486a:	f040 8095 	bne.w	8004998 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800486e:	4b58      	ldr	r3, [pc, #352]	; (80049d0 <HAL_RCC_OscConfig+0x788>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a57      	ldr	r2, [pc, #348]	; (80049d0 <HAL_RCC_OscConfig+0x788>)
 8004874:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004878:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800487a:	f7fd f929 	bl	8001ad0 <HAL_GetTick>
 800487e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004880:	e008      	b.n	8004894 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004882:	f7fd f925 	bl	8001ad0 <HAL_GetTick>
 8004886:	4602      	mov	r2, r0
 8004888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488a:	1ad3      	subs	r3, r2, r3
 800488c:	2b02      	cmp	r3, #2
 800488e:	d901      	bls.n	8004894 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8004890:	2303      	movs	r3, #3
 8004892:	e0e2      	b.n	8004a5a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004894:	4b4e      	ldr	r3, [pc, #312]	; (80049d0 <HAL_RCC_OscConfig+0x788>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800489c:	2b00      	cmp	r3, #0
 800489e:	d1f0      	bne.n	8004882 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80048a0:	4b4b      	ldr	r3, [pc, #300]	; (80049d0 <HAL_RCC_OscConfig+0x788>)
 80048a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80048a4:	4b4b      	ldr	r3, [pc, #300]	; (80049d4 <HAL_RCC_OscConfig+0x78c>)
 80048a6:	4013      	ands	r3, r2
 80048a8:	687a      	ldr	r2, [r7, #4]
 80048aa:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80048ac:	687a      	ldr	r2, [r7, #4]
 80048ae:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80048b0:	0112      	lsls	r2, r2, #4
 80048b2:	430a      	orrs	r2, r1
 80048b4:	4946      	ldr	r1, [pc, #280]	; (80049d0 <HAL_RCC_OscConfig+0x788>)
 80048b6:	4313      	orrs	r3, r2
 80048b8:	628b      	str	r3, [r1, #40]	; 0x28
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048be:	3b01      	subs	r3, #1
 80048c0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048c8:	3b01      	subs	r3, #1
 80048ca:	025b      	lsls	r3, r3, #9
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	431a      	orrs	r2, r3
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048d4:	3b01      	subs	r3, #1
 80048d6:	041b      	lsls	r3, r3, #16
 80048d8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80048dc:	431a      	orrs	r2, r3
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048e2:	3b01      	subs	r3, #1
 80048e4:	061b      	lsls	r3, r3, #24
 80048e6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80048ea:	4939      	ldr	r1, [pc, #228]	; (80049d0 <HAL_RCC_OscConfig+0x788>)
 80048ec:	4313      	orrs	r3, r2
 80048ee:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80048f0:	4b37      	ldr	r3, [pc, #220]	; (80049d0 <HAL_RCC_OscConfig+0x788>)
 80048f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048f4:	4a36      	ldr	r2, [pc, #216]	; (80049d0 <HAL_RCC_OscConfig+0x788>)
 80048f6:	f023 0301 	bic.w	r3, r3, #1
 80048fa:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80048fc:	4b34      	ldr	r3, [pc, #208]	; (80049d0 <HAL_RCC_OscConfig+0x788>)
 80048fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004900:	4b35      	ldr	r3, [pc, #212]	; (80049d8 <HAL_RCC_OscConfig+0x790>)
 8004902:	4013      	ands	r3, r2
 8004904:	687a      	ldr	r2, [r7, #4]
 8004906:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004908:	00d2      	lsls	r2, r2, #3
 800490a:	4931      	ldr	r1, [pc, #196]	; (80049d0 <HAL_RCC_OscConfig+0x788>)
 800490c:	4313      	orrs	r3, r2
 800490e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004910:	4b2f      	ldr	r3, [pc, #188]	; (80049d0 <HAL_RCC_OscConfig+0x788>)
 8004912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004914:	f023 020c 	bic.w	r2, r3, #12
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800491c:	492c      	ldr	r1, [pc, #176]	; (80049d0 <HAL_RCC_OscConfig+0x788>)
 800491e:	4313      	orrs	r3, r2
 8004920:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004922:	4b2b      	ldr	r3, [pc, #172]	; (80049d0 <HAL_RCC_OscConfig+0x788>)
 8004924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004926:	f023 0202 	bic.w	r2, r3, #2
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800492e:	4928      	ldr	r1, [pc, #160]	; (80049d0 <HAL_RCC_OscConfig+0x788>)
 8004930:	4313      	orrs	r3, r2
 8004932:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004934:	4b26      	ldr	r3, [pc, #152]	; (80049d0 <HAL_RCC_OscConfig+0x788>)
 8004936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004938:	4a25      	ldr	r2, [pc, #148]	; (80049d0 <HAL_RCC_OscConfig+0x788>)
 800493a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800493e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004940:	4b23      	ldr	r3, [pc, #140]	; (80049d0 <HAL_RCC_OscConfig+0x788>)
 8004942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004944:	4a22      	ldr	r2, [pc, #136]	; (80049d0 <HAL_RCC_OscConfig+0x788>)
 8004946:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800494a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800494c:	4b20      	ldr	r3, [pc, #128]	; (80049d0 <HAL_RCC_OscConfig+0x788>)
 800494e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004950:	4a1f      	ldr	r2, [pc, #124]	; (80049d0 <HAL_RCC_OscConfig+0x788>)
 8004952:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004956:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8004958:	4b1d      	ldr	r3, [pc, #116]	; (80049d0 <HAL_RCC_OscConfig+0x788>)
 800495a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800495c:	4a1c      	ldr	r2, [pc, #112]	; (80049d0 <HAL_RCC_OscConfig+0x788>)
 800495e:	f043 0301 	orr.w	r3, r3, #1
 8004962:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004964:	4b1a      	ldr	r3, [pc, #104]	; (80049d0 <HAL_RCC_OscConfig+0x788>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a19      	ldr	r2, [pc, #100]	; (80049d0 <HAL_RCC_OscConfig+0x788>)
 800496a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800496e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004970:	f7fd f8ae 	bl	8001ad0 <HAL_GetTick>
 8004974:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004976:	e008      	b.n	800498a <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004978:	f7fd f8aa 	bl	8001ad0 <HAL_GetTick>
 800497c:	4602      	mov	r2, r0
 800497e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004980:	1ad3      	subs	r3, r2, r3
 8004982:	2b02      	cmp	r3, #2
 8004984:	d901      	bls.n	800498a <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8004986:	2303      	movs	r3, #3
 8004988:	e067      	b.n	8004a5a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800498a:	4b11      	ldr	r3, [pc, #68]	; (80049d0 <HAL_RCC_OscConfig+0x788>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004992:	2b00      	cmp	r3, #0
 8004994:	d0f0      	beq.n	8004978 <HAL_RCC_OscConfig+0x730>
 8004996:	e05f      	b.n	8004a58 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004998:	4b0d      	ldr	r3, [pc, #52]	; (80049d0 <HAL_RCC_OscConfig+0x788>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a0c      	ldr	r2, [pc, #48]	; (80049d0 <HAL_RCC_OscConfig+0x788>)
 800499e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80049a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049a4:	f7fd f894 	bl	8001ad0 <HAL_GetTick>
 80049a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80049aa:	e008      	b.n	80049be <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049ac:	f7fd f890 	bl	8001ad0 <HAL_GetTick>
 80049b0:	4602      	mov	r2, r0
 80049b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b4:	1ad3      	subs	r3, r2, r3
 80049b6:	2b02      	cmp	r3, #2
 80049b8:	d901      	bls.n	80049be <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 80049ba:	2303      	movs	r3, #3
 80049bc:	e04d      	b.n	8004a5a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80049be:	4b04      	ldr	r3, [pc, #16]	; (80049d0 <HAL_RCC_OscConfig+0x788>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d1f0      	bne.n	80049ac <HAL_RCC_OscConfig+0x764>
 80049ca:	e045      	b.n	8004a58 <HAL_RCC_OscConfig+0x810>
 80049cc:	58024800 	.word	0x58024800
 80049d0:	58024400 	.word	0x58024400
 80049d4:	fffffc0c 	.word	0xfffffc0c
 80049d8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80049dc:	4b21      	ldr	r3, [pc, #132]	; (8004a64 <HAL_RCC_OscConfig+0x81c>)
 80049de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049e0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80049e2:	4b20      	ldr	r3, [pc, #128]	; (8004a64 <HAL_RCC_OscConfig+0x81c>)
 80049e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049e6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d031      	beq.n	8004a54 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	f003 0203 	and.w	r2, r3, #3
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d12a      	bne.n	8004a54 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	091b      	lsrs	r3, r3, #4
 8004a02:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	d122      	bne.n	8004a54 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a18:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004a1a:	429a      	cmp	r2, r3
 8004a1c:	d11a      	bne.n	8004a54 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	0a5b      	lsrs	r3, r3, #9
 8004a22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a2a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d111      	bne.n	8004a54 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	0c1b      	lsrs	r3, r3, #16
 8004a34:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a3c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	d108      	bne.n	8004a54 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	0e1b      	lsrs	r3, r3, #24
 8004a46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a4e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d001      	beq.n	8004a58 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	e000      	b.n	8004a5a <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8004a58:	2300      	movs	r3, #0
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3730      	adds	r7, #48	; 0x30
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}
 8004a62:	bf00      	nop
 8004a64:	58024400 	.word	0x58024400

08004a68 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b086      	sub	sp, #24
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
 8004a70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d101      	bne.n	8004a7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	e19c      	b.n	8004db6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a7c:	4b8a      	ldr	r3, [pc, #552]	; (8004ca8 <HAL_RCC_ClockConfig+0x240>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f003 030f 	and.w	r3, r3, #15
 8004a84:	683a      	ldr	r2, [r7, #0]
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d910      	bls.n	8004aac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a8a:	4b87      	ldr	r3, [pc, #540]	; (8004ca8 <HAL_RCC_ClockConfig+0x240>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f023 020f 	bic.w	r2, r3, #15
 8004a92:	4985      	ldr	r1, [pc, #532]	; (8004ca8 <HAL_RCC_ClockConfig+0x240>)
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	4313      	orrs	r3, r2
 8004a98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a9a:	4b83      	ldr	r3, [pc, #524]	; (8004ca8 <HAL_RCC_ClockConfig+0x240>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f003 030f 	and.w	r3, r3, #15
 8004aa2:	683a      	ldr	r2, [r7, #0]
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d001      	beq.n	8004aac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	e184      	b.n	8004db6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f003 0304 	and.w	r3, r3, #4
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d010      	beq.n	8004ada <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	691a      	ldr	r2, [r3, #16]
 8004abc:	4b7b      	ldr	r3, [pc, #492]	; (8004cac <HAL_RCC_ClockConfig+0x244>)
 8004abe:	699b      	ldr	r3, [r3, #24]
 8004ac0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	d908      	bls.n	8004ada <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004ac8:	4b78      	ldr	r3, [pc, #480]	; (8004cac <HAL_RCC_ClockConfig+0x244>)
 8004aca:	699b      	ldr	r3, [r3, #24]
 8004acc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	691b      	ldr	r3, [r3, #16]
 8004ad4:	4975      	ldr	r1, [pc, #468]	; (8004cac <HAL_RCC_ClockConfig+0x244>)
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 0308 	and.w	r3, r3, #8
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d010      	beq.n	8004b08 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	695a      	ldr	r2, [r3, #20]
 8004aea:	4b70      	ldr	r3, [pc, #448]	; (8004cac <HAL_RCC_ClockConfig+0x244>)
 8004aec:	69db      	ldr	r3, [r3, #28]
 8004aee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004af2:	429a      	cmp	r2, r3
 8004af4:	d908      	bls.n	8004b08 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004af6:	4b6d      	ldr	r3, [pc, #436]	; (8004cac <HAL_RCC_ClockConfig+0x244>)
 8004af8:	69db      	ldr	r3, [r3, #28]
 8004afa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	695b      	ldr	r3, [r3, #20]
 8004b02:	496a      	ldr	r1, [pc, #424]	; (8004cac <HAL_RCC_ClockConfig+0x244>)
 8004b04:	4313      	orrs	r3, r2
 8004b06:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f003 0310 	and.w	r3, r3, #16
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d010      	beq.n	8004b36 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	699a      	ldr	r2, [r3, #24]
 8004b18:	4b64      	ldr	r3, [pc, #400]	; (8004cac <HAL_RCC_ClockConfig+0x244>)
 8004b1a:	69db      	ldr	r3, [r3, #28]
 8004b1c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d908      	bls.n	8004b36 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004b24:	4b61      	ldr	r3, [pc, #388]	; (8004cac <HAL_RCC_ClockConfig+0x244>)
 8004b26:	69db      	ldr	r3, [r3, #28]
 8004b28:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	699b      	ldr	r3, [r3, #24]
 8004b30:	495e      	ldr	r1, [pc, #376]	; (8004cac <HAL_RCC_ClockConfig+0x244>)
 8004b32:	4313      	orrs	r3, r2
 8004b34:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f003 0320 	and.w	r3, r3, #32
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d010      	beq.n	8004b64 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	69da      	ldr	r2, [r3, #28]
 8004b46:	4b59      	ldr	r3, [pc, #356]	; (8004cac <HAL_RCC_ClockConfig+0x244>)
 8004b48:	6a1b      	ldr	r3, [r3, #32]
 8004b4a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004b4e:	429a      	cmp	r2, r3
 8004b50:	d908      	bls.n	8004b64 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004b52:	4b56      	ldr	r3, [pc, #344]	; (8004cac <HAL_RCC_ClockConfig+0x244>)
 8004b54:	6a1b      	ldr	r3, [r3, #32]
 8004b56:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	69db      	ldr	r3, [r3, #28]
 8004b5e:	4953      	ldr	r1, [pc, #332]	; (8004cac <HAL_RCC_ClockConfig+0x244>)
 8004b60:	4313      	orrs	r3, r2
 8004b62:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f003 0302 	and.w	r3, r3, #2
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d010      	beq.n	8004b92 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	68da      	ldr	r2, [r3, #12]
 8004b74:	4b4d      	ldr	r3, [pc, #308]	; (8004cac <HAL_RCC_ClockConfig+0x244>)
 8004b76:	699b      	ldr	r3, [r3, #24]
 8004b78:	f003 030f 	and.w	r3, r3, #15
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d908      	bls.n	8004b92 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b80:	4b4a      	ldr	r3, [pc, #296]	; (8004cac <HAL_RCC_ClockConfig+0x244>)
 8004b82:	699b      	ldr	r3, [r3, #24]
 8004b84:	f023 020f 	bic.w	r2, r3, #15
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	68db      	ldr	r3, [r3, #12]
 8004b8c:	4947      	ldr	r1, [pc, #284]	; (8004cac <HAL_RCC_ClockConfig+0x244>)
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f003 0301 	and.w	r3, r3, #1
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d055      	beq.n	8004c4a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004b9e:	4b43      	ldr	r3, [pc, #268]	; (8004cac <HAL_RCC_ClockConfig+0x244>)
 8004ba0:	699b      	ldr	r3, [r3, #24]
 8004ba2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	4940      	ldr	r1, [pc, #256]	; (8004cac <HAL_RCC_ClockConfig+0x244>)
 8004bac:	4313      	orrs	r3, r2
 8004bae:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	2b02      	cmp	r3, #2
 8004bb6:	d107      	bne.n	8004bc8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004bb8:	4b3c      	ldr	r3, [pc, #240]	; (8004cac <HAL_RCC_ClockConfig+0x244>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d121      	bne.n	8004c08 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	e0f6      	b.n	8004db6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	2b03      	cmp	r3, #3
 8004bce:	d107      	bne.n	8004be0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004bd0:	4b36      	ldr	r3, [pc, #216]	; (8004cac <HAL_RCC_ClockConfig+0x244>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d115      	bne.n	8004c08 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e0ea      	b.n	8004db6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d107      	bne.n	8004bf8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004be8:	4b30      	ldr	r3, [pc, #192]	; (8004cac <HAL_RCC_ClockConfig+0x244>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d109      	bne.n	8004c08 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	e0de      	b.n	8004db6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004bf8:	4b2c      	ldr	r3, [pc, #176]	; (8004cac <HAL_RCC_ClockConfig+0x244>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f003 0304 	and.w	r3, r3, #4
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d101      	bne.n	8004c08 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	e0d6      	b.n	8004db6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004c08:	4b28      	ldr	r3, [pc, #160]	; (8004cac <HAL_RCC_ClockConfig+0x244>)
 8004c0a:	691b      	ldr	r3, [r3, #16]
 8004c0c:	f023 0207 	bic.w	r2, r3, #7
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	4925      	ldr	r1, [pc, #148]	; (8004cac <HAL_RCC_ClockConfig+0x244>)
 8004c16:	4313      	orrs	r3, r2
 8004c18:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c1a:	f7fc ff59 	bl	8001ad0 <HAL_GetTick>
 8004c1e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c20:	e00a      	b.n	8004c38 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c22:	f7fc ff55 	bl	8001ad0 <HAL_GetTick>
 8004c26:	4602      	mov	r2, r0
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	1ad3      	subs	r3, r2, r3
 8004c2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d901      	bls.n	8004c38 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004c34:	2303      	movs	r3, #3
 8004c36:	e0be      	b.n	8004db6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c38:	4b1c      	ldr	r3, [pc, #112]	; (8004cac <HAL_RCC_ClockConfig+0x244>)
 8004c3a:	691b      	ldr	r3, [r3, #16]
 8004c3c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	00db      	lsls	r3, r3, #3
 8004c46:	429a      	cmp	r2, r3
 8004c48:	d1eb      	bne.n	8004c22 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f003 0302 	and.w	r3, r3, #2
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d010      	beq.n	8004c78 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	68da      	ldr	r2, [r3, #12]
 8004c5a:	4b14      	ldr	r3, [pc, #80]	; (8004cac <HAL_RCC_ClockConfig+0x244>)
 8004c5c:	699b      	ldr	r3, [r3, #24]
 8004c5e:	f003 030f 	and.w	r3, r3, #15
 8004c62:	429a      	cmp	r2, r3
 8004c64:	d208      	bcs.n	8004c78 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c66:	4b11      	ldr	r3, [pc, #68]	; (8004cac <HAL_RCC_ClockConfig+0x244>)
 8004c68:	699b      	ldr	r3, [r3, #24]
 8004c6a:	f023 020f 	bic.w	r2, r3, #15
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	68db      	ldr	r3, [r3, #12]
 8004c72:	490e      	ldr	r1, [pc, #56]	; (8004cac <HAL_RCC_ClockConfig+0x244>)
 8004c74:	4313      	orrs	r3, r2
 8004c76:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c78:	4b0b      	ldr	r3, [pc, #44]	; (8004ca8 <HAL_RCC_ClockConfig+0x240>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f003 030f 	and.w	r3, r3, #15
 8004c80:	683a      	ldr	r2, [r7, #0]
 8004c82:	429a      	cmp	r2, r3
 8004c84:	d214      	bcs.n	8004cb0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c86:	4b08      	ldr	r3, [pc, #32]	; (8004ca8 <HAL_RCC_ClockConfig+0x240>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f023 020f 	bic.w	r2, r3, #15
 8004c8e:	4906      	ldr	r1, [pc, #24]	; (8004ca8 <HAL_RCC_ClockConfig+0x240>)
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	4313      	orrs	r3, r2
 8004c94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c96:	4b04      	ldr	r3, [pc, #16]	; (8004ca8 <HAL_RCC_ClockConfig+0x240>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f003 030f 	and.w	r3, r3, #15
 8004c9e:	683a      	ldr	r2, [r7, #0]
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d005      	beq.n	8004cb0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	e086      	b.n	8004db6 <HAL_RCC_ClockConfig+0x34e>
 8004ca8:	52002000 	.word	0x52002000
 8004cac:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f003 0304 	and.w	r3, r3, #4
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d010      	beq.n	8004cde <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	691a      	ldr	r2, [r3, #16]
 8004cc0:	4b3f      	ldr	r3, [pc, #252]	; (8004dc0 <HAL_RCC_ClockConfig+0x358>)
 8004cc2:	699b      	ldr	r3, [r3, #24]
 8004cc4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	d208      	bcs.n	8004cde <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004ccc:	4b3c      	ldr	r3, [pc, #240]	; (8004dc0 <HAL_RCC_ClockConfig+0x358>)
 8004cce:	699b      	ldr	r3, [r3, #24]
 8004cd0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	691b      	ldr	r3, [r3, #16]
 8004cd8:	4939      	ldr	r1, [pc, #228]	; (8004dc0 <HAL_RCC_ClockConfig+0x358>)
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f003 0308 	and.w	r3, r3, #8
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d010      	beq.n	8004d0c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	695a      	ldr	r2, [r3, #20]
 8004cee:	4b34      	ldr	r3, [pc, #208]	; (8004dc0 <HAL_RCC_ClockConfig+0x358>)
 8004cf0:	69db      	ldr	r3, [r3, #28]
 8004cf2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	d208      	bcs.n	8004d0c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004cfa:	4b31      	ldr	r3, [pc, #196]	; (8004dc0 <HAL_RCC_ClockConfig+0x358>)
 8004cfc:	69db      	ldr	r3, [r3, #28]
 8004cfe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	695b      	ldr	r3, [r3, #20]
 8004d06:	492e      	ldr	r1, [pc, #184]	; (8004dc0 <HAL_RCC_ClockConfig+0x358>)
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f003 0310 	and.w	r3, r3, #16
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d010      	beq.n	8004d3a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	699a      	ldr	r2, [r3, #24]
 8004d1c:	4b28      	ldr	r3, [pc, #160]	; (8004dc0 <HAL_RCC_ClockConfig+0x358>)
 8004d1e:	69db      	ldr	r3, [r3, #28]
 8004d20:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004d24:	429a      	cmp	r2, r3
 8004d26:	d208      	bcs.n	8004d3a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004d28:	4b25      	ldr	r3, [pc, #148]	; (8004dc0 <HAL_RCC_ClockConfig+0x358>)
 8004d2a:	69db      	ldr	r3, [r3, #28]
 8004d2c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	699b      	ldr	r3, [r3, #24]
 8004d34:	4922      	ldr	r1, [pc, #136]	; (8004dc0 <HAL_RCC_ClockConfig+0x358>)
 8004d36:	4313      	orrs	r3, r2
 8004d38:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f003 0320 	and.w	r3, r3, #32
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d010      	beq.n	8004d68 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	69da      	ldr	r2, [r3, #28]
 8004d4a:	4b1d      	ldr	r3, [pc, #116]	; (8004dc0 <HAL_RCC_ClockConfig+0x358>)
 8004d4c:	6a1b      	ldr	r3, [r3, #32]
 8004d4e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004d52:	429a      	cmp	r2, r3
 8004d54:	d208      	bcs.n	8004d68 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004d56:	4b1a      	ldr	r3, [pc, #104]	; (8004dc0 <HAL_RCC_ClockConfig+0x358>)
 8004d58:	6a1b      	ldr	r3, [r3, #32]
 8004d5a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	69db      	ldr	r3, [r3, #28]
 8004d62:	4917      	ldr	r1, [pc, #92]	; (8004dc0 <HAL_RCC_ClockConfig+0x358>)
 8004d64:	4313      	orrs	r3, r2
 8004d66:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004d68:	f000 f834 	bl	8004dd4 <HAL_RCC_GetSysClockFreq>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	4b14      	ldr	r3, [pc, #80]	; (8004dc0 <HAL_RCC_ClockConfig+0x358>)
 8004d70:	699b      	ldr	r3, [r3, #24]
 8004d72:	0a1b      	lsrs	r3, r3, #8
 8004d74:	f003 030f 	and.w	r3, r3, #15
 8004d78:	4912      	ldr	r1, [pc, #72]	; (8004dc4 <HAL_RCC_ClockConfig+0x35c>)
 8004d7a:	5ccb      	ldrb	r3, [r1, r3]
 8004d7c:	f003 031f 	and.w	r3, r3, #31
 8004d80:	fa22 f303 	lsr.w	r3, r2, r3
 8004d84:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004d86:	4b0e      	ldr	r3, [pc, #56]	; (8004dc0 <HAL_RCC_ClockConfig+0x358>)
 8004d88:	699b      	ldr	r3, [r3, #24]
 8004d8a:	f003 030f 	and.w	r3, r3, #15
 8004d8e:	4a0d      	ldr	r2, [pc, #52]	; (8004dc4 <HAL_RCC_ClockConfig+0x35c>)
 8004d90:	5cd3      	ldrb	r3, [r2, r3]
 8004d92:	f003 031f 	and.w	r3, r3, #31
 8004d96:	693a      	ldr	r2, [r7, #16]
 8004d98:	fa22 f303 	lsr.w	r3, r2, r3
 8004d9c:	4a0a      	ldr	r2, [pc, #40]	; (8004dc8 <HAL_RCC_ClockConfig+0x360>)
 8004d9e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004da0:	4a0a      	ldr	r2, [pc, #40]	; (8004dcc <HAL_RCC_ClockConfig+0x364>)
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8004da6:	4b0a      	ldr	r3, [pc, #40]	; (8004dd0 <HAL_RCC_ClockConfig+0x368>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4618      	mov	r0, r3
 8004dac:	f7fc fe46 	bl	8001a3c <HAL_InitTick>
 8004db0:	4603      	mov	r3, r0
 8004db2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004db4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3718      	adds	r7, #24
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}
 8004dbe:	bf00      	nop
 8004dc0:	58024400 	.word	0x58024400
 8004dc4:	08018c58 	.word	0x08018c58
 8004dc8:	24000014 	.word	0x24000014
 8004dcc:	24000010 	.word	0x24000010
 8004dd0:	24000018 	.word	0x24000018

08004dd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b089      	sub	sp, #36	; 0x24
 8004dd8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004dda:	4bb3      	ldr	r3, [pc, #716]	; (80050a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ddc:	691b      	ldr	r3, [r3, #16]
 8004dde:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004de2:	2b18      	cmp	r3, #24
 8004de4:	f200 8155 	bhi.w	8005092 <HAL_RCC_GetSysClockFreq+0x2be>
 8004de8:	a201      	add	r2, pc, #4	; (adr r2, 8004df0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dee:	bf00      	nop
 8004df0:	08004e55 	.word	0x08004e55
 8004df4:	08005093 	.word	0x08005093
 8004df8:	08005093 	.word	0x08005093
 8004dfc:	08005093 	.word	0x08005093
 8004e00:	08005093 	.word	0x08005093
 8004e04:	08005093 	.word	0x08005093
 8004e08:	08005093 	.word	0x08005093
 8004e0c:	08005093 	.word	0x08005093
 8004e10:	08004e7b 	.word	0x08004e7b
 8004e14:	08005093 	.word	0x08005093
 8004e18:	08005093 	.word	0x08005093
 8004e1c:	08005093 	.word	0x08005093
 8004e20:	08005093 	.word	0x08005093
 8004e24:	08005093 	.word	0x08005093
 8004e28:	08005093 	.word	0x08005093
 8004e2c:	08005093 	.word	0x08005093
 8004e30:	08004e81 	.word	0x08004e81
 8004e34:	08005093 	.word	0x08005093
 8004e38:	08005093 	.word	0x08005093
 8004e3c:	08005093 	.word	0x08005093
 8004e40:	08005093 	.word	0x08005093
 8004e44:	08005093 	.word	0x08005093
 8004e48:	08005093 	.word	0x08005093
 8004e4c:	08005093 	.word	0x08005093
 8004e50:	08004e87 	.word	0x08004e87
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004e54:	4b94      	ldr	r3, [pc, #592]	; (80050a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f003 0320 	and.w	r3, r3, #32
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d009      	beq.n	8004e74 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004e60:	4b91      	ldr	r3, [pc, #580]	; (80050a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	08db      	lsrs	r3, r3, #3
 8004e66:	f003 0303 	and.w	r3, r3, #3
 8004e6a:	4a90      	ldr	r2, [pc, #576]	; (80050ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004e6c:	fa22 f303 	lsr.w	r3, r2, r3
 8004e70:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8004e72:	e111      	b.n	8005098 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004e74:	4b8d      	ldr	r3, [pc, #564]	; (80050ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004e76:	61bb      	str	r3, [r7, #24]
    break;
 8004e78:	e10e      	b.n	8005098 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004e7a:	4b8d      	ldr	r3, [pc, #564]	; (80050b0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004e7c:	61bb      	str	r3, [r7, #24]
    break;
 8004e7e:	e10b      	b.n	8005098 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004e80:	4b8c      	ldr	r3, [pc, #560]	; (80050b4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004e82:	61bb      	str	r3, [r7, #24]
    break;
 8004e84:	e108      	b.n	8005098 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004e86:	4b88      	ldr	r3, [pc, #544]	; (80050a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e8a:	f003 0303 	and.w	r3, r3, #3
 8004e8e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004e90:	4b85      	ldr	r3, [pc, #532]	; (80050a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e94:	091b      	lsrs	r3, r3, #4
 8004e96:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e9a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004e9c:	4b82      	ldr	r3, [pc, #520]	; (80050a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ea0:	f003 0301 	and.w	r3, r3, #1
 8004ea4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004ea6:	4b80      	ldr	r3, [pc, #512]	; (80050a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ea8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eaa:	08db      	lsrs	r3, r3, #3
 8004eac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004eb0:	68fa      	ldr	r2, [r7, #12]
 8004eb2:	fb02 f303 	mul.w	r3, r2, r3
 8004eb6:	ee07 3a90 	vmov	s15, r3
 8004eba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ebe:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	f000 80e1 	beq.w	800508c <HAL_RCC_GetSysClockFreq+0x2b8>
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	2b02      	cmp	r3, #2
 8004ece:	f000 8083 	beq.w	8004fd8 <HAL_RCC_GetSysClockFreq+0x204>
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	2b02      	cmp	r3, #2
 8004ed6:	f200 80a1 	bhi.w	800501c <HAL_RCC_GetSysClockFreq+0x248>
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d003      	beq.n	8004ee8 <HAL_RCC_GetSysClockFreq+0x114>
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d056      	beq.n	8004f94 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004ee6:	e099      	b.n	800501c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004ee8:	4b6f      	ldr	r3, [pc, #444]	; (80050a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 0320 	and.w	r3, r3, #32
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d02d      	beq.n	8004f50 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004ef4:	4b6c      	ldr	r3, [pc, #432]	; (80050a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	08db      	lsrs	r3, r3, #3
 8004efa:	f003 0303 	and.w	r3, r3, #3
 8004efe:	4a6b      	ldr	r2, [pc, #428]	; (80050ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004f00:	fa22 f303 	lsr.w	r3, r2, r3
 8004f04:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	ee07 3a90 	vmov	s15, r3
 8004f0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	ee07 3a90 	vmov	s15, r3
 8004f16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f1e:	4b62      	ldr	r3, [pc, #392]	; (80050a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f26:	ee07 3a90 	vmov	s15, r3
 8004f2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f2e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004f32:	eddf 5a61 	vldr	s11, [pc, #388]	; 80050b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004f36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f4a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004f4e:	e087      	b.n	8005060 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	ee07 3a90 	vmov	s15, r3
 8004f56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f5a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80050bc <HAL_RCC_GetSysClockFreq+0x2e8>
 8004f5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f62:	4b51      	ldr	r3, [pc, #324]	; (80050a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f6a:	ee07 3a90 	vmov	s15, r3
 8004f6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f72:	ed97 6a02 	vldr	s12, [r7, #8]
 8004f76:	eddf 5a50 	vldr	s11, [pc, #320]	; 80050b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004f7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f92:	e065      	b.n	8005060 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	ee07 3a90 	vmov	s15, r3
 8004f9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f9e:	eddf 6a48 	vldr	s13, [pc, #288]	; 80050c0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004fa2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fa6:	4b40      	ldr	r3, [pc, #256]	; (80050a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004faa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fae:	ee07 3a90 	vmov	s15, r3
 8004fb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fb6:	ed97 6a02 	vldr	s12, [r7, #8]
 8004fba:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80050b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004fbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004fca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fd2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004fd6:	e043      	b.n	8005060 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	ee07 3a90 	vmov	s15, r3
 8004fde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fe2:	eddf 6a38 	vldr	s13, [pc, #224]	; 80050c4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004fe6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fea:	4b2f      	ldr	r3, [pc, #188]	; (80050a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ff2:	ee07 3a90 	vmov	s15, r3
 8004ff6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ffa:	ed97 6a02 	vldr	s12, [r7, #8]
 8004ffe:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80050b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005002:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005006:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800500a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800500e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005012:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005016:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800501a:	e021      	b.n	8005060 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	ee07 3a90 	vmov	s15, r3
 8005022:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005026:	eddf 6a26 	vldr	s13, [pc, #152]	; 80050c0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800502a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800502e:	4b1e      	ldr	r3, [pc, #120]	; (80050a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005032:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005036:	ee07 3a90 	vmov	s15, r3
 800503a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800503e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005042:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80050b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005046:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800504a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800504e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005052:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005056:	ee67 7a27 	vmul.f32	s15, s14, s15
 800505a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800505e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8005060:	4b11      	ldr	r3, [pc, #68]	; (80050a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005064:	0a5b      	lsrs	r3, r3, #9
 8005066:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800506a:	3301      	adds	r3, #1
 800506c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	ee07 3a90 	vmov	s15, r3
 8005074:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005078:	edd7 6a07 	vldr	s13, [r7, #28]
 800507c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005080:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005084:	ee17 3a90 	vmov	r3, s15
 8005088:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800508a:	e005      	b.n	8005098 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800508c:	2300      	movs	r3, #0
 800508e:	61bb      	str	r3, [r7, #24]
    break;
 8005090:	e002      	b.n	8005098 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8005092:	4b07      	ldr	r3, [pc, #28]	; (80050b0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005094:	61bb      	str	r3, [r7, #24]
    break;
 8005096:	bf00      	nop
  }

  return sysclockfreq;
 8005098:	69bb      	ldr	r3, [r7, #24]
}
 800509a:	4618      	mov	r0, r3
 800509c:	3724      	adds	r7, #36	; 0x24
 800509e:	46bd      	mov	sp, r7
 80050a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a4:	4770      	bx	lr
 80050a6:	bf00      	nop
 80050a8:	58024400 	.word	0x58024400
 80050ac:	03d09000 	.word	0x03d09000
 80050b0:	003d0900 	.word	0x003d0900
 80050b4:	007a1200 	.word	0x007a1200
 80050b8:	46000000 	.word	0x46000000
 80050bc:	4c742400 	.word	0x4c742400
 80050c0:	4a742400 	.word	0x4a742400
 80050c4:	4af42400 	.word	0x4af42400

080050c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b082      	sub	sp, #8
 80050cc:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80050ce:	f7ff fe81 	bl	8004dd4 <HAL_RCC_GetSysClockFreq>
 80050d2:	4602      	mov	r2, r0
 80050d4:	4b10      	ldr	r3, [pc, #64]	; (8005118 <HAL_RCC_GetHCLKFreq+0x50>)
 80050d6:	699b      	ldr	r3, [r3, #24]
 80050d8:	0a1b      	lsrs	r3, r3, #8
 80050da:	f003 030f 	and.w	r3, r3, #15
 80050de:	490f      	ldr	r1, [pc, #60]	; (800511c <HAL_RCC_GetHCLKFreq+0x54>)
 80050e0:	5ccb      	ldrb	r3, [r1, r3]
 80050e2:	f003 031f 	and.w	r3, r3, #31
 80050e6:	fa22 f303 	lsr.w	r3, r2, r3
 80050ea:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80050ec:	4b0a      	ldr	r3, [pc, #40]	; (8005118 <HAL_RCC_GetHCLKFreq+0x50>)
 80050ee:	699b      	ldr	r3, [r3, #24]
 80050f0:	f003 030f 	and.w	r3, r3, #15
 80050f4:	4a09      	ldr	r2, [pc, #36]	; (800511c <HAL_RCC_GetHCLKFreq+0x54>)
 80050f6:	5cd3      	ldrb	r3, [r2, r3]
 80050f8:	f003 031f 	and.w	r3, r3, #31
 80050fc:	687a      	ldr	r2, [r7, #4]
 80050fe:	fa22 f303 	lsr.w	r3, r2, r3
 8005102:	4a07      	ldr	r2, [pc, #28]	; (8005120 <HAL_RCC_GetHCLKFreq+0x58>)
 8005104:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005106:	4a07      	ldr	r2, [pc, #28]	; (8005124 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800510c:	4b04      	ldr	r3, [pc, #16]	; (8005120 <HAL_RCC_GetHCLKFreq+0x58>)
 800510e:	681b      	ldr	r3, [r3, #0]
}
 8005110:	4618      	mov	r0, r3
 8005112:	3708      	adds	r7, #8
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}
 8005118:	58024400 	.word	0x58024400
 800511c:	08018c58 	.word	0x08018c58
 8005120:	24000014 	.word	0x24000014
 8005124:	24000010 	.word	0x24000010

08005128 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800512c:	f7ff ffcc 	bl	80050c8 <HAL_RCC_GetHCLKFreq>
 8005130:	4602      	mov	r2, r0
 8005132:	4b06      	ldr	r3, [pc, #24]	; (800514c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005134:	69db      	ldr	r3, [r3, #28]
 8005136:	091b      	lsrs	r3, r3, #4
 8005138:	f003 0307 	and.w	r3, r3, #7
 800513c:	4904      	ldr	r1, [pc, #16]	; (8005150 <HAL_RCC_GetPCLK1Freq+0x28>)
 800513e:	5ccb      	ldrb	r3, [r1, r3]
 8005140:	f003 031f 	and.w	r3, r3, #31
 8005144:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005148:	4618      	mov	r0, r3
 800514a:	bd80      	pop	{r7, pc}
 800514c:	58024400 	.word	0x58024400
 8005150:	08018c58 	.word	0x08018c58

08005154 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005158:	f7ff ffb6 	bl	80050c8 <HAL_RCC_GetHCLKFreq>
 800515c:	4602      	mov	r2, r0
 800515e:	4b06      	ldr	r3, [pc, #24]	; (8005178 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005160:	69db      	ldr	r3, [r3, #28]
 8005162:	0a1b      	lsrs	r3, r3, #8
 8005164:	f003 0307 	and.w	r3, r3, #7
 8005168:	4904      	ldr	r1, [pc, #16]	; (800517c <HAL_RCC_GetPCLK2Freq+0x28>)
 800516a:	5ccb      	ldrb	r3, [r1, r3]
 800516c:	f003 031f 	and.w	r3, r3, #31
 8005170:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005174:	4618      	mov	r0, r3
 8005176:	bd80      	pop	{r7, pc}
 8005178:	58024400 	.word	0x58024400
 800517c:	08018c58 	.word	0x08018c58

08005180 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b086      	sub	sp, #24
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005188:	2300      	movs	r3, #0
 800518a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800518c:	2300      	movs	r3, #0
 800518e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005198:	2b00      	cmp	r3, #0
 800519a:	d03f      	beq.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051a0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80051a4:	d02a      	beq.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80051a6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80051aa:	d824      	bhi.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80051ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80051b0:	d018      	beq.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80051b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80051b6:	d81e      	bhi.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d003      	beq.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80051bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051c0:	d007      	beq.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80051c2:	e018      	b.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051c4:	4bab      	ldr	r3, [pc, #684]	; (8005474 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80051c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051c8:	4aaa      	ldr	r2, [pc, #680]	; (8005474 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80051ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051ce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80051d0:	e015      	b.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	3304      	adds	r3, #4
 80051d6:	2102      	movs	r1, #2
 80051d8:	4618      	mov	r0, r3
 80051da:	f001 f9cf 	bl	800657c <RCCEx_PLL2_Config>
 80051de:	4603      	mov	r3, r0
 80051e0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80051e2:	e00c      	b.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	3324      	adds	r3, #36	; 0x24
 80051e8:	2102      	movs	r1, #2
 80051ea:	4618      	mov	r0, r3
 80051ec:	f001 fa78 	bl	80066e0 <RCCEx_PLL3_Config>
 80051f0:	4603      	mov	r3, r0
 80051f2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80051f4:	e003      	b.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	75fb      	strb	r3, [r7, #23]
      break;
 80051fa:	e000      	b.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80051fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051fe:	7dfb      	ldrb	r3, [r7, #23]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d109      	bne.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005204:	4b9b      	ldr	r3, [pc, #620]	; (8005474 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005206:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005208:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005210:	4998      	ldr	r1, [pc, #608]	; (8005474 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005212:	4313      	orrs	r3, r2
 8005214:	650b      	str	r3, [r1, #80]	; 0x50
 8005216:	e001      	b.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005218:	7dfb      	ldrb	r3, [r7, #23]
 800521a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005224:	2b00      	cmp	r3, #0
 8005226:	d03d      	beq.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800522c:	2b04      	cmp	r3, #4
 800522e:	d826      	bhi.n	800527e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005230:	a201      	add	r2, pc, #4	; (adr r2, 8005238 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8005232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005236:	bf00      	nop
 8005238:	0800524d 	.word	0x0800524d
 800523c:	0800525b 	.word	0x0800525b
 8005240:	0800526d 	.word	0x0800526d
 8005244:	08005285 	.word	0x08005285
 8005248:	08005285 	.word	0x08005285
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800524c:	4b89      	ldr	r3, [pc, #548]	; (8005474 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800524e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005250:	4a88      	ldr	r2, [pc, #544]	; (8005474 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005252:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005256:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005258:	e015      	b.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	3304      	adds	r3, #4
 800525e:	2100      	movs	r1, #0
 8005260:	4618      	mov	r0, r3
 8005262:	f001 f98b 	bl	800657c <RCCEx_PLL2_Config>
 8005266:	4603      	mov	r3, r0
 8005268:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800526a:	e00c      	b.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	3324      	adds	r3, #36	; 0x24
 8005270:	2100      	movs	r1, #0
 8005272:	4618      	mov	r0, r3
 8005274:	f001 fa34 	bl	80066e0 <RCCEx_PLL3_Config>
 8005278:	4603      	mov	r3, r0
 800527a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800527c:	e003      	b.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	75fb      	strb	r3, [r7, #23]
      break;
 8005282:	e000      	b.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8005284:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005286:	7dfb      	ldrb	r3, [r7, #23]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d109      	bne.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800528c:	4b79      	ldr	r3, [pc, #484]	; (8005474 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800528e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005290:	f023 0207 	bic.w	r2, r3, #7
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005298:	4976      	ldr	r1, [pc, #472]	; (8005474 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800529a:	4313      	orrs	r3, r2
 800529c:	650b      	str	r3, [r1, #80]	; 0x50
 800529e:	e001      	b.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052a0:	7dfb      	ldrb	r3, [r7, #23]
 80052a2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d042      	beq.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052b8:	d02b      	beq.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80052ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052be:	d825      	bhi.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80052c0:	2bc0      	cmp	r3, #192	; 0xc0
 80052c2:	d028      	beq.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80052c4:	2bc0      	cmp	r3, #192	; 0xc0
 80052c6:	d821      	bhi.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80052c8:	2b80      	cmp	r3, #128	; 0x80
 80052ca:	d016      	beq.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80052cc:	2b80      	cmp	r3, #128	; 0x80
 80052ce:	d81d      	bhi.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d002      	beq.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80052d4:	2b40      	cmp	r3, #64	; 0x40
 80052d6:	d007      	beq.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80052d8:	e018      	b.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052da:	4b66      	ldr	r3, [pc, #408]	; (8005474 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80052dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052de:	4a65      	ldr	r2, [pc, #404]	; (8005474 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80052e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052e4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80052e6:	e017      	b.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	3304      	adds	r3, #4
 80052ec:	2100      	movs	r1, #0
 80052ee:	4618      	mov	r0, r3
 80052f0:	f001 f944 	bl	800657c <RCCEx_PLL2_Config>
 80052f4:	4603      	mov	r3, r0
 80052f6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80052f8:	e00e      	b.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	3324      	adds	r3, #36	; 0x24
 80052fe:	2100      	movs	r1, #0
 8005300:	4618      	mov	r0, r3
 8005302:	f001 f9ed 	bl	80066e0 <RCCEx_PLL3_Config>
 8005306:	4603      	mov	r3, r0
 8005308:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800530a:	e005      	b.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800530c:	2301      	movs	r3, #1
 800530e:	75fb      	strb	r3, [r7, #23]
      break;
 8005310:	e002      	b.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8005312:	bf00      	nop
 8005314:	e000      	b.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8005316:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005318:	7dfb      	ldrb	r3, [r7, #23]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d109      	bne.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800531e:	4b55      	ldr	r3, [pc, #340]	; (8005474 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005320:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005322:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800532a:	4952      	ldr	r1, [pc, #328]	; (8005474 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800532c:	4313      	orrs	r3, r2
 800532e:	650b      	str	r3, [r1, #80]	; 0x50
 8005330:	e001      	b.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005332:	7dfb      	ldrb	r3, [r7, #23]
 8005334:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800533e:	2b00      	cmp	r3, #0
 8005340:	d049      	beq.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005348:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800534c:	d030      	beq.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800534e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005352:	d82a      	bhi.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005354:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005358:	d02c      	beq.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800535a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800535e:	d824      	bhi.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005360:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005364:	d018      	beq.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8005366:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800536a:	d81e      	bhi.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800536c:	2b00      	cmp	r3, #0
 800536e:	d003      	beq.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8005370:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005374:	d007      	beq.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8005376:	e018      	b.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005378:	4b3e      	ldr	r3, [pc, #248]	; (8005474 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800537a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800537c:	4a3d      	ldr	r2, [pc, #244]	; (8005474 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800537e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005382:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005384:	e017      	b.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	3304      	adds	r3, #4
 800538a:	2100      	movs	r1, #0
 800538c:	4618      	mov	r0, r3
 800538e:	f001 f8f5 	bl	800657c <RCCEx_PLL2_Config>
 8005392:	4603      	mov	r3, r0
 8005394:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005396:	e00e      	b.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	3324      	adds	r3, #36	; 0x24
 800539c:	2100      	movs	r1, #0
 800539e:	4618      	mov	r0, r3
 80053a0:	f001 f99e 	bl	80066e0 <RCCEx_PLL3_Config>
 80053a4:	4603      	mov	r3, r0
 80053a6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80053a8:	e005      	b.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	75fb      	strb	r3, [r7, #23]
      break;
 80053ae:	e002      	b.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80053b0:	bf00      	nop
 80053b2:	e000      	b.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80053b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80053b6:	7dfb      	ldrb	r3, [r7, #23]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d10a      	bne.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80053bc:	4b2d      	ldr	r3, [pc, #180]	; (8005474 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80053be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053c0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80053ca:	492a      	ldr	r1, [pc, #168]	; (8005474 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80053cc:	4313      	orrs	r3, r2
 80053ce:	658b      	str	r3, [r1, #88]	; 0x58
 80053d0:	e001      	b.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053d2:	7dfb      	ldrb	r3, [r7, #23]
 80053d4:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d04c      	beq.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80053e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80053ec:	d030      	beq.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80053ee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80053f2:	d82a      	bhi.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80053f4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80053f8:	d02c      	beq.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 80053fa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80053fe:	d824      	bhi.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005400:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005404:	d018      	beq.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8005406:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800540a:	d81e      	bhi.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800540c:	2b00      	cmp	r3, #0
 800540e:	d003      	beq.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005410:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005414:	d007      	beq.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8005416:	e018      	b.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005418:	4b16      	ldr	r3, [pc, #88]	; (8005474 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800541a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800541c:	4a15      	ldr	r2, [pc, #84]	; (8005474 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800541e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005422:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005424:	e017      	b.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	3304      	adds	r3, #4
 800542a:	2100      	movs	r1, #0
 800542c:	4618      	mov	r0, r3
 800542e:	f001 f8a5 	bl	800657c <RCCEx_PLL2_Config>
 8005432:	4603      	mov	r3, r0
 8005434:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005436:	e00e      	b.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	3324      	adds	r3, #36	; 0x24
 800543c:	2100      	movs	r1, #0
 800543e:	4618      	mov	r0, r3
 8005440:	f001 f94e 	bl	80066e0 <RCCEx_PLL3_Config>
 8005444:	4603      	mov	r3, r0
 8005446:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005448:	e005      	b.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800544a:	2301      	movs	r3, #1
 800544c:	75fb      	strb	r3, [r7, #23]
      break;
 800544e:	e002      	b.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8005450:	bf00      	nop
 8005452:	e000      	b.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8005454:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005456:	7dfb      	ldrb	r3, [r7, #23]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d10d      	bne.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800545c:	4b05      	ldr	r3, [pc, #20]	; (8005474 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800545e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005460:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800546a:	4902      	ldr	r1, [pc, #8]	; (8005474 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800546c:	4313      	orrs	r3, r2
 800546e:	658b      	str	r3, [r1, #88]	; 0x58
 8005470:	e004      	b.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8005472:	bf00      	nop
 8005474:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005478:	7dfb      	ldrb	r3, [r7, #23]
 800547a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005484:	2b00      	cmp	r3, #0
 8005486:	d032      	beq.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800548c:	2b30      	cmp	r3, #48	; 0x30
 800548e:	d01c      	beq.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005490:	2b30      	cmp	r3, #48	; 0x30
 8005492:	d817      	bhi.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8005494:	2b20      	cmp	r3, #32
 8005496:	d00c      	beq.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005498:	2b20      	cmp	r3, #32
 800549a:	d813      	bhi.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x344>
 800549c:	2b00      	cmp	r3, #0
 800549e:	d016      	beq.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80054a0:	2b10      	cmp	r3, #16
 80054a2:	d10f      	bne.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054a4:	4baf      	ldr	r3, [pc, #700]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80054a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054a8:	4aae      	ldr	r2, [pc, #696]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80054aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80054b0:	e00e      	b.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	3304      	adds	r3, #4
 80054b6:	2102      	movs	r1, #2
 80054b8:	4618      	mov	r0, r3
 80054ba:	f001 f85f 	bl	800657c <RCCEx_PLL2_Config>
 80054be:	4603      	mov	r3, r0
 80054c0:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80054c2:	e005      	b.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
 80054c6:	75fb      	strb	r3, [r7, #23]
      break;
 80054c8:	e002      	b.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80054ca:	bf00      	nop
 80054cc:	e000      	b.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80054ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054d0:	7dfb      	ldrb	r3, [r7, #23]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d109      	bne.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80054d6:	4ba3      	ldr	r3, [pc, #652]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80054d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054da:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054e2:	49a0      	ldr	r1, [pc, #640]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80054e4:	4313      	orrs	r3, r2
 80054e6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80054e8:	e001      	b.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054ea:	7dfb      	ldrb	r3, [r7, #23]
 80054ec:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d047      	beq.n	800558a <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005502:	d030      	beq.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8005504:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005508:	d82a      	bhi.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800550a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800550e:	d02c      	beq.n	800556a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8005510:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005514:	d824      	bhi.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8005516:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800551a:	d018      	beq.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800551c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005520:	d81e      	bhi.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8005522:	2b00      	cmp	r3, #0
 8005524:	d003      	beq.n	800552e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8005526:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800552a:	d007      	beq.n	800553c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800552c:	e018      	b.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800552e:	4b8d      	ldr	r3, [pc, #564]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005532:	4a8c      	ldr	r2, [pc, #560]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005534:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005538:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800553a:	e017      	b.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	3304      	adds	r3, #4
 8005540:	2100      	movs	r1, #0
 8005542:	4618      	mov	r0, r3
 8005544:	f001 f81a 	bl	800657c <RCCEx_PLL2_Config>
 8005548:	4603      	mov	r3, r0
 800554a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800554c:	e00e      	b.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	3324      	adds	r3, #36	; 0x24
 8005552:	2100      	movs	r1, #0
 8005554:	4618      	mov	r0, r3
 8005556:	f001 f8c3 	bl	80066e0 <RCCEx_PLL3_Config>
 800555a:	4603      	mov	r3, r0
 800555c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800555e:	e005      	b.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005560:	2301      	movs	r3, #1
 8005562:	75fb      	strb	r3, [r7, #23]
      break;
 8005564:	e002      	b.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8005566:	bf00      	nop
 8005568:	e000      	b.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800556a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800556c:	7dfb      	ldrb	r3, [r7, #23]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d109      	bne.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005572:	4b7c      	ldr	r3, [pc, #496]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005574:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005576:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800557e:	4979      	ldr	r1, [pc, #484]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005580:	4313      	orrs	r3, r2
 8005582:	650b      	str	r3, [r1, #80]	; 0x50
 8005584:	e001      	b.n	800558a <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005586:	7dfb      	ldrb	r3, [r7, #23]
 8005588:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005592:	2b00      	cmp	r3, #0
 8005594:	d049      	beq.n	800562a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800559a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800559e:	d02e      	beq.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x47e>
 80055a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80055a4:	d828      	bhi.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80055a6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80055aa:	d02a      	beq.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x482>
 80055ac:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80055b0:	d822      	bhi.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80055b2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80055b6:	d026      	beq.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0x486>
 80055b8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80055bc:	d81c      	bhi.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80055be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80055c2:	d010      	beq.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x466>
 80055c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80055c8:	d816      	bhi.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d01d      	beq.n	800560a <HAL_RCCEx_PeriphCLKConfig+0x48a>
 80055ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055d2:	d111      	bne.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	3304      	adds	r3, #4
 80055d8:	2101      	movs	r1, #1
 80055da:	4618      	mov	r0, r3
 80055dc:	f000 ffce 	bl	800657c <RCCEx_PLL2_Config>
 80055e0:	4603      	mov	r3, r0
 80055e2:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80055e4:	e012      	b.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	3324      	adds	r3, #36	; 0x24
 80055ea:	2101      	movs	r1, #1
 80055ec:	4618      	mov	r0, r3
 80055ee:	f001 f877 	bl	80066e0 <RCCEx_PLL3_Config>
 80055f2:	4603      	mov	r3, r0
 80055f4:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80055f6:	e009      	b.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80055f8:	2301      	movs	r3, #1
 80055fa:	75fb      	strb	r3, [r7, #23]
      break;
 80055fc:	e006      	b.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80055fe:	bf00      	nop
 8005600:	e004      	b.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005602:	bf00      	nop
 8005604:	e002      	b.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005606:	bf00      	nop
 8005608:	e000      	b.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800560a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800560c:	7dfb      	ldrb	r3, [r7, #23]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d109      	bne.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005612:	4b54      	ldr	r3, [pc, #336]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005614:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005616:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800561e:	4951      	ldr	r1, [pc, #324]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005620:	4313      	orrs	r3, r2
 8005622:	650b      	str	r3, [r1, #80]	; 0x50
 8005624:	e001      	b.n	800562a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005626:	7dfb      	ldrb	r3, [r7, #23]
 8005628:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005632:	2b00      	cmp	r3, #0
 8005634:	d04b      	beq.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800563c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005640:	d02e      	beq.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8005642:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005646:	d828      	bhi.n	800569a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005648:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800564c:	d02a      	beq.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800564e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005652:	d822      	bhi.n	800569a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005654:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005658:	d026      	beq.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800565a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800565e:	d81c      	bhi.n	800569a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005660:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005664:	d010      	beq.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8005666:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800566a:	d816      	bhi.n	800569a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800566c:	2b00      	cmp	r3, #0
 800566e:	d01d      	beq.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8005670:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005674:	d111      	bne.n	800569a <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	3304      	adds	r3, #4
 800567a:	2101      	movs	r1, #1
 800567c:	4618      	mov	r0, r3
 800567e:	f000 ff7d 	bl	800657c <RCCEx_PLL2_Config>
 8005682:	4603      	mov	r3, r0
 8005684:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005686:	e012      	b.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	3324      	adds	r3, #36	; 0x24
 800568c:	2101      	movs	r1, #1
 800568e:	4618      	mov	r0, r3
 8005690:	f001 f826 	bl	80066e0 <RCCEx_PLL3_Config>
 8005694:	4603      	mov	r3, r0
 8005696:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005698:	e009      	b.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800569a:	2301      	movs	r3, #1
 800569c:	75fb      	strb	r3, [r7, #23]
      break;
 800569e:	e006      	b.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80056a0:	bf00      	nop
 80056a2:	e004      	b.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80056a4:	bf00      	nop
 80056a6:	e002      	b.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80056a8:	bf00      	nop
 80056aa:	e000      	b.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80056ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80056ae:	7dfb      	ldrb	r3, [r7, #23]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d10a      	bne.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80056b4:	4b2b      	ldr	r3, [pc, #172]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80056b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056b8:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80056c2:	4928      	ldr	r1, [pc, #160]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80056c4:	4313      	orrs	r3, r2
 80056c6:	658b      	str	r3, [r1, #88]	; 0x58
 80056c8:	e001      	b.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056ca:	7dfb      	ldrb	r3, [r7, #23]
 80056cc:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d02f      	beq.n	800573a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80056e2:	d00e      	beq.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x582>
 80056e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80056e8:	d814      	bhi.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0x594>
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d015      	beq.n	800571a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80056ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80056f2:	d10f      	bne.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056f4:	4b1b      	ldr	r3, [pc, #108]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80056f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056f8:	4a1a      	ldr	r2, [pc, #104]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80056fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056fe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005700:	e00c      	b.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	3304      	adds	r3, #4
 8005706:	2101      	movs	r1, #1
 8005708:	4618      	mov	r0, r3
 800570a:	f000 ff37 	bl	800657c <RCCEx_PLL2_Config>
 800570e:	4603      	mov	r3, r0
 8005710:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005712:	e003      	b.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005714:	2301      	movs	r3, #1
 8005716:	75fb      	strb	r3, [r7, #23]
      break;
 8005718:	e000      	b.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800571a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800571c:	7dfb      	ldrb	r3, [r7, #23]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d109      	bne.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005722:	4b10      	ldr	r3, [pc, #64]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005724:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005726:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800572e:	490d      	ldr	r1, [pc, #52]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005730:	4313      	orrs	r3, r2
 8005732:	650b      	str	r3, [r1, #80]	; 0x50
 8005734:	e001      	b.n	800573a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005736:	7dfb      	ldrb	r3, [r7, #23]
 8005738:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005742:	2b00      	cmp	r3, #0
 8005744:	d033      	beq.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800574a:	2b03      	cmp	r3, #3
 800574c:	d81c      	bhi.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800574e:	a201      	add	r2, pc, #4	; (adr r2, 8005754 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8005750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005754:	0800578f 	.word	0x0800578f
 8005758:	08005769 	.word	0x08005769
 800575c:	08005777 	.word	0x08005777
 8005760:	0800578f 	.word	0x0800578f
 8005764:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005768:	4bb8      	ldr	r3, [pc, #736]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800576a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800576c:	4ab7      	ldr	r2, [pc, #732]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800576e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005772:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005774:	e00c      	b.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	3304      	adds	r3, #4
 800577a:	2102      	movs	r1, #2
 800577c:	4618      	mov	r0, r3
 800577e:	f000 fefd 	bl	800657c <RCCEx_PLL2_Config>
 8005782:	4603      	mov	r3, r0
 8005784:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005786:	e003      	b.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005788:	2301      	movs	r3, #1
 800578a:	75fb      	strb	r3, [r7, #23]
      break;
 800578c:	e000      	b.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800578e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005790:	7dfb      	ldrb	r3, [r7, #23]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d109      	bne.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005796:	4bad      	ldr	r3, [pc, #692]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800579a:	f023 0203 	bic.w	r2, r3, #3
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057a2:	49aa      	ldr	r1, [pc, #680]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80057a4:	4313      	orrs	r3, r2
 80057a6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80057a8:	e001      	b.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057aa:	7dfb      	ldrb	r3, [r7, #23]
 80057ac:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	f000 8086 	beq.w	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80057bc:	4ba4      	ldr	r3, [pc, #656]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4aa3      	ldr	r2, [pc, #652]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80057c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057c6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80057c8:	f7fc f982 	bl	8001ad0 <HAL_GetTick>
 80057cc:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80057ce:	e009      	b.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057d0:	f7fc f97e 	bl	8001ad0 <HAL_GetTick>
 80057d4:	4602      	mov	r2, r0
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	1ad3      	subs	r3, r2, r3
 80057da:	2b64      	cmp	r3, #100	; 0x64
 80057dc:	d902      	bls.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80057de:	2303      	movs	r3, #3
 80057e0:	75fb      	strb	r3, [r7, #23]
        break;
 80057e2:	e005      	b.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80057e4:	4b9a      	ldr	r3, [pc, #616]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d0ef      	beq.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80057f0:	7dfb      	ldrb	r3, [r7, #23]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d166      	bne.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80057f6:	4b95      	ldr	r3, [pc, #596]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80057f8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005800:	4053      	eors	r3, r2
 8005802:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005806:	2b00      	cmp	r3, #0
 8005808:	d013      	beq.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800580a:	4b90      	ldr	r3, [pc, #576]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800580c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800580e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005812:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005814:	4b8d      	ldr	r3, [pc, #564]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005816:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005818:	4a8c      	ldr	r2, [pc, #560]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800581a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800581e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005820:	4b8a      	ldr	r3, [pc, #552]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005824:	4a89      	ldr	r2, [pc, #548]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005826:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800582a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800582c:	4a87      	ldr	r2, [pc, #540]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005838:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800583c:	d115      	bne.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800583e:	f7fc f947 	bl	8001ad0 <HAL_GetTick>
 8005842:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005844:	e00b      	b.n	800585e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005846:	f7fc f943 	bl	8001ad0 <HAL_GetTick>
 800584a:	4602      	mov	r2, r0
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	1ad3      	subs	r3, r2, r3
 8005850:	f241 3288 	movw	r2, #5000	; 0x1388
 8005854:	4293      	cmp	r3, r2
 8005856:	d902      	bls.n	800585e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8005858:	2303      	movs	r3, #3
 800585a:	75fb      	strb	r3, [r7, #23]
            break;
 800585c:	e005      	b.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800585e:	4b7b      	ldr	r3, [pc, #492]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005862:	f003 0302 	and.w	r3, r3, #2
 8005866:	2b00      	cmp	r3, #0
 8005868:	d0ed      	beq.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800586a:	7dfb      	ldrb	r3, [r7, #23]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d126      	bne.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005876:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800587a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800587e:	d10d      	bne.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8005880:	4b72      	ldr	r3, [pc, #456]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005882:	691b      	ldr	r3, [r3, #16]
 8005884:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800588e:	0919      	lsrs	r1, r3, #4
 8005890:	4b70      	ldr	r3, [pc, #448]	; (8005a54 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8005892:	400b      	ands	r3, r1
 8005894:	496d      	ldr	r1, [pc, #436]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005896:	4313      	orrs	r3, r2
 8005898:	610b      	str	r3, [r1, #16]
 800589a:	e005      	b.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800589c:	4b6b      	ldr	r3, [pc, #428]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800589e:	691b      	ldr	r3, [r3, #16]
 80058a0:	4a6a      	ldr	r2, [pc, #424]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80058a2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80058a6:	6113      	str	r3, [r2, #16]
 80058a8:	4b68      	ldr	r3, [pc, #416]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80058aa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80058b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80058b6:	4965      	ldr	r1, [pc, #404]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80058b8:	4313      	orrs	r3, r2
 80058ba:	670b      	str	r3, [r1, #112]	; 0x70
 80058bc:	e004      	b.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80058be:	7dfb      	ldrb	r3, [r7, #23]
 80058c0:	75bb      	strb	r3, [r7, #22]
 80058c2:	e001      	b.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058c4:	7dfb      	ldrb	r3, [r7, #23]
 80058c6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f003 0301 	and.w	r3, r3, #1
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d07e      	beq.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80058d8:	2b28      	cmp	r3, #40	; 0x28
 80058da:	d867      	bhi.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80058dc:	a201      	add	r2, pc, #4	; (adr r2, 80058e4 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80058de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058e2:	bf00      	nop
 80058e4:	080059b3 	.word	0x080059b3
 80058e8:	080059ad 	.word	0x080059ad
 80058ec:	080059ad 	.word	0x080059ad
 80058f0:	080059ad 	.word	0x080059ad
 80058f4:	080059ad 	.word	0x080059ad
 80058f8:	080059ad 	.word	0x080059ad
 80058fc:	080059ad 	.word	0x080059ad
 8005900:	080059ad 	.word	0x080059ad
 8005904:	08005989 	.word	0x08005989
 8005908:	080059ad 	.word	0x080059ad
 800590c:	080059ad 	.word	0x080059ad
 8005910:	080059ad 	.word	0x080059ad
 8005914:	080059ad 	.word	0x080059ad
 8005918:	080059ad 	.word	0x080059ad
 800591c:	080059ad 	.word	0x080059ad
 8005920:	080059ad 	.word	0x080059ad
 8005924:	0800599b 	.word	0x0800599b
 8005928:	080059ad 	.word	0x080059ad
 800592c:	080059ad 	.word	0x080059ad
 8005930:	080059ad 	.word	0x080059ad
 8005934:	080059ad 	.word	0x080059ad
 8005938:	080059ad 	.word	0x080059ad
 800593c:	080059ad 	.word	0x080059ad
 8005940:	080059ad 	.word	0x080059ad
 8005944:	080059b3 	.word	0x080059b3
 8005948:	080059ad 	.word	0x080059ad
 800594c:	080059ad 	.word	0x080059ad
 8005950:	080059ad 	.word	0x080059ad
 8005954:	080059ad 	.word	0x080059ad
 8005958:	080059ad 	.word	0x080059ad
 800595c:	080059ad 	.word	0x080059ad
 8005960:	080059ad 	.word	0x080059ad
 8005964:	080059b3 	.word	0x080059b3
 8005968:	080059ad 	.word	0x080059ad
 800596c:	080059ad 	.word	0x080059ad
 8005970:	080059ad 	.word	0x080059ad
 8005974:	080059ad 	.word	0x080059ad
 8005978:	080059ad 	.word	0x080059ad
 800597c:	080059ad 	.word	0x080059ad
 8005980:	080059ad 	.word	0x080059ad
 8005984:	080059b3 	.word	0x080059b3
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	3304      	adds	r3, #4
 800598c:	2101      	movs	r1, #1
 800598e:	4618      	mov	r0, r3
 8005990:	f000 fdf4 	bl	800657c <RCCEx_PLL2_Config>
 8005994:	4603      	mov	r3, r0
 8005996:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005998:	e00c      	b.n	80059b4 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	3324      	adds	r3, #36	; 0x24
 800599e:	2101      	movs	r1, #1
 80059a0:	4618      	mov	r0, r3
 80059a2:	f000 fe9d 	bl	80066e0 <RCCEx_PLL3_Config>
 80059a6:	4603      	mov	r3, r0
 80059a8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80059aa:	e003      	b.n	80059b4 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80059ac:	2301      	movs	r3, #1
 80059ae:	75fb      	strb	r3, [r7, #23]
      break;
 80059b0:	e000      	b.n	80059b4 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 80059b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80059b4:	7dfb      	ldrb	r3, [r7, #23]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d109      	bne.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80059ba:	4b24      	ldr	r3, [pc, #144]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80059bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059be:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80059c6:	4921      	ldr	r1, [pc, #132]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80059c8:	4313      	orrs	r3, r2
 80059ca:	654b      	str	r3, [r1, #84]	; 0x54
 80059cc:	e001      	b.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059ce:	7dfb      	ldrb	r3, [r7, #23]
 80059d0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f003 0302 	and.w	r3, r3, #2
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d03e      	beq.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059e2:	2b05      	cmp	r3, #5
 80059e4:	d820      	bhi.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 80059e6:	a201      	add	r2, pc, #4	; (adr r2, 80059ec <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 80059e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059ec:	08005a2f 	.word	0x08005a2f
 80059f0:	08005a05 	.word	0x08005a05
 80059f4:	08005a17 	.word	0x08005a17
 80059f8:	08005a2f 	.word	0x08005a2f
 80059fc:	08005a2f 	.word	0x08005a2f
 8005a00:	08005a2f 	.word	0x08005a2f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	3304      	adds	r3, #4
 8005a08:	2101      	movs	r1, #1
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	f000 fdb6 	bl	800657c <RCCEx_PLL2_Config>
 8005a10:	4603      	mov	r3, r0
 8005a12:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005a14:	e00c      	b.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	3324      	adds	r3, #36	; 0x24
 8005a1a:	2101      	movs	r1, #1
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	f000 fe5f 	bl	80066e0 <RCCEx_PLL3_Config>
 8005a22:	4603      	mov	r3, r0
 8005a24:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005a26:	e003      	b.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a28:	2301      	movs	r3, #1
 8005a2a:	75fb      	strb	r3, [r7, #23]
      break;
 8005a2c:	e000      	b.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8005a2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a30:	7dfb      	ldrb	r3, [r7, #23]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d110      	bne.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005a36:	4b05      	ldr	r3, [pc, #20]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005a38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a3a:	f023 0207 	bic.w	r2, r3, #7
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a42:	4902      	ldr	r1, [pc, #8]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005a44:	4313      	orrs	r3, r2
 8005a46:	654b      	str	r3, [r1, #84]	; 0x54
 8005a48:	e008      	b.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8005a4a:	bf00      	nop
 8005a4c:	58024400 	.word	0x58024400
 8005a50:	58024800 	.word	0x58024800
 8005a54:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a58:	7dfb      	ldrb	r3, [r7, #23]
 8005a5a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f003 0304 	and.w	r3, r3, #4
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d039      	beq.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a6e:	2b05      	cmp	r3, #5
 8005a70:	d820      	bhi.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8005a72:	a201      	add	r2, pc, #4	; (adr r2, 8005a78 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8005a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a78:	08005abb 	.word	0x08005abb
 8005a7c:	08005a91 	.word	0x08005a91
 8005a80:	08005aa3 	.word	0x08005aa3
 8005a84:	08005abb 	.word	0x08005abb
 8005a88:	08005abb 	.word	0x08005abb
 8005a8c:	08005abb 	.word	0x08005abb
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	3304      	adds	r3, #4
 8005a94:	2101      	movs	r1, #1
 8005a96:	4618      	mov	r0, r3
 8005a98:	f000 fd70 	bl	800657c <RCCEx_PLL2_Config>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005aa0:	e00c      	b.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	3324      	adds	r3, #36	; 0x24
 8005aa6:	2101      	movs	r1, #1
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f000 fe19 	bl	80066e0 <RCCEx_PLL3_Config>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005ab2:	e003      	b.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	75fb      	strb	r3, [r7, #23]
      break;
 8005ab8:	e000      	b.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8005aba:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005abc:	7dfb      	ldrb	r3, [r7, #23]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d10a      	bne.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005ac2:	4bb7      	ldr	r3, [pc, #732]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005ac4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ac6:	f023 0207 	bic.w	r2, r3, #7
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ad0:	49b3      	ldr	r1, [pc, #716]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	658b      	str	r3, [r1, #88]	; 0x58
 8005ad6:	e001      	b.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ad8:	7dfb      	ldrb	r3, [r7, #23]
 8005ada:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f003 0320 	and.w	r3, r3, #32
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d04b      	beq.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005aee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005af2:	d02e      	beq.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8005af4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005af8:	d828      	bhi.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8005afa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005afe:	d02a      	beq.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8005b00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b04:	d822      	bhi.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8005b06:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005b0a:	d026      	beq.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8005b0c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005b10:	d81c      	bhi.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8005b12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b16:	d010      	beq.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8005b18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b1c:	d816      	bhi.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d01d      	beq.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8005b22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b26:	d111      	bne.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	3304      	adds	r3, #4
 8005b2c:	2100      	movs	r1, #0
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f000 fd24 	bl	800657c <RCCEx_PLL2_Config>
 8005b34:	4603      	mov	r3, r0
 8005b36:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005b38:	e012      	b.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	3324      	adds	r3, #36	; 0x24
 8005b3e:	2102      	movs	r1, #2
 8005b40:	4618      	mov	r0, r3
 8005b42:	f000 fdcd 	bl	80066e0 <RCCEx_PLL3_Config>
 8005b46:	4603      	mov	r3, r0
 8005b48:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005b4a:	e009      	b.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	75fb      	strb	r3, [r7, #23]
      break;
 8005b50:	e006      	b.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8005b52:	bf00      	nop
 8005b54:	e004      	b.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8005b56:	bf00      	nop
 8005b58:	e002      	b.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8005b5a:	bf00      	nop
 8005b5c:	e000      	b.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8005b5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b60:	7dfb      	ldrb	r3, [r7, #23]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d10a      	bne.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005b66:	4b8e      	ldr	r3, [pc, #568]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005b68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b6a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b74:	498a      	ldr	r1, [pc, #552]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005b76:	4313      	orrs	r3, r2
 8005b78:	654b      	str	r3, [r1, #84]	; 0x54
 8005b7a:	e001      	b.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b7c:	7dfb      	ldrb	r3, [r7, #23]
 8005b7e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d04b      	beq.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005b92:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005b96:	d02e      	beq.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8005b98:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005b9c:	d828      	bhi.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8005b9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ba2:	d02a      	beq.n	8005bfa <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8005ba4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ba8:	d822      	bhi.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8005baa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005bae:	d026      	beq.n	8005bfe <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8005bb0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005bb4:	d81c      	bhi.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8005bb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bba:	d010      	beq.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8005bbc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bc0:	d816      	bhi.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d01d      	beq.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8005bc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bca:	d111      	bne.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	3304      	adds	r3, #4
 8005bd0:	2100      	movs	r1, #0
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f000 fcd2 	bl	800657c <RCCEx_PLL2_Config>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005bdc:	e012      	b.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	3324      	adds	r3, #36	; 0x24
 8005be2:	2102      	movs	r1, #2
 8005be4:	4618      	mov	r0, r3
 8005be6:	f000 fd7b 	bl	80066e0 <RCCEx_PLL3_Config>
 8005bea:	4603      	mov	r3, r0
 8005bec:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005bee:	e009      	b.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	75fb      	strb	r3, [r7, #23]
      break;
 8005bf4:	e006      	b.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8005bf6:	bf00      	nop
 8005bf8:	e004      	b.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8005bfa:	bf00      	nop
 8005bfc:	e002      	b.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8005bfe:	bf00      	nop
 8005c00:	e000      	b.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8005c02:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c04:	7dfb      	ldrb	r3, [r7, #23]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d10a      	bne.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005c0a:	4b65      	ldr	r3, [pc, #404]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c0e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005c18:	4961      	ldr	r1, [pc, #388]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	658b      	str	r3, [r1, #88]	; 0x58
 8005c1e:	e001      	b.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c20:	7dfb      	ldrb	r3, [r7, #23]
 8005c22:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d04b      	beq.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005c36:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005c3a:	d02e      	beq.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8005c3c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005c40:	d828      	bhi.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8005c42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c46:	d02a      	beq.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8005c48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c4c:	d822      	bhi.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8005c4e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005c52:	d026      	beq.n	8005ca2 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8005c54:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005c58:	d81c      	bhi.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8005c5a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c5e:	d010      	beq.n	8005c82 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8005c60:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c64:	d816      	bhi.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d01d      	beq.n	8005ca6 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8005c6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c6e:	d111      	bne.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	3304      	adds	r3, #4
 8005c74:	2100      	movs	r1, #0
 8005c76:	4618      	mov	r0, r3
 8005c78:	f000 fc80 	bl	800657c <RCCEx_PLL2_Config>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005c80:	e012      	b.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	3324      	adds	r3, #36	; 0x24
 8005c86:	2102      	movs	r1, #2
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f000 fd29 	bl	80066e0 <RCCEx_PLL3_Config>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005c92:	e009      	b.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005c94:	2301      	movs	r3, #1
 8005c96:	75fb      	strb	r3, [r7, #23]
      break;
 8005c98:	e006      	b.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8005c9a:	bf00      	nop
 8005c9c:	e004      	b.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8005c9e:	bf00      	nop
 8005ca0:	e002      	b.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8005ca2:	bf00      	nop
 8005ca4:	e000      	b.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8005ca6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ca8:	7dfb      	ldrb	r3, [r7, #23]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d10a      	bne.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005cae:	4b3c      	ldr	r3, [pc, #240]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cb2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005cbc:	4938      	ldr	r1, [pc, #224]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	658b      	str	r3, [r1, #88]	; 0x58
 8005cc2:	e001      	b.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cc4:	7dfb      	ldrb	r3, [r7, #23]
 8005cc6:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f003 0308 	and.w	r3, r3, #8
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d01a      	beq.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005cda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cde:	d10a      	bne.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	3324      	adds	r3, #36	; 0x24
 8005ce4:	2102      	movs	r1, #2
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f000 fcfa 	bl	80066e0 <RCCEx_PLL3_Config>
 8005cec:	4603      	mov	r3, r0
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d001      	beq.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005cf6:	4b2a      	ldr	r3, [pc, #168]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005cf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cfa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d04:	4926      	ldr	r1, [pc, #152]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005d06:	4313      	orrs	r3, r2
 8005d08:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f003 0310 	and.w	r3, r3, #16
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d01a      	beq.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d20:	d10a      	bne.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	3324      	adds	r3, #36	; 0x24
 8005d26:	2102      	movs	r1, #2
 8005d28:	4618      	mov	r0, r3
 8005d2a:	f000 fcd9 	bl	80066e0 <RCCEx_PLL3_Config>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d001      	beq.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8005d34:	2301      	movs	r3, #1
 8005d36:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005d38:	4b19      	ldr	r3, [pc, #100]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005d3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d3c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d46:	4916      	ldr	r1, [pc, #88]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d036      	beq.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005d5e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d62:	d01f      	beq.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8005d64:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d68:	d817      	bhi.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d003      	beq.n	8005d76 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8005d6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d72:	d009      	beq.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8005d74:	e011      	b.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	3304      	adds	r3, #4
 8005d7a:	2100      	movs	r1, #0
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	f000 fbfd 	bl	800657c <RCCEx_PLL2_Config>
 8005d82:	4603      	mov	r3, r0
 8005d84:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005d86:	e00e      	b.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	3324      	adds	r3, #36	; 0x24
 8005d8c:	2102      	movs	r1, #2
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f000 fca6 	bl	80066e0 <RCCEx_PLL3_Config>
 8005d94:	4603      	mov	r3, r0
 8005d96:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005d98:	e005      	b.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	75fb      	strb	r3, [r7, #23]
      break;
 8005d9e:	e002      	b.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8005da0:	58024400 	.word	0x58024400
      break;
 8005da4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005da6:	7dfb      	ldrb	r3, [r7, #23]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d10a      	bne.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005dac:	4b93      	ldr	r3, [pc, #588]	; (8005ffc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005dae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005db0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005dba:	4990      	ldr	r1, [pc, #576]	; (8005ffc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	658b      	str	r3, [r1, #88]	; 0x58
 8005dc0:	e001      	b.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dc2:	7dfb      	ldrb	r3, [r7, #23]
 8005dc4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d033      	beq.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005dd8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005ddc:	d01c      	beq.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8005dde:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005de2:	d816      	bhi.n	8005e12 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8005de4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005de8:	d003      	beq.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8005dea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005dee:	d007      	beq.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8005df0:	e00f      	b.n	8005e12 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005df2:	4b82      	ldr	r3, [pc, #520]	; (8005ffc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005df6:	4a81      	ldr	r2, [pc, #516]	; (8005ffc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005df8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005dfc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8005dfe:	e00c      	b.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	3324      	adds	r3, #36	; 0x24
 8005e04:	2101      	movs	r1, #1
 8005e06:	4618      	mov	r0, r3
 8005e08:	f000 fc6a 	bl	80066e0 <RCCEx_PLL3_Config>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8005e10:	e003      	b.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e12:	2301      	movs	r3, #1
 8005e14:	75fb      	strb	r3, [r7, #23]
      break;
 8005e16:	e000      	b.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8005e18:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e1a:	7dfb      	ldrb	r3, [r7, #23]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d10a      	bne.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005e20:	4b76      	ldr	r3, [pc, #472]	; (8005ffc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005e22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e24:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e2e:	4973      	ldr	r1, [pc, #460]	; (8005ffc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005e30:	4313      	orrs	r3, r2
 8005e32:	654b      	str	r3, [r1, #84]	; 0x54
 8005e34:	e001      	b.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e36:	7dfb      	ldrb	r3, [r7, #23]
 8005e38:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d029      	beq.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d003      	beq.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8005e4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e52:	d007      	beq.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8005e54:	e00f      	b.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e56:	4b69      	ldr	r3, [pc, #420]	; (8005ffc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e5a:	4a68      	ldr	r2, [pc, #416]	; (8005ffc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005e5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e60:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005e62:	e00b      	b.n	8005e7c <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	3304      	adds	r3, #4
 8005e68:	2102      	movs	r1, #2
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f000 fb86 	bl	800657c <RCCEx_PLL2_Config>
 8005e70:	4603      	mov	r3, r0
 8005e72:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005e74:	e002      	b.n	8005e7c <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8005e76:	2301      	movs	r3, #1
 8005e78:	75fb      	strb	r3, [r7, #23]
      break;
 8005e7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e7c:	7dfb      	ldrb	r3, [r7, #23]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d109      	bne.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005e82:	4b5e      	ldr	r3, [pc, #376]	; (8005ffc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005e84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e86:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e8e:	495b      	ldr	r1, [pc, #364]	; (8005ffc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005e90:	4313      	orrs	r3, r2
 8005e92:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005e94:	e001      	b.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e96:	7dfb      	ldrb	r3, [r7, #23]
 8005e98:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d00a      	beq.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	3324      	adds	r3, #36	; 0x24
 8005eaa:	2102      	movs	r1, #2
 8005eac:	4618      	mov	r0, r3
 8005eae:	f000 fc17 	bl	80066e0 <RCCEx_PLL3_Config>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d001      	beq.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8005eb8:	2301      	movs	r3, #1
 8005eba:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d030      	beq.n	8005f2a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ecc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ed0:	d017      	beq.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8005ed2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ed6:	d811      	bhi.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8005ed8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005edc:	d013      	beq.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8005ede:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ee2:	d80b      	bhi.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d010      	beq.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8005ee8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005eec:	d106      	bne.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005eee:	4b43      	ldr	r3, [pc, #268]	; (8005ffc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ef2:	4a42      	ldr	r2, [pc, #264]	; (8005ffc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005ef4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ef8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8005efa:	e007      	b.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005efc:	2301      	movs	r3, #1
 8005efe:	75fb      	strb	r3, [r7, #23]
      break;
 8005f00:	e004      	b.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8005f02:	bf00      	nop
 8005f04:	e002      	b.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8005f06:	bf00      	nop
 8005f08:	e000      	b.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8005f0a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f0c:	7dfb      	ldrb	r3, [r7, #23]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d109      	bne.n	8005f26 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005f12:	4b3a      	ldr	r3, [pc, #232]	; (8005ffc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005f14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f16:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f1e:	4937      	ldr	r1, [pc, #220]	; (8005ffc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005f20:	4313      	orrs	r3, r2
 8005f22:	654b      	str	r3, [r1, #84]	; 0x54
 8005f24:	e001      	b.n	8005f2a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f26:	7dfb      	ldrb	r3, [r7, #23]
 8005f28:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d008      	beq.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005f36:	4b31      	ldr	r3, [pc, #196]	; (8005ffc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005f38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f3a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f42:	492e      	ldr	r1, [pc, #184]	; (8005ffc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005f44:	4313      	orrs	r3, r2
 8005f46:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d009      	beq.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005f54:	4b29      	ldr	r3, [pc, #164]	; (8005ffc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005f56:	691b      	ldr	r3, [r3, #16]
 8005f58:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005f62:	4926      	ldr	r1, [pc, #152]	; (8005ffc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005f64:	4313      	orrs	r3, r2
 8005f66:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d008      	beq.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005f74:	4b21      	ldr	r3, [pc, #132]	; (8005ffc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005f76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f78:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f80:	491e      	ldr	r1, [pc, #120]	; (8005ffc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005f82:	4313      	orrs	r3, r2
 8005f84:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d00d      	beq.n	8005fae <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005f92:	4b1a      	ldr	r3, [pc, #104]	; (8005ffc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005f94:	691b      	ldr	r3, [r3, #16]
 8005f96:	4a19      	ldr	r2, [pc, #100]	; (8005ffc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005f98:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005f9c:	6113      	str	r3, [r2, #16]
 8005f9e:	4b17      	ldr	r3, [pc, #92]	; (8005ffc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005fa0:	691a      	ldr	r2, [r3, #16]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005fa8:	4914      	ldr	r1, [pc, #80]	; (8005ffc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005faa:	4313      	orrs	r3, r2
 8005fac:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	da08      	bge.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005fb6:	4b11      	ldr	r3, [pc, #68]	; (8005ffc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fba:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fc2:	490e      	ldr	r1, [pc, #56]	; (8005ffc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d009      	beq.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005fd4:	4b09      	ldr	r3, [pc, #36]	; (8005ffc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005fd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fd8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fe2:	4906      	ldr	r1, [pc, #24]	; (8005ffc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8005fe8:	7dbb      	ldrb	r3, [r7, #22]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d101      	bne.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	e000      	b.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8005ff2:	2301      	movs	r3, #1
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	3718      	adds	r7, #24
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bd80      	pop	{r7, pc}
 8005ffc:	58024400 	.word	0x58024400

08006000 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006004:	f7ff f860 	bl	80050c8 <HAL_RCC_GetHCLKFreq>
 8006008:	4602      	mov	r2, r0
 800600a:	4b06      	ldr	r3, [pc, #24]	; (8006024 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800600c:	6a1b      	ldr	r3, [r3, #32]
 800600e:	091b      	lsrs	r3, r3, #4
 8006010:	f003 0307 	and.w	r3, r3, #7
 8006014:	4904      	ldr	r1, [pc, #16]	; (8006028 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006016:	5ccb      	ldrb	r3, [r1, r3]
 8006018:	f003 031f 	and.w	r3, r3, #31
 800601c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006020:	4618      	mov	r0, r3
 8006022:	bd80      	pop	{r7, pc}
 8006024:	58024400 	.word	0x58024400
 8006028:	08018c58 	.word	0x08018c58

0800602c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800602c:	b480      	push	{r7}
 800602e:	b089      	sub	sp, #36	; 0x24
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006034:	4ba1      	ldr	r3, [pc, #644]	; (80062bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006038:	f003 0303 	and.w	r3, r3, #3
 800603c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800603e:	4b9f      	ldr	r3, [pc, #636]	; (80062bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006042:	0b1b      	lsrs	r3, r3, #12
 8006044:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006048:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800604a:	4b9c      	ldr	r3, [pc, #624]	; (80062bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800604c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800604e:	091b      	lsrs	r3, r3, #4
 8006050:	f003 0301 	and.w	r3, r3, #1
 8006054:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8006056:	4b99      	ldr	r3, [pc, #612]	; (80062bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006058:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800605a:	08db      	lsrs	r3, r3, #3
 800605c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006060:	693a      	ldr	r2, [r7, #16]
 8006062:	fb02 f303 	mul.w	r3, r2, r3
 8006066:	ee07 3a90 	vmov	s15, r3
 800606a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800606e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	2b00      	cmp	r3, #0
 8006076:	f000 8111 	beq.w	800629c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800607a:	69bb      	ldr	r3, [r7, #24]
 800607c:	2b02      	cmp	r3, #2
 800607e:	f000 8083 	beq.w	8006188 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006082:	69bb      	ldr	r3, [r7, #24]
 8006084:	2b02      	cmp	r3, #2
 8006086:	f200 80a1 	bhi.w	80061cc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800608a:	69bb      	ldr	r3, [r7, #24]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d003      	beq.n	8006098 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006090:	69bb      	ldr	r3, [r7, #24]
 8006092:	2b01      	cmp	r3, #1
 8006094:	d056      	beq.n	8006144 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006096:	e099      	b.n	80061cc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006098:	4b88      	ldr	r3, [pc, #544]	; (80062bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f003 0320 	and.w	r3, r3, #32
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d02d      	beq.n	8006100 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80060a4:	4b85      	ldr	r3, [pc, #532]	; (80062bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	08db      	lsrs	r3, r3, #3
 80060aa:	f003 0303 	and.w	r3, r3, #3
 80060ae:	4a84      	ldr	r2, [pc, #528]	; (80062c0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80060b0:	fa22 f303 	lsr.w	r3, r2, r3
 80060b4:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	ee07 3a90 	vmov	s15, r3
 80060bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	ee07 3a90 	vmov	s15, r3
 80060c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060ce:	4b7b      	ldr	r3, [pc, #492]	; (80062bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80060d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060d6:	ee07 3a90 	vmov	s15, r3
 80060da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060de:	ed97 6a03 	vldr	s12, [r7, #12]
 80060e2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80062c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80060e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060fa:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80060fe:	e087      	b.n	8006210 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	ee07 3a90 	vmov	s15, r3
 8006106:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800610a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80062c8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800610e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006112:	4b6a      	ldr	r3, [pc, #424]	; (80062bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006116:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800611a:	ee07 3a90 	vmov	s15, r3
 800611e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006122:	ed97 6a03 	vldr	s12, [r7, #12]
 8006126:	eddf 5a67 	vldr	s11, [pc, #412]	; 80062c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800612a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800612e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006132:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006136:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800613a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800613e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006142:	e065      	b.n	8006210 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	ee07 3a90 	vmov	s15, r3
 800614a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800614e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80062cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006152:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006156:	4b59      	ldr	r3, [pc, #356]	; (80062bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800615a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800615e:	ee07 3a90 	vmov	s15, r3
 8006162:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006166:	ed97 6a03 	vldr	s12, [r7, #12]
 800616a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80062c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800616e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006172:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006176:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800617a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800617e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006182:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006186:	e043      	b.n	8006210 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	ee07 3a90 	vmov	s15, r3
 800618e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006192:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80062d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006196:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800619a:	4b48      	ldr	r3, [pc, #288]	; (80062bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800619c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800619e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061a2:	ee07 3a90 	vmov	s15, r3
 80061a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80061ae:	eddf 5a45 	vldr	s11, [pc, #276]	; 80062c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80061b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80061be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061c6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80061ca:	e021      	b.n	8006210 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	ee07 3a90 	vmov	s15, r3
 80061d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061d6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80062cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80061da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061de:	4b37      	ldr	r3, [pc, #220]	; (80062bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80061e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061e6:	ee07 3a90 	vmov	s15, r3
 80061ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80061f2:	eddf 5a34 	vldr	s11, [pc, #208]	; 80062c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80061f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006202:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006206:	ee67 7a27 	vmul.f32	s15, s14, s15
 800620a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800620e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8006210:	4b2a      	ldr	r3, [pc, #168]	; (80062bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006214:	0a5b      	lsrs	r3, r3, #9
 8006216:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800621a:	ee07 3a90 	vmov	s15, r3
 800621e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006222:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006226:	ee37 7a87 	vadd.f32	s14, s15, s14
 800622a:	edd7 6a07 	vldr	s13, [r7, #28]
 800622e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006232:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006236:	ee17 2a90 	vmov	r2, s15
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800623e:	4b1f      	ldr	r3, [pc, #124]	; (80062bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006242:	0c1b      	lsrs	r3, r3, #16
 8006244:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006248:	ee07 3a90 	vmov	s15, r3
 800624c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006250:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006254:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006258:	edd7 6a07 	vldr	s13, [r7, #28]
 800625c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006260:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006264:	ee17 2a90 	vmov	r2, s15
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800626c:	4b13      	ldr	r3, [pc, #76]	; (80062bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800626e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006270:	0e1b      	lsrs	r3, r3, #24
 8006272:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006276:	ee07 3a90 	vmov	s15, r3
 800627a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800627e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006282:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006286:	edd7 6a07 	vldr	s13, [r7, #28]
 800628a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800628e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006292:	ee17 2a90 	vmov	r2, s15
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800629a:	e008      	b.n	80062ae <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2200      	movs	r2, #0
 80062a0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2200      	movs	r2, #0
 80062a6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2200      	movs	r2, #0
 80062ac:	609a      	str	r2, [r3, #8]
}
 80062ae:	bf00      	nop
 80062b0:	3724      	adds	r7, #36	; 0x24
 80062b2:	46bd      	mov	sp, r7
 80062b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b8:	4770      	bx	lr
 80062ba:	bf00      	nop
 80062bc:	58024400 	.word	0x58024400
 80062c0:	03d09000 	.word	0x03d09000
 80062c4:	46000000 	.word	0x46000000
 80062c8:	4c742400 	.word	0x4c742400
 80062cc:	4a742400 	.word	0x4a742400
 80062d0:	4af42400 	.word	0x4af42400

080062d4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b089      	sub	sp, #36	; 0x24
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80062dc:	4ba1      	ldr	r3, [pc, #644]	; (8006564 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80062de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062e0:	f003 0303 	and.w	r3, r3, #3
 80062e4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80062e6:	4b9f      	ldr	r3, [pc, #636]	; (8006564 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80062e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062ea:	0d1b      	lsrs	r3, r3, #20
 80062ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80062f0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80062f2:	4b9c      	ldr	r3, [pc, #624]	; (8006564 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80062f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062f6:	0a1b      	lsrs	r3, r3, #8
 80062f8:	f003 0301 	and.w	r3, r3, #1
 80062fc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80062fe:	4b99      	ldr	r3, [pc, #612]	; (8006564 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006302:	08db      	lsrs	r3, r3, #3
 8006304:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006308:	693a      	ldr	r2, [r7, #16]
 800630a:	fb02 f303 	mul.w	r3, r2, r3
 800630e:	ee07 3a90 	vmov	s15, r3
 8006312:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006316:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	2b00      	cmp	r3, #0
 800631e:	f000 8111 	beq.w	8006544 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006322:	69bb      	ldr	r3, [r7, #24]
 8006324:	2b02      	cmp	r3, #2
 8006326:	f000 8083 	beq.w	8006430 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800632a:	69bb      	ldr	r3, [r7, #24]
 800632c:	2b02      	cmp	r3, #2
 800632e:	f200 80a1 	bhi.w	8006474 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006332:	69bb      	ldr	r3, [r7, #24]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d003      	beq.n	8006340 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006338:	69bb      	ldr	r3, [r7, #24]
 800633a:	2b01      	cmp	r3, #1
 800633c:	d056      	beq.n	80063ec <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800633e:	e099      	b.n	8006474 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006340:	4b88      	ldr	r3, [pc, #544]	; (8006564 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f003 0320 	and.w	r3, r3, #32
 8006348:	2b00      	cmp	r3, #0
 800634a:	d02d      	beq.n	80063a8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800634c:	4b85      	ldr	r3, [pc, #532]	; (8006564 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	08db      	lsrs	r3, r3, #3
 8006352:	f003 0303 	and.w	r3, r3, #3
 8006356:	4a84      	ldr	r2, [pc, #528]	; (8006568 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006358:	fa22 f303 	lsr.w	r3, r2, r3
 800635c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	ee07 3a90 	vmov	s15, r3
 8006364:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	ee07 3a90 	vmov	s15, r3
 800636e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006372:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006376:	4b7b      	ldr	r3, [pc, #492]	; (8006564 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800637a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800637e:	ee07 3a90 	vmov	s15, r3
 8006382:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006386:	ed97 6a03 	vldr	s12, [r7, #12]
 800638a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800656c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800638e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006392:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006396:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800639a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800639e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063a2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80063a6:	e087      	b.n	80064b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	ee07 3a90 	vmov	s15, r3
 80063ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063b2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006570 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80063b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063ba:	4b6a      	ldr	r3, [pc, #424]	; (8006564 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80063bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063c2:	ee07 3a90 	vmov	s15, r3
 80063c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80063ce:	eddf 5a67 	vldr	s11, [pc, #412]	; 800656c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80063d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80063de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80063ea:	e065      	b.n	80064b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	ee07 3a90 	vmov	s15, r3
 80063f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063f6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006574 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80063fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063fe:	4b59      	ldr	r3, [pc, #356]	; (8006564 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006402:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006406:	ee07 3a90 	vmov	s15, r3
 800640a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800640e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006412:	eddf 5a56 	vldr	s11, [pc, #344]	; 800656c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006416:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800641a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800641e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006422:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006426:	ee67 7a27 	vmul.f32	s15, s14, s15
 800642a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800642e:	e043      	b.n	80064b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	ee07 3a90 	vmov	s15, r3
 8006436:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800643a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006578 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800643e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006442:	4b48      	ldr	r3, [pc, #288]	; (8006564 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006446:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800644a:	ee07 3a90 	vmov	s15, r3
 800644e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006452:	ed97 6a03 	vldr	s12, [r7, #12]
 8006456:	eddf 5a45 	vldr	s11, [pc, #276]	; 800656c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800645a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800645e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006462:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006466:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800646a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800646e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006472:	e021      	b.n	80064b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	ee07 3a90 	vmov	s15, r3
 800647a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800647e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006574 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006482:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006486:	4b37      	ldr	r3, [pc, #220]	; (8006564 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800648a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800648e:	ee07 3a90 	vmov	s15, r3
 8006492:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006496:	ed97 6a03 	vldr	s12, [r7, #12]
 800649a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800656c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800649e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80064aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064b2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80064b6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80064b8:	4b2a      	ldr	r3, [pc, #168]	; (8006564 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80064ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064bc:	0a5b      	lsrs	r3, r3, #9
 80064be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064c2:	ee07 3a90 	vmov	s15, r3
 80064c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80064ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80064d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80064d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80064da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80064de:	ee17 2a90 	vmov	r2, s15
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80064e6:	4b1f      	ldr	r3, [pc, #124]	; (8006564 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80064e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ea:	0c1b      	lsrs	r3, r3, #16
 80064ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064f0:	ee07 3a90 	vmov	s15, r3
 80064f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80064fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006500:	edd7 6a07 	vldr	s13, [r7, #28]
 8006504:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006508:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800650c:	ee17 2a90 	vmov	r2, s15
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8006514:	4b13      	ldr	r3, [pc, #76]	; (8006564 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006518:	0e1b      	lsrs	r3, r3, #24
 800651a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800651e:	ee07 3a90 	vmov	s15, r3
 8006522:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006526:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800652a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800652e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006532:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006536:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800653a:	ee17 2a90 	vmov	r2, s15
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006542:	e008      	b.n	8006556 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2200      	movs	r2, #0
 8006548:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2200      	movs	r2, #0
 800654e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2200      	movs	r2, #0
 8006554:	609a      	str	r2, [r3, #8]
}
 8006556:	bf00      	nop
 8006558:	3724      	adds	r7, #36	; 0x24
 800655a:	46bd      	mov	sp, r7
 800655c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006560:	4770      	bx	lr
 8006562:	bf00      	nop
 8006564:	58024400 	.word	0x58024400
 8006568:	03d09000 	.word	0x03d09000
 800656c:	46000000 	.word	0x46000000
 8006570:	4c742400 	.word	0x4c742400
 8006574:	4a742400 	.word	0x4a742400
 8006578:	4af42400 	.word	0x4af42400

0800657c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b084      	sub	sp, #16
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
 8006584:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006586:	2300      	movs	r3, #0
 8006588:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800658a:	4b53      	ldr	r3, [pc, #332]	; (80066d8 <RCCEx_PLL2_Config+0x15c>)
 800658c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800658e:	f003 0303 	and.w	r3, r3, #3
 8006592:	2b03      	cmp	r3, #3
 8006594:	d101      	bne.n	800659a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006596:	2301      	movs	r3, #1
 8006598:	e099      	b.n	80066ce <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800659a:	4b4f      	ldr	r3, [pc, #316]	; (80066d8 <RCCEx_PLL2_Config+0x15c>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4a4e      	ldr	r2, [pc, #312]	; (80066d8 <RCCEx_PLL2_Config+0x15c>)
 80065a0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80065a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80065a6:	f7fb fa93 	bl	8001ad0 <HAL_GetTick>
 80065aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80065ac:	e008      	b.n	80065c0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80065ae:	f7fb fa8f 	bl	8001ad0 <HAL_GetTick>
 80065b2:	4602      	mov	r2, r0
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	1ad3      	subs	r3, r2, r3
 80065b8:	2b02      	cmp	r3, #2
 80065ba:	d901      	bls.n	80065c0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80065bc:	2303      	movs	r3, #3
 80065be:	e086      	b.n	80066ce <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80065c0:	4b45      	ldr	r3, [pc, #276]	; (80066d8 <RCCEx_PLL2_Config+0x15c>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d1f0      	bne.n	80065ae <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80065cc:	4b42      	ldr	r3, [pc, #264]	; (80066d8 <RCCEx_PLL2_Config+0x15c>)
 80065ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065d0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	031b      	lsls	r3, r3, #12
 80065da:	493f      	ldr	r1, [pc, #252]	; (80066d8 <RCCEx_PLL2_Config+0x15c>)
 80065dc:	4313      	orrs	r3, r2
 80065de:	628b      	str	r3, [r1, #40]	; 0x28
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	3b01      	subs	r3, #1
 80065e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	689b      	ldr	r3, [r3, #8]
 80065ee:	3b01      	subs	r3, #1
 80065f0:	025b      	lsls	r3, r3, #9
 80065f2:	b29b      	uxth	r3, r3
 80065f4:	431a      	orrs	r2, r3
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	68db      	ldr	r3, [r3, #12]
 80065fa:	3b01      	subs	r3, #1
 80065fc:	041b      	lsls	r3, r3, #16
 80065fe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006602:	431a      	orrs	r2, r3
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	691b      	ldr	r3, [r3, #16]
 8006608:	3b01      	subs	r3, #1
 800660a:	061b      	lsls	r3, r3, #24
 800660c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006610:	4931      	ldr	r1, [pc, #196]	; (80066d8 <RCCEx_PLL2_Config+0x15c>)
 8006612:	4313      	orrs	r3, r2
 8006614:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006616:	4b30      	ldr	r3, [pc, #192]	; (80066d8 <RCCEx_PLL2_Config+0x15c>)
 8006618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800661a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	695b      	ldr	r3, [r3, #20]
 8006622:	492d      	ldr	r1, [pc, #180]	; (80066d8 <RCCEx_PLL2_Config+0x15c>)
 8006624:	4313      	orrs	r3, r2
 8006626:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006628:	4b2b      	ldr	r3, [pc, #172]	; (80066d8 <RCCEx_PLL2_Config+0x15c>)
 800662a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800662c:	f023 0220 	bic.w	r2, r3, #32
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	699b      	ldr	r3, [r3, #24]
 8006634:	4928      	ldr	r1, [pc, #160]	; (80066d8 <RCCEx_PLL2_Config+0x15c>)
 8006636:	4313      	orrs	r3, r2
 8006638:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800663a:	4b27      	ldr	r3, [pc, #156]	; (80066d8 <RCCEx_PLL2_Config+0x15c>)
 800663c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800663e:	4a26      	ldr	r2, [pc, #152]	; (80066d8 <RCCEx_PLL2_Config+0x15c>)
 8006640:	f023 0310 	bic.w	r3, r3, #16
 8006644:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006646:	4b24      	ldr	r3, [pc, #144]	; (80066d8 <RCCEx_PLL2_Config+0x15c>)
 8006648:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800664a:	4b24      	ldr	r3, [pc, #144]	; (80066dc <RCCEx_PLL2_Config+0x160>)
 800664c:	4013      	ands	r3, r2
 800664e:	687a      	ldr	r2, [r7, #4]
 8006650:	69d2      	ldr	r2, [r2, #28]
 8006652:	00d2      	lsls	r2, r2, #3
 8006654:	4920      	ldr	r1, [pc, #128]	; (80066d8 <RCCEx_PLL2_Config+0x15c>)
 8006656:	4313      	orrs	r3, r2
 8006658:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800665a:	4b1f      	ldr	r3, [pc, #124]	; (80066d8 <RCCEx_PLL2_Config+0x15c>)
 800665c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800665e:	4a1e      	ldr	r2, [pc, #120]	; (80066d8 <RCCEx_PLL2_Config+0x15c>)
 8006660:	f043 0310 	orr.w	r3, r3, #16
 8006664:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d106      	bne.n	800667a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800666c:	4b1a      	ldr	r3, [pc, #104]	; (80066d8 <RCCEx_PLL2_Config+0x15c>)
 800666e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006670:	4a19      	ldr	r2, [pc, #100]	; (80066d8 <RCCEx_PLL2_Config+0x15c>)
 8006672:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006676:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006678:	e00f      	b.n	800669a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	2b01      	cmp	r3, #1
 800667e:	d106      	bne.n	800668e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006680:	4b15      	ldr	r3, [pc, #84]	; (80066d8 <RCCEx_PLL2_Config+0x15c>)
 8006682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006684:	4a14      	ldr	r2, [pc, #80]	; (80066d8 <RCCEx_PLL2_Config+0x15c>)
 8006686:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800668a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800668c:	e005      	b.n	800669a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800668e:	4b12      	ldr	r3, [pc, #72]	; (80066d8 <RCCEx_PLL2_Config+0x15c>)
 8006690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006692:	4a11      	ldr	r2, [pc, #68]	; (80066d8 <RCCEx_PLL2_Config+0x15c>)
 8006694:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006698:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800669a:	4b0f      	ldr	r3, [pc, #60]	; (80066d8 <RCCEx_PLL2_Config+0x15c>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4a0e      	ldr	r2, [pc, #56]	; (80066d8 <RCCEx_PLL2_Config+0x15c>)
 80066a0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80066a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80066a6:	f7fb fa13 	bl	8001ad0 <HAL_GetTick>
 80066aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80066ac:	e008      	b.n	80066c0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80066ae:	f7fb fa0f 	bl	8001ad0 <HAL_GetTick>
 80066b2:	4602      	mov	r2, r0
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	1ad3      	subs	r3, r2, r3
 80066b8:	2b02      	cmp	r3, #2
 80066ba:	d901      	bls.n	80066c0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80066bc:	2303      	movs	r3, #3
 80066be:	e006      	b.n	80066ce <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80066c0:	4b05      	ldr	r3, [pc, #20]	; (80066d8 <RCCEx_PLL2_Config+0x15c>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d0f0      	beq.n	80066ae <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80066cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	3710      	adds	r7, #16
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}
 80066d6:	bf00      	nop
 80066d8:	58024400 	.word	0x58024400
 80066dc:	ffff0007 	.word	0xffff0007

080066e0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b084      	sub	sp, #16
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
 80066e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80066ea:	2300      	movs	r3, #0
 80066ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80066ee:	4b53      	ldr	r3, [pc, #332]	; (800683c <RCCEx_PLL3_Config+0x15c>)
 80066f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066f2:	f003 0303 	and.w	r3, r3, #3
 80066f6:	2b03      	cmp	r3, #3
 80066f8:	d101      	bne.n	80066fe <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80066fa:	2301      	movs	r3, #1
 80066fc:	e099      	b.n	8006832 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80066fe:	4b4f      	ldr	r3, [pc, #316]	; (800683c <RCCEx_PLL3_Config+0x15c>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	4a4e      	ldr	r2, [pc, #312]	; (800683c <RCCEx_PLL3_Config+0x15c>)
 8006704:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006708:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800670a:	f7fb f9e1 	bl	8001ad0 <HAL_GetTick>
 800670e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006710:	e008      	b.n	8006724 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006712:	f7fb f9dd 	bl	8001ad0 <HAL_GetTick>
 8006716:	4602      	mov	r2, r0
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	1ad3      	subs	r3, r2, r3
 800671c:	2b02      	cmp	r3, #2
 800671e:	d901      	bls.n	8006724 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006720:	2303      	movs	r3, #3
 8006722:	e086      	b.n	8006832 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006724:	4b45      	ldr	r3, [pc, #276]	; (800683c <RCCEx_PLL3_Config+0x15c>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800672c:	2b00      	cmp	r3, #0
 800672e:	d1f0      	bne.n	8006712 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006730:	4b42      	ldr	r3, [pc, #264]	; (800683c <RCCEx_PLL3_Config+0x15c>)
 8006732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006734:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	051b      	lsls	r3, r3, #20
 800673e:	493f      	ldr	r1, [pc, #252]	; (800683c <RCCEx_PLL3_Config+0x15c>)
 8006740:	4313      	orrs	r3, r2
 8006742:	628b      	str	r3, [r1, #40]	; 0x28
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	3b01      	subs	r3, #1
 800674a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	689b      	ldr	r3, [r3, #8]
 8006752:	3b01      	subs	r3, #1
 8006754:	025b      	lsls	r3, r3, #9
 8006756:	b29b      	uxth	r3, r3
 8006758:	431a      	orrs	r2, r3
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	68db      	ldr	r3, [r3, #12]
 800675e:	3b01      	subs	r3, #1
 8006760:	041b      	lsls	r3, r3, #16
 8006762:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006766:	431a      	orrs	r2, r3
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	691b      	ldr	r3, [r3, #16]
 800676c:	3b01      	subs	r3, #1
 800676e:	061b      	lsls	r3, r3, #24
 8006770:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006774:	4931      	ldr	r1, [pc, #196]	; (800683c <RCCEx_PLL3_Config+0x15c>)
 8006776:	4313      	orrs	r3, r2
 8006778:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800677a:	4b30      	ldr	r3, [pc, #192]	; (800683c <RCCEx_PLL3_Config+0x15c>)
 800677c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800677e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	695b      	ldr	r3, [r3, #20]
 8006786:	492d      	ldr	r1, [pc, #180]	; (800683c <RCCEx_PLL3_Config+0x15c>)
 8006788:	4313      	orrs	r3, r2
 800678a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800678c:	4b2b      	ldr	r3, [pc, #172]	; (800683c <RCCEx_PLL3_Config+0x15c>)
 800678e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006790:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	699b      	ldr	r3, [r3, #24]
 8006798:	4928      	ldr	r1, [pc, #160]	; (800683c <RCCEx_PLL3_Config+0x15c>)
 800679a:	4313      	orrs	r3, r2
 800679c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800679e:	4b27      	ldr	r3, [pc, #156]	; (800683c <RCCEx_PLL3_Config+0x15c>)
 80067a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067a2:	4a26      	ldr	r2, [pc, #152]	; (800683c <RCCEx_PLL3_Config+0x15c>)
 80067a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80067a8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80067aa:	4b24      	ldr	r3, [pc, #144]	; (800683c <RCCEx_PLL3_Config+0x15c>)
 80067ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80067ae:	4b24      	ldr	r3, [pc, #144]	; (8006840 <RCCEx_PLL3_Config+0x160>)
 80067b0:	4013      	ands	r3, r2
 80067b2:	687a      	ldr	r2, [r7, #4]
 80067b4:	69d2      	ldr	r2, [r2, #28]
 80067b6:	00d2      	lsls	r2, r2, #3
 80067b8:	4920      	ldr	r1, [pc, #128]	; (800683c <RCCEx_PLL3_Config+0x15c>)
 80067ba:	4313      	orrs	r3, r2
 80067bc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80067be:	4b1f      	ldr	r3, [pc, #124]	; (800683c <RCCEx_PLL3_Config+0x15c>)
 80067c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067c2:	4a1e      	ldr	r2, [pc, #120]	; (800683c <RCCEx_PLL3_Config+0x15c>)
 80067c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067c8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d106      	bne.n	80067de <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80067d0:	4b1a      	ldr	r3, [pc, #104]	; (800683c <RCCEx_PLL3_Config+0x15c>)
 80067d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067d4:	4a19      	ldr	r2, [pc, #100]	; (800683c <RCCEx_PLL3_Config+0x15c>)
 80067d6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80067da:	62d3      	str	r3, [r2, #44]	; 0x2c
 80067dc:	e00f      	b.n	80067fe <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	2b01      	cmp	r3, #1
 80067e2:	d106      	bne.n	80067f2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80067e4:	4b15      	ldr	r3, [pc, #84]	; (800683c <RCCEx_PLL3_Config+0x15c>)
 80067e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067e8:	4a14      	ldr	r2, [pc, #80]	; (800683c <RCCEx_PLL3_Config+0x15c>)
 80067ea:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80067ee:	62d3      	str	r3, [r2, #44]	; 0x2c
 80067f0:	e005      	b.n	80067fe <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80067f2:	4b12      	ldr	r3, [pc, #72]	; (800683c <RCCEx_PLL3_Config+0x15c>)
 80067f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067f6:	4a11      	ldr	r2, [pc, #68]	; (800683c <RCCEx_PLL3_Config+0x15c>)
 80067f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80067fc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80067fe:	4b0f      	ldr	r3, [pc, #60]	; (800683c <RCCEx_PLL3_Config+0x15c>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4a0e      	ldr	r2, [pc, #56]	; (800683c <RCCEx_PLL3_Config+0x15c>)
 8006804:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006808:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800680a:	f7fb f961 	bl	8001ad0 <HAL_GetTick>
 800680e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006810:	e008      	b.n	8006824 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006812:	f7fb f95d 	bl	8001ad0 <HAL_GetTick>
 8006816:	4602      	mov	r2, r0
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	1ad3      	subs	r3, r2, r3
 800681c:	2b02      	cmp	r3, #2
 800681e:	d901      	bls.n	8006824 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006820:	2303      	movs	r3, #3
 8006822:	e006      	b.n	8006832 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006824:	4b05      	ldr	r3, [pc, #20]	; (800683c <RCCEx_PLL3_Config+0x15c>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800682c:	2b00      	cmp	r3, #0
 800682e:	d0f0      	beq.n	8006812 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006830:	7bfb      	ldrb	r3, [r7, #15]
}
 8006832:	4618      	mov	r0, r3
 8006834:	3710      	adds	r7, #16
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}
 800683a:	bf00      	nop
 800683c:	58024400 	.word	0x58024400
 8006840:	ffff0007 	.word	0xffff0007

08006844 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b082      	sub	sp, #8
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d101      	bne.n	8006856 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006852:	2301      	movs	r3, #1
 8006854:	e042      	b.n	80068dc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800685c:	2b00      	cmp	r3, #0
 800685e:	d106      	bne.n	800686e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2200      	movs	r2, #0
 8006864:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f7fa fab9 	bl	8000de0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2224      	movs	r2, #36	; 0x24
 8006872:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	681a      	ldr	r2, [r3, #0]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f022 0201 	bic.w	r2, r2, #1
 8006884:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f000 f82c 	bl	80068e4 <UART_SetConfig>
 800688c:	4603      	mov	r3, r0
 800688e:	2b01      	cmp	r3, #1
 8006890:	d101      	bne.n	8006896 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006892:	2301      	movs	r3, #1
 8006894:	e022      	b.n	80068dc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800689a:	2b00      	cmp	r3, #0
 800689c:	d002      	beq.n	80068a4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	f000 fd80 	bl	80073a4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	685a      	ldr	r2, [r3, #4]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80068b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	689a      	ldr	r2, [r3, #8]
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80068c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	681a      	ldr	r2, [r3, #0]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f042 0201 	orr.w	r2, r2, #1
 80068d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	f000 fe07 	bl	80074e8 <UART_CheckIdleState>
 80068da:	4603      	mov	r3, r0
}
 80068dc:	4618      	mov	r0, r3
 80068de:	3708      	adds	r7, #8
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}

080068e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80068e4:	b5b0      	push	{r4, r5, r7, lr}
 80068e6:	b08e      	sub	sp, #56	; 0x38
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80068ec:	2300      	movs	r3, #0
 80068ee:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	689a      	ldr	r2, [r3, #8]
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	691b      	ldr	r3, [r3, #16]
 80068fa:	431a      	orrs	r2, r3
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	695b      	ldr	r3, [r3, #20]
 8006900:	431a      	orrs	r2, r3
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	69db      	ldr	r3, [r3, #28]
 8006906:	4313      	orrs	r3, r2
 8006908:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	681a      	ldr	r2, [r3, #0]
 8006910:	4bbf      	ldr	r3, [pc, #764]	; (8006c10 <UART_SetConfig+0x32c>)
 8006912:	4013      	ands	r3, r2
 8006914:	687a      	ldr	r2, [r7, #4]
 8006916:	6812      	ldr	r2, [r2, #0]
 8006918:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800691a:	430b      	orrs	r3, r1
 800691c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	68da      	ldr	r2, [r3, #12]
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	430a      	orrs	r2, r1
 8006932:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	699b      	ldr	r3, [r3, #24]
 8006938:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4ab5      	ldr	r2, [pc, #724]	; (8006c14 <UART_SetConfig+0x330>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d004      	beq.n	800694e <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6a1b      	ldr	r3, [r3, #32]
 8006948:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800694a:	4313      	orrs	r3, r2
 800694c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	689a      	ldr	r2, [r3, #8]
 8006954:	4bb0      	ldr	r3, [pc, #704]	; (8006c18 <UART_SetConfig+0x334>)
 8006956:	4013      	ands	r3, r2
 8006958:	687a      	ldr	r2, [r7, #4]
 800695a:	6812      	ldr	r2, [r2, #0]
 800695c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800695e:	430b      	orrs	r3, r1
 8006960:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006968:	f023 010f 	bic.w	r1, r3, #15
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	430a      	orrs	r2, r1
 8006976:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4aa7      	ldr	r2, [pc, #668]	; (8006c1c <UART_SetConfig+0x338>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d176      	bne.n	8006a70 <UART_SetConfig+0x18c>
 8006982:	4ba7      	ldr	r3, [pc, #668]	; (8006c20 <UART_SetConfig+0x33c>)
 8006984:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006986:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800698a:	2b28      	cmp	r3, #40	; 0x28
 800698c:	d86c      	bhi.n	8006a68 <UART_SetConfig+0x184>
 800698e:	a201      	add	r2, pc, #4	; (adr r2, 8006994 <UART_SetConfig+0xb0>)
 8006990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006994:	08006a39 	.word	0x08006a39
 8006998:	08006a69 	.word	0x08006a69
 800699c:	08006a69 	.word	0x08006a69
 80069a0:	08006a69 	.word	0x08006a69
 80069a4:	08006a69 	.word	0x08006a69
 80069a8:	08006a69 	.word	0x08006a69
 80069ac:	08006a69 	.word	0x08006a69
 80069b0:	08006a69 	.word	0x08006a69
 80069b4:	08006a41 	.word	0x08006a41
 80069b8:	08006a69 	.word	0x08006a69
 80069bc:	08006a69 	.word	0x08006a69
 80069c0:	08006a69 	.word	0x08006a69
 80069c4:	08006a69 	.word	0x08006a69
 80069c8:	08006a69 	.word	0x08006a69
 80069cc:	08006a69 	.word	0x08006a69
 80069d0:	08006a69 	.word	0x08006a69
 80069d4:	08006a49 	.word	0x08006a49
 80069d8:	08006a69 	.word	0x08006a69
 80069dc:	08006a69 	.word	0x08006a69
 80069e0:	08006a69 	.word	0x08006a69
 80069e4:	08006a69 	.word	0x08006a69
 80069e8:	08006a69 	.word	0x08006a69
 80069ec:	08006a69 	.word	0x08006a69
 80069f0:	08006a69 	.word	0x08006a69
 80069f4:	08006a51 	.word	0x08006a51
 80069f8:	08006a69 	.word	0x08006a69
 80069fc:	08006a69 	.word	0x08006a69
 8006a00:	08006a69 	.word	0x08006a69
 8006a04:	08006a69 	.word	0x08006a69
 8006a08:	08006a69 	.word	0x08006a69
 8006a0c:	08006a69 	.word	0x08006a69
 8006a10:	08006a69 	.word	0x08006a69
 8006a14:	08006a59 	.word	0x08006a59
 8006a18:	08006a69 	.word	0x08006a69
 8006a1c:	08006a69 	.word	0x08006a69
 8006a20:	08006a69 	.word	0x08006a69
 8006a24:	08006a69 	.word	0x08006a69
 8006a28:	08006a69 	.word	0x08006a69
 8006a2c:	08006a69 	.word	0x08006a69
 8006a30:	08006a69 	.word	0x08006a69
 8006a34:	08006a61 	.word	0x08006a61
 8006a38:	2301      	movs	r3, #1
 8006a3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a3e:	e222      	b.n	8006e86 <UART_SetConfig+0x5a2>
 8006a40:	2304      	movs	r3, #4
 8006a42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a46:	e21e      	b.n	8006e86 <UART_SetConfig+0x5a2>
 8006a48:	2308      	movs	r3, #8
 8006a4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a4e:	e21a      	b.n	8006e86 <UART_SetConfig+0x5a2>
 8006a50:	2310      	movs	r3, #16
 8006a52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a56:	e216      	b.n	8006e86 <UART_SetConfig+0x5a2>
 8006a58:	2320      	movs	r3, #32
 8006a5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a5e:	e212      	b.n	8006e86 <UART_SetConfig+0x5a2>
 8006a60:	2340      	movs	r3, #64	; 0x40
 8006a62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a66:	e20e      	b.n	8006e86 <UART_SetConfig+0x5a2>
 8006a68:	2380      	movs	r3, #128	; 0x80
 8006a6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a6e:	e20a      	b.n	8006e86 <UART_SetConfig+0x5a2>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4a6b      	ldr	r2, [pc, #428]	; (8006c24 <UART_SetConfig+0x340>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d130      	bne.n	8006adc <UART_SetConfig+0x1f8>
 8006a7a:	4b69      	ldr	r3, [pc, #420]	; (8006c20 <UART_SetConfig+0x33c>)
 8006a7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a7e:	f003 0307 	and.w	r3, r3, #7
 8006a82:	2b05      	cmp	r3, #5
 8006a84:	d826      	bhi.n	8006ad4 <UART_SetConfig+0x1f0>
 8006a86:	a201      	add	r2, pc, #4	; (adr r2, 8006a8c <UART_SetConfig+0x1a8>)
 8006a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a8c:	08006aa5 	.word	0x08006aa5
 8006a90:	08006aad 	.word	0x08006aad
 8006a94:	08006ab5 	.word	0x08006ab5
 8006a98:	08006abd 	.word	0x08006abd
 8006a9c:	08006ac5 	.word	0x08006ac5
 8006aa0:	08006acd 	.word	0x08006acd
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006aaa:	e1ec      	b.n	8006e86 <UART_SetConfig+0x5a2>
 8006aac:	2304      	movs	r3, #4
 8006aae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ab2:	e1e8      	b.n	8006e86 <UART_SetConfig+0x5a2>
 8006ab4:	2308      	movs	r3, #8
 8006ab6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006aba:	e1e4      	b.n	8006e86 <UART_SetConfig+0x5a2>
 8006abc:	2310      	movs	r3, #16
 8006abe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ac2:	e1e0      	b.n	8006e86 <UART_SetConfig+0x5a2>
 8006ac4:	2320      	movs	r3, #32
 8006ac6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006aca:	e1dc      	b.n	8006e86 <UART_SetConfig+0x5a2>
 8006acc:	2340      	movs	r3, #64	; 0x40
 8006ace:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ad2:	e1d8      	b.n	8006e86 <UART_SetConfig+0x5a2>
 8006ad4:	2380      	movs	r3, #128	; 0x80
 8006ad6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ada:	e1d4      	b.n	8006e86 <UART_SetConfig+0x5a2>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4a51      	ldr	r2, [pc, #324]	; (8006c28 <UART_SetConfig+0x344>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d130      	bne.n	8006b48 <UART_SetConfig+0x264>
 8006ae6:	4b4e      	ldr	r3, [pc, #312]	; (8006c20 <UART_SetConfig+0x33c>)
 8006ae8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006aea:	f003 0307 	and.w	r3, r3, #7
 8006aee:	2b05      	cmp	r3, #5
 8006af0:	d826      	bhi.n	8006b40 <UART_SetConfig+0x25c>
 8006af2:	a201      	add	r2, pc, #4	; (adr r2, 8006af8 <UART_SetConfig+0x214>)
 8006af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006af8:	08006b11 	.word	0x08006b11
 8006afc:	08006b19 	.word	0x08006b19
 8006b00:	08006b21 	.word	0x08006b21
 8006b04:	08006b29 	.word	0x08006b29
 8006b08:	08006b31 	.word	0x08006b31
 8006b0c:	08006b39 	.word	0x08006b39
 8006b10:	2300      	movs	r3, #0
 8006b12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b16:	e1b6      	b.n	8006e86 <UART_SetConfig+0x5a2>
 8006b18:	2304      	movs	r3, #4
 8006b1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b1e:	e1b2      	b.n	8006e86 <UART_SetConfig+0x5a2>
 8006b20:	2308      	movs	r3, #8
 8006b22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b26:	e1ae      	b.n	8006e86 <UART_SetConfig+0x5a2>
 8006b28:	2310      	movs	r3, #16
 8006b2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b2e:	e1aa      	b.n	8006e86 <UART_SetConfig+0x5a2>
 8006b30:	2320      	movs	r3, #32
 8006b32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b36:	e1a6      	b.n	8006e86 <UART_SetConfig+0x5a2>
 8006b38:	2340      	movs	r3, #64	; 0x40
 8006b3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b3e:	e1a2      	b.n	8006e86 <UART_SetConfig+0x5a2>
 8006b40:	2380      	movs	r3, #128	; 0x80
 8006b42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b46:	e19e      	b.n	8006e86 <UART_SetConfig+0x5a2>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a37      	ldr	r2, [pc, #220]	; (8006c2c <UART_SetConfig+0x348>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d130      	bne.n	8006bb4 <UART_SetConfig+0x2d0>
 8006b52:	4b33      	ldr	r3, [pc, #204]	; (8006c20 <UART_SetConfig+0x33c>)
 8006b54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b56:	f003 0307 	and.w	r3, r3, #7
 8006b5a:	2b05      	cmp	r3, #5
 8006b5c:	d826      	bhi.n	8006bac <UART_SetConfig+0x2c8>
 8006b5e:	a201      	add	r2, pc, #4	; (adr r2, 8006b64 <UART_SetConfig+0x280>)
 8006b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b64:	08006b7d 	.word	0x08006b7d
 8006b68:	08006b85 	.word	0x08006b85
 8006b6c:	08006b8d 	.word	0x08006b8d
 8006b70:	08006b95 	.word	0x08006b95
 8006b74:	08006b9d 	.word	0x08006b9d
 8006b78:	08006ba5 	.word	0x08006ba5
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b82:	e180      	b.n	8006e86 <UART_SetConfig+0x5a2>
 8006b84:	2304      	movs	r3, #4
 8006b86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b8a:	e17c      	b.n	8006e86 <UART_SetConfig+0x5a2>
 8006b8c:	2308      	movs	r3, #8
 8006b8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b92:	e178      	b.n	8006e86 <UART_SetConfig+0x5a2>
 8006b94:	2310      	movs	r3, #16
 8006b96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b9a:	e174      	b.n	8006e86 <UART_SetConfig+0x5a2>
 8006b9c:	2320      	movs	r3, #32
 8006b9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ba2:	e170      	b.n	8006e86 <UART_SetConfig+0x5a2>
 8006ba4:	2340      	movs	r3, #64	; 0x40
 8006ba6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006baa:	e16c      	b.n	8006e86 <UART_SetConfig+0x5a2>
 8006bac:	2380      	movs	r3, #128	; 0x80
 8006bae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006bb2:	e168      	b.n	8006e86 <UART_SetConfig+0x5a2>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a1d      	ldr	r2, [pc, #116]	; (8006c30 <UART_SetConfig+0x34c>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d142      	bne.n	8006c44 <UART_SetConfig+0x360>
 8006bbe:	4b18      	ldr	r3, [pc, #96]	; (8006c20 <UART_SetConfig+0x33c>)
 8006bc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bc2:	f003 0307 	and.w	r3, r3, #7
 8006bc6:	2b05      	cmp	r3, #5
 8006bc8:	d838      	bhi.n	8006c3c <UART_SetConfig+0x358>
 8006bca:	a201      	add	r2, pc, #4	; (adr r2, 8006bd0 <UART_SetConfig+0x2ec>)
 8006bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bd0:	08006be9 	.word	0x08006be9
 8006bd4:	08006bf1 	.word	0x08006bf1
 8006bd8:	08006bf9 	.word	0x08006bf9
 8006bdc:	08006c01 	.word	0x08006c01
 8006be0:	08006c09 	.word	0x08006c09
 8006be4:	08006c35 	.word	0x08006c35
 8006be8:	2300      	movs	r3, #0
 8006bea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006bee:	e14a      	b.n	8006e86 <UART_SetConfig+0x5a2>
 8006bf0:	2304      	movs	r3, #4
 8006bf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006bf6:	e146      	b.n	8006e86 <UART_SetConfig+0x5a2>
 8006bf8:	2308      	movs	r3, #8
 8006bfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006bfe:	e142      	b.n	8006e86 <UART_SetConfig+0x5a2>
 8006c00:	2310      	movs	r3, #16
 8006c02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c06:	e13e      	b.n	8006e86 <UART_SetConfig+0x5a2>
 8006c08:	2320      	movs	r3, #32
 8006c0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c0e:	e13a      	b.n	8006e86 <UART_SetConfig+0x5a2>
 8006c10:	cfff69f3 	.word	0xcfff69f3
 8006c14:	58000c00 	.word	0x58000c00
 8006c18:	11fff4ff 	.word	0x11fff4ff
 8006c1c:	40011000 	.word	0x40011000
 8006c20:	58024400 	.word	0x58024400
 8006c24:	40004400 	.word	0x40004400
 8006c28:	40004800 	.word	0x40004800
 8006c2c:	40004c00 	.word	0x40004c00
 8006c30:	40005000 	.word	0x40005000
 8006c34:	2340      	movs	r3, #64	; 0x40
 8006c36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c3a:	e124      	b.n	8006e86 <UART_SetConfig+0x5a2>
 8006c3c:	2380      	movs	r3, #128	; 0x80
 8006c3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c42:	e120      	b.n	8006e86 <UART_SetConfig+0x5a2>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	4acc      	ldr	r2, [pc, #816]	; (8006f7c <UART_SetConfig+0x698>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d176      	bne.n	8006d3c <UART_SetConfig+0x458>
 8006c4e:	4bcc      	ldr	r3, [pc, #816]	; (8006f80 <UART_SetConfig+0x69c>)
 8006c50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c52:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006c56:	2b28      	cmp	r3, #40	; 0x28
 8006c58:	d86c      	bhi.n	8006d34 <UART_SetConfig+0x450>
 8006c5a:	a201      	add	r2, pc, #4	; (adr r2, 8006c60 <UART_SetConfig+0x37c>)
 8006c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c60:	08006d05 	.word	0x08006d05
 8006c64:	08006d35 	.word	0x08006d35
 8006c68:	08006d35 	.word	0x08006d35
 8006c6c:	08006d35 	.word	0x08006d35
 8006c70:	08006d35 	.word	0x08006d35
 8006c74:	08006d35 	.word	0x08006d35
 8006c78:	08006d35 	.word	0x08006d35
 8006c7c:	08006d35 	.word	0x08006d35
 8006c80:	08006d0d 	.word	0x08006d0d
 8006c84:	08006d35 	.word	0x08006d35
 8006c88:	08006d35 	.word	0x08006d35
 8006c8c:	08006d35 	.word	0x08006d35
 8006c90:	08006d35 	.word	0x08006d35
 8006c94:	08006d35 	.word	0x08006d35
 8006c98:	08006d35 	.word	0x08006d35
 8006c9c:	08006d35 	.word	0x08006d35
 8006ca0:	08006d15 	.word	0x08006d15
 8006ca4:	08006d35 	.word	0x08006d35
 8006ca8:	08006d35 	.word	0x08006d35
 8006cac:	08006d35 	.word	0x08006d35
 8006cb0:	08006d35 	.word	0x08006d35
 8006cb4:	08006d35 	.word	0x08006d35
 8006cb8:	08006d35 	.word	0x08006d35
 8006cbc:	08006d35 	.word	0x08006d35
 8006cc0:	08006d1d 	.word	0x08006d1d
 8006cc4:	08006d35 	.word	0x08006d35
 8006cc8:	08006d35 	.word	0x08006d35
 8006ccc:	08006d35 	.word	0x08006d35
 8006cd0:	08006d35 	.word	0x08006d35
 8006cd4:	08006d35 	.word	0x08006d35
 8006cd8:	08006d35 	.word	0x08006d35
 8006cdc:	08006d35 	.word	0x08006d35
 8006ce0:	08006d25 	.word	0x08006d25
 8006ce4:	08006d35 	.word	0x08006d35
 8006ce8:	08006d35 	.word	0x08006d35
 8006cec:	08006d35 	.word	0x08006d35
 8006cf0:	08006d35 	.word	0x08006d35
 8006cf4:	08006d35 	.word	0x08006d35
 8006cf8:	08006d35 	.word	0x08006d35
 8006cfc:	08006d35 	.word	0x08006d35
 8006d00:	08006d2d 	.word	0x08006d2d
 8006d04:	2301      	movs	r3, #1
 8006d06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d0a:	e0bc      	b.n	8006e86 <UART_SetConfig+0x5a2>
 8006d0c:	2304      	movs	r3, #4
 8006d0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d12:	e0b8      	b.n	8006e86 <UART_SetConfig+0x5a2>
 8006d14:	2308      	movs	r3, #8
 8006d16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d1a:	e0b4      	b.n	8006e86 <UART_SetConfig+0x5a2>
 8006d1c:	2310      	movs	r3, #16
 8006d1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d22:	e0b0      	b.n	8006e86 <UART_SetConfig+0x5a2>
 8006d24:	2320      	movs	r3, #32
 8006d26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d2a:	e0ac      	b.n	8006e86 <UART_SetConfig+0x5a2>
 8006d2c:	2340      	movs	r3, #64	; 0x40
 8006d2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d32:	e0a8      	b.n	8006e86 <UART_SetConfig+0x5a2>
 8006d34:	2380      	movs	r3, #128	; 0x80
 8006d36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d3a:	e0a4      	b.n	8006e86 <UART_SetConfig+0x5a2>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	4a90      	ldr	r2, [pc, #576]	; (8006f84 <UART_SetConfig+0x6a0>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d130      	bne.n	8006da8 <UART_SetConfig+0x4c4>
 8006d46:	4b8e      	ldr	r3, [pc, #568]	; (8006f80 <UART_SetConfig+0x69c>)
 8006d48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d4a:	f003 0307 	and.w	r3, r3, #7
 8006d4e:	2b05      	cmp	r3, #5
 8006d50:	d826      	bhi.n	8006da0 <UART_SetConfig+0x4bc>
 8006d52:	a201      	add	r2, pc, #4	; (adr r2, 8006d58 <UART_SetConfig+0x474>)
 8006d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d58:	08006d71 	.word	0x08006d71
 8006d5c:	08006d79 	.word	0x08006d79
 8006d60:	08006d81 	.word	0x08006d81
 8006d64:	08006d89 	.word	0x08006d89
 8006d68:	08006d91 	.word	0x08006d91
 8006d6c:	08006d99 	.word	0x08006d99
 8006d70:	2300      	movs	r3, #0
 8006d72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d76:	e086      	b.n	8006e86 <UART_SetConfig+0x5a2>
 8006d78:	2304      	movs	r3, #4
 8006d7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d7e:	e082      	b.n	8006e86 <UART_SetConfig+0x5a2>
 8006d80:	2308      	movs	r3, #8
 8006d82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d86:	e07e      	b.n	8006e86 <UART_SetConfig+0x5a2>
 8006d88:	2310      	movs	r3, #16
 8006d8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d8e:	e07a      	b.n	8006e86 <UART_SetConfig+0x5a2>
 8006d90:	2320      	movs	r3, #32
 8006d92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d96:	e076      	b.n	8006e86 <UART_SetConfig+0x5a2>
 8006d98:	2340      	movs	r3, #64	; 0x40
 8006d9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d9e:	e072      	b.n	8006e86 <UART_SetConfig+0x5a2>
 8006da0:	2380      	movs	r3, #128	; 0x80
 8006da2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006da6:	e06e      	b.n	8006e86 <UART_SetConfig+0x5a2>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4a76      	ldr	r2, [pc, #472]	; (8006f88 <UART_SetConfig+0x6a4>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d130      	bne.n	8006e14 <UART_SetConfig+0x530>
 8006db2:	4b73      	ldr	r3, [pc, #460]	; (8006f80 <UART_SetConfig+0x69c>)
 8006db4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006db6:	f003 0307 	and.w	r3, r3, #7
 8006dba:	2b05      	cmp	r3, #5
 8006dbc:	d826      	bhi.n	8006e0c <UART_SetConfig+0x528>
 8006dbe:	a201      	add	r2, pc, #4	; (adr r2, 8006dc4 <UART_SetConfig+0x4e0>)
 8006dc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dc4:	08006ddd 	.word	0x08006ddd
 8006dc8:	08006de5 	.word	0x08006de5
 8006dcc:	08006ded 	.word	0x08006ded
 8006dd0:	08006df5 	.word	0x08006df5
 8006dd4:	08006dfd 	.word	0x08006dfd
 8006dd8:	08006e05 	.word	0x08006e05
 8006ddc:	2300      	movs	r3, #0
 8006dde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006de2:	e050      	b.n	8006e86 <UART_SetConfig+0x5a2>
 8006de4:	2304      	movs	r3, #4
 8006de6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006dea:	e04c      	b.n	8006e86 <UART_SetConfig+0x5a2>
 8006dec:	2308      	movs	r3, #8
 8006dee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006df2:	e048      	b.n	8006e86 <UART_SetConfig+0x5a2>
 8006df4:	2310      	movs	r3, #16
 8006df6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006dfa:	e044      	b.n	8006e86 <UART_SetConfig+0x5a2>
 8006dfc:	2320      	movs	r3, #32
 8006dfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e02:	e040      	b.n	8006e86 <UART_SetConfig+0x5a2>
 8006e04:	2340      	movs	r3, #64	; 0x40
 8006e06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e0a:	e03c      	b.n	8006e86 <UART_SetConfig+0x5a2>
 8006e0c:	2380      	movs	r3, #128	; 0x80
 8006e0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e12:	e038      	b.n	8006e86 <UART_SetConfig+0x5a2>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4a5c      	ldr	r2, [pc, #368]	; (8006f8c <UART_SetConfig+0x6a8>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d130      	bne.n	8006e80 <UART_SetConfig+0x59c>
 8006e1e:	4b58      	ldr	r3, [pc, #352]	; (8006f80 <UART_SetConfig+0x69c>)
 8006e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e22:	f003 0307 	and.w	r3, r3, #7
 8006e26:	2b05      	cmp	r3, #5
 8006e28:	d826      	bhi.n	8006e78 <UART_SetConfig+0x594>
 8006e2a:	a201      	add	r2, pc, #4	; (adr r2, 8006e30 <UART_SetConfig+0x54c>)
 8006e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e30:	08006e49 	.word	0x08006e49
 8006e34:	08006e51 	.word	0x08006e51
 8006e38:	08006e59 	.word	0x08006e59
 8006e3c:	08006e61 	.word	0x08006e61
 8006e40:	08006e69 	.word	0x08006e69
 8006e44:	08006e71 	.word	0x08006e71
 8006e48:	2302      	movs	r3, #2
 8006e4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e4e:	e01a      	b.n	8006e86 <UART_SetConfig+0x5a2>
 8006e50:	2304      	movs	r3, #4
 8006e52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e56:	e016      	b.n	8006e86 <UART_SetConfig+0x5a2>
 8006e58:	2308      	movs	r3, #8
 8006e5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e5e:	e012      	b.n	8006e86 <UART_SetConfig+0x5a2>
 8006e60:	2310      	movs	r3, #16
 8006e62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e66:	e00e      	b.n	8006e86 <UART_SetConfig+0x5a2>
 8006e68:	2320      	movs	r3, #32
 8006e6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e6e:	e00a      	b.n	8006e86 <UART_SetConfig+0x5a2>
 8006e70:	2340      	movs	r3, #64	; 0x40
 8006e72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e76:	e006      	b.n	8006e86 <UART_SetConfig+0x5a2>
 8006e78:	2380      	movs	r3, #128	; 0x80
 8006e7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e7e:	e002      	b.n	8006e86 <UART_SetConfig+0x5a2>
 8006e80:	2380      	movs	r3, #128	; 0x80
 8006e82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4a40      	ldr	r2, [pc, #256]	; (8006f8c <UART_SetConfig+0x6a8>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	f040 80ef 	bne.w	8007070 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006e92:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006e96:	2b20      	cmp	r3, #32
 8006e98:	dc46      	bgt.n	8006f28 <UART_SetConfig+0x644>
 8006e9a:	2b02      	cmp	r3, #2
 8006e9c:	f2c0 8081 	blt.w	8006fa2 <UART_SetConfig+0x6be>
 8006ea0:	3b02      	subs	r3, #2
 8006ea2:	2b1e      	cmp	r3, #30
 8006ea4:	d87d      	bhi.n	8006fa2 <UART_SetConfig+0x6be>
 8006ea6:	a201      	add	r2, pc, #4	; (adr r2, 8006eac <UART_SetConfig+0x5c8>)
 8006ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eac:	08006f2f 	.word	0x08006f2f
 8006eb0:	08006fa3 	.word	0x08006fa3
 8006eb4:	08006f37 	.word	0x08006f37
 8006eb8:	08006fa3 	.word	0x08006fa3
 8006ebc:	08006fa3 	.word	0x08006fa3
 8006ec0:	08006fa3 	.word	0x08006fa3
 8006ec4:	08006f47 	.word	0x08006f47
 8006ec8:	08006fa3 	.word	0x08006fa3
 8006ecc:	08006fa3 	.word	0x08006fa3
 8006ed0:	08006fa3 	.word	0x08006fa3
 8006ed4:	08006fa3 	.word	0x08006fa3
 8006ed8:	08006fa3 	.word	0x08006fa3
 8006edc:	08006fa3 	.word	0x08006fa3
 8006ee0:	08006fa3 	.word	0x08006fa3
 8006ee4:	08006f57 	.word	0x08006f57
 8006ee8:	08006fa3 	.word	0x08006fa3
 8006eec:	08006fa3 	.word	0x08006fa3
 8006ef0:	08006fa3 	.word	0x08006fa3
 8006ef4:	08006fa3 	.word	0x08006fa3
 8006ef8:	08006fa3 	.word	0x08006fa3
 8006efc:	08006fa3 	.word	0x08006fa3
 8006f00:	08006fa3 	.word	0x08006fa3
 8006f04:	08006fa3 	.word	0x08006fa3
 8006f08:	08006fa3 	.word	0x08006fa3
 8006f0c:	08006fa3 	.word	0x08006fa3
 8006f10:	08006fa3 	.word	0x08006fa3
 8006f14:	08006fa3 	.word	0x08006fa3
 8006f18:	08006fa3 	.word	0x08006fa3
 8006f1c:	08006fa3 	.word	0x08006fa3
 8006f20:	08006fa3 	.word	0x08006fa3
 8006f24:	08006f95 	.word	0x08006f95
 8006f28:	2b40      	cmp	r3, #64	; 0x40
 8006f2a:	d036      	beq.n	8006f9a <UART_SetConfig+0x6b6>
 8006f2c:	e039      	b.n	8006fa2 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006f2e:	f7ff f867 	bl	8006000 <HAL_RCCEx_GetD3PCLK1Freq>
 8006f32:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006f34:	e03b      	b.n	8006fae <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f36:	f107 0314 	add.w	r3, r7, #20
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	f7ff f876 	bl	800602c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006f40:	69bb      	ldr	r3, [r7, #24]
 8006f42:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006f44:	e033      	b.n	8006fae <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f46:	f107 0308 	add.w	r3, r7, #8
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	f7ff f9c2 	bl	80062d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006f54:	e02b      	b.n	8006fae <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006f56:	4b0a      	ldr	r3, [pc, #40]	; (8006f80 <UART_SetConfig+0x69c>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f003 0320 	and.w	r3, r3, #32
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d009      	beq.n	8006f76 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006f62:	4b07      	ldr	r3, [pc, #28]	; (8006f80 <UART_SetConfig+0x69c>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	08db      	lsrs	r3, r3, #3
 8006f68:	f003 0303 	and.w	r3, r3, #3
 8006f6c:	4a08      	ldr	r2, [pc, #32]	; (8006f90 <UART_SetConfig+0x6ac>)
 8006f6e:	fa22 f303 	lsr.w	r3, r2, r3
 8006f72:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006f74:	e01b      	b.n	8006fae <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8006f76:	4b06      	ldr	r3, [pc, #24]	; (8006f90 <UART_SetConfig+0x6ac>)
 8006f78:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006f7a:	e018      	b.n	8006fae <UART_SetConfig+0x6ca>
 8006f7c:	40011400 	.word	0x40011400
 8006f80:	58024400 	.word	0x58024400
 8006f84:	40007800 	.word	0x40007800
 8006f88:	40007c00 	.word	0x40007c00
 8006f8c:	58000c00 	.word	0x58000c00
 8006f90:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006f94:	4bc4      	ldr	r3, [pc, #784]	; (80072a8 <UART_SetConfig+0x9c4>)
 8006f96:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006f98:	e009      	b.n	8006fae <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006fa0:	e005      	b.n	8006fae <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006fac:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	f000 81da 	beq.w	800736a <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fba:	4abc      	ldr	r2, [pc, #752]	; (80072ac <UART_SetConfig+0x9c8>)
 8006fbc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006fc0:	461a      	mov	r2, r3
 8006fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fc4:	fbb3 f3f2 	udiv	r3, r3, r2
 8006fc8:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	685a      	ldr	r2, [r3, #4]
 8006fce:	4613      	mov	r3, r2
 8006fd0:	005b      	lsls	r3, r3, #1
 8006fd2:	4413      	add	r3, r2
 8006fd4:	6a3a      	ldr	r2, [r7, #32]
 8006fd6:	429a      	cmp	r2, r3
 8006fd8:	d305      	bcc.n	8006fe6 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	685b      	ldr	r3, [r3, #4]
 8006fde:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006fe0:	6a3a      	ldr	r2, [r7, #32]
 8006fe2:	429a      	cmp	r2, r3
 8006fe4:	d903      	bls.n	8006fee <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006fec:	e1bd      	b.n	800736a <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	f04f 0100 	mov.w	r1, #0
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ffa:	4aac      	ldr	r2, [pc, #688]	; (80072ac <UART_SetConfig+0x9c8>)
 8006ffc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007000:	b29a      	uxth	r2, r3
 8007002:	f04f 0300 	mov.w	r3, #0
 8007006:	f7f9 f9d3 	bl	80003b0 <__aeabi_uldivmod>
 800700a:	4602      	mov	r2, r0
 800700c:	460b      	mov	r3, r1
 800700e:	4610      	mov	r0, r2
 8007010:	4619      	mov	r1, r3
 8007012:	f04f 0200 	mov.w	r2, #0
 8007016:	f04f 0300 	mov.w	r3, #0
 800701a:	020b      	lsls	r3, r1, #8
 800701c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007020:	0202      	lsls	r2, r0, #8
 8007022:	6879      	ldr	r1, [r7, #4]
 8007024:	6849      	ldr	r1, [r1, #4]
 8007026:	0849      	lsrs	r1, r1, #1
 8007028:	4608      	mov	r0, r1
 800702a:	f04f 0100 	mov.w	r1, #0
 800702e:	1814      	adds	r4, r2, r0
 8007030:	eb43 0501 	adc.w	r5, r3, r1
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	685b      	ldr	r3, [r3, #4]
 8007038:	461a      	mov	r2, r3
 800703a:	f04f 0300 	mov.w	r3, #0
 800703e:	4620      	mov	r0, r4
 8007040:	4629      	mov	r1, r5
 8007042:	f7f9 f9b5 	bl	80003b0 <__aeabi_uldivmod>
 8007046:	4602      	mov	r2, r0
 8007048:	460b      	mov	r3, r1
 800704a:	4613      	mov	r3, r2
 800704c:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800704e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007050:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007054:	d308      	bcc.n	8007068 <UART_SetConfig+0x784>
 8007056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007058:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800705c:	d204      	bcs.n	8007068 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007064:	60da      	str	r2, [r3, #12]
 8007066:	e180      	b.n	800736a <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8007068:	2301      	movs	r3, #1
 800706a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800706e:	e17c      	b.n	800736a <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	69db      	ldr	r3, [r3, #28]
 8007074:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007078:	f040 80bf 	bne.w	80071fa <UART_SetConfig+0x916>
  {
    switch (clocksource)
 800707c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007080:	2b20      	cmp	r3, #32
 8007082:	dc49      	bgt.n	8007118 <UART_SetConfig+0x834>
 8007084:	2b00      	cmp	r3, #0
 8007086:	db7c      	blt.n	8007182 <UART_SetConfig+0x89e>
 8007088:	2b20      	cmp	r3, #32
 800708a:	d87a      	bhi.n	8007182 <UART_SetConfig+0x89e>
 800708c:	a201      	add	r2, pc, #4	; (adr r2, 8007094 <UART_SetConfig+0x7b0>)
 800708e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007092:	bf00      	nop
 8007094:	0800711f 	.word	0x0800711f
 8007098:	08007127 	.word	0x08007127
 800709c:	08007183 	.word	0x08007183
 80070a0:	08007183 	.word	0x08007183
 80070a4:	0800712f 	.word	0x0800712f
 80070a8:	08007183 	.word	0x08007183
 80070ac:	08007183 	.word	0x08007183
 80070b0:	08007183 	.word	0x08007183
 80070b4:	0800713f 	.word	0x0800713f
 80070b8:	08007183 	.word	0x08007183
 80070bc:	08007183 	.word	0x08007183
 80070c0:	08007183 	.word	0x08007183
 80070c4:	08007183 	.word	0x08007183
 80070c8:	08007183 	.word	0x08007183
 80070cc:	08007183 	.word	0x08007183
 80070d0:	08007183 	.word	0x08007183
 80070d4:	0800714f 	.word	0x0800714f
 80070d8:	08007183 	.word	0x08007183
 80070dc:	08007183 	.word	0x08007183
 80070e0:	08007183 	.word	0x08007183
 80070e4:	08007183 	.word	0x08007183
 80070e8:	08007183 	.word	0x08007183
 80070ec:	08007183 	.word	0x08007183
 80070f0:	08007183 	.word	0x08007183
 80070f4:	08007183 	.word	0x08007183
 80070f8:	08007183 	.word	0x08007183
 80070fc:	08007183 	.word	0x08007183
 8007100:	08007183 	.word	0x08007183
 8007104:	08007183 	.word	0x08007183
 8007108:	08007183 	.word	0x08007183
 800710c:	08007183 	.word	0x08007183
 8007110:	08007183 	.word	0x08007183
 8007114:	08007175 	.word	0x08007175
 8007118:	2b40      	cmp	r3, #64	; 0x40
 800711a:	d02e      	beq.n	800717a <UART_SetConfig+0x896>
 800711c:	e031      	b.n	8007182 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800711e:	f7fe f803 	bl	8005128 <HAL_RCC_GetPCLK1Freq>
 8007122:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007124:	e033      	b.n	800718e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007126:	f7fe f815 	bl	8005154 <HAL_RCC_GetPCLK2Freq>
 800712a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800712c:	e02f      	b.n	800718e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800712e:	f107 0314 	add.w	r3, r7, #20
 8007132:	4618      	mov	r0, r3
 8007134:	f7fe ff7a 	bl	800602c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007138:	69bb      	ldr	r3, [r7, #24]
 800713a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800713c:	e027      	b.n	800718e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800713e:	f107 0308 	add.w	r3, r7, #8
 8007142:	4618      	mov	r0, r3
 8007144:	f7ff f8c6 	bl	80062d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800714c:	e01f      	b.n	800718e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800714e:	4b58      	ldr	r3, [pc, #352]	; (80072b0 <UART_SetConfig+0x9cc>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f003 0320 	and.w	r3, r3, #32
 8007156:	2b00      	cmp	r3, #0
 8007158:	d009      	beq.n	800716e <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800715a:	4b55      	ldr	r3, [pc, #340]	; (80072b0 <UART_SetConfig+0x9cc>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	08db      	lsrs	r3, r3, #3
 8007160:	f003 0303 	and.w	r3, r3, #3
 8007164:	4a53      	ldr	r2, [pc, #332]	; (80072b4 <UART_SetConfig+0x9d0>)
 8007166:	fa22 f303 	lsr.w	r3, r2, r3
 800716a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800716c:	e00f      	b.n	800718e <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800716e:	4b51      	ldr	r3, [pc, #324]	; (80072b4 <UART_SetConfig+0x9d0>)
 8007170:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007172:	e00c      	b.n	800718e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007174:	4b4c      	ldr	r3, [pc, #304]	; (80072a8 <UART_SetConfig+0x9c4>)
 8007176:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007178:	e009      	b.n	800718e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800717a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800717e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007180:	e005      	b.n	800718e <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8007182:	2300      	movs	r3, #0
 8007184:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007186:	2301      	movs	r3, #1
 8007188:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800718c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800718e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007190:	2b00      	cmp	r3, #0
 8007192:	f000 80ea 	beq.w	800736a <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800719a:	4a44      	ldr	r2, [pc, #272]	; (80072ac <UART_SetConfig+0x9c8>)
 800719c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80071a0:	461a      	mov	r2, r3
 80071a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80071a8:	005a      	lsls	r2, r3, #1
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	685b      	ldr	r3, [r3, #4]
 80071ae:	085b      	lsrs	r3, r3, #1
 80071b0:	441a      	add	r2, r3
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	685b      	ldr	r3, [r3, #4]
 80071b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80071ba:	b29b      	uxth	r3, r3
 80071bc:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80071be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071c0:	2b0f      	cmp	r3, #15
 80071c2:	d916      	bls.n	80071f2 <UART_SetConfig+0x90e>
 80071c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071ca:	d212      	bcs.n	80071f2 <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80071cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ce:	b29b      	uxth	r3, r3
 80071d0:	f023 030f 	bic.w	r3, r3, #15
 80071d4:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80071d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071d8:	085b      	lsrs	r3, r3, #1
 80071da:	b29b      	uxth	r3, r3
 80071dc:	f003 0307 	and.w	r3, r3, #7
 80071e0:	b29a      	uxth	r2, r3
 80071e2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80071e4:	4313      	orrs	r3, r2
 80071e6:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80071ee:	60da      	str	r2, [r3, #12]
 80071f0:	e0bb      	b.n	800736a <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 80071f2:	2301      	movs	r3, #1
 80071f4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80071f8:	e0b7      	b.n	800736a <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 80071fa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80071fe:	2b20      	cmp	r3, #32
 8007200:	dc4a      	bgt.n	8007298 <UART_SetConfig+0x9b4>
 8007202:	2b00      	cmp	r3, #0
 8007204:	f2c0 8086 	blt.w	8007314 <UART_SetConfig+0xa30>
 8007208:	2b20      	cmp	r3, #32
 800720a:	f200 8083 	bhi.w	8007314 <UART_SetConfig+0xa30>
 800720e:	a201      	add	r2, pc, #4	; (adr r2, 8007214 <UART_SetConfig+0x930>)
 8007210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007214:	0800729f 	.word	0x0800729f
 8007218:	080072b9 	.word	0x080072b9
 800721c:	08007315 	.word	0x08007315
 8007220:	08007315 	.word	0x08007315
 8007224:	080072c1 	.word	0x080072c1
 8007228:	08007315 	.word	0x08007315
 800722c:	08007315 	.word	0x08007315
 8007230:	08007315 	.word	0x08007315
 8007234:	080072d1 	.word	0x080072d1
 8007238:	08007315 	.word	0x08007315
 800723c:	08007315 	.word	0x08007315
 8007240:	08007315 	.word	0x08007315
 8007244:	08007315 	.word	0x08007315
 8007248:	08007315 	.word	0x08007315
 800724c:	08007315 	.word	0x08007315
 8007250:	08007315 	.word	0x08007315
 8007254:	080072e1 	.word	0x080072e1
 8007258:	08007315 	.word	0x08007315
 800725c:	08007315 	.word	0x08007315
 8007260:	08007315 	.word	0x08007315
 8007264:	08007315 	.word	0x08007315
 8007268:	08007315 	.word	0x08007315
 800726c:	08007315 	.word	0x08007315
 8007270:	08007315 	.word	0x08007315
 8007274:	08007315 	.word	0x08007315
 8007278:	08007315 	.word	0x08007315
 800727c:	08007315 	.word	0x08007315
 8007280:	08007315 	.word	0x08007315
 8007284:	08007315 	.word	0x08007315
 8007288:	08007315 	.word	0x08007315
 800728c:	08007315 	.word	0x08007315
 8007290:	08007315 	.word	0x08007315
 8007294:	08007307 	.word	0x08007307
 8007298:	2b40      	cmp	r3, #64	; 0x40
 800729a:	d037      	beq.n	800730c <UART_SetConfig+0xa28>
 800729c:	e03a      	b.n	8007314 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800729e:	f7fd ff43 	bl	8005128 <HAL_RCC_GetPCLK1Freq>
 80072a2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80072a4:	e03c      	b.n	8007320 <UART_SetConfig+0xa3c>
 80072a6:	bf00      	nop
 80072a8:	003d0900 	.word	0x003d0900
 80072ac:	08018c68 	.word	0x08018c68
 80072b0:	58024400 	.word	0x58024400
 80072b4:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80072b8:	f7fd ff4c 	bl	8005154 <HAL_RCC_GetPCLK2Freq>
 80072bc:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80072be:	e02f      	b.n	8007320 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80072c0:	f107 0314 	add.w	r3, r7, #20
 80072c4:	4618      	mov	r0, r3
 80072c6:	f7fe feb1 	bl	800602c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80072ca:	69bb      	ldr	r3, [r7, #24]
 80072cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80072ce:	e027      	b.n	8007320 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80072d0:	f107 0308 	add.w	r3, r7, #8
 80072d4:	4618      	mov	r0, r3
 80072d6:	f7fe fffd 	bl	80062d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80072de:	e01f      	b.n	8007320 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80072e0:	4b2c      	ldr	r3, [pc, #176]	; (8007394 <UART_SetConfig+0xab0>)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f003 0320 	and.w	r3, r3, #32
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d009      	beq.n	8007300 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80072ec:	4b29      	ldr	r3, [pc, #164]	; (8007394 <UART_SetConfig+0xab0>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	08db      	lsrs	r3, r3, #3
 80072f2:	f003 0303 	and.w	r3, r3, #3
 80072f6:	4a28      	ldr	r2, [pc, #160]	; (8007398 <UART_SetConfig+0xab4>)
 80072f8:	fa22 f303 	lsr.w	r3, r2, r3
 80072fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80072fe:	e00f      	b.n	8007320 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8007300:	4b25      	ldr	r3, [pc, #148]	; (8007398 <UART_SetConfig+0xab4>)
 8007302:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007304:	e00c      	b.n	8007320 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007306:	4b25      	ldr	r3, [pc, #148]	; (800739c <UART_SetConfig+0xab8>)
 8007308:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800730a:	e009      	b.n	8007320 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800730c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007310:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007312:	e005      	b.n	8007320 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8007314:	2300      	movs	r3, #0
 8007316:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007318:	2301      	movs	r3, #1
 800731a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800731e:	bf00      	nop
    }

    if (pclk != 0U)
 8007320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007322:	2b00      	cmp	r3, #0
 8007324:	d021      	beq.n	800736a <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800732a:	4a1d      	ldr	r2, [pc, #116]	; (80073a0 <UART_SetConfig+0xabc>)
 800732c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007330:	461a      	mov	r2, r3
 8007332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007334:	fbb3 f2f2 	udiv	r2, r3, r2
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	685b      	ldr	r3, [r3, #4]
 800733c:	085b      	lsrs	r3, r3, #1
 800733e:	441a      	add	r2, r3
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	685b      	ldr	r3, [r3, #4]
 8007344:	fbb2 f3f3 	udiv	r3, r2, r3
 8007348:	b29b      	uxth	r3, r3
 800734a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800734c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800734e:	2b0f      	cmp	r3, #15
 8007350:	d908      	bls.n	8007364 <UART_SetConfig+0xa80>
 8007352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007354:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007358:	d204      	bcs.n	8007364 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007360:	60da      	str	r2, [r3, #12]
 8007362:	e002      	b.n	800736a <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8007364:	2301      	movs	r3, #1
 8007366:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2201      	movs	r2, #1
 800736e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2201      	movs	r2, #1
 8007376:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2200      	movs	r2, #0
 800737e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2200      	movs	r2, #0
 8007384:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007386:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800738a:	4618      	mov	r0, r3
 800738c:	3738      	adds	r7, #56	; 0x38
 800738e:	46bd      	mov	sp, r7
 8007390:	bdb0      	pop	{r4, r5, r7, pc}
 8007392:	bf00      	nop
 8007394:	58024400 	.word	0x58024400
 8007398:	03d09000 	.word	0x03d09000
 800739c:	003d0900 	.word	0x003d0900
 80073a0:	08018c68 	.word	0x08018c68

080073a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80073a4:	b480      	push	{r7}
 80073a6:	b083      	sub	sp, #12
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073b0:	f003 0301 	and.w	r3, r3, #1
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d00a      	beq.n	80073ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	685b      	ldr	r3, [r3, #4]
 80073be:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	430a      	orrs	r2, r1
 80073cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073d2:	f003 0302 	and.w	r3, r3, #2
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d00a      	beq.n	80073f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	685b      	ldr	r3, [r3, #4]
 80073e0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	430a      	orrs	r2, r1
 80073ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073f4:	f003 0304 	and.w	r3, r3, #4
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d00a      	beq.n	8007412 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	685b      	ldr	r3, [r3, #4]
 8007402:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	430a      	orrs	r2, r1
 8007410:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007416:	f003 0308 	and.w	r3, r3, #8
 800741a:	2b00      	cmp	r3, #0
 800741c:	d00a      	beq.n	8007434 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	685b      	ldr	r3, [r3, #4]
 8007424:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	430a      	orrs	r2, r1
 8007432:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007438:	f003 0310 	and.w	r3, r3, #16
 800743c:	2b00      	cmp	r3, #0
 800743e:	d00a      	beq.n	8007456 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	689b      	ldr	r3, [r3, #8]
 8007446:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	430a      	orrs	r2, r1
 8007454:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800745a:	f003 0320 	and.w	r3, r3, #32
 800745e:	2b00      	cmp	r3, #0
 8007460:	d00a      	beq.n	8007478 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	689b      	ldr	r3, [r3, #8]
 8007468:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	430a      	orrs	r2, r1
 8007476:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800747c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007480:	2b00      	cmp	r3, #0
 8007482:	d01a      	beq.n	80074ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	685b      	ldr	r3, [r3, #4]
 800748a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	430a      	orrs	r2, r1
 8007498:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800749e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80074a2:	d10a      	bne.n	80074ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	685b      	ldr	r3, [r3, #4]
 80074aa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	430a      	orrs	r2, r1
 80074b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d00a      	beq.n	80074dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	685b      	ldr	r3, [r3, #4]
 80074cc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	430a      	orrs	r2, r1
 80074da:	605a      	str	r2, [r3, #4]
  }
}
 80074dc:	bf00      	nop
 80074de:	370c      	adds	r7, #12
 80074e0:	46bd      	mov	sp, r7
 80074e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e6:	4770      	bx	lr

080074e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b086      	sub	sp, #24
 80074ec:	af02      	add	r7, sp, #8
 80074ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2200      	movs	r2, #0
 80074f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80074f8:	f7fa faea 	bl	8001ad0 <HAL_GetTick>
 80074fc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f003 0308 	and.w	r3, r3, #8
 8007508:	2b08      	cmp	r3, #8
 800750a:	d10e      	bne.n	800752a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800750c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007510:	9300      	str	r3, [sp, #0]
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	2200      	movs	r2, #0
 8007516:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	f000 f82f 	bl	800757e <UART_WaitOnFlagUntilTimeout>
 8007520:	4603      	mov	r3, r0
 8007522:	2b00      	cmp	r3, #0
 8007524:	d001      	beq.n	800752a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007526:	2303      	movs	r3, #3
 8007528:	e025      	b.n	8007576 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f003 0304 	and.w	r3, r3, #4
 8007534:	2b04      	cmp	r3, #4
 8007536:	d10e      	bne.n	8007556 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007538:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800753c:	9300      	str	r3, [sp, #0]
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	2200      	movs	r2, #0
 8007542:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007546:	6878      	ldr	r0, [r7, #4]
 8007548:	f000 f819 	bl	800757e <UART_WaitOnFlagUntilTimeout>
 800754c:	4603      	mov	r3, r0
 800754e:	2b00      	cmp	r3, #0
 8007550:	d001      	beq.n	8007556 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007552:	2303      	movs	r3, #3
 8007554:	e00f      	b.n	8007576 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2220      	movs	r2, #32
 800755a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2220      	movs	r2, #32
 8007562:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2200      	movs	r2, #0
 800756a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2200      	movs	r2, #0
 8007570:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007574:	2300      	movs	r3, #0
}
 8007576:	4618      	mov	r0, r3
 8007578:	3710      	adds	r7, #16
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}

0800757e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800757e:	b580      	push	{r7, lr}
 8007580:	b084      	sub	sp, #16
 8007582:	af00      	add	r7, sp, #0
 8007584:	60f8      	str	r0, [r7, #12]
 8007586:	60b9      	str	r1, [r7, #8]
 8007588:	603b      	str	r3, [r7, #0]
 800758a:	4613      	mov	r3, r2
 800758c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800758e:	e062      	b.n	8007656 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007590:	69bb      	ldr	r3, [r7, #24]
 8007592:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007596:	d05e      	beq.n	8007656 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007598:	f7fa fa9a 	bl	8001ad0 <HAL_GetTick>
 800759c:	4602      	mov	r2, r0
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	1ad3      	subs	r3, r2, r3
 80075a2:	69ba      	ldr	r2, [r7, #24]
 80075a4:	429a      	cmp	r2, r3
 80075a6:	d302      	bcc.n	80075ae <UART_WaitOnFlagUntilTimeout+0x30>
 80075a8:	69bb      	ldr	r3, [r7, #24]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d11d      	bne.n	80075ea <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	681a      	ldr	r2, [r3, #0]
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80075bc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	689a      	ldr	r2, [r3, #8]
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f022 0201 	bic.w	r2, r2, #1
 80075cc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	2220      	movs	r2, #32
 80075d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	2220      	movs	r2, #32
 80075da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	2200      	movs	r2, #0
 80075e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80075e6:	2303      	movs	r3, #3
 80075e8:	e045      	b.n	8007676 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f003 0304 	and.w	r3, r3, #4
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d02e      	beq.n	8007656 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	69db      	ldr	r3, [r3, #28]
 80075fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007602:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007606:	d126      	bne.n	8007656 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007610:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	681a      	ldr	r2, [r3, #0]
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007620:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	689a      	ldr	r2, [r3, #8]
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f022 0201 	bic.w	r2, r2, #1
 8007630:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	2220      	movs	r2, #32
 8007636:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	2220      	movs	r2, #32
 800763e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	2220      	movs	r2, #32
 8007646:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	2200      	movs	r2, #0
 800764e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007652:	2303      	movs	r3, #3
 8007654:	e00f      	b.n	8007676 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	69da      	ldr	r2, [r3, #28]
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	4013      	ands	r3, r2
 8007660:	68ba      	ldr	r2, [r7, #8]
 8007662:	429a      	cmp	r2, r3
 8007664:	bf0c      	ite	eq
 8007666:	2301      	moveq	r3, #1
 8007668:	2300      	movne	r3, #0
 800766a:	b2db      	uxtb	r3, r3
 800766c:	461a      	mov	r2, r3
 800766e:	79fb      	ldrb	r3, [r7, #7]
 8007670:	429a      	cmp	r2, r3
 8007672:	d08d      	beq.n	8007590 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007674:	2300      	movs	r3, #0
}
 8007676:	4618      	mov	r0, r3
 8007678:	3710      	adds	r7, #16
 800767a:	46bd      	mov	sp, r7
 800767c:	bd80      	pop	{r7, pc}

0800767e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800767e:	b480      	push	{r7}
 8007680:	b085      	sub	sp, #20
 8007682:	af00      	add	r7, sp, #0
 8007684:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800768c:	2b01      	cmp	r3, #1
 800768e:	d101      	bne.n	8007694 <HAL_UARTEx_DisableFifoMode+0x16>
 8007690:	2302      	movs	r3, #2
 8007692:	e027      	b.n	80076e4 <HAL_UARTEx_DisableFifoMode+0x66>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2201      	movs	r2, #1
 8007698:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2224      	movs	r2, #36	; 0x24
 80076a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	681a      	ldr	r2, [r3, #0]
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f022 0201 	bic.w	r2, r2, #1
 80076ba:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80076c2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2200      	movs	r2, #0
 80076c8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	68fa      	ldr	r2, [r7, #12]
 80076d0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2220      	movs	r2, #32
 80076d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2200      	movs	r2, #0
 80076de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80076e2:	2300      	movs	r3, #0
}
 80076e4:	4618      	mov	r0, r3
 80076e6:	3714      	adds	r7, #20
 80076e8:	46bd      	mov	sp, r7
 80076ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ee:	4770      	bx	lr

080076f0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b084      	sub	sp, #16
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
 80076f8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007700:	2b01      	cmp	r3, #1
 8007702:	d101      	bne.n	8007708 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007704:	2302      	movs	r3, #2
 8007706:	e02d      	b.n	8007764 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2201      	movs	r2, #1
 800770c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2224      	movs	r2, #36	; 0x24
 8007714:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	681a      	ldr	r2, [r3, #0]
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f022 0201 	bic.w	r2, r2, #1
 800772e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	689b      	ldr	r3, [r3, #8]
 8007736:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	683a      	ldr	r2, [r7, #0]
 8007740:	430a      	orrs	r2, r1
 8007742:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f000 f84f 	bl	80077e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	68fa      	ldr	r2, [r7, #12]
 8007750:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2220      	movs	r2, #32
 8007756:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2200      	movs	r2, #0
 800775e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007762:	2300      	movs	r3, #0
}
 8007764:	4618      	mov	r0, r3
 8007766:	3710      	adds	r7, #16
 8007768:	46bd      	mov	sp, r7
 800776a:	bd80      	pop	{r7, pc}

0800776c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b084      	sub	sp, #16
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
 8007774:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800777c:	2b01      	cmp	r3, #1
 800777e:	d101      	bne.n	8007784 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007780:	2302      	movs	r3, #2
 8007782:	e02d      	b.n	80077e0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2201      	movs	r2, #1
 8007788:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2224      	movs	r2, #36	; 0x24
 8007790:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	681a      	ldr	r2, [r3, #0]
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f022 0201 	bic.w	r2, r2, #1
 80077aa:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	689b      	ldr	r3, [r3, #8]
 80077b2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	683a      	ldr	r2, [r7, #0]
 80077bc:	430a      	orrs	r2, r1
 80077be:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80077c0:	6878      	ldr	r0, [r7, #4]
 80077c2:	f000 f811 	bl	80077e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	68fa      	ldr	r2, [r7, #12]
 80077cc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2220      	movs	r2, #32
 80077d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2200      	movs	r2, #0
 80077da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80077de:	2300      	movs	r3, #0
}
 80077e0:	4618      	mov	r0, r3
 80077e2:	3710      	adds	r7, #16
 80077e4:	46bd      	mov	sp, r7
 80077e6:	bd80      	pop	{r7, pc}

080077e8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80077e8:	b480      	push	{r7}
 80077ea:	b085      	sub	sp, #20
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d108      	bne.n	800780a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2201      	movs	r2, #1
 80077fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2201      	movs	r2, #1
 8007804:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007808:	e031      	b.n	800786e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800780a:	2310      	movs	r3, #16
 800780c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800780e:	2310      	movs	r3, #16
 8007810:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	689b      	ldr	r3, [r3, #8]
 8007818:	0e5b      	lsrs	r3, r3, #25
 800781a:	b2db      	uxtb	r3, r3
 800781c:	f003 0307 	and.w	r3, r3, #7
 8007820:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	689b      	ldr	r3, [r3, #8]
 8007828:	0f5b      	lsrs	r3, r3, #29
 800782a:	b2db      	uxtb	r3, r3
 800782c:	f003 0307 	and.w	r3, r3, #7
 8007830:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007832:	7bbb      	ldrb	r3, [r7, #14]
 8007834:	7b3a      	ldrb	r2, [r7, #12]
 8007836:	4911      	ldr	r1, [pc, #68]	; (800787c <UARTEx_SetNbDataToProcess+0x94>)
 8007838:	5c8a      	ldrb	r2, [r1, r2]
 800783a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800783e:	7b3a      	ldrb	r2, [r7, #12]
 8007840:	490f      	ldr	r1, [pc, #60]	; (8007880 <UARTEx_SetNbDataToProcess+0x98>)
 8007842:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007844:	fb93 f3f2 	sdiv	r3, r3, r2
 8007848:	b29a      	uxth	r2, r3
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007850:	7bfb      	ldrb	r3, [r7, #15]
 8007852:	7b7a      	ldrb	r2, [r7, #13]
 8007854:	4909      	ldr	r1, [pc, #36]	; (800787c <UARTEx_SetNbDataToProcess+0x94>)
 8007856:	5c8a      	ldrb	r2, [r1, r2]
 8007858:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800785c:	7b7a      	ldrb	r2, [r7, #13]
 800785e:	4908      	ldr	r1, [pc, #32]	; (8007880 <UARTEx_SetNbDataToProcess+0x98>)
 8007860:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007862:	fb93 f3f2 	sdiv	r3, r3, r2
 8007866:	b29a      	uxth	r2, r3
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800786e:	bf00      	nop
 8007870:	3714      	adds	r7, #20
 8007872:	46bd      	mov	sp, r7
 8007874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007878:	4770      	bx	lr
 800787a:	bf00      	nop
 800787c:	08018c80 	.word	0x08018c80
 8007880:	08018c88 	.word	0x08018c88

08007884 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007884:	b084      	sub	sp, #16
 8007886:	b580      	push	{r7, lr}
 8007888:	b084      	sub	sp, #16
 800788a:	af00      	add	r7, sp, #0
 800788c:	6078      	str	r0, [r7, #4]
 800788e:	f107 001c 	add.w	r0, r7, #28
 8007892:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007898:	2b01      	cmp	r3, #1
 800789a:	d120      	bne.n	80078de <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078a0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	68da      	ldr	r2, [r3, #12]
 80078ac:	4b2a      	ldr	r3, [pc, #168]	; (8007958 <USB_CoreInit+0xd4>)
 80078ae:	4013      	ands	r3, r2
 80078b0:	687a      	ldr	r2, [r7, #4]
 80078b2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	68db      	ldr	r3, [r3, #12]
 80078b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80078c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078c2:	2b01      	cmp	r3, #1
 80078c4:	d105      	bne.n	80078d2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	68db      	ldr	r3, [r3, #12]
 80078ca:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f000 fa60 	bl	8007d98 <USB_CoreReset>
 80078d8:	4603      	mov	r3, r0
 80078da:	73fb      	strb	r3, [r7, #15]
 80078dc:	e01a      	b.n	8007914 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	68db      	ldr	r3, [r3, #12]
 80078e2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f000 fa54 	bl	8007d98 <USB_CoreReset>
 80078f0:	4603      	mov	r3, r0
 80078f2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80078f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d106      	bne.n	8007908 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078fe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	639a      	str	r2, [r3, #56]	; 0x38
 8007906:	e005      	b.n	8007914 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800790c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007916:	2b01      	cmp	r3, #1
 8007918:	d116      	bne.n	8007948 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800791e:	b29a      	uxth	r2, r3
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007928:	4b0c      	ldr	r3, [pc, #48]	; (800795c <USB_CoreInit+0xd8>)
 800792a:	4313      	orrs	r3, r2
 800792c:	687a      	ldr	r2, [r7, #4]
 800792e:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	689b      	ldr	r3, [r3, #8]
 8007934:	f043 0206 	orr.w	r2, r3, #6
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	689b      	ldr	r3, [r3, #8]
 8007940:	f043 0220 	orr.w	r2, r3, #32
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007948:	7bfb      	ldrb	r3, [r7, #15]
}
 800794a:	4618      	mov	r0, r3
 800794c:	3710      	adds	r7, #16
 800794e:	46bd      	mov	sp, r7
 8007950:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007954:	b004      	add	sp, #16
 8007956:	4770      	bx	lr
 8007958:	ffbdffbf 	.word	0xffbdffbf
 800795c:	03ee0000 	.word	0x03ee0000

08007960 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007960:	b480      	push	{r7}
 8007962:	b083      	sub	sp, #12
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	689b      	ldr	r3, [r3, #8]
 800796c:	f023 0201 	bic.w	r2, r3, #1
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007974:	2300      	movs	r3, #0
}
 8007976:	4618      	mov	r0, r3
 8007978:	370c      	adds	r7, #12
 800797a:	46bd      	mov	sp, r7
 800797c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007980:	4770      	bx	lr

08007982 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007982:	b580      	push	{r7, lr}
 8007984:	b082      	sub	sp, #8
 8007986:	af00      	add	r7, sp, #0
 8007988:	6078      	str	r0, [r7, #4]
 800798a:	460b      	mov	r3, r1
 800798c:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	68db      	ldr	r3, [r3, #12]
 8007992:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800799a:	78fb      	ldrb	r3, [r7, #3]
 800799c:	2b01      	cmp	r3, #1
 800799e:	d106      	bne.n	80079ae <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	68db      	ldr	r3, [r3, #12]
 80079a4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	60da      	str	r2, [r3, #12]
 80079ac:	e00b      	b.n	80079c6 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80079ae:	78fb      	ldrb	r3, [r7, #3]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d106      	bne.n	80079c2 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	68db      	ldr	r3, [r3, #12]
 80079b8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	60da      	str	r2, [r3, #12]
 80079c0:	e001      	b.n	80079c6 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80079c2:	2301      	movs	r3, #1
 80079c4:	e003      	b.n	80079ce <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80079c6:	2032      	movs	r0, #50	; 0x32
 80079c8:	f7fa f88e 	bl	8001ae8 <HAL_Delay>

  return HAL_OK;
 80079cc:	2300      	movs	r3, #0
}
 80079ce:	4618      	mov	r0, r3
 80079d0:	3708      	adds	r7, #8
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd80      	pop	{r7, pc}
	...

080079d8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80079d8:	b084      	sub	sp, #16
 80079da:	b580      	push	{r7, lr}
 80079dc:	b086      	sub	sp, #24
 80079de:	af00      	add	r7, sp, #0
 80079e0:	6078      	str	r0, [r7, #4]
 80079e2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80079e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80079ea:	2300      	movs	r3, #0
 80079ec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80079f2:	2300      	movs	r3, #0
 80079f4:	613b      	str	r3, [r7, #16]
 80079f6:	e009      	b.n	8007a0c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80079f8:	687a      	ldr	r2, [r7, #4]
 80079fa:	693b      	ldr	r3, [r7, #16]
 80079fc:	3340      	adds	r3, #64	; 0x40
 80079fe:	009b      	lsls	r3, r3, #2
 8007a00:	4413      	add	r3, r2
 8007a02:	2200      	movs	r2, #0
 8007a04:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007a06:	693b      	ldr	r3, [r7, #16]
 8007a08:	3301      	adds	r3, #1
 8007a0a:	613b      	str	r3, [r7, #16]
 8007a0c:	693b      	ldr	r3, [r7, #16]
 8007a0e:	2b0e      	cmp	r3, #14
 8007a10:	d9f2      	bls.n	80079f8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007a12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d11c      	bne.n	8007a52 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a1e:	685b      	ldr	r3, [r3, #4]
 8007a20:	68fa      	ldr	r2, [r7, #12]
 8007a22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007a26:	f043 0302 	orr.w	r3, r3, #2
 8007a2a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a30:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	601a      	str	r2, [r3, #0]
 8007a50:	e005      	b.n	8007a5e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a56:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007a64:	461a      	mov	r2, r3
 8007a66:	2300      	movs	r3, #0
 8007a68:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a70:	4619      	mov	r1, r3
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a78:	461a      	mov	r2, r3
 8007a7a:	680b      	ldr	r3, [r1, #0]
 8007a7c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a80:	2b01      	cmp	r3, #1
 8007a82:	d10c      	bne.n	8007a9e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d104      	bne.n	8007a94 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007a8a:	2100      	movs	r1, #0
 8007a8c:	6878      	ldr	r0, [r7, #4]
 8007a8e:	f000 f949 	bl	8007d24 <USB_SetDevSpeed>
 8007a92:	e008      	b.n	8007aa6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007a94:	2101      	movs	r1, #1
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	f000 f944 	bl	8007d24 <USB_SetDevSpeed>
 8007a9c:	e003      	b.n	8007aa6 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007a9e:	2103      	movs	r1, #3
 8007aa0:	6878      	ldr	r0, [r7, #4]
 8007aa2:	f000 f93f 	bl	8007d24 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007aa6:	2110      	movs	r1, #16
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	f000 f8f3 	bl	8007c94 <USB_FlushTxFifo>
 8007aae:	4603      	mov	r3, r0
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d001      	beq.n	8007ab8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f000 f911 	bl	8007ce0 <USB_FlushRxFifo>
 8007abe:	4603      	mov	r3, r0
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d001      	beq.n	8007ac8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8007ac4:	2301      	movs	r3, #1
 8007ac6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ace:	461a      	mov	r2, r3
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ada:	461a      	mov	r2, r3
 8007adc:	2300      	movs	r3, #0
 8007ade:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ae6:	461a      	mov	r2, r3
 8007ae8:	2300      	movs	r3, #0
 8007aea:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007aec:	2300      	movs	r3, #0
 8007aee:	613b      	str	r3, [r7, #16]
 8007af0:	e043      	b.n	8007b7a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007af2:	693b      	ldr	r3, [r7, #16]
 8007af4:	015a      	lsls	r2, r3, #5
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	4413      	add	r3, r2
 8007afa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007b04:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007b08:	d118      	bne.n	8007b3c <USB_DevInit+0x164>
    {
      if (i == 0U)
 8007b0a:	693b      	ldr	r3, [r7, #16]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d10a      	bne.n	8007b26 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007b10:	693b      	ldr	r3, [r7, #16]
 8007b12:	015a      	lsls	r2, r3, #5
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	4413      	add	r3, r2
 8007b18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b1c:	461a      	mov	r2, r3
 8007b1e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007b22:	6013      	str	r3, [r2, #0]
 8007b24:	e013      	b.n	8007b4e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007b26:	693b      	ldr	r3, [r7, #16]
 8007b28:	015a      	lsls	r2, r3, #5
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	4413      	add	r3, r2
 8007b2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b32:	461a      	mov	r2, r3
 8007b34:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007b38:	6013      	str	r3, [r2, #0]
 8007b3a:	e008      	b.n	8007b4e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007b3c:	693b      	ldr	r3, [r7, #16]
 8007b3e:	015a      	lsls	r2, r3, #5
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	4413      	add	r3, r2
 8007b44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b48:	461a      	mov	r2, r3
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007b4e:	693b      	ldr	r3, [r7, #16]
 8007b50:	015a      	lsls	r2, r3, #5
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	4413      	add	r3, r2
 8007b56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b5a:	461a      	mov	r2, r3
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007b60:	693b      	ldr	r3, [r7, #16]
 8007b62:	015a      	lsls	r2, r3, #5
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	4413      	add	r3, r2
 8007b68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b6c:	461a      	mov	r2, r3
 8007b6e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007b72:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007b74:	693b      	ldr	r3, [r7, #16]
 8007b76:	3301      	adds	r3, #1
 8007b78:	613b      	str	r3, [r7, #16]
 8007b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b7c:	693a      	ldr	r2, [r7, #16]
 8007b7e:	429a      	cmp	r2, r3
 8007b80:	d3b7      	bcc.n	8007af2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007b82:	2300      	movs	r3, #0
 8007b84:	613b      	str	r3, [r7, #16]
 8007b86:	e043      	b.n	8007c10 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007b88:	693b      	ldr	r3, [r7, #16]
 8007b8a:	015a      	lsls	r2, r3, #5
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	4413      	add	r3, r2
 8007b90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007b9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007b9e:	d118      	bne.n	8007bd2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8007ba0:	693b      	ldr	r3, [r7, #16]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d10a      	bne.n	8007bbc <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007ba6:	693b      	ldr	r3, [r7, #16]
 8007ba8:	015a      	lsls	r2, r3, #5
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	4413      	add	r3, r2
 8007bae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bb2:	461a      	mov	r2, r3
 8007bb4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007bb8:	6013      	str	r3, [r2, #0]
 8007bba:	e013      	b.n	8007be4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007bbc:	693b      	ldr	r3, [r7, #16]
 8007bbe:	015a      	lsls	r2, r3, #5
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	4413      	add	r3, r2
 8007bc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bc8:	461a      	mov	r2, r3
 8007bca:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007bce:	6013      	str	r3, [r2, #0]
 8007bd0:	e008      	b.n	8007be4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007bd2:	693b      	ldr	r3, [r7, #16]
 8007bd4:	015a      	lsls	r2, r3, #5
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	4413      	add	r3, r2
 8007bda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bde:	461a      	mov	r2, r3
 8007be0:	2300      	movs	r3, #0
 8007be2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007be4:	693b      	ldr	r3, [r7, #16]
 8007be6:	015a      	lsls	r2, r3, #5
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	4413      	add	r3, r2
 8007bec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bf0:	461a      	mov	r2, r3
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007bf6:	693b      	ldr	r3, [r7, #16]
 8007bf8:	015a      	lsls	r2, r3, #5
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	4413      	add	r3, r2
 8007bfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c02:	461a      	mov	r2, r3
 8007c04:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007c08:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007c0a:	693b      	ldr	r3, [r7, #16]
 8007c0c:	3301      	adds	r3, #1
 8007c0e:	613b      	str	r3, [r7, #16]
 8007c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c12:	693a      	ldr	r2, [r7, #16]
 8007c14:	429a      	cmp	r2, r3
 8007c16:	d3b7      	bcc.n	8007b88 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c1e:	691b      	ldr	r3, [r3, #16]
 8007c20:	68fa      	ldr	r2, [r7, #12]
 8007c22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007c26:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c2a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2200      	movs	r2, #0
 8007c30:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007c38:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d105      	bne.n	8007c4c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	699b      	ldr	r3, [r3, #24]
 8007c44:	f043 0210 	orr.w	r2, r3, #16
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	699a      	ldr	r2, [r3, #24]
 8007c50:	4b0e      	ldr	r3, [pc, #56]	; (8007c8c <USB_DevInit+0x2b4>)
 8007c52:	4313      	orrs	r3, r2
 8007c54:	687a      	ldr	r2, [r7, #4]
 8007c56:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007c58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d005      	beq.n	8007c6a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	699b      	ldr	r3, [r3, #24]
 8007c62:	f043 0208 	orr.w	r2, r3, #8
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007c6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c6c:	2b01      	cmp	r3, #1
 8007c6e:	d105      	bne.n	8007c7c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	699a      	ldr	r2, [r3, #24]
 8007c74:	4b06      	ldr	r3, [pc, #24]	; (8007c90 <USB_DevInit+0x2b8>)
 8007c76:	4313      	orrs	r3, r2
 8007c78:	687a      	ldr	r2, [r7, #4]
 8007c7a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007c7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c7e:	4618      	mov	r0, r3
 8007c80:	3718      	adds	r7, #24
 8007c82:	46bd      	mov	sp, r7
 8007c84:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007c88:	b004      	add	sp, #16
 8007c8a:	4770      	bx	lr
 8007c8c:	803c3800 	.word	0x803c3800
 8007c90:	40000004 	.word	0x40000004

08007c94 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007c94:	b480      	push	{r7}
 8007c96:	b085      	sub	sp, #20
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
 8007c9c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	019b      	lsls	r3, r3, #6
 8007ca6:	f043 0220 	orr.w	r2, r3, #32
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	3301      	adds	r3, #1
 8007cb2:	60fb      	str	r3, [r7, #12]
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	4a09      	ldr	r2, [pc, #36]	; (8007cdc <USB_FlushTxFifo+0x48>)
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	d901      	bls.n	8007cc0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007cbc:	2303      	movs	r3, #3
 8007cbe:	e006      	b.n	8007cce <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	691b      	ldr	r3, [r3, #16]
 8007cc4:	f003 0320 	and.w	r3, r3, #32
 8007cc8:	2b20      	cmp	r3, #32
 8007cca:	d0f0      	beq.n	8007cae <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007ccc:	2300      	movs	r3, #0
}
 8007cce:	4618      	mov	r0, r3
 8007cd0:	3714      	adds	r7, #20
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd8:	4770      	bx	lr
 8007cda:	bf00      	nop
 8007cdc:	00030d40 	.word	0x00030d40

08007ce0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007ce0:	b480      	push	{r7}
 8007ce2:	b085      	sub	sp, #20
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8007ce8:	2300      	movs	r3, #0
 8007cea:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2210      	movs	r2, #16
 8007cf0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	3301      	adds	r3, #1
 8007cf6:	60fb      	str	r3, [r7, #12]
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	4a09      	ldr	r2, [pc, #36]	; (8007d20 <USB_FlushRxFifo+0x40>)
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	d901      	bls.n	8007d04 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8007d00:	2303      	movs	r3, #3
 8007d02:	e006      	b.n	8007d12 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	691b      	ldr	r3, [r3, #16]
 8007d08:	f003 0310 	and.w	r3, r3, #16
 8007d0c:	2b10      	cmp	r3, #16
 8007d0e:	d0f0      	beq.n	8007cf2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007d10:	2300      	movs	r3, #0
}
 8007d12:	4618      	mov	r0, r3
 8007d14:	3714      	adds	r7, #20
 8007d16:	46bd      	mov	sp, r7
 8007d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1c:	4770      	bx	lr
 8007d1e:	bf00      	nop
 8007d20:	00030d40 	.word	0x00030d40

08007d24 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007d24:	b480      	push	{r7}
 8007d26:	b085      	sub	sp, #20
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
 8007d2c:	460b      	mov	r3, r1
 8007d2e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d3a:	681a      	ldr	r2, [r3, #0]
 8007d3c:	78fb      	ldrb	r3, [r7, #3]
 8007d3e:	68f9      	ldr	r1, [r7, #12]
 8007d40:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007d44:	4313      	orrs	r3, r2
 8007d46:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007d48:	2300      	movs	r3, #0
}
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	3714      	adds	r7, #20
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d54:	4770      	bx	lr

08007d56 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007d56:	b480      	push	{r7}
 8007d58:	b085      	sub	sp, #20
 8007d5a:	af00      	add	r7, sp, #0
 8007d5c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	68fa      	ldr	r2, [r7, #12]
 8007d6c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007d70:	f023 0303 	bic.w	r3, r3, #3
 8007d74:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d7c:	685b      	ldr	r3, [r3, #4]
 8007d7e:	68fa      	ldr	r2, [r7, #12]
 8007d80:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d84:	f043 0302 	orr.w	r3, r3, #2
 8007d88:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007d8a:	2300      	movs	r3, #0
}
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	3714      	adds	r7, #20
 8007d90:	46bd      	mov	sp, r7
 8007d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d96:	4770      	bx	lr

08007d98 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007d98:	b480      	push	{r7}
 8007d9a:	b085      	sub	sp, #20
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007da0:	2300      	movs	r3, #0
 8007da2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	3301      	adds	r3, #1
 8007da8:	60fb      	str	r3, [r7, #12]
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	4a13      	ldr	r2, [pc, #76]	; (8007dfc <USB_CoreReset+0x64>)
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d901      	bls.n	8007db6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007db2:	2303      	movs	r3, #3
 8007db4:	e01b      	b.n	8007dee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	691b      	ldr	r3, [r3, #16]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	daf2      	bge.n	8007da4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	691b      	ldr	r3, [r3, #16]
 8007dc6:	f043 0201 	orr.w	r2, r3, #1
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	3301      	adds	r3, #1
 8007dd2:	60fb      	str	r3, [r7, #12]
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	4a09      	ldr	r2, [pc, #36]	; (8007dfc <USB_CoreReset+0x64>)
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	d901      	bls.n	8007de0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007ddc:	2303      	movs	r3, #3
 8007dde:	e006      	b.n	8007dee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	691b      	ldr	r3, [r3, #16]
 8007de4:	f003 0301 	and.w	r3, r3, #1
 8007de8:	2b01      	cmp	r3, #1
 8007dea:	d0f0      	beq.n	8007dce <USB_CoreReset+0x36>

  return HAL_OK;
 8007dec:	2300      	movs	r3, #0
}
 8007dee:	4618      	mov	r0, r3
 8007df0:	3714      	adds	r7, #20
 8007df2:	46bd      	mov	sp, r7
 8007df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df8:	4770      	bx	lr
 8007dfa:	bf00      	nop
 8007dfc:	00030d40 	.word	0x00030d40

08007e00 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b084      	sub	sp, #16
 8007e04:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8007e06:	4b8d      	ldr	r3, [pc, #564]	; (800803c <MX_LWIP_Init+0x23c>)
 8007e08:	22c0      	movs	r2, #192	; 0xc0
 8007e0a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8007e0c:	4b8b      	ldr	r3, [pc, #556]	; (800803c <MX_LWIP_Init+0x23c>)
 8007e0e:	22a8      	movs	r2, #168	; 0xa8
 8007e10:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 8;
 8007e12:	4b8a      	ldr	r3, [pc, #552]	; (800803c <MX_LWIP_Init+0x23c>)
 8007e14:	2208      	movs	r2, #8
 8007e16:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 77;
 8007e18:	4b88      	ldr	r3, [pc, #544]	; (800803c <MX_LWIP_Init+0x23c>)
 8007e1a:	224d      	movs	r2, #77	; 0x4d
 8007e1c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8007e1e:	4b88      	ldr	r3, [pc, #544]	; (8008040 <MX_LWIP_Init+0x240>)
 8007e20:	22ff      	movs	r2, #255	; 0xff
 8007e22:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8007e24:	4b86      	ldr	r3, [pc, #536]	; (8008040 <MX_LWIP_Init+0x240>)
 8007e26:	22ff      	movs	r2, #255	; 0xff
 8007e28:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8007e2a:	4b85      	ldr	r3, [pc, #532]	; (8008040 <MX_LWIP_Init+0x240>)
 8007e2c:	22ff      	movs	r2, #255	; 0xff
 8007e2e:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8007e30:	4b83      	ldr	r3, [pc, #524]	; (8008040 <MX_LWIP_Init+0x240>)
 8007e32:	2200      	movs	r2, #0
 8007e34:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 8007e36:	4b83      	ldr	r3, [pc, #524]	; (8008044 <MX_LWIP_Init+0x244>)
 8007e38:	2200      	movs	r2, #0
 8007e3a:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 8007e3c:	4b81      	ldr	r3, [pc, #516]	; (8008044 <MX_LWIP_Init+0x244>)
 8007e3e:	2200      	movs	r2, #0
 8007e40:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8007e42:	4b80      	ldr	r3, [pc, #512]	; (8008044 <MX_LWIP_Init+0x244>)
 8007e44:	2200      	movs	r2, #0
 8007e46:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 8007e48:	4b7e      	ldr	r3, [pc, #504]	; (8008044 <MX_LWIP_Init+0x244>)
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8007e4e:	f002 f9b1 	bl	800a1b4 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8007e52:	4b7a      	ldr	r3, [pc, #488]	; (800803c <MX_LWIP_Init+0x23c>)
 8007e54:	781b      	ldrb	r3, [r3, #0]
 8007e56:	061a      	lsls	r2, r3, #24
 8007e58:	4b78      	ldr	r3, [pc, #480]	; (800803c <MX_LWIP_Init+0x23c>)
 8007e5a:	785b      	ldrb	r3, [r3, #1]
 8007e5c:	041b      	lsls	r3, r3, #16
 8007e5e:	431a      	orrs	r2, r3
 8007e60:	4b76      	ldr	r3, [pc, #472]	; (800803c <MX_LWIP_Init+0x23c>)
 8007e62:	789b      	ldrb	r3, [r3, #2]
 8007e64:	021b      	lsls	r3, r3, #8
 8007e66:	4313      	orrs	r3, r2
 8007e68:	4a74      	ldr	r2, [pc, #464]	; (800803c <MX_LWIP_Init+0x23c>)
 8007e6a:	78d2      	ldrb	r2, [r2, #3]
 8007e6c:	4313      	orrs	r3, r2
 8007e6e:	061a      	lsls	r2, r3, #24
 8007e70:	4b72      	ldr	r3, [pc, #456]	; (800803c <MX_LWIP_Init+0x23c>)
 8007e72:	781b      	ldrb	r3, [r3, #0]
 8007e74:	0619      	lsls	r1, r3, #24
 8007e76:	4b71      	ldr	r3, [pc, #452]	; (800803c <MX_LWIP_Init+0x23c>)
 8007e78:	785b      	ldrb	r3, [r3, #1]
 8007e7a:	041b      	lsls	r3, r3, #16
 8007e7c:	4319      	orrs	r1, r3
 8007e7e:	4b6f      	ldr	r3, [pc, #444]	; (800803c <MX_LWIP_Init+0x23c>)
 8007e80:	789b      	ldrb	r3, [r3, #2]
 8007e82:	021b      	lsls	r3, r3, #8
 8007e84:	430b      	orrs	r3, r1
 8007e86:	496d      	ldr	r1, [pc, #436]	; (800803c <MX_LWIP_Init+0x23c>)
 8007e88:	78c9      	ldrb	r1, [r1, #3]
 8007e8a:	430b      	orrs	r3, r1
 8007e8c:	021b      	lsls	r3, r3, #8
 8007e8e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007e92:	431a      	orrs	r2, r3
 8007e94:	4b69      	ldr	r3, [pc, #420]	; (800803c <MX_LWIP_Init+0x23c>)
 8007e96:	781b      	ldrb	r3, [r3, #0]
 8007e98:	0619      	lsls	r1, r3, #24
 8007e9a:	4b68      	ldr	r3, [pc, #416]	; (800803c <MX_LWIP_Init+0x23c>)
 8007e9c:	785b      	ldrb	r3, [r3, #1]
 8007e9e:	041b      	lsls	r3, r3, #16
 8007ea0:	4319      	orrs	r1, r3
 8007ea2:	4b66      	ldr	r3, [pc, #408]	; (800803c <MX_LWIP_Init+0x23c>)
 8007ea4:	789b      	ldrb	r3, [r3, #2]
 8007ea6:	021b      	lsls	r3, r3, #8
 8007ea8:	430b      	orrs	r3, r1
 8007eaa:	4964      	ldr	r1, [pc, #400]	; (800803c <MX_LWIP_Init+0x23c>)
 8007eac:	78c9      	ldrb	r1, [r1, #3]
 8007eae:	430b      	orrs	r3, r1
 8007eb0:	0a1b      	lsrs	r3, r3, #8
 8007eb2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007eb6:	431a      	orrs	r2, r3
 8007eb8:	4b60      	ldr	r3, [pc, #384]	; (800803c <MX_LWIP_Init+0x23c>)
 8007eba:	781b      	ldrb	r3, [r3, #0]
 8007ebc:	0619      	lsls	r1, r3, #24
 8007ebe:	4b5f      	ldr	r3, [pc, #380]	; (800803c <MX_LWIP_Init+0x23c>)
 8007ec0:	785b      	ldrb	r3, [r3, #1]
 8007ec2:	041b      	lsls	r3, r3, #16
 8007ec4:	4319      	orrs	r1, r3
 8007ec6:	4b5d      	ldr	r3, [pc, #372]	; (800803c <MX_LWIP_Init+0x23c>)
 8007ec8:	789b      	ldrb	r3, [r3, #2]
 8007eca:	021b      	lsls	r3, r3, #8
 8007ecc:	430b      	orrs	r3, r1
 8007ece:	495b      	ldr	r1, [pc, #364]	; (800803c <MX_LWIP_Init+0x23c>)
 8007ed0:	78c9      	ldrb	r1, [r1, #3]
 8007ed2:	430b      	orrs	r3, r1
 8007ed4:	0e1b      	lsrs	r3, r3, #24
 8007ed6:	4313      	orrs	r3, r2
 8007ed8:	4a5b      	ldr	r2, [pc, #364]	; (8008048 <MX_LWIP_Init+0x248>)
 8007eda:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8007edc:	4b58      	ldr	r3, [pc, #352]	; (8008040 <MX_LWIP_Init+0x240>)
 8007ede:	781b      	ldrb	r3, [r3, #0]
 8007ee0:	061a      	lsls	r2, r3, #24
 8007ee2:	4b57      	ldr	r3, [pc, #348]	; (8008040 <MX_LWIP_Init+0x240>)
 8007ee4:	785b      	ldrb	r3, [r3, #1]
 8007ee6:	041b      	lsls	r3, r3, #16
 8007ee8:	431a      	orrs	r2, r3
 8007eea:	4b55      	ldr	r3, [pc, #340]	; (8008040 <MX_LWIP_Init+0x240>)
 8007eec:	789b      	ldrb	r3, [r3, #2]
 8007eee:	021b      	lsls	r3, r3, #8
 8007ef0:	4313      	orrs	r3, r2
 8007ef2:	4a53      	ldr	r2, [pc, #332]	; (8008040 <MX_LWIP_Init+0x240>)
 8007ef4:	78d2      	ldrb	r2, [r2, #3]
 8007ef6:	4313      	orrs	r3, r2
 8007ef8:	061a      	lsls	r2, r3, #24
 8007efa:	4b51      	ldr	r3, [pc, #324]	; (8008040 <MX_LWIP_Init+0x240>)
 8007efc:	781b      	ldrb	r3, [r3, #0]
 8007efe:	0619      	lsls	r1, r3, #24
 8007f00:	4b4f      	ldr	r3, [pc, #316]	; (8008040 <MX_LWIP_Init+0x240>)
 8007f02:	785b      	ldrb	r3, [r3, #1]
 8007f04:	041b      	lsls	r3, r3, #16
 8007f06:	4319      	orrs	r1, r3
 8007f08:	4b4d      	ldr	r3, [pc, #308]	; (8008040 <MX_LWIP_Init+0x240>)
 8007f0a:	789b      	ldrb	r3, [r3, #2]
 8007f0c:	021b      	lsls	r3, r3, #8
 8007f0e:	430b      	orrs	r3, r1
 8007f10:	494b      	ldr	r1, [pc, #300]	; (8008040 <MX_LWIP_Init+0x240>)
 8007f12:	78c9      	ldrb	r1, [r1, #3]
 8007f14:	430b      	orrs	r3, r1
 8007f16:	021b      	lsls	r3, r3, #8
 8007f18:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007f1c:	431a      	orrs	r2, r3
 8007f1e:	4b48      	ldr	r3, [pc, #288]	; (8008040 <MX_LWIP_Init+0x240>)
 8007f20:	781b      	ldrb	r3, [r3, #0]
 8007f22:	0619      	lsls	r1, r3, #24
 8007f24:	4b46      	ldr	r3, [pc, #280]	; (8008040 <MX_LWIP_Init+0x240>)
 8007f26:	785b      	ldrb	r3, [r3, #1]
 8007f28:	041b      	lsls	r3, r3, #16
 8007f2a:	4319      	orrs	r1, r3
 8007f2c:	4b44      	ldr	r3, [pc, #272]	; (8008040 <MX_LWIP_Init+0x240>)
 8007f2e:	789b      	ldrb	r3, [r3, #2]
 8007f30:	021b      	lsls	r3, r3, #8
 8007f32:	430b      	orrs	r3, r1
 8007f34:	4942      	ldr	r1, [pc, #264]	; (8008040 <MX_LWIP_Init+0x240>)
 8007f36:	78c9      	ldrb	r1, [r1, #3]
 8007f38:	430b      	orrs	r3, r1
 8007f3a:	0a1b      	lsrs	r3, r3, #8
 8007f3c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007f40:	431a      	orrs	r2, r3
 8007f42:	4b3f      	ldr	r3, [pc, #252]	; (8008040 <MX_LWIP_Init+0x240>)
 8007f44:	781b      	ldrb	r3, [r3, #0]
 8007f46:	0619      	lsls	r1, r3, #24
 8007f48:	4b3d      	ldr	r3, [pc, #244]	; (8008040 <MX_LWIP_Init+0x240>)
 8007f4a:	785b      	ldrb	r3, [r3, #1]
 8007f4c:	041b      	lsls	r3, r3, #16
 8007f4e:	4319      	orrs	r1, r3
 8007f50:	4b3b      	ldr	r3, [pc, #236]	; (8008040 <MX_LWIP_Init+0x240>)
 8007f52:	789b      	ldrb	r3, [r3, #2]
 8007f54:	021b      	lsls	r3, r3, #8
 8007f56:	430b      	orrs	r3, r1
 8007f58:	4939      	ldr	r1, [pc, #228]	; (8008040 <MX_LWIP_Init+0x240>)
 8007f5a:	78c9      	ldrb	r1, [r1, #3]
 8007f5c:	430b      	orrs	r3, r1
 8007f5e:	0e1b      	lsrs	r3, r3, #24
 8007f60:	4313      	orrs	r3, r2
 8007f62:	4a3a      	ldr	r2, [pc, #232]	; (800804c <MX_LWIP_Init+0x24c>)
 8007f64:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8007f66:	4b37      	ldr	r3, [pc, #220]	; (8008044 <MX_LWIP_Init+0x244>)
 8007f68:	781b      	ldrb	r3, [r3, #0]
 8007f6a:	061a      	lsls	r2, r3, #24
 8007f6c:	4b35      	ldr	r3, [pc, #212]	; (8008044 <MX_LWIP_Init+0x244>)
 8007f6e:	785b      	ldrb	r3, [r3, #1]
 8007f70:	041b      	lsls	r3, r3, #16
 8007f72:	431a      	orrs	r2, r3
 8007f74:	4b33      	ldr	r3, [pc, #204]	; (8008044 <MX_LWIP_Init+0x244>)
 8007f76:	789b      	ldrb	r3, [r3, #2]
 8007f78:	021b      	lsls	r3, r3, #8
 8007f7a:	4313      	orrs	r3, r2
 8007f7c:	4a31      	ldr	r2, [pc, #196]	; (8008044 <MX_LWIP_Init+0x244>)
 8007f7e:	78d2      	ldrb	r2, [r2, #3]
 8007f80:	4313      	orrs	r3, r2
 8007f82:	061a      	lsls	r2, r3, #24
 8007f84:	4b2f      	ldr	r3, [pc, #188]	; (8008044 <MX_LWIP_Init+0x244>)
 8007f86:	781b      	ldrb	r3, [r3, #0]
 8007f88:	0619      	lsls	r1, r3, #24
 8007f8a:	4b2e      	ldr	r3, [pc, #184]	; (8008044 <MX_LWIP_Init+0x244>)
 8007f8c:	785b      	ldrb	r3, [r3, #1]
 8007f8e:	041b      	lsls	r3, r3, #16
 8007f90:	4319      	orrs	r1, r3
 8007f92:	4b2c      	ldr	r3, [pc, #176]	; (8008044 <MX_LWIP_Init+0x244>)
 8007f94:	789b      	ldrb	r3, [r3, #2]
 8007f96:	021b      	lsls	r3, r3, #8
 8007f98:	430b      	orrs	r3, r1
 8007f9a:	492a      	ldr	r1, [pc, #168]	; (8008044 <MX_LWIP_Init+0x244>)
 8007f9c:	78c9      	ldrb	r1, [r1, #3]
 8007f9e:	430b      	orrs	r3, r1
 8007fa0:	021b      	lsls	r3, r3, #8
 8007fa2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007fa6:	431a      	orrs	r2, r3
 8007fa8:	4b26      	ldr	r3, [pc, #152]	; (8008044 <MX_LWIP_Init+0x244>)
 8007faa:	781b      	ldrb	r3, [r3, #0]
 8007fac:	0619      	lsls	r1, r3, #24
 8007fae:	4b25      	ldr	r3, [pc, #148]	; (8008044 <MX_LWIP_Init+0x244>)
 8007fb0:	785b      	ldrb	r3, [r3, #1]
 8007fb2:	041b      	lsls	r3, r3, #16
 8007fb4:	4319      	orrs	r1, r3
 8007fb6:	4b23      	ldr	r3, [pc, #140]	; (8008044 <MX_LWIP_Init+0x244>)
 8007fb8:	789b      	ldrb	r3, [r3, #2]
 8007fba:	021b      	lsls	r3, r3, #8
 8007fbc:	430b      	orrs	r3, r1
 8007fbe:	4921      	ldr	r1, [pc, #132]	; (8008044 <MX_LWIP_Init+0x244>)
 8007fc0:	78c9      	ldrb	r1, [r1, #3]
 8007fc2:	430b      	orrs	r3, r1
 8007fc4:	0a1b      	lsrs	r3, r3, #8
 8007fc6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007fca:	431a      	orrs	r2, r3
 8007fcc:	4b1d      	ldr	r3, [pc, #116]	; (8008044 <MX_LWIP_Init+0x244>)
 8007fce:	781b      	ldrb	r3, [r3, #0]
 8007fd0:	0619      	lsls	r1, r3, #24
 8007fd2:	4b1c      	ldr	r3, [pc, #112]	; (8008044 <MX_LWIP_Init+0x244>)
 8007fd4:	785b      	ldrb	r3, [r3, #1]
 8007fd6:	041b      	lsls	r3, r3, #16
 8007fd8:	4319      	orrs	r1, r3
 8007fda:	4b1a      	ldr	r3, [pc, #104]	; (8008044 <MX_LWIP_Init+0x244>)
 8007fdc:	789b      	ldrb	r3, [r3, #2]
 8007fde:	021b      	lsls	r3, r3, #8
 8007fe0:	430b      	orrs	r3, r1
 8007fe2:	4918      	ldr	r1, [pc, #96]	; (8008044 <MX_LWIP_Init+0x244>)
 8007fe4:	78c9      	ldrb	r1, [r1, #3]
 8007fe6:	430b      	orrs	r3, r1
 8007fe8:	0e1b      	lsrs	r3, r3, #24
 8007fea:	4313      	orrs	r3, r2
 8007fec:	4a18      	ldr	r2, [pc, #96]	; (8008050 <MX_LWIP_Init+0x250>)
 8007fee:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8007ff0:	4b18      	ldr	r3, [pc, #96]	; (8008054 <MX_LWIP_Init+0x254>)
 8007ff2:	9302      	str	r3, [sp, #8]
 8007ff4:	4b18      	ldr	r3, [pc, #96]	; (8008058 <MX_LWIP_Init+0x258>)
 8007ff6:	9301      	str	r3, [sp, #4]
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	9300      	str	r3, [sp, #0]
 8007ffc:	4b14      	ldr	r3, [pc, #80]	; (8008050 <MX_LWIP_Init+0x250>)
 8007ffe:	4a13      	ldr	r2, [pc, #76]	; (800804c <MX_LWIP_Init+0x24c>)
 8008000:	4911      	ldr	r1, [pc, #68]	; (8008048 <MX_LWIP_Init+0x248>)
 8008002:	4816      	ldr	r0, [pc, #88]	; (800805c <MX_LWIP_Init+0x25c>)
 8008004:	f002 fdce 	bl	800aba4 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8008008:	4814      	ldr	r0, [pc, #80]	; (800805c <MX_LWIP_Init+0x25c>)
 800800a:	f002 ff7d 	bl	800af08 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800800e:	4b13      	ldr	r3, [pc, #76]	; (800805c <MX_LWIP_Init+0x25c>)
 8008010:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008014:	089b      	lsrs	r3, r3, #2
 8008016:	f003 0301 	and.w	r3, r3, #1
 800801a:	b2db      	uxtb	r3, r3
 800801c:	2b00      	cmp	r3, #0
 800801e:	d003      	beq.n	8008028 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8008020:	480e      	ldr	r0, [pc, #56]	; (800805c <MX_LWIP_Init+0x25c>)
 8008022:	f002 ff81 	bl	800af28 <netif_set_up>
 8008026:	e002      	b.n	800802e <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8008028:	480c      	ldr	r0, [pc, #48]	; (800805c <MX_LWIP_Init+0x25c>)
 800802a:	f002 ffe9 	bl	800b000 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800802e:	490c      	ldr	r1, [pc, #48]	; (8008060 <MX_LWIP_Init+0x260>)
 8008030:	480a      	ldr	r0, [pc, #40]	; (800805c <MX_LWIP_Init+0x25c>)
 8008032:	f003 f87b 	bl	800b12c <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8008036:	bf00      	nop
 8008038:	46bd      	mov	sp, r7
 800803a:	bd80      	pop	{r7, pc}
 800803c:	24000bd8 	.word	0x24000bd8
 8008040:	24000bd4 	.word	0x24000bd4
 8008044:	24000b94 	.word	0x24000b94
 8008048:	24000bcc 	.word	0x24000bcc
 800804c:	24000bdc 	.word	0x24000bdc
 8008050:	24000be0 	.word	0x24000be0
 8008054:	0801484d 	.word	0x0801484d
 8008058:	08008621 	.word	0x08008621
 800805c:	24000b98 	.word	0x24000b98
 8008060:	080080b5 	.word	0x080080b5

08008064 <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b082      	sub	sp, #8
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 800806c:	f7f9 fd30 	bl	8001ad0 <HAL_GetTick>
 8008070:	4602      	mov	r2, r0
 8008072:	4b08      	ldr	r3, [pc, #32]	; (8008094 <Ethernet_Link_Periodic_Handle+0x30>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	1ad3      	subs	r3, r2, r3
 8008078:	2b63      	cmp	r3, #99	; 0x63
 800807a:	d907      	bls.n	800808c <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 800807c:	f7f9 fd28 	bl	8001ad0 <HAL_GetTick>
 8008080:	4603      	mov	r3, r0
 8008082:	4a04      	ldr	r2, [pc, #16]	; (8008094 <Ethernet_Link_Periodic_Handle+0x30>)
 8008084:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	f000 fb5e 	bl	8008748 <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 800808c:	bf00      	nop
 800808e:	3708      	adds	r7, #8
 8008090:	46bd      	mov	sp, r7
 8008092:	bd80      	pop	{r7, pc}
 8008094:	24000bd0 	.word	0x24000bd0

08008098 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 800809c:	4804      	ldr	r0, [pc, #16]	; (80080b0 <MX_LWIP_Process+0x18>)
 800809e:	f000 fa9f 	bl	80085e0 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 80080a2:	f009 ffc7 	bl	8012034 <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 80080a6:	4802      	ldr	r0, [pc, #8]	; (80080b0 <MX_LWIP_Process+0x18>)
 80080a8:	f7ff ffdc 	bl	8008064 <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 80080ac:	bf00      	nop
 80080ae:	bd80      	pop	{r7, pc}
 80080b0:	24000b98 	.word	0x24000b98

080080b4 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 80080b4:	b480      	push	{r7}
 80080b6:	b083      	sub	sp, #12
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 80080bc:	bf00      	nop
 80080be:	370c      	adds	r7, #12
 80080c0:	46bd      	mov	sp, r7
 80080c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c6:	4770      	bx	lr

080080c8 <HAL_ETH_MspInit>:
/* Private functions ---------------------------------------------------------*/
void pbuf_free_custom(struct pbuf *p);
void Error_Handler(void);

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b08e      	sub	sp, #56	; 0x38
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80080d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80080d4:	2200      	movs	r2, #0
 80080d6:	601a      	str	r2, [r3, #0]
 80080d8:	605a      	str	r2, [r3, #4]
 80080da:	609a      	str	r2, [r3, #8]
 80080dc:	60da      	str	r2, [r3, #12]
 80080de:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	4a5d      	ldr	r2, [pc, #372]	; (800825c <HAL_ETH_MspInit+0x194>)
 80080e6:	4293      	cmp	r3, r2
 80080e8:	f040 80b3 	bne.w	8008252 <HAL_ETH_MspInit+0x18a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80080ec:	4b5c      	ldr	r3, [pc, #368]	; (8008260 <HAL_ETH_MspInit+0x198>)
 80080ee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80080f2:	4a5b      	ldr	r2, [pc, #364]	; (8008260 <HAL_ETH_MspInit+0x198>)
 80080f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80080f8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80080fc:	4b58      	ldr	r3, [pc, #352]	; (8008260 <HAL_ETH_MspInit+0x198>)
 80080fe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008102:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008106:	623b      	str	r3, [r7, #32]
 8008108:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800810a:	4b55      	ldr	r3, [pc, #340]	; (8008260 <HAL_ETH_MspInit+0x198>)
 800810c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008110:	4a53      	ldr	r2, [pc, #332]	; (8008260 <HAL_ETH_MspInit+0x198>)
 8008112:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008116:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800811a:	4b51      	ldr	r3, [pc, #324]	; (8008260 <HAL_ETH_MspInit+0x198>)
 800811c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008120:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008124:	61fb      	str	r3, [r7, #28]
 8008126:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8008128:	4b4d      	ldr	r3, [pc, #308]	; (8008260 <HAL_ETH_MspInit+0x198>)
 800812a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800812e:	4a4c      	ldr	r2, [pc, #304]	; (8008260 <HAL_ETH_MspInit+0x198>)
 8008130:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008134:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8008138:	4b49      	ldr	r3, [pc, #292]	; (8008260 <HAL_ETH_MspInit+0x198>)
 800813a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800813e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008142:	61bb      	str	r3, [r7, #24]
 8008144:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008146:	4b46      	ldr	r3, [pc, #280]	; (8008260 <HAL_ETH_MspInit+0x198>)
 8008148:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800814c:	4a44      	ldr	r2, [pc, #272]	; (8008260 <HAL_ETH_MspInit+0x198>)
 800814e:	f043 0304 	orr.w	r3, r3, #4
 8008152:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008156:	4b42      	ldr	r3, [pc, #264]	; (8008260 <HAL_ETH_MspInit+0x198>)
 8008158:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800815c:	f003 0304 	and.w	r3, r3, #4
 8008160:	617b      	str	r3, [r7, #20]
 8008162:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008164:	4b3e      	ldr	r3, [pc, #248]	; (8008260 <HAL_ETH_MspInit+0x198>)
 8008166:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800816a:	4a3d      	ldr	r2, [pc, #244]	; (8008260 <HAL_ETH_MspInit+0x198>)
 800816c:	f043 0301 	orr.w	r3, r3, #1
 8008170:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008174:	4b3a      	ldr	r3, [pc, #232]	; (8008260 <HAL_ETH_MspInit+0x198>)
 8008176:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800817a:	f003 0301 	and.w	r3, r3, #1
 800817e:	613b      	str	r3, [r7, #16]
 8008180:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008182:	4b37      	ldr	r3, [pc, #220]	; (8008260 <HAL_ETH_MspInit+0x198>)
 8008184:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008188:	4a35      	ldr	r2, [pc, #212]	; (8008260 <HAL_ETH_MspInit+0x198>)
 800818a:	f043 0302 	orr.w	r3, r3, #2
 800818e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008192:	4b33      	ldr	r3, [pc, #204]	; (8008260 <HAL_ETH_MspInit+0x198>)
 8008194:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008198:	f003 0302 	and.w	r3, r3, #2
 800819c:	60fb      	str	r3, [r7, #12]
 800819e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80081a0:	4b2f      	ldr	r3, [pc, #188]	; (8008260 <HAL_ETH_MspInit+0x198>)
 80081a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80081a6:	4a2e      	ldr	r2, [pc, #184]	; (8008260 <HAL_ETH_MspInit+0x198>)
 80081a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80081b0:	4b2b      	ldr	r3, [pc, #172]	; (8008260 <HAL_ETH_MspInit+0x198>)
 80081b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80081b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081ba:	60bb      	str	r3, [r7, #8]
 80081bc:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80081be:	2332      	movs	r3, #50	; 0x32
 80081c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80081c2:	2302      	movs	r3, #2
 80081c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081c6:	2300      	movs	r3, #0
 80081c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80081ca:	2303      	movs	r3, #3
 80081cc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80081ce:	230b      	movs	r3, #11
 80081d0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80081d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80081d6:	4619      	mov	r1, r3
 80081d8:	4822      	ldr	r0, [pc, #136]	; (8008264 <HAL_ETH_MspInit+0x19c>)
 80081da:	f7fb fcbf 	bl	8003b5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80081de:	2386      	movs	r3, #134	; 0x86
 80081e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80081e2:	2302      	movs	r3, #2
 80081e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081e6:	2300      	movs	r3, #0
 80081e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80081ea:	2303      	movs	r3, #3
 80081ec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80081ee:	230b      	movs	r3, #11
 80081f0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80081f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80081f6:	4619      	mov	r1, r3
 80081f8:	481b      	ldr	r0, [pc, #108]	; (8008268 <HAL_ETH_MspInit+0x1a0>)
 80081fa:	f7fb fcaf 	bl	8003b5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80081fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008202:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008204:	2302      	movs	r3, #2
 8008206:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008208:	2300      	movs	r3, #0
 800820a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800820c:	2303      	movs	r3, #3
 800820e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008210:	230b      	movs	r3, #11
 8008212:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8008214:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008218:	4619      	mov	r1, r3
 800821a:	4814      	ldr	r0, [pc, #80]	; (800826c <HAL_ETH_MspInit+0x1a4>)
 800821c:	f7fb fc9e 	bl	8003b5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8008220:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8008224:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008226:	2302      	movs	r3, #2
 8008228:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800822a:	2300      	movs	r3, #0
 800822c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800822e:	2303      	movs	r3, #3
 8008230:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008232:	230b      	movs	r3, #11
 8008234:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8008236:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800823a:	4619      	mov	r1, r3
 800823c:	480c      	ldr	r0, [pc, #48]	; (8008270 <HAL_ETH_MspInit+0x1a8>)
 800823e:	f7fb fc8d 	bl	8003b5c <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 8008242:	2200      	movs	r2, #0
 8008244:	2100      	movs	r1, #0
 8008246:	203d      	movs	r0, #61	; 0x3d
 8008248:	f7f9 fd6d 	bl	8001d26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800824c:	203d      	movs	r0, #61	; 0x3d
 800824e:	f7f9 fd84 	bl	8001d5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8008252:	bf00      	nop
 8008254:	3738      	adds	r7, #56	; 0x38
 8008256:	46bd      	mov	sp, r7
 8008258:	bd80      	pop	{r7, pc}
 800825a:	bf00      	nop
 800825c:	40028000 	.word	0x40028000
 8008260:	58024400 	.word	0x58024400
 8008264:	58020800 	.word	0x58020800
 8008268:	58020000 	.word	0x58020000
 800826c:	58020400 	.word	0x58020400
 8008270:	58021800 	.word	0x58021800

08008274 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b086      	sub	sp, #24
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800827c:	2300      	movs	r3, #0
 800827e:	74fb      	strb	r3, [r7, #19]
  uint32_t idx = 0;
 8008280:	2300      	movs	r3, #0
 8008282:	617b      	str	r3, [r7, #20]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8008284:	4b4a      	ldr	r3, [pc, #296]	; (80083b0 <low_level_init+0x13c>)
 8008286:	4a4b      	ldr	r2, [pc, #300]	; (80083b4 <low_level_init+0x140>)
 8008288:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800828a:	2300      	movs	r3, #0
 800828c:	733b      	strb	r3, [r7, #12]
  MACAddr[1] = 0x80;
 800828e:	2380      	movs	r3, #128	; 0x80
 8008290:	737b      	strb	r3, [r7, #13]
  MACAddr[2] = 0xE1;
 8008292:	23e1      	movs	r3, #225	; 0xe1
 8008294:	73bb      	strb	r3, [r7, #14]
  MACAddr[3] = 0x00;
 8008296:	2300      	movs	r3, #0
 8008298:	73fb      	strb	r3, [r7, #15]
  MACAddr[4] = 0x00;
 800829a:	2300      	movs	r3, #0
 800829c:	743b      	strb	r3, [r7, #16]
  MACAddr[5] = 0x00;
 800829e:	2300      	movs	r3, #0
 80082a0:	747b      	strb	r3, [r7, #17]
  heth.Init.MACAddr = &MACAddr[0];
 80082a2:	4a43      	ldr	r2, [pc, #268]	; (80083b0 <low_level_init+0x13c>)
 80082a4:	f107 030c 	add.w	r3, r7, #12
 80082a8:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80082aa:	4b41      	ldr	r3, [pc, #260]	; (80083b0 <low_level_init+0x13c>)
 80082ac:	2201      	movs	r2, #1
 80082ae:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80082b0:	4b3f      	ldr	r3, [pc, #252]	; (80083b0 <low_level_init+0x13c>)
 80082b2:	4a41      	ldr	r2, [pc, #260]	; (80083b8 <low_level_init+0x144>)
 80082b4:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80082b6:	4b3e      	ldr	r3, [pc, #248]	; (80083b0 <low_level_init+0x13c>)
 80082b8:	4a40      	ldr	r2, [pc, #256]	; (80083bc <low_level_init+0x148>)
 80082ba:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80082bc:	4b3c      	ldr	r3, [pc, #240]	; (80083b0 <low_level_init+0x13c>)
 80082be:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80082c2:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80082c4:	483a      	ldr	r0, [pc, #232]	; (80083b0 <low_level_init+0x13c>)
 80082c6:	f7f9 fde5 	bl	8001e94 <HAL_ETH_Init>
 80082ca:	4603      	mov	r3, r0
 80082cc:	74fb      	strb	r3, [r7, #19]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80082ce:	2234      	movs	r2, #52	; 0x34
 80082d0:	2100      	movs	r1, #0
 80082d2:	483b      	ldr	r0, [pc, #236]	; (80083c0 <low_level_init+0x14c>)
 80082d4:	f00c fbea 	bl	8014aac <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80082d8:	4b39      	ldr	r3, [pc, #228]	; (80083c0 <low_level_init+0x14c>)
 80082da:	2221      	movs	r2, #33	; 0x21
 80082dc:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80082de:	4b38      	ldr	r3, [pc, #224]	; (80083c0 <low_level_init+0x14c>)
 80082e0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80082e4:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80082e6:	4b36      	ldr	r3, [pc, #216]	; (80083c0 <low_level_init+0x14c>)
 80082e8:	2200      	movs	r2, #0
 80082ea:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 80082ec:	4835      	ldr	r0, [pc, #212]	; (80083c4 <low_level_init+0x150>)
 80082ee:	f002 fb21 	bl	800a934 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2206      	movs	r2, #6
 80082f6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80082fa:	4b2d      	ldr	r3, [pc, #180]	; (80083b0 <low_level_init+0x13c>)
 80082fc:	685b      	ldr	r3, [r3, #4]
 80082fe:	781a      	ldrb	r2, [r3, #0]
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8008306:	4b2a      	ldr	r3, [pc, #168]	; (80083b0 <low_level_init+0x13c>)
 8008308:	685b      	ldr	r3, [r3, #4]
 800830a:	785a      	ldrb	r2, [r3, #1]
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8008312:	4b27      	ldr	r3, [pc, #156]	; (80083b0 <low_level_init+0x13c>)
 8008314:	685b      	ldr	r3, [r3, #4]
 8008316:	789a      	ldrb	r2, [r3, #2]
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800831e:	4b24      	ldr	r3, [pc, #144]	; (80083b0 <low_level_init+0x13c>)
 8008320:	685b      	ldr	r3, [r3, #4]
 8008322:	78da      	ldrb	r2, [r3, #3]
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800832a:	4b21      	ldr	r3, [pc, #132]	; (80083b0 <low_level_init+0x13c>)
 800832c:	685b      	ldr	r3, [r3, #4]
 800832e:	791a      	ldrb	r2, [r3, #4]
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8008336:	4b1e      	ldr	r3, [pc, #120]	; (80083b0 <low_level_init+0x13c>)
 8008338:	685b      	ldr	r3, [r3, #4]
 800833a:	795a      	ldrb	r2, [r3, #5]
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8008348:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008350:	f043 030a 	orr.w	r3, r3, #10
 8008354:	b2da      	uxtb	r2, r3
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 800835c:	2300      	movs	r3, #0
 800835e:	617b      	str	r3, [r7, #20]
 8008360:	e00e      	b.n	8008380 <low_level_init+0x10c>
  {
    HAL_ETH_DescAssignMemory(&heth, idx, Rx_Buff[idx], NULL);
 8008362:	697b      	ldr	r3, [r7, #20]
 8008364:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8008368:	fb02 f303 	mul.w	r3, r2, r3
 800836c:	4a16      	ldr	r2, [pc, #88]	; (80083c8 <low_level_init+0x154>)
 800836e:	441a      	add	r2, r3
 8008370:	2300      	movs	r3, #0
 8008372:	6979      	ldr	r1, [r7, #20]
 8008374:	480e      	ldr	r0, [pc, #56]	; (80083b0 <low_level_init+0x13c>)
 8008376:	f7f9 fe67 	bl	8002048 <HAL_ETH_DescAssignMemory>
  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 800837a:	697b      	ldr	r3, [r7, #20]
 800837c:	3301      	adds	r3, #1
 800837e:	617b      	str	r3, [r7, #20]
 8008380:	697b      	ldr	r3, [r7, #20]
 8008382:	2b03      	cmp	r3, #3
 8008384:	d9ed      	bls.n	8008362 <low_level_init+0xee>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8008386:	4911      	ldr	r1, [pc, #68]	; (80083cc <low_level_init+0x158>)
 8008388:	4811      	ldr	r0, [pc, #68]	; (80083d0 <low_level_init+0x15c>)
 800838a:	f7f9 f9ba 	bl	8001702 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800838e:	4810      	ldr	r0, [pc, #64]	; (80083d0 <low_level_init+0x15c>)
 8008390:	f7f9 f9e9 	bl	8001766 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8008394:	7cfb      	ldrb	r3, [r7, #19]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d103      	bne.n	80083a2 <low_level_init+0x12e>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f000 f9d4 	bl	8008748 <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 80083a0:	e001      	b.n	80083a6 <low_level_init+0x132>
    Error_Handler();
 80083a2:	f7f8 fcfd 	bl	8000da0 <Error_Handler>
}
 80083a6:	bf00      	nop
 80083a8:	3718      	adds	r7, #24
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bd80      	pop	{r7, pc}
 80083ae:	bf00      	nop
 80083b0:	24000cd0 	.word	0x24000cd0
 80083b4:	40028000 	.word	0x40028000
 80083b8:	30040060 	.word	0x30040060
 80083bc:	30040000 	.word	0x30040000
 80083c0:	24000d58 	.word	0x24000d58
 80083c4:	08018c90 	.word	0x08018c90
 80083c8:	30040200 	.word	0x30040200
 80083cc:	24000020 	.word	0x24000020
 80083d0:	24000cb0 	.word	0x24000cb0

080083d4 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b092      	sub	sp, #72	; 0x48
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
 80083dc:	6039      	str	r1, [r7, #0]
  uint32_t i=0;
 80083de:	2300      	movs	r3, #0
 80083e0:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q;
  err_t errval = ERR_OK;
 80083e2:	2300      	movs	r3, #0
 80083e4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT];

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 80083e8:	f107 030c 	add.w	r3, r7, #12
 80083ec:	2230      	movs	r2, #48	; 0x30
 80083ee:	2100      	movs	r1, #0
 80083f0:	4618      	mov	r0, r3
 80083f2:	f00c fb5b 	bl	8014aac <memset>

  for(q = p; q != NULL; q = q->next)
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	643b      	str	r3, [r7, #64]	; 0x40
 80083fa:	e049      	b.n	8008490 <low_level_output+0xbc>
  {
    if(i >= ETH_TX_DESC_CNT)
 80083fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80083fe:	2b03      	cmp	r3, #3
 8008400:	d902      	bls.n	8008408 <low_level_output+0x34>
      return ERR_IF;
 8008402:	f06f 030b 	mvn.w	r3, #11
 8008406:	e056      	b.n	80084b6 <low_level_output+0xe2>

    Txbuffer[i].buffer = q->payload;
 8008408:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800840a:	6859      	ldr	r1, [r3, #4]
 800840c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800840e:	4613      	mov	r3, r2
 8008410:	005b      	lsls	r3, r3, #1
 8008412:	4413      	add	r3, r2
 8008414:	009b      	lsls	r3, r3, #2
 8008416:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800841a:	4413      	add	r3, r2
 800841c:	3b3c      	subs	r3, #60	; 0x3c
 800841e:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8008420:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008422:	895b      	ldrh	r3, [r3, #10]
 8008424:	4619      	mov	r1, r3
 8008426:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008428:	4613      	mov	r3, r2
 800842a:	005b      	lsls	r3, r3, #1
 800842c:	4413      	add	r3, r2
 800842e:	009b      	lsls	r3, r3, #2
 8008430:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8008434:	4413      	add	r3, r2
 8008436:	3b38      	subs	r3, #56	; 0x38
 8008438:	6019      	str	r1, [r3, #0]

    if(i>0)
 800843a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800843c:	2b00      	cmp	r3, #0
 800843e:	d012      	beq.n	8008466 <low_level_output+0x92>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8008440:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008442:	1e5a      	subs	r2, r3, #1
 8008444:	f107 000c 	add.w	r0, r7, #12
 8008448:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800844a:	460b      	mov	r3, r1
 800844c:	005b      	lsls	r3, r3, #1
 800844e:	440b      	add	r3, r1
 8008450:	009b      	lsls	r3, r3, #2
 8008452:	18c1      	adds	r1, r0, r3
 8008454:	4613      	mov	r3, r2
 8008456:	005b      	lsls	r3, r3, #1
 8008458:	4413      	add	r3, r2
 800845a:	009b      	lsls	r3, r3, #2
 800845c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8008460:	4413      	add	r3, r2
 8008462:	3b34      	subs	r3, #52	; 0x34
 8008464:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8008466:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d10a      	bne.n	8008484 <low_level_output+0xb0>
    {
      Txbuffer[i].next = NULL;
 800846e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008470:	4613      	mov	r3, r2
 8008472:	005b      	lsls	r3, r3, #1
 8008474:	4413      	add	r3, r2
 8008476:	009b      	lsls	r3, r3, #2
 8008478:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800847c:	4413      	add	r3, r2
 800847e:	3b34      	subs	r3, #52	; 0x34
 8008480:	2200      	movs	r2, #0
 8008482:	601a      	str	r2, [r3, #0]
    }

    i++;
 8008484:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008486:	3301      	adds	r3, #1
 8008488:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 800848a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	643b      	str	r3, [r7, #64]	; 0x40
 8008490:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008492:	2b00      	cmp	r3, #0
 8008494:	d1b2      	bne.n	80083fc <low_level_output+0x28>
  }

  TxConfig.Length =  p->tot_len;
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	891b      	ldrh	r3, [r3, #8]
 800849a:	461a      	mov	r2, r3
 800849c:	4b08      	ldr	r3, [pc, #32]	; (80084c0 <low_level_output+0xec>)
 800849e:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 80084a0:	4a07      	ldr	r2, [pc, #28]	; (80084c0 <low_level_output+0xec>)
 80084a2:	f107 030c 	add.w	r3, r7, #12
 80084a6:	6093      	str	r3, [r2, #8]

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 80084a8:	2214      	movs	r2, #20
 80084aa:	4905      	ldr	r1, [pc, #20]	; (80084c0 <low_level_output+0xec>)
 80084ac:	4805      	ldr	r0, [pc, #20]	; (80084c4 <low_level_output+0xf0>)
 80084ae:	f7f9 feb8 	bl	8002222 <HAL_ETH_Transmit>

  return errval;
 80084b2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80084b6:	4618      	mov	r0, r3
 80084b8:	3748      	adds	r7, #72	; 0x48
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bd80      	pop	{r7, pc}
 80084be:	bf00      	nop
 80084c0:	24000d58 	.word	0x24000d58
 80084c4:	24000cd0 	.word	0x24000cd0

080084c8 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b098      	sub	sp, #96	; 0x60
 80084cc:	af02      	add	r7, sp, #8
 80084ce:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80084d0:	2300      	movs	r3, #0
 80084d2:	653b      	str	r3, [r7, #80]	; 0x50
  ETH_BufferTypeDef RxBuff[ETH_RX_DESC_CNT];
  uint32_t framelength = 0, i = 0;
 80084d4:	2300      	movs	r3, #0
 80084d6:	60bb      	str	r3, [r7, #8]
 80084d8:	2300      	movs	r3, #0
 80084da:	657b      	str	r3, [r7, #84]	; 0x54
  struct pbuf_custom* custom_pbuf;

  memset(RxBuff, 0 , ETH_RX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 80084dc:	f107 030c 	add.w	r3, r7, #12
 80084e0:	2230      	movs	r2, #48	; 0x30
 80084e2:	2100      	movs	r1, #0
 80084e4:	4618      	mov	r0, r3
 80084e6:	f00c fae1 	bl	8014aac <memset>

  for(i = 0; i < ETH_RX_DESC_CNT -1; i++)
 80084ea:	2300      	movs	r3, #0
 80084ec:	657b      	str	r3, [r7, #84]	; 0x54
 80084ee:	e015      	b.n	800851c <low_level_input+0x54>
  {
    RxBuff[i].next=&RxBuff[i+1];
 80084f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80084f2:	1c5a      	adds	r2, r3, #1
 80084f4:	f107 010c 	add.w	r1, r7, #12
 80084f8:	4613      	mov	r3, r2
 80084fa:	005b      	lsls	r3, r3, #1
 80084fc:	4413      	add	r3, r2
 80084fe:	009b      	lsls	r3, r3, #2
 8008500:	4419      	add	r1, r3
 8008502:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008504:	4613      	mov	r3, r2
 8008506:	005b      	lsls	r3, r3, #1
 8008508:	4413      	add	r3, r2
 800850a:	009b      	lsls	r3, r3, #2
 800850c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8008510:	4413      	add	r3, r2
 8008512:	3b44      	subs	r3, #68	; 0x44
 8008514:	6019      	str	r1, [r3, #0]
  for(i = 0; i < ETH_RX_DESC_CNT -1; i++)
 8008516:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008518:	3301      	adds	r3, #1
 800851a:	657b      	str	r3, [r7, #84]	; 0x54
 800851c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800851e:	2b02      	cmp	r3, #2
 8008520:	d9e6      	bls.n	80084f0 <low_level_input+0x28>
  }

  if (HAL_ETH_IsRxDataAvailable(&heth))
 8008522:	482b      	ldr	r0, [pc, #172]	; (80085d0 <low_level_input+0x108>)
 8008524:	f7f9 ff06 	bl	8002334 <HAL_ETH_IsRxDataAvailable>
 8008528:	4603      	mov	r3, r0
 800852a:	2b00      	cmp	r3, #0
 800852c:	d04a      	beq.n	80085c4 <low_level_input+0xfc>
  {
    HAL_ETH_GetRxDataBuffer(&heth, RxBuff);
 800852e:	f107 030c 	add.w	r3, r7, #12
 8008532:	4619      	mov	r1, r3
 8008534:	4826      	ldr	r0, [pc, #152]	; (80085d0 <low_level_input+0x108>)
 8008536:	f7f9 ffed 	bl	8002514 <HAL_ETH_GetRxDataBuffer>
    HAL_ETH_GetRxDataLength(&heth, &framelength);
 800853a:	f107 0308 	add.w	r3, r7, #8
 800853e:	4619      	mov	r1, r3
 8008540:	4823      	ldr	r0, [pc, #140]	; (80085d0 <low_level_input+0x108>)
 8008542:	f7fa f885 	bl	8002650 <HAL_ETH_GetRxDataLength>

    /* Build Rx descriptor to be ready for next data reception */
    HAL_ETH_BuildRxDescriptors(&heth);
 8008546:	4822      	ldr	r0, [pc, #136]	; (80085d0 <low_level_input+0x108>)
 8008548:	f7fa f8b5 	bl	80026b6 <HAL_ETH_BuildRxDescriptors>

#if !defined(DUAL_CORE) || defined(CORE_CM7)
    /* Invalidate data cache for ETH Rx Buffers */
    SCB_InvalidateDCache_by_Addr((uint32_t *)RxBuff->buffer, framelength);
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	68ba      	ldr	r2, [r7, #8]
 8008550:	64bb      	str	r3, [r7, #72]	; 0x48
 8008552:	647a      	str	r2, [r7, #68]	; 0x44
    if ( dsize > 0 ) { 
 8008554:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008556:	2b00      	cmp	r3, #0
 8008558:	dd1d      	ble.n	8008596 <low_level_input+0xce>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800855a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800855c:	f003 021f 	and.w	r2, r3, #31
 8008560:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008562:	4413      	add	r3, r2
 8008564:	643b      	str	r3, [r7, #64]	; 0x40
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8008566:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008568:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("dsb 0xF":::"memory");
 800856a:	f3bf 8f4f 	dsb	sy
}
 800856e:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8008570:	4a18      	ldr	r2, [pc, #96]	; (80085d4 <low_level_input+0x10c>)
 8008572:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008574:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8008578:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800857a:	3320      	adds	r3, #32
 800857c:	63fb      	str	r3, [r7, #60]	; 0x3c
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800857e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008580:	3b20      	subs	r3, #32
 8008582:	643b      	str	r3, [r7, #64]	; 0x40
      } while ( op_size > 0 );
 8008584:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008586:	2b00      	cmp	r3, #0
 8008588:	dcf2      	bgt.n	8008570 <low_level_input+0xa8>
  __ASM volatile ("dsb 0xF":::"memory");
 800858a:	f3bf 8f4f 	dsb	sy
}
 800858e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8008590:	f3bf 8f6f 	isb	sy
}
 8008594:	bf00      	nop
}
 8008596:	bf00      	nop
#endif

    custom_pbuf  = (struct pbuf_custom*)LWIP_MEMPOOL_ALLOC(RX_POOL);
 8008598:	480f      	ldr	r0, [pc, #60]	; (80085d8 <low_level_input+0x110>)
 800859a:	f002 fa3f 	bl	800aa1c <memp_malloc_pool>
 800859e:	64f8      	str	r0, [r7, #76]	; 0x4c
    custom_pbuf->custom_free_function = pbuf_free_custom;
 80085a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085a2:	4a0e      	ldr	r2, [pc, #56]	; (80085dc <low_level_input+0x114>)
 80085a4:	611a      	str	r2, [r3, #16]

    p = pbuf_alloced_custom(PBUF_RAW, framelength, PBUF_REF, custom_pbuf, RxBuff->buffer, framelength);
 80085a6:	68bb      	ldr	r3, [r7, #8]
 80085a8:	b299      	uxth	r1, r3
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	68ba      	ldr	r2, [r7, #8]
 80085ae:	b292      	uxth	r2, r2
 80085b0:	9201      	str	r2, [sp, #4]
 80085b2:	9300      	str	r3, [sp, #0]
 80085b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085b6:	2241      	movs	r2, #65	; 0x41
 80085b8:	2000      	movs	r0, #0
 80085ba:	f002 ff7d 	bl	800b4b8 <pbuf_alloced_custom>
 80085be:	6538      	str	r0, [r7, #80]	; 0x50

    return p;
 80085c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80085c2:	e000      	b.n	80085c6 <low_level_input+0xfe>
  }
  else
  {
    return NULL;
 80085c4:	2300      	movs	r3, #0
  }
}
 80085c6:	4618      	mov	r0, r3
 80085c8:	3758      	adds	r7, #88	; 0x58
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bd80      	pop	{r7, pc}
 80085ce:	bf00      	nop
 80085d0:	24000cd0 	.word	0x24000cd0
 80085d4:	e000ed00 	.word	0xe000ed00
 80085d8:	08018c90 	.word	0x08018c90
 80085dc:	0800867d 	.word	0x0800867d

080085e0 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b084      	sub	sp, #16
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 80085e8:	6878      	ldr	r0, [r7, #4]
 80085ea:	f7ff ff6d 	bl	80084c8 <low_level_input>
 80085ee:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d010      	beq.n	8008618 <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	691b      	ldr	r3, [r3, #16]
 80085fa:	6879      	ldr	r1, [r7, #4]
 80085fc:	68f8      	ldr	r0, [r7, #12]
 80085fe:	4798      	blx	r3
 8008600:	4603      	mov	r3, r0
 8008602:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 8008604:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d006      	beq.n	800861a <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 800860c:	68f8      	ldr	r0, [r7, #12]
 800860e:	f003 f90d 	bl	800b82c <pbuf_free>
    p = NULL;
 8008612:	2300      	movs	r3, #0
 8008614:	60fb      	str	r3, [r7, #12]
 8008616:	e000      	b.n	800861a <ethernetif_input+0x3a>
  if (p == NULL) return;
 8008618:	bf00      	nop
  }

}
 800861a:	3710      	adds	r7, #16
 800861c:	46bd      	mov	sp, r7
 800861e:	bd80      	pop	{r7, pc}

08008620 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b082      	sub	sp, #8
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d106      	bne.n	800863c <ethernetif_init+0x1c>
 800862e:	4b0e      	ldr	r3, [pc, #56]	; (8008668 <ethernetif_init+0x48>)
 8008630:	f240 12fd 	movw	r2, #509	; 0x1fd
 8008634:	490d      	ldr	r1, [pc, #52]	; (800866c <ethernetif_init+0x4c>)
 8008636:	480e      	ldr	r0, [pc, #56]	; (8008670 <ethernetif_init+0x50>)
 8008638:	f00c fa40 	bl	8014abc <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2273      	movs	r2, #115	; 0x73
 8008640:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2274      	movs	r2, #116	; 0x74
 8008648:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	4a09      	ldr	r2, [pc, #36]	; (8008674 <ethernetif_init+0x54>)
 8008650:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	4a08      	ldr	r2, [pc, #32]	; (8008678 <ethernetif_init+0x58>)
 8008656:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8008658:	6878      	ldr	r0, [r7, #4]
 800865a:	f7ff fe0b 	bl	8008274 <low_level_init>

  return ERR_OK;
 800865e:	2300      	movs	r3, #0
}
 8008660:	4618      	mov	r0, r3
 8008662:	3708      	adds	r7, #8
 8008664:	46bd      	mov	sp, r7
 8008666:	bd80      	pop	{r7, pc}
 8008668:	08015f60 	.word	0x08015f60
 800866c:	08015f7c 	.word	0x08015f7c
 8008670:	08015f8c 	.word	0x08015f8c
 8008674:	08012cc5 	.word	0x08012cc5
 8008678:	080083d5 	.word	0x080083d5

0800867c <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b084      	sub	sp, #16
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	60fb      	str	r3, [r7, #12]

  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8008688:	68f9      	ldr	r1, [r7, #12]
 800868a:	4803      	ldr	r0, [pc, #12]	; (8008698 <pbuf_free_custom+0x1c>)
 800868c:	f002 fa34 	bl	800aaf8 <memp_free_pool>
}
 8008690:	bf00      	nop
 8008692:	3710      	adds	r7, #16
 8008694:	46bd      	mov	sp, r7
 8008696:	bd80      	pop	{r7, pc}
 8008698:	08018c90 	.word	0x08018c90

0800869c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800869c:	b580      	push	{r7, lr}
 800869e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80086a0:	f7f9 fa16 	bl	8001ad0 <HAL_GetTick>
 80086a4:	4603      	mov	r3, r0
}
 80086a6:	4618      	mov	r0, r3
 80086a8:	bd80      	pop	{r7, pc}
	...

080086ac <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 80086b0:	4802      	ldr	r0, [pc, #8]	; (80086bc <ETH_PHY_IO_Init+0x10>)
 80086b2:	f7fa fc41 	bl	8002f38 <HAL_ETH_SetMDIOClockRange>

  return 0;
 80086b6:	2300      	movs	r3, #0
}
 80086b8:	4618      	mov	r0, r3
 80086ba:	bd80      	pop	{r7, pc}
 80086bc:	24000cd0 	.word	0x24000cd0

080086c0 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 80086c0:	b480      	push	{r7}
 80086c2:	af00      	add	r7, sp, #0
  return 0;
 80086c4:	2300      	movs	r3, #0
}
 80086c6:	4618      	mov	r0, r3
 80086c8:	46bd      	mov	sp, r7
 80086ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ce:	4770      	bx	lr

080086d0 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b084      	sub	sp, #16
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	60f8      	str	r0, [r7, #12]
 80086d8:	60b9      	str	r1, [r7, #8]
 80086da:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	68ba      	ldr	r2, [r7, #8]
 80086e0:	68f9      	ldr	r1, [r7, #12]
 80086e2:	4807      	ldr	r0, [pc, #28]	; (8008700 <ETH_PHY_IO_ReadReg+0x30>)
 80086e4:	f7fa f992 	bl	8002a0c <HAL_ETH_ReadPHYRegister>
 80086e8:	4603      	mov	r3, r0
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d002      	beq.n	80086f4 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 80086ee:	f04f 33ff 	mov.w	r3, #4294967295
 80086f2:	e000      	b.n	80086f6 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 80086f4:	2300      	movs	r3, #0
}
 80086f6:	4618      	mov	r0, r3
 80086f8:	3710      	adds	r7, #16
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bd80      	pop	{r7, pc}
 80086fe:	bf00      	nop
 8008700:	24000cd0 	.word	0x24000cd0

08008704 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b084      	sub	sp, #16
 8008708:	af00      	add	r7, sp, #0
 800870a:	60f8      	str	r0, [r7, #12]
 800870c:	60b9      	str	r1, [r7, #8]
 800870e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	68ba      	ldr	r2, [r7, #8]
 8008714:	68f9      	ldr	r1, [r7, #12]
 8008716:	4807      	ldr	r0, [pc, #28]	; (8008734 <ETH_PHY_IO_WriteReg+0x30>)
 8008718:	f7fa f9cc 	bl	8002ab4 <HAL_ETH_WritePHYRegister>
 800871c:	4603      	mov	r3, r0
 800871e:	2b00      	cmp	r3, #0
 8008720:	d002      	beq.n	8008728 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8008722:	f04f 33ff 	mov.w	r3, #4294967295
 8008726:	e000      	b.n	800872a <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8008728:	2300      	movs	r3, #0
}
 800872a:	4618      	mov	r0, r3
 800872c:	3710      	adds	r7, #16
 800872e:	46bd      	mov	sp, r7
 8008730:	bd80      	pop	{r7, pc}
 8008732:	bf00      	nop
 8008734:	24000cd0 	.word	0x24000cd0

08008738 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8008738:	b580      	push	{r7, lr}
 800873a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800873c:	f7f9 f9c8 	bl	8001ad0 <HAL_GetTick>
 8008740:	4603      	mov	r3, r0
}
 8008742:	4618      	mov	r0, r3
 8008744:	bd80      	pop	{r7, pc}
	...

08008748 <ethernet_link_check_state>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @param  argument: netif
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b0a0      	sub	sp, #128	; 0x80
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf;
  int32_t PHYLinkState;
  uint32_t linkchanged = 0, speed = 0, duplex =0;
 8008750:	2300      	movs	r3, #0
 8008752:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008754:	2300      	movs	r3, #0
 8008756:	67bb      	str	r3, [r7, #120]	; 0x78
 8008758:	2300      	movs	r3, #0
 800875a:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800875c:	483a      	ldr	r0, [pc, #232]	; (8008848 <ethernet_link_check_state+0x100>)
 800875e:	f7f9 f8aa 	bl	80018b6 <LAN8742_GetLinkState>
 8008762:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800876a:	089b      	lsrs	r3, r3, #2
 800876c:	f003 0301 	and.w	r3, r3, #1
 8008770:	b2db      	uxtb	r3, r3
 8008772:	2b00      	cmp	r3, #0
 8008774:	d00c      	beq.n	8008790 <ethernet_link_check_state+0x48>
 8008776:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008778:	2b01      	cmp	r3, #1
 800877a:	dc09      	bgt.n	8008790 <ethernet_link_check_state+0x48>
  {
    HAL_ETH_Stop(&heth);
 800877c:	4833      	ldr	r0, [pc, #204]	; (800884c <ethernet_link_check_state+0x104>)
 800877e:	f7f9 fd00 	bl	8002182 <HAL_ETH_Stop>
    netif_set_down(netif);
 8008782:	6878      	ldr	r0, [r7, #4]
 8008784:	f002 fc3c 	bl	800b000 <netif_set_down>
    netif_set_link_down(netif);
 8008788:	6878      	ldr	r0, [r7, #4]
 800878a:	f002 fc9f 	bl	800b0cc <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 800878e:	e056      	b.n	800883e <ethernet_link_check_state+0xf6>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008796:	f003 0304 	and.w	r3, r3, #4
 800879a:	2b00      	cmp	r3, #0
 800879c:	d14f      	bne.n	800883e <ethernet_link_check_state+0xf6>
 800879e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80087a0:	2b01      	cmp	r3, #1
 80087a2:	dd4c      	ble.n	800883e <ethernet_link_check_state+0xf6>
 80087a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80087a6:	3b02      	subs	r3, #2
 80087a8:	2b03      	cmp	r3, #3
 80087aa:	d82b      	bhi.n	8008804 <ethernet_link_check_state+0xbc>
 80087ac:	a201      	add	r2, pc, #4	; (adr r2, 80087b4 <ethernet_link_check_state+0x6c>)
 80087ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087b2:	bf00      	nop
 80087b4:	080087c5 	.word	0x080087c5
 80087b8:	080087d7 	.word	0x080087d7
 80087bc:	080087e7 	.word	0x080087e7
 80087c0:	080087f7 	.word	0x080087f7
      duplex = ETH_FULLDUPLEX_MODE;
 80087c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80087c8:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80087ca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80087ce:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80087d0:	2301      	movs	r3, #1
 80087d2:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80087d4:	e017      	b.n	8008806 <ethernet_link_check_state+0xbe>
      duplex = ETH_HALFDUPLEX_MODE;
 80087d6:	2300      	movs	r3, #0
 80087d8:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80087da:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80087de:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80087e0:	2301      	movs	r3, #1
 80087e2:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80087e4:	e00f      	b.n	8008806 <ethernet_link_check_state+0xbe>
      duplex = ETH_FULLDUPLEX_MODE;
 80087e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80087ea:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80087ec:	2300      	movs	r3, #0
 80087ee:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80087f0:	2301      	movs	r3, #1
 80087f2:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80087f4:	e007      	b.n	8008806 <ethernet_link_check_state+0xbe>
      duplex = ETH_HALFDUPLEX_MODE;
 80087f6:	2300      	movs	r3, #0
 80087f8:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80087fa:	2300      	movs	r3, #0
 80087fc:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80087fe:	2301      	movs	r3, #1
 8008800:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8008802:	e000      	b.n	8008806 <ethernet_link_check_state+0xbe>
      break;
 8008804:	bf00      	nop
    if(linkchanged)
 8008806:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008808:	2b00      	cmp	r3, #0
 800880a:	d018      	beq.n	800883e <ethernet_link_check_state+0xf6>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800880c:	f107 030c 	add.w	r3, r7, #12
 8008810:	4619      	mov	r1, r3
 8008812:	480e      	ldr	r0, [pc, #56]	; (800884c <ethernet_link_check_state+0x104>)
 8008814:	f7fa f9a2 	bl	8002b5c <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8008818:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800881a:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 800881c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800881e:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8008820:	f107 030c 	add.w	r3, r7, #12
 8008824:	4619      	mov	r1, r3
 8008826:	4809      	ldr	r0, [pc, #36]	; (800884c <ethernet_link_check_state+0x104>)
 8008828:	f7fa fb6c 	bl	8002f04 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 800882c:	4807      	ldr	r0, [pc, #28]	; (800884c <ethernet_link_check_state+0x104>)
 800882e:	f7f9 fc4c 	bl	80020ca <HAL_ETH_Start>
      netif_set_up(netif);
 8008832:	6878      	ldr	r0, [r7, #4]
 8008834:	f002 fb78 	bl	800af28 <netif_set_up>
      netif_set_link_up(netif);
 8008838:	6878      	ldr	r0, [r7, #4]
 800883a:	f002 fc13 	bl	800b064 <netif_set_link_up>
}
 800883e:	bf00      	nop
 8008840:	3780      	adds	r7, #128	; 0x80
 8008842:	46bd      	mov	sp, r7
 8008844:	bd80      	pop	{r7, pc}
 8008846:	bf00      	nop
 8008848:	24000cb0 	.word	0x24000cb0
 800884c:	24000cd0 	.word	0x24000cd0

08008850 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b084      	sub	sp, #16
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
 8008858:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d002      	beq.n	8008866 <fs_open+0x16>
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d102      	bne.n	800886c <fs_open+0x1c>
    return ERR_ARG;
 8008866:	f06f 030f 	mvn.w	r3, #15
 800886a:	e028      	b.n	80088be <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 800886c:	4b16      	ldr	r3, [pc, #88]	; (80088c8 <fs_open+0x78>)
 800886e:	60fb      	str	r3, [r7, #12]
 8008870:	e020      	b.n	80088b4 <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	685b      	ldr	r3, [r3, #4]
 8008876:	4619      	mov	r1, r3
 8008878:	6838      	ldr	r0, [r7, #0]
 800887a:	f7f7 fd31 	bl	80002e0 <strcmp>
 800887e:	4603      	mov	r3, r0
 8008880:	2b00      	cmp	r3, #0
 8008882:	d114      	bne.n	80088ae <fs_open+0x5e>
      file->data = (const char *)f->data;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	689a      	ldr	r2, [r3, #8]
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	68da      	ldr	r2, [r3, #12]
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	68da      	ldr	r2, [r3, #12]
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2200      	movs	r2, #0
 80088a0:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	7c1a      	ldrb	r2, [r3, #16]
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 80088aa:	2300      	movs	r3, #0
 80088ac:	e007      	b.n	80088be <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	60fb      	str	r3, [r7, #12]
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d1db      	bne.n	8008872 <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 80088ba:	f06f 0305 	mvn.w	r3, #5
}
 80088be:	4618      	mov	r0, r3
 80088c0:	3710      	adds	r7, #16
 80088c2:	46bd      	mov	sp, r7
 80088c4:	bd80      	pop	{r7, pc}
 80088c6:	bf00      	nop
 80088c8:	0801a094 	.word	0x0801a094

080088cc <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 80088cc:	b480      	push	{r7}
 80088ce:	b083      	sub	sp, #12
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 80088d4:	bf00      	nop
 80088d6:	370c      	adds	r7, #12
 80088d8:	46bd      	mov	sp, r7
 80088da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088de:	4770      	bx	lr

080088e0 <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 80088e0:	b480      	push	{r7}
 80088e2:	b083      	sub	sp, #12
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	685a      	ldr	r2, [r3, #4]
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	689b      	ldr	r3, [r3, #8]
 80088f0:	1ad3      	subs	r3, r2, r3
}
 80088f2:	4618      	mov	r0, r3
 80088f4:	370c      	adds	r7, #12
 80088f6:	46bd      	mov	sp, r7
 80088f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fc:	4770      	bx	lr

080088fe <http_ssi_state_alloc>:

#if LWIP_HTTPD_SSI
/** Allocate as struct http_ssi_state. */
static struct http_ssi_state *
http_ssi_state_alloc(void)
{
 80088fe:	b580      	push	{r7, lr}
 8008900:	b082      	sub	sp, #8
 8008902:	af00      	add	r7, sp, #0
  struct http_ssi_state *ret = HTTP_ALLOC_SSI_STATE();
 8008904:	20e0      	movs	r0, #224	; 0xe0
 8008906:	f001 ff17 	bl	800a738 <mem_malloc>
 800890a:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(1);
    ret = HTTP_ALLOC_SSI_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d004      	beq.n	800891c <http_ssi_state_alloc+0x1e>
    memset(ret, 0, sizeof(struct http_ssi_state));
 8008912:	22e0      	movs	r2, #224	; 0xe0
 8008914:	2100      	movs	r1, #0
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	f00c f8c8 	bl	8014aac <memset>
  }
  return ret;
 800891c:	687b      	ldr	r3, [r7, #4]
}
 800891e:	4618      	mov	r0, r3
 8008920:	3708      	adds	r7, #8
 8008922:	46bd      	mov	sp, r7
 8008924:	bd80      	pop	{r7, pc}

08008926 <http_ssi_state_free>:

/** Free a struct http_ssi_state. */
static void
http_ssi_state_free(struct http_ssi_state *ssi)
{
 8008926:	b580      	push	{r7, lr}
 8008928:	b082      	sub	sp, #8
 800892a:	af00      	add	r7, sp, #0
 800892c:	6078      	str	r0, [r7, #4]
  if (ssi != NULL) {
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d002      	beq.n	800893a <http_ssi_state_free+0x14>
    HTTP_FREE_SSI_STATE(ssi);
 8008934:	6878      	ldr	r0, [r7, #4]
 8008936:	f001 fd93 	bl	800a460 <mem_free>
  }
}
 800893a:	bf00      	nop
 800893c:	3708      	adds	r7, #8
 800893e:	46bd      	mov	sp, r7
 8008940:	bd80      	pop	{r7, pc}

08008942 <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state *hs)
{
 8008942:	b580      	push	{r7, lr}
 8008944:	b082      	sub	sp, #8
 8008946:	af00      	add	r7, sp, #0
 8008948:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 800894a:	22b0      	movs	r2, #176	; 0xb0
 800894c:	2100      	movs	r1, #0
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	f00c f8ac 	bl	8014aac <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 8008954:	bf00      	nop
 8008956:	3708      	adds	r7, #8
 8008958:	46bd      	mov	sp, r7
 800895a:	bd80      	pop	{r7, pc}

0800895c <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state *
http_state_alloc(void)
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b082      	sub	sp, #8
 8008960:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 8008962:	20b0      	movs	r0, #176	; 0xb0
 8008964:	f001 fee8 	bl	800a738 <mem_malloc>
 8008968:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d002      	beq.n	8008976 <http_state_alloc+0x1a>
    http_state_init(ret);
 8008970:	6878      	ldr	r0, [r7, #4]
 8008972:	f7ff ffe6 	bl	8008942 <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 8008976:	687b      	ldr	r3, [r7, #4]
}
 8008978:	4618      	mov	r0, r3
 800897a:	3708      	adds	r7, #8
 800897c:	46bd      	mov	sp, r7
 800897e:	bd80      	pop	{r7, pc}

08008980 <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b082      	sub	sp, #8
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
  if (hs->handle) {
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	695b      	ldr	r3, [r3, #20]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d007      	beq.n	80089a0 <http_state_eof+0x20>
    u32_t ms_needed = sys_now() - hs->time_started;
    u32_t needed = LWIP_MAX(1, (ms_needed / 100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
                                     ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	695b      	ldr	r3, [r3, #20]
 8008994:	4618      	mov	r0, r3
 8008996:	f7ff ff99 	bl	80088cc <fs_close>
    hs->handle = NULL;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2200      	movs	r2, #0
 800899e:	615a      	str	r2, [r3, #20]
    mem_free(hs->buf);
    hs->buf = NULL;
  }
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */
#if LWIP_HTTPD_SSI
  if (hs->ssi) {
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d007      	beq.n	80089b8 <http_state_eof+0x38>
    http_ssi_state_free(hs->ssi);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089ac:	4618      	mov	r0, r3
 80089ae:	f7ff ffba 	bl	8008926 <http_ssi_state_free>
    hs->ssi = NULL;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2200      	movs	r2, #0
 80089b6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	6a1b      	ldr	r3, [r3, #32]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d007      	beq.n	80089d0 <http_state_eof+0x50>
    pbuf_free(hs->req);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	6a1b      	ldr	r3, [r3, #32]
 80089c4:	4618      	mov	r0, r3
 80089c6:	f002 ff31 	bl	800b82c <pbuf_free>
    hs->req = NULL;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2200      	movs	r2, #0
 80089ce:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 80089d0:	bf00      	nop
 80089d2:	3708      	adds	r7, #8
 80089d4:	46bd      	mov	sp, r7
 80089d6:	bd80      	pop	{r7, pc}

080089d8 <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b082      	sub	sp, #8
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d005      	beq.n	80089f2 <http_state_free+0x1a>
    http_state_eof(hs);
 80089e6:	6878      	ldr	r0, [r7, #4]
 80089e8:	f7ff ffca 	bl	8008980 <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 80089ec:	6878      	ldr	r0, [r7, #4]
 80089ee:	f001 fd37 	bl	800a460 <mem_free>
  }
}
 80089f2:	bf00      	nop
 80089f4:	3708      	adds	r7, #8
 80089f6:	46bd      	mov	sp, r7
 80089f8:	bd80      	pop	{r7, pc}
	...

080089fc <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b086      	sub	sp, #24
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	60f8      	str	r0, [r7, #12]
 8008a04:	60b9      	str	r1, [r7, #8]
 8008a06:	607a      	str	r2, [r7, #4]
 8008a08:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d106      	bne.n	8008a1e <http_write+0x22>
 8008a10:	4b2c      	ldr	r3, [pc, #176]	; (8008ac4 <http_write+0xc8>)
 8008a12:	f240 2219 	movw	r2, #537	; 0x219
 8008a16:	492c      	ldr	r1, [pc, #176]	; (8008ac8 <http_write+0xcc>)
 8008a18:	482c      	ldr	r0, [pc, #176]	; (8008acc <http_write+0xd0>)
 8008a1a:	f00c f84f 	bl	8014abc <iprintf>
  len = *length;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	881b      	ldrh	r3, [r3, #0]
 8008a22:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 8008a24:	8afb      	ldrh	r3, [r7, #22]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d101      	bne.n	8008a2e <http_write+0x32>
    return ERR_OK;
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	e045      	b.n	8008aba <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = altcp_sndbuf(pcb);
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8008a34:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 8008a36:	8aba      	ldrh	r2, [r7, #20]
 8008a38:	8afb      	ldrh	r3, [r7, #22]
 8008a3a:	429a      	cmp	r2, r3
 8008a3c:	d201      	bcs.n	8008a42 <http_write+0x46>
    len = max_len;
 8008a3e:	8abb      	ldrh	r3, [r7, #20]
 8008a40:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008a46:	005b      	lsls	r3, r3, #1
 8008a48:	82bb      	strh	r3, [r7, #20]
  if (len > max_len) {
 8008a4a:	8afa      	ldrh	r2, [r7, #22]
 8008a4c:	8abb      	ldrh	r3, [r7, #20]
 8008a4e:	429a      	cmp	r2, r3
 8008a50:	d901      	bls.n	8008a56 <http_write+0x5a>
    len = max_len;
 8008a52:	8abb      	ldrh	r3, [r7, #20]
 8008a54:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 8008a56:	78fb      	ldrb	r3, [r7, #3]
 8008a58:	8afa      	ldrh	r2, [r7, #22]
 8008a5a:	68b9      	ldr	r1, [r7, #8]
 8008a5c:	68f8      	ldr	r0, [r7, #12]
 8008a5e:	f007 fc81 	bl	8010364 <tcp_write>
 8008a62:	4603      	mov	r3, r0
 8008a64:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 8008a66:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008a6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a6e:	d10f      	bne.n	8008a90 <http_write+0x94>
      if ((altcp_sndbuf(pcb) == 0) ||
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d004      	beq.n	8008a84 <http_write+0x88>
          (altcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      if ((altcp_sndbuf(pcb) == 0) ||
 8008a80:	2b08      	cmp	r3, #8
 8008a82:	d902      	bls.n	8008a8a <http_write+0x8e>
        /* no need to try smaller sizes */
        len = 1;
 8008a84:	2301      	movs	r3, #1
 8008a86:	82fb      	strh	r3, [r7, #22]
 8008a88:	e002      	b.n	8008a90 <http_write+0x94>
      } else {
        len /= 2;
 8008a8a:	8afb      	ldrh	r3, [r7, #22]
 8008a8c:	085b      	lsrs	r3, r3, #1
 8008a8e:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 8008a90:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a98:	d102      	bne.n	8008aa0 <http_write+0xa4>
 8008a9a:	8afb      	ldrh	r3, [r7, #22]
 8008a9c:	2b01      	cmp	r3, #1
 8008a9e:	d8da      	bhi.n	8008a56 <http_write+0x5a>

  if (err == ERR_OK) {
 8008aa0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d103      	bne.n	8008ab0 <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	8afa      	ldrh	r2, [r7, #22]
 8008aac:	801a      	strh	r2, [r3, #0]
 8008aae:	e002      	b.n	8008ab6 <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	801a      	strh	r2, [r3, #0]
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
#endif

  return err;
 8008ab6:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8008aba:	4618      	mov	r0, r3
 8008abc:	3718      	adds	r7, #24
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bd80      	pop	{r7, pc}
 8008ac2:	bf00      	nop
 8008ac4:	08016030 	.word	0x08016030
 8008ac8:	08016068 	.word	0x08016068
 8008acc:	08016078 	.word	0x08016078

08008ad0 <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b086      	sub	sp, #24
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	60f8      	str	r0, [r7, #12]
 8008ad8:	60b9      	str	r1, [r7, #8]
 8008ada:	4613      	mov	r3, r2
 8008adc:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  altcp_arg(pcb, NULL);
 8008ade:	2100      	movs	r1, #0
 8008ae0:	68f8      	ldr	r0, [r7, #12]
 8008ae2:	f004 fd01 	bl	800d4e8 <tcp_arg>
  altcp_recv(pcb, NULL);
 8008ae6:	2100      	movs	r1, #0
 8008ae8:	68f8      	ldr	r0, [r7, #12]
 8008aea:	f004 fd0f 	bl	800d50c <tcp_recv>
  altcp_err(pcb, NULL);
 8008aee:	2100      	movs	r1, #0
 8008af0:	68f8      	ldr	r0, [r7, #12]
 8008af2:	f004 fd4f 	bl	800d594 <tcp_err>
  altcp_poll(pcb, NULL, 0);
 8008af6:	2200      	movs	r2, #0
 8008af8:	2100      	movs	r1, #0
 8008afa:	68f8      	ldr	r0, [r7, #12]
 8008afc:	f004 fd84 	bl	800d608 <tcp_poll>
  altcp_sent(pcb, NULL);
 8008b00:	2100      	movs	r1, #0
 8008b02:	68f8      	ldr	r0, [r7, #12]
 8008b04:	f004 fd24 	bl	800d550 <tcp_sent>
  if (hs != NULL) {
 8008b08:	68bb      	ldr	r3, [r7, #8]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d002      	beq.n	8008b14 <http_close_or_abort_conn+0x44>
    http_state_free(hs);
 8008b0e:	68b8      	ldr	r0, [r7, #8]
 8008b10:	f7ff ff62 	bl	80089d8 <http_state_free>
  }

  if (abort_conn) {
 8008b14:	79fb      	ldrb	r3, [r7, #7]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d004      	beq.n	8008b24 <http_close_or_abort_conn+0x54>
    altcp_abort(pcb);
 8008b1a:	68f8      	ldr	r0, [r7, #12]
 8008b1c:	f003 fc1e 	bl	800c35c <tcp_abort>
    return ERR_OK;
 8008b20:	2300      	movs	r3, #0
 8008b22:	e00f      	b.n	8008b44 <http_close_or_abort_conn+0x74>
  }
  err = altcp_close(pcb);
 8008b24:	68f8      	ldr	r0, [r7, #12]
 8008b26:	f003 fb2f 	bl	800c188 <tcp_close>
 8008b2a:	4603      	mov	r3, r0
 8008b2c:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 8008b2e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d004      	beq.n	8008b40 <http_close_or_abort_conn+0x70>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void *)pcb));
    /* error closing, try again later in poll */
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8008b36:	2204      	movs	r2, #4
 8008b38:	4904      	ldr	r1, [pc, #16]	; (8008b4c <http_close_or_abort_conn+0x7c>)
 8008b3a:	68f8      	ldr	r0, [r7, #12]
 8008b3c:	f004 fd64 	bl	800d608 <tcp_poll>
  }
  return err;
 8008b40:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008b44:	4618      	mov	r0, r3
 8008b46:	3718      	adds	r7, #24
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	bd80      	pop	{r7, pc}
 8008b4c:	08009bbb 	.word	0x08009bbb

08008b50 <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct altcp_pcb *pcb, struct http_state *hs)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b082      	sub	sp, #8
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
 8008b58:	6039      	str	r1, [r7, #0]
  return http_close_or_abort_conn(pcb, hs, 0);
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	6839      	ldr	r1, [r7, #0]
 8008b5e:	6878      	ldr	r0, [r7, #4]
 8008b60:	f7ff ffb6 	bl	8008ad0 <http_close_or_abort_conn>
 8008b64:	4603      	mov	r3, r0
}
 8008b66:	4618      	mov	r0, r3
 8008b68:	3708      	adds	r7, #8
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	bd80      	pop	{r7, pc}

08008b6e <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 8008b6e:	b580      	push	{r7, lr}
 8008b70:	b082      	sub	sp, #8
 8008b72:	af00      	add	r7, sp, #0
 8008b74:	6078      	str	r0, [r7, #4]
 8008b76:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    altcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 8008b78:	6839      	ldr	r1, [r7, #0]
 8008b7a:	6878      	ldr	r0, [r7, #4]
 8008b7c:	f7ff ffe8 	bl	8008b50 <http_close_conn>
  }
}
 8008b80:	bf00      	nop
 8008b82:	3708      	adds	r7, #8
 8008b84:	46bd      	mov	sp, r7
 8008b86:	bd80      	pop	{r7, pc}

08008b88 <extract_uri_parameters>:
 * @param params pointer to the NULL-terminated parameter string from the URI
 * @return number of parameters extracted
 */
static int
extract_uri_parameters(struct http_state *hs, char *params)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b086      	sub	sp, #24
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
 8008b90:	6039      	str	r1, [r7, #0]
  int loop;

  LWIP_UNUSED_ARG(hs);

  /* If we have no parameters at all, return immediately. */
  if (!params || (params[0] == '\0')) {
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d003      	beq.n	8008ba0 <extract_uri_parameters+0x18>
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	781b      	ldrb	r3, [r3, #0]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d101      	bne.n	8008ba4 <extract_uri_parameters+0x1c>
    return (0);
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	e04b      	b.n	8008c3c <extract_uri_parameters+0xb4>
  }

  /* Get a pointer to our first parameter */
  pair = params;
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	617b      	str	r3, [r7, #20]

  /* Parse up to LWIP_HTTPD_MAX_CGI_PARAMETERS from the passed string and ignore the
   * remainder (if any) */
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 8008ba8:	2300      	movs	r3, #0
 8008baa:	613b      	str	r3, [r7, #16]
 8008bac:	e03f      	b.n	8008c2e <extract_uri_parameters+0xa6>

    /* Save the name of the parameter */
    http_cgi_params[loop] = pair;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	693a      	ldr	r2, [r7, #16]
 8008bb2:	320c      	adds	r2, #12
 8008bb4:	6979      	ldr	r1, [r7, #20]
 8008bb6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Remember the start of this name=value pair */
    equals = pair;
 8008bba:	697b      	ldr	r3, [r7, #20]
 8008bbc:	60fb      	str	r3, [r7, #12]

    /* Find the start of the next name=value pair and replace the delimiter
     * with a 0 to terminate the previous pair string. */
    pair = strchr(pair, '&');
 8008bbe:	2126      	movs	r1, #38	; 0x26
 8008bc0:	6978      	ldr	r0, [r7, #20]
 8008bc2:	f00b fff3 	bl	8014bac <strchr>
 8008bc6:	6178      	str	r0, [r7, #20]
    if (pair) {
 8008bc8:	697b      	ldr	r3, [r7, #20]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d006      	beq.n	8008bdc <extract_uri_parameters+0x54>
      *pair = '\0';
 8008bce:	697b      	ldr	r3, [r7, #20]
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	701a      	strb	r2, [r3, #0]
      pair++;
 8008bd4:	697b      	ldr	r3, [r7, #20]
 8008bd6:	3301      	adds	r3, #1
 8008bd8:	617b      	str	r3, [r7, #20]
 8008bda:	e00c      	b.n	8008bf6 <extract_uri_parameters+0x6e>
    } else {
      /* We didn't find a new parameter so find the end of the URI and
       * replace the space with a '\0' */
      pair = strchr(equals, ' ');
 8008bdc:	2120      	movs	r1, #32
 8008bde:	68f8      	ldr	r0, [r7, #12]
 8008be0:	f00b ffe4 	bl	8014bac <strchr>
 8008be4:	6178      	str	r0, [r7, #20]
      if (pair) {
 8008be6:	697b      	ldr	r3, [r7, #20]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d002      	beq.n	8008bf2 <extract_uri_parameters+0x6a>
        *pair = '\0';
 8008bec:	697b      	ldr	r3, [r7, #20]
 8008bee:	2200      	movs	r2, #0
 8008bf0:	701a      	strb	r2, [r3, #0]
      }

      /* Revert to NULL so that we exit the loop as expected. */
      pair = NULL;
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	617b      	str	r3, [r7, #20]
    }

    /* Now find the '=' in the previous pair, replace it with '\0' and save
     * the parameter value string. */
    equals = strchr(equals, '=');
 8008bf6:	213d      	movs	r1, #61	; 0x3d
 8008bf8:	68f8      	ldr	r0, [r7, #12]
 8008bfa:	f00b ffd7 	bl	8014bac <strchr>
 8008bfe:	60f8      	str	r0, [r7, #12]
    if (equals) {
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d00a      	beq.n	8008c1c <extract_uri_parameters+0x94>
      *equals = '\0';
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	2200      	movs	r2, #0
 8008c0a:	701a      	strb	r2, [r3, #0]
      http_cgi_param_vals[loop] = equals + 1;
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	1c59      	adds	r1, r3, #1
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	693a      	ldr	r2, [r7, #16]
 8008c14:	321c      	adds	r2, #28
 8008c16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8008c1a:	e005      	b.n	8008c28 <extract_uri_parameters+0xa0>
    } else {
      http_cgi_param_vals[loop] = NULL;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	693a      	ldr	r2, [r7, #16]
 8008c20:	321c      	adds	r2, #28
 8008c22:	2100      	movs	r1, #0
 8008c24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 8008c28:	693b      	ldr	r3, [r7, #16]
 8008c2a:	3301      	adds	r3, #1
 8008c2c:	613b      	str	r3, [r7, #16]
 8008c2e:	693b      	ldr	r3, [r7, #16]
 8008c30:	2b0f      	cmp	r3, #15
 8008c32:	dc02      	bgt.n	8008c3a <extract_uri_parameters+0xb2>
 8008c34:	697b      	ldr	r3, [r7, #20]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d1b9      	bne.n	8008bae <extract_uri_parameters+0x26>
    }
  }

  return loop;
 8008c3a:	693b      	ldr	r3, [r7, #16]
}
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	3718      	adds	r7, #24
 8008c40:	46bd      	mov	sp, r7
 8008c42:	bd80      	pop	{r7, pc}

08008c44 <get_tag_insert>:
 *
 * @param hs http connection state
 */
static void
get_tag_insert(struct http_state *hs)
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b086      	sub	sp, #24
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
  struct http_ssi_state *ssi;
#if LWIP_HTTPD_SSI_MULTIPART
  u16_t current_tag_part;
#endif /* LWIP_HTTPD_SSI_MULTIPART */

  LWIP_ASSERT("hs != NULL", hs != NULL);
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d106      	bne.n	8008c60 <get_tag_insert+0x1c>
 8008c52:	4b51      	ldr	r3, [pc, #324]	; (8008d98 <get_tag_insert+0x154>)
 8008c54:	f44f 7241 	mov.w	r2, #772	; 0x304
 8008c58:	4950      	ldr	r1, [pc, #320]	; (8008d9c <get_tag_insert+0x158>)
 8008c5a:	4851      	ldr	r0, [pc, #324]	; (8008da0 <get_tag_insert+0x15c>)
 8008c5c:	f00b ff2e 	bl	8014abc <iprintf>
  ssi = hs->ssi;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c64:	613b      	str	r3, [r7, #16]
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 8008c66:	693b      	ldr	r3, [r7, #16]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d106      	bne.n	8008c7a <get_tag_insert+0x36>
 8008c6c:	4b4a      	ldr	r3, [pc, #296]	; (8008d98 <get_tag_insert+0x154>)
 8008c6e:	f240 3206 	movw	r2, #774	; 0x306
 8008c72:	494c      	ldr	r1, [pc, #304]	; (8008da4 <get_tag_insert+0x160>)
 8008c74:	484a      	ldr	r0, [pc, #296]	; (8008da0 <get_tag_insert+0x15c>)
 8008c76:	f00b ff21 	bl	8014abc <iprintf>
#endif /* LWIP_HTTPD_SSI_MULTIPART */
#if LWIP_HTTPD_SSI_RAW
  tag = ssi->tag_name;
#endif

  if (httpd_ssi_handler
 8008c7a:	4b4b      	ldr	r3, [pc, #300]	; (8008da8 <get_tag_insert+0x164>)
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d02e      	beq.n	8008ce0 <get_tag_insert+0x9c>
#if !LWIP_HTTPD_SSI_RAW
      && httpd_tags && httpd_num_tags
 8008c82:	4b4a      	ldr	r3, [pc, #296]	; (8008dac <get_tag_insert+0x168>)
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d02a      	beq.n	8008ce0 <get_tag_insert+0x9c>
 8008c8a:	4b49      	ldr	r3, [pc, #292]	; (8008db0 <get_tag_insert+0x16c>)
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d026      	beq.n	8008ce0 <get_tag_insert+0x9c>

    /* Find this tag in the list we have been provided. */
#if LWIP_HTTPD_SSI_RAW
    {
#else /* LWIP_HTTPD_SSI_RAW */
    for (tag = 0; tag < httpd_num_tags; tag++) {
 8008c92:	2300      	movs	r3, #0
 8008c94:	617b      	str	r3, [r7, #20]
 8008c96:	e01e      	b.n	8008cd6 <get_tag_insert+0x92>
      if (strcmp(ssi->tag_name, httpd_tags[tag]) == 0)
 8008c98:	693b      	ldr	r3, [r7, #16]
 8008c9a:	f103 0012 	add.w	r0, r3, #18
 8008c9e:	4b43      	ldr	r3, [pc, #268]	; (8008dac <get_tag_insert+0x168>)
 8008ca0:	681a      	ldr	r2, [r3, #0]
 8008ca2:	697b      	ldr	r3, [r7, #20]
 8008ca4:	009b      	lsls	r3, r3, #2
 8008ca6:	4413      	add	r3, r2
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	4619      	mov	r1, r3
 8008cac:	f7f7 fb18 	bl	80002e0 <strcmp>
 8008cb0:	4603      	mov	r3, r0
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d10c      	bne.n	8008cd0 <get_tag_insert+0x8c>
#endif /* LWIP_HTTPD_SSI_RAW */
      {
        ssi->tag_insert_len = httpd_ssi_handler(tag, ssi->tag_insert,
 8008cb6:	4b3c      	ldr	r3, [pc, #240]	; (8008da8 <get_tag_insert+0x164>)
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	693a      	ldr	r2, [r7, #16]
 8008cbc:	f102 011b 	add.w	r1, r2, #27
 8008cc0:	22c0      	movs	r2, #192	; 0xc0
 8008cc2:	6978      	ldr	r0, [r7, #20]
 8008cc4:	4798      	blx	r3
 8008cc6:	4603      	mov	r3, r0
 8008cc8:	461a      	mov	r2, r3
 8008cca:	693b      	ldr	r3, [r7, #16]
 8008ccc:	81da      	strh	r2, [r3, #14]
                                             );
#if LWIP_HTTPD_SSI_RAW
        if (ssi->tag_insert_len != HTTPD_SSI_TAG_UNKNOWN)
#endif /* LWIP_HTTPD_SSI_RAW */
        {
          return;
 8008cce:	e060      	b.n	8008d92 <get_tag_insert+0x14e>
    for (tag = 0; tag < httpd_num_tags; tag++) {
 8008cd0:	697b      	ldr	r3, [r7, #20]
 8008cd2:	3301      	adds	r3, #1
 8008cd4:	617b      	str	r3, [r7, #20]
 8008cd6:	4b36      	ldr	r3, [pc, #216]	; (8008db0 <get_tag_insert+0x16c>)
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	697a      	ldr	r2, [r7, #20]
 8008cdc:	429a      	cmp	r2, r3
 8008cde:	dbdb      	blt.n	8008c98 <get_tag_insert+0x54>
   * marker. */
#define UNKNOWN_TAG1_TEXT "<b>***UNKNOWN TAG "
#define UNKNOWN_TAG1_LEN  18
#define UNKNOWN_TAG2_TEXT "***</b>"
#define UNKNOWN_TAG2_LEN  7
  len = LWIP_MIN(sizeof(ssi->tag_name), LWIP_MIN(strlen(ssi->tag_name),
 8008ce0:	693b      	ldr	r3, [r7, #16]
 8008ce2:	3312      	adds	r3, #18
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	f7f7 fb05 	bl	80002f4 <strlen>
 8008cea:	4603      	mov	r3, r0
 8008cec:	2ba6      	cmp	r3, #166	; 0xa6
 8008cee:	d818      	bhi.n	8008d22 <get_tag_insert+0xde>
 8008cf0:	693b      	ldr	r3, [r7, #16]
 8008cf2:	3312      	adds	r3, #18
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	f7f7 fafd 	bl	80002f4 <strlen>
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	2b09      	cmp	r3, #9
 8008cfe:	d810      	bhi.n	8008d22 <get_tag_insert+0xde>
 8008d00:	693b      	ldr	r3, [r7, #16]
 8008d02:	3312      	adds	r3, #18
 8008d04:	4618      	mov	r0, r3
 8008d06:	f7f7 faf5 	bl	80002f4 <strlen>
 8008d0a:	4603      	mov	r3, r0
 8008d0c:	2ba6      	cmp	r3, #166	; 0xa6
 8008d0e:	d806      	bhi.n	8008d1e <get_tag_insert+0xda>
 8008d10:	693b      	ldr	r3, [r7, #16]
 8008d12:	3312      	adds	r3, #18
 8008d14:	4618      	mov	r0, r3
 8008d16:	f7f7 faed 	bl	80002f4 <strlen>
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	e002      	b.n	8008d24 <get_tag_insert+0xe0>
 8008d1e:	23a7      	movs	r3, #167	; 0xa7
 8008d20:	e000      	b.n	8008d24 <get_tag_insert+0xe0>
 8008d22:	2309      	movs	r3, #9
 8008d24:	60fb      	str	r3, [r7, #12]
                 LWIP_HTTPD_MAX_TAG_INSERT_LEN - (UNKNOWN_TAG1_LEN + UNKNOWN_TAG2_LEN)));
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 8008d26:	693b      	ldr	r3, [r7, #16]
 8008d28:	331b      	adds	r3, #27
 8008d2a:	2212      	movs	r2, #18
 8008d2c:	4921      	ldr	r1, [pc, #132]	; (8008db4 <get_tag_insert+0x170>)
 8008d2e:	4618      	mov	r0, r3
 8008d30:	f00b fe94 	bl	8014a5c <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 8008d34:	693b      	ldr	r3, [r7, #16]
 8008d36:	f103 002d 	add.w	r0, r3, #45	; 0x2d
 8008d3a:	693b      	ldr	r3, [r7, #16]
 8008d3c:	3312      	adds	r3, #18
 8008d3e:	68fa      	ldr	r2, [r7, #12]
 8008d40:	4619      	mov	r1, r3
 8008d42:	f00b fe8b 	bl	8014a5c <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	3312      	adds	r3, #18
 8008d4a:	3318      	adds	r3, #24
 8008d4c:	693a      	ldr	r2, [r7, #16]
 8008d4e:	4413      	add	r3, r2
 8008d50:	3303      	adds	r3, #3
 8008d52:	2207      	movs	r2, #7
 8008d54:	4918      	ldr	r1, [pc, #96]	; (8008db8 <get_tag_insert+0x174>)
 8008d56:	4618      	mov	r0, r3
 8008d58:	f00b fe80 	bl	8014a5c <memcpy>
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	3319      	adds	r3, #25
 8008d60:	693a      	ldr	r2, [r7, #16]
 8008d62:	4413      	add	r3, r2
 8008d64:	2200      	movs	r2, #0
 8008d66:	76da      	strb	r2, [r3, #27]

  len = strlen(ssi->tag_insert);
 8008d68:	693b      	ldr	r3, [r7, #16]
 8008d6a:	331b      	adds	r3, #27
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	f7f7 fac1 	bl	80002f4 <strlen>
 8008d72:	60f8      	str	r0, [r7, #12]
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d7a:	d306      	bcc.n	8008d8a <get_tag_insert+0x146>
 8008d7c:	4b06      	ldr	r3, [pc, #24]	; (8008d98 <get_tag_insert+0x154>)
 8008d7e:	f240 323f 	movw	r2, #831	; 0x33f
 8008d82:	490e      	ldr	r1, [pc, #56]	; (8008dbc <get_tag_insert+0x178>)
 8008d84:	4806      	ldr	r0, [pc, #24]	; (8008da0 <get_tag_insert+0x15c>)
 8008d86:	f00b fe99 	bl	8014abc <iprintf>
  ssi->tag_insert_len = (u16_t)len;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	b29a      	uxth	r2, r3
 8008d8e:	693b      	ldr	r3, [r7, #16]
 8008d90:	81da      	strh	r2, [r3, #14]
}
 8008d92:	3718      	adds	r7, #24
 8008d94:	46bd      	mov	sp, r7
 8008d96:	bd80      	pop	{r7, pc}
 8008d98:	08016030 	.word	0x08016030
 8008d9c:	080160a0 	.word	0x080160a0
 8008da0:	08016078 	.word	0x08016078
 8008da4:	080160ac 	.word	0x080160ac
 8008da8:	2400050c 	.word	0x2400050c
 8008dac:	24000514 	.word	0x24000514
 8008db0:	24000510 	.word	0x24000510
 8008db4:	080160b8 	.word	0x080160b8
 8008db8:	080160cc 	.word	0x080160cc
 8008dbc:	080160d4 	.word	0x080160d4

08008dc0 <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b084      	sub	sp, #16
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
 8008dc8:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	695b      	ldr	r3, [r3, #20]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d105      	bne.n	8008dde <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 8008dd2:	6839      	ldr	r1, [r7, #0]
 8008dd4:	6878      	ldr	r0, [r7, #4]
 8008dd6:	f7ff feca 	bl	8008b6e <http_eof>
    return 0;
 8008dda:	2300      	movs	r3, #0
 8008ddc:	e016      	b.n	8008e0c <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 8008dde:	683b      	ldr	r3, [r7, #0]
 8008de0:	695b      	ldr	r3, [r3, #20]
 8008de2:	4618      	mov	r0, r3
 8008de4:	f7ff fd7c 	bl	80088e0 <fs_bytes_left>
 8008de8:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	dc05      	bgt.n	8008dfc <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 8008df0:	6839      	ldr	r1, [r7, #0]
 8008df2:	6878      	ldr	r0, [r7, #4]
 8008df4:	f7ff febb 	bl	8008b6e <http_eof>
    return 0;
 8008df8:	2300      	movs	r3, #0
 8008dfa:	e007      	b.n	8008e0c <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 8008dfc:	4b05      	ldr	r3, [pc, #20]	; (8008e14 <http_check_eof+0x54>)
 8008dfe:	f240 429d 	movw	r2, #1181	; 0x49d
 8008e02:	4905      	ldr	r1, [pc, #20]	; (8008e18 <http_check_eof+0x58>)
 8008e04:	4805      	ldr	r0, [pc, #20]	; (8008e1c <http_check_eof+0x5c>)
 8008e06:	f00b fe59 	bl	8014abc <iprintf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 8008e0a:	2301      	movs	r3, #1
}
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	3710      	adds	r7, #16
 8008e10:	46bd      	mov	sp, r7
 8008e12:	bd80      	pop	{r7, pc}
 8008e14:	08016030 	.word	0x08016030
 8008e18:	080160e4 	.word	0x080160e4
 8008e1c:	08016078 	.word	0x08016078

08008e20 <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b084      	sub	sp, #16
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
 8008e28:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e32:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008e36:	4293      	cmp	r3, r2
 8008e38:	d803      	bhi.n	8008e42 <http_send_data_nonssi+0x22>
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e3e:	b29b      	uxth	r3, r3
 8008e40:	e001      	b.n	8008e46 <http_send_data_nonssi+0x26>
 8008e42:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008e46:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	6999      	ldr	r1, [r3, #24]
 8008e4c:	f107 020c 	add.w	r2, r7, #12
 8008e50:	2300      	movs	r3, #0
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	f7ff fdd2 	bl	80089fc <http_write>
 8008e58:	4603      	mov	r3, r0
 8008e5a:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 8008e5c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d10d      	bne.n	8008e80 <http_send_data_nonssi+0x60>
    data_to_send = 1;
 8008e64:	2301      	movs	r3, #1
 8008e66:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	699b      	ldr	r3, [r3, #24]
 8008e6c:	89ba      	ldrh	r2, [r7, #12]
 8008e6e:	441a      	add	r2, r3
 8008e70:	683b      	ldr	r3, [r7, #0]
 8008e72:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e78:	89ba      	ldrh	r2, [r7, #12]
 8008e7a:	1a9a      	subs	r2, r3, r2
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	625a      	str	r2, [r3, #36]	; 0x24
  }

  return data_to_send;
 8008e80:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e82:	4618      	mov	r0, r3
 8008e84:	3710      	adds	r7, #16
 8008e86:	46bd      	mov	sp, r7
 8008e88:	bd80      	pop	{r7, pc}
	...

08008e8c <http_send_data_ssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_ssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b086      	sub	sp, #24
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
 8008e94:	6039      	str	r1, [r7, #0]
  err_t err = ERR_OK;
 8008e96:	2300      	movs	r3, #0
 8008e98:	75fb      	strb	r3, [r7, #23]
  u16_t len;
  u8_t data_to_send = 0;
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	75bb      	strb	r3, [r7, #22]
  u8_t tag_type;

  struct http_ssi_state *ssi = hs->ssi;
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ea2:	613b      	str	r3, [r7, #16]
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 8008ea4:	693b      	ldr	r3, [r7, #16]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d106      	bne.n	8008eb8 <http_send_data_ssi+0x2c>
 8008eaa:	4b9d      	ldr	r3, [pc, #628]	; (8009120 <http_send_data_ssi+0x294>)
 8008eac:	f240 42cb 	movw	r2, #1227	; 0x4cb
 8008eb0:	499c      	ldr	r1, [pc, #624]	; (8009124 <http_send_data_ssi+0x298>)
 8008eb2:	489d      	ldr	r0, [pc, #628]	; (8009128 <http_send_data_ssi+0x29c>)
 8008eb4:	f00b fe02 	bl	8014abc <iprintf>
   * them with insert strings. We need to be careful here since a tag may
   * straddle the boundary of two blocks read from the file and we may also
   * have to split the insert string between two tcp_write operations. */

  /* How much data could we send? */
  len = altcp_sndbuf(pcb);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8008ebe:	81fb      	strh	r3, [r7, #14]

  /* Do we have remaining data to send before parsing more? */
  if (ssi->parsed > hs->file) {
 8008ec0:	693b      	ldr	r3, [r7, #16]
 8008ec2:	681a      	ldr	r2, [r3, #0]
 8008ec4:	683b      	ldr	r3, [r7, #0]
 8008ec6:	699b      	ldr	r3, [r3, #24]
 8008ec8:	429a      	cmp	r2, r3
 8008eca:	f240 826a 	bls.w	80093a2 <http_send_data_ssi+0x516>
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 8008ece:	693b      	ldr	r3, [r7, #16]
 8008ed0:	681a      	ldr	r2, [r3, #0]
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	699b      	ldr	r3, [r3, #24]
 8008ed6:	1ad3      	subs	r3, r2, r3
 8008ed8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008edc:	4293      	cmp	r3, r2
 8008ede:	dc06      	bgt.n	8008eee <http_send_data_ssi+0x62>
 8008ee0:	693b      	ldr	r3, [r7, #16]
 8008ee2:	681a      	ldr	r2, [r3, #0]
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	699b      	ldr	r3, [r3, #24]
 8008ee8:	1ad3      	subs	r3, r2, r3
 8008eea:	b29b      	uxth	r3, r3
 8008eec:	e001      	b.n	8008ef2 <http_send_data_ssi+0x66>
 8008eee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008ef2:	81fb      	strh	r3, [r7, #14]

    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8008ef4:	683b      	ldr	r3, [r7, #0]
 8008ef6:	6999      	ldr	r1, [r3, #24]
 8008ef8:	f107 020e 	add.w	r2, r7, #14
 8008efc:	2300      	movs	r3, #0
 8008efe:	6878      	ldr	r0, [r7, #4]
 8008f00:	f7ff fd7c 	bl	80089fc <http_write>
 8008f04:	4603      	mov	r3, r0
 8008f06:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 8008f08:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d10d      	bne.n	8008f2c <http_send_data_ssi+0xa0>
      data_to_send = 1;
 8008f10:	2301      	movs	r3, #1
 8008f12:	75bb      	strb	r3, [r7, #22]
      hs->file += len;
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	699b      	ldr	r3, [r3, #24]
 8008f18:	89fa      	ldrh	r2, [r7, #14]
 8008f1a:	441a      	add	r2, r3
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	619a      	str	r2, [r3, #24]
      hs->left -= len;
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f24:	89fa      	ldrh	r2, [r7, #14]
 8008f26:	1a9a      	subs	r2, r3, r2
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* If the send buffer is full, return now. */
    if (altcp_sndbuf(pcb) == 0) {
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	f040 8235 	bne.w	80093a2 <http_send_data_ssi+0x516>
      return data_to_send;
 8008f38:	7dbb      	ldrb	r3, [r7, #22]
 8008f3a:	e27b      	b.n	8009434 <http_send_data_ssi+0x5a8>
  LWIP_DEBUGF(HTTPD_DEBUG, ("State %d, %d left\n", ssi->tag_state, (int)ssi->parse_left));

  /* We have sent all the data that was already parsed so continue parsing
   * the buffer contents looking for SSI tags. */
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
    if (len == 0) {
 8008f3c:	89fb      	ldrh	r3, [r7, #14]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d101      	bne.n	8008f46 <http_send_data_ssi+0xba>
      return data_to_send;
 8008f42:	7dbb      	ldrb	r3, [r7, #22]
 8008f44:	e276      	b.n	8009434 <http_send_data_ssi+0x5a8>
    }
    switch (ssi->tag_state) {
 8008f46:	693b      	ldr	r3, [r7, #16]
 8008f48:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8008f4c:	2b04      	cmp	r3, #4
 8008f4e:	f200 8227 	bhi.w	80093a0 <http_send_data_ssi+0x514>
 8008f52:	a201      	add	r2, pc, #4	; (adr r2, 8008f58 <http_send_data_ssi+0xcc>)
 8008f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f58:	08008f6d 	.word	0x08008f6d
 8008f5c:	08008fbf 	.word	0x08008fbf
 8008f60:	08009031 	.word	0x08009031
 8008f64:	0800917f 	.word	0x0800917f
 8008f68:	080092c7 	.word	0x080092c7
      case TAG_NONE:
        /* We are not currently processing an SSI tag so scan for the
         * start of the lead-in marker. */
        for (tag_type = 0; tag_type < LWIP_ARRAYSIZE(http_ssi_tag_desc); tag_type++) {
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	757b      	strb	r3, [r7, #21]
 8008f70:	e017      	b.n	8008fa2 <http_send_data_ssi+0x116>
          if (*ssi->parsed == http_ssi_tag_desc[tag_type].lead_in[0]) {
 8008f72:	693b      	ldr	r3, [r7, #16]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	781a      	ldrb	r2, [r3, #0]
 8008f78:	7d7b      	ldrb	r3, [r7, #21]
 8008f7a:	496c      	ldr	r1, [pc, #432]	; (800912c <http_send_data_ssi+0x2a0>)
 8008f7c:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 8008f80:	781b      	ldrb	r3, [r3, #0]
 8008f82:	429a      	cmp	r2, r3
 8008f84:	d10a      	bne.n	8008f9c <http_send_data_ssi+0x110>
            /* We found what could be the lead-in for a new tag so change
             * state appropriately. */
            ssi->tag_type = tag_type;
 8008f86:	693b      	ldr	r3, [r7, #16]
 8008f88:	7d7a      	ldrb	r2, [r7, #21]
 8008f8a:	741a      	strb	r2, [r3, #16]
            ssi->tag_state = TAG_LEADIN;
 8008f8c:	693b      	ldr	r3, [r7, #16]
 8008f8e:	2201      	movs	r2, #1
 8008f90:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
            ssi->tag_index = 1;
 8008f94:	693b      	ldr	r3, [r7, #16]
 8008f96:	2201      	movs	r2, #1
 8008f98:	819a      	strh	r2, [r3, #12]
  #if !LWIP_HTTPD_SSI_INCLUDE_TAG
            ssi->tag_started = ssi->parsed;
  #endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG */
            break;
 8008f9a:	e005      	b.n	8008fa8 <http_send_data_ssi+0x11c>
        for (tag_type = 0; tag_type < LWIP_ARRAYSIZE(http_ssi_tag_desc); tag_type++) {
 8008f9c:	7d7b      	ldrb	r3, [r7, #21]
 8008f9e:	3301      	adds	r3, #1
 8008fa0:	757b      	strb	r3, [r7, #21]
 8008fa2:	7d7b      	ldrb	r3, [r7, #21]
 8008fa4:	2b01      	cmp	r3, #1
 8008fa6:	d9e4      	bls.n	8008f72 <http_send_data_ssi+0xe6>
          }
        }

        /* Move on to the next character in the buffer */
        ssi->parse_left--;
 8008fa8:	693b      	ldr	r3, [r7, #16]
 8008faa:	689b      	ldr	r3, [r3, #8]
 8008fac:	1e5a      	subs	r2, r3, #1
 8008fae:	693b      	ldr	r3, [r7, #16]
 8008fb0:	609a      	str	r2, [r3, #8]
        ssi->parsed++;
 8008fb2:	693b      	ldr	r3, [r7, #16]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	1c5a      	adds	r2, r3, #1
 8008fb8:	693b      	ldr	r3, [r7, #16]
 8008fba:	601a      	str	r2, [r3, #0]
        break;
 8008fbc:	e1f1      	b.n	80093a2 <http_send_data_ssi+0x516>
      case TAG_LEADIN:
        /* We are processing the lead-in marker, looking for the start of
         * the tag name. */

        /* Have we reached the end of the leadin? */
        if (http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index] == 0) {
 8008fbe:	693b      	ldr	r3, [r7, #16]
 8008fc0:	7c1b      	ldrb	r3, [r3, #16]
 8008fc2:	461a      	mov	r2, r3
 8008fc4:	4b59      	ldr	r3, [pc, #356]	; (800912c <http_send_data_ssi+0x2a0>)
 8008fc6:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8008fca:	693a      	ldr	r2, [r7, #16]
 8008fcc:	8992      	ldrh	r2, [r2, #12]
 8008fce:	4413      	add	r3, r2
 8008fd0:	781b      	ldrb	r3, [r3, #0]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d107      	bne.n	8008fe6 <http_send_data_ssi+0x15a>
          ssi->tag_index = 0;
 8008fd6:	693b      	ldr	r3, [r7, #16]
 8008fd8:	2200      	movs	r2, #0
 8008fda:	819a      	strh	r2, [r3, #12]
          ssi->tag_state = TAG_FOUND;
 8008fdc:	693b      	ldr	r3, [r7, #16]
 8008fde:	2202      	movs	r2, #2
 8008fe0:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 8008fe4:	e1dd      	b.n	80093a2 <http_send_data_ssi+0x516>
        } else {
          /* Have we found the next character we expect for the tag leadin? */
          if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index]) {
 8008fe6:	693b      	ldr	r3, [r7, #16]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	781a      	ldrb	r2, [r3, #0]
 8008fec:	693b      	ldr	r3, [r7, #16]
 8008fee:	7c1b      	ldrb	r3, [r3, #16]
 8008ff0:	4619      	mov	r1, r3
 8008ff2:	4b4e      	ldr	r3, [pc, #312]	; (800912c <http_send_data_ssi+0x2a0>)
 8008ff4:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
 8008ff8:	6939      	ldr	r1, [r7, #16]
 8008ffa:	8989      	ldrh	r1, [r1, #12]
 8008ffc:	440b      	add	r3, r1
 8008ffe:	781b      	ldrb	r3, [r3, #0]
 8009000:	429a      	cmp	r2, r3
 8009002:	d106      	bne.n	8009012 <http_send_data_ssi+0x186>
            /* Yes - move to the next one unless we have found the complete
             * leadin, in which case we start looking for the tag itself */
            ssi->tag_index++;
 8009004:	693b      	ldr	r3, [r7, #16]
 8009006:	899b      	ldrh	r3, [r3, #12]
 8009008:	3301      	adds	r3, #1
 800900a:	b29a      	uxth	r2, r3
 800900c:	693b      	ldr	r3, [r7, #16]
 800900e:	819a      	strh	r2, [r3, #12]
 8009010:	e003      	b.n	800901a <http_send_data_ssi+0x18e>
          } else {
            /* We found an unexpected character so this is not a tag. Move
             * back to idle state. */
            ssi->tag_state = TAG_NONE;
 8009012:	693b      	ldr	r3, [r7, #16]
 8009014:	2200      	movs	r2, #0
 8009016:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
          }

          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 800901a:	693b      	ldr	r3, [r7, #16]
 800901c:	689b      	ldr	r3, [r3, #8]
 800901e:	1e5a      	subs	r2, r3, #1
 8009020:	693b      	ldr	r3, [r7, #16]
 8009022:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 8009024:	693b      	ldr	r3, [r7, #16]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	1c5a      	adds	r2, r3, #1
 800902a:	693b      	ldr	r3, [r7, #16]
 800902c:	601a      	str	r2, [r3, #0]
        }
        break;
 800902e:	e1b8      	b.n	80093a2 <http_send_data_ssi+0x516>
        /* We are reading the tag name, looking for the start of the
         * lead-out marker and removing any whitespace found. */

        /* Remove leading whitespace between the tag leading and the first
         * tag name character. */
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 8009030:	693b      	ldr	r3, [r7, #16]
 8009032:	899b      	ldrh	r3, [r3, #12]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d11e      	bne.n	8009076 <http_send_data_ssi+0x1ea>
 8009038:	693b      	ldr	r3, [r7, #16]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	781b      	ldrb	r3, [r3, #0]
 800903e:	2b20      	cmp	r3, #32
 8009040:	d00e      	beq.n	8009060 <http_send_data_ssi+0x1d4>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8009042:	693b      	ldr	r3, [r7, #16]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	781b      	ldrb	r3, [r3, #0]
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 8009048:	2b09      	cmp	r3, #9
 800904a:	d009      	beq.n	8009060 <http_send_data_ssi+0x1d4>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800904c:	693b      	ldr	r3, [r7, #16]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	781b      	ldrb	r3, [r3, #0]
 8009052:	2b0a      	cmp	r3, #10
 8009054:	d004      	beq.n	8009060 <http_send_data_ssi+0x1d4>
                                      (*ssi->parsed == '\r'))) {
 8009056:	693b      	ldr	r3, [r7, #16]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	781b      	ldrb	r3, [r3, #0]
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800905c:	2b0d      	cmp	r3, #13
 800905e:	d10a      	bne.n	8009076 <http_send_data_ssi+0x1ea>
          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 8009060:	693b      	ldr	r3, [r7, #16]
 8009062:	689b      	ldr	r3, [r3, #8]
 8009064:	1e5a      	subs	r2, r3, #1
 8009066:	693b      	ldr	r3, [r7, #16]
 8009068:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 800906a:	693b      	ldr	r3, [r7, #16]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	1c5a      	adds	r2, r3, #1
 8009070:	693b      	ldr	r3, [r7, #16]
 8009072:	601a      	str	r2, [r3, #0]
          break;
 8009074:	e195      	b.n	80093a2 <http_send_data_ssi+0x516>
        }

        /* Have we found the end of the tag name? This is signalled by
         * us finding the first leadout character or whitespace */
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 8009076:	693b      	ldr	r3, [r7, #16]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	781a      	ldrb	r2, [r3, #0]
 800907c:	693b      	ldr	r3, [r7, #16]
 800907e:	7c1b      	ldrb	r3, [r3, #16]
 8009080:	492a      	ldr	r1, [pc, #168]	; (800912c <http_send_data_ssi+0x2a0>)
 8009082:	00db      	lsls	r3, r3, #3
 8009084:	440b      	add	r3, r1
 8009086:	685b      	ldr	r3, [r3, #4]
 8009088:	781b      	ldrb	r3, [r3, #0]
 800908a:	429a      	cmp	r2, r3
 800908c:	d013      	beq.n	80090b6 <http_send_data_ssi+0x22a>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 800908e:	693b      	ldr	r3, [r7, #16]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	781b      	ldrb	r3, [r3, #0]
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 8009094:	2b20      	cmp	r3, #32
 8009096:	d00e      	beq.n	80090b6 <http_send_data_ssi+0x22a>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 8009098:	693b      	ldr	r3, [r7, #16]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	781b      	ldrb	r3, [r3, #0]
 800909e:	2b09      	cmp	r3, #9
 80090a0:	d009      	beq.n	80090b6 <http_send_data_ssi+0x22a>
            (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 80090a2:	693b      	ldr	r3, [r7, #16]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	781b      	ldrb	r3, [r3, #0]
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 80090a8:	2b0a      	cmp	r3, #10
 80090aa:	d004      	beq.n	80090b6 <http_send_data_ssi+0x22a>
            (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 80090ac:	693b      	ldr	r3, [r7, #16]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	781b      	ldrb	r3, [r3, #0]
 80090b2:	2b0d      	cmp	r3, #13
 80090b4:	d142      	bne.n	800913c <http_send_data_ssi+0x2b0>

          if (ssi->tag_index == 0) {
 80090b6:	693b      	ldr	r3, [r7, #16]
 80090b8:	899b      	ldrh	r3, [r3, #12]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d104      	bne.n	80090c8 <http_send_data_ssi+0x23c>
            /* We read a zero length tag so ignore it. */
            ssi->tag_state = TAG_NONE;
 80090be:	693b      	ldr	r3, [r7, #16]
 80090c0:	2200      	movs	r2, #0
 80090c2:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
          if (ssi->tag_index == 0) {
 80090c6:	e04f      	b.n	8009168 <http_send_data_ssi+0x2dc>
          } else {
            /* We read a non-empty tag so go ahead and look for the
             * leadout string. */
            ssi->tag_state = TAG_LEADOUT;
 80090c8:	693b      	ldr	r3, [r7, #16]
 80090ca:	2203      	movs	r2, #3
 80090cc:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
 80090d0:	693b      	ldr	r3, [r7, #16]
 80090d2:	899b      	ldrh	r3, [r3, #12]
 80090d4:	2bff      	cmp	r3, #255	; 0xff
 80090d6:	d906      	bls.n	80090e6 <http_send_data_ssi+0x25a>
 80090d8:	4b11      	ldr	r3, [pc, #68]	; (8009120 <http_send_data_ssi+0x294>)
 80090da:	f240 523a 	movw	r2, #1338	; 0x53a
 80090de:	4914      	ldr	r1, [pc, #80]	; (8009130 <http_send_data_ssi+0x2a4>)
 80090e0:	4811      	ldr	r0, [pc, #68]	; (8009128 <http_send_data_ssi+0x29c>)
 80090e2:	f00b fceb 	bl	8014abc <iprintf>
            ssi->tag_name_len = (u8_t)ssi->tag_index;
 80090e6:	693b      	ldr	r3, [r7, #16]
 80090e8:	899b      	ldrh	r3, [r3, #12]
 80090ea:	b2da      	uxtb	r2, r3
 80090ec:	693b      	ldr	r3, [r7, #16]
 80090ee:	745a      	strb	r2, [r3, #17]
            ssi->tag_name[ssi->tag_index] = '\0';
 80090f0:	693b      	ldr	r3, [r7, #16]
 80090f2:	899b      	ldrh	r3, [r3, #12]
 80090f4:	461a      	mov	r2, r3
 80090f6:	693b      	ldr	r3, [r7, #16]
 80090f8:	4413      	add	r3, r2
 80090fa:	2200      	movs	r2, #0
 80090fc:	749a      	strb	r2, [r3, #18]
            if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) {
 80090fe:	693b      	ldr	r3, [r7, #16]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	781a      	ldrb	r2, [r3, #0]
 8009104:	693b      	ldr	r3, [r7, #16]
 8009106:	7c1b      	ldrb	r3, [r3, #16]
 8009108:	4908      	ldr	r1, [pc, #32]	; (800912c <http_send_data_ssi+0x2a0>)
 800910a:	00db      	lsls	r3, r3, #3
 800910c:	440b      	add	r3, r1
 800910e:	685b      	ldr	r3, [r3, #4]
 8009110:	781b      	ldrb	r3, [r3, #0]
 8009112:	429a      	cmp	r2, r3
 8009114:	d10e      	bne.n	8009134 <http_send_data_ssi+0x2a8>
              ssi->tag_index = 1;
 8009116:	693b      	ldr	r3, [r7, #16]
 8009118:	2201      	movs	r2, #1
 800911a:	819a      	strh	r2, [r3, #12]
          if (ssi->tag_index == 0) {
 800911c:	e024      	b.n	8009168 <http_send_data_ssi+0x2dc>
 800911e:	bf00      	nop
 8009120:	08016030 	.word	0x08016030
 8009124:	080160ac 	.word	0x080160ac
 8009128:	08016078 	.word	0x08016078
 800912c:	0801a0e4 	.word	0x0801a0e4
 8009130:	0801611c 	.word	0x0801611c
            } else {
              ssi->tag_index = 0;
 8009134:	693b      	ldr	r3, [r7, #16]
 8009136:	2200      	movs	r2, #0
 8009138:	819a      	strh	r2, [r3, #12]
          if (ssi->tag_index == 0) {
 800913a:	e015      	b.n	8009168 <http_send_data_ssi+0x2dc>
            }
          }
        } else {
          /* This character is part of the tag name so save it */
          if (ssi->tag_index < LWIP_HTTPD_MAX_TAG_NAME_LEN) {
 800913c:	693b      	ldr	r3, [r7, #16]
 800913e:	899b      	ldrh	r3, [r3, #12]
 8009140:	2b07      	cmp	r3, #7
 8009142:	d80d      	bhi.n	8009160 <http_send_data_ssi+0x2d4>
            ssi->tag_name[ssi->tag_index++] = *ssi->parsed;
 8009144:	693b      	ldr	r3, [r7, #16]
 8009146:	681a      	ldr	r2, [r3, #0]
 8009148:	693b      	ldr	r3, [r7, #16]
 800914a:	899b      	ldrh	r3, [r3, #12]
 800914c:	1c59      	adds	r1, r3, #1
 800914e:	b288      	uxth	r0, r1
 8009150:	6939      	ldr	r1, [r7, #16]
 8009152:	8188      	strh	r0, [r1, #12]
 8009154:	4619      	mov	r1, r3
 8009156:	7812      	ldrb	r2, [r2, #0]
 8009158:	693b      	ldr	r3, [r7, #16]
 800915a:	440b      	add	r3, r1
 800915c:	749a      	strb	r2, [r3, #18]
 800915e:	e003      	b.n	8009168 <http_send_data_ssi+0x2dc>
          } else {
            /* The tag was too long so ignore it. */
            ssi->tag_state = TAG_NONE;
 8009160:	693b      	ldr	r3, [r7, #16]
 8009162:	2200      	movs	r2, #0
 8009164:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
          }
        }

        /* Move on to the next character in the buffer */
        ssi->parse_left--;
 8009168:	693b      	ldr	r3, [r7, #16]
 800916a:	689b      	ldr	r3, [r3, #8]
 800916c:	1e5a      	subs	r2, r3, #1
 800916e:	693b      	ldr	r3, [r7, #16]
 8009170:	609a      	str	r2, [r3, #8]
        ssi->parsed++;
 8009172:	693b      	ldr	r3, [r7, #16]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	1c5a      	adds	r2, r3, #1
 8009178:	693b      	ldr	r3, [r7, #16]
 800917a:	601a      	str	r2, [r3, #0]

        break;
 800917c:	e111      	b.n	80093a2 <http_send_data_ssi+0x516>

      /* We are looking for the end of the lead-out marker. */
      case TAG_LEADOUT:
        /* Remove leading whitespace between the tag leading and the first
         * tag leadout character. */
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 800917e:	693b      	ldr	r3, [r7, #16]
 8009180:	899b      	ldrh	r3, [r3, #12]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d11e      	bne.n	80091c4 <http_send_data_ssi+0x338>
 8009186:	693b      	ldr	r3, [r7, #16]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	781b      	ldrb	r3, [r3, #0]
 800918c:	2b20      	cmp	r3, #32
 800918e:	d00e      	beq.n	80091ae <http_send_data_ssi+0x322>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8009190:	693b      	ldr	r3, [r7, #16]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	781b      	ldrb	r3, [r3, #0]
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 8009196:	2b09      	cmp	r3, #9
 8009198:	d009      	beq.n	80091ae <http_send_data_ssi+0x322>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800919a:	693b      	ldr	r3, [r7, #16]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	781b      	ldrb	r3, [r3, #0]
 80091a0:	2b0a      	cmp	r3, #10
 80091a2:	d004      	beq.n	80091ae <http_send_data_ssi+0x322>
                                      (*ssi->parsed == '\r'))) {
 80091a4:	693b      	ldr	r3, [r7, #16]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	781b      	ldrb	r3, [r3, #0]
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 80091aa:	2b0d      	cmp	r3, #13
 80091ac:	d10a      	bne.n	80091c4 <http_send_data_ssi+0x338>
          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 80091ae:	693b      	ldr	r3, [r7, #16]
 80091b0:	689b      	ldr	r3, [r3, #8]
 80091b2:	1e5a      	subs	r2, r3, #1
 80091b4:	693b      	ldr	r3, [r7, #16]
 80091b6:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 80091b8:	693b      	ldr	r3, [r7, #16]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	1c5a      	adds	r2, r3, #1
 80091be:	693b      	ldr	r3, [r7, #16]
 80091c0:	601a      	str	r2, [r3, #0]
          break;
 80091c2:	e0ee      	b.n	80093a2 <http_send_data_ssi+0x516>
        }

        /* Have we found the next character we expect for the tag leadout? */
        if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index]) {
 80091c4:	693b      	ldr	r3, [r7, #16]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	781a      	ldrb	r2, [r3, #0]
 80091ca:	693b      	ldr	r3, [r7, #16]
 80091cc:	7c1b      	ldrb	r3, [r3, #16]
 80091ce:	499b      	ldr	r1, [pc, #620]	; (800943c <http_send_data_ssi+0x5b0>)
 80091d0:	00db      	lsls	r3, r3, #3
 80091d2:	440b      	add	r3, r1
 80091d4:	685b      	ldr	r3, [r3, #4]
 80091d6:	6939      	ldr	r1, [r7, #16]
 80091d8:	8989      	ldrh	r1, [r1, #12]
 80091da:	440b      	add	r3, r1
 80091dc:	781b      	ldrb	r3, [r3, #0]
 80091de:	429a      	cmp	r2, r3
 80091e0:	d162      	bne.n	80092a8 <http_send_data_ssi+0x41c>
          /* Yes - move to the next one unless we have found the complete
           * leadout, in which case we need to call the client to process
           * the tag. */

          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 80091e2:	693b      	ldr	r3, [r7, #16]
 80091e4:	689b      	ldr	r3, [r3, #8]
 80091e6:	1e5a      	subs	r2, r3, #1
 80091e8:	693b      	ldr	r3, [r7, #16]
 80091ea:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 80091ec:	693b      	ldr	r3, [r7, #16]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	1c5a      	adds	r2, r3, #1
 80091f2:	693b      	ldr	r3, [r7, #16]
 80091f4:	601a      	str	r2, [r3, #0]
          ssi->tag_index++;
 80091f6:	693b      	ldr	r3, [r7, #16]
 80091f8:	899b      	ldrh	r3, [r3, #12]
 80091fa:	3301      	adds	r3, #1
 80091fc:	b29a      	uxth	r2, r3
 80091fe:	693b      	ldr	r3, [r7, #16]
 8009200:	819a      	strh	r2, [r3, #12]

          if (http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index] == 0) {
 8009202:	693b      	ldr	r3, [r7, #16]
 8009204:	7c1b      	ldrb	r3, [r3, #16]
 8009206:	4a8d      	ldr	r2, [pc, #564]	; (800943c <http_send_data_ssi+0x5b0>)
 8009208:	00db      	lsls	r3, r3, #3
 800920a:	4413      	add	r3, r2
 800920c:	685b      	ldr	r3, [r3, #4]
 800920e:	693a      	ldr	r2, [r7, #16]
 8009210:	8992      	ldrh	r2, [r2, #12]
 8009212:	4413      	add	r3, r2
 8009214:	781b      	ldrb	r3, [r3, #0]
 8009216:	2b00      	cmp	r3, #0
 8009218:	f040 80c3 	bne.w	80093a2 <http_send_data_ssi+0x516>
            /* Call the client to ask for the insert string for the
             * tag we just found. */
#if LWIP_HTTPD_SSI_MULTIPART
            ssi->tag_part = 0; /* start with tag part 0 */
#endif /* LWIP_HTTPD_SSI_MULTIPART */
            get_tag_insert(hs);
 800921c:	6838      	ldr	r0, [r7, #0]
 800921e:	f7ff fd11 	bl	8008c44 <get_tag_insert>

            /* Next time through, we are going to be sending data
             * immediately, either the end of the block we start
             * sending here or the insert string. */
            ssi->tag_index = 0;
 8009222:	693b      	ldr	r3, [r7, #16]
 8009224:	2200      	movs	r2, #0
 8009226:	819a      	strh	r2, [r3, #12]
            ssi->tag_state = TAG_SENDING;
 8009228:	693b      	ldr	r3, [r7, #16]
 800922a:	2204      	movs	r2, #4
 800922c:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
            ssi->tag_end = ssi->parsed;
 8009230:	693b      	ldr	r3, [r7, #16]
 8009232:	681a      	ldr	r2, [r3, #0]
 8009234:	693b      	ldr	r3, [r7, #16]
 8009236:	605a      	str	r2, [r3, #4]
            ssi->parsed = ssi->tag_started;
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/

            /* If there is any unsent data in the buffer prior to the
             * tag, we need to send it now. */
            if (ssi->tag_end > hs->file) {
 8009238:	693b      	ldr	r3, [r7, #16]
 800923a:	685a      	ldr	r2, [r3, #4]
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	699b      	ldr	r3, [r3, #24]
 8009240:	429a      	cmp	r2, r3
 8009242:	f240 80ae 	bls.w	80093a2 <http_send_data_ssi+0x516>
              /* How much of the data can we send? */
#if LWIP_HTTPD_SSI_INCLUDE_TAG
              len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
 8009246:	693b      	ldr	r3, [r7, #16]
 8009248:	685a      	ldr	r2, [r3, #4]
 800924a:	683b      	ldr	r3, [r7, #0]
 800924c:	699b      	ldr	r3, [r3, #24]
 800924e:	1ad3      	subs	r3, r2, r3
 8009250:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009254:	4293      	cmp	r3, r2
 8009256:	dc06      	bgt.n	8009266 <http_send_data_ssi+0x3da>
 8009258:	693b      	ldr	r3, [r7, #16]
 800925a:	685a      	ldr	r2, [r3, #4]
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	699b      	ldr	r3, [r3, #24]
 8009260:	1ad3      	subs	r3, r2, r3
 8009262:	b29b      	uxth	r3, r3
 8009264:	e001      	b.n	800926a <http_send_data_ssi+0x3de>
 8009266:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800926a:	81fb      	strh	r3, [r7, #14]
#else /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
              /* we would include the tag in sending */
              len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
#endif /* LWIP_HTTPD_SSI_INCLUDE_TAG*/

              err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	6999      	ldr	r1, [r3, #24]
 8009270:	f107 020e 	add.w	r2, r7, #14
 8009274:	2300      	movs	r3, #0
 8009276:	6878      	ldr	r0, [r7, #4]
 8009278:	f7ff fbc0 	bl	80089fc <http_write>
 800927c:	4603      	mov	r3, r0
 800927e:	75fb      	strb	r3, [r7, #23]
              if (err == ERR_OK) {
 8009280:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009284:	2b00      	cmp	r3, #0
 8009286:	f040 808c 	bne.w	80093a2 <http_send_data_ssi+0x516>
                data_to_send = 1;
 800928a:	2301      	movs	r3, #1
 800928c:	75bb      	strb	r3, [r7, #22]
                if (ssi->tag_started <= hs->file) {
                  /* pretend to have sent the tag, too */
                  len += (u16_t)(ssi->tag_end - ssi->tag_started);
                }
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
                hs->file += len;
 800928e:	683b      	ldr	r3, [r7, #0]
 8009290:	699b      	ldr	r3, [r3, #24]
 8009292:	89fa      	ldrh	r2, [r7, #14]
 8009294:	441a      	add	r2, r3
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	619a      	str	r2, [r3, #24]
                hs->left -= len;
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800929e:	89fa      	ldrh	r2, [r7, #14]
 80092a0:	1a9a      	subs	r2, r3, r2
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	625a      	str	r2, [r3, #36]	; 0x24
 80092a6:	e07c      	b.n	80093a2 <http_send_data_ssi+0x516>
            }
          }
        } else {
          /* We found an unexpected character so this is not a tag. Move
           * back to idle state. */
          ssi->parse_left--;
 80092a8:	693b      	ldr	r3, [r7, #16]
 80092aa:	689b      	ldr	r3, [r3, #8]
 80092ac:	1e5a      	subs	r2, r3, #1
 80092ae:	693b      	ldr	r3, [r7, #16]
 80092b0:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 80092b2:	693b      	ldr	r3, [r7, #16]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	1c5a      	adds	r2, r3, #1
 80092b8:	693b      	ldr	r3, [r7, #16]
 80092ba:	601a      	str	r2, [r3, #0]
          ssi->tag_state = TAG_NONE;
 80092bc:	693b      	ldr	r3, [r7, #16]
 80092be:	2200      	movs	r2, #0
 80092c0:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
        }
        break;
 80092c4:	e06d      	b.n	80093a2 <http_send_data_ssi+0x516>
       * from the file prior to the insert point or the insert string itself.
       */
      case TAG_SENDING:
        /* Do we have any remaining file data to send from the buffer prior
         * to the tag? */
        if (ssi->tag_end > hs->file) {
 80092c6:	693b      	ldr	r3, [r7, #16]
 80092c8:	685a      	ldr	r2, [r3, #4]
 80092ca:	683b      	ldr	r3, [r7, #0]
 80092cc:	699b      	ldr	r3, [r3, #24]
 80092ce:	429a      	cmp	r2, r3
 80092d0:	d935      	bls.n	800933e <http_send_data_ssi+0x4b2>
          /* How much of the data can we send? */
#if LWIP_HTTPD_SSI_INCLUDE_TAG
          len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
 80092d2:	693b      	ldr	r3, [r7, #16]
 80092d4:	685a      	ldr	r2, [r3, #4]
 80092d6:	683b      	ldr	r3, [r7, #0]
 80092d8:	699b      	ldr	r3, [r3, #24]
 80092da:	1ad3      	subs	r3, r2, r3
 80092dc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80092e0:	4293      	cmp	r3, r2
 80092e2:	dc06      	bgt.n	80092f2 <http_send_data_ssi+0x466>
 80092e4:	693b      	ldr	r3, [r7, #16]
 80092e6:	685a      	ldr	r2, [r3, #4]
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	699b      	ldr	r3, [r3, #24]
 80092ec:	1ad3      	subs	r3, r2, r3
 80092ee:	b29b      	uxth	r3, r3
 80092f0:	e001      	b.n	80092f6 <http_send_data_ssi+0x46a>
 80092f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80092f6:	81fb      	strh	r3, [r7, #14]
#else /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
          LWIP_ASSERT("hs->started >= hs->file", ssi->tag_started >= hs->file);
          /* we would include the tag in sending */
          len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
#endif /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
          if (len != 0) {
 80092f8:	89fb      	ldrh	r3, [r7, #14]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d00a      	beq.n	8009314 <http_send_data_ssi+0x488>
            err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	6999      	ldr	r1, [r3, #24]
 8009302:	f107 020e 	add.w	r2, r7, #14
 8009306:	2300      	movs	r3, #0
 8009308:	6878      	ldr	r0, [r7, #4]
 800930a:	f7ff fb77 	bl	80089fc <http_write>
 800930e:	4603      	mov	r3, r0
 8009310:	75fb      	strb	r3, [r7, #23]
 8009312:	e001      	b.n	8009318 <http_send_data_ssi+0x48c>
          } else {
            err = ERR_OK;
 8009314:	2300      	movs	r3, #0
 8009316:	75fb      	strb	r3, [r7, #23]
          }
          if (err == ERR_OK) {
 8009318:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d140      	bne.n	80093a2 <http_send_data_ssi+0x516>
            data_to_send = 1;
 8009320:	2301      	movs	r3, #1
 8009322:	75bb      	strb	r3, [r7, #22]
            if (ssi->tag_started <= hs->file) {
              /* pretend to have sent the tag, too */
              len += (u16_t)(ssi->tag_end - ssi->tag_started);
            }
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
            hs->file += len;
 8009324:	683b      	ldr	r3, [r7, #0]
 8009326:	699b      	ldr	r3, [r3, #24]
 8009328:	89fa      	ldrh	r2, [r7, #14]
 800932a:	441a      	add	r2, r3
 800932c:	683b      	ldr	r3, [r7, #0]
 800932e:	619a      	str	r2, [r3, #24]
            hs->left -= len;
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009334:	89fa      	ldrh	r2, [r7, #14]
 8009336:	1a9a      	subs	r2, r3, r2
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	625a      	str	r2, [r3, #36]	; 0x24
 800933c:	e031      	b.n	80093a2 <http_send_data_ssi+0x516>
            }
          }
#endif /* LWIP_HTTPD_SSI_MULTIPART */

          /* Do we still have insert data left to send? */
          if (ssi->tag_index < ssi->tag_insert_len) {
 800933e:	693b      	ldr	r3, [r7, #16]
 8009340:	899a      	ldrh	r2, [r3, #12]
 8009342:	693b      	ldr	r3, [r7, #16]
 8009344:	89db      	ldrh	r3, [r3, #14]
 8009346:	429a      	cmp	r2, r3
 8009348:	d222      	bcs.n	8009390 <http_send_data_ssi+0x504>
            /* We are sending the insert string itself. How much of the
             * insert can we send? */
            len = (ssi->tag_insert_len - ssi->tag_index);
 800934a:	693b      	ldr	r3, [r7, #16]
 800934c:	89da      	ldrh	r2, [r3, #14]
 800934e:	693b      	ldr	r3, [r7, #16]
 8009350:	899b      	ldrh	r3, [r3, #12]
 8009352:	1ad3      	subs	r3, r2, r3
 8009354:	b29b      	uxth	r3, r3
 8009356:	81fb      	strh	r3, [r7, #14]

            /* Note that we set the copy flag here since we only have a
             * single tag insert buffer per connection. If we don't do
             * this, insert corruption can occur if more than one insert
             * is processed before we call tcp_output. */
            err = http_write(pcb, &(ssi->tag_insert[ssi->tag_index]), &len,
 8009358:	693b      	ldr	r3, [r7, #16]
 800935a:	899b      	ldrh	r3, [r3, #12]
 800935c:	3318      	adds	r3, #24
 800935e:	693a      	ldr	r2, [r7, #16]
 8009360:	4413      	add	r3, r2
 8009362:	1cd9      	adds	r1, r3, #3
 8009364:	f107 020e 	add.w	r2, r7, #14
 8009368:	2301      	movs	r3, #1
 800936a:	6878      	ldr	r0, [r7, #4]
 800936c:	f7ff fb46 	bl	80089fc <http_write>
 8009370:	4603      	mov	r3, r0
 8009372:	75fb      	strb	r3, [r7, #23]
                             HTTP_IS_TAG_VOLATILE(hs));
            if (err == ERR_OK) {
 8009374:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d112      	bne.n	80093a2 <http_send_data_ssi+0x516>
              data_to_send = 1;
 800937c:	2301      	movs	r3, #1
 800937e:	75bb      	strb	r3, [r7, #22]
              ssi->tag_index += len;
 8009380:	693b      	ldr	r3, [r7, #16]
 8009382:	899a      	ldrh	r2, [r3, #12]
 8009384:	89fb      	ldrh	r3, [r7, #14]
 8009386:	4413      	add	r3, r2
 8009388:	b29a      	uxth	r2, r3
 800938a:	693b      	ldr	r3, [r7, #16]
 800938c:	819a      	strh	r2, [r3, #12]
 800938e:	e008      	b.n	80093a2 <http_send_data_ssi+0x516>
#endif /* LWIP_HTTPD_SSI_MULTIPART */
            {
              /* We have sent all the insert data so go back to looking for
               * a new tag. */
              LWIP_DEBUGF(HTTPD_DEBUG, ("Everything sent.\n"));
              ssi->tag_index = 0;
 8009390:	693b      	ldr	r3, [r7, #16]
 8009392:	2200      	movs	r2, #0
 8009394:	819a      	strh	r2, [r3, #12]
              ssi->tag_state = TAG_NONE;
 8009396:	693b      	ldr	r3, [r7, #16]
 8009398:	2200      	movs	r2, #0
 800939a:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
#if !LWIP_HTTPD_SSI_INCLUDE_TAG
              ssi->parsed = ssi->tag_end;
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
            }
          }
          break;
 800939e:	e000      	b.n	80093a2 <http_send_data_ssi+0x516>
        default:
          break;
 80093a0:	bf00      	nop
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 80093a2:	693b      	ldr	r3, [r7, #16]
 80093a4:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80093a8:	2b04      	cmp	r3, #4
 80093aa:	d003      	beq.n	80093b4 <http_send_data_ssi+0x528>
 80093ac:	693b      	ldr	r3, [r7, #16]
 80093ae:	689b      	ldr	r3, [r3, #8]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d004      	beq.n	80093be <http_send_data_ssi+0x532>
 80093b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	f43f adbf 	beq.w	8008f3c <http_send_data_ssi+0xb0>
  }

  /* If we drop out of the end of the for loop, this implies we must have
   * file data to send so send it now. In TAG_SENDING state, we've already
   * handled this so skip the send if that's the case. */
  if ((ssi->tag_state != TAG_SENDING) && (ssi->parsed > hs->file)) {
 80093be:	693b      	ldr	r3, [r7, #16]
 80093c0:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80093c4:	2b04      	cmp	r3, #4
 80093c6:	d034      	beq.n	8009432 <http_send_data_ssi+0x5a6>
 80093c8:	693b      	ldr	r3, [r7, #16]
 80093ca:	681a      	ldr	r2, [r3, #0]
 80093cc:	683b      	ldr	r3, [r7, #0]
 80093ce:	699b      	ldr	r3, [r3, #24]
 80093d0:	429a      	cmp	r2, r3
 80093d2:	d92e      	bls.n	8009432 <http_send_data_ssi+0x5a6>
      ssi->parsed = ssi->tag_started;
      ssi->tag_started = hs->buf;
    } else
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ && !LWIP_HTTPD_SSI_INCLUDE_TAG */
    {
      len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 80093d4:	693b      	ldr	r3, [r7, #16]
 80093d6:	681a      	ldr	r2, [r3, #0]
 80093d8:	683b      	ldr	r3, [r7, #0]
 80093da:	699b      	ldr	r3, [r3, #24]
 80093dc:	1ad3      	subs	r3, r2, r3
 80093de:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80093e2:	4293      	cmp	r3, r2
 80093e4:	dc06      	bgt.n	80093f4 <http_send_data_ssi+0x568>
 80093e6:	693b      	ldr	r3, [r7, #16]
 80093e8:	681a      	ldr	r2, [r3, #0]
 80093ea:	683b      	ldr	r3, [r7, #0]
 80093ec:	699b      	ldr	r3, [r3, #24]
 80093ee:	1ad3      	subs	r3, r2, r3
 80093f0:	b29b      	uxth	r3, r3
 80093f2:	e001      	b.n	80093f8 <http_send_data_ssi+0x56c>
 80093f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80093f8:	81fb      	strh	r3, [r7, #14]
    }

    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 80093fa:	683b      	ldr	r3, [r7, #0]
 80093fc:	6999      	ldr	r1, [r3, #24]
 80093fe:	f107 020e 	add.w	r2, r7, #14
 8009402:	2300      	movs	r3, #0
 8009404:	6878      	ldr	r0, [r7, #4]
 8009406:	f7ff faf9 	bl	80089fc <http_write>
 800940a:	4603      	mov	r3, r0
 800940c:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 800940e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d10d      	bne.n	8009432 <http_send_data_ssi+0x5a6>
      data_to_send = 1;
 8009416:	2301      	movs	r3, #1
 8009418:	75bb      	strb	r3, [r7, #22]
      hs->file += len;
 800941a:	683b      	ldr	r3, [r7, #0]
 800941c:	699b      	ldr	r3, [r3, #24]
 800941e:	89fa      	ldrh	r2, [r7, #14]
 8009420:	441a      	add	r2, r3
 8009422:	683b      	ldr	r3, [r7, #0]
 8009424:	619a      	str	r2, [r3, #24]
      hs->left -= len;
 8009426:	683b      	ldr	r3, [r7, #0]
 8009428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800942a:	89fa      	ldrh	r2, [r7, #14]
 800942c:	1a9a      	subs	r2, r3, r2
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	625a      	str	r2, [r3, #36]	; 0x24
    }
  }
  return data_to_send;
 8009432:	7dbb      	ldrb	r3, [r7, #22]
}
 8009434:	4618      	mov	r0, r3
 8009436:	3718      	adds	r7, #24
 8009438:	46bd      	mov	sp, r7
 800943a:	bd80      	pop	{r7, pc}
 800943c:	0801a0e4 	.word	0x0801a0e4

08009440 <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct altcp_pcb *pcb, struct http_state *hs)
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b084      	sub	sp, #16
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
 8009448:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 800944a:	2300      	movs	r3, #0
 800944c:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 800944e:	683b      	ldr	r3, [r7, #0]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d101      	bne.n	8009458 <http_send+0x18>
    return 0;
 8009454:	2300      	movs	r3, #0
 8009456:	e030      	b.n	80094ba <http_send+0x7a>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800945c:	2b00      	cmp	r3, #0
 800945e:	d108      	bne.n	8009472 <http_send+0x32>
    if (!http_check_eof(pcb, hs)) {
 8009460:	6839      	ldr	r1, [r7, #0]
 8009462:	6878      	ldr	r0, [r7, #4]
 8009464:	f7ff fcac 	bl	8008dc0 <http_check_eof>
 8009468:	4603      	mov	r3, r0
 800946a:	2b00      	cmp	r3, #0
 800946c:	d101      	bne.n	8009472 <http_send+0x32>
      return 0;
 800946e:	2300      	movs	r3, #0
 8009470:	e023      	b.n	80094ba <http_send+0x7a>
    }
  }

#if LWIP_HTTPD_SSI
  if (hs->ssi) {
 8009472:	683b      	ldr	r3, [r7, #0]
 8009474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009476:	2b00      	cmp	r3, #0
 8009478:	d006      	beq.n	8009488 <http_send+0x48>
    data_to_send = http_send_data_ssi(pcb, hs);
 800947a:	6839      	ldr	r1, [r7, #0]
 800947c:	6878      	ldr	r0, [r7, #4]
 800947e:	f7ff fd05 	bl	8008e8c <http_send_data_ssi>
 8009482:	4603      	mov	r3, r0
 8009484:	73fb      	strb	r3, [r7, #15]
 8009486:	e005      	b.n	8009494 <http_send+0x54>
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 8009488:	6839      	ldr	r1, [r7, #0]
 800948a:	6878      	ldr	r0, [r7, #4]
 800948c:	f7ff fcc8 	bl	8008e20 <http_send_data_nonssi>
 8009490:	4603      	mov	r3, r0
 8009492:	73fb      	strb	r3, [r7, #15]
  }

  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 8009494:	683b      	ldr	r3, [r7, #0]
 8009496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009498:	2b00      	cmp	r3, #0
 800949a:	d10d      	bne.n	80094b8 <http_send+0x78>
 800949c:	683b      	ldr	r3, [r7, #0]
 800949e:	695b      	ldr	r3, [r3, #20]
 80094a0:	4618      	mov	r0, r3
 80094a2:	f7ff fa1d 	bl	80088e0 <fs_bytes_left>
 80094a6:	4603      	mov	r3, r0
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	dc05      	bgt.n	80094b8 <http_send+0x78>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 80094ac:	6839      	ldr	r1, [r7, #0]
 80094ae:	6878      	ldr	r0, [r7, #4]
 80094b0:	f7ff fb5d 	bl	8008b6e <http_eof>
    return 0;
 80094b4:	2300      	movs	r3, #0
 80094b6:	e000      	b.n	80094ba <http_send+0x7a>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 80094b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80094ba:	4618      	mov	r0, r3
 80094bc:	3710      	adds	r7, #16
 80094be:	46bd      	mov	sp, r7
 80094c0:	bd80      	pop	{r7, pc}
	...

080094c4 <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b084      	sub	sp, #16
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
 80094cc:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 80094ce:	683b      	ldr	r3, [r7, #0]
 80094d0:	4a1c      	ldr	r2, [pc, #112]	; (8009544 <http_get_404_file+0x80>)
 80094d2:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 80094d4:	687a      	ldr	r2, [r7, #4]
 80094d6:	683b      	ldr	r3, [r7, #0]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	4619      	mov	r1, r3
 80094dc:	4610      	mov	r0, r2
 80094de:	f7ff f9b7 	bl	8008850 <fs_open>
 80094e2:	4603      	mov	r3, r0
 80094e4:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80094e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d024      	beq.n	8009538 <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 80094ee:	683b      	ldr	r3, [r7, #0]
 80094f0:	4a15      	ldr	r2, [pc, #84]	; (8009548 <http_get_404_file+0x84>)
 80094f2:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 80094f4:	687a      	ldr	r2, [r7, #4]
 80094f6:	683b      	ldr	r3, [r7, #0]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	4619      	mov	r1, r3
 80094fc:	4610      	mov	r0, r2
 80094fe:	f7ff f9a7 	bl	8008850 <fs_open>
 8009502:	4603      	mov	r3, r0
 8009504:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8009506:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d014      	beq.n	8009538 <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 800950e:	683b      	ldr	r3, [r7, #0]
 8009510:	4a0e      	ldr	r2, [pc, #56]	; (800954c <http_get_404_file+0x88>)
 8009512:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 8009514:	687a      	ldr	r2, [r7, #4]
 8009516:	683b      	ldr	r3, [r7, #0]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	4619      	mov	r1, r3
 800951c:	4610      	mov	r0, r2
 800951e:	f7ff f997 	bl	8008850 <fs_open>
 8009522:	4603      	mov	r3, r0
 8009524:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 8009526:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d004      	beq.n	8009538 <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 800952e:	683b      	ldr	r3, [r7, #0]
 8009530:	2200      	movs	r2, #0
 8009532:	601a      	str	r2, [r3, #0]
        return NULL;
 8009534:	2300      	movs	r3, #0
 8009536:	e000      	b.n	800953a <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 8009538:	687b      	ldr	r3, [r7, #4]
}
 800953a:	4618      	mov	r0, r3
 800953c:	3710      	adds	r7, #16
 800953e:	46bd      	mov	sp, r7
 8009540:	bd80      	pop	{r7, pc}
 8009542:	bf00      	nop
 8009544:	08016134 	.word	0x08016134
 8009548:	08016140 	.word	0x08016140
 800954c:	0801614c 	.word	0x0801614c

08009550 <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct altcp_pcb *pcb)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b08e      	sub	sp, #56	; 0x38
 8009554:	af00      	add	r7, sp, #0
 8009556:	60f8      	str	r0, [r7, #12]
 8009558:	60b9      	str	r1, [r7, #8]
 800955a:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	627b      	str	r3, [r7, #36]	; 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 8009560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009562:	2b00      	cmp	r3, #0
 8009564:	d106      	bne.n	8009574 <http_parse_request+0x24>
 8009566:	4b65      	ldr	r3, [pc, #404]	; (80096fc <http_parse_request+0x1ac>)
 8009568:	f240 72ae 	movw	r2, #1966	; 0x7ae
 800956c:	4964      	ldr	r1, [pc, #400]	; (8009700 <http_parse_request+0x1b0>)
 800956e:	4865      	ldr	r0, [pc, #404]	; (8009704 <http_parse_request+0x1b4>)
 8009570:	f00b faa4 	bl	8014abc <iprintf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 8009574:	68bb      	ldr	r3, [r7, #8]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d106      	bne.n	8009588 <http_parse_request+0x38>
 800957a:	4b60      	ldr	r3, [pc, #384]	; (80096fc <http_parse_request+0x1ac>)
 800957c:	f240 72af 	movw	r2, #1967	; 0x7af
 8009580:	4961      	ldr	r1, [pc, #388]	; (8009708 <http_parse_request+0x1b8>)
 8009582:	4860      	ldr	r0, [pc, #384]	; (8009704 <http_parse_request+0x1b4>)
 8009584:	f00b fa9a 	bl	8014abc <iprintf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 8009588:	68bb      	ldr	r3, [r7, #8]
 800958a:	695b      	ldr	r3, [r3, #20]
 800958c:	2b00      	cmp	r3, #0
 800958e:	d103      	bne.n	8009598 <http_parse_request+0x48>
 8009590:	68bb      	ldr	r3, [r7, #8]
 8009592:	699b      	ldr	r3, [r3, #24]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d002      	beq.n	800959e <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 8009598:	f06f 0307 	mvn.w	r3, #7
 800959c:	e0a9      	b.n	80096f2 <http_parse_request+0x1a2>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 800959e:	68bb      	ldr	r3, [r7, #8]
 80095a0:	6a1b      	ldr	r3, [r3, #32]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d103      	bne.n	80095ae <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 80095a6:	68bb      	ldr	r3, [r7, #8]
 80095a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095aa:	621a      	str	r2, [r3, #32]
 80095ac:	e005      	b.n	80095ba <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 80095ae:	68bb      	ldr	r3, [r7, #8]
 80095b0:	6a1b      	ldr	r3, [r3, #32]
 80095b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80095b4:	4618      	mov	r0, r3
 80095b6:	f002 f9fb 	bl	800b9b0 <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 80095ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80095bc:	f002 f9d6 	bl	800b96c <pbuf_ref>

  if (hs->req->next != NULL) {
 80095c0:	68bb      	ldr	r3, [r7, #8]
 80095c2:	6a1b      	ldr	r3, [r3, #32]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d012      	beq.n	80095f0 <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 80095ca:	68bb      	ldr	r3, [r7, #8]
 80095cc:	6a1b      	ldr	r3, [r3, #32]
 80095ce:	891b      	ldrh	r3, [r3, #8]
 80095d0:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80095d4:	4293      	cmp	r3, r2
 80095d6:	bf28      	it	cs
 80095d8:	4613      	movcs	r3, r2
 80095da:	867b      	strh	r3, [r7, #50]	; 0x32
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 80095dc:	68bb      	ldr	r3, [r7, #8]
 80095de:	6a18      	ldr	r0, [r3, #32]
 80095e0:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 80095e2:	2300      	movs	r3, #0
 80095e4:	4949      	ldr	r1, [pc, #292]	; (800970c <http_parse_request+0x1bc>)
 80095e6:	f002 fb1b 	bl	800bc20 <pbuf_copy_partial>
    data = httpd_req_buf;
 80095ea:	4b48      	ldr	r3, [pc, #288]	; (800970c <http_parse_request+0x1bc>)
 80095ec:	637b      	str	r3, [r7, #52]	; 0x34
 80095ee:	e005      	b.n	80095fc <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 80095f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095f2:	685b      	ldr	r3, [r3, #4]
 80095f4:	637b      	str	r3, [r7, #52]	; 0x34
    data_len = p->len;
 80095f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095f8:	895b      	ldrh	r3, [r3, #10]
 80095fa:	867b      	strh	r3, [r7, #50]	; 0x32
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 80095fc:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80095fe:	2b06      	cmp	r3, #6
 8009600:	d962      	bls.n	80096c8 <http_parse_request+0x178>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 8009602:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8009604:	461a      	mov	r2, r3
 8009606:	4942      	ldr	r1, [pc, #264]	; (8009710 <http_parse_request+0x1c0>)
 8009608:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800960a:	f000 fcad 	bl	8009f68 <lwip_strnstr>
 800960e:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 8009610:	6a3b      	ldr	r3, [r7, #32]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d058      	beq.n	80096c8 <http_parse_request+0x178>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 8009616:	2300      	movs	r3, #0
 8009618:	62fb      	str	r3, [r7, #44]	; 0x2c
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 800961a:	2204      	movs	r2, #4
 800961c:	493d      	ldr	r1, [pc, #244]	; (8009714 <http_parse_request+0x1c4>)
 800961e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009620:	f00b fad9 	bl	8014bd6 <strncmp>
 8009624:	4603      	mov	r3, r0
 8009626:	2b00      	cmp	r3, #0
 8009628:	d116      	bne.n	8009658 <http_parse_request+0x108>
        sp1 = data + 3;
 800962a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800962c:	3303      	adds	r3, #3
 800962e:	61fb      	str	r3, [r7, #28]
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
                                  data));
        return http_find_error_file(hs, 501);
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 8009630:	69fb      	ldr	r3, [r7, #28]
 8009632:	1c5a      	adds	r2, r3, #1
 8009634:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009636:	1ad3      	subs	r3, r2, r3
 8009638:	b29b      	uxth	r3, r3
 800963a:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800963c:	1ad3      	subs	r3, r2, r3
 800963e:	837b      	strh	r3, [r7, #26]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 8009640:	69fb      	ldr	r3, [r7, #28]
 8009642:	3301      	adds	r3, #1
 8009644:	8b7a      	ldrh	r2, [r7, #26]
 8009646:	4934      	ldr	r1, [pc, #208]	; (8009718 <http_parse_request+0x1c8>)
 8009648:	4618      	mov	r0, r3
 800964a:	f000 fc8d 	bl	8009f68 <lwip_strnstr>
 800964e:	62b8      	str	r0, [r7, #40]	; 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 8009650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009652:	2b00      	cmp	r3, #0
 8009654:	d111      	bne.n	800967a <http_parse_request+0x12a>
 8009656:	e006      	b.n	8009666 <http_parse_request+0x116>
        data[4] = 0;
 8009658:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800965a:	3304      	adds	r3, #4
 800965c:	2200      	movs	r2, #0
 800965e:	701a      	strb	r2, [r3, #0]
        return http_find_error_file(hs, 501);
 8009660:	f06f 030f 	mvn.w	r3, #15
 8009664:	e045      	b.n	80096f2 <http_parse_request+0x1a2>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 8009666:	69fb      	ldr	r3, [r7, #28]
 8009668:	3301      	adds	r3, #1
 800966a:	8b7a      	ldrh	r2, [r7, #26]
 800966c:	4928      	ldr	r1, [pc, #160]	; (8009710 <http_parse_request+0x1c0>)
 800966e:	4618      	mov	r0, r3
 8009670:	f000 fc7a 	bl	8009f68 <lwip_strnstr>
 8009674:	62b8      	str	r0, [r7, #40]	; 0x28
        is_09 = 1;
 8009676:	2301      	movs	r3, #1
 8009678:	62fb      	str	r3, [r7, #44]	; 0x2c
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 800967a:	69fb      	ldr	r3, [r7, #28]
 800967c:	3301      	adds	r3, #1
 800967e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009680:	1ad3      	subs	r3, r2, r3
 8009682:	833b      	strh	r3, [r7, #24]
      if ((sp2 != 0) && (sp2 > sp1)) {
 8009684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009686:	2b00      	cmp	r3, #0
 8009688:	d01e      	beq.n	80096c8 <http_parse_request+0x178>
 800968a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800968c:	69fb      	ldr	r3, [r7, #28]
 800968e:	429a      	cmp	r2, r3
 8009690:	d91a      	bls.n	80096c8 <http_parse_request+0x178>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 8009692:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8009694:	461a      	mov	r2, r3
 8009696:	4921      	ldr	r1, [pc, #132]	; (800971c <http_parse_request+0x1cc>)
 8009698:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800969a:	f000 fc65 	bl	8009f68 <lwip_strnstr>
 800969e:	4603      	mov	r3, r0
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d011      	beq.n	80096c8 <http_parse_request+0x178>
          char *uri = sp1 + 1;
 80096a4:	69fb      	ldr	r3, [r7, #28]
 80096a6:	3301      	adds	r3, #1
 80096a8:	617b      	str	r3, [r7, #20]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 80096aa:	69fb      	ldr	r3, [r7, #28]
 80096ac:	2200      	movs	r2, #0
 80096ae:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 80096b0:	8b3b      	ldrh	r3, [r7, #24]
 80096b2:	697a      	ldr	r2, [r7, #20]
 80096b4:	4413      	add	r3, r2
 80096b6:	2200      	movs	r2, #0
 80096b8:	701a      	strb	r2, [r3, #0]
            }
            return err;
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 80096ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80096bc:	6979      	ldr	r1, [r7, #20]
 80096be:	68b8      	ldr	r0, [r7, #8]
 80096c0:	f000 f880 	bl	80097c4 <http_find_file>
 80096c4:	4603      	mov	r3, r0
 80096c6:	e014      	b.n	80096f2 <http_parse_request+0x1a2>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 80096c8:	68bb      	ldr	r3, [r7, #8]
 80096ca:	6a1b      	ldr	r3, [r3, #32]
 80096cc:	4618      	mov	r0, r3
 80096ce:	f002 f935 	bl	800b93c <pbuf_clen>
 80096d2:	4603      	mov	r3, r0
 80096d4:	827b      	strh	r3, [r7, #18]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 80096d6:	68bb      	ldr	r3, [r7, #8]
 80096d8:	6a1b      	ldr	r3, [r3, #32]
 80096da:	891b      	ldrh	r3, [r3, #8]
 80096dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80096e0:	d205      	bcs.n	80096ee <http_parse_request+0x19e>
 80096e2:	8a7b      	ldrh	r3, [r7, #18]
 80096e4:	2b05      	cmp	r3, #5
 80096e6:	d802      	bhi.n	80096ee <http_parse_request+0x19e>
      (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 80096e8:	f06f 0304 	mvn.w	r3, #4
 80096ec:	e001      	b.n	80096f2 <http_parse_request+0x1a2>
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 80096ee:	f06f 030f 	mvn.w	r3, #15
  }
}
 80096f2:	4618      	mov	r0, r3
 80096f4:	3738      	adds	r7, #56	; 0x38
 80096f6:	46bd      	mov	sp, r7
 80096f8:	bd80      	pop	{r7, pc}
 80096fa:	bf00      	nop
 80096fc:	08016030 	.word	0x08016030
 8009700:	08016158 	.word	0x08016158
 8009704:	08016078 	.word	0x08016078
 8009708:	080160a0 	.word	0x080160a0
 800970c:	240000cc 	.word	0x240000cc
 8009710:	08016164 	.word	0x08016164
 8009714:	08016168 	.word	0x08016168
 8009718:	08016170 	.word	0x08016170
 800971c:	08016174 	.word	0x08016174

08009720 <http_uri_is_ssi>:
 *
 * @return 1 for SSI, 0 for standard files
 */
static u8_t
http_uri_is_ssi(struct fs_file *file, const char *uri)
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b088      	sub	sp, #32
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
 8009728:	6039      	str	r1, [r7, #0]
  size_t loop;
  u8_t tag_check = 0;
 800972a:	2300      	movs	r3, #0
 800972c:	76fb      	strb	r3, [r7, #27]
  if (file != NULL) {
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d040      	beq.n	80097b6 <http_uri_is_ssi+0x96>
    /* See if we have been asked for an shtml file and, if so,
        enable tag checking. */
    const char *ext = NULL, *sub;
 8009734:	2300      	movs	r3, #0
 8009736:	617b      	str	r3, [r7, #20]
    char *param = (char *)strstr(uri, "?");
 8009738:	213f      	movs	r1, #63	; 0x3f
 800973a:	6838      	ldr	r0, [r7, #0]
 800973c:	f00b fa36 	bl	8014bac <strchr>
 8009740:	60f8      	str	r0, [r7, #12]
    if (param != NULL) {
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d002      	beq.n	800974e <http_uri_is_ssi+0x2e>
      /* separate uri from parameters for now, set back later */
      *param = 0;
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	2200      	movs	r2, #0
 800974c:	701a      	strb	r2, [r3, #0]
    }
    sub = uri;
 800974e:	683b      	ldr	r3, [r7, #0]
 8009750:	613b      	str	r3, [r7, #16]
    ext = uri;
 8009752:	683b      	ldr	r3, [r7, #0]
 8009754:	617b      	str	r3, [r7, #20]
    for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, ".")) {
 8009756:	212e      	movs	r1, #46	; 0x2e
 8009758:	6938      	ldr	r0, [r7, #16]
 800975a:	f00b fa27 	bl	8014bac <strchr>
 800975e:	6138      	str	r0, [r7, #16]
 8009760:	e009      	b.n	8009776 <http_uri_is_ssi+0x56>
      ext = sub;
 8009762:	693b      	ldr	r3, [r7, #16]
 8009764:	617b      	str	r3, [r7, #20]
      sub++;
 8009766:	693b      	ldr	r3, [r7, #16]
 8009768:	3301      	adds	r3, #1
 800976a:	613b      	str	r3, [r7, #16]
    for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, ".")) {
 800976c:	212e      	movs	r1, #46	; 0x2e
 800976e:	6938      	ldr	r0, [r7, #16]
 8009770:	f00b fa1c 	bl	8014bac <strchr>
 8009774:	6138      	str	r0, [r7, #16]
 8009776:	693b      	ldr	r3, [r7, #16]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d1f2      	bne.n	8009762 <http_uri_is_ssi+0x42>
    }
    for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 800977c:	2300      	movs	r3, #0
 800977e:	61fb      	str	r3, [r7, #28]
 8009780:	e010      	b.n	80097a4 <http_uri_is_ssi+0x84>
      if (!lwip_stricmp(ext, g_pcSSIExtensions[loop])) {
 8009782:	4a0f      	ldr	r2, [pc, #60]	; (80097c0 <http_uri_is_ssi+0xa0>)
 8009784:	69fb      	ldr	r3, [r7, #28]
 8009786:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800978a:	4619      	mov	r1, r3
 800978c:	6978      	ldr	r0, [r7, #20]
 800978e:	f000 fc21 	bl	8009fd4 <lwip_stricmp>
 8009792:	4603      	mov	r3, r0
 8009794:	2b00      	cmp	r3, #0
 8009796:	d102      	bne.n	800979e <http_uri_is_ssi+0x7e>
        tag_check = 1;
 8009798:	2301      	movs	r3, #1
 800979a:	76fb      	strb	r3, [r7, #27]
        break;
 800979c:	e005      	b.n	80097aa <http_uri_is_ssi+0x8a>
    for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 800979e:	69fb      	ldr	r3, [r7, #28]
 80097a0:	3301      	adds	r3, #1
 80097a2:	61fb      	str	r3, [r7, #28]
 80097a4:	69fb      	ldr	r3, [r7, #28]
 80097a6:	2b04      	cmp	r3, #4
 80097a8:	d9eb      	bls.n	8009782 <http_uri_is_ssi+0x62>
      }
    }
    if (param != NULL) {
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d002      	beq.n	80097b6 <http_uri_is_ssi+0x96>
      *param = '?';
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	223f      	movs	r2, #63	; 0x3f
 80097b4:	701a      	strb	r2, [r3, #0]
    }
  }
  return tag_check;
 80097b6:	7efb      	ldrb	r3, [r7, #27]
}
 80097b8:	4618      	mov	r0, r3
 80097ba:	3720      	adds	r7, #32
 80097bc:	46bd      	mov	sp, r7
 80097be:	bd80      	pop	{r7, pc}
 80097c0:	0801a0a8 	.word	0x0801a0a8

080097c4 <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 80097c4:	b590      	push	{r4, r7, lr}
 80097c6:	b093      	sub	sp, #76	; 0x4c
 80097c8:	af02      	add	r7, sp, #8
 80097ca:	60f8      	str	r0, [r7, #12]
 80097cc:	60b9      	str	r1, [r7, #8]
 80097ce:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 80097d0:	2300      	movs	r3, #0
 80097d2:	63bb      	str	r3, [r7, #56]	; 0x38
  char *params = NULL;
 80097d4:	2300      	movs	r3, #0
 80097d6:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 80097d8:	2300      	movs	r3, #0
 80097da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 80097de:	68bb      	ldr	r3, [r7, #8]
 80097e0:	4618      	mov	r0, r3
 80097e2:	f7f6 fd87 	bl	80002f4 <strlen>
 80097e6:	6278      	str	r0, [r7, #36]	; 0x24
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 80097e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d072      	beq.n	80098d4 <http_find_file+0x110>
 80097ee:	68ba      	ldr	r2, [r7, #8]
 80097f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097f2:	3b01      	subs	r3, #1
 80097f4:	4413      	add	r3, r2
 80097f6:	781b      	ldrb	r3, [r3, #0]
 80097f8:	2b2f      	cmp	r3, #47	; 0x2f
 80097fa:	d16b      	bne.n	80098d4 <http_find_file+0x110>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 80097fc:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 80097fe:	4a80      	ldr	r2, [pc, #512]	; (8009a00 <http_find_file+0x23c>)
 8009800:	4293      	cmp	r3, r2
 8009802:	d102      	bne.n	800980a <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8009804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009806:	2b01      	cmp	r3, #1
 8009808:	d164      	bne.n	80098d4 <http_find_file+0x110>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 800980a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800980c:	3b01      	subs	r3, #1
 800980e:	2b3f      	cmp	r3, #63	; 0x3f
 8009810:	bf28      	it	cs
 8009812:	233f      	movcs	r3, #63	; 0x3f
 8009814:	623b      	str	r3, [r7, #32]
    if (copy_len > 0) {
 8009816:	6a3b      	ldr	r3, [r7, #32]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d00a      	beq.n	8009832 <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
 800981c:	68bb      	ldr	r3, [r7, #8]
 800981e:	6a3a      	ldr	r2, [r7, #32]
 8009820:	4619      	mov	r1, r3
 8009822:	4877      	ldr	r0, [pc, #476]	; (8009a00 <http_find_file+0x23c>)
 8009824:	f00b f91a 	bl	8014a5c <memcpy>
      http_uri_buf[copy_len] = 0;
 8009828:	4a75      	ldr	r2, [pc, #468]	; (8009a00 <http_find_file+0x23c>)
 800982a:	6a3b      	ldr	r3, [r7, #32]
 800982c:	4413      	add	r3, r2
 800982e:	2200      	movs	r2, #0
 8009830:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 8009832:	2300      	movs	r3, #0
 8009834:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009836:	e04a      	b.n	80098ce <http_find_file+0x10a>
      const char *file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 8009838:	6a3b      	ldr	r3, [r7, #32]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d028      	beq.n	8009890 <http_find_file+0xcc>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 800983e:	6a3b      	ldr	r3, [r7, #32]
 8009840:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8009844:	61fb      	str	r3, [r7, #28]
        if (len_left > 0) {
 8009846:	69fb      	ldr	r3, [r7, #28]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d01e      	beq.n	800988a <http_find_file+0xc6>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 800984c:	4a6d      	ldr	r2, [pc, #436]	; (8009a04 <http_find_file+0x240>)
 800984e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009850:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009854:	4618      	mov	r0, r3
 8009856:	f7f6 fd4d 	bl	80002f4 <strlen>
 800985a:	61b8      	str	r0, [r7, #24]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 800985c:	69ba      	ldr	r2, [r7, #24]
 800985e:	69fb      	ldr	r3, [r7, #28]
 8009860:	4293      	cmp	r3, r2
 8009862:	bf28      	it	cs
 8009864:	4613      	movcs	r3, r2
 8009866:	617b      	str	r3, [r7, #20]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 8009868:	6a3b      	ldr	r3, [r7, #32]
 800986a:	4a65      	ldr	r2, [pc, #404]	; (8009a00 <http_find_file+0x23c>)
 800986c:	1898      	adds	r0, r3, r2
 800986e:	4a65      	ldr	r2, [pc, #404]	; (8009a04 <http_find_file+0x240>)
 8009870:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009872:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009876:	697a      	ldr	r2, [r7, #20]
 8009878:	4619      	mov	r1, r3
 800987a:	f00b f8ef 	bl	8014a5c <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 800987e:	6a3a      	ldr	r2, [r7, #32]
 8009880:	697b      	ldr	r3, [r7, #20]
 8009882:	4413      	add	r3, r2
 8009884:	4a5e      	ldr	r2, [pc, #376]	; (8009a00 <http_find_file+0x23c>)
 8009886:	2100      	movs	r1, #0
 8009888:	54d1      	strb	r1, [r2, r3]
        }
        file_name = http_uri_buf;
 800988a:	4b5d      	ldr	r3, [pc, #372]	; (8009a00 <http_find_file+0x23c>)
 800988c:	62bb      	str	r3, [r7, #40]	; 0x28
 800988e:	e004      	b.n	800989a <http_find_file+0xd6>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = httpd_default_filenames[loop].name;
 8009890:	4a5c      	ldr	r2, [pc, #368]	; (8009a04 <http_find_file+0x240>)
 8009892:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009894:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009898:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800989e:	4618      	mov	r0, r3
 80098a0:	f7fe ffd6 	bl	8008850 <fs_open>
 80098a4:	4603      	mov	r3, r0
 80098a6:	74fb      	strb	r3, [r7, #19]
      if (err == ERR_OK) {
 80098a8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d10b      	bne.n	80098c8 <http_find_file+0x104>
        uri = file_name;
 80098b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098b2:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	63bb      	str	r3, [r7, #56]	; 0x38
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = httpd_default_filenames[loop].shtml;
 80098b8:	4a52      	ldr	r2, [pc, #328]	; (8009a04 <http_find_file+0x240>)
 80098ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098bc:	00db      	lsls	r3, r3, #3
 80098be:	4413      	add	r3, r2
 80098c0:	791b      	ldrb	r3, [r3, #4]
 80098c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#endif /* LWIP_HTTPD_SSI */
        break;
 80098c6:	e005      	b.n	80098d4 <http_find_file+0x110>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 80098c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098ca:	3301      	adds	r3, #1
 80098cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80098ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098d0:	2b04      	cmp	r3, #4
 80098d2:	d9b1      	bls.n	8009838 <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
 80098d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d176      	bne.n	80099c8 <http_find_file+0x204>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 80098da:	68bb      	ldr	r3, [r7, #8]
 80098dc:	213f      	movs	r1, #63	; 0x3f
 80098de:	4618      	mov	r0, r3
 80098e0:	f00b f964 	bl	8014bac <strchr>
 80098e4:	6378      	str	r0, [r7, #52]	; 0x34
    if (params != NULL) {
 80098e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d005      	beq.n	80098f8 <http_find_file+0x134>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 80098ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098ee:	2200      	movs	r2, #0
 80098f0:	701a      	strb	r2, [r3, #0]
      params++;
 80098f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098f4:	3301      	adds	r3, #1
 80098f6:	637b      	str	r3, [r7, #52]	; 0x34
    }

#if LWIP_HTTPD_CGI
    http_cgi_paramcount = -1;
 80098f8:	4b43      	ldr	r3, [pc, #268]	; (8009a08 <http_find_file+0x244>)
 80098fa:	f04f 32ff 	mov.w	r2, #4294967295
 80098fe:	601a      	str	r2, [r3, #0]
    /* Does the base URI we have isolated correspond to a CGI handler? */
    if (httpd_num_cgis && httpd_cgis) {
 8009900:	4b42      	ldr	r3, [pc, #264]	; (8009a0c <http_find_file+0x248>)
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	2b00      	cmp	r3, #0
 8009906:	d034      	beq.n	8009972 <http_find_file+0x1ae>
 8009908:	4b41      	ldr	r3, [pc, #260]	; (8009a10 <http_find_file+0x24c>)
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d030      	beq.n	8009972 <http_find_file+0x1ae>
      for (i = 0; i < httpd_num_cgis; i++) {
 8009910:	2300      	movs	r3, #0
 8009912:	633b      	str	r3, [r7, #48]	; 0x30
 8009914:	e028      	b.n	8009968 <http_find_file+0x1a4>
        if (strcmp(uri, httpd_cgis[i].pcCGIName) == 0) {
 8009916:	68b8      	ldr	r0, [r7, #8]
 8009918:	4b3d      	ldr	r3, [pc, #244]	; (8009a10 <http_find_file+0x24c>)
 800991a:	681a      	ldr	r2, [r3, #0]
 800991c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800991e:	00db      	lsls	r3, r3, #3
 8009920:	4413      	add	r3, r2
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	4619      	mov	r1, r3
 8009926:	f7f6 fcdb 	bl	80002e0 <strcmp>
 800992a:	4603      	mov	r3, r0
 800992c:	2b00      	cmp	r3, #0
 800992e:	d118      	bne.n	8009962 <http_find_file+0x19e>
          /*
           * We found a CGI that handles this URI so extract the
           * parameters and call the handler.
           */
          http_cgi_paramcount = extract_uri_parameters(hs, params);
 8009930:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009932:	68f8      	ldr	r0, [r7, #12]
 8009934:	f7ff f928 	bl	8008b88 <extract_uri_parameters>
 8009938:	4603      	mov	r3, r0
 800993a:	4a33      	ldr	r2, [pc, #204]	; (8009a08 <http_find_file+0x244>)
 800993c:	6013      	str	r3, [r2, #0]
          uri = httpd_cgis[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 800993e:	4b34      	ldr	r3, [pc, #208]	; (8009a10 <http_find_file+0x24c>)
 8009940:	681a      	ldr	r2, [r3, #0]
 8009942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009944:	00db      	lsls	r3, r3, #3
 8009946:	4413      	add	r3, r2
 8009948:	685c      	ldr	r4, [r3, #4]
 800994a:	4b2f      	ldr	r3, [pc, #188]	; (8009a08 <http_find_file+0x244>)
 800994c:	6819      	ldr	r1, [r3, #0]
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	f103 0230 	add.w	r2, r3, #48	; 0x30
                                         hs->param_vals);
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	3370      	adds	r3, #112	; 0x70
          uri = httpd_cgis[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 8009958:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800995a:	47a0      	blx	r4
 800995c:	4603      	mov	r3, r0
 800995e:	60bb      	str	r3, [r7, #8]
          break;
 8009960:	e007      	b.n	8009972 <http_find_file+0x1ae>
      for (i = 0; i < httpd_num_cgis; i++) {
 8009962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009964:	3301      	adds	r3, #1
 8009966:	633b      	str	r3, [r7, #48]	; 0x30
 8009968:	4b28      	ldr	r3, [pc, #160]	; (8009a0c <http_find_file+0x248>)
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800996e:	429a      	cmp	r2, r3
 8009970:	dbd1      	blt.n	8009916 <http_find_file+0x152>
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	68ba      	ldr	r2, [r7, #8]
 8009976:	4611      	mov	r1, r2
 8009978:	4618      	mov	r0, r3
 800997a:	f7fe ff69 	bl	8008850 <fs_open>
 800997e:	4603      	mov	r3, r0
 8009980:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_OK) {
 8009982:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009986:	2b00      	cmp	r3, #0
 8009988:	d102      	bne.n	8009990 <http_find_file+0x1cc>
      file = &hs->file_handle;
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	63bb      	str	r3, [r7, #56]	; 0x38
 800998e:	e006      	b.n	800999e <http_find_file+0x1da>
    } else {
      file = http_get_404_file(hs, &uri);
 8009990:	f107 0308 	add.w	r3, r7, #8
 8009994:	4619      	mov	r1, r3
 8009996:	68f8      	ldr	r0, [r7, #12]
 8009998:	f7ff fd94 	bl	80094c4 <http_get_404_file>
 800999c:	63b8      	str	r0, [r7, #56]	; 0x38
    }
#if LWIP_HTTPD_SSI
    if (file != NULL) {
 800999e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d011      	beq.n	80099c8 <http_find_file+0x204>
      if (file->flags & FS_FILE_FLAGS_SSI) {
 80099a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099a6:	7c1b      	ldrb	r3, [r3, #16]
 80099a8:	f003 0308 	and.w	r3, r3, #8
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d003      	beq.n	80099b8 <http_find_file+0x1f4>
        tag_check = 1;
 80099b0:	2301      	movs	r3, #1
 80099b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80099b6:	e007      	b.n	80099c8 <http_find_file+0x204>
      } else {
#if LWIP_HTTPD_SSI_BY_FILE_EXTENSION
        tag_check = http_uri_is_ssi(file, uri);
 80099b8:	68bb      	ldr	r3, [r7, #8]
 80099ba:	4619      	mov	r1, r3
 80099bc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80099be:	f7ff feaf 	bl	8009720 <http_uri_is_ssi>
 80099c2:	4603      	mov	r3, r0
 80099c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#endif /* LWIP_HTTPD_SSI_BY_FILE_EXTENSION */
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 80099c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d106      	bne.n	80099dc <http_find_file+0x218>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 80099ce:	f107 0308 	add.w	r3, r7, #8
 80099d2:	4619      	mov	r1, r3
 80099d4:	68f8      	ldr	r0, [r7, #12]
 80099d6:	f7ff fd75 	bl	80094c4 <http_get_404_file>
 80099da:	63b8      	str	r0, [r7, #56]	; 0x38
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 80099dc:	68ba      	ldr	r2, [r7, #8]
 80099de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099e0:	9301      	str	r3, [sp, #4]
 80099e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80099e6:	9300      	str	r3, [sp, #0]
 80099e8:	4613      	mov	r3, r2
 80099ea:	687a      	ldr	r2, [r7, #4]
 80099ec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80099ee:	68f8      	ldr	r0, [r7, #12]
 80099f0:	f000 f810 	bl	8009a14 <http_init_file>
 80099f4:	4603      	mov	r3, r0
}
 80099f6:	4618      	mov	r0, r3
 80099f8:	3744      	adds	r7, #68	; 0x44
 80099fa:	46bd      	mov	sp, r7
 80099fc:	bd90      	pop	{r4, r7, pc}
 80099fe:	bf00      	nop
 8009a00:	240004cc 	.word	0x240004cc
 8009a04:	0801a0bc 	.word	0x0801a0bc
 8009a08:	24000520 	.word	0x24000520
 8009a0c:	2400051c 	.word	0x2400051c
 8009a10:	24000518 	.word	0x24000518

08009a14 <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char *params)
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b088      	sub	sp, #32
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	60f8      	str	r0, [r7, #12]
 8009a1c:	60b9      	str	r1, [r7, #8]
 8009a1e:	607a      	str	r2, [r7, #4]
 8009a20:	603b      	str	r3, [r7, #0]
#if !LWIP_HTTPD_SUPPORT_V09
  LWIP_UNUSED_ARG(is_09);
#endif
  if (file != NULL) {
 8009a22:	68bb      	ldr	r3, [r7, #8]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d07d      	beq.n	8009b24 <http_init_file+0x110>
    /* file opened, initialise struct http_state */
#if !LWIP_HTTPD_DYNAMIC_FILE_READ
    /* If dynamic read is disabled, file data must be in one piece and available now */
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 8009a28:	68bb      	ldr	r3, [r7, #8]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d106      	bne.n	8009a3e <http_init_file+0x2a>
 8009a30:	4b45      	ldr	r3, [pc, #276]	; (8009b48 <http_init_file+0x134>)
 8009a32:	f640 120b 	movw	r2, #2315	; 0x90b
 8009a36:	4945      	ldr	r1, [pc, #276]	; (8009b4c <http_init_file+0x138>)
 8009a38:	4845      	ldr	r0, [pc, #276]	; (8009b50 <http_init_file+0x13c>)
 8009a3a:	f00b f83f 	bl	8014abc <iprintf>
#endif

#if LWIP_HTTPD_SSI
    if (tag_check) {
 8009a3e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d01c      	beq.n	8009a80 <http_init_file+0x6c>
      struct http_ssi_state *ssi = http_ssi_state_alloc();
 8009a46:	f7fe ff5a 	bl	80088fe <http_ssi_state_alloc>
 8009a4a:	61f8      	str	r0, [r7, #28]
      if (ssi != NULL) {
 8009a4c:	69fb      	ldr	r3, [r7, #28]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d016      	beq.n	8009a80 <http_init_file+0x6c>
        ssi->tag_index = 0;
 8009a52:	69fb      	ldr	r3, [r7, #28]
 8009a54:	2200      	movs	r2, #0
 8009a56:	819a      	strh	r2, [r3, #12]
        ssi->tag_state = TAG_NONE;
 8009a58:	69fb      	ldr	r3, [r7, #28]
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
        ssi->parsed = file->data;
 8009a60:	68bb      	ldr	r3, [r7, #8]
 8009a62:	681a      	ldr	r2, [r3, #0]
 8009a64:	69fb      	ldr	r3, [r7, #28]
 8009a66:	601a      	str	r2, [r3, #0]
        ssi->parse_left = file->len;
 8009a68:	68bb      	ldr	r3, [r7, #8]
 8009a6a:	685b      	ldr	r3, [r3, #4]
 8009a6c:	461a      	mov	r2, r3
 8009a6e:	69fb      	ldr	r3, [r7, #28]
 8009a70:	609a      	str	r2, [r3, #8]
        ssi->tag_end = file->data;
 8009a72:	68bb      	ldr	r3, [r7, #8]
 8009a74:	681a      	ldr	r2, [r3, #0]
 8009a76:	69fb      	ldr	r3, [r7, #28]
 8009a78:	605a      	str	r2, [r3, #4]
        hs->ssi = ssi;
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	69fa      	ldr	r2, [r7, #28]
 8009a7e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	68ba      	ldr	r2, [r7, #8]
 8009a84:	615a      	str	r2, [r3, #20]
                       );
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
    hs->file = file->data;
 8009a86:	68bb      	ldr	r3, [r7, #8]
 8009a88:	681a      	ldr	r2, [r3, #0]
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 8009a8e:	68bb      	ldr	r3, [r7, #8]
 8009a90:	685b      	ldr	r3, [r3, #4]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	da06      	bge.n	8009aa4 <http_init_file+0x90>
 8009a96:	4b2c      	ldr	r3, [pc, #176]	; (8009b48 <http_init_file+0x134>)
 8009a98:	f640 1234 	movw	r2, #2356	; 0x934
 8009a9c:	492d      	ldr	r1, [pc, #180]	; (8009b54 <http_init_file+0x140>)
 8009a9e:	482c      	ldr	r0, [pc, #176]	; (8009b50 <http_init_file+0x13c>)
 8009aa0:	f00b f80c 	bl	8014abc <iprintf>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = (u32_t)file->len;
 8009aa4:	68bb      	ldr	r3, [r7, #8]
 8009aa6:	685b      	ldr	r3, [r3, #4]
 8009aa8:	461a      	mov	r2, r3
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	625a      	str	r2, [r3, #36]	; 0x24
    }
    hs->retries = 0;
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
#if LWIP_HTTPD_TIMING
    hs->time_started = sys_now();
#endif /* LWIP_HTTPD_TIMING */
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	695b      	ldr	r3, [r3, #20]
 8009aba:	7c1b      	ldrb	r3, [r3, #16]
 8009abc:	f003 0301 	and.w	r3, r3, #1
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d106      	bne.n	8009ad2 <http_init_file+0xbe>
 8009ac4:	4b20      	ldr	r3, [pc, #128]	; (8009b48 <http_init_file+0x134>)
 8009ac6:	f640 1243 	movw	r2, #2371	; 0x943
 8009aca:	4923      	ldr	r1, [pc, #140]	; (8009b58 <http_init_file+0x144>)
 8009acc:	4820      	ldr	r0, [pc, #128]	; (8009b50 <http_init_file+0x13c>)
 8009ace:	f00a fff5 	bl	8014abc <iprintf>
                (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d032      	beq.n	8009b3e <http_init_file+0x12a>
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	695b      	ldr	r3, [r3, #20]
 8009adc:	7c1b      	ldrb	r3, [r3, #16]
 8009ade:	f003 0301 	and.w	r3, r3, #1
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d02b      	beq.n	8009b3e <http_init_file+0x12a>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	6998      	ldr	r0, [r3, #24]
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aee:	461a      	mov	r2, r3
 8009af0:	491a      	ldr	r1, [pc, #104]	; (8009b5c <http_init_file+0x148>)
 8009af2:	f000 fa39 	bl	8009f68 <lwip_strnstr>
 8009af6:	61b8      	str	r0, [r7, #24]
      if (file_start != NULL) {
 8009af8:	69bb      	ldr	r3, [r7, #24]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d01f      	beq.n	8009b3e <http_init_file+0x12a>
        int diff = file_start + 4 - hs->file;
 8009afe:	69bb      	ldr	r3, [r7, #24]
 8009b00:	1d1a      	adds	r2, r3, #4
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	699b      	ldr	r3, [r3, #24]
 8009b06:	1ad3      	subs	r3, r2, r3
 8009b08:	617b      	str	r3, [r7, #20]
        hs->file += diff;
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	699a      	ldr	r2, [r3, #24]
 8009b0e:	697b      	ldr	r3, [r7, #20]
 8009b10:	441a      	add	r2, r3
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009b1a:	697b      	ldr	r3, [r7, #20]
 8009b1c:	1ad2      	subs	r2, r2, r3
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	625a      	str	r2, [r3, #36]	; 0x24
 8009b22:	e00c      	b.n	8009b3e <http_init_file+0x12a>
      }
    }
#endif /* LWIP_HTTPD_SUPPORT_V09*/
  } else {
    hs->handle = NULL;
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	2200      	movs	r2, #0
 8009b28:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	2200      	movs	r2, #0
 8009b34:	625a      	str	r2, [r3, #36]	; 0x24
    hs->retries = 0;
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	2200      	movs	r2, #0
 8009b3a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        hs->keepalive = 0;
      }
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 8009b3e:	2300      	movs	r3, #0
}
 8009b40:	4618      	mov	r0, r3
 8009b42:	3720      	adds	r7, #32
 8009b44:	46bd      	mov	sp, r7
 8009b46:	bd80      	pop	{r7, pc}
 8009b48:	08016030 	.word	0x08016030
 8009b4c:	0801617c 	.word	0x0801617c
 8009b50:	08016078 	.word	0x08016078
 8009b54:	08016190 	.word	0x08016190
 8009b58:	080161b0 	.word	0x080161b0
 8009b5c:	08016174 	.word	0x08016174

08009b60 <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b084      	sub	sp, #16
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
 8009b68:	460b      	mov	r3, r1
 8009b6a:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d002      	beq.n	8009b7c <http_err+0x1c>
    http_state_free(hs);
 8009b76:	68f8      	ldr	r0, [r7, #12]
 8009b78:	f7fe ff2e 	bl	80089d8 <http_state_free>
  }
}
 8009b7c:	bf00      	nop
 8009b7e:	3710      	adds	r7, #16
 8009b80:	46bd      	mov	sp, r7
 8009b82:	bd80      	pop	{r7, pc}

08009b84 <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct altcp_pcb *pcb, u16_t len)
{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b086      	sub	sp, #24
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	60f8      	str	r0, [r7, #12]
 8009b8c:	60b9      	str	r1, [r7, #8]
 8009b8e:	4613      	mov	r3, r2
 8009b90:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void *)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 8009b96:	697b      	ldr	r3, [r7, #20]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d101      	bne.n	8009ba0 <http_sent+0x1c>
    return ERR_OK;
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	e008      	b.n	8009bb2 <http_sent+0x2e>
  }

  hs->retries = 0;
 8009ba0:	697b      	ldr	r3, [r7, #20]
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  http_send(pcb, hs);
 8009ba8:	6979      	ldr	r1, [r7, #20]
 8009baa:	68b8      	ldr	r0, [r7, #8]
 8009bac:	f7ff fc48 	bl	8009440 <http_send>

  return ERR_OK;
 8009bb0:	2300      	movs	r3, #0
}
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	3718      	adds	r7, #24
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	bd80      	pop	{r7, pc}

08009bba <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct altcp_pcb *pcb)
{
 8009bba:	b580      	push	{r7, lr}
 8009bbc:	b084      	sub	sp, #16
 8009bbe:	af00      	add	r7, sp, #0
 8009bc0:	6078      	str	r0, [r7, #4]
 8009bc2:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
              (void *)pcb, (void *)hs, tcp_debug_state_str(altcp_dbg_get_tcp_state(pcb))));

  if (hs == NULL) {
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d107      	bne.n	8009bde <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 8009bce:	2100      	movs	r1, #0
 8009bd0:	6838      	ldr	r0, [r7, #0]
 8009bd2:	f7fe ffbd 	bl	8008b50 <http_close_conn>
 8009bd6:	4603      	mov	r3, r0
 8009bd8:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
      altcp_abort(pcb);
      return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 8009bda:	2300      	movs	r3, #0
 8009bdc:	e021      	b.n	8009c22 <http_poll+0x68>
  } else {
    hs->retries++;
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009be4:	3301      	adds	r3, #1
 8009be6:	b2da      	uxtb	r2, r3
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009bf4:	2b04      	cmp	r3, #4
 8009bf6:	d105      	bne.n	8009c04 <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 8009bf8:	68f9      	ldr	r1, [r7, #12]
 8009bfa:	6838      	ldr	r0, [r7, #0]
 8009bfc:	f7fe ffa8 	bl	8008b50 <http_close_conn>
      return ERR_OK;
 8009c00:	2300      	movs	r3, #0
 8009c02:	e00e      	b.n	8009c22 <http_poll+0x68>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if (hs->handle) {
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	695b      	ldr	r3, [r3, #20]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d009      	beq.n	8009c20 <http_poll+0x66>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if (http_send(pcb, hs)) {
 8009c0c:	68f9      	ldr	r1, [r7, #12]
 8009c0e:	6838      	ldr	r0, [r7, #0]
 8009c10:	f7ff fc16 	bl	8009440 <http_send>
 8009c14:	4603      	mov	r3, r0
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d002      	beq.n	8009c20 <http_poll+0x66>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        altcp_output(pcb);
 8009c1a:	6838      	ldr	r0, [r7, #0]
 8009c1c:	f007 f98c 	bl	8010f38 <tcp_output>
      }
    }
  }

  return ERR_OK;
 8009c20:	2300      	movs	r3, #0
}
 8009c22:	4618      	mov	r0, r3
 8009c24:	3710      	adds	r7, #16
 8009c26:	46bd      	mov	sp, r7
 8009c28:	bd80      	pop	{r7, pc}
	...

08009c2c <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b086      	sub	sp, #24
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	60f8      	str	r0, [r7, #12]
 8009c34:	60b9      	str	r1, [r7, #8]
 8009c36:	607a      	str	r2, [r7, #4]
 8009c38:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void *)pcb,
              (void *)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 8009c3e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d105      	bne.n	8009c52 <http_recv+0x26>
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d002      	beq.n	8009c52 <http_recv+0x26>
 8009c4c:	697b      	ldr	r3, [r7, #20]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d111      	bne.n	8009c76 <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d008      	beq.n	8009c6a <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      altcp_recved(pcb, p->tot_len);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	891b      	ldrh	r3, [r3, #8]
 8009c5c:	4619      	mov	r1, r3
 8009c5e:	68b8      	ldr	r0, [r7, #8]
 8009c60:	f002 fd56 	bl	800c710 <tcp_recved>
      pbuf_free(p);
 8009c64:	6878      	ldr	r0, [r7, #4]
 8009c66:	f001 fde1 	bl	800b82c <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 8009c6a:	6979      	ldr	r1, [r7, #20]
 8009c6c:	68b8      	ldr	r0, [r7, #8]
 8009c6e:	f7fe ff6f 	bl	8008b50 <http_close_conn>
    return ERR_OK;
 8009c72:	2300      	movs	r3, #0
 8009c74:	e055      	b.n	8009d22 <http_recv+0xf6>
    hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    altcp_recved(pcb, p->tot_len);
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	891b      	ldrh	r3, [r3, #8]
 8009c7a:	4619      	mov	r1, r3
 8009c7c:	68b8      	ldr	r0, [r7, #8]
 8009c7e:	f002 fd47 	bl	800c710 <tcp_recved>
    }
    return ERR_OK;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 8009c82:	697b      	ldr	r3, [r7, #20]
 8009c84:	695b      	ldr	r3, [r3, #20]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d147      	bne.n	8009d1a <http_recv+0xee>
      err_t parsed = http_parse_request(p, hs, pcb);
 8009c8a:	68ba      	ldr	r2, [r7, #8]
 8009c8c:	6979      	ldr	r1, [r7, #20]
 8009c8e:	6878      	ldr	r0, [r7, #4]
 8009c90:	f7ff fc5e 	bl	8009550 <http_parse_request>
 8009c94:	4603      	mov	r3, r0
 8009c96:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 8009c98:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d015      	beq.n	8009ccc <http_recv+0xa0>
 8009ca0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009ca4:	f113 0f05 	cmn.w	r3, #5
 8009ca8:	d010      	beq.n	8009ccc <http_recv+0xa0>
 8009caa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009cae:	f113 0f10 	cmn.w	r3, #16
 8009cb2:	d00b      	beq.n	8009ccc <http_recv+0xa0>
 8009cb4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009cb8:	f113 0f08 	cmn.w	r3, #8
 8009cbc:	d006      	beq.n	8009ccc <http_recv+0xa0>
 8009cbe:	4b1b      	ldr	r3, [pc, #108]	; (8009d2c <http_recv+0x100>)
 8009cc0:	f640 2204 	movw	r2, #2564	; 0xa04
 8009cc4:	491a      	ldr	r1, [pc, #104]	; (8009d30 <http_recv+0x104>)
 8009cc6:	481b      	ldr	r0, [pc, #108]	; (8009d34 <http_recv+0x108>)
 8009cc8:	f00a fef8 	bl	8014abc <iprintf>
                  || parsed == ERR_INPROGRESS || parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 8009ccc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009cd0:	f113 0f05 	cmn.w	r3, #5
 8009cd4:	d00b      	beq.n	8009cee <http_recv+0xc2>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 8009cd6:	697b      	ldr	r3, [r7, #20]
 8009cd8:	6a1b      	ldr	r3, [r3, #32]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d007      	beq.n	8009cee <http_recv+0xc2>
          pbuf_free(hs->req);
 8009cde:	697b      	ldr	r3, [r7, #20]
 8009ce0:	6a1b      	ldr	r3, [r3, #32]
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	f001 fda2 	bl	800b82c <pbuf_free>
          hs->req = NULL;
 8009ce8:	697b      	ldr	r3, [r7, #20]
 8009cea:	2200      	movs	r2, #0
 8009cec:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 8009cee:	6878      	ldr	r0, [r7, #4]
 8009cf0:	f001 fd9c 	bl	800b82c <pbuf_free>
      if (parsed == ERR_OK) {
 8009cf4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d104      	bne.n	8009d06 <http_recv+0xda>
#if LWIP_HTTPD_SUPPORT_POST
        if (hs->post_content_len_left == 0)
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void *)hs->file, hs->left));
          http_send(pcb, hs);
 8009cfc:	6979      	ldr	r1, [r7, #20]
 8009cfe:	68b8      	ldr	r0, [r7, #8]
 8009d00:	f7ff fb9e 	bl	8009440 <http_send>
 8009d04:	e00c      	b.n	8009d20 <http_recv+0xf4>
        }
      } else if (parsed == ERR_ARG) {
 8009d06:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009d0a:	f113 0f10 	cmn.w	r3, #16
 8009d0e:	d107      	bne.n	8009d20 <http_recv+0xf4>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 8009d10:	6979      	ldr	r1, [r7, #20]
 8009d12:	68b8      	ldr	r0, [r7, #8]
 8009d14:	f7fe ff1c 	bl	8008b50 <http_close_conn>
 8009d18:	e002      	b.n	8009d20 <http_recv+0xf4>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 8009d1a:	6878      	ldr	r0, [r7, #4]
 8009d1c:	f001 fd86 	bl	800b82c <pbuf_free>
    }
  }
  return ERR_OK;
 8009d20:	2300      	movs	r3, #0
}
 8009d22:	4618      	mov	r0, r3
 8009d24:	3718      	adds	r7, #24
 8009d26:	46bd      	mov	sp, r7
 8009d28:	bd80      	pop	{r7, pc}
 8009d2a:	bf00      	nop
 8009d2c:	08016030 	.word	0x08016030
 8009d30:	080161dc 	.word	0x080161dc
 8009d34:	08016078 	.word	0x08016078

08009d38 <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct altcp_pcb *pcb, err_t err)
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b086      	sub	sp, #24
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	60f8      	str	r0, [r7, #12]
 8009d40:	60b9      	str	r1, [r7, #8]
 8009d42:	4613      	mov	r3, r2
 8009d44:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 8009d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d102      	bne.n	8009d54 <http_accept+0x1c>
 8009d4e:	68bb      	ldr	r3, [r7, #8]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d102      	bne.n	8009d5a <http_accept+0x22>
    return ERR_VAL;
 8009d54:	f06f 0305 	mvn.w	r3, #5
 8009d58:	e025      	b.n	8009da6 <http_accept+0x6e>
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 8009d5a:	2101      	movs	r1, #1
 8009d5c:	68b8      	ldr	r0, [r7, #8]
 8009d5e:	f003 f9bb 	bl	800d0d8 <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 8009d62:	f7fe fdfb 	bl	800895c <http_state_alloc>
 8009d66:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 8009d68:	697b      	ldr	r3, [r7, #20]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d102      	bne.n	8009d74 <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 8009d6e:	f04f 33ff 	mov.w	r3, #4294967295
 8009d72:	e018      	b.n	8009da6 <http_accept+0x6e>
  }
  hs->pcb = pcb;
 8009d74:	697b      	ldr	r3, [r7, #20]
 8009d76:	68ba      	ldr	r2, [r7, #8]
 8009d78:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 8009d7a:	6979      	ldr	r1, [r7, #20]
 8009d7c:	68b8      	ldr	r0, [r7, #8]
 8009d7e:	f003 fbb3 	bl	800d4e8 <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 8009d82:	490b      	ldr	r1, [pc, #44]	; (8009db0 <http_accept+0x78>)
 8009d84:	68b8      	ldr	r0, [r7, #8]
 8009d86:	f003 fbc1 	bl	800d50c <tcp_recv>
  altcp_err(pcb, http_err);
 8009d8a:	490a      	ldr	r1, [pc, #40]	; (8009db4 <http_accept+0x7c>)
 8009d8c:	68b8      	ldr	r0, [r7, #8]
 8009d8e:	f003 fc01 	bl	800d594 <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8009d92:	2204      	movs	r2, #4
 8009d94:	4908      	ldr	r1, [pc, #32]	; (8009db8 <http_accept+0x80>)
 8009d96:	68b8      	ldr	r0, [r7, #8]
 8009d98:	f003 fc36 	bl	800d608 <tcp_poll>
  altcp_sent(pcb, http_sent);
 8009d9c:	4907      	ldr	r1, [pc, #28]	; (8009dbc <http_accept+0x84>)
 8009d9e:	68b8      	ldr	r0, [r7, #8]
 8009da0:	f003 fbd6 	bl	800d550 <tcp_sent>

  return ERR_OK;
 8009da4:	2300      	movs	r3, #0
}
 8009da6:	4618      	mov	r0, r3
 8009da8:	3718      	adds	r7, #24
 8009daa:	46bd      	mov	sp, r7
 8009dac:	bd80      	pop	{r7, pc}
 8009dae:	bf00      	nop
 8009db0:	08009c2d 	.word	0x08009c2d
 8009db4:	08009b61 	.word	0x08009b61
 8009db8:	08009bbb 	.word	0x08009bbb
 8009dbc:	08009b85 	.word	0x08009b85

08009dc0 <httpd_init_pcb>:

static void
httpd_init_pcb(struct altcp_pcb *pcb, u16_t port)
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b084      	sub	sp, #16
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
 8009dc8:	460b      	mov	r3, r1
 8009dca:	807b      	strh	r3, [r7, #2]
  err_t err;

  if (pcb) {
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d029      	beq.n	8009e26 <httpd_init_pcb+0x66>
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 8009dd2:	2101      	movs	r1, #1
 8009dd4:	6878      	ldr	r0, [r7, #4]
 8009dd6:	f003 f97f 	bl	800d0d8 <tcp_setprio>
    /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 8009dda:	887b      	ldrh	r3, [r7, #2]
 8009ddc:	461a      	mov	r2, r3
 8009dde:	4914      	ldr	r1, [pc, #80]	; (8009e30 <httpd_init_pcb+0x70>)
 8009de0:	6878      	ldr	r0, [r7, #4]
 8009de2:	f002 fac7 	bl	800c374 <tcp_bind>
 8009de6:	4603      	mov	r3, r0
 8009de8:	73fb      	strb	r3, [r7, #15]
    LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 8009dea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d006      	beq.n	8009e00 <httpd_init_pcb+0x40>
 8009df2:	4b10      	ldr	r3, [pc, #64]	; (8009e34 <httpd_init_pcb+0x74>)
 8009df4:	f640 2257 	movw	r2, #2647	; 0xa57
 8009df8:	490f      	ldr	r1, [pc, #60]	; (8009e38 <httpd_init_pcb+0x78>)
 8009dfa:	4810      	ldr	r0, [pc, #64]	; (8009e3c <httpd_init_pcb+0x7c>)
 8009dfc:	f00a fe5e 	bl	8014abc <iprintf>
    pcb = altcp_listen(pcb);
 8009e00:	21ff      	movs	r1, #255	; 0xff
 8009e02:	6878      	ldr	r0, [r7, #4]
 8009e04:	f002 fb6e 	bl	800c4e4 <tcp_listen_with_backlog>
 8009e08:	6078      	str	r0, [r7, #4]
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d106      	bne.n	8009e1e <httpd_init_pcb+0x5e>
 8009e10:	4b08      	ldr	r3, [pc, #32]	; (8009e34 <httpd_init_pcb+0x74>)
 8009e12:	f640 2259 	movw	r2, #2649	; 0xa59
 8009e16:	490a      	ldr	r1, [pc, #40]	; (8009e40 <httpd_init_pcb+0x80>)
 8009e18:	4808      	ldr	r0, [pc, #32]	; (8009e3c <httpd_init_pcb+0x7c>)
 8009e1a:	f00a fe4f 	bl	8014abc <iprintf>
    altcp_accept(pcb, http_accept);
 8009e1e:	4909      	ldr	r1, [pc, #36]	; (8009e44 <httpd_init_pcb+0x84>)
 8009e20:	6878      	ldr	r0, [r7, #4]
 8009e22:	f003 fbd9 	bl	800d5d8 <tcp_accept>
  }
}
 8009e26:	bf00      	nop
 8009e28:	3710      	adds	r7, #16
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	bd80      	pop	{r7, pc}
 8009e2e:	bf00      	nop
 8009e30:	0801a1c4 	.word	0x0801a1c4
 8009e34:	08016030 	.word	0x08016030
 8009e38:	08016208 	.word	0x08016208
 8009e3c:	08016078 	.word	0x08016078
 8009e40:	08016224 	.word	0x08016224
 8009e44:	08009d39 	.word	0x08009d39

08009e48 <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b082      	sub	sp, #8
 8009e4c:	af00      	add	r7, sp, #0
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 8009e4e:	202e      	movs	r0, #46	; 0x2e
 8009e50:	f003 fb3c 	bl	800d4cc <tcp_new_ip_type>
 8009e54:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d106      	bne.n	8009e6a <httpd_init+0x22>
 8009e5c:	4b07      	ldr	r3, [pc, #28]	; (8009e7c <httpd_init+0x34>)
 8009e5e:	f640 2272 	movw	r2, #2674	; 0xa72
 8009e62:	4907      	ldr	r1, [pc, #28]	; (8009e80 <httpd_init+0x38>)
 8009e64:	4807      	ldr	r0, [pc, #28]	; (8009e84 <httpd_init+0x3c>)
 8009e66:	f00a fe29 	bl	8014abc <iprintf>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 8009e6a:	2150      	movs	r1, #80	; 0x50
 8009e6c:	6878      	ldr	r0, [r7, #4]
 8009e6e:	f7ff ffa7 	bl	8009dc0 <httpd_init_pcb>
}
 8009e72:	bf00      	nop
 8009e74:	3708      	adds	r7, #8
 8009e76:	46bd      	mov	sp, r7
 8009e78:	bd80      	pop	{r7, pc}
 8009e7a:	bf00      	nop
 8009e7c:	08016030 	.word	0x08016030
 8009e80:	08016244 	.word	0x08016244
 8009e84:	08016078 	.word	0x08016078

08009e88 <http_set_ssi_handler>:
 * @param tags an array of SSI tag strings to search for in SSI-enabled files
 * @param num_tags number of tags in the 'tags' array
 */
void
http_set_ssi_handler(tSSIHandler ssi_handler, const char **tags, int num_tags)
{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b084      	sub	sp, #16
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	60f8      	str	r0, [r7, #12]
 8009e90:	60b9      	str	r1, [r7, #8]
 8009e92:	607a      	str	r2, [r7, #4]
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_set_ssi_handler\n"));

  LWIP_ASSERT("no ssi_handler given", ssi_handler != NULL);
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d106      	bne.n	8009ea8 <http_set_ssi_handler+0x20>
 8009e9a:	4b14      	ldr	r3, [pc, #80]	; (8009eec <http_set_ssi_handler+0x64>)
 8009e9c:	f640 2297 	movw	r2, #2711	; 0xa97
 8009ea0:	4913      	ldr	r1, [pc, #76]	; (8009ef0 <http_set_ssi_handler+0x68>)
 8009ea2:	4814      	ldr	r0, [pc, #80]	; (8009ef4 <http_set_ssi_handler+0x6c>)
 8009ea4:	f00a fe0a 	bl	8014abc <iprintf>
  httpd_ssi_handler = ssi_handler;
 8009ea8:	4a13      	ldr	r2, [pc, #76]	; (8009ef8 <http_set_ssi_handler+0x70>)
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	6013      	str	r3, [r2, #0]

#if LWIP_HTTPD_SSI_RAW
  LWIP_UNUSED_ARG(tags);
  LWIP_UNUSED_ARG(num_tags);
#else /* LWIP_HTTPD_SSI_RAW */
  LWIP_ASSERT("no tags given", tags != NULL);
 8009eae:	68bb      	ldr	r3, [r7, #8]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d106      	bne.n	8009ec2 <http_set_ssi_handler+0x3a>
 8009eb4:	4b0d      	ldr	r3, [pc, #52]	; (8009eec <http_set_ssi_handler+0x64>)
 8009eb6:	f640 229e 	movw	r2, #2718	; 0xa9e
 8009eba:	4910      	ldr	r1, [pc, #64]	; (8009efc <http_set_ssi_handler+0x74>)
 8009ebc:	480d      	ldr	r0, [pc, #52]	; (8009ef4 <http_set_ssi_handler+0x6c>)
 8009ebe:	f00a fdfd 	bl	8014abc <iprintf>
  LWIP_ASSERT("invalid number of tags", num_tags > 0);
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	dc06      	bgt.n	8009ed6 <http_set_ssi_handler+0x4e>
 8009ec8:	4b08      	ldr	r3, [pc, #32]	; (8009eec <http_set_ssi_handler+0x64>)
 8009eca:	f640 229f 	movw	r2, #2719	; 0xa9f
 8009ece:	490c      	ldr	r1, [pc, #48]	; (8009f00 <http_set_ssi_handler+0x78>)
 8009ed0:	4808      	ldr	r0, [pc, #32]	; (8009ef4 <http_set_ssi_handler+0x6c>)
 8009ed2:	f00a fdf3 	bl	8014abc <iprintf>

  httpd_tags = tags;
 8009ed6:	4a0b      	ldr	r2, [pc, #44]	; (8009f04 <http_set_ssi_handler+0x7c>)
 8009ed8:	68bb      	ldr	r3, [r7, #8]
 8009eda:	6013      	str	r3, [r2, #0]
  httpd_num_tags = num_tags;
 8009edc:	4a0a      	ldr	r2, [pc, #40]	; (8009f08 <http_set_ssi_handler+0x80>)
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	6013      	str	r3, [r2, #0]
#endif /* !LWIP_HTTPD_SSI_RAW */
}
 8009ee2:	bf00      	nop
 8009ee4:	3710      	adds	r7, #16
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	bd80      	pop	{r7, pc}
 8009eea:	bf00      	nop
 8009eec:	08016030 	.word	0x08016030
 8009ef0:	08016260 	.word	0x08016260
 8009ef4:	08016078 	.word	0x08016078
 8009ef8:	2400050c 	.word	0x2400050c
 8009efc:	08016278 	.word	0x08016278
 8009f00:	08016288 	.word	0x08016288
 8009f04:	24000514 	.word	0x24000514
 8009f08:	24000510 	.word	0x24000510

08009f0c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8009f0c:	b480      	push	{r7}
 8009f0e:	b083      	sub	sp, #12
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	4603      	mov	r3, r0
 8009f14:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8009f16:	88fb      	ldrh	r3, [r7, #6]
 8009f18:	021b      	lsls	r3, r3, #8
 8009f1a:	b21a      	sxth	r2, r3
 8009f1c:	88fb      	ldrh	r3, [r7, #6]
 8009f1e:	0a1b      	lsrs	r3, r3, #8
 8009f20:	b29b      	uxth	r3, r3
 8009f22:	b21b      	sxth	r3, r3
 8009f24:	4313      	orrs	r3, r2
 8009f26:	b21b      	sxth	r3, r3
 8009f28:	b29b      	uxth	r3, r3
}
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	370c      	adds	r7, #12
 8009f2e:	46bd      	mov	sp, r7
 8009f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f34:	4770      	bx	lr

08009f36 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8009f36:	b480      	push	{r7}
 8009f38:	b083      	sub	sp, #12
 8009f3a:	af00      	add	r7, sp, #0
 8009f3c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	061a      	lsls	r2, r3, #24
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	021b      	lsls	r3, r3, #8
 8009f46:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009f4a:	431a      	orrs	r2, r3
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	0a1b      	lsrs	r3, r3, #8
 8009f50:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009f54:	431a      	orrs	r2, r3
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	0e1b      	lsrs	r3, r3, #24
 8009f5a:	4313      	orrs	r3, r2
}
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	370c      	adds	r7, #12
 8009f60:	46bd      	mov	sp, r7
 8009f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f66:	4770      	bx	lr

08009f68 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b086      	sub	sp, #24
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	60f8      	str	r0, [r7, #12]
 8009f70:	60b9      	str	r1, [r7, #8]
 8009f72:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t tokenlen = strlen(token);
 8009f74:	68b8      	ldr	r0, [r7, #8]
 8009f76:	f7f6 f9bd 	bl	80002f4 <strlen>
 8009f7a:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 8009f7c:	693b      	ldr	r3, [r7, #16]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d101      	bne.n	8009f86 <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	e022      	b.n	8009fcc <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	617b      	str	r3, [r7, #20]
 8009f8a:	e012      	b.n	8009fb2 <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 8009f8c:	697b      	ldr	r3, [r7, #20]
 8009f8e:	781a      	ldrb	r2, [r3, #0]
 8009f90:	68bb      	ldr	r3, [r7, #8]
 8009f92:	781b      	ldrb	r3, [r3, #0]
 8009f94:	429a      	cmp	r2, r3
 8009f96:	d109      	bne.n	8009fac <lwip_strnstr+0x44>
 8009f98:	693a      	ldr	r2, [r7, #16]
 8009f9a:	68b9      	ldr	r1, [r7, #8]
 8009f9c:	6978      	ldr	r0, [r7, #20]
 8009f9e:	f00a fe1a 	bl	8014bd6 <strncmp>
 8009fa2:	4603      	mov	r3, r0
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d101      	bne.n	8009fac <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 8009fa8:	697b      	ldr	r3, [r7, #20]
 8009faa:	e00f      	b.n	8009fcc <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 8009fac:	697b      	ldr	r3, [r7, #20]
 8009fae:	3301      	adds	r3, #1
 8009fb0:	617b      	str	r3, [r7, #20]
 8009fb2:	697b      	ldr	r3, [r7, #20]
 8009fb4:	781b      	ldrb	r3, [r3, #0]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d007      	beq.n	8009fca <lwip_strnstr+0x62>
 8009fba:	697a      	ldr	r2, [r7, #20]
 8009fbc:	693b      	ldr	r3, [r7, #16]
 8009fbe:	441a      	add	r2, r3
 8009fc0:	68f9      	ldr	r1, [r7, #12]
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	440b      	add	r3, r1
 8009fc6:	429a      	cmp	r2, r3
 8009fc8:	d9e0      	bls.n	8009f8c <lwip_strnstr+0x24>
    }
  }
  return NULL;
 8009fca:	2300      	movs	r3, #0
}
 8009fcc:	4618      	mov	r0, r3
 8009fce:	3718      	adds	r7, #24
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	bd80      	pop	{r7, pc}

08009fd4 <lwip_stricmp>:
 * lwIP default implementation for stricmp() non-standard function.
 * This can be \#defined to stricmp() depending on your platform port.
 */
int
lwip_stricmp(const char *str1, const char *str2)
{
 8009fd4:	b480      	push	{r7}
 8009fd6:	b085      	sub	sp, #20
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
 8009fdc:	6039      	str	r1, [r7, #0]
  char c1, c2;

  do {
    c1 = *str1++;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	1c5a      	adds	r2, r3, #1
 8009fe2:	607a      	str	r2, [r7, #4]
 8009fe4:	781b      	ldrb	r3, [r3, #0]
 8009fe6:	73fb      	strb	r3, [r7, #15]
    c2 = *str2++;
 8009fe8:	683b      	ldr	r3, [r7, #0]
 8009fea:	1c5a      	adds	r2, r3, #1
 8009fec:	603a      	str	r2, [r7, #0]
 8009fee:	781b      	ldrb	r3, [r3, #0]
 8009ff0:	73bb      	strb	r3, [r7, #14]
    if (c1 != c2) {
 8009ff2:	7bfa      	ldrb	r2, [r7, #15]
 8009ff4:	7bbb      	ldrb	r3, [r7, #14]
 8009ff6:	429a      	cmp	r2, r3
 8009ff8:	d016      	beq.n	800a028 <lwip_stricmp+0x54>
      char c1_upc = c1 | 0x20;
 8009ffa:	7bfb      	ldrb	r3, [r7, #15]
 8009ffc:	f043 0320 	orr.w	r3, r3, #32
 800a000:	737b      	strb	r3, [r7, #13]
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 800a002:	7b7b      	ldrb	r3, [r7, #13]
 800a004:	2b60      	cmp	r3, #96	; 0x60
 800a006:	d90c      	bls.n	800a022 <lwip_stricmp+0x4e>
 800a008:	7b7b      	ldrb	r3, [r7, #13]
 800a00a:	2b7a      	cmp	r3, #122	; 0x7a
 800a00c:	d809      	bhi.n	800a022 <lwip_stricmp+0x4e>
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
 800a00e:	7bbb      	ldrb	r3, [r7, #14]
 800a010:	f043 0320 	orr.w	r3, r3, #32
 800a014:	733b      	strb	r3, [r7, #12]
        if (c1_upc != c2_upc) {
 800a016:	7b7a      	ldrb	r2, [r7, #13]
 800a018:	7b3b      	ldrb	r3, [r7, #12]
 800a01a:	429a      	cmp	r2, r3
 800a01c:	d003      	beq.n	800a026 <lwip_stricmp+0x52>
          /* still not equal */
          /* don't care for < or > */
          return 1;
 800a01e:	2301      	movs	r3, #1
 800a020:	e006      	b.n	800a030 <lwip_stricmp+0x5c>
        }
      } else {
        /* characters are not equal but none is in the alphabet range */
        return 1;
 800a022:	2301      	movs	r3, #1
 800a024:	e004      	b.n	800a030 <lwip_stricmp+0x5c>
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 800a026:	bf00      	nop
      }
    }
  } while (c1 != 0);
 800a028:	7bfb      	ldrb	r3, [r7, #15]
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d1d7      	bne.n	8009fde <lwip_stricmp+0xa>
  return 0;
 800a02e:	2300      	movs	r3, #0
}
 800a030:	4618      	mov	r0, r3
 800a032:	3714      	adds	r7, #20
 800a034:	46bd      	mov	sp, r7
 800a036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03a:	4770      	bx	lr

0800a03c <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800a03c:	b480      	push	{r7}
 800a03e:	b089      	sub	sp, #36	; 0x24
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
 800a044:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800a04a:	2300      	movs	r3, #0
 800a04c:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800a04e:	2300      	movs	r3, #0
 800a050:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800a052:	69fb      	ldr	r3, [r7, #28]
 800a054:	f003 0301 	and.w	r3, r3, #1
 800a058:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800a05a:	693b      	ldr	r3, [r7, #16]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d00d      	beq.n	800a07c <lwip_standard_chksum+0x40>
 800a060:	683b      	ldr	r3, [r7, #0]
 800a062:	2b00      	cmp	r3, #0
 800a064:	dd0a      	ble.n	800a07c <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800a066:	69fa      	ldr	r2, [r7, #28]
 800a068:	1c53      	adds	r3, r2, #1
 800a06a:	61fb      	str	r3, [r7, #28]
 800a06c:	f107 030e 	add.w	r3, r7, #14
 800a070:	3301      	adds	r3, #1
 800a072:	7812      	ldrb	r2, [r2, #0]
 800a074:	701a      	strb	r2, [r3, #0]
    len--;
 800a076:	683b      	ldr	r3, [r7, #0]
 800a078:	3b01      	subs	r3, #1
 800a07a:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 800a07c:	69fb      	ldr	r3, [r7, #28]
 800a07e:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800a080:	e00a      	b.n	800a098 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800a082:	69bb      	ldr	r3, [r7, #24]
 800a084:	1c9a      	adds	r2, r3, #2
 800a086:	61ba      	str	r2, [r7, #24]
 800a088:	881b      	ldrh	r3, [r3, #0]
 800a08a:	461a      	mov	r2, r3
 800a08c:	697b      	ldr	r3, [r7, #20]
 800a08e:	4413      	add	r3, r2
 800a090:	617b      	str	r3, [r7, #20]
    len -= 2;
 800a092:	683b      	ldr	r3, [r7, #0]
 800a094:	3b02      	subs	r3, #2
 800a096:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 800a098:	683b      	ldr	r3, [r7, #0]
 800a09a:	2b01      	cmp	r3, #1
 800a09c:	dcf1      	bgt.n	800a082 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800a09e:	683b      	ldr	r3, [r7, #0]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	dd04      	ble.n	800a0ae <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800a0a4:	f107 030e 	add.w	r3, r7, #14
 800a0a8:	69ba      	ldr	r2, [r7, #24]
 800a0aa:	7812      	ldrb	r2, [r2, #0]
 800a0ac:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800a0ae:	89fb      	ldrh	r3, [r7, #14]
 800a0b0:	461a      	mov	r2, r3
 800a0b2:	697b      	ldr	r3, [r7, #20]
 800a0b4:	4413      	add	r3, r2
 800a0b6:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800a0b8:	697b      	ldr	r3, [r7, #20]
 800a0ba:	0c1a      	lsrs	r2, r3, #16
 800a0bc:	697b      	ldr	r3, [r7, #20]
 800a0be:	b29b      	uxth	r3, r3
 800a0c0:	4413      	add	r3, r2
 800a0c2:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 800a0c4:	697b      	ldr	r3, [r7, #20]
 800a0c6:	0c1a      	lsrs	r2, r3, #16
 800a0c8:	697b      	ldr	r3, [r7, #20]
 800a0ca:	b29b      	uxth	r3, r3
 800a0cc:	4413      	add	r3, r2
 800a0ce:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800a0d0:	693b      	ldr	r3, [r7, #16]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d007      	beq.n	800a0e6 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800a0d6:	697b      	ldr	r3, [r7, #20]
 800a0d8:	021b      	lsls	r3, r3, #8
 800a0da:	b29a      	uxth	r2, r3
 800a0dc:	697b      	ldr	r3, [r7, #20]
 800a0de:	0a1b      	lsrs	r3, r3, #8
 800a0e0:	b2db      	uxtb	r3, r3
 800a0e2:	4313      	orrs	r3, r2
 800a0e4:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800a0e6:	697b      	ldr	r3, [r7, #20]
 800a0e8:	b29b      	uxth	r3, r3
}
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	3724      	adds	r7, #36	; 0x24
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f4:	4770      	bx	lr

0800a0f6 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 800a0f6:	b580      	push	{r7, lr}
 800a0f8:	b082      	sub	sp, #8
 800a0fa:	af00      	add	r7, sp, #0
 800a0fc:	6078      	str	r0, [r7, #4]
 800a0fe:	460b      	mov	r3, r1
 800a100:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800a102:	887b      	ldrh	r3, [r7, #2]
 800a104:	4619      	mov	r1, r3
 800a106:	6878      	ldr	r0, [r7, #4]
 800a108:	f7ff ff98 	bl	800a03c <lwip_standard_chksum>
 800a10c:	4603      	mov	r3, r0
 800a10e:	43db      	mvns	r3, r3
 800a110:	b29b      	uxth	r3, r3
}
 800a112:	4618      	mov	r0, r3
 800a114:	3708      	adds	r7, #8
 800a116:	46bd      	mov	sp, r7
 800a118:	bd80      	pop	{r7, pc}

0800a11a <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 800a11a:	b580      	push	{r7, lr}
 800a11c:	b086      	sub	sp, #24
 800a11e:	af00      	add	r7, sp, #0
 800a120:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 800a122:	2300      	movs	r3, #0
 800a124:	60fb      	str	r3, [r7, #12]

  acc = 0;
 800a126:	2300      	movs	r3, #0
 800a128:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	613b      	str	r3, [r7, #16]
 800a12e:	e02b      	b.n	800a188 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 800a130:	693b      	ldr	r3, [r7, #16]
 800a132:	685a      	ldr	r2, [r3, #4]
 800a134:	693b      	ldr	r3, [r7, #16]
 800a136:	895b      	ldrh	r3, [r3, #10]
 800a138:	4619      	mov	r1, r3
 800a13a:	4610      	mov	r0, r2
 800a13c:	f7ff ff7e 	bl	800a03c <lwip_standard_chksum>
 800a140:	4603      	mov	r3, r0
 800a142:	461a      	mov	r2, r3
 800a144:	697b      	ldr	r3, [r7, #20]
 800a146:	4413      	add	r3, r2
 800a148:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 800a14a:	697b      	ldr	r3, [r7, #20]
 800a14c:	0c1a      	lsrs	r2, r3, #16
 800a14e:	697b      	ldr	r3, [r7, #20]
 800a150:	b29b      	uxth	r3, r3
 800a152:	4413      	add	r3, r2
 800a154:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 800a156:	693b      	ldr	r3, [r7, #16]
 800a158:	895b      	ldrh	r3, [r3, #10]
 800a15a:	f003 0301 	and.w	r3, r3, #1
 800a15e:	b29b      	uxth	r3, r3
 800a160:	2b00      	cmp	r3, #0
 800a162:	d00e      	beq.n	800a182 <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	2b00      	cmp	r3, #0
 800a168:	bf0c      	ite	eq
 800a16a:	2301      	moveq	r3, #1
 800a16c:	2300      	movne	r3, #0
 800a16e:	b2db      	uxtb	r3, r3
 800a170:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 800a172:	697b      	ldr	r3, [r7, #20]
 800a174:	021b      	lsls	r3, r3, #8
 800a176:	b29a      	uxth	r2, r3
 800a178:	697b      	ldr	r3, [r7, #20]
 800a17a:	0a1b      	lsrs	r3, r3, #8
 800a17c:	b2db      	uxtb	r3, r3
 800a17e:	4313      	orrs	r3, r2
 800a180:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800a182:	693b      	ldr	r3, [r7, #16]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	613b      	str	r3, [r7, #16]
 800a188:	693b      	ldr	r3, [r7, #16]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d1d0      	bne.n	800a130 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d007      	beq.n	800a1a4 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 800a194:	697b      	ldr	r3, [r7, #20]
 800a196:	021b      	lsls	r3, r3, #8
 800a198:	b29a      	uxth	r2, r3
 800a19a:	697b      	ldr	r3, [r7, #20]
 800a19c:	0a1b      	lsrs	r3, r3, #8
 800a19e:	b2db      	uxtb	r3, r3
 800a1a0:	4313      	orrs	r3, r2
 800a1a2:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 800a1a4:	697b      	ldr	r3, [r7, #20]
 800a1a6:	b29b      	uxth	r3, r3
 800a1a8:	43db      	mvns	r3, r3
 800a1aa:	b29b      	uxth	r3, r3
}
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	3718      	adds	r7, #24
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	bd80      	pop	{r7, pc}

0800a1b4 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	b082      	sub	sp, #8
 800a1b8:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800a1be:	f000 f8d9 	bl	800a374 <mem_init>
  memp_init();
 800a1c2:	f000 fbe7 	bl	800a994 <memp_init>
  pbuf_init();
  netif_init();
 800a1c6:	f000 fce5 	bl	800ab94 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800a1ca:	f007 ff75 	bl	80120b8 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800a1ce:	f001 fdcb 	bl	800bd68 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800a1d2:	f007 fee7 	bl	8011fa4 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800a1d6:	bf00      	nop
 800a1d8:	3708      	adds	r7, #8
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	bd80      	pop	{r7, pc}
	...

0800a1e0 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800a1e0:	b480      	push	{r7}
 800a1e2:	b083      	sub	sp, #12
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	4603      	mov	r3, r0
 800a1e8:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800a1ea:	4b05      	ldr	r3, [pc, #20]	; (800a200 <ptr_to_mem+0x20>)
 800a1ec:	681a      	ldr	r2, [r3, #0]
 800a1ee:	88fb      	ldrh	r3, [r7, #6]
 800a1f0:	4413      	add	r3, r2
}
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	370c      	adds	r7, #12
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fc:	4770      	bx	lr
 800a1fe:	bf00      	nop
 800a200:	24000524 	.word	0x24000524

0800a204 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800a204:	b480      	push	{r7}
 800a206:	b083      	sub	sp, #12
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800a20c:	4b05      	ldr	r3, [pc, #20]	; (800a224 <mem_to_ptr+0x20>)
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	687a      	ldr	r2, [r7, #4]
 800a212:	1ad3      	subs	r3, r2, r3
 800a214:	b29b      	uxth	r3, r3
}
 800a216:	4618      	mov	r0, r3
 800a218:	370c      	adds	r7, #12
 800a21a:	46bd      	mov	sp, r7
 800a21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a220:	4770      	bx	lr
 800a222:	bf00      	nop
 800a224:	24000524 	.word	0x24000524

0800a228 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800a228:	b590      	push	{r4, r7, lr}
 800a22a:	b085      	sub	sp, #20
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800a230:	4b47      	ldr	r3, [pc, #284]	; (800a350 <plug_holes+0x128>)
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	687a      	ldr	r2, [r7, #4]
 800a236:	429a      	cmp	r2, r3
 800a238:	d206      	bcs.n	800a248 <plug_holes+0x20>
 800a23a:	4b46      	ldr	r3, [pc, #280]	; (800a354 <plug_holes+0x12c>)
 800a23c:	f240 12df 	movw	r2, #479	; 0x1df
 800a240:	4945      	ldr	r1, [pc, #276]	; (800a358 <plug_holes+0x130>)
 800a242:	4846      	ldr	r0, [pc, #280]	; (800a35c <plug_holes+0x134>)
 800a244:	f00a fc3a 	bl	8014abc <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800a248:	4b45      	ldr	r3, [pc, #276]	; (800a360 <plug_holes+0x138>)
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	687a      	ldr	r2, [r7, #4]
 800a24e:	429a      	cmp	r2, r3
 800a250:	d306      	bcc.n	800a260 <plug_holes+0x38>
 800a252:	4b40      	ldr	r3, [pc, #256]	; (800a354 <plug_holes+0x12c>)
 800a254:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800a258:	4942      	ldr	r1, [pc, #264]	; (800a364 <plug_holes+0x13c>)
 800a25a:	4840      	ldr	r0, [pc, #256]	; (800a35c <plug_holes+0x134>)
 800a25c:	f00a fc2e 	bl	8014abc <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	791b      	ldrb	r3, [r3, #4]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d006      	beq.n	800a276 <plug_holes+0x4e>
 800a268:	4b3a      	ldr	r3, [pc, #232]	; (800a354 <plug_holes+0x12c>)
 800a26a:	f240 12e1 	movw	r2, #481	; 0x1e1
 800a26e:	493e      	ldr	r1, [pc, #248]	; (800a368 <plug_holes+0x140>)
 800a270:	483a      	ldr	r0, [pc, #232]	; (800a35c <plug_holes+0x134>)
 800a272:	f00a fc23 	bl	8014abc <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	881b      	ldrh	r3, [r3, #0]
 800a27a:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800a27e:	4293      	cmp	r3, r2
 800a280:	d906      	bls.n	800a290 <plug_holes+0x68>
 800a282:	4b34      	ldr	r3, [pc, #208]	; (800a354 <plug_holes+0x12c>)
 800a284:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800a288:	4938      	ldr	r1, [pc, #224]	; (800a36c <plug_holes+0x144>)
 800a28a:	4834      	ldr	r0, [pc, #208]	; (800a35c <plug_holes+0x134>)
 800a28c:	f00a fc16 	bl	8014abc <iprintf>

  nmem = ptr_to_mem(mem->next);
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	881b      	ldrh	r3, [r3, #0]
 800a294:	4618      	mov	r0, r3
 800a296:	f7ff ffa3 	bl	800a1e0 <ptr_to_mem>
 800a29a:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800a29c:	687a      	ldr	r2, [r7, #4]
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	429a      	cmp	r2, r3
 800a2a2:	d025      	beq.n	800a2f0 <plug_holes+0xc8>
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	791b      	ldrb	r3, [r3, #4]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d121      	bne.n	800a2f0 <plug_holes+0xc8>
 800a2ac:	4b2c      	ldr	r3, [pc, #176]	; (800a360 <plug_holes+0x138>)
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	68fa      	ldr	r2, [r7, #12]
 800a2b2:	429a      	cmp	r2, r3
 800a2b4:	d01c      	beq.n	800a2f0 <plug_holes+0xc8>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800a2b6:	4b2e      	ldr	r3, [pc, #184]	; (800a370 <plug_holes+0x148>)
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	68fa      	ldr	r2, [r7, #12]
 800a2bc:	429a      	cmp	r2, r3
 800a2be:	d102      	bne.n	800a2c6 <plug_holes+0x9e>
      lfree = mem;
 800a2c0:	4a2b      	ldr	r2, [pc, #172]	; (800a370 <plug_holes+0x148>)
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	881a      	ldrh	r2, [r3, #0]
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	881b      	ldrh	r3, [r3, #0]
 800a2d2:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800a2d6:	4293      	cmp	r3, r2
 800a2d8:	d00a      	beq.n	800a2f0 <plug_holes+0xc8>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	881b      	ldrh	r3, [r3, #0]
 800a2de:	4618      	mov	r0, r3
 800a2e0:	f7ff ff7e 	bl	800a1e0 <ptr_to_mem>
 800a2e4:	4604      	mov	r4, r0
 800a2e6:	6878      	ldr	r0, [r7, #4]
 800a2e8:	f7ff ff8c 	bl	800a204 <mem_to_ptr>
 800a2ec:	4603      	mov	r3, r0
 800a2ee:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	885b      	ldrh	r3, [r3, #2]
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	f7ff ff73 	bl	800a1e0 <ptr_to_mem>
 800a2fa:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800a2fc:	68ba      	ldr	r2, [r7, #8]
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	429a      	cmp	r2, r3
 800a302:	d020      	beq.n	800a346 <plug_holes+0x11e>
 800a304:	68bb      	ldr	r3, [r7, #8]
 800a306:	791b      	ldrb	r3, [r3, #4]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d11c      	bne.n	800a346 <plug_holes+0x11e>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800a30c:	4b18      	ldr	r3, [pc, #96]	; (800a370 <plug_holes+0x148>)
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	687a      	ldr	r2, [r7, #4]
 800a312:	429a      	cmp	r2, r3
 800a314:	d102      	bne.n	800a31c <plug_holes+0xf4>
      lfree = pmem;
 800a316:	4a16      	ldr	r2, [pc, #88]	; (800a370 <plug_holes+0x148>)
 800a318:	68bb      	ldr	r3, [r7, #8]
 800a31a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	881a      	ldrh	r2, [r3, #0]
 800a320:	68bb      	ldr	r3, [r7, #8]
 800a322:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	881b      	ldrh	r3, [r3, #0]
 800a328:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800a32c:	4293      	cmp	r3, r2
 800a32e:	d00a      	beq.n	800a346 <plug_holes+0x11e>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	881b      	ldrh	r3, [r3, #0]
 800a334:	4618      	mov	r0, r3
 800a336:	f7ff ff53 	bl	800a1e0 <ptr_to_mem>
 800a33a:	4604      	mov	r4, r0
 800a33c:	68b8      	ldr	r0, [r7, #8]
 800a33e:	f7ff ff61 	bl	800a204 <mem_to_ptr>
 800a342:	4603      	mov	r3, r0
 800a344:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800a346:	bf00      	nop
 800a348:	3714      	adds	r7, #20
 800a34a:	46bd      	mov	sp, r7
 800a34c:	bd90      	pop	{r4, r7, pc}
 800a34e:	bf00      	nop
 800a350:	24000524 	.word	0x24000524
 800a354:	080162cc 	.word	0x080162cc
 800a358:	080162fc 	.word	0x080162fc
 800a35c:	08016314 	.word	0x08016314
 800a360:	24000528 	.word	0x24000528
 800a364:	0801633c 	.word	0x0801633c
 800a368:	08016358 	.word	0x08016358
 800a36c:	08016374 	.word	0x08016374
 800a370:	2400052c 	.word	0x2400052c

0800a374 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800a374:	b580      	push	{r7, lr}
 800a376:	b082      	sub	sp, #8
 800a378:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800a37a:	4b16      	ldr	r3, [pc, #88]	; (800a3d4 <mem_init+0x60>)
 800a37c:	4a16      	ldr	r2, [pc, #88]	; (800a3d8 <mem_init+0x64>)
 800a37e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800a380:	4b14      	ldr	r3, [pc, #80]	; (800a3d4 <mem_init+0x60>)
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800a38c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	2200      	movs	r2, #0
 800a392:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	2200      	movs	r2, #0
 800a398:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800a39a:	f643 70e8 	movw	r0, #16360	; 0x3fe8
 800a39e:	f7ff ff1f 	bl	800a1e0 <ptr_to_mem>
 800a3a2:	4603      	mov	r3, r0
 800a3a4:	4a0d      	ldr	r2, [pc, #52]	; (800a3dc <mem_init+0x68>)
 800a3a6:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800a3a8:	4b0c      	ldr	r3, [pc, #48]	; (800a3dc <mem_init+0x68>)
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	2201      	movs	r2, #1
 800a3ae:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800a3b0:	4b0a      	ldr	r3, [pc, #40]	; (800a3dc <mem_init+0x68>)
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800a3b8:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800a3ba:	4b08      	ldr	r3, [pc, #32]	; (800a3dc <mem_init+0x68>)
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800a3c2:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800a3c4:	4b03      	ldr	r3, [pc, #12]	; (800a3d4 <mem_init+0x60>)
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	4a05      	ldr	r2, [pc, #20]	; (800a3e0 <mem_init+0x6c>)
 800a3ca:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800a3cc:	bf00      	nop
 800a3ce:	3708      	adds	r7, #8
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	bd80      	pop	{r7, pc}
 800a3d4:	24000524 	.word	0x24000524
 800a3d8:	30044000 	.word	0x30044000
 800a3dc:	24000528 	.word	0x24000528
 800a3e0:	2400052c 	.word	0x2400052c

0800a3e4 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b086      	sub	sp, #24
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800a3ec:	6878      	ldr	r0, [r7, #4]
 800a3ee:	f7ff ff09 	bl	800a204 <mem_to_ptr>
 800a3f2:	4603      	mov	r3, r0
 800a3f4:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	881b      	ldrh	r3, [r3, #0]
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	f7ff fef0 	bl	800a1e0 <ptr_to_mem>
 800a400:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	885b      	ldrh	r3, [r3, #2]
 800a406:	4618      	mov	r0, r3
 800a408:	f7ff feea 	bl	800a1e0 <ptr_to_mem>
 800a40c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	881b      	ldrh	r3, [r3, #0]
 800a412:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800a416:	4293      	cmp	r3, r2
 800a418:	d819      	bhi.n	800a44e <mem_link_valid+0x6a>
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	885b      	ldrh	r3, [r3, #2]
 800a41e:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800a422:	4293      	cmp	r3, r2
 800a424:	d813      	bhi.n	800a44e <mem_link_valid+0x6a>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a42a:	8afa      	ldrh	r2, [r7, #22]
 800a42c:	429a      	cmp	r2, r3
 800a42e:	d004      	beq.n	800a43a <mem_link_valid+0x56>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	881b      	ldrh	r3, [r3, #0]
 800a434:	8afa      	ldrh	r2, [r7, #22]
 800a436:	429a      	cmp	r2, r3
 800a438:	d109      	bne.n	800a44e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800a43a:	4b08      	ldr	r3, [pc, #32]	; (800a45c <mem_link_valid+0x78>)
 800a43c:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a43e:	693a      	ldr	r2, [r7, #16]
 800a440:	429a      	cmp	r2, r3
 800a442:	d006      	beq.n	800a452 <mem_link_valid+0x6e>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800a444:	693b      	ldr	r3, [r7, #16]
 800a446:	885b      	ldrh	r3, [r3, #2]
 800a448:	8afa      	ldrh	r2, [r7, #22]
 800a44a:	429a      	cmp	r2, r3
 800a44c:	d001      	beq.n	800a452 <mem_link_valid+0x6e>
    return 0;
 800a44e:	2300      	movs	r3, #0
 800a450:	e000      	b.n	800a454 <mem_link_valid+0x70>
  }
  return 1;
 800a452:	2301      	movs	r3, #1
}
 800a454:	4618      	mov	r0, r3
 800a456:	3718      	adds	r7, #24
 800a458:	46bd      	mov	sp, r7
 800a45a:	bd80      	pop	{r7, pc}
 800a45c:	24000528 	.word	0x24000528

0800a460 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800a460:	b580      	push	{r7, lr}
 800a462:	b084      	sub	sp, #16
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d04c      	beq.n	800a508 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	f003 0303 	and.w	r3, r3, #3
 800a474:	2b00      	cmp	r3, #0
 800a476:	d007      	beq.n	800a488 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800a478:	4b25      	ldr	r3, [pc, #148]	; (800a510 <mem_free+0xb0>)
 800a47a:	f240 2273 	movw	r2, #627	; 0x273
 800a47e:	4925      	ldr	r1, [pc, #148]	; (800a514 <mem_free+0xb4>)
 800a480:	4825      	ldr	r0, [pc, #148]	; (800a518 <mem_free+0xb8>)
 800a482:	f00a fb1b 	bl	8014abc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800a486:	e040      	b.n	800a50a <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	3b08      	subs	r3, #8
 800a48c:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800a48e:	4b23      	ldr	r3, [pc, #140]	; (800a51c <mem_free+0xbc>)
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	68fa      	ldr	r2, [r7, #12]
 800a494:	429a      	cmp	r2, r3
 800a496:	d306      	bcc.n	800a4a6 <mem_free+0x46>
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	f103 020c 	add.w	r2, r3, #12
 800a49e:	4b20      	ldr	r3, [pc, #128]	; (800a520 <mem_free+0xc0>)
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	429a      	cmp	r2, r3
 800a4a4:	d907      	bls.n	800a4b6 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800a4a6:	4b1a      	ldr	r3, [pc, #104]	; (800a510 <mem_free+0xb0>)
 800a4a8:	f240 227f 	movw	r2, #639	; 0x27f
 800a4ac:	491d      	ldr	r1, [pc, #116]	; (800a524 <mem_free+0xc4>)
 800a4ae:	481a      	ldr	r0, [pc, #104]	; (800a518 <mem_free+0xb8>)
 800a4b0:	f00a fb04 	bl	8014abc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800a4b4:	e029      	b.n	800a50a <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	791b      	ldrb	r3, [r3, #4]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d107      	bne.n	800a4ce <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800a4be:	4b14      	ldr	r3, [pc, #80]	; (800a510 <mem_free+0xb0>)
 800a4c0:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800a4c4:	4918      	ldr	r1, [pc, #96]	; (800a528 <mem_free+0xc8>)
 800a4c6:	4814      	ldr	r0, [pc, #80]	; (800a518 <mem_free+0xb8>)
 800a4c8:	f00a faf8 	bl	8014abc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800a4cc:	e01d      	b.n	800a50a <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800a4ce:	68f8      	ldr	r0, [r7, #12]
 800a4d0:	f7ff ff88 	bl	800a3e4 <mem_link_valid>
 800a4d4:	4603      	mov	r3, r0
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d107      	bne.n	800a4ea <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800a4da:	4b0d      	ldr	r3, [pc, #52]	; (800a510 <mem_free+0xb0>)
 800a4dc:	f240 2295 	movw	r2, #661	; 0x295
 800a4e0:	4912      	ldr	r1, [pc, #72]	; (800a52c <mem_free+0xcc>)
 800a4e2:	480d      	ldr	r0, [pc, #52]	; (800a518 <mem_free+0xb8>)
 800a4e4:	f00a faea 	bl	8014abc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800a4e8:	e00f      	b.n	800a50a <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	2200      	movs	r2, #0
 800a4ee:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800a4f0:	4b0f      	ldr	r3, [pc, #60]	; (800a530 <mem_free+0xd0>)
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	68fa      	ldr	r2, [r7, #12]
 800a4f6:	429a      	cmp	r2, r3
 800a4f8:	d202      	bcs.n	800a500 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800a4fa:	4a0d      	ldr	r2, [pc, #52]	; (800a530 <mem_free+0xd0>)
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800a500:	68f8      	ldr	r0, [r7, #12]
 800a502:	f7ff fe91 	bl	800a228 <plug_holes>
 800a506:	e000      	b.n	800a50a <mem_free+0xaa>
    return;
 800a508:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800a50a:	3710      	adds	r7, #16
 800a50c:	46bd      	mov	sp, r7
 800a50e:	bd80      	pop	{r7, pc}
 800a510:	080162cc 	.word	0x080162cc
 800a514:	080163a0 	.word	0x080163a0
 800a518:	08016314 	.word	0x08016314
 800a51c:	24000524 	.word	0x24000524
 800a520:	24000528 	.word	0x24000528
 800a524:	080163c4 	.word	0x080163c4
 800a528:	080163e0 	.word	0x080163e0
 800a52c:	08016408 	.word	0x08016408
 800a530:	2400052c 	.word	0x2400052c

0800a534 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800a534:	b580      	push	{r7, lr}
 800a536:	b088      	sub	sp, #32
 800a538:	af00      	add	r7, sp, #0
 800a53a:	6078      	str	r0, [r7, #4]
 800a53c:	460b      	mov	r3, r1
 800a53e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800a540:	887b      	ldrh	r3, [r7, #2]
 800a542:	3303      	adds	r3, #3
 800a544:	b29b      	uxth	r3, r3
 800a546:	f023 0303 	bic.w	r3, r3, #3
 800a54a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800a54c:	8bfb      	ldrh	r3, [r7, #30]
 800a54e:	2b0b      	cmp	r3, #11
 800a550:	d801      	bhi.n	800a556 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800a552:	230c      	movs	r3, #12
 800a554:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800a556:	8bfb      	ldrh	r3, [r7, #30]
 800a558:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800a55c:	4293      	cmp	r3, r2
 800a55e:	d803      	bhi.n	800a568 <mem_trim+0x34>
 800a560:	8bfa      	ldrh	r2, [r7, #30]
 800a562:	887b      	ldrh	r3, [r7, #2]
 800a564:	429a      	cmp	r2, r3
 800a566:	d201      	bcs.n	800a56c <mem_trim+0x38>
    return NULL;
 800a568:	2300      	movs	r3, #0
 800a56a:	e0d0      	b.n	800a70e <mem_trim+0x1da>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800a56c:	4b6a      	ldr	r3, [pc, #424]	; (800a718 <mem_trim+0x1e4>)
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	687a      	ldr	r2, [r7, #4]
 800a572:	429a      	cmp	r2, r3
 800a574:	d304      	bcc.n	800a580 <mem_trim+0x4c>
 800a576:	4b69      	ldr	r3, [pc, #420]	; (800a71c <mem_trim+0x1e8>)
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	687a      	ldr	r2, [r7, #4]
 800a57c:	429a      	cmp	r2, r3
 800a57e:	d306      	bcc.n	800a58e <mem_trim+0x5a>
 800a580:	4b67      	ldr	r3, [pc, #412]	; (800a720 <mem_trim+0x1ec>)
 800a582:	f240 22d1 	movw	r2, #721	; 0x2d1
 800a586:	4967      	ldr	r1, [pc, #412]	; (800a724 <mem_trim+0x1f0>)
 800a588:	4867      	ldr	r0, [pc, #412]	; (800a728 <mem_trim+0x1f4>)
 800a58a:	f00a fa97 	bl	8014abc <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800a58e:	4b62      	ldr	r3, [pc, #392]	; (800a718 <mem_trim+0x1e4>)
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	687a      	ldr	r2, [r7, #4]
 800a594:	429a      	cmp	r2, r3
 800a596:	d304      	bcc.n	800a5a2 <mem_trim+0x6e>
 800a598:	4b60      	ldr	r3, [pc, #384]	; (800a71c <mem_trim+0x1e8>)
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	687a      	ldr	r2, [r7, #4]
 800a59e:	429a      	cmp	r2, r3
 800a5a0:	d301      	bcc.n	800a5a6 <mem_trim+0x72>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	e0b3      	b.n	800a70e <mem_trim+0x1da>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	3b08      	subs	r3, #8
 800a5aa:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800a5ac:	69b8      	ldr	r0, [r7, #24]
 800a5ae:	f7ff fe29 	bl	800a204 <mem_to_ptr>
 800a5b2:	4603      	mov	r3, r0
 800a5b4:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800a5b6:	69bb      	ldr	r3, [r7, #24]
 800a5b8:	881a      	ldrh	r2, [r3, #0]
 800a5ba:	8afb      	ldrh	r3, [r7, #22]
 800a5bc:	1ad3      	subs	r3, r2, r3
 800a5be:	b29b      	uxth	r3, r3
 800a5c0:	3b08      	subs	r3, #8
 800a5c2:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800a5c4:	8bfa      	ldrh	r2, [r7, #30]
 800a5c6:	8abb      	ldrh	r3, [r7, #20]
 800a5c8:	429a      	cmp	r2, r3
 800a5ca:	d906      	bls.n	800a5da <mem_trim+0xa6>
 800a5cc:	4b54      	ldr	r3, [pc, #336]	; (800a720 <mem_trim+0x1ec>)
 800a5ce:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800a5d2:	4956      	ldr	r1, [pc, #344]	; (800a72c <mem_trim+0x1f8>)
 800a5d4:	4854      	ldr	r0, [pc, #336]	; (800a728 <mem_trim+0x1f4>)
 800a5d6:	f00a fa71 	bl	8014abc <iprintf>
  if (newsize > size) {
 800a5da:	8bfa      	ldrh	r2, [r7, #30]
 800a5dc:	8abb      	ldrh	r3, [r7, #20]
 800a5de:	429a      	cmp	r2, r3
 800a5e0:	d901      	bls.n	800a5e6 <mem_trim+0xb2>
    /* not supported */
    return NULL;
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	e093      	b.n	800a70e <mem_trim+0x1da>
  }
  if (newsize == size) {
 800a5e6:	8bfa      	ldrh	r2, [r7, #30]
 800a5e8:	8abb      	ldrh	r3, [r7, #20]
 800a5ea:	429a      	cmp	r2, r3
 800a5ec:	d101      	bne.n	800a5f2 <mem_trim+0xbe>
    /* No change in size, simply return */
    return rmem;
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	e08d      	b.n	800a70e <mem_trim+0x1da>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800a5f2:	69bb      	ldr	r3, [r7, #24]
 800a5f4:	881b      	ldrh	r3, [r3, #0]
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	f7ff fdf2 	bl	800a1e0 <ptr_to_mem>
 800a5fc:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800a5fe:	693b      	ldr	r3, [r7, #16]
 800a600:	791b      	ldrb	r3, [r3, #4]
 800a602:	2b00      	cmp	r3, #0
 800a604:	d141      	bne.n	800a68a <mem_trim+0x156>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800a606:	69bb      	ldr	r3, [r7, #24]
 800a608:	881b      	ldrh	r3, [r3, #0]
 800a60a:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800a60e:	4293      	cmp	r3, r2
 800a610:	d106      	bne.n	800a620 <mem_trim+0xec>
 800a612:	4b43      	ldr	r3, [pc, #268]	; (800a720 <mem_trim+0x1ec>)
 800a614:	f240 22f5 	movw	r2, #757	; 0x2f5
 800a618:	4945      	ldr	r1, [pc, #276]	; (800a730 <mem_trim+0x1fc>)
 800a61a:	4843      	ldr	r0, [pc, #268]	; (800a728 <mem_trim+0x1f4>)
 800a61c:	f00a fa4e 	bl	8014abc <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800a620:	693b      	ldr	r3, [r7, #16]
 800a622:	881b      	ldrh	r3, [r3, #0]
 800a624:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a626:	8afa      	ldrh	r2, [r7, #22]
 800a628:	8bfb      	ldrh	r3, [r7, #30]
 800a62a:	4413      	add	r3, r2
 800a62c:	b29b      	uxth	r3, r3
 800a62e:	3308      	adds	r3, #8
 800a630:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800a632:	4b40      	ldr	r3, [pc, #256]	; (800a734 <mem_trim+0x200>)
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	693a      	ldr	r2, [r7, #16]
 800a638:	429a      	cmp	r2, r3
 800a63a:	d106      	bne.n	800a64a <mem_trim+0x116>
      lfree = ptr_to_mem(ptr2);
 800a63c:	89fb      	ldrh	r3, [r7, #14]
 800a63e:	4618      	mov	r0, r3
 800a640:	f7ff fdce 	bl	800a1e0 <ptr_to_mem>
 800a644:	4603      	mov	r3, r0
 800a646:	4a3b      	ldr	r2, [pc, #236]	; (800a734 <mem_trim+0x200>)
 800a648:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800a64a:	89fb      	ldrh	r3, [r7, #14]
 800a64c:	4618      	mov	r0, r3
 800a64e:	f7ff fdc7 	bl	800a1e0 <ptr_to_mem>
 800a652:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800a654:	693b      	ldr	r3, [r7, #16]
 800a656:	2200      	movs	r2, #0
 800a658:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800a65a:	693b      	ldr	r3, [r7, #16]
 800a65c:	89ba      	ldrh	r2, [r7, #12]
 800a65e:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800a660:	693b      	ldr	r3, [r7, #16]
 800a662:	8afa      	ldrh	r2, [r7, #22]
 800a664:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800a666:	69bb      	ldr	r3, [r7, #24]
 800a668:	89fa      	ldrh	r2, [r7, #14]
 800a66a:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800a66c:	693b      	ldr	r3, [r7, #16]
 800a66e:	881b      	ldrh	r3, [r3, #0]
 800a670:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800a674:	4293      	cmp	r3, r2
 800a676:	d049      	beq.n	800a70c <mem_trim+0x1d8>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800a678:	693b      	ldr	r3, [r7, #16]
 800a67a:	881b      	ldrh	r3, [r3, #0]
 800a67c:	4618      	mov	r0, r3
 800a67e:	f7ff fdaf 	bl	800a1e0 <ptr_to_mem>
 800a682:	4602      	mov	r2, r0
 800a684:	89fb      	ldrh	r3, [r7, #14]
 800a686:	8053      	strh	r3, [r2, #2]
 800a688:	e040      	b.n	800a70c <mem_trim+0x1d8>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800a68a:	8bfb      	ldrh	r3, [r7, #30]
 800a68c:	f103 0214 	add.w	r2, r3, #20
 800a690:	8abb      	ldrh	r3, [r7, #20]
 800a692:	429a      	cmp	r2, r3
 800a694:	d83a      	bhi.n	800a70c <mem_trim+0x1d8>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a696:	8afa      	ldrh	r2, [r7, #22]
 800a698:	8bfb      	ldrh	r3, [r7, #30]
 800a69a:	4413      	add	r3, r2
 800a69c:	b29b      	uxth	r3, r3
 800a69e:	3308      	adds	r3, #8
 800a6a0:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800a6a2:	69bb      	ldr	r3, [r7, #24]
 800a6a4:	881b      	ldrh	r3, [r3, #0]
 800a6a6:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800a6aa:	4293      	cmp	r3, r2
 800a6ac:	d106      	bne.n	800a6bc <mem_trim+0x188>
 800a6ae:	4b1c      	ldr	r3, [pc, #112]	; (800a720 <mem_trim+0x1ec>)
 800a6b0:	f240 3216 	movw	r2, #790	; 0x316
 800a6b4:	491e      	ldr	r1, [pc, #120]	; (800a730 <mem_trim+0x1fc>)
 800a6b6:	481c      	ldr	r0, [pc, #112]	; (800a728 <mem_trim+0x1f4>)
 800a6b8:	f00a fa00 	bl	8014abc <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800a6bc:	89fb      	ldrh	r3, [r7, #14]
 800a6be:	4618      	mov	r0, r3
 800a6c0:	f7ff fd8e 	bl	800a1e0 <ptr_to_mem>
 800a6c4:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800a6c6:	4b1b      	ldr	r3, [pc, #108]	; (800a734 <mem_trim+0x200>)
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	693a      	ldr	r2, [r7, #16]
 800a6cc:	429a      	cmp	r2, r3
 800a6ce:	d202      	bcs.n	800a6d6 <mem_trim+0x1a2>
      lfree = mem2;
 800a6d0:	4a18      	ldr	r2, [pc, #96]	; (800a734 <mem_trim+0x200>)
 800a6d2:	693b      	ldr	r3, [r7, #16]
 800a6d4:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800a6d6:	693b      	ldr	r3, [r7, #16]
 800a6d8:	2200      	movs	r2, #0
 800a6da:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800a6dc:	69bb      	ldr	r3, [r7, #24]
 800a6de:	881a      	ldrh	r2, [r3, #0]
 800a6e0:	693b      	ldr	r3, [r7, #16]
 800a6e2:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800a6e4:	693b      	ldr	r3, [r7, #16]
 800a6e6:	8afa      	ldrh	r2, [r7, #22]
 800a6e8:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800a6ea:	69bb      	ldr	r3, [r7, #24]
 800a6ec:	89fa      	ldrh	r2, [r7, #14]
 800a6ee:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800a6f0:	693b      	ldr	r3, [r7, #16]
 800a6f2:	881b      	ldrh	r3, [r3, #0]
 800a6f4:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800a6f8:	4293      	cmp	r3, r2
 800a6fa:	d007      	beq.n	800a70c <mem_trim+0x1d8>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800a6fc:	693b      	ldr	r3, [r7, #16]
 800a6fe:	881b      	ldrh	r3, [r3, #0]
 800a700:	4618      	mov	r0, r3
 800a702:	f7ff fd6d 	bl	800a1e0 <ptr_to_mem>
 800a706:	4602      	mov	r2, r0
 800a708:	89fb      	ldrh	r3, [r7, #14]
 800a70a:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800a70c:	687b      	ldr	r3, [r7, #4]
}
 800a70e:	4618      	mov	r0, r3
 800a710:	3720      	adds	r7, #32
 800a712:	46bd      	mov	sp, r7
 800a714:	bd80      	pop	{r7, pc}
 800a716:	bf00      	nop
 800a718:	24000524 	.word	0x24000524
 800a71c:	24000528 	.word	0x24000528
 800a720:	080162cc 	.word	0x080162cc
 800a724:	0801643c 	.word	0x0801643c
 800a728:	08016314 	.word	0x08016314
 800a72c:	08016454 	.word	0x08016454
 800a730:	08016474 	.word	0x08016474
 800a734:	2400052c 	.word	0x2400052c

0800a738 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800a738:	b580      	push	{r7, lr}
 800a73a:	b088      	sub	sp, #32
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	4603      	mov	r3, r0
 800a740:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800a742:	88fb      	ldrh	r3, [r7, #6]
 800a744:	2b00      	cmp	r3, #0
 800a746:	d101      	bne.n	800a74c <mem_malloc+0x14>
    return NULL;
 800a748:	2300      	movs	r3, #0
 800a74a:	e0dd      	b.n	800a908 <mem_malloc+0x1d0>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800a74c:	88fb      	ldrh	r3, [r7, #6]
 800a74e:	3303      	adds	r3, #3
 800a750:	b29b      	uxth	r3, r3
 800a752:	f023 0303 	bic.w	r3, r3, #3
 800a756:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800a758:	8bbb      	ldrh	r3, [r7, #28]
 800a75a:	2b0b      	cmp	r3, #11
 800a75c:	d801      	bhi.n	800a762 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800a75e:	230c      	movs	r3, #12
 800a760:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800a762:	8bbb      	ldrh	r3, [r7, #28]
 800a764:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800a768:	4293      	cmp	r3, r2
 800a76a:	d803      	bhi.n	800a774 <mem_malloc+0x3c>
 800a76c:	8bba      	ldrh	r2, [r7, #28]
 800a76e:	88fb      	ldrh	r3, [r7, #6]
 800a770:	429a      	cmp	r2, r3
 800a772:	d201      	bcs.n	800a778 <mem_malloc+0x40>
    return NULL;
 800a774:	2300      	movs	r3, #0
 800a776:	e0c7      	b.n	800a908 <mem_malloc+0x1d0>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800a778:	4b65      	ldr	r3, [pc, #404]	; (800a910 <mem_malloc+0x1d8>)
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	4618      	mov	r0, r3
 800a77e:	f7ff fd41 	bl	800a204 <mem_to_ptr>
 800a782:	4603      	mov	r3, r0
 800a784:	83fb      	strh	r3, [r7, #30]
 800a786:	e0b6      	b.n	800a8f6 <mem_malloc+0x1be>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800a788:	8bfb      	ldrh	r3, [r7, #30]
 800a78a:	4618      	mov	r0, r3
 800a78c:	f7ff fd28 	bl	800a1e0 <ptr_to_mem>
 800a790:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800a792:	697b      	ldr	r3, [r7, #20]
 800a794:	791b      	ldrb	r3, [r3, #4]
 800a796:	2b00      	cmp	r3, #0
 800a798:	f040 80a6 	bne.w	800a8e8 <mem_malloc+0x1b0>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800a79c:	697b      	ldr	r3, [r7, #20]
 800a79e:	881b      	ldrh	r3, [r3, #0]
 800a7a0:	461a      	mov	r2, r3
 800a7a2:	8bfb      	ldrh	r3, [r7, #30]
 800a7a4:	1ad3      	subs	r3, r2, r3
 800a7a6:	f1a3 0208 	sub.w	r2, r3, #8
 800a7aa:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800a7ac:	429a      	cmp	r2, r3
 800a7ae:	f0c0 809b 	bcc.w	800a8e8 <mem_malloc+0x1b0>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800a7b2:	697b      	ldr	r3, [r7, #20]
 800a7b4:	881b      	ldrh	r3, [r3, #0]
 800a7b6:	461a      	mov	r2, r3
 800a7b8:	8bfb      	ldrh	r3, [r7, #30]
 800a7ba:	1ad3      	subs	r3, r2, r3
 800a7bc:	f1a3 0208 	sub.w	r2, r3, #8
 800a7c0:	8bbb      	ldrh	r3, [r7, #28]
 800a7c2:	3314      	adds	r3, #20
 800a7c4:	429a      	cmp	r2, r3
 800a7c6:	d335      	bcc.n	800a834 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800a7c8:	8bfa      	ldrh	r2, [r7, #30]
 800a7ca:	8bbb      	ldrh	r3, [r7, #28]
 800a7cc:	4413      	add	r3, r2
 800a7ce:	b29b      	uxth	r3, r3
 800a7d0:	3308      	adds	r3, #8
 800a7d2:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800a7d4:	8a7b      	ldrh	r3, [r7, #18]
 800a7d6:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800a7da:	4293      	cmp	r3, r2
 800a7dc:	d106      	bne.n	800a7ec <mem_malloc+0xb4>
 800a7de:	4b4d      	ldr	r3, [pc, #308]	; (800a914 <mem_malloc+0x1dc>)
 800a7e0:	f240 3287 	movw	r2, #903	; 0x387
 800a7e4:	494c      	ldr	r1, [pc, #304]	; (800a918 <mem_malloc+0x1e0>)
 800a7e6:	484d      	ldr	r0, [pc, #308]	; (800a91c <mem_malloc+0x1e4>)
 800a7e8:	f00a f968 	bl	8014abc <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800a7ec:	8a7b      	ldrh	r3, [r7, #18]
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	f7ff fcf6 	bl	800a1e0 <ptr_to_mem>
 800a7f4:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800a7fc:	697b      	ldr	r3, [r7, #20]
 800a7fe:	881a      	ldrh	r2, [r3, #0]
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	8bfa      	ldrh	r2, [r7, #30]
 800a808:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800a80a:	697b      	ldr	r3, [r7, #20]
 800a80c:	8a7a      	ldrh	r2, [r7, #18]
 800a80e:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800a810:	697b      	ldr	r3, [r7, #20]
 800a812:	2201      	movs	r2, #1
 800a814:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	881b      	ldrh	r3, [r3, #0]
 800a81a:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800a81e:	4293      	cmp	r3, r2
 800a820:	d00b      	beq.n	800a83a <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	881b      	ldrh	r3, [r3, #0]
 800a826:	4618      	mov	r0, r3
 800a828:	f7ff fcda 	bl	800a1e0 <ptr_to_mem>
 800a82c:	4602      	mov	r2, r0
 800a82e:	8a7b      	ldrh	r3, [r7, #18]
 800a830:	8053      	strh	r3, [r2, #2]
 800a832:	e002      	b.n	800a83a <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800a834:	697b      	ldr	r3, [r7, #20]
 800a836:	2201      	movs	r2, #1
 800a838:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800a83a:	4b35      	ldr	r3, [pc, #212]	; (800a910 <mem_malloc+0x1d8>)
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	697a      	ldr	r2, [r7, #20]
 800a840:	429a      	cmp	r2, r3
 800a842:	d127      	bne.n	800a894 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800a844:	4b32      	ldr	r3, [pc, #200]	; (800a910 <mem_malloc+0x1d8>)
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800a84a:	e005      	b.n	800a858 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800a84c:	69bb      	ldr	r3, [r7, #24]
 800a84e:	881b      	ldrh	r3, [r3, #0]
 800a850:	4618      	mov	r0, r3
 800a852:	f7ff fcc5 	bl	800a1e0 <ptr_to_mem>
 800a856:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800a858:	69bb      	ldr	r3, [r7, #24]
 800a85a:	791b      	ldrb	r3, [r3, #4]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d004      	beq.n	800a86a <mem_malloc+0x132>
 800a860:	4b2f      	ldr	r3, [pc, #188]	; (800a920 <mem_malloc+0x1e8>)
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	69ba      	ldr	r2, [r7, #24]
 800a866:	429a      	cmp	r2, r3
 800a868:	d1f0      	bne.n	800a84c <mem_malloc+0x114>
          }
          lfree = cur;
 800a86a:	4a29      	ldr	r2, [pc, #164]	; (800a910 <mem_malloc+0x1d8>)
 800a86c:	69bb      	ldr	r3, [r7, #24]
 800a86e:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800a870:	4b27      	ldr	r3, [pc, #156]	; (800a910 <mem_malloc+0x1d8>)
 800a872:	681a      	ldr	r2, [r3, #0]
 800a874:	4b2a      	ldr	r3, [pc, #168]	; (800a920 <mem_malloc+0x1e8>)
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	429a      	cmp	r2, r3
 800a87a:	d00b      	beq.n	800a894 <mem_malloc+0x15c>
 800a87c:	4b24      	ldr	r3, [pc, #144]	; (800a910 <mem_malloc+0x1d8>)
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	791b      	ldrb	r3, [r3, #4]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d006      	beq.n	800a894 <mem_malloc+0x15c>
 800a886:	4b23      	ldr	r3, [pc, #140]	; (800a914 <mem_malloc+0x1dc>)
 800a888:	f240 32b5 	movw	r2, #949	; 0x3b5
 800a88c:	4925      	ldr	r1, [pc, #148]	; (800a924 <mem_malloc+0x1ec>)
 800a88e:	4823      	ldr	r0, [pc, #140]	; (800a91c <mem_malloc+0x1e4>)
 800a890:	f00a f914 	bl	8014abc <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800a894:	8bba      	ldrh	r2, [r7, #28]
 800a896:	697b      	ldr	r3, [r7, #20]
 800a898:	4413      	add	r3, r2
 800a89a:	3308      	adds	r3, #8
 800a89c:	4a20      	ldr	r2, [pc, #128]	; (800a920 <mem_malloc+0x1e8>)
 800a89e:	6812      	ldr	r2, [r2, #0]
 800a8a0:	4293      	cmp	r3, r2
 800a8a2:	d906      	bls.n	800a8b2 <mem_malloc+0x17a>
 800a8a4:	4b1b      	ldr	r3, [pc, #108]	; (800a914 <mem_malloc+0x1dc>)
 800a8a6:	f240 32b9 	movw	r2, #953	; 0x3b9
 800a8aa:	491f      	ldr	r1, [pc, #124]	; (800a928 <mem_malloc+0x1f0>)
 800a8ac:	481b      	ldr	r0, [pc, #108]	; (800a91c <mem_malloc+0x1e4>)
 800a8ae:	f00a f905 	bl	8014abc <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800a8b2:	697b      	ldr	r3, [r7, #20]
 800a8b4:	f003 0303 	and.w	r3, r3, #3
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d006      	beq.n	800a8ca <mem_malloc+0x192>
 800a8bc:	4b15      	ldr	r3, [pc, #84]	; (800a914 <mem_malloc+0x1dc>)
 800a8be:	f240 32bb 	movw	r2, #955	; 0x3bb
 800a8c2:	491a      	ldr	r1, [pc, #104]	; (800a92c <mem_malloc+0x1f4>)
 800a8c4:	4815      	ldr	r0, [pc, #84]	; (800a91c <mem_malloc+0x1e4>)
 800a8c6:	f00a f8f9 	bl	8014abc <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800a8ca:	697b      	ldr	r3, [r7, #20]
 800a8cc:	f003 0303 	and.w	r3, r3, #3
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d006      	beq.n	800a8e2 <mem_malloc+0x1aa>
 800a8d4:	4b0f      	ldr	r3, [pc, #60]	; (800a914 <mem_malloc+0x1dc>)
 800a8d6:	f240 32bd 	movw	r2, #957	; 0x3bd
 800a8da:	4915      	ldr	r1, [pc, #84]	; (800a930 <mem_malloc+0x1f8>)
 800a8dc:	480f      	ldr	r0, [pc, #60]	; (800a91c <mem_malloc+0x1e4>)
 800a8de:	f00a f8ed 	bl	8014abc <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800a8e2:	697b      	ldr	r3, [r7, #20]
 800a8e4:	3308      	adds	r3, #8
 800a8e6:	e00f      	b.n	800a908 <mem_malloc+0x1d0>
         ptr = ptr_to_mem(ptr)->next) {
 800a8e8:	8bfb      	ldrh	r3, [r7, #30]
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	f7ff fc78 	bl	800a1e0 <ptr_to_mem>
 800a8f0:	4603      	mov	r3, r0
 800a8f2:	881b      	ldrh	r3, [r3, #0]
 800a8f4:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800a8f6:	8bfa      	ldrh	r2, [r7, #30]
 800a8f8:	8bb9      	ldrh	r1, [r7, #28]
 800a8fa:	f643 73e8 	movw	r3, #16360	; 0x3fe8
 800a8fe:	1a5b      	subs	r3, r3, r1
 800a900:	429a      	cmp	r2, r3
 800a902:	f4ff af41 	bcc.w	800a788 <mem_malloc+0x50>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800a906:	2300      	movs	r3, #0
}
 800a908:	4618      	mov	r0, r3
 800a90a:	3720      	adds	r7, #32
 800a90c:	46bd      	mov	sp, r7
 800a90e:	bd80      	pop	{r7, pc}
 800a910:	2400052c 	.word	0x2400052c
 800a914:	080162cc 	.word	0x080162cc
 800a918:	08016474 	.word	0x08016474
 800a91c:	08016314 	.word	0x08016314
 800a920:	24000528 	.word	0x24000528
 800a924:	08016488 	.word	0x08016488
 800a928:	080164a4 	.word	0x080164a4
 800a92c:	080164d4 	.word	0x080164d4
 800a930:	08016504 	.word	0x08016504

0800a934 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800a934:	b480      	push	{r7}
 800a936:	b085      	sub	sp, #20
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	689b      	ldr	r3, [r3, #8]
 800a940:	2200      	movs	r2, #0
 800a942:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	685b      	ldr	r3, [r3, #4]
 800a948:	3303      	adds	r3, #3
 800a94a:	f023 0303 	bic.w	r3, r3, #3
 800a94e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800a950:	2300      	movs	r3, #0
 800a952:	60fb      	str	r3, [r7, #12]
 800a954:	e011      	b.n	800a97a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	689b      	ldr	r3, [r3, #8]
 800a95a:	681a      	ldr	r2, [r3, #0]
 800a95c:	68bb      	ldr	r3, [r7, #8]
 800a95e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	689b      	ldr	r3, [r3, #8]
 800a964:	68ba      	ldr	r2, [r7, #8]
 800a966:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	881b      	ldrh	r3, [r3, #0]
 800a96c:	461a      	mov	r2, r3
 800a96e:	68bb      	ldr	r3, [r7, #8]
 800a970:	4413      	add	r3, r2
 800a972:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	3301      	adds	r3, #1
 800a978:	60fb      	str	r3, [r7, #12]
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	885b      	ldrh	r3, [r3, #2]
 800a97e:	461a      	mov	r2, r3
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	4293      	cmp	r3, r2
 800a984:	dbe7      	blt.n	800a956 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800a986:	bf00      	nop
 800a988:	bf00      	nop
 800a98a:	3714      	adds	r7, #20
 800a98c:	46bd      	mov	sp, r7
 800a98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a992:	4770      	bx	lr

0800a994 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800a994:	b580      	push	{r7, lr}
 800a996:	b082      	sub	sp, #8
 800a998:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800a99a:	2300      	movs	r3, #0
 800a99c:	80fb      	strh	r3, [r7, #6]
 800a99e:	e009      	b.n	800a9b4 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800a9a0:	88fb      	ldrh	r3, [r7, #6]
 800a9a2:	4a08      	ldr	r2, [pc, #32]	; (800a9c4 <memp_init+0x30>)
 800a9a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	f7ff ffc3 	bl	800a934 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800a9ae:	88fb      	ldrh	r3, [r7, #6]
 800a9b0:	3301      	adds	r3, #1
 800a9b2:	80fb      	strh	r3, [r7, #6]
 800a9b4:	88fb      	ldrh	r3, [r7, #6]
 800a9b6:	2b08      	cmp	r3, #8
 800a9b8:	d9f2      	bls.n	800a9a0 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800a9ba:	bf00      	nop
 800a9bc:	bf00      	nop
 800a9be:	3708      	adds	r7, #8
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	bd80      	pop	{r7, pc}
 800a9c4:	0801a160 	.word	0x0801a160

0800a9c8 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b084      	sub	sp, #16
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	689b      	ldr	r3, [r3, #8]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d012      	beq.n	800aa04 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	689b      	ldr	r3, [r3, #8]
 800a9e2:	68fa      	ldr	r2, [r7, #12]
 800a9e4:	6812      	ldr	r2, [r2, #0]
 800a9e6:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	f003 0303 	and.w	r3, r3, #3
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d006      	beq.n	800aa00 <do_memp_malloc_pool+0x38>
 800a9f2:	4b07      	ldr	r3, [pc, #28]	; (800aa10 <do_memp_malloc_pool+0x48>)
 800a9f4:	f44f 728c 	mov.w	r2, #280	; 0x118
 800a9f8:	4906      	ldr	r1, [pc, #24]	; (800aa14 <do_memp_malloc_pool+0x4c>)
 800a9fa:	4807      	ldr	r0, [pc, #28]	; (800aa18 <do_memp_malloc_pool+0x50>)
 800a9fc:	f00a f85e 	bl	8014abc <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	e000      	b.n	800aa06 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800aa04:	2300      	movs	r3, #0
}
 800aa06:	4618      	mov	r0, r3
 800aa08:	3710      	adds	r7, #16
 800aa0a:	46bd      	mov	sp, r7
 800aa0c:	bd80      	pop	{r7, pc}
 800aa0e:	bf00      	nop
 800aa10:	08016528 	.word	0x08016528
 800aa14:	08016558 	.word	0x08016558
 800aa18:	0801657c 	.word	0x0801657c

0800aa1c <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	b082      	sub	sp, #8
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d106      	bne.n	800aa38 <memp_malloc_pool+0x1c>
 800aa2a:	4b0a      	ldr	r3, [pc, #40]	; (800aa54 <memp_malloc_pool+0x38>)
 800aa2c:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800aa30:	4909      	ldr	r1, [pc, #36]	; (800aa58 <memp_malloc_pool+0x3c>)
 800aa32:	480a      	ldr	r0, [pc, #40]	; (800aa5c <memp_malloc_pool+0x40>)
 800aa34:	f00a f842 	bl	8014abc <iprintf>
  if (desc == NULL) {
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d101      	bne.n	800aa42 <memp_malloc_pool+0x26>
    return NULL;
 800aa3e:	2300      	movs	r3, #0
 800aa40:	e003      	b.n	800aa4a <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800aa42:	6878      	ldr	r0, [r7, #4]
 800aa44:	f7ff ffc0 	bl	800a9c8 <do_memp_malloc_pool>
 800aa48:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	3708      	adds	r7, #8
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	bd80      	pop	{r7, pc}
 800aa52:	bf00      	nop
 800aa54:	08016528 	.word	0x08016528
 800aa58:	080165a4 	.word	0x080165a4
 800aa5c:	0801657c 	.word	0x0801657c

0800aa60 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800aa60:	b580      	push	{r7, lr}
 800aa62:	b084      	sub	sp, #16
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	4603      	mov	r3, r0
 800aa68:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800aa6a:	79fb      	ldrb	r3, [r7, #7]
 800aa6c:	2b08      	cmp	r3, #8
 800aa6e:	d908      	bls.n	800aa82 <memp_malloc+0x22>
 800aa70:	4b0a      	ldr	r3, [pc, #40]	; (800aa9c <memp_malloc+0x3c>)
 800aa72:	f240 1257 	movw	r2, #343	; 0x157
 800aa76:	490a      	ldr	r1, [pc, #40]	; (800aaa0 <memp_malloc+0x40>)
 800aa78:	480a      	ldr	r0, [pc, #40]	; (800aaa4 <memp_malloc+0x44>)
 800aa7a:	f00a f81f 	bl	8014abc <iprintf>
 800aa7e:	2300      	movs	r3, #0
 800aa80:	e008      	b.n	800aa94 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800aa82:	79fb      	ldrb	r3, [r7, #7]
 800aa84:	4a08      	ldr	r2, [pc, #32]	; (800aaa8 <memp_malloc+0x48>)
 800aa86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	f7ff ff9c 	bl	800a9c8 <do_memp_malloc_pool>
 800aa90:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800aa92:	68fb      	ldr	r3, [r7, #12]
}
 800aa94:	4618      	mov	r0, r3
 800aa96:	3710      	adds	r7, #16
 800aa98:	46bd      	mov	sp, r7
 800aa9a:	bd80      	pop	{r7, pc}
 800aa9c:	08016528 	.word	0x08016528
 800aaa0:	080165b8 	.word	0x080165b8
 800aaa4:	0801657c 	.word	0x0801657c
 800aaa8:	0801a160 	.word	0x0801a160

0800aaac <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800aaac:	b580      	push	{r7, lr}
 800aaae:	b084      	sub	sp, #16
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	6078      	str	r0, [r7, #4]
 800aab4:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800aab6:	683b      	ldr	r3, [r7, #0]
 800aab8:	f003 0303 	and.w	r3, r3, #3
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d006      	beq.n	800aace <do_memp_free_pool+0x22>
 800aac0:	4b0a      	ldr	r3, [pc, #40]	; (800aaec <do_memp_free_pool+0x40>)
 800aac2:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800aac6:	490a      	ldr	r1, [pc, #40]	; (800aaf0 <do_memp_free_pool+0x44>)
 800aac8:	480a      	ldr	r0, [pc, #40]	; (800aaf4 <do_memp_free_pool+0x48>)
 800aaca:	f009 fff7 	bl	8014abc <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800aace:	683b      	ldr	r3, [r7, #0]
 800aad0:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	689b      	ldr	r3, [r3, #8]
 800aad6:	681a      	ldr	r2, [r3, #0]
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	689b      	ldr	r3, [r3, #8]
 800aae0:	68fa      	ldr	r2, [r7, #12]
 800aae2:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800aae4:	bf00      	nop
 800aae6:	3710      	adds	r7, #16
 800aae8:	46bd      	mov	sp, r7
 800aaea:	bd80      	pop	{r7, pc}
 800aaec:	08016528 	.word	0x08016528
 800aaf0:	080165d8 	.word	0x080165d8
 800aaf4:	0801657c 	.word	0x0801657c

0800aaf8 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800aaf8:	b580      	push	{r7, lr}
 800aafa:	b082      	sub	sp, #8
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	6078      	str	r0, [r7, #4]
 800ab00:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d106      	bne.n	800ab16 <memp_free_pool+0x1e>
 800ab08:	4b0a      	ldr	r3, [pc, #40]	; (800ab34 <memp_free_pool+0x3c>)
 800ab0a:	f240 1295 	movw	r2, #405	; 0x195
 800ab0e:	490a      	ldr	r1, [pc, #40]	; (800ab38 <memp_free_pool+0x40>)
 800ab10:	480a      	ldr	r0, [pc, #40]	; (800ab3c <memp_free_pool+0x44>)
 800ab12:	f009 ffd3 	bl	8014abc <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d007      	beq.n	800ab2c <memp_free_pool+0x34>
 800ab1c:	683b      	ldr	r3, [r7, #0]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d004      	beq.n	800ab2c <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800ab22:	6839      	ldr	r1, [r7, #0]
 800ab24:	6878      	ldr	r0, [r7, #4]
 800ab26:	f7ff ffc1 	bl	800aaac <do_memp_free_pool>
 800ab2a:	e000      	b.n	800ab2e <memp_free_pool+0x36>
    return;
 800ab2c:	bf00      	nop
}
 800ab2e:	3708      	adds	r7, #8
 800ab30:	46bd      	mov	sp, r7
 800ab32:	bd80      	pop	{r7, pc}
 800ab34:	08016528 	.word	0x08016528
 800ab38:	080165a4 	.word	0x080165a4
 800ab3c:	0801657c 	.word	0x0801657c

0800ab40 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800ab40:	b580      	push	{r7, lr}
 800ab42:	b082      	sub	sp, #8
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	4603      	mov	r3, r0
 800ab48:	6039      	str	r1, [r7, #0]
 800ab4a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800ab4c:	79fb      	ldrb	r3, [r7, #7]
 800ab4e:	2b08      	cmp	r3, #8
 800ab50:	d907      	bls.n	800ab62 <memp_free+0x22>
 800ab52:	4b0c      	ldr	r3, [pc, #48]	; (800ab84 <memp_free+0x44>)
 800ab54:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800ab58:	490b      	ldr	r1, [pc, #44]	; (800ab88 <memp_free+0x48>)
 800ab5a:	480c      	ldr	r0, [pc, #48]	; (800ab8c <memp_free+0x4c>)
 800ab5c:	f009 ffae 	bl	8014abc <iprintf>
 800ab60:	e00c      	b.n	800ab7c <memp_free+0x3c>

  if (mem == NULL) {
 800ab62:	683b      	ldr	r3, [r7, #0]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d008      	beq.n	800ab7a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800ab68:	79fb      	ldrb	r3, [r7, #7]
 800ab6a:	4a09      	ldr	r2, [pc, #36]	; (800ab90 <memp_free+0x50>)
 800ab6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ab70:	6839      	ldr	r1, [r7, #0]
 800ab72:	4618      	mov	r0, r3
 800ab74:	f7ff ff9a 	bl	800aaac <do_memp_free_pool>
 800ab78:	e000      	b.n	800ab7c <memp_free+0x3c>
    return;
 800ab7a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800ab7c:	3708      	adds	r7, #8
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	bd80      	pop	{r7, pc}
 800ab82:	bf00      	nop
 800ab84:	08016528 	.word	0x08016528
 800ab88:	080165f8 	.word	0x080165f8
 800ab8c:	0801657c 	.word	0x0801657c
 800ab90:	0801a160 	.word	0x0801a160

0800ab94 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800ab94:	b480      	push	{r7}
 800ab96:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800ab98:	bf00      	nop
 800ab9a:	46bd      	mov	sp, r7
 800ab9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba0:	4770      	bx	lr
	...

0800aba4 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800aba4:	b580      	push	{r7, lr}
 800aba6:	b086      	sub	sp, #24
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	60f8      	str	r0, [r7, #12]
 800abac:	60b9      	str	r1, [r7, #8]
 800abae:	607a      	str	r2, [r7, #4]
 800abb0:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d108      	bne.n	800abca <netif_add+0x26>
 800abb8:	4b57      	ldr	r3, [pc, #348]	; (800ad18 <netif_add+0x174>)
 800abba:	f240 1227 	movw	r2, #295	; 0x127
 800abbe:	4957      	ldr	r1, [pc, #348]	; (800ad1c <netif_add+0x178>)
 800abc0:	4857      	ldr	r0, [pc, #348]	; (800ad20 <netif_add+0x17c>)
 800abc2:	f009 ff7b 	bl	8014abc <iprintf>
 800abc6:	2300      	movs	r3, #0
 800abc8:	e0a2      	b.n	800ad10 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800abca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d108      	bne.n	800abe2 <netif_add+0x3e>
 800abd0:	4b51      	ldr	r3, [pc, #324]	; (800ad18 <netif_add+0x174>)
 800abd2:	f44f 7294 	mov.w	r2, #296	; 0x128
 800abd6:	4953      	ldr	r1, [pc, #332]	; (800ad24 <netif_add+0x180>)
 800abd8:	4851      	ldr	r0, [pc, #324]	; (800ad20 <netif_add+0x17c>)
 800abda:	f009 ff6f 	bl	8014abc <iprintf>
 800abde:	2300      	movs	r3, #0
 800abe0:	e096      	b.n	800ad10 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800abe2:	68bb      	ldr	r3, [r7, #8]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d101      	bne.n	800abec <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800abe8:	4b4f      	ldr	r3, [pc, #316]	; (800ad28 <netif_add+0x184>)
 800abea:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d101      	bne.n	800abf6 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800abf2:	4b4d      	ldr	r3, [pc, #308]	; (800ad28 <netif_add+0x184>)
 800abf4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800abf6:	683b      	ldr	r3, [r7, #0]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d101      	bne.n	800ac00 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800abfc:	4b4a      	ldr	r3, [pc, #296]	; (800ad28 <netif_add+0x184>)
 800abfe:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	2200      	movs	r2, #0
 800ac04:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	2200      	movs	r2, #0
 800ac0a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	2200      	movs	r2, #0
 800ac10:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	4a45      	ldr	r2, [pc, #276]	; (800ad2c <netif_add+0x188>)
 800ac16:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	2200      	movs	r2, #0
 800ac1c:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	2200      	movs	r2, #0
 800ac22:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	2200      	movs	r2, #0
 800ac2a:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	6a3a      	ldr	r2, [r7, #32]
 800ac30:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800ac32:	4b3f      	ldr	r3, [pc, #252]	; (800ad30 <netif_add+0x18c>)
 800ac34:	781a      	ldrb	r2, [r3, #0]
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ac40:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800ac42:	683b      	ldr	r3, [r7, #0]
 800ac44:	687a      	ldr	r2, [r7, #4]
 800ac46:	68b9      	ldr	r1, [r7, #8]
 800ac48:	68f8      	ldr	r0, [r7, #12]
 800ac4a:	f000 f913 	bl	800ae74 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800ac4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac50:	68f8      	ldr	r0, [r7, #12]
 800ac52:	4798      	blx	r3
 800ac54:	4603      	mov	r3, r0
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d001      	beq.n	800ac5e <netif_add+0xba>
    return NULL;
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	e058      	b.n	800ad10 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ac64:	2bff      	cmp	r3, #255	; 0xff
 800ac66:	d103      	bne.n	800ac70 <netif_add+0xcc>
        netif->num = 0;
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	2200      	movs	r2, #0
 800ac6c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800ac70:	2300      	movs	r3, #0
 800ac72:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800ac74:	4b2f      	ldr	r3, [pc, #188]	; (800ad34 <netif_add+0x190>)
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	617b      	str	r3, [r7, #20]
 800ac7a:	e02b      	b.n	800acd4 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800ac7c:	697a      	ldr	r2, [r7, #20]
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	429a      	cmp	r2, r3
 800ac82:	d106      	bne.n	800ac92 <netif_add+0xee>
 800ac84:	4b24      	ldr	r3, [pc, #144]	; (800ad18 <netif_add+0x174>)
 800ac86:	f240 128b 	movw	r2, #395	; 0x18b
 800ac8a:	492b      	ldr	r1, [pc, #172]	; (800ad38 <netif_add+0x194>)
 800ac8c:	4824      	ldr	r0, [pc, #144]	; (800ad20 <netif_add+0x17c>)
 800ac8e:	f009 ff15 	bl	8014abc <iprintf>
        num_netifs++;
 800ac92:	693b      	ldr	r3, [r7, #16]
 800ac94:	3301      	adds	r3, #1
 800ac96:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800ac98:	693b      	ldr	r3, [r7, #16]
 800ac9a:	2bff      	cmp	r3, #255	; 0xff
 800ac9c:	dd06      	ble.n	800acac <netif_add+0x108>
 800ac9e:	4b1e      	ldr	r3, [pc, #120]	; (800ad18 <netif_add+0x174>)
 800aca0:	f240 128d 	movw	r2, #397	; 0x18d
 800aca4:	4925      	ldr	r1, [pc, #148]	; (800ad3c <netif_add+0x198>)
 800aca6:	481e      	ldr	r0, [pc, #120]	; (800ad20 <netif_add+0x17c>)
 800aca8:	f009 ff08 	bl	8014abc <iprintf>
        if (netif2->num == netif->num) {
 800acac:	697b      	ldr	r3, [r7, #20]
 800acae:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800acb8:	429a      	cmp	r2, r3
 800acba:	d108      	bne.n	800acce <netif_add+0x12a>
          netif->num++;
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800acc2:	3301      	adds	r3, #1
 800acc4:	b2da      	uxtb	r2, r3
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800accc:	e005      	b.n	800acda <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800acce:	697b      	ldr	r3, [r7, #20]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	617b      	str	r3, [r7, #20]
 800acd4:	697b      	ldr	r3, [r7, #20]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d1d0      	bne.n	800ac7c <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800acda:	697b      	ldr	r3, [r7, #20]
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d1be      	bne.n	800ac5e <netif_add+0xba>
  }
  if (netif->num == 254) {
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ace6:	2bfe      	cmp	r3, #254	; 0xfe
 800ace8:	d103      	bne.n	800acf2 <netif_add+0x14e>
    netif_num = 0;
 800acea:	4b11      	ldr	r3, [pc, #68]	; (800ad30 <netif_add+0x18c>)
 800acec:	2200      	movs	r2, #0
 800acee:	701a      	strb	r2, [r3, #0]
 800acf0:	e006      	b.n	800ad00 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800acf8:	3301      	adds	r3, #1
 800acfa:	b2da      	uxtb	r2, r3
 800acfc:	4b0c      	ldr	r3, [pc, #48]	; (800ad30 <netif_add+0x18c>)
 800acfe:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800ad00:	4b0c      	ldr	r3, [pc, #48]	; (800ad34 <netif_add+0x190>)
 800ad02:	681a      	ldr	r2, [r3, #0]
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800ad08:	4a0a      	ldr	r2, [pc, #40]	; (800ad34 <netif_add+0x190>)
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800ad0e:	68fb      	ldr	r3, [r7, #12]
}
 800ad10:	4618      	mov	r0, r3
 800ad12:	3718      	adds	r7, #24
 800ad14:	46bd      	mov	sp, r7
 800ad16:	bd80      	pop	{r7, pc}
 800ad18:	08016614 	.word	0x08016614
 800ad1c:	080166a8 	.word	0x080166a8
 800ad20:	08016664 	.word	0x08016664
 800ad24:	080166c4 	.word	0x080166c4
 800ad28:	0801a1c4 	.word	0x0801a1c4
 800ad2c:	0800b14f 	.word	0x0800b14f
 800ad30:	24000554 	.word	0x24000554
 800ad34:	24003c6c 	.word	0x24003c6c
 800ad38:	080166e8 	.word	0x080166e8
 800ad3c:	080166fc 	.word	0x080166fc

0800ad40 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800ad40:	b580      	push	{r7, lr}
 800ad42:	b082      	sub	sp, #8
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	6078      	str	r0, [r7, #4]
 800ad48:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800ad4a:	6839      	ldr	r1, [r7, #0]
 800ad4c:	6878      	ldr	r0, [r7, #4]
 800ad4e:	f002 fe01 	bl	800d954 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800ad52:	6839      	ldr	r1, [r7, #0]
 800ad54:	6878      	ldr	r0, [r7, #4]
 800ad56:	f007 fb39 	bl	80123cc <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800ad5a:	bf00      	nop
 800ad5c:	3708      	adds	r7, #8
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	bd80      	pop	{r7, pc}
	...

0800ad64 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800ad64:	b580      	push	{r7, lr}
 800ad66:	b086      	sub	sp, #24
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	60f8      	str	r0, [r7, #12]
 800ad6c:	60b9      	str	r1, [r7, #8]
 800ad6e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800ad70:	68bb      	ldr	r3, [r7, #8]
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d106      	bne.n	800ad84 <netif_do_set_ipaddr+0x20>
 800ad76:	4b1d      	ldr	r3, [pc, #116]	; (800adec <netif_do_set_ipaddr+0x88>)
 800ad78:	f240 12cb 	movw	r2, #459	; 0x1cb
 800ad7c:	491c      	ldr	r1, [pc, #112]	; (800adf0 <netif_do_set_ipaddr+0x8c>)
 800ad7e:	481d      	ldr	r0, [pc, #116]	; (800adf4 <netif_do_set_ipaddr+0x90>)
 800ad80:	f009 fe9c 	bl	8014abc <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d106      	bne.n	800ad98 <netif_do_set_ipaddr+0x34>
 800ad8a:	4b18      	ldr	r3, [pc, #96]	; (800adec <netif_do_set_ipaddr+0x88>)
 800ad8c:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800ad90:	4917      	ldr	r1, [pc, #92]	; (800adf0 <netif_do_set_ipaddr+0x8c>)
 800ad92:	4818      	ldr	r0, [pc, #96]	; (800adf4 <netif_do_set_ipaddr+0x90>)
 800ad94:	f009 fe92 	bl	8014abc <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800ad98:	68bb      	ldr	r3, [r7, #8]
 800ad9a:	681a      	ldr	r2, [r3, #0]
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	3304      	adds	r3, #4
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	429a      	cmp	r2, r3
 800ada4:	d01c      	beq.n	800ade0 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800ada6:	68bb      	ldr	r3, [r7, #8]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	3304      	adds	r3, #4
 800adb0:	681a      	ldr	r2, [r3, #0]
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800adb6:	f107 0314 	add.w	r3, r7, #20
 800adba:	4619      	mov	r1, r3
 800adbc:	6878      	ldr	r0, [r7, #4]
 800adbe:	f7ff ffbf 	bl	800ad40 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800adc2:	68bb      	ldr	r3, [r7, #8]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d002      	beq.n	800adce <netif_do_set_ipaddr+0x6a>
 800adc8:	68bb      	ldr	r3, [r7, #8]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	e000      	b.n	800add0 <netif_do_set_ipaddr+0x6c>
 800adce:	2300      	movs	r3, #0
 800add0:	68fa      	ldr	r2, [r7, #12]
 800add2:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800add4:	2101      	movs	r1, #1
 800add6:	68f8      	ldr	r0, [r7, #12]
 800add8:	f000 f8d2 	bl	800af80 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800addc:	2301      	movs	r3, #1
 800adde:	e000      	b.n	800ade2 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800ade0:	2300      	movs	r3, #0
}
 800ade2:	4618      	mov	r0, r3
 800ade4:	3718      	adds	r7, #24
 800ade6:	46bd      	mov	sp, r7
 800ade8:	bd80      	pop	{r7, pc}
 800adea:	bf00      	nop
 800adec:	08016614 	.word	0x08016614
 800adf0:	0801672c 	.word	0x0801672c
 800adf4:	08016664 	.word	0x08016664

0800adf8 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800adf8:	b480      	push	{r7}
 800adfa:	b085      	sub	sp, #20
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	60f8      	str	r0, [r7, #12]
 800ae00:	60b9      	str	r1, [r7, #8]
 800ae02:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800ae04:	68bb      	ldr	r3, [r7, #8]
 800ae06:	681a      	ldr	r2, [r3, #0]
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	3308      	adds	r3, #8
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	429a      	cmp	r2, r3
 800ae10:	d00a      	beq.n	800ae28 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800ae12:	68bb      	ldr	r3, [r7, #8]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d002      	beq.n	800ae1e <netif_do_set_netmask+0x26>
 800ae18:	68bb      	ldr	r3, [r7, #8]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	e000      	b.n	800ae20 <netif_do_set_netmask+0x28>
 800ae1e:	2300      	movs	r3, #0
 800ae20:	68fa      	ldr	r2, [r7, #12]
 800ae22:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800ae24:	2301      	movs	r3, #1
 800ae26:	e000      	b.n	800ae2a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800ae28:	2300      	movs	r3, #0
}
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	3714      	adds	r7, #20
 800ae2e:	46bd      	mov	sp, r7
 800ae30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae34:	4770      	bx	lr

0800ae36 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800ae36:	b480      	push	{r7}
 800ae38:	b085      	sub	sp, #20
 800ae3a:	af00      	add	r7, sp, #0
 800ae3c:	60f8      	str	r0, [r7, #12]
 800ae3e:	60b9      	str	r1, [r7, #8]
 800ae40:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800ae42:	68bb      	ldr	r3, [r7, #8]
 800ae44:	681a      	ldr	r2, [r3, #0]
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	330c      	adds	r3, #12
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	429a      	cmp	r2, r3
 800ae4e:	d00a      	beq.n	800ae66 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800ae50:	68bb      	ldr	r3, [r7, #8]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d002      	beq.n	800ae5c <netif_do_set_gw+0x26>
 800ae56:	68bb      	ldr	r3, [r7, #8]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	e000      	b.n	800ae5e <netif_do_set_gw+0x28>
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	68fa      	ldr	r2, [r7, #12]
 800ae60:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800ae62:	2301      	movs	r3, #1
 800ae64:	e000      	b.n	800ae68 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800ae66:	2300      	movs	r3, #0
}
 800ae68:	4618      	mov	r0, r3
 800ae6a:	3714      	adds	r7, #20
 800ae6c:	46bd      	mov	sp, r7
 800ae6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae72:	4770      	bx	lr

0800ae74 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800ae74:	b580      	push	{r7, lr}
 800ae76:	b088      	sub	sp, #32
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	60f8      	str	r0, [r7, #12]
 800ae7c:	60b9      	str	r1, [r7, #8]
 800ae7e:	607a      	str	r2, [r7, #4]
 800ae80:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800ae82:	2300      	movs	r3, #0
 800ae84:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800ae86:	2300      	movs	r3, #0
 800ae88:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800ae8a:	68bb      	ldr	r3, [r7, #8]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d101      	bne.n	800ae94 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800ae90:	4b1c      	ldr	r3, [pc, #112]	; (800af04 <netif_set_addr+0x90>)
 800ae92:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d101      	bne.n	800ae9e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800ae9a:	4b1a      	ldr	r3, [pc, #104]	; (800af04 <netif_set_addr+0x90>)
 800ae9c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800ae9e:	683b      	ldr	r3, [r7, #0]
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d101      	bne.n	800aea8 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800aea4:	4b17      	ldr	r3, [pc, #92]	; (800af04 <netif_set_addr+0x90>)
 800aea6:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800aea8:	68bb      	ldr	r3, [r7, #8]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d003      	beq.n	800aeb6 <netif_set_addr+0x42>
 800aeae:	68bb      	ldr	r3, [r7, #8]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d101      	bne.n	800aeba <netif_set_addr+0x46>
 800aeb6:	2301      	movs	r3, #1
 800aeb8:	e000      	b.n	800aebc <netif_set_addr+0x48>
 800aeba:	2300      	movs	r3, #0
 800aebc:	617b      	str	r3, [r7, #20]
  if (remove) {
 800aebe:	697b      	ldr	r3, [r7, #20]
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d006      	beq.n	800aed2 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800aec4:	f107 0310 	add.w	r3, r7, #16
 800aec8:	461a      	mov	r2, r3
 800aeca:	68b9      	ldr	r1, [r7, #8]
 800aecc:	68f8      	ldr	r0, [r7, #12]
 800aece:	f7ff ff49 	bl	800ad64 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800aed2:	69fa      	ldr	r2, [r7, #28]
 800aed4:	6879      	ldr	r1, [r7, #4]
 800aed6:	68f8      	ldr	r0, [r7, #12]
 800aed8:	f7ff ff8e 	bl	800adf8 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800aedc:	69ba      	ldr	r2, [r7, #24]
 800aede:	6839      	ldr	r1, [r7, #0]
 800aee0:	68f8      	ldr	r0, [r7, #12]
 800aee2:	f7ff ffa8 	bl	800ae36 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800aee6:	697b      	ldr	r3, [r7, #20]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d106      	bne.n	800aefa <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800aeec:	f107 0310 	add.w	r3, r7, #16
 800aef0:	461a      	mov	r2, r3
 800aef2:	68b9      	ldr	r1, [r7, #8]
 800aef4:	68f8      	ldr	r0, [r7, #12]
 800aef6:	f7ff ff35 	bl	800ad64 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800aefa:	bf00      	nop
 800aefc:	3720      	adds	r7, #32
 800aefe:	46bd      	mov	sp, r7
 800af00:	bd80      	pop	{r7, pc}
 800af02:	bf00      	nop
 800af04:	0801a1c4 	.word	0x0801a1c4

0800af08 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800af08:	b480      	push	{r7}
 800af0a:	b083      	sub	sp, #12
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800af10:	4a04      	ldr	r2, [pc, #16]	; (800af24 <netif_set_default+0x1c>)
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800af16:	bf00      	nop
 800af18:	370c      	adds	r7, #12
 800af1a:	46bd      	mov	sp, r7
 800af1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af20:	4770      	bx	lr
 800af22:	bf00      	nop
 800af24:	24003c70 	.word	0x24003c70

0800af28 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800af28:	b580      	push	{r7, lr}
 800af2a:	b082      	sub	sp, #8
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	2b00      	cmp	r3, #0
 800af34:	d107      	bne.n	800af46 <netif_set_up+0x1e>
 800af36:	4b0f      	ldr	r3, [pc, #60]	; (800af74 <netif_set_up+0x4c>)
 800af38:	f44f 7254 	mov.w	r2, #848	; 0x350
 800af3c:	490e      	ldr	r1, [pc, #56]	; (800af78 <netif_set_up+0x50>)
 800af3e:	480f      	ldr	r0, [pc, #60]	; (800af7c <netif_set_up+0x54>)
 800af40:	f009 fdbc 	bl	8014abc <iprintf>
 800af44:	e013      	b.n	800af6e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800af4c:	f003 0301 	and.w	r3, r3, #1
 800af50:	2b00      	cmp	r3, #0
 800af52:	d10c      	bne.n	800af6e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800af5a:	f043 0301 	orr.w	r3, r3, #1
 800af5e:	b2da      	uxtb	r2, r3
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800af66:	2103      	movs	r1, #3
 800af68:	6878      	ldr	r0, [r7, #4]
 800af6a:	f000 f809 	bl	800af80 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800af6e:	3708      	adds	r7, #8
 800af70:	46bd      	mov	sp, r7
 800af72:	bd80      	pop	{r7, pc}
 800af74:	08016614 	.word	0x08016614
 800af78:	0801679c 	.word	0x0801679c
 800af7c:	08016664 	.word	0x08016664

0800af80 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800af80:	b580      	push	{r7, lr}
 800af82:	b082      	sub	sp, #8
 800af84:	af00      	add	r7, sp, #0
 800af86:	6078      	str	r0, [r7, #4]
 800af88:	460b      	mov	r3, r1
 800af8a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d106      	bne.n	800afa0 <netif_issue_reports+0x20>
 800af92:	4b18      	ldr	r3, [pc, #96]	; (800aff4 <netif_issue_reports+0x74>)
 800af94:	f240 326d 	movw	r2, #877	; 0x36d
 800af98:	4917      	ldr	r1, [pc, #92]	; (800aff8 <netif_issue_reports+0x78>)
 800af9a:	4818      	ldr	r0, [pc, #96]	; (800affc <netif_issue_reports+0x7c>)
 800af9c:	f009 fd8e 	bl	8014abc <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800afa6:	f003 0304 	and.w	r3, r3, #4
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d01e      	beq.n	800afec <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800afb4:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d017      	beq.n	800afec <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800afbc:	78fb      	ldrb	r3, [r7, #3]
 800afbe:	f003 0301 	and.w	r3, r3, #1
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d013      	beq.n	800afee <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	3304      	adds	r3, #4
 800afca:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d00e      	beq.n	800afee <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800afd6:	f003 0308 	and.w	r3, r3, #8
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d007      	beq.n	800afee <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	3304      	adds	r3, #4
 800afe2:	4619      	mov	r1, r3
 800afe4:	6878      	ldr	r0, [r7, #4]
 800afe6:	f008 f95b 	bl	80132a0 <etharp_request>
 800afea:	e000      	b.n	800afee <netif_issue_reports+0x6e>
    return;
 800afec:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800afee:	3708      	adds	r7, #8
 800aff0:	46bd      	mov	sp, r7
 800aff2:	bd80      	pop	{r7, pc}
 800aff4:	08016614 	.word	0x08016614
 800aff8:	080167b8 	.word	0x080167b8
 800affc:	08016664 	.word	0x08016664

0800b000 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800b000:	b580      	push	{r7, lr}
 800b002:	b082      	sub	sp, #8
 800b004:	af00      	add	r7, sp, #0
 800b006:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d107      	bne.n	800b01e <netif_set_down+0x1e>
 800b00e:	4b12      	ldr	r3, [pc, #72]	; (800b058 <netif_set_down+0x58>)
 800b010:	f240 329b 	movw	r2, #923	; 0x39b
 800b014:	4911      	ldr	r1, [pc, #68]	; (800b05c <netif_set_down+0x5c>)
 800b016:	4812      	ldr	r0, [pc, #72]	; (800b060 <netif_set_down+0x60>)
 800b018:	f009 fd50 	bl	8014abc <iprintf>
 800b01c:	e019      	b.n	800b052 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b024:	f003 0301 	and.w	r3, r3, #1
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d012      	beq.n	800b052 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b032:	f023 0301 	bic.w	r3, r3, #1
 800b036:	b2da      	uxtb	r2, r3
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b044:	f003 0308 	and.w	r3, r3, #8
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d002      	beq.n	800b052 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800b04c:	6878      	ldr	r0, [r7, #4]
 800b04e:	f007 fce5 	bl	8012a1c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800b052:	3708      	adds	r7, #8
 800b054:	46bd      	mov	sp, r7
 800b056:	bd80      	pop	{r7, pc}
 800b058:	08016614 	.word	0x08016614
 800b05c:	080167dc 	.word	0x080167dc
 800b060:	08016664 	.word	0x08016664

0800b064 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800b064:	b580      	push	{r7, lr}
 800b066:	b082      	sub	sp, #8
 800b068:	af00      	add	r7, sp, #0
 800b06a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d107      	bne.n	800b082 <netif_set_link_up+0x1e>
 800b072:	4b13      	ldr	r3, [pc, #76]	; (800b0c0 <netif_set_link_up+0x5c>)
 800b074:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800b078:	4912      	ldr	r1, [pc, #72]	; (800b0c4 <netif_set_link_up+0x60>)
 800b07a:	4813      	ldr	r0, [pc, #76]	; (800b0c8 <netif_set_link_up+0x64>)
 800b07c:	f009 fd1e 	bl	8014abc <iprintf>
 800b080:	e01b      	b.n	800b0ba <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b088:	f003 0304 	and.w	r3, r3, #4
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d114      	bne.n	800b0ba <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b096:	f043 0304 	orr.w	r3, r3, #4
 800b09a:	b2da      	uxtb	r2, r3
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800b0a2:	2103      	movs	r1, #3
 800b0a4:	6878      	ldr	r0, [r7, #4]
 800b0a6:	f7ff ff6b 	bl	800af80 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	69db      	ldr	r3, [r3, #28]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d003      	beq.n	800b0ba <netif_set_link_up+0x56>
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	69db      	ldr	r3, [r3, #28]
 800b0b6:	6878      	ldr	r0, [r7, #4]
 800b0b8:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800b0ba:	3708      	adds	r7, #8
 800b0bc:	46bd      	mov	sp, r7
 800b0be:	bd80      	pop	{r7, pc}
 800b0c0:	08016614 	.word	0x08016614
 800b0c4:	080167fc 	.word	0x080167fc
 800b0c8:	08016664 	.word	0x08016664

0800b0cc <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800b0cc:	b580      	push	{r7, lr}
 800b0ce:	b082      	sub	sp, #8
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d107      	bne.n	800b0ea <netif_set_link_down+0x1e>
 800b0da:	4b11      	ldr	r3, [pc, #68]	; (800b120 <netif_set_link_down+0x54>)
 800b0dc:	f240 4206 	movw	r2, #1030	; 0x406
 800b0e0:	4910      	ldr	r1, [pc, #64]	; (800b124 <netif_set_link_down+0x58>)
 800b0e2:	4811      	ldr	r0, [pc, #68]	; (800b128 <netif_set_link_down+0x5c>)
 800b0e4:	f009 fcea 	bl	8014abc <iprintf>
 800b0e8:	e017      	b.n	800b11a <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b0f0:	f003 0304 	and.w	r3, r3, #4
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d010      	beq.n	800b11a <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b0fe:	f023 0304 	bic.w	r3, r3, #4
 800b102:	b2da      	uxtb	r2, r3
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	69db      	ldr	r3, [r3, #28]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d003      	beq.n	800b11a <netif_set_link_down+0x4e>
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	69db      	ldr	r3, [r3, #28]
 800b116:	6878      	ldr	r0, [r7, #4]
 800b118:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800b11a:	3708      	adds	r7, #8
 800b11c:	46bd      	mov	sp, r7
 800b11e:	bd80      	pop	{r7, pc}
 800b120:	08016614 	.word	0x08016614
 800b124:	08016820 	.word	0x08016820
 800b128:	08016664 	.word	0x08016664

0800b12c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800b12c:	b480      	push	{r7}
 800b12e:	b083      	sub	sp, #12
 800b130:	af00      	add	r7, sp, #0
 800b132:	6078      	str	r0, [r7, #4]
 800b134:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d002      	beq.n	800b142 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	683a      	ldr	r2, [r7, #0]
 800b140:	61da      	str	r2, [r3, #28]
  }
}
 800b142:	bf00      	nop
 800b144:	370c      	adds	r7, #12
 800b146:	46bd      	mov	sp, r7
 800b148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b14c:	4770      	bx	lr

0800b14e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800b14e:	b480      	push	{r7}
 800b150:	b085      	sub	sp, #20
 800b152:	af00      	add	r7, sp, #0
 800b154:	60f8      	str	r0, [r7, #12]
 800b156:	60b9      	str	r1, [r7, #8]
 800b158:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800b15a:	f06f 030b 	mvn.w	r3, #11
}
 800b15e:	4618      	mov	r0, r3
 800b160:	3714      	adds	r7, #20
 800b162:	46bd      	mov	sp, r7
 800b164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b168:	4770      	bx	lr
	...

0800b16c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800b16c:	b480      	push	{r7}
 800b16e:	b085      	sub	sp, #20
 800b170:	af00      	add	r7, sp, #0
 800b172:	4603      	mov	r3, r0
 800b174:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800b176:	79fb      	ldrb	r3, [r7, #7]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d013      	beq.n	800b1a4 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800b17c:	4b0d      	ldr	r3, [pc, #52]	; (800b1b4 <netif_get_by_index+0x48>)
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	60fb      	str	r3, [r7, #12]
 800b182:	e00c      	b.n	800b19e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b18a:	3301      	adds	r3, #1
 800b18c:	b2db      	uxtb	r3, r3
 800b18e:	79fa      	ldrb	r2, [r7, #7]
 800b190:	429a      	cmp	r2, r3
 800b192:	d101      	bne.n	800b198 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	e006      	b.n	800b1a6 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	60fb      	str	r3, [r7, #12]
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d1ef      	bne.n	800b184 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800b1a4:	2300      	movs	r3, #0
}
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	3714      	adds	r7, #20
 800b1aa:	46bd      	mov	sp, r7
 800b1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b0:	4770      	bx	lr
 800b1b2:	bf00      	nop
 800b1b4:	24003c6c 	.word	0x24003c6c

0800b1b8 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800b1b8:	b580      	push	{r7, lr}
 800b1ba:	b082      	sub	sp, #8
 800b1bc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800b1be:	4b0c      	ldr	r3, [pc, #48]	; (800b1f0 <pbuf_free_ooseq+0x38>)
 800b1c0:	2200      	movs	r2, #0
 800b1c2:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800b1c4:	4b0b      	ldr	r3, [pc, #44]	; (800b1f4 <pbuf_free_ooseq+0x3c>)
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	607b      	str	r3, [r7, #4]
 800b1ca:	e00a      	b.n	800b1e2 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d003      	beq.n	800b1dc <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800b1d4:	6878      	ldr	r0, [r7, #4]
 800b1d6:	f002 fbfb 	bl	800d9d0 <tcp_free_ooseq>
      return;
 800b1da:	e005      	b.n	800b1e8 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	68db      	ldr	r3, [r3, #12]
 800b1e0:	607b      	str	r3, [r7, #4]
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d1f1      	bne.n	800b1cc <pbuf_free_ooseq+0x14>
    }
  }
}
 800b1e8:	3708      	adds	r7, #8
 800b1ea:	46bd      	mov	sp, r7
 800b1ec:	bd80      	pop	{r7, pc}
 800b1ee:	bf00      	nop
 800b1f0:	24003c74 	.word	0x24003c74
 800b1f4:	24003c7c 	.word	0x24003c7c

0800b1f8 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800b1f8:	b480      	push	{r7}
 800b1fa:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800b1fc:	4b03      	ldr	r3, [pc, #12]	; (800b20c <pbuf_pool_is_empty+0x14>)
 800b1fe:	2201      	movs	r2, #1
 800b200:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800b202:	bf00      	nop
 800b204:	46bd      	mov	sp, r7
 800b206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20a:	4770      	bx	lr
 800b20c:	24003c74 	.word	0x24003c74

0800b210 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800b210:	b480      	push	{r7}
 800b212:	b085      	sub	sp, #20
 800b214:	af00      	add	r7, sp, #0
 800b216:	60f8      	str	r0, [r7, #12]
 800b218:	60b9      	str	r1, [r7, #8]
 800b21a:	4611      	mov	r1, r2
 800b21c:	461a      	mov	r2, r3
 800b21e:	460b      	mov	r3, r1
 800b220:	80fb      	strh	r3, [r7, #6]
 800b222:	4613      	mov	r3, r2
 800b224:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	2200      	movs	r2, #0
 800b22a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	68ba      	ldr	r2, [r7, #8]
 800b230:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	88fa      	ldrh	r2, [r7, #6]
 800b236:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	88ba      	ldrh	r2, [r7, #4]
 800b23c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800b23e:	8b3b      	ldrh	r3, [r7, #24]
 800b240:	b2da      	uxtb	r2, r3
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	7f3a      	ldrb	r2, [r7, #28]
 800b24a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	2201      	movs	r2, #1
 800b250:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	2200      	movs	r2, #0
 800b256:	73da      	strb	r2, [r3, #15]
}
 800b258:	bf00      	nop
 800b25a:	3714      	adds	r7, #20
 800b25c:	46bd      	mov	sp, r7
 800b25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b262:	4770      	bx	lr

0800b264 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800b264:	b580      	push	{r7, lr}
 800b266:	b08c      	sub	sp, #48	; 0x30
 800b268:	af02      	add	r7, sp, #8
 800b26a:	4603      	mov	r3, r0
 800b26c:	71fb      	strb	r3, [r7, #7]
 800b26e:	460b      	mov	r3, r1
 800b270:	80bb      	strh	r3, [r7, #4]
 800b272:	4613      	mov	r3, r2
 800b274:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800b276:	79fb      	ldrb	r3, [r7, #7]
 800b278:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800b27a:	887b      	ldrh	r3, [r7, #2]
 800b27c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800b280:	d07f      	beq.n	800b382 <pbuf_alloc+0x11e>
 800b282:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800b286:	f300 80c8 	bgt.w	800b41a <pbuf_alloc+0x1b6>
 800b28a:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800b28e:	d010      	beq.n	800b2b2 <pbuf_alloc+0x4e>
 800b290:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800b294:	f300 80c1 	bgt.w	800b41a <pbuf_alloc+0x1b6>
 800b298:	2b01      	cmp	r3, #1
 800b29a:	d002      	beq.n	800b2a2 <pbuf_alloc+0x3e>
 800b29c:	2b41      	cmp	r3, #65	; 0x41
 800b29e:	f040 80bc 	bne.w	800b41a <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800b2a2:	887a      	ldrh	r2, [r7, #2]
 800b2a4:	88bb      	ldrh	r3, [r7, #4]
 800b2a6:	4619      	mov	r1, r3
 800b2a8:	2000      	movs	r0, #0
 800b2aa:	f000 f8d1 	bl	800b450 <pbuf_alloc_reference>
 800b2ae:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800b2b0:	e0bd      	b.n	800b42e <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800b2ba:	88bb      	ldrh	r3, [r7, #4]
 800b2bc:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800b2be:	2008      	movs	r0, #8
 800b2c0:	f7ff fbce 	bl	800aa60 <memp_malloc>
 800b2c4:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800b2c6:	693b      	ldr	r3, [r7, #16]
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d109      	bne.n	800b2e0 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800b2cc:	f7ff ff94 	bl	800b1f8 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800b2d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d002      	beq.n	800b2dc <pbuf_alloc+0x78>
            pbuf_free(p);
 800b2d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b2d8:	f000 faa8 	bl	800b82c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800b2dc:	2300      	movs	r3, #0
 800b2de:	e0a7      	b.n	800b430 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800b2e0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b2e2:	3303      	adds	r3, #3
 800b2e4:	b29b      	uxth	r3, r3
 800b2e6:	f023 0303 	bic.w	r3, r3, #3
 800b2ea:	b29b      	uxth	r3, r3
 800b2ec:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800b2f0:	b29b      	uxth	r3, r3
 800b2f2:	8b7a      	ldrh	r2, [r7, #26]
 800b2f4:	4293      	cmp	r3, r2
 800b2f6:	bf28      	it	cs
 800b2f8:	4613      	movcs	r3, r2
 800b2fa:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800b2fc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b2fe:	3310      	adds	r3, #16
 800b300:	693a      	ldr	r2, [r7, #16]
 800b302:	4413      	add	r3, r2
 800b304:	3303      	adds	r3, #3
 800b306:	f023 0303 	bic.w	r3, r3, #3
 800b30a:	4618      	mov	r0, r3
 800b30c:	89f9      	ldrh	r1, [r7, #14]
 800b30e:	8b7a      	ldrh	r2, [r7, #26]
 800b310:	2300      	movs	r3, #0
 800b312:	9301      	str	r3, [sp, #4]
 800b314:	887b      	ldrh	r3, [r7, #2]
 800b316:	9300      	str	r3, [sp, #0]
 800b318:	460b      	mov	r3, r1
 800b31a:	4601      	mov	r1, r0
 800b31c:	6938      	ldr	r0, [r7, #16]
 800b31e:	f7ff ff77 	bl	800b210 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800b322:	693b      	ldr	r3, [r7, #16]
 800b324:	685b      	ldr	r3, [r3, #4]
 800b326:	f003 0303 	and.w	r3, r3, #3
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d006      	beq.n	800b33c <pbuf_alloc+0xd8>
 800b32e:	4b42      	ldr	r3, [pc, #264]	; (800b438 <pbuf_alloc+0x1d4>)
 800b330:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b334:	4941      	ldr	r1, [pc, #260]	; (800b43c <pbuf_alloc+0x1d8>)
 800b336:	4842      	ldr	r0, [pc, #264]	; (800b440 <pbuf_alloc+0x1dc>)
 800b338:	f009 fbc0 	bl	8014abc <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800b33c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b33e:	3303      	adds	r3, #3
 800b340:	f023 0303 	bic.w	r3, r3, #3
 800b344:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800b348:	d106      	bne.n	800b358 <pbuf_alloc+0xf4>
 800b34a:	4b3b      	ldr	r3, [pc, #236]	; (800b438 <pbuf_alloc+0x1d4>)
 800b34c:	f44f 7281 	mov.w	r2, #258	; 0x102
 800b350:	493c      	ldr	r1, [pc, #240]	; (800b444 <pbuf_alloc+0x1e0>)
 800b352:	483b      	ldr	r0, [pc, #236]	; (800b440 <pbuf_alloc+0x1dc>)
 800b354:	f009 fbb2 	bl	8014abc <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800b358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d102      	bne.n	800b364 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800b35e:	693b      	ldr	r3, [r7, #16]
 800b360:	627b      	str	r3, [r7, #36]	; 0x24
 800b362:	e002      	b.n	800b36a <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800b364:	69fb      	ldr	r3, [r7, #28]
 800b366:	693a      	ldr	r2, [r7, #16]
 800b368:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800b36a:	693b      	ldr	r3, [r7, #16]
 800b36c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800b36e:	8b7a      	ldrh	r2, [r7, #26]
 800b370:	89fb      	ldrh	r3, [r7, #14]
 800b372:	1ad3      	subs	r3, r2, r3
 800b374:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800b376:	2300      	movs	r3, #0
 800b378:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800b37a:	8b7b      	ldrh	r3, [r7, #26]
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d19e      	bne.n	800b2be <pbuf_alloc+0x5a>
      break;
 800b380:	e055      	b.n	800b42e <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800b382:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b384:	3303      	adds	r3, #3
 800b386:	b29b      	uxth	r3, r3
 800b388:	f023 0303 	bic.w	r3, r3, #3
 800b38c:	b29a      	uxth	r2, r3
 800b38e:	88bb      	ldrh	r3, [r7, #4]
 800b390:	3303      	adds	r3, #3
 800b392:	b29b      	uxth	r3, r3
 800b394:	f023 0303 	bic.w	r3, r3, #3
 800b398:	b29b      	uxth	r3, r3
 800b39a:	4413      	add	r3, r2
 800b39c:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800b39e:	8b3b      	ldrh	r3, [r7, #24]
 800b3a0:	3310      	adds	r3, #16
 800b3a2:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800b3a4:	8b3a      	ldrh	r2, [r7, #24]
 800b3a6:	88bb      	ldrh	r3, [r7, #4]
 800b3a8:	3303      	adds	r3, #3
 800b3aa:	f023 0303 	bic.w	r3, r3, #3
 800b3ae:	429a      	cmp	r2, r3
 800b3b0:	d306      	bcc.n	800b3c0 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800b3b2:	8afa      	ldrh	r2, [r7, #22]
 800b3b4:	88bb      	ldrh	r3, [r7, #4]
 800b3b6:	3303      	adds	r3, #3
 800b3b8:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800b3bc:	429a      	cmp	r2, r3
 800b3be:	d201      	bcs.n	800b3c4 <pbuf_alloc+0x160>
        return NULL;
 800b3c0:	2300      	movs	r3, #0
 800b3c2:	e035      	b.n	800b430 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800b3c4:	8afb      	ldrh	r3, [r7, #22]
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	f7ff f9b6 	bl	800a738 <mem_malloc>
 800b3cc:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800b3ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d101      	bne.n	800b3d8 <pbuf_alloc+0x174>
        return NULL;
 800b3d4:	2300      	movs	r3, #0
 800b3d6:	e02b      	b.n	800b430 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800b3d8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b3da:	3310      	adds	r3, #16
 800b3dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b3de:	4413      	add	r3, r2
 800b3e0:	3303      	adds	r3, #3
 800b3e2:	f023 0303 	bic.w	r3, r3, #3
 800b3e6:	4618      	mov	r0, r3
 800b3e8:	88b9      	ldrh	r1, [r7, #4]
 800b3ea:	88ba      	ldrh	r2, [r7, #4]
 800b3ec:	2300      	movs	r3, #0
 800b3ee:	9301      	str	r3, [sp, #4]
 800b3f0:	887b      	ldrh	r3, [r7, #2]
 800b3f2:	9300      	str	r3, [sp, #0]
 800b3f4:	460b      	mov	r3, r1
 800b3f6:	4601      	mov	r1, r0
 800b3f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b3fa:	f7ff ff09 	bl	800b210 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800b3fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b400:	685b      	ldr	r3, [r3, #4]
 800b402:	f003 0303 	and.w	r3, r3, #3
 800b406:	2b00      	cmp	r3, #0
 800b408:	d010      	beq.n	800b42c <pbuf_alloc+0x1c8>
 800b40a:	4b0b      	ldr	r3, [pc, #44]	; (800b438 <pbuf_alloc+0x1d4>)
 800b40c:	f44f 7291 	mov.w	r2, #290	; 0x122
 800b410:	490d      	ldr	r1, [pc, #52]	; (800b448 <pbuf_alloc+0x1e4>)
 800b412:	480b      	ldr	r0, [pc, #44]	; (800b440 <pbuf_alloc+0x1dc>)
 800b414:	f009 fb52 	bl	8014abc <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800b418:	e008      	b.n	800b42c <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800b41a:	4b07      	ldr	r3, [pc, #28]	; (800b438 <pbuf_alloc+0x1d4>)
 800b41c:	f240 1227 	movw	r2, #295	; 0x127
 800b420:	490a      	ldr	r1, [pc, #40]	; (800b44c <pbuf_alloc+0x1e8>)
 800b422:	4807      	ldr	r0, [pc, #28]	; (800b440 <pbuf_alloc+0x1dc>)
 800b424:	f009 fb4a 	bl	8014abc <iprintf>
      return NULL;
 800b428:	2300      	movs	r3, #0
 800b42a:	e001      	b.n	800b430 <pbuf_alloc+0x1cc>
      break;
 800b42c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800b42e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b430:	4618      	mov	r0, r3
 800b432:	3728      	adds	r7, #40	; 0x28
 800b434:	46bd      	mov	sp, r7
 800b436:	bd80      	pop	{r7, pc}
 800b438:	08016844 	.word	0x08016844
 800b43c:	08016874 	.word	0x08016874
 800b440:	080168a4 	.word	0x080168a4
 800b444:	080168cc 	.word	0x080168cc
 800b448:	08016900 	.word	0x08016900
 800b44c:	0801692c 	.word	0x0801692c

0800b450 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800b450:	b580      	push	{r7, lr}
 800b452:	b086      	sub	sp, #24
 800b454:	af02      	add	r7, sp, #8
 800b456:	6078      	str	r0, [r7, #4]
 800b458:	460b      	mov	r3, r1
 800b45a:	807b      	strh	r3, [r7, #2]
 800b45c:	4613      	mov	r3, r2
 800b45e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800b460:	883b      	ldrh	r3, [r7, #0]
 800b462:	2b41      	cmp	r3, #65	; 0x41
 800b464:	d009      	beq.n	800b47a <pbuf_alloc_reference+0x2a>
 800b466:	883b      	ldrh	r3, [r7, #0]
 800b468:	2b01      	cmp	r3, #1
 800b46a:	d006      	beq.n	800b47a <pbuf_alloc_reference+0x2a>
 800b46c:	4b0f      	ldr	r3, [pc, #60]	; (800b4ac <pbuf_alloc_reference+0x5c>)
 800b46e:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800b472:	490f      	ldr	r1, [pc, #60]	; (800b4b0 <pbuf_alloc_reference+0x60>)
 800b474:	480f      	ldr	r0, [pc, #60]	; (800b4b4 <pbuf_alloc_reference+0x64>)
 800b476:	f009 fb21 	bl	8014abc <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800b47a:	2007      	movs	r0, #7
 800b47c:	f7ff faf0 	bl	800aa60 <memp_malloc>
 800b480:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	2b00      	cmp	r3, #0
 800b486:	d101      	bne.n	800b48c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800b488:	2300      	movs	r3, #0
 800b48a:	e00b      	b.n	800b4a4 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800b48c:	8879      	ldrh	r1, [r7, #2]
 800b48e:	887a      	ldrh	r2, [r7, #2]
 800b490:	2300      	movs	r3, #0
 800b492:	9301      	str	r3, [sp, #4]
 800b494:	883b      	ldrh	r3, [r7, #0]
 800b496:	9300      	str	r3, [sp, #0]
 800b498:	460b      	mov	r3, r1
 800b49a:	6879      	ldr	r1, [r7, #4]
 800b49c:	68f8      	ldr	r0, [r7, #12]
 800b49e:	f7ff feb7 	bl	800b210 <pbuf_init_alloced_pbuf>
  return p;
 800b4a2:	68fb      	ldr	r3, [r7, #12]
}
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	3710      	adds	r7, #16
 800b4a8:	46bd      	mov	sp, r7
 800b4aa:	bd80      	pop	{r7, pc}
 800b4ac:	08016844 	.word	0x08016844
 800b4b0:	08016948 	.word	0x08016948
 800b4b4:	080168a4 	.word	0x080168a4

0800b4b8 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800b4b8:	b580      	push	{r7, lr}
 800b4ba:	b088      	sub	sp, #32
 800b4bc:	af02      	add	r7, sp, #8
 800b4be:	607b      	str	r3, [r7, #4]
 800b4c0:	4603      	mov	r3, r0
 800b4c2:	73fb      	strb	r3, [r7, #15]
 800b4c4:	460b      	mov	r3, r1
 800b4c6:	81bb      	strh	r3, [r7, #12]
 800b4c8:	4613      	mov	r3, r2
 800b4ca:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800b4cc:	7bfb      	ldrb	r3, [r7, #15]
 800b4ce:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800b4d0:	8a7b      	ldrh	r3, [r7, #18]
 800b4d2:	3303      	adds	r3, #3
 800b4d4:	f023 0203 	bic.w	r2, r3, #3
 800b4d8:	89bb      	ldrh	r3, [r7, #12]
 800b4da:	441a      	add	r2, r3
 800b4dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b4de:	429a      	cmp	r2, r3
 800b4e0:	d901      	bls.n	800b4e6 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800b4e2:	2300      	movs	r3, #0
 800b4e4:	e018      	b.n	800b518 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800b4e6:	6a3b      	ldr	r3, [r7, #32]
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d007      	beq.n	800b4fc <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800b4ec:	8a7b      	ldrh	r3, [r7, #18]
 800b4ee:	3303      	adds	r3, #3
 800b4f0:	f023 0303 	bic.w	r3, r3, #3
 800b4f4:	6a3a      	ldr	r2, [r7, #32]
 800b4f6:	4413      	add	r3, r2
 800b4f8:	617b      	str	r3, [r7, #20]
 800b4fa:	e001      	b.n	800b500 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800b4fc:	2300      	movs	r3, #0
 800b4fe:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800b500:	6878      	ldr	r0, [r7, #4]
 800b502:	89b9      	ldrh	r1, [r7, #12]
 800b504:	89ba      	ldrh	r2, [r7, #12]
 800b506:	2302      	movs	r3, #2
 800b508:	9301      	str	r3, [sp, #4]
 800b50a:	897b      	ldrh	r3, [r7, #10]
 800b50c:	9300      	str	r3, [sp, #0]
 800b50e:	460b      	mov	r3, r1
 800b510:	6979      	ldr	r1, [r7, #20]
 800b512:	f7ff fe7d 	bl	800b210 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800b516:	687b      	ldr	r3, [r7, #4]
}
 800b518:	4618      	mov	r0, r3
 800b51a:	3718      	adds	r7, #24
 800b51c:	46bd      	mov	sp, r7
 800b51e:	bd80      	pop	{r7, pc}

0800b520 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800b520:	b580      	push	{r7, lr}
 800b522:	b084      	sub	sp, #16
 800b524:	af00      	add	r7, sp, #0
 800b526:	6078      	str	r0, [r7, #4]
 800b528:	460b      	mov	r3, r1
 800b52a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d106      	bne.n	800b540 <pbuf_realloc+0x20>
 800b532:	4b3a      	ldr	r3, [pc, #232]	; (800b61c <pbuf_realloc+0xfc>)
 800b534:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800b538:	4939      	ldr	r1, [pc, #228]	; (800b620 <pbuf_realloc+0x100>)
 800b53a:	483a      	ldr	r0, [pc, #232]	; (800b624 <pbuf_realloc+0x104>)
 800b53c:	f009 fabe 	bl	8014abc <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	891b      	ldrh	r3, [r3, #8]
 800b544:	887a      	ldrh	r2, [r7, #2]
 800b546:	429a      	cmp	r2, r3
 800b548:	d263      	bcs.n	800b612 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	891a      	ldrh	r2, [r3, #8]
 800b54e:	887b      	ldrh	r3, [r7, #2]
 800b550:	1ad3      	subs	r3, r2, r3
 800b552:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800b554:	887b      	ldrh	r3, [r7, #2]
 800b556:	817b      	strh	r3, [r7, #10]
  q = p;
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800b55c:	e018      	b.n	800b590 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	895b      	ldrh	r3, [r3, #10]
 800b562:	897a      	ldrh	r2, [r7, #10]
 800b564:	1ad3      	subs	r3, r2, r3
 800b566:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	891a      	ldrh	r2, [r3, #8]
 800b56c:	893b      	ldrh	r3, [r7, #8]
 800b56e:	1ad3      	subs	r3, r2, r3
 800b570:	b29a      	uxth	r2, r3
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d106      	bne.n	800b590 <pbuf_realloc+0x70>
 800b582:	4b26      	ldr	r3, [pc, #152]	; (800b61c <pbuf_realloc+0xfc>)
 800b584:	f240 12af 	movw	r2, #431	; 0x1af
 800b588:	4927      	ldr	r1, [pc, #156]	; (800b628 <pbuf_realloc+0x108>)
 800b58a:	4826      	ldr	r0, [pc, #152]	; (800b624 <pbuf_realloc+0x104>)
 800b58c:	f009 fa96 	bl	8014abc <iprintf>
  while (rem_len > q->len) {
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	895b      	ldrh	r3, [r3, #10]
 800b594:	897a      	ldrh	r2, [r7, #10]
 800b596:	429a      	cmp	r2, r3
 800b598:	d8e1      	bhi.n	800b55e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	7b1b      	ldrb	r3, [r3, #12]
 800b59e:	f003 030f 	and.w	r3, r3, #15
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d121      	bne.n	800b5ea <pbuf_realloc+0xca>
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	895b      	ldrh	r3, [r3, #10]
 800b5aa:	897a      	ldrh	r2, [r7, #10]
 800b5ac:	429a      	cmp	r2, r3
 800b5ae:	d01c      	beq.n	800b5ea <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	7b5b      	ldrb	r3, [r3, #13]
 800b5b4:	f003 0302 	and.w	r3, r3, #2
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d116      	bne.n	800b5ea <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	685a      	ldr	r2, [r3, #4]
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	1ad3      	subs	r3, r2, r3
 800b5c4:	b29a      	uxth	r2, r3
 800b5c6:	897b      	ldrh	r3, [r7, #10]
 800b5c8:	4413      	add	r3, r2
 800b5ca:	b29b      	uxth	r3, r3
 800b5cc:	4619      	mov	r1, r3
 800b5ce:	68f8      	ldr	r0, [r7, #12]
 800b5d0:	f7fe ffb0 	bl	800a534 <mem_trim>
 800b5d4:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d106      	bne.n	800b5ea <pbuf_realloc+0xca>
 800b5dc:	4b0f      	ldr	r3, [pc, #60]	; (800b61c <pbuf_realloc+0xfc>)
 800b5de:	f240 12bd 	movw	r2, #445	; 0x1bd
 800b5e2:	4912      	ldr	r1, [pc, #72]	; (800b62c <pbuf_realloc+0x10c>)
 800b5e4:	480f      	ldr	r0, [pc, #60]	; (800b624 <pbuf_realloc+0x104>)
 800b5e6:	f009 fa69 	bl	8014abc <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	897a      	ldrh	r2, [r7, #10]
 800b5ee:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	895a      	ldrh	r2, [r3, #10]
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d004      	beq.n	800b60a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	4618      	mov	r0, r3
 800b606:	f000 f911 	bl	800b82c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	2200      	movs	r2, #0
 800b60e:	601a      	str	r2, [r3, #0]
 800b610:	e000      	b.n	800b614 <pbuf_realloc+0xf4>
    return;
 800b612:	bf00      	nop

}
 800b614:	3710      	adds	r7, #16
 800b616:	46bd      	mov	sp, r7
 800b618:	bd80      	pop	{r7, pc}
 800b61a:	bf00      	nop
 800b61c:	08016844 	.word	0x08016844
 800b620:	0801695c 	.word	0x0801695c
 800b624:	080168a4 	.word	0x080168a4
 800b628:	08016974 	.word	0x08016974
 800b62c:	0801698c 	.word	0x0801698c

0800b630 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800b630:	b580      	push	{r7, lr}
 800b632:	b086      	sub	sp, #24
 800b634:	af00      	add	r7, sp, #0
 800b636:	60f8      	str	r0, [r7, #12]
 800b638:	60b9      	str	r1, [r7, #8]
 800b63a:	4613      	mov	r3, r2
 800b63c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	2b00      	cmp	r3, #0
 800b642:	d106      	bne.n	800b652 <pbuf_add_header_impl+0x22>
 800b644:	4b2b      	ldr	r3, [pc, #172]	; (800b6f4 <pbuf_add_header_impl+0xc4>)
 800b646:	f240 12df 	movw	r2, #479	; 0x1df
 800b64a:	492b      	ldr	r1, [pc, #172]	; (800b6f8 <pbuf_add_header_impl+0xc8>)
 800b64c:	482b      	ldr	r0, [pc, #172]	; (800b6fc <pbuf_add_header_impl+0xcc>)
 800b64e:	f009 fa35 	bl	8014abc <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	2b00      	cmp	r3, #0
 800b656:	d003      	beq.n	800b660 <pbuf_add_header_impl+0x30>
 800b658:	68bb      	ldr	r3, [r7, #8]
 800b65a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b65e:	d301      	bcc.n	800b664 <pbuf_add_header_impl+0x34>
    return 1;
 800b660:	2301      	movs	r3, #1
 800b662:	e043      	b.n	800b6ec <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800b664:	68bb      	ldr	r3, [r7, #8]
 800b666:	2b00      	cmp	r3, #0
 800b668:	d101      	bne.n	800b66e <pbuf_add_header_impl+0x3e>
    return 0;
 800b66a:	2300      	movs	r3, #0
 800b66c:	e03e      	b.n	800b6ec <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800b66e:	68bb      	ldr	r3, [r7, #8]
 800b670:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	891a      	ldrh	r2, [r3, #8]
 800b676:	8a7b      	ldrh	r3, [r7, #18]
 800b678:	4413      	add	r3, r2
 800b67a:	b29b      	uxth	r3, r3
 800b67c:	8a7a      	ldrh	r2, [r7, #18]
 800b67e:	429a      	cmp	r2, r3
 800b680:	d901      	bls.n	800b686 <pbuf_add_header_impl+0x56>
    return 1;
 800b682:	2301      	movs	r3, #1
 800b684:	e032      	b.n	800b6ec <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	7b1b      	ldrb	r3, [r3, #12]
 800b68a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800b68c:	8a3b      	ldrh	r3, [r7, #16]
 800b68e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b692:	2b00      	cmp	r3, #0
 800b694:	d00c      	beq.n	800b6b0 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	685a      	ldr	r2, [r3, #4]
 800b69a:	68bb      	ldr	r3, [r7, #8]
 800b69c:	425b      	negs	r3, r3
 800b69e:	4413      	add	r3, r2
 800b6a0:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	3310      	adds	r3, #16
 800b6a6:	697a      	ldr	r2, [r7, #20]
 800b6a8:	429a      	cmp	r2, r3
 800b6aa:	d20d      	bcs.n	800b6c8 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800b6ac:	2301      	movs	r3, #1
 800b6ae:	e01d      	b.n	800b6ec <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800b6b0:	79fb      	ldrb	r3, [r7, #7]
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d006      	beq.n	800b6c4 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	685a      	ldr	r2, [r3, #4]
 800b6ba:	68bb      	ldr	r3, [r7, #8]
 800b6bc:	425b      	negs	r3, r3
 800b6be:	4413      	add	r3, r2
 800b6c0:	617b      	str	r3, [r7, #20]
 800b6c2:	e001      	b.n	800b6c8 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800b6c4:	2301      	movs	r3, #1
 800b6c6:	e011      	b.n	800b6ec <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	697a      	ldr	r2, [r7, #20]
 800b6cc:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	895a      	ldrh	r2, [r3, #10]
 800b6d2:	8a7b      	ldrh	r3, [r7, #18]
 800b6d4:	4413      	add	r3, r2
 800b6d6:	b29a      	uxth	r2, r3
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	891a      	ldrh	r2, [r3, #8]
 800b6e0:	8a7b      	ldrh	r3, [r7, #18]
 800b6e2:	4413      	add	r3, r2
 800b6e4:	b29a      	uxth	r2, r3
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	811a      	strh	r2, [r3, #8]


  return 0;
 800b6ea:	2300      	movs	r3, #0
}
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	3718      	adds	r7, #24
 800b6f0:	46bd      	mov	sp, r7
 800b6f2:	bd80      	pop	{r7, pc}
 800b6f4:	08016844 	.word	0x08016844
 800b6f8:	080169a8 	.word	0x080169a8
 800b6fc:	080168a4 	.word	0x080168a4

0800b700 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800b700:	b580      	push	{r7, lr}
 800b702:	b082      	sub	sp, #8
 800b704:	af00      	add	r7, sp, #0
 800b706:	6078      	str	r0, [r7, #4]
 800b708:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800b70a:	2200      	movs	r2, #0
 800b70c:	6839      	ldr	r1, [r7, #0]
 800b70e:	6878      	ldr	r0, [r7, #4]
 800b710:	f7ff ff8e 	bl	800b630 <pbuf_add_header_impl>
 800b714:	4603      	mov	r3, r0
}
 800b716:	4618      	mov	r0, r3
 800b718:	3708      	adds	r7, #8
 800b71a:	46bd      	mov	sp, r7
 800b71c:	bd80      	pop	{r7, pc}
	...

0800b720 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800b720:	b580      	push	{r7, lr}
 800b722:	b084      	sub	sp, #16
 800b724:	af00      	add	r7, sp, #0
 800b726:	6078      	str	r0, [r7, #4]
 800b728:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d106      	bne.n	800b73e <pbuf_remove_header+0x1e>
 800b730:	4b20      	ldr	r3, [pc, #128]	; (800b7b4 <pbuf_remove_header+0x94>)
 800b732:	f240 224b 	movw	r2, #587	; 0x24b
 800b736:	4920      	ldr	r1, [pc, #128]	; (800b7b8 <pbuf_remove_header+0x98>)
 800b738:	4820      	ldr	r0, [pc, #128]	; (800b7bc <pbuf_remove_header+0x9c>)
 800b73a:	f009 f9bf 	bl	8014abc <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	2b00      	cmp	r3, #0
 800b742:	d003      	beq.n	800b74c <pbuf_remove_header+0x2c>
 800b744:	683b      	ldr	r3, [r7, #0]
 800b746:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b74a:	d301      	bcc.n	800b750 <pbuf_remove_header+0x30>
    return 1;
 800b74c:	2301      	movs	r3, #1
 800b74e:	e02c      	b.n	800b7aa <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800b750:	683b      	ldr	r3, [r7, #0]
 800b752:	2b00      	cmp	r3, #0
 800b754:	d101      	bne.n	800b75a <pbuf_remove_header+0x3a>
    return 0;
 800b756:	2300      	movs	r3, #0
 800b758:	e027      	b.n	800b7aa <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800b75a:	683b      	ldr	r3, [r7, #0]
 800b75c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	895b      	ldrh	r3, [r3, #10]
 800b762:	89fa      	ldrh	r2, [r7, #14]
 800b764:	429a      	cmp	r2, r3
 800b766:	d908      	bls.n	800b77a <pbuf_remove_header+0x5a>
 800b768:	4b12      	ldr	r3, [pc, #72]	; (800b7b4 <pbuf_remove_header+0x94>)
 800b76a:	f240 2255 	movw	r2, #597	; 0x255
 800b76e:	4914      	ldr	r1, [pc, #80]	; (800b7c0 <pbuf_remove_header+0xa0>)
 800b770:	4812      	ldr	r0, [pc, #72]	; (800b7bc <pbuf_remove_header+0x9c>)
 800b772:	f009 f9a3 	bl	8014abc <iprintf>
 800b776:	2301      	movs	r3, #1
 800b778:	e017      	b.n	800b7aa <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	685b      	ldr	r3, [r3, #4]
 800b77e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	685a      	ldr	r2, [r3, #4]
 800b784:	683b      	ldr	r3, [r7, #0]
 800b786:	441a      	add	r2, r3
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	895a      	ldrh	r2, [r3, #10]
 800b790:	89fb      	ldrh	r3, [r7, #14]
 800b792:	1ad3      	subs	r3, r2, r3
 800b794:	b29a      	uxth	r2, r3
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	891a      	ldrh	r2, [r3, #8]
 800b79e:	89fb      	ldrh	r3, [r7, #14]
 800b7a0:	1ad3      	subs	r3, r2, r3
 800b7a2:	b29a      	uxth	r2, r3
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800b7a8:	2300      	movs	r3, #0
}
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	3710      	adds	r7, #16
 800b7ae:	46bd      	mov	sp, r7
 800b7b0:	bd80      	pop	{r7, pc}
 800b7b2:	bf00      	nop
 800b7b4:	08016844 	.word	0x08016844
 800b7b8:	080169a8 	.word	0x080169a8
 800b7bc:	080168a4 	.word	0x080168a4
 800b7c0:	080169b4 	.word	0x080169b4

0800b7c4 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800b7c4:	b580      	push	{r7, lr}
 800b7c6:	b082      	sub	sp, #8
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	6078      	str	r0, [r7, #4]
 800b7cc:	460b      	mov	r3, r1
 800b7ce:	807b      	strh	r3, [r7, #2]
 800b7d0:	4613      	mov	r3, r2
 800b7d2:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800b7d4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	da08      	bge.n	800b7ee <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800b7dc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b7e0:	425b      	negs	r3, r3
 800b7e2:	4619      	mov	r1, r3
 800b7e4:	6878      	ldr	r0, [r7, #4]
 800b7e6:	f7ff ff9b 	bl	800b720 <pbuf_remove_header>
 800b7ea:	4603      	mov	r3, r0
 800b7ec:	e007      	b.n	800b7fe <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800b7ee:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b7f2:	787a      	ldrb	r2, [r7, #1]
 800b7f4:	4619      	mov	r1, r3
 800b7f6:	6878      	ldr	r0, [r7, #4]
 800b7f8:	f7ff ff1a 	bl	800b630 <pbuf_add_header_impl>
 800b7fc:	4603      	mov	r3, r0
  }
}
 800b7fe:	4618      	mov	r0, r3
 800b800:	3708      	adds	r7, #8
 800b802:	46bd      	mov	sp, r7
 800b804:	bd80      	pop	{r7, pc}

0800b806 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800b806:	b580      	push	{r7, lr}
 800b808:	b082      	sub	sp, #8
 800b80a:	af00      	add	r7, sp, #0
 800b80c:	6078      	str	r0, [r7, #4]
 800b80e:	460b      	mov	r3, r1
 800b810:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800b812:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b816:	2201      	movs	r2, #1
 800b818:	4619      	mov	r1, r3
 800b81a:	6878      	ldr	r0, [r7, #4]
 800b81c:	f7ff ffd2 	bl	800b7c4 <pbuf_header_impl>
 800b820:	4603      	mov	r3, r0
}
 800b822:	4618      	mov	r0, r3
 800b824:	3708      	adds	r7, #8
 800b826:	46bd      	mov	sp, r7
 800b828:	bd80      	pop	{r7, pc}
	...

0800b82c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800b82c:	b580      	push	{r7, lr}
 800b82e:	b086      	sub	sp, #24
 800b830:	af00      	add	r7, sp, #0
 800b832:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	2b00      	cmp	r3, #0
 800b838:	d10b      	bne.n	800b852 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d106      	bne.n	800b84e <pbuf_free+0x22>
 800b840:	4b38      	ldr	r3, [pc, #224]	; (800b924 <pbuf_free+0xf8>)
 800b842:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800b846:	4938      	ldr	r1, [pc, #224]	; (800b928 <pbuf_free+0xfc>)
 800b848:	4838      	ldr	r0, [pc, #224]	; (800b92c <pbuf_free+0x100>)
 800b84a:	f009 f937 	bl	8014abc <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800b84e:	2300      	movs	r3, #0
 800b850:	e063      	b.n	800b91a <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800b852:	2300      	movs	r3, #0
 800b854:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800b856:	e05c      	b.n	800b912 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	7b9b      	ldrb	r3, [r3, #14]
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d106      	bne.n	800b86e <pbuf_free+0x42>
 800b860:	4b30      	ldr	r3, [pc, #192]	; (800b924 <pbuf_free+0xf8>)
 800b862:	f240 22f1 	movw	r2, #753	; 0x2f1
 800b866:	4932      	ldr	r1, [pc, #200]	; (800b930 <pbuf_free+0x104>)
 800b868:	4830      	ldr	r0, [pc, #192]	; (800b92c <pbuf_free+0x100>)
 800b86a:	f009 f927 	bl	8014abc <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	7b9b      	ldrb	r3, [r3, #14]
 800b872:	3b01      	subs	r3, #1
 800b874:	b2da      	uxtb	r2, r3
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	739a      	strb	r2, [r3, #14]
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	7b9b      	ldrb	r3, [r3, #14]
 800b87e:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800b880:	7dbb      	ldrb	r3, [r7, #22]
 800b882:	2b00      	cmp	r3, #0
 800b884:	d143      	bne.n	800b90e <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	7b1b      	ldrb	r3, [r3, #12]
 800b890:	f003 030f 	and.w	r3, r3, #15
 800b894:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	7b5b      	ldrb	r3, [r3, #13]
 800b89a:	f003 0302 	and.w	r3, r3, #2
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d011      	beq.n	800b8c6 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800b8a6:	68bb      	ldr	r3, [r7, #8]
 800b8a8:	691b      	ldr	r3, [r3, #16]
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d106      	bne.n	800b8bc <pbuf_free+0x90>
 800b8ae:	4b1d      	ldr	r3, [pc, #116]	; (800b924 <pbuf_free+0xf8>)
 800b8b0:	f240 22ff 	movw	r2, #767	; 0x2ff
 800b8b4:	491f      	ldr	r1, [pc, #124]	; (800b934 <pbuf_free+0x108>)
 800b8b6:	481d      	ldr	r0, [pc, #116]	; (800b92c <pbuf_free+0x100>)
 800b8b8:	f009 f900 	bl	8014abc <iprintf>
        pc->custom_free_function(p);
 800b8bc:	68bb      	ldr	r3, [r7, #8]
 800b8be:	691b      	ldr	r3, [r3, #16]
 800b8c0:	6878      	ldr	r0, [r7, #4]
 800b8c2:	4798      	blx	r3
 800b8c4:	e01d      	b.n	800b902 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800b8c6:	7bfb      	ldrb	r3, [r7, #15]
 800b8c8:	2b02      	cmp	r3, #2
 800b8ca:	d104      	bne.n	800b8d6 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800b8cc:	6879      	ldr	r1, [r7, #4]
 800b8ce:	2008      	movs	r0, #8
 800b8d0:	f7ff f936 	bl	800ab40 <memp_free>
 800b8d4:	e015      	b.n	800b902 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800b8d6:	7bfb      	ldrb	r3, [r7, #15]
 800b8d8:	2b01      	cmp	r3, #1
 800b8da:	d104      	bne.n	800b8e6 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800b8dc:	6879      	ldr	r1, [r7, #4]
 800b8de:	2007      	movs	r0, #7
 800b8e0:	f7ff f92e 	bl	800ab40 <memp_free>
 800b8e4:	e00d      	b.n	800b902 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800b8e6:	7bfb      	ldrb	r3, [r7, #15]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d103      	bne.n	800b8f4 <pbuf_free+0xc8>
          mem_free(p);
 800b8ec:	6878      	ldr	r0, [r7, #4]
 800b8ee:	f7fe fdb7 	bl	800a460 <mem_free>
 800b8f2:	e006      	b.n	800b902 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800b8f4:	4b0b      	ldr	r3, [pc, #44]	; (800b924 <pbuf_free+0xf8>)
 800b8f6:	f240 320f 	movw	r2, #783	; 0x30f
 800b8fa:	490f      	ldr	r1, [pc, #60]	; (800b938 <pbuf_free+0x10c>)
 800b8fc:	480b      	ldr	r0, [pc, #44]	; (800b92c <pbuf_free+0x100>)
 800b8fe:	f009 f8dd 	bl	8014abc <iprintf>
        }
      }
      count++;
 800b902:	7dfb      	ldrb	r3, [r7, #23]
 800b904:	3301      	adds	r3, #1
 800b906:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800b908:	693b      	ldr	r3, [r7, #16]
 800b90a:	607b      	str	r3, [r7, #4]
 800b90c:	e001      	b.n	800b912 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800b90e:	2300      	movs	r3, #0
 800b910:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	2b00      	cmp	r3, #0
 800b916:	d19f      	bne.n	800b858 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800b918:	7dfb      	ldrb	r3, [r7, #23]
}
 800b91a:	4618      	mov	r0, r3
 800b91c:	3718      	adds	r7, #24
 800b91e:	46bd      	mov	sp, r7
 800b920:	bd80      	pop	{r7, pc}
 800b922:	bf00      	nop
 800b924:	08016844 	.word	0x08016844
 800b928:	080169a8 	.word	0x080169a8
 800b92c:	080168a4 	.word	0x080168a4
 800b930:	080169d4 	.word	0x080169d4
 800b934:	080169ec 	.word	0x080169ec
 800b938:	08016a10 	.word	0x08016a10

0800b93c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800b93c:	b480      	push	{r7}
 800b93e:	b085      	sub	sp, #20
 800b940:	af00      	add	r7, sp, #0
 800b942:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800b944:	2300      	movs	r3, #0
 800b946:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800b948:	e005      	b.n	800b956 <pbuf_clen+0x1a>
    ++len;
 800b94a:	89fb      	ldrh	r3, [r7, #14]
 800b94c:	3301      	adds	r3, #1
 800b94e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d1f6      	bne.n	800b94a <pbuf_clen+0xe>
  }
  return len;
 800b95c:	89fb      	ldrh	r3, [r7, #14]
}
 800b95e:	4618      	mov	r0, r3
 800b960:	3714      	adds	r7, #20
 800b962:	46bd      	mov	sp, r7
 800b964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b968:	4770      	bx	lr
	...

0800b96c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800b96c:	b580      	push	{r7, lr}
 800b96e:	b082      	sub	sp, #8
 800b970:	af00      	add	r7, sp, #0
 800b972:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	2b00      	cmp	r3, #0
 800b978:	d010      	beq.n	800b99c <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	7b9b      	ldrb	r3, [r3, #14]
 800b97e:	3301      	adds	r3, #1
 800b980:	b2da      	uxtb	r2, r3
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	7b9b      	ldrb	r3, [r3, #14]
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d106      	bne.n	800b99c <pbuf_ref+0x30>
 800b98e:	4b05      	ldr	r3, [pc, #20]	; (800b9a4 <pbuf_ref+0x38>)
 800b990:	f240 3242 	movw	r2, #834	; 0x342
 800b994:	4904      	ldr	r1, [pc, #16]	; (800b9a8 <pbuf_ref+0x3c>)
 800b996:	4805      	ldr	r0, [pc, #20]	; (800b9ac <pbuf_ref+0x40>)
 800b998:	f009 f890 	bl	8014abc <iprintf>
  }
}
 800b99c:	bf00      	nop
 800b99e:	3708      	adds	r7, #8
 800b9a0:	46bd      	mov	sp, r7
 800b9a2:	bd80      	pop	{r7, pc}
 800b9a4:	08016844 	.word	0x08016844
 800b9a8:	08016a24 	.word	0x08016a24
 800b9ac:	080168a4 	.word	0x080168a4

0800b9b0 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800b9b0:	b580      	push	{r7, lr}
 800b9b2:	b084      	sub	sp, #16
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	6078      	str	r0, [r7, #4]
 800b9b8:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d002      	beq.n	800b9c6 <pbuf_cat+0x16>
 800b9c0:	683b      	ldr	r3, [r7, #0]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d107      	bne.n	800b9d6 <pbuf_cat+0x26>
 800b9c6:	4b20      	ldr	r3, [pc, #128]	; (800ba48 <pbuf_cat+0x98>)
 800b9c8:	f240 3259 	movw	r2, #857	; 0x359
 800b9cc:	491f      	ldr	r1, [pc, #124]	; (800ba4c <pbuf_cat+0x9c>)
 800b9ce:	4820      	ldr	r0, [pc, #128]	; (800ba50 <pbuf_cat+0xa0>)
 800b9d0:	f009 f874 	bl	8014abc <iprintf>
 800b9d4:	e034      	b.n	800ba40 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	60fb      	str	r3, [r7, #12]
 800b9da:	e00a      	b.n	800b9f2 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	891a      	ldrh	r2, [r3, #8]
 800b9e0:	683b      	ldr	r3, [r7, #0]
 800b9e2:	891b      	ldrh	r3, [r3, #8]
 800b9e4:	4413      	add	r3, r2
 800b9e6:	b29a      	uxth	r2, r3
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	60fb      	str	r3, [r7, #12]
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d1f0      	bne.n	800b9dc <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	891a      	ldrh	r2, [r3, #8]
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	895b      	ldrh	r3, [r3, #10]
 800ba02:	429a      	cmp	r2, r3
 800ba04:	d006      	beq.n	800ba14 <pbuf_cat+0x64>
 800ba06:	4b10      	ldr	r3, [pc, #64]	; (800ba48 <pbuf_cat+0x98>)
 800ba08:	f240 3262 	movw	r2, #866	; 0x362
 800ba0c:	4911      	ldr	r1, [pc, #68]	; (800ba54 <pbuf_cat+0xa4>)
 800ba0e:	4810      	ldr	r0, [pc, #64]	; (800ba50 <pbuf_cat+0xa0>)
 800ba10:	f009 f854 	bl	8014abc <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d006      	beq.n	800ba2a <pbuf_cat+0x7a>
 800ba1c:	4b0a      	ldr	r3, [pc, #40]	; (800ba48 <pbuf_cat+0x98>)
 800ba1e:	f240 3263 	movw	r2, #867	; 0x363
 800ba22:	490d      	ldr	r1, [pc, #52]	; (800ba58 <pbuf_cat+0xa8>)
 800ba24:	480a      	ldr	r0, [pc, #40]	; (800ba50 <pbuf_cat+0xa0>)
 800ba26:	f009 f849 	bl	8014abc <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	891a      	ldrh	r2, [r3, #8]
 800ba2e:	683b      	ldr	r3, [r7, #0]
 800ba30:	891b      	ldrh	r3, [r3, #8]
 800ba32:	4413      	add	r3, r2
 800ba34:	b29a      	uxth	r2, r3
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	683a      	ldr	r2, [r7, #0]
 800ba3e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800ba40:	3710      	adds	r7, #16
 800ba42:	46bd      	mov	sp, r7
 800ba44:	bd80      	pop	{r7, pc}
 800ba46:	bf00      	nop
 800ba48:	08016844 	.word	0x08016844
 800ba4c:	08016a38 	.word	0x08016a38
 800ba50:	080168a4 	.word	0x080168a4
 800ba54:	08016a70 	.word	0x08016a70
 800ba58:	08016aa0 	.word	0x08016aa0

0800ba5c <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800ba5c:	b580      	push	{r7, lr}
 800ba5e:	b082      	sub	sp, #8
 800ba60:	af00      	add	r7, sp, #0
 800ba62:	6078      	str	r0, [r7, #4]
 800ba64:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800ba66:	6839      	ldr	r1, [r7, #0]
 800ba68:	6878      	ldr	r0, [r7, #4]
 800ba6a:	f7ff ffa1 	bl	800b9b0 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800ba6e:	6838      	ldr	r0, [r7, #0]
 800ba70:	f7ff ff7c 	bl	800b96c <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800ba74:	bf00      	nop
 800ba76:	3708      	adds	r7, #8
 800ba78:	46bd      	mov	sp, r7
 800ba7a:	bd80      	pop	{r7, pc}

0800ba7c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800ba7c:	b580      	push	{r7, lr}
 800ba7e:	b086      	sub	sp, #24
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	6078      	str	r0, [r7, #4]
 800ba84:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800ba86:	2300      	movs	r3, #0
 800ba88:	617b      	str	r3, [r7, #20]
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d008      	beq.n	800baa6 <pbuf_copy+0x2a>
 800ba94:	683b      	ldr	r3, [r7, #0]
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d005      	beq.n	800baa6 <pbuf_copy+0x2a>
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	891a      	ldrh	r2, [r3, #8]
 800ba9e:	683b      	ldr	r3, [r7, #0]
 800baa0:	891b      	ldrh	r3, [r3, #8]
 800baa2:	429a      	cmp	r2, r3
 800baa4:	d209      	bcs.n	800baba <pbuf_copy+0x3e>
 800baa6:	4b57      	ldr	r3, [pc, #348]	; (800bc04 <pbuf_copy+0x188>)
 800baa8:	f240 32c9 	movw	r2, #969	; 0x3c9
 800baac:	4956      	ldr	r1, [pc, #344]	; (800bc08 <pbuf_copy+0x18c>)
 800baae:	4857      	ldr	r0, [pc, #348]	; (800bc0c <pbuf_copy+0x190>)
 800bab0:	f009 f804 	bl	8014abc <iprintf>
 800bab4:	f06f 030f 	mvn.w	r3, #15
 800bab8:	e09f      	b.n	800bbfa <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	895b      	ldrh	r3, [r3, #10]
 800babe:	461a      	mov	r2, r3
 800bac0:	697b      	ldr	r3, [r7, #20]
 800bac2:	1ad2      	subs	r2, r2, r3
 800bac4:	683b      	ldr	r3, [r7, #0]
 800bac6:	895b      	ldrh	r3, [r3, #10]
 800bac8:	4619      	mov	r1, r3
 800baca:	693b      	ldr	r3, [r7, #16]
 800bacc:	1acb      	subs	r3, r1, r3
 800bace:	429a      	cmp	r2, r3
 800bad0:	d306      	bcc.n	800bae0 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800bad2:	683b      	ldr	r3, [r7, #0]
 800bad4:	895b      	ldrh	r3, [r3, #10]
 800bad6:	461a      	mov	r2, r3
 800bad8:	693b      	ldr	r3, [r7, #16]
 800bada:	1ad3      	subs	r3, r2, r3
 800badc:	60fb      	str	r3, [r7, #12]
 800bade:	e005      	b.n	800baec <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	895b      	ldrh	r3, [r3, #10]
 800bae4:	461a      	mov	r2, r3
 800bae6:	697b      	ldr	r3, [r7, #20]
 800bae8:	1ad3      	subs	r3, r2, r3
 800baea:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	685a      	ldr	r2, [r3, #4]
 800baf0:	697b      	ldr	r3, [r7, #20]
 800baf2:	18d0      	adds	r0, r2, r3
 800baf4:	683b      	ldr	r3, [r7, #0]
 800baf6:	685a      	ldr	r2, [r3, #4]
 800baf8:	693b      	ldr	r3, [r7, #16]
 800bafa:	4413      	add	r3, r2
 800bafc:	68fa      	ldr	r2, [r7, #12]
 800bafe:	4619      	mov	r1, r3
 800bb00:	f008 ffac 	bl	8014a5c <memcpy>
    offset_to += len;
 800bb04:	697a      	ldr	r2, [r7, #20]
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	4413      	add	r3, r2
 800bb0a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800bb0c:	693a      	ldr	r2, [r7, #16]
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	4413      	add	r3, r2
 800bb12:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	895b      	ldrh	r3, [r3, #10]
 800bb18:	461a      	mov	r2, r3
 800bb1a:	697b      	ldr	r3, [r7, #20]
 800bb1c:	4293      	cmp	r3, r2
 800bb1e:	d906      	bls.n	800bb2e <pbuf_copy+0xb2>
 800bb20:	4b38      	ldr	r3, [pc, #224]	; (800bc04 <pbuf_copy+0x188>)
 800bb22:	f240 32d9 	movw	r2, #985	; 0x3d9
 800bb26:	493a      	ldr	r1, [pc, #232]	; (800bc10 <pbuf_copy+0x194>)
 800bb28:	4838      	ldr	r0, [pc, #224]	; (800bc0c <pbuf_copy+0x190>)
 800bb2a:	f008 ffc7 	bl	8014abc <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800bb2e:	683b      	ldr	r3, [r7, #0]
 800bb30:	895b      	ldrh	r3, [r3, #10]
 800bb32:	461a      	mov	r2, r3
 800bb34:	693b      	ldr	r3, [r7, #16]
 800bb36:	4293      	cmp	r3, r2
 800bb38:	d906      	bls.n	800bb48 <pbuf_copy+0xcc>
 800bb3a:	4b32      	ldr	r3, [pc, #200]	; (800bc04 <pbuf_copy+0x188>)
 800bb3c:	f240 32da 	movw	r2, #986	; 0x3da
 800bb40:	4934      	ldr	r1, [pc, #208]	; (800bc14 <pbuf_copy+0x198>)
 800bb42:	4832      	ldr	r0, [pc, #200]	; (800bc0c <pbuf_copy+0x190>)
 800bb44:	f008 ffba 	bl	8014abc <iprintf>
    if (offset_from >= p_from->len) {
 800bb48:	683b      	ldr	r3, [r7, #0]
 800bb4a:	895b      	ldrh	r3, [r3, #10]
 800bb4c:	461a      	mov	r2, r3
 800bb4e:	693b      	ldr	r3, [r7, #16]
 800bb50:	4293      	cmp	r3, r2
 800bb52:	d304      	bcc.n	800bb5e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800bb54:	2300      	movs	r3, #0
 800bb56:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800bb58:	683b      	ldr	r3, [r7, #0]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	895b      	ldrh	r3, [r3, #10]
 800bb62:	461a      	mov	r2, r3
 800bb64:	697b      	ldr	r3, [r7, #20]
 800bb66:	4293      	cmp	r3, r2
 800bb68:	d114      	bne.n	800bb94 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800bb6a:	2300      	movs	r3, #0
 800bb6c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d10c      	bne.n	800bb94 <pbuf_copy+0x118>
 800bb7a:	683b      	ldr	r3, [r7, #0]
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d009      	beq.n	800bb94 <pbuf_copy+0x118>
 800bb80:	4b20      	ldr	r3, [pc, #128]	; (800bc04 <pbuf_copy+0x188>)
 800bb82:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800bb86:	4924      	ldr	r1, [pc, #144]	; (800bc18 <pbuf_copy+0x19c>)
 800bb88:	4820      	ldr	r0, [pc, #128]	; (800bc0c <pbuf_copy+0x190>)
 800bb8a:	f008 ff97 	bl	8014abc <iprintf>
 800bb8e:	f06f 030f 	mvn.w	r3, #15
 800bb92:	e032      	b.n	800bbfa <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800bb94:	683b      	ldr	r3, [r7, #0]
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d013      	beq.n	800bbc2 <pbuf_copy+0x146>
 800bb9a:	683b      	ldr	r3, [r7, #0]
 800bb9c:	895a      	ldrh	r2, [r3, #10]
 800bb9e:	683b      	ldr	r3, [r7, #0]
 800bba0:	891b      	ldrh	r3, [r3, #8]
 800bba2:	429a      	cmp	r2, r3
 800bba4:	d10d      	bne.n	800bbc2 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800bba6:	683b      	ldr	r3, [r7, #0]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d009      	beq.n	800bbc2 <pbuf_copy+0x146>
 800bbae:	4b15      	ldr	r3, [pc, #84]	; (800bc04 <pbuf_copy+0x188>)
 800bbb0:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800bbb4:	4919      	ldr	r1, [pc, #100]	; (800bc1c <pbuf_copy+0x1a0>)
 800bbb6:	4815      	ldr	r0, [pc, #84]	; (800bc0c <pbuf_copy+0x190>)
 800bbb8:	f008 ff80 	bl	8014abc <iprintf>
 800bbbc:	f06f 0305 	mvn.w	r3, #5
 800bbc0:	e01b      	b.n	800bbfa <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d013      	beq.n	800bbf0 <pbuf_copy+0x174>
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	895a      	ldrh	r2, [r3, #10]
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	891b      	ldrh	r3, [r3, #8]
 800bbd0:	429a      	cmp	r2, r3
 800bbd2:	d10d      	bne.n	800bbf0 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d009      	beq.n	800bbf0 <pbuf_copy+0x174>
 800bbdc:	4b09      	ldr	r3, [pc, #36]	; (800bc04 <pbuf_copy+0x188>)
 800bbde:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800bbe2:	490e      	ldr	r1, [pc, #56]	; (800bc1c <pbuf_copy+0x1a0>)
 800bbe4:	4809      	ldr	r0, [pc, #36]	; (800bc0c <pbuf_copy+0x190>)
 800bbe6:	f008 ff69 	bl	8014abc <iprintf>
 800bbea:	f06f 0305 	mvn.w	r3, #5
 800bbee:	e004      	b.n	800bbfa <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800bbf0:	683b      	ldr	r3, [r7, #0]
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	f47f af61 	bne.w	800baba <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800bbf8:	2300      	movs	r3, #0
}
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	3718      	adds	r7, #24
 800bbfe:	46bd      	mov	sp, r7
 800bc00:	bd80      	pop	{r7, pc}
 800bc02:	bf00      	nop
 800bc04:	08016844 	.word	0x08016844
 800bc08:	08016aec 	.word	0x08016aec
 800bc0c:	080168a4 	.word	0x080168a4
 800bc10:	08016b1c 	.word	0x08016b1c
 800bc14:	08016b34 	.word	0x08016b34
 800bc18:	08016b50 	.word	0x08016b50
 800bc1c:	08016b60 	.word	0x08016b60

0800bc20 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800bc20:	b580      	push	{r7, lr}
 800bc22:	b088      	sub	sp, #32
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	60f8      	str	r0, [r7, #12]
 800bc28:	60b9      	str	r1, [r7, #8]
 800bc2a:	4611      	mov	r1, r2
 800bc2c:	461a      	mov	r2, r3
 800bc2e:	460b      	mov	r3, r1
 800bc30:	80fb      	strh	r3, [r7, #6]
 800bc32:	4613      	mov	r3, r2
 800bc34:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800bc36:	2300      	movs	r3, #0
 800bc38:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800bc3a:	2300      	movs	r3, #0
 800bc3c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d108      	bne.n	800bc56 <pbuf_copy_partial+0x36>
 800bc44:	4b2b      	ldr	r3, [pc, #172]	; (800bcf4 <pbuf_copy_partial+0xd4>)
 800bc46:	f240 420a 	movw	r2, #1034	; 0x40a
 800bc4a:	492b      	ldr	r1, [pc, #172]	; (800bcf8 <pbuf_copy_partial+0xd8>)
 800bc4c:	482b      	ldr	r0, [pc, #172]	; (800bcfc <pbuf_copy_partial+0xdc>)
 800bc4e:	f008 ff35 	bl	8014abc <iprintf>
 800bc52:	2300      	movs	r3, #0
 800bc54:	e04a      	b.n	800bcec <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800bc56:	68bb      	ldr	r3, [r7, #8]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d108      	bne.n	800bc6e <pbuf_copy_partial+0x4e>
 800bc5c:	4b25      	ldr	r3, [pc, #148]	; (800bcf4 <pbuf_copy_partial+0xd4>)
 800bc5e:	f240 420b 	movw	r2, #1035	; 0x40b
 800bc62:	4927      	ldr	r1, [pc, #156]	; (800bd00 <pbuf_copy_partial+0xe0>)
 800bc64:	4825      	ldr	r0, [pc, #148]	; (800bcfc <pbuf_copy_partial+0xdc>)
 800bc66:	f008 ff29 	bl	8014abc <iprintf>
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	e03e      	b.n	800bcec <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	61fb      	str	r3, [r7, #28]
 800bc72:	e034      	b.n	800bcde <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800bc74:	88bb      	ldrh	r3, [r7, #4]
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d00a      	beq.n	800bc90 <pbuf_copy_partial+0x70>
 800bc7a:	69fb      	ldr	r3, [r7, #28]
 800bc7c:	895b      	ldrh	r3, [r3, #10]
 800bc7e:	88ba      	ldrh	r2, [r7, #4]
 800bc80:	429a      	cmp	r2, r3
 800bc82:	d305      	bcc.n	800bc90 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800bc84:	69fb      	ldr	r3, [r7, #28]
 800bc86:	895b      	ldrh	r3, [r3, #10]
 800bc88:	88ba      	ldrh	r2, [r7, #4]
 800bc8a:	1ad3      	subs	r3, r2, r3
 800bc8c:	80bb      	strh	r3, [r7, #4]
 800bc8e:	e023      	b.n	800bcd8 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800bc90:	69fb      	ldr	r3, [r7, #28]
 800bc92:	895a      	ldrh	r2, [r3, #10]
 800bc94:	88bb      	ldrh	r3, [r7, #4]
 800bc96:	1ad3      	subs	r3, r2, r3
 800bc98:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800bc9a:	8b3a      	ldrh	r2, [r7, #24]
 800bc9c:	88fb      	ldrh	r3, [r7, #6]
 800bc9e:	429a      	cmp	r2, r3
 800bca0:	d901      	bls.n	800bca6 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800bca2:	88fb      	ldrh	r3, [r7, #6]
 800bca4:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800bca6:	8b7b      	ldrh	r3, [r7, #26]
 800bca8:	68ba      	ldr	r2, [r7, #8]
 800bcaa:	18d0      	adds	r0, r2, r3
 800bcac:	69fb      	ldr	r3, [r7, #28]
 800bcae:	685a      	ldr	r2, [r3, #4]
 800bcb0:	88bb      	ldrh	r3, [r7, #4]
 800bcb2:	4413      	add	r3, r2
 800bcb4:	8b3a      	ldrh	r2, [r7, #24]
 800bcb6:	4619      	mov	r1, r3
 800bcb8:	f008 fed0 	bl	8014a5c <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800bcbc:	8afa      	ldrh	r2, [r7, #22]
 800bcbe:	8b3b      	ldrh	r3, [r7, #24]
 800bcc0:	4413      	add	r3, r2
 800bcc2:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800bcc4:	8b7a      	ldrh	r2, [r7, #26]
 800bcc6:	8b3b      	ldrh	r3, [r7, #24]
 800bcc8:	4413      	add	r3, r2
 800bcca:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800bccc:	88fa      	ldrh	r2, [r7, #6]
 800bcce:	8b3b      	ldrh	r3, [r7, #24]
 800bcd0:	1ad3      	subs	r3, r2, r3
 800bcd2:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800bcd4:	2300      	movs	r3, #0
 800bcd6:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800bcd8:	69fb      	ldr	r3, [r7, #28]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	61fb      	str	r3, [r7, #28]
 800bcde:	88fb      	ldrh	r3, [r7, #6]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d002      	beq.n	800bcea <pbuf_copy_partial+0xca>
 800bce4:	69fb      	ldr	r3, [r7, #28]
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d1c4      	bne.n	800bc74 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800bcea:	8afb      	ldrh	r3, [r7, #22]
}
 800bcec:	4618      	mov	r0, r3
 800bcee:	3720      	adds	r7, #32
 800bcf0:	46bd      	mov	sp, r7
 800bcf2:	bd80      	pop	{r7, pc}
 800bcf4:	08016844 	.word	0x08016844
 800bcf8:	08016b8c 	.word	0x08016b8c
 800bcfc:	080168a4 	.word	0x080168a4
 800bd00:	08016bac 	.word	0x08016bac

0800bd04 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800bd04:	b580      	push	{r7, lr}
 800bd06:	b084      	sub	sp, #16
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	4603      	mov	r3, r0
 800bd0c:	603a      	str	r2, [r7, #0]
 800bd0e:	71fb      	strb	r3, [r7, #7]
 800bd10:	460b      	mov	r3, r1
 800bd12:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800bd14:	683b      	ldr	r3, [r7, #0]
 800bd16:	8919      	ldrh	r1, [r3, #8]
 800bd18:	88ba      	ldrh	r2, [r7, #4]
 800bd1a:	79fb      	ldrb	r3, [r7, #7]
 800bd1c:	4618      	mov	r0, r3
 800bd1e:	f7ff faa1 	bl	800b264 <pbuf_alloc>
 800bd22:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d101      	bne.n	800bd2e <pbuf_clone+0x2a>
    return NULL;
 800bd2a:	2300      	movs	r3, #0
 800bd2c:	e011      	b.n	800bd52 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800bd2e:	6839      	ldr	r1, [r7, #0]
 800bd30:	68f8      	ldr	r0, [r7, #12]
 800bd32:	f7ff fea3 	bl	800ba7c <pbuf_copy>
 800bd36:	4603      	mov	r3, r0
 800bd38:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800bd3a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d006      	beq.n	800bd50 <pbuf_clone+0x4c>
 800bd42:	4b06      	ldr	r3, [pc, #24]	; (800bd5c <pbuf_clone+0x58>)
 800bd44:	f240 5224 	movw	r2, #1316	; 0x524
 800bd48:	4905      	ldr	r1, [pc, #20]	; (800bd60 <pbuf_clone+0x5c>)
 800bd4a:	4806      	ldr	r0, [pc, #24]	; (800bd64 <pbuf_clone+0x60>)
 800bd4c:	f008 feb6 	bl	8014abc <iprintf>
  return q;
 800bd50:	68fb      	ldr	r3, [r7, #12]
}
 800bd52:	4618      	mov	r0, r3
 800bd54:	3710      	adds	r7, #16
 800bd56:	46bd      	mov	sp, r7
 800bd58:	bd80      	pop	{r7, pc}
 800bd5a:	bf00      	nop
 800bd5c:	08016844 	.word	0x08016844
 800bd60:	08016cb8 	.word	0x08016cb8
 800bd64:	080168a4 	.word	0x080168a4

0800bd68 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800bd68:	b580      	push	{r7, lr}
 800bd6a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800bd6c:	f008 febe 	bl	8014aec <rand>
 800bd70:	4603      	mov	r3, r0
 800bd72:	b29b      	uxth	r3, r3
 800bd74:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800bd78:	b29b      	uxth	r3, r3
 800bd7a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800bd7e:	b29a      	uxth	r2, r3
 800bd80:	4b01      	ldr	r3, [pc, #4]	; (800bd88 <tcp_init+0x20>)
 800bd82:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800bd84:	bf00      	nop
 800bd86:	bd80      	pop	{r7, pc}
 800bd88:	24000034 	.word	0x24000034

0800bd8c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800bd8c:	b580      	push	{r7, lr}
 800bd8e:	b082      	sub	sp, #8
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	7d1b      	ldrb	r3, [r3, #20]
 800bd98:	2b01      	cmp	r3, #1
 800bd9a:	d105      	bne.n	800bda8 <tcp_free+0x1c>
 800bd9c:	4b06      	ldr	r3, [pc, #24]	; (800bdb8 <tcp_free+0x2c>)
 800bd9e:	22d4      	movs	r2, #212	; 0xd4
 800bda0:	4906      	ldr	r1, [pc, #24]	; (800bdbc <tcp_free+0x30>)
 800bda2:	4807      	ldr	r0, [pc, #28]	; (800bdc0 <tcp_free+0x34>)
 800bda4:	f008 fe8a 	bl	8014abc <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800bda8:	6879      	ldr	r1, [r7, #4]
 800bdaa:	2001      	movs	r0, #1
 800bdac:	f7fe fec8 	bl	800ab40 <memp_free>
}
 800bdb0:	bf00      	nop
 800bdb2:	3708      	adds	r7, #8
 800bdb4:	46bd      	mov	sp, r7
 800bdb6:	bd80      	pop	{r7, pc}
 800bdb8:	08016d44 	.word	0x08016d44
 800bdbc:	08016d74 	.word	0x08016d74
 800bdc0:	08016d88 	.word	0x08016d88

0800bdc4 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800bdc4:	b580      	push	{r7, lr}
 800bdc6:	b082      	sub	sp, #8
 800bdc8:	af00      	add	r7, sp, #0
 800bdca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	7d1b      	ldrb	r3, [r3, #20]
 800bdd0:	2b01      	cmp	r3, #1
 800bdd2:	d105      	bne.n	800bde0 <tcp_free_listen+0x1c>
 800bdd4:	4b06      	ldr	r3, [pc, #24]	; (800bdf0 <tcp_free_listen+0x2c>)
 800bdd6:	22df      	movs	r2, #223	; 0xdf
 800bdd8:	4906      	ldr	r1, [pc, #24]	; (800bdf4 <tcp_free_listen+0x30>)
 800bdda:	4807      	ldr	r0, [pc, #28]	; (800bdf8 <tcp_free_listen+0x34>)
 800bddc:	f008 fe6e 	bl	8014abc <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800bde0:	6879      	ldr	r1, [r7, #4]
 800bde2:	2002      	movs	r0, #2
 800bde4:	f7fe feac 	bl	800ab40 <memp_free>
}
 800bde8:	bf00      	nop
 800bdea:	3708      	adds	r7, #8
 800bdec:	46bd      	mov	sp, r7
 800bdee:	bd80      	pop	{r7, pc}
 800bdf0:	08016d44 	.word	0x08016d44
 800bdf4:	08016db0 	.word	0x08016db0
 800bdf8:	08016d88 	.word	0x08016d88

0800bdfc <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800bdfc:	b580      	push	{r7, lr}
 800bdfe:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800be00:	f001 f85c 	bl	800cebc <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800be04:	4b07      	ldr	r3, [pc, #28]	; (800be24 <tcp_tmr+0x28>)
 800be06:	781b      	ldrb	r3, [r3, #0]
 800be08:	3301      	adds	r3, #1
 800be0a:	b2da      	uxtb	r2, r3
 800be0c:	4b05      	ldr	r3, [pc, #20]	; (800be24 <tcp_tmr+0x28>)
 800be0e:	701a      	strb	r2, [r3, #0]
 800be10:	4b04      	ldr	r3, [pc, #16]	; (800be24 <tcp_tmr+0x28>)
 800be12:	781b      	ldrb	r3, [r3, #0]
 800be14:	f003 0301 	and.w	r3, r3, #1
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d001      	beq.n	800be20 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800be1c:	f000 fd0e 	bl	800c83c <tcp_slowtmr>
  }
}
 800be20:	bf00      	nop
 800be22:	bd80      	pop	{r7, pc}
 800be24:	24000555 	.word	0x24000555

0800be28 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800be28:	b580      	push	{r7, lr}
 800be2a:	b084      	sub	sp, #16
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	6078      	str	r0, [r7, #4]
 800be30:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800be32:	683b      	ldr	r3, [r7, #0]
 800be34:	2b00      	cmp	r3, #0
 800be36:	d105      	bne.n	800be44 <tcp_remove_listener+0x1c>
 800be38:	4b0d      	ldr	r3, [pc, #52]	; (800be70 <tcp_remove_listener+0x48>)
 800be3a:	22ff      	movs	r2, #255	; 0xff
 800be3c:	490d      	ldr	r1, [pc, #52]	; (800be74 <tcp_remove_listener+0x4c>)
 800be3e:	480e      	ldr	r0, [pc, #56]	; (800be78 <tcp_remove_listener+0x50>)
 800be40:	f008 fe3c 	bl	8014abc <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	60fb      	str	r3, [r7, #12]
 800be48:	e00a      	b.n	800be60 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be4e:	683a      	ldr	r2, [r7, #0]
 800be50:	429a      	cmp	r2, r3
 800be52:	d102      	bne.n	800be5a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	2200      	movs	r2, #0
 800be58:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	68db      	ldr	r3, [r3, #12]
 800be5e:	60fb      	str	r3, [r7, #12]
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	2b00      	cmp	r3, #0
 800be64:	d1f1      	bne.n	800be4a <tcp_remove_listener+0x22>
    }
  }
}
 800be66:	bf00      	nop
 800be68:	bf00      	nop
 800be6a:	3710      	adds	r7, #16
 800be6c:	46bd      	mov	sp, r7
 800be6e:	bd80      	pop	{r7, pc}
 800be70:	08016d44 	.word	0x08016d44
 800be74:	08016dcc 	.word	0x08016dcc
 800be78:	08016d88 	.word	0x08016d88

0800be7c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800be7c:	b580      	push	{r7, lr}
 800be7e:	b084      	sub	sp, #16
 800be80:	af00      	add	r7, sp, #0
 800be82:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	2b00      	cmp	r3, #0
 800be88:	d106      	bne.n	800be98 <tcp_listen_closed+0x1c>
 800be8a:	4b14      	ldr	r3, [pc, #80]	; (800bedc <tcp_listen_closed+0x60>)
 800be8c:	f240 1211 	movw	r2, #273	; 0x111
 800be90:	4913      	ldr	r1, [pc, #76]	; (800bee0 <tcp_listen_closed+0x64>)
 800be92:	4814      	ldr	r0, [pc, #80]	; (800bee4 <tcp_listen_closed+0x68>)
 800be94:	f008 fe12 	bl	8014abc <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	7d1b      	ldrb	r3, [r3, #20]
 800be9c:	2b01      	cmp	r3, #1
 800be9e:	d006      	beq.n	800beae <tcp_listen_closed+0x32>
 800bea0:	4b0e      	ldr	r3, [pc, #56]	; (800bedc <tcp_listen_closed+0x60>)
 800bea2:	f44f 7289 	mov.w	r2, #274	; 0x112
 800bea6:	4910      	ldr	r1, [pc, #64]	; (800bee8 <tcp_listen_closed+0x6c>)
 800bea8:	480e      	ldr	r0, [pc, #56]	; (800bee4 <tcp_listen_closed+0x68>)
 800beaa:	f008 fe07 	bl	8014abc <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800beae:	2301      	movs	r3, #1
 800beb0:	60fb      	str	r3, [r7, #12]
 800beb2:	e00b      	b.n	800becc <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800beb4:	4a0d      	ldr	r2, [pc, #52]	; (800beec <tcp_listen_closed+0x70>)
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	6879      	ldr	r1, [r7, #4]
 800bec0:	4618      	mov	r0, r3
 800bec2:	f7ff ffb1 	bl	800be28 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	3301      	adds	r3, #1
 800beca:	60fb      	str	r3, [r7, #12]
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	2b03      	cmp	r3, #3
 800bed0:	d9f0      	bls.n	800beb4 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800bed2:	bf00      	nop
 800bed4:	bf00      	nop
 800bed6:	3710      	adds	r7, #16
 800bed8:	46bd      	mov	sp, r7
 800beda:	bd80      	pop	{r7, pc}
 800bedc:	08016d44 	.word	0x08016d44
 800bee0:	08016df4 	.word	0x08016df4
 800bee4:	08016d88 	.word	0x08016d88
 800bee8:	08016e00 	.word	0x08016e00
 800beec:	0801a19c 	.word	0x0801a19c

0800bef0 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800bef0:	b5b0      	push	{r4, r5, r7, lr}
 800bef2:	b088      	sub	sp, #32
 800bef4:	af04      	add	r7, sp, #16
 800bef6:	6078      	str	r0, [r7, #4]
 800bef8:	460b      	mov	r3, r1
 800befa:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d106      	bne.n	800bf10 <tcp_close_shutdown+0x20>
 800bf02:	4b63      	ldr	r3, [pc, #396]	; (800c090 <tcp_close_shutdown+0x1a0>)
 800bf04:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800bf08:	4962      	ldr	r1, [pc, #392]	; (800c094 <tcp_close_shutdown+0x1a4>)
 800bf0a:	4863      	ldr	r0, [pc, #396]	; (800c098 <tcp_close_shutdown+0x1a8>)
 800bf0c:	f008 fdd6 	bl	8014abc <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800bf10:	78fb      	ldrb	r3, [r7, #3]
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d066      	beq.n	800bfe4 <tcp_close_shutdown+0xf4>
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	7d1b      	ldrb	r3, [r3, #20]
 800bf1a:	2b04      	cmp	r3, #4
 800bf1c:	d003      	beq.n	800bf26 <tcp_close_shutdown+0x36>
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	7d1b      	ldrb	r3, [r3, #20]
 800bf22:	2b07      	cmp	r3, #7
 800bf24:	d15e      	bne.n	800bfe4 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d104      	bne.n	800bf38 <tcp_close_shutdown+0x48>
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bf32:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800bf36:	d055      	beq.n	800bfe4 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	8b5b      	ldrh	r3, [r3, #26]
 800bf3c:	f003 0310 	and.w	r3, r3, #16
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d106      	bne.n	800bf52 <tcp_close_shutdown+0x62>
 800bf44:	4b52      	ldr	r3, [pc, #328]	; (800c090 <tcp_close_shutdown+0x1a0>)
 800bf46:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800bf4a:	4954      	ldr	r1, [pc, #336]	; (800c09c <tcp_close_shutdown+0x1ac>)
 800bf4c:	4852      	ldr	r0, [pc, #328]	; (800c098 <tcp_close_shutdown+0x1a8>)
 800bf4e:	f008 fdb5 	bl	8014abc <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800bf5a:	687d      	ldr	r5, [r7, #4]
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	3304      	adds	r3, #4
 800bf60:	687a      	ldr	r2, [r7, #4]
 800bf62:	8ad2      	ldrh	r2, [r2, #22]
 800bf64:	6879      	ldr	r1, [r7, #4]
 800bf66:	8b09      	ldrh	r1, [r1, #24]
 800bf68:	9102      	str	r1, [sp, #8]
 800bf6a:	9201      	str	r2, [sp, #4]
 800bf6c:	9300      	str	r3, [sp, #0]
 800bf6e:	462b      	mov	r3, r5
 800bf70:	4622      	mov	r2, r4
 800bf72:	4601      	mov	r1, r0
 800bf74:	6878      	ldr	r0, [r7, #4]
 800bf76:	f005 fd93 	bl	8011aa0 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800bf7a:	6878      	ldr	r0, [r7, #4]
 800bf7c:	f001 fb74 	bl	800d668 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800bf80:	4b47      	ldr	r3, [pc, #284]	; (800c0a0 <tcp_close_shutdown+0x1b0>)
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	687a      	ldr	r2, [r7, #4]
 800bf86:	429a      	cmp	r2, r3
 800bf88:	d105      	bne.n	800bf96 <tcp_close_shutdown+0xa6>
 800bf8a:	4b45      	ldr	r3, [pc, #276]	; (800c0a0 <tcp_close_shutdown+0x1b0>)
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	68db      	ldr	r3, [r3, #12]
 800bf90:	4a43      	ldr	r2, [pc, #268]	; (800c0a0 <tcp_close_shutdown+0x1b0>)
 800bf92:	6013      	str	r3, [r2, #0]
 800bf94:	e013      	b.n	800bfbe <tcp_close_shutdown+0xce>
 800bf96:	4b42      	ldr	r3, [pc, #264]	; (800c0a0 <tcp_close_shutdown+0x1b0>)
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	60fb      	str	r3, [r7, #12]
 800bf9c:	e00c      	b.n	800bfb8 <tcp_close_shutdown+0xc8>
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	68db      	ldr	r3, [r3, #12]
 800bfa2:	687a      	ldr	r2, [r7, #4]
 800bfa4:	429a      	cmp	r2, r3
 800bfa6:	d104      	bne.n	800bfb2 <tcp_close_shutdown+0xc2>
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	68da      	ldr	r2, [r3, #12]
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	60da      	str	r2, [r3, #12]
 800bfb0:	e005      	b.n	800bfbe <tcp_close_shutdown+0xce>
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	68db      	ldr	r3, [r3, #12]
 800bfb6:	60fb      	str	r3, [r7, #12]
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d1ef      	bne.n	800bf9e <tcp_close_shutdown+0xae>
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	2200      	movs	r2, #0
 800bfc2:	60da      	str	r2, [r3, #12]
 800bfc4:	4b37      	ldr	r3, [pc, #220]	; (800c0a4 <tcp_close_shutdown+0x1b4>)
 800bfc6:	2201      	movs	r2, #1
 800bfc8:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800bfca:	4b37      	ldr	r3, [pc, #220]	; (800c0a8 <tcp_close_shutdown+0x1b8>)
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	687a      	ldr	r2, [r7, #4]
 800bfd0:	429a      	cmp	r2, r3
 800bfd2:	d102      	bne.n	800bfda <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800bfd4:	f004 f808 	bl	800ffe8 <tcp_trigger_input_pcb_close>
 800bfd8:	e002      	b.n	800bfe0 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800bfda:	6878      	ldr	r0, [r7, #4]
 800bfdc:	f7ff fed6 	bl	800bd8c <tcp_free>
      }
      return ERR_OK;
 800bfe0:	2300      	movs	r3, #0
 800bfe2:	e050      	b.n	800c086 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	7d1b      	ldrb	r3, [r3, #20]
 800bfe8:	2b02      	cmp	r3, #2
 800bfea:	d03b      	beq.n	800c064 <tcp_close_shutdown+0x174>
 800bfec:	2b02      	cmp	r3, #2
 800bfee:	dc44      	bgt.n	800c07a <tcp_close_shutdown+0x18a>
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d002      	beq.n	800bffa <tcp_close_shutdown+0x10a>
 800bff4:	2b01      	cmp	r3, #1
 800bff6:	d02a      	beq.n	800c04e <tcp_close_shutdown+0x15e>
 800bff8:	e03f      	b.n	800c07a <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	8adb      	ldrh	r3, [r3, #22]
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d021      	beq.n	800c046 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800c002:	4b2a      	ldr	r3, [pc, #168]	; (800c0ac <tcp_close_shutdown+0x1bc>)
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	687a      	ldr	r2, [r7, #4]
 800c008:	429a      	cmp	r2, r3
 800c00a:	d105      	bne.n	800c018 <tcp_close_shutdown+0x128>
 800c00c:	4b27      	ldr	r3, [pc, #156]	; (800c0ac <tcp_close_shutdown+0x1bc>)
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	68db      	ldr	r3, [r3, #12]
 800c012:	4a26      	ldr	r2, [pc, #152]	; (800c0ac <tcp_close_shutdown+0x1bc>)
 800c014:	6013      	str	r3, [r2, #0]
 800c016:	e013      	b.n	800c040 <tcp_close_shutdown+0x150>
 800c018:	4b24      	ldr	r3, [pc, #144]	; (800c0ac <tcp_close_shutdown+0x1bc>)
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	60bb      	str	r3, [r7, #8]
 800c01e:	e00c      	b.n	800c03a <tcp_close_shutdown+0x14a>
 800c020:	68bb      	ldr	r3, [r7, #8]
 800c022:	68db      	ldr	r3, [r3, #12]
 800c024:	687a      	ldr	r2, [r7, #4]
 800c026:	429a      	cmp	r2, r3
 800c028:	d104      	bne.n	800c034 <tcp_close_shutdown+0x144>
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	68da      	ldr	r2, [r3, #12]
 800c02e:	68bb      	ldr	r3, [r7, #8]
 800c030:	60da      	str	r2, [r3, #12]
 800c032:	e005      	b.n	800c040 <tcp_close_shutdown+0x150>
 800c034:	68bb      	ldr	r3, [r7, #8]
 800c036:	68db      	ldr	r3, [r3, #12]
 800c038:	60bb      	str	r3, [r7, #8]
 800c03a:	68bb      	ldr	r3, [r7, #8]
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d1ef      	bne.n	800c020 <tcp_close_shutdown+0x130>
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	2200      	movs	r2, #0
 800c044:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800c046:	6878      	ldr	r0, [r7, #4]
 800c048:	f7ff fea0 	bl	800bd8c <tcp_free>
      break;
 800c04c:	e01a      	b.n	800c084 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800c04e:	6878      	ldr	r0, [r7, #4]
 800c050:	f7ff ff14 	bl	800be7c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800c054:	6879      	ldr	r1, [r7, #4]
 800c056:	4816      	ldr	r0, [pc, #88]	; (800c0b0 <tcp_close_shutdown+0x1c0>)
 800c058:	f001 fb56 	bl	800d708 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800c05c:	6878      	ldr	r0, [r7, #4]
 800c05e:	f7ff feb1 	bl	800bdc4 <tcp_free_listen>
      break;
 800c062:	e00f      	b.n	800c084 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800c064:	6879      	ldr	r1, [r7, #4]
 800c066:	480e      	ldr	r0, [pc, #56]	; (800c0a0 <tcp_close_shutdown+0x1b0>)
 800c068:	f001 fb4e 	bl	800d708 <tcp_pcb_remove>
 800c06c:	4b0d      	ldr	r3, [pc, #52]	; (800c0a4 <tcp_close_shutdown+0x1b4>)
 800c06e:	2201      	movs	r2, #1
 800c070:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800c072:	6878      	ldr	r0, [r7, #4]
 800c074:	f7ff fe8a 	bl	800bd8c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800c078:	e004      	b.n	800c084 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800c07a:	6878      	ldr	r0, [r7, #4]
 800c07c:	f000 f81a 	bl	800c0b4 <tcp_close_shutdown_fin>
 800c080:	4603      	mov	r3, r0
 800c082:	e000      	b.n	800c086 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800c084:	2300      	movs	r3, #0
}
 800c086:	4618      	mov	r0, r3
 800c088:	3710      	adds	r7, #16
 800c08a:	46bd      	mov	sp, r7
 800c08c:	bdb0      	pop	{r4, r5, r7, pc}
 800c08e:	bf00      	nop
 800c090:	08016d44 	.word	0x08016d44
 800c094:	08016e18 	.word	0x08016e18
 800c098:	08016d88 	.word	0x08016d88
 800c09c:	08016e38 	.word	0x08016e38
 800c0a0:	24003c7c 	.word	0x24003c7c
 800c0a4:	24003c78 	.word	0x24003c78
 800c0a8:	24003c90 	.word	0x24003c90
 800c0ac:	24003c88 	.word	0x24003c88
 800c0b0:	24003c84 	.word	0x24003c84

0800c0b4 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800c0b4:	b580      	push	{r7, lr}
 800c0b6:	b084      	sub	sp, #16
 800c0b8:	af00      	add	r7, sp, #0
 800c0ba:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d106      	bne.n	800c0d0 <tcp_close_shutdown_fin+0x1c>
 800c0c2:	4b2e      	ldr	r3, [pc, #184]	; (800c17c <tcp_close_shutdown_fin+0xc8>)
 800c0c4:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800c0c8:	492d      	ldr	r1, [pc, #180]	; (800c180 <tcp_close_shutdown_fin+0xcc>)
 800c0ca:	482e      	ldr	r0, [pc, #184]	; (800c184 <tcp_close_shutdown_fin+0xd0>)
 800c0cc:	f008 fcf6 	bl	8014abc <iprintf>

  switch (pcb->state) {
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	7d1b      	ldrb	r3, [r3, #20]
 800c0d4:	2b07      	cmp	r3, #7
 800c0d6:	d020      	beq.n	800c11a <tcp_close_shutdown_fin+0x66>
 800c0d8:	2b07      	cmp	r3, #7
 800c0da:	dc2b      	bgt.n	800c134 <tcp_close_shutdown_fin+0x80>
 800c0dc:	2b03      	cmp	r3, #3
 800c0de:	d002      	beq.n	800c0e6 <tcp_close_shutdown_fin+0x32>
 800c0e0:	2b04      	cmp	r3, #4
 800c0e2:	d00d      	beq.n	800c100 <tcp_close_shutdown_fin+0x4c>
 800c0e4:	e026      	b.n	800c134 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800c0e6:	6878      	ldr	r0, [r7, #4]
 800c0e8:	f004 fde8 	bl	8010cbc <tcp_send_fin>
 800c0ec:	4603      	mov	r3, r0
 800c0ee:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c0f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d11f      	bne.n	800c138 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	2205      	movs	r2, #5
 800c0fc:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c0fe:	e01b      	b.n	800c138 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800c100:	6878      	ldr	r0, [r7, #4]
 800c102:	f004 fddb 	bl	8010cbc <tcp_send_fin>
 800c106:	4603      	mov	r3, r0
 800c108:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c10a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d114      	bne.n	800c13c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	2205      	movs	r2, #5
 800c116:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c118:	e010      	b.n	800c13c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800c11a:	6878      	ldr	r0, [r7, #4]
 800c11c:	f004 fdce 	bl	8010cbc <tcp_send_fin>
 800c120:	4603      	mov	r3, r0
 800c122:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c124:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d109      	bne.n	800c140 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	2209      	movs	r2, #9
 800c130:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c132:	e005      	b.n	800c140 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800c134:	2300      	movs	r3, #0
 800c136:	e01c      	b.n	800c172 <tcp_close_shutdown_fin+0xbe>
      break;
 800c138:	bf00      	nop
 800c13a:	e002      	b.n	800c142 <tcp_close_shutdown_fin+0x8e>
      break;
 800c13c:	bf00      	nop
 800c13e:	e000      	b.n	800c142 <tcp_close_shutdown_fin+0x8e>
      break;
 800c140:	bf00      	nop
  }

  if (err == ERR_OK) {
 800c142:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c146:	2b00      	cmp	r3, #0
 800c148:	d103      	bne.n	800c152 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800c14a:	6878      	ldr	r0, [r7, #4]
 800c14c:	f004 fef4 	bl	8010f38 <tcp_output>
 800c150:	e00d      	b.n	800c16e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800c152:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c156:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c15a:	d108      	bne.n	800c16e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	8b5b      	ldrh	r3, [r3, #26]
 800c160:	f043 0308 	orr.w	r3, r3, #8
 800c164:	b29a      	uxth	r2, r3
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800c16a:	2300      	movs	r3, #0
 800c16c:	e001      	b.n	800c172 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800c16e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c172:	4618      	mov	r0, r3
 800c174:	3710      	adds	r7, #16
 800c176:	46bd      	mov	sp, r7
 800c178:	bd80      	pop	{r7, pc}
 800c17a:	bf00      	nop
 800c17c:	08016d44 	.word	0x08016d44
 800c180:	08016df4 	.word	0x08016df4
 800c184:	08016d88 	.word	0x08016d88

0800c188 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800c188:	b580      	push	{r7, lr}
 800c18a:	b082      	sub	sp, #8
 800c18c:	af00      	add	r7, sp, #0
 800c18e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	2b00      	cmp	r3, #0
 800c194:	d109      	bne.n	800c1aa <tcp_close+0x22>
 800c196:	4b0f      	ldr	r3, [pc, #60]	; (800c1d4 <tcp_close+0x4c>)
 800c198:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800c19c:	490e      	ldr	r1, [pc, #56]	; (800c1d8 <tcp_close+0x50>)
 800c19e:	480f      	ldr	r0, [pc, #60]	; (800c1dc <tcp_close+0x54>)
 800c1a0:	f008 fc8c 	bl	8014abc <iprintf>
 800c1a4:	f06f 030f 	mvn.w	r3, #15
 800c1a8:	e00f      	b.n	800c1ca <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	7d1b      	ldrb	r3, [r3, #20]
 800c1ae:	2b01      	cmp	r3, #1
 800c1b0:	d006      	beq.n	800c1c0 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	8b5b      	ldrh	r3, [r3, #26]
 800c1b6:	f043 0310 	orr.w	r3, r3, #16
 800c1ba:	b29a      	uxth	r2, r3
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800c1c0:	2101      	movs	r1, #1
 800c1c2:	6878      	ldr	r0, [r7, #4]
 800c1c4:	f7ff fe94 	bl	800bef0 <tcp_close_shutdown>
 800c1c8:	4603      	mov	r3, r0
}
 800c1ca:	4618      	mov	r0, r3
 800c1cc:	3708      	adds	r7, #8
 800c1ce:	46bd      	mov	sp, r7
 800c1d0:	bd80      	pop	{r7, pc}
 800c1d2:	bf00      	nop
 800c1d4:	08016d44 	.word	0x08016d44
 800c1d8:	08016e54 	.word	0x08016e54
 800c1dc:	08016d88 	.word	0x08016d88

0800c1e0 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800c1e0:	b580      	push	{r7, lr}
 800c1e2:	b08e      	sub	sp, #56	; 0x38
 800c1e4:	af04      	add	r7, sp, #16
 800c1e6:	6078      	str	r0, [r7, #4]
 800c1e8:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d107      	bne.n	800c200 <tcp_abandon+0x20>
 800c1f0:	4b52      	ldr	r3, [pc, #328]	; (800c33c <tcp_abandon+0x15c>)
 800c1f2:	f240 223d 	movw	r2, #573	; 0x23d
 800c1f6:	4952      	ldr	r1, [pc, #328]	; (800c340 <tcp_abandon+0x160>)
 800c1f8:	4852      	ldr	r0, [pc, #328]	; (800c344 <tcp_abandon+0x164>)
 800c1fa:	f008 fc5f 	bl	8014abc <iprintf>
 800c1fe:	e099      	b.n	800c334 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	7d1b      	ldrb	r3, [r3, #20]
 800c204:	2b01      	cmp	r3, #1
 800c206:	d106      	bne.n	800c216 <tcp_abandon+0x36>
 800c208:	4b4c      	ldr	r3, [pc, #304]	; (800c33c <tcp_abandon+0x15c>)
 800c20a:	f44f 7210 	mov.w	r2, #576	; 0x240
 800c20e:	494e      	ldr	r1, [pc, #312]	; (800c348 <tcp_abandon+0x168>)
 800c210:	484c      	ldr	r0, [pc, #304]	; (800c344 <tcp_abandon+0x164>)
 800c212:	f008 fc53 	bl	8014abc <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	7d1b      	ldrb	r3, [r3, #20]
 800c21a:	2b0a      	cmp	r3, #10
 800c21c:	d107      	bne.n	800c22e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800c21e:	6879      	ldr	r1, [r7, #4]
 800c220:	484a      	ldr	r0, [pc, #296]	; (800c34c <tcp_abandon+0x16c>)
 800c222:	f001 fa71 	bl	800d708 <tcp_pcb_remove>
    tcp_free(pcb);
 800c226:	6878      	ldr	r0, [r7, #4]
 800c228:	f7ff fdb0 	bl	800bd8c <tcp_free>
 800c22c:	e082      	b.n	800c334 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800c22e:	2300      	movs	r3, #0
 800c230:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800c232:	2300      	movs	r3, #0
 800c234:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c23a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c240:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c248:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	691b      	ldr	r3, [r3, #16]
 800c24e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	7d1b      	ldrb	r3, [r3, #20]
 800c254:	2b00      	cmp	r3, #0
 800c256:	d126      	bne.n	800c2a6 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	8adb      	ldrh	r3, [r3, #22]
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d02e      	beq.n	800c2be <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800c260:	4b3b      	ldr	r3, [pc, #236]	; (800c350 <tcp_abandon+0x170>)
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	687a      	ldr	r2, [r7, #4]
 800c266:	429a      	cmp	r2, r3
 800c268:	d105      	bne.n	800c276 <tcp_abandon+0x96>
 800c26a:	4b39      	ldr	r3, [pc, #228]	; (800c350 <tcp_abandon+0x170>)
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	68db      	ldr	r3, [r3, #12]
 800c270:	4a37      	ldr	r2, [pc, #220]	; (800c350 <tcp_abandon+0x170>)
 800c272:	6013      	str	r3, [r2, #0]
 800c274:	e013      	b.n	800c29e <tcp_abandon+0xbe>
 800c276:	4b36      	ldr	r3, [pc, #216]	; (800c350 <tcp_abandon+0x170>)
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	61fb      	str	r3, [r7, #28]
 800c27c:	e00c      	b.n	800c298 <tcp_abandon+0xb8>
 800c27e:	69fb      	ldr	r3, [r7, #28]
 800c280:	68db      	ldr	r3, [r3, #12]
 800c282:	687a      	ldr	r2, [r7, #4]
 800c284:	429a      	cmp	r2, r3
 800c286:	d104      	bne.n	800c292 <tcp_abandon+0xb2>
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	68da      	ldr	r2, [r3, #12]
 800c28c:	69fb      	ldr	r3, [r7, #28]
 800c28e:	60da      	str	r2, [r3, #12]
 800c290:	e005      	b.n	800c29e <tcp_abandon+0xbe>
 800c292:	69fb      	ldr	r3, [r7, #28]
 800c294:	68db      	ldr	r3, [r3, #12]
 800c296:	61fb      	str	r3, [r7, #28]
 800c298:	69fb      	ldr	r3, [r7, #28]
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d1ef      	bne.n	800c27e <tcp_abandon+0x9e>
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	2200      	movs	r2, #0
 800c2a2:	60da      	str	r2, [r3, #12]
 800c2a4:	e00b      	b.n	800c2be <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800c2a6:	683b      	ldr	r3, [r7, #0]
 800c2a8:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	8adb      	ldrh	r3, [r3, #22]
 800c2ae:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800c2b0:	6879      	ldr	r1, [r7, #4]
 800c2b2:	4828      	ldr	r0, [pc, #160]	; (800c354 <tcp_abandon+0x174>)
 800c2b4:	f001 fa28 	bl	800d708 <tcp_pcb_remove>
 800c2b8:	4b27      	ldr	r3, [pc, #156]	; (800c358 <tcp_abandon+0x178>)
 800c2ba:	2201      	movs	r2, #1
 800c2bc:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d004      	beq.n	800c2d0 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	f000 fed6 	bl	800d07c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d004      	beq.n	800c2e2 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c2dc:	4618      	mov	r0, r3
 800c2de:	f000 fecd 	bl	800d07c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d004      	beq.n	800c2f4 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c2ee:	4618      	mov	r0, r3
 800c2f0:	f000 fec4 	bl	800d07c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800c2f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d00e      	beq.n	800c318 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800c2fa:	6879      	ldr	r1, [r7, #4]
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	3304      	adds	r3, #4
 800c300:	687a      	ldr	r2, [r7, #4]
 800c302:	8b12      	ldrh	r2, [r2, #24]
 800c304:	9202      	str	r2, [sp, #8]
 800c306:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c308:	9201      	str	r2, [sp, #4]
 800c30a:	9300      	str	r3, [sp, #0]
 800c30c:	460b      	mov	r3, r1
 800c30e:	697a      	ldr	r2, [r7, #20]
 800c310:	69b9      	ldr	r1, [r7, #24]
 800c312:	6878      	ldr	r0, [r7, #4]
 800c314:	f005 fbc4 	bl	8011aa0 <tcp_rst>
    }
    last_state = pcb->state;
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	7d1b      	ldrb	r3, [r3, #20]
 800c31c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800c31e:	6878      	ldr	r0, [r7, #4]
 800c320:	f7ff fd34 	bl	800bd8c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800c324:	693b      	ldr	r3, [r7, #16]
 800c326:	2b00      	cmp	r3, #0
 800c328:	d004      	beq.n	800c334 <tcp_abandon+0x154>
 800c32a:	693b      	ldr	r3, [r7, #16]
 800c32c:	f06f 010c 	mvn.w	r1, #12
 800c330:	68f8      	ldr	r0, [r7, #12]
 800c332:	4798      	blx	r3
  }
}
 800c334:	3728      	adds	r7, #40	; 0x28
 800c336:	46bd      	mov	sp, r7
 800c338:	bd80      	pop	{r7, pc}
 800c33a:	bf00      	nop
 800c33c:	08016d44 	.word	0x08016d44
 800c340:	08016e88 	.word	0x08016e88
 800c344:	08016d88 	.word	0x08016d88
 800c348:	08016ea4 	.word	0x08016ea4
 800c34c:	24003c8c 	.word	0x24003c8c
 800c350:	24003c88 	.word	0x24003c88
 800c354:	24003c7c 	.word	0x24003c7c
 800c358:	24003c78 	.word	0x24003c78

0800c35c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800c35c:	b580      	push	{r7, lr}
 800c35e:	b082      	sub	sp, #8
 800c360:	af00      	add	r7, sp, #0
 800c362:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800c364:	2101      	movs	r1, #1
 800c366:	6878      	ldr	r0, [r7, #4]
 800c368:	f7ff ff3a 	bl	800c1e0 <tcp_abandon>
}
 800c36c:	bf00      	nop
 800c36e:	3708      	adds	r7, #8
 800c370:	46bd      	mov	sp, r7
 800c372:	bd80      	pop	{r7, pc}

0800c374 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800c374:	b580      	push	{r7, lr}
 800c376:	b088      	sub	sp, #32
 800c378:	af00      	add	r7, sp, #0
 800c37a:	60f8      	str	r0, [r7, #12]
 800c37c:	60b9      	str	r1, [r7, #8]
 800c37e:	4613      	mov	r3, r2
 800c380:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800c382:	2304      	movs	r3, #4
 800c384:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800c386:	68bb      	ldr	r3, [r7, #8]
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d101      	bne.n	800c390 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800c38c:	4b3e      	ldr	r3, [pc, #248]	; (800c488 <tcp_bind+0x114>)
 800c38e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	2b00      	cmp	r3, #0
 800c394:	d109      	bne.n	800c3aa <tcp_bind+0x36>
 800c396:	4b3d      	ldr	r3, [pc, #244]	; (800c48c <tcp_bind+0x118>)
 800c398:	f240 22a9 	movw	r2, #681	; 0x2a9
 800c39c:	493c      	ldr	r1, [pc, #240]	; (800c490 <tcp_bind+0x11c>)
 800c39e:	483d      	ldr	r0, [pc, #244]	; (800c494 <tcp_bind+0x120>)
 800c3a0:	f008 fb8c 	bl	8014abc <iprintf>
 800c3a4:	f06f 030f 	mvn.w	r3, #15
 800c3a8:	e06a      	b.n	800c480 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	7d1b      	ldrb	r3, [r3, #20]
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d009      	beq.n	800c3c6 <tcp_bind+0x52>
 800c3b2:	4b36      	ldr	r3, [pc, #216]	; (800c48c <tcp_bind+0x118>)
 800c3b4:	f240 22ab 	movw	r2, #683	; 0x2ab
 800c3b8:	4937      	ldr	r1, [pc, #220]	; (800c498 <tcp_bind+0x124>)
 800c3ba:	4836      	ldr	r0, [pc, #216]	; (800c494 <tcp_bind+0x120>)
 800c3bc:	f008 fb7e 	bl	8014abc <iprintf>
 800c3c0:	f06f 0305 	mvn.w	r3, #5
 800c3c4:	e05c      	b.n	800c480 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800c3c6:	88fb      	ldrh	r3, [r7, #6]
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d109      	bne.n	800c3e0 <tcp_bind+0x6c>
    port = tcp_new_port();
 800c3cc:	f000 f9f0 	bl	800c7b0 <tcp_new_port>
 800c3d0:	4603      	mov	r3, r0
 800c3d2:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800c3d4:	88fb      	ldrh	r3, [r7, #6]
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d135      	bne.n	800c446 <tcp_bind+0xd2>
      return ERR_BUF;
 800c3da:	f06f 0301 	mvn.w	r3, #1
 800c3de:	e04f      	b.n	800c480 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800c3e0:	2300      	movs	r3, #0
 800c3e2:	61fb      	str	r3, [r7, #28]
 800c3e4:	e02b      	b.n	800c43e <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800c3e6:	4a2d      	ldr	r2, [pc, #180]	; (800c49c <tcp_bind+0x128>)
 800c3e8:	69fb      	ldr	r3, [r7, #28]
 800c3ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	61bb      	str	r3, [r7, #24]
 800c3f2:	e01e      	b.n	800c432 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800c3f4:	69bb      	ldr	r3, [r7, #24]
 800c3f6:	8adb      	ldrh	r3, [r3, #22]
 800c3f8:	88fa      	ldrh	r2, [r7, #6]
 800c3fa:	429a      	cmp	r2, r3
 800c3fc:	d116      	bne.n	800c42c <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800c3fe:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800c400:	2b00      	cmp	r3, #0
 800c402:	d010      	beq.n	800c426 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800c404:	69bb      	ldr	r3, [r7, #24]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d00c      	beq.n	800c426 <tcp_bind+0xb2>
 800c40c:	68bb      	ldr	r3, [r7, #8]
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d009      	beq.n	800c426 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800c412:	68bb      	ldr	r3, [r7, #8]
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	2b00      	cmp	r3, #0
 800c418:	d005      	beq.n	800c426 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800c41a:	69bb      	ldr	r3, [r7, #24]
 800c41c:	681a      	ldr	r2, [r3, #0]
 800c41e:	68bb      	ldr	r3, [r7, #8]
 800c420:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800c422:	429a      	cmp	r2, r3
 800c424:	d102      	bne.n	800c42c <tcp_bind+0xb8>
              return ERR_USE;
 800c426:	f06f 0307 	mvn.w	r3, #7
 800c42a:	e029      	b.n	800c480 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800c42c:	69bb      	ldr	r3, [r7, #24]
 800c42e:	68db      	ldr	r3, [r3, #12]
 800c430:	61bb      	str	r3, [r7, #24]
 800c432:	69bb      	ldr	r3, [r7, #24]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d1dd      	bne.n	800c3f4 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800c438:	69fb      	ldr	r3, [r7, #28]
 800c43a:	3301      	adds	r3, #1
 800c43c:	61fb      	str	r3, [r7, #28]
 800c43e:	69fa      	ldr	r2, [r7, #28]
 800c440:	697b      	ldr	r3, [r7, #20]
 800c442:	429a      	cmp	r2, r3
 800c444:	dbcf      	blt.n	800c3e6 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800c446:	68bb      	ldr	r3, [r7, #8]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d00c      	beq.n	800c466 <tcp_bind+0xf2>
 800c44c:	68bb      	ldr	r3, [r7, #8]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	2b00      	cmp	r3, #0
 800c452:	d008      	beq.n	800c466 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800c454:	68bb      	ldr	r3, [r7, #8]
 800c456:	2b00      	cmp	r3, #0
 800c458:	d002      	beq.n	800c460 <tcp_bind+0xec>
 800c45a:	68bb      	ldr	r3, [r7, #8]
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	e000      	b.n	800c462 <tcp_bind+0xee>
 800c460:	2300      	movs	r3, #0
 800c462:	68fa      	ldr	r2, [r7, #12]
 800c464:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	88fa      	ldrh	r2, [r7, #6]
 800c46a:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800c46c:	4b0c      	ldr	r3, [pc, #48]	; (800c4a0 <tcp_bind+0x12c>)
 800c46e:	681a      	ldr	r2, [r3, #0]
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	60da      	str	r2, [r3, #12]
 800c474:	4a0a      	ldr	r2, [pc, #40]	; (800c4a0 <tcp_bind+0x12c>)
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	6013      	str	r3, [r2, #0]
 800c47a:	f005 fcd3 	bl	8011e24 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800c47e:	2300      	movs	r3, #0
}
 800c480:	4618      	mov	r0, r3
 800c482:	3720      	adds	r7, #32
 800c484:	46bd      	mov	sp, r7
 800c486:	bd80      	pop	{r7, pc}
 800c488:	0801a1c4 	.word	0x0801a1c4
 800c48c:	08016d44 	.word	0x08016d44
 800c490:	08016ed8 	.word	0x08016ed8
 800c494:	08016d88 	.word	0x08016d88
 800c498:	08016ef0 	.word	0x08016ef0
 800c49c:	0801a19c 	.word	0x0801a19c
 800c4a0:	24003c88 	.word	0x24003c88

0800c4a4 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800c4a4:	b580      	push	{r7, lr}
 800c4a6:	b084      	sub	sp, #16
 800c4a8:	af00      	add	r7, sp, #0
 800c4aa:	60f8      	str	r0, [r7, #12]
 800c4ac:	60b9      	str	r1, [r7, #8]
 800c4ae:	4613      	mov	r3, r2
 800c4b0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800c4b2:	68bb      	ldr	r3, [r7, #8]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d106      	bne.n	800c4c6 <tcp_accept_null+0x22>
 800c4b8:	4b07      	ldr	r3, [pc, #28]	; (800c4d8 <tcp_accept_null+0x34>)
 800c4ba:	f240 320f 	movw	r2, #783	; 0x30f
 800c4be:	4907      	ldr	r1, [pc, #28]	; (800c4dc <tcp_accept_null+0x38>)
 800c4c0:	4807      	ldr	r0, [pc, #28]	; (800c4e0 <tcp_accept_null+0x3c>)
 800c4c2:	f008 fafb 	bl	8014abc <iprintf>

  tcp_abort(pcb);
 800c4c6:	68b8      	ldr	r0, [r7, #8]
 800c4c8:	f7ff ff48 	bl	800c35c <tcp_abort>

  return ERR_ABRT;
 800c4cc:	f06f 030c 	mvn.w	r3, #12
}
 800c4d0:	4618      	mov	r0, r3
 800c4d2:	3710      	adds	r7, #16
 800c4d4:	46bd      	mov	sp, r7
 800c4d6:	bd80      	pop	{r7, pc}
 800c4d8:	08016d44 	.word	0x08016d44
 800c4dc:	08016f18 	.word	0x08016f18
 800c4e0:	08016d88 	.word	0x08016d88

0800c4e4 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 800c4e4:	b580      	push	{r7, lr}
 800c4e6:	b082      	sub	sp, #8
 800c4e8:	af00      	add	r7, sp, #0
 800c4ea:	6078      	str	r0, [r7, #4]
 800c4ec:	460b      	mov	r3, r1
 800c4ee:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 800c4f0:	78fb      	ldrb	r3, [r7, #3]
 800c4f2:	2200      	movs	r2, #0
 800c4f4:	4619      	mov	r1, r3
 800c4f6:	6878      	ldr	r0, [r7, #4]
 800c4f8:	f000 f806 	bl	800c508 <tcp_listen_with_backlog_and_err>
 800c4fc:	4603      	mov	r3, r0
}
 800c4fe:	4618      	mov	r0, r3
 800c500:	3708      	adds	r7, #8
 800c502:	46bd      	mov	sp, r7
 800c504:	bd80      	pop	{r7, pc}
	...

0800c508 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800c508:	b580      	push	{r7, lr}
 800c50a:	b088      	sub	sp, #32
 800c50c:	af00      	add	r7, sp, #0
 800c50e:	60f8      	str	r0, [r7, #12]
 800c510:	460b      	mov	r3, r1
 800c512:	607a      	str	r2, [r7, #4]
 800c514:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800c516:	2300      	movs	r3, #0
 800c518:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d109      	bne.n	800c534 <tcp_listen_with_backlog_and_err+0x2c>
 800c520:	4b47      	ldr	r3, [pc, #284]	; (800c640 <tcp_listen_with_backlog_and_err+0x138>)
 800c522:	f240 3259 	movw	r2, #857	; 0x359
 800c526:	4947      	ldr	r1, [pc, #284]	; (800c644 <tcp_listen_with_backlog_and_err+0x13c>)
 800c528:	4847      	ldr	r0, [pc, #284]	; (800c648 <tcp_listen_with_backlog_and_err+0x140>)
 800c52a:	f008 fac7 	bl	8014abc <iprintf>
 800c52e:	23f0      	movs	r3, #240	; 0xf0
 800c530:	76fb      	strb	r3, [r7, #27]
 800c532:	e079      	b.n	800c628 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	7d1b      	ldrb	r3, [r3, #20]
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d009      	beq.n	800c550 <tcp_listen_with_backlog_and_err+0x48>
 800c53c:	4b40      	ldr	r3, [pc, #256]	; (800c640 <tcp_listen_with_backlog_and_err+0x138>)
 800c53e:	f240 325a 	movw	r2, #858	; 0x35a
 800c542:	4942      	ldr	r1, [pc, #264]	; (800c64c <tcp_listen_with_backlog_and_err+0x144>)
 800c544:	4840      	ldr	r0, [pc, #256]	; (800c648 <tcp_listen_with_backlog_and_err+0x140>)
 800c546:	f008 fab9 	bl	8014abc <iprintf>
 800c54a:	23f1      	movs	r3, #241	; 0xf1
 800c54c:	76fb      	strb	r3, [r7, #27]
 800c54e:	e06b      	b.n	800c628 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	7d1b      	ldrb	r3, [r3, #20]
 800c554:	2b01      	cmp	r3, #1
 800c556:	d104      	bne.n	800c562 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800c55c:	23f7      	movs	r3, #247	; 0xf7
 800c55e:	76fb      	strb	r3, [r7, #27]
    goto done;
 800c560:	e062      	b.n	800c628 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800c562:	2002      	movs	r0, #2
 800c564:	f7fe fa7c 	bl	800aa60 <memp_malloc>
 800c568:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800c56a:	69fb      	ldr	r3, [r7, #28]
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d102      	bne.n	800c576 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800c570:	23ff      	movs	r3, #255	; 0xff
 800c572:	76fb      	strb	r3, [r7, #27]
    goto done;
 800c574:	e058      	b.n	800c628 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	691a      	ldr	r2, [r3, #16]
 800c57a:	69fb      	ldr	r3, [r7, #28]
 800c57c:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	8ada      	ldrh	r2, [r3, #22]
 800c582:	69fb      	ldr	r3, [r7, #28]
 800c584:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800c586:	69fb      	ldr	r3, [r7, #28]
 800c588:	2201      	movs	r2, #1
 800c58a:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	7d5a      	ldrb	r2, [r3, #21]
 800c590:	69fb      	ldr	r3, [r7, #28]
 800c592:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	7a5a      	ldrb	r2, [r3, #9]
 800c598:	69fb      	ldr	r3, [r7, #28]
 800c59a:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800c59c:	69fb      	ldr	r3, [r7, #28]
 800c59e:	2200      	movs	r2, #0
 800c5a0:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	7ada      	ldrb	r2, [r3, #11]
 800c5a6:	69fb      	ldr	r3, [r7, #28]
 800c5a8:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	7a9a      	ldrb	r2, [r3, #10]
 800c5ae:	69fb      	ldr	r3, [r7, #28]
 800c5b0:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	681a      	ldr	r2, [r3, #0]
 800c5b6:	69fb      	ldr	r3, [r7, #28]
 800c5b8:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	8adb      	ldrh	r3, [r3, #22]
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d021      	beq.n	800c606 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800c5c2:	4b23      	ldr	r3, [pc, #140]	; (800c650 <tcp_listen_with_backlog_and_err+0x148>)
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	68fa      	ldr	r2, [r7, #12]
 800c5c8:	429a      	cmp	r2, r3
 800c5ca:	d105      	bne.n	800c5d8 <tcp_listen_with_backlog_and_err+0xd0>
 800c5cc:	4b20      	ldr	r3, [pc, #128]	; (800c650 <tcp_listen_with_backlog_and_err+0x148>)
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	68db      	ldr	r3, [r3, #12]
 800c5d2:	4a1f      	ldr	r2, [pc, #124]	; (800c650 <tcp_listen_with_backlog_and_err+0x148>)
 800c5d4:	6013      	str	r3, [r2, #0]
 800c5d6:	e013      	b.n	800c600 <tcp_listen_with_backlog_and_err+0xf8>
 800c5d8:	4b1d      	ldr	r3, [pc, #116]	; (800c650 <tcp_listen_with_backlog_and_err+0x148>)
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	617b      	str	r3, [r7, #20]
 800c5de:	e00c      	b.n	800c5fa <tcp_listen_with_backlog_and_err+0xf2>
 800c5e0:	697b      	ldr	r3, [r7, #20]
 800c5e2:	68db      	ldr	r3, [r3, #12]
 800c5e4:	68fa      	ldr	r2, [r7, #12]
 800c5e6:	429a      	cmp	r2, r3
 800c5e8:	d104      	bne.n	800c5f4 <tcp_listen_with_backlog_and_err+0xec>
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	68da      	ldr	r2, [r3, #12]
 800c5ee:	697b      	ldr	r3, [r7, #20]
 800c5f0:	60da      	str	r2, [r3, #12]
 800c5f2:	e005      	b.n	800c600 <tcp_listen_with_backlog_and_err+0xf8>
 800c5f4:	697b      	ldr	r3, [r7, #20]
 800c5f6:	68db      	ldr	r3, [r3, #12]
 800c5f8:	617b      	str	r3, [r7, #20]
 800c5fa:	697b      	ldr	r3, [r7, #20]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d1ef      	bne.n	800c5e0 <tcp_listen_with_backlog_and_err+0xd8>
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	2200      	movs	r2, #0
 800c604:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800c606:	68f8      	ldr	r0, [r7, #12]
 800c608:	f7ff fbc0 	bl	800bd8c <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800c60c:	69fb      	ldr	r3, [r7, #28]
 800c60e:	4a11      	ldr	r2, [pc, #68]	; (800c654 <tcp_listen_with_backlog_and_err+0x14c>)
 800c610:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800c612:	4b11      	ldr	r3, [pc, #68]	; (800c658 <tcp_listen_with_backlog_and_err+0x150>)
 800c614:	681a      	ldr	r2, [r3, #0]
 800c616:	69fb      	ldr	r3, [r7, #28]
 800c618:	60da      	str	r2, [r3, #12]
 800c61a:	4a0f      	ldr	r2, [pc, #60]	; (800c658 <tcp_listen_with_backlog_and_err+0x150>)
 800c61c:	69fb      	ldr	r3, [r7, #28]
 800c61e:	6013      	str	r3, [r2, #0]
 800c620:	f005 fc00 	bl	8011e24 <tcp_timer_needed>
  res = ERR_OK;
 800c624:	2300      	movs	r3, #0
 800c626:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d002      	beq.n	800c634 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	7efa      	ldrb	r2, [r7, #27]
 800c632:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800c634:	69fb      	ldr	r3, [r7, #28]
}
 800c636:	4618      	mov	r0, r3
 800c638:	3720      	adds	r7, #32
 800c63a:	46bd      	mov	sp, r7
 800c63c:	bd80      	pop	{r7, pc}
 800c63e:	bf00      	nop
 800c640:	08016d44 	.word	0x08016d44
 800c644:	08016f38 	.word	0x08016f38
 800c648:	08016d88 	.word	0x08016d88
 800c64c:	08016f68 	.word	0x08016f68
 800c650:	24003c88 	.word	0x24003c88
 800c654:	0800c4a5 	.word	0x0800c4a5
 800c658:	24003c84 	.word	0x24003c84

0800c65c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800c65c:	b580      	push	{r7, lr}
 800c65e:	b084      	sub	sp, #16
 800c660:	af00      	add	r7, sp, #0
 800c662:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	2b00      	cmp	r3, #0
 800c668:	d106      	bne.n	800c678 <tcp_update_rcv_ann_wnd+0x1c>
 800c66a:	4b25      	ldr	r3, [pc, #148]	; (800c700 <tcp_update_rcv_ann_wnd+0xa4>)
 800c66c:	f240 32a6 	movw	r2, #934	; 0x3a6
 800c670:	4924      	ldr	r1, [pc, #144]	; (800c704 <tcp_update_rcv_ann_wnd+0xa8>)
 800c672:	4825      	ldr	r0, [pc, #148]	; (800c708 <tcp_update_rcv_ann_wnd+0xac>)
 800c674:	f008 fa22 	bl	8014abc <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c67c:	687a      	ldr	r2, [r7, #4]
 800c67e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800c680:	4413      	add	r3, r2
 800c682:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c688:	687a      	ldr	r2, [r7, #4]
 800c68a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800c68c:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800c690:	bf28      	it	cs
 800c692:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800c696:	b292      	uxth	r2, r2
 800c698:	4413      	add	r3, r2
 800c69a:	68fa      	ldr	r2, [r7, #12]
 800c69c:	1ad3      	subs	r3, r2, r3
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	db08      	blt.n	800c6b4 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6ae:	68fa      	ldr	r2, [r7, #12]
 800c6b0:	1ad3      	subs	r3, r2, r3
 800c6b2:	e020      	b.n	800c6f6 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6bc:	1ad3      	subs	r3, r2, r3
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	dd03      	ble.n	800c6ca <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	2200      	movs	r2, #0
 800c6c6:	855a      	strh	r2, [r3, #42]	; 0x2a
 800c6c8:	e014      	b.n	800c6f4 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6d2:	1ad3      	subs	r3, r2, r3
 800c6d4:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800c6d6:	68bb      	ldr	r3, [r7, #8]
 800c6d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c6dc:	d306      	bcc.n	800c6ec <tcp_update_rcv_ann_wnd+0x90>
 800c6de:	4b08      	ldr	r3, [pc, #32]	; (800c700 <tcp_update_rcv_ann_wnd+0xa4>)
 800c6e0:	f240 32b6 	movw	r2, #950	; 0x3b6
 800c6e4:	4909      	ldr	r1, [pc, #36]	; (800c70c <tcp_update_rcv_ann_wnd+0xb0>)
 800c6e6:	4808      	ldr	r0, [pc, #32]	; (800c708 <tcp_update_rcv_ann_wnd+0xac>)
 800c6e8:	f008 f9e8 	bl	8014abc <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800c6ec:	68bb      	ldr	r3, [r7, #8]
 800c6ee:	b29a      	uxth	r2, r3
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800c6f4:	2300      	movs	r3, #0
  }
}
 800c6f6:	4618      	mov	r0, r3
 800c6f8:	3710      	adds	r7, #16
 800c6fa:	46bd      	mov	sp, r7
 800c6fc:	bd80      	pop	{r7, pc}
 800c6fe:	bf00      	nop
 800c700:	08016d44 	.word	0x08016d44
 800c704:	08016fa0 	.word	0x08016fa0
 800c708:	08016d88 	.word	0x08016d88
 800c70c:	08016fc4 	.word	0x08016fc4

0800c710 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800c710:	b580      	push	{r7, lr}
 800c712:	b084      	sub	sp, #16
 800c714:	af00      	add	r7, sp, #0
 800c716:	6078      	str	r0, [r7, #4]
 800c718:	460b      	mov	r3, r1
 800c71a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d107      	bne.n	800c732 <tcp_recved+0x22>
 800c722:	4b1f      	ldr	r3, [pc, #124]	; (800c7a0 <tcp_recved+0x90>)
 800c724:	f240 32cf 	movw	r2, #975	; 0x3cf
 800c728:	491e      	ldr	r1, [pc, #120]	; (800c7a4 <tcp_recved+0x94>)
 800c72a:	481f      	ldr	r0, [pc, #124]	; (800c7a8 <tcp_recved+0x98>)
 800c72c:	f008 f9c6 	bl	8014abc <iprintf>
 800c730:	e032      	b.n	800c798 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	7d1b      	ldrb	r3, [r3, #20]
 800c736:	2b01      	cmp	r3, #1
 800c738:	d106      	bne.n	800c748 <tcp_recved+0x38>
 800c73a:	4b19      	ldr	r3, [pc, #100]	; (800c7a0 <tcp_recved+0x90>)
 800c73c:	f240 32d2 	movw	r2, #978	; 0x3d2
 800c740:	491a      	ldr	r1, [pc, #104]	; (800c7ac <tcp_recved+0x9c>)
 800c742:	4819      	ldr	r0, [pc, #100]	; (800c7a8 <tcp_recved+0x98>)
 800c744:	f008 f9ba 	bl	8014abc <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c74c:	887b      	ldrh	r3, [r7, #2]
 800c74e:	4413      	add	r3, r2
 800c750:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800c752:	89fb      	ldrh	r3, [r7, #14]
 800c754:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c758:	d804      	bhi.n	800c764 <tcp_recved+0x54>
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c75e:	89fa      	ldrh	r2, [r7, #14]
 800c760:	429a      	cmp	r2, r3
 800c762:	d204      	bcs.n	800c76e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800c76a:	851a      	strh	r2, [r3, #40]	; 0x28
 800c76c:	e002      	b.n	800c774 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	89fa      	ldrh	r2, [r7, #14]
 800c772:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800c774:	6878      	ldr	r0, [r7, #4]
 800c776:	f7ff ff71 	bl	800c65c <tcp_update_rcv_ann_wnd>
 800c77a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800c77c:	68bb      	ldr	r3, [r7, #8]
 800c77e:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800c782:	d309      	bcc.n	800c798 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	8b5b      	ldrh	r3, [r3, #26]
 800c788:	f043 0302 	orr.w	r3, r3, #2
 800c78c:	b29a      	uxth	r2, r3
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800c792:	6878      	ldr	r0, [r7, #4]
 800c794:	f004 fbd0 	bl	8010f38 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800c798:	3710      	adds	r7, #16
 800c79a:	46bd      	mov	sp, r7
 800c79c:	bd80      	pop	{r7, pc}
 800c79e:	bf00      	nop
 800c7a0:	08016d44 	.word	0x08016d44
 800c7a4:	08016fe0 	.word	0x08016fe0
 800c7a8:	08016d88 	.word	0x08016d88
 800c7ac:	08016ff8 	.word	0x08016ff8

0800c7b0 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800c7b0:	b480      	push	{r7}
 800c7b2:	b083      	sub	sp, #12
 800c7b4:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800c7b6:	2300      	movs	r3, #0
 800c7b8:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800c7ba:	4b1e      	ldr	r3, [pc, #120]	; (800c834 <tcp_new_port+0x84>)
 800c7bc:	881b      	ldrh	r3, [r3, #0]
 800c7be:	3301      	adds	r3, #1
 800c7c0:	b29a      	uxth	r2, r3
 800c7c2:	4b1c      	ldr	r3, [pc, #112]	; (800c834 <tcp_new_port+0x84>)
 800c7c4:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800c7c6:	4b1b      	ldr	r3, [pc, #108]	; (800c834 <tcp_new_port+0x84>)
 800c7c8:	881b      	ldrh	r3, [r3, #0]
 800c7ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c7ce:	4293      	cmp	r3, r2
 800c7d0:	d103      	bne.n	800c7da <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800c7d2:	4b18      	ldr	r3, [pc, #96]	; (800c834 <tcp_new_port+0x84>)
 800c7d4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800c7d8:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800c7da:	2300      	movs	r3, #0
 800c7dc:	71fb      	strb	r3, [r7, #7]
 800c7de:	e01e      	b.n	800c81e <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800c7e0:	79fb      	ldrb	r3, [r7, #7]
 800c7e2:	4a15      	ldr	r2, [pc, #84]	; (800c838 <tcp_new_port+0x88>)
 800c7e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	603b      	str	r3, [r7, #0]
 800c7ec:	e011      	b.n	800c812 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800c7ee:	683b      	ldr	r3, [r7, #0]
 800c7f0:	8ada      	ldrh	r2, [r3, #22]
 800c7f2:	4b10      	ldr	r3, [pc, #64]	; (800c834 <tcp_new_port+0x84>)
 800c7f4:	881b      	ldrh	r3, [r3, #0]
 800c7f6:	429a      	cmp	r2, r3
 800c7f8:	d108      	bne.n	800c80c <tcp_new_port+0x5c>
        n++;
 800c7fa:	88bb      	ldrh	r3, [r7, #4]
 800c7fc:	3301      	adds	r3, #1
 800c7fe:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800c800:	88bb      	ldrh	r3, [r7, #4]
 800c802:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c806:	d3d8      	bcc.n	800c7ba <tcp_new_port+0xa>
          return 0;
 800c808:	2300      	movs	r3, #0
 800c80a:	e00d      	b.n	800c828 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800c80c:	683b      	ldr	r3, [r7, #0]
 800c80e:	68db      	ldr	r3, [r3, #12]
 800c810:	603b      	str	r3, [r7, #0]
 800c812:	683b      	ldr	r3, [r7, #0]
 800c814:	2b00      	cmp	r3, #0
 800c816:	d1ea      	bne.n	800c7ee <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800c818:	79fb      	ldrb	r3, [r7, #7]
 800c81a:	3301      	adds	r3, #1
 800c81c:	71fb      	strb	r3, [r7, #7]
 800c81e:	79fb      	ldrb	r3, [r7, #7]
 800c820:	2b03      	cmp	r3, #3
 800c822:	d9dd      	bls.n	800c7e0 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800c824:	4b03      	ldr	r3, [pc, #12]	; (800c834 <tcp_new_port+0x84>)
 800c826:	881b      	ldrh	r3, [r3, #0]
}
 800c828:	4618      	mov	r0, r3
 800c82a:	370c      	adds	r7, #12
 800c82c:	46bd      	mov	sp, r7
 800c82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c832:	4770      	bx	lr
 800c834:	24000034 	.word	0x24000034
 800c838:	0801a19c 	.word	0x0801a19c

0800c83c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800c83c:	b5b0      	push	{r4, r5, r7, lr}
 800c83e:	b090      	sub	sp, #64	; 0x40
 800c840:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800c842:	2300      	movs	r3, #0
 800c844:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800c848:	4b94      	ldr	r3, [pc, #592]	; (800ca9c <tcp_slowtmr+0x260>)
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	3301      	adds	r3, #1
 800c84e:	4a93      	ldr	r2, [pc, #588]	; (800ca9c <tcp_slowtmr+0x260>)
 800c850:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800c852:	4b93      	ldr	r3, [pc, #588]	; (800caa0 <tcp_slowtmr+0x264>)
 800c854:	781b      	ldrb	r3, [r3, #0]
 800c856:	3301      	adds	r3, #1
 800c858:	b2da      	uxtb	r2, r3
 800c85a:	4b91      	ldr	r3, [pc, #580]	; (800caa0 <tcp_slowtmr+0x264>)
 800c85c:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800c85e:	2300      	movs	r3, #0
 800c860:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800c862:	4b90      	ldr	r3, [pc, #576]	; (800caa4 <tcp_slowtmr+0x268>)
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800c868:	e29d      	b.n	800cda6 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800c86a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c86c:	7d1b      	ldrb	r3, [r3, #20]
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d106      	bne.n	800c880 <tcp_slowtmr+0x44>
 800c872:	4b8d      	ldr	r3, [pc, #564]	; (800caa8 <tcp_slowtmr+0x26c>)
 800c874:	f240 42be 	movw	r2, #1214	; 0x4be
 800c878:	498c      	ldr	r1, [pc, #560]	; (800caac <tcp_slowtmr+0x270>)
 800c87a:	488d      	ldr	r0, [pc, #564]	; (800cab0 <tcp_slowtmr+0x274>)
 800c87c:	f008 f91e 	bl	8014abc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800c880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c882:	7d1b      	ldrb	r3, [r3, #20]
 800c884:	2b01      	cmp	r3, #1
 800c886:	d106      	bne.n	800c896 <tcp_slowtmr+0x5a>
 800c888:	4b87      	ldr	r3, [pc, #540]	; (800caa8 <tcp_slowtmr+0x26c>)
 800c88a:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800c88e:	4989      	ldr	r1, [pc, #548]	; (800cab4 <tcp_slowtmr+0x278>)
 800c890:	4887      	ldr	r0, [pc, #540]	; (800cab0 <tcp_slowtmr+0x274>)
 800c892:	f008 f913 	bl	8014abc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800c896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c898:	7d1b      	ldrb	r3, [r3, #20]
 800c89a:	2b0a      	cmp	r3, #10
 800c89c:	d106      	bne.n	800c8ac <tcp_slowtmr+0x70>
 800c89e:	4b82      	ldr	r3, [pc, #520]	; (800caa8 <tcp_slowtmr+0x26c>)
 800c8a0:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800c8a4:	4984      	ldr	r1, [pc, #528]	; (800cab8 <tcp_slowtmr+0x27c>)
 800c8a6:	4882      	ldr	r0, [pc, #520]	; (800cab0 <tcp_slowtmr+0x274>)
 800c8a8:	f008 f908 	bl	8014abc <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800c8ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8ae:	7f9a      	ldrb	r2, [r3, #30]
 800c8b0:	4b7b      	ldr	r3, [pc, #492]	; (800caa0 <tcp_slowtmr+0x264>)
 800c8b2:	781b      	ldrb	r3, [r3, #0]
 800c8b4:	429a      	cmp	r2, r3
 800c8b6:	d105      	bne.n	800c8c4 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800c8b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8ba:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800c8bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8be:	68db      	ldr	r3, [r3, #12]
 800c8c0:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800c8c2:	e270      	b.n	800cda6 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800c8c4:	4b76      	ldr	r3, [pc, #472]	; (800caa0 <tcp_slowtmr+0x264>)
 800c8c6:	781a      	ldrb	r2, [r3, #0]
 800c8c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8ca:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800c8cc:	2300      	movs	r3, #0
 800c8ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800c8d2:	2300      	movs	r3, #0
 800c8d4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800c8d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8da:	7d1b      	ldrb	r3, [r3, #20]
 800c8dc:	2b02      	cmp	r3, #2
 800c8de:	d10a      	bne.n	800c8f6 <tcp_slowtmr+0xba>
 800c8e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8e2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c8e6:	2b05      	cmp	r3, #5
 800c8e8:	d905      	bls.n	800c8f6 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800c8ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c8ee:	3301      	adds	r3, #1
 800c8f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c8f4:	e11e      	b.n	800cb34 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800c8f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8f8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c8fc:	2b0b      	cmp	r3, #11
 800c8fe:	d905      	bls.n	800c90c <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800c900:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c904:	3301      	adds	r3, #1
 800c906:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c90a:	e113      	b.n	800cb34 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800c90c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c90e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c912:	2b00      	cmp	r3, #0
 800c914:	d075      	beq.n	800ca02 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800c916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d006      	beq.n	800c92c <tcp_slowtmr+0xf0>
 800c91e:	4b62      	ldr	r3, [pc, #392]	; (800caa8 <tcp_slowtmr+0x26c>)
 800c920:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800c924:	4965      	ldr	r1, [pc, #404]	; (800cabc <tcp_slowtmr+0x280>)
 800c926:	4862      	ldr	r0, [pc, #392]	; (800cab0 <tcp_slowtmr+0x274>)
 800c928:	f008 f8c8 	bl	8014abc <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800c92c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c92e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c930:	2b00      	cmp	r3, #0
 800c932:	d106      	bne.n	800c942 <tcp_slowtmr+0x106>
 800c934:	4b5c      	ldr	r3, [pc, #368]	; (800caa8 <tcp_slowtmr+0x26c>)
 800c936:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800c93a:	4961      	ldr	r1, [pc, #388]	; (800cac0 <tcp_slowtmr+0x284>)
 800c93c:	485c      	ldr	r0, [pc, #368]	; (800cab0 <tcp_slowtmr+0x274>)
 800c93e:	f008 f8bd 	bl	8014abc <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800c942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c944:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800c948:	2b0b      	cmp	r3, #11
 800c94a:	d905      	bls.n	800c958 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800c94c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c950:	3301      	adds	r3, #1
 800c952:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c956:	e0ed      	b.n	800cb34 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800c958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c95a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c95e:	3b01      	subs	r3, #1
 800c960:	4a58      	ldr	r2, [pc, #352]	; (800cac4 <tcp_slowtmr+0x288>)
 800c962:	5cd3      	ldrb	r3, [r2, r3]
 800c964:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800c966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c968:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800c96c:	7c7a      	ldrb	r2, [r7, #17]
 800c96e:	429a      	cmp	r2, r3
 800c970:	d907      	bls.n	800c982 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800c972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c974:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800c978:	3301      	adds	r3, #1
 800c97a:	b2da      	uxtb	r2, r3
 800c97c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c97e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800c982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c984:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800c988:	7c7a      	ldrb	r2, [r7, #17]
 800c98a:	429a      	cmp	r2, r3
 800c98c:	f200 80d2 	bhi.w	800cb34 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800c990:	2301      	movs	r3, #1
 800c992:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800c994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c996:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d108      	bne.n	800c9b0 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800c99e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c9a0:	f005 f972 	bl	8011c88 <tcp_zero_window_probe>
 800c9a4:	4603      	mov	r3, r0
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d014      	beq.n	800c9d4 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800c9aa:	2300      	movs	r3, #0
 800c9ac:	623b      	str	r3, [r7, #32]
 800c9ae:	e011      	b.n	800c9d4 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800c9b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9b2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c9b6:	4619      	mov	r1, r3
 800c9b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c9ba:	f004 f837 	bl	8010a2c <tcp_split_unsent_seg>
 800c9be:	4603      	mov	r3, r0
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d107      	bne.n	800c9d4 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800c9c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c9c6:	f004 fab7 	bl	8010f38 <tcp_output>
 800c9ca:	4603      	mov	r3, r0
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d101      	bne.n	800c9d4 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800c9d0:	2300      	movs	r3, #0
 800c9d2:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800c9d4:	6a3b      	ldr	r3, [r7, #32]
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	f000 80ac 	beq.w	800cb34 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800c9dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9de:	2200      	movs	r2, #0
 800c9e0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800c9e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9e6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c9ea:	2b06      	cmp	r3, #6
 800c9ec:	f200 80a2 	bhi.w	800cb34 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800c9f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9f2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c9f6:	3301      	adds	r3, #1
 800c9f8:	b2da      	uxtb	r2, r3
 800c9fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9fc:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800ca00:	e098      	b.n	800cb34 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800ca02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca04:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	db0f      	blt.n	800ca2c <tcp_slowtmr+0x1f0>
 800ca0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca0e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ca12:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800ca16:	4293      	cmp	r3, r2
 800ca18:	d008      	beq.n	800ca2c <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800ca1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca1c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ca20:	b29b      	uxth	r3, r3
 800ca22:	3301      	adds	r3, #1
 800ca24:	b29b      	uxth	r3, r3
 800ca26:	b21a      	sxth	r2, r3
 800ca28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca2a:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800ca2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca2e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800ca32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca34:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800ca38:	429a      	cmp	r2, r3
 800ca3a:	db7b      	blt.n	800cb34 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800ca3c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ca3e:	f004 fd6d 	bl	801151c <tcp_rexmit_rto_prepare>
 800ca42:	4603      	mov	r3, r0
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d007      	beq.n	800ca58 <tcp_slowtmr+0x21c>
 800ca48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d171      	bne.n	800cb34 <tcp_slowtmr+0x2f8>
 800ca50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d06d      	beq.n	800cb34 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800ca58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca5a:	7d1b      	ldrb	r3, [r3, #20]
 800ca5c:	2b02      	cmp	r3, #2
 800ca5e:	d03a      	beq.n	800cad6 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800ca60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca62:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ca66:	2b0c      	cmp	r3, #12
 800ca68:	bf28      	it	cs
 800ca6a:	230c      	movcs	r3, #12
 800ca6c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800ca6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca70:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ca74:	10db      	asrs	r3, r3, #3
 800ca76:	b21b      	sxth	r3, r3
 800ca78:	461a      	mov	r2, r3
 800ca7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca7c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ca80:	4413      	add	r3, r2
 800ca82:	7efa      	ldrb	r2, [r7, #27]
 800ca84:	4910      	ldr	r1, [pc, #64]	; (800cac8 <tcp_slowtmr+0x28c>)
 800ca86:	5c8a      	ldrb	r2, [r1, r2]
 800ca88:	4093      	lsls	r3, r2
 800ca8a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800ca8c:	697b      	ldr	r3, [r7, #20]
 800ca8e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800ca92:	4293      	cmp	r3, r2
 800ca94:	dc1a      	bgt.n	800cacc <tcp_slowtmr+0x290>
 800ca96:	697b      	ldr	r3, [r7, #20]
 800ca98:	b21a      	sxth	r2, r3
 800ca9a:	e019      	b.n	800cad0 <tcp_slowtmr+0x294>
 800ca9c:	24003c80 	.word	0x24003c80
 800caa0:	24000556 	.word	0x24000556
 800caa4:	24003c7c 	.word	0x24003c7c
 800caa8:	08016d44 	.word	0x08016d44
 800caac:	08017088 	.word	0x08017088
 800cab0:	08016d88 	.word	0x08016d88
 800cab4:	080170b4 	.word	0x080170b4
 800cab8:	080170e0 	.word	0x080170e0
 800cabc:	08017110 	.word	0x08017110
 800cac0:	08017144 	.word	0x08017144
 800cac4:	0801a194 	.word	0x0801a194
 800cac8:	0801a184 	.word	0x0801a184
 800cacc:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800cad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cad2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800cad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cad8:	2200      	movs	r2, #0
 800cada:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800cadc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cade:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800cae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cae4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800cae8:	4293      	cmp	r3, r2
 800caea:	bf28      	it	cs
 800caec:	4613      	movcs	r3, r2
 800caee:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800caf0:	8a7b      	ldrh	r3, [r7, #18]
 800caf2:	085b      	lsrs	r3, r3, #1
 800caf4:	b29a      	uxth	r2, r3
 800caf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caf8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800cafc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cafe:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800cb02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb04:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cb06:	005b      	lsls	r3, r3, #1
 800cb08:	b29b      	uxth	r3, r3
 800cb0a:	429a      	cmp	r2, r3
 800cb0c:	d206      	bcs.n	800cb1c <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800cb0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb10:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cb12:	005b      	lsls	r3, r3, #1
 800cb14:	b29a      	uxth	r2, r3
 800cb16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb18:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800cb1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb1e:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800cb20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb22:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800cb26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb28:	2200      	movs	r2, #0
 800cb2a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800cb2e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cb30:	f004 fd64 	bl	80115fc <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800cb34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb36:	7d1b      	ldrb	r3, [r3, #20]
 800cb38:	2b06      	cmp	r3, #6
 800cb3a:	d111      	bne.n	800cb60 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800cb3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb3e:	8b5b      	ldrh	r3, [r3, #26]
 800cb40:	f003 0310 	and.w	r3, r3, #16
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d00b      	beq.n	800cb60 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cb48:	4b9c      	ldr	r3, [pc, #624]	; (800cdbc <tcp_slowtmr+0x580>)
 800cb4a:	681a      	ldr	r2, [r3, #0]
 800cb4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb4e:	6a1b      	ldr	r3, [r3, #32]
 800cb50:	1ad3      	subs	r3, r2, r3
 800cb52:	2b28      	cmp	r3, #40	; 0x28
 800cb54:	d904      	bls.n	800cb60 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800cb56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cb5a:	3301      	adds	r3, #1
 800cb5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800cb60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb62:	7a5b      	ldrb	r3, [r3, #9]
 800cb64:	f003 0308 	and.w	r3, r3, #8
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d04a      	beq.n	800cc02 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800cb6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb6e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800cb70:	2b04      	cmp	r3, #4
 800cb72:	d003      	beq.n	800cb7c <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800cb74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb76:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800cb78:	2b07      	cmp	r3, #7
 800cb7a:	d142      	bne.n	800cc02 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cb7c:	4b8f      	ldr	r3, [pc, #572]	; (800cdbc <tcp_slowtmr+0x580>)
 800cb7e:	681a      	ldr	r2, [r3, #0]
 800cb80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb82:	6a1b      	ldr	r3, [r3, #32]
 800cb84:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800cb86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb88:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800cb8c:	4b8c      	ldr	r3, [pc, #560]	; (800cdc0 <tcp_slowtmr+0x584>)
 800cb8e:	440b      	add	r3, r1
 800cb90:	498c      	ldr	r1, [pc, #560]	; (800cdc4 <tcp_slowtmr+0x588>)
 800cb92:	fba1 1303 	umull	r1, r3, r1, r3
 800cb96:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cb98:	429a      	cmp	r2, r3
 800cb9a:	d90a      	bls.n	800cbb2 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800cb9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cba0:	3301      	adds	r3, #1
 800cba2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800cba6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cbaa:	3301      	adds	r3, #1
 800cbac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800cbb0:	e027      	b.n	800cc02 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cbb2:	4b82      	ldr	r3, [pc, #520]	; (800cdbc <tcp_slowtmr+0x580>)
 800cbb4:	681a      	ldr	r2, [r3, #0]
 800cbb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbb8:	6a1b      	ldr	r3, [r3, #32]
 800cbba:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800cbbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbbe:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800cbc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbc4:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800cbc8:	4618      	mov	r0, r3
 800cbca:	4b7f      	ldr	r3, [pc, #508]	; (800cdc8 <tcp_slowtmr+0x58c>)
 800cbcc:	fb03 f300 	mul.w	r3, r3, r0
 800cbd0:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800cbd2:	497c      	ldr	r1, [pc, #496]	; (800cdc4 <tcp_slowtmr+0x588>)
 800cbd4:	fba1 1303 	umull	r1, r3, r1, r3
 800cbd8:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cbda:	429a      	cmp	r2, r3
 800cbdc:	d911      	bls.n	800cc02 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800cbde:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cbe0:	f005 f812 	bl	8011c08 <tcp_keepalive>
 800cbe4:	4603      	mov	r3, r0
 800cbe6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800cbea:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d107      	bne.n	800cc02 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800cbf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbf4:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800cbf8:	3301      	adds	r3, #1
 800cbfa:	b2da      	uxtb	r2, r3
 800cbfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbfe:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800cc02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d011      	beq.n	800cc2e <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800cc0a:	4b6c      	ldr	r3, [pc, #432]	; (800cdbc <tcp_slowtmr+0x580>)
 800cc0c:	681a      	ldr	r2, [r3, #0]
 800cc0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc10:	6a1b      	ldr	r3, [r3, #32]
 800cc12:	1ad2      	subs	r2, r2, r3
 800cc14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc16:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800cc1a:	4619      	mov	r1, r3
 800cc1c:	460b      	mov	r3, r1
 800cc1e:	005b      	lsls	r3, r3, #1
 800cc20:	440b      	add	r3, r1
 800cc22:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800cc24:	429a      	cmp	r2, r3
 800cc26:	d302      	bcc.n	800cc2e <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800cc28:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cc2a:	f000 fed1 	bl	800d9d0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800cc2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc30:	7d1b      	ldrb	r3, [r3, #20]
 800cc32:	2b03      	cmp	r3, #3
 800cc34:	d10b      	bne.n	800cc4e <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cc36:	4b61      	ldr	r3, [pc, #388]	; (800cdbc <tcp_slowtmr+0x580>)
 800cc38:	681a      	ldr	r2, [r3, #0]
 800cc3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc3c:	6a1b      	ldr	r3, [r3, #32]
 800cc3e:	1ad3      	subs	r3, r2, r3
 800cc40:	2b28      	cmp	r3, #40	; 0x28
 800cc42:	d904      	bls.n	800cc4e <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800cc44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc48:	3301      	adds	r3, #1
 800cc4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800cc4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc50:	7d1b      	ldrb	r3, [r3, #20]
 800cc52:	2b09      	cmp	r3, #9
 800cc54:	d10b      	bne.n	800cc6e <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800cc56:	4b59      	ldr	r3, [pc, #356]	; (800cdbc <tcp_slowtmr+0x580>)
 800cc58:	681a      	ldr	r2, [r3, #0]
 800cc5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc5c:	6a1b      	ldr	r3, [r3, #32]
 800cc5e:	1ad3      	subs	r3, r2, r3
 800cc60:	2bf0      	cmp	r3, #240	; 0xf0
 800cc62:	d904      	bls.n	800cc6e <tcp_slowtmr+0x432>
        ++pcb_remove;
 800cc64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc68:	3301      	adds	r3, #1
 800cc6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800cc6e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d060      	beq.n	800cd38 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800cc76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cc7c:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800cc7e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cc80:	f000 fcf2 	bl	800d668 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800cc84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d010      	beq.n	800ccac <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800cc8a:	4b50      	ldr	r3, [pc, #320]	; (800cdcc <tcp_slowtmr+0x590>)
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cc90:	429a      	cmp	r2, r3
 800cc92:	d106      	bne.n	800cca2 <tcp_slowtmr+0x466>
 800cc94:	4b4e      	ldr	r3, [pc, #312]	; (800cdd0 <tcp_slowtmr+0x594>)
 800cc96:	f240 526d 	movw	r2, #1389	; 0x56d
 800cc9a:	494e      	ldr	r1, [pc, #312]	; (800cdd4 <tcp_slowtmr+0x598>)
 800cc9c:	484e      	ldr	r0, [pc, #312]	; (800cdd8 <tcp_slowtmr+0x59c>)
 800cc9e:	f007 ff0d 	bl	8014abc <iprintf>
        prev->next = pcb->next;
 800cca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cca4:	68da      	ldr	r2, [r3, #12]
 800cca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cca8:	60da      	str	r2, [r3, #12]
 800ccaa:	e00f      	b.n	800cccc <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800ccac:	4b47      	ldr	r3, [pc, #284]	; (800cdcc <tcp_slowtmr+0x590>)
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ccb2:	429a      	cmp	r2, r3
 800ccb4:	d006      	beq.n	800ccc4 <tcp_slowtmr+0x488>
 800ccb6:	4b46      	ldr	r3, [pc, #280]	; (800cdd0 <tcp_slowtmr+0x594>)
 800ccb8:	f240 5271 	movw	r2, #1393	; 0x571
 800ccbc:	4947      	ldr	r1, [pc, #284]	; (800cddc <tcp_slowtmr+0x5a0>)
 800ccbe:	4846      	ldr	r0, [pc, #280]	; (800cdd8 <tcp_slowtmr+0x59c>)
 800ccc0:	f007 fefc 	bl	8014abc <iprintf>
        tcp_active_pcbs = pcb->next;
 800ccc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccc6:	68db      	ldr	r3, [r3, #12]
 800ccc8:	4a40      	ldr	r2, [pc, #256]	; (800cdcc <tcp_slowtmr+0x590>)
 800ccca:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800cccc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d013      	beq.n	800ccfc <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800ccd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccd6:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800ccd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccda:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800ccdc:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800ccde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cce0:	3304      	adds	r3, #4
 800cce2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cce4:	8ad2      	ldrh	r2, [r2, #22]
 800cce6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cce8:	8b09      	ldrh	r1, [r1, #24]
 800ccea:	9102      	str	r1, [sp, #8]
 800ccec:	9201      	str	r2, [sp, #4]
 800ccee:	9300      	str	r3, [sp, #0]
 800ccf0:	462b      	mov	r3, r5
 800ccf2:	4622      	mov	r2, r4
 800ccf4:	4601      	mov	r1, r0
 800ccf6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ccf8:	f004 fed2 	bl	8011aa0 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800ccfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccfe:	691b      	ldr	r3, [r3, #16]
 800cd00:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800cd02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd04:	7d1b      	ldrb	r3, [r3, #20]
 800cd06:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800cd08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd0a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800cd0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd0e:	68db      	ldr	r3, [r3, #12]
 800cd10:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800cd12:	6838      	ldr	r0, [r7, #0]
 800cd14:	f7ff f83a 	bl	800bd8c <tcp_free>

      tcp_active_pcbs_changed = 0;
 800cd18:	4b31      	ldr	r3, [pc, #196]	; (800cde0 <tcp_slowtmr+0x5a4>)
 800cd1a:	2200      	movs	r2, #0
 800cd1c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d004      	beq.n	800cd2e <tcp_slowtmr+0x4f2>
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	f06f 010c 	mvn.w	r1, #12
 800cd2a:	68b8      	ldr	r0, [r7, #8]
 800cd2c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800cd2e:	4b2c      	ldr	r3, [pc, #176]	; (800cde0 <tcp_slowtmr+0x5a4>)
 800cd30:	781b      	ldrb	r3, [r3, #0]
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d037      	beq.n	800cda6 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800cd36:	e592      	b.n	800c85e <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800cd38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd3a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800cd3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd3e:	68db      	ldr	r3, [r3, #12]
 800cd40:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800cd42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd44:	7f1b      	ldrb	r3, [r3, #28]
 800cd46:	3301      	adds	r3, #1
 800cd48:	b2da      	uxtb	r2, r3
 800cd4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd4c:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800cd4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd50:	7f1a      	ldrb	r2, [r3, #28]
 800cd52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd54:	7f5b      	ldrb	r3, [r3, #29]
 800cd56:	429a      	cmp	r2, r3
 800cd58:	d325      	bcc.n	800cda6 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800cd5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd5c:	2200      	movs	r2, #0
 800cd5e:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800cd60:	4b1f      	ldr	r3, [pc, #124]	; (800cde0 <tcp_slowtmr+0x5a4>)
 800cd62:	2200      	movs	r2, #0
 800cd64:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800cd66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d00b      	beq.n	800cd88 <tcp_slowtmr+0x54c>
 800cd70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cd76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cd78:	6912      	ldr	r2, [r2, #16]
 800cd7a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cd7c:	4610      	mov	r0, r2
 800cd7e:	4798      	blx	r3
 800cd80:	4603      	mov	r3, r0
 800cd82:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800cd86:	e002      	b.n	800cd8e <tcp_slowtmr+0x552>
 800cd88:	2300      	movs	r3, #0
 800cd8a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800cd8e:	4b14      	ldr	r3, [pc, #80]	; (800cde0 <tcp_slowtmr+0x5a4>)
 800cd90:	781b      	ldrb	r3, [r3, #0]
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d000      	beq.n	800cd98 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800cd96:	e562      	b.n	800c85e <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800cd98:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d102      	bne.n	800cda6 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800cda0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cda2:	f004 f8c9 	bl	8010f38 <tcp_output>
  while (pcb != NULL) {
 800cda6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	f47f ad5e 	bne.w	800c86a <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800cdae:	2300      	movs	r3, #0
 800cdb0:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800cdb2:	4b0c      	ldr	r3, [pc, #48]	; (800cde4 <tcp_slowtmr+0x5a8>)
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800cdb8:	e069      	b.n	800ce8e <tcp_slowtmr+0x652>
 800cdba:	bf00      	nop
 800cdbc:	24003c80 	.word	0x24003c80
 800cdc0:	000a4cb8 	.word	0x000a4cb8
 800cdc4:	10624dd3 	.word	0x10624dd3
 800cdc8:	000124f8 	.word	0x000124f8
 800cdcc:	24003c7c 	.word	0x24003c7c
 800cdd0:	08016d44 	.word	0x08016d44
 800cdd4:	0801717c 	.word	0x0801717c
 800cdd8:	08016d88 	.word	0x08016d88
 800cddc:	080171a8 	.word	0x080171a8
 800cde0:	24003c78 	.word	0x24003c78
 800cde4:	24003c8c 	.word	0x24003c8c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800cde8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdea:	7d1b      	ldrb	r3, [r3, #20]
 800cdec:	2b0a      	cmp	r3, #10
 800cdee:	d006      	beq.n	800cdfe <tcp_slowtmr+0x5c2>
 800cdf0:	4b2b      	ldr	r3, [pc, #172]	; (800cea0 <tcp_slowtmr+0x664>)
 800cdf2:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800cdf6:	492b      	ldr	r1, [pc, #172]	; (800cea4 <tcp_slowtmr+0x668>)
 800cdf8:	482b      	ldr	r0, [pc, #172]	; (800cea8 <tcp_slowtmr+0x66c>)
 800cdfa:	f007 fe5f 	bl	8014abc <iprintf>
    pcb_remove = 0;
 800cdfe:	2300      	movs	r3, #0
 800ce00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800ce04:	4b29      	ldr	r3, [pc, #164]	; (800ceac <tcp_slowtmr+0x670>)
 800ce06:	681a      	ldr	r2, [r3, #0]
 800ce08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce0a:	6a1b      	ldr	r3, [r3, #32]
 800ce0c:	1ad3      	subs	r3, r2, r3
 800ce0e:	2bf0      	cmp	r3, #240	; 0xf0
 800ce10:	d904      	bls.n	800ce1c <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800ce12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ce16:	3301      	adds	r3, #1
 800ce18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800ce1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d02f      	beq.n	800ce84 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800ce24:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ce26:	f000 fc1f 	bl	800d668 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800ce2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d010      	beq.n	800ce52 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800ce30:	4b1f      	ldr	r3, [pc, #124]	; (800ceb0 <tcp_slowtmr+0x674>)
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ce36:	429a      	cmp	r2, r3
 800ce38:	d106      	bne.n	800ce48 <tcp_slowtmr+0x60c>
 800ce3a:	4b19      	ldr	r3, [pc, #100]	; (800cea0 <tcp_slowtmr+0x664>)
 800ce3c:	f240 52af 	movw	r2, #1455	; 0x5af
 800ce40:	491c      	ldr	r1, [pc, #112]	; (800ceb4 <tcp_slowtmr+0x678>)
 800ce42:	4819      	ldr	r0, [pc, #100]	; (800cea8 <tcp_slowtmr+0x66c>)
 800ce44:	f007 fe3a 	bl	8014abc <iprintf>
        prev->next = pcb->next;
 800ce48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce4a:	68da      	ldr	r2, [r3, #12]
 800ce4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce4e:	60da      	str	r2, [r3, #12]
 800ce50:	e00f      	b.n	800ce72 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800ce52:	4b17      	ldr	r3, [pc, #92]	; (800ceb0 <tcp_slowtmr+0x674>)
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ce58:	429a      	cmp	r2, r3
 800ce5a:	d006      	beq.n	800ce6a <tcp_slowtmr+0x62e>
 800ce5c:	4b10      	ldr	r3, [pc, #64]	; (800cea0 <tcp_slowtmr+0x664>)
 800ce5e:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800ce62:	4915      	ldr	r1, [pc, #84]	; (800ceb8 <tcp_slowtmr+0x67c>)
 800ce64:	4810      	ldr	r0, [pc, #64]	; (800cea8 <tcp_slowtmr+0x66c>)
 800ce66:	f007 fe29 	bl	8014abc <iprintf>
        tcp_tw_pcbs = pcb->next;
 800ce6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce6c:	68db      	ldr	r3, [r3, #12]
 800ce6e:	4a10      	ldr	r2, [pc, #64]	; (800ceb0 <tcp_slowtmr+0x674>)
 800ce70:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800ce72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce74:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800ce76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce78:	68db      	ldr	r3, [r3, #12]
 800ce7a:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800ce7c:	69f8      	ldr	r0, [r7, #28]
 800ce7e:	f7fe ff85 	bl	800bd8c <tcp_free>
 800ce82:	e004      	b.n	800ce8e <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800ce84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce86:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800ce88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce8a:	68db      	ldr	r3, [r3, #12]
 800ce8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800ce8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d1a9      	bne.n	800cde8 <tcp_slowtmr+0x5ac>
    }
  }
}
 800ce94:	bf00      	nop
 800ce96:	bf00      	nop
 800ce98:	3730      	adds	r7, #48	; 0x30
 800ce9a:	46bd      	mov	sp, r7
 800ce9c:	bdb0      	pop	{r4, r5, r7, pc}
 800ce9e:	bf00      	nop
 800cea0:	08016d44 	.word	0x08016d44
 800cea4:	080171d4 	.word	0x080171d4
 800cea8:	08016d88 	.word	0x08016d88
 800ceac:	24003c80 	.word	0x24003c80
 800ceb0:	24003c8c 	.word	0x24003c8c
 800ceb4:	08017204 	.word	0x08017204
 800ceb8:	0801722c 	.word	0x0801722c

0800cebc <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800cebc:	b580      	push	{r7, lr}
 800cebe:	b082      	sub	sp, #8
 800cec0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800cec2:	4b2d      	ldr	r3, [pc, #180]	; (800cf78 <tcp_fasttmr+0xbc>)
 800cec4:	781b      	ldrb	r3, [r3, #0]
 800cec6:	3301      	adds	r3, #1
 800cec8:	b2da      	uxtb	r2, r3
 800ceca:	4b2b      	ldr	r3, [pc, #172]	; (800cf78 <tcp_fasttmr+0xbc>)
 800cecc:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800cece:	4b2b      	ldr	r3, [pc, #172]	; (800cf7c <tcp_fasttmr+0xc0>)
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800ced4:	e048      	b.n	800cf68 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	7f9a      	ldrb	r2, [r3, #30]
 800ceda:	4b27      	ldr	r3, [pc, #156]	; (800cf78 <tcp_fasttmr+0xbc>)
 800cedc:	781b      	ldrb	r3, [r3, #0]
 800cede:	429a      	cmp	r2, r3
 800cee0:	d03f      	beq.n	800cf62 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800cee2:	4b25      	ldr	r3, [pc, #148]	; (800cf78 <tcp_fasttmr+0xbc>)
 800cee4:	781a      	ldrb	r2, [r3, #0]
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	8b5b      	ldrh	r3, [r3, #26]
 800ceee:	f003 0301 	and.w	r3, r3, #1
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d010      	beq.n	800cf18 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	8b5b      	ldrh	r3, [r3, #26]
 800cefa:	f043 0302 	orr.w	r3, r3, #2
 800cefe:	b29a      	uxth	r2, r3
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800cf04:	6878      	ldr	r0, [r7, #4]
 800cf06:	f004 f817 	bl	8010f38 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	8b5b      	ldrh	r3, [r3, #26]
 800cf0e:	f023 0303 	bic.w	r3, r3, #3
 800cf12:	b29a      	uxth	r2, r3
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	8b5b      	ldrh	r3, [r3, #26]
 800cf1c:	f003 0308 	and.w	r3, r3, #8
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d009      	beq.n	800cf38 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	8b5b      	ldrh	r3, [r3, #26]
 800cf28:	f023 0308 	bic.w	r3, r3, #8
 800cf2c:	b29a      	uxth	r2, r3
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800cf32:	6878      	ldr	r0, [r7, #4]
 800cf34:	f7ff f8be 	bl	800c0b4 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	68db      	ldr	r3, [r3, #12]
 800cf3c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d00a      	beq.n	800cf5c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800cf46:	4b0e      	ldr	r3, [pc, #56]	; (800cf80 <tcp_fasttmr+0xc4>)
 800cf48:	2200      	movs	r2, #0
 800cf4a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800cf4c:	6878      	ldr	r0, [r7, #4]
 800cf4e:	f000 f819 	bl	800cf84 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800cf52:	4b0b      	ldr	r3, [pc, #44]	; (800cf80 <tcp_fasttmr+0xc4>)
 800cf54:	781b      	ldrb	r3, [r3, #0]
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d000      	beq.n	800cf5c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800cf5a:	e7b8      	b.n	800cece <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800cf5c:	683b      	ldr	r3, [r7, #0]
 800cf5e:	607b      	str	r3, [r7, #4]
 800cf60:	e002      	b.n	800cf68 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	68db      	ldr	r3, [r3, #12]
 800cf66:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d1b3      	bne.n	800ced6 <tcp_fasttmr+0x1a>
    }
  }
}
 800cf6e:	bf00      	nop
 800cf70:	bf00      	nop
 800cf72:	3708      	adds	r7, #8
 800cf74:	46bd      	mov	sp, r7
 800cf76:	bd80      	pop	{r7, pc}
 800cf78:	24000556 	.word	0x24000556
 800cf7c:	24003c7c 	.word	0x24003c7c
 800cf80:	24003c78 	.word	0x24003c78

0800cf84 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800cf84:	b590      	push	{r4, r7, lr}
 800cf86:	b085      	sub	sp, #20
 800cf88:	af00      	add	r7, sp, #0
 800cf8a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d109      	bne.n	800cfa6 <tcp_process_refused_data+0x22>
 800cf92:	4b37      	ldr	r3, [pc, #220]	; (800d070 <tcp_process_refused_data+0xec>)
 800cf94:	f240 6209 	movw	r2, #1545	; 0x609
 800cf98:	4936      	ldr	r1, [pc, #216]	; (800d074 <tcp_process_refused_data+0xf0>)
 800cf9a:	4837      	ldr	r0, [pc, #220]	; (800d078 <tcp_process_refused_data+0xf4>)
 800cf9c:	f007 fd8e 	bl	8014abc <iprintf>
 800cfa0:	f06f 030f 	mvn.w	r3, #15
 800cfa4:	e060      	b.n	800d068 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cfaa:	7b5b      	ldrb	r3, [r3, #13]
 800cfac:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cfb2:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	2200      	movs	r2, #0
 800cfb8:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d00b      	beq.n	800cfdc <tcp_process_refused_data+0x58>
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	6918      	ldr	r0, [r3, #16]
 800cfce:	2300      	movs	r3, #0
 800cfd0:	68ba      	ldr	r2, [r7, #8]
 800cfd2:	6879      	ldr	r1, [r7, #4]
 800cfd4:	47a0      	blx	r4
 800cfd6:	4603      	mov	r3, r0
 800cfd8:	73fb      	strb	r3, [r7, #15]
 800cfda:	e007      	b.n	800cfec <tcp_process_refused_data+0x68>
 800cfdc:	2300      	movs	r3, #0
 800cfde:	68ba      	ldr	r2, [r7, #8]
 800cfe0:	6879      	ldr	r1, [r7, #4]
 800cfe2:	2000      	movs	r0, #0
 800cfe4:	f000 f8c2 	bl	800d16c <tcp_recv_null>
 800cfe8:	4603      	mov	r3, r0
 800cfea:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800cfec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d12a      	bne.n	800d04a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800cff4:	7bbb      	ldrb	r3, [r7, #14]
 800cff6:	f003 0320 	and.w	r3, r3, #32
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d033      	beq.n	800d066 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d002:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d006:	d005      	beq.n	800d014 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d00c:	3301      	adds	r3, #1
 800d00e:	b29a      	uxth	r2, r3
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d00b      	beq.n	800d036 <tcp_process_refused_data+0xb2>
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	6918      	ldr	r0, [r3, #16]
 800d028:	2300      	movs	r3, #0
 800d02a:	2200      	movs	r2, #0
 800d02c:	6879      	ldr	r1, [r7, #4]
 800d02e:	47a0      	blx	r4
 800d030:	4603      	mov	r3, r0
 800d032:	73fb      	strb	r3, [r7, #15]
 800d034:	e001      	b.n	800d03a <tcp_process_refused_data+0xb6>
 800d036:	2300      	movs	r3, #0
 800d038:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800d03a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d03e:	f113 0f0d 	cmn.w	r3, #13
 800d042:	d110      	bne.n	800d066 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800d044:	f06f 030c 	mvn.w	r3, #12
 800d048:	e00e      	b.n	800d068 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800d04a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d04e:	f113 0f0d 	cmn.w	r3, #13
 800d052:	d102      	bne.n	800d05a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800d054:	f06f 030c 	mvn.w	r3, #12
 800d058:	e006      	b.n	800d068 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	68ba      	ldr	r2, [r7, #8]
 800d05e:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800d060:	f06f 0304 	mvn.w	r3, #4
 800d064:	e000      	b.n	800d068 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800d066:	2300      	movs	r3, #0
}
 800d068:	4618      	mov	r0, r3
 800d06a:	3714      	adds	r7, #20
 800d06c:	46bd      	mov	sp, r7
 800d06e:	bd90      	pop	{r4, r7, pc}
 800d070:	08016d44 	.word	0x08016d44
 800d074:	08017254 	.word	0x08017254
 800d078:	08016d88 	.word	0x08016d88

0800d07c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800d07c:	b580      	push	{r7, lr}
 800d07e:	b084      	sub	sp, #16
 800d080:	af00      	add	r7, sp, #0
 800d082:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800d084:	e007      	b.n	800d096 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800d08c:	6878      	ldr	r0, [r7, #4]
 800d08e:	f000 f80a 	bl	800d0a6 <tcp_seg_free>
    seg = next;
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d1f4      	bne.n	800d086 <tcp_segs_free+0xa>
  }
}
 800d09c:	bf00      	nop
 800d09e:	bf00      	nop
 800d0a0:	3710      	adds	r7, #16
 800d0a2:	46bd      	mov	sp, r7
 800d0a4:	bd80      	pop	{r7, pc}

0800d0a6 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800d0a6:	b580      	push	{r7, lr}
 800d0a8:	b082      	sub	sp, #8
 800d0aa:	af00      	add	r7, sp, #0
 800d0ac:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d00c      	beq.n	800d0ce <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	685b      	ldr	r3, [r3, #4]
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d004      	beq.n	800d0c6 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	685b      	ldr	r3, [r3, #4]
 800d0c0:	4618      	mov	r0, r3
 800d0c2:	f7fe fbb3 	bl	800b82c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800d0c6:	6879      	ldr	r1, [r7, #4]
 800d0c8:	2003      	movs	r0, #3
 800d0ca:	f7fd fd39 	bl	800ab40 <memp_free>
  }
}
 800d0ce:	bf00      	nop
 800d0d0:	3708      	adds	r7, #8
 800d0d2:	46bd      	mov	sp, r7
 800d0d4:	bd80      	pop	{r7, pc}
	...

0800d0d8 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 800d0d8:	b580      	push	{r7, lr}
 800d0da:	b082      	sub	sp, #8
 800d0dc:	af00      	add	r7, sp, #0
 800d0de:	6078      	str	r0, [r7, #4]
 800d0e0:	460b      	mov	r3, r1
 800d0e2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d107      	bne.n	800d0fa <tcp_setprio+0x22>
 800d0ea:	4b07      	ldr	r3, [pc, #28]	; (800d108 <tcp_setprio+0x30>)
 800d0ec:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 800d0f0:	4906      	ldr	r1, [pc, #24]	; (800d10c <tcp_setprio+0x34>)
 800d0f2:	4807      	ldr	r0, [pc, #28]	; (800d110 <tcp_setprio+0x38>)
 800d0f4:	f007 fce2 	bl	8014abc <iprintf>
 800d0f8:	e002      	b.n	800d100 <tcp_setprio+0x28>

  pcb->prio = prio;
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	78fa      	ldrb	r2, [r7, #3]
 800d0fe:	755a      	strb	r2, [r3, #21]
}
 800d100:	3708      	adds	r7, #8
 800d102:	46bd      	mov	sp, r7
 800d104:	bd80      	pop	{r7, pc}
 800d106:	bf00      	nop
 800d108:	08016d44 	.word	0x08016d44
 800d10c:	0801727c 	.word	0x0801727c
 800d110:	08016d88 	.word	0x08016d88

0800d114 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800d114:	b580      	push	{r7, lr}
 800d116:	b084      	sub	sp, #16
 800d118:	af00      	add	r7, sp, #0
 800d11a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d106      	bne.n	800d130 <tcp_seg_copy+0x1c>
 800d122:	4b0f      	ldr	r3, [pc, #60]	; (800d160 <tcp_seg_copy+0x4c>)
 800d124:	f240 6282 	movw	r2, #1666	; 0x682
 800d128:	490e      	ldr	r1, [pc, #56]	; (800d164 <tcp_seg_copy+0x50>)
 800d12a:	480f      	ldr	r0, [pc, #60]	; (800d168 <tcp_seg_copy+0x54>)
 800d12c:	f007 fcc6 	bl	8014abc <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800d130:	2003      	movs	r0, #3
 800d132:	f7fd fc95 	bl	800aa60 <memp_malloc>
 800d136:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d101      	bne.n	800d142 <tcp_seg_copy+0x2e>
    return NULL;
 800d13e:	2300      	movs	r3, #0
 800d140:	e00a      	b.n	800d158 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800d142:	2210      	movs	r2, #16
 800d144:	6879      	ldr	r1, [r7, #4]
 800d146:	68f8      	ldr	r0, [r7, #12]
 800d148:	f007 fc88 	bl	8014a5c <memcpy>
  pbuf_ref(cseg->p);
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	685b      	ldr	r3, [r3, #4]
 800d150:	4618      	mov	r0, r3
 800d152:	f7fe fc0b 	bl	800b96c <pbuf_ref>
  return cseg;
 800d156:	68fb      	ldr	r3, [r7, #12]
}
 800d158:	4618      	mov	r0, r3
 800d15a:	3710      	adds	r7, #16
 800d15c:	46bd      	mov	sp, r7
 800d15e:	bd80      	pop	{r7, pc}
 800d160:	08016d44 	.word	0x08016d44
 800d164:	08017298 	.word	0x08017298
 800d168:	08016d88 	.word	0x08016d88

0800d16c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800d16c:	b580      	push	{r7, lr}
 800d16e:	b084      	sub	sp, #16
 800d170:	af00      	add	r7, sp, #0
 800d172:	60f8      	str	r0, [r7, #12]
 800d174:	60b9      	str	r1, [r7, #8]
 800d176:	607a      	str	r2, [r7, #4]
 800d178:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800d17a:	68bb      	ldr	r3, [r7, #8]
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d109      	bne.n	800d194 <tcp_recv_null+0x28>
 800d180:	4b12      	ldr	r3, [pc, #72]	; (800d1cc <tcp_recv_null+0x60>)
 800d182:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800d186:	4912      	ldr	r1, [pc, #72]	; (800d1d0 <tcp_recv_null+0x64>)
 800d188:	4812      	ldr	r0, [pc, #72]	; (800d1d4 <tcp_recv_null+0x68>)
 800d18a:	f007 fc97 	bl	8014abc <iprintf>
 800d18e:	f06f 030f 	mvn.w	r3, #15
 800d192:	e016      	b.n	800d1c2 <tcp_recv_null+0x56>

  if (p != NULL) {
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	2b00      	cmp	r3, #0
 800d198:	d009      	beq.n	800d1ae <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	891b      	ldrh	r3, [r3, #8]
 800d19e:	4619      	mov	r1, r3
 800d1a0:	68b8      	ldr	r0, [r7, #8]
 800d1a2:	f7ff fab5 	bl	800c710 <tcp_recved>
    pbuf_free(p);
 800d1a6:	6878      	ldr	r0, [r7, #4]
 800d1a8:	f7fe fb40 	bl	800b82c <pbuf_free>
 800d1ac:	e008      	b.n	800d1c0 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800d1ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d104      	bne.n	800d1c0 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800d1b6:	68b8      	ldr	r0, [r7, #8]
 800d1b8:	f7fe ffe6 	bl	800c188 <tcp_close>
 800d1bc:	4603      	mov	r3, r0
 800d1be:	e000      	b.n	800d1c2 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800d1c0:	2300      	movs	r3, #0
}
 800d1c2:	4618      	mov	r0, r3
 800d1c4:	3710      	adds	r7, #16
 800d1c6:	46bd      	mov	sp, r7
 800d1c8:	bd80      	pop	{r7, pc}
 800d1ca:	bf00      	nop
 800d1cc:	08016d44 	.word	0x08016d44
 800d1d0:	080172b4 	.word	0x080172b4
 800d1d4:	08016d88 	.word	0x08016d88

0800d1d8 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800d1d8:	b580      	push	{r7, lr}
 800d1da:	b086      	sub	sp, #24
 800d1dc:	af00      	add	r7, sp, #0
 800d1de:	4603      	mov	r3, r0
 800d1e0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800d1e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	db01      	blt.n	800d1ee <tcp_kill_prio+0x16>
 800d1ea:	79fb      	ldrb	r3, [r7, #7]
 800d1ec:	e000      	b.n	800d1f0 <tcp_kill_prio+0x18>
 800d1ee:	237f      	movs	r3, #127	; 0x7f
 800d1f0:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800d1f2:	7afb      	ldrb	r3, [r7, #11]
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d034      	beq.n	800d262 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800d1f8:	7afb      	ldrb	r3, [r7, #11]
 800d1fa:	3b01      	subs	r3, #1
 800d1fc:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800d1fe:	2300      	movs	r3, #0
 800d200:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800d202:	2300      	movs	r3, #0
 800d204:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d206:	4b19      	ldr	r3, [pc, #100]	; (800d26c <tcp_kill_prio+0x94>)
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	617b      	str	r3, [r7, #20]
 800d20c:	e01f      	b.n	800d24e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800d20e:	697b      	ldr	r3, [r7, #20]
 800d210:	7d5b      	ldrb	r3, [r3, #21]
 800d212:	7afa      	ldrb	r2, [r7, #11]
 800d214:	429a      	cmp	r2, r3
 800d216:	d80c      	bhi.n	800d232 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800d218:	697b      	ldr	r3, [r7, #20]
 800d21a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800d21c:	7afa      	ldrb	r2, [r7, #11]
 800d21e:	429a      	cmp	r2, r3
 800d220:	d112      	bne.n	800d248 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800d222:	4b13      	ldr	r3, [pc, #76]	; (800d270 <tcp_kill_prio+0x98>)
 800d224:	681a      	ldr	r2, [r3, #0]
 800d226:	697b      	ldr	r3, [r7, #20]
 800d228:	6a1b      	ldr	r3, [r3, #32]
 800d22a:	1ad3      	subs	r3, r2, r3
 800d22c:	68fa      	ldr	r2, [r7, #12]
 800d22e:	429a      	cmp	r2, r3
 800d230:	d80a      	bhi.n	800d248 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800d232:	4b0f      	ldr	r3, [pc, #60]	; (800d270 <tcp_kill_prio+0x98>)
 800d234:	681a      	ldr	r2, [r3, #0]
 800d236:	697b      	ldr	r3, [r7, #20]
 800d238:	6a1b      	ldr	r3, [r3, #32]
 800d23a:	1ad3      	subs	r3, r2, r3
 800d23c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800d23e:	697b      	ldr	r3, [r7, #20]
 800d240:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800d242:	697b      	ldr	r3, [r7, #20]
 800d244:	7d5b      	ldrb	r3, [r3, #21]
 800d246:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d248:	697b      	ldr	r3, [r7, #20]
 800d24a:	68db      	ldr	r3, [r3, #12]
 800d24c:	617b      	str	r3, [r7, #20]
 800d24e:	697b      	ldr	r3, [r7, #20]
 800d250:	2b00      	cmp	r3, #0
 800d252:	d1dc      	bne.n	800d20e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800d254:	693b      	ldr	r3, [r7, #16]
 800d256:	2b00      	cmp	r3, #0
 800d258:	d004      	beq.n	800d264 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800d25a:	6938      	ldr	r0, [r7, #16]
 800d25c:	f7ff f87e 	bl	800c35c <tcp_abort>
 800d260:	e000      	b.n	800d264 <tcp_kill_prio+0x8c>
    return;
 800d262:	bf00      	nop
  }
}
 800d264:	3718      	adds	r7, #24
 800d266:	46bd      	mov	sp, r7
 800d268:	bd80      	pop	{r7, pc}
 800d26a:	bf00      	nop
 800d26c:	24003c7c 	.word	0x24003c7c
 800d270:	24003c80 	.word	0x24003c80

0800d274 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800d274:	b580      	push	{r7, lr}
 800d276:	b086      	sub	sp, #24
 800d278:	af00      	add	r7, sp, #0
 800d27a:	4603      	mov	r3, r0
 800d27c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800d27e:	79fb      	ldrb	r3, [r7, #7]
 800d280:	2b08      	cmp	r3, #8
 800d282:	d009      	beq.n	800d298 <tcp_kill_state+0x24>
 800d284:	79fb      	ldrb	r3, [r7, #7]
 800d286:	2b09      	cmp	r3, #9
 800d288:	d006      	beq.n	800d298 <tcp_kill_state+0x24>
 800d28a:	4b1a      	ldr	r3, [pc, #104]	; (800d2f4 <tcp_kill_state+0x80>)
 800d28c:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800d290:	4919      	ldr	r1, [pc, #100]	; (800d2f8 <tcp_kill_state+0x84>)
 800d292:	481a      	ldr	r0, [pc, #104]	; (800d2fc <tcp_kill_state+0x88>)
 800d294:	f007 fc12 	bl	8014abc <iprintf>

  inactivity = 0;
 800d298:	2300      	movs	r3, #0
 800d29a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800d29c:	2300      	movs	r3, #0
 800d29e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d2a0:	4b17      	ldr	r3, [pc, #92]	; (800d300 <tcp_kill_state+0x8c>)
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	617b      	str	r3, [r7, #20]
 800d2a6:	e017      	b.n	800d2d8 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800d2a8:	697b      	ldr	r3, [r7, #20]
 800d2aa:	7d1b      	ldrb	r3, [r3, #20]
 800d2ac:	79fa      	ldrb	r2, [r7, #7]
 800d2ae:	429a      	cmp	r2, r3
 800d2b0:	d10f      	bne.n	800d2d2 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d2b2:	4b14      	ldr	r3, [pc, #80]	; (800d304 <tcp_kill_state+0x90>)
 800d2b4:	681a      	ldr	r2, [r3, #0]
 800d2b6:	697b      	ldr	r3, [r7, #20]
 800d2b8:	6a1b      	ldr	r3, [r3, #32]
 800d2ba:	1ad3      	subs	r3, r2, r3
 800d2bc:	68fa      	ldr	r2, [r7, #12]
 800d2be:	429a      	cmp	r2, r3
 800d2c0:	d807      	bhi.n	800d2d2 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800d2c2:	4b10      	ldr	r3, [pc, #64]	; (800d304 <tcp_kill_state+0x90>)
 800d2c4:	681a      	ldr	r2, [r3, #0]
 800d2c6:	697b      	ldr	r3, [r7, #20]
 800d2c8:	6a1b      	ldr	r3, [r3, #32]
 800d2ca:	1ad3      	subs	r3, r2, r3
 800d2cc:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800d2ce:	697b      	ldr	r3, [r7, #20]
 800d2d0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d2d2:	697b      	ldr	r3, [r7, #20]
 800d2d4:	68db      	ldr	r3, [r3, #12]
 800d2d6:	617b      	str	r3, [r7, #20]
 800d2d8:	697b      	ldr	r3, [r7, #20]
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d1e4      	bne.n	800d2a8 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800d2de:	693b      	ldr	r3, [r7, #16]
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d003      	beq.n	800d2ec <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800d2e4:	2100      	movs	r1, #0
 800d2e6:	6938      	ldr	r0, [r7, #16]
 800d2e8:	f7fe ff7a 	bl	800c1e0 <tcp_abandon>
  }
}
 800d2ec:	bf00      	nop
 800d2ee:	3718      	adds	r7, #24
 800d2f0:	46bd      	mov	sp, r7
 800d2f2:	bd80      	pop	{r7, pc}
 800d2f4:	08016d44 	.word	0x08016d44
 800d2f8:	080172d0 	.word	0x080172d0
 800d2fc:	08016d88 	.word	0x08016d88
 800d300:	24003c7c 	.word	0x24003c7c
 800d304:	24003c80 	.word	0x24003c80

0800d308 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800d308:	b580      	push	{r7, lr}
 800d30a:	b084      	sub	sp, #16
 800d30c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800d30e:	2300      	movs	r3, #0
 800d310:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800d312:	2300      	movs	r3, #0
 800d314:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d316:	4b12      	ldr	r3, [pc, #72]	; (800d360 <tcp_kill_timewait+0x58>)
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	60fb      	str	r3, [r7, #12]
 800d31c:	e012      	b.n	800d344 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d31e:	4b11      	ldr	r3, [pc, #68]	; (800d364 <tcp_kill_timewait+0x5c>)
 800d320:	681a      	ldr	r2, [r3, #0]
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	6a1b      	ldr	r3, [r3, #32]
 800d326:	1ad3      	subs	r3, r2, r3
 800d328:	687a      	ldr	r2, [r7, #4]
 800d32a:	429a      	cmp	r2, r3
 800d32c:	d807      	bhi.n	800d33e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800d32e:	4b0d      	ldr	r3, [pc, #52]	; (800d364 <tcp_kill_timewait+0x5c>)
 800d330:	681a      	ldr	r2, [r3, #0]
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	6a1b      	ldr	r3, [r3, #32]
 800d336:	1ad3      	subs	r3, r2, r3
 800d338:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	68db      	ldr	r3, [r3, #12]
 800d342:	60fb      	str	r3, [r7, #12]
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	2b00      	cmp	r3, #0
 800d348:	d1e9      	bne.n	800d31e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800d34a:	68bb      	ldr	r3, [r7, #8]
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d002      	beq.n	800d356 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800d350:	68b8      	ldr	r0, [r7, #8]
 800d352:	f7ff f803 	bl	800c35c <tcp_abort>
  }
}
 800d356:	bf00      	nop
 800d358:	3710      	adds	r7, #16
 800d35a:	46bd      	mov	sp, r7
 800d35c:	bd80      	pop	{r7, pc}
 800d35e:	bf00      	nop
 800d360:	24003c8c 	.word	0x24003c8c
 800d364:	24003c80 	.word	0x24003c80

0800d368 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800d368:	b580      	push	{r7, lr}
 800d36a:	b082      	sub	sp, #8
 800d36c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800d36e:	4b10      	ldr	r3, [pc, #64]	; (800d3b0 <tcp_handle_closepend+0x48>)
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800d374:	e014      	b.n	800d3a0 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	68db      	ldr	r3, [r3, #12]
 800d37a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	8b5b      	ldrh	r3, [r3, #26]
 800d380:	f003 0308 	and.w	r3, r3, #8
 800d384:	2b00      	cmp	r3, #0
 800d386:	d009      	beq.n	800d39c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	8b5b      	ldrh	r3, [r3, #26]
 800d38c:	f023 0308 	bic.w	r3, r3, #8
 800d390:	b29a      	uxth	r2, r3
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800d396:	6878      	ldr	r0, [r7, #4]
 800d398:	f7fe fe8c 	bl	800c0b4 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800d39c:	683b      	ldr	r3, [r7, #0]
 800d39e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d1e7      	bne.n	800d376 <tcp_handle_closepend+0xe>
  }
}
 800d3a6:	bf00      	nop
 800d3a8:	bf00      	nop
 800d3aa:	3708      	adds	r7, #8
 800d3ac:	46bd      	mov	sp, r7
 800d3ae:	bd80      	pop	{r7, pc}
 800d3b0:	24003c7c 	.word	0x24003c7c

0800d3b4 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800d3b4:	b580      	push	{r7, lr}
 800d3b6:	b084      	sub	sp, #16
 800d3b8:	af00      	add	r7, sp, #0
 800d3ba:	4603      	mov	r3, r0
 800d3bc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d3be:	2001      	movs	r0, #1
 800d3c0:	f7fd fb4e 	bl	800aa60 <memp_malloc>
 800d3c4:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d126      	bne.n	800d41a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800d3cc:	f7ff ffcc 	bl	800d368 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800d3d0:	f7ff ff9a 	bl	800d308 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d3d4:	2001      	movs	r0, #1
 800d3d6:	f7fd fb43 	bl	800aa60 <memp_malloc>
 800d3da:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d11b      	bne.n	800d41a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800d3e2:	2009      	movs	r0, #9
 800d3e4:	f7ff ff46 	bl	800d274 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d3e8:	2001      	movs	r0, #1
 800d3ea:	f7fd fb39 	bl	800aa60 <memp_malloc>
 800d3ee:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d111      	bne.n	800d41a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800d3f6:	2008      	movs	r0, #8
 800d3f8:	f7ff ff3c 	bl	800d274 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d3fc:	2001      	movs	r0, #1
 800d3fe:	f7fd fb2f 	bl	800aa60 <memp_malloc>
 800d402:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	2b00      	cmp	r3, #0
 800d408:	d107      	bne.n	800d41a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800d40a:	79fb      	ldrb	r3, [r7, #7]
 800d40c:	4618      	mov	r0, r3
 800d40e:	f7ff fee3 	bl	800d1d8 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d412:	2001      	movs	r0, #1
 800d414:	f7fd fb24 	bl	800aa60 <memp_malloc>
 800d418:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d03f      	beq.n	800d4a0 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800d420:	229c      	movs	r2, #156	; 0x9c
 800d422:	2100      	movs	r1, #0
 800d424:	68f8      	ldr	r0, [r7, #12]
 800d426:	f007 fb41 	bl	8014aac <memset>
    pcb->prio = prio;
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	79fa      	ldrb	r2, [r7, #7]
 800d42e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800d436:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800d440:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	22ff      	movs	r2, #255	; 0xff
 800d44e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	f44f 7206 	mov.w	r2, #536	; 0x218
 800d456:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	2206      	movs	r2, #6
 800d45c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	2206      	movs	r2, #6
 800d464:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d46c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	2201      	movs	r2, #1
 800d472:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800d476:	4b0d      	ldr	r3, [pc, #52]	; (800d4ac <tcp_alloc+0xf8>)
 800d478:	681a      	ldr	r2, [r3, #0]
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800d47e:	4b0c      	ldr	r3, [pc, #48]	; (800d4b0 <tcp_alloc+0xfc>)
 800d480:	781a      	ldrb	r2, [r3, #0]
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800d48c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	4a08      	ldr	r2, [pc, #32]	; (800d4b4 <tcp_alloc+0x100>)
 800d494:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	4a07      	ldr	r2, [pc, #28]	; (800d4b8 <tcp_alloc+0x104>)
 800d49c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800d4a0:	68fb      	ldr	r3, [r7, #12]
}
 800d4a2:	4618      	mov	r0, r3
 800d4a4:	3710      	adds	r7, #16
 800d4a6:	46bd      	mov	sp, r7
 800d4a8:	bd80      	pop	{r7, pc}
 800d4aa:	bf00      	nop
 800d4ac:	24003c80 	.word	0x24003c80
 800d4b0:	24000556 	.word	0x24000556
 800d4b4:	0800d16d 	.word	0x0800d16d
 800d4b8:	006ddd00 	.word	0x006ddd00

0800d4bc <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 800d4bc:	b580      	push	{r7, lr}
 800d4be:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 800d4c0:	2040      	movs	r0, #64	; 0x40
 800d4c2:	f7ff ff77 	bl	800d3b4 <tcp_alloc>
 800d4c6:	4603      	mov	r3, r0
}
 800d4c8:	4618      	mov	r0, r3
 800d4ca:	bd80      	pop	{r7, pc}

0800d4cc <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800d4cc:	b580      	push	{r7, lr}
 800d4ce:	b084      	sub	sp, #16
 800d4d0:	af00      	add	r7, sp, #0
 800d4d2:	4603      	mov	r3, r0
 800d4d4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800d4d6:	2040      	movs	r0, #64	; 0x40
 800d4d8:	f7ff ff6c 	bl	800d3b4 <tcp_alloc>
 800d4dc:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800d4de:	68fb      	ldr	r3, [r7, #12]
}
 800d4e0:	4618      	mov	r0, r3
 800d4e2:	3710      	adds	r7, #16
 800d4e4:	46bd      	mov	sp, r7
 800d4e6:	bd80      	pop	{r7, pc}

0800d4e8 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800d4e8:	b480      	push	{r7}
 800d4ea:	b083      	sub	sp, #12
 800d4ec:	af00      	add	r7, sp, #0
 800d4ee:	6078      	str	r0, [r7, #4]
 800d4f0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d002      	beq.n	800d4fe <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	683a      	ldr	r2, [r7, #0]
 800d4fc:	611a      	str	r2, [r3, #16]
  }
}
 800d4fe:	bf00      	nop
 800d500:	370c      	adds	r7, #12
 800d502:	46bd      	mov	sp, r7
 800d504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d508:	4770      	bx	lr
	...

0800d50c <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800d50c:	b580      	push	{r7, lr}
 800d50e:	b082      	sub	sp, #8
 800d510:	af00      	add	r7, sp, #0
 800d512:	6078      	str	r0, [r7, #4]
 800d514:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d00e      	beq.n	800d53a <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	7d1b      	ldrb	r3, [r3, #20]
 800d520:	2b01      	cmp	r3, #1
 800d522:	d106      	bne.n	800d532 <tcp_recv+0x26>
 800d524:	4b07      	ldr	r3, [pc, #28]	; (800d544 <tcp_recv+0x38>)
 800d526:	f240 72df 	movw	r2, #2015	; 0x7df
 800d52a:	4907      	ldr	r1, [pc, #28]	; (800d548 <tcp_recv+0x3c>)
 800d52c:	4807      	ldr	r0, [pc, #28]	; (800d54c <tcp_recv+0x40>)
 800d52e:	f007 fac5 	bl	8014abc <iprintf>
    pcb->recv = recv;
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	683a      	ldr	r2, [r7, #0]
 800d536:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800d53a:	bf00      	nop
 800d53c:	3708      	adds	r7, #8
 800d53e:	46bd      	mov	sp, r7
 800d540:	bd80      	pop	{r7, pc}
 800d542:	bf00      	nop
 800d544:	08016d44 	.word	0x08016d44
 800d548:	080172e0 	.word	0x080172e0
 800d54c:	08016d88 	.word	0x08016d88

0800d550 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800d550:	b580      	push	{r7, lr}
 800d552:	b082      	sub	sp, #8
 800d554:	af00      	add	r7, sp, #0
 800d556:	6078      	str	r0, [r7, #4]
 800d558:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d00e      	beq.n	800d57e <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	7d1b      	ldrb	r3, [r3, #20]
 800d564:	2b01      	cmp	r3, #1
 800d566:	d106      	bne.n	800d576 <tcp_sent+0x26>
 800d568:	4b07      	ldr	r3, [pc, #28]	; (800d588 <tcp_sent+0x38>)
 800d56a:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800d56e:	4907      	ldr	r1, [pc, #28]	; (800d58c <tcp_sent+0x3c>)
 800d570:	4807      	ldr	r0, [pc, #28]	; (800d590 <tcp_sent+0x40>)
 800d572:	f007 faa3 	bl	8014abc <iprintf>
    pcb->sent = sent;
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	683a      	ldr	r2, [r7, #0]
 800d57a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800d57e:	bf00      	nop
 800d580:	3708      	adds	r7, #8
 800d582:	46bd      	mov	sp, r7
 800d584:	bd80      	pop	{r7, pc}
 800d586:	bf00      	nop
 800d588:	08016d44 	.word	0x08016d44
 800d58c:	08017308 	.word	0x08017308
 800d590:	08016d88 	.word	0x08016d88

0800d594 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800d594:	b580      	push	{r7, lr}
 800d596:	b082      	sub	sp, #8
 800d598:	af00      	add	r7, sp, #0
 800d59a:	6078      	str	r0, [r7, #4]
 800d59c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d00e      	beq.n	800d5c2 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	7d1b      	ldrb	r3, [r3, #20]
 800d5a8:	2b01      	cmp	r3, #1
 800d5aa:	d106      	bne.n	800d5ba <tcp_err+0x26>
 800d5ac:	4b07      	ldr	r3, [pc, #28]	; (800d5cc <tcp_err+0x38>)
 800d5ae:	f640 020d 	movw	r2, #2061	; 0x80d
 800d5b2:	4907      	ldr	r1, [pc, #28]	; (800d5d0 <tcp_err+0x3c>)
 800d5b4:	4807      	ldr	r0, [pc, #28]	; (800d5d4 <tcp_err+0x40>)
 800d5b6:	f007 fa81 	bl	8014abc <iprintf>
    pcb->errf = err;
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	683a      	ldr	r2, [r7, #0]
 800d5be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800d5c2:	bf00      	nop
 800d5c4:	3708      	adds	r7, #8
 800d5c6:	46bd      	mov	sp, r7
 800d5c8:	bd80      	pop	{r7, pc}
 800d5ca:	bf00      	nop
 800d5cc:	08016d44 	.word	0x08016d44
 800d5d0:	08017330 	.word	0x08017330
 800d5d4:	08016d88 	.word	0x08016d88

0800d5d8 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800d5d8:	b480      	push	{r7}
 800d5da:	b085      	sub	sp, #20
 800d5dc:	af00      	add	r7, sp, #0
 800d5de:	6078      	str	r0, [r7, #4]
 800d5e0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d008      	beq.n	800d5fa <tcp_accept+0x22>
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	7d1b      	ldrb	r3, [r3, #20]
 800d5ec:	2b01      	cmp	r3, #1
 800d5ee:	d104      	bne.n	800d5fa <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	683a      	ldr	r2, [r7, #0]
 800d5f8:	619a      	str	r2, [r3, #24]
  }
}
 800d5fa:	bf00      	nop
 800d5fc:	3714      	adds	r7, #20
 800d5fe:	46bd      	mov	sp, r7
 800d600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d604:	4770      	bx	lr
	...

0800d608 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800d608:	b580      	push	{r7, lr}
 800d60a:	b084      	sub	sp, #16
 800d60c:	af00      	add	r7, sp, #0
 800d60e:	60f8      	str	r0, [r7, #12]
 800d610:	60b9      	str	r1, [r7, #8]
 800d612:	4613      	mov	r3, r2
 800d614:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d107      	bne.n	800d62c <tcp_poll+0x24>
 800d61c:	4b0e      	ldr	r3, [pc, #56]	; (800d658 <tcp_poll+0x50>)
 800d61e:	f640 023d 	movw	r2, #2109	; 0x83d
 800d622:	490e      	ldr	r1, [pc, #56]	; (800d65c <tcp_poll+0x54>)
 800d624:	480e      	ldr	r0, [pc, #56]	; (800d660 <tcp_poll+0x58>)
 800d626:	f007 fa49 	bl	8014abc <iprintf>
 800d62a:	e011      	b.n	800d650 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	7d1b      	ldrb	r3, [r3, #20]
 800d630:	2b01      	cmp	r3, #1
 800d632:	d106      	bne.n	800d642 <tcp_poll+0x3a>
 800d634:	4b08      	ldr	r3, [pc, #32]	; (800d658 <tcp_poll+0x50>)
 800d636:	f640 023e 	movw	r2, #2110	; 0x83e
 800d63a:	490a      	ldr	r1, [pc, #40]	; (800d664 <tcp_poll+0x5c>)
 800d63c:	4808      	ldr	r0, [pc, #32]	; (800d660 <tcp_poll+0x58>)
 800d63e:	f007 fa3d 	bl	8014abc <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	68ba      	ldr	r2, [r7, #8]
 800d646:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	79fa      	ldrb	r2, [r7, #7]
 800d64e:	775a      	strb	r2, [r3, #29]
}
 800d650:	3710      	adds	r7, #16
 800d652:	46bd      	mov	sp, r7
 800d654:	bd80      	pop	{r7, pc}
 800d656:	bf00      	nop
 800d658:	08016d44 	.word	0x08016d44
 800d65c:	08017358 	.word	0x08017358
 800d660:	08016d88 	.word	0x08016d88
 800d664:	08017370 	.word	0x08017370

0800d668 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800d668:	b580      	push	{r7, lr}
 800d66a:	b082      	sub	sp, #8
 800d66c:	af00      	add	r7, sp, #0
 800d66e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	2b00      	cmp	r3, #0
 800d674:	d107      	bne.n	800d686 <tcp_pcb_purge+0x1e>
 800d676:	4b21      	ldr	r3, [pc, #132]	; (800d6fc <tcp_pcb_purge+0x94>)
 800d678:	f640 0251 	movw	r2, #2129	; 0x851
 800d67c:	4920      	ldr	r1, [pc, #128]	; (800d700 <tcp_pcb_purge+0x98>)
 800d67e:	4821      	ldr	r0, [pc, #132]	; (800d704 <tcp_pcb_purge+0x9c>)
 800d680:	f007 fa1c 	bl	8014abc <iprintf>
 800d684:	e037      	b.n	800d6f6 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	7d1b      	ldrb	r3, [r3, #20]
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d033      	beq.n	800d6f6 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800d692:	2b0a      	cmp	r3, #10
 800d694:	d02f      	beq.n	800d6f6 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800d69a:	2b01      	cmp	r3, #1
 800d69c:	d02b      	beq.n	800d6f6 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d007      	beq.n	800d6b6 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d6aa:	4618      	mov	r0, r3
 800d6ac:	f7fe f8be 	bl	800b82c <pbuf_free>
      pcb->refused_data = NULL;
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	2200      	movs	r2, #0
 800d6b4:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d002      	beq.n	800d6c4 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800d6be:	6878      	ldr	r0, [r7, #4]
 800d6c0:	f000 f986 	bl	800d9d0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d6ca:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d6d0:	4618      	mov	r0, r3
 800d6d2:	f7ff fcd3 	bl	800d07c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d6da:	4618      	mov	r0, r3
 800d6dc:	f7ff fcce 	bl	800d07c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	2200      	movs	r2, #0
 800d6e4:	66da      	str	r2, [r3, #108]	; 0x6c
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	2200      	movs	r2, #0
 800d6f2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800d6f6:	3708      	adds	r7, #8
 800d6f8:	46bd      	mov	sp, r7
 800d6fa:	bd80      	pop	{r7, pc}
 800d6fc:	08016d44 	.word	0x08016d44
 800d700:	08017390 	.word	0x08017390
 800d704:	08016d88 	.word	0x08016d88

0800d708 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800d708:	b580      	push	{r7, lr}
 800d70a:	b084      	sub	sp, #16
 800d70c:	af00      	add	r7, sp, #0
 800d70e:	6078      	str	r0, [r7, #4]
 800d710:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800d712:	683b      	ldr	r3, [r7, #0]
 800d714:	2b00      	cmp	r3, #0
 800d716:	d106      	bne.n	800d726 <tcp_pcb_remove+0x1e>
 800d718:	4b3e      	ldr	r3, [pc, #248]	; (800d814 <tcp_pcb_remove+0x10c>)
 800d71a:	f640 0283 	movw	r2, #2179	; 0x883
 800d71e:	493e      	ldr	r1, [pc, #248]	; (800d818 <tcp_pcb_remove+0x110>)
 800d720:	483e      	ldr	r0, [pc, #248]	; (800d81c <tcp_pcb_remove+0x114>)
 800d722:	f007 f9cb 	bl	8014abc <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d106      	bne.n	800d73a <tcp_pcb_remove+0x32>
 800d72c:	4b39      	ldr	r3, [pc, #228]	; (800d814 <tcp_pcb_remove+0x10c>)
 800d72e:	f640 0284 	movw	r2, #2180	; 0x884
 800d732:	493b      	ldr	r1, [pc, #236]	; (800d820 <tcp_pcb_remove+0x118>)
 800d734:	4839      	ldr	r0, [pc, #228]	; (800d81c <tcp_pcb_remove+0x114>)
 800d736:	f007 f9c1 	bl	8014abc <iprintf>

  TCP_RMV(pcblist, pcb);
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	683a      	ldr	r2, [r7, #0]
 800d740:	429a      	cmp	r2, r3
 800d742:	d105      	bne.n	800d750 <tcp_pcb_remove+0x48>
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	68da      	ldr	r2, [r3, #12]
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	601a      	str	r2, [r3, #0]
 800d74e:	e013      	b.n	800d778 <tcp_pcb_remove+0x70>
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	60fb      	str	r3, [r7, #12]
 800d756:	e00c      	b.n	800d772 <tcp_pcb_remove+0x6a>
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	68db      	ldr	r3, [r3, #12]
 800d75c:	683a      	ldr	r2, [r7, #0]
 800d75e:	429a      	cmp	r2, r3
 800d760:	d104      	bne.n	800d76c <tcp_pcb_remove+0x64>
 800d762:	683b      	ldr	r3, [r7, #0]
 800d764:	68da      	ldr	r2, [r3, #12]
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	60da      	str	r2, [r3, #12]
 800d76a:	e005      	b.n	800d778 <tcp_pcb_remove+0x70>
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	68db      	ldr	r3, [r3, #12]
 800d770:	60fb      	str	r3, [r7, #12]
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	2b00      	cmp	r3, #0
 800d776:	d1ef      	bne.n	800d758 <tcp_pcb_remove+0x50>
 800d778:	683b      	ldr	r3, [r7, #0]
 800d77a:	2200      	movs	r2, #0
 800d77c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800d77e:	6838      	ldr	r0, [r7, #0]
 800d780:	f7ff ff72 	bl	800d668 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800d784:	683b      	ldr	r3, [r7, #0]
 800d786:	7d1b      	ldrb	r3, [r3, #20]
 800d788:	2b0a      	cmp	r3, #10
 800d78a:	d013      	beq.n	800d7b4 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800d78c:	683b      	ldr	r3, [r7, #0]
 800d78e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800d790:	2b01      	cmp	r3, #1
 800d792:	d00f      	beq.n	800d7b4 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800d794:	683b      	ldr	r3, [r7, #0]
 800d796:	8b5b      	ldrh	r3, [r3, #26]
 800d798:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d009      	beq.n	800d7b4 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800d7a0:	683b      	ldr	r3, [r7, #0]
 800d7a2:	8b5b      	ldrh	r3, [r3, #26]
 800d7a4:	f043 0302 	orr.w	r3, r3, #2
 800d7a8:	b29a      	uxth	r2, r3
 800d7aa:	683b      	ldr	r3, [r7, #0]
 800d7ac:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800d7ae:	6838      	ldr	r0, [r7, #0]
 800d7b0:	f003 fbc2 	bl	8010f38 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800d7b4:	683b      	ldr	r3, [r7, #0]
 800d7b6:	7d1b      	ldrb	r3, [r3, #20]
 800d7b8:	2b01      	cmp	r3, #1
 800d7ba:	d020      	beq.n	800d7fe <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800d7bc:	683b      	ldr	r3, [r7, #0]
 800d7be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d006      	beq.n	800d7d2 <tcp_pcb_remove+0xca>
 800d7c4:	4b13      	ldr	r3, [pc, #76]	; (800d814 <tcp_pcb_remove+0x10c>)
 800d7c6:	f640 0293 	movw	r2, #2195	; 0x893
 800d7ca:	4916      	ldr	r1, [pc, #88]	; (800d824 <tcp_pcb_remove+0x11c>)
 800d7cc:	4813      	ldr	r0, [pc, #76]	; (800d81c <tcp_pcb_remove+0x114>)
 800d7ce:	f007 f975 	bl	8014abc <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800d7d2:	683b      	ldr	r3, [r7, #0]
 800d7d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d006      	beq.n	800d7e8 <tcp_pcb_remove+0xe0>
 800d7da:	4b0e      	ldr	r3, [pc, #56]	; (800d814 <tcp_pcb_remove+0x10c>)
 800d7dc:	f640 0294 	movw	r2, #2196	; 0x894
 800d7e0:	4911      	ldr	r1, [pc, #68]	; (800d828 <tcp_pcb_remove+0x120>)
 800d7e2:	480e      	ldr	r0, [pc, #56]	; (800d81c <tcp_pcb_remove+0x114>)
 800d7e4:	f007 f96a 	bl	8014abc <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800d7e8:	683b      	ldr	r3, [r7, #0]
 800d7ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d006      	beq.n	800d7fe <tcp_pcb_remove+0xf6>
 800d7f0:	4b08      	ldr	r3, [pc, #32]	; (800d814 <tcp_pcb_remove+0x10c>)
 800d7f2:	f640 0296 	movw	r2, #2198	; 0x896
 800d7f6:	490d      	ldr	r1, [pc, #52]	; (800d82c <tcp_pcb_remove+0x124>)
 800d7f8:	4808      	ldr	r0, [pc, #32]	; (800d81c <tcp_pcb_remove+0x114>)
 800d7fa:	f007 f95f 	bl	8014abc <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800d7fe:	683b      	ldr	r3, [r7, #0]
 800d800:	2200      	movs	r2, #0
 800d802:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800d804:	683b      	ldr	r3, [r7, #0]
 800d806:	2200      	movs	r2, #0
 800d808:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800d80a:	bf00      	nop
 800d80c:	3710      	adds	r7, #16
 800d80e:	46bd      	mov	sp, r7
 800d810:	bd80      	pop	{r7, pc}
 800d812:	bf00      	nop
 800d814:	08016d44 	.word	0x08016d44
 800d818:	080173ac 	.word	0x080173ac
 800d81c:	08016d88 	.word	0x08016d88
 800d820:	080173c8 	.word	0x080173c8
 800d824:	080173e8 	.word	0x080173e8
 800d828:	08017400 	.word	0x08017400
 800d82c:	0801741c 	.word	0x0801741c

0800d830 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800d830:	b580      	push	{r7, lr}
 800d832:	b082      	sub	sp, #8
 800d834:	af00      	add	r7, sp, #0
 800d836:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d106      	bne.n	800d84c <tcp_next_iss+0x1c>
 800d83e:	4b0a      	ldr	r3, [pc, #40]	; (800d868 <tcp_next_iss+0x38>)
 800d840:	f640 02af 	movw	r2, #2223	; 0x8af
 800d844:	4909      	ldr	r1, [pc, #36]	; (800d86c <tcp_next_iss+0x3c>)
 800d846:	480a      	ldr	r0, [pc, #40]	; (800d870 <tcp_next_iss+0x40>)
 800d848:	f007 f938 	bl	8014abc <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800d84c:	4b09      	ldr	r3, [pc, #36]	; (800d874 <tcp_next_iss+0x44>)
 800d84e:	681a      	ldr	r2, [r3, #0]
 800d850:	4b09      	ldr	r3, [pc, #36]	; (800d878 <tcp_next_iss+0x48>)
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	4413      	add	r3, r2
 800d856:	4a07      	ldr	r2, [pc, #28]	; (800d874 <tcp_next_iss+0x44>)
 800d858:	6013      	str	r3, [r2, #0]
  return iss;
 800d85a:	4b06      	ldr	r3, [pc, #24]	; (800d874 <tcp_next_iss+0x44>)
 800d85c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800d85e:	4618      	mov	r0, r3
 800d860:	3708      	adds	r7, #8
 800d862:	46bd      	mov	sp, r7
 800d864:	bd80      	pop	{r7, pc}
 800d866:	bf00      	nop
 800d868:	08016d44 	.word	0x08016d44
 800d86c:	08017434 	.word	0x08017434
 800d870:	08016d88 	.word	0x08016d88
 800d874:	24000038 	.word	0x24000038
 800d878:	24003c80 	.word	0x24003c80

0800d87c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800d87c:	b580      	push	{r7, lr}
 800d87e:	b086      	sub	sp, #24
 800d880:	af00      	add	r7, sp, #0
 800d882:	4603      	mov	r3, r0
 800d884:	60b9      	str	r1, [r7, #8]
 800d886:	607a      	str	r2, [r7, #4]
 800d888:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d106      	bne.n	800d89e <tcp_eff_send_mss_netif+0x22>
 800d890:	4b14      	ldr	r3, [pc, #80]	; (800d8e4 <tcp_eff_send_mss_netif+0x68>)
 800d892:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800d896:	4914      	ldr	r1, [pc, #80]	; (800d8e8 <tcp_eff_send_mss_netif+0x6c>)
 800d898:	4814      	ldr	r0, [pc, #80]	; (800d8ec <tcp_eff_send_mss_netif+0x70>)
 800d89a:	f007 f90f 	bl	8014abc <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800d89e:	68bb      	ldr	r3, [r7, #8]
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d101      	bne.n	800d8a8 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800d8a4:	89fb      	ldrh	r3, [r7, #14]
 800d8a6:	e019      	b.n	800d8dc <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800d8a8:	68bb      	ldr	r3, [r7, #8]
 800d8aa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d8ac:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800d8ae:	8afb      	ldrh	r3, [r7, #22]
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d012      	beq.n	800d8da <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800d8b4:	2328      	movs	r3, #40	; 0x28
 800d8b6:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800d8b8:	8afa      	ldrh	r2, [r7, #22]
 800d8ba:	8abb      	ldrh	r3, [r7, #20]
 800d8bc:	429a      	cmp	r2, r3
 800d8be:	d904      	bls.n	800d8ca <tcp_eff_send_mss_netif+0x4e>
 800d8c0:	8afa      	ldrh	r2, [r7, #22]
 800d8c2:	8abb      	ldrh	r3, [r7, #20]
 800d8c4:	1ad3      	subs	r3, r2, r3
 800d8c6:	b29b      	uxth	r3, r3
 800d8c8:	e000      	b.n	800d8cc <tcp_eff_send_mss_netif+0x50>
 800d8ca:	2300      	movs	r3, #0
 800d8cc:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800d8ce:	8a7a      	ldrh	r2, [r7, #18]
 800d8d0:	89fb      	ldrh	r3, [r7, #14]
 800d8d2:	4293      	cmp	r3, r2
 800d8d4:	bf28      	it	cs
 800d8d6:	4613      	movcs	r3, r2
 800d8d8:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800d8da:	89fb      	ldrh	r3, [r7, #14]
}
 800d8dc:	4618      	mov	r0, r3
 800d8de:	3718      	adds	r7, #24
 800d8e0:	46bd      	mov	sp, r7
 800d8e2:	bd80      	pop	{r7, pc}
 800d8e4:	08016d44 	.word	0x08016d44
 800d8e8:	08017450 	.word	0x08017450
 800d8ec:	08016d88 	.word	0x08016d88

0800d8f0 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800d8f0:	b580      	push	{r7, lr}
 800d8f2:	b084      	sub	sp, #16
 800d8f4:	af00      	add	r7, sp, #0
 800d8f6:	6078      	str	r0, [r7, #4]
 800d8f8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800d8fa:	683b      	ldr	r3, [r7, #0]
 800d8fc:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	2b00      	cmp	r3, #0
 800d902:	d119      	bne.n	800d938 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800d904:	4b10      	ldr	r3, [pc, #64]	; (800d948 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800d906:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800d90a:	4910      	ldr	r1, [pc, #64]	; (800d94c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800d90c:	4810      	ldr	r0, [pc, #64]	; (800d950 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800d90e:	f007 f8d5 	bl	8014abc <iprintf>

  while (pcb != NULL) {
 800d912:	e011      	b.n	800d938 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	681a      	ldr	r2, [r3, #0]
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	429a      	cmp	r2, r3
 800d91e:	d108      	bne.n	800d932 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	68db      	ldr	r3, [r3, #12]
 800d924:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800d926:	68f8      	ldr	r0, [r7, #12]
 800d928:	f7fe fd18 	bl	800c35c <tcp_abort>
      pcb = next;
 800d92c:	68bb      	ldr	r3, [r7, #8]
 800d92e:	60fb      	str	r3, [r7, #12]
 800d930:	e002      	b.n	800d938 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	68db      	ldr	r3, [r3, #12]
 800d936:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d1ea      	bne.n	800d914 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800d93e:	bf00      	nop
 800d940:	bf00      	nop
 800d942:	3710      	adds	r7, #16
 800d944:	46bd      	mov	sp, r7
 800d946:	bd80      	pop	{r7, pc}
 800d948:	08016d44 	.word	0x08016d44
 800d94c:	08017478 	.word	0x08017478
 800d950:	08016d88 	.word	0x08016d88

0800d954 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800d954:	b580      	push	{r7, lr}
 800d956:	b084      	sub	sp, #16
 800d958:	af00      	add	r7, sp, #0
 800d95a:	6078      	str	r0, [r7, #4]
 800d95c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	2b00      	cmp	r3, #0
 800d962:	d02a      	beq.n	800d9ba <tcp_netif_ip_addr_changed+0x66>
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d026      	beq.n	800d9ba <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800d96c:	4b15      	ldr	r3, [pc, #84]	; (800d9c4 <tcp_netif_ip_addr_changed+0x70>)
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	4619      	mov	r1, r3
 800d972:	6878      	ldr	r0, [r7, #4]
 800d974:	f7ff ffbc 	bl	800d8f0 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800d978:	4b13      	ldr	r3, [pc, #76]	; (800d9c8 <tcp_netif_ip_addr_changed+0x74>)
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	4619      	mov	r1, r3
 800d97e:	6878      	ldr	r0, [r7, #4]
 800d980:	f7ff ffb6 	bl	800d8f0 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800d984:	683b      	ldr	r3, [r7, #0]
 800d986:	2b00      	cmp	r3, #0
 800d988:	d017      	beq.n	800d9ba <tcp_netif_ip_addr_changed+0x66>
 800d98a:	683b      	ldr	r3, [r7, #0]
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d013      	beq.n	800d9ba <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d992:	4b0e      	ldr	r3, [pc, #56]	; (800d9cc <tcp_netif_ip_addr_changed+0x78>)
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	60fb      	str	r3, [r7, #12]
 800d998:	e00c      	b.n	800d9b4 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	681a      	ldr	r2, [r3, #0]
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	429a      	cmp	r2, r3
 800d9a4:	d103      	bne.n	800d9ae <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800d9a6:	683b      	ldr	r3, [r7, #0]
 800d9a8:	681a      	ldr	r2, [r3, #0]
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	68db      	ldr	r3, [r3, #12]
 800d9b2:	60fb      	str	r3, [r7, #12]
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d1ef      	bne.n	800d99a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800d9ba:	bf00      	nop
 800d9bc:	3710      	adds	r7, #16
 800d9be:	46bd      	mov	sp, r7
 800d9c0:	bd80      	pop	{r7, pc}
 800d9c2:	bf00      	nop
 800d9c4:	24003c7c 	.word	0x24003c7c
 800d9c8:	24003c88 	.word	0x24003c88
 800d9cc:	24003c84 	.word	0x24003c84

0800d9d0 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800d9d0:	b580      	push	{r7, lr}
 800d9d2:	b082      	sub	sp, #8
 800d9d4:	af00      	add	r7, sp, #0
 800d9d6:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d007      	beq.n	800d9f0 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d9e4:	4618      	mov	r0, r3
 800d9e6:	f7ff fb49 	bl	800d07c <tcp_segs_free>
    pcb->ooseq = NULL;
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	2200      	movs	r2, #0
 800d9ee:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800d9f0:	bf00      	nop
 800d9f2:	3708      	adds	r7, #8
 800d9f4:	46bd      	mov	sp, r7
 800d9f6:	bd80      	pop	{r7, pc}

0800d9f8 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800d9f8:	b590      	push	{r4, r7, lr}
 800d9fa:	b08d      	sub	sp, #52	; 0x34
 800d9fc:	af04      	add	r7, sp, #16
 800d9fe:	6078      	str	r0, [r7, #4]
 800da00:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	2b00      	cmp	r3, #0
 800da06:	d105      	bne.n	800da14 <tcp_input+0x1c>
 800da08:	4b9b      	ldr	r3, [pc, #620]	; (800dc78 <tcp_input+0x280>)
 800da0a:	2283      	movs	r2, #131	; 0x83
 800da0c:	499b      	ldr	r1, [pc, #620]	; (800dc7c <tcp_input+0x284>)
 800da0e:	489c      	ldr	r0, [pc, #624]	; (800dc80 <tcp_input+0x288>)
 800da10:	f007 f854 	bl	8014abc <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	685b      	ldr	r3, [r3, #4]
 800da18:	4a9a      	ldr	r2, [pc, #616]	; (800dc84 <tcp_input+0x28c>)
 800da1a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	895b      	ldrh	r3, [r3, #10]
 800da20:	2b13      	cmp	r3, #19
 800da22:	f240 83c4 	bls.w	800e1ae <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800da26:	4b98      	ldr	r3, [pc, #608]	; (800dc88 <tcp_input+0x290>)
 800da28:	695b      	ldr	r3, [r3, #20]
 800da2a:	4a97      	ldr	r2, [pc, #604]	; (800dc88 <tcp_input+0x290>)
 800da2c:	6812      	ldr	r2, [r2, #0]
 800da2e:	4611      	mov	r1, r2
 800da30:	4618      	mov	r0, r3
 800da32:	f006 f891 	bl	8013b58 <ip4_addr_isbroadcast_u32>
 800da36:	4603      	mov	r3, r0
 800da38:	2b00      	cmp	r3, #0
 800da3a:	f040 83ba 	bne.w	800e1b2 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800da3e:	4b92      	ldr	r3, [pc, #584]	; (800dc88 <tcp_input+0x290>)
 800da40:	695b      	ldr	r3, [r3, #20]
 800da42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800da46:	2be0      	cmp	r3, #224	; 0xe0
 800da48:	f000 83b3 	beq.w	800e1b2 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800da4c:	4b8d      	ldr	r3, [pc, #564]	; (800dc84 <tcp_input+0x28c>)
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	899b      	ldrh	r3, [r3, #12]
 800da52:	b29b      	uxth	r3, r3
 800da54:	4618      	mov	r0, r3
 800da56:	f7fc fa59 	bl	8009f0c <lwip_htons>
 800da5a:	4603      	mov	r3, r0
 800da5c:	0b1b      	lsrs	r3, r3, #12
 800da5e:	b29b      	uxth	r3, r3
 800da60:	b2db      	uxtb	r3, r3
 800da62:	009b      	lsls	r3, r3, #2
 800da64:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800da66:	7cbb      	ldrb	r3, [r7, #18]
 800da68:	2b13      	cmp	r3, #19
 800da6a:	f240 83a4 	bls.w	800e1b6 <tcp_input+0x7be>
 800da6e:	7cbb      	ldrb	r3, [r7, #18]
 800da70:	b29a      	uxth	r2, r3
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	891b      	ldrh	r3, [r3, #8]
 800da76:	429a      	cmp	r2, r3
 800da78:	f200 839d 	bhi.w	800e1b6 <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800da7c:	7cbb      	ldrb	r3, [r7, #18]
 800da7e:	b29b      	uxth	r3, r3
 800da80:	3b14      	subs	r3, #20
 800da82:	b29a      	uxth	r2, r3
 800da84:	4b81      	ldr	r3, [pc, #516]	; (800dc8c <tcp_input+0x294>)
 800da86:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800da88:	4b81      	ldr	r3, [pc, #516]	; (800dc90 <tcp_input+0x298>)
 800da8a:	2200      	movs	r2, #0
 800da8c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	895a      	ldrh	r2, [r3, #10]
 800da92:	7cbb      	ldrb	r3, [r7, #18]
 800da94:	b29b      	uxth	r3, r3
 800da96:	429a      	cmp	r2, r3
 800da98:	d309      	bcc.n	800daae <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800da9a:	4b7c      	ldr	r3, [pc, #496]	; (800dc8c <tcp_input+0x294>)
 800da9c:	881a      	ldrh	r2, [r3, #0]
 800da9e:	4b7d      	ldr	r3, [pc, #500]	; (800dc94 <tcp_input+0x29c>)
 800daa0:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800daa2:	7cbb      	ldrb	r3, [r7, #18]
 800daa4:	4619      	mov	r1, r3
 800daa6:	6878      	ldr	r0, [r7, #4]
 800daa8:	f7fd fe3a 	bl	800b720 <pbuf_remove_header>
 800daac:	e04e      	b.n	800db4c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d105      	bne.n	800dac2 <tcp_input+0xca>
 800dab6:	4b70      	ldr	r3, [pc, #448]	; (800dc78 <tcp_input+0x280>)
 800dab8:	22c2      	movs	r2, #194	; 0xc2
 800daba:	4977      	ldr	r1, [pc, #476]	; (800dc98 <tcp_input+0x2a0>)
 800dabc:	4870      	ldr	r0, [pc, #448]	; (800dc80 <tcp_input+0x288>)
 800dabe:	f006 fffd 	bl	8014abc <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800dac2:	2114      	movs	r1, #20
 800dac4:	6878      	ldr	r0, [r7, #4]
 800dac6:	f7fd fe2b 	bl	800b720 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	895a      	ldrh	r2, [r3, #10]
 800dace:	4b71      	ldr	r3, [pc, #452]	; (800dc94 <tcp_input+0x29c>)
 800dad0:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800dad2:	4b6e      	ldr	r3, [pc, #440]	; (800dc8c <tcp_input+0x294>)
 800dad4:	881a      	ldrh	r2, [r3, #0]
 800dad6:	4b6f      	ldr	r3, [pc, #444]	; (800dc94 <tcp_input+0x29c>)
 800dad8:	881b      	ldrh	r3, [r3, #0]
 800dada:	1ad3      	subs	r3, r2, r3
 800dadc:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800dade:	4b6d      	ldr	r3, [pc, #436]	; (800dc94 <tcp_input+0x29c>)
 800dae0:	881b      	ldrh	r3, [r3, #0]
 800dae2:	4619      	mov	r1, r3
 800dae4:	6878      	ldr	r0, [r7, #4]
 800dae6:	f7fd fe1b 	bl	800b720 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	895b      	ldrh	r3, [r3, #10]
 800daf0:	8a3a      	ldrh	r2, [r7, #16]
 800daf2:	429a      	cmp	r2, r3
 800daf4:	f200 8361 	bhi.w	800e1ba <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	685b      	ldr	r3, [r3, #4]
 800dafe:	4a64      	ldr	r2, [pc, #400]	; (800dc90 <tcp_input+0x298>)
 800db00:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	8a3a      	ldrh	r2, [r7, #16]
 800db08:	4611      	mov	r1, r2
 800db0a:	4618      	mov	r0, r3
 800db0c:	f7fd fe08 	bl	800b720 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	891a      	ldrh	r2, [r3, #8]
 800db14:	8a3b      	ldrh	r3, [r7, #16]
 800db16:	1ad3      	subs	r3, r2, r3
 800db18:	b29a      	uxth	r2, r3
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	895b      	ldrh	r3, [r3, #10]
 800db22:	2b00      	cmp	r3, #0
 800db24:	d005      	beq.n	800db32 <tcp_input+0x13a>
 800db26:	4b54      	ldr	r3, [pc, #336]	; (800dc78 <tcp_input+0x280>)
 800db28:	22df      	movs	r2, #223	; 0xdf
 800db2a:	495c      	ldr	r1, [pc, #368]	; (800dc9c <tcp_input+0x2a4>)
 800db2c:	4854      	ldr	r0, [pc, #336]	; (800dc80 <tcp_input+0x288>)
 800db2e:	f006 ffc5 	bl	8014abc <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	891a      	ldrh	r2, [r3, #8]
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	891b      	ldrh	r3, [r3, #8]
 800db3c:	429a      	cmp	r2, r3
 800db3e:	d005      	beq.n	800db4c <tcp_input+0x154>
 800db40:	4b4d      	ldr	r3, [pc, #308]	; (800dc78 <tcp_input+0x280>)
 800db42:	22e0      	movs	r2, #224	; 0xe0
 800db44:	4956      	ldr	r1, [pc, #344]	; (800dca0 <tcp_input+0x2a8>)
 800db46:	484e      	ldr	r0, [pc, #312]	; (800dc80 <tcp_input+0x288>)
 800db48:	f006 ffb8 	bl	8014abc <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800db4c:	4b4d      	ldr	r3, [pc, #308]	; (800dc84 <tcp_input+0x28c>)
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	881b      	ldrh	r3, [r3, #0]
 800db52:	b29b      	uxth	r3, r3
 800db54:	4a4b      	ldr	r2, [pc, #300]	; (800dc84 <tcp_input+0x28c>)
 800db56:	6814      	ldr	r4, [r2, #0]
 800db58:	4618      	mov	r0, r3
 800db5a:	f7fc f9d7 	bl	8009f0c <lwip_htons>
 800db5e:	4603      	mov	r3, r0
 800db60:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800db62:	4b48      	ldr	r3, [pc, #288]	; (800dc84 <tcp_input+0x28c>)
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	885b      	ldrh	r3, [r3, #2]
 800db68:	b29b      	uxth	r3, r3
 800db6a:	4a46      	ldr	r2, [pc, #280]	; (800dc84 <tcp_input+0x28c>)
 800db6c:	6814      	ldr	r4, [r2, #0]
 800db6e:	4618      	mov	r0, r3
 800db70:	f7fc f9cc 	bl	8009f0c <lwip_htons>
 800db74:	4603      	mov	r3, r0
 800db76:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800db78:	4b42      	ldr	r3, [pc, #264]	; (800dc84 <tcp_input+0x28c>)
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	685b      	ldr	r3, [r3, #4]
 800db7e:	4a41      	ldr	r2, [pc, #260]	; (800dc84 <tcp_input+0x28c>)
 800db80:	6814      	ldr	r4, [r2, #0]
 800db82:	4618      	mov	r0, r3
 800db84:	f7fc f9d7 	bl	8009f36 <lwip_htonl>
 800db88:	4603      	mov	r3, r0
 800db8a:	6063      	str	r3, [r4, #4]
 800db8c:	6863      	ldr	r3, [r4, #4]
 800db8e:	4a45      	ldr	r2, [pc, #276]	; (800dca4 <tcp_input+0x2ac>)
 800db90:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800db92:	4b3c      	ldr	r3, [pc, #240]	; (800dc84 <tcp_input+0x28c>)
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	689b      	ldr	r3, [r3, #8]
 800db98:	4a3a      	ldr	r2, [pc, #232]	; (800dc84 <tcp_input+0x28c>)
 800db9a:	6814      	ldr	r4, [r2, #0]
 800db9c:	4618      	mov	r0, r3
 800db9e:	f7fc f9ca 	bl	8009f36 <lwip_htonl>
 800dba2:	4603      	mov	r3, r0
 800dba4:	60a3      	str	r3, [r4, #8]
 800dba6:	68a3      	ldr	r3, [r4, #8]
 800dba8:	4a3f      	ldr	r2, [pc, #252]	; (800dca8 <tcp_input+0x2b0>)
 800dbaa:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800dbac:	4b35      	ldr	r3, [pc, #212]	; (800dc84 <tcp_input+0x28c>)
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	89db      	ldrh	r3, [r3, #14]
 800dbb2:	b29b      	uxth	r3, r3
 800dbb4:	4a33      	ldr	r2, [pc, #204]	; (800dc84 <tcp_input+0x28c>)
 800dbb6:	6814      	ldr	r4, [r2, #0]
 800dbb8:	4618      	mov	r0, r3
 800dbba:	f7fc f9a7 	bl	8009f0c <lwip_htons>
 800dbbe:	4603      	mov	r3, r0
 800dbc0:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800dbc2:	4b30      	ldr	r3, [pc, #192]	; (800dc84 <tcp_input+0x28c>)
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	899b      	ldrh	r3, [r3, #12]
 800dbc8:	b29b      	uxth	r3, r3
 800dbca:	4618      	mov	r0, r3
 800dbcc:	f7fc f99e 	bl	8009f0c <lwip_htons>
 800dbd0:	4603      	mov	r3, r0
 800dbd2:	b2db      	uxtb	r3, r3
 800dbd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dbd8:	b2da      	uxtb	r2, r3
 800dbda:	4b34      	ldr	r3, [pc, #208]	; (800dcac <tcp_input+0x2b4>)
 800dbdc:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	891a      	ldrh	r2, [r3, #8]
 800dbe2:	4b33      	ldr	r3, [pc, #204]	; (800dcb0 <tcp_input+0x2b8>)
 800dbe4:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800dbe6:	4b31      	ldr	r3, [pc, #196]	; (800dcac <tcp_input+0x2b4>)
 800dbe8:	781b      	ldrb	r3, [r3, #0]
 800dbea:	f003 0303 	and.w	r3, r3, #3
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d00c      	beq.n	800dc0c <tcp_input+0x214>
    tcplen++;
 800dbf2:	4b2f      	ldr	r3, [pc, #188]	; (800dcb0 <tcp_input+0x2b8>)
 800dbf4:	881b      	ldrh	r3, [r3, #0]
 800dbf6:	3301      	adds	r3, #1
 800dbf8:	b29a      	uxth	r2, r3
 800dbfa:	4b2d      	ldr	r3, [pc, #180]	; (800dcb0 <tcp_input+0x2b8>)
 800dbfc:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	891a      	ldrh	r2, [r3, #8]
 800dc02:	4b2b      	ldr	r3, [pc, #172]	; (800dcb0 <tcp_input+0x2b8>)
 800dc04:	881b      	ldrh	r3, [r3, #0]
 800dc06:	429a      	cmp	r2, r3
 800dc08:	f200 82d9 	bhi.w	800e1be <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800dc0c:	2300      	movs	r3, #0
 800dc0e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800dc10:	4b28      	ldr	r3, [pc, #160]	; (800dcb4 <tcp_input+0x2bc>)
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	61fb      	str	r3, [r7, #28]
 800dc16:	e09d      	b.n	800dd54 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800dc18:	69fb      	ldr	r3, [r7, #28]
 800dc1a:	7d1b      	ldrb	r3, [r3, #20]
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d105      	bne.n	800dc2c <tcp_input+0x234>
 800dc20:	4b15      	ldr	r3, [pc, #84]	; (800dc78 <tcp_input+0x280>)
 800dc22:	22fb      	movs	r2, #251	; 0xfb
 800dc24:	4924      	ldr	r1, [pc, #144]	; (800dcb8 <tcp_input+0x2c0>)
 800dc26:	4816      	ldr	r0, [pc, #88]	; (800dc80 <tcp_input+0x288>)
 800dc28:	f006 ff48 	bl	8014abc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800dc2c:	69fb      	ldr	r3, [r7, #28]
 800dc2e:	7d1b      	ldrb	r3, [r3, #20]
 800dc30:	2b0a      	cmp	r3, #10
 800dc32:	d105      	bne.n	800dc40 <tcp_input+0x248>
 800dc34:	4b10      	ldr	r3, [pc, #64]	; (800dc78 <tcp_input+0x280>)
 800dc36:	22fc      	movs	r2, #252	; 0xfc
 800dc38:	4920      	ldr	r1, [pc, #128]	; (800dcbc <tcp_input+0x2c4>)
 800dc3a:	4811      	ldr	r0, [pc, #68]	; (800dc80 <tcp_input+0x288>)
 800dc3c:	f006 ff3e 	bl	8014abc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800dc40:	69fb      	ldr	r3, [r7, #28]
 800dc42:	7d1b      	ldrb	r3, [r3, #20]
 800dc44:	2b01      	cmp	r3, #1
 800dc46:	d105      	bne.n	800dc54 <tcp_input+0x25c>
 800dc48:	4b0b      	ldr	r3, [pc, #44]	; (800dc78 <tcp_input+0x280>)
 800dc4a:	22fd      	movs	r2, #253	; 0xfd
 800dc4c:	491c      	ldr	r1, [pc, #112]	; (800dcc0 <tcp_input+0x2c8>)
 800dc4e:	480c      	ldr	r0, [pc, #48]	; (800dc80 <tcp_input+0x288>)
 800dc50:	f006 ff34 	bl	8014abc <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800dc54:	69fb      	ldr	r3, [r7, #28]
 800dc56:	7a1b      	ldrb	r3, [r3, #8]
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d033      	beq.n	800dcc4 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800dc5c:	69fb      	ldr	r3, [r7, #28]
 800dc5e:	7a1a      	ldrb	r2, [r3, #8]
 800dc60:	4b09      	ldr	r3, [pc, #36]	; (800dc88 <tcp_input+0x290>)
 800dc62:	685b      	ldr	r3, [r3, #4]
 800dc64:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dc68:	3301      	adds	r3, #1
 800dc6a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800dc6c:	429a      	cmp	r2, r3
 800dc6e:	d029      	beq.n	800dcc4 <tcp_input+0x2cc>
      prev = pcb;
 800dc70:	69fb      	ldr	r3, [r7, #28]
 800dc72:	61bb      	str	r3, [r7, #24]
      continue;
 800dc74:	e06b      	b.n	800dd4e <tcp_input+0x356>
 800dc76:	bf00      	nop
 800dc78:	080174ac 	.word	0x080174ac
 800dc7c:	080174e0 	.word	0x080174e0
 800dc80:	080174f8 	.word	0x080174f8
 800dc84:	24000568 	.word	0x24000568
 800dc88:	24000d8c 	.word	0x24000d8c
 800dc8c:	2400056c 	.word	0x2400056c
 800dc90:	24000570 	.word	0x24000570
 800dc94:	2400056e 	.word	0x2400056e
 800dc98:	08017520 	.word	0x08017520
 800dc9c:	08017530 	.word	0x08017530
 800dca0:	0801753c 	.word	0x0801753c
 800dca4:	24000578 	.word	0x24000578
 800dca8:	2400057c 	.word	0x2400057c
 800dcac:	24000584 	.word	0x24000584
 800dcb0:	24000582 	.word	0x24000582
 800dcb4:	24003c7c 	.word	0x24003c7c
 800dcb8:	0801755c 	.word	0x0801755c
 800dcbc:	08017584 	.word	0x08017584
 800dcc0:	080175b0 	.word	0x080175b0
    }

    if (pcb->remote_port == tcphdr->src &&
 800dcc4:	69fb      	ldr	r3, [r7, #28]
 800dcc6:	8b1a      	ldrh	r2, [r3, #24]
 800dcc8:	4b94      	ldr	r3, [pc, #592]	; (800df1c <tcp_input+0x524>)
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	881b      	ldrh	r3, [r3, #0]
 800dcce:	b29b      	uxth	r3, r3
 800dcd0:	429a      	cmp	r2, r3
 800dcd2:	d13a      	bne.n	800dd4a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800dcd4:	69fb      	ldr	r3, [r7, #28]
 800dcd6:	8ada      	ldrh	r2, [r3, #22]
 800dcd8:	4b90      	ldr	r3, [pc, #576]	; (800df1c <tcp_input+0x524>)
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	885b      	ldrh	r3, [r3, #2]
 800dcde:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800dce0:	429a      	cmp	r2, r3
 800dce2:	d132      	bne.n	800dd4a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800dce4:	69fb      	ldr	r3, [r7, #28]
 800dce6:	685a      	ldr	r2, [r3, #4]
 800dce8:	4b8d      	ldr	r3, [pc, #564]	; (800df20 <tcp_input+0x528>)
 800dcea:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800dcec:	429a      	cmp	r2, r3
 800dcee:	d12c      	bne.n	800dd4a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800dcf0:	69fb      	ldr	r3, [r7, #28]
 800dcf2:	681a      	ldr	r2, [r3, #0]
 800dcf4:	4b8a      	ldr	r3, [pc, #552]	; (800df20 <tcp_input+0x528>)
 800dcf6:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800dcf8:	429a      	cmp	r2, r3
 800dcfa:	d126      	bne.n	800dd4a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800dcfc:	69fb      	ldr	r3, [r7, #28]
 800dcfe:	68db      	ldr	r3, [r3, #12]
 800dd00:	69fa      	ldr	r2, [r7, #28]
 800dd02:	429a      	cmp	r2, r3
 800dd04:	d106      	bne.n	800dd14 <tcp_input+0x31c>
 800dd06:	4b87      	ldr	r3, [pc, #540]	; (800df24 <tcp_input+0x52c>)
 800dd08:	f240 120d 	movw	r2, #269	; 0x10d
 800dd0c:	4986      	ldr	r1, [pc, #536]	; (800df28 <tcp_input+0x530>)
 800dd0e:	4887      	ldr	r0, [pc, #540]	; (800df2c <tcp_input+0x534>)
 800dd10:	f006 fed4 	bl	8014abc <iprintf>
      if (prev != NULL) {
 800dd14:	69bb      	ldr	r3, [r7, #24]
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d00a      	beq.n	800dd30 <tcp_input+0x338>
        prev->next = pcb->next;
 800dd1a:	69fb      	ldr	r3, [r7, #28]
 800dd1c:	68da      	ldr	r2, [r3, #12]
 800dd1e:	69bb      	ldr	r3, [r7, #24]
 800dd20:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800dd22:	4b83      	ldr	r3, [pc, #524]	; (800df30 <tcp_input+0x538>)
 800dd24:	681a      	ldr	r2, [r3, #0]
 800dd26:	69fb      	ldr	r3, [r7, #28]
 800dd28:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800dd2a:	4a81      	ldr	r2, [pc, #516]	; (800df30 <tcp_input+0x538>)
 800dd2c:	69fb      	ldr	r3, [r7, #28]
 800dd2e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800dd30:	69fb      	ldr	r3, [r7, #28]
 800dd32:	68db      	ldr	r3, [r3, #12]
 800dd34:	69fa      	ldr	r2, [r7, #28]
 800dd36:	429a      	cmp	r2, r3
 800dd38:	d111      	bne.n	800dd5e <tcp_input+0x366>
 800dd3a:	4b7a      	ldr	r3, [pc, #488]	; (800df24 <tcp_input+0x52c>)
 800dd3c:	f240 1215 	movw	r2, #277	; 0x115
 800dd40:	497c      	ldr	r1, [pc, #496]	; (800df34 <tcp_input+0x53c>)
 800dd42:	487a      	ldr	r0, [pc, #488]	; (800df2c <tcp_input+0x534>)
 800dd44:	f006 feba 	bl	8014abc <iprintf>
      break;
 800dd48:	e009      	b.n	800dd5e <tcp_input+0x366>
    }
    prev = pcb;
 800dd4a:	69fb      	ldr	r3, [r7, #28]
 800dd4c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800dd4e:	69fb      	ldr	r3, [r7, #28]
 800dd50:	68db      	ldr	r3, [r3, #12]
 800dd52:	61fb      	str	r3, [r7, #28]
 800dd54:	69fb      	ldr	r3, [r7, #28]
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	f47f af5e 	bne.w	800dc18 <tcp_input+0x220>
 800dd5c:	e000      	b.n	800dd60 <tcp_input+0x368>
      break;
 800dd5e:	bf00      	nop
  }

  if (pcb == NULL) {
 800dd60:	69fb      	ldr	r3, [r7, #28]
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	f040 8095 	bne.w	800de92 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800dd68:	4b73      	ldr	r3, [pc, #460]	; (800df38 <tcp_input+0x540>)
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	61fb      	str	r3, [r7, #28]
 800dd6e:	e03f      	b.n	800ddf0 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800dd70:	69fb      	ldr	r3, [r7, #28]
 800dd72:	7d1b      	ldrb	r3, [r3, #20]
 800dd74:	2b0a      	cmp	r3, #10
 800dd76:	d006      	beq.n	800dd86 <tcp_input+0x38e>
 800dd78:	4b6a      	ldr	r3, [pc, #424]	; (800df24 <tcp_input+0x52c>)
 800dd7a:	f240 121f 	movw	r2, #287	; 0x11f
 800dd7e:	496f      	ldr	r1, [pc, #444]	; (800df3c <tcp_input+0x544>)
 800dd80:	486a      	ldr	r0, [pc, #424]	; (800df2c <tcp_input+0x534>)
 800dd82:	f006 fe9b 	bl	8014abc <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800dd86:	69fb      	ldr	r3, [r7, #28]
 800dd88:	7a1b      	ldrb	r3, [r3, #8]
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d009      	beq.n	800dda2 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800dd8e:	69fb      	ldr	r3, [r7, #28]
 800dd90:	7a1a      	ldrb	r2, [r3, #8]
 800dd92:	4b63      	ldr	r3, [pc, #396]	; (800df20 <tcp_input+0x528>)
 800dd94:	685b      	ldr	r3, [r3, #4]
 800dd96:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dd9a:	3301      	adds	r3, #1
 800dd9c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800dd9e:	429a      	cmp	r2, r3
 800dda0:	d122      	bne.n	800dde8 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800dda2:	69fb      	ldr	r3, [r7, #28]
 800dda4:	8b1a      	ldrh	r2, [r3, #24]
 800dda6:	4b5d      	ldr	r3, [pc, #372]	; (800df1c <tcp_input+0x524>)
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	881b      	ldrh	r3, [r3, #0]
 800ddac:	b29b      	uxth	r3, r3
 800ddae:	429a      	cmp	r2, r3
 800ddb0:	d11b      	bne.n	800ddea <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800ddb2:	69fb      	ldr	r3, [r7, #28]
 800ddb4:	8ada      	ldrh	r2, [r3, #22]
 800ddb6:	4b59      	ldr	r3, [pc, #356]	; (800df1c <tcp_input+0x524>)
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	885b      	ldrh	r3, [r3, #2]
 800ddbc:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800ddbe:	429a      	cmp	r2, r3
 800ddc0:	d113      	bne.n	800ddea <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ddc2:	69fb      	ldr	r3, [r7, #28]
 800ddc4:	685a      	ldr	r2, [r3, #4]
 800ddc6:	4b56      	ldr	r3, [pc, #344]	; (800df20 <tcp_input+0x528>)
 800ddc8:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800ddca:	429a      	cmp	r2, r3
 800ddcc:	d10d      	bne.n	800ddea <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800ddce:	69fb      	ldr	r3, [r7, #28]
 800ddd0:	681a      	ldr	r2, [r3, #0]
 800ddd2:	4b53      	ldr	r3, [pc, #332]	; (800df20 <tcp_input+0x528>)
 800ddd4:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ddd6:	429a      	cmp	r2, r3
 800ddd8:	d107      	bne.n	800ddea <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800ddda:	69f8      	ldr	r0, [r7, #28]
 800dddc:	f000 fb54 	bl	800e488 <tcp_timewait_input>
        }
        pbuf_free(p);
 800dde0:	6878      	ldr	r0, [r7, #4]
 800dde2:	f7fd fd23 	bl	800b82c <pbuf_free>
        return;
 800dde6:	e1f0      	b.n	800e1ca <tcp_input+0x7d2>
        continue;
 800dde8:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ddea:	69fb      	ldr	r3, [r7, #28]
 800ddec:	68db      	ldr	r3, [r3, #12]
 800ddee:	61fb      	str	r3, [r7, #28]
 800ddf0:	69fb      	ldr	r3, [r7, #28]
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d1bc      	bne.n	800dd70 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800ddf6:	2300      	movs	r3, #0
 800ddf8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ddfa:	4b51      	ldr	r3, [pc, #324]	; (800df40 <tcp_input+0x548>)
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	617b      	str	r3, [r7, #20]
 800de00:	e02a      	b.n	800de58 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800de02:	697b      	ldr	r3, [r7, #20]
 800de04:	7a1b      	ldrb	r3, [r3, #8]
 800de06:	2b00      	cmp	r3, #0
 800de08:	d00c      	beq.n	800de24 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800de0a:	697b      	ldr	r3, [r7, #20]
 800de0c:	7a1a      	ldrb	r2, [r3, #8]
 800de0e:	4b44      	ldr	r3, [pc, #272]	; (800df20 <tcp_input+0x528>)
 800de10:	685b      	ldr	r3, [r3, #4]
 800de12:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800de16:	3301      	adds	r3, #1
 800de18:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800de1a:	429a      	cmp	r2, r3
 800de1c:	d002      	beq.n	800de24 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800de1e:	697b      	ldr	r3, [r7, #20]
 800de20:	61bb      	str	r3, [r7, #24]
        continue;
 800de22:	e016      	b.n	800de52 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800de24:	697b      	ldr	r3, [r7, #20]
 800de26:	8ada      	ldrh	r2, [r3, #22]
 800de28:	4b3c      	ldr	r3, [pc, #240]	; (800df1c <tcp_input+0x524>)
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	885b      	ldrh	r3, [r3, #2]
 800de2e:	b29b      	uxth	r3, r3
 800de30:	429a      	cmp	r2, r3
 800de32:	d10c      	bne.n	800de4e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800de34:	697b      	ldr	r3, [r7, #20]
 800de36:	681a      	ldr	r2, [r3, #0]
 800de38:	4b39      	ldr	r3, [pc, #228]	; (800df20 <tcp_input+0x528>)
 800de3a:	695b      	ldr	r3, [r3, #20]
 800de3c:	429a      	cmp	r2, r3
 800de3e:	d00f      	beq.n	800de60 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800de40:	697b      	ldr	r3, [r7, #20]
 800de42:	2b00      	cmp	r3, #0
 800de44:	d00d      	beq.n	800de62 <tcp_input+0x46a>
 800de46:	697b      	ldr	r3, [r7, #20]
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d009      	beq.n	800de62 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800de4e:	697b      	ldr	r3, [r7, #20]
 800de50:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800de52:	697b      	ldr	r3, [r7, #20]
 800de54:	68db      	ldr	r3, [r3, #12]
 800de56:	617b      	str	r3, [r7, #20]
 800de58:	697b      	ldr	r3, [r7, #20]
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d1d1      	bne.n	800de02 <tcp_input+0x40a>
 800de5e:	e000      	b.n	800de62 <tcp_input+0x46a>
            break;
 800de60:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800de62:	697b      	ldr	r3, [r7, #20]
 800de64:	2b00      	cmp	r3, #0
 800de66:	d014      	beq.n	800de92 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800de68:	69bb      	ldr	r3, [r7, #24]
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d00a      	beq.n	800de84 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800de6e:	697b      	ldr	r3, [r7, #20]
 800de70:	68da      	ldr	r2, [r3, #12]
 800de72:	69bb      	ldr	r3, [r7, #24]
 800de74:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800de76:	4b32      	ldr	r3, [pc, #200]	; (800df40 <tcp_input+0x548>)
 800de78:	681a      	ldr	r2, [r3, #0]
 800de7a:	697b      	ldr	r3, [r7, #20]
 800de7c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800de7e:	4a30      	ldr	r2, [pc, #192]	; (800df40 <tcp_input+0x548>)
 800de80:	697b      	ldr	r3, [r7, #20]
 800de82:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800de84:	6978      	ldr	r0, [r7, #20]
 800de86:	f000 fa01 	bl	800e28c <tcp_listen_input>
      }
      pbuf_free(p);
 800de8a:	6878      	ldr	r0, [r7, #4]
 800de8c:	f7fd fcce 	bl	800b82c <pbuf_free>
      return;
 800de90:	e19b      	b.n	800e1ca <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800de92:	69fb      	ldr	r3, [r7, #28]
 800de94:	2b00      	cmp	r3, #0
 800de96:	f000 8160 	beq.w	800e15a <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800de9a:	4b2a      	ldr	r3, [pc, #168]	; (800df44 <tcp_input+0x54c>)
 800de9c:	2200      	movs	r2, #0
 800de9e:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	891a      	ldrh	r2, [r3, #8]
 800dea4:	4b27      	ldr	r3, [pc, #156]	; (800df44 <tcp_input+0x54c>)
 800dea6:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800dea8:	4a26      	ldr	r2, [pc, #152]	; (800df44 <tcp_input+0x54c>)
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800deae:	4b1b      	ldr	r3, [pc, #108]	; (800df1c <tcp_input+0x524>)
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	4a24      	ldr	r2, [pc, #144]	; (800df44 <tcp_input+0x54c>)
 800deb4:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800deb6:	4b24      	ldr	r3, [pc, #144]	; (800df48 <tcp_input+0x550>)
 800deb8:	2200      	movs	r2, #0
 800deba:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800debc:	4b23      	ldr	r3, [pc, #140]	; (800df4c <tcp_input+0x554>)
 800debe:	2200      	movs	r2, #0
 800dec0:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800dec2:	4b23      	ldr	r3, [pc, #140]	; (800df50 <tcp_input+0x558>)
 800dec4:	2200      	movs	r2, #0
 800dec6:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800dec8:	4b22      	ldr	r3, [pc, #136]	; (800df54 <tcp_input+0x55c>)
 800deca:	781b      	ldrb	r3, [r3, #0]
 800decc:	f003 0308 	and.w	r3, r3, #8
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d006      	beq.n	800dee2 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	7b5b      	ldrb	r3, [r3, #13]
 800ded8:	f043 0301 	orr.w	r3, r3, #1
 800dedc:	b2da      	uxtb	r2, r3
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800dee2:	69fb      	ldr	r3, [r7, #28]
 800dee4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d038      	beq.n	800df5c <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800deea:	69f8      	ldr	r0, [r7, #28]
 800deec:	f7ff f84a 	bl	800cf84 <tcp_process_refused_data>
 800def0:	4603      	mov	r3, r0
 800def2:	f113 0f0d 	cmn.w	r3, #13
 800def6:	d007      	beq.n	800df08 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800def8:	69fb      	ldr	r3, [r7, #28]
 800defa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800defc:	2b00      	cmp	r3, #0
 800defe:	d02d      	beq.n	800df5c <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800df00:	4b15      	ldr	r3, [pc, #84]	; (800df58 <tcp_input+0x560>)
 800df02:	881b      	ldrh	r3, [r3, #0]
 800df04:	2b00      	cmp	r3, #0
 800df06:	d029      	beq.n	800df5c <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800df08:	69fb      	ldr	r3, [r7, #28]
 800df0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	f040 8104 	bne.w	800e11a <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800df12:	69f8      	ldr	r0, [r7, #28]
 800df14:	f003 fe16 	bl	8011b44 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800df18:	e0ff      	b.n	800e11a <tcp_input+0x722>
 800df1a:	bf00      	nop
 800df1c:	24000568 	.word	0x24000568
 800df20:	24000d8c 	.word	0x24000d8c
 800df24:	080174ac 	.word	0x080174ac
 800df28:	080175d8 	.word	0x080175d8
 800df2c:	080174f8 	.word	0x080174f8
 800df30:	24003c7c 	.word	0x24003c7c
 800df34:	08017604 	.word	0x08017604
 800df38:	24003c8c 	.word	0x24003c8c
 800df3c:	08017630 	.word	0x08017630
 800df40:	24003c84 	.word	0x24003c84
 800df44:	24000558 	.word	0x24000558
 800df48:	24000588 	.word	0x24000588
 800df4c:	24000585 	.word	0x24000585
 800df50:	24000580 	.word	0x24000580
 800df54:	24000584 	.word	0x24000584
 800df58:	24000582 	.word	0x24000582
      }
    }
    tcp_input_pcb = pcb;
 800df5c:	4a9c      	ldr	r2, [pc, #624]	; (800e1d0 <tcp_input+0x7d8>)
 800df5e:	69fb      	ldr	r3, [r7, #28]
 800df60:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800df62:	69f8      	ldr	r0, [r7, #28]
 800df64:	f000 fb0a 	bl	800e57c <tcp_process>
 800df68:	4603      	mov	r3, r0
 800df6a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800df6c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800df70:	f113 0f0d 	cmn.w	r3, #13
 800df74:	f000 80d3 	beq.w	800e11e <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 800df78:	4b96      	ldr	r3, [pc, #600]	; (800e1d4 <tcp_input+0x7dc>)
 800df7a:	781b      	ldrb	r3, [r3, #0]
 800df7c:	f003 0308 	and.w	r3, r3, #8
 800df80:	2b00      	cmp	r3, #0
 800df82:	d015      	beq.n	800dfb0 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800df84:	69fb      	ldr	r3, [r7, #28]
 800df86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d008      	beq.n	800dfa0 <tcp_input+0x5a8>
 800df8e:	69fb      	ldr	r3, [r7, #28]
 800df90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800df94:	69fa      	ldr	r2, [r7, #28]
 800df96:	6912      	ldr	r2, [r2, #16]
 800df98:	f06f 010d 	mvn.w	r1, #13
 800df9c:	4610      	mov	r0, r2
 800df9e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800dfa0:	69f9      	ldr	r1, [r7, #28]
 800dfa2:	488d      	ldr	r0, [pc, #564]	; (800e1d8 <tcp_input+0x7e0>)
 800dfa4:	f7ff fbb0 	bl	800d708 <tcp_pcb_remove>
        tcp_free(pcb);
 800dfa8:	69f8      	ldr	r0, [r7, #28]
 800dfaa:	f7fd feef 	bl	800bd8c <tcp_free>
 800dfae:	e0c1      	b.n	800e134 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 800dfb0:	2300      	movs	r3, #0
 800dfb2:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800dfb4:	4b89      	ldr	r3, [pc, #548]	; (800e1dc <tcp_input+0x7e4>)
 800dfb6:	881b      	ldrh	r3, [r3, #0]
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d01d      	beq.n	800dff8 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800dfbc:	4b87      	ldr	r3, [pc, #540]	; (800e1dc <tcp_input+0x7e4>)
 800dfbe:	881b      	ldrh	r3, [r3, #0]
 800dfc0:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800dfc2:	69fb      	ldr	r3, [r7, #28]
 800dfc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d00a      	beq.n	800dfe2 <tcp_input+0x5ea>
 800dfcc:	69fb      	ldr	r3, [r7, #28]
 800dfce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dfd2:	69fa      	ldr	r2, [r7, #28]
 800dfd4:	6910      	ldr	r0, [r2, #16]
 800dfd6:	89fa      	ldrh	r2, [r7, #14]
 800dfd8:	69f9      	ldr	r1, [r7, #28]
 800dfda:	4798      	blx	r3
 800dfdc:	4603      	mov	r3, r0
 800dfde:	74fb      	strb	r3, [r7, #19]
 800dfe0:	e001      	b.n	800dfe6 <tcp_input+0x5ee>
 800dfe2:	2300      	movs	r3, #0
 800dfe4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800dfe6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800dfea:	f113 0f0d 	cmn.w	r3, #13
 800dfee:	f000 8098 	beq.w	800e122 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 800dff2:	4b7a      	ldr	r3, [pc, #488]	; (800e1dc <tcp_input+0x7e4>)
 800dff4:	2200      	movs	r2, #0
 800dff6:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800dff8:	69f8      	ldr	r0, [r7, #28]
 800dffa:	f000 f907 	bl	800e20c <tcp_input_delayed_close>
 800dffe:	4603      	mov	r3, r0
 800e000:	2b00      	cmp	r3, #0
 800e002:	f040 8090 	bne.w	800e126 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800e006:	4b76      	ldr	r3, [pc, #472]	; (800e1e0 <tcp_input+0x7e8>)
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d041      	beq.n	800e092 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800e00e:	69fb      	ldr	r3, [r7, #28]
 800e010:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e012:	2b00      	cmp	r3, #0
 800e014:	d006      	beq.n	800e024 <tcp_input+0x62c>
 800e016:	4b73      	ldr	r3, [pc, #460]	; (800e1e4 <tcp_input+0x7ec>)
 800e018:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800e01c:	4972      	ldr	r1, [pc, #456]	; (800e1e8 <tcp_input+0x7f0>)
 800e01e:	4873      	ldr	r0, [pc, #460]	; (800e1ec <tcp_input+0x7f4>)
 800e020:	f006 fd4c 	bl	8014abc <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800e024:	69fb      	ldr	r3, [r7, #28]
 800e026:	8b5b      	ldrh	r3, [r3, #26]
 800e028:	f003 0310 	and.w	r3, r3, #16
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d008      	beq.n	800e042 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800e030:	4b6b      	ldr	r3, [pc, #428]	; (800e1e0 <tcp_input+0x7e8>)
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	4618      	mov	r0, r3
 800e036:	f7fd fbf9 	bl	800b82c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800e03a:	69f8      	ldr	r0, [r7, #28]
 800e03c:	f7fe f98e 	bl	800c35c <tcp_abort>
            goto aborted;
 800e040:	e078      	b.n	800e134 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800e042:	69fb      	ldr	r3, [r7, #28]
 800e044:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d00c      	beq.n	800e066 <tcp_input+0x66e>
 800e04c:	69fb      	ldr	r3, [r7, #28]
 800e04e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e052:	69fb      	ldr	r3, [r7, #28]
 800e054:	6918      	ldr	r0, [r3, #16]
 800e056:	4b62      	ldr	r3, [pc, #392]	; (800e1e0 <tcp_input+0x7e8>)
 800e058:	681a      	ldr	r2, [r3, #0]
 800e05a:	2300      	movs	r3, #0
 800e05c:	69f9      	ldr	r1, [r7, #28]
 800e05e:	47a0      	blx	r4
 800e060:	4603      	mov	r3, r0
 800e062:	74fb      	strb	r3, [r7, #19]
 800e064:	e008      	b.n	800e078 <tcp_input+0x680>
 800e066:	4b5e      	ldr	r3, [pc, #376]	; (800e1e0 <tcp_input+0x7e8>)
 800e068:	681a      	ldr	r2, [r3, #0]
 800e06a:	2300      	movs	r3, #0
 800e06c:	69f9      	ldr	r1, [r7, #28]
 800e06e:	2000      	movs	r0, #0
 800e070:	f7ff f87c 	bl	800d16c <tcp_recv_null>
 800e074:	4603      	mov	r3, r0
 800e076:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800e078:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e07c:	f113 0f0d 	cmn.w	r3, #13
 800e080:	d053      	beq.n	800e12a <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800e082:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e086:	2b00      	cmp	r3, #0
 800e088:	d003      	beq.n	800e092 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800e08a:	4b55      	ldr	r3, [pc, #340]	; (800e1e0 <tcp_input+0x7e8>)
 800e08c:	681a      	ldr	r2, [r3, #0]
 800e08e:	69fb      	ldr	r3, [r7, #28]
 800e090:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800e092:	4b50      	ldr	r3, [pc, #320]	; (800e1d4 <tcp_input+0x7dc>)
 800e094:	781b      	ldrb	r3, [r3, #0]
 800e096:	f003 0320 	and.w	r3, r3, #32
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d030      	beq.n	800e100 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 800e09e:	69fb      	ldr	r3, [r7, #28]
 800e0a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d009      	beq.n	800e0ba <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800e0a6:	69fb      	ldr	r3, [r7, #28]
 800e0a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e0aa:	7b5a      	ldrb	r2, [r3, #13]
 800e0ac:	69fb      	ldr	r3, [r7, #28]
 800e0ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e0b0:	f042 0220 	orr.w	r2, r2, #32
 800e0b4:	b2d2      	uxtb	r2, r2
 800e0b6:	735a      	strb	r2, [r3, #13]
 800e0b8:	e022      	b.n	800e100 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800e0ba:	69fb      	ldr	r3, [r7, #28]
 800e0bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e0be:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e0c2:	d005      	beq.n	800e0d0 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 800e0c4:	69fb      	ldr	r3, [r7, #28]
 800e0c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e0c8:	3301      	adds	r3, #1
 800e0ca:	b29a      	uxth	r2, r3
 800e0cc:	69fb      	ldr	r3, [r7, #28]
 800e0ce:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800e0d0:	69fb      	ldr	r3, [r7, #28]
 800e0d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d00b      	beq.n	800e0f2 <tcp_input+0x6fa>
 800e0da:	69fb      	ldr	r3, [r7, #28]
 800e0dc:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e0e0:	69fb      	ldr	r3, [r7, #28]
 800e0e2:	6918      	ldr	r0, [r3, #16]
 800e0e4:	2300      	movs	r3, #0
 800e0e6:	2200      	movs	r2, #0
 800e0e8:	69f9      	ldr	r1, [r7, #28]
 800e0ea:	47a0      	blx	r4
 800e0ec:	4603      	mov	r3, r0
 800e0ee:	74fb      	strb	r3, [r7, #19]
 800e0f0:	e001      	b.n	800e0f6 <tcp_input+0x6fe>
 800e0f2:	2300      	movs	r3, #0
 800e0f4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800e0f6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e0fa:	f113 0f0d 	cmn.w	r3, #13
 800e0fe:	d016      	beq.n	800e12e <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800e100:	4b33      	ldr	r3, [pc, #204]	; (800e1d0 <tcp_input+0x7d8>)
 800e102:	2200      	movs	r2, #0
 800e104:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800e106:	69f8      	ldr	r0, [r7, #28]
 800e108:	f000 f880 	bl	800e20c <tcp_input_delayed_close>
 800e10c:	4603      	mov	r3, r0
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d10f      	bne.n	800e132 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800e112:	69f8      	ldr	r0, [r7, #28]
 800e114:	f002 ff10 	bl	8010f38 <tcp_output>
 800e118:	e00c      	b.n	800e134 <tcp_input+0x73c>
        goto aborted;
 800e11a:	bf00      	nop
 800e11c:	e00a      	b.n	800e134 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800e11e:	bf00      	nop
 800e120:	e008      	b.n	800e134 <tcp_input+0x73c>
              goto aborted;
 800e122:	bf00      	nop
 800e124:	e006      	b.n	800e134 <tcp_input+0x73c>
          goto aborted;
 800e126:	bf00      	nop
 800e128:	e004      	b.n	800e134 <tcp_input+0x73c>
            goto aborted;
 800e12a:	bf00      	nop
 800e12c:	e002      	b.n	800e134 <tcp_input+0x73c>
              goto aborted;
 800e12e:	bf00      	nop
 800e130:	e000      	b.n	800e134 <tcp_input+0x73c>
          goto aborted;
 800e132:	bf00      	nop
    tcp_input_pcb = NULL;
 800e134:	4b26      	ldr	r3, [pc, #152]	; (800e1d0 <tcp_input+0x7d8>)
 800e136:	2200      	movs	r2, #0
 800e138:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800e13a:	4b29      	ldr	r3, [pc, #164]	; (800e1e0 <tcp_input+0x7e8>)
 800e13c:	2200      	movs	r2, #0
 800e13e:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800e140:	4b2b      	ldr	r3, [pc, #172]	; (800e1f0 <tcp_input+0x7f8>)
 800e142:	685b      	ldr	r3, [r3, #4]
 800e144:	2b00      	cmp	r3, #0
 800e146:	d03f      	beq.n	800e1c8 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 800e148:	4b29      	ldr	r3, [pc, #164]	; (800e1f0 <tcp_input+0x7f8>)
 800e14a:	685b      	ldr	r3, [r3, #4]
 800e14c:	4618      	mov	r0, r3
 800e14e:	f7fd fb6d 	bl	800b82c <pbuf_free>
      inseg.p = NULL;
 800e152:	4b27      	ldr	r3, [pc, #156]	; (800e1f0 <tcp_input+0x7f8>)
 800e154:	2200      	movs	r2, #0
 800e156:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800e158:	e036      	b.n	800e1c8 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800e15a:	4b26      	ldr	r3, [pc, #152]	; (800e1f4 <tcp_input+0x7fc>)
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	899b      	ldrh	r3, [r3, #12]
 800e160:	b29b      	uxth	r3, r3
 800e162:	4618      	mov	r0, r3
 800e164:	f7fb fed2 	bl	8009f0c <lwip_htons>
 800e168:	4603      	mov	r3, r0
 800e16a:	b2db      	uxtb	r3, r3
 800e16c:	f003 0304 	and.w	r3, r3, #4
 800e170:	2b00      	cmp	r3, #0
 800e172:	d118      	bne.n	800e1a6 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e174:	4b20      	ldr	r3, [pc, #128]	; (800e1f8 <tcp_input+0x800>)
 800e176:	6819      	ldr	r1, [r3, #0]
 800e178:	4b20      	ldr	r3, [pc, #128]	; (800e1fc <tcp_input+0x804>)
 800e17a:	881b      	ldrh	r3, [r3, #0]
 800e17c:	461a      	mov	r2, r3
 800e17e:	4b20      	ldr	r3, [pc, #128]	; (800e200 <tcp_input+0x808>)
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e184:	4b1b      	ldr	r3, [pc, #108]	; (800e1f4 <tcp_input+0x7fc>)
 800e186:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e188:	885b      	ldrh	r3, [r3, #2]
 800e18a:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e18c:	4a19      	ldr	r2, [pc, #100]	; (800e1f4 <tcp_input+0x7fc>)
 800e18e:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e190:	8812      	ldrh	r2, [r2, #0]
 800e192:	b292      	uxth	r2, r2
 800e194:	9202      	str	r2, [sp, #8]
 800e196:	9301      	str	r3, [sp, #4]
 800e198:	4b1a      	ldr	r3, [pc, #104]	; (800e204 <tcp_input+0x80c>)
 800e19a:	9300      	str	r3, [sp, #0]
 800e19c:	4b1a      	ldr	r3, [pc, #104]	; (800e208 <tcp_input+0x810>)
 800e19e:	4602      	mov	r2, r0
 800e1a0:	2000      	movs	r0, #0
 800e1a2:	f003 fc7d 	bl	8011aa0 <tcp_rst>
    pbuf_free(p);
 800e1a6:	6878      	ldr	r0, [r7, #4]
 800e1a8:	f7fd fb40 	bl	800b82c <pbuf_free>
  return;
 800e1ac:	e00c      	b.n	800e1c8 <tcp_input+0x7d0>
    goto dropped;
 800e1ae:	bf00      	nop
 800e1b0:	e006      	b.n	800e1c0 <tcp_input+0x7c8>
    goto dropped;
 800e1b2:	bf00      	nop
 800e1b4:	e004      	b.n	800e1c0 <tcp_input+0x7c8>
    goto dropped;
 800e1b6:	bf00      	nop
 800e1b8:	e002      	b.n	800e1c0 <tcp_input+0x7c8>
      goto dropped;
 800e1ba:	bf00      	nop
 800e1bc:	e000      	b.n	800e1c0 <tcp_input+0x7c8>
      goto dropped;
 800e1be:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800e1c0:	6878      	ldr	r0, [r7, #4]
 800e1c2:	f7fd fb33 	bl	800b82c <pbuf_free>
 800e1c6:	e000      	b.n	800e1ca <tcp_input+0x7d2>
  return;
 800e1c8:	bf00      	nop
}
 800e1ca:	3724      	adds	r7, #36	; 0x24
 800e1cc:	46bd      	mov	sp, r7
 800e1ce:	bd90      	pop	{r4, r7, pc}
 800e1d0:	24003c90 	.word	0x24003c90
 800e1d4:	24000585 	.word	0x24000585
 800e1d8:	24003c7c 	.word	0x24003c7c
 800e1dc:	24000580 	.word	0x24000580
 800e1e0:	24000588 	.word	0x24000588
 800e1e4:	080174ac 	.word	0x080174ac
 800e1e8:	08017660 	.word	0x08017660
 800e1ec:	080174f8 	.word	0x080174f8
 800e1f0:	24000558 	.word	0x24000558
 800e1f4:	24000568 	.word	0x24000568
 800e1f8:	2400057c 	.word	0x2400057c
 800e1fc:	24000582 	.word	0x24000582
 800e200:	24000578 	.word	0x24000578
 800e204:	24000d9c 	.word	0x24000d9c
 800e208:	24000da0 	.word	0x24000da0

0800e20c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800e20c:	b580      	push	{r7, lr}
 800e20e:	b082      	sub	sp, #8
 800e210:	af00      	add	r7, sp, #0
 800e212:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	2b00      	cmp	r3, #0
 800e218:	d106      	bne.n	800e228 <tcp_input_delayed_close+0x1c>
 800e21a:	4b17      	ldr	r3, [pc, #92]	; (800e278 <tcp_input_delayed_close+0x6c>)
 800e21c:	f240 225a 	movw	r2, #602	; 0x25a
 800e220:	4916      	ldr	r1, [pc, #88]	; (800e27c <tcp_input_delayed_close+0x70>)
 800e222:	4817      	ldr	r0, [pc, #92]	; (800e280 <tcp_input_delayed_close+0x74>)
 800e224:	f006 fc4a 	bl	8014abc <iprintf>

  if (recv_flags & TF_CLOSED) {
 800e228:	4b16      	ldr	r3, [pc, #88]	; (800e284 <tcp_input_delayed_close+0x78>)
 800e22a:	781b      	ldrb	r3, [r3, #0]
 800e22c:	f003 0310 	and.w	r3, r3, #16
 800e230:	2b00      	cmp	r3, #0
 800e232:	d01c      	beq.n	800e26e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	8b5b      	ldrh	r3, [r3, #26]
 800e238:	f003 0310 	and.w	r3, r3, #16
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d10d      	bne.n	800e25c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e246:	2b00      	cmp	r3, #0
 800e248:	d008      	beq.n	800e25c <tcp_input_delayed_close+0x50>
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e250:	687a      	ldr	r2, [r7, #4]
 800e252:	6912      	ldr	r2, [r2, #16]
 800e254:	f06f 010e 	mvn.w	r1, #14
 800e258:	4610      	mov	r0, r2
 800e25a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800e25c:	6879      	ldr	r1, [r7, #4]
 800e25e:	480a      	ldr	r0, [pc, #40]	; (800e288 <tcp_input_delayed_close+0x7c>)
 800e260:	f7ff fa52 	bl	800d708 <tcp_pcb_remove>
    tcp_free(pcb);
 800e264:	6878      	ldr	r0, [r7, #4]
 800e266:	f7fd fd91 	bl	800bd8c <tcp_free>
    return 1;
 800e26a:	2301      	movs	r3, #1
 800e26c:	e000      	b.n	800e270 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800e26e:	2300      	movs	r3, #0
}
 800e270:	4618      	mov	r0, r3
 800e272:	3708      	adds	r7, #8
 800e274:	46bd      	mov	sp, r7
 800e276:	bd80      	pop	{r7, pc}
 800e278:	080174ac 	.word	0x080174ac
 800e27c:	0801767c 	.word	0x0801767c
 800e280:	080174f8 	.word	0x080174f8
 800e284:	24000585 	.word	0x24000585
 800e288:	24003c7c 	.word	0x24003c7c

0800e28c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800e28c:	b590      	push	{r4, r7, lr}
 800e28e:	b08b      	sub	sp, #44	; 0x2c
 800e290:	af04      	add	r7, sp, #16
 800e292:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800e294:	4b6f      	ldr	r3, [pc, #444]	; (800e454 <tcp_listen_input+0x1c8>)
 800e296:	781b      	ldrb	r3, [r3, #0]
 800e298:	f003 0304 	and.w	r3, r3, #4
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	f040 80d2 	bne.w	800e446 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d106      	bne.n	800e2b6 <tcp_listen_input+0x2a>
 800e2a8:	4b6b      	ldr	r3, [pc, #428]	; (800e458 <tcp_listen_input+0x1cc>)
 800e2aa:	f240 2281 	movw	r2, #641	; 0x281
 800e2ae:	496b      	ldr	r1, [pc, #428]	; (800e45c <tcp_listen_input+0x1d0>)
 800e2b0:	486b      	ldr	r0, [pc, #428]	; (800e460 <tcp_listen_input+0x1d4>)
 800e2b2:	f006 fc03 	bl	8014abc <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800e2b6:	4b67      	ldr	r3, [pc, #412]	; (800e454 <tcp_listen_input+0x1c8>)
 800e2b8:	781b      	ldrb	r3, [r3, #0]
 800e2ba:	f003 0310 	and.w	r3, r3, #16
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d019      	beq.n	800e2f6 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e2c2:	4b68      	ldr	r3, [pc, #416]	; (800e464 <tcp_listen_input+0x1d8>)
 800e2c4:	6819      	ldr	r1, [r3, #0]
 800e2c6:	4b68      	ldr	r3, [pc, #416]	; (800e468 <tcp_listen_input+0x1dc>)
 800e2c8:	881b      	ldrh	r3, [r3, #0]
 800e2ca:	461a      	mov	r2, r3
 800e2cc:	4b67      	ldr	r3, [pc, #412]	; (800e46c <tcp_listen_input+0x1e0>)
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e2d2:	4b67      	ldr	r3, [pc, #412]	; (800e470 <tcp_listen_input+0x1e4>)
 800e2d4:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e2d6:	885b      	ldrh	r3, [r3, #2]
 800e2d8:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e2da:	4a65      	ldr	r2, [pc, #404]	; (800e470 <tcp_listen_input+0x1e4>)
 800e2dc:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e2de:	8812      	ldrh	r2, [r2, #0]
 800e2e0:	b292      	uxth	r2, r2
 800e2e2:	9202      	str	r2, [sp, #8]
 800e2e4:	9301      	str	r3, [sp, #4]
 800e2e6:	4b63      	ldr	r3, [pc, #396]	; (800e474 <tcp_listen_input+0x1e8>)
 800e2e8:	9300      	str	r3, [sp, #0]
 800e2ea:	4b63      	ldr	r3, [pc, #396]	; (800e478 <tcp_listen_input+0x1ec>)
 800e2ec:	4602      	mov	r2, r0
 800e2ee:	6878      	ldr	r0, [r7, #4]
 800e2f0:	f003 fbd6 	bl	8011aa0 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800e2f4:	e0a9      	b.n	800e44a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800e2f6:	4b57      	ldr	r3, [pc, #348]	; (800e454 <tcp_listen_input+0x1c8>)
 800e2f8:	781b      	ldrb	r3, [r3, #0]
 800e2fa:	f003 0302 	and.w	r3, r3, #2
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	f000 80a3 	beq.w	800e44a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	7d5b      	ldrb	r3, [r3, #21]
 800e308:	4618      	mov	r0, r3
 800e30a:	f7ff f853 	bl	800d3b4 <tcp_alloc>
 800e30e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800e310:	697b      	ldr	r3, [r7, #20]
 800e312:	2b00      	cmp	r3, #0
 800e314:	d111      	bne.n	800e33a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	699b      	ldr	r3, [r3, #24]
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d00a      	beq.n	800e334 <tcp_listen_input+0xa8>
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	699b      	ldr	r3, [r3, #24]
 800e322:	687a      	ldr	r2, [r7, #4]
 800e324:	6910      	ldr	r0, [r2, #16]
 800e326:	f04f 32ff 	mov.w	r2, #4294967295
 800e32a:	2100      	movs	r1, #0
 800e32c:	4798      	blx	r3
 800e32e:	4603      	mov	r3, r0
 800e330:	73bb      	strb	r3, [r7, #14]
      return;
 800e332:	e08b      	b.n	800e44c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800e334:	23f0      	movs	r3, #240	; 0xf0
 800e336:	73bb      	strb	r3, [r7, #14]
      return;
 800e338:	e088      	b.n	800e44c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800e33a:	4b50      	ldr	r3, [pc, #320]	; (800e47c <tcp_listen_input+0x1f0>)
 800e33c:	695a      	ldr	r2, [r3, #20]
 800e33e:	697b      	ldr	r3, [r7, #20]
 800e340:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800e342:	4b4e      	ldr	r3, [pc, #312]	; (800e47c <tcp_listen_input+0x1f0>)
 800e344:	691a      	ldr	r2, [r3, #16]
 800e346:	697b      	ldr	r3, [r7, #20]
 800e348:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	8ada      	ldrh	r2, [r3, #22]
 800e34e:	697b      	ldr	r3, [r7, #20]
 800e350:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800e352:	4b47      	ldr	r3, [pc, #284]	; (800e470 <tcp_listen_input+0x1e4>)
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	881b      	ldrh	r3, [r3, #0]
 800e358:	b29a      	uxth	r2, r3
 800e35a:	697b      	ldr	r3, [r7, #20]
 800e35c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800e35e:	697b      	ldr	r3, [r7, #20]
 800e360:	2203      	movs	r2, #3
 800e362:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800e364:	4b41      	ldr	r3, [pc, #260]	; (800e46c <tcp_listen_input+0x1e0>)
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	1c5a      	adds	r2, r3, #1
 800e36a:	697b      	ldr	r3, [r7, #20]
 800e36c:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800e36e:	697b      	ldr	r3, [r7, #20]
 800e370:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e372:	697b      	ldr	r3, [r7, #20]
 800e374:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800e376:	6978      	ldr	r0, [r7, #20]
 800e378:	f7ff fa5a 	bl	800d830 <tcp_next_iss>
 800e37c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800e37e:	697b      	ldr	r3, [r7, #20]
 800e380:	693a      	ldr	r2, [r7, #16]
 800e382:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800e384:	697b      	ldr	r3, [r7, #20]
 800e386:	693a      	ldr	r2, [r7, #16]
 800e388:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800e38a:	697b      	ldr	r3, [r7, #20]
 800e38c:	693a      	ldr	r2, [r7, #16]
 800e38e:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800e390:	697b      	ldr	r3, [r7, #20]
 800e392:	693a      	ldr	r2, [r7, #16]
 800e394:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800e396:	4b35      	ldr	r3, [pc, #212]	; (800e46c <tcp_listen_input+0x1e0>)
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	1e5a      	subs	r2, r3, #1
 800e39c:	697b      	ldr	r3, [r7, #20]
 800e39e:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	691a      	ldr	r2, [r3, #16]
 800e3a4:	697b      	ldr	r3, [r7, #20]
 800e3a6:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800e3a8:	697b      	ldr	r3, [r7, #20]
 800e3aa:	687a      	ldr	r2, [r7, #4]
 800e3ac:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	7a5b      	ldrb	r3, [r3, #9]
 800e3b2:	f003 030c 	and.w	r3, r3, #12
 800e3b6:	b2da      	uxtb	r2, r3
 800e3b8:	697b      	ldr	r3, [r7, #20]
 800e3ba:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	7a1a      	ldrb	r2, [r3, #8]
 800e3c0:	697b      	ldr	r3, [r7, #20]
 800e3c2:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800e3c4:	4b2e      	ldr	r3, [pc, #184]	; (800e480 <tcp_listen_input+0x1f4>)
 800e3c6:	681a      	ldr	r2, [r3, #0]
 800e3c8:	697b      	ldr	r3, [r7, #20]
 800e3ca:	60da      	str	r2, [r3, #12]
 800e3cc:	4a2c      	ldr	r2, [pc, #176]	; (800e480 <tcp_listen_input+0x1f4>)
 800e3ce:	697b      	ldr	r3, [r7, #20]
 800e3d0:	6013      	str	r3, [r2, #0]
 800e3d2:	f003 fd27 	bl	8011e24 <tcp_timer_needed>
 800e3d6:	4b2b      	ldr	r3, [pc, #172]	; (800e484 <tcp_listen_input+0x1f8>)
 800e3d8:	2201      	movs	r2, #1
 800e3da:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800e3dc:	6978      	ldr	r0, [r7, #20]
 800e3de:	f001 fd8d 	bl	800fefc <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800e3e2:	4b23      	ldr	r3, [pc, #140]	; (800e470 <tcp_listen_input+0x1e4>)
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	89db      	ldrh	r3, [r3, #14]
 800e3e8:	b29a      	uxth	r2, r3
 800e3ea:	697b      	ldr	r3, [r7, #20]
 800e3ec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800e3f0:	697b      	ldr	r3, [r7, #20]
 800e3f2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e3f6:	697b      	ldr	r3, [r7, #20]
 800e3f8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800e3fc:	697b      	ldr	r3, [r7, #20]
 800e3fe:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800e400:	697b      	ldr	r3, [r7, #20]
 800e402:	3304      	adds	r3, #4
 800e404:	4618      	mov	r0, r3
 800e406:	f005 f911 	bl	801362c <ip4_route>
 800e40a:	4601      	mov	r1, r0
 800e40c:	697b      	ldr	r3, [r7, #20]
 800e40e:	3304      	adds	r3, #4
 800e410:	461a      	mov	r2, r3
 800e412:	4620      	mov	r0, r4
 800e414:	f7ff fa32 	bl	800d87c <tcp_eff_send_mss_netif>
 800e418:	4603      	mov	r3, r0
 800e41a:	461a      	mov	r2, r3
 800e41c:	697b      	ldr	r3, [r7, #20]
 800e41e:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800e420:	2112      	movs	r1, #18
 800e422:	6978      	ldr	r0, [r7, #20]
 800e424:	f002 fc9a 	bl	8010d5c <tcp_enqueue_flags>
 800e428:	4603      	mov	r3, r0
 800e42a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800e42c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e430:	2b00      	cmp	r3, #0
 800e432:	d004      	beq.n	800e43e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800e434:	2100      	movs	r1, #0
 800e436:	6978      	ldr	r0, [r7, #20]
 800e438:	f7fd fed2 	bl	800c1e0 <tcp_abandon>
      return;
 800e43c:	e006      	b.n	800e44c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800e43e:	6978      	ldr	r0, [r7, #20]
 800e440:	f002 fd7a 	bl	8010f38 <tcp_output>
  return;
 800e444:	e001      	b.n	800e44a <tcp_listen_input+0x1be>
    return;
 800e446:	bf00      	nop
 800e448:	e000      	b.n	800e44c <tcp_listen_input+0x1c0>
  return;
 800e44a:	bf00      	nop
}
 800e44c:	371c      	adds	r7, #28
 800e44e:	46bd      	mov	sp, r7
 800e450:	bd90      	pop	{r4, r7, pc}
 800e452:	bf00      	nop
 800e454:	24000584 	.word	0x24000584
 800e458:	080174ac 	.word	0x080174ac
 800e45c:	080176a4 	.word	0x080176a4
 800e460:	080174f8 	.word	0x080174f8
 800e464:	2400057c 	.word	0x2400057c
 800e468:	24000582 	.word	0x24000582
 800e46c:	24000578 	.word	0x24000578
 800e470:	24000568 	.word	0x24000568
 800e474:	24000d9c 	.word	0x24000d9c
 800e478:	24000da0 	.word	0x24000da0
 800e47c:	24000d8c 	.word	0x24000d8c
 800e480:	24003c7c 	.word	0x24003c7c
 800e484:	24003c78 	.word	0x24003c78

0800e488 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800e488:	b580      	push	{r7, lr}
 800e48a:	b086      	sub	sp, #24
 800e48c:	af04      	add	r7, sp, #16
 800e48e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800e490:	4b2f      	ldr	r3, [pc, #188]	; (800e550 <tcp_timewait_input+0xc8>)
 800e492:	781b      	ldrb	r3, [r3, #0]
 800e494:	f003 0304 	and.w	r3, r3, #4
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d153      	bne.n	800e544 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d106      	bne.n	800e4b0 <tcp_timewait_input+0x28>
 800e4a2:	4b2c      	ldr	r3, [pc, #176]	; (800e554 <tcp_timewait_input+0xcc>)
 800e4a4:	f240 22ee 	movw	r2, #750	; 0x2ee
 800e4a8:	492b      	ldr	r1, [pc, #172]	; (800e558 <tcp_timewait_input+0xd0>)
 800e4aa:	482c      	ldr	r0, [pc, #176]	; (800e55c <tcp_timewait_input+0xd4>)
 800e4ac:	f006 fb06 	bl	8014abc <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800e4b0:	4b27      	ldr	r3, [pc, #156]	; (800e550 <tcp_timewait_input+0xc8>)
 800e4b2:	781b      	ldrb	r3, [r3, #0]
 800e4b4:	f003 0302 	and.w	r3, r3, #2
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d02a      	beq.n	800e512 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800e4bc:	4b28      	ldr	r3, [pc, #160]	; (800e560 <tcp_timewait_input+0xd8>)
 800e4be:	681a      	ldr	r2, [r3, #0]
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4c4:	1ad3      	subs	r3, r2, r3
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	db2d      	blt.n	800e526 <tcp_timewait_input+0x9e>
 800e4ca:	4b25      	ldr	r3, [pc, #148]	; (800e560 <tcp_timewait_input+0xd8>)
 800e4cc:	681a      	ldr	r2, [r3, #0]
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4d2:	6879      	ldr	r1, [r7, #4]
 800e4d4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e4d6:	440b      	add	r3, r1
 800e4d8:	1ad3      	subs	r3, r2, r3
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	dc23      	bgt.n	800e526 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e4de:	4b21      	ldr	r3, [pc, #132]	; (800e564 <tcp_timewait_input+0xdc>)
 800e4e0:	6819      	ldr	r1, [r3, #0]
 800e4e2:	4b21      	ldr	r3, [pc, #132]	; (800e568 <tcp_timewait_input+0xe0>)
 800e4e4:	881b      	ldrh	r3, [r3, #0]
 800e4e6:	461a      	mov	r2, r3
 800e4e8:	4b1d      	ldr	r3, [pc, #116]	; (800e560 <tcp_timewait_input+0xd8>)
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e4ee:	4b1f      	ldr	r3, [pc, #124]	; (800e56c <tcp_timewait_input+0xe4>)
 800e4f0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e4f2:	885b      	ldrh	r3, [r3, #2]
 800e4f4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e4f6:	4a1d      	ldr	r2, [pc, #116]	; (800e56c <tcp_timewait_input+0xe4>)
 800e4f8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e4fa:	8812      	ldrh	r2, [r2, #0]
 800e4fc:	b292      	uxth	r2, r2
 800e4fe:	9202      	str	r2, [sp, #8]
 800e500:	9301      	str	r3, [sp, #4]
 800e502:	4b1b      	ldr	r3, [pc, #108]	; (800e570 <tcp_timewait_input+0xe8>)
 800e504:	9300      	str	r3, [sp, #0]
 800e506:	4b1b      	ldr	r3, [pc, #108]	; (800e574 <tcp_timewait_input+0xec>)
 800e508:	4602      	mov	r2, r0
 800e50a:	6878      	ldr	r0, [r7, #4]
 800e50c:	f003 fac8 	bl	8011aa0 <tcp_rst>
      return;
 800e510:	e01b      	b.n	800e54a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800e512:	4b0f      	ldr	r3, [pc, #60]	; (800e550 <tcp_timewait_input+0xc8>)
 800e514:	781b      	ldrb	r3, [r3, #0]
 800e516:	f003 0301 	and.w	r3, r3, #1
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d003      	beq.n	800e526 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800e51e:	4b16      	ldr	r3, [pc, #88]	; (800e578 <tcp_timewait_input+0xf0>)
 800e520:	681a      	ldr	r2, [r3, #0]
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800e526:	4b10      	ldr	r3, [pc, #64]	; (800e568 <tcp_timewait_input+0xe0>)
 800e528:	881b      	ldrh	r3, [r3, #0]
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d00c      	beq.n	800e548 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	8b5b      	ldrh	r3, [r3, #26]
 800e532:	f043 0302 	orr.w	r3, r3, #2
 800e536:	b29a      	uxth	r2, r3
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e53c:	6878      	ldr	r0, [r7, #4]
 800e53e:	f002 fcfb 	bl	8010f38 <tcp_output>
  }
  return;
 800e542:	e001      	b.n	800e548 <tcp_timewait_input+0xc0>
    return;
 800e544:	bf00      	nop
 800e546:	e000      	b.n	800e54a <tcp_timewait_input+0xc2>
  return;
 800e548:	bf00      	nop
}
 800e54a:	3708      	adds	r7, #8
 800e54c:	46bd      	mov	sp, r7
 800e54e:	bd80      	pop	{r7, pc}
 800e550:	24000584 	.word	0x24000584
 800e554:	080174ac 	.word	0x080174ac
 800e558:	080176c4 	.word	0x080176c4
 800e55c:	080174f8 	.word	0x080174f8
 800e560:	24000578 	.word	0x24000578
 800e564:	2400057c 	.word	0x2400057c
 800e568:	24000582 	.word	0x24000582
 800e56c:	24000568 	.word	0x24000568
 800e570:	24000d9c 	.word	0x24000d9c
 800e574:	24000da0 	.word	0x24000da0
 800e578:	24003c80 	.word	0x24003c80

0800e57c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800e57c:	b590      	push	{r4, r7, lr}
 800e57e:	b08d      	sub	sp, #52	; 0x34
 800e580:	af04      	add	r7, sp, #16
 800e582:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800e584:	2300      	movs	r3, #0
 800e586:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800e588:	2300      	movs	r3, #0
 800e58a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d106      	bne.n	800e5a0 <tcp_process+0x24>
 800e592:	4ba5      	ldr	r3, [pc, #660]	; (800e828 <tcp_process+0x2ac>)
 800e594:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800e598:	49a4      	ldr	r1, [pc, #656]	; (800e82c <tcp_process+0x2b0>)
 800e59a:	48a5      	ldr	r0, [pc, #660]	; (800e830 <tcp_process+0x2b4>)
 800e59c:	f006 fa8e 	bl	8014abc <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800e5a0:	4ba4      	ldr	r3, [pc, #656]	; (800e834 <tcp_process+0x2b8>)
 800e5a2:	781b      	ldrb	r3, [r3, #0]
 800e5a4:	f003 0304 	and.w	r3, r3, #4
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d04e      	beq.n	800e64a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	7d1b      	ldrb	r3, [r3, #20]
 800e5b0:	2b02      	cmp	r3, #2
 800e5b2:	d108      	bne.n	800e5c6 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e5b8:	4b9f      	ldr	r3, [pc, #636]	; (800e838 <tcp_process+0x2bc>)
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	429a      	cmp	r2, r3
 800e5be:	d123      	bne.n	800e608 <tcp_process+0x8c>
        acceptable = 1;
 800e5c0:	2301      	movs	r3, #1
 800e5c2:	76fb      	strb	r3, [r7, #27]
 800e5c4:	e020      	b.n	800e608 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e5ca:	4b9c      	ldr	r3, [pc, #624]	; (800e83c <tcp_process+0x2c0>)
 800e5cc:	681b      	ldr	r3, [r3, #0]
 800e5ce:	429a      	cmp	r2, r3
 800e5d0:	d102      	bne.n	800e5d8 <tcp_process+0x5c>
        acceptable = 1;
 800e5d2:	2301      	movs	r3, #1
 800e5d4:	76fb      	strb	r3, [r7, #27]
 800e5d6:	e017      	b.n	800e608 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e5d8:	4b98      	ldr	r3, [pc, #608]	; (800e83c <tcp_process+0x2c0>)
 800e5da:	681a      	ldr	r2, [r3, #0]
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5e0:	1ad3      	subs	r3, r2, r3
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	db10      	blt.n	800e608 <tcp_process+0x8c>
 800e5e6:	4b95      	ldr	r3, [pc, #596]	; (800e83c <tcp_process+0x2c0>)
 800e5e8:	681a      	ldr	r2, [r3, #0]
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5ee:	6879      	ldr	r1, [r7, #4]
 800e5f0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e5f2:	440b      	add	r3, r1
 800e5f4:	1ad3      	subs	r3, r2, r3
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	dc06      	bgt.n	800e608 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	8b5b      	ldrh	r3, [r3, #26]
 800e5fe:	f043 0302 	orr.w	r3, r3, #2
 800e602:	b29a      	uxth	r2, r3
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800e608:	7efb      	ldrb	r3, [r7, #27]
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d01b      	beq.n	800e646 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	7d1b      	ldrb	r3, [r3, #20]
 800e612:	2b00      	cmp	r3, #0
 800e614:	d106      	bne.n	800e624 <tcp_process+0xa8>
 800e616:	4b84      	ldr	r3, [pc, #528]	; (800e828 <tcp_process+0x2ac>)
 800e618:	f44f 724e 	mov.w	r2, #824	; 0x338
 800e61c:	4988      	ldr	r1, [pc, #544]	; (800e840 <tcp_process+0x2c4>)
 800e61e:	4884      	ldr	r0, [pc, #528]	; (800e830 <tcp_process+0x2b4>)
 800e620:	f006 fa4c 	bl	8014abc <iprintf>
      recv_flags |= TF_RESET;
 800e624:	4b87      	ldr	r3, [pc, #540]	; (800e844 <tcp_process+0x2c8>)
 800e626:	781b      	ldrb	r3, [r3, #0]
 800e628:	f043 0308 	orr.w	r3, r3, #8
 800e62c:	b2da      	uxtb	r2, r3
 800e62e:	4b85      	ldr	r3, [pc, #532]	; (800e844 <tcp_process+0x2c8>)
 800e630:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	8b5b      	ldrh	r3, [r3, #26]
 800e636:	f023 0301 	bic.w	r3, r3, #1
 800e63a:	b29a      	uxth	r2, r3
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800e640:	f06f 030d 	mvn.w	r3, #13
 800e644:	e37a      	b.n	800ed3c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800e646:	2300      	movs	r3, #0
 800e648:	e378      	b.n	800ed3c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800e64a:	4b7a      	ldr	r3, [pc, #488]	; (800e834 <tcp_process+0x2b8>)
 800e64c:	781b      	ldrb	r3, [r3, #0]
 800e64e:	f003 0302 	and.w	r3, r3, #2
 800e652:	2b00      	cmp	r3, #0
 800e654:	d010      	beq.n	800e678 <tcp_process+0xfc>
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	7d1b      	ldrb	r3, [r3, #20]
 800e65a:	2b02      	cmp	r3, #2
 800e65c:	d00c      	beq.n	800e678 <tcp_process+0xfc>
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	7d1b      	ldrb	r3, [r3, #20]
 800e662:	2b03      	cmp	r3, #3
 800e664:	d008      	beq.n	800e678 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	8b5b      	ldrh	r3, [r3, #26]
 800e66a:	f043 0302 	orr.w	r3, r3, #2
 800e66e:	b29a      	uxth	r2, r3
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800e674:	2300      	movs	r3, #0
 800e676:	e361      	b.n	800ed3c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	8b5b      	ldrh	r3, [r3, #26]
 800e67c:	f003 0310 	and.w	r3, r3, #16
 800e680:	2b00      	cmp	r3, #0
 800e682:	d103      	bne.n	800e68c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800e684:	4b70      	ldr	r3, [pc, #448]	; (800e848 <tcp_process+0x2cc>)
 800e686:	681a      	ldr	r2, [r3, #0]
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	2200      	movs	r2, #0
 800e690:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	2200      	movs	r2, #0
 800e698:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800e69c:	6878      	ldr	r0, [r7, #4]
 800e69e:	f001 fc2d 	bl	800fefc <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	7d1b      	ldrb	r3, [r3, #20]
 800e6a6:	3b02      	subs	r3, #2
 800e6a8:	2b07      	cmp	r3, #7
 800e6aa:	f200 8337 	bhi.w	800ed1c <tcp_process+0x7a0>
 800e6ae:	a201      	add	r2, pc, #4	; (adr r2, 800e6b4 <tcp_process+0x138>)
 800e6b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6b4:	0800e6d5 	.word	0x0800e6d5
 800e6b8:	0800e905 	.word	0x0800e905
 800e6bc:	0800ea7d 	.word	0x0800ea7d
 800e6c0:	0800eaa7 	.word	0x0800eaa7
 800e6c4:	0800ebcb 	.word	0x0800ebcb
 800e6c8:	0800ea7d 	.word	0x0800ea7d
 800e6cc:	0800ec57 	.word	0x0800ec57
 800e6d0:	0800ece7 	.word	0x0800ece7
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800e6d4:	4b57      	ldr	r3, [pc, #348]	; (800e834 <tcp_process+0x2b8>)
 800e6d6:	781b      	ldrb	r3, [r3, #0]
 800e6d8:	f003 0310 	and.w	r3, r3, #16
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	f000 80e4 	beq.w	800e8aa <tcp_process+0x32e>
 800e6e2:	4b54      	ldr	r3, [pc, #336]	; (800e834 <tcp_process+0x2b8>)
 800e6e4:	781b      	ldrb	r3, [r3, #0]
 800e6e6:	f003 0302 	and.w	r3, r3, #2
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	f000 80dd 	beq.w	800e8aa <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e6f4:	1c5a      	adds	r2, r3, #1
 800e6f6:	4b50      	ldr	r3, [pc, #320]	; (800e838 <tcp_process+0x2bc>)
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	429a      	cmp	r2, r3
 800e6fc:	f040 80d5 	bne.w	800e8aa <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800e700:	4b4e      	ldr	r3, [pc, #312]	; (800e83c <tcp_process+0x2c0>)
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	1c5a      	adds	r2, r3, #1
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800e712:	4b49      	ldr	r3, [pc, #292]	; (800e838 <tcp_process+0x2bc>)
 800e714:	681a      	ldr	r2, [r3, #0]
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800e71a:	4b4c      	ldr	r3, [pc, #304]	; (800e84c <tcp_process+0x2d0>)
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	89db      	ldrh	r3, [r3, #14]
 800e720:	b29a      	uxth	r2, r3
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800e734:	4b41      	ldr	r3, [pc, #260]	; (800e83c <tcp_process+0x2c0>)
 800e736:	681b      	ldr	r3, [r3, #0]
 800e738:	1e5a      	subs	r2, r3, #1
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	2204      	movs	r2, #4
 800e742:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	3304      	adds	r3, #4
 800e74c:	4618      	mov	r0, r3
 800e74e:	f004 ff6d 	bl	801362c <ip4_route>
 800e752:	4601      	mov	r1, r0
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	3304      	adds	r3, #4
 800e758:	461a      	mov	r2, r3
 800e75a:	4620      	mov	r0, r4
 800e75c:	f7ff f88e 	bl	800d87c <tcp_eff_send_mss_netif>
 800e760:	4603      	mov	r3, r0
 800e762:	461a      	mov	r2, r3
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e76c:	009a      	lsls	r2, r3, #2
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e772:	005b      	lsls	r3, r3, #1
 800e774:	f241 111c 	movw	r1, #4380	; 0x111c
 800e778:	428b      	cmp	r3, r1
 800e77a:	bf38      	it	cc
 800e77c:	460b      	movcc	r3, r1
 800e77e:	429a      	cmp	r2, r3
 800e780:	d204      	bcs.n	800e78c <tcp_process+0x210>
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e786:	009b      	lsls	r3, r3, #2
 800e788:	b29b      	uxth	r3, r3
 800e78a:	e00d      	b.n	800e7a8 <tcp_process+0x22c>
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e790:	005b      	lsls	r3, r3, #1
 800e792:	f241 121c 	movw	r2, #4380	; 0x111c
 800e796:	4293      	cmp	r3, r2
 800e798:	d904      	bls.n	800e7a4 <tcp_process+0x228>
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e79e:	005b      	lsls	r3, r3, #1
 800e7a0:	b29b      	uxth	r3, r3
 800e7a2:	e001      	b.n	800e7a8 <tcp_process+0x22c>
 800e7a4:	f241 131c 	movw	r3, #4380	; 0x111c
 800e7a8:	687a      	ldr	r2, [r7, #4]
 800e7aa:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d106      	bne.n	800e7c6 <tcp_process+0x24a>
 800e7b8:	4b1b      	ldr	r3, [pc, #108]	; (800e828 <tcp_process+0x2ac>)
 800e7ba:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800e7be:	4924      	ldr	r1, [pc, #144]	; (800e850 <tcp_process+0x2d4>)
 800e7c0:	481b      	ldr	r0, [pc, #108]	; (800e830 <tcp_process+0x2b4>)
 800e7c2:	f006 f97b 	bl	8014abc <iprintf>
        --pcb->snd_queuelen;
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e7cc:	3b01      	subs	r3, #1
 800e7ce:	b29a      	uxth	r2, r3
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e7da:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800e7dc:	69fb      	ldr	r3, [r7, #28]
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d111      	bne.n	800e806 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e7e6:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800e7e8:	69fb      	ldr	r3, [r7, #28]
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d106      	bne.n	800e7fc <tcp_process+0x280>
 800e7ee:	4b0e      	ldr	r3, [pc, #56]	; (800e828 <tcp_process+0x2ac>)
 800e7f0:	f44f 725d 	mov.w	r2, #884	; 0x374
 800e7f4:	4917      	ldr	r1, [pc, #92]	; (800e854 <tcp_process+0x2d8>)
 800e7f6:	480e      	ldr	r0, [pc, #56]	; (800e830 <tcp_process+0x2b4>)
 800e7f8:	f006 f960 	bl	8014abc <iprintf>
          pcb->unsent = rseg->next;
 800e7fc:	69fb      	ldr	r3, [r7, #28]
 800e7fe:	681a      	ldr	r2, [r3, #0]
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	66da      	str	r2, [r3, #108]	; 0x6c
 800e804:	e003      	b.n	800e80e <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 800e806:	69fb      	ldr	r3, [r7, #28]
 800e808:	681a      	ldr	r2, [r3, #0]
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800e80e:	69f8      	ldr	r0, [r7, #28]
 800e810:	f7fe fc49 	bl	800d0a6 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d11d      	bne.n	800e858 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e822:	861a      	strh	r2, [r3, #48]	; 0x30
 800e824:	e01f      	b.n	800e866 <tcp_process+0x2ea>
 800e826:	bf00      	nop
 800e828:	080174ac 	.word	0x080174ac
 800e82c:	080176e4 	.word	0x080176e4
 800e830:	080174f8 	.word	0x080174f8
 800e834:	24000584 	.word	0x24000584
 800e838:	2400057c 	.word	0x2400057c
 800e83c:	24000578 	.word	0x24000578
 800e840:	08017700 	.word	0x08017700
 800e844:	24000585 	.word	0x24000585
 800e848:	24003c80 	.word	0x24003c80
 800e84c:	24000568 	.word	0x24000568
 800e850:	08017720 	.word	0x08017720
 800e854:	08017738 	.word	0x08017738
        } else {
          pcb->rtime = 0;
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	2200      	movs	r2, #0
 800e85c:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	2200      	movs	r2, #0
 800e862:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d00a      	beq.n	800e886 <tcp_process+0x30a>
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e876:	687a      	ldr	r2, [r7, #4]
 800e878:	6910      	ldr	r0, [r2, #16]
 800e87a:	2200      	movs	r2, #0
 800e87c:	6879      	ldr	r1, [r7, #4]
 800e87e:	4798      	blx	r3
 800e880:	4603      	mov	r3, r0
 800e882:	76bb      	strb	r3, [r7, #26]
 800e884:	e001      	b.n	800e88a <tcp_process+0x30e>
 800e886:	2300      	movs	r3, #0
 800e888:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800e88a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e88e:	f113 0f0d 	cmn.w	r3, #13
 800e892:	d102      	bne.n	800e89a <tcp_process+0x31e>
          return ERR_ABRT;
 800e894:	f06f 030c 	mvn.w	r3, #12
 800e898:	e250      	b.n	800ed3c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	8b5b      	ldrh	r3, [r3, #26]
 800e89e:	f043 0302 	orr.w	r3, r3, #2
 800e8a2:	b29a      	uxth	r2, r3
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800e8a8:	e23a      	b.n	800ed20 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800e8aa:	4b9d      	ldr	r3, [pc, #628]	; (800eb20 <tcp_process+0x5a4>)
 800e8ac:	781b      	ldrb	r3, [r3, #0]
 800e8ae:	f003 0310 	and.w	r3, r3, #16
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	f000 8234 	beq.w	800ed20 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e8b8:	4b9a      	ldr	r3, [pc, #616]	; (800eb24 <tcp_process+0x5a8>)
 800e8ba:	6819      	ldr	r1, [r3, #0]
 800e8bc:	4b9a      	ldr	r3, [pc, #616]	; (800eb28 <tcp_process+0x5ac>)
 800e8be:	881b      	ldrh	r3, [r3, #0]
 800e8c0:	461a      	mov	r2, r3
 800e8c2:	4b9a      	ldr	r3, [pc, #616]	; (800eb2c <tcp_process+0x5b0>)
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e8c8:	4b99      	ldr	r3, [pc, #612]	; (800eb30 <tcp_process+0x5b4>)
 800e8ca:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e8cc:	885b      	ldrh	r3, [r3, #2]
 800e8ce:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e8d0:	4a97      	ldr	r2, [pc, #604]	; (800eb30 <tcp_process+0x5b4>)
 800e8d2:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e8d4:	8812      	ldrh	r2, [r2, #0]
 800e8d6:	b292      	uxth	r2, r2
 800e8d8:	9202      	str	r2, [sp, #8]
 800e8da:	9301      	str	r3, [sp, #4]
 800e8dc:	4b95      	ldr	r3, [pc, #596]	; (800eb34 <tcp_process+0x5b8>)
 800e8de:	9300      	str	r3, [sp, #0]
 800e8e0:	4b95      	ldr	r3, [pc, #596]	; (800eb38 <tcp_process+0x5bc>)
 800e8e2:	4602      	mov	r2, r0
 800e8e4:	6878      	ldr	r0, [r7, #4]
 800e8e6:	f003 f8db 	bl	8011aa0 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e8f0:	2b05      	cmp	r3, #5
 800e8f2:	f200 8215 	bhi.w	800ed20 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	2200      	movs	r2, #0
 800e8fa:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800e8fc:	6878      	ldr	r0, [r7, #4]
 800e8fe:	f002 fea5 	bl	801164c <tcp_rexmit_rto>
      break;
 800e902:	e20d      	b.n	800ed20 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800e904:	4b86      	ldr	r3, [pc, #536]	; (800eb20 <tcp_process+0x5a4>)
 800e906:	781b      	ldrb	r3, [r3, #0]
 800e908:	f003 0310 	and.w	r3, r3, #16
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	f000 80a1 	beq.w	800ea54 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e912:	4b84      	ldr	r3, [pc, #528]	; (800eb24 <tcp_process+0x5a8>)
 800e914:	681a      	ldr	r2, [r3, #0]
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e91a:	1ad3      	subs	r3, r2, r3
 800e91c:	3b01      	subs	r3, #1
 800e91e:	2b00      	cmp	r3, #0
 800e920:	db7e      	blt.n	800ea20 <tcp_process+0x4a4>
 800e922:	4b80      	ldr	r3, [pc, #512]	; (800eb24 <tcp_process+0x5a8>)
 800e924:	681a      	ldr	r2, [r3, #0]
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e92a:	1ad3      	subs	r3, r2, r3
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	dc77      	bgt.n	800ea20 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	2204      	movs	r2, #4
 800e934:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d102      	bne.n	800e944 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800e93e:	23fa      	movs	r3, #250	; 0xfa
 800e940:	76bb      	strb	r3, [r7, #26]
 800e942:	e01d      	b.n	800e980 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e948:	699b      	ldr	r3, [r3, #24]
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d106      	bne.n	800e95c <tcp_process+0x3e0>
 800e94e:	4b7b      	ldr	r3, [pc, #492]	; (800eb3c <tcp_process+0x5c0>)
 800e950:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800e954:	497a      	ldr	r1, [pc, #488]	; (800eb40 <tcp_process+0x5c4>)
 800e956:	487b      	ldr	r0, [pc, #492]	; (800eb44 <tcp_process+0x5c8>)
 800e958:	f006 f8b0 	bl	8014abc <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e960:	699b      	ldr	r3, [r3, #24]
 800e962:	2b00      	cmp	r3, #0
 800e964:	d00a      	beq.n	800e97c <tcp_process+0x400>
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e96a:	699b      	ldr	r3, [r3, #24]
 800e96c:	687a      	ldr	r2, [r7, #4]
 800e96e:	6910      	ldr	r0, [r2, #16]
 800e970:	2200      	movs	r2, #0
 800e972:	6879      	ldr	r1, [r7, #4]
 800e974:	4798      	blx	r3
 800e976:	4603      	mov	r3, r0
 800e978:	76bb      	strb	r3, [r7, #26]
 800e97a:	e001      	b.n	800e980 <tcp_process+0x404>
 800e97c:	23f0      	movs	r3, #240	; 0xf0
 800e97e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800e980:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e984:	2b00      	cmp	r3, #0
 800e986:	d00a      	beq.n	800e99e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800e988:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e98c:	f113 0f0d 	cmn.w	r3, #13
 800e990:	d002      	beq.n	800e998 <tcp_process+0x41c>
              tcp_abort(pcb);
 800e992:	6878      	ldr	r0, [r7, #4]
 800e994:	f7fd fce2 	bl	800c35c <tcp_abort>
            }
            return ERR_ABRT;
 800e998:	f06f 030c 	mvn.w	r3, #12
 800e99c:	e1ce      	b.n	800ed3c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800e99e:	6878      	ldr	r0, [r7, #4]
 800e9a0:	f000 fae0 	bl	800ef64 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800e9a4:	4b68      	ldr	r3, [pc, #416]	; (800eb48 <tcp_process+0x5cc>)
 800e9a6:	881b      	ldrh	r3, [r3, #0]
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d005      	beq.n	800e9b8 <tcp_process+0x43c>
            recv_acked--;
 800e9ac:	4b66      	ldr	r3, [pc, #408]	; (800eb48 <tcp_process+0x5cc>)
 800e9ae:	881b      	ldrh	r3, [r3, #0]
 800e9b0:	3b01      	subs	r3, #1
 800e9b2:	b29a      	uxth	r2, r3
 800e9b4:	4b64      	ldr	r3, [pc, #400]	; (800eb48 <tcp_process+0x5cc>)
 800e9b6:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e9bc:	009a      	lsls	r2, r3, #2
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e9c2:	005b      	lsls	r3, r3, #1
 800e9c4:	f241 111c 	movw	r1, #4380	; 0x111c
 800e9c8:	428b      	cmp	r3, r1
 800e9ca:	bf38      	it	cc
 800e9cc:	460b      	movcc	r3, r1
 800e9ce:	429a      	cmp	r2, r3
 800e9d0:	d204      	bcs.n	800e9dc <tcp_process+0x460>
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e9d6:	009b      	lsls	r3, r3, #2
 800e9d8:	b29b      	uxth	r3, r3
 800e9da:	e00d      	b.n	800e9f8 <tcp_process+0x47c>
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e9e0:	005b      	lsls	r3, r3, #1
 800e9e2:	f241 121c 	movw	r2, #4380	; 0x111c
 800e9e6:	4293      	cmp	r3, r2
 800e9e8:	d904      	bls.n	800e9f4 <tcp_process+0x478>
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e9ee:	005b      	lsls	r3, r3, #1
 800e9f0:	b29b      	uxth	r3, r3
 800e9f2:	e001      	b.n	800e9f8 <tcp_process+0x47c>
 800e9f4:	f241 131c 	movw	r3, #4380	; 0x111c
 800e9f8:	687a      	ldr	r2, [r7, #4]
 800e9fa:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800e9fe:	4b53      	ldr	r3, [pc, #332]	; (800eb4c <tcp_process+0x5d0>)
 800ea00:	781b      	ldrb	r3, [r3, #0]
 800ea02:	f003 0320 	and.w	r3, r3, #32
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d037      	beq.n	800ea7a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	8b5b      	ldrh	r3, [r3, #26]
 800ea0e:	f043 0302 	orr.w	r3, r3, #2
 800ea12:	b29a      	uxth	r2, r3
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	2207      	movs	r2, #7
 800ea1c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800ea1e:	e02c      	b.n	800ea7a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ea20:	4b40      	ldr	r3, [pc, #256]	; (800eb24 <tcp_process+0x5a8>)
 800ea22:	6819      	ldr	r1, [r3, #0]
 800ea24:	4b40      	ldr	r3, [pc, #256]	; (800eb28 <tcp_process+0x5ac>)
 800ea26:	881b      	ldrh	r3, [r3, #0]
 800ea28:	461a      	mov	r2, r3
 800ea2a:	4b40      	ldr	r3, [pc, #256]	; (800eb2c <tcp_process+0x5b0>)
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ea30:	4b3f      	ldr	r3, [pc, #252]	; (800eb30 <tcp_process+0x5b4>)
 800ea32:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ea34:	885b      	ldrh	r3, [r3, #2]
 800ea36:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ea38:	4a3d      	ldr	r2, [pc, #244]	; (800eb30 <tcp_process+0x5b4>)
 800ea3a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ea3c:	8812      	ldrh	r2, [r2, #0]
 800ea3e:	b292      	uxth	r2, r2
 800ea40:	9202      	str	r2, [sp, #8]
 800ea42:	9301      	str	r3, [sp, #4]
 800ea44:	4b3b      	ldr	r3, [pc, #236]	; (800eb34 <tcp_process+0x5b8>)
 800ea46:	9300      	str	r3, [sp, #0]
 800ea48:	4b3b      	ldr	r3, [pc, #236]	; (800eb38 <tcp_process+0x5bc>)
 800ea4a:	4602      	mov	r2, r0
 800ea4c:	6878      	ldr	r0, [r7, #4]
 800ea4e:	f003 f827 	bl	8011aa0 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800ea52:	e167      	b.n	800ed24 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800ea54:	4b32      	ldr	r3, [pc, #200]	; (800eb20 <tcp_process+0x5a4>)
 800ea56:	781b      	ldrb	r3, [r3, #0]
 800ea58:	f003 0302 	and.w	r3, r3, #2
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	f000 8161 	beq.w	800ed24 <tcp_process+0x7a8>
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea66:	1e5a      	subs	r2, r3, #1
 800ea68:	4b30      	ldr	r3, [pc, #192]	; (800eb2c <tcp_process+0x5b0>)
 800ea6a:	681b      	ldr	r3, [r3, #0]
 800ea6c:	429a      	cmp	r2, r3
 800ea6e:	f040 8159 	bne.w	800ed24 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800ea72:	6878      	ldr	r0, [r7, #4]
 800ea74:	f002 fe0c 	bl	8011690 <tcp_rexmit>
      break;
 800ea78:	e154      	b.n	800ed24 <tcp_process+0x7a8>
 800ea7a:	e153      	b.n	800ed24 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800ea7c:	6878      	ldr	r0, [r7, #4]
 800ea7e:	f000 fa71 	bl	800ef64 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800ea82:	4b32      	ldr	r3, [pc, #200]	; (800eb4c <tcp_process+0x5d0>)
 800ea84:	781b      	ldrb	r3, [r3, #0]
 800ea86:	f003 0320 	and.w	r3, r3, #32
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	f000 814c 	beq.w	800ed28 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	8b5b      	ldrh	r3, [r3, #26]
 800ea94:	f043 0302 	orr.w	r3, r3, #2
 800ea98:	b29a      	uxth	r2, r3
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	2207      	movs	r2, #7
 800eaa2:	751a      	strb	r2, [r3, #20]
      }
      break;
 800eaa4:	e140      	b.n	800ed28 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800eaa6:	6878      	ldr	r0, [r7, #4]
 800eaa8:	f000 fa5c 	bl	800ef64 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800eaac:	4b27      	ldr	r3, [pc, #156]	; (800eb4c <tcp_process+0x5d0>)
 800eaae:	781b      	ldrb	r3, [r3, #0]
 800eab0:	f003 0320 	and.w	r3, r3, #32
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d071      	beq.n	800eb9c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800eab8:	4b19      	ldr	r3, [pc, #100]	; (800eb20 <tcp_process+0x5a4>)
 800eaba:	781b      	ldrb	r3, [r3, #0]
 800eabc:	f003 0310 	and.w	r3, r3, #16
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d060      	beq.n	800eb86 <tcp_process+0x60a>
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800eac8:	4b16      	ldr	r3, [pc, #88]	; (800eb24 <tcp_process+0x5a8>)
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	429a      	cmp	r2, r3
 800eace:	d15a      	bne.n	800eb86 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	d156      	bne.n	800eb86 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	8b5b      	ldrh	r3, [r3, #26]
 800eadc:	f043 0302 	orr.w	r3, r3, #2
 800eae0:	b29a      	uxth	r2, r3
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800eae6:	6878      	ldr	r0, [r7, #4]
 800eae8:	f7fe fdbe 	bl	800d668 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800eaec:	4b18      	ldr	r3, [pc, #96]	; (800eb50 <tcp_process+0x5d4>)
 800eaee:	681b      	ldr	r3, [r3, #0]
 800eaf0:	687a      	ldr	r2, [r7, #4]
 800eaf2:	429a      	cmp	r2, r3
 800eaf4:	d105      	bne.n	800eb02 <tcp_process+0x586>
 800eaf6:	4b16      	ldr	r3, [pc, #88]	; (800eb50 <tcp_process+0x5d4>)
 800eaf8:	681b      	ldr	r3, [r3, #0]
 800eafa:	68db      	ldr	r3, [r3, #12]
 800eafc:	4a14      	ldr	r2, [pc, #80]	; (800eb50 <tcp_process+0x5d4>)
 800eafe:	6013      	str	r3, [r2, #0]
 800eb00:	e02e      	b.n	800eb60 <tcp_process+0x5e4>
 800eb02:	4b13      	ldr	r3, [pc, #76]	; (800eb50 <tcp_process+0x5d4>)
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	617b      	str	r3, [r7, #20]
 800eb08:	e027      	b.n	800eb5a <tcp_process+0x5de>
 800eb0a:	697b      	ldr	r3, [r7, #20]
 800eb0c:	68db      	ldr	r3, [r3, #12]
 800eb0e:	687a      	ldr	r2, [r7, #4]
 800eb10:	429a      	cmp	r2, r3
 800eb12:	d11f      	bne.n	800eb54 <tcp_process+0x5d8>
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	68da      	ldr	r2, [r3, #12]
 800eb18:	697b      	ldr	r3, [r7, #20]
 800eb1a:	60da      	str	r2, [r3, #12]
 800eb1c:	e020      	b.n	800eb60 <tcp_process+0x5e4>
 800eb1e:	bf00      	nop
 800eb20:	24000584 	.word	0x24000584
 800eb24:	2400057c 	.word	0x2400057c
 800eb28:	24000582 	.word	0x24000582
 800eb2c:	24000578 	.word	0x24000578
 800eb30:	24000568 	.word	0x24000568
 800eb34:	24000d9c 	.word	0x24000d9c
 800eb38:	24000da0 	.word	0x24000da0
 800eb3c:	080174ac 	.word	0x080174ac
 800eb40:	0801774c 	.word	0x0801774c
 800eb44:	080174f8 	.word	0x080174f8
 800eb48:	24000580 	.word	0x24000580
 800eb4c:	24000585 	.word	0x24000585
 800eb50:	24003c7c 	.word	0x24003c7c
 800eb54:	697b      	ldr	r3, [r7, #20]
 800eb56:	68db      	ldr	r3, [r3, #12]
 800eb58:	617b      	str	r3, [r7, #20]
 800eb5a:	697b      	ldr	r3, [r7, #20]
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d1d4      	bne.n	800eb0a <tcp_process+0x58e>
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	2200      	movs	r2, #0
 800eb64:	60da      	str	r2, [r3, #12]
 800eb66:	4b77      	ldr	r3, [pc, #476]	; (800ed44 <tcp_process+0x7c8>)
 800eb68:	2201      	movs	r2, #1
 800eb6a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	220a      	movs	r2, #10
 800eb70:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800eb72:	4b75      	ldr	r3, [pc, #468]	; (800ed48 <tcp_process+0x7cc>)
 800eb74:	681a      	ldr	r2, [r3, #0]
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	60da      	str	r2, [r3, #12]
 800eb7a:	4a73      	ldr	r2, [pc, #460]	; (800ed48 <tcp_process+0x7cc>)
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	6013      	str	r3, [r2, #0]
 800eb80:	f003 f950 	bl	8011e24 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800eb84:	e0d2      	b.n	800ed2c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	8b5b      	ldrh	r3, [r3, #26]
 800eb8a:	f043 0302 	orr.w	r3, r3, #2
 800eb8e:	b29a      	uxth	r2, r3
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	2208      	movs	r2, #8
 800eb98:	751a      	strb	r2, [r3, #20]
      break;
 800eb9a:	e0c7      	b.n	800ed2c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800eb9c:	4b6b      	ldr	r3, [pc, #428]	; (800ed4c <tcp_process+0x7d0>)
 800eb9e:	781b      	ldrb	r3, [r3, #0]
 800eba0:	f003 0310 	and.w	r3, r3, #16
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	f000 80c1 	beq.w	800ed2c <tcp_process+0x7b0>
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ebae:	4b68      	ldr	r3, [pc, #416]	; (800ed50 <tcp_process+0x7d4>)
 800ebb0:	681b      	ldr	r3, [r3, #0]
 800ebb2:	429a      	cmp	r2, r3
 800ebb4:	f040 80ba 	bne.w	800ed2c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	f040 80b5 	bne.w	800ed2c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	2206      	movs	r2, #6
 800ebc6:	751a      	strb	r2, [r3, #20]
      break;
 800ebc8:	e0b0      	b.n	800ed2c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800ebca:	6878      	ldr	r0, [r7, #4]
 800ebcc:	f000 f9ca 	bl	800ef64 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800ebd0:	4b60      	ldr	r3, [pc, #384]	; (800ed54 <tcp_process+0x7d8>)
 800ebd2:	781b      	ldrb	r3, [r3, #0]
 800ebd4:	f003 0320 	and.w	r3, r3, #32
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	f000 80a9 	beq.w	800ed30 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	8b5b      	ldrh	r3, [r3, #26]
 800ebe2:	f043 0302 	orr.w	r3, r3, #2
 800ebe6:	b29a      	uxth	r2, r3
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800ebec:	6878      	ldr	r0, [r7, #4]
 800ebee:	f7fe fd3b 	bl	800d668 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800ebf2:	4b59      	ldr	r3, [pc, #356]	; (800ed58 <tcp_process+0x7dc>)
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	687a      	ldr	r2, [r7, #4]
 800ebf8:	429a      	cmp	r2, r3
 800ebfa:	d105      	bne.n	800ec08 <tcp_process+0x68c>
 800ebfc:	4b56      	ldr	r3, [pc, #344]	; (800ed58 <tcp_process+0x7dc>)
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	68db      	ldr	r3, [r3, #12]
 800ec02:	4a55      	ldr	r2, [pc, #340]	; (800ed58 <tcp_process+0x7dc>)
 800ec04:	6013      	str	r3, [r2, #0]
 800ec06:	e013      	b.n	800ec30 <tcp_process+0x6b4>
 800ec08:	4b53      	ldr	r3, [pc, #332]	; (800ed58 <tcp_process+0x7dc>)
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	613b      	str	r3, [r7, #16]
 800ec0e:	e00c      	b.n	800ec2a <tcp_process+0x6ae>
 800ec10:	693b      	ldr	r3, [r7, #16]
 800ec12:	68db      	ldr	r3, [r3, #12]
 800ec14:	687a      	ldr	r2, [r7, #4]
 800ec16:	429a      	cmp	r2, r3
 800ec18:	d104      	bne.n	800ec24 <tcp_process+0x6a8>
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	68da      	ldr	r2, [r3, #12]
 800ec1e:	693b      	ldr	r3, [r7, #16]
 800ec20:	60da      	str	r2, [r3, #12]
 800ec22:	e005      	b.n	800ec30 <tcp_process+0x6b4>
 800ec24:	693b      	ldr	r3, [r7, #16]
 800ec26:	68db      	ldr	r3, [r3, #12]
 800ec28:	613b      	str	r3, [r7, #16]
 800ec2a:	693b      	ldr	r3, [r7, #16]
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d1ef      	bne.n	800ec10 <tcp_process+0x694>
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	2200      	movs	r2, #0
 800ec34:	60da      	str	r2, [r3, #12]
 800ec36:	4b43      	ldr	r3, [pc, #268]	; (800ed44 <tcp_process+0x7c8>)
 800ec38:	2201      	movs	r2, #1
 800ec3a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	220a      	movs	r2, #10
 800ec40:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800ec42:	4b41      	ldr	r3, [pc, #260]	; (800ed48 <tcp_process+0x7cc>)
 800ec44:	681a      	ldr	r2, [r3, #0]
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	60da      	str	r2, [r3, #12]
 800ec4a:	4a3f      	ldr	r2, [pc, #252]	; (800ed48 <tcp_process+0x7cc>)
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	6013      	str	r3, [r2, #0]
 800ec50:	f003 f8e8 	bl	8011e24 <tcp_timer_needed>
      }
      break;
 800ec54:	e06c      	b.n	800ed30 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800ec56:	6878      	ldr	r0, [r7, #4]
 800ec58:	f000 f984 	bl	800ef64 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800ec5c:	4b3b      	ldr	r3, [pc, #236]	; (800ed4c <tcp_process+0x7d0>)
 800ec5e:	781b      	ldrb	r3, [r3, #0]
 800ec60:	f003 0310 	and.w	r3, r3, #16
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d065      	beq.n	800ed34 <tcp_process+0x7b8>
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ec6c:	4b38      	ldr	r3, [pc, #224]	; (800ed50 <tcp_process+0x7d4>)
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	429a      	cmp	r2, r3
 800ec72:	d15f      	bne.n	800ed34 <tcp_process+0x7b8>
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d15b      	bne.n	800ed34 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800ec7c:	6878      	ldr	r0, [r7, #4]
 800ec7e:	f7fe fcf3 	bl	800d668 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800ec82:	4b35      	ldr	r3, [pc, #212]	; (800ed58 <tcp_process+0x7dc>)
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	687a      	ldr	r2, [r7, #4]
 800ec88:	429a      	cmp	r2, r3
 800ec8a:	d105      	bne.n	800ec98 <tcp_process+0x71c>
 800ec8c:	4b32      	ldr	r3, [pc, #200]	; (800ed58 <tcp_process+0x7dc>)
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	68db      	ldr	r3, [r3, #12]
 800ec92:	4a31      	ldr	r2, [pc, #196]	; (800ed58 <tcp_process+0x7dc>)
 800ec94:	6013      	str	r3, [r2, #0]
 800ec96:	e013      	b.n	800ecc0 <tcp_process+0x744>
 800ec98:	4b2f      	ldr	r3, [pc, #188]	; (800ed58 <tcp_process+0x7dc>)
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	60fb      	str	r3, [r7, #12]
 800ec9e:	e00c      	b.n	800ecba <tcp_process+0x73e>
 800eca0:	68fb      	ldr	r3, [r7, #12]
 800eca2:	68db      	ldr	r3, [r3, #12]
 800eca4:	687a      	ldr	r2, [r7, #4]
 800eca6:	429a      	cmp	r2, r3
 800eca8:	d104      	bne.n	800ecb4 <tcp_process+0x738>
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	68da      	ldr	r2, [r3, #12]
 800ecae:	68fb      	ldr	r3, [r7, #12]
 800ecb0:	60da      	str	r2, [r3, #12]
 800ecb2:	e005      	b.n	800ecc0 <tcp_process+0x744>
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	68db      	ldr	r3, [r3, #12]
 800ecb8:	60fb      	str	r3, [r7, #12]
 800ecba:	68fb      	ldr	r3, [r7, #12]
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d1ef      	bne.n	800eca0 <tcp_process+0x724>
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	2200      	movs	r2, #0
 800ecc4:	60da      	str	r2, [r3, #12]
 800ecc6:	4b1f      	ldr	r3, [pc, #124]	; (800ed44 <tcp_process+0x7c8>)
 800ecc8:	2201      	movs	r2, #1
 800ecca:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	220a      	movs	r2, #10
 800ecd0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800ecd2:	4b1d      	ldr	r3, [pc, #116]	; (800ed48 <tcp_process+0x7cc>)
 800ecd4:	681a      	ldr	r2, [r3, #0]
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	60da      	str	r2, [r3, #12]
 800ecda:	4a1b      	ldr	r2, [pc, #108]	; (800ed48 <tcp_process+0x7cc>)
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	6013      	str	r3, [r2, #0]
 800ece0:	f003 f8a0 	bl	8011e24 <tcp_timer_needed>
      }
      break;
 800ece4:	e026      	b.n	800ed34 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800ece6:	6878      	ldr	r0, [r7, #4]
 800ece8:	f000 f93c 	bl	800ef64 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800ecec:	4b17      	ldr	r3, [pc, #92]	; (800ed4c <tcp_process+0x7d0>)
 800ecee:	781b      	ldrb	r3, [r3, #0]
 800ecf0:	f003 0310 	and.w	r3, r3, #16
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d01f      	beq.n	800ed38 <tcp_process+0x7bc>
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ecfc:	4b14      	ldr	r3, [pc, #80]	; (800ed50 <tcp_process+0x7d4>)
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	429a      	cmp	r2, r3
 800ed02:	d119      	bne.n	800ed38 <tcp_process+0x7bc>
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d115      	bne.n	800ed38 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800ed0c:	4b11      	ldr	r3, [pc, #68]	; (800ed54 <tcp_process+0x7d8>)
 800ed0e:	781b      	ldrb	r3, [r3, #0]
 800ed10:	f043 0310 	orr.w	r3, r3, #16
 800ed14:	b2da      	uxtb	r2, r3
 800ed16:	4b0f      	ldr	r3, [pc, #60]	; (800ed54 <tcp_process+0x7d8>)
 800ed18:	701a      	strb	r2, [r3, #0]
      }
      break;
 800ed1a:	e00d      	b.n	800ed38 <tcp_process+0x7bc>
    default:
      break;
 800ed1c:	bf00      	nop
 800ed1e:	e00c      	b.n	800ed3a <tcp_process+0x7be>
      break;
 800ed20:	bf00      	nop
 800ed22:	e00a      	b.n	800ed3a <tcp_process+0x7be>
      break;
 800ed24:	bf00      	nop
 800ed26:	e008      	b.n	800ed3a <tcp_process+0x7be>
      break;
 800ed28:	bf00      	nop
 800ed2a:	e006      	b.n	800ed3a <tcp_process+0x7be>
      break;
 800ed2c:	bf00      	nop
 800ed2e:	e004      	b.n	800ed3a <tcp_process+0x7be>
      break;
 800ed30:	bf00      	nop
 800ed32:	e002      	b.n	800ed3a <tcp_process+0x7be>
      break;
 800ed34:	bf00      	nop
 800ed36:	e000      	b.n	800ed3a <tcp_process+0x7be>
      break;
 800ed38:	bf00      	nop
  }
  return ERR_OK;
 800ed3a:	2300      	movs	r3, #0
}
 800ed3c:	4618      	mov	r0, r3
 800ed3e:	3724      	adds	r7, #36	; 0x24
 800ed40:	46bd      	mov	sp, r7
 800ed42:	bd90      	pop	{r4, r7, pc}
 800ed44:	24003c78 	.word	0x24003c78
 800ed48:	24003c8c 	.word	0x24003c8c
 800ed4c:	24000584 	.word	0x24000584
 800ed50:	2400057c 	.word	0x2400057c
 800ed54:	24000585 	.word	0x24000585
 800ed58:	24003c7c 	.word	0x24003c7c

0800ed5c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800ed5c:	b590      	push	{r4, r7, lr}
 800ed5e:	b085      	sub	sp, #20
 800ed60:	af00      	add	r7, sp, #0
 800ed62:	6078      	str	r0, [r7, #4]
 800ed64:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d106      	bne.n	800ed7a <tcp_oos_insert_segment+0x1e>
 800ed6c:	4b3b      	ldr	r3, [pc, #236]	; (800ee5c <tcp_oos_insert_segment+0x100>)
 800ed6e:	f240 421f 	movw	r2, #1055	; 0x41f
 800ed72:	493b      	ldr	r1, [pc, #236]	; (800ee60 <tcp_oos_insert_segment+0x104>)
 800ed74:	483b      	ldr	r0, [pc, #236]	; (800ee64 <tcp_oos_insert_segment+0x108>)
 800ed76:	f005 fea1 	bl	8014abc <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	68db      	ldr	r3, [r3, #12]
 800ed7e:	899b      	ldrh	r3, [r3, #12]
 800ed80:	b29b      	uxth	r3, r3
 800ed82:	4618      	mov	r0, r3
 800ed84:	f7fb f8c2 	bl	8009f0c <lwip_htons>
 800ed88:	4603      	mov	r3, r0
 800ed8a:	b2db      	uxtb	r3, r3
 800ed8c:	f003 0301 	and.w	r3, r3, #1
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	d028      	beq.n	800ede6 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800ed94:	6838      	ldr	r0, [r7, #0]
 800ed96:	f7fe f971 	bl	800d07c <tcp_segs_free>
    next = NULL;
 800ed9a:	2300      	movs	r3, #0
 800ed9c:	603b      	str	r3, [r7, #0]
 800ed9e:	e056      	b.n	800ee4e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800eda0:	683b      	ldr	r3, [r7, #0]
 800eda2:	68db      	ldr	r3, [r3, #12]
 800eda4:	899b      	ldrh	r3, [r3, #12]
 800eda6:	b29b      	uxth	r3, r3
 800eda8:	4618      	mov	r0, r3
 800edaa:	f7fb f8af 	bl	8009f0c <lwip_htons>
 800edae:	4603      	mov	r3, r0
 800edb0:	b2db      	uxtb	r3, r3
 800edb2:	f003 0301 	and.w	r3, r3, #1
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	d00d      	beq.n	800edd6 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	68db      	ldr	r3, [r3, #12]
 800edbe:	899b      	ldrh	r3, [r3, #12]
 800edc0:	b29c      	uxth	r4, r3
 800edc2:	2001      	movs	r0, #1
 800edc4:	f7fb f8a2 	bl	8009f0c <lwip_htons>
 800edc8:	4603      	mov	r3, r0
 800edca:	461a      	mov	r2, r3
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	68db      	ldr	r3, [r3, #12]
 800edd0:	4322      	orrs	r2, r4
 800edd2:	b292      	uxth	r2, r2
 800edd4:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800edd6:	683b      	ldr	r3, [r7, #0]
 800edd8:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800edda:	683b      	ldr	r3, [r7, #0]
 800eddc:	681b      	ldr	r3, [r3, #0]
 800edde:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800ede0:	68f8      	ldr	r0, [r7, #12]
 800ede2:	f7fe f960 	bl	800d0a6 <tcp_seg_free>
    while (next &&
 800ede6:	683b      	ldr	r3, [r7, #0]
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d00e      	beq.n	800ee0a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	891b      	ldrh	r3, [r3, #8]
 800edf0:	461a      	mov	r2, r3
 800edf2:	4b1d      	ldr	r3, [pc, #116]	; (800ee68 <tcp_oos_insert_segment+0x10c>)
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	441a      	add	r2, r3
 800edf8:	683b      	ldr	r3, [r7, #0]
 800edfa:	68db      	ldr	r3, [r3, #12]
 800edfc:	685b      	ldr	r3, [r3, #4]
 800edfe:	6839      	ldr	r1, [r7, #0]
 800ee00:	8909      	ldrh	r1, [r1, #8]
 800ee02:	440b      	add	r3, r1
 800ee04:	1ad3      	subs	r3, r2, r3
    while (next &&
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	daca      	bge.n	800eda0 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800ee0a:	683b      	ldr	r3, [r7, #0]
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d01e      	beq.n	800ee4e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	891b      	ldrh	r3, [r3, #8]
 800ee14:	461a      	mov	r2, r3
 800ee16:	4b14      	ldr	r3, [pc, #80]	; (800ee68 <tcp_oos_insert_segment+0x10c>)
 800ee18:	681b      	ldr	r3, [r3, #0]
 800ee1a:	441a      	add	r2, r3
 800ee1c:	683b      	ldr	r3, [r7, #0]
 800ee1e:	68db      	ldr	r3, [r3, #12]
 800ee20:	685b      	ldr	r3, [r3, #4]
 800ee22:	1ad3      	subs	r3, r2, r3
    if (next &&
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	dd12      	ble.n	800ee4e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800ee28:	683b      	ldr	r3, [r7, #0]
 800ee2a:	68db      	ldr	r3, [r3, #12]
 800ee2c:	685b      	ldr	r3, [r3, #4]
 800ee2e:	b29a      	uxth	r2, r3
 800ee30:	4b0d      	ldr	r3, [pc, #52]	; (800ee68 <tcp_oos_insert_segment+0x10c>)
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	b29b      	uxth	r3, r3
 800ee36:	1ad3      	subs	r3, r2, r3
 800ee38:	b29a      	uxth	r2, r3
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	685a      	ldr	r2, [r3, #4]
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	891b      	ldrh	r3, [r3, #8]
 800ee46:	4619      	mov	r1, r3
 800ee48:	4610      	mov	r0, r2
 800ee4a:	f7fc fb69 	bl	800b520 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	683a      	ldr	r2, [r7, #0]
 800ee52:	601a      	str	r2, [r3, #0]
}
 800ee54:	bf00      	nop
 800ee56:	3714      	adds	r7, #20
 800ee58:	46bd      	mov	sp, r7
 800ee5a:	bd90      	pop	{r4, r7, pc}
 800ee5c:	080174ac 	.word	0x080174ac
 800ee60:	0801776c 	.word	0x0801776c
 800ee64:	080174f8 	.word	0x080174f8
 800ee68:	24000578 	.word	0x24000578

0800ee6c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800ee6c:	b5b0      	push	{r4, r5, r7, lr}
 800ee6e:	b086      	sub	sp, #24
 800ee70:	af00      	add	r7, sp, #0
 800ee72:	60f8      	str	r0, [r7, #12]
 800ee74:	60b9      	str	r1, [r7, #8]
 800ee76:	607a      	str	r2, [r7, #4]
 800ee78:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800ee7a:	e03e      	b.n	800eefa <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800ee7c:	68bb      	ldr	r3, [r7, #8]
 800ee7e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800ee80:	68bb      	ldr	r3, [r7, #8]
 800ee82:	681b      	ldr	r3, [r3, #0]
 800ee84:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800ee86:	697b      	ldr	r3, [r7, #20]
 800ee88:	685b      	ldr	r3, [r3, #4]
 800ee8a:	4618      	mov	r0, r3
 800ee8c:	f7fc fd56 	bl	800b93c <pbuf_clen>
 800ee90:	4603      	mov	r3, r0
 800ee92:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800ee94:	68fb      	ldr	r3, [r7, #12]
 800ee96:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ee9a:	8a7a      	ldrh	r2, [r7, #18]
 800ee9c:	429a      	cmp	r2, r3
 800ee9e:	d906      	bls.n	800eeae <tcp_free_acked_segments+0x42>
 800eea0:	4b2a      	ldr	r3, [pc, #168]	; (800ef4c <tcp_free_acked_segments+0xe0>)
 800eea2:	f240 4257 	movw	r2, #1111	; 0x457
 800eea6:	492a      	ldr	r1, [pc, #168]	; (800ef50 <tcp_free_acked_segments+0xe4>)
 800eea8:	482a      	ldr	r0, [pc, #168]	; (800ef54 <tcp_free_acked_segments+0xe8>)
 800eeaa:	f005 fe07 	bl	8014abc <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800eeae:	68fb      	ldr	r3, [r7, #12]
 800eeb0:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800eeb4:	8a7b      	ldrh	r3, [r7, #18]
 800eeb6:	1ad3      	subs	r3, r2, r3
 800eeb8:	b29a      	uxth	r2, r3
 800eeba:	68fb      	ldr	r3, [r7, #12]
 800eebc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800eec0:	697b      	ldr	r3, [r7, #20]
 800eec2:	891a      	ldrh	r2, [r3, #8]
 800eec4:	4b24      	ldr	r3, [pc, #144]	; (800ef58 <tcp_free_acked_segments+0xec>)
 800eec6:	881b      	ldrh	r3, [r3, #0]
 800eec8:	4413      	add	r3, r2
 800eeca:	b29a      	uxth	r2, r3
 800eecc:	4b22      	ldr	r3, [pc, #136]	; (800ef58 <tcp_free_acked_segments+0xec>)
 800eece:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800eed0:	6978      	ldr	r0, [r7, #20]
 800eed2:	f7fe f8e8 	bl	800d0a6 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800eed6:	68fb      	ldr	r3, [r7, #12]
 800eed8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d00c      	beq.n	800eefa <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800eee0:	68bb      	ldr	r3, [r7, #8]
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d109      	bne.n	800eefa <tcp_free_acked_segments+0x8e>
 800eee6:	683b      	ldr	r3, [r7, #0]
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	d106      	bne.n	800eefa <tcp_free_acked_segments+0x8e>
 800eeec:	4b17      	ldr	r3, [pc, #92]	; (800ef4c <tcp_free_acked_segments+0xe0>)
 800eeee:	f240 4261 	movw	r2, #1121	; 0x461
 800eef2:	491a      	ldr	r1, [pc, #104]	; (800ef5c <tcp_free_acked_segments+0xf0>)
 800eef4:	4817      	ldr	r0, [pc, #92]	; (800ef54 <tcp_free_acked_segments+0xe8>)
 800eef6:	f005 fde1 	bl	8014abc <iprintf>
  while (seg_list != NULL &&
 800eefa:	68bb      	ldr	r3, [r7, #8]
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	d020      	beq.n	800ef42 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800ef00:	68bb      	ldr	r3, [r7, #8]
 800ef02:	68db      	ldr	r3, [r3, #12]
 800ef04:	685b      	ldr	r3, [r3, #4]
 800ef06:	4618      	mov	r0, r3
 800ef08:	f7fb f815 	bl	8009f36 <lwip_htonl>
 800ef0c:	4604      	mov	r4, r0
 800ef0e:	68bb      	ldr	r3, [r7, #8]
 800ef10:	891b      	ldrh	r3, [r3, #8]
 800ef12:	461d      	mov	r5, r3
 800ef14:	68bb      	ldr	r3, [r7, #8]
 800ef16:	68db      	ldr	r3, [r3, #12]
 800ef18:	899b      	ldrh	r3, [r3, #12]
 800ef1a:	b29b      	uxth	r3, r3
 800ef1c:	4618      	mov	r0, r3
 800ef1e:	f7fa fff5 	bl	8009f0c <lwip_htons>
 800ef22:	4603      	mov	r3, r0
 800ef24:	b2db      	uxtb	r3, r3
 800ef26:	f003 0303 	and.w	r3, r3, #3
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d001      	beq.n	800ef32 <tcp_free_acked_segments+0xc6>
 800ef2e:	2301      	movs	r3, #1
 800ef30:	e000      	b.n	800ef34 <tcp_free_acked_segments+0xc8>
 800ef32:	2300      	movs	r3, #0
 800ef34:	442b      	add	r3, r5
 800ef36:	18e2      	adds	r2, r4, r3
 800ef38:	4b09      	ldr	r3, [pc, #36]	; (800ef60 <tcp_free_acked_segments+0xf4>)
 800ef3a:	681b      	ldr	r3, [r3, #0]
 800ef3c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	dd9c      	ble.n	800ee7c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800ef42:	68bb      	ldr	r3, [r7, #8]
}
 800ef44:	4618      	mov	r0, r3
 800ef46:	3718      	adds	r7, #24
 800ef48:	46bd      	mov	sp, r7
 800ef4a:	bdb0      	pop	{r4, r5, r7, pc}
 800ef4c:	080174ac 	.word	0x080174ac
 800ef50:	08017794 	.word	0x08017794
 800ef54:	080174f8 	.word	0x080174f8
 800ef58:	24000580 	.word	0x24000580
 800ef5c:	080177bc 	.word	0x080177bc
 800ef60:	2400057c 	.word	0x2400057c

0800ef64 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800ef64:	b5b0      	push	{r4, r5, r7, lr}
 800ef66:	b094      	sub	sp, #80	; 0x50
 800ef68:	af00      	add	r7, sp, #0
 800ef6a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800ef6c:	2300      	movs	r3, #0
 800ef6e:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d106      	bne.n	800ef84 <tcp_receive+0x20>
 800ef76:	4ba6      	ldr	r3, [pc, #664]	; (800f210 <tcp_receive+0x2ac>)
 800ef78:	f240 427b 	movw	r2, #1147	; 0x47b
 800ef7c:	49a5      	ldr	r1, [pc, #660]	; (800f214 <tcp_receive+0x2b0>)
 800ef7e:	48a6      	ldr	r0, [pc, #664]	; (800f218 <tcp_receive+0x2b4>)
 800ef80:	f005 fd9c 	bl	8014abc <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	7d1b      	ldrb	r3, [r3, #20]
 800ef88:	2b03      	cmp	r3, #3
 800ef8a:	d806      	bhi.n	800ef9a <tcp_receive+0x36>
 800ef8c:	4ba0      	ldr	r3, [pc, #640]	; (800f210 <tcp_receive+0x2ac>)
 800ef8e:	f240 427c 	movw	r2, #1148	; 0x47c
 800ef92:	49a2      	ldr	r1, [pc, #648]	; (800f21c <tcp_receive+0x2b8>)
 800ef94:	48a0      	ldr	r0, [pc, #640]	; (800f218 <tcp_receive+0x2b4>)
 800ef96:	f005 fd91 	bl	8014abc <iprintf>

  if (flags & TCP_ACK) {
 800ef9a:	4ba1      	ldr	r3, [pc, #644]	; (800f220 <tcp_receive+0x2bc>)
 800ef9c:	781b      	ldrb	r3, [r3, #0]
 800ef9e:	f003 0310 	and.w	r3, r3, #16
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	f000 8263 	beq.w	800f46e <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800efae:	461a      	mov	r2, r3
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800efb4:	4413      	add	r3, r2
 800efb6:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800efbc:	4b99      	ldr	r3, [pc, #612]	; (800f224 <tcp_receive+0x2c0>)
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	1ad3      	subs	r3, r2, r3
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	db1b      	blt.n	800effe <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800efca:	4b96      	ldr	r3, [pc, #600]	; (800f224 <tcp_receive+0x2c0>)
 800efcc:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800efce:	429a      	cmp	r2, r3
 800efd0:	d106      	bne.n	800efe0 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800efd6:	4b94      	ldr	r3, [pc, #592]	; (800f228 <tcp_receive+0x2c4>)
 800efd8:	681b      	ldr	r3, [r3, #0]
 800efda:	1ad3      	subs	r3, r2, r3
 800efdc:	2b00      	cmp	r3, #0
 800efde:	db0e      	blt.n	800effe <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800efe4:	4b90      	ldr	r3, [pc, #576]	; (800f228 <tcp_receive+0x2c4>)
 800efe6:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800efe8:	429a      	cmp	r2, r3
 800efea:	d125      	bne.n	800f038 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800efec:	4b8f      	ldr	r3, [pc, #572]	; (800f22c <tcp_receive+0x2c8>)
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	89db      	ldrh	r3, [r3, #14]
 800eff2:	b29a      	uxth	r2, r3
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800effa:	429a      	cmp	r2, r3
 800effc:	d91c      	bls.n	800f038 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800effe:	4b8b      	ldr	r3, [pc, #556]	; (800f22c <tcp_receive+0x2c8>)
 800f000:	681b      	ldr	r3, [r3, #0]
 800f002:	89db      	ldrh	r3, [r3, #14]
 800f004:	b29a      	uxth	r2, r3
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f018:	429a      	cmp	r2, r3
 800f01a:	d205      	bcs.n	800f028 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800f028:	4b7e      	ldr	r3, [pc, #504]	; (800f224 <tcp_receive+0x2c0>)
 800f02a:	681a      	ldr	r2, [r3, #0]
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800f030:	4b7d      	ldr	r3, [pc, #500]	; (800f228 <tcp_receive+0x2c4>)
 800f032:	681a      	ldr	r2, [r3, #0]
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800f038:	4b7b      	ldr	r3, [pc, #492]	; (800f228 <tcp_receive+0x2c4>)
 800f03a:	681a      	ldr	r2, [r3, #0]
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f040:	1ad3      	subs	r3, r2, r3
 800f042:	2b00      	cmp	r3, #0
 800f044:	dc58      	bgt.n	800f0f8 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800f046:	4b7a      	ldr	r3, [pc, #488]	; (800f230 <tcp_receive+0x2cc>)
 800f048:	881b      	ldrh	r3, [r3, #0]
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d14b      	bne.n	800f0e6 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f052:	687a      	ldr	r2, [r7, #4]
 800f054:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800f058:	4413      	add	r3, r2
 800f05a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f05c:	429a      	cmp	r2, r3
 800f05e:	d142      	bne.n	800f0e6 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f066:	2b00      	cmp	r3, #0
 800f068:	db3d      	blt.n	800f0e6 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f06e:	4b6e      	ldr	r3, [pc, #440]	; (800f228 <tcp_receive+0x2c4>)
 800f070:	681b      	ldr	r3, [r3, #0]
 800f072:	429a      	cmp	r2, r3
 800f074:	d137      	bne.n	800f0e6 <tcp_receive+0x182>
              found_dupack = 1;
 800f076:	2301      	movs	r3, #1
 800f078:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f080:	2bff      	cmp	r3, #255	; 0xff
 800f082:	d007      	beq.n	800f094 <tcp_receive+0x130>
                ++pcb->dupacks;
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f08a:	3301      	adds	r3, #1
 800f08c:	b2da      	uxtb	r2, r3
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f09a:	2b03      	cmp	r3, #3
 800f09c:	d91b      	bls.n	800f0d6 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f0a8:	4413      	add	r3, r2
 800f0aa:	b29a      	uxth	r2, r3
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f0b2:	429a      	cmp	r2, r3
 800f0b4:	d30a      	bcc.n	800f0cc <tcp_receive+0x168>
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f0c0:	4413      	add	r3, r2
 800f0c2:	b29a      	uxth	r2, r3
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f0ca:	e004      	b.n	800f0d6 <tcp_receive+0x172>
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f0d2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f0dc:	2b02      	cmp	r3, #2
 800f0de:	d902      	bls.n	800f0e6 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800f0e0:	6878      	ldr	r0, [r7, #4]
 800f0e2:	f002 fb41 	bl	8011768 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800f0e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	f040 8160 	bne.w	800f3ae <tcp_receive+0x44a>
        pcb->dupacks = 0;
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	2200      	movs	r2, #0
 800f0f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f0f6:	e15a      	b.n	800f3ae <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f0f8:	4b4b      	ldr	r3, [pc, #300]	; (800f228 <tcp_receive+0x2c4>)
 800f0fa:	681a      	ldr	r2, [r3, #0]
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f100:	1ad3      	subs	r3, r2, r3
 800f102:	3b01      	subs	r3, #1
 800f104:	2b00      	cmp	r3, #0
 800f106:	f2c0 814d 	blt.w	800f3a4 <tcp_receive+0x440>
 800f10a:	4b47      	ldr	r3, [pc, #284]	; (800f228 <tcp_receive+0x2c4>)
 800f10c:	681a      	ldr	r2, [r3, #0]
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f112:	1ad3      	subs	r3, r2, r3
 800f114:	2b00      	cmp	r3, #0
 800f116:	f300 8145 	bgt.w	800f3a4 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	8b5b      	ldrh	r3, [r3, #26]
 800f11e:	f003 0304 	and.w	r3, r3, #4
 800f122:	2b00      	cmp	r3, #0
 800f124:	d010      	beq.n	800f148 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	8b5b      	ldrh	r3, [r3, #26]
 800f12a:	f023 0304 	bic.w	r3, r3, #4
 800f12e:	b29a      	uxth	r2, r3
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	2200      	movs	r2, #0
 800f144:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	2200      	movs	r2, #0
 800f14c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f156:	10db      	asrs	r3, r3, #3
 800f158:	b21b      	sxth	r3, r3
 800f15a:	b29a      	uxth	r2, r3
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f162:	b29b      	uxth	r3, r3
 800f164:	4413      	add	r3, r2
 800f166:	b29b      	uxth	r3, r3
 800f168:	b21a      	sxth	r2, r3
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800f170:	4b2d      	ldr	r3, [pc, #180]	; (800f228 <tcp_receive+0x2c4>)
 800f172:	681b      	ldr	r3, [r3, #0]
 800f174:	b29a      	uxth	r2, r3
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f17a:	b29b      	uxth	r3, r3
 800f17c:	1ad3      	subs	r3, r2, r3
 800f17e:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	2200      	movs	r2, #0
 800f184:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800f188:	4b27      	ldr	r3, [pc, #156]	; (800f228 <tcp_receive+0x2c4>)
 800f18a:	681a      	ldr	r2, [r3, #0]
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	7d1b      	ldrb	r3, [r3, #20]
 800f194:	2b03      	cmp	r3, #3
 800f196:	f240 8096 	bls.w	800f2c6 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800f1a6:	429a      	cmp	r2, r3
 800f1a8:	d244      	bcs.n	800f234 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	8b5b      	ldrh	r3, [r3, #26]
 800f1ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d001      	beq.n	800f1ba <tcp_receive+0x256>
 800f1b6:	2301      	movs	r3, #1
 800f1b8:	e000      	b.n	800f1bc <tcp_receive+0x258>
 800f1ba:	2302      	movs	r3, #2
 800f1bc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800f1c0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800f1c4:	b29a      	uxth	r2, r3
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f1ca:	fb12 f303 	smulbb	r3, r2, r3
 800f1ce:	b29b      	uxth	r3, r3
 800f1d0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f1d2:	4293      	cmp	r3, r2
 800f1d4:	bf28      	it	cs
 800f1d6:	4613      	movcs	r3, r2
 800f1d8:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f1e0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f1e2:	4413      	add	r3, r2
 800f1e4:	b29a      	uxth	r2, r3
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f1ec:	429a      	cmp	r2, r3
 800f1ee:	d309      	bcc.n	800f204 <tcp_receive+0x2a0>
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f1f6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f1f8:	4413      	add	r3, r2
 800f1fa:	b29a      	uxth	r2, r3
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f202:	e060      	b.n	800f2c6 <tcp_receive+0x362>
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f20a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f20e:	e05a      	b.n	800f2c6 <tcp_receive+0x362>
 800f210:	080174ac 	.word	0x080174ac
 800f214:	080177dc 	.word	0x080177dc
 800f218:	080174f8 	.word	0x080174f8
 800f21c:	080177f8 	.word	0x080177f8
 800f220:	24000584 	.word	0x24000584
 800f224:	24000578 	.word	0x24000578
 800f228:	2400057c 	.word	0x2400057c
 800f22c:	24000568 	.word	0x24000568
 800f230:	24000582 	.word	0x24000582
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f23a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f23c:	4413      	add	r3, r2
 800f23e:	b29a      	uxth	r2, r3
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f246:	429a      	cmp	r2, r3
 800f248:	d309      	bcc.n	800f25e <tcp_receive+0x2fa>
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f250:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f252:	4413      	add	r3, r2
 800f254:	b29a      	uxth	r2, r3
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f25c:	e004      	b.n	800f268 <tcp_receive+0x304>
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f264:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f274:	429a      	cmp	r2, r3
 800f276:	d326      	bcc.n	800f2c6 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f284:	1ad3      	subs	r3, r2, r3
 800f286:	b29a      	uxth	r2, r3
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f298:	4413      	add	r3, r2
 800f29a:	b29a      	uxth	r2, r3
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f2a2:	429a      	cmp	r2, r3
 800f2a4:	d30a      	bcc.n	800f2bc <tcp_receive+0x358>
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f2b0:	4413      	add	r3, r2
 800f2b2:	b29a      	uxth	r2, r3
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f2ba:	e004      	b.n	800f2c6 <tcp_receive+0x362>
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f2c2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f2ce:	4a98      	ldr	r2, [pc, #608]	; (800f530 <tcp_receive+0x5cc>)
 800f2d0:	6878      	ldr	r0, [r7, #4]
 800f2d2:	f7ff fdcb 	bl	800ee6c <tcp_free_acked_segments>
 800f2d6:	4602      	mov	r2, r0
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f2e4:	4a93      	ldr	r2, [pc, #588]	; (800f534 <tcp_receive+0x5d0>)
 800f2e6:	6878      	ldr	r0, [r7, #4]
 800f2e8:	f7ff fdc0 	bl	800ee6c <tcp_free_acked_segments>
 800f2ec:	4602      	mov	r2, r0
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	d104      	bne.n	800f304 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f300:	861a      	strh	r2, [r3, #48]	; 0x30
 800f302:	e002      	b.n	800f30a <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	2200      	movs	r2, #0
 800f308:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	2200      	movs	r2, #0
 800f30e:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f314:	2b00      	cmp	r3, #0
 800f316:	d103      	bne.n	800f320 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	2200      	movs	r2, #0
 800f31c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800f326:	4b84      	ldr	r3, [pc, #528]	; (800f538 <tcp_receive+0x5d4>)
 800f328:	881b      	ldrh	r3, [r3, #0]
 800f32a:	4413      	add	r3, r2
 800f32c:	b29a      	uxth	r2, r3
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	8b5b      	ldrh	r3, [r3, #26]
 800f338:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d035      	beq.n	800f3ac <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f344:	2b00      	cmp	r3, #0
 800f346:	d118      	bne.n	800f37a <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d00c      	beq.n	800f36a <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f358:	68db      	ldr	r3, [r3, #12]
 800f35a:	685b      	ldr	r3, [r3, #4]
 800f35c:	4618      	mov	r0, r3
 800f35e:	f7fa fdea 	bl	8009f36 <lwip_htonl>
 800f362:	4603      	mov	r3, r0
 800f364:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800f366:	2b00      	cmp	r3, #0
 800f368:	dc20      	bgt.n	800f3ac <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	8b5b      	ldrh	r3, [r3, #26]
 800f36e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f372:	b29a      	uxth	r2, r3
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f378:	e018      	b.n	800f3ac <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f382:	68db      	ldr	r3, [r3, #12]
 800f384:	685b      	ldr	r3, [r3, #4]
 800f386:	4618      	mov	r0, r3
 800f388:	f7fa fdd5 	bl	8009f36 <lwip_htonl>
 800f38c:	4603      	mov	r3, r0
 800f38e:	1ae3      	subs	r3, r4, r3
 800f390:	2b00      	cmp	r3, #0
 800f392:	dc0b      	bgt.n	800f3ac <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	8b5b      	ldrh	r3, [r3, #26]
 800f398:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f39c:	b29a      	uxth	r2, r3
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f3a2:	e003      	b.n	800f3ac <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800f3a4:	6878      	ldr	r0, [r7, #4]
 800f3a6:	f002 fbcd 	bl	8011b44 <tcp_send_empty_ack>
 800f3aa:	e000      	b.n	800f3ae <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f3ac:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	d05b      	beq.n	800f46e <tcp_receive+0x50a>
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f3ba:	4b60      	ldr	r3, [pc, #384]	; (800f53c <tcp_receive+0x5d8>)
 800f3bc:	681b      	ldr	r3, [r3, #0]
 800f3be:	1ad3      	subs	r3, r2, r3
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	da54      	bge.n	800f46e <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800f3c4:	4b5e      	ldr	r3, [pc, #376]	; (800f540 <tcp_receive+0x5dc>)
 800f3c6:	681b      	ldr	r3, [r3, #0]
 800f3c8:	b29a      	uxth	r2, r3
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f3ce:	b29b      	uxth	r3, r3
 800f3d0:	1ad3      	subs	r3, r2, r3
 800f3d2:	b29b      	uxth	r3, r3
 800f3d4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800f3d8:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f3e2:	10db      	asrs	r3, r3, #3
 800f3e4:	b21b      	sxth	r3, r3
 800f3e6:	b29b      	uxth	r3, r3
 800f3e8:	1ad3      	subs	r3, r2, r3
 800f3ea:	b29b      	uxth	r3, r3
 800f3ec:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f3f6:	b29a      	uxth	r2, r3
 800f3f8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f3fc:	4413      	add	r3, r2
 800f3fe:	b29b      	uxth	r3, r3
 800f400:	b21a      	sxth	r2, r3
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800f406:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	da05      	bge.n	800f41a <tcp_receive+0x4b6>
        m = (s16_t) - m;
 800f40e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f412:	425b      	negs	r3, r3
 800f414:	b29b      	uxth	r3, r3
 800f416:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800f41a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f424:	109b      	asrs	r3, r3, #2
 800f426:	b21b      	sxth	r3, r3
 800f428:	b29b      	uxth	r3, r3
 800f42a:	1ad3      	subs	r3, r2, r3
 800f42c:	b29b      	uxth	r3, r3
 800f42e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f438:	b29a      	uxth	r2, r3
 800f43a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f43e:	4413      	add	r3, r2
 800f440:	b29b      	uxth	r3, r3
 800f442:	b21a      	sxth	r2, r3
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f44e:	10db      	asrs	r3, r3, #3
 800f450:	b21b      	sxth	r3, r3
 800f452:	b29a      	uxth	r2, r3
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f45a:	b29b      	uxth	r3, r3
 800f45c:	4413      	add	r3, r2
 800f45e:	b29b      	uxth	r3, r3
 800f460:	b21a      	sxth	r2, r3
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	2200      	movs	r2, #0
 800f46c:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800f46e:	4b35      	ldr	r3, [pc, #212]	; (800f544 <tcp_receive+0x5e0>)
 800f470:	881b      	ldrh	r3, [r3, #0]
 800f472:	2b00      	cmp	r3, #0
 800f474:	f000 84e1 	beq.w	800fe3a <tcp_receive+0xed6>
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	7d1b      	ldrb	r3, [r3, #20]
 800f47c:	2b06      	cmp	r3, #6
 800f47e:	f200 84dc 	bhi.w	800fe3a <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f486:	4b30      	ldr	r3, [pc, #192]	; (800f548 <tcp_receive+0x5e4>)
 800f488:	681b      	ldr	r3, [r3, #0]
 800f48a:	1ad3      	subs	r3, r2, r3
 800f48c:	3b01      	subs	r3, #1
 800f48e:	2b00      	cmp	r3, #0
 800f490:	f2c0 808e 	blt.w	800f5b0 <tcp_receive+0x64c>
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f498:	4b2a      	ldr	r3, [pc, #168]	; (800f544 <tcp_receive+0x5e0>)
 800f49a:	881b      	ldrh	r3, [r3, #0]
 800f49c:	4619      	mov	r1, r3
 800f49e:	4b2a      	ldr	r3, [pc, #168]	; (800f548 <tcp_receive+0x5e4>)
 800f4a0:	681b      	ldr	r3, [r3, #0]
 800f4a2:	440b      	add	r3, r1
 800f4a4:	1ad3      	subs	r3, r2, r3
 800f4a6:	3301      	adds	r3, #1
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	f300 8081 	bgt.w	800f5b0 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800f4ae:	4b27      	ldr	r3, [pc, #156]	; (800f54c <tcp_receive+0x5e8>)
 800f4b0:	685b      	ldr	r3, [r3, #4]
 800f4b2:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f4b8:	4b23      	ldr	r3, [pc, #140]	; (800f548 <tcp_receive+0x5e4>)
 800f4ba:	681b      	ldr	r3, [r3, #0]
 800f4bc:	1ad3      	subs	r3, r2, r3
 800f4be:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800f4c0:	4b22      	ldr	r3, [pc, #136]	; (800f54c <tcp_receive+0x5e8>)
 800f4c2:	685b      	ldr	r3, [r3, #4]
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	d106      	bne.n	800f4d6 <tcp_receive+0x572>
 800f4c8:	4b21      	ldr	r3, [pc, #132]	; (800f550 <tcp_receive+0x5ec>)
 800f4ca:	f240 5294 	movw	r2, #1428	; 0x594
 800f4ce:	4921      	ldr	r1, [pc, #132]	; (800f554 <tcp_receive+0x5f0>)
 800f4d0:	4821      	ldr	r0, [pc, #132]	; (800f558 <tcp_receive+0x5f4>)
 800f4d2:	f005 faf3 	bl	8014abc <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800f4d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4d8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800f4dc:	4293      	cmp	r3, r2
 800f4de:	d906      	bls.n	800f4ee <tcp_receive+0x58a>
 800f4e0:	4b1b      	ldr	r3, [pc, #108]	; (800f550 <tcp_receive+0x5ec>)
 800f4e2:	f240 5295 	movw	r2, #1429	; 0x595
 800f4e6:	491d      	ldr	r1, [pc, #116]	; (800f55c <tcp_receive+0x5f8>)
 800f4e8:	481b      	ldr	r0, [pc, #108]	; (800f558 <tcp_receive+0x5f4>)
 800f4ea:	f005 fae7 	bl	8014abc <iprintf>
      off = (u16_t)off32;
 800f4ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4f0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800f4f4:	4b15      	ldr	r3, [pc, #84]	; (800f54c <tcp_receive+0x5e8>)
 800f4f6:	685b      	ldr	r3, [r3, #4]
 800f4f8:	891b      	ldrh	r3, [r3, #8]
 800f4fa:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f4fe:	429a      	cmp	r2, r3
 800f500:	d906      	bls.n	800f510 <tcp_receive+0x5ac>
 800f502:	4b13      	ldr	r3, [pc, #76]	; (800f550 <tcp_receive+0x5ec>)
 800f504:	f240 5297 	movw	r2, #1431	; 0x597
 800f508:	4915      	ldr	r1, [pc, #84]	; (800f560 <tcp_receive+0x5fc>)
 800f50a:	4813      	ldr	r0, [pc, #76]	; (800f558 <tcp_receive+0x5f4>)
 800f50c:	f005 fad6 	bl	8014abc <iprintf>
      inseg.len -= off;
 800f510:	4b0e      	ldr	r3, [pc, #56]	; (800f54c <tcp_receive+0x5e8>)
 800f512:	891a      	ldrh	r2, [r3, #8]
 800f514:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f518:	1ad3      	subs	r3, r2, r3
 800f51a:	b29a      	uxth	r2, r3
 800f51c:	4b0b      	ldr	r3, [pc, #44]	; (800f54c <tcp_receive+0x5e8>)
 800f51e:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800f520:	4b0a      	ldr	r3, [pc, #40]	; (800f54c <tcp_receive+0x5e8>)
 800f522:	685b      	ldr	r3, [r3, #4]
 800f524:	891a      	ldrh	r2, [r3, #8]
 800f526:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f52a:	1ad3      	subs	r3, r2, r3
 800f52c:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800f52e:	e029      	b.n	800f584 <tcp_receive+0x620>
 800f530:	08017814 	.word	0x08017814
 800f534:	0801781c 	.word	0x0801781c
 800f538:	24000580 	.word	0x24000580
 800f53c:	2400057c 	.word	0x2400057c
 800f540:	24003c80 	.word	0x24003c80
 800f544:	24000582 	.word	0x24000582
 800f548:	24000578 	.word	0x24000578
 800f54c:	24000558 	.word	0x24000558
 800f550:	080174ac 	.word	0x080174ac
 800f554:	08017824 	.word	0x08017824
 800f558:	080174f8 	.word	0x080174f8
 800f55c:	08017834 	.word	0x08017834
 800f560:	08017844 	.word	0x08017844
        off -= p->len;
 800f564:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f566:	895b      	ldrh	r3, [r3, #10]
 800f568:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f56c:	1ad3      	subs	r3, r2, r3
 800f56e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800f572:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f574:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800f576:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800f578:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f57a:	2200      	movs	r2, #0
 800f57c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800f57e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f580:	681b      	ldr	r3, [r3, #0]
 800f582:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800f584:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f586:	895b      	ldrh	r3, [r3, #10]
 800f588:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f58c:	429a      	cmp	r2, r3
 800f58e:	d8e9      	bhi.n	800f564 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800f590:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f594:	4619      	mov	r1, r3
 800f596:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f598:	f7fc f8c2 	bl	800b720 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5a0:	4a91      	ldr	r2, [pc, #580]	; (800f7e8 <tcp_receive+0x884>)
 800f5a2:	6013      	str	r3, [r2, #0]
 800f5a4:	4b91      	ldr	r3, [pc, #580]	; (800f7ec <tcp_receive+0x888>)
 800f5a6:	68db      	ldr	r3, [r3, #12]
 800f5a8:	4a8f      	ldr	r2, [pc, #572]	; (800f7e8 <tcp_receive+0x884>)
 800f5aa:	6812      	ldr	r2, [r2, #0]
 800f5ac:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f5ae:	e00d      	b.n	800f5cc <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800f5b0:	4b8d      	ldr	r3, [pc, #564]	; (800f7e8 <tcp_receive+0x884>)
 800f5b2:	681a      	ldr	r2, [r3, #0]
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5b8:	1ad3      	subs	r3, r2, r3
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	da06      	bge.n	800f5cc <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	8b5b      	ldrh	r3, [r3, #26]
 800f5c2:	f043 0302 	orr.w	r3, r3, #2
 800f5c6:	b29a      	uxth	r2, r3
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f5cc:	4b86      	ldr	r3, [pc, #536]	; (800f7e8 <tcp_receive+0x884>)
 800f5ce:	681a      	ldr	r2, [r3, #0]
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5d4:	1ad3      	subs	r3, r2, r3
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	f2c0 842a 	blt.w	800fe30 <tcp_receive+0xecc>
 800f5dc:	4b82      	ldr	r3, [pc, #520]	; (800f7e8 <tcp_receive+0x884>)
 800f5de:	681a      	ldr	r2, [r3, #0]
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5e4:	6879      	ldr	r1, [r7, #4]
 800f5e6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f5e8:	440b      	add	r3, r1
 800f5ea:	1ad3      	subs	r3, r2, r3
 800f5ec:	3301      	adds	r3, #1
 800f5ee:	2b00      	cmp	r3, #0
 800f5f0:	f300 841e 	bgt.w	800fe30 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f5f8:	4b7b      	ldr	r3, [pc, #492]	; (800f7e8 <tcp_receive+0x884>)
 800f5fa:	681b      	ldr	r3, [r3, #0]
 800f5fc:	429a      	cmp	r2, r3
 800f5fe:	f040 829a 	bne.w	800fb36 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800f602:	4b7a      	ldr	r3, [pc, #488]	; (800f7ec <tcp_receive+0x888>)
 800f604:	891c      	ldrh	r4, [r3, #8]
 800f606:	4b79      	ldr	r3, [pc, #484]	; (800f7ec <tcp_receive+0x888>)
 800f608:	68db      	ldr	r3, [r3, #12]
 800f60a:	899b      	ldrh	r3, [r3, #12]
 800f60c:	b29b      	uxth	r3, r3
 800f60e:	4618      	mov	r0, r3
 800f610:	f7fa fc7c 	bl	8009f0c <lwip_htons>
 800f614:	4603      	mov	r3, r0
 800f616:	b2db      	uxtb	r3, r3
 800f618:	f003 0303 	and.w	r3, r3, #3
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	d001      	beq.n	800f624 <tcp_receive+0x6c0>
 800f620:	2301      	movs	r3, #1
 800f622:	e000      	b.n	800f626 <tcp_receive+0x6c2>
 800f624:	2300      	movs	r3, #0
 800f626:	4423      	add	r3, r4
 800f628:	b29a      	uxth	r2, r3
 800f62a:	4b71      	ldr	r3, [pc, #452]	; (800f7f0 <tcp_receive+0x88c>)
 800f62c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f632:	4b6f      	ldr	r3, [pc, #444]	; (800f7f0 <tcp_receive+0x88c>)
 800f634:	881b      	ldrh	r3, [r3, #0]
 800f636:	429a      	cmp	r2, r3
 800f638:	d275      	bcs.n	800f726 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f63a:	4b6c      	ldr	r3, [pc, #432]	; (800f7ec <tcp_receive+0x888>)
 800f63c:	68db      	ldr	r3, [r3, #12]
 800f63e:	899b      	ldrh	r3, [r3, #12]
 800f640:	b29b      	uxth	r3, r3
 800f642:	4618      	mov	r0, r3
 800f644:	f7fa fc62 	bl	8009f0c <lwip_htons>
 800f648:	4603      	mov	r3, r0
 800f64a:	b2db      	uxtb	r3, r3
 800f64c:	f003 0301 	and.w	r3, r3, #1
 800f650:	2b00      	cmp	r3, #0
 800f652:	d01f      	beq.n	800f694 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800f654:	4b65      	ldr	r3, [pc, #404]	; (800f7ec <tcp_receive+0x888>)
 800f656:	68db      	ldr	r3, [r3, #12]
 800f658:	899b      	ldrh	r3, [r3, #12]
 800f65a:	b29b      	uxth	r3, r3
 800f65c:	b21b      	sxth	r3, r3
 800f65e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800f662:	b21c      	sxth	r4, r3
 800f664:	4b61      	ldr	r3, [pc, #388]	; (800f7ec <tcp_receive+0x888>)
 800f666:	68db      	ldr	r3, [r3, #12]
 800f668:	899b      	ldrh	r3, [r3, #12]
 800f66a:	b29b      	uxth	r3, r3
 800f66c:	4618      	mov	r0, r3
 800f66e:	f7fa fc4d 	bl	8009f0c <lwip_htons>
 800f672:	4603      	mov	r3, r0
 800f674:	b2db      	uxtb	r3, r3
 800f676:	b29b      	uxth	r3, r3
 800f678:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800f67c:	b29b      	uxth	r3, r3
 800f67e:	4618      	mov	r0, r3
 800f680:	f7fa fc44 	bl	8009f0c <lwip_htons>
 800f684:	4603      	mov	r3, r0
 800f686:	b21b      	sxth	r3, r3
 800f688:	4323      	orrs	r3, r4
 800f68a:	b21a      	sxth	r2, r3
 800f68c:	4b57      	ldr	r3, [pc, #348]	; (800f7ec <tcp_receive+0x888>)
 800f68e:	68db      	ldr	r3, [r3, #12]
 800f690:	b292      	uxth	r2, r2
 800f692:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f698:	4b54      	ldr	r3, [pc, #336]	; (800f7ec <tcp_receive+0x888>)
 800f69a:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800f69c:	4b53      	ldr	r3, [pc, #332]	; (800f7ec <tcp_receive+0x888>)
 800f69e:	68db      	ldr	r3, [r3, #12]
 800f6a0:	899b      	ldrh	r3, [r3, #12]
 800f6a2:	b29b      	uxth	r3, r3
 800f6a4:	4618      	mov	r0, r3
 800f6a6:	f7fa fc31 	bl	8009f0c <lwip_htons>
 800f6aa:	4603      	mov	r3, r0
 800f6ac:	b2db      	uxtb	r3, r3
 800f6ae:	f003 0302 	and.w	r3, r3, #2
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	d005      	beq.n	800f6c2 <tcp_receive+0x75e>
            inseg.len -= 1;
 800f6b6:	4b4d      	ldr	r3, [pc, #308]	; (800f7ec <tcp_receive+0x888>)
 800f6b8:	891b      	ldrh	r3, [r3, #8]
 800f6ba:	3b01      	subs	r3, #1
 800f6bc:	b29a      	uxth	r2, r3
 800f6be:	4b4b      	ldr	r3, [pc, #300]	; (800f7ec <tcp_receive+0x888>)
 800f6c0:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800f6c2:	4b4a      	ldr	r3, [pc, #296]	; (800f7ec <tcp_receive+0x888>)
 800f6c4:	685b      	ldr	r3, [r3, #4]
 800f6c6:	4a49      	ldr	r2, [pc, #292]	; (800f7ec <tcp_receive+0x888>)
 800f6c8:	8912      	ldrh	r2, [r2, #8]
 800f6ca:	4611      	mov	r1, r2
 800f6cc:	4618      	mov	r0, r3
 800f6ce:	f7fb ff27 	bl	800b520 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800f6d2:	4b46      	ldr	r3, [pc, #280]	; (800f7ec <tcp_receive+0x888>)
 800f6d4:	891c      	ldrh	r4, [r3, #8]
 800f6d6:	4b45      	ldr	r3, [pc, #276]	; (800f7ec <tcp_receive+0x888>)
 800f6d8:	68db      	ldr	r3, [r3, #12]
 800f6da:	899b      	ldrh	r3, [r3, #12]
 800f6dc:	b29b      	uxth	r3, r3
 800f6de:	4618      	mov	r0, r3
 800f6e0:	f7fa fc14 	bl	8009f0c <lwip_htons>
 800f6e4:	4603      	mov	r3, r0
 800f6e6:	b2db      	uxtb	r3, r3
 800f6e8:	f003 0303 	and.w	r3, r3, #3
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d001      	beq.n	800f6f4 <tcp_receive+0x790>
 800f6f0:	2301      	movs	r3, #1
 800f6f2:	e000      	b.n	800f6f6 <tcp_receive+0x792>
 800f6f4:	2300      	movs	r3, #0
 800f6f6:	4423      	add	r3, r4
 800f6f8:	b29a      	uxth	r2, r3
 800f6fa:	4b3d      	ldr	r3, [pc, #244]	; (800f7f0 <tcp_receive+0x88c>)
 800f6fc:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800f6fe:	4b3c      	ldr	r3, [pc, #240]	; (800f7f0 <tcp_receive+0x88c>)
 800f700:	881b      	ldrh	r3, [r3, #0]
 800f702:	461a      	mov	r2, r3
 800f704:	4b38      	ldr	r3, [pc, #224]	; (800f7e8 <tcp_receive+0x884>)
 800f706:	681b      	ldr	r3, [r3, #0]
 800f708:	441a      	add	r2, r3
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f70e:	6879      	ldr	r1, [r7, #4]
 800f710:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f712:	440b      	add	r3, r1
 800f714:	429a      	cmp	r2, r3
 800f716:	d006      	beq.n	800f726 <tcp_receive+0x7c2>
 800f718:	4b36      	ldr	r3, [pc, #216]	; (800f7f4 <tcp_receive+0x890>)
 800f71a:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800f71e:	4936      	ldr	r1, [pc, #216]	; (800f7f8 <tcp_receive+0x894>)
 800f720:	4836      	ldr	r0, [pc, #216]	; (800f7fc <tcp_receive+0x898>)
 800f722:	f005 f9cb 	bl	8014abc <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	f000 80e7 	beq.w	800f8fe <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f730:	4b2e      	ldr	r3, [pc, #184]	; (800f7ec <tcp_receive+0x888>)
 800f732:	68db      	ldr	r3, [r3, #12]
 800f734:	899b      	ldrh	r3, [r3, #12]
 800f736:	b29b      	uxth	r3, r3
 800f738:	4618      	mov	r0, r3
 800f73a:	f7fa fbe7 	bl	8009f0c <lwip_htons>
 800f73e:	4603      	mov	r3, r0
 800f740:	b2db      	uxtb	r3, r3
 800f742:	f003 0301 	and.w	r3, r3, #1
 800f746:	2b00      	cmp	r3, #0
 800f748:	d010      	beq.n	800f76c <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800f74a:	e00a      	b.n	800f762 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f750:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f756:	681a      	ldr	r2, [r3, #0]
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800f75c:	68f8      	ldr	r0, [r7, #12]
 800f75e:	f7fd fca2 	bl	800d0a6 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f766:	2b00      	cmp	r3, #0
 800f768:	d1f0      	bne.n	800f74c <tcp_receive+0x7e8>
 800f76a:	e0c8      	b.n	800f8fe <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f770:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800f772:	e052      	b.n	800f81a <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800f774:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f776:	68db      	ldr	r3, [r3, #12]
 800f778:	899b      	ldrh	r3, [r3, #12]
 800f77a:	b29b      	uxth	r3, r3
 800f77c:	4618      	mov	r0, r3
 800f77e:	f7fa fbc5 	bl	8009f0c <lwip_htons>
 800f782:	4603      	mov	r3, r0
 800f784:	b2db      	uxtb	r3, r3
 800f786:	f003 0301 	and.w	r3, r3, #1
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d03d      	beq.n	800f80a <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800f78e:	4b17      	ldr	r3, [pc, #92]	; (800f7ec <tcp_receive+0x888>)
 800f790:	68db      	ldr	r3, [r3, #12]
 800f792:	899b      	ldrh	r3, [r3, #12]
 800f794:	b29b      	uxth	r3, r3
 800f796:	4618      	mov	r0, r3
 800f798:	f7fa fbb8 	bl	8009f0c <lwip_htons>
 800f79c:	4603      	mov	r3, r0
 800f79e:	b2db      	uxtb	r3, r3
 800f7a0:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	d130      	bne.n	800f80a <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800f7a8:	4b10      	ldr	r3, [pc, #64]	; (800f7ec <tcp_receive+0x888>)
 800f7aa:	68db      	ldr	r3, [r3, #12]
 800f7ac:	899b      	ldrh	r3, [r3, #12]
 800f7ae:	b29c      	uxth	r4, r3
 800f7b0:	2001      	movs	r0, #1
 800f7b2:	f7fa fbab 	bl	8009f0c <lwip_htons>
 800f7b6:	4603      	mov	r3, r0
 800f7b8:	461a      	mov	r2, r3
 800f7ba:	4b0c      	ldr	r3, [pc, #48]	; (800f7ec <tcp_receive+0x888>)
 800f7bc:	68db      	ldr	r3, [r3, #12]
 800f7be:	4322      	orrs	r2, r4
 800f7c0:	b292      	uxth	r2, r2
 800f7c2:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800f7c4:	4b09      	ldr	r3, [pc, #36]	; (800f7ec <tcp_receive+0x888>)
 800f7c6:	891c      	ldrh	r4, [r3, #8]
 800f7c8:	4b08      	ldr	r3, [pc, #32]	; (800f7ec <tcp_receive+0x888>)
 800f7ca:	68db      	ldr	r3, [r3, #12]
 800f7cc:	899b      	ldrh	r3, [r3, #12]
 800f7ce:	b29b      	uxth	r3, r3
 800f7d0:	4618      	mov	r0, r3
 800f7d2:	f7fa fb9b 	bl	8009f0c <lwip_htons>
 800f7d6:	4603      	mov	r3, r0
 800f7d8:	b2db      	uxtb	r3, r3
 800f7da:	f003 0303 	and.w	r3, r3, #3
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	d00e      	beq.n	800f800 <tcp_receive+0x89c>
 800f7e2:	2301      	movs	r3, #1
 800f7e4:	e00d      	b.n	800f802 <tcp_receive+0x89e>
 800f7e6:	bf00      	nop
 800f7e8:	24000578 	.word	0x24000578
 800f7ec:	24000558 	.word	0x24000558
 800f7f0:	24000582 	.word	0x24000582
 800f7f4:	080174ac 	.word	0x080174ac
 800f7f8:	08017854 	.word	0x08017854
 800f7fc:	080174f8 	.word	0x080174f8
 800f800:	2300      	movs	r3, #0
 800f802:	4423      	add	r3, r4
 800f804:	b29a      	uxth	r2, r3
 800f806:	4b98      	ldr	r3, [pc, #608]	; (800fa68 <tcp_receive+0xb04>)
 800f808:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800f80a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f80c:	613b      	str	r3, [r7, #16]
              next = next->next;
 800f80e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f810:	681b      	ldr	r3, [r3, #0]
 800f812:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800f814:	6938      	ldr	r0, [r7, #16]
 800f816:	f7fd fc46 	bl	800d0a6 <tcp_seg_free>
            while (next &&
 800f81a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	d00e      	beq.n	800f83e <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800f820:	4b91      	ldr	r3, [pc, #580]	; (800fa68 <tcp_receive+0xb04>)
 800f822:	881b      	ldrh	r3, [r3, #0]
 800f824:	461a      	mov	r2, r3
 800f826:	4b91      	ldr	r3, [pc, #580]	; (800fa6c <tcp_receive+0xb08>)
 800f828:	681b      	ldr	r3, [r3, #0]
 800f82a:	441a      	add	r2, r3
 800f82c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f82e:	68db      	ldr	r3, [r3, #12]
 800f830:	685b      	ldr	r3, [r3, #4]
 800f832:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f834:	8909      	ldrh	r1, [r1, #8]
 800f836:	440b      	add	r3, r1
 800f838:	1ad3      	subs	r3, r2, r3
            while (next &&
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	da9a      	bge.n	800f774 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800f83e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f840:	2b00      	cmp	r3, #0
 800f842:	d059      	beq.n	800f8f8 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800f844:	4b88      	ldr	r3, [pc, #544]	; (800fa68 <tcp_receive+0xb04>)
 800f846:	881b      	ldrh	r3, [r3, #0]
 800f848:	461a      	mov	r2, r3
 800f84a:	4b88      	ldr	r3, [pc, #544]	; (800fa6c <tcp_receive+0xb08>)
 800f84c:	681b      	ldr	r3, [r3, #0]
 800f84e:	441a      	add	r2, r3
 800f850:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f852:	68db      	ldr	r3, [r3, #12]
 800f854:	685b      	ldr	r3, [r3, #4]
 800f856:	1ad3      	subs	r3, r2, r3
            if (next &&
 800f858:	2b00      	cmp	r3, #0
 800f85a:	dd4d      	ble.n	800f8f8 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800f85c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f85e:	68db      	ldr	r3, [r3, #12]
 800f860:	685b      	ldr	r3, [r3, #4]
 800f862:	b29a      	uxth	r2, r3
 800f864:	4b81      	ldr	r3, [pc, #516]	; (800fa6c <tcp_receive+0xb08>)
 800f866:	681b      	ldr	r3, [r3, #0]
 800f868:	b29b      	uxth	r3, r3
 800f86a:	1ad3      	subs	r3, r2, r3
 800f86c:	b29a      	uxth	r2, r3
 800f86e:	4b80      	ldr	r3, [pc, #512]	; (800fa70 <tcp_receive+0xb0c>)
 800f870:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800f872:	4b7f      	ldr	r3, [pc, #508]	; (800fa70 <tcp_receive+0xb0c>)
 800f874:	68db      	ldr	r3, [r3, #12]
 800f876:	899b      	ldrh	r3, [r3, #12]
 800f878:	b29b      	uxth	r3, r3
 800f87a:	4618      	mov	r0, r3
 800f87c:	f7fa fb46 	bl	8009f0c <lwip_htons>
 800f880:	4603      	mov	r3, r0
 800f882:	b2db      	uxtb	r3, r3
 800f884:	f003 0302 	and.w	r3, r3, #2
 800f888:	2b00      	cmp	r3, #0
 800f88a:	d005      	beq.n	800f898 <tcp_receive+0x934>
                inseg.len -= 1;
 800f88c:	4b78      	ldr	r3, [pc, #480]	; (800fa70 <tcp_receive+0xb0c>)
 800f88e:	891b      	ldrh	r3, [r3, #8]
 800f890:	3b01      	subs	r3, #1
 800f892:	b29a      	uxth	r2, r3
 800f894:	4b76      	ldr	r3, [pc, #472]	; (800fa70 <tcp_receive+0xb0c>)
 800f896:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800f898:	4b75      	ldr	r3, [pc, #468]	; (800fa70 <tcp_receive+0xb0c>)
 800f89a:	685b      	ldr	r3, [r3, #4]
 800f89c:	4a74      	ldr	r2, [pc, #464]	; (800fa70 <tcp_receive+0xb0c>)
 800f89e:	8912      	ldrh	r2, [r2, #8]
 800f8a0:	4611      	mov	r1, r2
 800f8a2:	4618      	mov	r0, r3
 800f8a4:	f7fb fe3c 	bl	800b520 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800f8a8:	4b71      	ldr	r3, [pc, #452]	; (800fa70 <tcp_receive+0xb0c>)
 800f8aa:	891c      	ldrh	r4, [r3, #8]
 800f8ac:	4b70      	ldr	r3, [pc, #448]	; (800fa70 <tcp_receive+0xb0c>)
 800f8ae:	68db      	ldr	r3, [r3, #12]
 800f8b0:	899b      	ldrh	r3, [r3, #12]
 800f8b2:	b29b      	uxth	r3, r3
 800f8b4:	4618      	mov	r0, r3
 800f8b6:	f7fa fb29 	bl	8009f0c <lwip_htons>
 800f8ba:	4603      	mov	r3, r0
 800f8bc:	b2db      	uxtb	r3, r3
 800f8be:	f003 0303 	and.w	r3, r3, #3
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	d001      	beq.n	800f8ca <tcp_receive+0x966>
 800f8c6:	2301      	movs	r3, #1
 800f8c8:	e000      	b.n	800f8cc <tcp_receive+0x968>
 800f8ca:	2300      	movs	r3, #0
 800f8cc:	4423      	add	r3, r4
 800f8ce:	b29a      	uxth	r2, r3
 800f8d0:	4b65      	ldr	r3, [pc, #404]	; (800fa68 <tcp_receive+0xb04>)
 800f8d2:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800f8d4:	4b64      	ldr	r3, [pc, #400]	; (800fa68 <tcp_receive+0xb04>)
 800f8d6:	881b      	ldrh	r3, [r3, #0]
 800f8d8:	461a      	mov	r2, r3
 800f8da:	4b64      	ldr	r3, [pc, #400]	; (800fa6c <tcp_receive+0xb08>)
 800f8dc:	681b      	ldr	r3, [r3, #0]
 800f8de:	441a      	add	r2, r3
 800f8e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f8e2:	68db      	ldr	r3, [r3, #12]
 800f8e4:	685b      	ldr	r3, [r3, #4]
 800f8e6:	429a      	cmp	r2, r3
 800f8e8:	d006      	beq.n	800f8f8 <tcp_receive+0x994>
 800f8ea:	4b62      	ldr	r3, [pc, #392]	; (800fa74 <tcp_receive+0xb10>)
 800f8ec:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800f8f0:	4961      	ldr	r1, [pc, #388]	; (800fa78 <tcp_receive+0xb14>)
 800f8f2:	4862      	ldr	r0, [pc, #392]	; (800fa7c <tcp_receive+0xb18>)
 800f8f4:	f005 f8e2 	bl	8014abc <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f8fc:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800f8fe:	4b5a      	ldr	r3, [pc, #360]	; (800fa68 <tcp_receive+0xb04>)
 800f900:	881b      	ldrh	r3, [r3, #0]
 800f902:	461a      	mov	r2, r3
 800f904:	4b59      	ldr	r3, [pc, #356]	; (800fa6c <tcp_receive+0xb08>)
 800f906:	681b      	ldr	r3, [r3, #0]
 800f908:	441a      	add	r2, r3
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f912:	4b55      	ldr	r3, [pc, #340]	; (800fa68 <tcp_receive+0xb04>)
 800f914:	881b      	ldrh	r3, [r3, #0]
 800f916:	429a      	cmp	r2, r3
 800f918:	d206      	bcs.n	800f928 <tcp_receive+0x9c4>
 800f91a:	4b56      	ldr	r3, [pc, #344]	; (800fa74 <tcp_receive+0xb10>)
 800f91c:	f240 6207 	movw	r2, #1543	; 0x607
 800f920:	4957      	ldr	r1, [pc, #348]	; (800fa80 <tcp_receive+0xb1c>)
 800f922:	4856      	ldr	r0, [pc, #344]	; (800fa7c <tcp_receive+0xb18>)
 800f924:	f005 f8ca 	bl	8014abc <iprintf>
        pcb->rcv_wnd -= tcplen;
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f92c:	4b4e      	ldr	r3, [pc, #312]	; (800fa68 <tcp_receive+0xb04>)
 800f92e:	881b      	ldrh	r3, [r3, #0]
 800f930:	1ad3      	subs	r3, r2, r3
 800f932:	b29a      	uxth	r2, r3
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800f938:	6878      	ldr	r0, [r7, #4]
 800f93a:	f7fc fe8f 	bl	800c65c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800f93e:	4b4c      	ldr	r3, [pc, #304]	; (800fa70 <tcp_receive+0xb0c>)
 800f940:	685b      	ldr	r3, [r3, #4]
 800f942:	891b      	ldrh	r3, [r3, #8]
 800f944:	2b00      	cmp	r3, #0
 800f946:	d006      	beq.n	800f956 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800f948:	4b49      	ldr	r3, [pc, #292]	; (800fa70 <tcp_receive+0xb0c>)
 800f94a:	685b      	ldr	r3, [r3, #4]
 800f94c:	4a4d      	ldr	r2, [pc, #308]	; (800fa84 <tcp_receive+0xb20>)
 800f94e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800f950:	4b47      	ldr	r3, [pc, #284]	; (800fa70 <tcp_receive+0xb0c>)
 800f952:	2200      	movs	r2, #0
 800f954:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f956:	4b46      	ldr	r3, [pc, #280]	; (800fa70 <tcp_receive+0xb0c>)
 800f958:	68db      	ldr	r3, [r3, #12]
 800f95a:	899b      	ldrh	r3, [r3, #12]
 800f95c:	b29b      	uxth	r3, r3
 800f95e:	4618      	mov	r0, r3
 800f960:	f7fa fad4 	bl	8009f0c <lwip_htons>
 800f964:	4603      	mov	r3, r0
 800f966:	b2db      	uxtb	r3, r3
 800f968:	f003 0301 	and.w	r3, r3, #1
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	f000 80b8 	beq.w	800fae2 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800f972:	4b45      	ldr	r3, [pc, #276]	; (800fa88 <tcp_receive+0xb24>)
 800f974:	781b      	ldrb	r3, [r3, #0]
 800f976:	f043 0320 	orr.w	r3, r3, #32
 800f97a:	b2da      	uxtb	r2, r3
 800f97c:	4b42      	ldr	r3, [pc, #264]	; (800fa88 <tcp_receive+0xb24>)
 800f97e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800f980:	e0af      	b.n	800fae2 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f986:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f98c:	68db      	ldr	r3, [r3, #12]
 800f98e:	685b      	ldr	r3, [r3, #4]
 800f990:	4a36      	ldr	r2, [pc, #216]	; (800fa6c <tcp_receive+0xb08>)
 800f992:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800f994:	68bb      	ldr	r3, [r7, #8]
 800f996:	891b      	ldrh	r3, [r3, #8]
 800f998:	461c      	mov	r4, r3
 800f99a:	68bb      	ldr	r3, [r7, #8]
 800f99c:	68db      	ldr	r3, [r3, #12]
 800f99e:	899b      	ldrh	r3, [r3, #12]
 800f9a0:	b29b      	uxth	r3, r3
 800f9a2:	4618      	mov	r0, r3
 800f9a4:	f7fa fab2 	bl	8009f0c <lwip_htons>
 800f9a8:	4603      	mov	r3, r0
 800f9aa:	b2db      	uxtb	r3, r3
 800f9ac:	f003 0303 	and.w	r3, r3, #3
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	d001      	beq.n	800f9b8 <tcp_receive+0xa54>
 800f9b4:	2301      	movs	r3, #1
 800f9b6:	e000      	b.n	800f9ba <tcp_receive+0xa56>
 800f9b8:	2300      	movs	r3, #0
 800f9ba:	191a      	adds	r2, r3, r4
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9c0:	441a      	add	r2, r3
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f9ca:	461c      	mov	r4, r3
 800f9cc:	68bb      	ldr	r3, [r7, #8]
 800f9ce:	891b      	ldrh	r3, [r3, #8]
 800f9d0:	461d      	mov	r5, r3
 800f9d2:	68bb      	ldr	r3, [r7, #8]
 800f9d4:	68db      	ldr	r3, [r3, #12]
 800f9d6:	899b      	ldrh	r3, [r3, #12]
 800f9d8:	b29b      	uxth	r3, r3
 800f9da:	4618      	mov	r0, r3
 800f9dc:	f7fa fa96 	bl	8009f0c <lwip_htons>
 800f9e0:	4603      	mov	r3, r0
 800f9e2:	b2db      	uxtb	r3, r3
 800f9e4:	f003 0303 	and.w	r3, r3, #3
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	d001      	beq.n	800f9f0 <tcp_receive+0xa8c>
 800f9ec:	2301      	movs	r3, #1
 800f9ee:	e000      	b.n	800f9f2 <tcp_receive+0xa8e>
 800f9f0:	2300      	movs	r3, #0
 800f9f2:	442b      	add	r3, r5
 800f9f4:	429c      	cmp	r4, r3
 800f9f6:	d206      	bcs.n	800fa06 <tcp_receive+0xaa2>
 800f9f8:	4b1e      	ldr	r3, [pc, #120]	; (800fa74 <tcp_receive+0xb10>)
 800f9fa:	f240 622b 	movw	r2, #1579	; 0x62b
 800f9fe:	4923      	ldr	r1, [pc, #140]	; (800fa8c <tcp_receive+0xb28>)
 800fa00:	481e      	ldr	r0, [pc, #120]	; (800fa7c <tcp_receive+0xb18>)
 800fa02:	f005 f85b 	bl	8014abc <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800fa06:	68bb      	ldr	r3, [r7, #8]
 800fa08:	891b      	ldrh	r3, [r3, #8]
 800fa0a:	461c      	mov	r4, r3
 800fa0c:	68bb      	ldr	r3, [r7, #8]
 800fa0e:	68db      	ldr	r3, [r3, #12]
 800fa10:	899b      	ldrh	r3, [r3, #12]
 800fa12:	b29b      	uxth	r3, r3
 800fa14:	4618      	mov	r0, r3
 800fa16:	f7fa fa79 	bl	8009f0c <lwip_htons>
 800fa1a:	4603      	mov	r3, r0
 800fa1c:	b2db      	uxtb	r3, r3
 800fa1e:	f003 0303 	and.w	r3, r3, #3
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	d001      	beq.n	800fa2a <tcp_receive+0xac6>
 800fa26:	2301      	movs	r3, #1
 800fa28:	e000      	b.n	800fa2c <tcp_receive+0xac8>
 800fa2a:	2300      	movs	r3, #0
 800fa2c:	1919      	adds	r1, r3, r4
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fa32:	b28b      	uxth	r3, r1
 800fa34:	1ad3      	subs	r3, r2, r3
 800fa36:	b29a      	uxth	r2, r3
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800fa3c:	6878      	ldr	r0, [r7, #4]
 800fa3e:	f7fc fe0d 	bl	800c65c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800fa42:	68bb      	ldr	r3, [r7, #8]
 800fa44:	685b      	ldr	r3, [r3, #4]
 800fa46:	891b      	ldrh	r3, [r3, #8]
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	d028      	beq.n	800fa9e <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800fa4c:	4b0d      	ldr	r3, [pc, #52]	; (800fa84 <tcp_receive+0xb20>)
 800fa4e:	681b      	ldr	r3, [r3, #0]
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	d01d      	beq.n	800fa90 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800fa54:	4b0b      	ldr	r3, [pc, #44]	; (800fa84 <tcp_receive+0xb20>)
 800fa56:	681a      	ldr	r2, [r3, #0]
 800fa58:	68bb      	ldr	r3, [r7, #8]
 800fa5a:	685b      	ldr	r3, [r3, #4]
 800fa5c:	4619      	mov	r1, r3
 800fa5e:	4610      	mov	r0, r2
 800fa60:	f7fb ffa6 	bl	800b9b0 <pbuf_cat>
 800fa64:	e018      	b.n	800fa98 <tcp_receive+0xb34>
 800fa66:	bf00      	nop
 800fa68:	24000582 	.word	0x24000582
 800fa6c:	24000578 	.word	0x24000578
 800fa70:	24000558 	.word	0x24000558
 800fa74:	080174ac 	.word	0x080174ac
 800fa78:	0801788c 	.word	0x0801788c
 800fa7c:	080174f8 	.word	0x080174f8
 800fa80:	080178c8 	.word	0x080178c8
 800fa84:	24000588 	.word	0x24000588
 800fa88:	24000585 	.word	0x24000585
 800fa8c:	080178e8 	.word	0x080178e8
            } else {
              recv_data = cseg->p;
 800fa90:	68bb      	ldr	r3, [r7, #8]
 800fa92:	685b      	ldr	r3, [r3, #4]
 800fa94:	4a70      	ldr	r2, [pc, #448]	; (800fc58 <tcp_receive+0xcf4>)
 800fa96:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800fa98:	68bb      	ldr	r3, [r7, #8]
 800fa9a:	2200      	movs	r2, #0
 800fa9c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800fa9e:	68bb      	ldr	r3, [r7, #8]
 800faa0:	68db      	ldr	r3, [r3, #12]
 800faa2:	899b      	ldrh	r3, [r3, #12]
 800faa4:	b29b      	uxth	r3, r3
 800faa6:	4618      	mov	r0, r3
 800faa8:	f7fa fa30 	bl	8009f0c <lwip_htons>
 800faac:	4603      	mov	r3, r0
 800faae:	b2db      	uxtb	r3, r3
 800fab0:	f003 0301 	and.w	r3, r3, #1
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	d00d      	beq.n	800fad4 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800fab8:	4b68      	ldr	r3, [pc, #416]	; (800fc5c <tcp_receive+0xcf8>)
 800faba:	781b      	ldrb	r3, [r3, #0]
 800fabc:	f043 0320 	orr.w	r3, r3, #32
 800fac0:	b2da      	uxtb	r2, r3
 800fac2:	4b66      	ldr	r3, [pc, #408]	; (800fc5c <tcp_receive+0xcf8>)
 800fac4:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	7d1b      	ldrb	r3, [r3, #20]
 800faca:	2b04      	cmp	r3, #4
 800facc:	d102      	bne.n	800fad4 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	2207      	movs	r2, #7
 800fad2:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800fad4:	68bb      	ldr	r3, [r7, #8]
 800fad6:	681a      	ldr	r2, [r3, #0]
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800fadc:	68b8      	ldr	r0, [r7, #8]
 800fade:	f7fd fae2 	bl	800d0a6 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	d008      	beq.n	800fafc <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800faee:	68db      	ldr	r3, [r3, #12]
 800faf0:	685a      	ldr	r2, [r3, #4]
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800faf6:	429a      	cmp	r2, r3
 800faf8:	f43f af43 	beq.w	800f982 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	8b5b      	ldrh	r3, [r3, #26]
 800fb00:	f003 0301 	and.w	r3, r3, #1
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	d00e      	beq.n	800fb26 <tcp_receive+0xbc2>
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	8b5b      	ldrh	r3, [r3, #26]
 800fb0c:	f023 0301 	bic.w	r3, r3, #1
 800fb10:	b29a      	uxth	r2, r3
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	835a      	strh	r2, [r3, #26]
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	8b5b      	ldrh	r3, [r3, #26]
 800fb1a:	f043 0302 	orr.w	r3, r3, #2
 800fb1e:	b29a      	uxth	r2, r3
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800fb24:	e188      	b.n	800fe38 <tcp_receive+0xed4>
        tcp_ack(pcb);
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	8b5b      	ldrh	r3, [r3, #26]
 800fb2a:	f043 0301 	orr.w	r3, r3, #1
 800fb2e:	b29a      	uxth	r2, r3
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800fb34:	e180      	b.n	800fe38 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d106      	bne.n	800fb4c <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800fb3e:	4848      	ldr	r0, [pc, #288]	; (800fc60 <tcp_receive+0xcfc>)
 800fb40:	f7fd fae8 	bl	800d114 <tcp_seg_copy>
 800fb44:	4602      	mov	r2, r0
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	675a      	str	r2, [r3, #116]	; 0x74
 800fb4a:	e16d      	b.n	800fe28 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800fb4c:	2300      	movs	r3, #0
 800fb4e:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fb54:	63bb      	str	r3, [r7, #56]	; 0x38
 800fb56:	e157      	b.n	800fe08 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 800fb58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb5a:	68db      	ldr	r3, [r3, #12]
 800fb5c:	685a      	ldr	r2, [r3, #4]
 800fb5e:	4b41      	ldr	r3, [pc, #260]	; (800fc64 <tcp_receive+0xd00>)
 800fb60:	681b      	ldr	r3, [r3, #0]
 800fb62:	429a      	cmp	r2, r3
 800fb64:	d11d      	bne.n	800fba2 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800fb66:	4b3e      	ldr	r3, [pc, #248]	; (800fc60 <tcp_receive+0xcfc>)
 800fb68:	891a      	ldrh	r2, [r3, #8]
 800fb6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb6c:	891b      	ldrh	r3, [r3, #8]
 800fb6e:	429a      	cmp	r2, r3
 800fb70:	f240 814f 	bls.w	800fe12 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800fb74:	483a      	ldr	r0, [pc, #232]	; (800fc60 <tcp_receive+0xcfc>)
 800fb76:	f7fd facd 	bl	800d114 <tcp_seg_copy>
 800fb7a:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800fb7c:	697b      	ldr	r3, [r7, #20]
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	f000 8149 	beq.w	800fe16 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 800fb84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	d003      	beq.n	800fb92 <tcp_receive+0xc2e>
                    prev->next = cseg;
 800fb8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb8c:	697a      	ldr	r2, [r7, #20]
 800fb8e:	601a      	str	r2, [r3, #0]
 800fb90:	e002      	b.n	800fb98 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	697a      	ldr	r2, [r7, #20]
 800fb96:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800fb98:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fb9a:	6978      	ldr	r0, [r7, #20]
 800fb9c:	f7ff f8de 	bl	800ed5c <tcp_oos_insert_segment>
                }
                break;
 800fba0:	e139      	b.n	800fe16 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800fba2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	d117      	bne.n	800fbd8 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800fba8:	4b2e      	ldr	r3, [pc, #184]	; (800fc64 <tcp_receive+0xd00>)
 800fbaa:	681a      	ldr	r2, [r3, #0]
 800fbac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbae:	68db      	ldr	r3, [r3, #12]
 800fbb0:	685b      	ldr	r3, [r3, #4]
 800fbb2:	1ad3      	subs	r3, r2, r3
 800fbb4:	2b00      	cmp	r3, #0
 800fbb6:	da57      	bge.n	800fc68 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800fbb8:	4829      	ldr	r0, [pc, #164]	; (800fc60 <tcp_receive+0xcfc>)
 800fbba:	f7fd faab 	bl	800d114 <tcp_seg_copy>
 800fbbe:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800fbc0:	69bb      	ldr	r3, [r7, #24]
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	f000 8129 	beq.w	800fe1a <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	69ba      	ldr	r2, [r7, #24]
 800fbcc:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800fbce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fbd0:	69b8      	ldr	r0, [r7, #24]
 800fbd2:	f7ff f8c3 	bl	800ed5c <tcp_oos_insert_segment>
                  }
                  break;
 800fbd6:	e120      	b.n	800fe1a <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800fbd8:	4b22      	ldr	r3, [pc, #136]	; (800fc64 <tcp_receive+0xd00>)
 800fbda:	681a      	ldr	r2, [r3, #0]
 800fbdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fbde:	68db      	ldr	r3, [r3, #12]
 800fbe0:	685b      	ldr	r3, [r3, #4]
 800fbe2:	1ad3      	subs	r3, r2, r3
 800fbe4:	3b01      	subs	r3, #1
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	db3e      	blt.n	800fc68 <tcp_receive+0xd04>
 800fbea:	4b1e      	ldr	r3, [pc, #120]	; (800fc64 <tcp_receive+0xd00>)
 800fbec:	681a      	ldr	r2, [r3, #0]
 800fbee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbf0:	68db      	ldr	r3, [r3, #12]
 800fbf2:	685b      	ldr	r3, [r3, #4]
 800fbf4:	1ad3      	subs	r3, r2, r3
 800fbf6:	3301      	adds	r3, #1
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	dc35      	bgt.n	800fc68 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800fbfc:	4818      	ldr	r0, [pc, #96]	; (800fc60 <tcp_receive+0xcfc>)
 800fbfe:	f7fd fa89 	bl	800d114 <tcp_seg_copy>
 800fc02:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800fc04:	69fb      	ldr	r3, [r7, #28]
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	f000 8109 	beq.w	800fe1e <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800fc0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc0e:	68db      	ldr	r3, [r3, #12]
 800fc10:	685b      	ldr	r3, [r3, #4]
 800fc12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fc14:	8912      	ldrh	r2, [r2, #8]
 800fc16:	441a      	add	r2, r3
 800fc18:	4b12      	ldr	r3, [pc, #72]	; (800fc64 <tcp_receive+0xd00>)
 800fc1a:	681b      	ldr	r3, [r3, #0]
 800fc1c:	1ad3      	subs	r3, r2, r3
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	dd12      	ble.n	800fc48 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800fc22:	4b10      	ldr	r3, [pc, #64]	; (800fc64 <tcp_receive+0xd00>)
 800fc24:	681b      	ldr	r3, [r3, #0]
 800fc26:	b29a      	uxth	r2, r3
 800fc28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc2a:	68db      	ldr	r3, [r3, #12]
 800fc2c:	685b      	ldr	r3, [r3, #4]
 800fc2e:	b29b      	uxth	r3, r3
 800fc30:	1ad3      	subs	r3, r2, r3
 800fc32:	b29a      	uxth	r2, r3
 800fc34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc36:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800fc38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc3a:	685a      	ldr	r2, [r3, #4]
 800fc3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc3e:	891b      	ldrh	r3, [r3, #8]
 800fc40:	4619      	mov	r1, r3
 800fc42:	4610      	mov	r0, r2
 800fc44:	f7fb fc6c 	bl	800b520 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800fc48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc4a:	69fa      	ldr	r2, [r7, #28]
 800fc4c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800fc4e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fc50:	69f8      	ldr	r0, [r7, #28]
 800fc52:	f7ff f883 	bl	800ed5c <tcp_oos_insert_segment>
                  }
                  break;
 800fc56:	e0e2      	b.n	800fe1e <tcp_receive+0xeba>
 800fc58:	24000588 	.word	0x24000588
 800fc5c:	24000585 	.word	0x24000585
 800fc60:	24000558 	.word	0x24000558
 800fc64:	24000578 	.word	0x24000578
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800fc68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc6a:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800fc6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc6e:	681b      	ldr	r3, [r3, #0]
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	f040 80c6 	bne.w	800fe02 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800fc76:	4b80      	ldr	r3, [pc, #512]	; (800fe78 <tcp_receive+0xf14>)
 800fc78:	681a      	ldr	r2, [r3, #0]
 800fc7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc7c:	68db      	ldr	r3, [r3, #12]
 800fc7e:	685b      	ldr	r3, [r3, #4]
 800fc80:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	f340 80bd 	ble.w	800fe02 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800fc88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc8a:	68db      	ldr	r3, [r3, #12]
 800fc8c:	899b      	ldrh	r3, [r3, #12]
 800fc8e:	b29b      	uxth	r3, r3
 800fc90:	4618      	mov	r0, r3
 800fc92:	f7fa f93b 	bl	8009f0c <lwip_htons>
 800fc96:	4603      	mov	r3, r0
 800fc98:	b2db      	uxtb	r3, r3
 800fc9a:	f003 0301 	and.w	r3, r3, #1
 800fc9e:	2b00      	cmp	r3, #0
 800fca0:	f040 80bf 	bne.w	800fe22 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800fca4:	4875      	ldr	r0, [pc, #468]	; (800fe7c <tcp_receive+0xf18>)
 800fca6:	f7fd fa35 	bl	800d114 <tcp_seg_copy>
 800fcaa:	4602      	mov	r2, r0
 800fcac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcae:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800fcb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcb2:	681b      	ldr	r3, [r3, #0]
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	f000 80b6 	beq.w	800fe26 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800fcba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcbc:	68db      	ldr	r3, [r3, #12]
 800fcbe:	685b      	ldr	r3, [r3, #4]
 800fcc0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fcc2:	8912      	ldrh	r2, [r2, #8]
 800fcc4:	441a      	add	r2, r3
 800fcc6:	4b6c      	ldr	r3, [pc, #432]	; (800fe78 <tcp_receive+0xf14>)
 800fcc8:	681b      	ldr	r3, [r3, #0]
 800fcca:	1ad3      	subs	r3, r2, r3
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	dd12      	ble.n	800fcf6 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800fcd0:	4b69      	ldr	r3, [pc, #420]	; (800fe78 <tcp_receive+0xf14>)
 800fcd2:	681b      	ldr	r3, [r3, #0]
 800fcd4:	b29a      	uxth	r2, r3
 800fcd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcd8:	68db      	ldr	r3, [r3, #12]
 800fcda:	685b      	ldr	r3, [r3, #4]
 800fcdc:	b29b      	uxth	r3, r3
 800fcde:	1ad3      	subs	r3, r2, r3
 800fce0:	b29a      	uxth	r2, r3
 800fce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fce4:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800fce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fce8:	685a      	ldr	r2, [r3, #4]
 800fcea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcec:	891b      	ldrh	r3, [r3, #8]
 800fcee:	4619      	mov	r1, r3
 800fcf0:	4610      	mov	r0, r2
 800fcf2:	f7fb fc15 	bl	800b520 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800fcf6:	4b62      	ldr	r3, [pc, #392]	; (800fe80 <tcp_receive+0xf1c>)
 800fcf8:	881b      	ldrh	r3, [r3, #0]
 800fcfa:	461a      	mov	r2, r3
 800fcfc:	4b5e      	ldr	r3, [pc, #376]	; (800fe78 <tcp_receive+0xf14>)
 800fcfe:	681b      	ldr	r3, [r3, #0]
 800fd00:	441a      	add	r2, r3
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd06:	6879      	ldr	r1, [r7, #4]
 800fd08:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fd0a:	440b      	add	r3, r1
 800fd0c:	1ad3      	subs	r3, r2, r3
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	f340 8089 	ble.w	800fe26 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800fd14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd16:	681b      	ldr	r3, [r3, #0]
 800fd18:	68db      	ldr	r3, [r3, #12]
 800fd1a:	899b      	ldrh	r3, [r3, #12]
 800fd1c:	b29b      	uxth	r3, r3
 800fd1e:	4618      	mov	r0, r3
 800fd20:	f7fa f8f4 	bl	8009f0c <lwip_htons>
 800fd24:	4603      	mov	r3, r0
 800fd26:	b2db      	uxtb	r3, r3
 800fd28:	f003 0301 	and.w	r3, r3, #1
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d022      	beq.n	800fd76 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800fd30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd32:	681b      	ldr	r3, [r3, #0]
 800fd34:	68db      	ldr	r3, [r3, #12]
 800fd36:	899b      	ldrh	r3, [r3, #12]
 800fd38:	b29b      	uxth	r3, r3
 800fd3a:	b21b      	sxth	r3, r3
 800fd3c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800fd40:	b21c      	sxth	r4, r3
 800fd42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd44:	681b      	ldr	r3, [r3, #0]
 800fd46:	68db      	ldr	r3, [r3, #12]
 800fd48:	899b      	ldrh	r3, [r3, #12]
 800fd4a:	b29b      	uxth	r3, r3
 800fd4c:	4618      	mov	r0, r3
 800fd4e:	f7fa f8dd 	bl	8009f0c <lwip_htons>
 800fd52:	4603      	mov	r3, r0
 800fd54:	b2db      	uxtb	r3, r3
 800fd56:	b29b      	uxth	r3, r3
 800fd58:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800fd5c:	b29b      	uxth	r3, r3
 800fd5e:	4618      	mov	r0, r3
 800fd60:	f7fa f8d4 	bl	8009f0c <lwip_htons>
 800fd64:	4603      	mov	r3, r0
 800fd66:	b21b      	sxth	r3, r3
 800fd68:	4323      	orrs	r3, r4
 800fd6a:	b21a      	sxth	r2, r3
 800fd6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd6e:	681b      	ldr	r3, [r3, #0]
 800fd70:	68db      	ldr	r3, [r3, #12]
 800fd72:	b292      	uxth	r2, r2
 800fd74:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd7a:	b29a      	uxth	r2, r3
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fd80:	4413      	add	r3, r2
 800fd82:	b299      	uxth	r1, r3
 800fd84:	4b3c      	ldr	r3, [pc, #240]	; (800fe78 <tcp_receive+0xf14>)
 800fd86:	681b      	ldr	r3, [r3, #0]
 800fd88:	b29a      	uxth	r2, r3
 800fd8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd8c:	681b      	ldr	r3, [r3, #0]
 800fd8e:	1a8a      	subs	r2, r1, r2
 800fd90:	b292      	uxth	r2, r2
 800fd92:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800fd94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd96:	681b      	ldr	r3, [r3, #0]
 800fd98:	685a      	ldr	r2, [r3, #4]
 800fd9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd9c:	681b      	ldr	r3, [r3, #0]
 800fd9e:	891b      	ldrh	r3, [r3, #8]
 800fda0:	4619      	mov	r1, r3
 800fda2:	4610      	mov	r0, r2
 800fda4:	f7fb fbbc 	bl	800b520 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800fda8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdaa:	681b      	ldr	r3, [r3, #0]
 800fdac:	891c      	ldrh	r4, [r3, #8]
 800fdae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdb0:	681b      	ldr	r3, [r3, #0]
 800fdb2:	68db      	ldr	r3, [r3, #12]
 800fdb4:	899b      	ldrh	r3, [r3, #12]
 800fdb6:	b29b      	uxth	r3, r3
 800fdb8:	4618      	mov	r0, r3
 800fdba:	f7fa f8a7 	bl	8009f0c <lwip_htons>
 800fdbe:	4603      	mov	r3, r0
 800fdc0:	b2db      	uxtb	r3, r3
 800fdc2:	f003 0303 	and.w	r3, r3, #3
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	d001      	beq.n	800fdce <tcp_receive+0xe6a>
 800fdca:	2301      	movs	r3, #1
 800fdcc:	e000      	b.n	800fdd0 <tcp_receive+0xe6c>
 800fdce:	2300      	movs	r3, #0
 800fdd0:	4423      	add	r3, r4
 800fdd2:	b29a      	uxth	r2, r3
 800fdd4:	4b2a      	ldr	r3, [pc, #168]	; (800fe80 <tcp_receive+0xf1c>)
 800fdd6:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800fdd8:	4b29      	ldr	r3, [pc, #164]	; (800fe80 <tcp_receive+0xf1c>)
 800fdda:	881b      	ldrh	r3, [r3, #0]
 800fddc:	461a      	mov	r2, r3
 800fdde:	4b26      	ldr	r3, [pc, #152]	; (800fe78 <tcp_receive+0xf14>)
 800fde0:	681b      	ldr	r3, [r3, #0]
 800fde2:	441a      	add	r2, r3
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fde8:	6879      	ldr	r1, [r7, #4]
 800fdea:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fdec:	440b      	add	r3, r1
 800fdee:	429a      	cmp	r2, r3
 800fdf0:	d019      	beq.n	800fe26 <tcp_receive+0xec2>
 800fdf2:	4b24      	ldr	r3, [pc, #144]	; (800fe84 <tcp_receive+0xf20>)
 800fdf4:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800fdf8:	4923      	ldr	r1, [pc, #140]	; (800fe88 <tcp_receive+0xf24>)
 800fdfa:	4824      	ldr	r0, [pc, #144]	; (800fe8c <tcp_receive+0xf28>)
 800fdfc:	f004 fe5e 	bl	8014abc <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800fe00:	e011      	b.n	800fe26 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800fe02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe04:	681b      	ldr	r3, [r3, #0]
 800fe06:	63bb      	str	r3, [r7, #56]	; 0x38
 800fe08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	f47f aea4 	bne.w	800fb58 <tcp_receive+0xbf4>
 800fe10:	e00a      	b.n	800fe28 <tcp_receive+0xec4>
                break;
 800fe12:	bf00      	nop
 800fe14:	e008      	b.n	800fe28 <tcp_receive+0xec4>
                break;
 800fe16:	bf00      	nop
 800fe18:	e006      	b.n	800fe28 <tcp_receive+0xec4>
                  break;
 800fe1a:	bf00      	nop
 800fe1c:	e004      	b.n	800fe28 <tcp_receive+0xec4>
                  break;
 800fe1e:	bf00      	nop
 800fe20:	e002      	b.n	800fe28 <tcp_receive+0xec4>
                  break;
 800fe22:	bf00      	nop
 800fe24:	e000      	b.n	800fe28 <tcp_receive+0xec4>
                break;
 800fe26:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800fe28:	6878      	ldr	r0, [r7, #4]
 800fe2a:	f001 fe8b 	bl	8011b44 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800fe2e:	e003      	b.n	800fe38 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800fe30:	6878      	ldr	r0, [r7, #4]
 800fe32:	f001 fe87 	bl	8011b44 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800fe36:	e01a      	b.n	800fe6e <tcp_receive+0xf0a>
 800fe38:	e019      	b.n	800fe6e <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800fe3a:	4b0f      	ldr	r3, [pc, #60]	; (800fe78 <tcp_receive+0xf14>)
 800fe3c:	681a      	ldr	r2, [r3, #0]
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe42:	1ad3      	subs	r3, r2, r3
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	db0a      	blt.n	800fe5e <tcp_receive+0xefa>
 800fe48:	4b0b      	ldr	r3, [pc, #44]	; (800fe78 <tcp_receive+0xf14>)
 800fe4a:	681a      	ldr	r2, [r3, #0]
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe50:	6879      	ldr	r1, [r7, #4]
 800fe52:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fe54:	440b      	add	r3, r1
 800fe56:	1ad3      	subs	r3, r2, r3
 800fe58:	3301      	adds	r3, #1
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	dd07      	ble.n	800fe6e <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	8b5b      	ldrh	r3, [r3, #26]
 800fe62:	f043 0302 	orr.w	r3, r3, #2
 800fe66:	b29a      	uxth	r2, r3
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800fe6c:	e7ff      	b.n	800fe6e <tcp_receive+0xf0a>
 800fe6e:	bf00      	nop
 800fe70:	3750      	adds	r7, #80	; 0x50
 800fe72:	46bd      	mov	sp, r7
 800fe74:	bdb0      	pop	{r4, r5, r7, pc}
 800fe76:	bf00      	nop
 800fe78:	24000578 	.word	0x24000578
 800fe7c:	24000558 	.word	0x24000558
 800fe80:	24000582 	.word	0x24000582
 800fe84:	080174ac 	.word	0x080174ac
 800fe88:	08017854 	.word	0x08017854
 800fe8c:	080174f8 	.word	0x080174f8

0800fe90 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800fe90:	b480      	push	{r7}
 800fe92:	b083      	sub	sp, #12
 800fe94:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800fe96:	4b15      	ldr	r3, [pc, #84]	; (800feec <tcp_get_next_optbyte+0x5c>)
 800fe98:	881b      	ldrh	r3, [r3, #0]
 800fe9a:	1c5a      	adds	r2, r3, #1
 800fe9c:	b291      	uxth	r1, r2
 800fe9e:	4a13      	ldr	r2, [pc, #76]	; (800feec <tcp_get_next_optbyte+0x5c>)
 800fea0:	8011      	strh	r1, [r2, #0]
 800fea2:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800fea4:	4b12      	ldr	r3, [pc, #72]	; (800fef0 <tcp_get_next_optbyte+0x60>)
 800fea6:	681b      	ldr	r3, [r3, #0]
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	d004      	beq.n	800feb6 <tcp_get_next_optbyte+0x26>
 800feac:	4b11      	ldr	r3, [pc, #68]	; (800fef4 <tcp_get_next_optbyte+0x64>)
 800feae:	881b      	ldrh	r3, [r3, #0]
 800feb0:	88fa      	ldrh	r2, [r7, #6]
 800feb2:	429a      	cmp	r2, r3
 800feb4:	d208      	bcs.n	800fec8 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800feb6:	4b10      	ldr	r3, [pc, #64]	; (800fef8 <tcp_get_next_optbyte+0x68>)
 800feb8:	681b      	ldr	r3, [r3, #0]
 800feba:	3314      	adds	r3, #20
 800febc:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800febe:	88fb      	ldrh	r3, [r7, #6]
 800fec0:	683a      	ldr	r2, [r7, #0]
 800fec2:	4413      	add	r3, r2
 800fec4:	781b      	ldrb	r3, [r3, #0]
 800fec6:	e00b      	b.n	800fee0 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800fec8:	88fb      	ldrh	r3, [r7, #6]
 800feca:	b2da      	uxtb	r2, r3
 800fecc:	4b09      	ldr	r3, [pc, #36]	; (800fef4 <tcp_get_next_optbyte+0x64>)
 800fece:	881b      	ldrh	r3, [r3, #0]
 800fed0:	b2db      	uxtb	r3, r3
 800fed2:	1ad3      	subs	r3, r2, r3
 800fed4:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800fed6:	4b06      	ldr	r3, [pc, #24]	; (800fef0 <tcp_get_next_optbyte+0x60>)
 800fed8:	681a      	ldr	r2, [r3, #0]
 800feda:	797b      	ldrb	r3, [r7, #5]
 800fedc:	4413      	add	r3, r2
 800fede:	781b      	ldrb	r3, [r3, #0]
  }
}
 800fee0:	4618      	mov	r0, r3
 800fee2:	370c      	adds	r7, #12
 800fee4:	46bd      	mov	sp, r7
 800fee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feea:	4770      	bx	lr
 800feec:	24000574 	.word	0x24000574
 800fef0:	24000570 	.word	0x24000570
 800fef4:	2400056e 	.word	0x2400056e
 800fef8:	24000568 	.word	0x24000568

0800fefc <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800fefc:	b580      	push	{r7, lr}
 800fefe:	b084      	sub	sp, #16
 800ff00:	af00      	add	r7, sp, #0
 800ff02:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	d106      	bne.n	800ff18 <tcp_parseopt+0x1c>
 800ff0a:	4b32      	ldr	r3, [pc, #200]	; (800ffd4 <tcp_parseopt+0xd8>)
 800ff0c:	f240 727d 	movw	r2, #1917	; 0x77d
 800ff10:	4931      	ldr	r1, [pc, #196]	; (800ffd8 <tcp_parseopt+0xdc>)
 800ff12:	4832      	ldr	r0, [pc, #200]	; (800ffdc <tcp_parseopt+0xe0>)
 800ff14:	f004 fdd2 	bl	8014abc <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800ff18:	4b31      	ldr	r3, [pc, #196]	; (800ffe0 <tcp_parseopt+0xe4>)
 800ff1a:	881b      	ldrh	r3, [r3, #0]
 800ff1c:	2b00      	cmp	r3, #0
 800ff1e:	d055      	beq.n	800ffcc <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800ff20:	4b30      	ldr	r3, [pc, #192]	; (800ffe4 <tcp_parseopt+0xe8>)
 800ff22:	2200      	movs	r2, #0
 800ff24:	801a      	strh	r2, [r3, #0]
 800ff26:	e045      	b.n	800ffb4 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800ff28:	f7ff ffb2 	bl	800fe90 <tcp_get_next_optbyte>
 800ff2c:	4603      	mov	r3, r0
 800ff2e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800ff30:	7bfb      	ldrb	r3, [r7, #15]
 800ff32:	2b02      	cmp	r3, #2
 800ff34:	d006      	beq.n	800ff44 <tcp_parseopt+0x48>
 800ff36:	2b02      	cmp	r3, #2
 800ff38:	dc2b      	bgt.n	800ff92 <tcp_parseopt+0x96>
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	d041      	beq.n	800ffc2 <tcp_parseopt+0xc6>
 800ff3e:	2b01      	cmp	r3, #1
 800ff40:	d127      	bne.n	800ff92 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800ff42:	e037      	b.n	800ffb4 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800ff44:	f7ff ffa4 	bl	800fe90 <tcp_get_next_optbyte>
 800ff48:	4603      	mov	r3, r0
 800ff4a:	2b04      	cmp	r3, #4
 800ff4c:	d13b      	bne.n	800ffc6 <tcp_parseopt+0xca>
 800ff4e:	4b25      	ldr	r3, [pc, #148]	; (800ffe4 <tcp_parseopt+0xe8>)
 800ff50:	881b      	ldrh	r3, [r3, #0]
 800ff52:	3301      	adds	r3, #1
 800ff54:	4a22      	ldr	r2, [pc, #136]	; (800ffe0 <tcp_parseopt+0xe4>)
 800ff56:	8812      	ldrh	r2, [r2, #0]
 800ff58:	4293      	cmp	r3, r2
 800ff5a:	da34      	bge.n	800ffc6 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800ff5c:	f7ff ff98 	bl	800fe90 <tcp_get_next_optbyte>
 800ff60:	4603      	mov	r3, r0
 800ff62:	b29b      	uxth	r3, r3
 800ff64:	021b      	lsls	r3, r3, #8
 800ff66:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800ff68:	f7ff ff92 	bl	800fe90 <tcp_get_next_optbyte>
 800ff6c:	4603      	mov	r3, r0
 800ff6e:	b29a      	uxth	r2, r3
 800ff70:	89bb      	ldrh	r3, [r7, #12]
 800ff72:	4313      	orrs	r3, r2
 800ff74:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800ff76:	89bb      	ldrh	r3, [r7, #12]
 800ff78:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800ff7c:	d804      	bhi.n	800ff88 <tcp_parseopt+0x8c>
 800ff7e:	89bb      	ldrh	r3, [r7, #12]
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d001      	beq.n	800ff88 <tcp_parseopt+0x8c>
 800ff84:	89ba      	ldrh	r2, [r7, #12]
 800ff86:	e001      	b.n	800ff8c <tcp_parseopt+0x90>
 800ff88:	f44f 7206 	mov.w	r2, #536	; 0x218
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800ff90:	e010      	b.n	800ffb4 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800ff92:	f7ff ff7d 	bl	800fe90 <tcp_get_next_optbyte>
 800ff96:	4603      	mov	r3, r0
 800ff98:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800ff9a:	7afb      	ldrb	r3, [r7, #11]
 800ff9c:	2b01      	cmp	r3, #1
 800ff9e:	d914      	bls.n	800ffca <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800ffa0:	7afb      	ldrb	r3, [r7, #11]
 800ffa2:	b29a      	uxth	r2, r3
 800ffa4:	4b0f      	ldr	r3, [pc, #60]	; (800ffe4 <tcp_parseopt+0xe8>)
 800ffa6:	881b      	ldrh	r3, [r3, #0]
 800ffa8:	4413      	add	r3, r2
 800ffaa:	b29b      	uxth	r3, r3
 800ffac:	3b02      	subs	r3, #2
 800ffae:	b29a      	uxth	r2, r3
 800ffb0:	4b0c      	ldr	r3, [pc, #48]	; (800ffe4 <tcp_parseopt+0xe8>)
 800ffb2:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800ffb4:	4b0b      	ldr	r3, [pc, #44]	; (800ffe4 <tcp_parseopt+0xe8>)
 800ffb6:	881a      	ldrh	r2, [r3, #0]
 800ffb8:	4b09      	ldr	r3, [pc, #36]	; (800ffe0 <tcp_parseopt+0xe4>)
 800ffba:	881b      	ldrh	r3, [r3, #0]
 800ffbc:	429a      	cmp	r2, r3
 800ffbe:	d3b3      	bcc.n	800ff28 <tcp_parseopt+0x2c>
 800ffc0:	e004      	b.n	800ffcc <tcp_parseopt+0xd0>
          return;
 800ffc2:	bf00      	nop
 800ffc4:	e002      	b.n	800ffcc <tcp_parseopt+0xd0>
            return;
 800ffc6:	bf00      	nop
 800ffc8:	e000      	b.n	800ffcc <tcp_parseopt+0xd0>
            return;
 800ffca:	bf00      	nop
      }
    }
  }
}
 800ffcc:	3710      	adds	r7, #16
 800ffce:	46bd      	mov	sp, r7
 800ffd0:	bd80      	pop	{r7, pc}
 800ffd2:	bf00      	nop
 800ffd4:	080174ac 	.word	0x080174ac
 800ffd8:	08017910 	.word	0x08017910
 800ffdc:	080174f8 	.word	0x080174f8
 800ffe0:	2400056c 	.word	0x2400056c
 800ffe4:	24000574 	.word	0x24000574

0800ffe8 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800ffe8:	b480      	push	{r7}
 800ffea:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800ffec:	4b05      	ldr	r3, [pc, #20]	; (8010004 <tcp_trigger_input_pcb_close+0x1c>)
 800ffee:	781b      	ldrb	r3, [r3, #0]
 800fff0:	f043 0310 	orr.w	r3, r3, #16
 800fff4:	b2da      	uxtb	r2, r3
 800fff6:	4b03      	ldr	r3, [pc, #12]	; (8010004 <tcp_trigger_input_pcb_close+0x1c>)
 800fff8:	701a      	strb	r2, [r3, #0]
}
 800fffa:	bf00      	nop
 800fffc:	46bd      	mov	sp, r7
 800fffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010002:	4770      	bx	lr
 8010004:	24000585 	.word	0x24000585

08010008 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8010008:	b580      	push	{r7, lr}
 801000a:	b084      	sub	sp, #16
 801000c:	af00      	add	r7, sp, #0
 801000e:	60f8      	str	r0, [r7, #12]
 8010010:	60b9      	str	r1, [r7, #8]
 8010012:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8010014:	68fb      	ldr	r3, [r7, #12]
 8010016:	2b00      	cmp	r3, #0
 8010018:	d00a      	beq.n	8010030 <tcp_route+0x28>
 801001a:	68fb      	ldr	r3, [r7, #12]
 801001c:	7a1b      	ldrb	r3, [r3, #8]
 801001e:	2b00      	cmp	r3, #0
 8010020:	d006      	beq.n	8010030 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8010022:	68fb      	ldr	r3, [r7, #12]
 8010024:	7a1b      	ldrb	r3, [r3, #8]
 8010026:	4618      	mov	r0, r3
 8010028:	f7fb f8a0 	bl	800b16c <netif_get_by_index>
 801002c:	4603      	mov	r3, r0
 801002e:	e003      	b.n	8010038 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8010030:	6878      	ldr	r0, [r7, #4]
 8010032:	f003 fafb 	bl	801362c <ip4_route>
 8010036:	4603      	mov	r3, r0
  }
}
 8010038:	4618      	mov	r0, r3
 801003a:	3710      	adds	r7, #16
 801003c:	46bd      	mov	sp, r7
 801003e:	bd80      	pop	{r7, pc}

08010040 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8010040:	b590      	push	{r4, r7, lr}
 8010042:	b087      	sub	sp, #28
 8010044:	af00      	add	r7, sp, #0
 8010046:	60f8      	str	r0, [r7, #12]
 8010048:	60b9      	str	r1, [r7, #8]
 801004a:	603b      	str	r3, [r7, #0]
 801004c:	4613      	mov	r3, r2
 801004e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8010050:	68fb      	ldr	r3, [r7, #12]
 8010052:	2b00      	cmp	r3, #0
 8010054:	d105      	bne.n	8010062 <tcp_create_segment+0x22>
 8010056:	4b44      	ldr	r3, [pc, #272]	; (8010168 <tcp_create_segment+0x128>)
 8010058:	22a3      	movs	r2, #163	; 0xa3
 801005a:	4944      	ldr	r1, [pc, #272]	; (801016c <tcp_create_segment+0x12c>)
 801005c:	4844      	ldr	r0, [pc, #272]	; (8010170 <tcp_create_segment+0x130>)
 801005e:	f004 fd2d 	bl	8014abc <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8010062:	68bb      	ldr	r3, [r7, #8]
 8010064:	2b00      	cmp	r3, #0
 8010066:	d105      	bne.n	8010074 <tcp_create_segment+0x34>
 8010068:	4b3f      	ldr	r3, [pc, #252]	; (8010168 <tcp_create_segment+0x128>)
 801006a:	22a4      	movs	r2, #164	; 0xa4
 801006c:	4941      	ldr	r1, [pc, #260]	; (8010174 <tcp_create_segment+0x134>)
 801006e:	4840      	ldr	r0, [pc, #256]	; (8010170 <tcp_create_segment+0x130>)
 8010070:	f004 fd24 	bl	8014abc <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010074:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010078:	009b      	lsls	r3, r3, #2
 801007a:	b2db      	uxtb	r3, r3
 801007c:	f003 0304 	and.w	r3, r3, #4
 8010080:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8010082:	2003      	movs	r0, #3
 8010084:	f7fa fcec 	bl	800aa60 <memp_malloc>
 8010088:	6138      	str	r0, [r7, #16]
 801008a:	693b      	ldr	r3, [r7, #16]
 801008c:	2b00      	cmp	r3, #0
 801008e:	d104      	bne.n	801009a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8010090:	68b8      	ldr	r0, [r7, #8]
 8010092:	f7fb fbcb 	bl	800b82c <pbuf_free>
    return NULL;
 8010096:	2300      	movs	r3, #0
 8010098:	e061      	b.n	801015e <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 801009a:	693b      	ldr	r3, [r7, #16]
 801009c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80100a0:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 80100a2:	693b      	ldr	r3, [r7, #16]
 80100a4:	2200      	movs	r2, #0
 80100a6:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80100a8:	693b      	ldr	r3, [r7, #16]
 80100aa:	68ba      	ldr	r2, [r7, #8]
 80100ac:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80100ae:	68bb      	ldr	r3, [r7, #8]
 80100b0:	891a      	ldrh	r2, [r3, #8]
 80100b2:	7dfb      	ldrb	r3, [r7, #23]
 80100b4:	b29b      	uxth	r3, r3
 80100b6:	429a      	cmp	r2, r3
 80100b8:	d205      	bcs.n	80100c6 <tcp_create_segment+0x86>
 80100ba:	4b2b      	ldr	r3, [pc, #172]	; (8010168 <tcp_create_segment+0x128>)
 80100bc:	22b0      	movs	r2, #176	; 0xb0
 80100be:	492e      	ldr	r1, [pc, #184]	; (8010178 <tcp_create_segment+0x138>)
 80100c0:	482b      	ldr	r0, [pc, #172]	; (8010170 <tcp_create_segment+0x130>)
 80100c2:	f004 fcfb 	bl	8014abc <iprintf>
  seg->len = p->tot_len - optlen;
 80100c6:	68bb      	ldr	r3, [r7, #8]
 80100c8:	891a      	ldrh	r2, [r3, #8]
 80100ca:	7dfb      	ldrb	r3, [r7, #23]
 80100cc:	b29b      	uxth	r3, r3
 80100ce:	1ad3      	subs	r3, r2, r3
 80100d0:	b29a      	uxth	r2, r3
 80100d2:	693b      	ldr	r3, [r7, #16]
 80100d4:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 80100d6:	2114      	movs	r1, #20
 80100d8:	68b8      	ldr	r0, [r7, #8]
 80100da:	f7fb fb11 	bl	800b700 <pbuf_add_header>
 80100de:	4603      	mov	r3, r0
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	d004      	beq.n	80100ee <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80100e4:	6938      	ldr	r0, [r7, #16]
 80100e6:	f7fc ffde 	bl	800d0a6 <tcp_seg_free>
    return NULL;
 80100ea:	2300      	movs	r3, #0
 80100ec:	e037      	b.n	801015e <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80100ee:	693b      	ldr	r3, [r7, #16]
 80100f0:	685b      	ldr	r3, [r3, #4]
 80100f2:	685a      	ldr	r2, [r3, #4]
 80100f4:	693b      	ldr	r3, [r7, #16]
 80100f6:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80100f8:	68fb      	ldr	r3, [r7, #12]
 80100fa:	8ada      	ldrh	r2, [r3, #22]
 80100fc:	693b      	ldr	r3, [r7, #16]
 80100fe:	68dc      	ldr	r4, [r3, #12]
 8010100:	4610      	mov	r0, r2
 8010102:	f7f9 ff03 	bl	8009f0c <lwip_htons>
 8010106:	4603      	mov	r3, r0
 8010108:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801010a:	68fb      	ldr	r3, [r7, #12]
 801010c:	8b1a      	ldrh	r2, [r3, #24]
 801010e:	693b      	ldr	r3, [r7, #16]
 8010110:	68dc      	ldr	r4, [r3, #12]
 8010112:	4610      	mov	r0, r2
 8010114:	f7f9 fefa 	bl	8009f0c <lwip_htons>
 8010118:	4603      	mov	r3, r0
 801011a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801011c:	693b      	ldr	r3, [r7, #16]
 801011e:	68dc      	ldr	r4, [r3, #12]
 8010120:	6838      	ldr	r0, [r7, #0]
 8010122:	f7f9 ff08 	bl	8009f36 <lwip_htonl>
 8010126:	4603      	mov	r3, r0
 8010128:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801012a:	7dfb      	ldrb	r3, [r7, #23]
 801012c:	089b      	lsrs	r3, r3, #2
 801012e:	b2db      	uxtb	r3, r3
 8010130:	b29b      	uxth	r3, r3
 8010132:	3305      	adds	r3, #5
 8010134:	b29b      	uxth	r3, r3
 8010136:	031b      	lsls	r3, r3, #12
 8010138:	b29a      	uxth	r2, r3
 801013a:	79fb      	ldrb	r3, [r7, #7]
 801013c:	b29b      	uxth	r3, r3
 801013e:	4313      	orrs	r3, r2
 8010140:	b29a      	uxth	r2, r3
 8010142:	693b      	ldr	r3, [r7, #16]
 8010144:	68dc      	ldr	r4, [r3, #12]
 8010146:	4610      	mov	r0, r2
 8010148:	f7f9 fee0 	bl	8009f0c <lwip_htons>
 801014c:	4603      	mov	r3, r0
 801014e:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8010150:	693b      	ldr	r3, [r7, #16]
 8010152:	68db      	ldr	r3, [r3, #12]
 8010154:	2200      	movs	r2, #0
 8010156:	749a      	strb	r2, [r3, #18]
 8010158:	2200      	movs	r2, #0
 801015a:	74da      	strb	r2, [r3, #19]
  return seg;
 801015c:	693b      	ldr	r3, [r7, #16]
}
 801015e:	4618      	mov	r0, r3
 8010160:	371c      	adds	r7, #28
 8010162:	46bd      	mov	sp, r7
 8010164:	bd90      	pop	{r4, r7, pc}
 8010166:	bf00      	nop
 8010168:	0801792c 	.word	0x0801792c
 801016c:	08017960 	.word	0x08017960
 8010170:	08017980 	.word	0x08017980
 8010174:	080179a8 	.word	0x080179a8
 8010178:	080179cc 	.word	0x080179cc

0801017c <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 801017c:	b580      	push	{r7, lr}
 801017e:	b086      	sub	sp, #24
 8010180:	af00      	add	r7, sp, #0
 8010182:	607b      	str	r3, [r7, #4]
 8010184:	4603      	mov	r3, r0
 8010186:	73fb      	strb	r3, [r7, #15]
 8010188:	460b      	mov	r3, r1
 801018a:	81bb      	strh	r3, [r7, #12]
 801018c:	4613      	mov	r3, r2
 801018e:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8010190:	89bb      	ldrh	r3, [r7, #12]
 8010192:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	2b00      	cmp	r3, #0
 8010198:	d105      	bne.n	80101a6 <tcp_pbuf_prealloc+0x2a>
 801019a:	4b30      	ldr	r3, [pc, #192]	; (801025c <tcp_pbuf_prealloc+0xe0>)
 801019c:	22e8      	movs	r2, #232	; 0xe8
 801019e:	4930      	ldr	r1, [pc, #192]	; (8010260 <tcp_pbuf_prealloc+0xe4>)
 80101a0:	4830      	ldr	r0, [pc, #192]	; (8010264 <tcp_pbuf_prealloc+0xe8>)
 80101a2:	f004 fc8b 	bl	8014abc <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 80101a6:	6a3b      	ldr	r3, [r7, #32]
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	d105      	bne.n	80101b8 <tcp_pbuf_prealloc+0x3c>
 80101ac:	4b2b      	ldr	r3, [pc, #172]	; (801025c <tcp_pbuf_prealloc+0xe0>)
 80101ae:	22e9      	movs	r2, #233	; 0xe9
 80101b0:	492d      	ldr	r1, [pc, #180]	; (8010268 <tcp_pbuf_prealloc+0xec>)
 80101b2:	482c      	ldr	r0, [pc, #176]	; (8010264 <tcp_pbuf_prealloc+0xe8>)
 80101b4:	f004 fc82 	bl	8014abc <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 80101b8:	89ba      	ldrh	r2, [r7, #12]
 80101ba:	897b      	ldrh	r3, [r7, #10]
 80101bc:	429a      	cmp	r2, r3
 80101be:	d221      	bcs.n	8010204 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80101c0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80101c4:	f003 0302 	and.w	r3, r3, #2
 80101c8:	2b00      	cmp	r3, #0
 80101ca:	d111      	bne.n	80101f0 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 80101cc:	6a3b      	ldr	r3, [r7, #32]
 80101ce:	8b5b      	ldrh	r3, [r3, #26]
 80101d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	d115      	bne.n	8010204 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 80101d8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80101dc:	2b00      	cmp	r3, #0
 80101de:	d007      	beq.n	80101f0 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 80101e0:	6a3b      	ldr	r3, [r7, #32]
 80101e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 80101e4:	2b00      	cmp	r3, #0
 80101e6:	d103      	bne.n	80101f0 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 80101e8:	6a3b      	ldr	r3, [r7, #32]
 80101ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	d009      	beq.n	8010204 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 80101f0:	89bb      	ldrh	r3, [r7, #12]
 80101f2:	f203 231b 	addw	r3, r3, #539	; 0x21b
 80101f6:	f023 0203 	bic.w	r2, r3, #3
 80101fa:	897b      	ldrh	r3, [r7, #10]
 80101fc:	4293      	cmp	r3, r2
 80101fe:	bf28      	it	cs
 8010200:	4613      	movcs	r3, r2
 8010202:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8010204:	8af9      	ldrh	r1, [r7, #22]
 8010206:	7bfb      	ldrb	r3, [r7, #15]
 8010208:	f44f 7220 	mov.w	r2, #640	; 0x280
 801020c:	4618      	mov	r0, r3
 801020e:	f7fb f829 	bl	800b264 <pbuf_alloc>
 8010212:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010214:	693b      	ldr	r3, [r7, #16]
 8010216:	2b00      	cmp	r3, #0
 8010218:	d101      	bne.n	801021e <tcp_pbuf_prealloc+0xa2>
    return NULL;
 801021a:	2300      	movs	r3, #0
 801021c:	e019      	b.n	8010252 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 801021e:	693b      	ldr	r3, [r7, #16]
 8010220:	681b      	ldr	r3, [r3, #0]
 8010222:	2b00      	cmp	r3, #0
 8010224:	d006      	beq.n	8010234 <tcp_pbuf_prealloc+0xb8>
 8010226:	4b0d      	ldr	r3, [pc, #52]	; (801025c <tcp_pbuf_prealloc+0xe0>)
 8010228:	f240 120b 	movw	r2, #267	; 0x10b
 801022c:	490f      	ldr	r1, [pc, #60]	; (801026c <tcp_pbuf_prealloc+0xf0>)
 801022e:	480d      	ldr	r0, [pc, #52]	; (8010264 <tcp_pbuf_prealloc+0xe8>)
 8010230:	f004 fc44 	bl	8014abc <iprintf>
  *oversize = p->len - length;
 8010234:	693b      	ldr	r3, [r7, #16]
 8010236:	895a      	ldrh	r2, [r3, #10]
 8010238:	89bb      	ldrh	r3, [r7, #12]
 801023a:	1ad3      	subs	r3, r2, r3
 801023c:	b29a      	uxth	r2, r3
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8010242:	693b      	ldr	r3, [r7, #16]
 8010244:	89ba      	ldrh	r2, [r7, #12]
 8010246:	811a      	strh	r2, [r3, #8]
 8010248:	693b      	ldr	r3, [r7, #16]
 801024a:	891a      	ldrh	r2, [r3, #8]
 801024c:	693b      	ldr	r3, [r7, #16]
 801024e:	815a      	strh	r2, [r3, #10]
  return p;
 8010250:	693b      	ldr	r3, [r7, #16]
}
 8010252:	4618      	mov	r0, r3
 8010254:	3718      	adds	r7, #24
 8010256:	46bd      	mov	sp, r7
 8010258:	bd80      	pop	{r7, pc}
 801025a:	bf00      	nop
 801025c:	0801792c 	.word	0x0801792c
 8010260:	080179e4 	.word	0x080179e4
 8010264:	08017980 	.word	0x08017980
 8010268:	08017a08 	.word	0x08017a08
 801026c:	08017a28 	.word	0x08017a28

08010270 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8010270:	b580      	push	{r7, lr}
 8010272:	b082      	sub	sp, #8
 8010274:	af00      	add	r7, sp, #0
 8010276:	6078      	str	r0, [r7, #4]
 8010278:	460b      	mov	r3, r1
 801027a:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	2b00      	cmp	r3, #0
 8010280:	d106      	bne.n	8010290 <tcp_write_checks+0x20>
 8010282:	4b33      	ldr	r3, [pc, #204]	; (8010350 <tcp_write_checks+0xe0>)
 8010284:	f240 1233 	movw	r2, #307	; 0x133
 8010288:	4932      	ldr	r1, [pc, #200]	; (8010354 <tcp_write_checks+0xe4>)
 801028a:	4833      	ldr	r0, [pc, #204]	; (8010358 <tcp_write_checks+0xe8>)
 801028c:	f004 fc16 	bl	8014abc <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	7d1b      	ldrb	r3, [r3, #20]
 8010294:	2b04      	cmp	r3, #4
 8010296:	d00e      	beq.n	80102b6 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 801029c:	2b07      	cmp	r3, #7
 801029e:	d00a      	beq.n	80102b6 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 80102a4:	2b02      	cmp	r3, #2
 80102a6:	d006      	beq.n	80102b6 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 80102ac:	2b03      	cmp	r3, #3
 80102ae:	d002      	beq.n	80102b6 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 80102b0:	f06f 030a 	mvn.w	r3, #10
 80102b4:	e048      	b.n	8010348 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 80102b6:	887b      	ldrh	r3, [r7, #2]
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	d101      	bne.n	80102c0 <tcp_write_checks+0x50>
    return ERR_OK;
 80102bc:	2300      	movs	r3, #0
 80102be:	e043      	b.n	8010348 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80102c6:	887a      	ldrh	r2, [r7, #2]
 80102c8:	429a      	cmp	r2, r3
 80102ca:	d909      	bls.n	80102e0 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	8b5b      	ldrh	r3, [r3, #26]
 80102d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80102d4:	b29a      	uxth	r2, r3
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80102da:	f04f 33ff 	mov.w	r3, #4294967295
 80102de:	e033      	b.n	8010348 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80102e6:	2b08      	cmp	r3, #8
 80102e8:	d909      	bls.n	80102fe <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	8b5b      	ldrh	r3, [r3, #26]
 80102ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80102f2:	b29a      	uxth	r2, r3
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80102f8:	f04f 33ff 	mov.w	r3, #4294967295
 80102fc:	e024      	b.n	8010348 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010304:	2b00      	cmp	r3, #0
 8010306:	d00f      	beq.n	8010328 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801030c:	2b00      	cmp	r3, #0
 801030e:	d11a      	bne.n	8010346 <tcp_write_checks+0xd6>
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010314:	2b00      	cmp	r3, #0
 8010316:	d116      	bne.n	8010346 <tcp_write_checks+0xd6>
 8010318:	4b0d      	ldr	r3, [pc, #52]	; (8010350 <tcp_write_checks+0xe0>)
 801031a:	f240 1255 	movw	r2, #341	; 0x155
 801031e:	490f      	ldr	r1, [pc, #60]	; (801035c <tcp_write_checks+0xec>)
 8010320:	480d      	ldr	r0, [pc, #52]	; (8010358 <tcp_write_checks+0xe8>)
 8010322:	f004 fbcb 	bl	8014abc <iprintf>
 8010326:	e00e      	b.n	8010346 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801032c:	2b00      	cmp	r3, #0
 801032e:	d103      	bne.n	8010338 <tcp_write_checks+0xc8>
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010334:	2b00      	cmp	r3, #0
 8010336:	d006      	beq.n	8010346 <tcp_write_checks+0xd6>
 8010338:	4b05      	ldr	r3, [pc, #20]	; (8010350 <tcp_write_checks+0xe0>)
 801033a:	f44f 72ac 	mov.w	r2, #344	; 0x158
 801033e:	4908      	ldr	r1, [pc, #32]	; (8010360 <tcp_write_checks+0xf0>)
 8010340:	4805      	ldr	r0, [pc, #20]	; (8010358 <tcp_write_checks+0xe8>)
 8010342:	f004 fbbb 	bl	8014abc <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8010346:	2300      	movs	r3, #0
}
 8010348:	4618      	mov	r0, r3
 801034a:	3708      	adds	r7, #8
 801034c:	46bd      	mov	sp, r7
 801034e:	bd80      	pop	{r7, pc}
 8010350:	0801792c 	.word	0x0801792c
 8010354:	08017a3c 	.word	0x08017a3c
 8010358:	08017980 	.word	0x08017980
 801035c:	08017a5c 	.word	0x08017a5c
 8010360:	08017a98 	.word	0x08017a98

08010364 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8010364:	b590      	push	{r4, r7, lr}
 8010366:	b09b      	sub	sp, #108	; 0x6c
 8010368:	af04      	add	r7, sp, #16
 801036a:	60f8      	str	r0, [r7, #12]
 801036c:	60b9      	str	r1, [r7, #8]
 801036e:	4611      	mov	r1, r2
 8010370:	461a      	mov	r2, r3
 8010372:	460b      	mov	r3, r1
 8010374:	80fb      	strh	r3, [r7, #6]
 8010376:	4613      	mov	r3, r2
 8010378:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801037a:	2300      	movs	r3, #0
 801037c:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801037e:	2300      	movs	r3, #0
 8010380:	653b      	str	r3, [r7, #80]	; 0x50
 8010382:	2300      	movs	r3, #0
 8010384:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010386:	2300      	movs	r3, #0
 8010388:	64bb      	str	r3, [r7, #72]	; 0x48
 801038a:	2300      	movs	r3, #0
 801038c:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 801038e:	2300      	movs	r3, #0
 8010390:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8010394:	2300      	movs	r3, #0
 8010396:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801039a:	2300      	movs	r3, #0
 801039c:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 801039e:	2300      	movs	r3, #0
 80103a0:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 80103a2:	2300      	movs	r3, #0
 80103a4:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 80103a6:	68fb      	ldr	r3, [r7, #12]
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	d109      	bne.n	80103c0 <tcp_write+0x5c>
 80103ac:	4ba4      	ldr	r3, [pc, #656]	; (8010640 <tcp_write+0x2dc>)
 80103ae:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 80103b2:	49a4      	ldr	r1, [pc, #656]	; (8010644 <tcp_write+0x2e0>)
 80103b4:	48a4      	ldr	r0, [pc, #656]	; (8010648 <tcp_write+0x2e4>)
 80103b6:	f004 fb81 	bl	8014abc <iprintf>
 80103ba:	f06f 030f 	mvn.w	r3, #15
 80103be:	e32a      	b.n	8010a16 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 80103c0:	68fb      	ldr	r3, [r7, #12]
 80103c2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80103c6:	085b      	lsrs	r3, r3, #1
 80103c8:	b29a      	uxth	r2, r3
 80103ca:	68fb      	ldr	r3, [r7, #12]
 80103cc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80103ce:	4293      	cmp	r3, r2
 80103d0:	bf28      	it	cs
 80103d2:	4613      	movcs	r3, r2
 80103d4:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 80103d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80103d8:	2b00      	cmp	r3, #0
 80103da:	d102      	bne.n	80103e2 <tcp_write+0x7e>
 80103dc:	68fb      	ldr	r3, [r7, #12]
 80103de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80103e0:	e000      	b.n	80103e4 <tcp_write+0x80>
 80103e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80103e4:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 80103e6:	68bb      	ldr	r3, [r7, #8]
 80103e8:	2b00      	cmp	r3, #0
 80103ea:	d109      	bne.n	8010400 <tcp_write+0x9c>
 80103ec:	4b94      	ldr	r3, [pc, #592]	; (8010640 <tcp_write+0x2dc>)
 80103ee:	f240 12ad 	movw	r2, #429	; 0x1ad
 80103f2:	4996      	ldr	r1, [pc, #600]	; (801064c <tcp_write+0x2e8>)
 80103f4:	4894      	ldr	r0, [pc, #592]	; (8010648 <tcp_write+0x2e4>)
 80103f6:	f004 fb61 	bl	8014abc <iprintf>
 80103fa:	f06f 030f 	mvn.w	r3, #15
 80103fe:	e30a      	b.n	8010a16 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8010400:	88fb      	ldrh	r3, [r7, #6]
 8010402:	4619      	mov	r1, r3
 8010404:	68f8      	ldr	r0, [r7, #12]
 8010406:	f7ff ff33 	bl	8010270 <tcp_write_checks>
 801040a:	4603      	mov	r3, r0
 801040c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8010410:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8010414:	2b00      	cmp	r3, #0
 8010416:	d002      	beq.n	801041e <tcp_write+0xba>
    return err;
 8010418:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 801041c:	e2fb      	b.n	8010a16 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 801041e:	68fb      	ldr	r3, [r7, #12]
 8010420:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010424:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8010428:	2300      	movs	r3, #0
 801042a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 801042e:	68fb      	ldr	r3, [r7, #12]
 8010430:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010432:	2b00      	cmp	r3, #0
 8010434:	f000 80f6 	beq.w	8010624 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010438:	68fb      	ldr	r3, [r7, #12]
 801043a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801043c:	653b      	str	r3, [r7, #80]	; 0x50
 801043e:	e002      	b.n	8010446 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8010440:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010442:	681b      	ldr	r3, [r3, #0]
 8010444:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010446:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010448:	681b      	ldr	r3, [r3, #0]
 801044a:	2b00      	cmp	r3, #0
 801044c:	d1f8      	bne.n	8010440 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801044e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010450:	7a9b      	ldrb	r3, [r3, #10]
 8010452:	009b      	lsls	r3, r3, #2
 8010454:	b29b      	uxth	r3, r3
 8010456:	f003 0304 	and.w	r3, r3, #4
 801045a:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801045c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801045e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010460:	891b      	ldrh	r3, [r3, #8]
 8010462:	4619      	mov	r1, r3
 8010464:	8c3b      	ldrh	r3, [r7, #32]
 8010466:	440b      	add	r3, r1
 8010468:	429a      	cmp	r2, r3
 801046a:	da06      	bge.n	801047a <tcp_write+0x116>
 801046c:	4b74      	ldr	r3, [pc, #464]	; (8010640 <tcp_write+0x2dc>)
 801046e:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8010472:	4977      	ldr	r1, [pc, #476]	; (8010650 <tcp_write+0x2ec>)
 8010474:	4874      	ldr	r0, [pc, #464]	; (8010648 <tcp_write+0x2e4>)
 8010476:	f004 fb21 	bl	8014abc <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801047a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801047c:	891a      	ldrh	r2, [r3, #8]
 801047e:	8c3b      	ldrh	r3, [r7, #32]
 8010480:	4413      	add	r3, r2
 8010482:	b29b      	uxth	r3, r3
 8010484:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010486:	1ad3      	subs	r3, r2, r3
 8010488:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801048a:	68fb      	ldr	r3, [r7, #12]
 801048c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010490:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8010492:	8a7b      	ldrh	r3, [r7, #18]
 8010494:	2b00      	cmp	r3, #0
 8010496:	d026      	beq.n	80104e6 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8010498:	8a7b      	ldrh	r3, [r7, #18]
 801049a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801049c:	429a      	cmp	r2, r3
 801049e:	d206      	bcs.n	80104ae <tcp_write+0x14a>
 80104a0:	4b67      	ldr	r3, [pc, #412]	; (8010640 <tcp_write+0x2dc>)
 80104a2:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 80104a6:	496b      	ldr	r1, [pc, #428]	; (8010654 <tcp_write+0x2f0>)
 80104a8:	4867      	ldr	r0, [pc, #412]	; (8010648 <tcp_write+0x2e4>)
 80104aa:	f004 fb07 	bl	8014abc <iprintf>
      seg = last_unsent;
 80104ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80104b0:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 80104b2:	8a7b      	ldrh	r3, [r7, #18]
 80104b4:	88fa      	ldrh	r2, [r7, #6]
 80104b6:	4293      	cmp	r3, r2
 80104b8:	bf28      	it	cs
 80104ba:	4613      	movcs	r3, r2
 80104bc:	b29b      	uxth	r3, r3
 80104be:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80104c0:	4293      	cmp	r3, r2
 80104c2:	bf28      	it	cs
 80104c4:	4613      	movcs	r3, r2
 80104c6:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 80104c8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80104cc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80104ce:	4413      	add	r3, r2
 80104d0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 80104d4:	8a7a      	ldrh	r2, [r7, #18]
 80104d6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80104d8:	1ad3      	subs	r3, r2, r3
 80104da:	b29b      	uxth	r3, r3
 80104dc:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 80104de:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80104e0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80104e2:	1ad3      	subs	r3, r2, r3
 80104e4:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 80104e6:	8a7b      	ldrh	r3, [r7, #18]
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	d00b      	beq.n	8010504 <tcp_write+0x1a0>
 80104ec:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80104f0:	88fb      	ldrh	r3, [r7, #6]
 80104f2:	429a      	cmp	r2, r3
 80104f4:	d006      	beq.n	8010504 <tcp_write+0x1a0>
 80104f6:	4b52      	ldr	r3, [pc, #328]	; (8010640 <tcp_write+0x2dc>)
 80104f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80104fc:	4956      	ldr	r1, [pc, #344]	; (8010658 <tcp_write+0x2f4>)
 80104fe:	4852      	ldr	r0, [pc, #328]	; (8010648 <tcp_write+0x2e4>)
 8010500:	f004 fadc 	bl	8014abc <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8010504:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010508:	88fb      	ldrh	r3, [r7, #6]
 801050a:	429a      	cmp	r2, r3
 801050c:	f080 8167 	bcs.w	80107de <tcp_write+0x47a>
 8010510:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010512:	2b00      	cmp	r3, #0
 8010514:	f000 8163 	beq.w	80107de <tcp_write+0x47a>
 8010518:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801051a:	891b      	ldrh	r3, [r3, #8]
 801051c:	2b00      	cmp	r3, #0
 801051e:	f000 815e 	beq.w	80107de <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8010522:	88fa      	ldrh	r2, [r7, #6]
 8010524:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010528:	1ad2      	subs	r2, r2, r3
 801052a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801052c:	4293      	cmp	r3, r2
 801052e:	bfa8      	it	ge
 8010530:	4613      	movge	r3, r2
 8010532:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8010534:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010536:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8010538:	797b      	ldrb	r3, [r7, #5]
 801053a:	f003 0301 	and.w	r3, r3, #1
 801053e:	2b00      	cmp	r3, #0
 8010540:	d027      	beq.n	8010592 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8010542:	f107 0012 	add.w	r0, r7, #18
 8010546:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010548:	8bf9      	ldrh	r1, [r7, #30]
 801054a:	2301      	movs	r3, #1
 801054c:	9302      	str	r3, [sp, #8]
 801054e:	797b      	ldrb	r3, [r7, #5]
 8010550:	9301      	str	r3, [sp, #4]
 8010552:	68fb      	ldr	r3, [r7, #12]
 8010554:	9300      	str	r3, [sp, #0]
 8010556:	4603      	mov	r3, r0
 8010558:	2000      	movs	r0, #0
 801055a:	f7ff fe0f 	bl	801017c <tcp_pbuf_prealloc>
 801055e:	6578      	str	r0, [r7, #84]	; 0x54
 8010560:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010562:	2b00      	cmp	r3, #0
 8010564:	f000 8225 	beq.w	80109b2 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8010568:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801056a:	6858      	ldr	r0, [r3, #4]
 801056c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010570:	68ba      	ldr	r2, [r7, #8]
 8010572:	4413      	add	r3, r2
 8010574:	8bfa      	ldrh	r2, [r7, #30]
 8010576:	4619      	mov	r1, r3
 8010578:	f004 fa70 	bl	8014a5c <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 801057c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801057e:	f7fb f9dd 	bl	800b93c <pbuf_clen>
 8010582:	4603      	mov	r3, r0
 8010584:	461a      	mov	r2, r3
 8010586:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801058a:	4413      	add	r3, r2
 801058c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8010590:	e041      	b.n	8010616 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8010592:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010594:	685b      	ldr	r3, [r3, #4]
 8010596:	637b      	str	r3, [r7, #52]	; 0x34
 8010598:	e002      	b.n	80105a0 <tcp_write+0x23c>
 801059a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801059c:	681b      	ldr	r3, [r3, #0]
 801059e:	637b      	str	r3, [r7, #52]	; 0x34
 80105a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105a2:	681b      	ldr	r3, [r3, #0]
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	d1f8      	bne.n	801059a <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80105a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105aa:	7b1b      	ldrb	r3, [r3, #12]
 80105ac:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80105b0:	2b00      	cmp	r3, #0
 80105b2:	d115      	bne.n	80105e0 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 80105b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105b6:	685b      	ldr	r3, [r3, #4]
 80105b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80105ba:	8952      	ldrh	r2, [r2, #10]
 80105bc:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80105be:	68ba      	ldr	r2, [r7, #8]
 80105c0:	429a      	cmp	r2, r3
 80105c2:	d10d      	bne.n	80105e0 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 80105c4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	d006      	beq.n	80105da <tcp_write+0x276>
 80105cc:	4b1c      	ldr	r3, [pc, #112]	; (8010640 <tcp_write+0x2dc>)
 80105ce:	f240 2231 	movw	r2, #561	; 0x231
 80105d2:	4922      	ldr	r1, [pc, #136]	; (801065c <tcp_write+0x2f8>)
 80105d4:	481c      	ldr	r0, [pc, #112]	; (8010648 <tcp_write+0x2e4>)
 80105d6:	f004 fa71 	bl	8014abc <iprintf>
          extendlen = seglen;
 80105da:	8bfb      	ldrh	r3, [r7, #30]
 80105dc:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80105de:	e01a      	b.n	8010616 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 80105e0:	8bfb      	ldrh	r3, [r7, #30]
 80105e2:	2201      	movs	r2, #1
 80105e4:	4619      	mov	r1, r3
 80105e6:	2000      	movs	r0, #0
 80105e8:	f7fa fe3c 	bl	800b264 <pbuf_alloc>
 80105ec:	6578      	str	r0, [r7, #84]	; 0x54
 80105ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80105f0:	2b00      	cmp	r3, #0
 80105f2:	f000 81e0 	beq.w	80109b6 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 80105f6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80105fa:	68ba      	ldr	r2, [r7, #8]
 80105fc:	441a      	add	r2, r3
 80105fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010600:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8010602:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8010604:	f7fb f99a 	bl	800b93c <pbuf_clen>
 8010608:	4603      	mov	r3, r0
 801060a:	461a      	mov	r2, r3
 801060c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010610:	4413      	add	r3, r2
 8010612:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8010616:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801061a:	8bfb      	ldrh	r3, [r7, #30]
 801061c:	4413      	add	r3, r2
 801061e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8010622:	e0dc      	b.n	80107de <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8010624:	68fb      	ldr	r3, [r7, #12]
 8010626:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801062a:	2b00      	cmp	r3, #0
 801062c:	f000 80d7 	beq.w	80107de <tcp_write+0x47a>
 8010630:	4b03      	ldr	r3, [pc, #12]	; (8010640 <tcp_write+0x2dc>)
 8010632:	f240 224a 	movw	r2, #586	; 0x24a
 8010636:	490a      	ldr	r1, [pc, #40]	; (8010660 <tcp_write+0x2fc>)
 8010638:	4803      	ldr	r0, [pc, #12]	; (8010648 <tcp_write+0x2e4>)
 801063a:	f004 fa3f 	bl	8014abc <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 801063e:	e0ce      	b.n	80107de <tcp_write+0x47a>
 8010640:	0801792c 	.word	0x0801792c
 8010644:	08017acc 	.word	0x08017acc
 8010648:	08017980 	.word	0x08017980
 801064c:	08017ae4 	.word	0x08017ae4
 8010650:	08017b18 	.word	0x08017b18
 8010654:	08017b30 	.word	0x08017b30
 8010658:	08017b50 	.word	0x08017b50
 801065c:	08017b70 	.word	0x08017b70
 8010660:	08017b9c 	.word	0x08017b9c
    struct pbuf *p;
    u16_t left = len - pos;
 8010664:	88fa      	ldrh	r2, [r7, #6]
 8010666:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801066a:	1ad3      	subs	r3, r2, r3
 801066c:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 801066e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8010672:	b29b      	uxth	r3, r3
 8010674:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010676:	1ad3      	subs	r3, r2, r3
 8010678:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801067a:	8b7a      	ldrh	r2, [r7, #26]
 801067c:	8bbb      	ldrh	r3, [r7, #28]
 801067e:	4293      	cmp	r3, r2
 8010680:	bf28      	it	cs
 8010682:	4613      	movcs	r3, r2
 8010684:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8010686:	797b      	ldrb	r3, [r7, #5]
 8010688:	f003 0301 	and.w	r3, r3, #1
 801068c:	2b00      	cmp	r3, #0
 801068e:	d036      	beq.n	80106fe <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8010690:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8010694:	b29a      	uxth	r2, r3
 8010696:	8b3b      	ldrh	r3, [r7, #24]
 8010698:	4413      	add	r3, r2
 801069a:	b299      	uxth	r1, r3
 801069c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801069e:	2b00      	cmp	r3, #0
 80106a0:	bf0c      	ite	eq
 80106a2:	2301      	moveq	r3, #1
 80106a4:	2300      	movne	r3, #0
 80106a6:	b2db      	uxtb	r3, r3
 80106a8:	f107 0012 	add.w	r0, r7, #18
 80106ac:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80106ae:	9302      	str	r3, [sp, #8]
 80106b0:	797b      	ldrb	r3, [r7, #5]
 80106b2:	9301      	str	r3, [sp, #4]
 80106b4:	68fb      	ldr	r3, [r7, #12]
 80106b6:	9300      	str	r3, [sp, #0]
 80106b8:	4603      	mov	r3, r0
 80106ba:	2036      	movs	r0, #54	; 0x36
 80106bc:	f7ff fd5e 	bl	801017c <tcp_pbuf_prealloc>
 80106c0:	6338      	str	r0, [r7, #48]	; 0x30
 80106c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106c4:	2b00      	cmp	r3, #0
 80106c6:	f000 8178 	beq.w	80109ba <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 80106ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106cc:	895b      	ldrh	r3, [r3, #10]
 80106ce:	8b3a      	ldrh	r2, [r7, #24]
 80106d0:	429a      	cmp	r2, r3
 80106d2:	d906      	bls.n	80106e2 <tcp_write+0x37e>
 80106d4:	4b8c      	ldr	r3, [pc, #560]	; (8010908 <tcp_write+0x5a4>)
 80106d6:	f240 2266 	movw	r2, #614	; 0x266
 80106da:	498c      	ldr	r1, [pc, #560]	; (801090c <tcp_write+0x5a8>)
 80106dc:	488c      	ldr	r0, [pc, #560]	; (8010910 <tcp_write+0x5ac>)
 80106de:	f004 f9ed 	bl	8014abc <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 80106e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106e4:	685a      	ldr	r2, [r3, #4]
 80106e6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80106ea:	18d0      	adds	r0, r2, r3
 80106ec:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80106f0:	68ba      	ldr	r2, [r7, #8]
 80106f2:	4413      	add	r3, r2
 80106f4:	8b3a      	ldrh	r2, [r7, #24]
 80106f6:	4619      	mov	r1, r3
 80106f8:	f004 f9b0 	bl	8014a5c <memcpy>
 80106fc:	e02f      	b.n	801075e <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 80106fe:	8a7b      	ldrh	r3, [r7, #18]
 8010700:	2b00      	cmp	r3, #0
 8010702:	d006      	beq.n	8010712 <tcp_write+0x3ae>
 8010704:	4b80      	ldr	r3, [pc, #512]	; (8010908 <tcp_write+0x5a4>)
 8010706:	f240 2271 	movw	r2, #625	; 0x271
 801070a:	4982      	ldr	r1, [pc, #520]	; (8010914 <tcp_write+0x5b0>)
 801070c:	4880      	ldr	r0, [pc, #512]	; (8010910 <tcp_write+0x5ac>)
 801070e:	f004 f9d5 	bl	8014abc <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8010712:	8b3b      	ldrh	r3, [r7, #24]
 8010714:	2201      	movs	r2, #1
 8010716:	4619      	mov	r1, r3
 8010718:	2036      	movs	r0, #54	; 0x36
 801071a:	f7fa fda3 	bl	800b264 <pbuf_alloc>
 801071e:	6178      	str	r0, [r7, #20]
 8010720:	697b      	ldr	r3, [r7, #20]
 8010722:	2b00      	cmp	r3, #0
 8010724:	f000 814b 	beq.w	80109be <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8010728:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801072c:	68ba      	ldr	r2, [r7, #8]
 801072e:	441a      	add	r2, r3
 8010730:	697b      	ldr	r3, [r7, #20]
 8010732:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8010734:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8010738:	b29b      	uxth	r3, r3
 801073a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801073e:	4619      	mov	r1, r3
 8010740:	2036      	movs	r0, #54	; 0x36
 8010742:	f7fa fd8f 	bl	800b264 <pbuf_alloc>
 8010746:	6338      	str	r0, [r7, #48]	; 0x30
 8010748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801074a:	2b00      	cmp	r3, #0
 801074c:	d103      	bne.n	8010756 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 801074e:	6978      	ldr	r0, [r7, #20]
 8010750:	f7fb f86c 	bl	800b82c <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8010754:	e136      	b.n	80109c4 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8010756:	6979      	ldr	r1, [r7, #20]
 8010758:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801075a:	f7fb f929 	bl	800b9b0 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 801075e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010760:	f7fb f8ec 	bl	800b93c <pbuf_clen>
 8010764:	4603      	mov	r3, r0
 8010766:	461a      	mov	r2, r3
 8010768:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801076c:	4413      	add	r3, r2
 801076e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8010772:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010776:	2b09      	cmp	r3, #9
 8010778:	d903      	bls.n	8010782 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801077a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801077c:	f7fb f856 	bl	800b82c <pbuf_free>
      goto memerr;
 8010780:	e120      	b.n	80109c4 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8010782:	68fb      	ldr	r3, [r7, #12]
 8010784:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8010786:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801078a:	441a      	add	r2, r3
 801078c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010790:	9300      	str	r3, [sp, #0]
 8010792:	4613      	mov	r3, r2
 8010794:	2200      	movs	r2, #0
 8010796:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010798:	68f8      	ldr	r0, [r7, #12]
 801079a:	f7ff fc51 	bl	8010040 <tcp_create_segment>
 801079e:	64f8      	str	r0, [r7, #76]	; 0x4c
 80107a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80107a2:	2b00      	cmp	r3, #0
 80107a4:	f000 810d 	beq.w	80109c2 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 80107a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80107aa:	2b00      	cmp	r3, #0
 80107ac:	d102      	bne.n	80107b4 <tcp_write+0x450>
      queue = seg;
 80107ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80107b0:	647b      	str	r3, [r7, #68]	; 0x44
 80107b2:	e00c      	b.n	80107ce <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 80107b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	d106      	bne.n	80107c8 <tcp_write+0x464>
 80107ba:	4b53      	ldr	r3, [pc, #332]	; (8010908 <tcp_write+0x5a4>)
 80107bc:	f240 22ab 	movw	r2, #683	; 0x2ab
 80107c0:	4955      	ldr	r1, [pc, #340]	; (8010918 <tcp_write+0x5b4>)
 80107c2:	4853      	ldr	r0, [pc, #332]	; (8010910 <tcp_write+0x5ac>)
 80107c4:	f004 f97a 	bl	8014abc <iprintf>
      prev_seg->next = seg;
 80107c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80107ca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80107cc:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 80107ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80107d0:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 80107d2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80107d6:	8b3b      	ldrh	r3, [r7, #24]
 80107d8:	4413      	add	r3, r2
 80107da:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 80107de:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80107e2:	88fb      	ldrh	r3, [r7, #6]
 80107e4:	429a      	cmp	r2, r3
 80107e6:	f4ff af3d 	bcc.w	8010664 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 80107ea:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80107ec:	2b00      	cmp	r3, #0
 80107ee:	d02c      	beq.n	801084a <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 80107f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80107f2:	685b      	ldr	r3, [r3, #4]
 80107f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80107f6:	e01e      	b.n	8010836 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 80107f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107fa:	891a      	ldrh	r2, [r3, #8]
 80107fc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80107fe:	4413      	add	r3, r2
 8010800:	b29a      	uxth	r2, r3
 8010802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010804:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8010806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010808:	681b      	ldr	r3, [r3, #0]
 801080a:	2b00      	cmp	r3, #0
 801080c:	d110      	bne.n	8010830 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801080e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010810:	685b      	ldr	r3, [r3, #4]
 8010812:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010814:	8952      	ldrh	r2, [r2, #10]
 8010816:	4413      	add	r3, r2
 8010818:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801081a:	68b9      	ldr	r1, [r7, #8]
 801081c:	4618      	mov	r0, r3
 801081e:	f004 f91d 	bl	8014a5c <memcpy>
        p->len += oversize_used;
 8010822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010824:	895a      	ldrh	r2, [r3, #10]
 8010826:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010828:	4413      	add	r3, r2
 801082a:	b29a      	uxth	r2, r3
 801082c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801082e:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8010830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010832:	681b      	ldr	r3, [r3, #0]
 8010834:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010838:	2b00      	cmp	r3, #0
 801083a:	d1dd      	bne.n	80107f8 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 801083c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801083e:	891a      	ldrh	r2, [r3, #8]
 8010840:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010842:	4413      	add	r3, r2
 8010844:	b29a      	uxth	r2, r3
 8010846:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010848:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 801084a:	8a7a      	ldrh	r2, [r7, #18]
 801084c:	68fb      	ldr	r3, [r7, #12]
 801084e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8010852:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010854:	2b00      	cmp	r3, #0
 8010856:	d018      	beq.n	801088a <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8010858:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801085a:	2b00      	cmp	r3, #0
 801085c:	d106      	bne.n	801086c <tcp_write+0x508>
 801085e:	4b2a      	ldr	r3, [pc, #168]	; (8010908 <tcp_write+0x5a4>)
 8010860:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8010864:	492d      	ldr	r1, [pc, #180]	; (801091c <tcp_write+0x5b8>)
 8010866:	482a      	ldr	r0, [pc, #168]	; (8010910 <tcp_write+0x5ac>)
 8010868:	f004 f928 	bl	8014abc <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 801086c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801086e:	685b      	ldr	r3, [r3, #4]
 8010870:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010872:	4618      	mov	r0, r3
 8010874:	f7fb f89c 	bl	800b9b0 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8010878:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801087a:	891a      	ldrh	r2, [r3, #8]
 801087c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801087e:	891b      	ldrh	r3, [r3, #8]
 8010880:	4413      	add	r3, r2
 8010882:	b29a      	uxth	r2, r3
 8010884:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010886:	811a      	strh	r2, [r3, #8]
 8010888:	e037      	b.n	80108fa <tcp_write+0x596>
  } else if (extendlen > 0) {
 801088a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801088c:	2b00      	cmp	r3, #0
 801088e:	d034      	beq.n	80108fa <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8010890:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010892:	2b00      	cmp	r3, #0
 8010894:	d003      	beq.n	801089e <tcp_write+0x53a>
 8010896:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010898:	685b      	ldr	r3, [r3, #4]
 801089a:	2b00      	cmp	r3, #0
 801089c:	d106      	bne.n	80108ac <tcp_write+0x548>
 801089e:	4b1a      	ldr	r3, [pc, #104]	; (8010908 <tcp_write+0x5a4>)
 80108a0:	f240 22e6 	movw	r2, #742	; 0x2e6
 80108a4:	491e      	ldr	r1, [pc, #120]	; (8010920 <tcp_write+0x5bc>)
 80108a6:	481a      	ldr	r0, [pc, #104]	; (8010910 <tcp_write+0x5ac>)
 80108a8:	f004 f908 	bl	8014abc <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80108ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80108ae:	685b      	ldr	r3, [r3, #4]
 80108b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80108b2:	e009      	b.n	80108c8 <tcp_write+0x564>
      p->tot_len += extendlen;
 80108b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108b6:	891a      	ldrh	r2, [r3, #8]
 80108b8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80108ba:	4413      	add	r3, r2
 80108bc:	b29a      	uxth	r2, r3
 80108be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108c0:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80108c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108c4:	681b      	ldr	r3, [r3, #0]
 80108c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80108c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108ca:	681b      	ldr	r3, [r3, #0]
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	d1f1      	bne.n	80108b4 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 80108d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108d2:	891a      	ldrh	r2, [r3, #8]
 80108d4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80108d6:	4413      	add	r3, r2
 80108d8:	b29a      	uxth	r2, r3
 80108da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108dc:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 80108de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108e0:	895a      	ldrh	r2, [r3, #10]
 80108e2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80108e4:	4413      	add	r3, r2
 80108e6:	b29a      	uxth	r2, r3
 80108e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108ea:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 80108ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80108ee:	891a      	ldrh	r2, [r3, #8]
 80108f0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80108f2:	4413      	add	r3, r2
 80108f4:	b29a      	uxth	r2, r3
 80108f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80108f8:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 80108fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	d111      	bne.n	8010924 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8010900:	68fb      	ldr	r3, [r7, #12]
 8010902:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010904:	66da      	str	r2, [r3, #108]	; 0x6c
 8010906:	e010      	b.n	801092a <tcp_write+0x5c6>
 8010908:	0801792c 	.word	0x0801792c
 801090c:	08017bcc 	.word	0x08017bcc
 8010910:	08017980 	.word	0x08017980
 8010914:	08017c0c 	.word	0x08017c0c
 8010918:	08017c1c 	.word	0x08017c1c
 801091c:	08017c30 	.word	0x08017c30
 8010920:	08017c68 	.word	0x08017c68
  } else {
    last_unsent->next = queue;
 8010924:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010926:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010928:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801092a:	68fb      	ldr	r3, [r7, #12]
 801092c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801092e:	88fb      	ldrh	r3, [r7, #6]
 8010930:	441a      	add	r2, r3
 8010932:	68fb      	ldr	r3, [r7, #12]
 8010934:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8010936:	68fb      	ldr	r3, [r7, #12]
 8010938:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801093c:	88fb      	ldrh	r3, [r7, #6]
 801093e:	1ad3      	subs	r3, r2, r3
 8010940:	b29a      	uxth	r2, r3
 8010942:	68fb      	ldr	r3, [r7, #12]
 8010944:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8010948:	68fb      	ldr	r3, [r7, #12]
 801094a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801094e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8010952:	68fb      	ldr	r3, [r7, #12]
 8010954:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010958:	2b00      	cmp	r3, #0
 801095a:	d00e      	beq.n	801097a <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 801095c:	68fb      	ldr	r3, [r7, #12]
 801095e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010960:	2b00      	cmp	r3, #0
 8010962:	d10a      	bne.n	801097a <tcp_write+0x616>
 8010964:	68fb      	ldr	r3, [r7, #12]
 8010966:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010968:	2b00      	cmp	r3, #0
 801096a:	d106      	bne.n	801097a <tcp_write+0x616>
 801096c:	4b2c      	ldr	r3, [pc, #176]	; (8010a20 <tcp_write+0x6bc>)
 801096e:	f240 3212 	movw	r2, #786	; 0x312
 8010972:	492c      	ldr	r1, [pc, #176]	; (8010a24 <tcp_write+0x6c0>)
 8010974:	482c      	ldr	r0, [pc, #176]	; (8010a28 <tcp_write+0x6c4>)
 8010976:	f004 f8a1 	bl	8014abc <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801097a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801097c:	2b00      	cmp	r3, #0
 801097e:	d016      	beq.n	80109ae <tcp_write+0x64a>
 8010980:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010982:	68db      	ldr	r3, [r3, #12]
 8010984:	2b00      	cmp	r3, #0
 8010986:	d012      	beq.n	80109ae <tcp_write+0x64a>
 8010988:	797b      	ldrb	r3, [r7, #5]
 801098a:	f003 0302 	and.w	r3, r3, #2
 801098e:	2b00      	cmp	r3, #0
 8010990:	d10d      	bne.n	80109ae <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8010992:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010994:	68db      	ldr	r3, [r3, #12]
 8010996:	899b      	ldrh	r3, [r3, #12]
 8010998:	b29c      	uxth	r4, r3
 801099a:	2008      	movs	r0, #8
 801099c:	f7f9 fab6 	bl	8009f0c <lwip_htons>
 80109a0:	4603      	mov	r3, r0
 80109a2:	461a      	mov	r2, r3
 80109a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80109a6:	68db      	ldr	r3, [r3, #12]
 80109a8:	4322      	orrs	r2, r4
 80109aa:	b292      	uxth	r2, r2
 80109ac:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 80109ae:	2300      	movs	r3, #0
 80109b0:	e031      	b.n	8010a16 <tcp_write+0x6b2>
          goto memerr;
 80109b2:	bf00      	nop
 80109b4:	e006      	b.n	80109c4 <tcp_write+0x660>
            goto memerr;
 80109b6:	bf00      	nop
 80109b8:	e004      	b.n	80109c4 <tcp_write+0x660>
        goto memerr;
 80109ba:	bf00      	nop
 80109bc:	e002      	b.n	80109c4 <tcp_write+0x660>
        goto memerr;
 80109be:	bf00      	nop
 80109c0:	e000      	b.n	80109c4 <tcp_write+0x660>
      goto memerr;
 80109c2:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80109c4:	68fb      	ldr	r3, [r7, #12]
 80109c6:	8b5b      	ldrh	r3, [r3, #26]
 80109c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80109cc:	b29a      	uxth	r2, r3
 80109ce:	68fb      	ldr	r3, [r7, #12]
 80109d0:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 80109d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80109d4:	2b00      	cmp	r3, #0
 80109d6:	d002      	beq.n	80109de <tcp_write+0x67a>
    pbuf_free(concat_p);
 80109d8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80109da:	f7fa ff27 	bl	800b82c <pbuf_free>
  }
  if (queue != NULL) {
 80109de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80109e0:	2b00      	cmp	r3, #0
 80109e2:	d002      	beq.n	80109ea <tcp_write+0x686>
    tcp_segs_free(queue);
 80109e4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80109e6:	f7fc fb49 	bl	800d07c <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 80109ea:	68fb      	ldr	r3, [r7, #12]
 80109ec:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80109f0:	2b00      	cmp	r3, #0
 80109f2:	d00e      	beq.n	8010a12 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 80109f4:	68fb      	ldr	r3, [r7, #12]
 80109f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80109f8:	2b00      	cmp	r3, #0
 80109fa:	d10a      	bne.n	8010a12 <tcp_write+0x6ae>
 80109fc:	68fb      	ldr	r3, [r7, #12]
 80109fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010a00:	2b00      	cmp	r3, #0
 8010a02:	d106      	bne.n	8010a12 <tcp_write+0x6ae>
 8010a04:	4b06      	ldr	r3, [pc, #24]	; (8010a20 <tcp_write+0x6bc>)
 8010a06:	f240 3227 	movw	r2, #807	; 0x327
 8010a0a:	4906      	ldr	r1, [pc, #24]	; (8010a24 <tcp_write+0x6c0>)
 8010a0c:	4806      	ldr	r0, [pc, #24]	; (8010a28 <tcp_write+0x6c4>)
 8010a0e:	f004 f855 	bl	8014abc <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8010a12:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010a16:	4618      	mov	r0, r3
 8010a18:	375c      	adds	r7, #92	; 0x5c
 8010a1a:	46bd      	mov	sp, r7
 8010a1c:	bd90      	pop	{r4, r7, pc}
 8010a1e:	bf00      	nop
 8010a20:	0801792c 	.word	0x0801792c
 8010a24:	08017ca0 	.word	0x08017ca0
 8010a28:	08017980 	.word	0x08017980

08010a2c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8010a2c:	b590      	push	{r4, r7, lr}
 8010a2e:	b08b      	sub	sp, #44	; 0x2c
 8010a30:	af02      	add	r7, sp, #8
 8010a32:	6078      	str	r0, [r7, #4]
 8010a34:	460b      	mov	r3, r1
 8010a36:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8010a38:	2300      	movs	r3, #0
 8010a3a:	61fb      	str	r3, [r7, #28]
 8010a3c:	2300      	movs	r3, #0
 8010a3e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8010a40:	2300      	movs	r3, #0
 8010a42:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	2b00      	cmp	r3, #0
 8010a48:	d106      	bne.n	8010a58 <tcp_split_unsent_seg+0x2c>
 8010a4a:	4b95      	ldr	r3, [pc, #596]	; (8010ca0 <tcp_split_unsent_seg+0x274>)
 8010a4c:	f240 324b 	movw	r2, #843	; 0x34b
 8010a50:	4994      	ldr	r1, [pc, #592]	; (8010ca4 <tcp_split_unsent_seg+0x278>)
 8010a52:	4895      	ldr	r0, [pc, #596]	; (8010ca8 <tcp_split_unsent_seg+0x27c>)
 8010a54:	f004 f832 	bl	8014abc <iprintf>

  useg = pcb->unsent;
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010a5c:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8010a5e:	697b      	ldr	r3, [r7, #20]
 8010a60:	2b00      	cmp	r3, #0
 8010a62:	d102      	bne.n	8010a6a <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8010a64:	f04f 33ff 	mov.w	r3, #4294967295
 8010a68:	e116      	b.n	8010c98 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8010a6a:	887b      	ldrh	r3, [r7, #2]
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	d109      	bne.n	8010a84 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8010a70:	4b8b      	ldr	r3, [pc, #556]	; (8010ca0 <tcp_split_unsent_seg+0x274>)
 8010a72:	f240 3253 	movw	r2, #851	; 0x353
 8010a76:	498d      	ldr	r1, [pc, #564]	; (8010cac <tcp_split_unsent_seg+0x280>)
 8010a78:	488b      	ldr	r0, [pc, #556]	; (8010ca8 <tcp_split_unsent_seg+0x27c>)
 8010a7a:	f004 f81f 	bl	8014abc <iprintf>
    return ERR_VAL;
 8010a7e:	f06f 0305 	mvn.w	r3, #5
 8010a82:	e109      	b.n	8010c98 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8010a84:	697b      	ldr	r3, [r7, #20]
 8010a86:	891b      	ldrh	r3, [r3, #8]
 8010a88:	887a      	ldrh	r2, [r7, #2]
 8010a8a:	429a      	cmp	r2, r3
 8010a8c:	d301      	bcc.n	8010a92 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8010a8e:	2300      	movs	r3, #0
 8010a90:	e102      	b.n	8010c98 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010a96:	887a      	ldrh	r2, [r7, #2]
 8010a98:	429a      	cmp	r2, r3
 8010a9a:	d906      	bls.n	8010aaa <tcp_split_unsent_seg+0x7e>
 8010a9c:	4b80      	ldr	r3, [pc, #512]	; (8010ca0 <tcp_split_unsent_seg+0x274>)
 8010a9e:	f240 325b 	movw	r2, #859	; 0x35b
 8010aa2:	4983      	ldr	r1, [pc, #524]	; (8010cb0 <tcp_split_unsent_seg+0x284>)
 8010aa4:	4880      	ldr	r0, [pc, #512]	; (8010ca8 <tcp_split_unsent_seg+0x27c>)
 8010aa6:	f004 f809 	bl	8014abc <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8010aaa:	697b      	ldr	r3, [r7, #20]
 8010aac:	891b      	ldrh	r3, [r3, #8]
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	d106      	bne.n	8010ac0 <tcp_split_unsent_seg+0x94>
 8010ab2:	4b7b      	ldr	r3, [pc, #492]	; (8010ca0 <tcp_split_unsent_seg+0x274>)
 8010ab4:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8010ab8:	497e      	ldr	r1, [pc, #504]	; (8010cb4 <tcp_split_unsent_seg+0x288>)
 8010aba:	487b      	ldr	r0, [pc, #492]	; (8010ca8 <tcp_split_unsent_seg+0x27c>)
 8010abc:	f003 fffe 	bl	8014abc <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8010ac0:	697b      	ldr	r3, [r7, #20]
 8010ac2:	7a9b      	ldrb	r3, [r3, #10]
 8010ac4:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8010ac6:	7bfb      	ldrb	r3, [r7, #15]
 8010ac8:	009b      	lsls	r3, r3, #2
 8010aca:	b2db      	uxtb	r3, r3
 8010acc:	f003 0304 	and.w	r3, r3, #4
 8010ad0:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8010ad2:	697b      	ldr	r3, [r7, #20]
 8010ad4:	891a      	ldrh	r2, [r3, #8]
 8010ad6:	887b      	ldrh	r3, [r7, #2]
 8010ad8:	1ad3      	subs	r3, r2, r3
 8010ada:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8010adc:	7bbb      	ldrb	r3, [r7, #14]
 8010ade:	b29a      	uxth	r2, r3
 8010ae0:	89bb      	ldrh	r3, [r7, #12]
 8010ae2:	4413      	add	r3, r2
 8010ae4:	b29b      	uxth	r3, r3
 8010ae6:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010aea:	4619      	mov	r1, r3
 8010aec:	2036      	movs	r0, #54	; 0x36
 8010aee:	f7fa fbb9 	bl	800b264 <pbuf_alloc>
 8010af2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010af4:	693b      	ldr	r3, [r7, #16]
 8010af6:	2b00      	cmp	r3, #0
 8010af8:	f000 80b7 	beq.w	8010c6a <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8010afc:	697b      	ldr	r3, [r7, #20]
 8010afe:	685b      	ldr	r3, [r3, #4]
 8010b00:	891a      	ldrh	r2, [r3, #8]
 8010b02:	697b      	ldr	r3, [r7, #20]
 8010b04:	891b      	ldrh	r3, [r3, #8]
 8010b06:	1ad3      	subs	r3, r2, r3
 8010b08:	b29a      	uxth	r2, r3
 8010b0a:	887b      	ldrh	r3, [r7, #2]
 8010b0c:	4413      	add	r3, r2
 8010b0e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8010b10:	697b      	ldr	r3, [r7, #20]
 8010b12:	6858      	ldr	r0, [r3, #4]
 8010b14:	693b      	ldr	r3, [r7, #16]
 8010b16:	685a      	ldr	r2, [r3, #4]
 8010b18:	7bbb      	ldrb	r3, [r7, #14]
 8010b1a:	18d1      	adds	r1, r2, r3
 8010b1c:	897b      	ldrh	r3, [r7, #10]
 8010b1e:	89ba      	ldrh	r2, [r7, #12]
 8010b20:	f7fb f87e 	bl	800bc20 <pbuf_copy_partial>
 8010b24:	4603      	mov	r3, r0
 8010b26:	461a      	mov	r2, r3
 8010b28:	89bb      	ldrh	r3, [r7, #12]
 8010b2a:	4293      	cmp	r3, r2
 8010b2c:	f040 809f 	bne.w	8010c6e <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8010b30:	697b      	ldr	r3, [r7, #20]
 8010b32:	68db      	ldr	r3, [r3, #12]
 8010b34:	899b      	ldrh	r3, [r3, #12]
 8010b36:	b29b      	uxth	r3, r3
 8010b38:	4618      	mov	r0, r3
 8010b3a:	f7f9 f9e7 	bl	8009f0c <lwip_htons>
 8010b3e:	4603      	mov	r3, r0
 8010b40:	b2db      	uxtb	r3, r3
 8010b42:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010b46:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8010b48:	2300      	movs	r3, #0
 8010b4a:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8010b4c:	7efb      	ldrb	r3, [r7, #27]
 8010b4e:	f003 0308 	and.w	r3, r3, #8
 8010b52:	2b00      	cmp	r3, #0
 8010b54:	d007      	beq.n	8010b66 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8010b56:	7efb      	ldrb	r3, [r7, #27]
 8010b58:	f023 0308 	bic.w	r3, r3, #8
 8010b5c:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8010b5e:	7ebb      	ldrb	r3, [r7, #26]
 8010b60:	f043 0308 	orr.w	r3, r3, #8
 8010b64:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8010b66:	7efb      	ldrb	r3, [r7, #27]
 8010b68:	f003 0301 	and.w	r3, r3, #1
 8010b6c:	2b00      	cmp	r3, #0
 8010b6e:	d007      	beq.n	8010b80 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8010b70:	7efb      	ldrb	r3, [r7, #27]
 8010b72:	f023 0301 	bic.w	r3, r3, #1
 8010b76:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8010b78:	7ebb      	ldrb	r3, [r7, #26]
 8010b7a:	f043 0301 	orr.w	r3, r3, #1
 8010b7e:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8010b80:	697b      	ldr	r3, [r7, #20]
 8010b82:	68db      	ldr	r3, [r3, #12]
 8010b84:	685b      	ldr	r3, [r3, #4]
 8010b86:	4618      	mov	r0, r3
 8010b88:	f7f9 f9d5 	bl	8009f36 <lwip_htonl>
 8010b8c:	4602      	mov	r2, r0
 8010b8e:	887b      	ldrh	r3, [r7, #2]
 8010b90:	18d1      	adds	r1, r2, r3
 8010b92:	7eba      	ldrb	r2, [r7, #26]
 8010b94:	7bfb      	ldrb	r3, [r7, #15]
 8010b96:	9300      	str	r3, [sp, #0]
 8010b98:	460b      	mov	r3, r1
 8010b9a:	6939      	ldr	r1, [r7, #16]
 8010b9c:	6878      	ldr	r0, [r7, #4]
 8010b9e:	f7ff fa4f 	bl	8010040 <tcp_create_segment>
 8010ba2:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8010ba4:	69fb      	ldr	r3, [r7, #28]
 8010ba6:	2b00      	cmp	r3, #0
 8010ba8:	d063      	beq.n	8010c72 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8010baa:	697b      	ldr	r3, [r7, #20]
 8010bac:	685b      	ldr	r3, [r3, #4]
 8010bae:	4618      	mov	r0, r3
 8010bb0:	f7fa fec4 	bl	800b93c <pbuf_clen>
 8010bb4:	4603      	mov	r3, r0
 8010bb6:	461a      	mov	r2, r3
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010bbe:	1a9b      	subs	r3, r3, r2
 8010bc0:	b29a      	uxth	r2, r3
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8010bc8:	697b      	ldr	r3, [r7, #20]
 8010bca:	6858      	ldr	r0, [r3, #4]
 8010bcc:	697b      	ldr	r3, [r7, #20]
 8010bce:	685b      	ldr	r3, [r3, #4]
 8010bd0:	891a      	ldrh	r2, [r3, #8]
 8010bd2:	89bb      	ldrh	r3, [r7, #12]
 8010bd4:	1ad3      	subs	r3, r2, r3
 8010bd6:	b29b      	uxth	r3, r3
 8010bd8:	4619      	mov	r1, r3
 8010bda:	f7fa fca1 	bl	800b520 <pbuf_realloc>
  useg->len -= remainder;
 8010bde:	697b      	ldr	r3, [r7, #20]
 8010be0:	891a      	ldrh	r2, [r3, #8]
 8010be2:	89bb      	ldrh	r3, [r7, #12]
 8010be4:	1ad3      	subs	r3, r2, r3
 8010be6:	b29a      	uxth	r2, r3
 8010be8:	697b      	ldr	r3, [r7, #20]
 8010bea:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8010bec:	697b      	ldr	r3, [r7, #20]
 8010bee:	68db      	ldr	r3, [r3, #12]
 8010bf0:	899b      	ldrh	r3, [r3, #12]
 8010bf2:	b29c      	uxth	r4, r3
 8010bf4:	7efb      	ldrb	r3, [r7, #27]
 8010bf6:	b29b      	uxth	r3, r3
 8010bf8:	4618      	mov	r0, r3
 8010bfa:	f7f9 f987 	bl	8009f0c <lwip_htons>
 8010bfe:	4603      	mov	r3, r0
 8010c00:	461a      	mov	r2, r3
 8010c02:	697b      	ldr	r3, [r7, #20]
 8010c04:	68db      	ldr	r3, [r3, #12]
 8010c06:	4322      	orrs	r2, r4
 8010c08:	b292      	uxth	r2, r2
 8010c0a:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8010c0c:	697b      	ldr	r3, [r7, #20]
 8010c0e:	685b      	ldr	r3, [r3, #4]
 8010c10:	4618      	mov	r0, r3
 8010c12:	f7fa fe93 	bl	800b93c <pbuf_clen>
 8010c16:	4603      	mov	r3, r0
 8010c18:	461a      	mov	r2, r3
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010c20:	4413      	add	r3, r2
 8010c22:	b29a      	uxth	r2, r3
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8010c2a:	69fb      	ldr	r3, [r7, #28]
 8010c2c:	685b      	ldr	r3, [r3, #4]
 8010c2e:	4618      	mov	r0, r3
 8010c30:	f7fa fe84 	bl	800b93c <pbuf_clen>
 8010c34:	4603      	mov	r3, r0
 8010c36:	461a      	mov	r2, r3
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010c3e:	4413      	add	r3, r2
 8010c40:	b29a      	uxth	r2, r3
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8010c48:	697b      	ldr	r3, [r7, #20]
 8010c4a:	681a      	ldr	r2, [r3, #0]
 8010c4c:	69fb      	ldr	r3, [r7, #28]
 8010c4e:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8010c50:	697b      	ldr	r3, [r7, #20]
 8010c52:	69fa      	ldr	r2, [r7, #28]
 8010c54:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8010c56:	69fb      	ldr	r3, [r7, #28]
 8010c58:	681b      	ldr	r3, [r3, #0]
 8010c5a:	2b00      	cmp	r3, #0
 8010c5c:	d103      	bne.n	8010c66 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	2200      	movs	r2, #0
 8010c62:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8010c66:	2300      	movs	r3, #0
 8010c68:	e016      	b.n	8010c98 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8010c6a:	bf00      	nop
 8010c6c:	e002      	b.n	8010c74 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8010c6e:	bf00      	nop
 8010c70:	e000      	b.n	8010c74 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8010c72:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8010c74:	69fb      	ldr	r3, [r7, #28]
 8010c76:	2b00      	cmp	r3, #0
 8010c78:	d006      	beq.n	8010c88 <tcp_split_unsent_seg+0x25c>
 8010c7a:	4b09      	ldr	r3, [pc, #36]	; (8010ca0 <tcp_split_unsent_seg+0x274>)
 8010c7c:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8010c80:	490d      	ldr	r1, [pc, #52]	; (8010cb8 <tcp_split_unsent_seg+0x28c>)
 8010c82:	4809      	ldr	r0, [pc, #36]	; (8010ca8 <tcp_split_unsent_seg+0x27c>)
 8010c84:	f003 ff1a 	bl	8014abc <iprintf>
  if (p != NULL) {
 8010c88:	693b      	ldr	r3, [r7, #16]
 8010c8a:	2b00      	cmp	r3, #0
 8010c8c:	d002      	beq.n	8010c94 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8010c8e:	6938      	ldr	r0, [r7, #16]
 8010c90:	f7fa fdcc 	bl	800b82c <pbuf_free>
  }

  return ERR_MEM;
 8010c94:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010c98:	4618      	mov	r0, r3
 8010c9a:	3724      	adds	r7, #36	; 0x24
 8010c9c:	46bd      	mov	sp, r7
 8010c9e:	bd90      	pop	{r4, r7, pc}
 8010ca0:	0801792c 	.word	0x0801792c
 8010ca4:	08017cc0 	.word	0x08017cc0
 8010ca8:	08017980 	.word	0x08017980
 8010cac:	08017ce4 	.word	0x08017ce4
 8010cb0:	08017d08 	.word	0x08017d08
 8010cb4:	08017d18 	.word	0x08017d18
 8010cb8:	08017d28 	.word	0x08017d28

08010cbc <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8010cbc:	b590      	push	{r4, r7, lr}
 8010cbe:	b085      	sub	sp, #20
 8010cc0:	af00      	add	r7, sp, #0
 8010cc2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	2b00      	cmp	r3, #0
 8010cc8:	d106      	bne.n	8010cd8 <tcp_send_fin+0x1c>
 8010cca:	4b21      	ldr	r3, [pc, #132]	; (8010d50 <tcp_send_fin+0x94>)
 8010ccc:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8010cd0:	4920      	ldr	r1, [pc, #128]	; (8010d54 <tcp_send_fin+0x98>)
 8010cd2:	4821      	ldr	r0, [pc, #132]	; (8010d58 <tcp_send_fin+0x9c>)
 8010cd4:	f003 fef2 	bl	8014abc <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	d02e      	beq.n	8010d3e <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010ce4:	60fb      	str	r3, [r7, #12]
 8010ce6:	e002      	b.n	8010cee <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8010ce8:	68fb      	ldr	r3, [r7, #12]
 8010cea:	681b      	ldr	r3, [r3, #0]
 8010cec:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010cee:	68fb      	ldr	r3, [r7, #12]
 8010cf0:	681b      	ldr	r3, [r3, #0]
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	d1f8      	bne.n	8010ce8 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8010cf6:	68fb      	ldr	r3, [r7, #12]
 8010cf8:	68db      	ldr	r3, [r3, #12]
 8010cfa:	899b      	ldrh	r3, [r3, #12]
 8010cfc:	b29b      	uxth	r3, r3
 8010cfe:	4618      	mov	r0, r3
 8010d00:	f7f9 f904 	bl	8009f0c <lwip_htons>
 8010d04:	4603      	mov	r3, r0
 8010d06:	b2db      	uxtb	r3, r3
 8010d08:	f003 0307 	and.w	r3, r3, #7
 8010d0c:	2b00      	cmp	r3, #0
 8010d0e:	d116      	bne.n	8010d3e <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8010d10:	68fb      	ldr	r3, [r7, #12]
 8010d12:	68db      	ldr	r3, [r3, #12]
 8010d14:	899b      	ldrh	r3, [r3, #12]
 8010d16:	b29c      	uxth	r4, r3
 8010d18:	2001      	movs	r0, #1
 8010d1a:	f7f9 f8f7 	bl	8009f0c <lwip_htons>
 8010d1e:	4603      	mov	r3, r0
 8010d20:	461a      	mov	r2, r3
 8010d22:	68fb      	ldr	r3, [r7, #12]
 8010d24:	68db      	ldr	r3, [r3, #12]
 8010d26:	4322      	orrs	r2, r4
 8010d28:	b292      	uxth	r2, r2
 8010d2a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	8b5b      	ldrh	r3, [r3, #26]
 8010d30:	f043 0320 	orr.w	r3, r3, #32
 8010d34:	b29a      	uxth	r2, r3
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8010d3a:	2300      	movs	r3, #0
 8010d3c:	e004      	b.n	8010d48 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8010d3e:	2101      	movs	r1, #1
 8010d40:	6878      	ldr	r0, [r7, #4]
 8010d42:	f000 f80b 	bl	8010d5c <tcp_enqueue_flags>
 8010d46:	4603      	mov	r3, r0
}
 8010d48:	4618      	mov	r0, r3
 8010d4a:	3714      	adds	r7, #20
 8010d4c:	46bd      	mov	sp, r7
 8010d4e:	bd90      	pop	{r4, r7, pc}
 8010d50:	0801792c 	.word	0x0801792c
 8010d54:	08017d34 	.word	0x08017d34
 8010d58:	08017980 	.word	0x08017980

08010d5c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8010d5c:	b580      	push	{r7, lr}
 8010d5e:	b08a      	sub	sp, #40	; 0x28
 8010d60:	af02      	add	r7, sp, #8
 8010d62:	6078      	str	r0, [r7, #4]
 8010d64:	460b      	mov	r3, r1
 8010d66:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8010d68:	2300      	movs	r3, #0
 8010d6a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8010d6c:	2300      	movs	r3, #0
 8010d6e:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8010d70:	78fb      	ldrb	r3, [r7, #3]
 8010d72:	f003 0303 	and.w	r3, r3, #3
 8010d76:	2b00      	cmp	r3, #0
 8010d78:	d106      	bne.n	8010d88 <tcp_enqueue_flags+0x2c>
 8010d7a:	4b67      	ldr	r3, [pc, #412]	; (8010f18 <tcp_enqueue_flags+0x1bc>)
 8010d7c:	f240 4211 	movw	r2, #1041	; 0x411
 8010d80:	4966      	ldr	r1, [pc, #408]	; (8010f1c <tcp_enqueue_flags+0x1c0>)
 8010d82:	4867      	ldr	r0, [pc, #412]	; (8010f20 <tcp_enqueue_flags+0x1c4>)
 8010d84:	f003 fe9a 	bl	8014abc <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	2b00      	cmp	r3, #0
 8010d8c:	d106      	bne.n	8010d9c <tcp_enqueue_flags+0x40>
 8010d8e:	4b62      	ldr	r3, [pc, #392]	; (8010f18 <tcp_enqueue_flags+0x1bc>)
 8010d90:	f240 4213 	movw	r2, #1043	; 0x413
 8010d94:	4963      	ldr	r1, [pc, #396]	; (8010f24 <tcp_enqueue_flags+0x1c8>)
 8010d96:	4862      	ldr	r0, [pc, #392]	; (8010f20 <tcp_enqueue_flags+0x1c4>)
 8010d98:	f003 fe90 	bl	8014abc <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8010d9c:	78fb      	ldrb	r3, [r7, #3]
 8010d9e:	f003 0302 	and.w	r3, r3, #2
 8010da2:	2b00      	cmp	r3, #0
 8010da4:	d001      	beq.n	8010daa <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8010da6:	2301      	movs	r3, #1
 8010da8:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010daa:	7ffb      	ldrb	r3, [r7, #31]
 8010dac:	009b      	lsls	r3, r3, #2
 8010dae:	b2db      	uxtb	r3, r3
 8010db0:	f003 0304 	and.w	r3, r3, #4
 8010db4:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8010db6:	7dfb      	ldrb	r3, [r7, #23]
 8010db8:	b29b      	uxth	r3, r3
 8010dba:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010dbe:	4619      	mov	r1, r3
 8010dc0:	2036      	movs	r0, #54	; 0x36
 8010dc2:	f7fa fa4f 	bl	800b264 <pbuf_alloc>
 8010dc6:	6138      	str	r0, [r7, #16]
 8010dc8:	693b      	ldr	r3, [r7, #16]
 8010dca:	2b00      	cmp	r3, #0
 8010dcc:	d109      	bne.n	8010de2 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	8b5b      	ldrh	r3, [r3, #26]
 8010dd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010dd6:	b29a      	uxth	r2, r3
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8010ddc:	f04f 33ff 	mov.w	r3, #4294967295
 8010de0:	e095      	b.n	8010f0e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8010de2:	693b      	ldr	r3, [r7, #16]
 8010de4:	895a      	ldrh	r2, [r3, #10]
 8010de6:	7dfb      	ldrb	r3, [r7, #23]
 8010de8:	b29b      	uxth	r3, r3
 8010dea:	429a      	cmp	r2, r3
 8010dec:	d206      	bcs.n	8010dfc <tcp_enqueue_flags+0xa0>
 8010dee:	4b4a      	ldr	r3, [pc, #296]	; (8010f18 <tcp_enqueue_flags+0x1bc>)
 8010df0:	f240 4239 	movw	r2, #1081	; 0x439
 8010df4:	494c      	ldr	r1, [pc, #304]	; (8010f28 <tcp_enqueue_flags+0x1cc>)
 8010df6:	484a      	ldr	r0, [pc, #296]	; (8010f20 <tcp_enqueue_flags+0x1c4>)
 8010df8:	f003 fe60 	bl	8014abc <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8010e00:	78fa      	ldrb	r2, [r7, #3]
 8010e02:	7ffb      	ldrb	r3, [r7, #31]
 8010e04:	9300      	str	r3, [sp, #0]
 8010e06:	460b      	mov	r3, r1
 8010e08:	6939      	ldr	r1, [r7, #16]
 8010e0a:	6878      	ldr	r0, [r7, #4]
 8010e0c:	f7ff f918 	bl	8010040 <tcp_create_segment>
 8010e10:	60f8      	str	r0, [r7, #12]
 8010e12:	68fb      	ldr	r3, [r7, #12]
 8010e14:	2b00      	cmp	r3, #0
 8010e16:	d109      	bne.n	8010e2c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	8b5b      	ldrh	r3, [r3, #26]
 8010e1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010e20:	b29a      	uxth	r2, r3
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8010e26:	f04f 33ff 	mov.w	r3, #4294967295
 8010e2a:	e070      	b.n	8010f0e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8010e2c:	68fb      	ldr	r3, [r7, #12]
 8010e2e:	68db      	ldr	r3, [r3, #12]
 8010e30:	f003 0303 	and.w	r3, r3, #3
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	d006      	beq.n	8010e46 <tcp_enqueue_flags+0xea>
 8010e38:	4b37      	ldr	r3, [pc, #220]	; (8010f18 <tcp_enqueue_flags+0x1bc>)
 8010e3a:	f240 4242 	movw	r2, #1090	; 0x442
 8010e3e:	493b      	ldr	r1, [pc, #236]	; (8010f2c <tcp_enqueue_flags+0x1d0>)
 8010e40:	4837      	ldr	r0, [pc, #220]	; (8010f20 <tcp_enqueue_flags+0x1c4>)
 8010e42:	f003 fe3b 	bl	8014abc <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8010e46:	68fb      	ldr	r3, [r7, #12]
 8010e48:	891b      	ldrh	r3, [r3, #8]
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	d006      	beq.n	8010e5c <tcp_enqueue_flags+0x100>
 8010e4e:	4b32      	ldr	r3, [pc, #200]	; (8010f18 <tcp_enqueue_flags+0x1bc>)
 8010e50:	f240 4243 	movw	r2, #1091	; 0x443
 8010e54:	4936      	ldr	r1, [pc, #216]	; (8010f30 <tcp_enqueue_flags+0x1d4>)
 8010e56:	4832      	ldr	r0, [pc, #200]	; (8010f20 <tcp_enqueue_flags+0x1c4>)
 8010e58:	f003 fe30 	bl	8014abc <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010e60:	2b00      	cmp	r3, #0
 8010e62:	d103      	bne.n	8010e6c <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	68fa      	ldr	r2, [r7, #12]
 8010e68:	66da      	str	r2, [r3, #108]	; 0x6c
 8010e6a:	e00d      	b.n	8010e88 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010e70:	61bb      	str	r3, [r7, #24]
 8010e72:	e002      	b.n	8010e7a <tcp_enqueue_flags+0x11e>
 8010e74:	69bb      	ldr	r3, [r7, #24]
 8010e76:	681b      	ldr	r3, [r3, #0]
 8010e78:	61bb      	str	r3, [r7, #24]
 8010e7a:	69bb      	ldr	r3, [r7, #24]
 8010e7c:	681b      	ldr	r3, [r3, #0]
 8010e7e:	2b00      	cmp	r3, #0
 8010e80:	d1f8      	bne.n	8010e74 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8010e82:	69bb      	ldr	r3, [r7, #24]
 8010e84:	68fa      	ldr	r2, [r7, #12]
 8010e86:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	2200      	movs	r2, #0
 8010e8c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8010e90:	78fb      	ldrb	r3, [r7, #3]
 8010e92:	f003 0302 	and.w	r3, r3, #2
 8010e96:	2b00      	cmp	r3, #0
 8010e98:	d104      	bne.n	8010ea4 <tcp_enqueue_flags+0x148>
 8010e9a:	78fb      	ldrb	r3, [r7, #3]
 8010e9c:	f003 0301 	and.w	r3, r3, #1
 8010ea0:	2b00      	cmp	r3, #0
 8010ea2:	d004      	beq.n	8010eae <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010ea8:	1c5a      	adds	r2, r3, #1
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8010eae:	78fb      	ldrb	r3, [r7, #3]
 8010eb0:	f003 0301 	and.w	r3, r3, #1
 8010eb4:	2b00      	cmp	r3, #0
 8010eb6:	d006      	beq.n	8010ec6 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	8b5b      	ldrh	r3, [r3, #26]
 8010ebc:	f043 0320 	orr.w	r3, r3, #32
 8010ec0:	b29a      	uxth	r2, r3
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8010ec6:	68fb      	ldr	r3, [r7, #12]
 8010ec8:	685b      	ldr	r3, [r3, #4]
 8010eca:	4618      	mov	r0, r3
 8010ecc:	f7fa fd36 	bl	800b93c <pbuf_clen>
 8010ed0:	4603      	mov	r3, r0
 8010ed2:	461a      	mov	r2, r3
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010eda:	4413      	add	r3, r2
 8010edc:	b29a      	uxth	r2, r3
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	d00e      	beq.n	8010f0c <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010ef2:	2b00      	cmp	r3, #0
 8010ef4:	d10a      	bne.n	8010f0c <tcp_enqueue_flags+0x1b0>
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010efa:	2b00      	cmp	r3, #0
 8010efc:	d106      	bne.n	8010f0c <tcp_enqueue_flags+0x1b0>
 8010efe:	4b06      	ldr	r3, [pc, #24]	; (8010f18 <tcp_enqueue_flags+0x1bc>)
 8010f00:	f240 4265 	movw	r2, #1125	; 0x465
 8010f04:	490b      	ldr	r1, [pc, #44]	; (8010f34 <tcp_enqueue_flags+0x1d8>)
 8010f06:	4806      	ldr	r0, [pc, #24]	; (8010f20 <tcp_enqueue_flags+0x1c4>)
 8010f08:	f003 fdd8 	bl	8014abc <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8010f0c:	2300      	movs	r3, #0
}
 8010f0e:	4618      	mov	r0, r3
 8010f10:	3720      	adds	r7, #32
 8010f12:	46bd      	mov	sp, r7
 8010f14:	bd80      	pop	{r7, pc}
 8010f16:	bf00      	nop
 8010f18:	0801792c 	.word	0x0801792c
 8010f1c:	08017d50 	.word	0x08017d50
 8010f20:	08017980 	.word	0x08017980
 8010f24:	08017da8 	.word	0x08017da8
 8010f28:	08017dc8 	.word	0x08017dc8
 8010f2c:	08017e04 	.word	0x08017e04
 8010f30:	08017e1c 	.word	0x08017e1c
 8010f34:	08017e48 	.word	0x08017e48

08010f38 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8010f38:	b5b0      	push	{r4, r5, r7, lr}
 8010f3a:	b08a      	sub	sp, #40	; 0x28
 8010f3c:	af00      	add	r7, sp, #0
 8010f3e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	2b00      	cmp	r3, #0
 8010f44:	d106      	bne.n	8010f54 <tcp_output+0x1c>
 8010f46:	4b9e      	ldr	r3, [pc, #632]	; (80111c0 <tcp_output+0x288>)
 8010f48:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8010f4c:	499d      	ldr	r1, [pc, #628]	; (80111c4 <tcp_output+0x28c>)
 8010f4e:	489e      	ldr	r0, [pc, #632]	; (80111c8 <tcp_output+0x290>)
 8010f50:	f003 fdb4 	bl	8014abc <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	7d1b      	ldrb	r3, [r3, #20]
 8010f58:	2b01      	cmp	r3, #1
 8010f5a:	d106      	bne.n	8010f6a <tcp_output+0x32>
 8010f5c:	4b98      	ldr	r3, [pc, #608]	; (80111c0 <tcp_output+0x288>)
 8010f5e:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8010f62:	499a      	ldr	r1, [pc, #616]	; (80111cc <tcp_output+0x294>)
 8010f64:	4898      	ldr	r0, [pc, #608]	; (80111c8 <tcp_output+0x290>)
 8010f66:	f003 fda9 	bl	8014abc <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8010f6a:	4b99      	ldr	r3, [pc, #612]	; (80111d0 <tcp_output+0x298>)
 8010f6c:	681b      	ldr	r3, [r3, #0]
 8010f6e:	687a      	ldr	r2, [r7, #4]
 8010f70:	429a      	cmp	r2, r3
 8010f72:	d101      	bne.n	8010f78 <tcp_output+0x40>
    return ERR_OK;
 8010f74:	2300      	movs	r3, #0
 8010f76:	e1ce      	b.n	8011316 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010f84:	4293      	cmp	r3, r2
 8010f86:	bf28      	it	cs
 8010f88:	4613      	movcs	r3, r2
 8010f8a:	b29b      	uxth	r3, r3
 8010f8c:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010f92:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8010f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f96:	2b00      	cmp	r3, #0
 8010f98:	d10b      	bne.n	8010fb2 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	8b5b      	ldrh	r3, [r3, #26]
 8010f9e:	f003 0302 	and.w	r3, r3, #2
 8010fa2:	2b00      	cmp	r3, #0
 8010fa4:	f000 81aa 	beq.w	80112fc <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8010fa8:	6878      	ldr	r0, [r7, #4]
 8010faa:	f000 fdcb 	bl	8011b44 <tcp_send_empty_ack>
 8010fae:	4603      	mov	r3, r0
 8010fb0:	e1b1      	b.n	8011316 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8010fb2:	6879      	ldr	r1, [r7, #4]
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	3304      	adds	r3, #4
 8010fb8:	461a      	mov	r2, r3
 8010fba:	6878      	ldr	r0, [r7, #4]
 8010fbc:	f7ff f824 	bl	8010008 <tcp_route>
 8010fc0:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8010fc2:	697b      	ldr	r3, [r7, #20]
 8010fc4:	2b00      	cmp	r3, #0
 8010fc6:	d102      	bne.n	8010fce <tcp_output+0x96>
    return ERR_RTE;
 8010fc8:	f06f 0303 	mvn.w	r3, #3
 8010fcc:	e1a3      	b.n	8011316 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	2b00      	cmp	r3, #0
 8010fd2:	d003      	beq.n	8010fdc <tcp_output+0xa4>
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	681b      	ldr	r3, [r3, #0]
 8010fd8:	2b00      	cmp	r3, #0
 8010fda:	d111      	bne.n	8011000 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8010fdc:	697b      	ldr	r3, [r7, #20]
 8010fde:	2b00      	cmp	r3, #0
 8010fe0:	d002      	beq.n	8010fe8 <tcp_output+0xb0>
 8010fe2:	697b      	ldr	r3, [r7, #20]
 8010fe4:	3304      	adds	r3, #4
 8010fe6:	e000      	b.n	8010fea <tcp_output+0xb2>
 8010fe8:	2300      	movs	r3, #0
 8010fea:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8010fec:	693b      	ldr	r3, [r7, #16]
 8010fee:	2b00      	cmp	r3, #0
 8010ff0:	d102      	bne.n	8010ff8 <tcp_output+0xc0>
      return ERR_RTE;
 8010ff2:	f06f 0303 	mvn.w	r3, #3
 8010ff6:	e18e      	b.n	8011316 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8010ff8:	693b      	ldr	r3, [r7, #16]
 8010ffa:	681a      	ldr	r2, [r3, #0]
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8011000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011002:	68db      	ldr	r3, [r3, #12]
 8011004:	685b      	ldr	r3, [r3, #4]
 8011006:	4618      	mov	r0, r3
 8011008:	f7f8 ff95 	bl	8009f36 <lwip_htonl>
 801100c:	4602      	mov	r2, r0
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011012:	1ad3      	subs	r3, r2, r3
 8011014:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011016:	8912      	ldrh	r2, [r2, #8]
 8011018:	4413      	add	r3, r2
 801101a:	69ba      	ldr	r2, [r7, #24]
 801101c:	429a      	cmp	r2, r3
 801101e:	d227      	bcs.n	8011070 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011026:	461a      	mov	r2, r3
 8011028:	69bb      	ldr	r3, [r7, #24]
 801102a:	4293      	cmp	r3, r2
 801102c:	d114      	bne.n	8011058 <tcp_output+0x120>
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011032:	2b00      	cmp	r3, #0
 8011034:	d110      	bne.n	8011058 <tcp_output+0x120>
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801103c:	2b00      	cmp	r3, #0
 801103e:	d10b      	bne.n	8011058 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	2200      	movs	r2, #0
 8011044:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	2201      	movs	r2, #1
 801104c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	2200      	movs	r2, #0
 8011054:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	8b5b      	ldrh	r3, [r3, #26]
 801105c:	f003 0302 	and.w	r3, r3, #2
 8011060:	2b00      	cmp	r3, #0
 8011062:	f000 814d 	beq.w	8011300 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8011066:	6878      	ldr	r0, [r7, #4]
 8011068:	f000 fd6c 	bl	8011b44 <tcp_send_empty_ack>
 801106c:	4603      	mov	r3, r0
 801106e:	e152      	b.n	8011316 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	2200      	movs	r2, #0
 8011074:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801107c:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801107e:	6a3b      	ldr	r3, [r7, #32]
 8011080:	2b00      	cmp	r3, #0
 8011082:	f000 811c 	beq.w	80112be <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8011086:	e002      	b.n	801108e <tcp_output+0x156>
 8011088:	6a3b      	ldr	r3, [r7, #32]
 801108a:	681b      	ldr	r3, [r3, #0]
 801108c:	623b      	str	r3, [r7, #32]
 801108e:	6a3b      	ldr	r3, [r7, #32]
 8011090:	681b      	ldr	r3, [r3, #0]
 8011092:	2b00      	cmp	r3, #0
 8011094:	d1f8      	bne.n	8011088 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8011096:	e112      	b.n	80112be <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8011098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801109a:	68db      	ldr	r3, [r3, #12]
 801109c:	899b      	ldrh	r3, [r3, #12]
 801109e:	b29b      	uxth	r3, r3
 80110a0:	4618      	mov	r0, r3
 80110a2:	f7f8 ff33 	bl	8009f0c <lwip_htons>
 80110a6:	4603      	mov	r3, r0
 80110a8:	b2db      	uxtb	r3, r3
 80110aa:	f003 0304 	and.w	r3, r3, #4
 80110ae:	2b00      	cmp	r3, #0
 80110b0:	d006      	beq.n	80110c0 <tcp_output+0x188>
 80110b2:	4b43      	ldr	r3, [pc, #268]	; (80111c0 <tcp_output+0x288>)
 80110b4:	f240 5236 	movw	r2, #1334	; 0x536
 80110b8:	4946      	ldr	r1, [pc, #280]	; (80111d4 <tcp_output+0x29c>)
 80110ba:	4843      	ldr	r0, [pc, #268]	; (80111c8 <tcp_output+0x290>)
 80110bc:	f003 fcfe 	bl	8014abc <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80110c4:	2b00      	cmp	r3, #0
 80110c6:	d01f      	beq.n	8011108 <tcp_output+0x1d0>
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	8b5b      	ldrh	r3, [r3, #26]
 80110cc:	f003 0344 	and.w	r3, r3, #68	; 0x44
 80110d0:	2b00      	cmp	r3, #0
 80110d2:	d119      	bne.n	8011108 <tcp_output+0x1d0>
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80110d8:	2b00      	cmp	r3, #0
 80110da:	d00b      	beq.n	80110f4 <tcp_output+0x1bc>
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80110e0:	681b      	ldr	r3, [r3, #0]
 80110e2:	2b00      	cmp	r3, #0
 80110e4:	d110      	bne.n	8011108 <tcp_output+0x1d0>
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80110ea:	891a      	ldrh	r2, [r3, #8]
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80110f0:	429a      	cmp	r2, r3
 80110f2:	d209      	bcs.n	8011108 <tcp_output+0x1d0>
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80110fa:	2b00      	cmp	r3, #0
 80110fc:	d004      	beq.n	8011108 <tcp_output+0x1d0>
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011104:	2b08      	cmp	r3, #8
 8011106:	d901      	bls.n	801110c <tcp_output+0x1d4>
 8011108:	2301      	movs	r3, #1
 801110a:	e000      	b.n	801110e <tcp_output+0x1d6>
 801110c:	2300      	movs	r3, #0
 801110e:	2b00      	cmp	r3, #0
 8011110:	d106      	bne.n	8011120 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	8b5b      	ldrh	r3, [r3, #26]
 8011116:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801111a:	2b00      	cmp	r3, #0
 801111c:	f000 80e4 	beq.w	80112e8 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	7d1b      	ldrb	r3, [r3, #20]
 8011124:	2b02      	cmp	r3, #2
 8011126:	d00d      	beq.n	8011144 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8011128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801112a:	68db      	ldr	r3, [r3, #12]
 801112c:	899b      	ldrh	r3, [r3, #12]
 801112e:	b29c      	uxth	r4, r3
 8011130:	2010      	movs	r0, #16
 8011132:	f7f8 feeb 	bl	8009f0c <lwip_htons>
 8011136:	4603      	mov	r3, r0
 8011138:	461a      	mov	r2, r3
 801113a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801113c:	68db      	ldr	r3, [r3, #12]
 801113e:	4322      	orrs	r2, r4
 8011140:	b292      	uxth	r2, r2
 8011142:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8011144:	697a      	ldr	r2, [r7, #20]
 8011146:	6879      	ldr	r1, [r7, #4]
 8011148:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801114a:	f000 f909 	bl	8011360 <tcp_output_segment>
 801114e:	4603      	mov	r3, r0
 8011150:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8011152:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011156:	2b00      	cmp	r3, #0
 8011158:	d009      	beq.n	801116e <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	8b5b      	ldrh	r3, [r3, #26]
 801115e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011162:	b29a      	uxth	r2, r3
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	835a      	strh	r2, [r3, #26]
      return err;
 8011168:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801116c:	e0d3      	b.n	8011316 <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801116e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011170:	681a      	ldr	r2, [r3, #0]
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	7d1b      	ldrb	r3, [r3, #20]
 801117a:	2b02      	cmp	r3, #2
 801117c:	d006      	beq.n	801118c <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	8b5b      	ldrh	r3, [r3, #26]
 8011182:	f023 0303 	bic.w	r3, r3, #3
 8011186:	b29a      	uxth	r2, r3
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801118c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801118e:	68db      	ldr	r3, [r3, #12]
 8011190:	685b      	ldr	r3, [r3, #4]
 8011192:	4618      	mov	r0, r3
 8011194:	f7f8 fecf 	bl	8009f36 <lwip_htonl>
 8011198:	4604      	mov	r4, r0
 801119a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801119c:	891b      	ldrh	r3, [r3, #8]
 801119e:	461d      	mov	r5, r3
 80111a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111a2:	68db      	ldr	r3, [r3, #12]
 80111a4:	899b      	ldrh	r3, [r3, #12]
 80111a6:	b29b      	uxth	r3, r3
 80111a8:	4618      	mov	r0, r3
 80111aa:	f7f8 feaf 	bl	8009f0c <lwip_htons>
 80111ae:	4603      	mov	r3, r0
 80111b0:	b2db      	uxtb	r3, r3
 80111b2:	f003 0303 	and.w	r3, r3, #3
 80111b6:	2b00      	cmp	r3, #0
 80111b8:	d00e      	beq.n	80111d8 <tcp_output+0x2a0>
 80111ba:	2301      	movs	r3, #1
 80111bc:	e00d      	b.n	80111da <tcp_output+0x2a2>
 80111be:	bf00      	nop
 80111c0:	0801792c 	.word	0x0801792c
 80111c4:	08017e70 	.word	0x08017e70
 80111c8:	08017980 	.word	0x08017980
 80111cc:	08017e88 	.word	0x08017e88
 80111d0:	24003c90 	.word	0x24003c90
 80111d4:	08017eb0 	.word	0x08017eb0
 80111d8:	2300      	movs	r3, #0
 80111da:	442b      	add	r3, r5
 80111dc:	4423      	add	r3, r4
 80111de:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80111e4:	68bb      	ldr	r3, [r7, #8]
 80111e6:	1ad3      	subs	r3, r2, r3
 80111e8:	2b00      	cmp	r3, #0
 80111ea:	da02      	bge.n	80111f2 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	68ba      	ldr	r2, [r7, #8]
 80111f0:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80111f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111f4:	891b      	ldrh	r3, [r3, #8]
 80111f6:	461c      	mov	r4, r3
 80111f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111fa:	68db      	ldr	r3, [r3, #12]
 80111fc:	899b      	ldrh	r3, [r3, #12]
 80111fe:	b29b      	uxth	r3, r3
 8011200:	4618      	mov	r0, r3
 8011202:	f7f8 fe83 	bl	8009f0c <lwip_htons>
 8011206:	4603      	mov	r3, r0
 8011208:	b2db      	uxtb	r3, r3
 801120a:	f003 0303 	and.w	r3, r3, #3
 801120e:	2b00      	cmp	r3, #0
 8011210:	d001      	beq.n	8011216 <tcp_output+0x2de>
 8011212:	2301      	movs	r3, #1
 8011214:	e000      	b.n	8011218 <tcp_output+0x2e0>
 8011216:	2300      	movs	r3, #0
 8011218:	4423      	add	r3, r4
 801121a:	2b00      	cmp	r3, #0
 801121c:	d049      	beq.n	80112b2 <tcp_output+0x37a>
      seg->next = NULL;
 801121e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011220:	2200      	movs	r2, #0
 8011222:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011228:	2b00      	cmp	r3, #0
 801122a:	d105      	bne.n	8011238 <tcp_output+0x300>
        pcb->unacked = seg;
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011230:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8011232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011234:	623b      	str	r3, [r7, #32]
 8011236:	e03f      	b.n	80112b8 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8011238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801123a:	68db      	ldr	r3, [r3, #12]
 801123c:	685b      	ldr	r3, [r3, #4]
 801123e:	4618      	mov	r0, r3
 8011240:	f7f8 fe79 	bl	8009f36 <lwip_htonl>
 8011244:	4604      	mov	r4, r0
 8011246:	6a3b      	ldr	r3, [r7, #32]
 8011248:	68db      	ldr	r3, [r3, #12]
 801124a:	685b      	ldr	r3, [r3, #4]
 801124c:	4618      	mov	r0, r3
 801124e:	f7f8 fe72 	bl	8009f36 <lwip_htonl>
 8011252:	4603      	mov	r3, r0
 8011254:	1ae3      	subs	r3, r4, r3
 8011256:	2b00      	cmp	r3, #0
 8011258:	da24      	bge.n	80112a4 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	3370      	adds	r3, #112	; 0x70
 801125e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8011260:	e002      	b.n	8011268 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8011262:	69fb      	ldr	r3, [r7, #28]
 8011264:	681b      	ldr	r3, [r3, #0]
 8011266:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8011268:	69fb      	ldr	r3, [r7, #28]
 801126a:	681b      	ldr	r3, [r3, #0]
 801126c:	2b00      	cmp	r3, #0
 801126e:	d011      	beq.n	8011294 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8011270:	69fb      	ldr	r3, [r7, #28]
 8011272:	681b      	ldr	r3, [r3, #0]
 8011274:	68db      	ldr	r3, [r3, #12]
 8011276:	685b      	ldr	r3, [r3, #4]
 8011278:	4618      	mov	r0, r3
 801127a:	f7f8 fe5c 	bl	8009f36 <lwip_htonl>
 801127e:	4604      	mov	r4, r0
 8011280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011282:	68db      	ldr	r3, [r3, #12]
 8011284:	685b      	ldr	r3, [r3, #4]
 8011286:	4618      	mov	r0, r3
 8011288:	f7f8 fe55 	bl	8009f36 <lwip_htonl>
 801128c:	4603      	mov	r3, r0
 801128e:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8011290:	2b00      	cmp	r3, #0
 8011292:	dbe6      	blt.n	8011262 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8011294:	69fb      	ldr	r3, [r7, #28]
 8011296:	681a      	ldr	r2, [r3, #0]
 8011298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801129a:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801129c:	69fb      	ldr	r3, [r7, #28]
 801129e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80112a0:	601a      	str	r2, [r3, #0]
 80112a2:	e009      	b.n	80112b8 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80112a4:	6a3b      	ldr	r3, [r7, #32]
 80112a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80112a8:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80112aa:	6a3b      	ldr	r3, [r7, #32]
 80112ac:	681b      	ldr	r3, [r3, #0]
 80112ae:	623b      	str	r3, [r7, #32]
 80112b0:	e002      	b.n	80112b8 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80112b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80112b4:	f7fb fef7 	bl	800d0a6 <tcp_seg_free>
    }
    seg = pcb->unsent;
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80112bc:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 80112be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	d012      	beq.n	80112ea <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80112c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112c6:	68db      	ldr	r3, [r3, #12]
 80112c8:	685b      	ldr	r3, [r3, #4]
 80112ca:	4618      	mov	r0, r3
 80112cc:	f7f8 fe33 	bl	8009f36 <lwip_htonl>
 80112d0:	4602      	mov	r2, r0
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80112d6:	1ad3      	subs	r3, r2, r3
 80112d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80112da:	8912      	ldrh	r2, [r2, #8]
 80112dc:	4413      	add	r3, r2
  while (seg != NULL &&
 80112de:	69ba      	ldr	r2, [r7, #24]
 80112e0:	429a      	cmp	r2, r3
 80112e2:	f4bf aed9 	bcs.w	8011098 <tcp_output+0x160>
 80112e6:	e000      	b.n	80112ea <tcp_output+0x3b2>
      break;
 80112e8:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80112ee:	2b00      	cmp	r3, #0
 80112f0:	d108      	bne.n	8011304 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	2200      	movs	r2, #0
 80112f6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80112fa:	e004      	b.n	8011306 <tcp_output+0x3ce>
    goto output_done;
 80112fc:	bf00      	nop
 80112fe:	e002      	b.n	8011306 <tcp_output+0x3ce>
    goto output_done;
 8011300:	bf00      	nop
 8011302:	e000      	b.n	8011306 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8011304:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	8b5b      	ldrh	r3, [r3, #26]
 801130a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801130e:	b29a      	uxth	r2, r3
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8011314:	2300      	movs	r3, #0
}
 8011316:	4618      	mov	r0, r3
 8011318:	3728      	adds	r7, #40	; 0x28
 801131a:	46bd      	mov	sp, r7
 801131c:	bdb0      	pop	{r4, r5, r7, pc}
 801131e:	bf00      	nop

08011320 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8011320:	b580      	push	{r7, lr}
 8011322:	b082      	sub	sp, #8
 8011324:	af00      	add	r7, sp, #0
 8011326:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	2b00      	cmp	r3, #0
 801132c:	d106      	bne.n	801133c <tcp_output_segment_busy+0x1c>
 801132e:	4b09      	ldr	r3, [pc, #36]	; (8011354 <tcp_output_segment_busy+0x34>)
 8011330:	f240 529a 	movw	r2, #1434	; 0x59a
 8011334:	4908      	ldr	r1, [pc, #32]	; (8011358 <tcp_output_segment_busy+0x38>)
 8011336:	4809      	ldr	r0, [pc, #36]	; (801135c <tcp_output_segment_busy+0x3c>)
 8011338:	f003 fbc0 	bl	8014abc <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	685b      	ldr	r3, [r3, #4]
 8011340:	7b9b      	ldrb	r3, [r3, #14]
 8011342:	2b01      	cmp	r3, #1
 8011344:	d001      	beq.n	801134a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8011346:	2301      	movs	r3, #1
 8011348:	e000      	b.n	801134c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801134a:	2300      	movs	r3, #0
}
 801134c:	4618      	mov	r0, r3
 801134e:	3708      	adds	r7, #8
 8011350:	46bd      	mov	sp, r7
 8011352:	bd80      	pop	{r7, pc}
 8011354:	0801792c 	.word	0x0801792c
 8011358:	08017ec8 	.word	0x08017ec8
 801135c:	08017980 	.word	0x08017980

08011360 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8011360:	b5b0      	push	{r4, r5, r7, lr}
 8011362:	b08c      	sub	sp, #48	; 0x30
 8011364:	af04      	add	r7, sp, #16
 8011366:	60f8      	str	r0, [r7, #12]
 8011368:	60b9      	str	r1, [r7, #8]
 801136a:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 801136c:	68fb      	ldr	r3, [r7, #12]
 801136e:	2b00      	cmp	r3, #0
 8011370:	d106      	bne.n	8011380 <tcp_output_segment+0x20>
 8011372:	4b63      	ldr	r3, [pc, #396]	; (8011500 <tcp_output_segment+0x1a0>)
 8011374:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8011378:	4962      	ldr	r1, [pc, #392]	; (8011504 <tcp_output_segment+0x1a4>)
 801137a:	4863      	ldr	r0, [pc, #396]	; (8011508 <tcp_output_segment+0x1a8>)
 801137c:	f003 fb9e 	bl	8014abc <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8011380:	68bb      	ldr	r3, [r7, #8]
 8011382:	2b00      	cmp	r3, #0
 8011384:	d106      	bne.n	8011394 <tcp_output_segment+0x34>
 8011386:	4b5e      	ldr	r3, [pc, #376]	; (8011500 <tcp_output_segment+0x1a0>)
 8011388:	f240 52b9 	movw	r2, #1465	; 0x5b9
 801138c:	495f      	ldr	r1, [pc, #380]	; (801150c <tcp_output_segment+0x1ac>)
 801138e:	485e      	ldr	r0, [pc, #376]	; (8011508 <tcp_output_segment+0x1a8>)
 8011390:	f003 fb94 	bl	8014abc <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	2b00      	cmp	r3, #0
 8011398:	d106      	bne.n	80113a8 <tcp_output_segment+0x48>
 801139a:	4b59      	ldr	r3, [pc, #356]	; (8011500 <tcp_output_segment+0x1a0>)
 801139c:	f240 52ba 	movw	r2, #1466	; 0x5ba
 80113a0:	495b      	ldr	r1, [pc, #364]	; (8011510 <tcp_output_segment+0x1b0>)
 80113a2:	4859      	ldr	r0, [pc, #356]	; (8011508 <tcp_output_segment+0x1a8>)
 80113a4:	f003 fb8a 	bl	8014abc <iprintf>

  if (tcp_output_segment_busy(seg)) {
 80113a8:	68f8      	ldr	r0, [r7, #12]
 80113aa:	f7ff ffb9 	bl	8011320 <tcp_output_segment_busy>
 80113ae:	4603      	mov	r3, r0
 80113b0:	2b00      	cmp	r3, #0
 80113b2:	d001      	beq.n	80113b8 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 80113b4:	2300      	movs	r3, #0
 80113b6:	e09f      	b.n	80114f8 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80113b8:	68bb      	ldr	r3, [r7, #8]
 80113ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80113bc:	68fb      	ldr	r3, [r7, #12]
 80113be:	68dc      	ldr	r4, [r3, #12]
 80113c0:	4610      	mov	r0, r2
 80113c2:	f7f8 fdb8 	bl	8009f36 <lwip_htonl>
 80113c6:	4603      	mov	r3, r0
 80113c8:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80113ca:	68bb      	ldr	r3, [r7, #8]
 80113cc:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80113ce:	68fb      	ldr	r3, [r7, #12]
 80113d0:	68dc      	ldr	r4, [r3, #12]
 80113d2:	4610      	mov	r0, r2
 80113d4:	f7f8 fd9a 	bl	8009f0c <lwip_htons>
 80113d8:	4603      	mov	r3, r0
 80113da:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80113dc:	68bb      	ldr	r3, [r7, #8]
 80113de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80113e0:	68ba      	ldr	r2, [r7, #8]
 80113e2:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80113e4:	441a      	add	r2, r3
 80113e6:	68bb      	ldr	r3, [r7, #8]
 80113e8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80113ea:	68fb      	ldr	r3, [r7, #12]
 80113ec:	68db      	ldr	r3, [r3, #12]
 80113ee:	3314      	adds	r3, #20
 80113f0:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80113f2:	68fb      	ldr	r3, [r7, #12]
 80113f4:	7a9b      	ldrb	r3, [r3, #10]
 80113f6:	f003 0301 	and.w	r3, r3, #1
 80113fa:	2b00      	cmp	r3, #0
 80113fc:	d015      	beq.n	801142a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80113fe:	68bb      	ldr	r3, [r7, #8]
 8011400:	3304      	adds	r3, #4
 8011402:	461a      	mov	r2, r3
 8011404:	6879      	ldr	r1, [r7, #4]
 8011406:	f44f 7006 	mov.w	r0, #536	; 0x218
 801140a:	f7fc fa37 	bl	800d87c <tcp_eff_send_mss_netif>
 801140e:	4603      	mov	r3, r0
 8011410:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8011412:	8b7b      	ldrh	r3, [r7, #26]
 8011414:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8011418:	4618      	mov	r0, r3
 801141a:	f7f8 fd8c 	bl	8009f36 <lwip_htonl>
 801141e:	4602      	mov	r2, r0
 8011420:	69fb      	ldr	r3, [r7, #28]
 8011422:	601a      	str	r2, [r3, #0]
    opts += 1;
 8011424:	69fb      	ldr	r3, [r7, #28]
 8011426:	3304      	adds	r3, #4
 8011428:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801142a:	68bb      	ldr	r3, [r7, #8]
 801142c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011430:	2b00      	cmp	r3, #0
 8011432:	da02      	bge.n	801143a <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8011434:	68bb      	ldr	r3, [r7, #8]
 8011436:	2200      	movs	r2, #0
 8011438:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801143a:	68bb      	ldr	r3, [r7, #8]
 801143c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801143e:	2b00      	cmp	r3, #0
 8011440:	d10c      	bne.n	801145c <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8011442:	4b34      	ldr	r3, [pc, #208]	; (8011514 <tcp_output_segment+0x1b4>)
 8011444:	681a      	ldr	r2, [r3, #0]
 8011446:	68bb      	ldr	r3, [r7, #8]
 8011448:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801144a:	68fb      	ldr	r3, [r7, #12]
 801144c:	68db      	ldr	r3, [r3, #12]
 801144e:	685b      	ldr	r3, [r3, #4]
 8011450:	4618      	mov	r0, r3
 8011452:	f7f8 fd70 	bl	8009f36 <lwip_htonl>
 8011456:	4602      	mov	r2, r0
 8011458:	68bb      	ldr	r3, [r7, #8]
 801145a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801145c:	68fb      	ldr	r3, [r7, #12]
 801145e:	68da      	ldr	r2, [r3, #12]
 8011460:	68fb      	ldr	r3, [r7, #12]
 8011462:	685b      	ldr	r3, [r3, #4]
 8011464:	685b      	ldr	r3, [r3, #4]
 8011466:	1ad3      	subs	r3, r2, r3
 8011468:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801146a:	68fb      	ldr	r3, [r7, #12]
 801146c:	685b      	ldr	r3, [r3, #4]
 801146e:	8959      	ldrh	r1, [r3, #10]
 8011470:	68fb      	ldr	r3, [r7, #12]
 8011472:	685b      	ldr	r3, [r3, #4]
 8011474:	8b3a      	ldrh	r2, [r7, #24]
 8011476:	1a8a      	subs	r2, r1, r2
 8011478:	b292      	uxth	r2, r2
 801147a:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801147c:	68fb      	ldr	r3, [r7, #12]
 801147e:	685b      	ldr	r3, [r3, #4]
 8011480:	8919      	ldrh	r1, [r3, #8]
 8011482:	68fb      	ldr	r3, [r7, #12]
 8011484:	685b      	ldr	r3, [r3, #4]
 8011486:	8b3a      	ldrh	r2, [r7, #24]
 8011488:	1a8a      	subs	r2, r1, r2
 801148a:	b292      	uxth	r2, r2
 801148c:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801148e:	68fb      	ldr	r3, [r7, #12]
 8011490:	685b      	ldr	r3, [r3, #4]
 8011492:	68fa      	ldr	r2, [r7, #12]
 8011494:	68d2      	ldr	r2, [r2, #12]
 8011496:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8011498:	68fb      	ldr	r3, [r7, #12]
 801149a:	68db      	ldr	r3, [r3, #12]
 801149c:	2200      	movs	r2, #0
 801149e:	741a      	strb	r2, [r3, #16]
 80114a0:	2200      	movs	r2, #0
 80114a2:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 80114a4:	68fb      	ldr	r3, [r7, #12]
 80114a6:	68db      	ldr	r3, [r3, #12]
 80114a8:	f103 0214 	add.w	r2, r3, #20
 80114ac:	68fb      	ldr	r3, [r7, #12]
 80114ae:	7a9b      	ldrb	r3, [r3, #10]
 80114b0:	009b      	lsls	r3, r3, #2
 80114b2:	f003 0304 	and.w	r3, r3, #4
 80114b6:	4413      	add	r3, r2
 80114b8:	69fa      	ldr	r2, [r7, #28]
 80114ba:	429a      	cmp	r2, r3
 80114bc:	d006      	beq.n	80114cc <tcp_output_segment+0x16c>
 80114be:	4b10      	ldr	r3, [pc, #64]	; (8011500 <tcp_output_segment+0x1a0>)
 80114c0:	f240 621c 	movw	r2, #1564	; 0x61c
 80114c4:	4914      	ldr	r1, [pc, #80]	; (8011518 <tcp_output_segment+0x1b8>)
 80114c6:	4810      	ldr	r0, [pc, #64]	; (8011508 <tcp_output_segment+0x1a8>)
 80114c8:	f003 faf8 	bl	8014abc <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80114cc:	68fb      	ldr	r3, [r7, #12]
 80114ce:	6858      	ldr	r0, [r3, #4]
 80114d0:	68b9      	ldr	r1, [r7, #8]
 80114d2:	68bb      	ldr	r3, [r7, #8]
 80114d4:	1d1c      	adds	r4, r3, #4
 80114d6:	68bb      	ldr	r3, [r7, #8]
 80114d8:	7add      	ldrb	r5, [r3, #11]
 80114da:	68bb      	ldr	r3, [r7, #8]
 80114dc:	7a9b      	ldrb	r3, [r3, #10]
 80114de:	687a      	ldr	r2, [r7, #4]
 80114e0:	9202      	str	r2, [sp, #8]
 80114e2:	2206      	movs	r2, #6
 80114e4:	9201      	str	r2, [sp, #4]
 80114e6:	9300      	str	r3, [sp, #0]
 80114e8:	462b      	mov	r3, r5
 80114ea:	4622      	mov	r2, r4
 80114ec:	f002 fa5c 	bl	80139a8 <ip4_output_if>
 80114f0:	4603      	mov	r3, r0
 80114f2:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 80114f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80114f8:	4618      	mov	r0, r3
 80114fa:	3720      	adds	r7, #32
 80114fc:	46bd      	mov	sp, r7
 80114fe:	bdb0      	pop	{r4, r5, r7, pc}
 8011500:	0801792c 	.word	0x0801792c
 8011504:	08017ef0 	.word	0x08017ef0
 8011508:	08017980 	.word	0x08017980
 801150c:	08017f10 	.word	0x08017f10
 8011510:	08017f30 	.word	0x08017f30
 8011514:	24003c80 	.word	0x24003c80
 8011518:	08017f54 	.word	0x08017f54

0801151c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801151c:	b5b0      	push	{r4, r5, r7, lr}
 801151e:	b084      	sub	sp, #16
 8011520:	af00      	add	r7, sp, #0
 8011522:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	2b00      	cmp	r3, #0
 8011528:	d106      	bne.n	8011538 <tcp_rexmit_rto_prepare+0x1c>
 801152a:	4b31      	ldr	r3, [pc, #196]	; (80115f0 <tcp_rexmit_rto_prepare+0xd4>)
 801152c:	f240 6263 	movw	r2, #1635	; 0x663
 8011530:	4930      	ldr	r1, [pc, #192]	; (80115f4 <tcp_rexmit_rto_prepare+0xd8>)
 8011532:	4831      	ldr	r0, [pc, #196]	; (80115f8 <tcp_rexmit_rto_prepare+0xdc>)
 8011534:	f003 fac2 	bl	8014abc <iprintf>

  if (pcb->unacked == NULL) {
 8011538:	687b      	ldr	r3, [r7, #4]
 801153a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801153c:	2b00      	cmp	r3, #0
 801153e:	d102      	bne.n	8011546 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8011540:	f06f 0305 	mvn.w	r3, #5
 8011544:	e050      	b.n	80115e8 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8011546:	687b      	ldr	r3, [r7, #4]
 8011548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801154a:	60fb      	str	r3, [r7, #12]
 801154c:	e00b      	b.n	8011566 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801154e:	68f8      	ldr	r0, [r7, #12]
 8011550:	f7ff fee6 	bl	8011320 <tcp_output_segment_busy>
 8011554:	4603      	mov	r3, r0
 8011556:	2b00      	cmp	r3, #0
 8011558:	d002      	beq.n	8011560 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801155a:	f06f 0305 	mvn.w	r3, #5
 801155e:	e043      	b.n	80115e8 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8011560:	68fb      	ldr	r3, [r7, #12]
 8011562:	681b      	ldr	r3, [r3, #0]
 8011564:	60fb      	str	r3, [r7, #12]
 8011566:	68fb      	ldr	r3, [r7, #12]
 8011568:	681b      	ldr	r3, [r3, #0]
 801156a:	2b00      	cmp	r3, #0
 801156c:	d1ef      	bne.n	801154e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801156e:	68f8      	ldr	r0, [r7, #12]
 8011570:	f7ff fed6 	bl	8011320 <tcp_output_segment_busy>
 8011574:	4603      	mov	r3, r0
 8011576:	2b00      	cmp	r3, #0
 8011578:	d002      	beq.n	8011580 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801157a:	f06f 0305 	mvn.w	r3, #5
 801157e:	e033      	b.n	80115e8 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8011584:	68fb      	ldr	r3, [r7, #12]
 8011586:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	2200      	movs	r2, #0
 8011594:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	8b5b      	ldrh	r3, [r3, #26]
 801159a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801159e:	b29a      	uxth	r2, r3
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80115a4:	68fb      	ldr	r3, [r7, #12]
 80115a6:	68db      	ldr	r3, [r3, #12]
 80115a8:	685b      	ldr	r3, [r3, #4]
 80115aa:	4618      	mov	r0, r3
 80115ac:	f7f8 fcc3 	bl	8009f36 <lwip_htonl>
 80115b0:	4604      	mov	r4, r0
 80115b2:	68fb      	ldr	r3, [r7, #12]
 80115b4:	891b      	ldrh	r3, [r3, #8]
 80115b6:	461d      	mov	r5, r3
 80115b8:	68fb      	ldr	r3, [r7, #12]
 80115ba:	68db      	ldr	r3, [r3, #12]
 80115bc:	899b      	ldrh	r3, [r3, #12]
 80115be:	b29b      	uxth	r3, r3
 80115c0:	4618      	mov	r0, r3
 80115c2:	f7f8 fca3 	bl	8009f0c <lwip_htons>
 80115c6:	4603      	mov	r3, r0
 80115c8:	b2db      	uxtb	r3, r3
 80115ca:	f003 0303 	and.w	r3, r3, #3
 80115ce:	2b00      	cmp	r3, #0
 80115d0:	d001      	beq.n	80115d6 <tcp_rexmit_rto_prepare+0xba>
 80115d2:	2301      	movs	r3, #1
 80115d4:	e000      	b.n	80115d8 <tcp_rexmit_rto_prepare+0xbc>
 80115d6:	2300      	movs	r3, #0
 80115d8:	442b      	add	r3, r5
 80115da:	18e2      	adds	r2, r4, r3
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	2200      	movs	r2, #0
 80115e4:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 80115e6:	2300      	movs	r3, #0
}
 80115e8:	4618      	mov	r0, r3
 80115ea:	3710      	adds	r7, #16
 80115ec:	46bd      	mov	sp, r7
 80115ee:	bdb0      	pop	{r4, r5, r7, pc}
 80115f0:	0801792c 	.word	0x0801792c
 80115f4:	08017f68 	.word	0x08017f68
 80115f8:	08017980 	.word	0x08017980

080115fc <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 80115fc:	b580      	push	{r7, lr}
 80115fe:	b082      	sub	sp, #8
 8011600:	af00      	add	r7, sp, #0
 8011602:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	2b00      	cmp	r3, #0
 8011608:	d106      	bne.n	8011618 <tcp_rexmit_rto_commit+0x1c>
 801160a:	4b0d      	ldr	r3, [pc, #52]	; (8011640 <tcp_rexmit_rto_commit+0x44>)
 801160c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8011610:	490c      	ldr	r1, [pc, #48]	; (8011644 <tcp_rexmit_rto_commit+0x48>)
 8011612:	480d      	ldr	r0, [pc, #52]	; (8011648 <tcp_rexmit_rto_commit+0x4c>)
 8011614:	f003 fa52 	bl	8014abc <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801161e:	2bff      	cmp	r3, #255	; 0xff
 8011620:	d007      	beq.n	8011632 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011628:	3301      	adds	r3, #1
 801162a:	b2da      	uxtb	r2, r3
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8011632:	6878      	ldr	r0, [r7, #4]
 8011634:	f7ff fc80 	bl	8010f38 <tcp_output>
}
 8011638:	bf00      	nop
 801163a:	3708      	adds	r7, #8
 801163c:	46bd      	mov	sp, r7
 801163e:	bd80      	pop	{r7, pc}
 8011640:	0801792c 	.word	0x0801792c
 8011644:	08017f8c 	.word	0x08017f8c
 8011648:	08017980 	.word	0x08017980

0801164c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801164c:	b580      	push	{r7, lr}
 801164e:	b082      	sub	sp, #8
 8011650:	af00      	add	r7, sp, #0
 8011652:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	2b00      	cmp	r3, #0
 8011658:	d106      	bne.n	8011668 <tcp_rexmit_rto+0x1c>
 801165a:	4b0a      	ldr	r3, [pc, #40]	; (8011684 <tcp_rexmit_rto+0x38>)
 801165c:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8011660:	4909      	ldr	r1, [pc, #36]	; (8011688 <tcp_rexmit_rto+0x3c>)
 8011662:	480a      	ldr	r0, [pc, #40]	; (801168c <tcp_rexmit_rto+0x40>)
 8011664:	f003 fa2a 	bl	8014abc <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8011668:	6878      	ldr	r0, [r7, #4]
 801166a:	f7ff ff57 	bl	801151c <tcp_rexmit_rto_prepare>
 801166e:	4603      	mov	r3, r0
 8011670:	2b00      	cmp	r3, #0
 8011672:	d102      	bne.n	801167a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8011674:	6878      	ldr	r0, [r7, #4]
 8011676:	f7ff ffc1 	bl	80115fc <tcp_rexmit_rto_commit>
  }
}
 801167a:	bf00      	nop
 801167c:	3708      	adds	r7, #8
 801167e:	46bd      	mov	sp, r7
 8011680:	bd80      	pop	{r7, pc}
 8011682:	bf00      	nop
 8011684:	0801792c 	.word	0x0801792c
 8011688:	08017fb0 	.word	0x08017fb0
 801168c:	08017980 	.word	0x08017980

08011690 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8011690:	b590      	push	{r4, r7, lr}
 8011692:	b085      	sub	sp, #20
 8011694:	af00      	add	r7, sp, #0
 8011696:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	2b00      	cmp	r3, #0
 801169c:	d106      	bne.n	80116ac <tcp_rexmit+0x1c>
 801169e:	4b2f      	ldr	r3, [pc, #188]	; (801175c <tcp_rexmit+0xcc>)
 80116a0:	f240 62c1 	movw	r2, #1729	; 0x6c1
 80116a4:	492e      	ldr	r1, [pc, #184]	; (8011760 <tcp_rexmit+0xd0>)
 80116a6:	482f      	ldr	r0, [pc, #188]	; (8011764 <tcp_rexmit+0xd4>)
 80116a8:	f003 fa08 	bl	8014abc <iprintf>

  if (pcb->unacked == NULL) {
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80116b0:	2b00      	cmp	r3, #0
 80116b2:	d102      	bne.n	80116ba <tcp_rexmit+0x2a>
    return ERR_VAL;
 80116b4:	f06f 0305 	mvn.w	r3, #5
 80116b8:	e04c      	b.n	8011754 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80116be:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80116c0:	68b8      	ldr	r0, [r7, #8]
 80116c2:	f7ff fe2d 	bl	8011320 <tcp_output_segment_busy>
 80116c6:	4603      	mov	r3, r0
 80116c8:	2b00      	cmp	r3, #0
 80116ca:	d002      	beq.n	80116d2 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80116cc:	f06f 0305 	mvn.w	r3, #5
 80116d0:	e040      	b.n	8011754 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 80116d2:	68bb      	ldr	r3, [r7, #8]
 80116d4:	681a      	ldr	r2, [r3, #0]
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	336c      	adds	r3, #108	; 0x6c
 80116de:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80116e0:	e002      	b.n	80116e8 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 80116e2:	68fb      	ldr	r3, [r7, #12]
 80116e4:	681b      	ldr	r3, [r3, #0]
 80116e6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80116e8:	68fb      	ldr	r3, [r7, #12]
 80116ea:	681b      	ldr	r3, [r3, #0]
 80116ec:	2b00      	cmp	r3, #0
 80116ee:	d011      	beq.n	8011714 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80116f0:	68fb      	ldr	r3, [r7, #12]
 80116f2:	681b      	ldr	r3, [r3, #0]
 80116f4:	68db      	ldr	r3, [r3, #12]
 80116f6:	685b      	ldr	r3, [r3, #4]
 80116f8:	4618      	mov	r0, r3
 80116fa:	f7f8 fc1c 	bl	8009f36 <lwip_htonl>
 80116fe:	4604      	mov	r4, r0
 8011700:	68bb      	ldr	r3, [r7, #8]
 8011702:	68db      	ldr	r3, [r3, #12]
 8011704:	685b      	ldr	r3, [r3, #4]
 8011706:	4618      	mov	r0, r3
 8011708:	f7f8 fc15 	bl	8009f36 <lwip_htonl>
 801170c:	4603      	mov	r3, r0
 801170e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8011710:	2b00      	cmp	r3, #0
 8011712:	dbe6      	blt.n	80116e2 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8011714:	68fb      	ldr	r3, [r7, #12]
 8011716:	681a      	ldr	r2, [r3, #0]
 8011718:	68bb      	ldr	r3, [r7, #8]
 801171a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801171c:	68fb      	ldr	r3, [r7, #12]
 801171e:	68ba      	ldr	r2, [r7, #8]
 8011720:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8011722:	68bb      	ldr	r3, [r7, #8]
 8011724:	681b      	ldr	r3, [r3, #0]
 8011726:	2b00      	cmp	r3, #0
 8011728:	d103      	bne.n	8011732 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	2200      	movs	r2, #0
 801172e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011738:	2bff      	cmp	r3, #255	; 0xff
 801173a:	d007      	beq.n	801174c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801173c:	687b      	ldr	r3, [r7, #4]
 801173e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011742:	3301      	adds	r3, #1
 8011744:	b2da      	uxtb	r2, r3
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	2200      	movs	r2, #0
 8011750:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8011752:	2300      	movs	r3, #0
}
 8011754:	4618      	mov	r0, r3
 8011756:	3714      	adds	r7, #20
 8011758:	46bd      	mov	sp, r7
 801175a:	bd90      	pop	{r4, r7, pc}
 801175c:	0801792c 	.word	0x0801792c
 8011760:	08017fcc 	.word	0x08017fcc
 8011764:	08017980 	.word	0x08017980

08011768 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8011768:	b580      	push	{r7, lr}
 801176a:	b082      	sub	sp, #8
 801176c:	af00      	add	r7, sp, #0
 801176e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	2b00      	cmp	r3, #0
 8011774:	d106      	bne.n	8011784 <tcp_rexmit_fast+0x1c>
 8011776:	4b2a      	ldr	r3, [pc, #168]	; (8011820 <tcp_rexmit_fast+0xb8>)
 8011778:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801177c:	4929      	ldr	r1, [pc, #164]	; (8011824 <tcp_rexmit_fast+0xbc>)
 801177e:	482a      	ldr	r0, [pc, #168]	; (8011828 <tcp_rexmit_fast+0xc0>)
 8011780:	f003 f99c 	bl	8014abc <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011788:	2b00      	cmp	r3, #0
 801178a:	d045      	beq.n	8011818 <tcp_rexmit_fast+0xb0>
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	8b5b      	ldrh	r3, [r3, #26]
 8011790:	f003 0304 	and.w	r3, r3, #4
 8011794:	2b00      	cmp	r3, #0
 8011796:	d13f      	bne.n	8011818 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8011798:	6878      	ldr	r0, [r7, #4]
 801179a:	f7ff ff79 	bl	8011690 <tcp_rexmit>
 801179e:	4603      	mov	r3, r0
 80117a0:	2b00      	cmp	r3, #0
 80117a2:	d139      	bne.n	8011818 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80117b0:	4293      	cmp	r3, r2
 80117b2:	bf28      	it	cs
 80117b4:	4613      	movcs	r3, r2
 80117b6:	b29b      	uxth	r3, r3
 80117b8:	2b00      	cmp	r3, #0
 80117ba:	da00      	bge.n	80117be <tcp_rexmit_fast+0x56>
 80117bc:	3301      	adds	r3, #1
 80117be:	105b      	asrs	r3, r3, #1
 80117c0:	b29a      	uxth	r2, r3
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80117ce:	461a      	mov	r2, r3
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80117d4:	005b      	lsls	r3, r3, #1
 80117d6:	429a      	cmp	r2, r3
 80117d8:	d206      	bcs.n	80117e8 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80117de:	005b      	lsls	r3, r3, #1
 80117e0:	b29a      	uxth	r2, r3
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80117f2:	4619      	mov	r1, r3
 80117f4:	0049      	lsls	r1, r1, #1
 80117f6:	440b      	add	r3, r1
 80117f8:	b29b      	uxth	r3, r3
 80117fa:	4413      	add	r3, r2
 80117fc:	b29a      	uxth	r2, r3
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	8b5b      	ldrh	r3, [r3, #26]
 8011808:	f043 0304 	orr.w	r3, r3, #4
 801180c:	b29a      	uxth	r2, r3
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	2200      	movs	r2, #0
 8011816:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8011818:	bf00      	nop
 801181a:	3708      	adds	r7, #8
 801181c:	46bd      	mov	sp, r7
 801181e:	bd80      	pop	{r7, pc}
 8011820:	0801792c 	.word	0x0801792c
 8011824:	08017fe4 	.word	0x08017fe4
 8011828:	08017980 	.word	0x08017980

0801182c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801182c:	b580      	push	{r7, lr}
 801182e:	b086      	sub	sp, #24
 8011830:	af00      	add	r7, sp, #0
 8011832:	60f8      	str	r0, [r7, #12]
 8011834:	607b      	str	r3, [r7, #4]
 8011836:	460b      	mov	r3, r1
 8011838:	817b      	strh	r3, [r7, #10]
 801183a:	4613      	mov	r3, r2
 801183c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801183e:	897a      	ldrh	r2, [r7, #10]
 8011840:	893b      	ldrh	r3, [r7, #8]
 8011842:	4413      	add	r3, r2
 8011844:	b29b      	uxth	r3, r3
 8011846:	3314      	adds	r3, #20
 8011848:	b29b      	uxth	r3, r3
 801184a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801184e:	4619      	mov	r1, r3
 8011850:	2022      	movs	r0, #34	; 0x22
 8011852:	f7f9 fd07 	bl	800b264 <pbuf_alloc>
 8011856:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8011858:	697b      	ldr	r3, [r7, #20]
 801185a:	2b00      	cmp	r3, #0
 801185c:	d04d      	beq.n	80118fa <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801185e:	897b      	ldrh	r3, [r7, #10]
 8011860:	3313      	adds	r3, #19
 8011862:	697a      	ldr	r2, [r7, #20]
 8011864:	8952      	ldrh	r2, [r2, #10]
 8011866:	4293      	cmp	r3, r2
 8011868:	db06      	blt.n	8011878 <tcp_output_alloc_header_common+0x4c>
 801186a:	4b26      	ldr	r3, [pc, #152]	; (8011904 <tcp_output_alloc_header_common+0xd8>)
 801186c:	f240 7223 	movw	r2, #1827	; 0x723
 8011870:	4925      	ldr	r1, [pc, #148]	; (8011908 <tcp_output_alloc_header_common+0xdc>)
 8011872:	4826      	ldr	r0, [pc, #152]	; (801190c <tcp_output_alloc_header_common+0xe0>)
 8011874:	f003 f922 	bl	8014abc <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8011878:	697b      	ldr	r3, [r7, #20]
 801187a:	685b      	ldr	r3, [r3, #4]
 801187c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801187e:	8c3b      	ldrh	r3, [r7, #32]
 8011880:	4618      	mov	r0, r3
 8011882:	f7f8 fb43 	bl	8009f0c <lwip_htons>
 8011886:	4603      	mov	r3, r0
 8011888:	461a      	mov	r2, r3
 801188a:	693b      	ldr	r3, [r7, #16]
 801188c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801188e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011890:	4618      	mov	r0, r3
 8011892:	f7f8 fb3b 	bl	8009f0c <lwip_htons>
 8011896:	4603      	mov	r3, r0
 8011898:	461a      	mov	r2, r3
 801189a:	693b      	ldr	r3, [r7, #16]
 801189c:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801189e:	693b      	ldr	r3, [r7, #16]
 80118a0:	687a      	ldr	r2, [r7, #4]
 80118a2:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80118a4:	68f8      	ldr	r0, [r7, #12]
 80118a6:	f7f8 fb46 	bl	8009f36 <lwip_htonl>
 80118aa:	4602      	mov	r2, r0
 80118ac:	693b      	ldr	r3, [r7, #16]
 80118ae:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80118b0:	897b      	ldrh	r3, [r7, #10]
 80118b2:	089b      	lsrs	r3, r3, #2
 80118b4:	b29b      	uxth	r3, r3
 80118b6:	3305      	adds	r3, #5
 80118b8:	b29b      	uxth	r3, r3
 80118ba:	031b      	lsls	r3, r3, #12
 80118bc:	b29a      	uxth	r2, r3
 80118be:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80118c2:	b29b      	uxth	r3, r3
 80118c4:	4313      	orrs	r3, r2
 80118c6:	b29b      	uxth	r3, r3
 80118c8:	4618      	mov	r0, r3
 80118ca:	f7f8 fb1f 	bl	8009f0c <lwip_htons>
 80118ce:	4603      	mov	r3, r0
 80118d0:	461a      	mov	r2, r3
 80118d2:	693b      	ldr	r3, [r7, #16]
 80118d4:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80118d6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80118d8:	4618      	mov	r0, r3
 80118da:	f7f8 fb17 	bl	8009f0c <lwip_htons>
 80118de:	4603      	mov	r3, r0
 80118e0:	461a      	mov	r2, r3
 80118e2:	693b      	ldr	r3, [r7, #16]
 80118e4:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80118e6:	693b      	ldr	r3, [r7, #16]
 80118e8:	2200      	movs	r2, #0
 80118ea:	741a      	strb	r2, [r3, #16]
 80118ec:	2200      	movs	r2, #0
 80118ee:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80118f0:	693b      	ldr	r3, [r7, #16]
 80118f2:	2200      	movs	r2, #0
 80118f4:	749a      	strb	r2, [r3, #18]
 80118f6:	2200      	movs	r2, #0
 80118f8:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80118fa:	697b      	ldr	r3, [r7, #20]
}
 80118fc:	4618      	mov	r0, r3
 80118fe:	3718      	adds	r7, #24
 8011900:	46bd      	mov	sp, r7
 8011902:	bd80      	pop	{r7, pc}
 8011904:	0801792c 	.word	0x0801792c
 8011908:	08018004 	.word	0x08018004
 801190c:	08017980 	.word	0x08017980

08011910 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8011910:	b5b0      	push	{r4, r5, r7, lr}
 8011912:	b08a      	sub	sp, #40	; 0x28
 8011914:	af04      	add	r7, sp, #16
 8011916:	60f8      	str	r0, [r7, #12]
 8011918:	607b      	str	r3, [r7, #4]
 801191a:	460b      	mov	r3, r1
 801191c:	817b      	strh	r3, [r7, #10]
 801191e:	4613      	mov	r3, r2
 8011920:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8011922:	68fb      	ldr	r3, [r7, #12]
 8011924:	2b00      	cmp	r3, #0
 8011926:	d106      	bne.n	8011936 <tcp_output_alloc_header+0x26>
 8011928:	4b15      	ldr	r3, [pc, #84]	; (8011980 <tcp_output_alloc_header+0x70>)
 801192a:	f240 7242 	movw	r2, #1858	; 0x742
 801192e:	4915      	ldr	r1, [pc, #84]	; (8011984 <tcp_output_alloc_header+0x74>)
 8011930:	4815      	ldr	r0, [pc, #84]	; (8011988 <tcp_output_alloc_header+0x78>)
 8011932:	f003 f8c3 	bl	8014abc <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8011936:	68fb      	ldr	r3, [r7, #12]
 8011938:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801193a:	68fb      	ldr	r3, [r7, #12]
 801193c:	8adb      	ldrh	r3, [r3, #22]
 801193e:	68fa      	ldr	r2, [r7, #12]
 8011940:	8b12      	ldrh	r2, [r2, #24]
 8011942:	68f9      	ldr	r1, [r7, #12]
 8011944:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8011946:	893d      	ldrh	r5, [r7, #8]
 8011948:	897c      	ldrh	r4, [r7, #10]
 801194a:	9103      	str	r1, [sp, #12]
 801194c:	2110      	movs	r1, #16
 801194e:	9102      	str	r1, [sp, #8]
 8011950:	9201      	str	r2, [sp, #4]
 8011952:	9300      	str	r3, [sp, #0]
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	462a      	mov	r2, r5
 8011958:	4621      	mov	r1, r4
 801195a:	f7ff ff67 	bl	801182c <tcp_output_alloc_header_common>
 801195e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8011960:	697b      	ldr	r3, [r7, #20]
 8011962:	2b00      	cmp	r3, #0
 8011964:	d006      	beq.n	8011974 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8011966:	68fb      	ldr	r3, [r7, #12]
 8011968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801196a:	68fa      	ldr	r2, [r7, #12]
 801196c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801196e:	441a      	add	r2, r3
 8011970:	68fb      	ldr	r3, [r7, #12]
 8011972:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8011974:	697b      	ldr	r3, [r7, #20]
}
 8011976:	4618      	mov	r0, r3
 8011978:	3718      	adds	r7, #24
 801197a:	46bd      	mov	sp, r7
 801197c:	bdb0      	pop	{r4, r5, r7, pc}
 801197e:	bf00      	nop
 8011980:	0801792c 	.word	0x0801792c
 8011984:	08018034 	.word	0x08018034
 8011988:	08017980 	.word	0x08017980

0801198c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801198c:	b580      	push	{r7, lr}
 801198e:	b088      	sub	sp, #32
 8011990:	af00      	add	r7, sp, #0
 8011992:	60f8      	str	r0, [r7, #12]
 8011994:	60b9      	str	r1, [r7, #8]
 8011996:	4611      	mov	r1, r2
 8011998:	461a      	mov	r2, r3
 801199a:	460b      	mov	r3, r1
 801199c:	71fb      	strb	r3, [r7, #7]
 801199e:	4613      	mov	r3, r2
 80119a0:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80119a2:	2300      	movs	r3, #0
 80119a4:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80119a6:	68bb      	ldr	r3, [r7, #8]
 80119a8:	2b00      	cmp	r3, #0
 80119aa:	d106      	bne.n	80119ba <tcp_output_fill_options+0x2e>
 80119ac:	4b13      	ldr	r3, [pc, #76]	; (80119fc <tcp_output_fill_options+0x70>)
 80119ae:	f240 7256 	movw	r2, #1878	; 0x756
 80119b2:	4913      	ldr	r1, [pc, #76]	; (8011a00 <tcp_output_fill_options+0x74>)
 80119b4:	4813      	ldr	r0, [pc, #76]	; (8011a04 <tcp_output_fill_options+0x78>)
 80119b6:	f003 f881 	bl	8014abc <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80119ba:	68bb      	ldr	r3, [r7, #8]
 80119bc:	685b      	ldr	r3, [r3, #4]
 80119be:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80119c0:	69bb      	ldr	r3, [r7, #24]
 80119c2:	3314      	adds	r3, #20
 80119c4:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80119c6:	69bb      	ldr	r3, [r7, #24]
 80119c8:	f103 0214 	add.w	r2, r3, #20
 80119cc:	8bfb      	ldrh	r3, [r7, #30]
 80119ce:	009b      	lsls	r3, r3, #2
 80119d0:	4619      	mov	r1, r3
 80119d2:	79fb      	ldrb	r3, [r7, #7]
 80119d4:	009b      	lsls	r3, r3, #2
 80119d6:	f003 0304 	and.w	r3, r3, #4
 80119da:	440b      	add	r3, r1
 80119dc:	4413      	add	r3, r2
 80119de:	697a      	ldr	r2, [r7, #20]
 80119e0:	429a      	cmp	r2, r3
 80119e2:	d006      	beq.n	80119f2 <tcp_output_fill_options+0x66>
 80119e4:	4b05      	ldr	r3, [pc, #20]	; (80119fc <tcp_output_fill_options+0x70>)
 80119e6:	f240 7275 	movw	r2, #1909	; 0x775
 80119ea:	4907      	ldr	r1, [pc, #28]	; (8011a08 <tcp_output_fill_options+0x7c>)
 80119ec:	4805      	ldr	r0, [pc, #20]	; (8011a04 <tcp_output_fill_options+0x78>)
 80119ee:	f003 f865 	bl	8014abc <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80119f2:	bf00      	nop
 80119f4:	3720      	adds	r7, #32
 80119f6:	46bd      	mov	sp, r7
 80119f8:	bd80      	pop	{r7, pc}
 80119fa:	bf00      	nop
 80119fc:	0801792c 	.word	0x0801792c
 8011a00:	0801805c 	.word	0x0801805c
 8011a04:	08017980 	.word	0x08017980
 8011a08:	08017f54 	.word	0x08017f54

08011a0c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8011a0c:	b580      	push	{r7, lr}
 8011a0e:	b08a      	sub	sp, #40	; 0x28
 8011a10:	af04      	add	r7, sp, #16
 8011a12:	60f8      	str	r0, [r7, #12]
 8011a14:	60b9      	str	r1, [r7, #8]
 8011a16:	607a      	str	r2, [r7, #4]
 8011a18:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8011a1a:	68bb      	ldr	r3, [r7, #8]
 8011a1c:	2b00      	cmp	r3, #0
 8011a1e:	d106      	bne.n	8011a2e <tcp_output_control_segment+0x22>
 8011a20:	4b1c      	ldr	r3, [pc, #112]	; (8011a94 <tcp_output_control_segment+0x88>)
 8011a22:	f240 7287 	movw	r2, #1927	; 0x787
 8011a26:	491c      	ldr	r1, [pc, #112]	; (8011a98 <tcp_output_control_segment+0x8c>)
 8011a28:	481c      	ldr	r0, [pc, #112]	; (8011a9c <tcp_output_control_segment+0x90>)
 8011a2a:	f003 f847 	bl	8014abc <iprintf>

  netif = tcp_route(pcb, src, dst);
 8011a2e:	683a      	ldr	r2, [r7, #0]
 8011a30:	6879      	ldr	r1, [r7, #4]
 8011a32:	68f8      	ldr	r0, [r7, #12]
 8011a34:	f7fe fae8 	bl	8010008 <tcp_route>
 8011a38:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8011a3a:	693b      	ldr	r3, [r7, #16]
 8011a3c:	2b00      	cmp	r3, #0
 8011a3e:	d102      	bne.n	8011a46 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8011a40:	23fc      	movs	r3, #252	; 0xfc
 8011a42:	75fb      	strb	r3, [r7, #23]
 8011a44:	e01c      	b.n	8011a80 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8011a46:	68fb      	ldr	r3, [r7, #12]
 8011a48:	2b00      	cmp	r3, #0
 8011a4a:	d006      	beq.n	8011a5a <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8011a4c:	68fb      	ldr	r3, [r7, #12]
 8011a4e:	7adb      	ldrb	r3, [r3, #11]
 8011a50:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8011a52:	68fb      	ldr	r3, [r7, #12]
 8011a54:	7a9b      	ldrb	r3, [r3, #10]
 8011a56:	757b      	strb	r3, [r7, #21]
 8011a58:	e003      	b.n	8011a62 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8011a5a:	23ff      	movs	r3, #255	; 0xff
 8011a5c:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8011a5e:	2300      	movs	r3, #0
 8011a60:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8011a62:	7dba      	ldrb	r2, [r7, #22]
 8011a64:	693b      	ldr	r3, [r7, #16]
 8011a66:	9302      	str	r3, [sp, #8]
 8011a68:	2306      	movs	r3, #6
 8011a6a:	9301      	str	r3, [sp, #4]
 8011a6c:	7d7b      	ldrb	r3, [r7, #21]
 8011a6e:	9300      	str	r3, [sp, #0]
 8011a70:	4613      	mov	r3, r2
 8011a72:	683a      	ldr	r2, [r7, #0]
 8011a74:	6879      	ldr	r1, [r7, #4]
 8011a76:	68b8      	ldr	r0, [r7, #8]
 8011a78:	f001 ff96 	bl	80139a8 <ip4_output_if>
 8011a7c:	4603      	mov	r3, r0
 8011a7e:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8011a80:	68b8      	ldr	r0, [r7, #8]
 8011a82:	f7f9 fed3 	bl	800b82c <pbuf_free>
  return err;
 8011a86:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011a8a:	4618      	mov	r0, r3
 8011a8c:	3718      	adds	r7, #24
 8011a8e:	46bd      	mov	sp, r7
 8011a90:	bd80      	pop	{r7, pc}
 8011a92:	bf00      	nop
 8011a94:	0801792c 	.word	0x0801792c
 8011a98:	08018084 	.word	0x08018084
 8011a9c:	08017980 	.word	0x08017980

08011aa0 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8011aa0:	b590      	push	{r4, r7, lr}
 8011aa2:	b08b      	sub	sp, #44	; 0x2c
 8011aa4:	af04      	add	r7, sp, #16
 8011aa6:	60f8      	str	r0, [r7, #12]
 8011aa8:	60b9      	str	r1, [r7, #8]
 8011aaa:	607a      	str	r2, [r7, #4]
 8011aac:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8011aae:	683b      	ldr	r3, [r7, #0]
 8011ab0:	2b00      	cmp	r3, #0
 8011ab2:	d106      	bne.n	8011ac2 <tcp_rst+0x22>
 8011ab4:	4b1f      	ldr	r3, [pc, #124]	; (8011b34 <tcp_rst+0x94>)
 8011ab6:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8011aba:	491f      	ldr	r1, [pc, #124]	; (8011b38 <tcp_rst+0x98>)
 8011abc:	481f      	ldr	r0, [pc, #124]	; (8011b3c <tcp_rst+0x9c>)
 8011abe:	f002 fffd 	bl	8014abc <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8011ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ac4:	2b00      	cmp	r3, #0
 8011ac6:	d106      	bne.n	8011ad6 <tcp_rst+0x36>
 8011ac8:	4b1a      	ldr	r3, [pc, #104]	; (8011b34 <tcp_rst+0x94>)
 8011aca:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8011ace:	491c      	ldr	r1, [pc, #112]	; (8011b40 <tcp_rst+0xa0>)
 8011ad0:	481a      	ldr	r0, [pc, #104]	; (8011b3c <tcp_rst+0x9c>)
 8011ad2:	f002 fff3 	bl	8014abc <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011ad6:	2300      	movs	r3, #0
 8011ad8:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8011ada:	f246 0308 	movw	r3, #24584	; 0x6008
 8011ade:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8011ae0:	7dfb      	ldrb	r3, [r7, #23]
 8011ae2:	b29c      	uxth	r4, r3
 8011ae4:	68b8      	ldr	r0, [r7, #8]
 8011ae6:	f7f8 fa26 	bl	8009f36 <lwip_htonl>
 8011aea:	4602      	mov	r2, r0
 8011aec:	8abb      	ldrh	r3, [r7, #20]
 8011aee:	9303      	str	r3, [sp, #12]
 8011af0:	2314      	movs	r3, #20
 8011af2:	9302      	str	r3, [sp, #8]
 8011af4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8011af6:	9301      	str	r3, [sp, #4]
 8011af8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011afa:	9300      	str	r3, [sp, #0]
 8011afc:	4613      	mov	r3, r2
 8011afe:	2200      	movs	r2, #0
 8011b00:	4621      	mov	r1, r4
 8011b02:	6878      	ldr	r0, [r7, #4]
 8011b04:	f7ff fe92 	bl	801182c <tcp_output_alloc_header_common>
 8011b08:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8011b0a:	693b      	ldr	r3, [r7, #16]
 8011b0c:	2b00      	cmp	r3, #0
 8011b0e:	d00c      	beq.n	8011b2a <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011b10:	7dfb      	ldrb	r3, [r7, #23]
 8011b12:	2200      	movs	r2, #0
 8011b14:	6939      	ldr	r1, [r7, #16]
 8011b16:	68f8      	ldr	r0, [r7, #12]
 8011b18:	f7ff ff38 	bl	801198c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8011b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b1e:	683a      	ldr	r2, [r7, #0]
 8011b20:	6939      	ldr	r1, [r7, #16]
 8011b22:	68f8      	ldr	r0, [r7, #12]
 8011b24:	f7ff ff72 	bl	8011a0c <tcp_output_control_segment>
 8011b28:	e000      	b.n	8011b2c <tcp_rst+0x8c>
    return;
 8011b2a:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8011b2c:	371c      	adds	r7, #28
 8011b2e:	46bd      	mov	sp, r7
 8011b30:	bd90      	pop	{r4, r7, pc}
 8011b32:	bf00      	nop
 8011b34:	0801792c 	.word	0x0801792c
 8011b38:	080180b0 	.word	0x080180b0
 8011b3c:	08017980 	.word	0x08017980
 8011b40:	080180cc 	.word	0x080180cc

08011b44 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8011b44:	b590      	push	{r4, r7, lr}
 8011b46:	b087      	sub	sp, #28
 8011b48:	af00      	add	r7, sp, #0
 8011b4a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8011b4c:	2300      	movs	r3, #0
 8011b4e:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8011b50:	2300      	movs	r3, #0
 8011b52:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	2b00      	cmp	r3, #0
 8011b58:	d106      	bne.n	8011b68 <tcp_send_empty_ack+0x24>
 8011b5a:	4b28      	ldr	r3, [pc, #160]	; (8011bfc <tcp_send_empty_ack+0xb8>)
 8011b5c:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8011b60:	4927      	ldr	r1, [pc, #156]	; (8011c00 <tcp_send_empty_ack+0xbc>)
 8011b62:	4828      	ldr	r0, [pc, #160]	; (8011c04 <tcp_send_empty_ack+0xc0>)
 8011b64:	f002 ffaa 	bl	8014abc <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011b68:	7dfb      	ldrb	r3, [r7, #23]
 8011b6a:	009b      	lsls	r3, r3, #2
 8011b6c:	b2db      	uxtb	r3, r3
 8011b6e:	f003 0304 	and.w	r3, r3, #4
 8011b72:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8011b74:	7d7b      	ldrb	r3, [r7, #21]
 8011b76:	b29c      	uxth	r4, r3
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011b7c:	4618      	mov	r0, r3
 8011b7e:	f7f8 f9da 	bl	8009f36 <lwip_htonl>
 8011b82:	4603      	mov	r3, r0
 8011b84:	2200      	movs	r2, #0
 8011b86:	4621      	mov	r1, r4
 8011b88:	6878      	ldr	r0, [r7, #4]
 8011b8a:	f7ff fec1 	bl	8011910 <tcp_output_alloc_header>
 8011b8e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011b90:	693b      	ldr	r3, [r7, #16]
 8011b92:	2b00      	cmp	r3, #0
 8011b94:	d109      	bne.n	8011baa <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	8b5b      	ldrh	r3, [r3, #26]
 8011b9a:	f043 0303 	orr.w	r3, r3, #3
 8011b9e:	b29a      	uxth	r2, r3
 8011ba0:	687b      	ldr	r3, [r7, #4]
 8011ba2:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8011ba4:	f06f 0301 	mvn.w	r3, #1
 8011ba8:	e023      	b.n	8011bf2 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8011baa:	7dbb      	ldrb	r3, [r7, #22]
 8011bac:	7dfa      	ldrb	r2, [r7, #23]
 8011bae:	6939      	ldr	r1, [r7, #16]
 8011bb0:	6878      	ldr	r0, [r7, #4]
 8011bb2:	f7ff feeb 	bl	801198c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011bb6:	687a      	ldr	r2, [r7, #4]
 8011bb8:	687b      	ldr	r3, [r7, #4]
 8011bba:	3304      	adds	r3, #4
 8011bbc:	6939      	ldr	r1, [r7, #16]
 8011bbe:	6878      	ldr	r0, [r7, #4]
 8011bc0:	f7ff ff24 	bl	8011a0c <tcp_output_control_segment>
 8011bc4:	4603      	mov	r3, r0
 8011bc6:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8011bc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011bcc:	2b00      	cmp	r3, #0
 8011bce:	d007      	beq.n	8011be0 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011bd0:	687b      	ldr	r3, [r7, #4]
 8011bd2:	8b5b      	ldrh	r3, [r3, #26]
 8011bd4:	f043 0303 	orr.w	r3, r3, #3
 8011bd8:	b29a      	uxth	r2, r3
 8011bda:	687b      	ldr	r3, [r7, #4]
 8011bdc:	835a      	strh	r2, [r3, #26]
 8011bde:	e006      	b.n	8011bee <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	8b5b      	ldrh	r3, [r3, #26]
 8011be4:	f023 0303 	bic.w	r3, r3, #3
 8011be8:	b29a      	uxth	r2, r3
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8011bee:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011bf2:	4618      	mov	r0, r3
 8011bf4:	371c      	adds	r7, #28
 8011bf6:	46bd      	mov	sp, r7
 8011bf8:	bd90      	pop	{r4, r7, pc}
 8011bfa:	bf00      	nop
 8011bfc:	0801792c 	.word	0x0801792c
 8011c00:	080180e8 	.word	0x080180e8
 8011c04:	08017980 	.word	0x08017980

08011c08 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8011c08:	b590      	push	{r4, r7, lr}
 8011c0a:	b087      	sub	sp, #28
 8011c0c:	af00      	add	r7, sp, #0
 8011c0e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011c10:	2300      	movs	r3, #0
 8011c12:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	2b00      	cmp	r3, #0
 8011c18:	d106      	bne.n	8011c28 <tcp_keepalive+0x20>
 8011c1a:	4b18      	ldr	r3, [pc, #96]	; (8011c7c <tcp_keepalive+0x74>)
 8011c1c:	f640 0224 	movw	r2, #2084	; 0x824
 8011c20:	4917      	ldr	r1, [pc, #92]	; (8011c80 <tcp_keepalive+0x78>)
 8011c22:	4818      	ldr	r0, [pc, #96]	; (8011c84 <tcp_keepalive+0x7c>)
 8011c24:	f002 ff4a 	bl	8014abc <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8011c28:	7dfb      	ldrb	r3, [r7, #23]
 8011c2a:	b29c      	uxth	r4, r3
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011c30:	3b01      	subs	r3, #1
 8011c32:	4618      	mov	r0, r3
 8011c34:	f7f8 f97f 	bl	8009f36 <lwip_htonl>
 8011c38:	4603      	mov	r3, r0
 8011c3a:	2200      	movs	r2, #0
 8011c3c:	4621      	mov	r1, r4
 8011c3e:	6878      	ldr	r0, [r7, #4]
 8011c40:	f7ff fe66 	bl	8011910 <tcp_output_alloc_header>
 8011c44:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011c46:	693b      	ldr	r3, [r7, #16]
 8011c48:	2b00      	cmp	r3, #0
 8011c4a:	d102      	bne.n	8011c52 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8011c4c:	f04f 33ff 	mov.w	r3, #4294967295
 8011c50:	e010      	b.n	8011c74 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011c52:	7dfb      	ldrb	r3, [r7, #23]
 8011c54:	2200      	movs	r2, #0
 8011c56:	6939      	ldr	r1, [r7, #16]
 8011c58:	6878      	ldr	r0, [r7, #4]
 8011c5a:	f7ff fe97 	bl	801198c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011c5e:	687a      	ldr	r2, [r7, #4]
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	3304      	adds	r3, #4
 8011c64:	6939      	ldr	r1, [r7, #16]
 8011c66:	6878      	ldr	r0, [r7, #4]
 8011c68:	f7ff fed0 	bl	8011a0c <tcp_output_control_segment>
 8011c6c:	4603      	mov	r3, r0
 8011c6e:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8011c70:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011c74:	4618      	mov	r0, r3
 8011c76:	371c      	adds	r7, #28
 8011c78:	46bd      	mov	sp, r7
 8011c7a:	bd90      	pop	{r4, r7, pc}
 8011c7c:	0801792c 	.word	0x0801792c
 8011c80:	08018108 	.word	0x08018108
 8011c84:	08017980 	.word	0x08017980

08011c88 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8011c88:	b590      	push	{r4, r7, lr}
 8011c8a:	b08b      	sub	sp, #44	; 0x2c
 8011c8c:	af00      	add	r7, sp, #0
 8011c8e:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011c90:	2300      	movs	r3, #0
 8011c92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8011c96:	687b      	ldr	r3, [r7, #4]
 8011c98:	2b00      	cmp	r3, #0
 8011c9a:	d106      	bne.n	8011caa <tcp_zero_window_probe+0x22>
 8011c9c:	4b4c      	ldr	r3, [pc, #304]	; (8011dd0 <tcp_zero_window_probe+0x148>)
 8011c9e:	f640 024f 	movw	r2, #2127	; 0x84f
 8011ca2:	494c      	ldr	r1, [pc, #304]	; (8011dd4 <tcp_zero_window_probe+0x14c>)
 8011ca4:	484c      	ldr	r0, [pc, #304]	; (8011dd8 <tcp_zero_window_probe+0x150>)
 8011ca6:	f002 ff09 	bl	8014abc <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011cae:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8011cb0:	6a3b      	ldr	r3, [r7, #32]
 8011cb2:	2b00      	cmp	r3, #0
 8011cb4:	d101      	bne.n	8011cba <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8011cb6:	2300      	movs	r3, #0
 8011cb8:	e086      	b.n	8011dc8 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8011cba:	687b      	ldr	r3, [r7, #4]
 8011cbc:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8011cc0:	2bff      	cmp	r3, #255	; 0xff
 8011cc2:	d007      	beq.n	8011cd4 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8011cca:	3301      	adds	r3, #1
 8011ccc:	b2da      	uxtb	r2, r3
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8011cd4:	6a3b      	ldr	r3, [r7, #32]
 8011cd6:	68db      	ldr	r3, [r3, #12]
 8011cd8:	899b      	ldrh	r3, [r3, #12]
 8011cda:	b29b      	uxth	r3, r3
 8011cdc:	4618      	mov	r0, r3
 8011cde:	f7f8 f915 	bl	8009f0c <lwip_htons>
 8011ce2:	4603      	mov	r3, r0
 8011ce4:	b2db      	uxtb	r3, r3
 8011ce6:	f003 0301 	and.w	r3, r3, #1
 8011cea:	2b00      	cmp	r3, #0
 8011cec:	d005      	beq.n	8011cfa <tcp_zero_window_probe+0x72>
 8011cee:	6a3b      	ldr	r3, [r7, #32]
 8011cf0:	891b      	ldrh	r3, [r3, #8]
 8011cf2:	2b00      	cmp	r3, #0
 8011cf4:	d101      	bne.n	8011cfa <tcp_zero_window_probe+0x72>
 8011cf6:	2301      	movs	r3, #1
 8011cf8:	e000      	b.n	8011cfc <tcp_zero_window_probe+0x74>
 8011cfa:	2300      	movs	r3, #0
 8011cfc:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8011cfe:	7ffb      	ldrb	r3, [r7, #31]
 8011d00:	2b00      	cmp	r3, #0
 8011d02:	bf0c      	ite	eq
 8011d04:	2301      	moveq	r3, #1
 8011d06:	2300      	movne	r3, #0
 8011d08:	b2db      	uxtb	r3, r3
 8011d0a:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8011d0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011d10:	b299      	uxth	r1, r3
 8011d12:	6a3b      	ldr	r3, [r7, #32]
 8011d14:	68db      	ldr	r3, [r3, #12]
 8011d16:	685b      	ldr	r3, [r3, #4]
 8011d18:	8bba      	ldrh	r2, [r7, #28]
 8011d1a:	6878      	ldr	r0, [r7, #4]
 8011d1c:	f7ff fdf8 	bl	8011910 <tcp_output_alloc_header>
 8011d20:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8011d22:	69bb      	ldr	r3, [r7, #24]
 8011d24:	2b00      	cmp	r3, #0
 8011d26:	d102      	bne.n	8011d2e <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8011d28:	f04f 33ff 	mov.w	r3, #4294967295
 8011d2c:	e04c      	b.n	8011dc8 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8011d2e:	69bb      	ldr	r3, [r7, #24]
 8011d30:	685b      	ldr	r3, [r3, #4]
 8011d32:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8011d34:	7ffb      	ldrb	r3, [r7, #31]
 8011d36:	2b00      	cmp	r3, #0
 8011d38:	d011      	beq.n	8011d5e <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8011d3a:	697b      	ldr	r3, [r7, #20]
 8011d3c:	899b      	ldrh	r3, [r3, #12]
 8011d3e:	b29b      	uxth	r3, r3
 8011d40:	b21b      	sxth	r3, r3
 8011d42:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8011d46:	b21c      	sxth	r4, r3
 8011d48:	2011      	movs	r0, #17
 8011d4a:	f7f8 f8df 	bl	8009f0c <lwip_htons>
 8011d4e:	4603      	mov	r3, r0
 8011d50:	b21b      	sxth	r3, r3
 8011d52:	4323      	orrs	r3, r4
 8011d54:	b21b      	sxth	r3, r3
 8011d56:	b29a      	uxth	r2, r3
 8011d58:	697b      	ldr	r3, [r7, #20]
 8011d5a:	819a      	strh	r2, [r3, #12]
 8011d5c:	e010      	b.n	8011d80 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8011d5e:	69bb      	ldr	r3, [r7, #24]
 8011d60:	685b      	ldr	r3, [r3, #4]
 8011d62:	3314      	adds	r3, #20
 8011d64:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8011d66:	6a3b      	ldr	r3, [r7, #32]
 8011d68:	6858      	ldr	r0, [r3, #4]
 8011d6a:	6a3b      	ldr	r3, [r7, #32]
 8011d6c:	685b      	ldr	r3, [r3, #4]
 8011d6e:	891a      	ldrh	r2, [r3, #8]
 8011d70:	6a3b      	ldr	r3, [r7, #32]
 8011d72:	891b      	ldrh	r3, [r3, #8]
 8011d74:	1ad3      	subs	r3, r2, r3
 8011d76:	b29b      	uxth	r3, r3
 8011d78:	2201      	movs	r2, #1
 8011d7a:	6939      	ldr	r1, [r7, #16]
 8011d7c:	f7f9 ff50 	bl	800bc20 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8011d80:	6a3b      	ldr	r3, [r7, #32]
 8011d82:	68db      	ldr	r3, [r3, #12]
 8011d84:	685b      	ldr	r3, [r3, #4]
 8011d86:	4618      	mov	r0, r3
 8011d88:	f7f8 f8d5 	bl	8009f36 <lwip_htonl>
 8011d8c:	4603      	mov	r3, r0
 8011d8e:	3301      	adds	r3, #1
 8011d90:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011d96:	68fb      	ldr	r3, [r7, #12]
 8011d98:	1ad3      	subs	r3, r2, r3
 8011d9a:	2b00      	cmp	r3, #0
 8011d9c:	da02      	bge.n	8011da4 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8011d9e:	687b      	ldr	r3, [r7, #4]
 8011da0:	68fa      	ldr	r2, [r7, #12]
 8011da2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011da4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011da8:	2200      	movs	r2, #0
 8011daa:	69b9      	ldr	r1, [r7, #24]
 8011dac:	6878      	ldr	r0, [r7, #4]
 8011dae:	f7ff fded 	bl	801198c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011db2:	687a      	ldr	r2, [r7, #4]
 8011db4:	687b      	ldr	r3, [r7, #4]
 8011db6:	3304      	adds	r3, #4
 8011db8:	69b9      	ldr	r1, [r7, #24]
 8011dba:	6878      	ldr	r0, [r7, #4]
 8011dbc:	f7ff fe26 	bl	8011a0c <tcp_output_control_segment>
 8011dc0:	4603      	mov	r3, r0
 8011dc2:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8011dc4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8011dc8:	4618      	mov	r0, r3
 8011dca:	372c      	adds	r7, #44	; 0x2c
 8011dcc:	46bd      	mov	sp, r7
 8011dce:	bd90      	pop	{r4, r7, pc}
 8011dd0:	0801792c 	.word	0x0801792c
 8011dd4:	08018124 	.word	0x08018124
 8011dd8:	08017980 	.word	0x08017980

08011ddc <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8011ddc:	b580      	push	{r7, lr}
 8011dde:	b082      	sub	sp, #8
 8011de0:	af00      	add	r7, sp, #0
 8011de2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8011de4:	f7fa f80a 	bl	800bdfc <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8011de8:	4b0a      	ldr	r3, [pc, #40]	; (8011e14 <tcpip_tcp_timer+0x38>)
 8011dea:	681b      	ldr	r3, [r3, #0]
 8011dec:	2b00      	cmp	r3, #0
 8011dee:	d103      	bne.n	8011df8 <tcpip_tcp_timer+0x1c>
 8011df0:	4b09      	ldr	r3, [pc, #36]	; (8011e18 <tcpip_tcp_timer+0x3c>)
 8011df2:	681b      	ldr	r3, [r3, #0]
 8011df4:	2b00      	cmp	r3, #0
 8011df6:	d005      	beq.n	8011e04 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8011df8:	2200      	movs	r2, #0
 8011dfa:	4908      	ldr	r1, [pc, #32]	; (8011e1c <tcpip_tcp_timer+0x40>)
 8011dfc:	20fa      	movs	r0, #250	; 0xfa
 8011dfe:	f000 f8f3 	bl	8011fe8 <sys_timeout>
 8011e02:	e003      	b.n	8011e0c <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8011e04:	4b06      	ldr	r3, [pc, #24]	; (8011e20 <tcpip_tcp_timer+0x44>)
 8011e06:	2200      	movs	r2, #0
 8011e08:	601a      	str	r2, [r3, #0]
  }
}
 8011e0a:	bf00      	nop
 8011e0c:	bf00      	nop
 8011e0e:	3708      	adds	r7, #8
 8011e10:	46bd      	mov	sp, r7
 8011e12:	bd80      	pop	{r7, pc}
 8011e14:	24003c7c 	.word	0x24003c7c
 8011e18:	24003c8c 	.word	0x24003c8c
 8011e1c:	08011ddd 	.word	0x08011ddd
 8011e20:	24000594 	.word	0x24000594

08011e24 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8011e24:	b580      	push	{r7, lr}
 8011e26:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8011e28:	4b0a      	ldr	r3, [pc, #40]	; (8011e54 <tcp_timer_needed+0x30>)
 8011e2a:	681b      	ldr	r3, [r3, #0]
 8011e2c:	2b00      	cmp	r3, #0
 8011e2e:	d10f      	bne.n	8011e50 <tcp_timer_needed+0x2c>
 8011e30:	4b09      	ldr	r3, [pc, #36]	; (8011e58 <tcp_timer_needed+0x34>)
 8011e32:	681b      	ldr	r3, [r3, #0]
 8011e34:	2b00      	cmp	r3, #0
 8011e36:	d103      	bne.n	8011e40 <tcp_timer_needed+0x1c>
 8011e38:	4b08      	ldr	r3, [pc, #32]	; (8011e5c <tcp_timer_needed+0x38>)
 8011e3a:	681b      	ldr	r3, [r3, #0]
 8011e3c:	2b00      	cmp	r3, #0
 8011e3e:	d007      	beq.n	8011e50 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8011e40:	4b04      	ldr	r3, [pc, #16]	; (8011e54 <tcp_timer_needed+0x30>)
 8011e42:	2201      	movs	r2, #1
 8011e44:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8011e46:	2200      	movs	r2, #0
 8011e48:	4905      	ldr	r1, [pc, #20]	; (8011e60 <tcp_timer_needed+0x3c>)
 8011e4a:	20fa      	movs	r0, #250	; 0xfa
 8011e4c:	f000 f8cc 	bl	8011fe8 <sys_timeout>
  }
}
 8011e50:	bf00      	nop
 8011e52:	bd80      	pop	{r7, pc}
 8011e54:	24000594 	.word	0x24000594
 8011e58:	24003c7c 	.word	0x24003c7c
 8011e5c:	24003c8c 	.word	0x24003c8c
 8011e60:	08011ddd 	.word	0x08011ddd

08011e64 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8011e64:	b580      	push	{r7, lr}
 8011e66:	b086      	sub	sp, #24
 8011e68:	af00      	add	r7, sp, #0
 8011e6a:	60f8      	str	r0, [r7, #12]
 8011e6c:	60b9      	str	r1, [r7, #8]
 8011e6e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8011e70:	2006      	movs	r0, #6
 8011e72:	f7f8 fdf5 	bl	800aa60 <memp_malloc>
 8011e76:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8011e78:	693b      	ldr	r3, [r7, #16]
 8011e7a:	2b00      	cmp	r3, #0
 8011e7c:	d109      	bne.n	8011e92 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8011e7e:	693b      	ldr	r3, [r7, #16]
 8011e80:	2b00      	cmp	r3, #0
 8011e82:	d151      	bne.n	8011f28 <sys_timeout_abs+0xc4>
 8011e84:	4b2a      	ldr	r3, [pc, #168]	; (8011f30 <sys_timeout_abs+0xcc>)
 8011e86:	22be      	movs	r2, #190	; 0xbe
 8011e88:	492a      	ldr	r1, [pc, #168]	; (8011f34 <sys_timeout_abs+0xd0>)
 8011e8a:	482b      	ldr	r0, [pc, #172]	; (8011f38 <sys_timeout_abs+0xd4>)
 8011e8c:	f002 fe16 	bl	8014abc <iprintf>
    return;
 8011e90:	e04a      	b.n	8011f28 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8011e92:	693b      	ldr	r3, [r7, #16]
 8011e94:	2200      	movs	r2, #0
 8011e96:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8011e98:	693b      	ldr	r3, [r7, #16]
 8011e9a:	68ba      	ldr	r2, [r7, #8]
 8011e9c:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8011e9e:	693b      	ldr	r3, [r7, #16]
 8011ea0:	687a      	ldr	r2, [r7, #4]
 8011ea2:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8011ea4:	693b      	ldr	r3, [r7, #16]
 8011ea6:	68fa      	ldr	r2, [r7, #12]
 8011ea8:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8011eaa:	4b24      	ldr	r3, [pc, #144]	; (8011f3c <sys_timeout_abs+0xd8>)
 8011eac:	681b      	ldr	r3, [r3, #0]
 8011eae:	2b00      	cmp	r3, #0
 8011eb0:	d103      	bne.n	8011eba <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8011eb2:	4a22      	ldr	r2, [pc, #136]	; (8011f3c <sys_timeout_abs+0xd8>)
 8011eb4:	693b      	ldr	r3, [r7, #16]
 8011eb6:	6013      	str	r3, [r2, #0]
    return;
 8011eb8:	e037      	b.n	8011f2a <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8011eba:	693b      	ldr	r3, [r7, #16]
 8011ebc:	685a      	ldr	r2, [r3, #4]
 8011ebe:	4b1f      	ldr	r3, [pc, #124]	; (8011f3c <sys_timeout_abs+0xd8>)
 8011ec0:	681b      	ldr	r3, [r3, #0]
 8011ec2:	685b      	ldr	r3, [r3, #4]
 8011ec4:	1ad3      	subs	r3, r2, r3
 8011ec6:	0fdb      	lsrs	r3, r3, #31
 8011ec8:	f003 0301 	and.w	r3, r3, #1
 8011ecc:	b2db      	uxtb	r3, r3
 8011ece:	2b00      	cmp	r3, #0
 8011ed0:	d007      	beq.n	8011ee2 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8011ed2:	4b1a      	ldr	r3, [pc, #104]	; (8011f3c <sys_timeout_abs+0xd8>)
 8011ed4:	681a      	ldr	r2, [r3, #0]
 8011ed6:	693b      	ldr	r3, [r7, #16]
 8011ed8:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8011eda:	4a18      	ldr	r2, [pc, #96]	; (8011f3c <sys_timeout_abs+0xd8>)
 8011edc:	693b      	ldr	r3, [r7, #16]
 8011ede:	6013      	str	r3, [r2, #0]
 8011ee0:	e023      	b.n	8011f2a <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8011ee2:	4b16      	ldr	r3, [pc, #88]	; (8011f3c <sys_timeout_abs+0xd8>)
 8011ee4:	681b      	ldr	r3, [r3, #0]
 8011ee6:	617b      	str	r3, [r7, #20]
 8011ee8:	e01a      	b.n	8011f20 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8011eea:	697b      	ldr	r3, [r7, #20]
 8011eec:	681b      	ldr	r3, [r3, #0]
 8011eee:	2b00      	cmp	r3, #0
 8011ef0:	d00b      	beq.n	8011f0a <sys_timeout_abs+0xa6>
 8011ef2:	693b      	ldr	r3, [r7, #16]
 8011ef4:	685a      	ldr	r2, [r3, #4]
 8011ef6:	697b      	ldr	r3, [r7, #20]
 8011ef8:	681b      	ldr	r3, [r3, #0]
 8011efa:	685b      	ldr	r3, [r3, #4]
 8011efc:	1ad3      	subs	r3, r2, r3
 8011efe:	0fdb      	lsrs	r3, r3, #31
 8011f00:	f003 0301 	and.w	r3, r3, #1
 8011f04:	b2db      	uxtb	r3, r3
 8011f06:	2b00      	cmp	r3, #0
 8011f08:	d007      	beq.n	8011f1a <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8011f0a:	697b      	ldr	r3, [r7, #20]
 8011f0c:	681a      	ldr	r2, [r3, #0]
 8011f0e:	693b      	ldr	r3, [r7, #16]
 8011f10:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8011f12:	697b      	ldr	r3, [r7, #20]
 8011f14:	693a      	ldr	r2, [r7, #16]
 8011f16:	601a      	str	r2, [r3, #0]
        break;
 8011f18:	e007      	b.n	8011f2a <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8011f1a:	697b      	ldr	r3, [r7, #20]
 8011f1c:	681b      	ldr	r3, [r3, #0]
 8011f1e:	617b      	str	r3, [r7, #20]
 8011f20:	697b      	ldr	r3, [r7, #20]
 8011f22:	2b00      	cmp	r3, #0
 8011f24:	d1e1      	bne.n	8011eea <sys_timeout_abs+0x86>
 8011f26:	e000      	b.n	8011f2a <sys_timeout_abs+0xc6>
    return;
 8011f28:	bf00      	nop
      }
    }
  }
}
 8011f2a:	3718      	adds	r7, #24
 8011f2c:	46bd      	mov	sp, r7
 8011f2e:	bd80      	pop	{r7, pc}
 8011f30:	08018148 	.word	0x08018148
 8011f34:	0801817c 	.word	0x0801817c
 8011f38:	080181bc 	.word	0x080181bc
 8011f3c:	2400058c 	.word	0x2400058c

08011f40 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8011f40:	b580      	push	{r7, lr}
 8011f42:	b086      	sub	sp, #24
 8011f44:	af00      	add	r7, sp, #0
 8011f46:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8011f48:	687b      	ldr	r3, [r7, #4]
 8011f4a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8011f4c:	697b      	ldr	r3, [r7, #20]
 8011f4e:	685b      	ldr	r3, [r3, #4]
 8011f50:	4798      	blx	r3

  now = sys_now();
 8011f52:	f7f6 fba3 	bl	800869c <sys_now>
 8011f56:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8011f58:	697b      	ldr	r3, [r7, #20]
 8011f5a:	681a      	ldr	r2, [r3, #0]
 8011f5c:	4b0f      	ldr	r3, [pc, #60]	; (8011f9c <lwip_cyclic_timer+0x5c>)
 8011f5e:	681b      	ldr	r3, [r3, #0]
 8011f60:	4413      	add	r3, r2
 8011f62:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8011f64:	68fa      	ldr	r2, [r7, #12]
 8011f66:	693b      	ldr	r3, [r7, #16]
 8011f68:	1ad3      	subs	r3, r2, r3
 8011f6a:	0fdb      	lsrs	r3, r3, #31
 8011f6c:	f003 0301 	and.w	r3, r3, #1
 8011f70:	b2db      	uxtb	r3, r3
 8011f72:	2b00      	cmp	r3, #0
 8011f74:	d009      	beq.n	8011f8a <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8011f76:	697b      	ldr	r3, [r7, #20]
 8011f78:	681a      	ldr	r2, [r3, #0]
 8011f7a:	693b      	ldr	r3, [r7, #16]
 8011f7c:	4413      	add	r3, r2
 8011f7e:	687a      	ldr	r2, [r7, #4]
 8011f80:	4907      	ldr	r1, [pc, #28]	; (8011fa0 <lwip_cyclic_timer+0x60>)
 8011f82:	4618      	mov	r0, r3
 8011f84:	f7ff ff6e 	bl	8011e64 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8011f88:	e004      	b.n	8011f94 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8011f8a:	687a      	ldr	r2, [r7, #4]
 8011f8c:	4904      	ldr	r1, [pc, #16]	; (8011fa0 <lwip_cyclic_timer+0x60>)
 8011f8e:	68f8      	ldr	r0, [r7, #12]
 8011f90:	f7ff ff68 	bl	8011e64 <sys_timeout_abs>
}
 8011f94:	bf00      	nop
 8011f96:	3718      	adds	r7, #24
 8011f98:	46bd      	mov	sp, r7
 8011f9a:	bd80      	pop	{r7, pc}
 8011f9c:	24000590 	.word	0x24000590
 8011fa0:	08011f41 	.word	0x08011f41

08011fa4 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8011fa4:	b580      	push	{r7, lr}
 8011fa6:	b082      	sub	sp, #8
 8011fa8:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8011faa:	2301      	movs	r3, #1
 8011fac:	607b      	str	r3, [r7, #4]
 8011fae:	e00e      	b.n	8011fce <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8011fb0:	4a0b      	ldr	r2, [pc, #44]	; (8011fe0 <sys_timeouts_init+0x3c>)
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8011fb8:	687b      	ldr	r3, [r7, #4]
 8011fba:	00db      	lsls	r3, r3, #3
 8011fbc:	4a08      	ldr	r2, [pc, #32]	; (8011fe0 <sys_timeouts_init+0x3c>)
 8011fbe:	4413      	add	r3, r2
 8011fc0:	461a      	mov	r2, r3
 8011fc2:	4908      	ldr	r1, [pc, #32]	; (8011fe4 <sys_timeouts_init+0x40>)
 8011fc4:	f000 f810 	bl	8011fe8 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	3301      	adds	r3, #1
 8011fcc:	607b      	str	r3, [r7, #4]
 8011fce:	687b      	ldr	r3, [r7, #4]
 8011fd0:	2b02      	cmp	r3, #2
 8011fd2:	d9ed      	bls.n	8011fb0 <sys_timeouts_init+0xc>
  }
}
 8011fd4:	bf00      	nop
 8011fd6:	bf00      	nop
 8011fd8:	3708      	adds	r7, #8
 8011fda:	46bd      	mov	sp, r7
 8011fdc:	bd80      	pop	{r7, pc}
 8011fde:	bf00      	nop
 8011fe0:	0801a1ac 	.word	0x0801a1ac
 8011fe4:	08011f41 	.word	0x08011f41

08011fe8 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8011fe8:	b580      	push	{r7, lr}
 8011fea:	b086      	sub	sp, #24
 8011fec:	af00      	add	r7, sp, #0
 8011fee:	60f8      	str	r0, [r7, #12]
 8011ff0:	60b9      	str	r1, [r7, #8]
 8011ff2:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8011ff4:	68fb      	ldr	r3, [r7, #12]
 8011ff6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011ffa:	d306      	bcc.n	801200a <sys_timeout+0x22>
 8011ffc:	4b0a      	ldr	r3, [pc, #40]	; (8012028 <sys_timeout+0x40>)
 8011ffe:	f240 1229 	movw	r2, #297	; 0x129
 8012002:	490a      	ldr	r1, [pc, #40]	; (801202c <sys_timeout+0x44>)
 8012004:	480a      	ldr	r0, [pc, #40]	; (8012030 <sys_timeout+0x48>)
 8012006:	f002 fd59 	bl	8014abc <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801200a:	f7f6 fb47 	bl	800869c <sys_now>
 801200e:	4602      	mov	r2, r0
 8012010:	68fb      	ldr	r3, [r7, #12]
 8012012:	4413      	add	r3, r2
 8012014:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8012016:	687a      	ldr	r2, [r7, #4]
 8012018:	68b9      	ldr	r1, [r7, #8]
 801201a:	6978      	ldr	r0, [r7, #20]
 801201c:	f7ff ff22 	bl	8011e64 <sys_timeout_abs>
#endif
}
 8012020:	bf00      	nop
 8012022:	3718      	adds	r7, #24
 8012024:	46bd      	mov	sp, r7
 8012026:	bd80      	pop	{r7, pc}
 8012028:	08018148 	.word	0x08018148
 801202c:	080181e4 	.word	0x080181e4
 8012030:	080181bc 	.word	0x080181bc

08012034 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8012034:	b580      	push	{r7, lr}
 8012036:	b084      	sub	sp, #16
 8012038:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801203a:	f7f6 fb2f 	bl	800869c <sys_now>
 801203e:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 8012040:	4b1a      	ldr	r3, [pc, #104]	; (80120ac <sys_check_timeouts+0x78>)
 8012042:	781b      	ldrb	r3, [r3, #0]
 8012044:	b2db      	uxtb	r3, r3
 8012046:	2b00      	cmp	r3, #0
 8012048:	d001      	beq.n	801204e <sys_check_timeouts+0x1a>
 801204a:	f7f9 f8b5 	bl	800b1b8 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 801204e:	4b18      	ldr	r3, [pc, #96]	; (80120b0 <sys_check_timeouts+0x7c>)
 8012050:	681b      	ldr	r3, [r3, #0]
 8012052:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8012054:	68bb      	ldr	r3, [r7, #8]
 8012056:	2b00      	cmp	r3, #0
 8012058:	d022      	beq.n	80120a0 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801205a:	68bb      	ldr	r3, [r7, #8]
 801205c:	685b      	ldr	r3, [r3, #4]
 801205e:	68fa      	ldr	r2, [r7, #12]
 8012060:	1ad3      	subs	r3, r2, r3
 8012062:	0fdb      	lsrs	r3, r3, #31
 8012064:	f003 0301 	and.w	r3, r3, #1
 8012068:	b2db      	uxtb	r3, r3
 801206a:	2b00      	cmp	r3, #0
 801206c:	d11a      	bne.n	80120a4 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801206e:	68bb      	ldr	r3, [r7, #8]
 8012070:	681b      	ldr	r3, [r3, #0]
 8012072:	4a0f      	ldr	r2, [pc, #60]	; (80120b0 <sys_check_timeouts+0x7c>)
 8012074:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8012076:	68bb      	ldr	r3, [r7, #8]
 8012078:	689b      	ldr	r3, [r3, #8]
 801207a:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801207c:	68bb      	ldr	r3, [r7, #8]
 801207e:	68db      	ldr	r3, [r3, #12]
 8012080:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8012082:	68bb      	ldr	r3, [r7, #8]
 8012084:	685b      	ldr	r3, [r3, #4]
 8012086:	4a0b      	ldr	r2, [pc, #44]	; (80120b4 <sys_check_timeouts+0x80>)
 8012088:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801208a:	68b9      	ldr	r1, [r7, #8]
 801208c:	2006      	movs	r0, #6
 801208e:	f7f8 fd57 	bl	800ab40 <memp_free>
    if (handler != NULL) {
 8012092:	687b      	ldr	r3, [r7, #4]
 8012094:	2b00      	cmp	r3, #0
 8012096:	d0d3      	beq.n	8012040 <sys_check_timeouts+0xc>
      handler(arg);
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	6838      	ldr	r0, [r7, #0]
 801209c:	4798      	blx	r3
  do {
 801209e:	e7cf      	b.n	8012040 <sys_check_timeouts+0xc>
      return;
 80120a0:	bf00      	nop
 80120a2:	e000      	b.n	80120a6 <sys_check_timeouts+0x72>
      return;
 80120a4:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 80120a6:	3710      	adds	r7, #16
 80120a8:	46bd      	mov	sp, r7
 80120aa:	bd80      	pop	{r7, pc}
 80120ac:	24003c74 	.word	0x24003c74
 80120b0:	2400058c 	.word	0x2400058c
 80120b4:	24000590 	.word	0x24000590

080120b8 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80120b8:	b580      	push	{r7, lr}
 80120ba:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80120bc:	f002 fd16 	bl	8014aec <rand>
 80120c0:	4603      	mov	r3, r0
 80120c2:	b29b      	uxth	r3, r3
 80120c4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80120c8:	b29b      	uxth	r3, r3
 80120ca:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80120ce:	b29a      	uxth	r2, r3
 80120d0:	4b01      	ldr	r3, [pc, #4]	; (80120d8 <udp_init+0x20>)
 80120d2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80120d4:	bf00      	nop
 80120d6:	bd80      	pop	{r7, pc}
 80120d8:	2400003c 	.word	0x2400003c

080120dc <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80120dc:	b580      	push	{r7, lr}
 80120de:	b084      	sub	sp, #16
 80120e0:	af00      	add	r7, sp, #0
 80120e2:	60f8      	str	r0, [r7, #12]
 80120e4:	60b9      	str	r1, [r7, #8]
 80120e6:	4613      	mov	r3, r2
 80120e8:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 80120ea:	68fb      	ldr	r3, [r7, #12]
 80120ec:	2b00      	cmp	r3, #0
 80120ee:	d105      	bne.n	80120fc <udp_input_local_match+0x20>
 80120f0:	4b27      	ldr	r3, [pc, #156]	; (8012190 <udp_input_local_match+0xb4>)
 80120f2:	2287      	movs	r2, #135	; 0x87
 80120f4:	4927      	ldr	r1, [pc, #156]	; (8012194 <udp_input_local_match+0xb8>)
 80120f6:	4828      	ldr	r0, [pc, #160]	; (8012198 <udp_input_local_match+0xbc>)
 80120f8:	f002 fce0 	bl	8014abc <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80120fc:	68bb      	ldr	r3, [r7, #8]
 80120fe:	2b00      	cmp	r3, #0
 8012100:	d105      	bne.n	801210e <udp_input_local_match+0x32>
 8012102:	4b23      	ldr	r3, [pc, #140]	; (8012190 <udp_input_local_match+0xb4>)
 8012104:	2288      	movs	r2, #136	; 0x88
 8012106:	4925      	ldr	r1, [pc, #148]	; (801219c <udp_input_local_match+0xc0>)
 8012108:	4823      	ldr	r0, [pc, #140]	; (8012198 <udp_input_local_match+0xbc>)
 801210a:	f002 fcd7 	bl	8014abc <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801210e:	68fb      	ldr	r3, [r7, #12]
 8012110:	7a1b      	ldrb	r3, [r3, #8]
 8012112:	2b00      	cmp	r3, #0
 8012114:	d00b      	beq.n	801212e <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012116:	68fb      	ldr	r3, [r7, #12]
 8012118:	7a1a      	ldrb	r2, [r3, #8]
 801211a:	4b21      	ldr	r3, [pc, #132]	; (80121a0 <udp_input_local_match+0xc4>)
 801211c:	685b      	ldr	r3, [r3, #4]
 801211e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012122:	3301      	adds	r3, #1
 8012124:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012126:	429a      	cmp	r2, r3
 8012128:	d001      	beq.n	801212e <udp_input_local_match+0x52>
    return 0;
 801212a:	2300      	movs	r3, #0
 801212c:	e02b      	b.n	8012186 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801212e:	79fb      	ldrb	r3, [r7, #7]
 8012130:	2b00      	cmp	r3, #0
 8012132:	d018      	beq.n	8012166 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012134:	68fb      	ldr	r3, [r7, #12]
 8012136:	2b00      	cmp	r3, #0
 8012138:	d013      	beq.n	8012162 <udp_input_local_match+0x86>
 801213a:	68fb      	ldr	r3, [r7, #12]
 801213c:	681b      	ldr	r3, [r3, #0]
 801213e:	2b00      	cmp	r3, #0
 8012140:	d00f      	beq.n	8012162 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8012142:	4b17      	ldr	r3, [pc, #92]	; (80121a0 <udp_input_local_match+0xc4>)
 8012144:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012146:	f1b3 3fff 	cmp.w	r3, #4294967295
 801214a:	d00a      	beq.n	8012162 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801214c:	68fb      	ldr	r3, [r7, #12]
 801214e:	681a      	ldr	r2, [r3, #0]
 8012150:	4b13      	ldr	r3, [pc, #76]	; (80121a0 <udp_input_local_match+0xc4>)
 8012152:	695b      	ldr	r3, [r3, #20]
 8012154:	405a      	eors	r2, r3
 8012156:	68bb      	ldr	r3, [r7, #8]
 8012158:	3308      	adds	r3, #8
 801215a:	681b      	ldr	r3, [r3, #0]
 801215c:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801215e:	2b00      	cmp	r3, #0
 8012160:	d110      	bne.n	8012184 <udp_input_local_match+0xa8>
          return 1;
 8012162:	2301      	movs	r3, #1
 8012164:	e00f      	b.n	8012186 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012166:	68fb      	ldr	r3, [r7, #12]
 8012168:	2b00      	cmp	r3, #0
 801216a:	d009      	beq.n	8012180 <udp_input_local_match+0xa4>
 801216c:	68fb      	ldr	r3, [r7, #12]
 801216e:	681b      	ldr	r3, [r3, #0]
 8012170:	2b00      	cmp	r3, #0
 8012172:	d005      	beq.n	8012180 <udp_input_local_match+0xa4>
 8012174:	68fb      	ldr	r3, [r7, #12]
 8012176:	681a      	ldr	r2, [r3, #0]
 8012178:	4b09      	ldr	r3, [pc, #36]	; (80121a0 <udp_input_local_match+0xc4>)
 801217a:	695b      	ldr	r3, [r3, #20]
 801217c:	429a      	cmp	r2, r3
 801217e:	d101      	bne.n	8012184 <udp_input_local_match+0xa8>
        return 1;
 8012180:	2301      	movs	r3, #1
 8012182:	e000      	b.n	8012186 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8012184:	2300      	movs	r3, #0
}
 8012186:	4618      	mov	r0, r3
 8012188:	3710      	adds	r7, #16
 801218a:	46bd      	mov	sp, r7
 801218c:	bd80      	pop	{r7, pc}
 801218e:	bf00      	nop
 8012190:	08018230 	.word	0x08018230
 8012194:	08018260 	.word	0x08018260
 8012198:	08018284 	.word	0x08018284
 801219c:	080182ac 	.word	0x080182ac
 80121a0:	24000d8c 	.word	0x24000d8c

080121a4 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80121a4:	b590      	push	{r4, r7, lr}
 80121a6:	b08d      	sub	sp, #52	; 0x34
 80121a8:	af02      	add	r7, sp, #8
 80121aa:	6078      	str	r0, [r7, #4]
 80121ac:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80121ae:	2300      	movs	r3, #0
 80121b0:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	2b00      	cmp	r3, #0
 80121b6:	d105      	bne.n	80121c4 <udp_input+0x20>
 80121b8:	4b7c      	ldr	r3, [pc, #496]	; (80123ac <udp_input+0x208>)
 80121ba:	22cf      	movs	r2, #207	; 0xcf
 80121bc:	497c      	ldr	r1, [pc, #496]	; (80123b0 <udp_input+0x20c>)
 80121be:	487d      	ldr	r0, [pc, #500]	; (80123b4 <udp_input+0x210>)
 80121c0:	f002 fc7c 	bl	8014abc <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80121c4:	683b      	ldr	r3, [r7, #0]
 80121c6:	2b00      	cmp	r3, #0
 80121c8:	d105      	bne.n	80121d6 <udp_input+0x32>
 80121ca:	4b78      	ldr	r3, [pc, #480]	; (80123ac <udp_input+0x208>)
 80121cc:	22d0      	movs	r2, #208	; 0xd0
 80121ce:	497a      	ldr	r1, [pc, #488]	; (80123b8 <udp_input+0x214>)
 80121d0:	4878      	ldr	r0, [pc, #480]	; (80123b4 <udp_input+0x210>)
 80121d2:	f002 fc73 	bl	8014abc <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	895b      	ldrh	r3, [r3, #10]
 80121da:	2b07      	cmp	r3, #7
 80121dc:	d803      	bhi.n	80121e6 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80121de:	6878      	ldr	r0, [r7, #4]
 80121e0:	f7f9 fb24 	bl	800b82c <pbuf_free>
    goto end;
 80121e4:	e0de      	b.n	80123a4 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80121e6:	687b      	ldr	r3, [r7, #4]
 80121e8:	685b      	ldr	r3, [r3, #4]
 80121ea:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80121ec:	4b73      	ldr	r3, [pc, #460]	; (80123bc <udp_input+0x218>)
 80121ee:	695b      	ldr	r3, [r3, #20]
 80121f0:	4a72      	ldr	r2, [pc, #456]	; (80123bc <udp_input+0x218>)
 80121f2:	6812      	ldr	r2, [r2, #0]
 80121f4:	4611      	mov	r1, r2
 80121f6:	4618      	mov	r0, r3
 80121f8:	f001 fcae 	bl	8013b58 <ip4_addr_isbroadcast_u32>
 80121fc:	4603      	mov	r3, r0
 80121fe:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8012200:	697b      	ldr	r3, [r7, #20]
 8012202:	881b      	ldrh	r3, [r3, #0]
 8012204:	b29b      	uxth	r3, r3
 8012206:	4618      	mov	r0, r3
 8012208:	f7f7 fe80 	bl	8009f0c <lwip_htons>
 801220c:	4603      	mov	r3, r0
 801220e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8012210:	697b      	ldr	r3, [r7, #20]
 8012212:	885b      	ldrh	r3, [r3, #2]
 8012214:	b29b      	uxth	r3, r3
 8012216:	4618      	mov	r0, r3
 8012218:	f7f7 fe78 	bl	8009f0c <lwip_htons>
 801221c:	4603      	mov	r3, r0
 801221e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8012220:	2300      	movs	r3, #0
 8012222:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8012224:	2300      	movs	r3, #0
 8012226:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8012228:	2300      	movs	r3, #0
 801222a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801222c:	4b64      	ldr	r3, [pc, #400]	; (80123c0 <udp_input+0x21c>)
 801222e:	681b      	ldr	r3, [r3, #0]
 8012230:	627b      	str	r3, [r7, #36]	; 0x24
 8012232:	e054      	b.n	80122de <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8012234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012236:	8a5b      	ldrh	r3, [r3, #18]
 8012238:	89fa      	ldrh	r2, [r7, #14]
 801223a:	429a      	cmp	r2, r3
 801223c:	d14a      	bne.n	80122d4 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801223e:	7cfb      	ldrb	r3, [r7, #19]
 8012240:	461a      	mov	r2, r3
 8012242:	6839      	ldr	r1, [r7, #0]
 8012244:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012246:	f7ff ff49 	bl	80120dc <udp_input_local_match>
 801224a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801224c:	2b00      	cmp	r3, #0
 801224e:	d041      	beq.n	80122d4 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8012250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012252:	7c1b      	ldrb	r3, [r3, #16]
 8012254:	f003 0304 	and.w	r3, r3, #4
 8012258:	2b00      	cmp	r3, #0
 801225a:	d11d      	bne.n	8012298 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 801225c:	69fb      	ldr	r3, [r7, #28]
 801225e:	2b00      	cmp	r3, #0
 8012260:	d102      	bne.n	8012268 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8012262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012264:	61fb      	str	r3, [r7, #28]
 8012266:	e017      	b.n	8012298 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8012268:	7cfb      	ldrb	r3, [r7, #19]
 801226a:	2b00      	cmp	r3, #0
 801226c:	d014      	beq.n	8012298 <udp_input+0xf4>
 801226e:	4b53      	ldr	r3, [pc, #332]	; (80123bc <udp_input+0x218>)
 8012270:	695b      	ldr	r3, [r3, #20]
 8012272:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012276:	d10f      	bne.n	8012298 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8012278:	69fb      	ldr	r3, [r7, #28]
 801227a:	681a      	ldr	r2, [r3, #0]
 801227c:	683b      	ldr	r3, [r7, #0]
 801227e:	3304      	adds	r3, #4
 8012280:	681b      	ldr	r3, [r3, #0]
 8012282:	429a      	cmp	r2, r3
 8012284:	d008      	beq.n	8012298 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8012286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012288:	681a      	ldr	r2, [r3, #0]
 801228a:	683b      	ldr	r3, [r7, #0]
 801228c:	3304      	adds	r3, #4
 801228e:	681b      	ldr	r3, [r3, #0]
 8012290:	429a      	cmp	r2, r3
 8012292:	d101      	bne.n	8012298 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8012294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012296:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8012298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801229a:	8a9b      	ldrh	r3, [r3, #20]
 801229c:	8a3a      	ldrh	r2, [r7, #16]
 801229e:	429a      	cmp	r2, r3
 80122a0:	d118      	bne.n	80122d4 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80122a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122a4:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80122a6:	2b00      	cmp	r3, #0
 80122a8:	d005      	beq.n	80122b6 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80122aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122ac:	685a      	ldr	r2, [r3, #4]
 80122ae:	4b43      	ldr	r3, [pc, #268]	; (80123bc <udp_input+0x218>)
 80122b0:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80122b2:	429a      	cmp	r2, r3
 80122b4:	d10e      	bne.n	80122d4 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80122b6:	6a3b      	ldr	r3, [r7, #32]
 80122b8:	2b00      	cmp	r3, #0
 80122ba:	d014      	beq.n	80122e6 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80122bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122be:	68da      	ldr	r2, [r3, #12]
 80122c0:	6a3b      	ldr	r3, [r7, #32]
 80122c2:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80122c4:	4b3e      	ldr	r3, [pc, #248]	; (80123c0 <udp_input+0x21c>)
 80122c6:	681a      	ldr	r2, [r3, #0]
 80122c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122ca:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80122cc:	4a3c      	ldr	r2, [pc, #240]	; (80123c0 <udp_input+0x21c>)
 80122ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122d0:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80122d2:	e008      	b.n	80122e6 <udp_input+0x142>
      }
    }

    prev = pcb;
 80122d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122d6:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80122d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122da:	68db      	ldr	r3, [r3, #12]
 80122dc:	627b      	str	r3, [r7, #36]	; 0x24
 80122de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122e0:	2b00      	cmp	r3, #0
 80122e2:	d1a7      	bne.n	8012234 <udp_input+0x90>
 80122e4:	e000      	b.n	80122e8 <udp_input+0x144>
        break;
 80122e6:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80122e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122ea:	2b00      	cmp	r3, #0
 80122ec:	d101      	bne.n	80122f2 <udp_input+0x14e>
    pcb = uncon_pcb;
 80122ee:	69fb      	ldr	r3, [r7, #28]
 80122f0:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80122f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122f4:	2b00      	cmp	r3, #0
 80122f6:	d002      	beq.n	80122fe <udp_input+0x15a>
    for_us = 1;
 80122f8:	2301      	movs	r3, #1
 80122fa:	76fb      	strb	r3, [r7, #27]
 80122fc:	e00a      	b.n	8012314 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 80122fe:	683b      	ldr	r3, [r7, #0]
 8012300:	3304      	adds	r3, #4
 8012302:	681a      	ldr	r2, [r3, #0]
 8012304:	4b2d      	ldr	r3, [pc, #180]	; (80123bc <udp_input+0x218>)
 8012306:	695b      	ldr	r3, [r3, #20]
 8012308:	429a      	cmp	r2, r3
 801230a:	bf0c      	ite	eq
 801230c:	2301      	moveq	r3, #1
 801230e:	2300      	movne	r3, #0
 8012310:	b2db      	uxtb	r3, r3
 8012312:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8012314:	7efb      	ldrb	r3, [r7, #27]
 8012316:	2b00      	cmp	r3, #0
 8012318:	d041      	beq.n	801239e <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801231a:	2108      	movs	r1, #8
 801231c:	6878      	ldr	r0, [r7, #4]
 801231e:	f7f9 f9ff 	bl	800b720 <pbuf_remove_header>
 8012322:	4603      	mov	r3, r0
 8012324:	2b00      	cmp	r3, #0
 8012326:	d00a      	beq.n	801233e <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8012328:	4b20      	ldr	r3, [pc, #128]	; (80123ac <udp_input+0x208>)
 801232a:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801232e:	4925      	ldr	r1, [pc, #148]	; (80123c4 <udp_input+0x220>)
 8012330:	4820      	ldr	r0, [pc, #128]	; (80123b4 <udp_input+0x210>)
 8012332:	f002 fbc3 	bl	8014abc <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8012336:	6878      	ldr	r0, [r7, #4]
 8012338:	f7f9 fa78 	bl	800b82c <pbuf_free>
      goto end;
 801233c:	e032      	b.n	80123a4 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801233e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012340:	2b00      	cmp	r3, #0
 8012342:	d012      	beq.n	801236a <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8012344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012346:	699b      	ldr	r3, [r3, #24]
 8012348:	2b00      	cmp	r3, #0
 801234a:	d00a      	beq.n	8012362 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801234c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801234e:	699c      	ldr	r4, [r3, #24]
 8012350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012352:	69d8      	ldr	r0, [r3, #28]
 8012354:	8a3b      	ldrh	r3, [r7, #16]
 8012356:	9300      	str	r3, [sp, #0]
 8012358:	4b1b      	ldr	r3, [pc, #108]	; (80123c8 <udp_input+0x224>)
 801235a:	687a      	ldr	r2, [r7, #4]
 801235c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801235e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8012360:	e021      	b.n	80123a6 <udp_input+0x202>
        pbuf_free(p);
 8012362:	6878      	ldr	r0, [r7, #4]
 8012364:	f7f9 fa62 	bl	800b82c <pbuf_free>
        goto end;
 8012368:	e01c      	b.n	80123a4 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801236a:	7cfb      	ldrb	r3, [r7, #19]
 801236c:	2b00      	cmp	r3, #0
 801236e:	d112      	bne.n	8012396 <udp_input+0x1f2>
 8012370:	4b12      	ldr	r3, [pc, #72]	; (80123bc <udp_input+0x218>)
 8012372:	695b      	ldr	r3, [r3, #20]
 8012374:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012378:	2be0      	cmp	r3, #224	; 0xe0
 801237a:	d00c      	beq.n	8012396 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801237c:	4b0f      	ldr	r3, [pc, #60]	; (80123bc <udp_input+0x218>)
 801237e:	899b      	ldrh	r3, [r3, #12]
 8012380:	3308      	adds	r3, #8
 8012382:	b29b      	uxth	r3, r3
 8012384:	b21b      	sxth	r3, r3
 8012386:	4619      	mov	r1, r3
 8012388:	6878      	ldr	r0, [r7, #4]
 801238a:	f7f9 fa3c 	bl	800b806 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801238e:	2103      	movs	r1, #3
 8012390:	6878      	ldr	r0, [r7, #4]
 8012392:	f001 f8b7 	bl	8013504 <icmp_dest_unreach>
      pbuf_free(p);
 8012396:	6878      	ldr	r0, [r7, #4]
 8012398:	f7f9 fa48 	bl	800b82c <pbuf_free>
  return;
 801239c:	e003      	b.n	80123a6 <udp_input+0x202>
    pbuf_free(p);
 801239e:	6878      	ldr	r0, [r7, #4]
 80123a0:	f7f9 fa44 	bl	800b82c <pbuf_free>
  return;
 80123a4:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80123a6:	372c      	adds	r7, #44	; 0x2c
 80123a8:	46bd      	mov	sp, r7
 80123aa:	bd90      	pop	{r4, r7, pc}
 80123ac:	08018230 	.word	0x08018230
 80123b0:	080182d4 	.word	0x080182d4
 80123b4:	08018284 	.word	0x08018284
 80123b8:	080182ec 	.word	0x080182ec
 80123bc:	24000d8c 	.word	0x24000d8c
 80123c0:	24003c94 	.word	0x24003c94
 80123c4:	08018308 	.word	0x08018308
 80123c8:	24000d9c 	.word	0x24000d9c

080123cc <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80123cc:	b480      	push	{r7}
 80123ce:	b085      	sub	sp, #20
 80123d0:	af00      	add	r7, sp, #0
 80123d2:	6078      	str	r0, [r7, #4]
 80123d4:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80123d6:	687b      	ldr	r3, [r7, #4]
 80123d8:	2b00      	cmp	r3, #0
 80123da:	d01e      	beq.n	801241a <udp_netif_ip_addr_changed+0x4e>
 80123dc:	687b      	ldr	r3, [r7, #4]
 80123de:	681b      	ldr	r3, [r3, #0]
 80123e0:	2b00      	cmp	r3, #0
 80123e2:	d01a      	beq.n	801241a <udp_netif_ip_addr_changed+0x4e>
 80123e4:	683b      	ldr	r3, [r7, #0]
 80123e6:	2b00      	cmp	r3, #0
 80123e8:	d017      	beq.n	801241a <udp_netif_ip_addr_changed+0x4e>
 80123ea:	683b      	ldr	r3, [r7, #0]
 80123ec:	681b      	ldr	r3, [r3, #0]
 80123ee:	2b00      	cmp	r3, #0
 80123f0:	d013      	beq.n	801241a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80123f2:	4b0d      	ldr	r3, [pc, #52]	; (8012428 <udp_netif_ip_addr_changed+0x5c>)
 80123f4:	681b      	ldr	r3, [r3, #0]
 80123f6:	60fb      	str	r3, [r7, #12]
 80123f8:	e00c      	b.n	8012414 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80123fa:	68fb      	ldr	r3, [r7, #12]
 80123fc:	681a      	ldr	r2, [r3, #0]
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	681b      	ldr	r3, [r3, #0]
 8012402:	429a      	cmp	r2, r3
 8012404:	d103      	bne.n	801240e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8012406:	683b      	ldr	r3, [r7, #0]
 8012408:	681a      	ldr	r2, [r3, #0]
 801240a:	68fb      	ldr	r3, [r7, #12]
 801240c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801240e:	68fb      	ldr	r3, [r7, #12]
 8012410:	68db      	ldr	r3, [r3, #12]
 8012412:	60fb      	str	r3, [r7, #12]
 8012414:	68fb      	ldr	r3, [r7, #12]
 8012416:	2b00      	cmp	r3, #0
 8012418:	d1ef      	bne.n	80123fa <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801241a:	bf00      	nop
 801241c:	3714      	adds	r7, #20
 801241e:	46bd      	mov	sp, r7
 8012420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012424:	4770      	bx	lr
 8012426:	bf00      	nop
 8012428:	24003c94 	.word	0x24003c94

0801242c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801242c:	b580      	push	{r7, lr}
 801242e:	b082      	sub	sp, #8
 8012430:	af00      	add	r7, sp, #0
 8012432:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8012434:	4915      	ldr	r1, [pc, #84]	; (801248c <etharp_free_entry+0x60>)
 8012436:	687a      	ldr	r2, [r7, #4]
 8012438:	4613      	mov	r3, r2
 801243a:	005b      	lsls	r3, r3, #1
 801243c:	4413      	add	r3, r2
 801243e:	00db      	lsls	r3, r3, #3
 8012440:	440b      	add	r3, r1
 8012442:	681b      	ldr	r3, [r3, #0]
 8012444:	2b00      	cmp	r3, #0
 8012446:	d013      	beq.n	8012470 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8012448:	4910      	ldr	r1, [pc, #64]	; (801248c <etharp_free_entry+0x60>)
 801244a:	687a      	ldr	r2, [r7, #4]
 801244c:	4613      	mov	r3, r2
 801244e:	005b      	lsls	r3, r3, #1
 8012450:	4413      	add	r3, r2
 8012452:	00db      	lsls	r3, r3, #3
 8012454:	440b      	add	r3, r1
 8012456:	681b      	ldr	r3, [r3, #0]
 8012458:	4618      	mov	r0, r3
 801245a:	f7f9 f9e7 	bl	800b82c <pbuf_free>
    arp_table[i].q = NULL;
 801245e:	490b      	ldr	r1, [pc, #44]	; (801248c <etharp_free_entry+0x60>)
 8012460:	687a      	ldr	r2, [r7, #4]
 8012462:	4613      	mov	r3, r2
 8012464:	005b      	lsls	r3, r3, #1
 8012466:	4413      	add	r3, r2
 8012468:	00db      	lsls	r3, r3, #3
 801246a:	440b      	add	r3, r1
 801246c:	2200      	movs	r2, #0
 801246e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8012470:	4906      	ldr	r1, [pc, #24]	; (801248c <etharp_free_entry+0x60>)
 8012472:	687a      	ldr	r2, [r7, #4]
 8012474:	4613      	mov	r3, r2
 8012476:	005b      	lsls	r3, r3, #1
 8012478:	4413      	add	r3, r2
 801247a:	00db      	lsls	r3, r3, #3
 801247c:	440b      	add	r3, r1
 801247e:	3314      	adds	r3, #20
 8012480:	2200      	movs	r2, #0
 8012482:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8012484:	bf00      	nop
 8012486:	3708      	adds	r7, #8
 8012488:	46bd      	mov	sp, r7
 801248a:	bd80      	pop	{r7, pc}
 801248c:	24000598 	.word	0x24000598

08012490 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8012490:	b580      	push	{r7, lr}
 8012492:	b082      	sub	sp, #8
 8012494:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012496:	2300      	movs	r3, #0
 8012498:	607b      	str	r3, [r7, #4]
 801249a:	e096      	b.n	80125ca <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801249c:	494f      	ldr	r1, [pc, #316]	; (80125dc <etharp_tmr+0x14c>)
 801249e:	687a      	ldr	r2, [r7, #4]
 80124a0:	4613      	mov	r3, r2
 80124a2:	005b      	lsls	r3, r3, #1
 80124a4:	4413      	add	r3, r2
 80124a6:	00db      	lsls	r3, r3, #3
 80124a8:	440b      	add	r3, r1
 80124aa:	3314      	adds	r3, #20
 80124ac:	781b      	ldrb	r3, [r3, #0]
 80124ae:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80124b0:	78fb      	ldrb	r3, [r7, #3]
 80124b2:	2b00      	cmp	r3, #0
 80124b4:	f000 8086 	beq.w	80125c4 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80124b8:	4948      	ldr	r1, [pc, #288]	; (80125dc <etharp_tmr+0x14c>)
 80124ba:	687a      	ldr	r2, [r7, #4]
 80124bc:	4613      	mov	r3, r2
 80124be:	005b      	lsls	r3, r3, #1
 80124c0:	4413      	add	r3, r2
 80124c2:	00db      	lsls	r3, r3, #3
 80124c4:	440b      	add	r3, r1
 80124c6:	3312      	adds	r3, #18
 80124c8:	881b      	ldrh	r3, [r3, #0]
 80124ca:	3301      	adds	r3, #1
 80124cc:	b298      	uxth	r0, r3
 80124ce:	4943      	ldr	r1, [pc, #268]	; (80125dc <etharp_tmr+0x14c>)
 80124d0:	687a      	ldr	r2, [r7, #4]
 80124d2:	4613      	mov	r3, r2
 80124d4:	005b      	lsls	r3, r3, #1
 80124d6:	4413      	add	r3, r2
 80124d8:	00db      	lsls	r3, r3, #3
 80124da:	440b      	add	r3, r1
 80124dc:	3312      	adds	r3, #18
 80124de:	4602      	mov	r2, r0
 80124e0:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80124e2:	493e      	ldr	r1, [pc, #248]	; (80125dc <etharp_tmr+0x14c>)
 80124e4:	687a      	ldr	r2, [r7, #4]
 80124e6:	4613      	mov	r3, r2
 80124e8:	005b      	lsls	r3, r3, #1
 80124ea:	4413      	add	r3, r2
 80124ec:	00db      	lsls	r3, r3, #3
 80124ee:	440b      	add	r3, r1
 80124f0:	3312      	adds	r3, #18
 80124f2:	881b      	ldrh	r3, [r3, #0]
 80124f4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80124f8:	d215      	bcs.n	8012526 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80124fa:	4938      	ldr	r1, [pc, #224]	; (80125dc <etharp_tmr+0x14c>)
 80124fc:	687a      	ldr	r2, [r7, #4]
 80124fe:	4613      	mov	r3, r2
 8012500:	005b      	lsls	r3, r3, #1
 8012502:	4413      	add	r3, r2
 8012504:	00db      	lsls	r3, r3, #3
 8012506:	440b      	add	r3, r1
 8012508:	3314      	adds	r3, #20
 801250a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801250c:	2b01      	cmp	r3, #1
 801250e:	d10e      	bne.n	801252e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8012510:	4932      	ldr	r1, [pc, #200]	; (80125dc <etharp_tmr+0x14c>)
 8012512:	687a      	ldr	r2, [r7, #4]
 8012514:	4613      	mov	r3, r2
 8012516:	005b      	lsls	r3, r3, #1
 8012518:	4413      	add	r3, r2
 801251a:	00db      	lsls	r3, r3, #3
 801251c:	440b      	add	r3, r1
 801251e:	3312      	adds	r3, #18
 8012520:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8012522:	2b04      	cmp	r3, #4
 8012524:	d903      	bls.n	801252e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8012526:	6878      	ldr	r0, [r7, #4]
 8012528:	f7ff ff80 	bl	801242c <etharp_free_entry>
 801252c:	e04a      	b.n	80125c4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801252e:	492b      	ldr	r1, [pc, #172]	; (80125dc <etharp_tmr+0x14c>)
 8012530:	687a      	ldr	r2, [r7, #4]
 8012532:	4613      	mov	r3, r2
 8012534:	005b      	lsls	r3, r3, #1
 8012536:	4413      	add	r3, r2
 8012538:	00db      	lsls	r3, r3, #3
 801253a:	440b      	add	r3, r1
 801253c:	3314      	adds	r3, #20
 801253e:	781b      	ldrb	r3, [r3, #0]
 8012540:	2b03      	cmp	r3, #3
 8012542:	d10a      	bne.n	801255a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8012544:	4925      	ldr	r1, [pc, #148]	; (80125dc <etharp_tmr+0x14c>)
 8012546:	687a      	ldr	r2, [r7, #4]
 8012548:	4613      	mov	r3, r2
 801254a:	005b      	lsls	r3, r3, #1
 801254c:	4413      	add	r3, r2
 801254e:	00db      	lsls	r3, r3, #3
 8012550:	440b      	add	r3, r1
 8012552:	3314      	adds	r3, #20
 8012554:	2204      	movs	r2, #4
 8012556:	701a      	strb	r2, [r3, #0]
 8012558:	e034      	b.n	80125c4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801255a:	4920      	ldr	r1, [pc, #128]	; (80125dc <etharp_tmr+0x14c>)
 801255c:	687a      	ldr	r2, [r7, #4]
 801255e:	4613      	mov	r3, r2
 8012560:	005b      	lsls	r3, r3, #1
 8012562:	4413      	add	r3, r2
 8012564:	00db      	lsls	r3, r3, #3
 8012566:	440b      	add	r3, r1
 8012568:	3314      	adds	r3, #20
 801256a:	781b      	ldrb	r3, [r3, #0]
 801256c:	2b04      	cmp	r3, #4
 801256e:	d10a      	bne.n	8012586 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8012570:	491a      	ldr	r1, [pc, #104]	; (80125dc <etharp_tmr+0x14c>)
 8012572:	687a      	ldr	r2, [r7, #4]
 8012574:	4613      	mov	r3, r2
 8012576:	005b      	lsls	r3, r3, #1
 8012578:	4413      	add	r3, r2
 801257a:	00db      	lsls	r3, r3, #3
 801257c:	440b      	add	r3, r1
 801257e:	3314      	adds	r3, #20
 8012580:	2202      	movs	r2, #2
 8012582:	701a      	strb	r2, [r3, #0]
 8012584:	e01e      	b.n	80125c4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8012586:	4915      	ldr	r1, [pc, #84]	; (80125dc <etharp_tmr+0x14c>)
 8012588:	687a      	ldr	r2, [r7, #4]
 801258a:	4613      	mov	r3, r2
 801258c:	005b      	lsls	r3, r3, #1
 801258e:	4413      	add	r3, r2
 8012590:	00db      	lsls	r3, r3, #3
 8012592:	440b      	add	r3, r1
 8012594:	3314      	adds	r3, #20
 8012596:	781b      	ldrb	r3, [r3, #0]
 8012598:	2b01      	cmp	r3, #1
 801259a:	d113      	bne.n	80125c4 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801259c:	490f      	ldr	r1, [pc, #60]	; (80125dc <etharp_tmr+0x14c>)
 801259e:	687a      	ldr	r2, [r7, #4]
 80125a0:	4613      	mov	r3, r2
 80125a2:	005b      	lsls	r3, r3, #1
 80125a4:	4413      	add	r3, r2
 80125a6:	00db      	lsls	r3, r3, #3
 80125a8:	440b      	add	r3, r1
 80125aa:	3308      	adds	r3, #8
 80125ac:	6818      	ldr	r0, [r3, #0]
 80125ae:	687a      	ldr	r2, [r7, #4]
 80125b0:	4613      	mov	r3, r2
 80125b2:	005b      	lsls	r3, r3, #1
 80125b4:	4413      	add	r3, r2
 80125b6:	00db      	lsls	r3, r3, #3
 80125b8:	4a08      	ldr	r2, [pc, #32]	; (80125dc <etharp_tmr+0x14c>)
 80125ba:	4413      	add	r3, r2
 80125bc:	3304      	adds	r3, #4
 80125be:	4619      	mov	r1, r3
 80125c0:	f000 fe6e 	bl	80132a0 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80125c4:	687b      	ldr	r3, [r7, #4]
 80125c6:	3301      	adds	r3, #1
 80125c8:	607b      	str	r3, [r7, #4]
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	2b09      	cmp	r3, #9
 80125ce:	f77f af65 	ble.w	801249c <etharp_tmr+0xc>
      }
    }
  }
}
 80125d2:	bf00      	nop
 80125d4:	bf00      	nop
 80125d6:	3708      	adds	r7, #8
 80125d8:	46bd      	mov	sp, r7
 80125da:	bd80      	pop	{r7, pc}
 80125dc:	24000598 	.word	0x24000598

080125e0 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80125e0:	b580      	push	{r7, lr}
 80125e2:	b08a      	sub	sp, #40	; 0x28
 80125e4:	af00      	add	r7, sp, #0
 80125e6:	60f8      	str	r0, [r7, #12]
 80125e8:	460b      	mov	r3, r1
 80125ea:	607a      	str	r2, [r7, #4]
 80125ec:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80125ee:	230a      	movs	r3, #10
 80125f0:	84fb      	strh	r3, [r7, #38]	; 0x26
 80125f2:	230a      	movs	r3, #10
 80125f4:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80125f6:	230a      	movs	r3, #10
 80125f8:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 80125fa:	2300      	movs	r3, #0
 80125fc:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80125fe:	230a      	movs	r3, #10
 8012600:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8012602:	2300      	movs	r3, #0
 8012604:	83bb      	strh	r3, [r7, #28]
 8012606:	2300      	movs	r3, #0
 8012608:	837b      	strh	r3, [r7, #26]
 801260a:	2300      	movs	r3, #0
 801260c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801260e:	2300      	movs	r3, #0
 8012610:	843b      	strh	r3, [r7, #32]
 8012612:	e0ae      	b.n	8012772 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8012614:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012618:	49a6      	ldr	r1, [pc, #664]	; (80128b4 <etharp_find_entry+0x2d4>)
 801261a:	4613      	mov	r3, r2
 801261c:	005b      	lsls	r3, r3, #1
 801261e:	4413      	add	r3, r2
 8012620:	00db      	lsls	r3, r3, #3
 8012622:	440b      	add	r3, r1
 8012624:	3314      	adds	r3, #20
 8012626:	781b      	ldrb	r3, [r3, #0]
 8012628:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801262a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801262e:	2b0a      	cmp	r3, #10
 8012630:	d105      	bne.n	801263e <etharp_find_entry+0x5e>
 8012632:	7dfb      	ldrb	r3, [r7, #23]
 8012634:	2b00      	cmp	r3, #0
 8012636:	d102      	bne.n	801263e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8012638:	8c3b      	ldrh	r3, [r7, #32]
 801263a:	847b      	strh	r3, [r7, #34]	; 0x22
 801263c:	e095      	b.n	801276a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801263e:	7dfb      	ldrb	r3, [r7, #23]
 8012640:	2b00      	cmp	r3, #0
 8012642:	f000 8092 	beq.w	801276a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8012646:	7dfb      	ldrb	r3, [r7, #23]
 8012648:	2b01      	cmp	r3, #1
 801264a:	d009      	beq.n	8012660 <etharp_find_entry+0x80>
 801264c:	7dfb      	ldrb	r3, [r7, #23]
 801264e:	2b01      	cmp	r3, #1
 8012650:	d806      	bhi.n	8012660 <etharp_find_entry+0x80>
 8012652:	4b99      	ldr	r3, [pc, #612]	; (80128b8 <etharp_find_entry+0x2d8>)
 8012654:	f240 1223 	movw	r2, #291	; 0x123
 8012658:	4998      	ldr	r1, [pc, #608]	; (80128bc <etharp_find_entry+0x2dc>)
 801265a:	4899      	ldr	r0, [pc, #612]	; (80128c0 <etharp_find_entry+0x2e0>)
 801265c:	f002 fa2e 	bl	8014abc <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8012660:	68fb      	ldr	r3, [r7, #12]
 8012662:	2b00      	cmp	r3, #0
 8012664:	d020      	beq.n	80126a8 <etharp_find_entry+0xc8>
 8012666:	68fb      	ldr	r3, [r7, #12]
 8012668:	6819      	ldr	r1, [r3, #0]
 801266a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801266e:	4891      	ldr	r0, [pc, #580]	; (80128b4 <etharp_find_entry+0x2d4>)
 8012670:	4613      	mov	r3, r2
 8012672:	005b      	lsls	r3, r3, #1
 8012674:	4413      	add	r3, r2
 8012676:	00db      	lsls	r3, r3, #3
 8012678:	4403      	add	r3, r0
 801267a:	3304      	adds	r3, #4
 801267c:	681b      	ldr	r3, [r3, #0]
 801267e:	4299      	cmp	r1, r3
 8012680:	d112      	bne.n	80126a8 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8012682:	687b      	ldr	r3, [r7, #4]
 8012684:	2b00      	cmp	r3, #0
 8012686:	d00c      	beq.n	80126a2 <etharp_find_entry+0xc2>
 8012688:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801268c:	4989      	ldr	r1, [pc, #548]	; (80128b4 <etharp_find_entry+0x2d4>)
 801268e:	4613      	mov	r3, r2
 8012690:	005b      	lsls	r3, r3, #1
 8012692:	4413      	add	r3, r2
 8012694:	00db      	lsls	r3, r3, #3
 8012696:	440b      	add	r3, r1
 8012698:	3308      	adds	r3, #8
 801269a:	681b      	ldr	r3, [r3, #0]
 801269c:	687a      	ldr	r2, [r7, #4]
 801269e:	429a      	cmp	r2, r3
 80126a0:	d102      	bne.n	80126a8 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80126a2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80126a6:	e100      	b.n	80128aa <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80126a8:	7dfb      	ldrb	r3, [r7, #23]
 80126aa:	2b01      	cmp	r3, #1
 80126ac:	d140      	bne.n	8012730 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80126ae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80126b2:	4980      	ldr	r1, [pc, #512]	; (80128b4 <etharp_find_entry+0x2d4>)
 80126b4:	4613      	mov	r3, r2
 80126b6:	005b      	lsls	r3, r3, #1
 80126b8:	4413      	add	r3, r2
 80126ba:	00db      	lsls	r3, r3, #3
 80126bc:	440b      	add	r3, r1
 80126be:	681b      	ldr	r3, [r3, #0]
 80126c0:	2b00      	cmp	r3, #0
 80126c2:	d01a      	beq.n	80126fa <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80126c4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80126c8:	497a      	ldr	r1, [pc, #488]	; (80128b4 <etharp_find_entry+0x2d4>)
 80126ca:	4613      	mov	r3, r2
 80126cc:	005b      	lsls	r3, r3, #1
 80126ce:	4413      	add	r3, r2
 80126d0:	00db      	lsls	r3, r3, #3
 80126d2:	440b      	add	r3, r1
 80126d4:	3312      	adds	r3, #18
 80126d6:	881b      	ldrh	r3, [r3, #0]
 80126d8:	8bba      	ldrh	r2, [r7, #28]
 80126da:	429a      	cmp	r2, r3
 80126dc:	d845      	bhi.n	801276a <etharp_find_entry+0x18a>
            old_queue = i;
 80126de:	8c3b      	ldrh	r3, [r7, #32]
 80126e0:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80126e2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80126e6:	4973      	ldr	r1, [pc, #460]	; (80128b4 <etharp_find_entry+0x2d4>)
 80126e8:	4613      	mov	r3, r2
 80126ea:	005b      	lsls	r3, r3, #1
 80126ec:	4413      	add	r3, r2
 80126ee:	00db      	lsls	r3, r3, #3
 80126f0:	440b      	add	r3, r1
 80126f2:	3312      	adds	r3, #18
 80126f4:	881b      	ldrh	r3, [r3, #0]
 80126f6:	83bb      	strh	r3, [r7, #28]
 80126f8:	e037      	b.n	801276a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80126fa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80126fe:	496d      	ldr	r1, [pc, #436]	; (80128b4 <etharp_find_entry+0x2d4>)
 8012700:	4613      	mov	r3, r2
 8012702:	005b      	lsls	r3, r3, #1
 8012704:	4413      	add	r3, r2
 8012706:	00db      	lsls	r3, r3, #3
 8012708:	440b      	add	r3, r1
 801270a:	3312      	adds	r3, #18
 801270c:	881b      	ldrh	r3, [r3, #0]
 801270e:	8b7a      	ldrh	r2, [r7, #26]
 8012710:	429a      	cmp	r2, r3
 8012712:	d82a      	bhi.n	801276a <etharp_find_entry+0x18a>
            old_pending = i;
 8012714:	8c3b      	ldrh	r3, [r7, #32]
 8012716:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8012718:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801271c:	4965      	ldr	r1, [pc, #404]	; (80128b4 <etharp_find_entry+0x2d4>)
 801271e:	4613      	mov	r3, r2
 8012720:	005b      	lsls	r3, r3, #1
 8012722:	4413      	add	r3, r2
 8012724:	00db      	lsls	r3, r3, #3
 8012726:	440b      	add	r3, r1
 8012728:	3312      	adds	r3, #18
 801272a:	881b      	ldrh	r3, [r3, #0]
 801272c:	837b      	strh	r3, [r7, #26]
 801272e:	e01c      	b.n	801276a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8012730:	7dfb      	ldrb	r3, [r7, #23]
 8012732:	2b01      	cmp	r3, #1
 8012734:	d919      	bls.n	801276a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8012736:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801273a:	495e      	ldr	r1, [pc, #376]	; (80128b4 <etharp_find_entry+0x2d4>)
 801273c:	4613      	mov	r3, r2
 801273e:	005b      	lsls	r3, r3, #1
 8012740:	4413      	add	r3, r2
 8012742:	00db      	lsls	r3, r3, #3
 8012744:	440b      	add	r3, r1
 8012746:	3312      	adds	r3, #18
 8012748:	881b      	ldrh	r3, [r3, #0]
 801274a:	8b3a      	ldrh	r2, [r7, #24]
 801274c:	429a      	cmp	r2, r3
 801274e:	d80c      	bhi.n	801276a <etharp_find_entry+0x18a>
            old_stable = i;
 8012750:	8c3b      	ldrh	r3, [r7, #32]
 8012752:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8012754:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012758:	4956      	ldr	r1, [pc, #344]	; (80128b4 <etharp_find_entry+0x2d4>)
 801275a:	4613      	mov	r3, r2
 801275c:	005b      	lsls	r3, r3, #1
 801275e:	4413      	add	r3, r2
 8012760:	00db      	lsls	r3, r3, #3
 8012762:	440b      	add	r3, r1
 8012764:	3312      	adds	r3, #18
 8012766:	881b      	ldrh	r3, [r3, #0]
 8012768:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801276a:	8c3b      	ldrh	r3, [r7, #32]
 801276c:	3301      	adds	r3, #1
 801276e:	b29b      	uxth	r3, r3
 8012770:	843b      	strh	r3, [r7, #32]
 8012772:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012776:	2b09      	cmp	r3, #9
 8012778:	f77f af4c 	ble.w	8012614 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801277c:	7afb      	ldrb	r3, [r7, #11]
 801277e:	f003 0302 	and.w	r3, r3, #2
 8012782:	2b00      	cmp	r3, #0
 8012784:	d108      	bne.n	8012798 <etharp_find_entry+0x1b8>
 8012786:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801278a:	2b0a      	cmp	r3, #10
 801278c:	d107      	bne.n	801279e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801278e:	7afb      	ldrb	r3, [r7, #11]
 8012790:	f003 0301 	and.w	r3, r3, #1
 8012794:	2b00      	cmp	r3, #0
 8012796:	d102      	bne.n	801279e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8012798:	f04f 33ff 	mov.w	r3, #4294967295
 801279c:	e085      	b.n	80128aa <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801279e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80127a2:	2b09      	cmp	r3, #9
 80127a4:	dc02      	bgt.n	80127ac <etharp_find_entry+0x1cc>
    i = empty;
 80127a6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80127a8:	843b      	strh	r3, [r7, #32]
 80127aa:	e039      	b.n	8012820 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80127ac:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80127b0:	2b09      	cmp	r3, #9
 80127b2:	dc14      	bgt.n	80127de <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80127b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80127b6:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80127b8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80127bc:	493d      	ldr	r1, [pc, #244]	; (80128b4 <etharp_find_entry+0x2d4>)
 80127be:	4613      	mov	r3, r2
 80127c0:	005b      	lsls	r3, r3, #1
 80127c2:	4413      	add	r3, r2
 80127c4:	00db      	lsls	r3, r3, #3
 80127c6:	440b      	add	r3, r1
 80127c8:	681b      	ldr	r3, [r3, #0]
 80127ca:	2b00      	cmp	r3, #0
 80127cc:	d018      	beq.n	8012800 <etharp_find_entry+0x220>
 80127ce:	4b3a      	ldr	r3, [pc, #232]	; (80128b8 <etharp_find_entry+0x2d8>)
 80127d0:	f240 126d 	movw	r2, #365	; 0x16d
 80127d4:	493b      	ldr	r1, [pc, #236]	; (80128c4 <etharp_find_entry+0x2e4>)
 80127d6:	483a      	ldr	r0, [pc, #232]	; (80128c0 <etharp_find_entry+0x2e0>)
 80127d8:	f002 f970 	bl	8014abc <iprintf>
 80127dc:	e010      	b.n	8012800 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80127de:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80127e2:	2b09      	cmp	r3, #9
 80127e4:	dc02      	bgt.n	80127ec <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80127e6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80127e8:	843b      	strh	r3, [r7, #32]
 80127ea:	e009      	b.n	8012800 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80127ec:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80127f0:	2b09      	cmp	r3, #9
 80127f2:	dc02      	bgt.n	80127fa <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80127f4:	8bfb      	ldrh	r3, [r7, #30]
 80127f6:	843b      	strh	r3, [r7, #32]
 80127f8:	e002      	b.n	8012800 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80127fa:	f04f 33ff 	mov.w	r3, #4294967295
 80127fe:	e054      	b.n	80128aa <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8012800:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012804:	2b09      	cmp	r3, #9
 8012806:	dd06      	ble.n	8012816 <etharp_find_entry+0x236>
 8012808:	4b2b      	ldr	r3, [pc, #172]	; (80128b8 <etharp_find_entry+0x2d8>)
 801280a:	f240 127f 	movw	r2, #383	; 0x17f
 801280e:	492e      	ldr	r1, [pc, #184]	; (80128c8 <etharp_find_entry+0x2e8>)
 8012810:	482b      	ldr	r0, [pc, #172]	; (80128c0 <etharp_find_entry+0x2e0>)
 8012812:	f002 f953 	bl	8014abc <iprintf>
    etharp_free_entry(i);
 8012816:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801281a:	4618      	mov	r0, r3
 801281c:	f7ff fe06 	bl	801242c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8012820:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012824:	2b09      	cmp	r3, #9
 8012826:	dd06      	ble.n	8012836 <etharp_find_entry+0x256>
 8012828:	4b23      	ldr	r3, [pc, #140]	; (80128b8 <etharp_find_entry+0x2d8>)
 801282a:	f240 1283 	movw	r2, #387	; 0x183
 801282e:	4926      	ldr	r1, [pc, #152]	; (80128c8 <etharp_find_entry+0x2e8>)
 8012830:	4823      	ldr	r0, [pc, #140]	; (80128c0 <etharp_find_entry+0x2e0>)
 8012832:	f002 f943 	bl	8014abc <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8012836:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801283a:	491e      	ldr	r1, [pc, #120]	; (80128b4 <etharp_find_entry+0x2d4>)
 801283c:	4613      	mov	r3, r2
 801283e:	005b      	lsls	r3, r3, #1
 8012840:	4413      	add	r3, r2
 8012842:	00db      	lsls	r3, r3, #3
 8012844:	440b      	add	r3, r1
 8012846:	3314      	adds	r3, #20
 8012848:	781b      	ldrb	r3, [r3, #0]
 801284a:	2b00      	cmp	r3, #0
 801284c:	d006      	beq.n	801285c <etharp_find_entry+0x27c>
 801284e:	4b1a      	ldr	r3, [pc, #104]	; (80128b8 <etharp_find_entry+0x2d8>)
 8012850:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8012854:	491d      	ldr	r1, [pc, #116]	; (80128cc <etharp_find_entry+0x2ec>)
 8012856:	481a      	ldr	r0, [pc, #104]	; (80128c0 <etharp_find_entry+0x2e0>)
 8012858:	f002 f930 	bl	8014abc <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801285c:	68fb      	ldr	r3, [r7, #12]
 801285e:	2b00      	cmp	r3, #0
 8012860:	d00b      	beq.n	801287a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8012862:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012866:	68fb      	ldr	r3, [r7, #12]
 8012868:	6819      	ldr	r1, [r3, #0]
 801286a:	4812      	ldr	r0, [pc, #72]	; (80128b4 <etharp_find_entry+0x2d4>)
 801286c:	4613      	mov	r3, r2
 801286e:	005b      	lsls	r3, r3, #1
 8012870:	4413      	add	r3, r2
 8012872:	00db      	lsls	r3, r3, #3
 8012874:	4403      	add	r3, r0
 8012876:	3304      	adds	r3, #4
 8012878:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801287a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801287e:	490d      	ldr	r1, [pc, #52]	; (80128b4 <etharp_find_entry+0x2d4>)
 8012880:	4613      	mov	r3, r2
 8012882:	005b      	lsls	r3, r3, #1
 8012884:	4413      	add	r3, r2
 8012886:	00db      	lsls	r3, r3, #3
 8012888:	440b      	add	r3, r1
 801288a:	3312      	adds	r3, #18
 801288c:	2200      	movs	r2, #0
 801288e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8012890:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012894:	4907      	ldr	r1, [pc, #28]	; (80128b4 <etharp_find_entry+0x2d4>)
 8012896:	4613      	mov	r3, r2
 8012898:	005b      	lsls	r3, r3, #1
 801289a:	4413      	add	r3, r2
 801289c:	00db      	lsls	r3, r3, #3
 801289e:	440b      	add	r3, r1
 80128a0:	3308      	adds	r3, #8
 80128a2:	687a      	ldr	r2, [r7, #4]
 80128a4:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80128a6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80128aa:	4618      	mov	r0, r3
 80128ac:	3728      	adds	r7, #40	; 0x28
 80128ae:	46bd      	mov	sp, r7
 80128b0:	bd80      	pop	{r7, pc}
 80128b2:	bf00      	nop
 80128b4:	24000598 	.word	0x24000598
 80128b8:	08018594 	.word	0x08018594
 80128bc:	080185cc 	.word	0x080185cc
 80128c0:	0801860c 	.word	0x0801860c
 80128c4:	08018634 	.word	0x08018634
 80128c8:	0801864c 	.word	0x0801864c
 80128cc:	08018660 	.word	0x08018660

080128d0 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80128d0:	b580      	push	{r7, lr}
 80128d2:	b088      	sub	sp, #32
 80128d4:	af02      	add	r7, sp, #8
 80128d6:	60f8      	str	r0, [r7, #12]
 80128d8:	60b9      	str	r1, [r7, #8]
 80128da:	607a      	str	r2, [r7, #4]
 80128dc:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80128de:	68fb      	ldr	r3, [r7, #12]
 80128e0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80128e4:	2b06      	cmp	r3, #6
 80128e6:	d006      	beq.n	80128f6 <etharp_update_arp_entry+0x26>
 80128e8:	4b48      	ldr	r3, [pc, #288]	; (8012a0c <etharp_update_arp_entry+0x13c>)
 80128ea:	f240 12a9 	movw	r2, #425	; 0x1a9
 80128ee:	4948      	ldr	r1, [pc, #288]	; (8012a10 <etharp_update_arp_entry+0x140>)
 80128f0:	4848      	ldr	r0, [pc, #288]	; (8012a14 <etharp_update_arp_entry+0x144>)
 80128f2:	f002 f8e3 	bl	8014abc <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80128f6:	68bb      	ldr	r3, [r7, #8]
 80128f8:	2b00      	cmp	r3, #0
 80128fa:	d012      	beq.n	8012922 <etharp_update_arp_entry+0x52>
 80128fc:	68bb      	ldr	r3, [r7, #8]
 80128fe:	681b      	ldr	r3, [r3, #0]
 8012900:	2b00      	cmp	r3, #0
 8012902:	d00e      	beq.n	8012922 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8012904:	68bb      	ldr	r3, [r7, #8]
 8012906:	681b      	ldr	r3, [r3, #0]
 8012908:	68f9      	ldr	r1, [r7, #12]
 801290a:	4618      	mov	r0, r3
 801290c:	f001 f924 	bl	8013b58 <ip4_addr_isbroadcast_u32>
 8012910:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8012912:	2b00      	cmp	r3, #0
 8012914:	d105      	bne.n	8012922 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8012916:	68bb      	ldr	r3, [r7, #8]
 8012918:	681b      	ldr	r3, [r3, #0]
 801291a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801291e:	2be0      	cmp	r3, #224	; 0xe0
 8012920:	d102      	bne.n	8012928 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8012922:	f06f 030f 	mvn.w	r3, #15
 8012926:	e06c      	b.n	8012a02 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8012928:	78fb      	ldrb	r3, [r7, #3]
 801292a:	68fa      	ldr	r2, [r7, #12]
 801292c:	4619      	mov	r1, r3
 801292e:	68b8      	ldr	r0, [r7, #8]
 8012930:	f7ff fe56 	bl	80125e0 <etharp_find_entry>
 8012934:	4603      	mov	r3, r0
 8012936:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8012938:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801293c:	2b00      	cmp	r3, #0
 801293e:	da02      	bge.n	8012946 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8012940:	8afb      	ldrh	r3, [r7, #22]
 8012942:	b25b      	sxtb	r3, r3
 8012944:	e05d      	b.n	8012a02 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8012946:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801294a:	4933      	ldr	r1, [pc, #204]	; (8012a18 <etharp_update_arp_entry+0x148>)
 801294c:	4613      	mov	r3, r2
 801294e:	005b      	lsls	r3, r3, #1
 8012950:	4413      	add	r3, r2
 8012952:	00db      	lsls	r3, r3, #3
 8012954:	440b      	add	r3, r1
 8012956:	3314      	adds	r3, #20
 8012958:	2202      	movs	r2, #2
 801295a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801295c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012960:	492d      	ldr	r1, [pc, #180]	; (8012a18 <etharp_update_arp_entry+0x148>)
 8012962:	4613      	mov	r3, r2
 8012964:	005b      	lsls	r3, r3, #1
 8012966:	4413      	add	r3, r2
 8012968:	00db      	lsls	r3, r3, #3
 801296a:	440b      	add	r3, r1
 801296c:	3308      	adds	r3, #8
 801296e:	68fa      	ldr	r2, [r7, #12]
 8012970:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8012972:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012976:	4613      	mov	r3, r2
 8012978:	005b      	lsls	r3, r3, #1
 801297a:	4413      	add	r3, r2
 801297c:	00db      	lsls	r3, r3, #3
 801297e:	3308      	adds	r3, #8
 8012980:	4a25      	ldr	r2, [pc, #148]	; (8012a18 <etharp_update_arp_entry+0x148>)
 8012982:	4413      	add	r3, r2
 8012984:	3304      	adds	r3, #4
 8012986:	2206      	movs	r2, #6
 8012988:	6879      	ldr	r1, [r7, #4]
 801298a:	4618      	mov	r0, r3
 801298c:	f002 f866 	bl	8014a5c <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8012990:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012994:	4920      	ldr	r1, [pc, #128]	; (8012a18 <etharp_update_arp_entry+0x148>)
 8012996:	4613      	mov	r3, r2
 8012998:	005b      	lsls	r3, r3, #1
 801299a:	4413      	add	r3, r2
 801299c:	00db      	lsls	r3, r3, #3
 801299e:	440b      	add	r3, r1
 80129a0:	3312      	adds	r3, #18
 80129a2:	2200      	movs	r2, #0
 80129a4:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80129a6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80129aa:	491b      	ldr	r1, [pc, #108]	; (8012a18 <etharp_update_arp_entry+0x148>)
 80129ac:	4613      	mov	r3, r2
 80129ae:	005b      	lsls	r3, r3, #1
 80129b0:	4413      	add	r3, r2
 80129b2:	00db      	lsls	r3, r3, #3
 80129b4:	440b      	add	r3, r1
 80129b6:	681b      	ldr	r3, [r3, #0]
 80129b8:	2b00      	cmp	r3, #0
 80129ba:	d021      	beq.n	8012a00 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80129bc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80129c0:	4915      	ldr	r1, [pc, #84]	; (8012a18 <etharp_update_arp_entry+0x148>)
 80129c2:	4613      	mov	r3, r2
 80129c4:	005b      	lsls	r3, r3, #1
 80129c6:	4413      	add	r3, r2
 80129c8:	00db      	lsls	r3, r3, #3
 80129ca:	440b      	add	r3, r1
 80129cc:	681b      	ldr	r3, [r3, #0]
 80129ce:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80129d0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80129d4:	4910      	ldr	r1, [pc, #64]	; (8012a18 <etharp_update_arp_entry+0x148>)
 80129d6:	4613      	mov	r3, r2
 80129d8:	005b      	lsls	r3, r3, #1
 80129da:	4413      	add	r3, r2
 80129dc:	00db      	lsls	r3, r3, #3
 80129de:	440b      	add	r3, r1
 80129e0:	2200      	movs	r2, #0
 80129e2:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80129e4:	68fb      	ldr	r3, [r7, #12]
 80129e6:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80129ea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80129ee:	9300      	str	r3, [sp, #0]
 80129f0:	687b      	ldr	r3, [r7, #4]
 80129f2:	6939      	ldr	r1, [r7, #16]
 80129f4:	68f8      	ldr	r0, [r7, #12]
 80129f6:	f001 ffb7 	bl	8014968 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80129fa:	6938      	ldr	r0, [r7, #16]
 80129fc:	f7f8 ff16 	bl	800b82c <pbuf_free>
  }
  return ERR_OK;
 8012a00:	2300      	movs	r3, #0
}
 8012a02:	4618      	mov	r0, r3
 8012a04:	3718      	adds	r7, #24
 8012a06:	46bd      	mov	sp, r7
 8012a08:	bd80      	pop	{r7, pc}
 8012a0a:	bf00      	nop
 8012a0c:	08018594 	.word	0x08018594
 8012a10:	0801868c 	.word	0x0801868c
 8012a14:	0801860c 	.word	0x0801860c
 8012a18:	24000598 	.word	0x24000598

08012a1c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8012a1c:	b580      	push	{r7, lr}
 8012a1e:	b084      	sub	sp, #16
 8012a20:	af00      	add	r7, sp, #0
 8012a22:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012a24:	2300      	movs	r3, #0
 8012a26:	60fb      	str	r3, [r7, #12]
 8012a28:	e01e      	b.n	8012a68 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8012a2a:	4913      	ldr	r1, [pc, #76]	; (8012a78 <etharp_cleanup_netif+0x5c>)
 8012a2c:	68fa      	ldr	r2, [r7, #12]
 8012a2e:	4613      	mov	r3, r2
 8012a30:	005b      	lsls	r3, r3, #1
 8012a32:	4413      	add	r3, r2
 8012a34:	00db      	lsls	r3, r3, #3
 8012a36:	440b      	add	r3, r1
 8012a38:	3314      	adds	r3, #20
 8012a3a:	781b      	ldrb	r3, [r3, #0]
 8012a3c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8012a3e:	7afb      	ldrb	r3, [r7, #11]
 8012a40:	2b00      	cmp	r3, #0
 8012a42:	d00e      	beq.n	8012a62 <etharp_cleanup_netif+0x46>
 8012a44:	490c      	ldr	r1, [pc, #48]	; (8012a78 <etharp_cleanup_netif+0x5c>)
 8012a46:	68fa      	ldr	r2, [r7, #12]
 8012a48:	4613      	mov	r3, r2
 8012a4a:	005b      	lsls	r3, r3, #1
 8012a4c:	4413      	add	r3, r2
 8012a4e:	00db      	lsls	r3, r3, #3
 8012a50:	440b      	add	r3, r1
 8012a52:	3308      	adds	r3, #8
 8012a54:	681b      	ldr	r3, [r3, #0]
 8012a56:	687a      	ldr	r2, [r7, #4]
 8012a58:	429a      	cmp	r2, r3
 8012a5a:	d102      	bne.n	8012a62 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8012a5c:	68f8      	ldr	r0, [r7, #12]
 8012a5e:	f7ff fce5 	bl	801242c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012a62:	68fb      	ldr	r3, [r7, #12]
 8012a64:	3301      	adds	r3, #1
 8012a66:	60fb      	str	r3, [r7, #12]
 8012a68:	68fb      	ldr	r3, [r7, #12]
 8012a6a:	2b09      	cmp	r3, #9
 8012a6c:	dddd      	ble.n	8012a2a <etharp_cleanup_netif+0xe>
    }
  }
}
 8012a6e:	bf00      	nop
 8012a70:	bf00      	nop
 8012a72:	3710      	adds	r7, #16
 8012a74:	46bd      	mov	sp, r7
 8012a76:	bd80      	pop	{r7, pc}
 8012a78:	24000598 	.word	0x24000598

08012a7c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8012a7c:	b5b0      	push	{r4, r5, r7, lr}
 8012a7e:	b08a      	sub	sp, #40	; 0x28
 8012a80:	af04      	add	r7, sp, #16
 8012a82:	6078      	str	r0, [r7, #4]
 8012a84:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8012a86:	683b      	ldr	r3, [r7, #0]
 8012a88:	2b00      	cmp	r3, #0
 8012a8a:	d107      	bne.n	8012a9c <etharp_input+0x20>
 8012a8c:	4b3d      	ldr	r3, [pc, #244]	; (8012b84 <etharp_input+0x108>)
 8012a8e:	f240 228a 	movw	r2, #650	; 0x28a
 8012a92:	493d      	ldr	r1, [pc, #244]	; (8012b88 <etharp_input+0x10c>)
 8012a94:	483d      	ldr	r0, [pc, #244]	; (8012b8c <etharp_input+0x110>)
 8012a96:	f002 f811 	bl	8014abc <iprintf>
 8012a9a:	e06f      	b.n	8012b7c <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	685b      	ldr	r3, [r3, #4]
 8012aa0:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8012aa2:	693b      	ldr	r3, [r7, #16]
 8012aa4:	881b      	ldrh	r3, [r3, #0]
 8012aa6:	b29b      	uxth	r3, r3
 8012aa8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012aac:	d10c      	bne.n	8012ac8 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8012aae:	693b      	ldr	r3, [r7, #16]
 8012ab0:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8012ab2:	2b06      	cmp	r3, #6
 8012ab4:	d108      	bne.n	8012ac8 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8012ab6:	693b      	ldr	r3, [r7, #16]
 8012ab8:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8012aba:	2b04      	cmp	r3, #4
 8012abc:	d104      	bne.n	8012ac8 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8012abe:	693b      	ldr	r3, [r7, #16]
 8012ac0:	885b      	ldrh	r3, [r3, #2]
 8012ac2:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8012ac4:	2b08      	cmp	r3, #8
 8012ac6:	d003      	beq.n	8012ad0 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8012ac8:	6878      	ldr	r0, [r7, #4]
 8012aca:	f7f8 feaf 	bl	800b82c <pbuf_free>
    return;
 8012ace:	e055      	b.n	8012b7c <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8012ad0:	693b      	ldr	r3, [r7, #16]
 8012ad2:	330e      	adds	r3, #14
 8012ad4:	681b      	ldr	r3, [r3, #0]
 8012ad6:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8012ad8:	693b      	ldr	r3, [r7, #16]
 8012ada:	3318      	adds	r3, #24
 8012adc:	681b      	ldr	r3, [r3, #0]
 8012ade:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8012ae0:	683b      	ldr	r3, [r7, #0]
 8012ae2:	3304      	adds	r3, #4
 8012ae4:	681b      	ldr	r3, [r3, #0]
 8012ae6:	2b00      	cmp	r3, #0
 8012ae8:	d102      	bne.n	8012af0 <etharp_input+0x74>
    for_us = 0;
 8012aea:	2300      	movs	r3, #0
 8012aec:	75fb      	strb	r3, [r7, #23]
 8012aee:	e009      	b.n	8012b04 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8012af0:	68ba      	ldr	r2, [r7, #8]
 8012af2:	683b      	ldr	r3, [r7, #0]
 8012af4:	3304      	adds	r3, #4
 8012af6:	681b      	ldr	r3, [r3, #0]
 8012af8:	429a      	cmp	r2, r3
 8012afa:	bf0c      	ite	eq
 8012afc:	2301      	moveq	r3, #1
 8012afe:	2300      	movne	r3, #0
 8012b00:	b2db      	uxtb	r3, r3
 8012b02:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8012b04:	693b      	ldr	r3, [r7, #16]
 8012b06:	f103 0208 	add.w	r2, r3, #8
 8012b0a:	7dfb      	ldrb	r3, [r7, #23]
 8012b0c:	2b00      	cmp	r3, #0
 8012b0e:	d001      	beq.n	8012b14 <etharp_input+0x98>
 8012b10:	2301      	movs	r3, #1
 8012b12:	e000      	b.n	8012b16 <etharp_input+0x9a>
 8012b14:	2302      	movs	r3, #2
 8012b16:	f107 010c 	add.w	r1, r7, #12
 8012b1a:	6838      	ldr	r0, [r7, #0]
 8012b1c:	f7ff fed8 	bl	80128d0 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8012b20:	693b      	ldr	r3, [r7, #16]
 8012b22:	88db      	ldrh	r3, [r3, #6]
 8012b24:	b29b      	uxth	r3, r3
 8012b26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012b2a:	d003      	beq.n	8012b34 <etharp_input+0xb8>
 8012b2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012b30:	d01e      	beq.n	8012b70 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8012b32:	e020      	b.n	8012b76 <etharp_input+0xfa>
      if (for_us) {
 8012b34:	7dfb      	ldrb	r3, [r7, #23]
 8012b36:	2b00      	cmp	r3, #0
 8012b38:	d01c      	beq.n	8012b74 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8012b3a:	683b      	ldr	r3, [r7, #0]
 8012b3c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8012b40:	693b      	ldr	r3, [r7, #16]
 8012b42:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8012b46:	683b      	ldr	r3, [r7, #0]
 8012b48:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8012b4c:	683b      	ldr	r3, [r7, #0]
 8012b4e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8012b50:	693a      	ldr	r2, [r7, #16]
 8012b52:	3208      	adds	r2, #8
        etharp_raw(netif,
 8012b54:	2102      	movs	r1, #2
 8012b56:	9103      	str	r1, [sp, #12]
 8012b58:	f107 010c 	add.w	r1, r7, #12
 8012b5c:	9102      	str	r1, [sp, #8]
 8012b5e:	9201      	str	r2, [sp, #4]
 8012b60:	9300      	str	r3, [sp, #0]
 8012b62:	462b      	mov	r3, r5
 8012b64:	4622      	mov	r2, r4
 8012b66:	4601      	mov	r1, r0
 8012b68:	6838      	ldr	r0, [r7, #0]
 8012b6a:	f000 faeb 	bl	8013144 <etharp_raw>
      break;
 8012b6e:	e001      	b.n	8012b74 <etharp_input+0xf8>
      break;
 8012b70:	bf00      	nop
 8012b72:	e000      	b.n	8012b76 <etharp_input+0xfa>
      break;
 8012b74:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8012b76:	6878      	ldr	r0, [r7, #4]
 8012b78:	f7f8 fe58 	bl	800b82c <pbuf_free>
}
 8012b7c:	3718      	adds	r7, #24
 8012b7e:	46bd      	mov	sp, r7
 8012b80:	bdb0      	pop	{r4, r5, r7, pc}
 8012b82:	bf00      	nop
 8012b84:	08018594 	.word	0x08018594
 8012b88:	080186e4 	.word	0x080186e4
 8012b8c:	0801860c 	.word	0x0801860c

08012b90 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8012b90:	b580      	push	{r7, lr}
 8012b92:	b086      	sub	sp, #24
 8012b94:	af02      	add	r7, sp, #8
 8012b96:	60f8      	str	r0, [r7, #12]
 8012b98:	60b9      	str	r1, [r7, #8]
 8012b9a:	4613      	mov	r3, r2
 8012b9c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8012b9e:	79fa      	ldrb	r2, [r7, #7]
 8012ba0:	4944      	ldr	r1, [pc, #272]	; (8012cb4 <etharp_output_to_arp_index+0x124>)
 8012ba2:	4613      	mov	r3, r2
 8012ba4:	005b      	lsls	r3, r3, #1
 8012ba6:	4413      	add	r3, r2
 8012ba8:	00db      	lsls	r3, r3, #3
 8012baa:	440b      	add	r3, r1
 8012bac:	3314      	adds	r3, #20
 8012bae:	781b      	ldrb	r3, [r3, #0]
 8012bb0:	2b01      	cmp	r3, #1
 8012bb2:	d806      	bhi.n	8012bc2 <etharp_output_to_arp_index+0x32>
 8012bb4:	4b40      	ldr	r3, [pc, #256]	; (8012cb8 <etharp_output_to_arp_index+0x128>)
 8012bb6:	f240 22ee 	movw	r2, #750	; 0x2ee
 8012bba:	4940      	ldr	r1, [pc, #256]	; (8012cbc <etharp_output_to_arp_index+0x12c>)
 8012bbc:	4840      	ldr	r0, [pc, #256]	; (8012cc0 <etharp_output_to_arp_index+0x130>)
 8012bbe:	f001 ff7d 	bl	8014abc <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8012bc2:	79fa      	ldrb	r2, [r7, #7]
 8012bc4:	493b      	ldr	r1, [pc, #236]	; (8012cb4 <etharp_output_to_arp_index+0x124>)
 8012bc6:	4613      	mov	r3, r2
 8012bc8:	005b      	lsls	r3, r3, #1
 8012bca:	4413      	add	r3, r2
 8012bcc:	00db      	lsls	r3, r3, #3
 8012bce:	440b      	add	r3, r1
 8012bd0:	3314      	adds	r3, #20
 8012bd2:	781b      	ldrb	r3, [r3, #0]
 8012bd4:	2b02      	cmp	r3, #2
 8012bd6:	d153      	bne.n	8012c80 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8012bd8:	79fa      	ldrb	r2, [r7, #7]
 8012bda:	4936      	ldr	r1, [pc, #216]	; (8012cb4 <etharp_output_to_arp_index+0x124>)
 8012bdc:	4613      	mov	r3, r2
 8012bde:	005b      	lsls	r3, r3, #1
 8012be0:	4413      	add	r3, r2
 8012be2:	00db      	lsls	r3, r3, #3
 8012be4:	440b      	add	r3, r1
 8012be6:	3312      	adds	r3, #18
 8012be8:	881b      	ldrh	r3, [r3, #0]
 8012bea:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8012bee:	d919      	bls.n	8012c24 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8012bf0:	79fa      	ldrb	r2, [r7, #7]
 8012bf2:	4613      	mov	r3, r2
 8012bf4:	005b      	lsls	r3, r3, #1
 8012bf6:	4413      	add	r3, r2
 8012bf8:	00db      	lsls	r3, r3, #3
 8012bfa:	4a2e      	ldr	r2, [pc, #184]	; (8012cb4 <etharp_output_to_arp_index+0x124>)
 8012bfc:	4413      	add	r3, r2
 8012bfe:	3304      	adds	r3, #4
 8012c00:	4619      	mov	r1, r3
 8012c02:	68f8      	ldr	r0, [r7, #12]
 8012c04:	f000 fb4c 	bl	80132a0 <etharp_request>
 8012c08:	4603      	mov	r3, r0
 8012c0a:	2b00      	cmp	r3, #0
 8012c0c:	d138      	bne.n	8012c80 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8012c0e:	79fa      	ldrb	r2, [r7, #7]
 8012c10:	4928      	ldr	r1, [pc, #160]	; (8012cb4 <etharp_output_to_arp_index+0x124>)
 8012c12:	4613      	mov	r3, r2
 8012c14:	005b      	lsls	r3, r3, #1
 8012c16:	4413      	add	r3, r2
 8012c18:	00db      	lsls	r3, r3, #3
 8012c1a:	440b      	add	r3, r1
 8012c1c:	3314      	adds	r3, #20
 8012c1e:	2203      	movs	r2, #3
 8012c20:	701a      	strb	r2, [r3, #0]
 8012c22:	e02d      	b.n	8012c80 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8012c24:	79fa      	ldrb	r2, [r7, #7]
 8012c26:	4923      	ldr	r1, [pc, #140]	; (8012cb4 <etharp_output_to_arp_index+0x124>)
 8012c28:	4613      	mov	r3, r2
 8012c2a:	005b      	lsls	r3, r3, #1
 8012c2c:	4413      	add	r3, r2
 8012c2e:	00db      	lsls	r3, r3, #3
 8012c30:	440b      	add	r3, r1
 8012c32:	3312      	adds	r3, #18
 8012c34:	881b      	ldrh	r3, [r3, #0]
 8012c36:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8012c3a:	d321      	bcc.n	8012c80 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8012c3c:	79fa      	ldrb	r2, [r7, #7]
 8012c3e:	4613      	mov	r3, r2
 8012c40:	005b      	lsls	r3, r3, #1
 8012c42:	4413      	add	r3, r2
 8012c44:	00db      	lsls	r3, r3, #3
 8012c46:	4a1b      	ldr	r2, [pc, #108]	; (8012cb4 <etharp_output_to_arp_index+0x124>)
 8012c48:	4413      	add	r3, r2
 8012c4a:	1d19      	adds	r1, r3, #4
 8012c4c:	79fa      	ldrb	r2, [r7, #7]
 8012c4e:	4613      	mov	r3, r2
 8012c50:	005b      	lsls	r3, r3, #1
 8012c52:	4413      	add	r3, r2
 8012c54:	00db      	lsls	r3, r3, #3
 8012c56:	3308      	adds	r3, #8
 8012c58:	4a16      	ldr	r2, [pc, #88]	; (8012cb4 <etharp_output_to_arp_index+0x124>)
 8012c5a:	4413      	add	r3, r2
 8012c5c:	3304      	adds	r3, #4
 8012c5e:	461a      	mov	r2, r3
 8012c60:	68f8      	ldr	r0, [r7, #12]
 8012c62:	f000 fafb 	bl	801325c <etharp_request_dst>
 8012c66:	4603      	mov	r3, r0
 8012c68:	2b00      	cmp	r3, #0
 8012c6a:	d109      	bne.n	8012c80 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8012c6c:	79fa      	ldrb	r2, [r7, #7]
 8012c6e:	4911      	ldr	r1, [pc, #68]	; (8012cb4 <etharp_output_to_arp_index+0x124>)
 8012c70:	4613      	mov	r3, r2
 8012c72:	005b      	lsls	r3, r3, #1
 8012c74:	4413      	add	r3, r2
 8012c76:	00db      	lsls	r3, r3, #3
 8012c78:	440b      	add	r3, r1
 8012c7a:	3314      	adds	r3, #20
 8012c7c:	2203      	movs	r2, #3
 8012c7e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8012c80:	68fb      	ldr	r3, [r7, #12]
 8012c82:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8012c86:	79fa      	ldrb	r2, [r7, #7]
 8012c88:	4613      	mov	r3, r2
 8012c8a:	005b      	lsls	r3, r3, #1
 8012c8c:	4413      	add	r3, r2
 8012c8e:	00db      	lsls	r3, r3, #3
 8012c90:	3308      	adds	r3, #8
 8012c92:	4a08      	ldr	r2, [pc, #32]	; (8012cb4 <etharp_output_to_arp_index+0x124>)
 8012c94:	4413      	add	r3, r2
 8012c96:	3304      	adds	r3, #4
 8012c98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012c9c:	9200      	str	r2, [sp, #0]
 8012c9e:	460a      	mov	r2, r1
 8012ca0:	68b9      	ldr	r1, [r7, #8]
 8012ca2:	68f8      	ldr	r0, [r7, #12]
 8012ca4:	f001 fe60 	bl	8014968 <ethernet_output>
 8012ca8:	4603      	mov	r3, r0
}
 8012caa:	4618      	mov	r0, r3
 8012cac:	3710      	adds	r7, #16
 8012cae:	46bd      	mov	sp, r7
 8012cb0:	bd80      	pop	{r7, pc}
 8012cb2:	bf00      	nop
 8012cb4:	24000598 	.word	0x24000598
 8012cb8:	08018594 	.word	0x08018594
 8012cbc:	08018704 	.word	0x08018704
 8012cc0:	0801860c 	.word	0x0801860c

08012cc4 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8012cc4:	b580      	push	{r7, lr}
 8012cc6:	b08a      	sub	sp, #40	; 0x28
 8012cc8:	af02      	add	r7, sp, #8
 8012cca:	60f8      	str	r0, [r7, #12]
 8012ccc:	60b9      	str	r1, [r7, #8]
 8012cce:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8012cd0:	687b      	ldr	r3, [r7, #4]
 8012cd2:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8012cd4:	68fb      	ldr	r3, [r7, #12]
 8012cd6:	2b00      	cmp	r3, #0
 8012cd8:	d106      	bne.n	8012ce8 <etharp_output+0x24>
 8012cda:	4b73      	ldr	r3, [pc, #460]	; (8012ea8 <etharp_output+0x1e4>)
 8012cdc:	f240 321e 	movw	r2, #798	; 0x31e
 8012ce0:	4972      	ldr	r1, [pc, #456]	; (8012eac <etharp_output+0x1e8>)
 8012ce2:	4873      	ldr	r0, [pc, #460]	; (8012eb0 <etharp_output+0x1ec>)
 8012ce4:	f001 feea 	bl	8014abc <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8012ce8:	68bb      	ldr	r3, [r7, #8]
 8012cea:	2b00      	cmp	r3, #0
 8012cec:	d106      	bne.n	8012cfc <etharp_output+0x38>
 8012cee:	4b6e      	ldr	r3, [pc, #440]	; (8012ea8 <etharp_output+0x1e4>)
 8012cf0:	f240 321f 	movw	r2, #799	; 0x31f
 8012cf4:	496f      	ldr	r1, [pc, #444]	; (8012eb4 <etharp_output+0x1f0>)
 8012cf6:	486e      	ldr	r0, [pc, #440]	; (8012eb0 <etharp_output+0x1ec>)
 8012cf8:	f001 fee0 	bl	8014abc <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8012cfc:	687b      	ldr	r3, [r7, #4]
 8012cfe:	2b00      	cmp	r3, #0
 8012d00:	d106      	bne.n	8012d10 <etharp_output+0x4c>
 8012d02:	4b69      	ldr	r3, [pc, #420]	; (8012ea8 <etharp_output+0x1e4>)
 8012d04:	f44f 7248 	mov.w	r2, #800	; 0x320
 8012d08:	496b      	ldr	r1, [pc, #428]	; (8012eb8 <etharp_output+0x1f4>)
 8012d0a:	4869      	ldr	r0, [pc, #420]	; (8012eb0 <etharp_output+0x1ec>)
 8012d0c:	f001 fed6 	bl	8014abc <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8012d10:	687b      	ldr	r3, [r7, #4]
 8012d12:	681b      	ldr	r3, [r3, #0]
 8012d14:	68f9      	ldr	r1, [r7, #12]
 8012d16:	4618      	mov	r0, r3
 8012d18:	f000 ff1e 	bl	8013b58 <ip4_addr_isbroadcast_u32>
 8012d1c:	4603      	mov	r3, r0
 8012d1e:	2b00      	cmp	r3, #0
 8012d20:	d002      	beq.n	8012d28 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8012d22:	4b66      	ldr	r3, [pc, #408]	; (8012ebc <etharp_output+0x1f8>)
 8012d24:	61fb      	str	r3, [r7, #28]
 8012d26:	e0af      	b.n	8012e88 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8012d28:	687b      	ldr	r3, [r7, #4]
 8012d2a:	681b      	ldr	r3, [r3, #0]
 8012d2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012d30:	2be0      	cmp	r3, #224	; 0xe0
 8012d32:	d118      	bne.n	8012d66 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8012d34:	2301      	movs	r3, #1
 8012d36:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8012d38:	2300      	movs	r3, #0
 8012d3a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8012d3c:	235e      	movs	r3, #94	; 0x5e
 8012d3e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8012d40:	687b      	ldr	r3, [r7, #4]
 8012d42:	3301      	adds	r3, #1
 8012d44:	781b      	ldrb	r3, [r3, #0]
 8012d46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012d4a:	b2db      	uxtb	r3, r3
 8012d4c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8012d4e:	687b      	ldr	r3, [r7, #4]
 8012d50:	3302      	adds	r3, #2
 8012d52:	781b      	ldrb	r3, [r3, #0]
 8012d54:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	3303      	adds	r3, #3
 8012d5a:	781b      	ldrb	r3, [r3, #0]
 8012d5c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8012d5e:	f107 0310 	add.w	r3, r7, #16
 8012d62:	61fb      	str	r3, [r7, #28]
 8012d64:	e090      	b.n	8012e88 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8012d66:	687b      	ldr	r3, [r7, #4]
 8012d68:	681a      	ldr	r2, [r3, #0]
 8012d6a:	68fb      	ldr	r3, [r7, #12]
 8012d6c:	3304      	adds	r3, #4
 8012d6e:	681b      	ldr	r3, [r3, #0]
 8012d70:	405a      	eors	r2, r3
 8012d72:	68fb      	ldr	r3, [r7, #12]
 8012d74:	3308      	adds	r3, #8
 8012d76:	681b      	ldr	r3, [r3, #0]
 8012d78:	4013      	ands	r3, r2
 8012d7a:	2b00      	cmp	r3, #0
 8012d7c:	d012      	beq.n	8012da4 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8012d7e:	687b      	ldr	r3, [r7, #4]
 8012d80:	681b      	ldr	r3, [r3, #0]
 8012d82:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8012d84:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8012d88:	4293      	cmp	r3, r2
 8012d8a:	d00b      	beq.n	8012da4 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8012d8c:	68fb      	ldr	r3, [r7, #12]
 8012d8e:	330c      	adds	r3, #12
 8012d90:	681b      	ldr	r3, [r3, #0]
 8012d92:	2b00      	cmp	r3, #0
 8012d94:	d003      	beq.n	8012d9e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8012d96:	68fb      	ldr	r3, [r7, #12]
 8012d98:	330c      	adds	r3, #12
 8012d9a:	61bb      	str	r3, [r7, #24]
 8012d9c:	e002      	b.n	8012da4 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8012d9e:	f06f 0303 	mvn.w	r3, #3
 8012da2:	e07d      	b.n	8012ea0 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8012da4:	4b46      	ldr	r3, [pc, #280]	; (8012ec0 <etharp_output+0x1fc>)
 8012da6:	781b      	ldrb	r3, [r3, #0]
 8012da8:	4619      	mov	r1, r3
 8012daa:	4a46      	ldr	r2, [pc, #280]	; (8012ec4 <etharp_output+0x200>)
 8012dac:	460b      	mov	r3, r1
 8012dae:	005b      	lsls	r3, r3, #1
 8012db0:	440b      	add	r3, r1
 8012db2:	00db      	lsls	r3, r3, #3
 8012db4:	4413      	add	r3, r2
 8012db6:	3314      	adds	r3, #20
 8012db8:	781b      	ldrb	r3, [r3, #0]
 8012dba:	2b01      	cmp	r3, #1
 8012dbc:	d925      	bls.n	8012e0a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8012dbe:	4b40      	ldr	r3, [pc, #256]	; (8012ec0 <etharp_output+0x1fc>)
 8012dc0:	781b      	ldrb	r3, [r3, #0]
 8012dc2:	4619      	mov	r1, r3
 8012dc4:	4a3f      	ldr	r2, [pc, #252]	; (8012ec4 <etharp_output+0x200>)
 8012dc6:	460b      	mov	r3, r1
 8012dc8:	005b      	lsls	r3, r3, #1
 8012dca:	440b      	add	r3, r1
 8012dcc:	00db      	lsls	r3, r3, #3
 8012dce:	4413      	add	r3, r2
 8012dd0:	3308      	adds	r3, #8
 8012dd2:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8012dd4:	68fa      	ldr	r2, [r7, #12]
 8012dd6:	429a      	cmp	r2, r3
 8012dd8:	d117      	bne.n	8012e0a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8012dda:	69bb      	ldr	r3, [r7, #24]
 8012ddc:	681a      	ldr	r2, [r3, #0]
 8012dde:	4b38      	ldr	r3, [pc, #224]	; (8012ec0 <etharp_output+0x1fc>)
 8012de0:	781b      	ldrb	r3, [r3, #0]
 8012de2:	4618      	mov	r0, r3
 8012de4:	4937      	ldr	r1, [pc, #220]	; (8012ec4 <etharp_output+0x200>)
 8012de6:	4603      	mov	r3, r0
 8012de8:	005b      	lsls	r3, r3, #1
 8012dea:	4403      	add	r3, r0
 8012dec:	00db      	lsls	r3, r3, #3
 8012dee:	440b      	add	r3, r1
 8012df0:	3304      	adds	r3, #4
 8012df2:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8012df4:	429a      	cmp	r2, r3
 8012df6:	d108      	bne.n	8012e0a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8012df8:	4b31      	ldr	r3, [pc, #196]	; (8012ec0 <etharp_output+0x1fc>)
 8012dfa:	781b      	ldrb	r3, [r3, #0]
 8012dfc:	461a      	mov	r2, r3
 8012dfe:	68b9      	ldr	r1, [r7, #8]
 8012e00:	68f8      	ldr	r0, [r7, #12]
 8012e02:	f7ff fec5 	bl	8012b90 <etharp_output_to_arp_index>
 8012e06:	4603      	mov	r3, r0
 8012e08:	e04a      	b.n	8012ea0 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8012e0a:	2300      	movs	r3, #0
 8012e0c:	75fb      	strb	r3, [r7, #23]
 8012e0e:	e031      	b.n	8012e74 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8012e10:	7dfa      	ldrb	r2, [r7, #23]
 8012e12:	492c      	ldr	r1, [pc, #176]	; (8012ec4 <etharp_output+0x200>)
 8012e14:	4613      	mov	r3, r2
 8012e16:	005b      	lsls	r3, r3, #1
 8012e18:	4413      	add	r3, r2
 8012e1a:	00db      	lsls	r3, r3, #3
 8012e1c:	440b      	add	r3, r1
 8012e1e:	3314      	adds	r3, #20
 8012e20:	781b      	ldrb	r3, [r3, #0]
 8012e22:	2b01      	cmp	r3, #1
 8012e24:	d923      	bls.n	8012e6e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8012e26:	7dfa      	ldrb	r2, [r7, #23]
 8012e28:	4926      	ldr	r1, [pc, #152]	; (8012ec4 <etharp_output+0x200>)
 8012e2a:	4613      	mov	r3, r2
 8012e2c:	005b      	lsls	r3, r3, #1
 8012e2e:	4413      	add	r3, r2
 8012e30:	00db      	lsls	r3, r3, #3
 8012e32:	440b      	add	r3, r1
 8012e34:	3308      	adds	r3, #8
 8012e36:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8012e38:	68fa      	ldr	r2, [r7, #12]
 8012e3a:	429a      	cmp	r2, r3
 8012e3c:	d117      	bne.n	8012e6e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8012e3e:	69bb      	ldr	r3, [r7, #24]
 8012e40:	6819      	ldr	r1, [r3, #0]
 8012e42:	7dfa      	ldrb	r2, [r7, #23]
 8012e44:	481f      	ldr	r0, [pc, #124]	; (8012ec4 <etharp_output+0x200>)
 8012e46:	4613      	mov	r3, r2
 8012e48:	005b      	lsls	r3, r3, #1
 8012e4a:	4413      	add	r3, r2
 8012e4c:	00db      	lsls	r3, r3, #3
 8012e4e:	4403      	add	r3, r0
 8012e50:	3304      	adds	r3, #4
 8012e52:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8012e54:	4299      	cmp	r1, r3
 8012e56:	d10a      	bne.n	8012e6e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8012e58:	4a19      	ldr	r2, [pc, #100]	; (8012ec0 <etharp_output+0x1fc>)
 8012e5a:	7dfb      	ldrb	r3, [r7, #23]
 8012e5c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8012e5e:	7dfb      	ldrb	r3, [r7, #23]
 8012e60:	461a      	mov	r2, r3
 8012e62:	68b9      	ldr	r1, [r7, #8]
 8012e64:	68f8      	ldr	r0, [r7, #12]
 8012e66:	f7ff fe93 	bl	8012b90 <etharp_output_to_arp_index>
 8012e6a:	4603      	mov	r3, r0
 8012e6c:	e018      	b.n	8012ea0 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8012e6e:	7dfb      	ldrb	r3, [r7, #23]
 8012e70:	3301      	adds	r3, #1
 8012e72:	75fb      	strb	r3, [r7, #23]
 8012e74:	7dfb      	ldrb	r3, [r7, #23]
 8012e76:	2b09      	cmp	r3, #9
 8012e78:	d9ca      	bls.n	8012e10 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8012e7a:	68ba      	ldr	r2, [r7, #8]
 8012e7c:	69b9      	ldr	r1, [r7, #24]
 8012e7e:	68f8      	ldr	r0, [r7, #12]
 8012e80:	f000 f822 	bl	8012ec8 <etharp_query>
 8012e84:	4603      	mov	r3, r0
 8012e86:	e00b      	b.n	8012ea0 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8012e88:	68fb      	ldr	r3, [r7, #12]
 8012e8a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8012e8e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012e92:	9300      	str	r3, [sp, #0]
 8012e94:	69fb      	ldr	r3, [r7, #28]
 8012e96:	68b9      	ldr	r1, [r7, #8]
 8012e98:	68f8      	ldr	r0, [r7, #12]
 8012e9a:	f001 fd65 	bl	8014968 <ethernet_output>
 8012e9e:	4603      	mov	r3, r0
}
 8012ea0:	4618      	mov	r0, r3
 8012ea2:	3720      	adds	r7, #32
 8012ea4:	46bd      	mov	sp, r7
 8012ea6:	bd80      	pop	{r7, pc}
 8012ea8:	08018594 	.word	0x08018594
 8012eac:	080186e4 	.word	0x080186e4
 8012eb0:	0801860c 	.word	0x0801860c
 8012eb4:	08018734 	.word	0x08018734
 8012eb8:	080186d4 	.word	0x080186d4
 8012ebc:	0801a1c8 	.word	0x0801a1c8
 8012ec0:	24000688 	.word	0x24000688
 8012ec4:	24000598 	.word	0x24000598

08012ec8 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8012ec8:	b580      	push	{r7, lr}
 8012eca:	b08c      	sub	sp, #48	; 0x30
 8012ecc:	af02      	add	r7, sp, #8
 8012ece:	60f8      	str	r0, [r7, #12]
 8012ed0:	60b9      	str	r1, [r7, #8]
 8012ed2:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8012ed4:	68fb      	ldr	r3, [r7, #12]
 8012ed6:	3326      	adds	r3, #38	; 0x26
 8012ed8:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8012eda:	23ff      	movs	r3, #255	; 0xff
 8012edc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8012ee0:	2300      	movs	r3, #0
 8012ee2:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8012ee4:	68bb      	ldr	r3, [r7, #8]
 8012ee6:	681b      	ldr	r3, [r3, #0]
 8012ee8:	68f9      	ldr	r1, [r7, #12]
 8012eea:	4618      	mov	r0, r3
 8012eec:	f000 fe34 	bl	8013b58 <ip4_addr_isbroadcast_u32>
 8012ef0:	4603      	mov	r3, r0
 8012ef2:	2b00      	cmp	r3, #0
 8012ef4:	d10c      	bne.n	8012f10 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8012ef6:	68bb      	ldr	r3, [r7, #8]
 8012ef8:	681b      	ldr	r3, [r3, #0]
 8012efa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8012efe:	2be0      	cmp	r3, #224	; 0xe0
 8012f00:	d006      	beq.n	8012f10 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8012f02:	68bb      	ldr	r3, [r7, #8]
 8012f04:	2b00      	cmp	r3, #0
 8012f06:	d003      	beq.n	8012f10 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8012f08:	68bb      	ldr	r3, [r7, #8]
 8012f0a:	681b      	ldr	r3, [r3, #0]
 8012f0c:	2b00      	cmp	r3, #0
 8012f0e:	d102      	bne.n	8012f16 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8012f10:	f06f 030f 	mvn.w	r3, #15
 8012f14:	e101      	b.n	801311a <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8012f16:	68fa      	ldr	r2, [r7, #12]
 8012f18:	2101      	movs	r1, #1
 8012f1a:	68b8      	ldr	r0, [r7, #8]
 8012f1c:	f7ff fb60 	bl	80125e0 <etharp_find_entry>
 8012f20:	4603      	mov	r3, r0
 8012f22:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8012f24:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012f28:	2b00      	cmp	r3, #0
 8012f2a:	da02      	bge.n	8012f32 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8012f2c:	8a7b      	ldrh	r3, [r7, #18]
 8012f2e:	b25b      	sxtb	r3, r3
 8012f30:	e0f3      	b.n	801311a <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8012f32:	8a7b      	ldrh	r3, [r7, #18]
 8012f34:	2b7e      	cmp	r3, #126	; 0x7e
 8012f36:	d906      	bls.n	8012f46 <etharp_query+0x7e>
 8012f38:	4b7a      	ldr	r3, [pc, #488]	; (8013124 <etharp_query+0x25c>)
 8012f3a:	f240 32c1 	movw	r2, #961	; 0x3c1
 8012f3e:	497a      	ldr	r1, [pc, #488]	; (8013128 <etharp_query+0x260>)
 8012f40:	487a      	ldr	r0, [pc, #488]	; (801312c <etharp_query+0x264>)
 8012f42:	f001 fdbb 	bl	8014abc <iprintf>
  i = (netif_addr_idx_t)i_err;
 8012f46:	8a7b      	ldrh	r3, [r7, #18]
 8012f48:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8012f4a:	7c7a      	ldrb	r2, [r7, #17]
 8012f4c:	4978      	ldr	r1, [pc, #480]	; (8013130 <etharp_query+0x268>)
 8012f4e:	4613      	mov	r3, r2
 8012f50:	005b      	lsls	r3, r3, #1
 8012f52:	4413      	add	r3, r2
 8012f54:	00db      	lsls	r3, r3, #3
 8012f56:	440b      	add	r3, r1
 8012f58:	3314      	adds	r3, #20
 8012f5a:	781b      	ldrb	r3, [r3, #0]
 8012f5c:	2b00      	cmp	r3, #0
 8012f5e:	d115      	bne.n	8012f8c <etharp_query+0xc4>
    is_new_entry = 1;
 8012f60:	2301      	movs	r3, #1
 8012f62:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8012f64:	7c7a      	ldrb	r2, [r7, #17]
 8012f66:	4972      	ldr	r1, [pc, #456]	; (8013130 <etharp_query+0x268>)
 8012f68:	4613      	mov	r3, r2
 8012f6a:	005b      	lsls	r3, r3, #1
 8012f6c:	4413      	add	r3, r2
 8012f6e:	00db      	lsls	r3, r3, #3
 8012f70:	440b      	add	r3, r1
 8012f72:	3314      	adds	r3, #20
 8012f74:	2201      	movs	r2, #1
 8012f76:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8012f78:	7c7a      	ldrb	r2, [r7, #17]
 8012f7a:	496d      	ldr	r1, [pc, #436]	; (8013130 <etharp_query+0x268>)
 8012f7c:	4613      	mov	r3, r2
 8012f7e:	005b      	lsls	r3, r3, #1
 8012f80:	4413      	add	r3, r2
 8012f82:	00db      	lsls	r3, r3, #3
 8012f84:	440b      	add	r3, r1
 8012f86:	3308      	adds	r3, #8
 8012f88:	68fa      	ldr	r2, [r7, #12]
 8012f8a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8012f8c:	7c7a      	ldrb	r2, [r7, #17]
 8012f8e:	4968      	ldr	r1, [pc, #416]	; (8013130 <etharp_query+0x268>)
 8012f90:	4613      	mov	r3, r2
 8012f92:	005b      	lsls	r3, r3, #1
 8012f94:	4413      	add	r3, r2
 8012f96:	00db      	lsls	r3, r3, #3
 8012f98:	440b      	add	r3, r1
 8012f9a:	3314      	adds	r3, #20
 8012f9c:	781b      	ldrb	r3, [r3, #0]
 8012f9e:	2b01      	cmp	r3, #1
 8012fa0:	d011      	beq.n	8012fc6 <etharp_query+0xfe>
 8012fa2:	7c7a      	ldrb	r2, [r7, #17]
 8012fa4:	4962      	ldr	r1, [pc, #392]	; (8013130 <etharp_query+0x268>)
 8012fa6:	4613      	mov	r3, r2
 8012fa8:	005b      	lsls	r3, r3, #1
 8012faa:	4413      	add	r3, r2
 8012fac:	00db      	lsls	r3, r3, #3
 8012fae:	440b      	add	r3, r1
 8012fb0:	3314      	adds	r3, #20
 8012fb2:	781b      	ldrb	r3, [r3, #0]
 8012fb4:	2b01      	cmp	r3, #1
 8012fb6:	d806      	bhi.n	8012fc6 <etharp_query+0xfe>
 8012fb8:	4b5a      	ldr	r3, [pc, #360]	; (8013124 <etharp_query+0x25c>)
 8012fba:	f240 32cd 	movw	r2, #973	; 0x3cd
 8012fbe:	495d      	ldr	r1, [pc, #372]	; (8013134 <etharp_query+0x26c>)
 8012fc0:	485a      	ldr	r0, [pc, #360]	; (801312c <etharp_query+0x264>)
 8012fc2:	f001 fd7b 	bl	8014abc <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8012fc6:	6a3b      	ldr	r3, [r7, #32]
 8012fc8:	2b00      	cmp	r3, #0
 8012fca:	d102      	bne.n	8012fd2 <etharp_query+0x10a>
 8012fcc:	687b      	ldr	r3, [r7, #4]
 8012fce:	2b00      	cmp	r3, #0
 8012fd0:	d10c      	bne.n	8012fec <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8012fd2:	68b9      	ldr	r1, [r7, #8]
 8012fd4:	68f8      	ldr	r0, [r7, #12]
 8012fd6:	f000 f963 	bl	80132a0 <etharp_request>
 8012fda:	4603      	mov	r3, r0
 8012fdc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8012fe0:	687b      	ldr	r3, [r7, #4]
 8012fe2:	2b00      	cmp	r3, #0
 8012fe4:	d102      	bne.n	8012fec <etharp_query+0x124>
      return result;
 8012fe6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012fea:	e096      	b.n	801311a <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8012fec:	687b      	ldr	r3, [r7, #4]
 8012fee:	2b00      	cmp	r3, #0
 8012ff0:	d106      	bne.n	8013000 <etharp_query+0x138>
 8012ff2:	4b4c      	ldr	r3, [pc, #304]	; (8013124 <etharp_query+0x25c>)
 8012ff4:	f240 32e1 	movw	r2, #993	; 0x3e1
 8012ff8:	494f      	ldr	r1, [pc, #316]	; (8013138 <etharp_query+0x270>)
 8012ffa:	484c      	ldr	r0, [pc, #304]	; (801312c <etharp_query+0x264>)
 8012ffc:	f001 fd5e 	bl	8014abc <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8013000:	7c7a      	ldrb	r2, [r7, #17]
 8013002:	494b      	ldr	r1, [pc, #300]	; (8013130 <etharp_query+0x268>)
 8013004:	4613      	mov	r3, r2
 8013006:	005b      	lsls	r3, r3, #1
 8013008:	4413      	add	r3, r2
 801300a:	00db      	lsls	r3, r3, #3
 801300c:	440b      	add	r3, r1
 801300e:	3314      	adds	r3, #20
 8013010:	781b      	ldrb	r3, [r3, #0]
 8013012:	2b01      	cmp	r3, #1
 8013014:	d917      	bls.n	8013046 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8013016:	4a49      	ldr	r2, [pc, #292]	; (801313c <etharp_query+0x274>)
 8013018:	7c7b      	ldrb	r3, [r7, #17]
 801301a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801301c:	7c7a      	ldrb	r2, [r7, #17]
 801301e:	4613      	mov	r3, r2
 8013020:	005b      	lsls	r3, r3, #1
 8013022:	4413      	add	r3, r2
 8013024:	00db      	lsls	r3, r3, #3
 8013026:	3308      	adds	r3, #8
 8013028:	4a41      	ldr	r2, [pc, #260]	; (8013130 <etharp_query+0x268>)
 801302a:	4413      	add	r3, r2
 801302c:	3304      	adds	r3, #4
 801302e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8013032:	9200      	str	r2, [sp, #0]
 8013034:	697a      	ldr	r2, [r7, #20]
 8013036:	6879      	ldr	r1, [r7, #4]
 8013038:	68f8      	ldr	r0, [r7, #12]
 801303a:	f001 fc95 	bl	8014968 <ethernet_output>
 801303e:	4603      	mov	r3, r0
 8013040:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013044:	e067      	b.n	8013116 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8013046:	7c7a      	ldrb	r2, [r7, #17]
 8013048:	4939      	ldr	r1, [pc, #228]	; (8013130 <etharp_query+0x268>)
 801304a:	4613      	mov	r3, r2
 801304c:	005b      	lsls	r3, r3, #1
 801304e:	4413      	add	r3, r2
 8013050:	00db      	lsls	r3, r3, #3
 8013052:	440b      	add	r3, r1
 8013054:	3314      	adds	r3, #20
 8013056:	781b      	ldrb	r3, [r3, #0]
 8013058:	2b01      	cmp	r3, #1
 801305a:	d15c      	bne.n	8013116 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801305c:	2300      	movs	r3, #0
 801305e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8013060:	687b      	ldr	r3, [r7, #4]
 8013062:	61fb      	str	r3, [r7, #28]
    while (p) {
 8013064:	e01c      	b.n	80130a0 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8013066:	69fb      	ldr	r3, [r7, #28]
 8013068:	895a      	ldrh	r2, [r3, #10]
 801306a:	69fb      	ldr	r3, [r7, #28]
 801306c:	891b      	ldrh	r3, [r3, #8]
 801306e:	429a      	cmp	r2, r3
 8013070:	d10a      	bne.n	8013088 <etharp_query+0x1c0>
 8013072:	69fb      	ldr	r3, [r7, #28]
 8013074:	681b      	ldr	r3, [r3, #0]
 8013076:	2b00      	cmp	r3, #0
 8013078:	d006      	beq.n	8013088 <etharp_query+0x1c0>
 801307a:	4b2a      	ldr	r3, [pc, #168]	; (8013124 <etharp_query+0x25c>)
 801307c:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8013080:	492f      	ldr	r1, [pc, #188]	; (8013140 <etharp_query+0x278>)
 8013082:	482a      	ldr	r0, [pc, #168]	; (801312c <etharp_query+0x264>)
 8013084:	f001 fd1a 	bl	8014abc <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8013088:	69fb      	ldr	r3, [r7, #28]
 801308a:	7b1b      	ldrb	r3, [r3, #12]
 801308c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013090:	2b00      	cmp	r3, #0
 8013092:	d002      	beq.n	801309a <etharp_query+0x1d2>
        copy_needed = 1;
 8013094:	2301      	movs	r3, #1
 8013096:	61bb      	str	r3, [r7, #24]
        break;
 8013098:	e005      	b.n	80130a6 <etharp_query+0x1de>
      }
      p = p->next;
 801309a:	69fb      	ldr	r3, [r7, #28]
 801309c:	681b      	ldr	r3, [r3, #0]
 801309e:	61fb      	str	r3, [r7, #28]
    while (p) {
 80130a0:	69fb      	ldr	r3, [r7, #28]
 80130a2:	2b00      	cmp	r3, #0
 80130a4:	d1df      	bne.n	8013066 <etharp_query+0x19e>
    }
    if (copy_needed) {
 80130a6:	69bb      	ldr	r3, [r7, #24]
 80130a8:	2b00      	cmp	r3, #0
 80130aa:	d007      	beq.n	80130bc <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80130ac:	687a      	ldr	r2, [r7, #4]
 80130ae:	f44f 7120 	mov.w	r1, #640	; 0x280
 80130b2:	200e      	movs	r0, #14
 80130b4:	f7f8 fe26 	bl	800bd04 <pbuf_clone>
 80130b8:	61f8      	str	r0, [r7, #28]
 80130ba:	e004      	b.n	80130c6 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80130bc:	687b      	ldr	r3, [r7, #4]
 80130be:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80130c0:	69f8      	ldr	r0, [r7, #28]
 80130c2:	f7f8 fc53 	bl	800b96c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80130c6:	69fb      	ldr	r3, [r7, #28]
 80130c8:	2b00      	cmp	r3, #0
 80130ca:	d021      	beq.n	8013110 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80130cc:	7c7a      	ldrb	r2, [r7, #17]
 80130ce:	4918      	ldr	r1, [pc, #96]	; (8013130 <etharp_query+0x268>)
 80130d0:	4613      	mov	r3, r2
 80130d2:	005b      	lsls	r3, r3, #1
 80130d4:	4413      	add	r3, r2
 80130d6:	00db      	lsls	r3, r3, #3
 80130d8:	440b      	add	r3, r1
 80130da:	681b      	ldr	r3, [r3, #0]
 80130dc:	2b00      	cmp	r3, #0
 80130de:	d00a      	beq.n	80130f6 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80130e0:	7c7a      	ldrb	r2, [r7, #17]
 80130e2:	4913      	ldr	r1, [pc, #76]	; (8013130 <etharp_query+0x268>)
 80130e4:	4613      	mov	r3, r2
 80130e6:	005b      	lsls	r3, r3, #1
 80130e8:	4413      	add	r3, r2
 80130ea:	00db      	lsls	r3, r3, #3
 80130ec:	440b      	add	r3, r1
 80130ee:	681b      	ldr	r3, [r3, #0]
 80130f0:	4618      	mov	r0, r3
 80130f2:	f7f8 fb9b 	bl	800b82c <pbuf_free>
      }
      arp_table[i].q = p;
 80130f6:	7c7a      	ldrb	r2, [r7, #17]
 80130f8:	490d      	ldr	r1, [pc, #52]	; (8013130 <etharp_query+0x268>)
 80130fa:	4613      	mov	r3, r2
 80130fc:	005b      	lsls	r3, r3, #1
 80130fe:	4413      	add	r3, r2
 8013100:	00db      	lsls	r3, r3, #3
 8013102:	440b      	add	r3, r1
 8013104:	69fa      	ldr	r2, [r7, #28]
 8013106:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8013108:	2300      	movs	r3, #0
 801310a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801310e:	e002      	b.n	8013116 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8013110:	23ff      	movs	r3, #255	; 0xff
 8013112:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8013116:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801311a:	4618      	mov	r0, r3
 801311c:	3728      	adds	r7, #40	; 0x28
 801311e:	46bd      	mov	sp, r7
 8013120:	bd80      	pop	{r7, pc}
 8013122:	bf00      	nop
 8013124:	08018594 	.word	0x08018594
 8013128:	08018740 	.word	0x08018740
 801312c:	0801860c 	.word	0x0801860c
 8013130:	24000598 	.word	0x24000598
 8013134:	08018750 	.word	0x08018750
 8013138:	08018734 	.word	0x08018734
 801313c:	24000688 	.word	0x24000688
 8013140:	08018778 	.word	0x08018778

08013144 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8013144:	b580      	push	{r7, lr}
 8013146:	b08a      	sub	sp, #40	; 0x28
 8013148:	af02      	add	r7, sp, #8
 801314a:	60f8      	str	r0, [r7, #12]
 801314c:	60b9      	str	r1, [r7, #8]
 801314e:	607a      	str	r2, [r7, #4]
 8013150:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8013152:	2300      	movs	r3, #0
 8013154:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8013156:	68fb      	ldr	r3, [r7, #12]
 8013158:	2b00      	cmp	r3, #0
 801315a:	d106      	bne.n	801316a <etharp_raw+0x26>
 801315c:	4b3a      	ldr	r3, [pc, #232]	; (8013248 <etharp_raw+0x104>)
 801315e:	f240 4257 	movw	r2, #1111	; 0x457
 8013162:	493a      	ldr	r1, [pc, #232]	; (801324c <etharp_raw+0x108>)
 8013164:	483a      	ldr	r0, [pc, #232]	; (8013250 <etharp_raw+0x10c>)
 8013166:	f001 fca9 	bl	8014abc <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801316a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801316e:	211c      	movs	r1, #28
 8013170:	200e      	movs	r0, #14
 8013172:	f7f8 f877 	bl	800b264 <pbuf_alloc>
 8013176:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8013178:	69bb      	ldr	r3, [r7, #24]
 801317a:	2b00      	cmp	r3, #0
 801317c:	d102      	bne.n	8013184 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801317e:	f04f 33ff 	mov.w	r3, #4294967295
 8013182:	e05d      	b.n	8013240 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8013184:	69bb      	ldr	r3, [r7, #24]
 8013186:	895b      	ldrh	r3, [r3, #10]
 8013188:	2b1b      	cmp	r3, #27
 801318a:	d806      	bhi.n	801319a <etharp_raw+0x56>
 801318c:	4b2e      	ldr	r3, [pc, #184]	; (8013248 <etharp_raw+0x104>)
 801318e:	f240 4262 	movw	r2, #1122	; 0x462
 8013192:	4930      	ldr	r1, [pc, #192]	; (8013254 <etharp_raw+0x110>)
 8013194:	482e      	ldr	r0, [pc, #184]	; (8013250 <etharp_raw+0x10c>)
 8013196:	f001 fc91 	bl	8014abc <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801319a:	69bb      	ldr	r3, [r7, #24]
 801319c:	685b      	ldr	r3, [r3, #4]
 801319e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80131a0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80131a2:	4618      	mov	r0, r3
 80131a4:	f7f6 feb2 	bl	8009f0c <lwip_htons>
 80131a8:	4603      	mov	r3, r0
 80131aa:	461a      	mov	r2, r3
 80131ac:	697b      	ldr	r3, [r7, #20]
 80131ae:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80131b0:	68fb      	ldr	r3, [r7, #12]
 80131b2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80131b6:	2b06      	cmp	r3, #6
 80131b8:	d006      	beq.n	80131c8 <etharp_raw+0x84>
 80131ba:	4b23      	ldr	r3, [pc, #140]	; (8013248 <etharp_raw+0x104>)
 80131bc:	f240 4269 	movw	r2, #1129	; 0x469
 80131c0:	4925      	ldr	r1, [pc, #148]	; (8013258 <etharp_raw+0x114>)
 80131c2:	4823      	ldr	r0, [pc, #140]	; (8013250 <etharp_raw+0x10c>)
 80131c4:	f001 fc7a 	bl	8014abc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80131c8:	697b      	ldr	r3, [r7, #20]
 80131ca:	3308      	adds	r3, #8
 80131cc:	2206      	movs	r2, #6
 80131ce:	6839      	ldr	r1, [r7, #0]
 80131d0:	4618      	mov	r0, r3
 80131d2:	f001 fc43 	bl	8014a5c <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80131d6:	697b      	ldr	r3, [r7, #20]
 80131d8:	3312      	adds	r3, #18
 80131da:	2206      	movs	r2, #6
 80131dc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80131de:	4618      	mov	r0, r3
 80131e0:	f001 fc3c 	bl	8014a5c <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80131e4:	697b      	ldr	r3, [r7, #20]
 80131e6:	330e      	adds	r3, #14
 80131e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80131ea:	6812      	ldr	r2, [r2, #0]
 80131ec:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80131ee:	697b      	ldr	r3, [r7, #20]
 80131f0:	3318      	adds	r3, #24
 80131f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80131f4:	6812      	ldr	r2, [r2, #0]
 80131f6:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80131f8:	697b      	ldr	r3, [r7, #20]
 80131fa:	2200      	movs	r2, #0
 80131fc:	701a      	strb	r2, [r3, #0]
 80131fe:	2200      	movs	r2, #0
 8013200:	f042 0201 	orr.w	r2, r2, #1
 8013204:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8013206:	697b      	ldr	r3, [r7, #20]
 8013208:	2200      	movs	r2, #0
 801320a:	f042 0208 	orr.w	r2, r2, #8
 801320e:	709a      	strb	r2, [r3, #2]
 8013210:	2200      	movs	r2, #0
 8013212:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8013214:	697b      	ldr	r3, [r7, #20]
 8013216:	2206      	movs	r2, #6
 8013218:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801321a:	697b      	ldr	r3, [r7, #20]
 801321c:	2204      	movs	r2, #4
 801321e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8013220:	f640 0306 	movw	r3, #2054	; 0x806
 8013224:	9300      	str	r3, [sp, #0]
 8013226:	687b      	ldr	r3, [r7, #4]
 8013228:	68ba      	ldr	r2, [r7, #8]
 801322a:	69b9      	ldr	r1, [r7, #24]
 801322c:	68f8      	ldr	r0, [r7, #12]
 801322e:	f001 fb9b 	bl	8014968 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8013232:	69b8      	ldr	r0, [r7, #24]
 8013234:	f7f8 fafa 	bl	800b82c <pbuf_free>
  p = NULL;
 8013238:	2300      	movs	r3, #0
 801323a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801323c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8013240:	4618      	mov	r0, r3
 8013242:	3720      	adds	r7, #32
 8013244:	46bd      	mov	sp, r7
 8013246:	bd80      	pop	{r7, pc}
 8013248:	08018594 	.word	0x08018594
 801324c:	080186e4 	.word	0x080186e4
 8013250:	0801860c 	.word	0x0801860c
 8013254:	08018794 	.word	0x08018794
 8013258:	080187c8 	.word	0x080187c8

0801325c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801325c:	b580      	push	{r7, lr}
 801325e:	b088      	sub	sp, #32
 8013260:	af04      	add	r7, sp, #16
 8013262:	60f8      	str	r0, [r7, #12]
 8013264:	60b9      	str	r1, [r7, #8]
 8013266:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8013268:	68fb      	ldr	r3, [r7, #12]
 801326a:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801326e:	68fb      	ldr	r3, [r7, #12]
 8013270:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8013274:	68fb      	ldr	r3, [r7, #12]
 8013276:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8013278:	2201      	movs	r2, #1
 801327a:	9203      	str	r2, [sp, #12]
 801327c:	68ba      	ldr	r2, [r7, #8]
 801327e:	9202      	str	r2, [sp, #8]
 8013280:	4a06      	ldr	r2, [pc, #24]	; (801329c <etharp_request_dst+0x40>)
 8013282:	9201      	str	r2, [sp, #4]
 8013284:	9300      	str	r3, [sp, #0]
 8013286:	4603      	mov	r3, r0
 8013288:	687a      	ldr	r2, [r7, #4]
 801328a:	68f8      	ldr	r0, [r7, #12]
 801328c:	f7ff ff5a 	bl	8013144 <etharp_raw>
 8013290:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8013292:	4618      	mov	r0, r3
 8013294:	3710      	adds	r7, #16
 8013296:	46bd      	mov	sp, r7
 8013298:	bd80      	pop	{r7, pc}
 801329a:	bf00      	nop
 801329c:	0801a1d0 	.word	0x0801a1d0

080132a0 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80132a0:	b580      	push	{r7, lr}
 80132a2:	b082      	sub	sp, #8
 80132a4:	af00      	add	r7, sp, #0
 80132a6:	6078      	str	r0, [r7, #4]
 80132a8:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80132aa:	4a05      	ldr	r2, [pc, #20]	; (80132c0 <etharp_request+0x20>)
 80132ac:	6839      	ldr	r1, [r7, #0]
 80132ae:	6878      	ldr	r0, [r7, #4]
 80132b0:	f7ff ffd4 	bl	801325c <etharp_request_dst>
 80132b4:	4603      	mov	r3, r0
}
 80132b6:	4618      	mov	r0, r3
 80132b8:	3708      	adds	r7, #8
 80132ba:	46bd      	mov	sp, r7
 80132bc:	bd80      	pop	{r7, pc}
 80132be:	bf00      	nop
 80132c0:	0801a1c8 	.word	0x0801a1c8

080132c4 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80132c4:	b580      	push	{r7, lr}
 80132c6:	b08e      	sub	sp, #56	; 0x38
 80132c8:	af04      	add	r7, sp, #16
 80132ca:	6078      	str	r0, [r7, #4]
 80132cc:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80132ce:	4b87      	ldr	r3, [pc, #540]	; (80134ec <icmp_input+0x228>)
 80132d0:	689b      	ldr	r3, [r3, #8]
 80132d2:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80132d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132d6:	781b      	ldrb	r3, [r3, #0]
 80132d8:	f003 030f 	and.w	r3, r3, #15
 80132dc:	b2db      	uxtb	r3, r3
 80132de:	009b      	lsls	r3, r3, #2
 80132e0:	b2db      	uxtb	r3, r3
 80132e2:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80132e4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80132e6:	2b13      	cmp	r3, #19
 80132e8:	f240 80e8 	bls.w	80134bc <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80132ec:	687b      	ldr	r3, [r7, #4]
 80132ee:	895b      	ldrh	r3, [r3, #10]
 80132f0:	2b03      	cmp	r3, #3
 80132f2:	f240 80e5 	bls.w	80134c0 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80132f6:	687b      	ldr	r3, [r7, #4]
 80132f8:	685b      	ldr	r3, [r3, #4]
 80132fa:	781b      	ldrb	r3, [r3, #0]
 80132fc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8013300:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8013304:	2b00      	cmp	r3, #0
 8013306:	f000 80d2 	beq.w	80134ae <icmp_input+0x1ea>
 801330a:	2b08      	cmp	r3, #8
 801330c:	f040 80d2 	bne.w	80134b4 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8013310:	4b77      	ldr	r3, [pc, #476]	; (80134f0 <icmp_input+0x22c>)
 8013312:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8013314:	4b75      	ldr	r3, [pc, #468]	; (80134ec <icmp_input+0x228>)
 8013316:	695b      	ldr	r3, [r3, #20]
 8013318:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801331c:	2be0      	cmp	r3, #224	; 0xe0
 801331e:	f000 80d6 	beq.w	80134ce <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8013322:	4b72      	ldr	r3, [pc, #456]	; (80134ec <icmp_input+0x228>)
 8013324:	695b      	ldr	r3, [r3, #20]
 8013326:	4a71      	ldr	r2, [pc, #452]	; (80134ec <icmp_input+0x228>)
 8013328:	6812      	ldr	r2, [r2, #0]
 801332a:	4611      	mov	r1, r2
 801332c:	4618      	mov	r0, r3
 801332e:	f000 fc13 	bl	8013b58 <ip4_addr_isbroadcast_u32>
 8013332:	4603      	mov	r3, r0
 8013334:	2b00      	cmp	r3, #0
 8013336:	f040 80cc 	bne.w	80134d2 <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801333a:	687b      	ldr	r3, [r7, #4]
 801333c:	891b      	ldrh	r3, [r3, #8]
 801333e:	2b07      	cmp	r3, #7
 8013340:	f240 80c0 	bls.w	80134c4 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 8013344:	6878      	ldr	r0, [r7, #4]
 8013346:	f7f6 fee8 	bl	800a11a <inet_chksum_pbuf>
 801334a:	4603      	mov	r3, r0
 801334c:	2b00      	cmp	r3, #0
 801334e:	d003      	beq.n	8013358 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 8013350:	6878      	ldr	r0, [r7, #4]
 8013352:	f7f8 fa6b 	bl	800b82c <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 8013356:	e0c5      	b.n	80134e4 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8013358:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801335a:	330e      	adds	r3, #14
 801335c:	4619      	mov	r1, r3
 801335e:	6878      	ldr	r0, [r7, #4]
 8013360:	f7f8 f9ce 	bl	800b700 <pbuf_add_header>
 8013364:	4603      	mov	r3, r0
 8013366:	2b00      	cmp	r3, #0
 8013368:	d04b      	beq.n	8013402 <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801336a:	687b      	ldr	r3, [r7, #4]
 801336c:	891a      	ldrh	r2, [r3, #8]
 801336e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013370:	4413      	add	r3, r2
 8013372:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	891b      	ldrh	r3, [r3, #8]
 8013378:	8b7a      	ldrh	r2, [r7, #26]
 801337a:	429a      	cmp	r2, r3
 801337c:	f0c0 80ab 	bcc.w	80134d6 <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8013380:	8b7b      	ldrh	r3, [r7, #26]
 8013382:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013386:	4619      	mov	r1, r3
 8013388:	200e      	movs	r0, #14
 801338a:	f7f7 ff6b 	bl	800b264 <pbuf_alloc>
 801338e:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8013390:	697b      	ldr	r3, [r7, #20]
 8013392:	2b00      	cmp	r3, #0
 8013394:	f000 80a1 	beq.w	80134da <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8013398:	697b      	ldr	r3, [r7, #20]
 801339a:	895b      	ldrh	r3, [r3, #10]
 801339c:	461a      	mov	r2, r3
 801339e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80133a0:	3308      	adds	r3, #8
 80133a2:	429a      	cmp	r2, r3
 80133a4:	d203      	bcs.n	80133ae <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80133a6:	6978      	ldr	r0, [r7, #20]
 80133a8:	f7f8 fa40 	bl	800b82c <pbuf_free>
          goto icmperr;
 80133ac:	e096      	b.n	80134dc <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80133ae:	697b      	ldr	r3, [r7, #20]
 80133b0:	685b      	ldr	r3, [r3, #4]
 80133b2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80133b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80133b6:	4618      	mov	r0, r3
 80133b8:	f001 fb50 	bl	8014a5c <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80133bc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80133be:	4619      	mov	r1, r3
 80133c0:	6978      	ldr	r0, [r7, #20]
 80133c2:	f7f8 f9ad 	bl	800b720 <pbuf_remove_header>
 80133c6:	4603      	mov	r3, r0
 80133c8:	2b00      	cmp	r3, #0
 80133ca:	d009      	beq.n	80133e0 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80133cc:	4b49      	ldr	r3, [pc, #292]	; (80134f4 <icmp_input+0x230>)
 80133ce:	22b6      	movs	r2, #182	; 0xb6
 80133d0:	4949      	ldr	r1, [pc, #292]	; (80134f8 <icmp_input+0x234>)
 80133d2:	484a      	ldr	r0, [pc, #296]	; (80134fc <icmp_input+0x238>)
 80133d4:	f001 fb72 	bl	8014abc <iprintf>
          pbuf_free(r);
 80133d8:	6978      	ldr	r0, [r7, #20]
 80133da:	f7f8 fa27 	bl	800b82c <pbuf_free>
          goto icmperr;
 80133de:	e07d      	b.n	80134dc <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80133e0:	6879      	ldr	r1, [r7, #4]
 80133e2:	6978      	ldr	r0, [r7, #20]
 80133e4:	f7f8 fb4a 	bl	800ba7c <pbuf_copy>
 80133e8:	4603      	mov	r3, r0
 80133ea:	2b00      	cmp	r3, #0
 80133ec:	d003      	beq.n	80133f6 <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80133ee:	6978      	ldr	r0, [r7, #20]
 80133f0:	f7f8 fa1c 	bl	800b82c <pbuf_free>
          goto icmperr;
 80133f4:	e072      	b.n	80134dc <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 80133f6:	6878      	ldr	r0, [r7, #4]
 80133f8:	f7f8 fa18 	bl	800b82c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80133fc:	697b      	ldr	r3, [r7, #20]
 80133fe:	607b      	str	r3, [r7, #4]
 8013400:	e00f      	b.n	8013422 <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8013402:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013404:	330e      	adds	r3, #14
 8013406:	4619      	mov	r1, r3
 8013408:	6878      	ldr	r0, [r7, #4]
 801340a:	f7f8 f989 	bl	800b720 <pbuf_remove_header>
 801340e:	4603      	mov	r3, r0
 8013410:	2b00      	cmp	r3, #0
 8013412:	d006      	beq.n	8013422 <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8013414:	4b37      	ldr	r3, [pc, #220]	; (80134f4 <icmp_input+0x230>)
 8013416:	22c7      	movs	r2, #199	; 0xc7
 8013418:	4939      	ldr	r1, [pc, #228]	; (8013500 <icmp_input+0x23c>)
 801341a:	4838      	ldr	r0, [pc, #224]	; (80134fc <icmp_input+0x238>)
 801341c:	f001 fb4e 	bl	8014abc <iprintf>
          goto icmperr;
 8013420:	e05c      	b.n	80134dc <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8013422:	687b      	ldr	r3, [r7, #4]
 8013424:	685b      	ldr	r3, [r3, #4]
 8013426:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8013428:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801342a:	4619      	mov	r1, r3
 801342c:	6878      	ldr	r0, [r7, #4]
 801342e:	f7f8 f967 	bl	800b700 <pbuf_add_header>
 8013432:	4603      	mov	r3, r0
 8013434:	2b00      	cmp	r3, #0
 8013436:	d13c      	bne.n	80134b2 <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8013438:	687b      	ldr	r3, [r7, #4]
 801343a:	685b      	ldr	r3, [r3, #4]
 801343c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801343e:	69fb      	ldr	r3, [r7, #28]
 8013440:	681a      	ldr	r2, [r3, #0]
 8013442:	68fb      	ldr	r3, [r7, #12]
 8013444:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8013446:	4b29      	ldr	r3, [pc, #164]	; (80134ec <icmp_input+0x228>)
 8013448:	691a      	ldr	r2, [r3, #16]
 801344a:	68fb      	ldr	r3, [r7, #12]
 801344c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801344e:	693b      	ldr	r3, [r7, #16]
 8013450:	2200      	movs	r2, #0
 8013452:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8013454:	693b      	ldr	r3, [r7, #16]
 8013456:	885b      	ldrh	r3, [r3, #2]
 8013458:	b29b      	uxth	r3, r3
 801345a:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 801345e:	4293      	cmp	r3, r2
 8013460:	d907      	bls.n	8013472 <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 8013462:	693b      	ldr	r3, [r7, #16]
 8013464:	885b      	ldrh	r3, [r3, #2]
 8013466:	b29b      	uxth	r3, r3
 8013468:	3309      	adds	r3, #9
 801346a:	b29a      	uxth	r2, r3
 801346c:	693b      	ldr	r3, [r7, #16]
 801346e:	805a      	strh	r2, [r3, #2]
 8013470:	e006      	b.n	8013480 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 8013472:	693b      	ldr	r3, [r7, #16]
 8013474:	885b      	ldrh	r3, [r3, #2]
 8013476:	b29b      	uxth	r3, r3
 8013478:	3308      	adds	r3, #8
 801347a:	b29a      	uxth	r2, r3
 801347c:	693b      	ldr	r3, [r7, #16]
 801347e:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8013480:	68fb      	ldr	r3, [r7, #12]
 8013482:	22ff      	movs	r2, #255	; 0xff
 8013484:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8013486:	68fb      	ldr	r3, [r7, #12]
 8013488:	2200      	movs	r2, #0
 801348a:	729a      	strb	r2, [r3, #10]
 801348c:	2200      	movs	r2, #0
 801348e:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8013490:	683b      	ldr	r3, [r7, #0]
 8013492:	9302      	str	r3, [sp, #8]
 8013494:	2301      	movs	r3, #1
 8013496:	9301      	str	r3, [sp, #4]
 8013498:	2300      	movs	r3, #0
 801349a:	9300      	str	r3, [sp, #0]
 801349c:	23ff      	movs	r3, #255	; 0xff
 801349e:	2200      	movs	r2, #0
 80134a0:	69f9      	ldr	r1, [r7, #28]
 80134a2:	6878      	ldr	r0, [r7, #4]
 80134a4:	f000 fa80 	bl	80139a8 <ip4_output_if>
 80134a8:	4603      	mov	r3, r0
 80134aa:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80134ac:	e001      	b.n	80134b2 <icmp_input+0x1ee>
      break;
 80134ae:	bf00      	nop
 80134b0:	e000      	b.n	80134b4 <icmp_input+0x1f0>
      break;
 80134b2:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80134b4:	6878      	ldr	r0, [r7, #4]
 80134b6:	f7f8 f9b9 	bl	800b82c <pbuf_free>
  return;
 80134ba:	e013      	b.n	80134e4 <icmp_input+0x220>
    goto lenerr;
 80134bc:	bf00      	nop
 80134be:	e002      	b.n	80134c6 <icmp_input+0x202>
    goto lenerr;
 80134c0:	bf00      	nop
 80134c2:	e000      	b.n	80134c6 <icmp_input+0x202>
        goto lenerr;
 80134c4:	bf00      	nop
lenerr:
  pbuf_free(p);
 80134c6:	6878      	ldr	r0, [r7, #4]
 80134c8:	f7f8 f9b0 	bl	800b82c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80134cc:	e00a      	b.n	80134e4 <icmp_input+0x220>
        goto icmperr;
 80134ce:	bf00      	nop
 80134d0:	e004      	b.n	80134dc <icmp_input+0x218>
        goto icmperr;
 80134d2:	bf00      	nop
 80134d4:	e002      	b.n	80134dc <icmp_input+0x218>
          goto icmperr;
 80134d6:	bf00      	nop
 80134d8:	e000      	b.n	80134dc <icmp_input+0x218>
          goto icmperr;
 80134da:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80134dc:	6878      	ldr	r0, [r7, #4]
 80134de:	f7f8 f9a5 	bl	800b82c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80134e2:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80134e4:	3728      	adds	r7, #40	; 0x28
 80134e6:	46bd      	mov	sp, r7
 80134e8:	bd80      	pop	{r7, pc}
 80134ea:	bf00      	nop
 80134ec:	24000d8c 	.word	0x24000d8c
 80134f0:	24000da0 	.word	0x24000da0
 80134f4:	0801880c 	.word	0x0801880c
 80134f8:	08018844 	.word	0x08018844
 80134fc:	0801887c 	.word	0x0801887c
 8013500:	080188a4 	.word	0x080188a4

08013504 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8013504:	b580      	push	{r7, lr}
 8013506:	b082      	sub	sp, #8
 8013508:	af00      	add	r7, sp, #0
 801350a:	6078      	str	r0, [r7, #4]
 801350c:	460b      	mov	r3, r1
 801350e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8013510:	78fb      	ldrb	r3, [r7, #3]
 8013512:	461a      	mov	r2, r3
 8013514:	2103      	movs	r1, #3
 8013516:	6878      	ldr	r0, [r7, #4]
 8013518:	f000 f814 	bl	8013544 <icmp_send_response>
}
 801351c:	bf00      	nop
 801351e:	3708      	adds	r7, #8
 8013520:	46bd      	mov	sp, r7
 8013522:	bd80      	pop	{r7, pc}

08013524 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8013524:	b580      	push	{r7, lr}
 8013526:	b082      	sub	sp, #8
 8013528:	af00      	add	r7, sp, #0
 801352a:	6078      	str	r0, [r7, #4]
 801352c:	460b      	mov	r3, r1
 801352e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8013530:	78fb      	ldrb	r3, [r7, #3]
 8013532:	461a      	mov	r2, r3
 8013534:	210b      	movs	r1, #11
 8013536:	6878      	ldr	r0, [r7, #4]
 8013538:	f000 f804 	bl	8013544 <icmp_send_response>
}
 801353c:	bf00      	nop
 801353e:	3708      	adds	r7, #8
 8013540:	46bd      	mov	sp, r7
 8013542:	bd80      	pop	{r7, pc}

08013544 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8013544:	b580      	push	{r7, lr}
 8013546:	b08c      	sub	sp, #48	; 0x30
 8013548:	af04      	add	r7, sp, #16
 801354a:	6078      	str	r0, [r7, #4]
 801354c:	460b      	mov	r3, r1
 801354e:	70fb      	strb	r3, [r7, #3]
 8013550:	4613      	mov	r3, r2
 8013552:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8013554:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013558:	2124      	movs	r1, #36	; 0x24
 801355a:	2022      	movs	r0, #34	; 0x22
 801355c:	f7f7 fe82 	bl	800b264 <pbuf_alloc>
 8013560:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8013562:	69fb      	ldr	r3, [r7, #28]
 8013564:	2b00      	cmp	r3, #0
 8013566:	d056      	beq.n	8013616 <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8013568:	69fb      	ldr	r3, [r7, #28]
 801356a:	895b      	ldrh	r3, [r3, #10]
 801356c:	2b23      	cmp	r3, #35	; 0x23
 801356e:	d806      	bhi.n	801357e <icmp_send_response+0x3a>
 8013570:	4b2b      	ldr	r3, [pc, #172]	; (8013620 <icmp_send_response+0xdc>)
 8013572:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8013576:	492b      	ldr	r1, [pc, #172]	; (8013624 <icmp_send_response+0xe0>)
 8013578:	482b      	ldr	r0, [pc, #172]	; (8013628 <icmp_send_response+0xe4>)
 801357a:	f001 fa9f 	bl	8014abc <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801357e:	687b      	ldr	r3, [r7, #4]
 8013580:	685b      	ldr	r3, [r3, #4]
 8013582:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8013584:	69fb      	ldr	r3, [r7, #28]
 8013586:	685b      	ldr	r3, [r3, #4]
 8013588:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801358a:	697b      	ldr	r3, [r7, #20]
 801358c:	78fa      	ldrb	r2, [r7, #3]
 801358e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8013590:	697b      	ldr	r3, [r7, #20]
 8013592:	78ba      	ldrb	r2, [r7, #2]
 8013594:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8013596:	697b      	ldr	r3, [r7, #20]
 8013598:	2200      	movs	r2, #0
 801359a:	711a      	strb	r2, [r3, #4]
 801359c:	2200      	movs	r2, #0
 801359e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80135a0:	697b      	ldr	r3, [r7, #20]
 80135a2:	2200      	movs	r2, #0
 80135a4:	719a      	strb	r2, [r3, #6]
 80135a6:	2200      	movs	r2, #0
 80135a8:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80135aa:	69fb      	ldr	r3, [r7, #28]
 80135ac:	685b      	ldr	r3, [r3, #4]
 80135ae:	f103 0008 	add.w	r0, r3, #8
 80135b2:	687b      	ldr	r3, [r7, #4]
 80135b4:	685b      	ldr	r3, [r3, #4]
 80135b6:	221c      	movs	r2, #28
 80135b8:	4619      	mov	r1, r3
 80135ba:	f001 fa4f 	bl	8014a5c <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80135be:	69bb      	ldr	r3, [r7, #24]
 80135c0:	68db      	ldr	r3, [r3, #12]
 80135c2:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80135c4:	f107 030c 	add.w	r3, r7, #12
 80135c8:	4618      	mov	r0, r3
 80135ca:	f000 f82f 	bl	801362c <ip4_route>
 80135ce:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80135d0:	693b      	ldr	r3, [r7, #16]
 80135d2:	2b00      	cmp	r3, #0
 80135d4:	d01b      	beq.n	801360e <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80135d6:	697b      	ldr	r3, [r7, #20]
 80135d8:	2200      	movs	r2, #0
 80135da:	709a      	strb	r2, [r3, #2]
 80135dc:	2200      	movs	r2, #0
 80135de:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 80135e0:	69fb      	ldr	r3, [r7, #28]
 80135e2:	895b      	ldrh	r3, [r3, #10]
 80135e4:	4619      	mov	r1, r3
 80135e6:	6978      	ldr	r0, [r7, #20]
 80135e8:	f7f6 fd85 	bl	800a0f6 <inet_chksum>
 80135ec:	4603      	mov	r3, r0
 80135ee:	461a      	mov	r2, r3
 80135f0:	697b      	ldr	r3, [r7, #20]
 80135f2:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80135f4:	f107 020c 	add.w	r2, r7, #12
 80135f8:	693b      	ldr	r3, [r7, #16]
 80135fa:	9302      	str	r3, [sp, #8]
 80135fc:	2301      	movs	r3, #1
 80135fe:	9301      	str	r3, [sp, #4]
 8013600:	2300      	movs	r3, #0
 8013602:	9300      	str	r3, [sp, #0]
 8013604:	23ff      	movs	r3, #255	; 0xff
 8013606:	2100      	movs	r1, #0
 8013608:	69f8      	ldr	r0, [r7, #28]
 801360a:	f000 f9cd 	bl	80139a8 <ip4_output_if>
  }
  pbuf_free(q);
 801360e:	69f8      	ldr	r0, [r7, #28]
 8013610:	f7f8 f90c 	bl	800b82c <pbuf_free>
 8013614:	e000      	b.n	8013618 <icmp_send_response+0xd4>
    return;
 8013616:	bf00      	nop
}
 8013618:	3720      	adds	r7, #32
 801361a:	46bd      	mov	sp, r7
 801361c:	bd80      	pop	{r7, pc}
 801361e:	bf00      	nop
 8013620:	0801880c 	.word	0x0801880c
 8013624:	080188d8 	.word	0x080188d8
 8013628:	0801887c 	.word	0x0801887c

0801362c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801362c:	b480      	push	{r7}
 801362e:	b085      	sub	sp, #20
 8013630:	af00      	add	r7, sp, #0
 8013632:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8013634:	4b33      	ldr	r3, [pc, #204]	; (8013704 <ip4_route+0xd8>)
 8013636:	681b      	ldr	r3, [r3, #0]
 8013638:	60fb      	str	r3, [r7, #12]
 801363a:	e036      	b.n	80136aa <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801363c:	68fb      	ldr	r3, [r7, #12]
 801363e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013642:	f003 0301 	and.w	r3, r3, #1
 8013646:	b2db      	uxtb	r3, r3
 8013648:	2b00      	cmp	r3, #0
 801364a:	d02b      	beq.n	80136a4 <ip4_route+0x78>
 801364c:	68fb      	ldr	r3, [r7, #12]
 801364e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013652:	089b      	lsrs	r3, r3, #2
 8013654:	f003 0301 	and.w	r3, r3, #1
 8013658:	b2db      	uxtb	r3, r3
 801365a:	2b00      	cmp	r3, #0
 801365c:	d022      	beq.n	80136a4 <ip4_route+0x78>
 801365e:	68fb      	ldr	r3, [r7, #12]
 8013660:	3304      	adds	r3, #4
 8013662:	681b      	ldr	r3, [r3, #0]
 8013664:	2b00      	cmp	r3, #0
 8013666:	d01d      	beq.n	80136a4 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8013668:	687b      	ldr	r3, [r7, #4]
 801366a:	681a      	ldr	r2, [r3, #0]
 801366c:	68fb      	ldr	r3, [r7, #12]
 801366e:	3304      	adds	r3, #4
 8013670:	681b      	ldr	r3, [r3, #0]
 8013672:	405a      	eors	r2, r3
 8013674:	68fb      	ldr	r3, [r7, #12]
 8013676:	3308      	adds	r3, #8
 8013678:	681b      	ldr	r3, [r3, #0]
 801367a:	4013      	ands	r3, r2
 801367c:	2b00      	cmp	r3, #0
 801367e:	d101      	bne.n	8013684 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8013680:	68fb      	ldr	r3, [r7, #12]
 8013682:	e038      	b.n	80136f6 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8013684:	68fb      	ldr	r3, [r7, #12]
 8013686:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801368a:	f003 0302 	and.w	r3, r3, #2
 801368e:	2b00      	cmp	r3, #0
 8013690:	d108      	bne.n	80136a4 <ip4_route+0x78>
 8013692:	687b      	ldr	r3, [r7, #4]
 8013694:	681a      	ldr	r2, [r3, #0]
 8013696:	68fb      	ldr	r3, [r7, #12]
 8013698:	330c      	adds	r3, #12
 801369a:	681b      	ldr	r3, [r3, #0]
 801369c:	429a      	cmp	r2, r3
 801369e:	d101      	bne.n	80136a4 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80136a0:	68fb      	ldr	r3, [r7, #12]
 80136a2:	e028      	b.n	80136f6 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80136a4:	68fb      	ldr	r3, [r7, #12]
 80136a6:	681b      	ldr	r3, [r3, #0]
 80136a8:	60fb      	str	r3, [r7, #12]
 80136aa:	68fb      	ldr	r3, [r7, #12]
 80136ac:	2b00      	cmp	r3, #0
 80136ae:	d1c5      	bne.n	801363c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80136b0:	4b15      	ldr	r3, [pc, #84]	; (8013708 <ip4_route+0xdc>)
 80136b2:	681b      	ldr	r3, [r3, #0]
 80136b4:	2b00      	cmp	r3, #0
 80136b6:	d01a      	beq.n	80136ee <ip4_route+0xc2>
 80136b8:	4b13      	ldr	r3, [pc, #76]	; (8013708 <ip4_route+0xdc>)
 80136ba:	681b      	ldr	r3, [r3, #0]
 80136bc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80136c0:	f003 0301 	and.w	r3, r3, #1
 80136c4:	2b00      	cmp	r3, #0
 80136c6:	d012      	beq.n	80136ee <ip4_route+0xc2>
 80136c8:	4b0f      	ldr	r3, [pc, #60]	; (8013708 <ip4_route+0xdc>)
 80136ca:	681b      	ldr	r3, [r3, #0]
 80136cc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80136d0:	f003 0304 	and.w	r3, r3, #4
 80136d4:	2b00      	cmp	r3, #0
 80136d6:	d00a      	beq.n	80136ee <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80136d8:	4b0b      	ldr	r3, [pc, #44]	; (8013708 <ip4_route+0xdc>)
 80136da:	681b      	ldr	r3, [r3, #0]
 80136dc:	3304      	adds	r3, #4
 80136de:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80136e0:	2b00      	cmp	r3, #0
 80136e2:	d004      	beq.n	80136ee <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80136e4:	687b      	ldr	r3, [r7, #4]
 80136e6:	681b      	ldr	r3, [r3, #0]
 80136e8:	b2db      	uxtb	r3, r3
 80136ea:	2b7f      	cmp	r3, #127	; 0x7f
 80136ec:	d101      	bne.n	80136f2 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80136ee:	2300      	movs	r3, #0
 80136f0:	e001      	b.n	80136f6 <ip4_route+0xca>
  }

  return netif_default;
 80136f2:	4b05      	ldr	r3, [pc, #20]	; (8013708 <ip4_route+0xdc>)
 80136f4:	681b      	ldr	r3, [r3, #0]
}
 80136f6:	4618      	mov	r0, r3
 80136f8:	3714      	adds	r7, #20
 80136fa:	46bd      	mov	sp, r7
 80136fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013700:	4770      	bx	lr
 8013702:	bf00      	nop
 8013704:	24003c6c 	.word	0x24003c6c
 8013708:	24003c70 	.word	0x24003c70

0801370c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801370c:	b580      	push	{r7, lr}
 801370e:	b082      	sub	sp, #8
 8013710:	af00      	add	r7, sp, #0
 8013712:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8013714:	687b      	ldr	r3, [r7, #4]
 8013716:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801371a:	f003 0301 	and.w	r3, r3, #1
 801371e:	b2db      	uxtb	r3, r3
 8013720:	2b00      	cmp	r3, #0
 8013722:	d016      	beq.n	8013752 <ip4_input_accept+0x46>
 8013724:	687b      	ldr	r3, [r7, #4]
 8013726:	3304      	adds	r3, #4
 8013728:	681b      	ldr	r3, [r3, #0]
 801372a:	2b00      	cmp	r3, #0
 801372c:	d011      	beq.n	8013752 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801372e:	4b0b      	ldr	r3, [pc, #44]	; (801375c <ip4_input_accept+0x50>)
 8013730:	695a      	ldr	r2, [r3, #20]
 8013732:	687b      	ldr	r3, [r7, #4]
 8013734:	3304      	adds	r3, #4
 8013736:	681b      	ldr	r3, [r3, #0]
 8013738:	429a      	cmp	r2, r3
 801373a:	d008      	beq.n	801374e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801373c:	4b07      	ldr	r3, [pc, #28]	; (801375c <ip4_input_accept+0x50>)
 801373e:	695b      	ldr	r3, [r3, #20]
 8013740:	6879      	ldr	r1, [r7, #4]
 8013742:	4618      	mov	r0, r3
 8013744:	f000 fa08 	bl	8013b58 <ip4_addr_isbroadcast_u32>
 8013748:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801374a:	2b00      	cmp	r3, #0
 801374c:	d001      	beq.n	8013752 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801374e:	2301      	movs	r3, #1
 8013750:	e000      	b.n	8013754 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8013752:	2300      	movs	r3, #0
}
 8013754:	4618      	mov	r0, r3
 8013756:	3708      	adds	r7, #8
 8013758:	46bd      	mov	sp, r7
 801375a:	bd80      	pop	{r7, pc}
 801375c:	24000d8c 	.word	0x24000d8c

08013760 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8013760:	b580      	push	{r7, lr}
 8013762:	b086      	sub	sp, #24
 8013764:	af00      	add	r7, sp, #0
 8013766:	6078      	str	r0, [r7, #4]
 8013768:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801376a:	687b      	ldr	r3, [r7, #4]
 801376c:	685b      	ldr	r3, [r3, #4]
 801376e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8013770:	697b      	ldr	r3, [r7, #20]
 8013772:	781b      	ldrb	r3, [r3, #0]
 8013774:	091b      	lsrs	r3, r3, #4
 8013776:	b2db      	uxtb	r3, r3
 8013778:	2b04      	cmp	r3, #4
 801377a:	d004      	beq.n	8013786 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801377c:	6878      	ldr	r0, [r7, #4]
 801377e:	f7f8 f855 	bl	800b82c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8013782:	2300      	movs	r3, #0
 8013784:	e107      	b.n	8013996 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8013786:	697b      	ldr	r3, [r7, #20]
 8013788:	781b      	ldrb	r3, [r3, #0]
 801378a:	f003 030f 	and.w	r3, r3, #15
 801378e:	b2db      	uxtb	r3, r3
 8013790:	009b      	lsls	r3, r3, #2
 8013792:	b2db      	uxtb	r3, r3
 8013794:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8013796:	697b      	ldr	r3, [r7, #20]
 8013798:	885b      	ldrh	r3, [r3, #2]
 801379a:	b29b      	uxth	r3, r3
 801379c:	4618      	mov	r0, r3
 801379e:	f7f6 fbb5 	bl	8009f0c <lwip_htons>
 80137a2:	4603      	mov	r3, r0
 80137a4:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80137a6:	687b      	ldr	r3, [r7, #4]
 80137a8:	891b      	ldrh	r3, [r3, #8]
 80137aa:	89ba      	ldrh	r2, [r7, #12]
 80137ac:	429a      	cmp	r2, r3
 80137ae:	d204      	bcs.n	80137ba <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 80137b0:	89bb      	ldrh	r3, [r7, #12]
 80137b2:	4619      	mov	r1, r3
 80137b4:	6878      	ldr	r0, [r7, #4]
 80137b6:	f7f7 feb3 	bl	800b520 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80137ba:	687b      	ldr	r3, [r7, #4]
 80137bc:	895b      	ldrh	r3, [r3, #10]
 80137be:	89fa      	ldrh	r2, [r7, #14]
 80137c0:	429a      	cmp	r2, r3
 80137c2:	d807      	bhi.n	80137d4 <ip4_input+0x74>
 80137c4:	687b      	ldr	r3, [r7, #4]
 80137c6:	891b      	ldrh	r3, [r3, #8]
 80137c8:	89ba      	ldrh	r2, [r7, #12]
 80137ca:	429a      	cmp	r2, r3
 80137cc:	d802      	bhi.n	80137d4 <ip4_input+0x74>
 80137ce:	89fb      	ldrh	r3, [r7, #14]
 80137d0:	2b13      	cmp	r3, #19
 80137d2:	d804      	bhi.n	80137de <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80137d4:	6878      	ldr	r0, [r7, #4]
 80137d6:	f7f8 f829 	bl	800b82c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80137da:	2300      	movs	r3, #0
 80137dc:	e0db      	b.n	8013996 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80137de:	697b      	ldr	r3, [r7, #20]
 80137e0:	691b      	ldr	r3, [r3, #16]
 80137e2:	4a6f      	ldr	r2, [pc, #444]	; (80139a0 <ip4_input+0x240>)
 80137e4:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80137e6:	697b      	ldr	r3, [r7, #20]
 80137e8:	68db      	ldr	r3, [r3, #12]
 80137ea:	4a6d      	ldr	r2, [pc, #436]	; (80139a0 <ip4_input+0x240>)
 80137ec:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80137ee:	4b6c      	ldr	r3, [pc, #432]	; (80139a0 <ip4_input+0x240>)
 80137f0:	695b      	ldr	r3, [r3, #20]
 80137f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80137f6:	2be0      	cmp	r3, #224	; 0xe0
 80137f8:	d112      	bne.n	8013820 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80137fa:	683b      	ldr	r3, [r7, #0]
 80137fc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013800:	f003 0301 	and.w	r3, r3, #1
 8013804:	b2db      	uxtb	r3, r3
 8013806:	2b00      	cmp	r3, #0
 8013808:	d007      	beq.n	801381a <ip4_input+0xba>
 801380a:	683b      	ldr	r3, [r7, #0]
 801380c:	3304      	adds	r3, #4
 801380e:	681b      	ldr	r3, [r3, #0]
 8013810:	2b00      	cmp	r3, #0
 8013812:	d002      	beq.n	801381a <ip4_input+0xba>
      netif = inp;
 8013814:	683b      	ldr	r3, [r7, #0]
 8013816:	613b      	str	r3, [r7, #16]
 8013818:	e02a      	b.n	8013870 <ip4_input+0x110>
    } else {
      netif = NULL;
 801381a:	2300      	movs	r3, #0
 801381c:	613b      	str	r3, [r7, #16]
 801381e:	e027      	b.n	8013870 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8013820:	6838      	ldr	r0, [r7, #0]
 8013822:	f7ff ff73 	bl	801370c <ip4_input_accept>
 8013826:	4603      	mov	r3, r0
 8013828:	2b00      	cmp	r3, #0
 801382a:	d002      	beq.n	8013832 <ip4_input+0xd2>
      netif = inp;
 801382c:	683b      	ldr	r3, [r7, #0]
 801382e:	613b      	str	r3, [r7, #16]
 8013830:	e01e      	b.n	8013870 <ip4_input+0x110>
    } else {
      netif = NULL;
 8013832:	2300      	movs	r3, #0
 8013834:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8013836:	4b5a      	ldr	r3, [pc, #360]	; (80139a0 <ip4_input+0x240>)
 8013838:	695b      	ldr	r3, [r3, #20]
 801383a:	b2db      	uxtb	r3, r3
 801383c:	2b7f      	cmp	r3, #127	; 0x7f
 801383e:	d017      	beq.n	8013870 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8013840:	4b58      	ldr	r3, [pc, #352]	; (80139a4 <ip4_input+0x244>)
 8013842:	681b      	ldr	r3, [r3, #0]
 8013844:	613b      	str	r3, [r7, #16]
 8013846:	e00e      	b.n	8013866 <ip4_input+0x106>
          if (netif == inp) {
 8013848:	693a      	ldr	r2, [r7, #16]
 801384a:	683b      	ldr	r3, [r7, #0]
 801384c:	429a      	cmp	r2, r3
 801384e:	d006      	beq.n	801385e <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8013850:	6938      	ldr	r0, [r7, #16]
 8013852:	f7ff ff5b 	bl	801370c <ip4_input_accept>
 8013856:	4603      	mov	r3, r0
 8013858:	2b00      	cmp	r3, #0
 801385a:	d108      	bne.n	801386e <ip4_input+0x10e>
 801385c:	e000      	b.n	8013860 <ip4_input+0x100>
            continue;
 801385e:	bf00      	nop
        NETIF_FOREACH(netif) {
 8013860:	693b      	ldr	r3, [r7, #16]
 8013862:	681b      	ldr	r3, [r3, #0]
 8013864:	613b      	str	r3, [r7, #16]
 8013866:	693b      	ldr	r3, [r7, #16]
 8013868:	2b00      	cmp	r3, #0
 801386a:	d1ed      	bne.n	8013848 <ip4_input+0xe8>
 801386c:	e000      	b.n	8013870 <ip4_input+0x110>
            break;
 801386e:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8013870:	4b4b      	ldr	r3, [pc, #300]	; (80139a0 <ip4_input+0x240>)
 8013872:	691b      	ldr	r3, [r3, #16]
 8013874:	6839      	ldr	r1, [r7, #0]
 8013876:	4618      	mov	r0, r3
 8013878:	f000 f96e 	bl	8013b58 <ip4_addr_isbroadcast_u32>
 801387c:	4603      	mov	r3, r0
 801387e:	2b00      	cmp	r3, #0
 8013880:	d105      	bne.n	801388e <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8013882:	4b47      	ldr	r3, [pc, #284]	; (80139a0 <ip4_input+0x240>)
 8013884:	691b      	ldr	r3, [r3, #16]
 8013886:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801388a:	2be0      	cmp	r3, #224	; 0xe0
 801388c:	d104      	bne.n	8013898 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801388e:	6878      	ldr	r0, [r7, #4]
 8013890:	f7f7 ffcc 	bl	800b82c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8013894:	2300      	movs	r3, #0
 8013896:	e07e      	b.n	8013996 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8013898:	693b      	ldr	r3, [r7, #16]
 801389a:	2b00      	cmp	r3, #0
 801389c:	d104      	bne.n	80138a8 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801389e:	6878      	ldr	r0, [r7, #4]
 80138a0:	f7f7 ffc4 	bl	800b82c <pbuf_free>
    return ERR_OK;
 80138a4:	2300      	movs	r3, #0
 80138a6:	e076      	b.n	8013996 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80138a8:	697b      	ldr	r3, [r7, #20]
 80138aa:	88db      	ldrh	r3, [r3, #6]
 80138ac:	b29b      	uxth	r3, r3
 80138ae:	461a      	mov	r2, r3
 80138b0:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80138b4:	4013      	ands	r3, r2
 80138b6:	2b00      	cmp	r3, #0
 80138b8:	d00b      	beq.n	80138d2 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80138ba:	6878      	ldr	r0, [r7, #4]
 80138bc:	f000 fc92 	bl	80141e4 <ip4_reass>
 80138c0:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80138c2:	687b      	ldr	r3, [r7, #4]
 80138c4:	2b00      	cmp	r3, #0
 80138c6:	d101      	bne.n	80138cc <ip4_input+0x16c>
      return ERR_OK;
 80138c8:	2300      	movs	r3, #0
 80138ca:	e064      	b.n	8013996 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80138cc:	687b      	ldr	r3, [r7, #4]
 80138ce:	685b      	ldr	r3, [r3, #4]
 80138d0:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80138d2:	4a33      	ldr	r2, [pc, #204]	; (80139a0 <ip4_input+0x240>)
 80138d4:	693b      	ldr	r3, [r7, #16]
 80138d6:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80138d8:	4a31      	ldr	r2, [pc, #196]	; (80139a0 <ip4_input+0x240>)
 80138da:	683b      	ldr	r3, [r7, #0]
 80138dc:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80138de:	4a30      	ldr	r2, [pc, #192]	; (80139a0 <ip4_input+0x240>)
 80138e0:	697b      	ldr	r3, [r7, #20]
 80138e2:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80138e4:	697b      	ldr	r3, [r7, #20]
 80138e6:	781b      	ldrb	r3, [r3, #0]
 80138e8:	f003 030f 	and.w	r3, r3, #15
 80138ec:	b2db      	uxtb	r3, r3
 80138ee:	009b      	lsls	r3, r3, #2
 80138f0:	b2db      	uxtb	r3, r3
 80138f2:	b29a      	uxth	r2, r3
 80138f4:	4b2a      	ldr	r3, [pc, #168]	; (80139a0 <ip4_input+0x240>)
 80138f6:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80138f8:	89fb      	ldrh	r3, [r7, #14]
 80138fa:	4619      	mov	r1, r3
 80138fc:	6878      	ldr	r0, [r7, #4]
 80138fe:	f7f7 ff0f 	bl	800b720 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8013902:	697b      	ldr	r3, [r7, #20]
 8013904:	7a5b      	ldrb	r3, [r3, #9]
 8013906:	2b11      	cmp	r3, #17
 8013908:	d006      	beq.n	8013918 <ip4_input+0x1b8>
 801390a:	2b11      	cmp	r3, #17
 801390c:	dc13      	bgt.n	8013936 <ip4_input+0x1d6>
 801390e:	2b01      	cmp	r3, #1
 8013910:	d00c      	beq.n	801392c <ip4_input+0x1cc>
 8013912:	2b06      	cmp	r3, #6
 8013914:	d005      	beq.n	8013922 <ip4_input+0x1c2>
 8013916:	e00e      	b.n	8013936 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8013918:	6839      	ldr	r1, [r7, #0]
 801391a:	6878      	ldr	r0, [r7, #4]
 801391c:	f7fe fc42 	bl	80121a4 <udp_input>
        break;
 8013920:	e026      	b.n	8013970 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8013922:	6839      	ldr	r1, [r7, #0]
 8013924:	6878      	ldr	r0, [r7, #4]
 8013926:	f7fa f867 	bl	800d9f8 <tcp_input>
        break;
 801392a:	e021      	b.n	8013970 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801392c:	6839      	ldr	r1, [r7, #0]
 801392e:	6878      	ldr	r0, [r7, #4]
 8013930:	f7ff fcc8 	bl	80132c4 <icmp_input>
        break;
 8013934:	e01c      	b.n	8013970 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8013936:	4b1a      	ldr	r3, [pc, #104]	; (80139a0 <ip4_input+0x240>)
 8013938:	695b      	ldr	r3, [r3, #20]
 801393a:	6939      	ldr	r1, [r7, #16]
 801393c:	4618      	mov	r0, r3
 801393e:	f000 f90b 	bl	8013b58 <ip4_addr_isbroadcast_u32>
 8013942:	4603      	mov	r3, r0
 8013944:	2b00      	cmp	r3, #0
 8013946:	d10f      	bne.n	8013968 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8013948:	4b15      	ldr	r3, [pc, #84]	; (80139a0 <ip4_input+0x240>)
 801394a:	695b      	ldr	r3, [r3, #20]
 801394c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8013950:	2be0      	cmp	r3, #224	; 0xe0
 8013952:	d009      	beq.n	8013968 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8013954:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8013958:	4619      	mov	r1, r3
 801395a:	6878      	ldr	r0, [r7, #4]
 801395c:	f7f7 ff53 	bl	800b806 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8013960:	2102      	movs	r1, #2
 8013962:	6878      	ldr	r0, [r7, #4]
 8013964:	f7ff fdce 	bl	8013504 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8013968:	6878      	ldr	r0, [r7, #4]
 801396a:	f7f7 ff5f 	bl	800b82c <pbuf_free>
        break;
 801396e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8013970:	4b0b      	ldr	r3, [pc, #44]	; (80139a0 <ip4_input+0x240>)
 8013972:	2200      	movs	r2, #0
 8013974:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8013976:	4b0a      	ldr	r3, [pc, #40]	; (80139a0 <ip4_input+0x240>)
 8013978:	2200      	movs	r2, #0
 801397a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801397c:	4b08      	ldr	r3, [pc, #32]	; (80139a0 <ip4_input+0x240>)
 801397e:	2200      	movs	r2, #0
 8013980:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8013982:	4b07      	ldr	r3, [pc, #28]	; (80139a0 <ip4_input+0x240>)
 8013984:	2200      	movs	r2, #0
 8013986:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8013988:	4b05      	ldr	r3, [pc, #20]	; (80139a0 <ip4_input+0x240>)
 801398a:	2200      	movs	r2, #0
 801398c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801398e:	4b04      	ldr	r3, [pc, #16]	; (80139a0 <ip4_input+0x240>)
 8013990:	2200      	movs	r2, #0
 8013992:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8013994:	2300      	movs	r3, #0
}
 8013996:	4618      	mov	r0, r3
 8013998:	3718      	adds	r7, #24
 801399a:	46bd      	mov	sp, r7
 801399c:	bd80      	pop	{r7, pc}
 801399e:	bf00      	nop
 80139a0:	24000d8c 	.word	0x24000d8c
 80139a4:	24003c6c 	.word	0x24003c6c

080139a8 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80139a8:	b580      	push	{r7, lr}
 80139aa:	b08a      	sub	sp, #40	; 0x28
 80139ac:	af04      	add	r7, sp, #16
 80139ae:	60f8      	str	r0, [r7, #12]
 80139b0:	60b9      	str	r1, [r7, #8]
 80139b2:	607a      	str	r2, [r7, #4]
 80139b4:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80139b6:	68bb      	ldr	r3, [r7, #8]
 80139b8:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80139ba:	687b      	ldr	r3, [r7, #4]
 80139bc:	2b00      	cmp	r3, #0
 80139be:	d009      	beq.n	80139d4 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80139c0:	68bb      	ldr	r3, [r7, #8]
 80139c2:	2b00      	cmp	r3, #0
 80139c4:	d003      	beq.n	80139ce <ip4_output_if+0x26>
 80139c6:	68bb      	ldr	r3, [r7, #8]
 80139c8:	681b      	ldr	r3, [r3, #0]
 80139ca:	2b00      	cmp	r3, #0
 80139cc:	d102      	bne.n	80139d4 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80139ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139d0:	3304      	adds	r3, #4
 80139d2:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80139d4:	78fa      	ldrb	r2, [r7, #3]
 80139d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139d8:	9302      	str	r3, [sp, #8]
 80139da:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80139de:	9301      	str	r3, [sp, #4]
 80139e0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80139e4:	9300      	str	r3, [sp, #0]
 80139e6:	4613      	mov	r3, r2
 80139e8:	687a      	ldr	r2, [r7, #4]
 80139ea:	6979      	ldr	r1, [r7, #20]
 80139ec:	68f8      	ldr	r0, [r7, #12]
 80139ee:	f000 f805 	bl	80139fc <ip4_output_if_src>
 80139f2:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80139f4:	4618      	mov	r0, r3
 80139f6:	3718      	adds	r7, #24
 80139f8:	46bd      	mov	sp, r7
 80139fa:	bd80      	pop	{r7, pc}

080139fc <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80139fc:	b580      	push	{r7, lr}
 80139fe:	b088      	sub	sp, #32
 8013a00:	af00      	add	r7, sp, #0
 8013a02:	60f8      	str	r0, [r7, #12]
 8013a04:	60b9      	str	r1, [r7, #8]
 8013a06:	607a      	str	r2, [r7, #4]
 8013a08:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8013a0a:	68fb      	ldr	r3, [r7, #12]
 8013a0c:	7b9b      	ldrb	r3, [r3, #14]
 8013a0e:	2b01      	cmp	r3, #1
 8013a10:	d006      	beq.n	8013a20 <ip4_output_if_src+0x24>
 8013a12:	4b4b      	ldr	r3, [pc, #300]	; (8013b40 <ip4_output_if_src+0x144>)
 8013a14:	f44f 7255 	mov.w	r2, #852	; 0x354
 8013a18:	494a      	ldr	r1, [pc, #296]	; (8013b44 <ip4_output_if_src+0x148>)
 8013a1a:	484b      	ldr	r0, [pc, #300]	; (8013b48 <ip4_output_if_src+0x14c>)
 8013a1c:	f001 f84e 	bl	8014abc <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8013a20:	687b      	ldr	r3, [r7, #4]
 8013a22:	2b00      	cmp	r3, #0
 8013a24:	d060      	beq.n	8013ae8 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8013a26:	2314      	movs	r3, #20
 8013a28:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8013a2a:	2114      	movs	r1, #20
 8013a2c:	68f8      	ldr	r0, [r7, #12]
 8013a2e:	f7f7 fe67 	bl	800b700 <pbuf_add_header>
 8013a32:	4603      	mov	r3, r0
 8013a34:	2b00      	cmp	r3, #0
 8013a36:	d002      	beq.n	8013a3e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8013a38:	f06f 0301 	mvn.w	r3, #1
 8013a3c:	e07c      	b.n	8013b38 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8013a3e:	68fb      	ldr	r3, [r7, #12]
 8013a40:	685b      	ldr	r3, [r3, #4]
 8013a42:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8013a44:	68fb      	ldr	r3, [r7, #12]
 8013a46:	895b      	ldrh	r3, [r3, #10]
 8013a48:	2b13      	cmp	r3, #19
 8013a4a:	d806      	bhi.n	8013a5a <ip4_output_if_src+0x5e>
 8013a4c:	4b3c      	ldr	r3, [pc, #240]	; (8013b40 <ip4_output_if_src+0x144>)
 8013a4e:	f44f 7262 	mov.w	r2, #904	; 0x388
 8013a52:	493e      	ldr	r1, [pc, #248]	; (8013b4c <ip4_output_if_src+0x150>)
 8013a54:	483c      	ldr	r0, [pc, #240]	; (8013b48 <ip4_output_if_src+0x14c>)
 8013a56:	f001 f831 	bl	8014abc <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8013a5a:	69fb      	ldr	r3, [r7, #28]
 8013a5c:	78fa      	ldrb	r2, [r7, #3]
 8013a5e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8013a60:	69fb      	ldr	r3, [r7, #28]
 8013a62:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8013a66:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8013a68:	687b      	ldr	r3, [r7, #4]
 8013a6a:	681a      	ldr	r2, [r3, #0]
 8013a6c:	69fb      	ldr	r3, [r7, #28]
 8013a6e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8013a70:	8b7b      	ldrh	r3, [r7, #26]
 8013a72:	089b      	lsrs	r3, r3, #2
 8013a74:	b29b      	uxth	r3, r3
 8013a76:	b2db      	uxtb	r3, r3
 8013a78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013a7c:	b2da      	uxtb	r2, r3
 8013a7e:	69fb      	ldr	r3, [r7, #28]
 8013a80:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8013a82:	69fb      	ldr	r3, [r7, #28]
 8013a84:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8013a88:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8013a8a:	68fb      	ldr	r3, [r7, #12]
 8013a8c:	891b      	ldrh	r3, [r3, #8]
 8013a8e:	4618      	mov	r0, r3
 8013a90:	f7f6 fa3c 	bl	8009f0c <lwip_htons>
 8013a94:	4603      	mov	r3, r0
 8013a96:	461a      	mov	r2, r3
 8013a98:	69fb      	ldr	r3, [r7, #28]
 8013a9a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8013a9c:	69fb      	ldr	r3, [r7, #28]
 8013a9e:	2200      	movs	r2, #0
 8013aa0:	719a      	strb	r2, [r3, #6]
 8013aa2:	2200      	movs	r2, #0
 8013aa4:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8013aa6:	4b2a      	ldr	r3, [pc, #168]	; (8013b50 <ip4_output_if_src+0x154>)
 8013aa8:	881b      	ldrh	r3, [r3, #0]
 8013aaa:	4618      	mov	r0, r3
 8013aac:	f7f6 fa2e 	bl	8009f0c <lwip_htons>
 8013ab0:	4603      	mov	r3, r0
 8013ab2:	461a      	mov	r2, r3
 8013ab4:	69fb      	ldr	r3, [r7, #28]
 8013ab6:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8013ab8:	4b25      	ldr	r3, [pc, #148]	; (8013b50 <ip4_output_if_src+0x154>)
 8013aba:	881b      	ldrh	r3, [r3, #0]
 8013abc:	3301      	adds	r3, #1
 8013abe:	b29a      	uxth	r2, r3
 8013ac0:	4b23      	ldr	r3, [pc, #140]	; (8013b50 <ip4_output_if_src+0x154>)
 8013ac2:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8013ac4:	68bb      	ldr	r3, [r7, #8]
 8013ac6:	2b00      	cmp	r3, #0
 8013ac8:	d104      	bne.n	8013ad4 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8013aca:	4b22      	ldr	r3, [pc, #136]	; (8013b54 <ip4_output_if_src+0x158>)
 8013acc:	681a      	ldr	r2, [r3, #0]
 8013ace:	69fb      	ldr	r3, [r7, #28]
 8013ad0:	60da      	str	r2, [r3, #12]
 8013ad2:	e003      	b.n	8013adc <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8013ad4:	68bb      	ldr	r3, [r7, #8]
 8013ad6:	681a      	ldr	r2, [r3, #0]
 8013ad8:	69fb      	ldr	r3, [r7, #28]
 8013ada:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8013adc:	69fb      	ldr	r3, [r7, #28]
 8013ade:	2200      	movs	r2, #0
 8013ae0:	729a      	strb	r2, [r3, #10]
 8013ae2:	2200      	movs	r2, #0
 8013ae4:	72da      	strb	r2, [r3, #11]
 8013ae6:	e00f      	b.n	8013b08 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8013ae8:	68fb      	ldr	r3, [r7, #12]
 8013aea:	895b      	ldrh	r3, [r3, #10]
 8013aec:	2b13      	cmp	r3, #19
 8013aee:	d802      	bhi.n	8013af6 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8013af0:	f06f 0301 	mvn.w	r3, #1
 8013af4:	e020      	b.n	8013b38 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8013af6:	68fb      	ldr	r3, [r7, #12]
 8013af8:	685b      	ldr	r3, [r3, #4]
 8013afa:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8013afc:	69fb      	ldr	r3, [r7, #28]
 8013afe:	691b      	ldr	r3, [r3, #16]
 8013b00:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8013b02:	f107 0314 	add.w	r3, r7, #20
 8013b06:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8013b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b0a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8013b0c:	2b00      	cmp	r3, #0
 8013b0e:	d00c      	beq.n	8013b2a <ip4_output_if_src+0x12e>
 8013b10:	68fb      	ldr	r3, [r7, #12]
 8013b12:	891a      	ldrh	r2, [r3, #8]
 8013b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b16:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8013b18:	429a      	cmp	r2, r3
 8013b1a:	d906      	bls.n	8013b2a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8013b1c:	687a      	ldr	r2, [r7, #4]
 8013b1e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013b20:	68f8      	ldr	r0, [r7, #12]
 8013b22:	f000 fd4d 	bl	80145c0 <ip4_frag>
 8013b26:	4603      	mov	r3, r0
 8013b28:	e006      	b.n	8013b38 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8013b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b2c:	695b      	ldr	r3, [r3, #20]
 8013b2e:	687a      	ldr	r2, [r7, #4]
 8013b30:	68f9      	ldr	r1, [r7, #12]
 8013b32:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013b34:	4798      	blx	r3
 8013b36:	4603      	mov	r3, r0
}
 8013b38:	4618      	mov	r0, r3
 8013b3a:	3720      	adds	r7, #32
 8013b3c:	46bd      	mov	sp, r7
 8013b3e:	bd80      	pop	{r7, pc}
 8013b40:	08018904 	.word	0x08018904
 8013b44:	08018938 	.word	0x08018938
 8013b48:	08018944 	.word	0x08018944
 8013b4c:	0801896c 	.word	0x0801896c
 8013b50:	2400068a 	.word	0x2400068a
 8013b54:	0801a1c4 	.word	0x0801a1c4

08013b58 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8013b58:	b480      	push	{r7}
 8013b5a:	b085      	sub	sp, #20
 8013b5c:	af00      	add	r7, sp, #0
 8013b5e:	6078      	str	r0, [r7, #4]
 8013b60:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8013b62:	687b      	ldr	r3, [r7, #4]
 8013b64:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8013b66:	687b      	ldr	r3, [r7, #4]
 8013b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013b6c:	d002      	beq.n	8013b74 <ip4_addr_isbroadcast_u32+0x1c>
 8013b6e:	687b      	ldr	r3, [r7, #4]
 8013b70:	2b00      	cmp	r3, #0
 8013b72:	d101      	bne.n	8013b78 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8013b74:	2301      	movs	r3, #1
 8013b76:	e02a      	b.n	8013bce <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8013b78:	683b      	ldr	r3, [r7, #0]
 8013b7a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013b7e:	f003 0302 	and.w	r3, r3, #2
 8013b82:	2b00      	cmp	r3, #0
 8013b84:	d101      	bne.n	8013b8a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8013b86:	2300      	movs	r3, #0
 8013b88:	e021      	b.n	8013bce <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8013b8a:	683b      	ldr	r3, [r7, #0]
 8013b8c:	3304      	adds	r3, #4
 8013b8e:	681b      	ldr	r3, [r3, #0]
 8013b90:	687a      	ldr	r2, [r7, #4]
 8013b92:	429a      	cmp	r2, r3
 8013b94:	d101      	bne.n	8013b9a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8013b96:	2300      	movs	r3, #0
 8013b98:	e019      	b.n	8013bce <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8013b9a:	68fa      	ldr	r2, [r7, #12]
 8013b9c:	683b      	ldr	r3, [r7, #0]
 8013b9e:	3304      	adds	r3, #4
 8013ba0:	681b      	ldr	r3, [r3, #0]
 8013ba2:	405a      	eors	r2, r3
 8013ba4:	683b      	ldr	r3, [r7, #0]
 8013ba6:	3308      	adds	r3, #8
 8013ba8:	681b      	ldr	r3, [r3, #0]
 8013baa:	4013      	ands	r3, r2
 8013bac:	2b00      	cmp	r3, #0
 8013bae:	d10d      	bne.n	8013bcc <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8013bb0:	683b      	ldr	r3, [r7, #0]
 8013bb2:	3308      	adds	r3, #8
 8013bb4:	681b      	ldr	r3, [r3, #0]
 8013bb6:	43da      	mvns	r2, r3
 8013bb8:	687b      	ldr	r3, [r7, #4]
 8013bba:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8013bbc:	683b      	ldr	r3, [r7, #0]
 8013bbe:	3308      	adds	r3, #8
 8013bc0:	681b      	ldr	r3, [r3, #0]
 8013bc2:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8013bc4:	429a      	cmp	r2, r3
 8013bc6:	d101      	bne.n	8013bcc <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8013bc8:	2301      	movs	r3, #1
 8013bca:	e000      	b.n	8013bce <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8013bcc:	2300      	movs	r3, #0
  }
}
 8013bce:	4618      	mov	r0, r3
 8013bd0:	3714      	adds	r7, #20
 8013bd2:	46bd      	mov	sp, r7
 8013bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bd8:	4770      	bx	lr
	...

08013bdc <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8013bdc:	b580      	push	{r7, lr}
 8013bde:	b084      	sub	sp, #16
 8013be0:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8013be2:	2300      	movs	r3, #0
 8013be4:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8013be6:	4b12      	ldr	r3, [pc, #72]	; (8013c30 <ip_reass_tmr+0x54>)
 8013be8:	681b      	ldr	r3, [r3, #0]
 8013bea:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8013bec:	e018      	b.n	8013c20 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8013bee:	68fb      	ldr	r3, [r7, #12]
 8013bf0:	7fdb      	ldrb	r3, [r3, #31]
 8013bf2:	2b00      	cmp	r3, #0
 8013bf4:	d00b      	beq.n	8013c0e <ip_reass_tmr+0x32>
      r->timer--;
 8013bf6:	68fb      	ldr	r3, [r7, #12]
 8013bf8:	7fdb      	ldrb	r3, [r3, #31]
 8013bfa:	3b01      	subs	r3, #1
 8013bfc:	b2da      	uxtb	r2, r3
 8013bfe:	68fb      	ldr	r3, [r7, #12]
 8013c00:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8013c02:	68fb      	ldr	r3, [r7, #12]
 8013c04:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8013c06:	68fb      	ldr	r3, [r7, #12]
 8013c08:	681b      	ldr	r3, [r3, #0]
 8013c0a:	60fb      	str	r3, [r7, #12]
 8013c0c:	e008      	b.n	8013c20 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8013c0e:	68fb      	ldr	r3, [r7, #12]
 8013c10:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8013c12:	68fb      	ldr	r3, [r7, #12]
 8013c14:	681b      	ldr	r3, [r3, #0]
 8013c16:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8013c18:	68b9      	ldr	r1, [r7, #8]
 8013c1a:	6878      	ldr	r0, [r7, #4]
 8013c1c:	f000 f80a 	bl	8013c34 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8013c20:	68fb      	ldr	r3, [r7, #12]
 8013c22:	2b00      	cmp	r3, #0
 8013c24:	d1e3      	bne.n	8013bee <ip_reass_tmr+0x12>
    }
  }
}
 8013c26:	bf00      	nop
 8013c28:	bf00      	nop
 8013c2a:	3710      	adds	r7, #16
 8013c2c:	46bd      	mov	sp, r7
 8013c2e:	bd80      	pop	{r7, pc}
 8013c30:	2400068c 	.word	0x2400068c

08013c34 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8013c34:	b580      	push	{r7, lr}
 8013c36:	b088      	sub	sp, #32
 8013c38:	af00      	add	r7, sp, #0
 8013c3a:	6078      	str	r0, [r7, #4]
 8013c3c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8013c3e:	2300      	movs	r3, #0
 8013c40:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8013c42:	683a      	ldr	r2, [r7, #0]
 8013c44:	687b      	ldr	r3, [r7, #4]
 8013c46:	429a      	cmp	r2, r3
 8013c48:	d105      	bne.n	8013c56 <ip_reass_free_complete_datagram+0x22>
 8013c4a:	4b45      	ldr	r3, [pc, #276]	; (8013d60 <ip_reass_free_complete_datagram+0x12c>)
 8013c4c:	22ab      	movs	r2, #171	; 0xab
 8013c4e:	4945      	ldr	r1, [pc, #276]	; (8013d64 <ip_reass_free_complete_datagram+0x130>)
 8013c50:	4845      	ldr	r0, [pc, #276]	; (8013d68 <ip_reass_free_complete_datagram+0x134>)
 8013c52:	f000 ff33 	bl	8014abc <iprintf>
  if (prev != NULL) {
 8013c56:	683b      	ldr	r3, [r7, #0]
 8013c58:	2b00      	cmp	r3, #0
 8013c5a:	d00a      	beq.n	8013c72 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8013c5c:	683b      	ldr	r3, [r7, #0]
 8013c5e:	681b      	ldr	r3, [r3, #0]
 8013c60:	687a      	ldr	r2, [r7, #4]
 8013c62:	429a      	cmp	r2, r3
 8013c64:	d005      	beq.n	8013c72 <ip_reass_free_complete_datagram+0x3e>
 8013c66:	4b3e      	ldr	r3, [pc, #248]	; (8013d60 <ip_reass_free_complete_datagram+0x12c>)
 8013c68:	22ad      	movs	r2, #173	; 0xad
 8013c6a:	4940      	ldr	r1, [pc, #256]	; (8013d6c <ip_reass_free_complete_datagram+0x138>)
 8013c6c:	483e      	ldr	r0, [pc, #248]	; (8013d68 <ip_reass_free_complete_datagram+0x134>)
 8013c6e:	f000 ff25 	bl	8014abc <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8013c72:	687b      	ldr	r3, [r7, #4]
 8013c74:	685b      	ldr	r3, [r3, #4]
 8013c76:	685b      	ldr	r3, [r3, #4]
 8013c78:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8013c7a:	697b      	ldr	r3, [r7, #20]
 8013c7c:	889b      	ldrh	r3, [r3, #4]
 8013c7e:	b29b      	uxth	r3, r3
 8013c80:	2b00      	cmp	r3, #0
 8013c82:	d12a      	bne.n	8013cda <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8013c84:	687b      	ldr	r3, [r7, #4]
 8013c86:	685b      	ldr	r3, [r3, #4]
 8013c88:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8013c8a:	697b      	ldr	r3, [r7, #20]
 8013c8c:	681a      	ldr	r2, [r3, #0]
 8013c8e:	687b      	ldr	r3, [r7, #4]
 8013c90:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8013c92:	69bb      	ldr	r3, [r7, #24]
 8013c94:	6858      	ldr	r0, [r3, #4]
 8013c96:	687b      	ldr	r3, [r7, #4]
 8013c98:	3308      	adds	r3, #8
 8013c9a:	2214      	movs	r2, #20
 8013c9c:	4619      	mov	r1, r3
 8013c9e:	f000 fedd 	bl	8014a5c <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8013ca2:	2101      	movs	r1, #1
 8013ca4:	69b8      	ldr	r0, [r7, #24]
 8013ca6:	f7ff fc3d 	bl	8013524 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8013caa:	69b8      	ldr	r0, [r7, #24]
 8013cac:	f7f7 fe46 	bl	800b93c <pbuf_clen>
 8013cb0:	4603      	mov	r3, r0
 8013cb2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8013cb4:	8bfa      	ldrh	r2, [r7, #30]
 8013cb6:	8a7b      	ldrh	r3, [r7, #18]
 8013cb8:	4413      	add	r3, r2
 8013cba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013cbe:	db05      	blt.n	8013ccc <ip_reass_free_complete_datagram+0x98>
 8013cc0:	4b27      	ldr	r3, [pc, #156]	; (8013d60 <ip_reass_free_complete_datagram+0x12c>)
 8013cc2:	22bc      	movs	r2, #188	; 0xbc
 8013cc4:	492a      	ldr	r1, [pc, #168]	; (8013d70 <ip_reass_free_complete_datagram+0x13c>)
 8013cc6:	4828      	ldr	r0, [pc, #160]	; (8013d68 <ip_reass_free_complete_datagram+0x134>)
 8013cc8:	f000 fef8 	bl	8014abc <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8013ccc:	8bfa      	ldrh	r2, [r7, #30]
 8013cce:	8a7b      	ldrh	r3, [r7, #18]
 8013cd0:	4413      	add	r3, r2
 8013cd2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8013cd4:	69b8      	ldr	r0, [r7, #24]
 8013cd6:	f7f7 fda9 	bl	800b82c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8013cda:	687b      	ldr	r3, [r7, #4]
 8013cdc:	685b      	ldr	r3, [r3, #4]
 8013cde:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8013ce0:	e01f      	b.n	8013d22 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8013ce2:	69bb      	ldr	r3, [r7, #24]
 8013ce4:	685b      	ldr	r3, [r3, #4]
 8013ce6:	617b      	str	r3, [r7, #20]
    pcur = p;
 8013ce8:	69bb      	ldr	r3, [r7, #24]
 8013cea:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8013cec:	697b      	ldr	r3, [r7, #20]
 8013cee:	681b      	ldr	r3, [r3, #0]
 8013cf0:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8013cf2:	68f8      	ldr	r0, [r7, #12]
 8013cf4:	f7f7 fe22 	bl	800b93c <pbuf_clen>
 8013cf8:	4603      	mov	r3, r0
 8013cfa:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8013cfc:	8bfa      	ldrh	r2, [r7, #30]
 8013cfe:	8a7b      	ldrh	r3, [r7, #18]
 8013d00:	4413      	add	r3, r2
 8013d02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013d06:	db05      	blt.n	8013d14 <ip_reass_free_complete_datagram+0xe0>
 8013d08:	4b15      	ldr	r3, [pc, #84]	; (8013d60 <ip_reass_free_complete_datagram+0x12c>)
 8013d0a:	22cc      	movs	r2, #204	; 0xcc
 8013d0c:	4918      	ldr	r1, [pc, #96]	; (8013d70 <ip_reass_free_complete_datagram+0x13c>)
 8013d0e:	4816      	ldr	r0, [pc, #88]	; (8013d68 <ip_reass_free_complete_datagram+0x134>)
 8013d10:	f000 fed4 	bl	8014abc <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8013d14:	8bfa      	ldrh	r2, [r7, #30]
 8013d16:	8a7b      	ldrh	r3, [r7, #18]
 8013d18:	4413      	add	r3, r2
 8013d1a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8013d1c:	68f8      	ldr	r0, [r7, #12]
 8013d1e:	f7f7 fd85 	bl	800b82c <pbuf_free>
  while (p != NULL) {
 8013d22:	69bb      	ldr	r3, [r7, #24]
 8013d24:	2b00      	cmp	r3, #0
 8013d26:	d1dc      	bne.n	8013ce2 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8013d28:	6839      	ldr	r1, [r7, #0]
 8013d2a:	6878      	ldr	r0, [r7, #4]
 8013d2c:	f000 f8c2 	bl	8013eb4 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8013d30:	4b10      	ldr	r3, [pc, #64]	; (8013d74 <ip_reass_free_complete_datagram+0x140>)
 8013d32:	881b      	ldrh	r3, [r3, #0]
 8013d34:	8bfa      	ldrh	r2, [r7, #30]
 8013d36:	429a      	cmp	r2, r3
 8013d38:	d905      	bls.n	8013d46 <ip_reass_free_complete_datagram+0x112>
 8013d3a:	4b09      	ldr	r3, [pc, #36]	; (8013d60 <ip_reass_free_complete_datagram+0x12c>)
 8013d3c:	22d2      	movs	r2, #210	; 0xd2
 8013d3e:	490e      	ldr	r1, [pc, #56]	; (8013d78 <ip_reass_free_complete_datagram+0x144>)
 8013d40:	4809      	ldr	r0, [pc, #36]	; (8013d68 <ip_reass_free_complete_datagram+0x134>)
 8013d42:	f000 febb 	bl	8014abc <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8013d46:	4b0b      	ldr	r3, [pc, #44]	; (8013d74 <ip_reass_free_complete_datagram+0x140>)
 8013d48:	881a      	ldrh	r2, [r3, #0]
 8013d4a:	8bfb      	ldrh	r3, [r7, #30]
 8013d4c:	1ad3      	subs	r3, r2, r3
 8013d4e:	b29a      	uxth	r2, r3
 8013d50:	4b08      	ldr	r3, [pc, #32]	; (8013d74 <ip_reass_free_complete_datagram+0x140>)
 8013d52:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8013d54:	8bfb      	ldrh	r3, [r7, #30]
}
 8013d56:	4618      	mov	r0, r3
 8013d58:	3720      	adds	r7, #32
 8013d5a:	46bd      	mov	sp, r7
 8013d5c:	bd80      	pop	{r7, pc}
 8013d5e:	bf00      	nop
 8013d60:	0801899c 	.word	0x0801899c
 8013d64:	080189d8 	.word	0x080189d8
 8013d68:	080189e4 	.word	0x080189e4
 8013d6c:	08018a0c 	.word	0x08018a0c
 8013d70:	08018a20 	.word	0x08018a20
 8013d74:	24000690 	.word	0x24000690
 8013d78:	08018a40 	.word	0x08018a40

08013d7c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8013d7c:	b580      	push	{r7, lr}
 8013d7e:	b08a      	sub	sp, #40	; 0x28
 8013d80:	af00      	add	r7, sp, #0
 8013d82:	6078      	str	r0, [r7, #4]
 8013d84:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8013d86:	2300      	movs	r3, #0
 8013d88:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8013d8a:	2300      	movs	r3, #0
 8013d8c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8013d8e:	2300      	movs	r3, #0
 8013d90:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8013d92:	2300      	movs	r3, #0
 8013d94:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8013d96:	2300      	movs	r3, #0
 8013d98:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8013d9a:	4b28      	ldr	r3, [pc, #160]	; (8013e3c <ip_reass_remove_oldest_datagram+0xc0>)
 8013d9c:	681b      	ldr	r3, [r3, #0]
 8013d9e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8013da0:	e030      	b.n	8013e04 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8013da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013da4:	695a      	ldr	r2, [r3, #20]
 8013da6:	687b      	ldr	r3, [r7, #4]
 8013da8:	68db      	ldr	r3, [r3, #12]
 8013daa:	429a      	cmp	r2, r3
 8013dac:	d10c      	bne.n	8013dc8 <ip_reass_remove_oldest_datagram+0x4c>
 8013dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013db0:	699a      	ldr	r2, [r3, #24]
 8013db2:	687b      	ldr	r3, [r7, #4]
 8013db4:	691b      	ldr	r3, [r3, #16]
 8013db6:	429a      	cmp	r2, r3
 8013db8:	d106      	bne.n	8013dc8 <ip_reass_remove_oldest_datagram+0x4c>
 8013dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013dbc:	899a      	ldrh	r2, [r3, #12]
 8013dbe:	687b      	ldr	r3, [r7, #4]
 8013dc0:	889b      	ldrh	r3, [r3, #4]
 8013dc2:	b29b      	uxth	r3, r3
 8013dc4:	429a      	cmp	r2, r3
 8013dc6:	d014      	beq.n	8013df2 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8013dc8:	693b      	ldr	r3, [r7, #16]
 8013dca:	3301      	adds	r3, #1
 8013dcc:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8013dce:	6a3b      	ldr	r3, [r7, #32]
 8013dd0:	2b00      	cmp	r3, #0
 8013dd2:	d104      	bne.n	8013dde <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8013dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013dd6:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8013dd8:	69fb      	ldr	r3, [r7, #28]
 8013dda:	61bb      	str	r3, [r7, #24]
 8013ddc:	e009      	b.n	8013df2 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8013dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013de0:	7fda      	ldrb	r2, [r3, #31]
 8013de2:	6a3b      	ldr	r3, [r7, #32]
 8013de4:	7fdb      	ldrb	r3, [r3, #31]
 8013de6:	429a      	cmp	r2, r3
 8013de8:	d803      	bhi.n	8013df2 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8013dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013dec:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8013dee:	69fb      	ldr	r3, [r7, #28]
 8013df0:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8013df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013df4:	681b      	ldr	r3, [r3, #0]
 8013df6:	2b00      	cmp	r3, #0
 8013df8:	d001      	beq.n	8013dfe <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8013dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013dfc:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8013dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e00:	681b      	ldr	r3, [r3, #0]
 8013e02:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8013e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e06:	2b00      	cmp	r3, #0
 8013e08:	d1cb      	bne.n	8013da2 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8013e0a:	6a3b      	ldr	r3, [r7, #32]
 8013e0c:	2b00      	cmp	r3, #0
 8013e0e:	d008      	beq.n	8013e22 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8013e10:	69b9      	ldr	r1, [r7, #24]
 8013e12:	6a38      	ldr	r0, [r7, #32]
 8013e14:	f7ff ff0e 	bl	8013c34 <ip_reass_free_complete_datagram>
 8013e18:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8013e1a:	697a      	ldr	r2, [r7, #20]
 8013e1c:	68fb      	ldr	r3, [r7, #12]
 8013e1e:	4413      	add	r3, r2
 8013e20:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8013e22:	697a      	ldr	r2, [r7, #20]
 8013e24:	683b      	ldr	r3, [r7, #0]
 8013e26:	429a      	cmp	r2, r3
 8013e28:	da02      	bge.n	8013e30 <ip_reass_remove_oldest_datagram+0xb4>
 8013e2a:	693b      	ldr	r3, [r7, #16]
 8013e2c:	2b01      	cmp	r3, #1
 8013e2e:	dcac      	bgt.n	8013d8a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8013e30:	697b      	ldr	r3, [r7, #20]
}
 8013e32:	4618      	mov	r0, r3
 8013e34:	3728      	adds	r7, #40	; 0x28
 8013e36:	46bd      	mov	sp, r7
 8013e38:	bd80      	pop	{r7, pc}
 8013e3a:	bf00      	nop
 8013e3c:	2400068c 	.word	0x2400068c

08013e40 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8013e40:	b580      	push	{r7, lr}
 8013e42:	b084      	sub	sp, #16
 8013e44:	af00      	add	r7, sp, #0
 8013e46:	6078      	str	r0, [r7, #4]
 8013e48:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8013e4a:	2004      	movs	r0, #4
 8013e4c:	f7f6 fe08 	bl	800aa60 <memp_malloc>
 8013e50:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8013e52:	68fb      	ldr	r3, [r7, #12]
 8013e54:	2b00      	cmp	r3, #0
 8013e56:	d110      	bne.n	8013e7a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8013e58:	6839      	ldr	r1, [r7, #0]
 8013e5a:	6878      	ldr	r0, [r7, #4]
 8013e5c:	f7ff ff8e 	bl	8013d7c <ip_reass_remove_oldest_datagram>
 8013e60:	4602      	mov	r2, r0
 8013e62:	683b      	ldr	r3, [r7, #0]
 8013e64:	4293      	cmp	r3, r2
 8013e66:	dc03      	bgt.n	8013e70 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8013e68:	2004      	movs	r0, #4
 8013e6a:	f7f6 fdf9 	bl	800aa60 <memp_malloc>
 8013e6e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8013e70:	68fb      	ldr	r3, [r7, #12]
 8013e72:	2b00      	cmp	r3, #0
 8013e74:	d101      	bne.n	8013e7a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8013e76:	2300      	movs	r3, #0
 8013e78:	e016      	b.n	8013ea8 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8013e7a:	2220      	movs	r2, #32
 8013e7c:	2100      	movs	r1, #0
 8013e7e:	68f8      	ldr	r0, [r7, #12]
 8013e80:	f000 fe14 	bl	8014aac <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8013e84:	68fb      	ldr	r3, [r7, #12]
 8013e86:	220f      	movs	r2, #15
 8013e88:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8013e8a:	4b09      	ldr	r3, [pc, #36]	; (8013eb0 <ip_reass_enqueue_new_datagram+0x70>)
 8013e8c:	681a      	ldr	r2, [r3, #0]
 8013e8e:	68fb      	ldr	r3, [r7, #12]
 8013e90:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8013e92:	4a07      	ldr	r2, [pc, #28]	; (8013eb0 <ip_reass_enqueue_new_datagram+0x70>)
 8013e94:	68fb      	ldr	r3, [r7, #12]
 8013e96:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8013e98:	68fb      	ldr	r3, [r7, #12]
 8013e9a:	3308      	adds	r3, #8
 8013e9c:	2214      	movs	r2, #20
 8013e9e:	6879      	ldr	r1, [r7, #4]
 8013ea0:	4618      	mov	r0, r3
 8013ea2:	f000 fddb 	bl	8014a5c <memcpy>
  return ipr;
 8013ea6:	68fb      	ldr	r3, [r7, #12]
}
 8013ea8:	4618      	mov	r0, r3
 8013eaa:	3710      	adds	r7, #16
 8013eac:	46bd      	mov	sp, r7
 8013eae:	bd80      	pop	{r7, pc}
 8013eb0:	2400068c 	.word	0x2400068c

08013eb4 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8013eb4:	b580      	push	{r7, lr}
 8013eb6:	b082      	sub	sp, #8
 8013eb8:	af00      	add	r7, sp, #0
 8013eba:	6078      	str	r0, [r7, #4]
 8013ebc:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8013ebe:	4b10      	ldr	r3, [pc, #64]	; (8013f00 <ip_reass_dequeue_datagram+0x4c>)
 8013ec0:	681b      	ldr	r3, [r3, #0]
 8013ec2:	687a      	ldr	r2, [r7, #4]
 8013ec4:	429a      	cmp	r2, r3
 8013ec6:	d104      	bne.n	8013ed2 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8013ec8:	687b      	ldr	r3, [r7, #4]
 8013eca:	681b      	ldr	r3, [r3, #0]
 8013ecc:	4a0c      	ldr	r2, [pc, #48]	; (8013f00 <ip_reass_dequeue_datagram+0x4c>)
 8013ece:	6013      	str	r3, [r2, #0]
 8013ed0:	e00d      	b.n	8013eee <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8013ed2:	683b      	ldr	r3, [r7, #0]
 8013ed4:	2b00      	cmp	r3, #0
 8013ed6:	d106      	bne.n	8013ee6 <ip_reass_dequeue_datagram+0x32>
 8013ed8:	4b0a      	ldr	r3, [pc, #40]	; (8013f04 <ip_reass_dequeue_datagram+0x50>)
 8013eda:	f240 1245 	movw	r2, #325	; 0x145
 8013ede:	490a      	ldr	r1, [pc, #40]	; (8013f08 <ip_reass_dequeue_datagram+0x54>)
 8013ee0:	480a      	ldr	r0, [pc, #40]	; (8013f0c <ip_reass_dequeue_datagram+0x58>)
 8013ee2:	f000 fdeb 	bl	8014abc <iprintf>
    prev->next = ipr->next;
 8013ee6:	687b      	ldr	r3, [r7, #4]
 8013ee8:	681a      	ldr	r2, [r3, #0]
 8013eea:	683b      	ldr	r3, [r7, #0]
 8013eec:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8013eee:	6879      	ldr	r1, [r7, #4]
 8013ef0:	2004      	movs	r0, #4
 8013ef2:	f7f6 fe25 	bl	800ab40 <memp_free>
}
 8013ef6:	bf00      	nop
 8013ef8:	3708      	adds	r7, #8
 8013efa:	46bd      	mov	sp, r7
 8013efc:	bd80      	pop	{r7, pc}
 8013efe:	bf00      	nop
 8013f00:	2400068c 	.word	0x2400068c
 8013f04:	0801899c 	.word	0x0801899c
 8013f08:	08018a64 	.word	0x08018a64
 8013f0c:	080189e4 	.word	0x080189e4

08013f10 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8013f10:	b580      	push	{r7, lr}
 8013f12:	b08c      	sub	sp, #48	; 0x30
 8013f14:	af00      	add	r7, sp, #0
 8013f16:	60f8      	str	r0, [r7, #12]
 8013f18:	60b9      	str	r1, [r7, #8]
 8013f1a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8013f1c:	2300      	movs	r3, #0
 8013f1e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8013f20:	2301      	movs	r3, #1
 8013f22:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8013f24:	68bb      	ldr	r3, [r7, #8]
 8013f26:	685b      	ldr	r3, [r3, #4]
 8013f28:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8013f2a:	69fb      	ldr	r3, [r7, #28]
 8013f2c:	885b      	ldrh	r3, [r3, #2]
 8013f2e:	b29b      	uxth	r3, r3
 8013f30:	4618      	mov	r0, r3
 8013f32:	f7f5 ffeb 	bl	8009f0c <lwip_htons>
 8013f36:	4603      	mov	r3, r0
 8013f38:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8013f3a:	69fb      	ldr	r3, [r7, #28]
 8013f3c:	781b      	ldrb	r3, [r3, #0]
 8013f3e:	f003 030f 	and.w	r3, r3, #15
 8013f42:	b2db      	uxtb	r3, r3
 8013f44:	009b      	lsls	r3, r3, #2
 8013f46:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8013f48:	7e7b      	ldrb	r3, [r7, #25]
 8013f4a:	b29b      	uxth	r3, r3
 8013f4c:	8b7a      	ldrh	r2, [r7, #26]
 8013f4e:	429a      	cmp	r2, r3
 8013f50:	d202      	bcs.n	8013f58 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013f52:	f04f 33ff 	mov.w	r3, #4294967295
 8013f56:	e135      	b.n	80141c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8013f58:	7e7b      	ldrb	r3, [r7, #25]
 8013f5a:	b29b      	uxth	r3, r3
 8013f5c:	8b7a      	ldrh	r2, [r7, #26]
 8013f5e:	1ad3      	subs	r3, r2, r3
 8013f60:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8013f62:	69fb      	ldr	r3, [r7, #28]
 8013f64:	88db      	ldrh	r3, [r3, #6]
 8013f66:	b29b      	uxth	r3, r3
 8013f68:	4618      	mov	r0, r3
 8013f6a:	f7f5 ffcf 	bl	8009f0c <lwip_htons>
 8013f6e:	4603      	mov	r3, r0
 8013f70:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013f74:	b29b      	uxth	r3, r3
 8013f76:	00db      	lsls	r3, r3, #3
 8013f78:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8013f7a:	68bb      	ldr	r3, [r7, #8]
 8013f7c:	685b      	ldr	r3, [r3, #4]
 8013f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8013f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f82:	2200      	movs	r2, #0
 8013f84:	701a      	strb	r2, [r3, #0]
 8013f86:	2200      	movs	r2, #0
 8013f88:	705a      	strb	r2, [r3, #1]
 8013f8a:	2200      	movs	r2, #0
 8013f8c:	709a      	strb	r2, [r3, #2]
 8013f8e:	2200      	movs	r2, #0
 8013f90:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8013f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f94:	8afa      	ldrh	r2, [r7, #22]
 8013f96:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8013f98:	8afa      	ldrh	r2, [r7, #22]
 8013f9a:	8b7b      	ldrh	r3, [r7, #26]
 8013f9c:	4413      	add	r3, r2
 8013f9e:	b29a      	uxth	r2, r3
 8013fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013fa2:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8013fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013fa6:	88db      	ldrh	r3, [r3, #6]
 8013fa8:	b29b      	uxth	r3, r3
 8013faa:	8afa      	ldrh	r2, [r7, #22]
 8013fac:	429a      	cmp	r2, r3
 8013fae:	d902      	bls.n	8013fb6 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013fb0:	f04f 33ff 	mov.w	r3, #4294967295
 8013fb4:	e106      	b.n	80141c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8013fb6:	68fb      	ldr	r3, [r7, #12]
 8013fb8:	685b      	ldr	r3, [r3, #4]
 8013fba:	627b      	str	r3, [r7, #36]	; 0x24
 8013fbc:	e068      	b.n	8014090 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8013fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fc0:	685b      	ldr	r3, [r3, #4]
 8013fc2:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8013fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013fc6:	889b      	ldrh	r3, [r3, #4]
 8013fc8:	b29a      	uxth	r2, r3
 8013fca:	693b      	ldr	r3, [r7, #16]
 8013fcc:	889b      	ldrh	r3, [r3, #4]
 8013fce:	b29b      	uxth	r3, r3
 8013fd0:	429a      	cmp	r2, r3
 8013fd2:	d235      	bcs.n	8014040 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8013fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013fd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013fd8:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8013fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013fdc:	2b00      	cmp	r3, #0
 8013fde:	d020      	beq.n	8014022 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8013fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013fe2:	889b      	ldrh	r3, [r3, #4]
 8013fe4:	b29a      	uxth	r2, r3
 8013fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013fe8:	88db      	ldrh	r3, [r3, #6]
 8013fea:	b29b      	uxth	r3, r3
 8013fec:	429a      	cmp	r2, r3
 8013fee:	d307      	bcc.n	8014000 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8013ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ff2:	88db      	ldrh	r3, [r3, #6]
 8013ff4:	b29a      	uxth	r2, r3
 8013ff6:	693b      	ldr	r3, [r7, #16]
 8013ff8:	889b      	ldrh	r3, [r3, #4]
 8013ffa:	b29b      	uxth	r3, r3
 8013ffc:	429a      	cmp	r2, r3
 8013ffe:	d902      	bls.n	8014006 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014000:	f04f 33ff 	mov.w	r3, #4294967295
 8014004:	e0de      	b.n	80141c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8014006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014008:	68ba      	ldr	r2, [r7, #8]
 801400a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801400c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801400e:	88db      	ldrh	r3, [r3, #6]
 8014010:	b29a      	uxth	r2, r3
 8014012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014014:	889b      	ldrh	r3, [r3, #4]
 8014016:	b29b      	uxth	r3, r3
 8014018:	429a      	cmp	r2, r3
 801401a:	d03d      	beq.n	8014098 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801401c:	2300      	movs	r3, #0
 801401e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8014020:	e03a      	b.n	8014098 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8014022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014024:	88db      	ldrh	r3, [r3, #6]
 8014026:	b29a      	uxth	r2, r3
 8014028:	693b      	ldr	r3, [r7, #16]
 801402a:	889b      	ldrh	r3, [r3, #4]
 801402c:	b29b      	uxth	r3, r3
 801402e:	429a      	cmp	r2, r3
 8014030:	d902      	bls.n	8014038 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014032:	f04f 33ff 	mov.w	r3, #4294967295
 8014036:	e0c5      	b.n	80141c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8014038:	68fb      	ldr	r3, [r7, #12]
 801403a:	68ba      	ldr	r2, [r7, #8]
 801403c:	605a      	str	r2, [r3, #4]
      break;
 801403e:	e02b      	b.n	8014098 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8014040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014042:	889b      	ldrh	r3, [r3, #4]
 8014044:	b29a      	uxth	r2, r3
 8014046:	693b      	ldr	r3, [r7, #16]
 8014048:	889b      	ldrh	r3, [r3, #4]
 801404a:	b29b      	uxth	r3, r3
 801404c:	429a      	cmp	r2, r3
 801404e:	d102      	bne.n	8014056 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014050:	f04f 33ff 	mov.w	r3, #4294967295
 8014054:	e0b6      	b.n	80141c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8014056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014058:	889b      	ldrh	r3, [r3, #4]
 801405a:	b29a      	uxth	r2, r3
 801405c:	693b      	ldr	r3, [r7, #16]
 801405e:	88db      	ldrh	r3, [r3, #6]
 8014060:	b29b      	uxth	r3, r3
 8014062:	429a      	cmp	r2, r3
 8014064:	d202      	bcs.n	801406c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014066:	f04f 33ff 	mov.w	r3, #4294967295
 801406a:	e0ab      	b.n	80141c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801406c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801406e:	2b00      	cmp	r3, #0
 8014070:	d009      	beq.n	8014086 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8014072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014074:	88db      	ldrh	r3, [r3, #6]
 8014076:	b29a      	uxth	r2, r3
 8014078:	693b      	ldr	r3, [r7, #16]
 801407a:	889b      	ldrh	r3, [r3, #4]
 801407c:	b29b      	uxth	r3, r3
 801407e:	429a      	cmp	r2, r3
 8014080:	d001      	beq.n	8014086 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8014082:	2300      	movs	r3, #0
 8014084:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8014086:	693b      	ldr	r3, [r7, #16]
 8014088:	681b      	ldr	r3, [r3, #0]
 801408a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801408c:	693b      	ldr	r3, [r7, #16]
 801408e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8014090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014092:	2b00      	cmp	r3, #0
 8014094:	d193      	bne.n	8013fbe <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8014096:	e000      	b.n	801409a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8014098:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801409a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801409c:	2b00      	cmp	r3, #0
 801409e:	d12d      	bne.n	80140fc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80140a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80140a2:	2b00      	cmp	r3, #0
 80140a4:	d01c      	beq.n	80140e0 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80140a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80140a8:	88db      	ldrh	r3, [r3, #6]
 80140aa:	b29a      	uxth	r2, r3
 80140ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140ae:	889b      	ldrh	r3, [r3, #4]
 80140b0:	b29b      	uxth	r3, r3
 80140b2:	429a      	cmp	r2, r3
 80140b4:	d906      	bls.n	80140c4 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80140b6:	4b45      	ldr	r3, [pc, #276]	; (80141cc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80140b8:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 80140bc:	4944      	ldr	r1, [pc, #272]	; (80141d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80140be:	4845      	ldr	r0, [pc, #276]	; (80141d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80140c0:	f000 fcfc 	bl	8014abc <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80140c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80140c6:	68ba      	ldr	r2, [r7, #8]
 80140c8:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80140ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80140cc:	88db      	ldrh	r3, [r3, #6]
 80140ce:	b29a      	uxth	r2, r3
 80140d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140d2:	889b      	ldrh	r3, [r3, #4]
 80140d4:	b29b      	uxth	r3, r3
 80140d6:	429a      	cmp	r2, r3
 80140d8:	d010      	beq.n	80140fc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80140da:	2300      	movs	r3, #0
 80140dc:	623b      	str	r3, [r7, #32]
 80140de:	e00d      	b.n	80140fc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80140e0:	68fb      	ldr	r3, [r7, #12]
 80140e2:	685b      	ldr	r3, [r3, #4]
 80140e4:	2b00      	cmp	r3, #0
 80140e6:	d006      	beq.n	80140f6 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80140e8:	4b38      	ldr	r3, [pc, #224]	; (80141cc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80140ea:	f44f 72df 	mov.w	r2, #446	; 0x1be
 80140ee:	493a      	ldr	r1, [pc, #232]	; (80141d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80140f0:	4838      	ldr	r0, [pc, #224]	; (80141d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80140f2:	f000 fce3 	bl	8014abc <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80140f6:	68fb      	ldr	r3, [r7, #12]
 80140f8:	68ba      	ldr	r2, [r7, #8]
 80140fa:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80140fc:	687b      	ldr	r3, [r7, #4]
 80140fe:	2b00      	cmp	r3, #0
 8014100:	d105      	bne.n	801410e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8014102:	68fb      	ldr	r3, [r7, #12]
 8014104:	7f9b      	ldrb	r3, [r3, #30]
 8014106:	f003 0301 	and.w	r3, r3, #1
 801410a:	2b00      	cmp	r3, #0
 801410c:	d059      	beq.n	80141c2 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801410e:	6a3b      	ldr	r3, [r7, #32]
 8014110:	2b00      	cmp	r3, #0
 8014112:	d04f      	beq.n	80141b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8014114:	68fb      	ldr	r3, [r7, #12]
 8014116:	685b      	ldr	r3, [r3, #4]
 8014118:	2b00      	cmp	r3, #0
 801411a:	d006      	beq.n	801412a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801411c:	68fb      	ldr	r3, [r7, #12]
 801411e:	685b      	ldr	r3, [r3, #4]
 8014120:	685b      	ldr	r3, [r3, #4]
 8014122:	889b      	ldrh	r3, [r3, #4]
 8014124:	b29b      	uxth	r3, r3
 8014126:	2b00      	cmp	r3, #0
 8014128:	d002      	beq.n	8014130 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801412a:	2300      	movs	r3, #0
 801412c:	623b      	str	r3, [r7, #32]
 801412e:	e041      	b.n	80141b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8014130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014132:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8014134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014136:	681b      	ldr	r3, [r3, #0]
 8014138:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801413a:	e012      	b.n	8014162 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801413c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801413e:	685b      	ldr	r3, [r3, #4]
 8014140:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8014142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014144:	88db      	ldrh	r3, [r3, #6]
 8014146:	b29a      	uxth	r2, r3
 8014148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801414a:	889b      	ldrh	r3, [r3, #4]
 801414c:	b29b      	uxth	r3, r3
 801414e:	429a      	cmp	r2, r3
 8014150:	d002      	beq.n	8014158 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8014152:	2300      	movs	r3, #0
 8014154:	623b      	str	r3, [r7, #32]
            break;
 8014156:	e007      	b.n	8014168 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8014158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801415a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801415c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801415e:	681b      	ldr	r3, [r3, #0]
 8014160:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8014162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014164:	2b00      	cmp	r3, #0
 8014166:	d1e9      	bne.n	801413c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8014168:	6a3b      	ldr	r3, [r7, #32]
 801416a:	2b00      	cmp	r3, #0
 801416c:	d022      	beq.n	80141b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801416e:	68fb      	ldr	r3, [r7, #12]
 8014170:	685b      	ldr	r3, [r3, #4]
 8014172:	2b00      	cmp	r3, #0
 8014174:	d106      	bne.n	8014184 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8014176:	4b15      	ldr	r3, [pc, #84]	; (80141cc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014178:	f240 12df 	movw	r2, #479	; 0x1df
 801417c:	4917      	ldr	r1, [pc, #92]	; (80141dc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801417e:	4815      	ldr	r0, [pc, #84]	; (80141d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014180:	f000 fc9c 	bl	8014abc <iprintf>
          LWIP_ASSERT("sanity check",
 8014184:	68fb      	ldr	r3, [r7, #12]
 8014186:	685b      	ldr	r3, [r3, #4]
 8014188:	685b      	ldr	r3, [r3, #4]
 801418a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801418c:	429a      	cmp	r2, r3
 801418e:	d106      	bne.n	801419e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8014190:	4b0e      	ldr	r3, [pc, #56]	; (80141cc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014192:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8014196:	4911      	ldr	r1, [pc, #68]	; (80141dc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8014198:	480e      	ldr	r0, [pc, #56]	; (80141d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801419a:	f000 fc8f 	bl	8014abc <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801419e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141a0:	681b      	ldr	r3, [r3, #0]
 80141a2:	2b00      	cmp	r3, #0
 80141a4:	d006      	beq.n	80141b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80141a6:	4b09      	ldr	r3, [pc, #36]	; (80141cc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80141a8:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 80141ac:	490c      	ldr	r1, [pc, #48]	; (80141e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80141ae:	4809      	ldr	r0, [pc, #36]	; (80141d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80141b0:	f000 fc84 	bl	8014abc <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80141b4:	6a3b      	ldr	r3, [r7, #32]
 80141b6:	2b00      	cmp	r3, #0
 80141b8:	bf14      	ite	ne
 80141ba:	2301      	movne	r3, #1
 80141bc:	2300      	moveq	r3, #0
 80141be:	b2db      	uxtb	r3, r3
 80141c0:	e000      	b.n	80141c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80141c2:	2300      	movs	r3, #0
}
 80141c4:	4618      	mov	r0, r3
 80141c6:	3730      	adds	r7, #48	; 0x30
 80141c8:	46bd      	mov	sp, r7
 80141ca:	bd80      	pop	{r7, pc}
 80141cc:	0801899c 	.word	0x0801899c
 80141d0:	08018a80 	.word	0x08018a80
 80141d4:	080189e4 	.word	0x080189e4
 80141d8:	08018aa0 	.word	0x08018aa0
 80141dc:	08018ad8 	.word	0x08018ad8
 80141e0:	08018ae8 	.word	0x08018ae8

080141e4 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80141e4:	b580      	push	{r7, lr}
 80141e6:	b08e      	sub	sp, #56	; 0x38
 80141e8:	af00      	add	r7, sp, #0
 80141ea:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80141ec:	687b      	ldr	r3, [r7, #4]
 80141ee:	685b      	ldr	r3, [r3, #4]
 80141f0:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80141f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141f4:	781b      	ldrb	r3, [r3, #0]
 80141f6:	f003 030f 	and.w	r3, r3, #15
 80141fa:	b2db      	uxtb	r3, r3
 80141fc:	009b      	lsls	r3, r3, #2
 80141fe:	b2db      	uxtb	r3, r3
 8014200:	2b14      	cmp	r3, #20
 8014202:	f040 8167 	bne.w	80144d4 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8014206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014208:	88db      	ldrh	r3, [r3, #6]
 801420a:	b29b      	uxth	r3, r3
 801420c:	4618      	mov	r0, r3
 801420e:	f7f5 fe7d 	bl	8009f0c <lwip_htons>
 8014212:	4603      	mov	r3, r0
 8014214:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014218:	b29b      	uxth	r3, r3
 801421a:	00db      	lsls	r3, r3, #3
 801421c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801421e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014220:	885b      	ldrh	r3, [r3, #2]
 8014222:	b29b      	uxth	r3, r3
 8014224:	4618      	mov	r0, r3
 8014226:	f7f5 fe71 	bl	8009f0c <lwip_htons>
 801422a:	4603      	mov	r3, r0
 801422c:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801422e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014230:	781b      	ldrb	r3, [r3, #0]
 8014232:	f003 030f 	and.w	r3, r3, #15
 8014236:	b2db      	uxtb	r3, r3
 8014238:	009b      	lsls	r3, r3, #2
 801423a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801423e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014242:	b29b      	uxth	r3, r3
 8014244:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8014246:	429a      	cmp	r2, r3
 8014248:	f0c0 8146 	bcc.w	80144d8 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801424c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014250:	b29b      	uxth	r3, r3
 8014252:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8014254:	1ad3      	subs	r3, r2, r3
 8014256:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8014258:	6878      	ldr	r0, [r7, #4]
 801425a:	f7f7 fb6f 	bl	800b93c <pbuf_clen>
 801425e:	4603      	mov	r3, r0
 8014260:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8014262:	4b9f      	ldr	r3, [pc, #636]	; (80144e0 <ip4_reass+0x2fc>)
 8014264:	881b      	ldrh	r3, [r3, #0]
 8014266:	461a      	mov	r2, r3
 8014268:	8c3b      	ldrh	r3, [r7, #32]
 801426a:	4413      	add	r3, r2
 801426c:	2b0a      	cmp	r3, #10
 801426e:	dd10      	ble.n	8014292 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8014270:	8c3b      	ldrh	r3, [r7, #32]
 8014272:	4619      	mov	r1, r3
 8014274:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014276:	f7ff fd81 	bl	8013d7c <ip_reass_remove_oldest_datagram>
 801427a:	4603      	mov	r3, r0
 801427c:	2b00      	cmp	r3, #0
 801427e:	f000 812d 	beq.w	80144dc <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8014282:	4b97      	ldr	r3, [pc, #604]	; (80144e0 <ip4_reass+0x2fc>)
 8014284:	881b      	ldrh	r3, [r3, #0]
 8014286:	461a      	mov	r2, r3
 8014288:	8c3b      	ldrh	r3, [r7, #32]
 801428a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801428c:	2b0a      	cmp	r3, #10
 801428e:	f300 8125 	bgt.w	80144dc <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8014292:	4b94      	ldr	r3, [pc, #592]	; (80144e4 <ip4_reass+0x300>)
 8014294:	681b      	ldr	r3, [r3, #0]
 8014296:	633b      	str	r3, [r7, #48]	; 0x30
 8014298:	e015      	b.n	80142c6 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801429a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801429c:	695a      	ldr	r2, [r3, #20]
 801429e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142a0:	68db      	ldr	r3, [r3, #12]
 80142a2:	429a      	cmp	r2, r3
 80142a4:	d10c      	bne.n	80142c0 <ip4_reass+0xdc>
 80142a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142a8:	699a      	ldr	r2, [r3, #24]
 80142aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142ac:	691b      	ldr	r3, [r3, #16]
 80142ae:	429a      	cmp	r2, r3
 80142b0:	d106      	bne.n	80142c0 <ip4_reass+0xdc>
 80142b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142b4:	899a      	ldrh	r2, [r3, #12]
 80142b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142b8:	889b      	ldrh	r3, [r3, #4]
 80142ba:	b29b      	uxth	r3, r3
 80142bc:	429a      	cmp	r2, r3
 80142be:	d006      	beq.n	80142ce <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80142c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142c2:	681b      	ldr	r3, [r3, #0]
 80142c4:	633b      	str	r3, [r7, #48]	; 0x30
 80142c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142c8:	2b00      	cmp	r3, #0
 80142ca:	d1e6      	bne.n	801429a <ip4_reass+0xb6>
 80142cc:	e000      	b.n	80142d0 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80142ce:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80142d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142d2:	2b00      	cmp	r3, #0
 80142d4:	d109      	bne.n	80142ea <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80142d6:	8c3b      	ldrh	r3, [r7, #32]
 80142d8:	4619      	mov	r1, r3
 80142da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80142dc:	f7ff fdb0 	bl	8013e40 <ip_reass_enqueue_new_datagram>
 80142e0:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80142e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142e4:	2b00      	cmp	r3, #0
 80142e6:	d11c      	bne.n	8014322 <ip4_reass+0x13e>
      goto nullreturn;
 80142e8:	e109      	b.n	80144fe <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80142ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142ec:	88db      	ldrh	r3, [r3, #6]
 80142ee:	b29b      	uxth	r3, r3
 80142f0:	4618      	mov	r0, r3
 80142f2:	f7f5 fe0b 	bl	8009f0c <lwip_htons>
 80142f6:	4603      	mov	r3, r0
 80142f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80142fc:	2b00      	cmp	r3, #0
 80142fe:	d110      	bne.n	8014322 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8014300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014302:	89db      	ldrh	r3, [r3, #14]
 8014304:	4618      	mov	r0, r3
 8014306:	f7f5 fe01 	bl	8009f0c <lwip_htons>
 801430a:	4603      	mov	r3, r0
 801430c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8014310:	2b00      	cmp	r3, #0
 8014312:	d006      	beq.n	8014322 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8014314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014316:	3308      	adds	r3, #8
 8014318:	2214      	movs	r2, #20
 801431a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801431c:	4618      	mov	r0, r3
 801431e:	f000 fb9d 	bl	8014a5c <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8014322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014324:	88db      	ldrh	r3, [r3, #6]
 8014326:	b29b      	uxth	r3, r3
 8014328:	f003 0320 	and.w	r3, r3, #32
 801432c:	2b00      	cmp	r3, #0
 801432e:	bf0c      	ite	eq
 8014330:	2301      	moveq	r3, #1
 8014332:	2300      	movne	r3, #0
 8014334:	b2db      	uxtb	r3, r3
 8014336:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8014338:	69fb      	ldr	r3, [r7, #28]
 801433a:	2b00      	cmp	r3, #0
 801433c:	d00e      	beq.n	801435c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801433e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8014340:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014342:	4413      	add	r3, r2
 8014344:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8014346:	8b7a      	ldrh	r2, [r7, #26]
 8014348:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801434a:	429a      	cmp	r2, r3
 801434c:	f0c0 80a0 	bcc.w	8014490 <ip4_reass+0x2ac>
 8014350:	8b7b      	ldrh	r3, [r7, #26]
 8014352:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8014356:	4293      	cmp	r3, r2
 8014358:	f200 809a 	bhi.w	8014490 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801435c:	69fa      	ldr	r2, [r7, #28]
 801435e:	6879      	ldr	r1, [r7, #4]
 8014360:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014362:	f7ff fdd5 	bl	8013f10 <ip_reass_chain_frag_into_datagram_and_validate>
 8014366:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8014368:	697b      	ldr	r3, [r7, #20]
 801436a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801436e:	f000 8091 	beq.w	8014494 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8014372:	4b5b      	ldr	r3, [pc, #364]	; (80144e0 <ip4_reass+0x2fc>)
 8014374:	881a      	ldrh	r2, [r3, #0]
 8014376:	8c3b      	ldrh	r3, [r7, #32]
 8014378:	4413      	add	r3, r2
 801437a:	b29a      	uxth	r2, r3
 801437c:	4b58      	ldr	r3, [pc, #352]	; (80144e0 <ip4_reass+0x2fc>)
 801437e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8014380:	69fb      	ldr	r3, [r7, #28]
 8014382:	2b00      	cmp	r3, #0
 8014384:	d00d      	beq.n	80143a2 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8014386:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8014388:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801438a:	4413      	add	r3, r2
 801438c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801438e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014390:	8a7a      	ldrh	r2, [r7, #18]
 8014392:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8014394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014396:	7f9b      	ldrb	r3, [r3, #30]
 8014398:	f043 0301 	orr.w	r3, r3, #1
 801439c:	b2da      	uxtb	r2, r3
 801439e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143a0:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80143a2:	697b      	ldr	r3, [r7, #20]
 80143a4:	2b01      	cmp	r3, #1
 80143a6:	d171      	bne.n	801448c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80143a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143aa:	8b9b      	ldrh	r3, [r3, #28]
 80143ac:	3314      	adds	r3, #20
 80143ae:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80143b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143b2:	685b      	ldr	r3, [r3, #4]
 80143b4:	685b      	ldr	r3, [r3, #4]
 80143b6:	681b      	ldr	r3, [r3, #0]
 80143b8:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80143ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143bc:	685b      	ldr	r3, [r3, #4]
 80143be:	685b      	ldr	r3, [r3, #4]
 80143c0:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80143c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143c4:	3308      	adds	r3, #8
 80143c6:	2214      	movs	r2, #20
 80143c8:	4619      	mov	r1, r3
 80143ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80143cc:	f000 fb46 	bl	8014a5c <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80143d0:	8a3b      	ldrh	r3, [r7, #16]
 80143d2:	4618      	mov	r0, r3
 80143d4:	f7f5 fd9a 	bl	8009f0c <lwip_htons>
 80143d8:	4603      	mov	r3, r0
 80143da:	461a      	mov	r2, r3
 80143dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143de:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80143e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143e2:	2200      	movs	r2, #0
 80143e4:	719a      	strb	r2, [r3, #6]
 80143e6:	2200      	movs	r2, #0
 80143e8:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80143ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143ec:	2200      	movs	r2, #0
 80143ee:	729a      	strb	r2, [r3, #10]
 80143f0:	2200      	movs	r2, #0
 80143f2:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80143f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143f6:	685b      	ldr	r3, [r3, #4]
 80143f8:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80143fa:	e00d      	b.n	8014418 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80143fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80143fe:	685b      	ldr	r3, [r3, #4]
 8014400:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8014402:	2114      	movs	r1, #20
 8014404:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8014406:	f7f7 f98b 	bl	800b720 <pbuf_remove_header>
      pbuf_cat(p, r);
 801440a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801440c:	6878      	ldr	r0, [r7, #4]
 801440e:	f7f7 facf 	bl	800b9b0 <pbuf_cat>
      r = iprh->next_pbuf;
 8014412:	68fb      	ldr	r3, [r7, #12]
 8014414:	681b      	ldr	r3, [r3, #0]
 8014416:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8014418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801441a:	2b00      	cmp	r3, #0
 801441c:	d1ee      	bne.n	80143fc <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801441e:	4b31      	ldr	r3, [pc, #196]	; (80144e4 <ip4_reass+0x300>)
 8014420:	681b      	ldr	r3, [r3, #0]
 8014422:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014424:	429a      	cmp	r2, r3
 8014426:	d102      	bne.n	801442e <ip4_reass+0x24a>
      ipr_prev = NULL;
 8014428:	2300      	movs	r3, #0
 801442a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801442c:	e010      	b.n	8014450 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801442e:	4b2d      	ldr	r3, [pc, #180]	; (80144e4 <ip4_reass+0x300>)
 8014430:	681b      	ldr	r3, [r3, #0]
 8014432:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014434:	e007      	b.n	8014446 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8014436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014438:	681b      	ldr	r3, [r3, #0]
 801443a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801443c:	429a      	cmp	r2, r3
 801443e:	d006      	beq.n	801444e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8014440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014442:	681b      	ldr	r3, [r3, #0]
 8014444:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014448:	2b00      	cmp	r3, #0
 801444a:	d1f4      	bne.n	8014436 <ip4_reass+0x252>
 801444c:	e000      	b.n	8014450 <ip4_reass+0x26c>
          break;
 801444e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8014450:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014452:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014454:	f7ff fd2e 	bl	8013eb4 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8014458:	6878      	ldr	r0, [r7, #4]
 801445a:	f7f7 fa6f 	bl	800b93c <pbuf_clen>
 801445e:	4603      	mov	r3, r0
 8014460:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8014462:	4b1f      	ldr	r3, [pc, #124]	; (80144e0 <ip4_reass+0x2fc>)
 8014464:	881b      	ldrh	r3, [r3, #0]
 8014466:	8c3a      	ldrh	r2, [r7, #32]
 8014468:	429a      	cmp	r2, r3
 801446a:	d906      	bls.n	801447a <ip4_reass+0x296>
 801446c:	4b1e      	ldr	r3, [pc, #120]	; (80144e8 <ip4_reass+0x304>)
 801446e:	f240 229b 	movw	r2, #667	; 0x29b
 8014472:	491e      	ldr	r1, [pc, #120]	; (80144ec <ip4_reass+0x308>)
 8014474:	481e      	ldr	r0, [pc, #120]	; (80144f0 <ip4_reass+0x30c>)
 8014476:	f000 fb21 	bl	8014abc <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801447a:	4b19      	ldr	r3, [pc, #100]	; (80144e0 <ip4_reass+0x2fc>)
 801447c:	881a      	ldrh	r2, [r3, #0]
 801447e:	8c3b      	ldrh	r3, [r7, #32]
 8014480:	1ad3      	subs	r3, r2, r3
 8014482:	b29a      	uxth	r2, r3
 8014484:	4b16      	ldr	r3, [pc, #88]	; (80144e0 <ip4_reass+0x2fc>)
 8014486:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8014488:	687b      	ldr	r3, [r7, #4]
 801448a:	e03c      	b.n	8014506 <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801448c:	2300      	movs	r3, #0
 801448e:	e03a      	b.n	8014506 <ip4_reass+0x322>
      goto nullreturn_ipr;
 8014490:	bf00      	nop
 8014492:	e000      	b.n	8014496 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8014494:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8014496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014498:	2b00      	cmp	r3, #0
 801449a:	d106      	bne.n	80144aa <ip4_reass+0x2c6>
 801449c:	4b12      	ldr	r3, [pc, #72]	; (80144e8 <ip4_reass+0x304>)
 801449e:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 80144a2:	4914      	ldr	r1, [pc, #80]	; (80144f4 <ip4_reass+0x310>)
 80144a4:	4812      	ldr	r0, [pc, #72]	; (80144f0 <ip4_reass+0x30c>)
 80144a6:	f000 fb09 	bl	8014abc <iprintf>
  if (ipr->p == NULL) {
 80144aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144ac:	685b      	ldr	r3, [r3, #4]
 80144ae:	2b00      	cmp	r3, #0
 80144b0:	d124      	bne.n	80144fc <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80144b2:	4b0c      	ldr	r3, [pc, #48]	; (80144e4 <ip4_reass+0x300>)
 80144b4:	681b      	ldr	r3, [r3, #0]
 80144b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80144b8:	429a      	cmp	r2, r3
 80144ba:	d006      	beq.n	80144ca <ip4_reass+0x2e6>
 80144bc:	4b0a      	ldr	r3, [pc, #40]	; (80144e8 <ip4_reass+0x304>)
 80144be:	f240 22ab 	movw	r2, #683	; 0x2ab
 80144c2:	490d      	ldr	r1, [pc, #52]	; (80144f8 <ip4_reass+0x314>)
 80144c4:	480a      	ldr	r0, [pc, #40]	; (80144f0 <ip4_reass+0x30c>)
 80144c6:	f000 faf9 	bl	8014abc <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80144ca:	2100      	movs	r1, #0
 80144cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80144ce:	f7ff fcf1 	bl	8013eb4 <ip_reass_dequeue_datagram>
 80144d2:	e014      	b.n	80144fe <ip4_reass+0x31a>
    goto nullreturn;
 80144d4:	bf00      	nop
 80144d6:	e012      	b.n	80144fe <ip4_reass+0x31a>
    goto nullreturn;
 80144d8:	bf00      	nop
 80144da:	e010      	b.n	80144fe <ip4_reass+0x31a>
      goto nullreturn;
 80144dc:	bf00      	nop
 80144de:	e00e      	b.n	80144fe <ip4_reass+0x31a>
 80144e0:	24000690 	.word	0x24000690
 80144e4:	2400068c 	.word	0x2400068c
 80144e8:	0801899c 	.word	0x0801899c
 80144ec:	08018b0c 	.word	0x08018b0c
 80144f0:	080189e4 	.word	0x080189e4
 80144f4:	08018b28 	.word	0x08018b28
 80144f8:	08018b34 	.word	0x08018b34
  }

nullreturn:
 80144fc:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80144fe:	6878      	ldr	r0, [r7, #4]
 8014500:	f7f7 f994 	bl	800b82c <pbuf_free>
  return NULL;
 8014504:	2300      	movs	r3, #0
}
 8014506:	4618      	mov	r0, r3
 8014508:	3738      	adds	r7, #56	; 0x38
 801450a:	46bd      	mov	sp, r7
 801450c:	bd80      	pop	{r7, pc}
 801450e:	bf00      	nop

08014510 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8014510:	b580      	push	{r7, lr}
 8014512:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8014514:	2005      	movs	r0, #5
 8014516:	f7f6 faa3 	bl	800aa60 <memp_malloc>
 801451a:	4603      	mov	r3, r0
}
 801451c:	4618      	mov	r0, r3
 801451e:	bd80      	pop	{r7, pc}

08014520 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8014520:	b580      	push	{r7, lr}
 8014522:	b082      	sub	sp, #8
 8014524:	af00      	add	r7, sp, #0
 8014526:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8014528:	687b      	ldr	r3, [r7, #4]
 801452a:	2b00      	cmp	r3, #0
 801452c:	d106      	bne.n	801453c <ip_frag_free_pbuf_custom_ref+0x1c>
 801452e:	4b07      	ldr	r3, [pc, #28]	; (801454c <ip_frag_free_pbuf_custom_ref+0x2c>)
 8014530:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8014534:	4906      	ldr	r1, [pc, #24]	; (8014550 <ip_frag_free_pbuf_custom_ref+0x30>)
 8014536:	4807      	ldr	r0, [pc, #28]	; (8014554 <ip_frag_free_pbuf_custom_ref+0x34>)
 8014538:	f000 fac0 	bl	8014abc <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801453c:	6879      	ldr	r1, [r7, #4]
 801453e:	2005      	movs	r0, #5
 8014540:	f7f6 fafe 	bl	800ab40 <memp_free>
}
 8014544:	bf00      	nop
 8014546:	3708      	adds	r7, #8
 8014548:	46bd      	mov	sp, r7
 801454a:	bd80      	pop	{r7, pc}
 801454c:	0801899c 	.word	0x0801899c
 8014550:	08018b54 	.word	0x08018b54
 8014554:	080189e4 	.word	0x080189e4

08014558 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8014558:	b580      	push	{r7, lr}
 801455a:	b084      	sub	sp, #16
 801455c:	af00      	add	r7, sp, #0
 801455e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8014560:	687b      	ldr	r3, [r7, #4]
 8014562:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8014564:	68fb      	ldr	r3, [r7, #12]
 8014566:	2b00      	cmp	r3, #0
 8014568:	d106      	bne.n	8014578 <ipfrag_free_pbuf_custom+0x20>
 801456a:	4b11      	ldr	r3, [pc, #68]	; (80145b0 <ipfrag_free_pbuf_custom+0x58>)
 801456c:	f240 22ce 	movw	r2, #718	; 0x2ce
 8014570:	4910      	ldr	r1, [pc, #64]	; (80145b4 <ipfrag_free_pbuf_custom+0x5c>)
 8014572:	4811      	ldr	r0, [pc, #68]	; (80145b8 <ipfrag_free_pbuf_custom+0x60>)
 8014574:	f000 faa2 	bl	8014abc <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8014578:	68fa      	ldr	r2, [r7, #12]
 801457a:	687b      	ldr	r3, [r7, #4]
 801457c:	429a      	cmp	r2, r3
 801457e:	d006      	beq.n	801458e <ipfrag_free_pbuf_custom+0x36>
 8014580:	4b0b      	ldr	r3, [pc, #44]	; (80145b0 <ipfrag_free_pbuf_custom+0x58>)
 8014582:	f240 22cf 	movw	r2, #719	; 0x2cf
 8014586:	490d      	ldr	r1, [pc, #52]	; (80145bc <ipfrag_free_pbuf_custom+0x64>)
 8014588:	480b      	ldr	r0, [pc, #44]	; (80145b8 <ipfrag_free_pbuf_custom+0x60>)
 801458a:	f000 fa97 	bl	8014abc <iprintf>
  if (pcr->original != NULL) {
 801458e:	68fb      	ldr	r3, [r7, #12]
 8014590:	695b      	ldr	r3, [r3, #20]
 8014592:	2b00      	cmp	r3, #0
 8014594:	d004      	beq.n	80145a0 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8014596:	68fb      	ldr	r3, [r7, #12]
 8014598:	695b      	ldr	r3, [r3, #20]
 801459a:	4618      	mov	r0, r3
 801459c:	f7f7 f946 	bl	800b82c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80145a0:	68f8      	ldr	r0, [r7, #12]
 80145a2:	f7ff ffbd 	bl	8014520 <ip_frag_free_pbuf_custom_ref>
}
 80145a6:	bf00      	nop
 80145a8:	3710      	adds	r7, #16
 80145aa:	46bd      	mov	sp, r7
 80145ac:	bd80      	pop	{r7, pc}
 80145ae:	bf00      	nop
 80145b0:	0801899c 	.word	0x0801899c
 80145b4:	08018b60 	.word	0x08018b60
 80145b8:	080189e4 	.word	0x080189e4
 80145bc:	08018b6c 	.word	0x08018b6c

080145c0 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80145c0:	b580      	push	{r7, lr}
 80145c2:	b094      	sub	sp, #80	; 0x50
 80145c4:	af02      	add	r7, sp, #8
 80145c6:	60f8      	str	r0, [r7, #12]
 80145c8:	60b9      	str	r1, [r7, #8]
 80145ca:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80145cc:	2300      	movs	r3, #0
 80145ce:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80145d2:	68bb      	ldr	r3, [r7, #8]
 80145d4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80145d6:	3b14      	subs	r3, #20
 80145d8:	2b00      	cmp	r3, #0
 80145da:	da00      	bge.n	80145de <ip4_frag+0x1e>
 80145dc:	3307      	adds	r3, #7
 80145de:	10db      	asrs	r3, r3, #3
 80145e0:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80145e2:	2314      	movs	r3, #20
 80145e4:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80145e6:	68fb      	ldr	r3, [r7, #12]
 80145e8:	685b      	ldr	r3, [r3, #4]
 80145ea:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 80145ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80145ee:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80145f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145f2:	781b      	ldrb	r3, [r3, #0]
 80145f4:	f003 030f 	and.w	r3, r3, #15
 80145f8:	b2db      	uxtb	r3, r3
 80145fa:	009b      	lsls	r3, r3, #2
 80145fc:	b2db      	uxtb	r3, r3
 80145fe:	2b14      	cmp	r3, #20
 8014600:	d002      	beq.n	8014608 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8014602:	f06f 0305 	mvn.w	r3, #5
 8014606:	e110      	b.n	801482a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8014608:	68fb      	ldr	r3, [r7, #12]
 801460a:	895b      	ldrh	r3, [r3, #10]
 801460c:	2b13      	cmp	r3, #19
 801460e:	d809      	bhi.n	8014624 <ip4_frag+0x64>
 8014610:	4b88      	ldr	r3, [pc, #544]	; (8014834 <ip4_frag+0x274>)
 8014612:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8014616:	4988      	ldr	r1, [pc, #544]	; (8014838 <ip4_frag+0x278>)
 8014618:	4888      	ldr	r0, [pc, #544]	; (801483c <ip4_frag+0x27c>)
 801461a:	f000 fa4f 	bl	8014abc <iprintf>
 801461e:	f06f 0305 	mvn.w	r3, #5
 8014622:	e102      	b.n	801482a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8014624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014626:	88db      	ldrh	r3, [r3, #6]
 8014628:	b29b      	uxth	r3, r3
 801462a:	4618      	mov	r0, r3
 801462c:	f7f5 fc6e 	bl	8009f0c <lwip_htons>
 8014630:	4603      	mov	r3, r0
 8014632:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8014634:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014636:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801463a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801463e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014640:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8014644:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8014646:	68fb      	ldr	r3, [r7, #12]
 8014648:	891b      	ldrh	r3, [r3, #8]
 801464a:	3b14      	subs	r3, #20
 801464c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8014650:	e0e1      	b.n	8014816 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8014652:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014654:	00db      	lsls	r3, r3, #3
 8014656:	b29b      	uxth	r3, r3
 8014658:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801465c:	4293      	cmp	r3, r2
 801465e:	bf28      	it	cs
 8014660:	4613      	movcs	r3, r2
 8014662:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8014664:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014668:	2114      	movs	r1, #20
 801466a:	200e      	movs	r0, #14
 801466c:	f7f6 fdfa 	bl	800b264 <pbuf_alloc>
 8014670:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8014672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014674:	2b00      	cmp	r3, #0
 8014676:	f000 80d5 	beq.w	8014824 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801467a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801467c:	895b      	ldrh	r3, [r3, #10]
 801467e:	2b13      	cmp	r3, #19
 8014680:	d806      	bhi.n	8014690 <ip4_frag+0xd0>
 8014682:	4b6c      	ldr	r3, [pc, #432]	; (8014834 <ip4_frag+0x274>)
 8014684:	f44f 7249 	mov.w	r2, #804	; 0x324
 8014688:	496d      	ldr	r1, [pc, #436]	; (8014840 <ip4_frag+0x280>)
 801468a:	486c      	ldr	r0, [pc, #432]	; (801483c <ip4_frag+0x27c>)
 801468c:	f000 fa16 	bl	8014abc <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8014690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014692:	685b      	ldr	r3, [r3, #4]
 8014694:	2214      	movs	r2, #20
 8014696:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8014698:	4618      	mov	r0, r3
 801469a:	f000 f9df 	bl	8014a5c <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801469e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146a0:	685b      	ldr	r3, [r3, #4]
 80146a2:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 80146a4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80146a6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 80146aa:	e064      	b.n	8014776 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80146ac:	68fb      	ldr	r3, [r7, #12]
 80146ae:	895a      	ldrh	r2, [r3, #10]
 80146b0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80146b2:	1ad3      	subs	r3, r2, r3
 80146b4:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80146b6:	68fb      	ldr	r3, [r7, #12]
 80146b8:	895b      	ldrh	r3, [r3, #10]
 80146ba:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80146bc:	429a      	cmp	r2, r3
 80146be:	d906      	bls.n	80146ce <ip4_frag+0x10e>
 80146c0:	4b5c      	ldr	r3, [pc, #368]	; (8014834 <ip4_frag+0x274>)
 80146c2:	f240 322d 	movw	r2, #813	; 0x32d
 80146c6:	495f      	ldr	r1, [pc, #380]	; (8014844 <ip4_frag+0x284>)
 80146c8:	485c      	ldr	r0, [pc, #368]	; (801483c <ip4_frag+0x27c>)
 80146ca:	f000 f9f7 	bl	8014abc <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80146ce:	8bfa      	ldrh	r2, [r7, #30]
 80146d0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80146d4:	4293      	cmp	r3, r2
 80146d6:	bf28      	it	cs
 80146d8:	4613      	movcs	r3, r2
 80146da:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80146de:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80146e2:	2b00      	cmp	r3, #0
 80146e4:	d105      	bne.n	80146f2 <ip4_frag+0x132>
        poff = 0;
 80146e6:	2300      	movs	r3, #0
 80146e8:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80146ea:	68fb      	ldr	r3, [r7, #12]
 80146ec:	681b      	ldr	r3, [r3, #0]
 80146ee:	60fb      	str	r3, [r7, #12]
        continue;
 80146f0:	e041      	b.n	8014776 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80146f2:	f7ff ff0d 	bl	8014510 <ip_frag_alloc_pbuf_custom_ref>
 80146f6:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80146f8:	69bb      	ldr	r3, [r7, #24]
 80146fa:	2b00      	cmp	r3, #0
 80146fc:	d103      	bne.n	8014706 <ip4_frag+0x146>
        pbuf_free(rambuf);
 80146fe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014700:	f7f7 f894 	bl	800b82c <pbuf_free>
        goto memerr;
 8014704:	e08f      	b.n	8014826 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8014706:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8014708:	68fb      	ldr	r3, [r7, #12]
 801470a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801470c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801470e:	4413      	add	r3, r2
 8014710:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8014714:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8014718:	9201      	str	r2, [sp, #4]
 801471a:	9300      	str	r3, [sp, #0]
 801471c:	4603      	mov	r3, r0
 801471e:	2241      	movs	r2, #65	; 0x41
 8014720:	2000      	movs	r0, #0
 8014722:	f7f6 fec9 	bl	800b4b8 <pbuf_alloced_custom>
 8014726:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8014728:	697b      	ldr	r3, [r7, #20]
 801472a:	2b00      	cmp	r3, #0
 801472c:	d106      	bne.n	801473c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801472e:	69b8      	ldr	r0, [r7, #24]
 8014730:	f7ff fef6 	bl	8014520 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8014734:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014736:	f7f7 f879 	bl	800b82c <pbuf_free>
        goto memerr;
 801473a:	e074      	b.n	8014826 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801473c:	68f8      	ldr	r0, [r7, #12]
 801473e:	f7f7 f915 	bl	800b96c <pbuf_ref>
      pcr->original = p;
 8014742:	69bb      	ldr	r3, [r7, #24]
 8014744:	68fa      	ldr	r2, [r7, #12]
 8014746:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8014748:	69bb      	ldr	r3, [r7, #24]
 801474a:	4a3f      	ldr	r2, [pc, #252]	; (8014848 <ip4_frag+0x288>)
 801474c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801474e:	6979      	ldr	r1, [r7, #20]
 8014750:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014752:	f7f7 f92d 	bl	800b9b0 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8014756:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801475a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801475e:	1ad3      	subs	r3, r2, r3
 8014760:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8014764:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8014768:	2b00      	cmp	r3, #0
 801476a:	d004      	beq.n	8014776 <ip4_frag+0x1b6>
        poff = 0;
 801476c:	2300      	movs	r3, #0
 801476e:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8014770:	68fb      	ldr	r3, [r7, #12]
 8014772:	681b      	ldr	r3, [r3, #0]
 8014774:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8014776:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801477a:	2b00      	cmp	r3, #0
 801477c:	d196      	bne.n	80146ac <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801477e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8014780:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8014784:	4413      	add	r3, r2
 8014786:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8014788:	68bb      	ldr	r3, [r7, #8]
 801478a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801478c:	f1a3 0213 	sub.w	r2, r3, #19
 8014790:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014794:	429a      	cmp	r2, r3
 8014796:	bfcc      	ite	gt
 8014798:	2301      	movgt	r3, #1
 801479a:	2300      	movle	r3, #0
 801479c:	b2db      	uxtb	r3, r3
 801479e:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80147a0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80147a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80147a8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 80147aa:	6a3b      	ldr	r3, [r7, #32]
 80147ac:	2b00      	cmp	r3, #0
 80147ae:	d002      	beq.n	80147b6 <ip4_frag+0x1f6>
 80147b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80147b2:	2b00      	cmp	r3, #0
 80147b4:	d003      	beq.n	80147be <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80147b6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80147b8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80147bc:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80147be:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80147c0:	4618      	mov	r0, r3
 80147c2:	f7f5 fba3 	bl	8009f0c <lwip_htons>
 80147c6:	4603      	mov	r3, r0
 80147c8:	461a      	mov	r2, r3
 80147ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147cc:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80147ce:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80147d0:	3314      	adds	r3, #20
 80147d2:	b29b      	uxth	r3, r3
 80147d4:	4618      	mov	r0, r3
 80147d6:	f7f5 fb99 	bl	8009f0c <lwip_htons>
 80147da:	4603      	mov	r3, r0
 80147dc:	461a      	mov	r2, r3
 80147de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147e0:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80147e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147e4:	2200      	movs	r2, #0
 80147e6:	729a      	strb	r2, [r3, #10]
 80147e8:	2200      	movs	r2, #0
 80147ea:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80147ec:	68bb      	ldr	r3, [r7, #8]
 80147ee:	695b      	ldr	r3, [r3, #20]
 80147f0:	687a      	ldr	r2, [r7, #4]
 80147f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80147f4:	68b8      	ldr	r0, [r7, #8]
 80147f6:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80147f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80147fa:	f7f7 f817 	bl	800b82c <pbuf_free>
    left = (u16_t)(left - fragsize);
 80147fe:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014802:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014804:	1ad3      	subs	r3, r2, r3
 8014806:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801480a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801480e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014810:	4413      	add	r3, r2
 8014812:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8014816:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801481a:	2b00      	cmp	r3, #0
 801481c:	f47f af19 	bne.w	8014652 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8014820:	2300      	movs	r3, #0
 8014822:	e002      	b.n	801482a <ip4_frag+0x26a>
      goto memerr;
 8014824:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8014826:	f04f 33ff 	mov.w	r3, #4294967295
}
 801482a:	4618      	mov	r0, r3
 801482c:	3748      	adds	r7, #72	; 0x48
 801482e:	46bd      	mov	sp, r7
 8014830:	bd80      	pop	{r7, pc}
 8014832:	bf00      	nop
 8014834:	0801899c 	.word	0x0801899c
 8014838:	08018b78 	.word	0x08018b78
 801483c:	080189e4 	.word	0x080189e4
 8014840:	08018b94 	.word	0x08018b94
 8014844:	08018bb4 	.word	0x08018bb4
 8014848:	08014559 	.word	0x08014559

0801484c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801484c:	b580      	push	{r7, lr}
 801484e:	b086      	sub	sp, #24
 8014850:	af00      	add	r7, sp, #0
 8014852:	6078      	str	r0, [r7, #4]
 8014854:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8014856:	230e      	movs	r3, #14
 8014858:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801485a:	687b      	ldr	r3, [r7, #4]
 801485c:	895b      	ldrh	r3, [r3, #10]
 801485e:	2b0e      	cmp	r3, #14
 8014860:	d96e      	bls.n	8014940 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8014862:	687b      	ldr	r3, [r7, #4]
 8014864:	7bdb      	ldrb	r3, [r3, #15]
 8014866:	2b00      	cmp	r3, #0
 8014868:	d106      	bne.n	8014878 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801486a:	683b      	ldr	r3, [r7, #0]
 801486c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014870:	3301      	adds	r3, #1
 8014872:	b2da      	uxtb	r2, r3
 8014874:	687b      	ldr	r3, [r7, #4]
 8014876:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8014878:	687b      	ldr	r3, [r7, #4]
 801487a:	685b      	ldr	r3, [r3, #4]
 801487c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801487e:	693b      	ldr	r3, [r7, #16]
 8014880:	7b1a      	ldrb	r2, [r3, #12]
 8014882:	7b5b      	ldrb	r3, [r3, #13]
 8014884:	021b      	lsls	r3, r3, #8
 8014886:	4313      	orrs	r3, r2
 8014888:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801488a:	693b      	ldr	r3, [r7, #16]
 801488c:	781b      	ldrb	r3, [r3, #0]
 801488e:	f003 0301 	and.w	r3, r3, #1
 8014892:	2b00      	cmp	r3, #0
 8014894:	d023      	beq.n	80148de <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8014896:	693b      	ldr	r3, [r7, #16]
 8014898:	781b      	ldrb	r3, [r3, #0]
 801489a:	2b01      	cmp	r3, #1
 801489c:	d10f      	bne.n	80148be <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801489e:	693b      	ldr	r3, [r7, #16]
 80148a0:	785b      	ldrb	r3, [r3, #1]
 80148a2:	2b00      	cmp	r3, #0
 80148a4:	d11b      	bne.n	80148de <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80148a6:	693b      	ldr	r3, [r7, #16]
 80148a8:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80148aa:	2b5e      	cmp	r3, #94	; 0x5e
 80148ac:	d117      	bne.n	80148de <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80148ae:	687b      	ldr	r3, [r7, #4]
 80148b0:	7b5b      	ldrb	r3, [r3, #13]
 80148b2:	f043 0310 	orr.w	r3, r3, #16
 80148b6:	b2da      	uxtb	r2, r3
 80148b8:	687b      	ldr	r3, [r7, #4]
 80148ba:	735a      	strb	r2, [r3, #13]
 80148bc:	e00f      	b.n	80148de <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80148be:	693b      	ldr	r3, [r7, #16]
 80148c0:	2206      	movs	r2, #6
 80148c2:	4928      	ldr	r1, [pc, #160]	; (8014964 <ethernet_input+0x118>)
 80148c4:	4618      	mov	r0, r3
 80148c6:	f000 f8bb 	bl	8014a40 <memcmp>
 80148ca:	4603      	mov	r3, r0
 80148cc:	2b00      	cmp	r3, #0
 80148ce:	d106      	bne.n	80148de <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80148d0:	687b      	ldr	r3, [r7, #4]
 80148d2:	7b5b      	ldrb	r3, [r3, #13]
 80148d4:	f043 0308 	orr.w	r3, r3, #8
 80148d8:	b2da      	uxtb	r2, r3
 80148da:	687b      	ldr	r3, [r7, #4]
 80148dc:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80148de:	89fb      	ldrh	r3, [r7, #14]
 80148e0:	2b08      	cmp	r3, #8
 80148e2:	d003      	beq.n	80148ec <ethernet_input+0xa0>
 80148e4:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80148e8:	d014      	beq.n	8014914 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80148ea:	e032      	b.n	8014952 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80148ec:	683b      	ldr	r3, [r7, #0]
 80148ee:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80148f2:	f003 0308 	and.w	r3, r3, #8
 80148f6:	2b00      	cmp	r3, #0
 80148f8:	d024      	beq.n	8014944 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80148fa:	8afb      	ldrh	r3, [r7, #22]
 80148fc:	4619      	mov	r1, r3
 80148fe:	6878      	ldr	r0, [r7, #4]
 8014900:	f7f6 ff0e 	bl	800b720 <pbuf_remove_header>
 8014904:	4603      	mov	r3, r0
 8014906:	2b00      	cmp	r3, #0
 8014908:	d11e      	bne.n	8014948 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801490a:	6839      	ldr	r1, [r7, #0]
 801490c:	6878      	ldr	r0, [r7, #4]
 801490e:	f7fe ff27 	bl	8013760 <ip4_input>
      break;
 8014912:	e013      	b.n	801493c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8014914:	683b      	ldr	r3, [r7, #0]
 8014916:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801491a:	f003 0308 	and.w	r3, r3, #8
 801491e:	2b00      	cmp	r3, #0
 8014920:	d014      	beq.n	801494c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8014922:	8afb      	ldrh	r3, [r7, #22]
 8014924:	4619      	mov	r1, r3
 8014926:	6878      	ldr	r0, [r7, #4]
 8014928:	f7f6 fefa 	bl	800b720 <pbuf_remove_header>
 801492c:	4603      	mov	r3, r0
 801492e:	2b00      	cmp	r3, #0
 8014930:	d10e      	bne.n	8014950 <ethernet_input+0x104>
        etharp_input(p, netif);
 8014932:	6839      	ldr	r1, [r7, #0]
 8014934:	6878      	ldr	r0, [r7, #4]
 8014936:	f7fe f8a1 	bl	8012a7c <etharp_input>
      break;
 801493a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801493c:	2300      	movs	r3, #0
 801493e:	e00c      	b.n	801495a <ethernet_input+0x10e>
    goto free_and_return;
 8014940:	bf00      	nop
 8014942:	e006      	b.n	8014952 <ethernet_input+0x106>
        goto free_and_return;
 8014944:	bf00      	nop
 8014946:	e004      	b.n	8014952 <ethernet_input+0x106>
        goto free_and_return;
 8014948:	bf00      	nop
 801494a:	e002      	b.n	8014952 <ethernet_input+0x106>
        goto free_and_return;
 801494c:	bf00      	nop
 801494e:	e000      	b.n	8014952 <ethernet_input+0x106>
        goto free_and_return;
 8014950:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8014952:	6878      	ldr	r0, [r7, #4]
 8014954:	f7f6 ff6a 	bl	800b82c <pbuf_free>
  return ERR_OK;
 8014958:	2300      	movs	r3, #0
}
 801495a:	4618      	mov	r0, r3
 801495c:	3718      	adds	r7, #24
 801495e:	46bd      	mov	sp, r7
 8014960:	bd80      	pop	{r7, pc}
 8014962:	bf00      	nop
 8014964:	0801a1c8 	.word	0x0801a1c8

08014968 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8014968:	b580      	push	{r7, lr}
 801496a:	b086      	sub	sp, #24
 801496c:	af00      	add	r7, sp, #0
 801496e:	60f8      	str	r0, [r7, #12]
 8014970:	60b9      	str	r1, [r7, #8]
 8014972:	607a      	str	r2, [r7, #4]
 8014974:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8014976:	8c3b      	ldrh	r3, [r7, #32]
 8014978:	4618      	mov	r0, r3
 801497a:	f7f5 fac7 	bl	8009f0c <lwip_htons>
 801497e:	4603      	mov	r3, r0
 8014980:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8014982:	210e      	movs	r1, #14
 8014984:	68b8      	ldr	r0, [r7, #8]
 8014986:	f7f6 febb 	bl	800b700 <pbuf_add_header>
 801498a:	4603      	mov	r3, r0
 801498c:	2b00      	cmp	r3, #0
 801498e:	d125      	bne.n	80149dc <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8014990:	68bb      	ldr	r3, [r7, #8]
 8014992:	685b      	ldr	r3, [r3, #4]
 8014994:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8014996:	693b      	ldr	r3, [r7, #16]
 8014998:	8afa      	ldrh	r2, [r7, #22]
 801499a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801499c:	693b      	ldr	r3, [r7, #16]
 801499e:	2206      	movs	r2, #6
 80149a0:	6839      	ldr	r1, [r7, #0]
 80149a2:	4618      	mov	r0, r3
 80149a4:	f000 f85a 	bl	8014a5c <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80149a8:	693b      	ldr	r3, [r7, #16]
 80149aa:	3306      	adds	r3, #6
 80149ac:	2206      	movs	r2, #6
 80149ae:	6879      	ldr	r1, [r7, #4]
 80149b0:	4618      	mov	r0, r3
 80149b2:	f000 f853 	bl	8014a5c <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80149b6:	68fb      	ldr	r3, [r7, #12]
 80149b8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80149bc:	2b06      	cmp	r3, #6
 80149be:	d006      	beq.n	80149ce <ethernet_output+0x66>
 80149c0:	4b0a      	ldr	r3, [pc, #40]	; (80149ec <ethernet_output+0x84>)
 80149c2:	f44f 7299 	mov.w	r2, #306	; 0x132
 80149c6:	490a      	ldr	r1, [pc, #40]	; (80149f0 <ethernet_output+0x88>)
 80149c8:	480a      	ldr	r0, [pc, #40]	; (80149f4 <ethernet_output+0x8c>)
 80149ca:	f000 f877 	bl	8014abc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80149ce:	68fb      	ldr	r3, [r7, #12]
 80149d0:	699b      	ldr	r3, [r3, #24]
 80149d2:	68b9      	ldr	r1, [r7, #8]
 80149d4:	68f8      	ldr	r0, [r7, #12]
 80149d6:	4798      	blx	r3
 80149d8:	4603      	mov	r3, r0
 80149da:	e002      	b.n	80149e2 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80149dc:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80149de:	f06f 0301 	mvn.w	r3, #1
}
 80149e2:	4618      	mov	r0, r3
 80149e4:	3718      	adds	r7, #24
 80149e6:	46bd      	mov	sp, r7
 80149e8:	bd80      	pop	{r7, pc}
 80149ea:	bf00      	nop
 80149ec:	08018bc4 	.word	0x08018bc4
 80149f0:	08018bfc 	.word	0x08018bfc
 80149f4:	08018c30 	.word	0x08018c30

080149f8 <__libc_init_array>:
 80149f8:	b570      	push	{r4, r5, r6, lr}
 80149fa:	4d0d      	ldr	r5, [pc, #52]	; (8014a30 <__libc_init_array+0x38>)
 80149fc:	4c0d      	ldr	r4, [pc, #52]	; (8014a34 <__libc_init_array+0x3c>)
 80149fe:	1b64      	subs	r4, r4, r5
 8014a00:	10a4      	asrs	r4, r4, #2
 8014a02:	2600      	movs	r6, #0
 8014a04:	42a6      	cmp	r6, r4
 8014a06:	d109      	bne.n	8014a1c <__libc_init_array+0x24>
 8014a08:	4d0b      	ldr	r5, [pc, #44]	; (8014a38 <__libc_init_array+0x40>)
 8014a0a:	4c0c      	ldr	r4, [pc, #48]	; (8014a3c <__libc_init_array+0x44>)
 8014a0c:	f001 fa42 	bl	8015e94 <_init>
 8014a10:	1b64      	subs	r4, r4, r5
 8014a12:	10a4      	asrs	r4, r4, #2
 8014a14:	2600      	movs	r6, #0
 8014a16:	42a6      	cmp	r6, r4
 8014a18:	d105      	bne.n	8014a26 <__libc_init_array+0x2e>
 8014a1a:	bd70      	pop	{r4, r5, r6, pc}
 8014a1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8014a20:	4798      	blx	r3
 8014a22:	3601      	adds	r6, #1
 8014a24:	e7ee      	b.n	8014a04 <__libc_init_array+0xc>
 8014a26:	f855 3b04 	ldr.w	r3, [r5], #4
 8014a2a:	4798      	blx	r3
 8014a2c:	3601      	adds	r6, #1
 8014a2e:	e7f2      	b.n	8014a16 <__libc_init_array+0x1e>
 8014a30:	0801a32c 	.word	0x0801a32c
 8014a34:	0801a32c 	.word	0x0801a32c
 8014a38:	0801a32c 	.word	0x0801a32c
 8014a3c:	0801a330 	.word	0x0801a330

08014a40 <memcmp>:
 8014a40:	b530      	push	{r4, r5, lr}
 8014a42:	3901      	subs	r1, #1
 8014a44:	2400      	movs	r4, #0
 8014a46:	42a2      	cmp	r2, r4
 8014a48:	d101      	bne.n	8014a4e <memcmp+0xe>
 8014a4a:	2000      	movs	r0, #0
 8014a4c:	e005      	b.n	8014a5a <memcmp+0x1a>
 8014a4e:	5d03      	ldrb	r3, [r0, r4]
 8014a50:	3401      	adds	r4, #1
 8014a52:	5d0d      	ldrb	r5, [r1, r4]
 8014a54:	42ab      	cmp	r3, r5
 8014a56:	d0f6      	beq.n	8014a46 <memcmp+0x6>
 8014a58:	1b58      	subs	r0, r3, r5
 8014a5a:	bd30      	pop	{r4, r5, pc}

08014a5c <memcpy>:
 8014a5c:	440a      	add	r2, r1
 8014a5e:	4291      	cmp	r1, r2
 8014a60:	f100 33ff 	add.w	r3, r0, #4294967295
 8014a64:	d100      	bne.n	8014a68 <memcpy+0xc>
 8014a66:	4770      	bx	lr
 8014a68:	b510      	push	{r4, lr}
 8014a6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014a6e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014a72:	4291      	cmp	r1, r2
 8014a74:	d1f9      	bne.n	8014a6a <memcpy+0xe>
 8014a76:	bd10      	pop	{r4, pc}

08014a78 <memmove>:
 8014a78:	4288      	cmp	r0, r1
 8014a7a:	b510      	push	{r4, lr}
 8014a7c:	eb01 0402 	add.w	r4, r1, r2
 8014a80:	d902      	bls.n	8014a88 <memmove+0x10>
 8014a82:	4284      	cmp	r4, r0
 8014a84:	4623      	mov	r3, r4
 8014a86:	d807      	bhi.n	8014a98 <memmove+0x20>
 8014a88:	1e43      	subs	r3, r0, #1
 8014a8a:	42a1      	cmp	r1, r4
 8014a8c:	d008      	beq.n	8014aa0 <memmove+0x28>
 8014a8e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014a92:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014a96:	e7f8      	b.n	8014a8a <memmove+0x12>
 8014a98:	4402      	add	r2, r0
 8014a9a:	4601      	mov	r1, r0
 8014a9c:	428a      	cmp	r2, r1
 8014a9e:	d100      	bne.n	8014aa2 <memmove+0x2a>
 8014aa0:	bd10      	pop	{r4, pc}
 8014aa2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014aa6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014aaa:	e7f7      	b.n	8014a9c <memmove+0x24>

08014aac <memset>:
 8014aac:	4402      	add	r2, r0
 8014aae:	4603      	mov	r3, r0
 8014ab0:	4293      	cmp	r3, r2
 8014ab2:	d100      	bne.n	8014ab6 <memset+0xa>
 8014ab4:	4770      	bx	lr
 8014ab6:	f803 1b01 	strb.w	r1, [r3], #1
 8014aba:	e7f9      	b.n	8014ab0 <memset+0x4>

08014abc <iprintf>:
 8014abc:	b40f      	push	{r0, r1, r2, r3}
 8014abe:	4b0a      	ldr	r3, [pc, #40]	; (8014ae8 <iprintf+0x2c>)
 8014ac0:	b513      	push	{r0, r1, r4, lr}
 8014ac2:	681c      	ldr	r4, [r3, #0]
 8014ac4:	b124      	cbz	r4, 8014ad0 <iprintf+0x14>
 8014ac6:	69a3      	ldr	r3, [r4, #24]
 8014ac8:	b913      	cbnz	r3, 8014ad0 <iprintf+0x14>
 8014aca:	4620      	mov	r0, r4
 8014acc:	f000 f90c 	bl	8014ce8 <__sinit>
 8014ad0:	ab05      	add	r3, sp, #20
 8014ad2:	9a04      	ldr	r2, [sp, #16]
 8014ad4:	68a1      	ldr	r1, [r4, #8]
 8014ad6:	9301      	str	r3, [sp, #4]
 8014ad8:	4620      	mov	r0, r4
 8014ada:	f000 fbef 	bl	80152bc <_vfiprintf_r>
 8014ade:	b002      	add	sp, #8
 8014ae0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014ae4:	b004      	add	sp, #16
 8014ae6:	4770      	bx	lr
 8014ae8:	24000040 	.word	0x24000040

08014aec <rand>:
 8014aec:	4b17      	ldr	r3, [pc, #92]	; (8014b4c <rand+0x60>)
 8014aee:	b510      	push	{r4, lr}
 8014af0:	681c      	ldr	r4, [r3, #0]
 8014af2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8014af4:	b9b3      	cbnz	r3, 8014b24 <rand+0x38>
 8014af6:	2018      	movs	r0, #24
 8014af8:	f000 f9a8 	bl	8014e4c <malloc>
 8014afc:	63a0      	str	r0, [r4, #56]	; 0x38
 8014afe:	b928      	cbnz	r0, 8014b0c <rand+0x20>
 8014b00:	4602      	mov	r2, r0
 8014b02:	4b13      	ldr	r3, [pc, #76]	; (8014b50 <rand+0x64>)
 8014b04:	4813      	ldr	r0, [pc, #76]	; (8014b54 <rand+0x68>)
 8014b06:	214e      	movs	r1, #78	; 0x4e
 8014b08:	f000 f878 	bl	8014bfc <__assert_func>
 8014b0c:	4a12      	ldr	r2, [pc, #72]	; (8014b58 <rand+0x6c>)
 8014b0e:	4b13      	ldr	r3, [pc, #76]	; (8014b5c <rand+0x70>)
 8014b10:	e9c0 2300 	strd	r2, r3, [r0]
 8014b14:	4b12      	ldr	r3, [pc, #72]	; (8014b60 <rand+0x74>)
 8014b16:	6083      	str	r3, [r0, #8]
 8014b18:	230b      	movs	r3, #11
 8014b1a:	8183      	strh	r3, [r0, #12]
 8014b1c:	2201      	movs	r2, #1
 8014b1e:	2300      	movs	r3, #0
 8014b20:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8014b24:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8014b26:	480f      	ldr	r0, [pc, #60]	; (8014b64 <rand+0x78>)
 8014b28:	690a      	ldr	r2, [r1, #16]
 8014b2a:	694b      	ldr	r3, [r1, #20]
 8014b2c:	4c0e      	ldr	r4, [pc, #56]	; (8014b68 <rand+0x7c>)
 8014b2e:	4350      	muls	r0, r2
 8014b30:	fb04 0003 	mla	r0, r4, r3, r0
 8014b34:	fba2 3404 	umull	r3, r4, r2, r4
 8014b38:	1c5a      	adds	r2, r3, #1
 8014b3a:	4404      	add	r4, r0
 8014b3c:	f144 0000 	adc.w	r0, r4, #0
 8014b40:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8014b44:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8014b48:	bd10      	pop	{r4, pc}
 8014b4a:	bf00      	nop
 8014b4c:	24000040 	.word	0x24000040
 8014b50:	0801a1dc 	.word	0x0801a1dc
 8014b54:	0801a1f3 	.word	0x0801a1f3
 8014b58:	abcd330e 	.word	0xabcd330e
 8014b5c:	e66d1234 	.word	0xe66d1234
 8014b60:	0005deec 	.word	0x0005deec
 8014b64:	5851f42d 	.word	0x5851f42d
 8014b68:	4c957f2d 	.word	0x4c957f2d

08014b6c <siprintf>:
 8014b6c:	b40e      	push	{r1, r2, r3}
 8014b6e:	b500      	push	{lr}
 8014b70:	b09c      	sub	sp, #112	; 0x70
 8014b72:	ab1d      	add	r3, sp, #116	; 0x74
 8014b74:	9002      	str	r0, [sp, #8]
 8014b76:	9006      	str	r0, [sp, #24]
 8014b78:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8014b7c:	4809      	ldr	r0, [pc, #36]	; (8014ba4 <siprintf+0x38>)
 8014b7e:	9107      	str	r1, [sp, #28]
 8014b80:	9104      	str	r1, [sp, #16]
 8014b82:	4909      	ldr	r1, [pc, #36]	; (8014ba8 <siprintf+0x3c>)
 8014b84:	f853 2b04 	ldr.w	r2, [r3], #4
 8014b88:	9105      	str	r1, [sp, #20]
 8014b8a:	6800      	ldr	r0, [r0, #0]
 8014b8c:	9301      	str	r3, [sp, #4]
 8014b8e:	a902      	add	r1, sp, #8
 8014b90:	f000 fa6a 	bl	8015068 <_svfiprintf_r>
 8014b94:	9b02      	ldr	r3, [sp, #8]
 8014b96:	2200      	movs	r2, #0
 8014b98:	701a      	strb	r2, [r3, #0]
 8014b9a:	b01c      	add	sp, #112	; 0x70
 8014b9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8014ba0:	b003      	add	sp, #12
 8014ba2:	4770      	bx	lr
 8014ba4:	24000040 	.word	0x24000040
 8014ba8:	ffff0208 	.word	0xffff0208

08014bac <strchr>:
 8014bac:	b2c9      	uxtb	r1, r1
 8014bae:	4603      	mov	r3, r0
 8014bb0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014bb4:	b11a      	cbz	r2, 8014bbe <strchr+0x12>
 8014bb6:	428a      	cmp	r2, r1
 8014bb8:	d1f9      	bne.n	8014bae <strchr+0x2>
 8014bba:	4618      	mov	r0, r3
 8014bbc:	4770      	bx	lr
 8014bbe:	2900      	cmp	r1, #0
 8014bc0:	bf18      	it	ne
 8014bc2:	2300      	movne	r3, #0
 8014bc4:	e7f9      	b.n	8014bba <strchr+0xe>

08014bc6 <strcpy>:
 8014bc6:	4603      	mov	r3, r0
 8014bc8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014bcc:	f803 2b01 	strb.w	r2, [r3], #1
 8014bd0:	2a00      	cmp	r2, #0
 8014bd2:	d1f9      	bne.n	8014bc8 <strcpy+0x2>
 8014bd4:	4770      	bx	lr

08014bd6 <strncmp>:
 8014bd6:	b510      	push	{r4, lr}
 8014bd8:	b16a      	cbz	r2, 8014bf6 <strncmp+0x20>
 8014bda:	3901      	subs	r1, #1
 8014bdc:	1884      	adds	r4, r0, r2
 8014bde:	f810 3b01 	ldrb.w	r3, [r0], #1
 8014be2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8014be6:	4293      	cmp	r3, r2
 8014be8:	d103      	bne.n	8014bf2 <strncmp+0x1c>
 8014bea:	42a0      	cmp	r0, r4
 8014bec:	d001      	beq.n	8014bf2 <strncmp+0x1c>
 8014bee:	2b00      	cmp	r3, #0
 8014bf0:	d1f5      	bne.n	8014bde <strncmp+0x8>
 8014bf2:	1a98      	subs	r0, r3, r2
 8014bf4:	bd10      	pop	{r4, pc}
 8014bf6:	4610      	mov	r0, r2
 8014bf8:	e7fc      	b.n	8014bf4 <strncmp+0x1e>
	...

08014bfc <__assert_func>:
 8014bfc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014bfe:	4614      	mov	r4, r2
 8014c00:	461a      	mov	r2, r3
 8014c02:	4b09      	ldr	r3, [pc, #36]	; (8014c28 <__assert_func+0x2c>)
 8014c04:	681b      	ldr	r3, [r3, #0]
 8014c06:	4605      	mov	r5, r0
 8014c08:	68d8      	ldr	r0, [r3, #12]
 8014c0a:	b14c      	cbz	r4, 8014c20 <__assert_func+0x24>
 8014c0c:	4b07      	ldr	r3, [pc, #28]	; (8014c2c <__assert_func+0x30>)
 8014c0e:	9100      	str	r1, [sp, #0]
 8014c10:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014c14:	4906      	ldr	r1, [pc, #24]	; (8014c30 <__assert_func+0x34>)
 8014c16:	462b      	mov	r3, r5
 8014c18:	f000 f8e4 	bl	8014de4 <fiprintf>
 8014c1c:	f000 ff38 	bl	8015a90 <abort>
 8014c20:	4b04      	ldr	r3, [pc, #16]	; (8014c34 <__assert_func+0x38>)
 8014c22:	461c      	mov	r4, r3
 8014c24:	e7f3      	b.n	8014c0e <__assert_func+0x12>
 8014c26:	bf00      	nop
 8014c28:	24000040 	.word	0x24000040
 8014c2c:	0801a252 	.word	0x0801a252
 8014c30:	0801a25f 	.word	0x0801a25f
 8014c34:	0801a28d 	.word	0x0801a28d

08014c38 <std>:
 8014c38:	2300      	movs	r3, #0
 8014c3a:	b510      	push	{r4, lr}
 8014c3c:	4604      	mov	r4, r0
 8014c3e:	e9c0 3300 	strd	r3, r3, [r0]
 8014c42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014c46:	6083      	str	r3, [r0, #8]
 8014c48:	8181      	strh	r1, [r0, #12]
 8014c4a:	6643      	str	r3, [r0, #100]	; 0x64
 8014c4c:	81c2      	strh	r2, [r0, #14]
 8014c4e:	6183      	str	r3, [r0, #24]
 8014c50:	4619      	mov	r1, r3
 8014c52:	2208      	movs	r2, #8
 8014c54:	305c      	adds	r0, #92	; 0x5c
 8014c56:	f7ff ff29 	bl	8014aac <memset>
 8014c5a:	4b05      	ldr	r3, [pc, #20]	; (8014c70 <std+0x38>)
 8014c5c:	6263      	str	r3, [r4, #36]	; 0x24
 8014c5e:	4b05      	ldr	r3, [pc, #20]	; (8014c74 <std+0x3c>)
 8014c60:	62a3      	str	r3, [r4, #40]	; 0x28
 8014c62:	4b05      	ldr	r3, [pc, #20]	; (8014c78 <std+0x40>)
 8014c64:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014c66:	4b05      	ldr	r3, [pc, #20]	; (8014c7c <std+0x44>)
 8014c68:	6224      	str	r4, [r4, #32]
 8014c6a:	6323      	str	r3, [r4, #48]	; 0x30
 8014c6c:	bd10      	pop	{r4, pc}
 8014c6e:	bf00      	nop
 8014c70:	08015865 	.word	0x08015865
 8014c74:	08015887 	.word	0x08015887
 8014c78:	080158bf 	.word	0x080158bf
 8014c7c:	080158e3 	.word	0x080158e3

08014c80 <_cleanup_r>:
 8014c80:	4901      	ldr	r1, [pc, #4]	; (8014c88 <_cleanup_r+0x8>)
 8014c82:	f000 b8c1 	b.w	8014e08 <_fwalk_reent>
 8014c86:	bf00      	nop
 8014c88:	08015bcd 	.word	0x08015bcd

08014c8c <__sfmoreglue>:
 8014c8c:	b570      	push	{r4, r5, r6, lr}
 8014c8e:	1e4a      	subs	r2, r1, #1
 8014c90:	2568      	movs	r5, #104	; 0x68
 8014c92:	4355      	muls	r5, r2
 8014c94:	460e      	mov	r6, r1
 8014c96:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8014c9a:	f000 f92f 	bl	8014efc <_malloc_r>
 8014c9e:	4604      	mov	r4, r0
 8014ca0:	b140      	cbz	r0, 8014cb4 <__sfmoreglue+0x28>
 8014ca2:	2100      	movs	r1, #0
 8014ca4:	e9c0 1600 	strd	r1, r6, [r0]
 8014ca8:	300c      	adds	r0, #12
 8014caa:	60a0      	str	r0, [r4, #8]
 8014cac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8014cb0:	f7ff fefc 	bl	8014aac <memset>
 8014cb4:	4620      	mov	r0, r4
 8014cb6:	bd70      	pop	{r4, r5, r6, pc}

08014cb8 <__sfp_lock_acquire>:
 8014cb8:	4801      	ldr	r0, [pc, #4]	; (8014cc0 <__sfp_lock_acquire+0x8>)
 8014cba:	f000 b8c5 	b.w	8014e48 <__retarget_lock_acquire_recursive>
 8014cbe:	bf00      	nop
 8014cc0:	24003ca4 	.word	0x24003ca4

08014cc4 <__sfp_lock_release>:
 8014cc4:	4801      	ldr	r0, [pc, #4]	; (8014ccc <__sfp_lock_release+0x8>)
 8014cc6:	f000 b8c0 	b.w	8014e4a <__retarget_lock_release_recursive>
 8014cca:	bf00      	nop
 8014ccc:	24003ca4 	.word	0x24003ca4

08014cd0 <__sinit_lock_acquire>:
 8014cd0:	4801      	ldr	r0, [pc, #4]	; (8014cd8 <__sinit_lock_acquire+0x8>)
 8014cd2:	f000 b8b9 	b.w	8014e48 <__retarget_lock_acquire_recursive>
 8014cd6:	bf00      	nop
 8014cd8:	24003c9f 	.word	0x24003c9f

08014cdc <__sinit_lock_release>:
 8014cdc:	4801      	ldr	r0, [pc, #4]	; (8014ce4 <__sinit_lock_release+0x8>)
 8014cde:	f000 b8b4 	b.w	8014e4a <__retarget_lock_release_recursive>
 8014ce2:	bf00      	nop
 8014ce4:	24003c9f 	.word	0x24003c9f

08014ce8 <__sinit>:
 8014ce8:	b510      	push	{r4, lr}
 8014cea:	4604      	mov	r4, r0
 8014cec:	f7ff fff0 	bl	8014cd0 <__sinit_lock_acquire>
 8014cf0:	69a3      	ldr	r3, [r4, #24]
 8014cf2:	b11b      	cbz	r3, 8014cfc <__sinit+0x14>
 8014cf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014cf8:	f7ff bff0 	b.w	8014cdc <__sinit_lock_release>
 8014cfc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8014d00:	6523      	str	r3, [r4, #80]	; 0x50
 8014d02:	4b13      	ldr	r3, [pc, #76]	; (8014d50 <__sinit+0x68>)
 8014d04:	4a13      	ldr	r2, [pc, #76]	; (8014d54 <__sinit+0x6c>)
 8014d06:	681b      	ldr	r3, [r3, #0]
 8014d08:	62a2      	str	r2, [r4, #40]	; 0x28
 8014d0a:	42a3      	cmp	r3, r4
 8014d0c:	bf04      	itt	eq
 8014d0e:	2301      	moveq	r3, #1
 8014d10:	61a3      	streq	r3, [r4, #24]
 8014d12:	4620      	mov	r0, r4
 8014d14:	f000 f820 	bl	8014d58 <__sfp>
 8014d18:	6060      	str	r0, [r4, #4]
 8014d1a:	4620      	mov	r0, r4
 8014d1c:	f000 f81c 	bl	8014d58 <__sfp>
 8014d20:	60a0      	str	r0, [r4, #8]
 8014d22:	4620      	mov	r0, r4
 8014d24:	f000 f818 	bl	8014d58 <__sfp>
 8014d28:	2200      	movs	r2, #0
 8014d2a:	60e0      	str	r0, [r4, #12]
 8014d2c:	2104      	movs	r1, #4
 8014d2e:	6860      	ldr	r0, [r4, #4]
 8014d30:	f7ff ff82 	bl	8014c38 <std>
 8014d34:	68a0      	ldr	r0, [r4, #8]
 8014d36:	2201      	movs	r2, #1
 8014d38:	2109      	movs	r1, #9
 8014d3a:	f7ff ff7d 	bl	8014c38 <std>
 8014d3e:	68e0      	ldr	r0, [r4, #12]
 8014d40:	2202      	movs	r2, #2
 8014d42:	2112      	movs	r1, #18
 8014d44:	f7ff ff78 	bl	8014c38 <std>
 8014d48:	2301      	movs	r3, #1
 8014d4a:	61a3      	str	r3, [r4, #24]
 8014d4c:	e7d2      	b.n	8014cf4 <__sinit+0xc>
 8014d4e:	bf00      	nop
 8014d50:	0801a1d8 	.word	0x0801a1d8
 8014d54:	08014c81 	.word	0x08014c81

08014d58 <__sfp>:
 8014d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014d5a:	4607      	mov	r7, r0
 8014d5c:	f7ff ffac 	bl	8014cb8 <__sfp_lock_acquire>
 8014d60:	4b1e      	ldr	r3, [pc, #120]	; (8014ddc <__sfp+0x84>)
 8014d62:	681e      	ldr	r6, [r3, #0]
 8014d64:	69b3      	ldr	r3, [r6, #24]
 8014d66:	b913      	cbnz	r3, 8014d6e <__sfp+0x16>
 8014d68:	4630      	mov	r0, r6
 8014d6a:	f7ff ffbd 	bl	8014ce8 <__sinit>
 8014d6e:	3648      	adds	r6, #72	; 0x48
 8014d70:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8014d74:	3b01      	subs	r3, #1
 8014d76:	d503      	bpl.n	8014d80 <__sfp+0x28>
 8014d78:	6833      	ldr	r3, [r6, #0]
 8014d7a:	b30b      	cbz	r3, 8014dc0 <__sfp+0x68>
 8014d7c:	6836      	ldr	r6, [r6, #0]
 8014d7e:	e7f7      	b.n	8014d70 <__sfp+0x18>
 8014d80:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8014d84:	b9d5      	cbnz	r5, 8014dbc <__sfp+0x64>
 8014d86:	4b16      	ldr	r3, [pc, #88]	; (8014de0 <__sfp+0x88>)
 8014d88:	60e3      	str	r3, [r4, #12]
 8014d8a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8014d8e:	6665      	str	r5, [r4, #100]	; 0x64
 8014d90:	f000 f859 	bl	8014e46 <__retarget_lock_init_recursive>
 8014d94:	f7ff ff96 	bl	8014cc4 <__sfp_lock_release>
 8014d98:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8014d9c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8014da0:	6025      	str	r5, [r4, #0]
 8014da2:	61a5      	str	r5, [r4, #24]
 8014da4:	2208      	movs	r2, #8
 8014da6:	4629      	mov	r1, r5
 8014da8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8014dac:	f7ff fe7e 	bl	8014aac <memset>
 8014db0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8014db4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8014db8:	4620      	mov	r0, r4
 8014dba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014dbc:	3468      	adds	r4, #104	; 0x68
 8014dbe:	e7d9      	b.n	8014d74 <__sfp+0x1c>
 8014dc0:	2104      	movs	r1, #4
 8014dc2:	4638      	mov	r0, r7
 8014dc4:	f7ff ff62 	bl	8014c8c <__sfmoreglue>
 8014dc8:	4604      	mov	r4, r0
 8014dca:	6030      	str	r0, [r6, #0]
 8014dcc:	2800      	cmp	r0, #0
 8014dce:	d1d5      	bne.n	8014d7c <__sfp+0x24>
 8014dd0:	f7ff ff78 	bl	8014cc4 <__sfp_lock_release>
 8014dd4:	230c      	movs	r3, #12
 8014dd6:	603b      	str	r3, [r7, #0]
 8014dd8:	e7ee      	b.n	8014db8 <__sfp+0x60>
 8014dda:	bf00      	nop
 8014ddc:	0801a1d8 	.word	0x0801a1d8
 8014de0:	ffff0001 	.word	0xffff0001

08014de4 <fiprintf>:
 8014de4:	b40e      	push	{r1, r2, r3}
 8014de6:	b503      	push	{r0, r1, lr}
 8014de8:	4601      	mov	r1, r0
 8014dea:	ab03      	add	r3, sp, #12
 8014dec:	4805      	ldr	r0, [pc, #20]	; (8014e04 <fiprintf+0x20>)
 8014dee:	f853 2b04 	ldr.w	r2, [r3], #4
 8014df2:	6800      	ldr	r0, [r0, #0]
 8014df4:	9301      	str	r3, [sp, #4]
 8014df6:	f000 fa61 	bl	80152bc <_vfiprintf_r>
 8014dfa:	b002      	add	sp, #8
 8014dfc:	f85d eb04 	ldr.w	lr, [sp], #4
 8014e00:	b003      	add	sp, #12
 8014e02:	4770      	bx	lr
 8014e04:	24000040 	.word	0x24000040

08014e08 <_fwalk_reent>:
 8014e08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014e0c:	4606      	mov	r6, r0
 8014e0e:	4688      	mov	r8, r1
 8014e10:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8014e14:	2700      	movs	r7, #0
 8014e16:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014e1a:	f1b9 0901 	subs.w	r9, r9, #1
 8014e1e:	d505      	bpl.n	8014e2c <_fwalk_reent+0x24>
 8014e20:	6824      	ldr	r4, [r4, #0]
 8014e22:	2c00      	cmp	r4, #0
 8014e24:	d1f7      	bne.n	8014e16 <_fwalk_reent+0xe>
 8014e26:	4638      	mov	r0, r7
 8014e28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014e2c:	89ab      	ldrh	r3, [r5, #12]
 8014e2e:	2b01      	cmp	r3, #1
 8014e30:	d907      	bls.n	8014e42 <_fwalk_reent+0x3a>
 8014e32:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014e36:	3301      	adds	r3, #1
 8014e38:	d003      	beq.n	8014e42 <_fwalk_reent+0x3a>
 8014e3a:	4629      	mov	r1, r5
 8014e3c:	4630      	mov	r0, r6
 8014e3e:	47c0      	blx	r8
 8014e40:	4307      	orrs	r7, r0
 8014e42:	3568      	adds	r5, #104	; 0x68
 8014e44:	e7e9      	b.n	8014e1a <_fwalk_reent+0x12>

08014e46 <__retarget_lock_init_recursive>:
 8014e46:	4770      	bx	lr

08014e48 <__retarget_lock_acquire_recursive>:
 8014e48:	4770      	bx	lr

08014e4a <__retarget_lock_release_recursive>:
 8014e4a:	4770      	bx	lr

08014e4c <malloc>:
 8014e4c:	4b02      	ldr	r3, [pc, #8]	; (8014e58 <malloc+0xc>)
 8014e4e:	4601      	mov	r1, r0
 8014e50:	6818      	ldr	r0, [r3, #0]
 8014e52:	f000 b853 	b.w	8014efc <_malloc_r>
 8014e56:	bf00      	nop
 8014e58:	24000040 	.word	0x24000040

08014e5c <_free_r>:
 8014e5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014e5e:	2900      	cmp	r1, #0
 8014e60:	d048      	beq.n	8014ef4 <_free_r+0x98>
 8014e62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014e66:	9001      	str	r0, [sp, #4]
 8014e68:	2b00      	cmp	r3, #0
 8014e6a:	f1a1 0404 	sub.w	r4, r1, #4
 8014e6e:	bfb8      	it	lt
 8014e70:	18e4      	addlt	r4, r4, r3
 8014e72:	f000 ff5d 	bl	8015d30 <__malloc_lock>
 8014e76:	4a20      	ldr	r2, [pc, #128]	; (8014ef8 <_free_r+0x9c>)
 8014e78:	9801      	ldr	r0, [sp, #4]
 8014e7a:	6813      	ldr	r3, [r2, #0]
 8014e7c:	4615      	mov	r5, r2
 8014e7e:	b933      	cbnz	r3, 8014e8e <_free_r+0x32>
 8014e80:	6063      	str	r3, [r4, #4]
 8014e82:	6014      	str	r4, [r2, #0]
 8014e84:	b003      	add	sp, #12
 8014e86:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014e8a:	f000 bf57 	b.w	8015d3c <__malloc_unlock>
 8014e8e:	42a3      	cmp	r3, r4
 8014e90:	d90b      	bls.n	8014eaa <_free_r+0x4e>
 8014e92:	6821      	ldr	r1, [r4, #0]
 8014e94:	1862      	adds	r2, r4, r1
 8014e96:	4293      	cmp	r3, r2
 8014e98:	bf04      	itt	eq
 8014e9a:	681a      	ldreq	r2, [r3, #0]
 8014e9c:	685b      	ldreq	r3, [r3, #4]
 8014e9e:	6063      	str	r3, [r4, #4]
 8014ea0:	bf04      	itt	eq
 8014ea2:	1852      	addeq	r2, r2, r1
 8014ea4:	6022      	streq	r2, [r4, #0]
 8014ea6:	602c      	str	r4, [r5, #0]
 8014ea8:	e7ec      	b.n	8014e84 <_free_r+0x28>
 8014eaa:	461a      	mov	r2, r3
 8014eac:	685b      	ldr	r3, [r3, #4]
 8014eae:	b10b      	cbz	r3, 8014eb4 <_free_r+0x58>
 8014eb0:	42a3      	cmp	r3, r4
 8014eb2:	d9fa      	bls.n	8014eaa <_free_r+0x4e>
 8014eb4:	6811      	ldr	r1, [r2, #0]
 8014eb6:	1855      	adds	r5, r2, r1
 8014eb8:	42a5      	cmp	r5, r4
 8014eba:	d10b      	bne.n	8014ed4 <_free_r+0x78>
 8014ebc:	6824      	ldr	r4, [r4, #0]
 8014ebe:	4421      	add	r1, r4
 8014ec0:	1854      	adds	r4, r2, r1
 8014ec2:	42a3      	cmp	r3, r4
 8014ec4:	6011      	str	r1, [r2, #0]
 8014ec6:	d1dd      	bne.n	8014e84 <_free_r+0x28>
 8014ec8:	681c      	ldr	r4, [r3, #0]
 8014eca:	685b      	ldr	r3, [r3, #4]
 8014ecc:	6053      	str	r3, [r2, #4]
 8014ece:	4421      	add	r1, r4
 8014ed0:	6011      	str	r1, [r2, #0]
 8014ed2:	e7d7      	b.n	8014e84 <_free_r+0x28>
 8014ed4:	d902      	bls.n	8014edc <_free_r+0x80>
 8014ed6:	230c      	movs	r3, #12
 8014ed8:	6003      	str	r3, [r0, #0]
 8014eda:	e7d3      	b.n	8014e84 <_free_r+0x28>
 8014edc:	6825      	ldr	r5, [r4, #0]
 8014ede:	1961      	adds	r1, r4, r5
 8014ee0:	428b      	cmp	r3, r1
 8014ee2:	bf04      	itt	eq
 8014ee4:	6819      	ldreq	r1, [r3, #0]
 8014ee6:	685b      	ldreq	r3, [r3, #4]
 8014ee8:	6063      	str	r3, [r4, #4]
 8014eea:	bf04      	itt	eq
 8014eec:	1949      	addeq	r1, r1, r5
 8014eee:	6021      	streq	r1, [r4, #0]
 8014ef0:	6054      	str	r4, [r2, #4]
 8014ef2:	e7c7      	b.n	8014e84 <_free_r+0x28>
 8014ef4:	b003      	add	sp, #12
 8014ef6:	bd30      	pop	{r4, r5, pc}
 8014ef8:	24000694 	.word	0x24000694

08014efc <_malloc_r>:
 8014efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014efe:	1ccd      	adds	r5, r1, #3
 8014f00:	f025 0503 	bic.w	r5, r5, #3
 8014f04:	3508      	adds	r5, #8
 8014f06:	2d0c      	cmp	r5, #12
 8014f08:	bf38      	it	cc
 8014f0a:	250c      	movcc	r5, #12
 8014f0c:	2d00      	cmp	r5, #0
 8014f0e:	4606      	mov	r6, r0
 8014f10:	db01      	blt.n	8014f16 <_malloc_r+0x1a>
 8014f12:	42a9      	cmp	r1, r5
 8014f14:	d903      	bls.n	8014f1e <_malloc_r+0x22>
 8014f16:	230c      	movs	r3, #12
 8014f18:	6033      	str	r3, [r6, #0]
 8014f1a:	2000      	movs	r0, #0
 8014f1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014f1e:	f000 ff07 	bl	8015d30 <__malloc_lock>
 8014f22:	4921      	ldr	r1, [pc, #132]	; (8014fa8 <_malloc_r+0xac>)
 8014f24:	680a      	ldr	r2, [r1, #0]
 8014f26:	4614      	mov	r4, r2
 8014f28:	b99c      	cbnz	r4, 8014f52 <_malloc_r+0x56>
 8014f2a:	4f20      	ldr	r7, [pc, #128]	; (8014fac <_malloc_r+0xb0>)
 8014f2c:	683b      	ldr	r3, [r7, #0]
 8014f2e:	b923      	cbnz	r3, 8014f3a <_malloc_r+0x3e>
 8014f30:	4621      	mov	r1, r4
 8014f32:	4630      	mov	r0, r6
 8014f34:	f000 fc86 	bl	8015844 <_sbrk_r>
 8014f38:	6038      	str	r0, [r7, #0]
 8014f3a:	4629      	mov	r1, r5
 8014f3c:	4630      	mov	r0, r6
 8014f3e:	f000 fc81 	bl	8015844 <_sbrk_r>
 8014f42:	1c43      	adds	r3, r0, #1
 8014f44:	d123      	bne.n	8014f8e <_malloc_r+0x92>
 8014f46:	230c      	movs	r3, #12
 8014f48:	6033      	str	r3, [r6, #0]
 8014f4a:	4630      	mov	r0, r6
 8014f4c:	f000 fef6 	bl	8015d3c <__malloc_unlock>
 8014f50:	e7e3      	b.n	8014f1a <_malloc_r+0x1e>
 8014f52:	6823      	ldr	r3, [r4, #0]
 8014f54:	1b5b      	subs	r3, r3, r5
 8014f56:	d417      	bmi.n	8014f88 <_malloc_r+0x8c>
 8014f58:	2b0b      	cmp	r3, #11
 8014f5a:	d903      	bls.n	8014f64 <_malloc_r+0x68>
 8014f5c:	6023      	str	r3, [r4, #0]
 8014f5e:	441c      	add	r4, r3
 8014f60:	6025      	str	r5, [r4, #0]
 8014f62:	e004      	b.n	8014f6e <_malloc_r+0x72>
 8014f64:	6863      	ldr	r3, [r4, #4]
 8014f66:	42a2      	cmp	r2, r4
 8014f68:	bf0c      	ite	eq
 8014f6a:	600b      	streq	r3, [r1, #0]
 8014f6c:	6053      	strne	r3, [r2, #4]
 8014f6e:	4630      	mov	r0, r6
 8014f70:	f000 fee4 	bl	8015d3c <__malloc_unlock>
 8014f74:	f104 000b 	add.w	r0, r4, #11
 8014f78:	1d23      	adds	r3, r4, #4
 8014f7a:	f020 0007 	bic.w	r0, r0, #7
 8014f7e:	1ac2      	subs	r2, r0, r3
 8014f80:	d0cc      	beq.n	8014f1c <_malloc_r+0x20>
 8014f82:	1a1b      	subs	r3, r3, r0
 8014f84:	50a3      	str	r3, [r4, r2]
 8014f86:	e7c9      	b.n	8014f1c <_malloc_r+0x20>
 8014f88:	4622      	mov	r2, r4
 8014f8a:	6864      	ldr	r4, [r4, #4]
 8014f8c:	e7cc      	b.n	8014f28 <_malloc_r+0x2c>
 8014f8e:	1cc4      	adds	r4, r0, #3
 8014f90:	f024 0403 	bic.w	r4, r4, #3
 8014f94:	42a0      	cmp	r0, r4
 8014f96:	d0e3      	beq.n	8014f60 <_malloc_r+0x64>
 8014f98:	1a21      	subs	r1, r4, r0
 8014f9a:	4630      	mov	r0, r6
 8014f9c:	f000 fc52 	bl	8015844 <_sbrk_r>
 8014fa0:	3001      	adds	r0, #1
 8014fa2:	d1dd      	bne.n	8014f60 <_malloc_r+0x64>
 8014fa4:	e7cf      	b.n	8014f46 <_malloc_r+0x4a>
 8014fa6:	bf00      	nop
 8014fa8:	24000694 	.word	0x24000694
 8014fac:	24000698 	.word	0x24000698

08014fb0 <__ssputs_r>:
 8014fb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014fb4:	688e      	ldr	r6, [r1, #8]
 8014fb6:	429e      	cmp	r6, r3
 8014fb8:	4682      	mov	sl, r0
 8014fba:	460c      	mov	r4, r1
 8014fbc:	4690      	mov	r8, r2
 8014fbe:	461f      	mov	r7, r3
 8014fc0:	d838      	bhi.n	8015034 <__ssputs_r+0x84>
 8014fc2:	898a      	ldrh	r2, [r1, #12]
 8014fc4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8014fc8:	d032      	beq.n	8015030 <__ssputs_r+0x80>
 8014fca:	6825      	ldr	r5, [r4, #0]
 8014fcc:	6909      	ldr	r1, [r1, #16]
 8014fce:	eba5 0901 	sub.w	r9, r5, r1
 8014fd2:	6965      	ldr	r5, [r4, #20]
 8014fd4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014fd8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014fdc:	3301      	adds	r3, #1
 8014fde:	444b      	add	r3, r9
 8014fe0:	106d      	asrs	r5, r5, #1
 8014fe2:	429d      	cmp	r5, r3
 8014fe4:	bf38      	it	cc
 8014fe6:	461d      	movcc	r5, r3
 8014fe8:	0553      	lsls	r3, r2, #21
 8014fea:	d531      	bpl.n	8015050 <__ssputs_r+0xa0>
 8014fec:	4629      	mov	r1, r5
 8014fee:	f7ff ff85 	bl	8014efc <_malloc_r>
 8014ff2:	4606      	mov	r6, r0
 8014ff4:	b950      	cbnz	r0, 801500c <__ssputs_r+0x5c>
 8014ff6:	230c      	movs	r3, #12
 8014ff8:	f8ca 3000 	str.w	r3, [sl]
 8014ffc:	89a3      	ldrh	r3, [r4, #12]
 8014ffe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015002:	81a3      	strh	r3, [r4, #12]
 8015004:	f04f 30ff 	mov.w	r0, #4294967295
 8015008:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801500c:	6921      	ldr	r1, [r4, #16]
 801500e:	464a      	mov	r2, r9
 8015010:	f7ff fd24 	bl	8014a5c <memcpy>
 8015014:	89a3      	ldrh	r3, [r4, #12]
 8015016:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801501a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801501e:	81a3      	strh	r3, [r4, #12]
 8015020:	6126      	str	r6, [r4, #16]
 8015022:	6165      	str	r5, [r4, #20]
 8015024:	444e      	add	r6, r9
 8015026:	eba5 0509 	sub.w	r5, r5, r9
 801502a:	6026      	str	r6, [r4, #0]
 801502c:	60a5      	str	r5, [r4, #8]
 801502e:	463e      	mov	r6, r7
 8015030:	42be      	cmp	r6, r7
 8015032:	d900      	bls.n	8015036 <__ssputs_r+0x86>
 8015034:	463e      	mov	r6, r7
 8015036:	4632      	mov	r2, r6
 8015038:	6820      	ldr	r0, [r4, #0]
 801503a:	4641      	mov	r1, r8
 801503c:	f7ff fd1c 	bl	8014a78 <memmove>
 8015040:	68a3      	ldr	r3, [r4, #8]
 8015042:	6822      	ldr	r2, [r4, #0]
 8015044:	1b9b      	subs	r3, r3, r6
 8015046:	4432      	add	r2, r6
 8015048:	60a3      	str	r3, [r4, #8]
 801504a:	6022      	str	r2, [r4, #0]
 801504c:	2000      	movs	r0, #0
 801504e:	e7db      	b.n	8015008 <__ssputs_r+0x58>
 8015050:	462a      	mov	r2, r5
 8015052:	f000 fe79 	bl	8015d48 <_realloc_r>
 8015056:	4606      	mov	r6, r0
 8015058:	2800      	cmp	r0, #0
 801505a:	d1e1      	bne.n	8015020 <__ssputs_r+0x70>
 801505c:	6921      	ldr	r1, [r4, #16]
 801505e:	4650      	mov	r0, sl
 8015060:	f7ff fefc 	bl	8014e5c <_free_r>
 8015064:	e7c7      	b.n	8014ff6 <__ssputs_r+0x46>
	...

08015068 <_svfiprintf_r>:
 8015068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801506c:	4698      	mov	r8, r3
 801506e:	898b      	ldrh	r3, [r1, #12]
 8015070:	061b      	lsls	r3, r3, #24
 8015072:	b09d      	sub	sp, #116	; 0x74
 8015074:	4607      	mov	r7, r0
 8015076:	460d      	mov	r5, r1
 8015078:	4614      	mov	r4, r2
 801507a:	d50e      	bpl.n	801509a <_svfiprintf_r+0x32>
 801507c:	690b      	ldr	r3, [r1, #16]
 801507e:	b963      	cbnz	r3, 801509a <_svfiprintf_r+0x32>
 8015080:	2140      	movs	r1, #64	; 0x40
 8015082:	f7ff ff3b 	bl	8014efc <_malloc_r>
 8015086:	6028      	str	r0, [r5, #0]
 8015088:	6128      	str	r0, [r5, #16]
 801508a:	b920      	cbnz	r0, 8015096 <_svfiprintf_r+0x2e>
 801508c:	230c      	movs	r3, #12
 801508e:	603b      	str	r3, [r7, #0]
 8015090:	f04f 30ff 	mov.w	r0, #4294967295
 8015094:	e0d1      	b.n	801523a <_svfiprintf_r+0x1d2>
 8015096:	2340      	movs	r3, #64	; 0x40
 8015098:	616b      	str	r3, [r5, #20]
 801509a:	2300      	movs	r3, #0
 801509c:	9309      	str	r3, [sp, #36]	; 0x24
 801509e:	2320      	movs	r3, #32
 80150a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80150a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80150a8:	2330      	movs	r3, #48	; 0x30
 80150aa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8015254 <_svfiprintf_r+0x1ec>
 80150ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80150b2:	f04f 0901 	mov.w	r9, #1
 80150b6:	4623      	mov	r3, r4
 80150b8:	469a      	mov	sl, r3
 80150ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80150be:	b10a      	cbz	r2, 80150c4 <_svfiprintf_r+0x5c>
 80150c0:	2a25      	cmp	r2, #37	; 0x25
 80150c2:	d1f9      	bne.n	80150b8 <_svfiprintf_r+0x50>
 80150c4:	ebba 0b04 	subs.w	fp, sl, r4
 80150c8:	d00b      	beq.n	80150e2 <_svfiprintf_r+0x7a>
 80150ca:	465b      	mov	r3, fp
 80150cc:	4622      	mov	r2, r4
 80150ce:	4629      	mov	r1, r5
 80150d0:	4638      	mov	r0, r7
 80150d2:	f7ff ff6d 	bl	8014fb0 <__ssputs_r>
 80150d6:	3001      	adds	r0, #1
 80150d8:	f000 80aa 	beq.w	8015230 <_svfiprintf_r+0x1c8>
 80150dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80150de:	445a      	add	r2, fp
 80150e0:	9209      	str	r2, [sp, #36]	; 0x24
 80150e2:	f89a 3000 	ldrb.w	r3, [sl]
 80150e6:	2b00      	cmp	r3, #0
 80150e8:	f000 80a2 	beq.w	8015230 <_svfiprintf_r+0x1c8>
 80150ec:	2300      	movs	r3, #0
 80150ee:	f04f 32ff 	mov.w	r2, #4294967295
 80150f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80150f6:	f10a 0a01 	add.w	sl, sl, #1
 80150fa:	9304      	str	r3, [sp, #16]
 80150fc:	9307      	str	r3, [sp, #28]
 80150fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015102:	931a      	str	r3, [sp, #104]	; 0x68
 8015104:	4654      	mov	r4, sl
 8015106:	2205      	movs	r2, #5
 8015108:	f814 1b01 	ldrb.w	r1, [r4], #1
 801510c:	4851      	ldr	r0, [pc, #324]	; (8015254 <_svfiprintf_r+0x1ec>)
 801510e:	f7eb f8ff 	bl	8000310 <memchr>
 8015112:	9a04      	ldr	r2, [sp, #16]
 8015114:	b9d8      	cbnz	r0, 801514e <_svfiprintf_r+0xe6>
 8015116:	06d0      	lsls	r0, r2, #27
 8015118:	bf44      	itt	mi
 801511a:	2320      	movmi	r3, #32
 801511c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015120:	0711      	lsls	r1, r2, #28
 8015122:	bf44      	itt	mi
 8015124:	232b      	movmi	r3, #43	; 0x2b
 8015126:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801512a:	f89a 3000 	ldrb.w	r3, [sl]
 801512e:	2b2a      	cmp	r3, #42	; 0x2a
 8015130:	d015      	beq.n	801515e <_svfiprintf_r+0xf6>
 8015132:	9a07      	ldr	r2, [sp, #28]
 8015134:	4654      	mov	r4, sl
 8015136:	2000      	movs	r0, #0
 8015138:	f04f 0c0a 	mov.w	ip, #10
 801513c:	4621      	mov	r1, r4
 801513e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015142:	3b30      	subs	r3, #48	; 0x30
 8015144:	2b09      	cmp	r3, #9
 8015146:	d94e      	bls.n	80151e6 <_svfiprintf_r+0x17e>
 8015148:	b1b0      	cbz	r0, 8015178 <_svfiprintf_r+0x110>
 801514a:	9207      	str	r2, [sp, #28]
 801514c:	e014      	b.n	8015178 <_svfiprintf_r+0x110>
 801514e:	eba0 0308 	sub.w	r3, r0, r8
 8015152:	fa09 f303 	lsl.w	r3, r9, r3
 8015156:	4313      	orrs	r3, r2
 8015158:	9304      	str	r3, [sp, #16]
 801515a:	46a2      	mov	sl, r4
 801515c:	e7d2      	b.n	8015104 <_svfiprintf_r+0x9c>
 801515e:	9b03      	ldr	r3, [sp, #12]
 8015160:	1d19      	adds	r1, r3, #4
 8015162:	681b      	ldr	r3, [r3, #0]
 8015164:	9103      	str	r1, [sp, #12]
 8015166:	2b00      	cmp	r3, #0
 8015168:	bfbb      	ittet	lt
 801516a:	425b      	neglt	r3, r3
 801516c:	f042 0202 	orrlt.w	r2, r2, #2
 8015170:	9307      	strge	r3, [sp, #28]
 8015172:	9307      	strlt	r3, [sp, #28]
 8015174:	bfb8      	it	lt
 8015176:	9204      	strlt	r2, [sp, #16]
 8015178:	7823      	ldrb	r3, [r4, #0]
 801517a:	2b2e      	cmp	r3, #46	; 0x2e
 801517c:	d10c      	bne.n	8015198 <_svfiprintf_r+0x130>
 801517e:	7863      	ldrb	r3, [r4, #1]
 8015180:	2b2a      	cmp	r3, #42	; 0x2a
 8015182:	d135      	bne.n	80151f0 <_svfiprintf_r+0x188>
 8015184:	9b03      	ldr	r3, [sp, #12]
 8015186:	1d1a      	adds	r2, r3, #4
 8015188:	681b      	ldr	r3, [r3, #0]
 801518a:	9203      	str	r2, [sp, #12]
 801518c:	2b00      	cmp	r3, #0
 801518e:	bfb8      	it	lt
 8015190:	f04f 33ff 	movlt.w	r3, #4294967295
 8015194:	3402      	adds	r4, #2
 8015196:	9305      	str	r3, [sp, #20]
 8015198:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8015264 <_svfiprintf_r+0x1fc>
 801519c:	7821      	ldrb	r1, [r4, #0]
 801519e:	2203      	movs	r2, #3
 80151a0:	4650      	mov	r0, sl
 80151a2:	f7eb f8b5 	bl	8000310 <memchr>
 80151a6:	b140      	cbz	r0, 80151ba <_svfiprintf_r+0x152>
 80151a8:	2340      	movs	r3, #64	; 0x40
 80151aa:	eba0 000a 	sub.w	r0, r0, sl
 80151ae:	fa03 f000 	lsl.w	r0, r3, r0
 80151b2:	9b04      	ldr	r3, [sp, #16]
 80151b4:	4303      	orrs	r3, r0
 80151b6:	3401      	adds	r4, #1
 80151b8:	9304      	str	r3, [sp, #16]
 80151ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80151be:	4826      	ldr	r0, [pc, #152]	; (8015258 <_svfiprintf_r+0x1f0>)
 80151c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80151c4:	2206      	movs	r2, #6
 80151c6:	f7eb f8a3 	bl	8000310 <memchr>
 80151ca:	2800      	cmp	r0, #0
 80151cc:	d038      	beq.n	8015240 <_svfiprintf_r+0x1d8>
 80151ce:	4b23      	ldr	r3, [pc, #140]	; (801525c <_svfiprintf_r+0x1f4>)
 80151d0:	bb1b      	cbnz	r3, 801521a <_svfiprintf_r+0x1b2>
 80151d2:	9b03      	ldr	r3, [sp, #12]
 80151d4:	3307      	adds	r3, #7
 80151d6:	f023 0307 	bic.w	r3, r3, #7
 80151da:	3308      	adds	r3, #8
 80151dc:	9303      	str	r3, [sp, #12]
 80151de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80151e0:	4433      	add	r3, r6
 80151e2:	9309      	str	r3, [sp, #36]	; 0x24
 80151e4:	e767      	b.n	80150b6 <_svfiprintf_r+0x4e>
 80151e6:	fb0c 3202 	mla	r2, ip, r2, r3
 80151ea:	460c      	mov	r4, r1
 80151ec:	2001      	movs	r0, #1
 80151ee:	e7a5      	b.n	801513c <_svfiprintf_r+0xd4>
 80151f0:	2300      	movs	r3, #0
 80151f2:	3401      	adds	r4, #1
 80151f4:	9305      	str	r3, [sp, #20]
 80151f6:	4619      	mov	r1, r3
 80151f8:	f04f 0c0a 	mov.w	ip, #10
 80151fc:	4620      	mov	r0, r4
 80151fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015202:	3a30      	subs	r2, #48	; 0x30
 8015204:	2a09      	cmp	r2, #9
 8015206:	d903      	bls.n	8015210 <_svfiprintf_r+0x1a8>
 8015208:	2b00      	cmp	r3, #0
 801520a:	d0c5      	beq.n	8015198 <_svfiprintf_r+0x130>
 801520c:	9105      	str	r1, [sp, #20]
 801520e:	e7c3      	b.n	8015198 <_svfiprintf_r+0x130>
 8015210:	fb0c 2101 	mla	r1, ip, r1, r2
 8015214:	4604      	mov	r4, r0
 8015216:	2301      	movs	r3, #1
 8015218:	e7f0      	b.n	80151fc <_svfiprintf_r+0x194>
 801521a:	ab03      	add	r3, sp, #12
 801521c:	9300      	str	r3, [sp, #0]
 801521e:	462a      	mov	r2, r5
 8015220:	4b0f      	ldr	r3, [pc, #60]	; (8015260 <_svfiprintf_r+0x1f8>)
 8015222:	a904      	add	r1, sp, #16
 8015224:	4638      	mov	r0, r7
 8015226:	f3af 8000 	nop.w
 801522a:	1c42      	adds	r2, r0, #1
 801522c:	4606      	mov	r6, r0
 801522e:	d1d6      	bne.n	80151de <_svfiprintf_r+0x176>
 8015230:	89ab      	ldrh	r3, [r5, #12]
 8015232:	065b      	lsls	r3, r3, #25
 8015234:	f53f af2c 	bmi.w	8015090 <_svfiprintf_r+0x28>
 8015238:	9809      	ldr	r0, [sp, #36]	; 0x24
 801523a:	b01d      	add	sp, #116	; 0x74
 801523c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015240:	ab03      	add	r3, sp, #12
 8015242:	9300      	str	r3, [sp, #0]
 8015244:	462a      	mov	r2, r5
 8015246:	4b06      	ldr	r3, [pc, #24]	; (8015260 <_svfiprintf_r+0x1f8>)
 8015248:	a904      	add	r1, sp, #16
 801524a:	4638      	mov	r0, r7
 801524c:	f000 f9d4 	bl	80155f8 <_printf_i>
 8015250:	e7eb      	b.n	801522a <_svfiprintf_r+0x1c2>
 8015252:	bf00      	nop
 8015254:	0801a2f0 	.word	0x0801a2f0
 8015258:	0801a2fa 	.word	0x0801a2fa
 801525c:	00000000 	.word	0x00000000
 8015260:	08014fb1 	.word	0x08014fb1
 8015264:	0801a2f6 	.word	0x0801a2f6

08015268 <__sfputc_r>:
 8015268:	6893      	ldr	r3, [r2, #8]
 801526a:	3b01      	subs	r3, #1
 801526c:	2b00      	cmp	r3, #0
 801526e:	b410      	push	{r4}
 8015270:	6093      	str	r3, [r2, #8]
 8015272:	da08      	bge.n	8015286 <__sfputc_r+0x1e>
 8015274:	6994      	ldr	r4, [r2, #24]
 8015276:	42a3      	cmp	r3, r4
 8015278:	db01      	blt.n	801527e <__sfputc_r+0x16>
 801527a:	290a      	cmp	r1, #10
 801527c:	d103      	bne.n	8015286 <__sfputc_r+0x1e>
 801527e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015282:	f000 bb33 	b.w	80158ec <__swbuf_r>
 8015286:	6813      	ldr	r3, [r2, #0]
 8015288:	1c58      	adds	r0, r3, #1
 801528a:	6010      	str	r0, [r2, #0]
 801528c:	7019      	strb	r1, [r3, #0]
 801528e:	4608      	mov	r0, r1
 8015290:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015294:	4770      	bx	lr

08015296 <__sfputs_r>:
 8015296:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015298:	4606      	mov	r6, r0
 801529a:	460f      	mov	r7, r1
 801529c:	4614      	mov	r4, r2
 801529e:	18d5      	adds	r5, r2, r3
 80152a0:	42ac      	cmp	r4, r5
 80152a2:	d101      	bne.n	80152a8 <__sfputs_r+0x12>
 80152a4:	2000      	movs	r0, #0
 80152a6:	e007      	b.n	80152b8 <__sfputs_r+0x22>
 80152a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80152ac:	463a      	mov	r2, r7
 80152ae:	4630      	mov	r0, r6
 80152b0:	f7ff ffda 	bl	8015268 <__sfputc_r>
 80152b4:	1c43      	adds	r3, r0, #1
 80152b6:	d1f3      	bne.n	80152a0 <__sfputs_r+0xa>
 80152b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080152bc <_vfiprintf_r>:
 80152bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80152c0:	460d      	mov	r5, r1
 80152c2:	b09d      	sub	sp, #116	; 0x74
 80152c4:	4614      	mov	r4, r2
 80152c6:	4698      	mov	r8, r3
 80152c8:	4606      	mov	r6, r0
 80152ca:	b118      	cbz	r0, 80152d4 <_vfiprintf_r+0x18>
 80152cc:	6983      	ldr	r3, [r0, #24]
 80152ce:	b90b      	cbnz	r3, 80152d4 <_vfiprintf_r+0x18>
 80152d0:	f7ff fd0a 	bl	8014ce8 <__sinit>
 80152d4:	4b89      	ldr	r3, [pc, #548]	; (80154fc <_vfiprintf_r+0x240>)
 80152d6:	429d      	cmp	r5, r3
 80152d8:	d11b      	bne.n	8015312 <_vfiprintf_r+0x56>
 80152da:	6875      	ldr	r5, [r6, #4]
 80152dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80152de:	07d9      	lsls	r1, r3, #31
 80152e0:	d405      	bmi.n	80152ee <_vfiprintf_r+0x32>
 80152e2:	89ab      	ldrh	r3, [r5, #12]
 80152e4:	059a      	lsls	r2, r3, #22
 80152e6:	d402      	bmi.n	80152ee <_vfiprintf_r+0x32>
 80152e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80152ea:	f7ff fdad 	bl	8014e48 <__retarget_lock_acquire_recursive>
 80152ee:	89ab      	ldrh	r3, [r5, #12]
 80152f0:	071b      	lsls	r3, r3, #28
 80152f2:	d501      	bpl.n	80152f8 <_vfiprintf_r+0x3c>
 80152f4:	692b      	ldr	r3, [r5, #16]
 80152f6:	b9eb      	cbnz	r3, 8015334 <_vfiprintf_r+0x78>
 80152f8:	4629      	mov	r1, r5
 80152fa:	4630      	mov	r0, r6
 80152fc:	f000 fb5a 	bl	80159b4 <__swsetup_r>
 8015300:	b1c0      	cbz	r0, 8015334 <_vfiprintf_r+0x78>
 8015302:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015304:	07dc      	lsls	r4, r3, #31
 8015306:	d50e      	bpl.n	8015326 <_vfiprintf_r+0x6a>
 8015308:	f04f 30ff 	mov.w	r0, #4294967295
 801530c:	b01d      	add	sp, #116	; 0x74
 801530e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015312:	4b7b      	ldr	r3, [pc, #492]	; (8015500 <_vfiprintf_r+0x244>)
 8015314:	429d      	cmp	r5, r3
 8015316:	d101      	bne.n	801531c <_vfiprintf_r+0x60>
 8015318:	68b5      	ldr	r5, [r6, #8]
 801531a:	e7df      	b.n	80152dc <_vfiprintf_r+0x20>
 801531c:	4b79      	ldr	r3, [pc, #484]	; (8015504 <_vfiprintf_r+0x248>)
 801531e:	429d      	cmp	r5, r3
 8015320:	bf08      	it	eq
 8015322:	68f5      	ldreq	r5, [r6, #12]
 8015324:	e7da      	b.n	80152dc <_vfiprintf_r+0x20>
 8015326:	89ab      	ldrh	r3, [r5, #12]
 8015328:	0598      	lsls	r0, r3, #22
 801532a:	d4ed      	bmi.n	8015308 <_vfiprintf_r+0x4c>
 801532c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801532e:	f7ff fd8c 	bl	8014e4a <__retarget_lock_release_recursive>
 8015332:	e7e9      	b.n	8015308 <_vfiprintf_r+0x4c>
 8015334:	2300      	movs	r3, #0
 8015336:	9309      	str	r3, [sp, #36]	; 0x24
 8015338:	2320      	movs	r3, #32
 801533a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801533e:	f8cd 800c 	str.w	r8, [sp, #12]
 8015342:	2330      	movs	r3, #48	; 0x30
 8015344:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8015508 <_vfiprintf_r+0x24c>
 8015348:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801534c:	f04f 0901 	mov.w	r9, #1
 8015350:	4623      	mov	r3, r4
 8015352:	469a      	mov	sl, r3
 8015354:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015358:	b10a      	cbz	r2, 801535e <_vfiprintf_r+0xa2>
 801535a:	2a25      	cmp	r2, #37	; 0x25
 801535c:	d1f9      	bne.n	8015352 <_vfiprintf_r+0x96>
 801535e:	ebba 0b04 	subs.w	fp, sl, r4
 8015362:	d00b      	beq.n	801537c <_vfiprintf_r+0xc0>
 8015364:	465b      	mov	r3, fp
 8015366:	4622      	mov	r2, r4
 8015368:	4629      	mov	r1, r5
 801536a:	4630      	mov	r0, r6
 801536c:	f7ff ff93 	bl	8015296 <__sfputs_r>
 8015370:	3001      	adds	r0, #1
 8015372:	f000 80aa 	beq.w	80154ca <_vfiprintf_r+0x20e>
 8015376:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015378:	445a      	add	r2, fp
 801537a:	9209      	str	r2, [sp, #36]	; 0x24
 801537c:	f89a 3000 	ldrb.w	r3, [sl]
 8015380:	2b00      	cmp	r3, #0
 8015382:	f000 80a2 	beq.w	80154ca <_vfiprintf_r+0x20e>
 8015386:	2300      	movs	r3, #0
 8015388:	f04f 32ff 	mov.w	r2, #4294967295
 801538c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015390:	f10a 0a01 	add.w	sl, sl, #1
 8015394:	9304      	str	r3, [sp, #16]
 8015396:	9307      	str	r3, [sp, #28]
 8015398:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801539c:	931a      	str	r3, [sp, #104]	; 0x68
 801539e:	4654      	mov	r4, sl
 80153a0:	2205      	movs	r2, #5
 80153a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80153a6:	4858      	ldr	r0, [pc, #352]	; (8015508 <_vfiprintf_r+0x24c>)
 80153a8:	f7ea ffb2 	bl	8000310 <memchr>
 80153ac:	9a04      	ldr	r2, [sp, #16]
 80153ae:	b9d8      	cbnz	r0, 80153e8 <_vfiprintf_r+0x12c>
 80153b0:	06d1      	lsls	r1, r2, #27
 80153b2:	bf44      	itt	mi
 80153b4:	2320      	movmi	r3, #32
 80153b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80153ba:	0713      	lsls	r3, r2, #28
 80153bc:	bf44      	itt	mi
 80153be:	232b      	movmi	r3, #43	; 0x2b
 80153c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80153c4:	f89a 3000 	ldrb.w	r3, [sl]
 80153c8:	2b2a      	cmp	r3, #42	; 0x2a
 80153ca:	d015      	beq.n	80153f8 <_vfiprintf_r+0x13c>
 80153cc:	9a07      	ldr	r2, [sp, #28]
 80153ce:	4654      	mov	r4, sl
 80153d0:	2000      	movs	r0, #0
 80153d2:	f04f 0c0a 	mov.w	ip, #10
 80153d6:	4621      	mov	r1, r4
 80153d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80153dc:	3b30      	subs	r3, #48	; 0x30
 80153de:	2b09      	cmp	r3, #9
 80153e0:	d94e      	bls.n	8015480 <_vfiprintf_r+0x1c4>
 80153e2:	b1b0      	cbz	r0, 8015412 <_vfiprintf_r+0x156>
 80153e4:	9207      	str	r2, [sp, #28]
 80153e6:	e014      	b.n	8015412 <_vfiprintf_r+0x156>
 80153e8:	eba0 0308 	sub.w	r3, r0, r8
 80153ec:	fa09 f303 	lsl.w	r3, r9, r3
 80153f0:	4313      	orrs	r3, r2
 80153f2:	9304      	str	r3, [sp, #16]
 80153f4:	46a2      	mov	sl, r4
 80153f6:	e7d2      	b.n	801539e <_vfiprintf_r+0xe2>
 80153f8:	9b03      	ldr	r3, [sp, #12]
 80153fa:	1d19      	adds	r1, r3, #4
 80153fc:	681b      	ldr	r3, [r3, #0]
 80153fe:	9103      	str	r1, [sp, #12]
 8015400:	2b00      	cmp	r3, #0
 8015402:	bfbb      	ittet	lt
 8015404:	425b      	neglt	r3, r3
 8015406:	f042 0202 	orrlt.w	r2, r2, #2
 801540a:	9307      	strge	r3, [sp, #28]
 801540c:	9307      	strlt	r3, [sp, #28]
 801540e:	bfb8      	it	lt
 8015410:	9204      	strlt	r2, [sp, #16]
 8015412:	7823      	ldrb	r3, [r4, #0]
 8015414:	2b2e      	cmp	r3, #46	; 0x2e
 8015416:	d10c      	bne.n	8015432 <_vfiprintf_r+0x176>
 8015418:	7863      	ldrb	r3, [r4, #1]
 801541a:	2b2a      	cmp	r3, #42	; 0x2a
 801541c:	d135      	bne.n	801548a <_vfiprintf_r+0x1ce>
 801541e:	9b03      	ldr	r3, [sp, #12]
 8015420:	1d1a      	adds	r2, r3, #4
 8015422:	681b      	ldr	r3, [r3, #0]
 8015424:	9203      	str	r2, [sp, #12]
 8015426:	2b00      	cmp	r3, #0
 8015428:	bfb8      	it	lt
 801542a:	f04f 33ff 	movlt.w	r3, #4294967295
 801542e:	3402      	adds	r4, #2
 8015430:	9305      	str	r3, [sp, #20]
 8015432:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8015518 <_vfiprintf_r+0x25c>
 8015436:	7821      	ldrb	r1, [r4, #0]
 8015438:	2203      	movs	r2, #3
 801543a:	4650      	mov	r0, sl
 801543c:	f7ea ff68 	bl	8000310 <memchr>
 8015440:	b140      	cbz	r0, 8015454 <_vfiprintf_r+0x198>
 8015442:	2340      	movs	r3, #64	; 0x40
 8015444:	eba0 000a 	sub.w	r0, r0, sl
 8015448:	fa03 f000 	lsl.w	r0, r3, r0
 801544c:	9b04      	ldr	r3, [sp, #16]
 801544e:	4303      	orrs	r3, r0
 8015450:	3401      	adds	r4, #1
 8015452:	9304      	str	r3, [sp, #16]
 8015454:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015458:	482c      	ldr	r0, [pc, #176]	; (801550c <_vfiprintf_r+0x250>)
 801545a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801545e:	2206      	movs	r2, #6
 8015460:	f7ea ff56 	bl	8000310 <memchr>
 8015464:	2800      	cmp	r0, #0
 8015466:	d03f      	beq.n	80154e8 <_vfiprintf_r+0x22c>
 8015468:	4b29      	ldr	r3, [pc, #164]	; (8015510 <_vfiprintf_r+0x254>)
 801546a:	bb1b      	cbnz	r3, 80154b4 <_vfiprintf_r+0x1f8>
 801546c:	9b03      	ldr	r3, [sp, #12]
 801546e:	3307      	adds	r3, #7
 8015470:	f023 0307 	bic.w	r3, r3, #7
 8015474:	3308      	adds	r3, #8
 8015476:	9303      	str	r3, [sp, #12]
 8015478:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801547a:	443b      	add	r3, r7
 801547c:	9309      	str	r3, [sp, #36]	; 0x24
 801547e:	e767      	b.n	8015350 <_vfiprintf_r+0x94>
 8015480:	fb0c 3202 	mla	r2, ip, r2, r3
 8015484:	460c      	mov	r4, r1
 8015486:	2001      	movs	r0, #1
 8015488:	e7a5      	b.n	80153d6 <_vfiprintf_r+0x11a>
 801548a:	2300      	movs	r3, #0
 801548c:	3401      	adds	r4, #1
 801548e:	9305      	str	r3, [sp, #20]
 8015490:	4619      	mov	r1, r3
 8015492:	f04f 0c0a 	mov.w	ip, #10
 8015496:	4620      	mov	r0, r4
 8015498:	f810 2b01 	ldrb.w	r2, [r0], #1
 801549c:	3a30      	subs	r2, #48	; 0x30
 801549e:	2a09      	cmp	r2, #9
 80154a0:	d903      	bls.n	80154aa <_vfiprintf_r+0x1ee>
 80154a2:	2b00      	cmp	r3, #0
 80154a4:	d0c5      	beq.n	8015432 <_vfiprintf_r+0x176>
 80154a6:	9105      	str	r1, [sp, #20]
 80154a8:	e7c3      	b.n	8015432 <_vfiprintf_r+0x176>
 80154aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80154ae:	4604      	mov	r4, r0
 80154b0:	2301      	movs	r3, #1
 80154b2:	e7f0      	b.n	8015496 <_vfiprintf_r+0x1da>
 80154b4:	ab03      	add	r3, sp, #12
 80154b6:	9300      	str	r3, [sp, #0]
 80154b8:	462a      	mov	r2, r5
 80154ba:	4b16      	ldr	r3, [pc, #88]	; (8015514 <_vfiprintf_r+0x258>)
 80154bc:	a904      	add	r1, sp, #16
 80154be:	4630      	mov	r0, r6
 80154c0:	f3af 8000 	nop.w
 80154c4:	4607      	mov	r7, r0
 80154c6:	1c78      	adds	r0, r7, #1
 80154c8:	d1d6      	bne.n	8015478 <_vfiprintf_r+0x1bc>
 80154ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80154cc:	07d9      	lsls	r1, r3, #31
 80154ce:	d405      	bmi.n	80154dc <_vfiprintf_r+0x220>
 80154d0:	89ab      	ldrh	r3, [r5, #12]
 80154d2:	059a      	lsls	r2, r3, #22
 80154d4:	d402      	bmi.n	80154dc <_vfiprintf_r+0x220>
 80154d6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80154d8:	f7ff fcb7 	bl	8014e4a <__retarget_lock_release_recursive>
 80154dc:	89ab      	ldrh	r3, [r5, #12]
 80154de:	065b      	lsls	r3, r3, #25
 80154e0:	f53f af12 	bmi.w	8015308 <_vfiprintf_r+0x4c>
 80154e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80154e6:	e711      	b.n	801530c <_vfiprintf_r+0x50>
 80154e8:	ab03      	add	r3, sp, #12
 80154ea:	9300      	str	r3, [sp, #0]
 80154ec:	462a      	mov	r2, r5
 80154ee:	4b09      	ldr	r3, [pc, #36]	; (8015514 <_vfiprintf_r+0x258>)
 80154f0:	a904      	add	r1, sp, #16
 80154f2:	4630      	mov	r0, r6
 80154f4:	f000 f880 	bl	80155f8 <_printf_i>
 80154f8:	e7e4      	b.n	80154c4 <_vfiprintf_r+0x208>
 80154fa:	bf00      	nop
 80154fc:	0801a2b0 	.word	0x0801a2b0
 8015500:	0801a2d0 	.word	0x0801a2d0
 8015504:	0801a290 	.word	0x0801a290
 8015508:	0801a2f0 	.word	0x0801a2f0
 801550c:	0801a2fa 	.word	0x0801a2fa
 8015510:	00000000 	.word	0x00000000
 8015514:	08015297 	.word	0x08015297
 8015518:	0801a2f6 	.word	0x0801a2f6

0801551c <_printf_common>:
 801551c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015520:	4616      	mov	r6, r2
 8015522:	4699      	mov	r9, r3
 8015524:	688a      	ldr	r2, [r1, #8]
 8015526:	690b      	ldr	r3, [r1, #16]
 8015528:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801552c:	4293      	cmp	r3, r2
 801552e:	bfb8      	it	lt
 8015530:	4613      	movlt	r3, r2
 8015532:	6033      	str	r3, [r6, #0]
 8015534:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015538:	4607      	mov	r7, r0
 801553a:	460c      	mov	r4, r1
 801553c:	b10a      	cbz	r2, 8015542 <_printf_common+0x26>
 801553e:	3301      	adds	r3, #1
 8015540:	6033      	str	r3, [r6, #0]
 8015542:	6823      	ldr	r3, [r4, #0]
 8015544:	0699      	lsls	r1, r3, #26
 8015546:	bf42      	ittt	mi
 8015548:	6833      	ldrmi	r3, [r6, #0]
 801554a:	3302      	addmi	r3, #2
 801554c:	6033      	strmi	r3, [r6, #0]
 801554e:	6825      	ldr	r5, [r4, #0]
 8015550:	f015 0506 	ands.w	r5, r5, #6
 8015554:	d106      	bne.n	8015564 <_printf_common+0x48>
 8015556:	f104 0a19 	add.w	sl, r4, #25
 801555a:	68e3      	ldr	r3, [r4, #12]
 801555c:	6832      	ldr	r2, [r6, #0]
 801555e:	1a9b      	subs	r3, r3, r2
 8015560:	42ab      	cmp	r3, r5
 8015562:	dc26      	bgt.n	80155b2 <_printf_common+0x96>
 8015564:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8015568:	1e13      	subs	r3, r2, #0
 801556a:	6822      	ldr	r2, [r4, #0]
 801556c:	bf18      	it	ne
 801556e:	2301      	movne	r3, #1
 8015570:	0692      	lsls	r2, r2, #26
 8015572:	d42b      	bmi.n	80155cc <_printf_common+0xb0>
 8015574:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015578:	4649      	mov	r1, r9
 801557a:	4638      	mov	r0, r7
 801557c:	47c0      	blx	r8
 801557e:	3001      	adds	r0, #1
 8015580:	d01e      	beq.n	80155c0 <_printf_common+0xa4>
 8015582:	6823      	ldr	r3, [r4, #0]
 8015584:	68e5      	ldr	r5, [r4, #12]
 8015586:	6832      	ldr	r2, [r6, #0]
 8015588:	f003 0306 	and.w	r3, r3, #6
 801558c:	2b04      	cmp	r3, #4
 801558e:	bf08      	it	eq
 8015590:	1aad      	subeq	r5, r5, r2
 8015592:	68a3      	ldr	r3, [r4, #8]
 8015594:	6922      	ldr	r2, [r4, #16]
 8015596:	bf0c      	ite	eq
 8015598:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801559c:	2500      	movne	r5, #0
 801559e:	4293      	cmp	r3, r2
 80155a0:	bfc4      	itt	gt
 80155a2:	1a9b      	subgt	r3, r3, r2
 80155a4:	18ed      	addgt	r5, r5, r3
 80155a6:	2600      	movs	r6, #0
 80155a8:	341a      	adds	r4, #26
 80155aa:	42b5      	cmp	r5, r6
 80155ac:	d11a      	bne.n	80155e4 <_printf_common+0xc8>
 80155ae:	2000      	movs	r0, #0
 80155b0:	e008      	b.n	80155c4 <_printf_common+0xa8>
 80155b2:	2301      	movs	r3, #1
 80155b4:	4652      	mov	r2, sl
 80155b6:	4649      	mov	r1, r9
 80155b8:	4638      	mov	r0, r7
 80155ba:	47c0      	blx	r8
 80155bc:	3001      	adds	r0, #1
 80155be:	d103      	bne.n	80155c8 <_printf_common+0xac>
 80155c0:	f04f 30ff 	mov.w	r0, #4294967295
 80155c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80155c8:	3501      	adds	r5, #1
 80155ca:	e7c6      	b.n	801555a <_printf_common+0x3e>
 80155cc:	18e1      	adds	r1, r4, r3
 80155ce:	1c5a      	adds	r2, r3, #1
 80155d0:	2030      	movs	r0, #48	; 0x30
 80155d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80155d6:	4422      	add	r2, r4
 80155d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80155dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80155e0:	3302      	adds	r3, #2
 80155e2:	e7c7      	b.n	8015574 <_printf_common+0x58>
 80155e4:	2301      	movs	r3, #1
 80155e6:	4622      	mov	r2, r4
 80155e8:	4649      	mov	r1, r9
 80155ea:	4638      	mov	r0, r7
 80155ec:	47c0      	blx	r8
 80155ee:	3001      	adds	r0, #1
 80155f0:	d0e6      	beq.n	80155c0 <_printf_common+0xa4>
 80155f2:	3601      	adds	r6, #1
 80155f4:	e7d9      	b.n	80155aa <_printf_common+0x8e>
	...

080155f8 <_printf_i>:
 80155f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80155fc:	460c      	mov	r4, r1
 80155fe:	4691      	mov	r9, r2
 8015600:	7e27      	ldrb	r7, [r4, #24]
 8015602:	990c      	ldr	r1, [sp, #48]	; 0x30
 8015604:	2f78      	cmp	r7, #120	; 0x78
 8015606:	4680      	mov	r8, r0
 8015608:	469a      	mov	sl, r3
 801560a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801560e:	d807      	bhi.n	8015620 <_printf_i+0x28>
 8015610:	2f62      	cmp	r7, #98	; 0x62
 8015612:	d80a      	bhi.n	801562a <_printf_i+0x32>
 8015614:	2f00      	cmp	r7, #0
 8015616:	f000 80d8 	beq.w	80157ca <_printf_i+0x1d2>
 801561a:	2f58      	cmp	r7, #88	; 0x58
 801561c:	f000 80a3 	beq.w	8015766 <_printf_i+0x16e>
 8015620:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8015624:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8015628:	e03a      	b.n	80156a0 <_printf_i+0xa8>
 801562a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801562e:	2b15      	cmp	r3, #21
 8015630:	d8f6      	bhi.n	8015620 <_printf_i+0x28>
 8015632:	a001      	add	r0, pc, #4	; (adr r0, 8015638 <_printf_i+0x40>)
 8015634:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8015638:	08015691 	.word	0x08015691
 801563c:	080156a5 	.word	0x080156a5
 8015640:	08015621 	.word	0x08015621
 8015644:	08015621 	.word	0x08015621
 8015648:	08015621 	.word	0x08015621
 801564c:	08015621 	.word	0x08015621
 8015650:	080156a5 	.word	0x080156a5
 8015654:	08015621 	.word	0x08015621
 8015658:	08015621 	.word	0x08015621
 801565c:	08015621 	.word	0x08015621
 8015660:	08015621 	.word	0x08015621
 8015664:	080157b1 	.word	0x080157b1
 8015668:	080156d5 	.word	0x080156d5
 801566c:	08015793 	.word	0x08015793
 8015670:	08015621 	.word	0x08015621
 8015674:	08015621 	.word	0x08015621
 8015678:	080157d3 	.word	0x080157d3
 801567c:	08015621 	.word	0x08015621
 8015680:	080156d5 	.word	0x080156d5
 8015684:	08015621 	.word	0x08015621
 8015688:	08015621 	.word	0x08015621
 801568c:	0801579b 	.word	0x0801579b
 8015690:	680b      	ldr	r3, [r1, #0]
 8015692:	1d1a      	adds	r2, r3, #4
 8015694:	681b      	ldr	r3, [r3, #0]
 8015696:	600a      	str	r2, [r1, #0]
 8015698:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801569c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80156a0:	2301      	movs	r3, #1
 80156a2:	e0a3      	b.n	80157ec <_printf_i+0x1f4>
 80156a4:	6825      	ldr	r5, [r4, #0]
 80156a6:	6808      	ldr	r0, [r1, #0]
 80156a8:	062e      	lsls	r6, r5, #24
 80156aa:	f100 0304 	add.w	r3, r0, #4
 80156ae:	d50a      	bpl.n	80156c6 <_printf_i+0xce>
 80156b0:	6805      	ldr	r5, [r0, #0]
 80156b2:	600b      	str	r3, [r1, #0]
 80156b4:	2d00      	cmp	r5, #0
 80156b6:	da03      	bge.n	80156c0 <_printf_i+0xc8>
 80156b8:	232d      	movs	r3, #45	; 0x2d
 80156ba:	426d      	negs	r5, r5
 80156bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80156c0:	485e      	ldr	r0, [pc, #376]	; (801583c <_printf_i+0x244>)
 80156c2:	230a      	movs	r3, #10
 80156c4:	e019      	b.n	80156fa <_printf_i+0x102>
 80156c6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80156ca:	6805      	ldr	r5, [r0, #0]
 80156cc:	600b      	str	r3, [r1, #0]
 80156ce:	bf18      	it	ne
 80156d0:	b22d      	sxthne	r5, r5
 80156d2:	e7ef      	b.n	80156b4 <_printf_i+0xbc>
 80156d4:	680b      	ldr	r3, [r1, #0]
 80156d6:	6825      	ldr	r5, [r4, #0]
 80156d8:	1d18      	adds	r0, r3, #4
 80156da:	6008      	str	r0, [r1, #0]
 80156dc:	0628      	lsls	r0, r5, #24
 80156de:	d501      	bpl.n	80156e4 <_printf_i+0xec>
 80156e0:	681d      	ldr	r5, [r3, #0]
 80156e2:	e002      	b.n	80156ea <_printf_i+0xf2>
 80156e4:	0669      	lsls	r1, r5, #25
 80156e6:	d5fb      	bpl.n	80156e0 <_printf_i+0xe8>
 80156e8:	881d      	ldrh	r5, [r3, #0]
 80156ea:	4854      	ldr	r0, [pc, #336]	; (801583c <_printf_i+0x244>)
 80156ec:	2f6f      	cmp	r7, #111	; 0x6f
 80156ee:	bf0c      	ite	eq
 80156f0:	2308      	moveq	r3, #8
 80156f2:	230a      	movne	r3, #10
 80156f4:	2100      	movs	r1, #0
 80156f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80156fa:	6866      	ldr	r6, [r4, #4]
 80156fc:	60a6      	str	r6, [r4, #8]
 80156fe:	2e00      	cmp	r6, #0
 8015700:	bfa2      	ittt	ge
 8015702:	6821      	ldrge	r1, [r4, #0]
 8015704:	f021 0104 	bicge.w	r1, r1, #4
 8015708:	6021      	strge	r1, [r4, #0]
 801570a:	b90d      	cbnz	r5, 8015710 <_printf_i+0x118>
 801570c:	2e00      	cmp	r6, #0
 801570e:	d04d      	beq.n	80157ac <_printf_i+0x1b4>
 8015710:	4616      	mov	r6, r2
 8015712:	fbb5 f1f3 	udiv	r1, r5, r3
 8015716:	fb03 5711 	mls	r7, r3, r1, r5
 801571a:	5dc7      	ldrb	r7, [r0, r7]
 801571c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8015720:	462f      	mov	r7, r5
 8015722:	42bb      	cmp	r3, r7
 8015724:	460d      	mov	r5, r1
 8015726:	d9f4      	bls.n	8015712 <_printf_i+0x11a>
 8015728:	2b08      	cmp	r3, #8
 801572a:	d10b      	bne.n	8015744 <_printf_i+0x14c>
 801572c:	6823      	ldr	r3, [r4, #0]
 801572e:	07df      	lsls	r7, r3, #31
 8015730:	d508      	bpl.n	8015744 <_printf_i+0x14c>
 8015732:	6923      	ldr	r3, [r4, #16]
 8015734:	6861      	ldr	r1, [r4, #4]
 8015736:	4299      	cmp	r1, r3
 8015738:	bfde      	ittt	le
 801573a:	2330      	movle	r3, #48	; 0x30
 801573c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8015740:	f106 36ff 	addle.w	r6, r6, #4294967295
 8015744:	1b92      	subs	r2, r2, r6
 8015746:	6122      	str	r2, [r4, #16]
 8015748:	f8cd a000 	str.w	sl, [sp]
 801574c:	464b      	mov	r3, r9
 801574e:	aa03      	add	r2, sp, #12
 8015750:	4621      	mov	r1, r4
 8015752:	4640      	mov	r0, r8
 8015754:	f7ff fee2 	bl	801551c <_printf_common>
 8015758:	3001      	adds	r0, #1
 801575a:	d14c      	bne.n	80157f6 <_printf_i+0x1fe>
 801575c:	f04f 30ff 	mov.w	r0, #4294967295
 8015760:	b004      	add	sp, #16
 8015762:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015766:	4835      	ldr	r0, [pc, #212]	; (801583c <_printf_i+0x244>)
 8015768:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801576c:	6823      	ldr	r3, [r4, #0]
 801576e:	680e      	ldr	r6, [r1, #0]
 8015770:	061f      	lsls	r7, r3, #24
 8015772:	f856 5b04 	ldr.w	r5, [r6], #4
 8015776:	600e      	str	r6, [r1, #0]
 8015778:	d514      	bpl.n	80157a4 <_printf_i+0x1ac>
 801577a:	07d9      	lsls	r1, r3, #31
 801577c:	bf44      	itt	mi
 801577e:	f043 0320 	orrmi.w	r3, r3, #32
 8015782:	6023      	strmi	r3, [r4, #0]
 8015784:	b91d      	cbnz	r5, 801578e <_printf_i+0x196>
 8015786:	6823      	ldr	r3, [r4, #0]
 8015788:	f023 0320 	bic.w	r3, r3, #32
 801578c:	6023      	str	r3, [r4, #0]
 801578e:	2310      	movs	r3, #16
 8015790:	e7b0      	b.n	80156f4 <_printf_i+0xfc>
 8015792:	6823      	ldr	r3, [r4, #0]
 8015794:	f043 0320 	orr.w	r3, r3, #32
 8015798:	6023      	str	r3, [r4, #0]
 801579a:	2378      	movs	r3, #120	; 0x78
 801579c:	4828      	ldr	r0, [pc, #160]	; (8015840 <_printf_i+0x248>)
 801579e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80157a2:	e7e3      	b.n	801576c <_printf_i+0x174>
 80157a4:	065e      	lsls	r6, r3, #25
 80157a6:	bf48      	it	mi
 80157a8:	b2ad      	uxthmi	r5, r5
 80157aa:	e7e6      	b.n	801577a <_printf_i+0x182>
 80157ac:	4616      	mov	r6, r2
 80157ae:	e7bb      	b.n	8015728 <_printf_i+0x130>
 80157b0:	680b      	ldr	r3, [r1, #0]
 80157b2:	6826      	ldr	r6, [r4, #0]
 80157b4:	6960      	ldr	r0, [r4, #20]
 80157b6:	1d1d      	adds	r5, r3, #4
 80157b8:	600d      	str	r5, [r1, #0]
 80157ba:	0635      	lsls	r5, r6, #24
 80157bc:	681b      	ldr	r3, [r3, #0]
 80157be:	d501      	bpl.n	80157c4 <_printf_i+0x1cc>
 80157c0:	6018      	str	r0, [r3, #0]
 80157c2:	e002      	b.n	80157ca <_printf_i+0x1d2>
 80157c4:	0671      	lsls	r1, r6, #25
 80157c6:	d5fb      	bpl.n	80157c0 <_printf_i+0x1c8>
 80157c8:	8018      	strh	r0, [r3, #0]
 80157ca:	2300      	movs	r3, #0
 80157cc:	6123      	str	r3, [r4, #16]
 80157ce:	4616      	mov	r6, r2
 80157d0:	e7ba      	b.n	8015748 <_printf_i+0x150>
 80157d2:	680b      	ldr	r3, [r1, #0]
 80157d4:	1d1a      	adds	r2, r3, #4
 80157d6:	600a      	str	r2, [r1, #0]
 80157d8:	681e      	ldr	r6, [r3, #0]
 80157da:	6862      	ldr	r2, [r4, #4]
 80157dc:	2100      	movs	r1, #0
 80157de:	4630      	mov	r0, r6
 80157e0:	f7ea fd96 	bl	8000310 <memchr>
 80157e4:	b108      	cbz	r0, 80157ea <_printf_i+0x1f2>
 80157e6:	1b80      	subs	r0, r0, r6
 80157e8:	6060      	str	r0, [r4, #4]
 80157ea:	6863      	ldr	r3, [r4, #4]
 80157ec:	6123      	str	r3, [r4, #16]
 80157ee:	2300      	movs	r3, #0
 80157f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80157f4:	e7a8      	b.n	8015748 <_printf_i+0x150>
 80157f6:	6923      	ldr	r3, [r4, #16]
 80157f8:	4632      	mov	r2, r6
 80157fa:	4649      	mov	r1, r9
 80157fc:	4640      	mov	r0, r8
 80157fe:	47d0      	blx	sl
 8015800:	3001      	adds	r0, #1
 8015802:	d0ab      	beq.n	801575c <_printf_i+0x164>
 8015804:	6823      	ldr	r3, [r4, #0]
 8015806:	079b      	lsls	r3, r3, #30
 8015808:	d413      	bmi.n	8015832 <_printf_i+0x23a>
 801580a:	68e0      	ldr	r0, [r4, #12]
 801580c:	9b03      	ldr	r3, [sp, #12]
 801580e:	4298      	cmp	r0, r3
 8015810:	bfb8      	it	lt
 8015812:	4618      	movlt	r0, r3
 8015814:	e7a4      	b.n	8015760 <_printf_i+0x168>
 8015816:	2301      	movs	r3, #1
 8015818:	4632      	mov	r2, r6
 801581a:	4649      	mov	r1, r9
 801581c:	4640      	mov	r0, r8
 801581e:	47d0      	blx	sl
 8015820:	3001      	adds	r0, #1
 8015822:	d09b      	beq.n	801575c <_printf_i+0x164>
 8015824:	3501      	adds	r5, #1
 8015826:	68e3      	ldr	r3, [r4, #12]
 8015828:	9903      	ldr	r1, [sp, #12]
 801582a:	1a5b      	subs	r3, r3, r1
 801582c:	42ab      	cmp	r3, r5
 801582e:	dcf2      	bgt.n	8015816 <_printf_i+0x21e>
 8015830:	e7eb      	b.n	801580a <_printf_i+0x212>
 8015832:	2500      	movs	r5, #0
 8015834:	f104 0619 	add.w	r6, r4, #25
 8015838:	e7f5      	b.n	8015826 <_printf_i+0x22e>
 801583a:	bf00      	nop
 801583c:	0801a301 	.word	0x0801a301
 8015840:	0801a312 	.word	0x0801a312

08015844 <_sbrk_r>:
 8015844:	b538      	push	{r3, r4, r5, lr}
 8015846:	4d06      	ldr	r5, [pc, #24]	; (8015860 <_sbrk_r+0x1c>)
 8015848:	2300      	movs	r3, #0
 801584a:	4604      	mov	r4, r0
 801584c:	4608      	mov	r0, r1
 801584e:	602b      	str	r3, [r5, #0]
 8015850:	f7eb fc6e 	bl	8001130 <_sbrk>
 8015854:	1c43      	adds	r3, r0, #1
 8015856:	d102      	bne.n	801585e <_sbrk_r+0x1a>
 8015858:	682b      	ldr	r3, [r5, #0]
 801585a:	b103      	cbz	r3, 801585e <_sbrk_r+0x1a>
 801585c:	6023      	str	r3, [r4, #0]
 801585e:	bd38      	pop	{r3, r4, r5, pc}
 8015860:	24003c98 	.word	0x24003c98

08015864 <__sread>:
 8015864:	b510      	push	{r4, lr}
 8015866:	460c      	mov	r4, r1
 8015868:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801586c:	f000 fa92 	bl	8015d94 <_read_r>
 8015870:	2800      	cmp	r0, #0
 8015872:	bfab      	itete	ge
 8015874:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8015876:	89a3      	ldrhlt	r3, [r4, #12]
 8015878:	181b      	addge	r3, r3, r0
 801587a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801587e:	bfac      	ite	ge
 8015880:	6563      	strge	r3, [r4, #84]	; 0x54
 8015882:	81a3      	strhlt	r3, [r4, #12]
 8015884:	bd10      	pop	{r4, pc}

08015886 <__swrite>:
 8015886:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801588a:	461f      	mov	r7, r3
 801588c:	898b      	ldrh	r3, [r1, #12]
 801588e:	05db      	lsls	r3, r3, #23
 8015890:	4605      	mov	r5, r0
 8015892:	460c      	mov	r4, r1
 8015894:	4616      	mov	r6, r2
 8015896:	d505      	bpl.n	80158a4 <__swrite+0x1e>
 8015898:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801589c:	2302      	movs	r3, #2
 801589e:	2200      	movs	r2, #0
 80158a0:	f000 f9d0 	bl	8015c44 <_lseek_r>
 80158a4:	89a3      	ldrh	r3, [r4, #12]
 80158a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80158aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80158ae:	81a3      	strh	r3, [r4, #12]
 80158b0:	4632      	mov	r2, r6
 80158b2:	463b      	mov	r3, r7
 80158b4:	4628      	mov	r0, r5
 80158b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80158ba:	f000 b869 	b.w	8015990 <_write_r>

080158be <__sseek>:
 80158be:	b510      	push	{r4, lr}
 80158c0:	460c      	mov	r4, r1
 80158c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80158c6:	f000 f9bd 	bl	8015c44 <_lseek_r>
 80158ca:	1c43      	adds	r3, r0, #1
 80158cc:	89a3      	ldrh	r3, [r4, #12]
 80158ce:	bf15      	itete	ne
 80158d0:	6560      	strne	r0, [r4, #84]	; 0x54
 80158d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80158d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80158da:	81a3      	strheq	r3, [r4, #12]
 80158dc:	bf18      	it	ne
 80158de:	81a3      	strhne	r3, [r4, #12]
 80158e0:	bd10      	pop	{r4, pc}

080158e2 <__sclose>:
 80158e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80158e6:	f000 b8db 	b.w	8015aa0 <_close_r>
	...

080158ec <__swbuf_r>:
 80158ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80158ee:	460e      	mov	r6, r1
 80158f0:	4614      	mov	r4, r2
 80158f2:	4605      	mov	r5, r0
 80158f4:	b118      	cbz	r0, 80158fe <__swbuf_r+0x12>
 80158f6:	6983      	ldr	r3, [r0, #24]
 80158f8:	b90b      	cbnz	r3, 80158fe <__swbuf_r+0x12>
 80158fa:	f7ff f9f5 	bl	8014ce8 <__sinit>
 80158fe:	4b21      	ldr	r3, [pc, #132]	; (8015984 <__swbuf_r+0x98>)
 8015900:	429c      	cmp	r4, r3
 8015902:	d12b      	bne.n	801595c <__swbuf_r+0x70>
 8015904:	686c      	ldr	r4, [r5, #4]
 8015906:	69a3      	ldr	r3, [r4, #24]
 8015908:	60a3      	str	r3, [r4, #8]
 801590a:	89a3      	ldrh	r3, [r4, #12]
 801590c:	071a      	lsls	r2, r3, #28
 801590e:	d52f      	bpl.n	8015970 <__swbuf_r+0x84>
 8015910:	6923      	ldr	r3, [r4, #16]
 8015912:	b36b      	cbz	r3, 8015970 <__swbuf_r+0x84>
 8015914:	6923      	ldr	r3, [r4, #16]
 8015916:	6820      	ldr	r0, [r4, #0]
 8015918:	1ac0      	subs	r0, r0, r3
 801591a:	6963      	ldr	r3, [r4, #20]
 801591c:	b2f6      	uxtb	r6, r6
 801591e:	4283      	cmp	r3, r0
 8015920:	4637      	mov	r7, r6
 8015922:	dc04      	bgt.n	801592e <__swbuf_r+0x42>
 8015924:	4621      	mov	r1, r4
 8015926:	4628      	mov	r0, r5
 8015928:	f000 f950 	bl	8015bcc <_fflush_r>
 801592c:	bb30      	cbnz	r0, 801597c <__swbuf_r+0x90>
 801592e:	68a3      	ldr	r3, [r4, #8]
 8015930:	3b01      	subs	r3, #1
 8015932:	60a3      	str	r3, [r4, #8]
 8015934:	6823      	ldr	r3, [r4, #0]
 8015936:	1c5a      	adds	r2, r3, #1
 8015938:	6022      	str	r2, [r4, #0]
 801593a:	701e      	strb	r6, [r3, #0]
 801593c:	6963      	ldr	r3, [r4, #20]
 801593e:	3001      	adds	r0, #1
 8015940:	4283      	cmp	r3, r0
 8015942:	d004      	beq.n	801594e <__swbuf_r+0x62>
 8015944:	89a3      	ldrh	r3, [r4, #12]
 8015946:	07db      	lsls	r3, r3, #31
 8015948:	d506      	bpl.n	8015958 <__swbuf_r+0x6c>
 801594a:	2e0a      	cmp	r6, #10
 801594c:	d104      	bne.n	8015958 <__swbuf_r+0x6c>
 801594e:	4621      	mov	r1, r4
 8015950:	4628      	mov	r0, r5
 8015952:	f000 f93b 	bl	8015bcc <_fflush_r>
 8015956:	b988      	cbnz	r0, 801597c <__swbuf_r+0x90>
 8015958:	4638      	mov	r0, r7
 801595a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801595c:	4b0a      	ldr	r3, [pc, #40]	; (8015988 <__swbuf_r+0x9c>)
 801595e:	429c      	cmp	r4, r3
 8015960:	d101      	bne.n	8015966 <__swbuf_r+0x7a>
 8015962:	68ac      	ldr	r4, [r5, #8]
 8015964:	e7cf      	b.n	8015906 <__swbuf_r+0x1a>
 8015966:	4b09      	ldr	r3, [pc, #36]	; (801598c <__swbuf_r+0xa0>)
 8015968:	429c      	cmp	r4, r3
 801596a:	bf08      	it	eq
 801596c:	68ec      	ldreq	r4, [r5, #12]
 801596e:	e7ca      	b.n	8015906 <__swbuf_r+0x1a>
 8015970:	4621      	mov	r1, r4
 8015972:	4628      	mov	r0, r5
 8015974:	f000 f81e 	bl	80159b4 <__swsetup_r>
 8015978:	2800      	cmp	r0, #0
 801597a:	d0cb      	beq.n	8015914 <__swbuf_r+0x28>
 801597c:	f04f 37ff 	mov.w	r7, #4294967295
 8015980:	e7ea      	b.n	8015958 <__swbuf_r+0x6c>
 8015982:	bf00      	nop
 8015984:	0801a2b0 	.word	0x0801a2b0
 8015988:	0801a2d0 	.word	0x0801a2d0
 801598c:	0801a290 	.word	0x0801a290

08015990 <_write_r>:
 8015990:	b538      	push	{r3, r4, r5, lr}
 8015992:	4d07      	ldr	r5, [pc, #28]	; (80159b0 <_write_r+0x20>)
 8015994:	4604      	mov	r4, r0
 8015996:	4608      	mov	r0, r1
 8015998:	4611      	mov	r1, r2
 801599a:	2200      	movs	r2, #0
 801599c:	602a      	str	r2, [r5, #0]
 801599e:	461a      	mov	r2, r3
 80159a0:	f7eb fb75 	bl	800108e <_write>
 80159a4:	1c43      	adds	r3, r0, #1
 80159a6:	d102      	bne.n	80159ae <_write_r+0x1e>
 80159a8:	682b      	ldr	r3, [r5, #0]
 80159aa:	b103      	cbz	r3, 80159ae <_write_r+0x1e>
 80159ac:	6023      	str	r3, [r4, #0]
 80159ae:	bd38      	pop	{r3, r4, r5, pc}
 80159b0:	24003c98 	.word	0x24003c98

080159b4 <__swsetup_r>:
 80159b4:	4b32      	ldr	r3, [pc, #200]	; (8015a80 <__swsetup_r+0xcc>)
 80159b6:	b570      	push	{r4, r5, r6, lr}
 80159b8:	681d      	ldr	r5, [r3, #0]
 80159ba:	4606      	mov	r6, r0
 80159bc:	460c      	mov	r4, r1
 80159be:	b125      	cbz	r5, 80159ca <__swsetup_r+0x16>
 80159c0:	69ab      	ldr	r3, [r5, #24]
 80159c2:	b913      	cbnz	r3, 80159ca <__swsetup_r+0x16>
 80159c4:	4628      	mov	r0, r5
 80159c6:	f7ff f98f 	bl	8014ce8 <__sinit>
 80159ca:	4b2e      	ldr	r3, [pc, #184]	; (8015a84 <__swsetup_r+0xd0>)
 80159cc:	429c      	cmp	r4, r3
 80159ce:	d10f      	bne.n	80159f0 <__swsetup_r+0x3c>
 80159d0:	686c      	ldr	r4, [r5, #4]
 80159d2:	89a3      	ldrh	r3, [r4, #12]
 80159d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80159d8:	0719      	lsls	r1, r3, #28
 80159da:	d42c      	bmi.n	8015a36 <__swsetup_r+0x82>
 80159dc:	06dd      	lsls	r5, r3, #27
 80159de:	d411      	bmi.n	8015a04 <__swsetup_r+0x50>
 80159e0:	2309      	movs	r3, #9
 80159e2:	6033      	str	r3, [r6, #0]
 80159e4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80159e8:	81a3      	strh	r3, [r4, #12]
 80159ea:	f04f 30ff 	mov.w	r0, #4294967295
 80159ee:	e03e      	b.n	8015a6e <__swsetup_r+0xba>
 80159f0:	4b25      	ldr	r3, [pc, #148]	; (8015a88 <__swsetup_r+0xd4>)
 80159f2:	429c      	cmp	r4, r3
 80159f4:	d101      	bne.n	80159fa <__swsetup_r+0x46>
 80159f6:	68ac      	ldr	r4, [r5, #8]
 80159f8:	e7eb      	b.n	80159d2 <__swsetup_r+0x1e>
 80159fa:	4b24      	ldr	r3, [pc, #144]	; (8015a8c <__swsetup_r+0xd8>)
 80159fc:	429c      	cmp	r4, r3
 80159fe:	bf08      	it	eq
 8015a00:	68ec      	ldreq	r4, [r5, #12]
 8015a02:	e7e6      	b.n	80159d2 <__swsetup_r+0x1e>
 8015a04:	0758      	lsls	r0, r3, #29
 8015a06:	d512      	bpl.n	8015a2e <__swsetup_r+0x7a>
 8015a08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015a0a:	b141      	cbz	r1, 8015a1e <__swsetup_r+0x6a>
 8015a0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015a10:	4299      	cmp	r1, r3
 8015a12:	d002      	beq.n	8015a1a <__swsetup_r+0x66>
 8015a14:	4630      	mov	r0, r6
 8015a16:	f7ff fa21 	bl	8014e5c <_free_r>
 8015a1a:	2300      	movs	r3, #0
 8015a1c:	6363      	str	r3, [r4, #52]	; 0x34
 8015a1e:	89a3      	ldrh	r3, [r4, #12]
 8015a20:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8015a24:	81a3      	strh	r3, [r4, #12]
 8015a26:	2300      	movs	r3, #0
 8015a28:	6063      	str	r3, [r4, #4]
 8015a2a:	6923      	ldr	r3, [r4, #16]
 8015a2c:	6023      	str	r3, [r4, #0]
 8015a2e:	89a3      	ldrh	r3, [r4, #12]
 8015a30:	f043 0308 	orr.w	r3, r3, #8
 8015a34:	81a3      	strh	r3, [r4, #12]
 8015a36:	6923      	ldr	r3, [r4, #16]
 8015a38:	b94b      	cbnz	r3, 8015a4e <__swsetup_r+0x9a>
 8015a3a:	89a3      	ldrh	r3, [r4, #12]
 8015a3c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8015a40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015a44:	d003      	beq.n	8015a4e <__swsetup_r+0x9a>
 8015a46:	4621      	mov	r1, r4
 8015a48:	4630      	mov	r0, r6
 8015a4a:	f000 f931 	bl	8015cb0 <__smakebuf_r>
 8015a4e:	89a0      	ldrh	r0, [r4, #12]
 8015a50:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015a54:	f010 0301 	ands.w	r3, r0, #1
 8015a58:	d00a      	beq.n	8015a70 <__swsetup_r+0xbc>
 8015a5a:	2300      	movs	r3, #0
 8015a5c:	60a3      	str	r3, [r4, #8]
 8015a5e:	6963      	ldr	r3, [r4, #20]
 8015a60:	425b      	negs	r3, r3
 8015a62:	61a3      	str	r3, [r4, #24]
 8015a64:	6923      	ldr	r3, [r4, #16]
 8015a66:	b943      	cbnz	r3, 8015a7a <__swsetup_r+0xc6>
 8015a68:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8015a6c:	d1ba      	bne.n	80159e4 <__swsetup_r+0x30>
 8015a6e:	bd70      	pop	{r4, r5, r6, pc}
 8015a70:	0781      	lsls	r1, r0, #30
 8015a72:	bf58      	it	pl
 8015a74:	6963      	ldrpl	r3, [r4, #20]
 8015a76:	60a3      	str	r3, [r4, #8]
 8015a78:	e7f4      	b.n	8015a64 <__swsetup_r+0xb0>
 8015a7a:	2000      	movs	r0, #0
 8015a7c:	e7f7      	b.n	8015a6e <__swsetup_r+0xba>
 8015a7e:	bf00      	nop
 8015a80:	24000040 	.word	0x24000040
 8015a84:	0801a2b0 	.word	0x0801a2b0
 8015a88:	0801a2d0 	.word	0x0801a2d0
 8015a8c:	0801a290 	.word	0x0801a290

08015a90 <abort>:
 8015a90:	b508      	push	{r3, lr}
 8015a92:	2006      	movs	r0, #6
 8015a94:	f000 f9b8 	bl	8015e08 <raise>
 8015a98:	2001      	movs	r0, #1
 8015a9a:	f7eb fad1 	bl	8001040 <_exit>
	...

08015aa0 <_close_r>:
 8015aa0:	b538      	push	{r3, r4, r5, lr}
 8015aa2:	4d06      	ldr	r5, [pc, #24]	; (8015abc <_close_r+0x1c>)
 8015aa4:	2300      	movs	r3, #0
 8015aa6:	4604      	mov	r4, r0
 8015aa8:	4608      	mov	r0, r1
 8015aaa:	602b      	str	r3, [r5, #0]
 8015aac:	f7eb fb0b 	bl	80010c6 <_close>
 8015ab0:	1c43      	adds	r3, r0, #1
 8015ab2:	d102      	bne.n	8015aba <_close_r+0x1a>
 8015ab4:	682b      	ldr	r3, [r5, #0]
 8015ab6:	b103      	cbz	r3, 8015aba <_close_r+0x1a>
 8015ab8:	6023      	str	r3, [r4, #0]
 8015aba:	bd38      	pop	{r3, r4, r5, pc}
 8015abc:	24003c98 	.word	0x24003c98

08015ac0 <__sflush_r>:
 8015ac0:	898a      	ldrh	r2, [r1, #12]
 8015ac2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015ac6:	4605      	mov	r5, r0
 8015ac8:	0710      	lsls	r0, r2, #28
 8015aca:	460c      	mov	r4, r1
 8015acc:	d458      	bmi.n	8015b80 <__sflush_r+0xc0>
 8015ace:	684b      	ldr	r3, [r1, #4]
 8015ad0:	2b00      	cmp	r3, #0
 8015ad2:	dc05      	bgt.n	8015ae0 <__sflush_r+0x20>
 8015ad4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8015ad6:	2b00      	cmp	r3, #0
 8015ad8:	dc02      	bgt.n	8015ae0 <__sflush_r+0x20>
 8015ada:	2000      	movs	r0, #0
 8015adc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015ae0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015ae2:	2e00      	cmp	r6, #0
 8015ae4:	d0f9      	beq.n	8015ada <__sflush_r+0x1a>
 8015ae6:	2300      	movs	r3, #0
 8015ae8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015aec:	682f      	ldr	r7, [r5, #0]
 8015aee:	602b      	str	r3, [r5, #0]
 8015af0:	d032      	beq.n	8015b58 <__sflush_r+0x98>
 8015af2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015af4:	89a3      	ldrh	r3, [r4, #12]
 8015af6:	075a      	lsls	r2, r3, #29
 8015af8:	d505      	bpl.n	8015b06 <__sflush_r+0x46>
 8015afa:	6863      	ldr	r3, [r4, #4]
 8015afc:	1ac0      	subs	r0, r0, r3
 8015afe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015b00:	b10b      	cbz	r3, 8015b06 <__sflush_r+0x46>
 8015b02:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015b04:	1ac0      	subs	r0, r0, r3
 8015b06:	2300      	movs	r3, #0
 8015b08:	4602      	mov	r2, r0
 8015b0a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015b0c:	6a21      	ldr	r1, [r4, #32]
 8015b0e:	4628      	mov	r0, r5
 8015b10:	47b0      	blx	r6
 8015b12:	1c43      	adds	r3, r0, #1
 8015b14:	89a3      	ldrh	r3, [r4, #12]
 8015b16:	d106      	bne.n	8015b26 <__sflush_r+0x66>
 8015b18:	6829      	ldr	r1, [r5, #0]
 8015b1a:	291d      	cmp	r1, #29
 8015b1c:	d82c      	bhi.n	8015b78 <__sflush_r+0xb8>
 8015b1e:	4a2a      	ldr	r2, [pc, #168]	; (8015bc8 <__sflush_r+0x108>)
 8015b20:	40ca      	lsrs	r2, r1
 8015b22:	07d6      	lsls	r6, r2, #31
 8015b24:	d528      	bpl.n	8015b78 <__sflush_r+0xb8>
 8015b26:	2200      	movs	r2, #0
 8015b28:	6062      	str	r2, [r4, #4]
 8015b2a:	04d9      	lsls	r1, r3, #19
 8015b2c:	6922      	ldr	r2, [r4, #16]
 8015b2e:	6022      	str	r2, [r4, #0]
 8015b30:	d504      	bpl.n	8015b3c <__sflush_r+0x7c>
 8015b32:	1c42      	adds	r2, r0, #1
 8015b34:	d101      	bne.n	8015b3a <__sflush_r+0x7a>
 8015b36:	682b      	ldr	r3, [r5, #0]
 8015b38:	b903      	cbnz	r3, 8015b3c <__sflush_r+0x7c>
 8015b3a:	6560      	str	r0, [r4, #84]	; 0x54
 8015b3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015b3e:	602f      	str	r7, [r5, #0]
 8015b40:	2900      	cmp	r1, #0
 8015b42:	d0ca      	beq.n	8015ada <__sflush_r+0x1a>
 8015b44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015b48:	4299      	cmp	r1, r3
 8015b4a:	d002      	beq.n	8015b52 <__sflush_r+0x92>
 8015b4c:	4628      	mov	r0, r5
 8015b4e:	f7ff f985 	bl	8014e5c <_free_r>
 8015b52:	2000      	movs	r0, #0
 8015b54:	6360      	str	r0, [r4, #52]	; 0x34
 8015b56:	e7c1      	b.n	8015adc <__sflush_r+0x1c>
 8015b58:	6a21      	ldr	r1, [r4, #32]
 8015b5a:	2301      	movs	r3, #1
 8015b5c:	4628      	mov	r0, r5
 8015b5e:	47b0      	blx	r6
 8015b60:	1c41      	adds	r1, r0, #1
 8015b62:	d1c7      	bne.n	8015af4 <__sflush_r+0x34>
 8015b64:	682b      	ldr	r3, [r5, #0]
 8015b66:	2b00      	cmp	r3, #0
 8015b68:	d0c4      	beq.n	8015af4 <__sflush_r+0x34>
 8015b6a:	2b1d      	cmp	r3, #29
 8015b6c:	d001      	beq.n	8015b72 <__sflush_r+0xb2>
 8015b6e:	2b16      	cmp	r3, #22
 8015b70:	d101      	bne.n	8015b76 <__sflush_r+0xb6>
 8015b72:	602f      	str	r7, [r5, #0]
 8015b74:	e7b1      	b.n	8015ada <__sflush_r+0x1a>
 8015b76:	89a3      	ldrh	r3, [r4, #12]
 8015b78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015b7c:	81a3      	strh	r3, [r4, #12]
 8015b7e:	e7ad      	b.n	8015adc <__sflush_r+0x1c>
 8015b80:	690f      	ldr	r7, [r1, #16]
 8015b82:	2f00      	cmp	r7, #0
 8015b84:	d0a9      	beq.n	8015ada <__sflush_r+0x1a>
 8015b86:	0793      	lsls	r3, r2, #30
 8015b88:	680e      	ldr	r6, [r1, #0]
 8015b8a:	bf08      	it	eq
 8015b8c:	694b      	ldreq	r3, [r1, #20]
 8015b8e:	600f      	str	r7, [r1, #0]
 8015b90:	bf18      	it	ne
 8015b92:	2300      	movne	r3, #0
 8015b94:	eba6 0807 	sub.w	r8, r6, r7
 8015b98:	608b      	str	r3, [r1, #8]
 8015b9a:	f1b8 0f00 	cmp.w	r8, #0
 8015b9e:	dd9c      	ble.n	8015ada <__sflush_r+0x1a>
 8015ba0:	6a21      	ldr	r1, [r4, #32]
 8015ba2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015ba4:	4643      	mov	r3, r8
 8015ba6:	463a      	mov	r2, r7
 8015ba8:	4628      	mov	r0, r5
 8015baa:	47b0      	blx	r6
 8015bac:	2800      	cmp	r0, #0
 8015bae:	dc06      	bgt.n	8015bbe <__sflush_r+0xfe>
 8015bb0:	89a3      	ldrh	r3, [r4, #12]
 8015bb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015bb6:	81a3      	strh	r3, [r4, #12]
 8015bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8015bbc:	e78e      	b.n	8015adc <__sflush_r+0x1c>
 8015bbe:	4407      	add	r7, r0
 8015bc0:	eba8 0800 	sub.w	r8, r8, r0
 8015bc4:	e7e9      	b.n	8015b9a <__sflush_r+0xda>
 8015bc6:	bf00      	nop
 8015bc8:	20400001 	.word	0x20400001

08015bcc <_fflush_r>:
 8015bcc:	b538      	push	{r3, r4, r5, lr}
 8015bce:	690b      	ldr	r3, [r1, #16]
 8015bd0:	4605      	mov	r5, r0
 8015bd2:	460c      	mov	r4, r1
 8015bd4:	b913      	cbnz	r3, 8015bdc <_fflush_r+0x10>
 8015bd6:	2500      	movs	r5, #0
 8015bd8:	4628      	mov	r0, r5
 8015bda:	bd38      	pop	{r3, r4, r5, pc}
 8015bdc:	b118      	cbz	r0, 8015be6 <_fflush_r+0x1a>
 8015bde:	6983      	ldr	r3, [r0, #24]
 8015be0:	b90b      	cbnz	r3, 8015be6 <_fflush_r+0x1a>
 8015be2:	f7ff f881 	bl	8014ce8 <__sinit>
 8015be6:	4b14      	ldr	r3, [pc, #80]	; (8015c38 <_fflush_r+0x6c>)
 8015be8:	429c      	cmp	r4, r3
 8015bea:	d11b      	bne.n	8015c24 <_fflush_r+0x58>
 8015bec:	686c      	ldr	r4, [r5, #4]
 8015bee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015bf2:	2b00      	cmp	r3, #0
 8015bf4:	d0ef      	beq.n	8015bd6 <_fflush_r+0xa>
 8015bf6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8015bf8:	07d0      	lsls	r0, r2, #31
 8015bfa:	d404      	bmi.n	8015c06 <_fflush_r+0x3a>
 8015bfc:	0599      	lsls	r1, r3, #22
 8015bfe:	d402      	bmi.n	8015c06 <_fflush_r+0x3a>
 8015c00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015c02:	f7ff f921 	bl	8014e48 <__retarget_lock_acquire_recursive>
 8015c06:	4628      	mov	r0, r5
 8015c08:	4621      	mov	r1, r4
 8015c0a:	f7ff ff59 	bl	8015ac0 <__sflush_r>
 8015c0e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015c10:	07da      	lsls	r2, r3, #31
 8015c12:	4605      	mov	r5, r0
 8015c14:	d4e0      	bmi.n	8015bd8 <_fflush_r+0xc>
 8015c16:	89a3      	ldrh	r3, [r4, #12]
 8015c18:	059b      	lsls	r3, r3, #22
 8015c1a:	d4dd      	bmi.n	8015bd8 <_fflush_r+0xc>
 8015c1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015c1e:	f7ff f914 	bl	8014e4a <__retarget_lock_release_recursive>
 8015c22:	e7d9      	b.n	8015bd8 <_fflush_r+0xc>
 8015c24:	4b05      	ldr	r3, [pc, #20]	; (8015c3c <_fflush_r+0x70>)
 8015c26:	429c      	cmp	r4, r3
 8015c28:	d101      	bne.n	8015c2e <_fflush_r+0x62>
 8015c2a:	68ac      	ldr	r4, [r5, #8]
 8015c2c:	e7df      	b.n	8015bee <_fflush_r+0x22>
 8015c2e:	4b04      	ldr	r3, [pc, #16]	; (8015c40 <_fflush_r+0x74>)
 8015c30:	429c      	cmp	r4, r3
 8015c32:	bf08      	it	eq
 8015c34:	68ec      	ldreq	r4, [r5, #12]
 8015c36:	e7da      	b.n	8015bee <_fflush_r+0x22>
 8015c38:	0801a2b0 	.word	0x0801a2b0
 8015c3c:	0801a2d0 	.word	0x0801a2d0
 8015c40:	0801a290 	.word	0x0801a290

08015c44 <_lseek_r>:
 8015c44:	b538      	push	{r3, r4, r5, lr}
 8015c46:	4d07      	ldr	r5, [pc, #28]	; (8015c64 <_lseek_r+0x20>)
 8015c48:	4604      	mov	r4, r0
 8015c4a:	4608      	mov	r0, r1
 8015c4c:	4611      	mov	r1, r2
 8015c4e:	2200      	movs	r2, #0
 8015c50:	602a      	str	r2, [r5, #0]
 8015c52:	461a      	mov	r2, r3
 8015c54:	f7eb fa5e 	bl	8001114 <_lseek>
 8015c58:	1c43      	adds	r3, r0, #1
 8015c5a:	d102      	bne.n	8015c62 <_lseek_r+0x1e>
 8015c5c:	682b      	ldr	r3, [r5, #0]
 8015c5e:	b103      	cbz	r3, 8015c62 <_lseek_r+0x1e>
 8015c60:	6023      	str	r3, [r4, #0]
 8015c62:	bd38      	pop	{r3, r4, r5, pc}
 8015c64:	24003c98 	.word	0x24003c98

08015c68 <__swhatbuf_r>:
 8015c68:	b570      	push	{r4, r5, r6, lr}
 8015c6a:	460e      	mov	r6, r1
 8015c6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015c70:	2900      	cmp	r1, #0
 8015c72:	b096      	sub	sp, #88	; 0x58
 8015c74:	4614      	mov	r4, r2
 8015c76:	461d      	mov	r5, r3
 8015c78:	da07      	bge.n	8015c8a <__swhatbuf_r+0x22>
 8015c7a:	2300      	movs	r3, #0
 8015c7c:	602b      	str	r3, [r5, #0]
 8015c7e:	89b3      	ldrh	r3, [r6, #12]
 8015c80:	061a      	lsls	r2, r3, #24
 8015c82:	d410      	bmi.n	8015ca6 <__swhatbuf_r+0x3e>
 8015c84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015c88:	e00e      	b.n	8015ca8 <__swhatbuf_r+0x40>
 8015c8a:	466a      	mov	r2, sp
 8015c8c:	f000 f8d8 	bl	8015e40 <_fstat_r>
 8015c90:	2800      	cmp	r0, #0
 8015c92:	dbf2      	blt.n	8015c7a <__swhatbuf_r+0x12>
 8015c94:	9a01      	ldr	r2, [sp, #4]
 8015c96:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8015c9a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8015c9e:	425a      	negs	r2, r3
 8015ca0:	415a      	adcs	r2, r3
 8015ca2:	602a      	str	r2, [r5, #0]
 8015ca4:	e7ee      	b.n	8015c84 <__swhatbuf_r+0x1c>
 8015ca6:	2340      	movs	r3, #64	; 0x40
 8015ca8:	2000      	movs	r0, #0
 8015caa:	6023      	str	r3, [r4, #0]
 8015cac:	b016      	add	sp, #88	; 0x58
 8015cae:	bd70      	pop	{r4, r5, r6, pc}

08015cb0 <__smakebuf_r>:
 8015cb0:	898b      	ldrh	r3, [r1, #12]
 8015cb2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015cb4:	079d      	lsls	r5, r3, #30
 8015cb6:	4606      	mov	r6, r0
 8015cb8:	460c      	mov	r4, r1
 8015cba:	d507      	bpl.n	8015ccc <__smakebuf_r+0x1c>
 8015cbc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015cc0:	6023      	str	r3, [r4, #0]
 8015cc2:	6123      	str	r3, [r4, #16]
 8015cc4:	2301      	movs	r3, #1
 8015cc6:	6163      	str	r3, [r4, #20]
 8015cc8:	b002      	add	sp, #8
 8015cca:	bd70      	pop	{r4, r5, r6, pc}
 8015ccc:	ab01      	add	r3, sp, #4
 8015cce:	466a      	mov	r2, sp
 8015cd0:	f7ff ffca 	bl	8015c68 <__swhatbuf_r>
 8015cd4:	9900      	ldr	r1, [sp, #0]
 8015cd6:	4605      	mov	r5, r0
 8015cd8:	4630      	mov	r0, r6
 8015cda:	f7ff f90f 	bl	8014efc <_malloc_r>
 8015cde:	b948      	cbnz	r0, 8015cf4 <__smakebuf_r+0x44>
 8015ce0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015ce4:	059a      	lsls	r2, r3, #22
 8015ce6:	d4ef      	bmi.n	8015cc8 <__smakebuf_r+0x18>
 8015ce8:	f023 0303 	bic.w	r3, r3, #3
 8015cec:	f043 0302 	orr.w	r3, r3, #2
 8015cf0:	81a3      	strh	r3, [r4, #12]
 8015cf2:	e7e3      	b.n	8015cbc <__smakebuf_r+0xc>
 8015cf4:	4b0d      	ldr	r3, [pc, #52]	; (8015d2c <__smakebuf_r+0x7c>)
 8015cf6:	62b3      	str	r3, [r6, #40]	; 0x28
 8015cf8:	89a3      	ldrh	r3, [r4, #12]
 8015cfa:	6020      	str	r0, [r4, #0]
 8015cfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015d00:	81a3      	strh	r3, [r4, #12]
 8015d02:	9b00      	ldr	r3, [sp, #0]
 8015d04:	6163      	str	r3, [r4, #20]
 8015d06:	9b01      	ldr	r3, [sp, #4]
 8015d08:	6120      	str	r0, [r4, #16]
 8015d0a:	b15b      	cbz	r3, 8015d24 <__smakebuf_r+0x74>
 8015d0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015d10:	4630      	mov	r0, r6
 8015d12:	f000 f8a7 	bl	8015e64 <_isatty_r>
 8015d16:	b128      	cbz	r0, 8015d24 <__smakebuf_r+0x74>
 8015d18:	89a3      	ldrh	r3, [r4, #12]
 8015d1a:	f023 0303 	bic.w	r3, r3, #3
 8015d1e:	f043 0301 	orr.w	r3, r3, #1
 8015d22:	81a3      	strh	r3, [r4, #12]
 8015d24:	89a0      	ldrh	r0, [r4, #12]
 8015d26:	4305      	orrs	r5, r0
 8015d28:	81a5      	strh	r5, [r4, #12]
 8015d2a:	e7cd      	b.n	8015cc8 <__smakebuf_r+0x18>
 8015d2c:	08014c81 	.word	0x08014c81

08015d30 <__malloc_lock>:
 8015d30:	4801      	ldr	r0, [pc, #4]	; (8015d38 <__malloc_lock+0x8>)
 8015d32:	f7ff b889 	b.w	8014e48 <__retarget_lock_acquire_recursive>
 8015d36:	bf00      	nop
 8015d38:	24003ca0 	.word	0x24003ca0

08015d3c <__malloc_unlock>:
 8015d3c:	4801      	ldr	r0, [pc, #4]	; (8015d44 <__malloc_unlock+0x8>)
 8015d3e:	f7ff b884 	b.w	8014e4a <__retarget_lock_release_recursive>
 8015d42:	bf00      	nop
 8015d44:	24003ca0 	.word	0x24003ca0

08015d48 <_realloc_r>:
 8015d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015d4a:	4607      	mov	r7, r0
 8015d4c:	4614      	mov	r4, r2
 8015d4e:	460e      	mov	r6, r1
 8015d50:	b921      	cbnz	r1, 8015d5c <_realloc_r+0x14>
 8015d52:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8015d56:	4611      	mov	r1, r2
 8015d58:	f7ff b8d0 	b.w	8014efc <_malloc_r>
 8015d5c:	b922      	cbnz	r2, 8015d68 <_realloc_r+0x20>
 8015d5e:	f7ff f87d 	bl	8014e5c <_free_r>
 8015d62:	4625      	mov	r5, r4
 8015d64:	4628      	mov	r0, r5
 8015d66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015d68:	f000 f88c 	bl	8015e84 <_malloc_usable_size_r>
 8015d6c:	42a0      	cmp	r0, r4
 8015d6e:	d20f      	bcs.n	8015d90 <_realloc_r+0x48>
 8015d70:	4621      	mov	r1, r4
 8015d72:	4638      	mov	r0, r7
 8015d74:	f7ff f8c2 	bl	8014efc <_malloc_r>
 8015d78:	4605      	mov	r5, r0
 8015d7a:	2800      	cmp	r0, #0
 8015d7c:	d0f2      	beq.n	8015d64 <_realloc_r+0x1c>
 8015d7e:	4631      	mov	r1, r6
 8015d80:	4622      	mov	r2, r4
 8015d82:	f7fe fe6b 	bl	8014a5c <memcpy>
 8015d86:	4631      	mov	r1, r6
 8015d88:	4638      	mov	r0, r7
 8015d8a:	f7ff f867 	bl	8014e5c <_free_r>
 8015d8e:	e7e9      	b.n	8015d64 <_realloc_r+0x1c>
 8015d90:	4635      	mov	r5, r6
 8015d92:	e7e7      	b.n	8015d64 <_realloc_r+0x1c>

08015d94 <_read_r>:
 8015d94:	b538      	push	{r3, r4, r5, lr}
 8015d96:	4d07      	ldr	r5, [pc, #28]	; (8015db4 <_read_r+0x20>)
 8015d98:	4604      	mov	r4, r0
 8015d9a:	4608      	mov	r0, r1
 8015d9c:	4611      	mov	r1, r2
 8015d9e:	2200      	movs	r2, #0
 8015da0:	602a      	str	r2, [r5, #0]
 8015da2:	461a      	mov	r2, r3
 8015da4:	f7eb f956 	bl	8001054 <_read>
 8015da8:	1c43      	adds	r3, r0, #1
 8015daa:	d102      	bne.n	8015db2 <_read_r+0x1e>
 8015dac:	682b      	ldr	r3, [r5, #0]
 8015dae:	b103      	cbz	r3, 8015db2 <_read_r+0x1e>
 8015db0:	6023      	str	r3, [r4, #0]
 8015db2:	bd38      	pop	{r3, r4, r5, pc}
 8015db4:	24003c98 	.word	0x24003c98

08015db8 <_raise_r>:
 8015db8:	291f      	cmp	r1, #31
 8015dba:	b538      	push	{r3, r4, r5, lr}
 8015dbc:	4604      	mov	r4, r0
 8015dbe:	460d      	mov	r5, r1
 8015dc0:	d904      	bls.n	8015dcc <_raise_r+0x14>
 8015dc2:	2316      	movs	r3, #22
 8015dc4:	6003      	str	r3, [r0, #0]
 8015dc6:	f04f 30ff 	mov.w	r0, #4294967295
 8015dca:	bd38      	pop	{r3, r4, r5, pc}
 8015dcc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8015dce:	b112      	cbz	r2, 8015dd6 <_raise_r+0x1e>
 8015dd0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015dd4:	b94b      	cbnz	r3, 8015dea <_raise_r+0x32>
 8015dd6:	4620      	mov	r0, r4
 8015dd8:	f000 f830 	bl	8015e3c <_getpid_r>
 8015ddc:	462a      	mov	r2, r5
 8015dde:	4601      	mov	r1, r0
 8015de0:	4620      	mov	r0, r4
 8015de2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015de6:	f000 b817 	b.w	8015e18 <_kill_r>
 8015dea:	2b01      	cmp	r3, #1
 8015dec:	d00a      	beq.n	8015e04 <_raise_r+0x4c>
 8015dee:	1c59      	adds	r1, r3, #1
 8015df0:	d103      	bne.n	8015dfa <_raise_r+0x42>
 8015df2:	2316      	movs	r3, #22
 8015df4:	6003      	str	r3, [r0, #0]
 8015df6:	2001      	movs	r0, #1
 8015df8:	e7e7      	b.n	8015dca <_raise_r+0x12>
 8015dfa:	2400      	movs	r4, #0
 8015dfc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8015e00:	4628      	mov	r0, r5
 8015e02:	4798      	blx	r3
 8015e04:	2000      	movs	r0, #0
 8015e06:	e7e0      	b.n	8015dca <_raise_r+0x12>

08015e08 <raise>:
 8015e08:	4b02      	ldr	r3, [pc, #8]	; (8015e14 <raise+0xc>)
 8015e0a:	4601      	mov	r1, r0
 8015e0c:	6818      	ldr	r0, [r3, #0]
 8015e0e:	f7ff bfd3 	b.w	8015db8 <_raise_r>
 8015e12:	bf00      	nop
 8015e14:	24000040 	.word	0x24000040

08015e18 <_kill_r>:
 8015e18:	b538      	push	{r3, r4, r5, lr}
 8015e1a:	4d07      	ldr	r5, [pc, #28]	; (8015e38 <_kill_r+0x20>)
 8015e1c:	2300      	movs	r3, #0
 8015e1e:	4604      	mov	r4, r0
 8015e20:	4608      	mov	r0, r1
 8015e22:	4611      	mov	r1, r2
 8015e24:	602b      	str	r3, [r5, #0]
 8015e26:	f7eb f8f9 	bl	800101c <_kill>
 8015e2a:	1c43      	adds	r3, r0, #1
 8015e2c:	d102      	bne.n	8015e34 <_kill_r+0x1c>
 8015e2e:	682b      	ldr	r3, [r5, #0]
 8015e30:	b103      	cbz	r3, 8015e34 <_kill_r+0x1c>
 8015e32:	6023      	str	r3, [r4, #0]
 8015e34:	bd38      	pop	{r3, r4, r5, pc}
 8015e36:	bf00      	nop
 8015e38:	24003c98 	.word	0x24003c98

08015e3c <_getpid_r>:
 8015e3c:	f7eb b8e6 	b.w	800100c <_getpid>

08015e40 <_fstat_r>:
 8015e40:	b538      	push	{r3, r4, r5, lr}
 8015e42:	4d07      	ldr	r5, [pc, #28]	; (8015e60 <_fstat_r+0x20>)
 8015e44:	2300      	movs	r3, #0
 8015e46:	4604      	mov	r4, r0
 8015e48:	4608      	mov	r0, r1
 8015e4a:	4611      	mov	r1, r2
 8015e4c:	602b      	str	r3, [r5, #0]
 8015e4e:	f7eb f946 	bl	80010de <_fstat>
 8015e52:	1c43      	adds	r3, r0, #1
 8015e54:	d102      	bne.n	8015e5c <_fstat_r+0x1c>
 8015e56:	682b      	ldr	r3, [r5, #0]
 8015e58:	b103      	cbz	r3, 8015e5c <_fstat_r+0x1c>
 8015e5a:	6023      	str	r3, [r4, #0]
 8015e5c:	bd38      	pop	{r3, r4, r5, pc}
 8015e5e:	bf00      	nop
 8015e60:	24003c98 	.word	0x24003c98

08015e64 <_isatty_r>:
 8015e64:	b538      	push	{r3, r4, r5, lr}
 8015e66:	4d06      	ldr	r5, [pc, #24]	; (8015e80 <_isatty_r+0x1c>)
 8015e68:	2300      	movs	r3, #0
 8015e6a:	4604      	mov	r4, r0
 8015e6c:	4608      	mov	r0, r1
 8015e6e:	602b      	str	r3, [r5, #0]
 8015e70:	f7eb f945 	bl	80010fe <_isatty>
 8015e74:	1c43      	adds	r3, r0, #1
 8015e76:	d102      	bne.n	8015e7e <_isatty_r+0x1a>
 8015e78:	682b      	ldr	r3, [r5, #0]
 8015e7a:	b103      	cbz	r3, 8015e7e <_isatty_r+0x1a>
 8015e7c:	6023      	str	r3, [r4, #0]
 8015e7e:	bd38      	pop	{r3, r4, r5, pc}
 8015e80:	24003c98 	.word	0x24003c98

08015e84 <_malloc_usable_size_r>:
 8015e84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015e88:	1f18      	subs	r0, r3, #4
 8015e8a:	2b00      	cmp	r3, #0
 8015e8c:	bfbc      	itt	lt
 8015e8e:	580b      	ldrlt	r3, [r1, r0]
 8015e90:	18c0      	addlt	r0, r0, r3
 8015e92:	4770      	bx	lr

08015e94 <_init>:
 8015e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015e96:	bf00      	nop
 8015e98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015e9a:	bc08      	pop	{r3}
 8015e9c:	469e      	mov	lr, r3
 8015e9e:	4770      	bx	lr

08015ea0 <_fini>:
 8015ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015ea2:	bf00      	nop
 8015ea4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015ea6:	bc08      	pop	{r3}
 8015ea8:	469e      	mov	lr, r3
 8015eaa:	4770      	bx	lr
