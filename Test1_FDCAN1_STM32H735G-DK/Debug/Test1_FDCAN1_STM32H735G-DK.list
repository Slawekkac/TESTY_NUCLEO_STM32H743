
Test1_FDCAN1_STM32H735G-DK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004374  080002cc  080002cc  000102cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08004640  08004640  00014640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080046ac  080046ac  000146ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080046b0  080046b0  000146b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  20000000  080046b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000001f8  20000010  080046c4  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000208  080046c4  00020208  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   000140d4  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000020a3  00000000  00000000  00034112  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000a78  00000000  00000000  000361b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 000009c0  00000000  00000000  00036c30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00031cf1  00000000  00000000  000375f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000b064  00000000  00000000  000692e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00145515  00000000  00000000  00074345  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  001b985a  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002ba0  00000000  00000000  001b98b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	; (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	20000010 	.word	0x20000010
 80002e8:	00000000 	.word	0x00000000
 80002ec:	08004628 	.word	0x08004628

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	; (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	; (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	; (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	20000014 	.word	0x20000014
 8000308:	08004628 	.word	0x08004628

0800030c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000310:	f000 fbee 	bl	8000af0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000314:	f000 f860 	bl	80003d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000318:	f000 f98c 	bl	8000634 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 800031c:	f000 f8ca 	bl	80004b4 <MX_FDCAN1_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (Timer_sys[1] == 0)
 8000320:	4b25      	ldr	r3, [pc, #148]	; (80003b8 <main+0xac>)
 8000322:	885b      	ldrh	r3, [r3, #2]
 8000324:	b29b      	uxth	r3, r3
 8000326:	2b00      	cmp	r3, #0
 8000328:	d1fa      	bne.n	8000320 <main+0x14>
	  {
		 Timer_sys[1] = 100;
 800032a:	4b23      	ldr	r3, [pc, #140]	; (80003b8 <main+0xac>)
 800032c:	2264      	movs	r2, #100	; 0x64
 800032e:	805a      	strh	r2, [r3, #2]
		 HAL_GPIO_TogglePin(LD1_GPIO_Port,LD1_Pin);
 8000330:	2108      	movs	r1, #8
 8000332:	4822      	ldr	r0, [pc, #136]	; (80003bc <main+0xb0>)
 8000334:	f002 f9ad 	bl	8002692 <HAL_GPIO_TogglePin>
		  my_Data_Can++;
 8000338:	4b21      	ldr	r3, [pc, #132]	; (80003c0 <main+0xb4>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	3301      	adds	r3, #1
 800033e:	4a20      	ldr	r2, [pc, #128]	; (80003c0 <main+0xb4>)
 8000340:	6013      	str	r3, [r2, #0]
		  myTxData[0] = my_Data_Can;
 8000342:	4b1f      	ldr	r3, [pc, #124]	; (80003c0 <main+0xb4>)
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	b2da      	uxtb	r2, r3
 8000348:	4b1e      	ldr	r3, [pc, #120]	; (80003c4 <main+0xb8>)
 800034a:	701a      	strb	r2, [r3, #0]
		  myTxData[1] = my_Data_Can >> 8;
 800034c:	4b1c      	ldr	r3, [pc, #112]	; (80003c0 <main+0xb4>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	0a1b      	lsrs	r3, r3, #8
 8000352:	b2da      	uxtb	r2, r3
 8000354:	4b1b      	ldr	r3, [pc, #108]	; (80003c4 <main+0xb8>)
 8000356:	705a      	strb	r2, [r3, #1]
		  myTxData[2] = my_Data_Can >> 16;
 8000358:	4b19      	ldr	r3, [pc, #100]	; (80003c0 <main+0xb4>)
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	0c1b      	lsrs	r3, r3, #16
 800035e:	b2da      	uxtb	r2, r3
 8000360:	4b18      	ldr	r3, [pc, #96]	; (80003c4 <main+0xb8>)
 8000362:	709a      	strb	r2, [r3, #2]
		  myTxData[3] = my_Data_Can >> 24;
 8000364:	4b16      	ldr	r3, [pc, #88]	; (80003c0 <main+0xb4>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	0e1b      	lsrs	r3, r3, #24
 800036a:	b2da      	uxtb	r2, r3
 800036c:	4b15      	ldr	r3, [pc, #84]	; (80003c4 <main+0xb8>)
 800036e:	70da      	strb	r2, [r3, #3]
		  myTxData[62]++;
 8000370:	4b14      	ldr	r3, [pc, #80]	; (80003c4 <main+0xb8>)
 8000372:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8000376:	3301      	adds	r3, #1
 8000378:	b2da      	uxtb	r2, r3
 800037a:	4b12      	ldr	r3, [pc, #72]	; (80003c4 <main+0xb8>)
 800037c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
		  HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, myTxData);
 8000380:	4a10      	ldr	r2, [pc, #64]	; (80003c4 <main+0xb8>)
 8000382:	4911      	ldr	r1, [pc, #68]	; (80003c8 <main+0xbc>)
 8000384:	4811      	ldr	r0, [pc, #68]	; (80003cc <main+0xc0>)
 8000386:	f001 f857 	bl	8001438 <HAL_FDCAN_AddMessageToTxFifoQ>
		  g_CAN_Error = HAL_FDCAN_GetError(&hfdcan1);
 800038a:	4810      	ldr	r0, [pc, #64]	; (80003cc <main+0xc0>)
 800038c:	f001 fdaf 	bl	8001eee <HAL_FDCAN_GetError>
 8000390:	4603      	mov	r3, r0
 8000392:	4a0f      	ldr	r2, [pc, #60]	; (80003d0 <main+0xc4>)
 8000394:	6013      	str	r3, [r2, #0]
		  g_CAN_State = HAL_FDCAN_GetState(&hfdcan1);
 8000396:	480d      	ldr	r0, [pc, #52]	; (80003cc <main+0xc0>)
 8000398:	f001 fd9b 	bl	8001ed2 <HAL_FDCAN_GetState>
 800039c:	4603      	mov	r3, r0
 800039e:	461a      	mov	r2, r3
 80003a0:	4b0c      	ldr	r3, [pc, #48]	; (80003d4 <main+0xc8>)
 80003a2:	701a      	strb	r2, [r3, #0]
		  if (g_CAN_Error != 0) HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 80003a4:	4b0a      	ldr	r3, [pc, #40]	; (80003d0 <main+0xc4>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d0b9      	beq.n	8000320 <main+0x14>
 80003ac:	2104      	movs	r1, #4
 80003ae:	4803      	ldr	r0, [pc, #12]	; (80003bc <main+0xb0>)
 80003b0:	f002 f96f 	bl	8002692 <HAL_GPIO_TogglePin>
	  if (Timer_sys[1] == 0)
 80003b4:	e7b4      	b.n	8000320 <main+0x14>
 80003b6:	bf00      	nop
 80003b8:	20000080 	.word	0x20000080
 80003bc:	58020800 	.word	0x58020800
 80003c0:	200001fc 	.word	0x200001fc
 80003c4:	20000038 	.word	0x20000038
 80003c8:	200001b0 	.word	0x200001b0
 80003cc:	2000008c 	.word	0x2000008c
 80003d0:	2000007c 	.word	0x2000007c
 80003d4:	20000034 	.word	0x20000034

080003d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b09c      	sub	sp, #112	; 0x70
 80003dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80003e2:	224c      	movs	r2, #76	; 0x4c
 80003e4:	2100      	movs	r1, #0
 80003e6:	4618      	mov	r0, r3
 80003e8:	f004 f916 	bl	8004618 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003ec:	1d3b      	adds	r3, r7, #4
 80003ee:	2220      	movs	r2, #32
 80003f0:	2100      	movs	r1, #0
 80003f2:	4618      	mov	r0, r3
 80003f4:	f004 f910 	bl	8004618 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80003f8:	2004      	movs	r0, #4
 80003fa:	f002 f965 	bl	80026c8 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80003fe:	2300      	movs	r3, #0
 8000400:	603b      	str	r3, [r7, #0]
 8000402:	4b2b      	ldr	r3, [pc, #172]	; (80004b0 <SystemClock_Config+0xd8>)
 8000404:	699b      	ldr	r3, [r3, #24]
 8000406:	4a2a      	ldr	r2, [pc, #168]	; (80004b0 <SystemClock_Config+0xd8>)
 8000408:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800040c:	6193      	str	r3, [r2, #24]
 800040e:	4b28      	ldr	r3, [pc, #160]	; (80004b0 <SystemClock_Config+0xd8>)
 8000410:	699b      	ldr	r3, [r3, #24]
 8000412:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000416:	603b      	str	r3, [r7, #0]
 8000418:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800041a:	bf00      	nop
 800041c:	4b24      	ldr	r3, [pc, #144]	; (80004b0 <SystemClock_Config+0xd8>)
 800041e:	699b      	ldr	r3, [r3, #24]
 8000420:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000424:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000428:	d1f8      	bne.n	800041c <SystemClock_Config+0x44>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800042a:	2301      	movs	r3, #1
 800042c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800042e:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000432:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000434:	2302      	movs	r3, #2
 8000436:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000438:	2302      	movs	r3, #2
 800043a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 800043c:	2302      	movs	r3, #2
 800043e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 32;
 8000440:	2320      	movs	r3, #32
 8000442:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000444:	2301      	movs	r3, #1
 8000446:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000448:	2304      	movs	r3, #4
 800044a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800044c:	2302      	movs	r3, #2
 800044e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000450:	230c      	movs	r3, #12
 8000452:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000454:	2300      	movs	r3, #0
 8000456:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000458:	2300      	movs	r3, #0
 800045a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800045c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000460:	4618      	mov	r0, r3
 8000462:	f002 f98b 	bl	800277c <HAL_RCC_OscConfig>
 8000466:	4603      	mov	r3, r0
 8000468:	2b00      	cmp	r3, #0
 800046a:	d001      	beq.n	8000470 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800046c:	f000 f9d6 	bl	800081c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000470:	233f      	movs	r3, #63	; 0x3f
 8000472:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000474:	2303      	movs	r3, #3
 8000476:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000478:	2300      	movs	r3, #0
 800047a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800047c:	2308      	movs	r3, #8
 800047e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000480:	2340      	movs	r3, #64	; 0x40
 8000482:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000484:	2340      	movs	r3, #64	; 0x40
 8000486:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000488:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800048c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800048e:	2340      	movs	r3, #64	; 0x40
 8000490:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000492:	1d3b      	adds	r3, r7, #4
 8000494:	2102      	movs	r1, #2
 8000496:	4618      	mov	r0, r3
 8000498:	f002 fcfe 	bl	8002e98 <HAL_RCC_ClockConfig>
 800049c:	4603      	mov	r3, r0
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d001      	beq.n	80004a6 <SystemClock_Config+0xce>
  {
    Error_Handler();
 80004a2:	f000 f9bb 	bl	800081c <Error_Handler>
  }
}
 80004a6:	bf00      	nop
 80004a8:	3770      	adds	r7, #112	; 0x70
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bd80      	pop	{r7, pc}
 80004ae:	bf00      	nop
 80004b0:	58024800 	.word	0x58024800

080004b4 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b08a      	sub	sp, #40	; 0x28
 80004b8:	af02      	add	r7, sp, #8
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80004ba:	4b5b      	ldr	r3, [pc, #364]	; (8000628 <MX_FDCAN1_Init+0x174>)
 80004bc:	4a5b      	ldr	r2, [pc, #364]	; (800062c <MX_FDCAN1_Init+0x178>)
 80004be:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 80004c0:	4b59      	ldr	r3, [pc, #356]	; (8000628 <MX_FDCAN1_Init+0x174>)
 80004c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80004c6:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80004c8:	4b57      	ldr	r3, [pc, #348]	; (8000628 <MX_FDCAN1_Init+0x174>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 80004ce:	4b56      	ldr	r3, [pc, #344]	; (8000628 <MX_FDCAN1_Init+0x174>)
 80004d0:	2201      	movs	r2, #1
 80004d2:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80004d4:	4b54      	ldr	r3, [pc, #336]	; (8000628 <MX_FDCAN1_Init+0x174>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = ENABLE;
 80004da:	4b53      	ldr	r3, [pc, #332]	; (8000628 <MX_FDCAN1_Init+0x174>)
 80004dc:	2201      	movs	r2, #1
 80004de:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 4;
 80004e0:	4b51      	ldr	r3, [pc, #324]	; (8000628 <MX_FDCAN1_Init+0x174>)
 80004e2:	2204      	movs	r2, #4
 80004e4:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80004e6:	4b50      	ldr	r3, [pc, #320]	; (8000628 <MX_FDCAN1_Init+0x174>)
 80004e8:	2201      	movs	r2, #1
 80004ea:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 19;
 80004ec:	4b4e      	ldr	r3, [pc, #312]	; (8000628 <MX_FDCAN1_Init+0x174>)
 80004ee:	2213      	movs	r2, #19
 80004f0:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 5;
 80004f2:	4b4d      	ldr	r3, [pc, #308]	; (8000628 <MX_FDCAN1_Init+0x174>)
 80004f4:	2205      	movs	r2, #5
 80004f6:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80004f8:	4b4b      	ldr	r3, [pc, #300]	; (8000628 <MX_FDCAN1_Init+0x174>)
 80004fa:	2201      	movs	r2, #1
 80004fc:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80004fe:	4b4a      	ldr	r3, [pc, #296]	; (8000628 <MX_FDCAN1_Init+0x174>)
 8000500:	2201      	movs	r2, #1
 8000502:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000504:	4b48      	ldr	r3, [pc, #288]	; (8000628 <MX_FDCAN1_Init+0x174>)
 8000506:	2201      	movs	r2, #1
 8000508:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 800050a:	4b47      	ldr	r3, [pc, #284]	; (8000628 <MX_FDCAN1_Init+0x174>)
 800050c:	2201      	movs	r2, #1
 800050e:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000510:	4b45      	ldr	r3, [pc, #276]	; (8000628 <MX_FDCAN1_Init+0x174>)
 8000512:	2200      	movs	r2, #0
 8000514:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 8000516:	4b44      	ldr	r3, [pc, #272]	; (8000628 <MX_FDCAN1_Init+0x174>)
 8000518:	2201      	movs	r2, #1
 800051a:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 800051c:	4b42      	ldr	r3, [pc, #264]	; (8000628 <MX_FDCAN1_Init+0x174>)
 800051e:	2200      	movs	r2, #0
 8000520:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 1;
 8000522:	4b41      	ldr	r3, [pc, #260]	; (8000628 <MX_FDCAN1_Init+0x174>)
 8000524:	2201      	movs	r2, #1
 8000526:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_64;
 8000528:	4b3f      	ldr	r3, [pc, #252]	; (8000628 <MX_FDCAN1_Init+0x174>)
 800052a:	2212      	movs	r2, #18
 800052c:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 800052e:	4b3e      	ldr	r3, [pc, #248]	; (8000628 <MX_FDCAN1_Init+0x174>)
 8000530:	2200      	movs	r2, #0
 8000532:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_64;
 8000534:	4b3c      	ldr	r3, [pc, #240]	; (8000628 <MX_FDCAN1_Init+0x174>)
 8000536:	2212      	movs	r2, #18
 8000538:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 800053a:	4b3b      	ldr	r3, [pc, #236]	; (8000628 <MX_FDCAN1_Init+0x174>)
 800053c:	2200      	movs	r2, #0
 800053e:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_64;
 8000540:	4b39      	ldr	r3, [pc, #228]	; (8000628 <MX_FDCAN1_Init+0x174>)
 8000542:	2212      	movs	r2, #18
 8000544:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000546:	4b38      	ldr	r3, [pc, #224]	; (8000628 <MX_FDCAN1_Init+0x174>)
 8000548:	2200      	movs	r2, #0
 800054a:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 800054c:	4b36      	ldr	r3, [pc, #216]	; (8000628 <MX_FDCAN1_Init+0x174>)
 800054e:	2200      	movs	r2, #0
 8000550:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 1;
 8000552:	4b35      	ldr	r3, [pc, #212]	; (8000628 <MX_FDCAN1_Init+0x174>)
 8000554:	2201      	movs	r2, #1
 8000556:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000558:	4b33      	ldr	r3, [pc, #204]	; (8000628 <MX_FDCAN1_Init+0x174>)
 800055a:	2200      	movs	r2, #0
 800055c:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_64;
 800055e:	4b32      	ldr	r3, [pc, #200]	; (8000628 <MX_FDCAN1_Init+0x174>)
 8000560:	2212      	movs	r2, #18
 8000562:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000564:	4830      	ldr	r0, [pc, #192]	; (8000628 <MX_FDCAN1_Init+0x174>)
 8000566:	f000 fc6b 	bl	8000e40 <HAL_FDCAN_Init>
 800056a:	4603      	mov	r3, r0
 800056c:	2b00      	cmp	r3, #0
 800056e:	d001      	beq.n	8000574 <MX_FDCAN1_Init+0xc0>
  {
    Error_Handler();
 8000570:	f000 f954 	bl	800081c <Error_Handler>
  /* USER CODE BEGIN FDCAN1_Init 2 */

  FDCAN_FilterTypeDef sFilterConfig;

  /* Configure Rx filter */
  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000574:	2300      	movs	r3, #0
 8000576:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIndex = 0;
 8000578:	2300      	movs	r3, #0
 800057a:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 800057c:	2302      	movs	r3, #2
 800057e:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000580:	2301      	movs	r3, #1
 8000582:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterID1 = 0x111;
 8000584:	f240 1311 	movw	r3, #273	; 0x111
 8000588:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterID2 = 0x7FF;
 800058a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800058e:	617b      	str	r3, [r7, #20]
  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 8000590:	463b      	mov	r3, r7
 8000592:	4619      	mov	r1, r3
 8000594:	4824      	ldr	r0, [pc, #144]	; (8000628 <MX_FDCAN1_Init+0x174>)
 8000596:	f000 fe35 	bl	8001204 <HAL_FDCAN_ConfigFilter>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <MX_FDCAN1_Init+0xf0>
  {
    /* Filter configuration Error */
    Error_Handler();
 80005a0:	f000 f93c 	bl	800081c <Error_Handler>
  }

  /* Configure global filter to reject all non-matching frames */
  HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, FDCAN_REJECT_REMOTE, FDCAN_REJECT_REMOTE);
 80005a4:	2301      	movs	r3, #1
 80005a6:	9300      	str	r3, [sp, #0]
 80005a8:	2301      	movs	r3, #1
 80005aa:	2202      	movs	r2, #2
 80005ac:	2102      	movs	r1, #2
 80005ae:	481e      	ldr	r0, [pc, #120]	; (8000628 <MX_FDCAN1_Init+0x174>)
 80005b0:	f000 fe9e 	bl	80012f0 <HAL_FDCAN_ConfigGlobalFilter>


  /* Configure Rx FIFO 0 watermark to 2 */
  HAL_FDCAN_ConfigFifoWatermark(&hfdcan1, FDCAN_CFG_RX_FIFO0, 1);
 80005b4:	2201      	movs	r2, #1
 80005b6:	2101      	movs	r1, #1
 80005b8:	481b      	ldr	r0, [pc, #108]	; (8000628 <MX_FDCAN1_Init+0x174>)
 80005ba:	f000 fec6 	bl	800134a <HAL_FDCAN_ConfigFifoWatermark>

  /* Activate Rx FIFO 0 watermark notification */
  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_WATERMARK, 0) != HAL_OK)
 80005be:	2200      	movs	r2, #0
 80005c0:	2102      	movs	r1, #2
 80005c2:	4819      	ldr	r0, [pc, #100]	; (8000628 <MX_FDCAN1_Init+0x174>)
 80005c4:	f001 f902 	bl	80017cc <HAL_FDCAN_ActivateNotification>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <MX_FDCAN1_Init+0x11e>
  {
    /* Notification Error */
    Error_Handler();
 80005ce:	f000 f925 	bl	800081c <Error_Handler>
  }

  /* Prepare Tx Header */
  TxHeader.Identifier = 0x222;
 80005d2:	4b17      	ldr	r3, [pc, #92]	; (8000630 <MX_FDCAN1_Init+0x17c>)
 80005d4:	f240 2222 	movw	r2, #546	; 0x222
 80005d8:	601a      	str	r2, [r3, #0]
  TxHeader.IdType = FDCAN_STANDARD_ID;
 80005da:	4b15      	ldr	r3, [pc, #84]	; (8000630 <MX_FDCAN1_Init+0x17c>)
 80005dc:	2200      	movs	r2, #0
 80005de:	605a      	str	r2, [r3, #4]
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 80005e0:	4b13      	ldr	r3, [pc, #76]	; (8000630 <MX_FDCAN1_Init+0x17c>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	609a      	str	r2, [r3, #8]
  TxHeader.DataLength = FDCAN_DLC_BYTES_64;
 80005e6:	4b12      	ldr	r3, [pc, #72]	; (8000630 <MX_FDCAN1_Init+0x17c>)
 80005e8:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
 80005ec:	60da      	str	r2, [r3, #12]
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80005ee:	4b10      	ldr	r3, [pc, #64]	; (8000630 <MX_FDCAN1_Init+0x17c>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	611a      	str	r2, [r3, #16]
  TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 80005f4:	4b0e      	ldr	r3, [pc, #56]	; (8000630 <MX_FDCAN1_Init+0x17c>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	615a      	str	r2, [r3, #20]
  TxHeader.FDFormat = FDCAN_FD_CAN;
 80005fa:	4b0d      	ldr	r3, [pc, #52]	; (8000630 <MX_FDCAN1_Init+0x17c>)
 80005fc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000600:	619a      	str	r2, [r3, #24]
  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000602:	4b0b      	ldr	r3, [pc, #44]	; (8000630 <MX_FDCAN1_Init+0x17c>)
 8000604:	2200      	movs	r2, #0
 8000606:	61da      	str	r2, [r3, #28]
  TxHeader.MessageMarker = 0;
 8000608:	4b09      	ldr	r3, [pc, #36]	; (8000630 <MX_FDCAN1_Init+0x17c>)
 800060a:	2200      	movs	r2, #0
 800060c:	621a      	str	r2, [r3, #32]

  /* Start the FDCAN module */
  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 800060e:	4806      	ldr	r0, [pc, #24]	; (8000628 <MX_FDCAN1_Init+0x174>)
 8000610:	f000 fee7 	bl	80013e2 <HAL_FDCAN_Start>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <MX_FDCAN1_Init+0x16a>
  {
    /* Start Error */
    Error_Handler();
 800061a:	f000 f8ff 	bl	800081c <Error_Handler>
  }

  /* USER CODE END FDCAN1_Init 2 */

}
 800061e:	bf00      	nop
 8000620:	3720      	adds	r7, #32
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	2000008c 	.word	0x2000008c
 800062c:	4000a000 	.word	0x4000a000
 8000630:	200001b0 	.word	0x200001b0

08000634 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b08a      	sub	sp, #40	; 0x28
 8000638:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800063a:	f107 0314 	add.w	r3, r7, #20
 800063e:	2200      	movs	r2, #0
 8000640:	601a      	str	r2, [r3, #0]
 8000642:	605a      	str	r2, [r3, #4]
 8000644:	609a      	str	r2, [r3, #8]
 8000646:	60da      	str	r2, [r3, #12]
 8000648:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800064a:	4b33      	ldr	r3, [pc, #204]	; (8000718 <MX_GPIO_Init+0xe4>)
 800064c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000650:	4a31      	ldr	r2, [pc, #196]	; (8000718 <MX_GPIO_Init+0xe4>)
 8000652:	f043 0301 	orr.w	r3, r3, #1
 8000656:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800065a:	4b2f      	ldr	r3, [pc, #188]	; (8000718 <MX_GPIO_Init+0xe4>)
 800065c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000660:	f003 0301 	and.w	r3, r3, #1
 8000664:	613b      	str	r3, [r7, #16]
 8000666:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000668:	4b2b      	ldr	r3, [pc, #172]	; (8000718 <MX_GPIO_Init+0xe4>)
 800066a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800066e:	4a2a      	ldr	r2, [pc, #168]	; (8000718 <MX_GPIO_Init+0xe4>)
 8000670:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000674:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000678:	4b27      	ldr	r3, [pc, #156]	; (8000718 <MX_GPIO_Init+0xe4>)
 800067a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800067e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000682:	60fb      	str	r3, [r7, #12]
 8000684:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000686:	4b24      	ldr	r3, [pc, #144]	; (8000718 <MX_GPIO_Init+0xe4>)
 8000688:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800068c:	4a22      	ldr	r2, [pc, #136]	; (8000718 <MX_GPIO_Init+0xe4>)
 800068e:	f043 0320 	orr.w	r3, r3, #32
 8000692:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000696:	4b20      	ldr	r3, [pc, #128]	; (8000718 <MX_GPIO_Init+0xe4>)
 8000698:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800069c:	f003 0320 	and.w	r3, r3, #32
 80006a0:	60bb      	str	r3, [r7, #8]
 80006a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006a4:	4b1c      	ldr	r3, [pc, #112]	; (8000718 <MX_GPIO_Init+0xe4>)
 80006a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006aa:	4a1b      	ldr	r2, [pc, #108]	; (8000718 <MX_GPIO_Init+0xe4>)
 80006ac:	f043 0304 	orr.w	r3, r3, #4
 80006b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006b4:	4b18      	ldr	r3, [pc, #96]	; (8000718 <MX_GPIO_Init+0xe4>)
 80006b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006ba:	f003 0304 	and.w	r3, r3, #4
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80006c2:	2200      	movs	r2, #0
 80006c4:	2180      	movs	r1, #128	; 0x80
 80006c6:	4815      	ldr	r0, [pc, #84]	; (800071c <MX_GPIO_Init+0xe8>)
 80006c8:	f001 ffca 	bl	8002660 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LD2_Pin|LD1_Pin, GPIO_PIN_RESET);
 80006cc:	2200      	movs	r2, #0
 80006ce:	210c      	movs	r1, #12
 80006d0:	4813      	ldr	r0, [pc, #76]	; (8000720 <MX_GPIO_Init+0xec>)
 80006d2:	f001 ffc5 	bl	8002660 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80006d6:	2380      	movs	r3, #128	; 0x80
 80006d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006da:	2301      	movs	r3, #1
 80006dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006de:	2300      	movs	r3, #0
 80006e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e2:	2300      	movs	r3, #0
 80006e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80006e6:	f107 0314 	add.w	r3, r7, #20
 80006ea:	4619      	mov	r1, r3
 80006ec:	480b      	ldr	r0, [pc, #44]	; (800071c <MX_GPIO_Init+0xe8>)
 80006ee:	f001 fe0f 	bl	8002310 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD1_Pin;
 80006f2:	230c      	movs	r3, #12
 80006f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f6:	2301      	movs	r3, #1
 80006f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fa:	2300      	movs	r3, #0
 80006fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006fe:	2300      	movs	r3, #0
 8000700:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000702:	f107 0314 	add.w	r3, r7, #20
 8000706:	4619      	mov	r1, r3
 8000708:	4805      	ldr	r0, [pc, #20]	; (8000720 <MX_GPIO_Init+0xec>)
 800070a:	f001 fe01 	bl	8002310 <HAL_GPIO_Init>

}
 800070e:	bf00      	nop
 8000710:	3728      	adds	r7, #40	; 0x28
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	58024400 	.word	0x58024400
 800071c:	58021400 	.word	0x58021400
 8000720:	58020800 	.word	0x58020800

08000724 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs: indicates which Rx FIFO 0 interrupts are signalled.
  *                     This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
 800072c:	6039      	str	r1, [r7, #0]
  if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_WATERMARK) != RESET)
 800072e:	683b      	ldr	r3, [r7, #0]
 8000730:	f003 0302 	and.w	r3, r3, #2
 8000734:	2b00      	cmp	r3, #0
 8000736:	d01d      	beq.n	8000774 <HAL_FDCAN_RxFifo0Callback+0x50>
  {
    /* Retrieve Rx messages from RX FIFO0 */
    if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8000738:	4b10      	ldr	r3, [pc, #64]	; (800077c <HAL_FDCAN_RxFifo0Callback+0x58>)
 800073a:	4a11      	ldr	r2, [pc, #68]	; (8000780 <HAL_FDCAN_RxFifo0Callback+0x5c>)
 800073c:	2140      	movs	r1, #64	; 0x40
 800073e:	6878      	ldr	r0, [r7, #4]
 8000740:	f000 fed6 	bl	80014f0 <HAL_FDCAN_GetRxMessage>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <HAL_FDCAN_RxFifo0Callback+0x2a>
    {
    /* Reception Error */
    Error_Handler();
 800074a:	f000 f867 	bl	800081c <Error_Handler>
    }

    //HAL_GPIO_TogglePin(LD3_GPIO_Port,LD3_Pin);

    /* Display LEDx */
    if ((RxHeader.Identifier == 0x111) && (RxHeader.IdType == FDCAN_STANDARD_ID) && (RxHeader.DataLength == FDCAN_DLC_BYTES_64))
 800074e:	4b0c      	ldr	r3, [pc, #48]	; (8000780 <HAL_FDCAN_RxFifo0Callback+0x5c>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	f240 1211 	movw	r2, #273	; 0x111
 8000756:	4293      	cmp	r3, r2
 8000758:	d10c      	bne.n	8000774 <HAL_FDCAN_RxFifo0Callback+0x50>
 800075a:	4b09      	ldr	r3, [pc, #36]	; (8000780 <HAL_FDCAN_RxFifo0Callback+0x5c>)
 800075c:	685b      	ldr	r3, [r3, #4]
 800075e:	2b00      	cmp	r3, #0
 8000760:	d108      	bne.n	8000774 <HAL_FDCAN_RxFifo0Callback+0x50>
 8000762:	4b07      	ldr	r3, [pc, #28]	; (8000780 <HAL_FDCAN_RxFifo0Callback+0x5c>)
 8000764:	68db      	ldr	r3, [r3, #12]
 8000766:	f5b3 2f70 	cmp.w	r3, #983040	; 0xf0000
 800076a:	d103      	bne.n	8000774 <HAL_FDCAN_RxFifo0Callback+0x50>
    {
      //LED_Display(RxData[0]);
      //ubKeyNumber = RxData[0];
    	HAL_GPIO_TogglePin(LD3_GPIO_Port,LD3_Pin);
 800076c:	2180      	movs	r1, #128	; 0x80
 800076e:	4805      	ldr	r0, [pc, #20]	; (8000784 <HAL_FDCAN_RxFifo0Callback+0x60>)
 8000770:	f001 ff8f 	bl	8002692 <HAL_GPIO_TogglePin>
    }

  }
}
 8000774:	bf00      	nop
 8000776:	3708      	adds	r7, #8
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	2000016c 	.word	0x2000016c
 8000780:	200001d4 	.word	0x200001d4
 8000784:	58021400 	.word	0x58021400

08000788 <HAL_SYSTICK_Callback>:

void HAL_SYSTICK_Callback(void)
{
 8000788:	b480      	push	{r7}
 800078a:	b083      	sub	sp, #12
 800078c:	af00      	add	r7, sp, #0
	uint16_t t_timer;
	uint8_t i;

	Licznikms++;                        /* increment counter necessary in Delay() */
 800078e:	4b1e      	ldr	r3, [pc, #120]	; (8000808 <HAL_SYSTICK_Callback+0x80>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	3301      	adds	r3, #1
 8000794:	4a1c      	ldr	r2, [pc, #112]	; (8000808 <HAL_SYSTICK_Callback+0x80>)
 8000796:	6013      	str	r3, [r2, #0]
	uwTickms++;
 8000798:	4b1c      	ldr	r3, [pc, #112]	; (800080c <HAL_SYSTICK_Callback+0x84>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	3301      	adds	r3, #1
 800079e:	4a1b      	ldr	r2, [pc, #108]	; (800080c <HAL_SYSTICK_Callback+0x84>)
 80007a0:	6013      	str	r3, [r2, #0]
	Tickms++;
 80007a2:	4b1b      	ldr	r3, [pc, #108]	; (8000810 <HAL_SYSTICK_Callback+0x88>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	3301      	adds	r3, #1
 80007a8:	4a19      	ldr	r2, [pc, #100]	; (8000810 <HAL_SYSTICK_Callback+0x88>)
 80007aa:	6013      	str	r3, [r2, #0]

	if (Tickms >= 1000)
 80007ac:	4b18      	ldr	r3, [pc, #96]	; (8000810 <HAL_SYSTICK_Callback+0x88>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80007b4:	d307      	bcc.n	80007c6 <HAL_SYSTICK_Callback+0x3e>
	{
		Tickms = 0;
 80007b6:	4b16      	ldr	r3, [pc, #88]	; (8000810 <HAL_SYSTICK_Callback+0x88>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
		//Ticks++;
		g_COUNT_SEC++;
 80007bc:	4b15      	ldr	r3, [pc, #84]	; (8000814 <HAL_SYSTICK_Callback+0x8c>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	3301      	adds	r3, #1
 80007c2:	4a14      	ldr	r2, [pc, #80]	; (8000814 <HAL_SYSTICK_Callback+0x8c>)
 80007c4:	6013      	str	r3, [r2, #0]
	}

	// obsluga timerow systemowych
	for (i = 0; i< ELEMS(Timer_sys); i++)
 80007c6:	2300      	movs	r3, #0
 80007c8:	71fb      	strb	r3, [r7, #7]
 80007ca:	e012      	b.n	80007f2 <HAL_SYSTICK_Callback+0x6a>
	{
		t_timer = Timer_sys[i];
 80007cc:	79fb      	ldrb	r3, [r7, #7]
 80007ce:	4a12      	ldr	r2, [pc, #72]	; (8000818 <HAL_SYSTICK_Callback+0x90>)
 80007d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007d4:	80bb      	strh	r3, [r7, #4]
		if (t_timer) Timer_sys[i] = --t_timer;
 80007d6:	88bb      	ldrh	r3, [r7, #4]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d007      	beq.n	80007ec <HAL_SYSTICK_Callback+0x64>
 80007dc:	88bb      	ldrh	r3, [r7, #4]
 80007de:	3b01      	subs	r3, #1
 80007e0:	80bb      	strh	r3, [r7, #4]
 80007e2:	79fb      	ldrb	r3, [r7, #7]
 80007e4:	490c      	ldr	r1, [pc, #48]	; (8000818 <HAL_SYSTICK_Callback+0x90>)
 80007e6:	88ba      	ldrh	r2, [r7, #4]
 80007e8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for (i = 0; i< ELEMS(Timer_sys); i++)
 80007ec:	79fb      	ldrb	r3, [r7, #7]
 80007ee:	3301      	adds	r3, #1
 80007f0:	71fb      	strb	r3, [r7, #7]
 80007f2:	79fb      	ldrb	r3, [r7, #7]
 80007f4:	2b05      	cmp	r3, #5
 80007f6:	d9e9      	bls.n	80007cc <HAL_SYSTICK_Callback+0x44>

	}
}
 80007f8:	bf00      	nop
 80007fa:	bf00      	nop
 80007fc:	370c      	adds	r7, #12
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop
 8000808:	200001ac 	.word	0x200001ac
 800080c:	20000078 	.word	0x20000078
 8000810:	20000030 	.word	0x20000030
 8000814:	20000200 	.word	0x20000200
 8000818:	20000080 	.word	0x20000080

0800081c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000820:	b672      	cpsid	i
}
 8000822:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000824:	e7fe      	b.n	8000824 <Error_Handler+0x8>
	...

08000828 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000828:	b480      	push	{r7}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800082e:	4b0a      	ldr	r3, [pc, #40]	; (8000858 <HAL_MspInit+0x30>)
 8000830:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000834:	4a08      	ldr	r2, [pc, #32]	; (8000858 <HAL_MspInit+0x30>)
 8000836:	f043 0302 	orr.w	r3, r3, #2
 800083a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800083e:	4b06      	ldr	r3, [pc, #24]	; (8000858 <HAL_MspInit+0x30>)
 8000840:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000844:	f003 0302 	and.w	r3, r3, #2
 8000848:	607b      	str	r3, [r7, #4]
 800084a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800084c:	bf00      	nop
 800084e:	370c      	adds	r7, #12
 8000850:	46bd      	mov	sp, r7
 8000852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000856:	4770      	bx	lr
 8000858:	58024400 	.word	0x58024400

0800085c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b0b6      	sub	sp, #216	; 0xd8
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000864:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000868:	2200      	movs	r2, #0
 800086a:	601a      	str	r2, [r3, #0]
 800086c:	605a      	str	r2, [r3, #4]
 800086e:	609a      	str	r2, [r3, #8]
 8000870:	60da      	str	r2, [r3, #12]
 8000872:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000874:	f107 0310 	add.w	r3, r7, #16
 8000878:	22b4      	movs	r2, #180	; 0xb4
 800087a:	2100      	movs	r1, #0
 800087c:	4618      	mov	r0, r3
 800087e:	f003 fecb 	bl	8004618 <memset>
  if(hfdcan->Instance==FDCAN1)
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	4a29      	ldr	r2, [pc, #164]	; (800092c <HAL_FDCAN_MspInit+0xd0>)
 8000888:	4293      	cmp	r3, r2
 800088a:	d14b      	bne.n	8000924 <HAL_FDCAN_MspInit+0xc8>
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800088c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000890:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000892:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000896:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000898:	f107 0310 	add.w	r3, r7, #16
 800089c:	4618      	mov	r0, r3
 800089e:	f002 fe2b 	bl	80034f8 <HAL_RCCEx_PeriphCLKConfig>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80008a8:	f7ff ffb8 	bl	800081c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80008ac:	4b20      	ldr	r3, [pc, #128]	; (8000930 <HAL_FDCAN_MspInit+0xd4>)
 80008ae:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80008b2:	4a1f      	ldr	r2, [pc, #124]	; (8000930 <HAL_FDCAN_MspInit+0xd4>)
 80008b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008b8:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80008bc:	4b1c      	ldr	r3, [pc, #112]	; (8000930 <HAL_FDCAN_MspInit+0xd4>)
 80008be:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80008c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80008c6:	60fb      	str	r3, [r7, #12]
 80008c8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ca:	4b19      	ldr	r3, [pc, #100]	; (8000930 <HAL_FDCAN_MspInit+0xd4>)
 80008cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008d0:	4a17      	ldr	r2, [pc, #92]	; (8000930 <HAL_FDCAN_MspInit+0xd4>)
 80008d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008da:	4b15      	ldr	r3, [pc, #84]	; (8000930 <HAL_FDCAN_MspInit+0xd4>)
 80008dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008e4:	60bb      	str	r3, [r7, #8]
 80008e6:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PH14     ------> FDCAN1_RX
    PH13     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13;
 80008e8:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80008ec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f0:	2302      	movs	r3, #2
 80008f2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008fc:	2303      	movs	r3, #3
 80008fe:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000902:	2309      	movs	r3, #9
 8000904:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000908:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800090c:	4619      	mov	r1, r3
 800090e:	4809      	ldr	r0, [pc, #36]	; (8000934 <HAL_FDCAN_MspInit+0xd8>)
 8000910:	f001 fcfe 	bl	8002310 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8000914:	2200      	movs	r2, #0
 8000916:	2100      	movs	r1, #0
 8000918:	2013      	movs	r0, #19
 800091a:	f000 fa56 	bl	8000dca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 800091e:	2013      	movs	r0, #19
 8000920:	f000 fa6d 	bl	8000dfe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8000924:	bf00      	nop
 8000926:	37d8      	adds	r7, #216	; 0xd8
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	4000a000 	.word	0x4000a000
 8000930:	58024400 	.word	0x58024400
 8000934:	58021c00 	.word	0x58021c00

08000938 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800093c:	e7fe      	b.n	800093c <NMI_Handler+0x4>

0800093e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800093e:	b480      	push	{r7}
 8000940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000942:	e7fe      	b.n	8000942 <HardFault_Handler+0x4>

08000944 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000948:	e7fe      	b.n	8000948 <MemManage_Handler+0x4>

0800094a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800094a:	b480      	push	{r7}
 800094c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800094e:	e7fe      	b.n	800094e <BusFault_Handler+0x4>

08000950 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000954:	e7fe      	b.n	8000954 <UsageFault_Handler+0x4>

08000956 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000956:	b480      	push	{r7}
 8000958:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800095a:	bf00      	nop
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr

08000964 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000968:	bf00      	nop
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr

08000972 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000972:	b480      	push	{r7}
 8000974:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000976:	bf00      	nop
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr

08000980 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000984:	f000 f926 	bl	8000bd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 8000988:	f000 fa53 	bl	8000e32 <HAL_SYSTICK_IRQHandler>

  /* USER CODE END SysTick_IRQn 1 */
}
 800098c:	bf00      	nop
 800098e:	bd80      	pop	{r7, pc}

08000990 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000994:	4802      	ldr	r0, [pc, #8]	; (80009a0 <FDCAN1_IT0_IRQHandler+0x10>)
 8000996:	f000 ff93 	bl	80018c0 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 800099a:	bf00      	nop
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	2000008c 	.word	0x2000008c

080009a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80009a8:	4b34      	ldr	r3, [pc, #208]	; (8000a7c <SystemInit+0xd8>)
 80009aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009ae:	4a33      	ldr	r2, [pc, #204]	; (8000a7c <SystemInit+0xd8>)
 80009b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80009b8:	4b31      	ldr	r3, [pc, #196]	; (8000a80 <SystemInit+0xdc>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	f003 030f 	and.w	r3, r3, #15
 80009c0:	2b06      	cmp	r3, #6
 80009c2:	d807      	bhi.n	80009d4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80009c4:	4b2e      	ldr	r3, [pc, #184]	; (8000a80 <SystemInit+0xdc>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	f023 030f 	bic.w	r3, r3, #15
 80009cc:	4a2c      	ldr	r2, [pc, #176]	; (8000a80 <SystemInit+0xdc>)
 80009ce:	f043 0307 	orr.w	r3, r3, #7
 80009d2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80009d4:	4b2b      	ldr	r3, [pc, #172]	; (8000a84 <SystemInit+0xe0>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a2a      	ldr	r2, [pc, #168]	; (8000a84 <SystemInit+0xe0>)
 80009da:	f043 0301 	orr.w	r3, r3, #1
 80009de:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80009e0:	4b28      	ldr	r3, [pc, #160]	; (8000a84 <SystemInit+0xe0>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80009e6:	4b27      	ldr	r3, [pc, #156]	; (8000a84 <SystemInit+0xe0>)
 80009e8:	681a      	ldr	r2, [r3, #0]
 80009ea:	4926      	ldr	r1, [pc, #152]	; (8000a84 <SystemInit+0xe0>)
 80009ec:	4b26      	ldr	r3, [pc, #152]	; (8000a88 <SystemInit+0xe4>)
 80009ee:	4013      	ands	r3, r2
 80009f0:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80009f2:	4b23      	ldr	r3, [pc, #140]	; (8000a80 <SystemInit+0xdc>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	f003 0308 	and.w	r3, r3, #8
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d007      	beq.n	8000a0e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80009fe:	4b20      	ldr	r3, [pc, #128]	; (8000a80 <SystemInit+0xdc>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	f023 030f 	bic.w	r3, r3, #15
 8000a06:	4a1e      	ldr	r2, [pc, #120]	; (8000a80 <SystemInit+0xdc>)
 8000a08:	f043 0307 	orr.w	r3, r3, #7
 8000a0c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000a0e:	4b1d      	ldr	r3, [pc, #116]	; (8000a84 <SystemInit+0xe0>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000a14:	4b1b      	ldr	r3, [pc, #108]	; (8000a84 <SystemInit+0xe0>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000a1a:	4b1a      	ldr	r3, [pc, #104]	; (8000a84 <SystemInit+0xe0>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000a20:	4b18      	ldr	r3, [pc, #96]	; (8000a84 <SystemInit+0xe0>)
 8000a22:	4a1a      	ldr	r2, [pc, #104]	; (8000a8c <SystemInit+0xe8>)
 8000a24:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000a26:	4b17      	ldr	r3, [pc, #92]	; (8000a84 <SystemInit+0xe0>)
 8000a28:	4a19      	ldr	r2, [pc, #100]	; (8000a90 <SystemInit+0xec>)
 8000a2a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000a2c:	4b15      	ldr	r3, [pc, #84]	; (8000a84 <SystemInit+0xe0>)
 8000a2e:	4a19      	ldr	r2, [pc, #100]	; (8000a94 <SystemInit+0xf0>)
 8000a30:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000a32:	4b14      	ldr	r3, [pc, #80]	; (8000a84 <SystemInit+0xe0>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000a38:	4b12      	ldr	r3, [pc, #72]	; (8000a84 <SystemInit+0xe0>)
 8000a3a:	4a16      	ldr	r2, [pc, #88]	; (8000a94 <SystemInit+0xf0>)
 8000a3c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000a3e:	4b11      	ldr	r3, [pc, #68]	; (8000a84 <SystemInit+0xe0>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000a44:	4b0f      	ldr	r3, [pc, #60]	; (8000a84 <SystemInit+0xe0>)
 8000a46:	4a13      	ldr	r2, [pc, #76]	; (8000a94 <SystemInit+0xf0>)
 8000a48:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000a4a:	4b0e      	ldr	r3, [pc, #56]	; (8000a84 <SystemInit+0xe0>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a50:	4b0c      	ldr	r3, [pc, #48]	; (8000a84 <SystemInit+0xe0>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a0b      	ldr	r2, [pc, #44]	; (8000a84 <SystemInit+0xe0>)
 8000a56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a5a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000a5c:	4b09      	ldr	r3, [pc, #36]	; (8000a84 <SystemInit+0xe0>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000a62:	4b0d      	ldr	r3, [pc, #52]	; (8000a98 <SystemInit+0xf4>)
 8000a64:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000a68:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a6a:	4b04      	ldr	r3, [pc, #16]	; (8000a7c <SystemInit+0xd8>)
 8000a6c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a70:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8000a72:	bf00      	nop
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr
 8000a7c:	e000ed00 	.word	0xe000ed00
 8000a80:	52002000 	.word	0x52002000
 8000a84:	58024400 	.word	0x58024400
 8000a88:	eaf6ed7f 	.word	0xeaf6ed7f
 8000a8c:	02020200 	.word	0x02020200
 8000a90:	01ff0000 	.word	0x01ff0000
 8000a94:	01010280 	.word	0x01010280
 8000a98:	52004000 	.word	0x52004000

08000a9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000a9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ad4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000aa0:	f7ff ff80 	bl	80009a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000aa4:	480c      	ldr	r0, [pc, #48]	; (8000ad8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000aa6:	490d      	ldr	r1, [pc, #52]	; (8000adc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000aa8:	4a0d      	ldr	r2, [pc, #52]	; (8000ae0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000aaa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000aac:	e002      	b.n	8000ab4 <LoopCopyDataInit>

08000aae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ab0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ab2:	3304      	adds	r3, #4

08000ab4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ab4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ab6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ab8:	d3f9      	bcc.n	8000aae <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aba:	4a0a      	ldr	r2, [pc, #40]	; (8000ae4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000abc:	4c0a      	ldr	r4, [pc, #40]	; (8000ae8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000abe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ac0:	e001      	b.n	8000ac6 <LoopFillZerobss>

08000ac2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ac2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ac4:	3204      	adds	r2, #4

08000ac6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ac6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ac8:	d3fb      	bcc.n	8000ac2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000aca:	f003 fd73 	bl	80045b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ace:	f7ff fc1d 	bl	800030c <main>
  bx  lr
 8000ad2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ad4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ad8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000adc:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000ae0:	080046b4 	.word	0x080046b4
  ldr r2, =_sbss
 8000ae4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000ae8:	20000208 	.word	0x20000208

08000aec <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000aec:	e7fe      	b.n	8000aec <ADC3_IRQHandler>
	...

08000af0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000af6:	2003      	movs	r0, #3
 8000af8:	f000 f95c 	bl	8000db4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000afc:	f002 fb82 	bl	8003204 <HAL_RCC_GetSysClockFreq>
 8000b00:	4602      	mov	r2, r0
 8000b02:	4b15      	ldr	r3, [pc, #84]	; (8000b58 <HAL_Init+0x68>)
 8000b04:	699b      	ldr	r3, [r3, #24]
 8000b06:	0a1b      	lsrs	r3, r3, #8
 8000b08:	f003 030f 	and.w	r3, r3, #15
 8000b0c:	4913      	ldr	r1, [pc, #76]	; (8000b5c <HAL_Init+0x6c>)
 8000b0e:	5ccb      	ldrb	r3, [r1, r3]
 8000b10:	f003 031f 	and.w	r3, r3, #31
 8000b14:	fa22 f303 	lsr.w	r3, r2, r3
 8000b18:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000b1a:	4b0f      	ldr	r3, [pc, #60]	; (8000b58 <HAL_Init+0x68>)
 8000b1c:	699b      	ldr	r3, [r3, #24]
 8000b1e:	f003 030f 	and.w	r3, r3, #15
 8000b22:	4a0e      	ldr	r2, [pc, #56]	; (8000b5c <HAL_Init+0x6c>)
 8000b24:	5cd3      	ldrb	r3, [r2, r3]
 8000b26:	f003 031f 	and.w	r3, r3, #31
 8000b2a:	687a      	ldr	r2, [r7, #4]
 8000b2c:	fa22 f303 	lsr.w	r3, r2, r3
 8000b30:	4a0b      	ldr	r2, [pc, #44]	; (8000b60 <HAL_Init+0x70>)
 8000b32:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000b34:	4a0b      	ldr	r2, [pc, #44]	; (8000b64 <HAL_Init+0x74>)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b3a:	2000      	movs	r0, #0
 8000b3c:	f000 f814 	bl	8000b68 <HAL_InitTick>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000b46:	2301      	movs	r3, #1
 8000b48:	e002      	b.n	8000b50 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000b4a:	f7ff fe6d 	bl	8000828 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b4e:	2300      	movs	r3, #0
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	3708      	adds	r7, #8
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	58024400 	.word	0x58024400
 8000b5c:	0800468c 	.word	0x0800468c
 8000b60:	20000004 	.word	0x20000004
 8000b64:	20000000 	.word	0x20000000

08000b68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000b70:	4b15      	ldr	r3, [pc, #84]	; (8000bc8 <HAL_InitTick+0x60>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d101      	bne.n	8000b7c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	e021      	b.n	8000bc0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000b7c:	4b13      	ldr	r3, [pc, #76]	; (8000bcc <HAL_InitTick+0x64>)
 8000b7e:	681a      	ldr	r2, [r3, #0]
 8000b80:	4b11      	ldr	r3, [pc, #68]	; (8000bc8 <HAL_InitTick+0x60>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	4619      	mov	r1, r3
 8000b86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b92:	4618      	mov	r0, r3
 8000b94:	f000 f941 	bl	8000e1a <HAL_SYSTICK_Config>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	e00e      	b.n	8000bc0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	2b0f      	cmp	r3, #15
 8000ba6:	d80a      	bhi.n	8000bbe <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ba8:	2200      	movs	r2, #0
 8000baa:	6879      	ldr	r1, [r7, #4]
 8000bac:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb0:	f000 f90b 	bl	8000dca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bb4:	4a06      	ldr	r2, [pc, #24]	; (8000bd0 <HAL_InitTick+0x68>)
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	e000      	b.n	8000bc0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000bbe:	2301      	movs	r3, #1
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	3708      	adds	r7, #8
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	2000000c 	.word	0x2000000c
 8000bcc:	20000000 	.word	0x20000000
 8000bd0:	20000008 	.word	0x20000008

08000bd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000bd8:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <HAL_IncTick+0x20>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	461a      	mov	r2, r3
 8000bde:	4b06      	ldr	r3, [pc, #24]	; (8000bf8 <HAL_IncTick+0x24>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4413      	add	r3, r2
 8000be4:	4a04      	ldr	r2, [pc, #16]	; (8000bf8 <HAL_IncTick+0x24>)
 8000be6:	6013      	str	r3, [r2, #0]
}
 8000be8:	bf00      	nop
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	2000000c 	.word	0x2000000c
 8000bf8:	20000204 	.word	0x20000204

08000bfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  return uwTick;
 8000c00:	4b03      	ldr	r3, [pc, #12]	; (8000c10 <HAL_GetTick+0x14>)
 8000c02:	681b      	ldr	r3, [r3, #0]
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	20000204 	.word	0x20000204

08000c14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b085      	sub	sp, #20
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	f003 0307 	and.w	r3, r3, #7
 8000c22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c24:	4b0b      	ldr	r3, [pc, #44]	; (8000c54 <__NVIC_SetPriorityGrouping+0x40>)
 8000c26:	68db      	ldr	r3, [r3, #12]
 8000c28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c2a:	68ba      	ldr	r2, [r7, #8]
 8000c2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c30:	4013      	ands	r3, r2
 8000c32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000c3c:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <__NVIC_SetPriorityGrouping+0x44>)
 8000c3e:	4313      	orrs	r3, r2
 8000c40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c42:	4a04      	ldr	r2, [pc, #16]	; (8000c54 <__NVIC_SetPriorityGrouping+0x40>)
 8000c44:	68bb      	ldr	r3, [r7, #8]
 8000c46:	60d3      	str	r3, [r2, #12]
}
 8000c48:	bf00      	nop
 8000c4a:	3714      	adds	r7, #20
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr
 8000c54:	e000ed00 	.word	0xe000ed00
 8000c58:	05fa0000 	.word	0x05fa0000

08000c5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c60:	4b04      	ldr	r3, [pc, #16]	; (8000c74 <__NVIC_GetPriorityGrouping+0x18>)
 8000c62:	68db      	ldr	r3, [r3, #12]
 8000c64:	0a1b      	lsrs	r3, r3, #8
 8000c66:	f003 0307 	and.w	r3, r3, #7
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr
 8000c74:	e000ed00 	.word	0xe000ed00

08000c78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	4603      	mov	r3, r0
 8000c80:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000c82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	db0b      	blt.n	8000ca2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c8a:	88fb      	ldrh	r3, [r7, #6]
 8000c8c:	f003 021f 	and.w	r2, r3, #31
 8000c90:	4907      	ldr	r1, [pc, #28]	; (8000cb0 <__NVIC_EnableIRQ+0x38>)
 8000c92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c96:	095b      	lsrs	r3, r3, #5
 8000c98:	2001      	movs	r0, #1
 8000c9a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ca2:	bf00      	nop
 8000ca4:	370c      	adds	r7, #12
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	e000e100 	.word	0xe000e100

08000cb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	4603      	mov	r3, r0
 8000cbc:	6039      	str	r1, [r7, #0]
 8000cbe:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000cc0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	db0a      	blt.n	8000cde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	b2da      	uxtb	r2, r3
 8000ccc:	490c      	ldr	r1, [pc, #48]	; (8000d00 <__NVIC_SetPriority+0x4c>)
 8000cce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cd2:	0112      	lsls	r2, r2, #4
 8000cd4:	b2d2      	uxtb	r2, r2
 8000cd6:	440b      	add	r3, r1
 8000cd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cdc:	e00a      	b.n	8000cf4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	b2da      	uxtb	r2, r3
 8000ce2:	4908      	ldr	r1, [pc, #32]	; (8000d04 <__NVIC_SetPriority+0x50>)
 8000ce4:	88fb      	ldrh	r3, [r7, #6]
 8000ce6:	f003 030f 	and.w	r3, r3, #15
 8000cea:	3b04      	subs	r3, #4
 8000cec:	0112      	lsls	r2, r2, #4
 8000cee:	b2d2      	uxtb	r2, r2
 8000cf0:	440b      	add	r3, r1
 8000cf2:	761a      	strb	r2, [r3, #24]
}
 8000cf4:	bf00      	nop
 8000cf6:	370c      	adds	r7, #12
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr
 8000d00:	e000e100 	.word	0xe000e100
 8000d04:	e000ed00 	.word	0xe000ed00

08000d08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b089      	sub	sp, #36	; 0x24
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	60f8      	str	r0, [r7, #12]
 8000d10:	60b9      	str	r1, [r7, #8]
 8000d12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	f003 0307 	and.w	r3, r3, #7
 8000d1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d1c:	69fb      	ldr	r3, [r7, #28]
 8000d1e:	f1c3 0307 	rsb	r3, r3, #7
 8000d22:	2b04      	cmp	r3, #4
 8000d24:	bf28      	it	cs
 8000d26:	2304      	movcs	r3, #4
 8000d28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	3304      	adds	r3, #4
 8000d2e:	2b06      	cmp	r3, #6
 8000d30:	d902      	bls.n	8000d38 <NVIC_EncodePriority+0x30>
 8000d32:	69fb      	ldr	r3, [r7, #28]
 8000d34:	3b03      	subs	r3, #3
 8000d36:	e000      	b.n	8000d3a <NVIC_EncodePriority+0x32>
 8000d38:	2300      	movs	r3, #0
 8000d3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d3c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d40:	69bb      	ldr	r3, [r7, #24]
 8000d42:	fa02 f303 	lsl.w	r3, r2, r3
 8000d46:	43da      	mvns	r2, r3
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	401a      	ands	r2, r3
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d50:	f04f 31ff 	mov.w	r1, #4294967295
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	fa01 f303 	lsl.w	r3, r1, r3
 8000d5a:	43d9      	mvns	r1, r3
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d60:	4313      	orrs	r3, r2
         );
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3724      	adds	r7, #36	; 0x24
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
	...

08000d70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	3b01      	subs	r3, #1
 8000d7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d80:	d301      	bcc.n	8000d86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d82:	2301      	movs	r3, #1
 8000d84:	e00f      	b.n	8000da6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d86:	4a0a      	ldr	r2, [pc, #40]	; (8000db0 <SysTick_Config+0x40>)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	3b01      	subs	r3, #1
 8000d8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d8e:	210f      	movs	r1, #15
 8000d90:	f04f 30ff 	mov.w	r0, #4294967295
 8000d94:	f7ff ff8e 	bl	8000cb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d98:	4b05      	ldr	r3, [pc, #20]	; (8000db0 <SysTick_Config+0x40>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d9e:	4b04      	ldr	r3, [pc, #16]	; (8000db0 <SysTick_Config+0x40>)
 8000da0:	2207      	movs	r2, #7
 8000da2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000da4:	2300      	movs	r3, #0
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	e000e010 	.word	0xe000e010

08000db4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dbc:	6878      	ldr	r0, [r7, #4]
 8000dbe:	f7ff ff29 	bl	8000c14 <__NVIC_SetPriorityGrouping>
}
 8000dc2:	bf00      	nop
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}

08000dca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	b086      	sub	sp, #24
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	60b9      	str	r1, [r7, #8]
 8000dd4:	607a      	str	r2, [r7, #4]
 8000dd6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000dd8:	f7ff ff40 	bl	8000c5c <__NVIC_GetPriorityGrouping>
 8000ddc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dde:	687a      	ldr	r2, [r7, #4]
 8000de0:	68b9      	ldr	r1, [r7, #8]
 8000de2:	6978      	ldr	r0, [r7, #20]
 8000de4:	f7ff ff90 	bl	8000d08 <NVIC_EncodePriority>
 8000de8:	4602      	mov	r2, r0
 8000dea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000dee:	4611      	mov	r1, r2
 8000df0:	4618      	mov	r0, r3
 8000df2:	f7ff ff5f 	bl	8000cb4 <__NVIC_SetPriority>
}
 8000df6:	bf00      	nop
 8000df8:	3718      	adds	r7, #24
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}

08000dfe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dfe:	b580      	push	{r7, lr}
 8000e00:	b082      	sub	sp, #8
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	4603      	mov	r3, r0
 8000e06:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e08:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f7ff ff33 	bl	8000c78 <__NVIC_EnableIRQ>
}
 8000e12:	bf00      	nop
 8000e14:	3708      	adds	r7, #8
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b082      	sub	sp, #8
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e22:	6878      	ldr	r0, [r7, #4]
 8000e24:	f7ff ffa4 	bl	8000d70 <SysTick_Config>
 8000e28:	4603      	mov	r3, r0
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}

08000e32 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000e32:	b580      	push	{r7, lr}
 8000e34:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000e36:	f7ff fca7 	bl	8000788 <HAL_SYSTICK_Callback>
}
 8000e3a:	bf00      	nop
 8000e3c:	bd80      	pop	{r7, pc}
	...

08000e40 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b098      	sub	sp, #96	; 0x60
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8000e48:	4a84      	ldr	r2, [pc, #528]	; (800105c <HAL_FDCAN_Init+0x21c>)
 8000e4a:	f107 030c 	add.w	r3, r7, #12
 8000e4e:	4611      	mov	r1, r2
 8000e50:	224c      	movs	r2, #76	; 0x4c
 8000e52:	4618      	mov	r0, r3
 8000e54:	f003 fbd2 	bl	80045fc <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d101      	bne.n	8000e62 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	e1ca      	b.n	80011f8 <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4a7e      	ldr	r2, [pc, #504]	; (8001060 <HAL_FDCAN_Init+0x220>)
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	d106      	bne.n	8000e7a <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000e74:	461a      	mov	r2, r3
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8000e80:	b2db      	uxtb	r3, r3
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d106      	bne.n	8000e94 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	2200      	movs	r2, #0
 8000e8a:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8000e8e:	6878      	ldr	r0, [r7, #4]
 8000e90:	f7ff fce4 	bl	800085c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	699a      	ldr	r2, [r3, #24]
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f022 0210 	bic.w	r2, r2, #16
 8000ea2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ea4:	f7ff feaa 	bl	8000bfc <HAL_GetTick>
 8000ea8:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000eaa:	e014      	b.n	8000ed6 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000eac:	f7ff fea6 	bl	8000bfc <HAL_GetTick>
 8000eb0:	4602      	mov	r2, r0
 8000eb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000eb4:	1ad3      	subs	r3, r2, r3
 8000eb6:	2b0a      	cmp	r3, #10
 8000eb8:	d90d      	bls.n	8000ed6 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000ec0:	f043 0201 	orr.w	r2, r3, #1
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2203      	movs	r2, #3
 8000ece:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	e190      	b.n	80011f8 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	699b      	ldr	r3, [r3, #24]
 8000edc:	f003 0308 	and.w	r3, r3, #8
 8000ee0:	2b08      	cmp	r3, #8
 8000ee2:	d0e3      	beq.n	8000eac <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	699a      	ldr	r2, [r3, #24]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f042 0201 	orr.w	r2, r2, #1
 8000ef2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ef4:	f7ff fe82 	bl	8000bfc <HAL_GetTick>
 8000ef8:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000efa:	e014      	b.n	8000f26 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000efc:	f7ff fe7e 	bl	8000bfc <HAL_GetTick>
 8000f00:	4602      	mov	r2, r0
 8000f02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000f04:	1ad3      	subs	r3, r2, r3
 8000f06:	2b0a      	cmp	r3, #10
 8000f08:	d90d      	bls.n	8000f26 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000f10:	f043 0201 	orr.w	r2, r3, #1
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2203      	movs	r2, #3
 8000f1e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8000f22:	2301      	movs	r3, #1
 8000f24:	e168      	b.n	80011f8 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	699b      	ldr	r3, [r3, #24]
 8000f2c:	f003 0301 	and.w	r3, r3, #1
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d0e3      	beq.n	8000efc <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	699a      	ldr	r2, [r3, #24]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f042 0202 	orr.w	r2, r2, #2
 8000f42:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	7c1b      	ldrb	r3, [r3, #16]
 8000f48:	2b01      	cmp	r3, #1
 8000f4a:	d108      	bne.n	8000f5e <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	699a      	ldr	r2, [r3, #24]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000f5a:	619a      	str	r2, [r3, #24]
 8000f5c:	e007      	b.n	8000f6e <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	699a      	ldr	r2, [r3, #24]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000f6c:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	7c5b      	ldrb	r3, [r3, #17]
 8000f72:	2b01      	cmp	r3, #1
 8000f74:	d108      	bne.n	8000f88 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	699a      	ldr	r2, [r3, #24]
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000f84:	619a      	str	r2, [r3, #24]
 8000f86:	e007      	b.n	8000f98 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	699a      	ldr	r2, [r3, #24]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000f96:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	7c9b      	ldrb	r3, [r3, #18]
 8000f9c:	2b01      	cmp	r3, #1
 8000f9e:	d108      	bne.n	8000fb2 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	699a      	ldr	r2, [r3, #24]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000fae:	619a      	str	r2, [r3, #24]
 8000fb0:	e007      	b.n	8000fc2 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	699a      	ldr	r2, [r3, #24]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000fc0:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	699b      	ldr	r3, [r3, #24]
 8000fc8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	689a      	ldr	r2, [r3, #8]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	430a      	orrs	r2, r1
 8000fd6:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	699a      	ldr	r2, [r3, #24]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8000fe6:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	691a      	ldr	r2, [r3, #16]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f022 0210 	bic.w	r2, r2, #16
 8000ff6:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	68db      	ldr	r3, [r3, #12]
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	d108      	bne.n	8001012 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	699a      	ldr	r2, [r3, #24]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f042 0204 	orr.w	r2, r2, #4
 800100e:	619a      	str	r2, [r3, #24]
 8001010:	e030      	b.n	8001074 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	68db      	ldr	r3, [r3, #12]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d02c      	beq.n	8001074 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	68db      	ldr	r3, [r3, #12]
 800101e:	2b02      	cmp	r3, #2
 8001020:	d020      	beq.n	8001064 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	699a      	ldr	r2, [r3, #24]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001030:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	691a      	ldr	r2, [r3, #16]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f042 0210 	orr.w	r2, r2, #16
 8001040:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	68db      	ldr	r3, [r3, #12]
 8001046:	2b03      	cmp	r3, #3
 8001048:	d114      	bne.n	8001074 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	699a      	ldr	r2, [r3, #24]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f042 0220 	orr.w	r2, r2, #32
 8001058:	619a      	str	r2, [r3, #24]
 800105a:	e00b      	b.n	8001074 <HAL_FDCAN_Init+0x234>
 800105c:	08004640 	.word	0x08004640
 8001060:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	699a      	ldr	r2, [r3, #24]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f042 0220 	orr.w	r2, r2, #32
 8001072:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	699b      	ldr	r3, [r3, #24]
 8001078:	3b01      	subs	r3, #1
 800107a:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	69db      	ldr	r3, [r3, #28]
 8001080:	3b01      	subs	r3, #1
 8001082:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001084:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6a1b      	ldr	r3, [r3, #32]
 800108a:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800108c:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	695b      	ldr	r3, [r3, #20]
 8001094:	3b01      	subs	r3, #1
 8001096:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800109c:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800109e:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	689b      	ldr	r3, [r3, #8]
 80010a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80010a8:	d115      	bne.n	80010d6 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010ae:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010b4:	3b01      	subs	r3, #1
 80010b6:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80010b8:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010be:	3b01      	subs	r3, #1
 80010c0:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80010c2:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ca:	3b01      	subs	r3, #1
 80010cc:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80010d2:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80010d4:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d00a      	beq.n	80010f4 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	430a      	orrs	r2, r1
 80010f0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010fc:	4413      	add	r3, r2
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d012      	beq.n	8001128 <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800110a:	f023 0107 	bic.w	r1, r3, #7
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001118:	4413      	add	r3, r2
 800111a:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	430a      	orrs	r2, r1
 8001124:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112c:	2b00      	cmp	r3, #0
 800112e:	d012      	beq.n	8001156 <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001138:	f023 0107 	bic.w	r1, r3, #7
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001146:	4413      	add	r3, r2
 8001148:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	430a      	orrs	r2, r1
 8001152:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800115a:	2b00      	cmp	r3, #0
 800115c:	d013      	beq.n	8001186 <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001166:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001174:	4413      	add	r3, r2
 8001176:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800117a:	011a      	lsls	r2, r3, #4
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	430a      	orrs	r2, r1
 8001182:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800118a:	2b00      	cmp	r3, #0
 800118c:	d013      	beq.n	80011b6 <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001196:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80011a4:	4413      	add	r3, r2
 80011a6:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80011aa:	021a      	lsls	r2, r3, #8
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	430a      	orrs	r2, r1
 80011b2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4a11      	ldr	r2, [pc, #68]	; (8001200 <HAL_FDCAN_Init+0x3c0>)
 80011bc:	4293      	cmp	r3, r2
 80011be:	d107      	bne.n	80011d0 <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	689a      	ldr	r2, [r3, #8]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	f022 0203 	bic.w	r2, r2, #3
 80011ce:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2200      	movs	r2, #0
 80011d4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2200      	movs	r2, #0
 80011dc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2201      	movs	r2, #1
 80011e4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f000 fe8d 	bl	8001f08 <FDCAN_CalcultateRamBlockAddresses>
 80011ee:	4603      	mov	r3, r0
 80011f0:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 80011f4:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	3760      	adds	r7, #96	; 0x60
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	4000a000 	.word	0x4000a000

08001204 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8001204:	b480      	push	{r7}
 8001206:	b087      	sub	sp, #28
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001214:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001216:	7bfb      	ldrb	r3, [r7, #15]
 8001218:	2b01      	cmp	r3, #1
 800121a:	d002      	beq.n	8001222 <HAL_FDCAN_ConfigFilter+0x1e>
 800121c:	7bfb      	ldrb	r3, [r7, #15]
 800121e:	2b02      	cmp	r3, #2
 8001220:	d157      	bne.n	80012d2 <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d12b      	bne.n	8001282 <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	68db      	ldr	r3, [r3, #12]
 800122e:	2b07      	cmp	r3, #7
 8001230:	d10d      	bne.n	800124e <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	691b      	ldr	r3, [r3, #16]
 8001236:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	69db      	ldr	r3, [r3, #28]
 800123c:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 800123e:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8001244:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 8001246:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 800124a:	617b      	str	r3, [r7, #20]
 800124c:	e00e      	b.n	800126c <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	689b      	ldr	r3, [r3, #8]
 8001252:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800125a:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	691b      	ldr	r3, [r3, #16]
 8001260:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 8001262:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001268:	4313      	orrs	r3, r2
 800126a:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	009b      	lsls	r3, r3, #2
 8001276:	4413      	add	r3, r2
 8001278:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800127a:	68bb      	ldr	r3, [r7, #8]
 800127c:	697a      	ldr	r2, [r7, #20]
 800127e:	601a      	str	r2, [r3, #0]
 8001280:	e025      	b.n	80012ce <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	68db      	ldr	r3, [r3, #12]
 8001286:	075a      	lsls	r2, r3, #29
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	691b      	ldr	r3, [r3, #16]
 800128c:	4313      	orrs	r3, r2
 800128e:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	68db      	ldr	r3, [r3, #12]
 8001294:	2b07      	cmp	r3, #7
 8001296:	d103      	bne.n	80012a0 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	699b      	ldr	r3, [r3, #24]
 800129c:	613b      	str	r3, [r7, #16]
 800129e:	e006      	b.n	80012ae <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	689b      	ldr	r3, [r3, #8]
 80012a4:	079a      	lsls	r2, r3, #30
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	695b      	ldr	r3, [r3, #20]
 80012aa:	4313      	orrs	r3, r2
 80012ac:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	00db      	lsls	r3, r3, #3
 80012b8:	4413      	add	r3, r2
 80012ba:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	697a      	ldr	r2, [r7, #20]
 80012c0:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80012c2:	68bb      	ldr	r3, [r7, #8]
 80012c4:	3304      	adds	r3, #4
 80012c6:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	693a      	ldr	r2, [r7, #16]
 80012cc:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80012ce:	2300      	movs	r3, #0
 80012d0:	e008      	b.n	80012e4 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80012d8:	f043 0202 	orr.w	r2, r3, #2
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
  }
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	371c      	adds	r7, #28
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr

080012f0 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b085      	sub	sp, #20
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	60f8      	str	r0, [r7, #12]
 80012f8:	60b9      	str	r1, [r7, #8]
 80012fa:	607a      	str	r2, [r7, #4]
 80012fc:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001304:	b2db      	uxtb	r3, r3
 8001306:	2b01      	cmp	r3, #1
 8001308:	d110      	bne.n	800132c <HAL_FDCAN_ConfigGlobalFilter+0x3c>
  {
    /* Configure global filter */
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 800130a:	68bb      	ldr	r3, [r7, #8]
 800130c:	011a      	lsls	r2, r3, #4
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	009b      	lsls	r3, r3, #2
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8001312:	431a      	orrs	r2, r3
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	005b      	lsls	r3, r3, #1
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8001318:	ea42 0103 	orr.w	r1, r2, r3
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	681b      	ldr	r3, [r3, #0]
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	430a      	orrs	r2, r1
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8001324:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                             (RejectRemoteExt << FDCAN_GFC_RRFE_Pos));

    /* Return function status */
    return HAL_OK;
 8001328:	2300      	movs	r3, #0
 800132a:	e008      	b.n	800133e <HAL_FDCAN_ConfigGlobalFilter+0x4e>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001332:	f043 0204 	orr.w	r2, r3, #4
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800133c:	2301      	movs	r3, #1
  }
}
 800133e:	4618      	mov	r0, r3
 8001340:	3714      	adds	r7, #20
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr

0800134a <HAL_FDCAN_ConfigFifoWatermark>:
  *           - 0 and 32, if FIFO is FDCAN_CFG_TX_EVENT_FIFO
  *           - 0 and 64, if FIFO is FDCAN_CFG_RX_FIFO0 or FDCAN_CFG_RX_FIFO1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFifoWatermark(FDCAN_HandleTypeDef *hfdcan, uint32_t FIFO, uint32_t Watermark)
{
 800134a:	b480      	push	{r7}
 800134c:	b085      	sub	sp, #20
 800134e:	af00      	add	r7, sp, #0
 8001350:	60f8      	str	r0, [r7, #12]
 8001352:	60b9      	str	r1, [r7, #8]
 8001354:	607a      	str	r2, [r7, #4]
  else /* (FIFO == FDCAN_CFG_RX_FIFO0) || (FIFO == FDCAN_CFG_RX_FIFO1) */
  {
    assert_param(IS_FDCAN_MAX_VALUE(Watermark, 64U));
  }

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800135c:	b2db      	uxtb	r3, r3
 800135e:	2b01      	cmp	r3, #1
 8001360:	d130      	bne.n	80013c4 <HAL_FDCAN_ConfigFifoWatermark+0x7a>
  {
    /* Set the level for FIFO watermark interrupt */
    if (FIFO == FDCAN_CFG_TX_EVENT_FIFO)
 8001362:	68bb      	ldr	r3, [r7, #8]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d10d      	bne.n	8001384 <HAL_FDCAN_ConfigFifoWatermark+0x3a>
    {
      MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFWM, (Watermark << FDCAN_TXEFC_EFWM_Pos));
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001370:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	061a      	lsls	r2, r3, #24
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	430a      	orrs	r2, r1
 800137e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8001382:	e01d      	b.n	80013c0 <HAL_FDCAN_ConfigFifoWatermark+0x76>
    }
    else if (FIFO == FDCAN_CFG_RX_FIFO0)
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	2b01      	cmp	r3, #1
 8001388:	d10d      	bne.n	80013a6 <HAL_FDCAN_ConfigFifoWatermark+0x5c>
    {
      MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0WM, (Watermark << FDCAN_RXF0C_F0WM_Pos));
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001392:	f023 41fe 	bic.w	r1, r3, #2130706432	; 0x7f000000
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	061a      	lsls	r2, r3, #24
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	430a      	orrs	r2, r1
 80013a0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 80013a4:	e00c      	b.n	80013c0 <HAL_FDCAN_ConfigFifoWatermark+0x76>
    }
    else /* FIFO == FDCAN_CFG_RX_FIFO1 */
    {
      MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1WM, (Watermark << FDCAN_RXF1C_F1WM_Pos));
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80013ae:	f023 41fe 	bic.w	r1, r3, #2130706432	; 0x7f000000
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	061a      	lsls	r2, r3, #24
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	430a      	orrs	r2, r1
 80013bc:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    }

    /* Return function status */
    return HAL_OK;
 80013c0:	2300      	movs	r3, #0
 80013c2:	e008      	b.n	80013d6 <HAL_FDCAN_ConfigFifoWatermark+0x8c>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80013ca:	f043 0204 	orr.w	r2, r3, #4
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80013d4:	2301      	movs	r3, #1
  }
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3714      	adds	r7, #20
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr

080013e2 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80013e2:	b480      	push	{r7}
 80013e4:	b083      	sub	sp, #12
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	d111      	bne.n	800141a <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2202      	movs	r2, #2
 80013fa:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	699a      	ldr	r2, [r3, #24]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f022 0201 	bic.w	r2, r2, #1
 800140c:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2200      	movs	r2, #0
 8001412:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 8001416:	2300      	movs	r3, #0
 8001418:	e008      	b.n	800142c <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001420:	f043 0204 	orr.w	r2, r3, #4
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
  }
}
 800142c:	4618      	mov	r0, r3
 800142e:	370c      	adds	r7, #12
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr

08001438 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b086      	sub	sp, #24
 800143c:	af00      	add	r7, sp, #0
 800143e:	60f8      	str	r0, [r7, #12]
 8001440:	60b9      	str	r1, [r7, #8]
 8001442:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800144a:	b2db      	uxtb	r3, r3
 800144c:	2b02      	cmp	r3, #2
 800144e:	d141      	bne.n	80014d4 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001458:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 800145c:	2b00      	cmp	r3, #0
 800145e:	d109      	bne.n	8001474 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001466:	f043 0220 	orr.w	r2, r3, #32
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 8001470:	2301      	movs	r3, #1
 8001472:	e038      	b.n	80014e6 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800147c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001480:	2b00      	cmp	r3, #0
 8001482:	d009      	beq.n	8001498 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800148a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 8001494:	2301      	movs	r3, #1
 8001496:	e026      	b.n	80014e6 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80014a0:	0c1b      	lsrs	r3, r3, #16
 80014a2:	f003 031f 	and.w	r3, r3, #31
 80014a6:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	687a      	ldr	r2, [r7, #4]
 80014ac:	68b9      	ldr	r1, [r7, #8]
 80014ae:	68f8      	ldr	r0, [r7, #12]
 80014b0:	f000 feb0 	bl	8002214 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	2101      	movs	r1, #1
 80014ba:	697a      	ldr	r2, [r7, #20]
 80014bc:	fa01 f202 	lsl.w	r2, r1, r2
 80014c0:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80014c4:	2201      	movs	r2, #1
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	409a      	lsls	r2, r3
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }

    /* Return function status */
    return HAL_OK;
 80014d0:	2300      	movs	r3, #0
 80014d2:	e008      	b.n	80014e6 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80014da:	f043 0208 	orr.w	r2, r3, #8
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80014e4:	2301      	movs	r3, #1
  }
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3718      	adds	r7, #24
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
	...

080014f0 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b08b      	sub	sp, #44	; 0x2c
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	60f8      	str	r0, [r7, #12]
 80014f8:	60b9      	str	r1, [r7, #8]
 80014fa:	607a      	str	r2, [r7, #4]
 80014fc:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80014fe:	2300      	movs	r3, #0
 8001500:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001508:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 800150a:	7efb      	ldrb	r3, [r7, #27]
 800150c:	2b02      	cmp	r3, #2
 800150e:	f040 814b 	bne.w	80017a8 <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001512:	68bb      	ldr	r3, [r7, #8]
 8001514:	2b40      	cmp	r3, #64	; 0x40
 8001516:	d14d      	bne.n	80015b4 <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001520:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001524:	2b00      	cmp	r3, #0
 8001526:	d109      	bne.n	800153c <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800152e:	f043 0220 	orr.w	r2, r3, #32
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8001538:	2301      	movs	r3, #1
 800153a:	e13e      	b.n	80017ba <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001544:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001548:	2b00      	cmp	r3, #0
 800154a:	d109      	bne.n	8001560 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001552:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800155c:	2301      	movs	r3, #1
 800155e:	e12c      	b.n	80017ba <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001568:	0e1b      	lsrs	r3, r3, #24
 800156a:	f003 0301 	and.w	r3, r3, #1
 800156e:	2b01      	cmp	r3, #1
 8001570:	d10b      	bne.n	800158a <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800157a:	0fdb      	lsrs	r3, r3, #31
 800157c:	f003 0301 	and.w	r3, r3, #1
 8001580:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001584:	d101      	bne.n	800158a <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001586:	2301      	movs	r3, #1
 8001588:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001592:	0a1b      	lsrs	r3, r3, #8
 8001594:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001598:	69fa      	ldr	r2, [r7, #28]
 800159a:	4413      	add	r3, r2
 800159c:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a6:	69f9      	ldr	r1, [r7, #28]
 80015a8:	fb01 f303 	mul.w	r3, r1, r3
 80015ac:	009b      	lsls	r3, r3, #2
 80015ae:	4413      	add	r3, r2
 80015b0:	627b      	str	r3, [r7, #36]	; 0x24
 80015b2:	e069      	b.n	8001688 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	2b41      	cmp	r3, #65	; 0x41
 80015b8:	d14d      	bne.n	8001656 <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80015c2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d109      	bne.n	80015de <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80015d0:	f043 0220 	orr.w	r2, r3, #32
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e0ed      	b.n	80017ba <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80015e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d109      	bne.n	8001602 <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80015f4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e0db      	b.n	80017ba <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800160a:	0e1b      	lsrs	r3, r3, #24
 800160c:	f003 0301 	and.w	r3, r3, #1
 8001610:	2b01      	cmp	r3, #1
 8001612:	d10b      	bne.n	800162c <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800161c:	0fdb      	lsrs	r3, r3, #31
 800161e:	f003 0301 	and.w	r3, r3, #1
 8001622:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001626:	d101      	bne.n	800162c <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001628:	2301      	movs	r3, #1
 800162a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001634:	0a1b      	lsrs	r3, r3, #8
 8001636:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800163a:	69fa      	ldr	r2, [r7, #28]
 800163c:	4413      	add	r3, r2
 800163e:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001648:	69f9      	ldr	r1, [r7, #28]
 800164a:	fb01 f303 	mul.w	r3, r1, r3
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	4413      	add	r3, r2
 8001652:	627b      	str	r3, [r7, #36]	; 0x24
 8001654:	e018      	b.n	8001688 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800165a:	68ba      	ldr	r2, [r7, #8]
 800165c:	429a      	cmp	r2, r3
 800165e:	d309      	bcc.n	8001674 <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001666:	f043 0220 	orr.w	r2, r3, #32
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8001670:	2301      	movs	r3, #1
 8001672:	e0a2      	b.n	80017ba <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800167c:	68b9      	ldr	r1, [r7, #8]
 800167e:	fb01 f303 	mul.w	r3, r1, r3
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	4413      	add	r3, r2
 8001686:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8001688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d107      	bne.n	80016ac <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 800169c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	0c9b      	lsrs	r3, r3, #18
 80016a2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	601a      	str	r2, [r3, #0]
 80016aa:	e005      	b.n	80016b8 <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80016ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80016b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80016c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80016d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d2:	3304      	adds	r3, #4
 80016d4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80016d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	b29a      	uxth	r2, r3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 80016e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80016ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80016f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 8001704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	0e1b      	lsrs	r3, r3, #24
 800170a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 8001712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	0fda      	lsrs	r2, r3, #31
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 800171c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800171e:	3304      	adds	r3, #4
 8001720:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8001722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001724:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8001726:	2300      	movs	r3, #0
 8001728:	623b      	str	r3, [r7, #32]
 800172a:	e00a      	b.n	8001742 <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 800172c:	697a      	ldr	r2, [r7, #20]
 800172e:	6a3b      	ldr	r3, [r7, #32]
 8001730:	441a      	add	r2, r3
 8001732:	6839      	ldr	r1, [r7, #0]
 8001734:	6a3b      	ldr	r3, [r7, #32]
 8001736:	440b      	add	r3, r1
 8001738:	7812      	ldrb	r2, [r2, #0]
 800173a:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 800173c:	6a3b      	ldr	r3, [r7, #32]
 800173e:	3301      	adds	r3, #1
 8001740:	623b      	str	r3, [r7, #32]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	68db      	ldr	r3, [r3, #12]
 8001746:	0c1b      	lsrs	r3, r3, #16
 8001748:	4a1f      	ldr	r2, [pc, #124]	; (80017c8 <HAL_FDCAN_GetRxMessage+0x2d8>)
 800174a:	5cd3      	ldrb	r3, [r2, r3]
 800174c:	461a      	mov	r2, r3
 800174e:	6a3b      	ldr	r3, [r7, #32]
 8001750:	4293      	cmp	r3, r2
 8001752:	d3eb      	bcc.n	800172c <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	2b40      	cmp	r3, #64	; 0x40
 8001758:	d105      	bne.n	8001766 <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	69fa      	ldr	r2, [r7, #28]
 8001760:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8001764:	e01e      	b.n	80017a4 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	2b41      	cmp	r3, #65	; 0x41
 800176a:	d105      	bne.n	8001778 <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	69fa      	ldr	r2, [r7, #28]
 8001772:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8001776:	e015      	b.n	80017a4 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	2b1f      	cmp	r3, #31
 800177c:	d808      	bhi.n	8001790 <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	2101      	movs	r1, #1
 8001784:	68ba      	ldr	r2, [r7, #8]
 8001786:	fa01 f202 	lsl.w	r2, r1, r2
 800178a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800178e:	e009      	b.n	80017a4 <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	f003 021f 	and.w	r2, r3, #31
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	2101      	movs	r1, #1
 800179c:	fa01 f202 	lsl.w	r2, r1, r2
 80017a0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 80017a4:	2300      	movs	r3, #0
 80017a6:	e008      	b.n	80017ba <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80017ae:	f043 0208 	orr.w	r2, r3, #8
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
  }
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	372c      	adds	r7, #44	; 0x2c
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	0800469c 	.word	0x0800469c

080017cc <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b087      	sub	sp, #28
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	60f8      	str	r0, [r7, #12]
 80017d4:	60b9      	str	r1, [r7, #8]
 80017d6:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80017de:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80017e0:	7dfb      	ldrb	r3, [r7, #23]
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d002      	beq.n	80017ec <HAL_FDCAN_ActivateNotification+0x20>
 80017e6:	7dfb      	ldrb	r3, [r7, #23]
 80017e8:	2b02      	cmp	r3, #2
 80017ea:	d155      	bne.n	8001898 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	4013      	ands	r3, r2
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d108      	bne.n	800180c <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f042 0201 	orr.w	r2, r2, #1
 8001808:	65da      	str	r2, [r3, #92]	; 0x5c
 800180a:	e014      	b.n	8001836 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	4013      	ands	r3, r2
 8001816:	68ba      	ldr	r2, [r7, #8]
 8001818:	429a      	cmp	r2, r3
 800181a:	d108      	bne.n	800182e <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f042 0202 	orr.w	r2, r2, #2
 800182a:	65da      	str	r2, [r3, #92]	; 0x5c
 800182c:	e003      	b.n	8001836 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	2203      	movs	r2, #3
 8001834:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800183c:	2b00      	cmp	r3, #0
 800183e:	d009      	beq.n	8001854 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	687a      	ldr	r2, [r7, #4]
 800184e:	430a      	orrs	r2, r1
 8001850:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800185a:	2b00      	cmp	r3, #0
 800185c:	d009      	beq.n	8001872 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	687a      	ldr	r2, [r7, #4]
 800186c:	430a      	orrs	r2, r1
 800186e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001878:	68ba      	ldr	r2, [r7, #8]
 800187a:	4b0f      	ldr	r3, [pc, #60]	; (80018b8 <HAL_FDCAN_ActivateNotification+0xec>)
 800187c:	4013      	ands	r3, r2
 800187e:	68fa      	ldr	r2, [r7, #12]
 8001880:	6812      	ldr	r2, [r2, #0]
 8001882:	430b      	orrs	r3, r1
 8001884:	6553      	str	r3, [r2, #84]	; 0x54
 8001886:	4b0d      	ldr	r3, [pc, #52]	; (80018bc <HAL_FDCAN_ActivateNotification+0xf0>)
 8001888:	695a      	ldr	r2, [r3, #20]
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	0f9b      	lsrs	r3, r3, #30
 800188e:	490b      	ldr	r1, [pc, #44]	; (80018bc <HAL_FDCAN_ActivateNotification+0xf0>)
 8001890:	4313      	orrs	r3, r2
 8001892:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8001894:	2300      	movs	r3, #0
 8001896:	e008      	b.n	80018aa <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800189e:	f043 0202 	orr.w	r2, r3, #2
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
  }
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	371c      	adds	r7, #28
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	3fcfffff 	.word	0x3fcfffff
 80018bc:	4000a800 	.word	0x4000a800

080018c0 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b092      	sub	sp, #72	; 0x48
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  uint32_t TTDistErrors;
  uint32_t TTFatalErrors;
  uint32_t SWTime;
  uint32_t SWCycleCount;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 80018c8:	4b90      	ldr	r3, [pc, #576]	; (8001b0c <HAL_FDCAN_IRQHandler+0x24c>)
 80018ca:	691b      	ldr	r3, [r3, #16]
 80018cc:	079b      	lsls	r3, r3, #30
 80018ce:	647b      	str	r3, [r7, #68]	; 0x44
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 80018d0:	4b8e      	ldr	r3, [pc, #568]	; (8001b0c <HAL_FDCAN_IRQHandler+0x24c>)
 80018d2:	695b      	ldr	r3, [r3, #20]
 80018d4:	079b      	lsls	r3, r3, #30
 80018d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80018d8:	4013      	ands	r3, r2
 80018da:	647b      	str	r3, [r7, #68]	; 0x44
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018e2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80018e6:	643b      	str	r3, [r7, #64]	; 0x40
  TxEventFifoITs &= hfdcan->Instance->IE;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80018f0:	4013      	ands	r3, r2
 80018f2:	643b      	str	r3, [r7, #64]	; 0x40
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018fa:	f003 030f 	and.w	r3, r3, #15
 80018fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001906:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001908:	4013      	ands	r3, r2
 800190a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001912:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001916:	63bb      	str	r3, [r7, #56]	; 0x38
  RxFifo1ITs &= hfdcan->Instance->IE;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800191e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001920:	4013      	ands	r3, r2
 8001922:	63bb      	str	r3, [r7, #56]	; 0x38
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800192a:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 800192e:	637b      	str	r3, [r7, #52]	; 0x34
  Errors &= hfdcan->Instance->IE;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001936:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001938:	4013      	ands	r3, r2
 800193a:	637b      	str	r3, [r7, #52]	; 0x34
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001942:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 8001946:	633b      	str	r3, [r7, #48]	; 0x30
  ErrorStatusITs &= hfdcan->Instance->IE;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800194e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001950:	4013      	ands	r3, r2
 8001952:	633b      	str	r3, [r7, #48]	; 0x30

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800195a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800195e:	2b00      	cmp	r3, #0
 8001960:	d011      	beq.n	8001986 <HAL_FDCAN_IRQHandler+0xc6>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001968:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800196c:	2b00      	cmp	r3, #0
 800196e:	d00a      	beq.n	8001986 <HAL_FDCAN_IRQHandler+0xc6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001978:	651a      	str	r2, [r3, #80]	; 0x50
 800197a:	4b64      	ldr	r3, [pc, #400]	; (8001b0c <HAL_FDCAN_IRQHandler+0x24c>)
 800197c:	2200      	movs	r2, #0
 800197e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	f000 fa5a 	bl	8001e3a <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800198c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001990:	2b00      	cmp	r3, #0
 8001992:	d01e      	beq.n	80019d2 <HAL_FDCAN_IRQHandler+0x112>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800199a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d017      	beq.n	80019d2 <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80019aa:	62fb      	str	r3, [r7, #44]	; 0x2c
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80019b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019b6:	4013      	ands	r3, r2
 80019b8:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019c2:	651a      	str	r2, [r3, #80]	; 0x50
 80019c4:	4b51      	ldr	r3, [pc, #324]	; (8001b0c <HAL_FDCAN_IRQHandler+0x24c>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80019ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	f000 fa0b 	bl	8001de8 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 80019d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d00d      	beq.n	80019f4 <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80019de:	4b4c      	ldr	r3, [pc, #304]	; (8001b10 <HAL_FDCAN_IRQHandler+0x250>)
 80019e0:	400b      	ands	r3, r1
 80019e2:	6513      	str	r3, [r2, #80]	; 0x50
 80019e4:	4a49      	ldr	r2, [pc, #292]	; (8001b0c <HAL_FDCAN_IRQHandler+0x24c>)
 80019e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019e8:	0f9b      	lsrs	r3, r3, #30
 80019ea:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 80019ec:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f000 f9c4 	bl	8001d7c <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80019f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d00d      	beq.n	8001a16 <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001a00:	4b43      	ldr	r3, [pc, #268]	; (8001b10 <HAL_FDCAN_IRQHandler+0x250>)
 8001a02:	400b      	ands	r3, r1
 8001a04:	6513      	str	r3, [r2, #80]	; 0x50
 8001a06:	4a41      	ldr	r2, [pc, #260]	; (8001b0c <HAL_FDCAN_IRQHandler+0x24c>)
 8001a08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a0a:	0f9b      	lsrs	r3, r3, #30
 8001a0c:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8001a0e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	f000 f9be 	bl	8001d92 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8001a16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d00d      	beq.n	8001a38 <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001a22:	4b3b      	ldr	r3, [pc, #236]	; (8001b10 <HAL_FDCAN_IRQHandler+0x250>)
 8001a24:	400b      	ands	r3, r1
 8001a26:	6513      	str	r3, [r2, #80]	; 0x50
 8001a28:	4a38      	ldr	r2, [pc, #224]	; (8001b0c <HAL_FDCAN_IRQHandler+0x24c>)
 8001a2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a2c:	0f9b      	lsrs	r3, r3, #30
 8001a2e:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8001a30:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f7fe fe76 	bl	8000724 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8001a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d00d      	beq.n	8001a5a <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001a44:	4b32      	ldr	r3, [pc, #200]	; (8001b10 <HAL_FDCAN_IRQHandler+0x250>)
 8001a46:	400b      	ands	r3, r1
 8001a48:	6513      	str	r3, [r2, #80]	; 0x50
 8001a4a:	4a30      	ldr	r2, [pc, #192]	; (8001b0c <HAL_FDCAN_IRQHandler+0x24c>)
 8001a4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a4e:	0f9b      	lsrs	r3, r3, #30
 8001a50:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8001a52:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001a54:	6878      	ldr	r0, [r7, #4]
 8001a56:	f000 f9a7 	bl	8001da8 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d011      	beq.n	8001a8c <HAL_FDCAN_IRQHandler+0x1cc>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d00a      	beq.n	8001a8c <HAL_FDCAN_IRQHandler+0x1cc>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a7e:	651a      	str	r2, [r3, #80]	; 0x50
 8001a80:	4b22      	ldr	r3, [pc, #136]	; (8001b0c <HAL_FDCAN_IRQHandler+0x24c>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f000 f999 	bl	8001dbe <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d01e      	beq.n	8001ad8 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001aa0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d017      	beq.n	8001ad8 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001ab0:	62bb      	str	r3, [r7, #40]	; 0x28
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001abc:	4013      	ands	r3, r2
 8001abe:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ac8:	651a      	str	r2, [r3, #80]	; 0x50
 8001aca:	4b10      	ldr	r3, [pc, #64]	; (8001b0c <HAL_FDCAN_IRQHandler+0x24c>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8001ad0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f000 f97d 	bl	8001dd2 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != 0U)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ade:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d016      	beq.n	8001b14 <HAL_FDCAN_IRQHandler+0x254>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != 0U)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001aec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d00f      	beq.n	8001b14 <HAL_FDCAN_IRQHandler+0x254>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001afc:	651a      	str	r2, [r3, #80]	; 0x50
 8001afe:	4b03      	ldr	r3, [pc, #12]	; (8001b0c <HAL_FDCAN_IRQHandler+0x24c>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f000 f97a 	bl	8001dfe <HAL_FDCAN_RxBufferNewMessageCallback>
 8001b0a:	e003      	b.n	8001b14 <HAL_FDCAN_IRQHandler+0x254>
 8001b0c:	4000a800 	.word	0x4000a800
 8001b10:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d011      	beq.n	8001b46 <HAL_FDCAN_IRQHandler+0x286>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d00a      	beq.n	8001b46 <HAL_FDCAN_IRQHandler+0x286>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001b38:	651a      	str	r2, [r3, #80]	; 0x50
 8001b3a:	4b8d      	ldr	r3, [pc, #564]	; (8001d70 <HAL_FDCAN_IRQHandler+0x4b0>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f000 f966 	bl	8001e12 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d011      	beq.n	8001b78 <HAL_FDCAN_IRQHandler+0x2b8>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d00a      	beq.n	8001b78 <HAL_FDCAN_IRQHandler+0x2b8>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001b6a:	651a      	str	r2, [r3, #80]	; 0x50
 8001b6c:	4b80      	ldr	r3, [pc, #512]	; (8001d70 <HAL_FDCAN_IRQHandler+0x4b0>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f000 f957 	bl	8001e26 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d016      	beq.n	8001bb4 <HAL_FDCAN_IRQHandler+0x2f4>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d00f      	beq.n	8001bb4 <HAL_FDCAN_IRQHandler+0x2f4>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b9c:	651a      	str	r2, [r3, #80]	; 0x50
 8001b9e:	4b74      	ldr	r3, [pc, #464]	; (8001d70 <HAL_FDCAN_IRQHandler+0x4b0>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001baa:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8001bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d00d      	beq.n	8001bd6 <HAL_FDCAN_IRQHandler+0x316>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001bc0:	4b6c      	ldr	r3, [pc, #432]	; (8001d74 <HAL_FDCAN_IRQHandler+0x4b4>)
 8001bc2:	400b      	ands	r3, r1
 8001bc4:	6513      	str	r3, [r2, #80]	; 0x50
 8001bc6:	4a6a      	ldr	r2, [pc, #424]	; (8001d70 <HAL_FDCAN_IRQHandler+0x4b0>)
 8001bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bca:	0f9b      	lsrs	r3, r3, #30
 8001bcc:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8001bce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	f000 f946 	bl	8001e62 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8001bd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d011      	beq.n	8001c00 <HAL_FDCAN_IRQHandler+0x340>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001be2:	4b64      	ldr	r3, [pc, #400]	; (8001d74 <HAL_FDCAN_IRQHandler+0x4b4>)
 8001be4:	400b      	ands	r3, r1
 8001be6:	6513      	str	r3, [r2, #80]	; 0x50
 8001be8:	4a61      	ldr	r2, [pc, #388]	; (8001d70 <HAL_FDCAN_IRQHandler+0x4b0>)
 8001bea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bec:	0f9b      	lsrs	r3, r3, #30
 8001bee:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8001bf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bf8:	431a      	orrs	r2, r3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a5c      	ldr	r2, [pc, #368]	; (8001d78 <HAL_FDCAN_IRQHandler+0x4b8>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	f040 80a6 	bne.w	8001d58 <HAL_FDCAN_IRQHandler+0x498>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	f003 0303 	and.w	r3, r3, #3
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	f000 809e 	beq.w	8001d58 <HAL_FDCAN_IRQHandler+0x498>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	6a1b      	ldr	r3, [r3, #32]
 8001c22:	f003 030f 	and.w	r3, r3, #15
 8001c26:	627b      	str	r3, [r7, #36]	; 0x24
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c30:	4013      	ands	r3, r2
 8001c32:	627b      	str	r3, [r7, #36]	; 0x24
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	6a1b      	ldr	r3, [r3, #32]
 8001c3a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001c3e:	623b      	str	r3, [r7, #32]
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c46:	6a3a      	ldr	r2, [r7, #32]
 8001c48:	4013      	ands	r3, r2
 8001c4a:	623b      	str	r3, [r7, #32]
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	6a1b      	ldr	r3, [r3, #32]
 8001c52:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8001c56:	61fb      	str	r3, [r7, #28]
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c5e:	69fa      	ldr	r2, [r7, #28]
 8001c60:	4013      	ands	r3, r2
 8001c62:	61fb      	str	r3, [r7, #28]
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	6a1b      	ldr	r3, [r3, #32]
 8001c6a:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 8001c6e:	61bb      	str	r3, [r7, #24]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c76:	69ba      	ldr	r2, [r7, #24]
 8001c78:	4013      	ands	r3, r2
 8001c7a:	61bb      	str	r3, [r7, #24]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	6a1b      	ldr	r3, [r3, #32]
 8001c82:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 8001c86:	617b      	str	r3, [r7, #20]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c8e:	697a      	ldr	r2, [r7, #20]
 8001c90:	4013      	ands	r3, r2
 8001c92:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8001c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d007      	beq.n	8001caa <HAL_FDCAN_IRQHandler+0x3ea>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ca0:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8001ca2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f000 f8e7 	bl	8001e78 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8001caa:	6a3b      	ldr	r3, [r7, #32]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d007      	beq.n	8001cc0 <HAL_FDCAN_IRQHandler+0x400>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	6a3a      	ldr	r2, [r7, #32]
 8001cb6:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8001cb8:	6a39      	ldr	r1, [r7, #32]
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f000 f8e7 	bl	8001e8e <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (__HAL_FDCAN_TT_GET_IT_SOURCE(hfdcan, FDCAN_TT_IT_STOP_WATCH) != 0U)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d01b      	beq.n	8001d06 <HAL_FDCAN_IRQHandler+0x446>
      {
        if (__HAL_FDCAN_TT_GET_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH) != 0U)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	6a1b      	ldr	r3, [r3, #32]
 8001cd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d014      	beq.n	8001d06 <HAL_FDCAN_IRQHandler+0x446>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ce2:	0c1b      	lsrs	r3, r3, #16
 8001ce4:	b29b      	uxth	r3, r3
 8001ce6:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001cf2:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	2240      	movs	r2, #64	; 0x40
 8001cfa:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8001cfc:	68fa      	ldr	r2, [r7, #12]
 8001cfe:	6939      	ldr	r1, [r7, #16]
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	f000 f8cf 	bl	8001ea4 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d007      	beq.n	8001d1c <HAL_FDCAN_IRQHandler+0x45c>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	69fa      	ldr	r2, [r7, #28]
 8001d12:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8001d14:	69f9      	ldr	r1, [r7, #28]
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f000 f8d0 	bl	8001ebc <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8001d1c:	69bb      	ldr	r3, [r7, #24]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d00b      	beq.n	8001d3a <HAL_FDCAN_IRQHandler+0x47a>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	69ba      	ldr	r2, [r7, #24]
 8001d28:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8001d30:	69bb      	ldr	r3, [r7, #24]
 8001d32:	431a      	orrs	r2, r3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d00b      	beq.n	8001d58 <HAL_FDCAN_IRQHandler+0x498>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	697a      	ldr	r2, [r7, #20]
 8001d46:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	431a      	orrs	r2, r3
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d002      	beq.n	8001d68 <HAL_FDCAN_IRQHandler+0x4a8>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f000 f873 	bl	8001e4e <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8001d68:	bf00      	nop
 8001d6a:	3748      	adds	r7, #72	; 0x48
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	4000a800 	.word	0x4000a800
 8001d74:	3fcfffff 	.word	0x3fcfffff
 8001d78:	4000a000 	.word	0x4000a000

08001d7c <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8001d86:	bf00      	nop
 8001d88:	370c      	adds	r7, #12
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr

08001d92 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8001d92:	b480      	push	{r7}
 8001d94:	b083      	sub	sp, #12
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]
 8001d9a:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8001d9c:	bf00      	nop
 8001d9e:	370c      	adds	r7, #12
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr

08001da8 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8001db2:	bf00      	nop
 8001db4:	370c      	adds	r7, #12
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr

08001dbe <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001dbe:	b480      	push	{r7}
 8001dc0:	b083      	sub	sp, #12
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8001dc6:	bf00      	nop
 8001dc8:	370c      	adds	r7, #12
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr

08001dd2 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001dd2:	b480      	push	{r7}
 8001dd4:	b083      	sub	sp, #12
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
 8001dda:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8001ddc:	bf00      	nop
 8001dde:	370c      	adds	r7, #12
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr

08001de8 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8001df2:	bf00      	nop
 8001df4:	370c      	adds	r7, #12
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr

08001dfe <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001dfe:	b480      	push	{r7}
 8001e00:	b083      	sub	sp, #12
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8001e06:	bf00      	nop
 8001e08:	370c      	adds	r7, #12
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr

08001e12 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001e12:	b480      	push	{r7}
 8001e14:	b083      	sub	sp, #12
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8001e1a:	bf00      	nop
 8001e1c:	370c      	adds	r7, #12
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr

08001e26 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001e26:	b480      	push	{r7}
 8001e28:	b083      	sub	sp, #12
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8001e2e:	bf00      	nop
 8001e30:	370c      	adds	r7, #12
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr

08001e3a <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001e3a:	b480      	push	{r7}
 8001e3c:	b083      	sub	sp, #12
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8001e42:	bf00      	nop
 8001e44:	370c      	adds	r7, #12
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr

08001e4e <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001e4e:	b480      	push	{r7}
 8001e50:	b083      	sub	sp, #12
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8001e56:	bf00      	nop
 8001e58:	370c      	adds	r7, #12
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr

08001e62 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8001e62:	b480      	push	{r7}
 8001e64:	b083      	sub	sp, #12
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	6078      	str	r0, [r7, #4]
 8001e6a:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8001e6c:	bf00      	nop
 8001e6e:	370c      	adds	r7, #12
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr

08001e78 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8001e82:	bf00      	nop
 8001e84:	370c      	adds	r7, #12
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr

08001e8e <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8001e8e:	b480      	push	{r7}
 8001e90:	b083      	sub	sp, #12
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	6078      	str	r0, [r7, #4]
 8001e96:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8001e98:	bf00      	nop
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b085      	sub	sp, #20
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	60f8      	str	r0, [r7, #12]
 8001eac:	60b9      	str	r1, [r7, #8]
 8001eae:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8001eb0:	bf00      	nop
 8001eb2:	3714      	adds	r7, #20
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8001ec6:	bf00      	nop
 8001ec8:	370c      	adds	r7, #12
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr

08001ed2 <HAL_FDCAN_GetState>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL state
  */
HAL_FDCAN_StateTypeDef HAL_FDCAN_GetState(FDCAN_HandleTypeDef *hfdcan)
{
 8001ed2:	b480      	push	{r7}
 8001ed4:	b083      	sub	sp, #12
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	6078      	str	r0, [r7, #4]
  /* Return FDCAN state */
  return hfdcan->State;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001ee0:	b2db      	uxtb	r3, r3
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	370c      	adds	r7, #12
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr

08001eee <HAL_FDCAN_GetError>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval FDCAN Error Code
  */
uint32_t HAL_FDCAN_GetError(FDCAN_HandleTypeDef *hfdcan)
{
 8001eee:	b480      	push	{r7}
 8001ef0:	b083      	sub	sp, #12
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	6078      	str	r0, [r7, #4]
  /* Return FDCAN error code */
  return hfdcan->ErrorCode;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	370c      	adds	r7, #12
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr

08001f08 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b085      	sub	sp, #20
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f14:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001f1e:	4ba7      	ldr	r3, [pc, #668]	; (80021bc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001f20:	4013      	ands	r3, r2
 8001f22:	68ba      	ldr	r2, [r7, #8]
 8001f24:	0091      	lsls	r1, r2, #2
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	6812      	ldr	r2, [r2, #0]
 8001f2a:	430b      	orrs	r3, r1
 8001f2c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f38:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f40:	041a      	lsls	r2, r3, #16
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	430a      	orrs	r2, r1
 8001f48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f50:	68ba      	ldr	r2, [r7, #8]
 8001f52:	4413      	add	r3, r2
 8001f54:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001f5e:	4b97      	ldr	r3, [pc, #604]	; (80021bc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001f60:	4013      	ands	r3, r2
 8001f62:	68ba      	ldr	r2, [r7, #8]
 8001f64:	0091      	lsls	r1, r2, #2
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	6812      	ldr	r2, [r2, #0]
 8001f6a:	430b      	orrs	r3, r1
 8001f6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f78:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f80:	041a      	lsls	r2, r3, #16
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	430a      	orrs	r2, r1
 8001f88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f90:	005b      	lsls	r3, r3, #1
 8001f92:	68ba      	ldr	r2, [r7, #8]
 8001f94:	4413      	add	r3, r2
 8001f96:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8001fa0:	4b86      	ldr	r3, [pc, #536]	; (80021bc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	68ba      	ldr	r2, [r7, #8]
 8001fa6:	0091      	lsls	r1, r2, #2
 8001fa8:	687a      	ldr	r2, [r7, #4]
 8001faa:	6812      	ldr	r2, [r2, #0]
 8001fac:	430b      	orrs	r3, r1
 8001fae:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001fba:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc2:	041a      	lsls	r2, r3, #16
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	430a      	orrs	r2, r1
 8001fca:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001fd6:	fb02 f303 	mul.w	r3, r2, r3
 8001fda:	68ba      	ldr	r2, [r7, #8]
 8001fdc:	4413      	add	r3, r2
 8001fde:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001fe8:	4b74      	ldr	r3, [pc, #464]	; (80021bc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001fea:	4013      	ands	r3, r2
 8001fec:	68ba      	ldr	r2, [r7, #8]
 8001fee:	0091      	lsls	r1, r2, #2
 8001ff0:	687a      	ldr	r2, [r7, #4]
 8001ff2:	6812      	ldr	r2, [r2, #0]
 8001ff4:	430b      	orrs	r3, r1
 8001ff6:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002002:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800200a:	041a      	lsls	r2, r3, #16
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	430a      	orrs	r2, r1
 8002012:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800201a:	687a      	ldr	r2, [r7, #4]
 800201c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800201e:	fb02 f303 	mul.w	r3, r2, r3
 8002022:	68ba      	ldr	r2, [r7, #8]
 8002024:	4413      	add	r3, r2
 8002026:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8002030:	4b62      	ldr	r3, [pc, #392]	; (80021bc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002032:	4013      	ands	r3, r2
 8002034:	68ba      	ldr	r2, [r7, #8]
 8002036:	0091      	lsls	r1, r2, #2
 8002038:	687a      	ldr	r2, [r7, #4]
 800203a:	6812      	ldr	r2, [r2, #0]
 800203c:	430b      	orrs	r3, r1
 800203e:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800204a:	fb02 f303 	mul.w	r3, r2, r3
 800204e:	68ba      	ldr	r2, [r7, #8]
 8002050:	4413      	add	r3, r2
 8002052:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800205c:	4b57      	ldr	r3, [pc, #348]	; (80021bc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800205e:	4013      	ands	r3, r2
 8002060:	68ba      	ldr	r2, [r7, #8]
 8002062:	0091      	lsls	r1, r2, #2
 8002064:	687a      	ldr	r2, [r7, #4]
 8002066:	6812      	ldr	r2, [r2, #0]
 8002068:	430b      	orrs	r3, r1
 800206a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002076:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800207e:	041a      	lsls	r2, r3, #16
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	430a      	orrs	r2, r1
 8002086:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800208e:	005b      	lsls	r3, r3, #1
 8002090:	68ba      	ldr	r2, [r7, #8]
 8002092:	4413      	add	r3, r2
 8002094:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800209e:	4b47      	ldr	r3, [pc, #284]	; (80021bc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80020a0:	4013      	ands	r3, r2
 80020a2:	68ba      	ldr	r2, [r7, #8]
 80020a4:	0091      	lsls	r1, r2, #2
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	6812      	ldr	r2, [r2, #0]
 80020aa:	430b      	orrs	r3, r1
 80020ac:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80020b8:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020c0:	041a      	lsls	r2, r3, #16
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	430a      	orrs	r2, r1
 80020c8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80020d4:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020dc:	061a      	lsls	r2, r3, #24
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	430a      	orrs	r2, r1
 80020e4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020ec:	4b34      	ldr	r3, [pc, #208]	; (80021c0 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80020ee:	4413      	add	r3, r2
 80020f0:	009a      	lsls	r2, r3, #2
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	441a      	add	r2, r3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800210e:	00db      	lsls	r3, r3, #3
 8002110:	441a      	add	r2, r3
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211e:	6879      	ldr	r1, [r7, #4]
 8002120:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8002122:	fb01 f303 	mul.w	r3, r1, r3
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	441a      	add	r2, r3
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002136:	6879      	ldr	r1, [r7, #4]
 8002138:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 800213a:	fb01 f303 	mul.w	r3, r1, r3
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	441a      	add	r2, r3
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800214e:	6879      	ldr	r1, [r7, #4]
 8002150:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8002152:	fb01 f303 	mul.w	r3, r1, r3
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	441a      	add	r2, r3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800216a:	00db      	lsls	r3, r3, #3
 800216c:	441a      	add	r2, r3
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800217e:	6879      	ldr	r1, [r7, #4]
 8002180:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8002182:	fb01 f303 	mul.w	r3, r1, r3
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	441a      	add	r2, r3
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800219a:	6879      	ldr	r1, [r7, #4]
 800219c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800219e:	fb01 f303 	mul.w	r3, r1, r3
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	441a      	add	r2, r3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021b2:	4a04      	ldr	r2, [pc, #16]	; (80021c4 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d915      	bls.n	80021e4 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 80021b8:	e006      	b.n	80021c8 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 80021ba:	bf00      	nop
 80021bc:	ffff0003 	.word	0xffff0003
 80021c0:	10002b00 	.word	0x10002b00
 80021c4:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80021ce:	f043 0220 	orr.w	r2, r3, #32
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2203      	movs	r2, #3
 80021dc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e010      	b.n	8002206 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021e8:	60fb      	str	r3, [r7, #12]
 80021ea:	e005      	b.n	80021f8 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2200      	movs	r2, #0
 80021f0:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	3304      	adds	r3, #4
 80021f6:	60fb      	str	r3, [r7, #12]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021fe:	68fa      	ldr	r2, [r7, #12]
 8002200:	429a      	cmp	r2, r3
 8002202:	d3f3      	bcc.n	80021ec <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8002204:	2300      	movs	r3, #0
}
 8002206:	4618      	mov	r0, r3
 8002208:	3714      	adds	r7, #20
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop

08002214 <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 8002214:	b480      	push	{r7}
 8002216:	b089      	sub	sp, #36	; 0x24
 8002218:	af00      	add	r7, sp, #0
 800221a:	60f8      	str	r0, [r7, #12]
 800221c:	60b9      	str	r1, [r7, #8]
 800221e:	607a      	str	r2, [r7, #4]
 8002220:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d10a      	bne.n	8002240 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8002232:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18));
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800223a:	4313      	orrs	r3, r2
 800223c:	61fb      	str	r3, [r7, #28]
 800223e:	e00a      	b.n	8002256 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8002248:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800224e:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002250:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002254:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	6a1b      	ldr	r3, [r3, #32]
 800225a:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8002260:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8002266:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 800226c:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8002272:	4313      	orrs	r3, r2
 8002274:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002280:	6839      	ldr	r1, [r7, #0]
 8002282:	fb01 f303 	mul.w	r3, r1, r3
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	4413      	add	r3, r2
 800228a:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 800228c:	69bb      	ldr	r3, [r7, #24]
 800228e:	69fa      	ldr	r2, [r7, #28]
 8002290:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8002292:	69bb      	ldr	r3, [r7, #24]
 8002294:	3304      	adds	r3, #4
 8002296:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8002298:	69bb      	ldr	r3, [r7, #24]
 800229a:	693a      	ldr	r2, [r7, #16]
 800229c:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800229e:	69bb      	ldr	r3, [r7, #24]
 80022a0:	3304      	adds	r3, #4
 80022a2:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 80022a4:	2300      	movs	r3, #0
 80022a6:	617b      	str	r3, [r7, #20]
 80022a8:	e020      	b.n	80022ec <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	3303      	adds	r3, #3
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	4413      	add	r3, r2
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	3302      	adds	r3, #2
 80022ba:	6879      	ldr	r1, [r7, #4]
 80022bc:	440b      	add	r3, r1
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 80022c2:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	3301      	adds	r3, #1
 80022c8:	6879      	ldr	r1, [r7, #4]
 80022ca:	440b      	add	r3, r1
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 80022d0:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80022d2:	6879      	ldr	r1, [r7, #4]
 80022d4:	697a      	ldr	r2, [r7, #20]
 80022d6:	440a      	add	r2, r1
 80022d8:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 80022da:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 80022dc:	69bb      	ldr	r3, [r7, #24]
 80022de:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80022e0:	69bb      	ldr	r3, [r7, #24]
 80022e2:	3304      	adds	r3, #4
 80022e4:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	3304      	adds	r3, #4
 80022ea:	617b      	str	r3, [r7, #20]
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	0c1b      	lsrs	r3, r3, #16
 80022f2:	4a06      	ldr	r2, [pc, #24]	; (800230c <FDCAN_CopyMessageToRAM+0xf8>)
 80022f4:	5cd3      	ldrb	r3, [r2, r3]
 80022f6:	461a      	mov	r2, r3
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d3d5      	bcc.n	80022aa <FDCAN_CopyMessageToRAM+0x96>
  }
}
 80022fe:	bf00      	nop
 8002300:	bf00      	nop
 8002302:	3724      	adds	r7, #36	; 0x24
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr
 800230c:	0800469c 	.word	0x0800469c

08002310 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002310:	b480      	push	{r7}
 8002312:	b089      	sub	sp, #36	; 0x24
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800231a:	2300      	movs	r3, #0
 800231c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800231e:	4b86      	ldr	r3, [pc, #536]	; (8002538 <HAL_GPIO_Init+0x228>)
 8002320:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002322:	e18c      	b.n	800263e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	2101      	movs	r1, #1
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	fa01 f303 	lsl.w	r3, r1, r3
 8002330:	4013      	ands	r3, r2
 8002332:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	2b00      	cmp	r3, #0
 8002338:	f000 817e 	beq.w	8002638 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	2b01      	cmp	r3, #1
 8002342:	d00b      	beq.n	800235c <HAL_GPIO_Init+0x4c>
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	2b02      	cmp	r3, #2
 800234a:	d007      	beq.n	800235c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002350:	2b11      	cmp	r3, #17
 8002352:	d003      	beq.n	800235c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	2b12      	cmp	r3, #18
 800235a:	d130      	bne.n	80023be <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	005b      	lsls	r3, r3, #1
 8002366:	2203      	movs	r2, #3
 8002368:	fa02 f303 	lsl.w	r3, r2, r3
 800236c:	43db      	mvns	r3, r3
 800236e:	69ba      	ldr	r2, [r7, #24]
 8002370:	4013      	ands	r3, r2
 8002372:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	68da      	ldr	r2, [r3, #12]
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	005b      	lsls	r3, r3, #1
 800237c:	fa02 f303 	lsl.w	r3, r2, r3
 8002380:	69ba      	ldr	r2, [r7, #24]
 8002382:	4313      	orrs	r3, r2
 8002384:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002392:	2201      	movs	r2, #1
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	fa02 f303 	lsl.w	r3, r2, r3
 800239a:	43db      	mvns	r3, r3
 800239c:	69ba      	ldr	r2, [r7, #24]
 800239e:	4013      	ands	r3, r2
 80023a0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	091b      	lsrs	r3, r3, #4
 80023a8:	f003 0201 	and.w	r2, r3, #1
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	fa02 f303 	lsl.w	r3, r2, r3
 80023b2:	69ba      	ldr	r2, [r7, #24]
 80023b4:	4313      	orrs	r3, r2
 80023b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	69ba      	ldr	r2, [r7, #24]
 80023bc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	68db      	ldr	r3, [r3, #12]
 80023c2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	005b      	lsls	r3, r3, #1
 80023c8:	2203      	movs	r2, #3
 80023ca:	fa02 f303 	lsl.w	r3, r2, r3
 80023ce:	43db      	mvns	r3, r3
 80023d0:	69ba      	ldr	r2, [r7, #24]
 80023d2:	4013      	ands	r3, r2
 80023d4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	689a      	ldr	r2, [r3, #8]
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	005b      	lsls	r3, r3, #1
 80023de:	fa02 f303 	lsl.w	r3, r2, r3
 80023e2:	69ba      	ldr	r2, [r7, #24]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	69ba      	ldr	r2, [r7, #24]
 80023ec:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d003      	beq.n	80023fe <HAL_GPIO_Init+0xee>
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	2b12      	cmp	r3, #18
 80023fc:	d123      	bne.n	8002446 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	08da      	lsrs	r2, r3, #3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	3208      	adds	r2, #8
 8002406:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800240a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	f003 0307 	and.w	r3, r3, #7
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	220f      	movs	r2, #15
 8002416:	fa02 f303 	lsl.w	r3, r2, r3
 800241a:	43db      	mvns	r3, r3
 800241c:	69ba      	ldr	r2, [r7, #24]
 800241e:	4013      	ands	r3, r2
 8002420:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	691a      	ldr	r2, [r3, #16]
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	f003 0307 	and.w	r3, r3, #7
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	fa02 f303 	lsl.w	r3, r2, r3
 8002432:	69ba      	ldr	r2, [r7, #24]
 8002434:	4313      	orrs	r3, r2
 8002436:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	08da      	lsrs	r2, r3, #3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	3208      	adds	r2, #8
 8002440:	69b9      	ldr	r1, [r7, #24]
 8002442:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	005b      	lsls	r3, r3, #1
 8002450:	2203      	movs	r2, #3
 8002452:	fa02 f303 	lsl.w	r3, r2, r3
 8002456:	43db      	mvns	r3, r3
 8002458:	69ba      	ldr	r2, [r7, #24]
 800245a:	4013      	ands	r3, r2
 800245c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	f003 0203 	and.w	r2, r3, #3
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	005b      	lsls	r3, r3, #1
 800246a:	fa02 f303 	lsl.w	r3, r2, r3
 800246e:	69ba      	ldr	r2, [r7, #24]
 8002470:	4313      	orrs	r3, r2
 8002472:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	69ba      	ldr	r2, [r7, #24]
 8002478:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002482:	2b00      	cmp	r3, #0
 8002484:	f000 80d8 	beq.w	8002638 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002488:	4b2c      	ldr	r3, [pc, #176]	; (800253c <HAL_GPIO_Init+0x22c>)
 800248a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800248e:	4a2b      	ldr	r2, [pc, #172]	; (800253c <HAL_GPIO_Init+0x22c>)
 8002490:	f043 0302 	orr.w	r3, r3, #2
 8002494:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002498:	4b28      	ldr	r3, [pc, #160]	; (800253c <HAL_GPIO_Init+0x22c>)
 800249a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800249e:	f003 0302 	and.w	r3, r3, #2
 80024a2:	60fb      	str	r3, [r7, #12]
 80024a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024a6:	4a26      	ldr	r2, [pc, #152]	; (8002540 <HAL_GPIO_Init+0x230>)
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	089b      	lsrs	r3, r3, #2
 80024ac:	3302      	adds	r3, #2
 80024ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	f003 0303 	and.w	r3, r3, #3
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	220f      	movs	r2, #15
 80024be:	fa02 f303 	lsl.w	r3, r2, r3
 80024c2:	43db      	mvns	r3, r3
 80024c4:	69ba      	ldr	r2, [r7, #24]
 80024c6:	4013      	ands	r3, r2
 80024c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4a1d      	ldr	r2, [pc, #116]	; (8002544 <HAL_GPIO_Init+0x234>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d04a      	beq.n	8002568 <HAL_GPIO_Init+0x258>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4a1c      	ldr	r2, [pc, #112]	; (8002548 <HAL_GPIO_Init+0x238>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d02b      	beq.n	8002532 <HAL_GPIO_Init+0x222>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4a1b      	ldr	r2, [pc, #108]	; (800254c <HAL_GPIO_Init+0x23c>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d025      	beq.n	800252e <HAL_GPIO_Init+0x21e>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4a1a      	ldr	r2, [pc, #104]	; (8002550 <HAL_GPIO_Init+0x240>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d01f      	beq.n	800252a <HAL_GPIO_Init+0x21a>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4a19      	ldr	r2, [pc, #100]	; (8002554 <HAL_GPIO_Init+0x244>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d019      	beq.n	8002526 <HAL_GPIO_Init+0x216>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4a18      	ldr	r2, [pc, #96]	; (8002558 <HAL_GPIO_Init+0x248>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d013      	beq.n	8002522 <HAL_GPIO_Init+0x212>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4a17      	ldr	r2, [pc, #92]	; (800255c <HAL_GPIO_Init+0x24c>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d00d      	beq.n	800251e <HAL_GPIO_Init+0x20e>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4a16      	ldr	r2, [pc, #88]	; (8002560 <HAL_GPIO_Init+0x250>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d007      	beq.n	800251a <HAL_GPIO_Init+0x20a>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4a15      	ldr	r2, [pc, #84]	; (8002564 <HAL_GPIO_Init+0x254>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d101      	bne.n	8002516 <HAL_GPIO_Init+0x206>
 8002512:	2309      	movs	r3, #9
 8002514:	e029      	b.n	800256a <HAL_GPIO_Init+0x25a>
 8002516:	230a      	movs	r3, #10
 8002518:	e027      	b.n	800256a <HAL_GPIO_Init+0x25a>
 800251a:	2307      	movs	r3, #7
 800251c:	e025      	b.n	800256a <HAL_GPIO_Init+0x25a>
 800251e:	2306      	movs	r3, #6
 8002520:	e023      	b.n	800256a <HAL_GPIO_Init+0x25a>
 8002522:	2305      	movs	r3, #5
 8002524:	e021      	b.n	800256a <HAL_GPIO_Init+0x25a>
 8002526:	2304      	movs	r3, #4
 8002528:	e01f      	b.n	800256a <HAL_GPIO_Init+0x25a>
 800252a:	2303      	movs	r3, #3
 800252c:	e01d      	b.n	800256a <HAL_GPIO_Init+0x25a>
 800252e:	2302      	movs	r3, #2
 8002530:	e01b      	b.n	800256a <HAL_GPIO_Init+0x25a>
 8002532:	2301      	movs	r3, #1
 8002534:	e019      	b.n	800256a <HAL_GPIO_Init+0x25a>
 8002536:	bf00      	nop
 8002538:	58000080 	.word	0x58000080
 800253c:	58024400 	.word	0x58024400
 8002540:	58000400 	.word	0x58000400
 8002544:	58020000 	.word	0x58020000
 8002548:	58020400 	.word	0x58020400
 800254c:	58020800 	.word	0x58020800
 8002550:	58020c00 	.word	0x58020c00
 8002554:	58021000 	.word	0x58021000
 8002558:	58021400 	.word	0x58021400
 800255c:	58021800 	.word	0x58021800
 8002560:	58021c00 	.word	0x58021c00
 8002564:	58022400 	.word	0x58022400
 8002568:	2300      	movs	r3, #0
 800256a:	69fa      	ldr	r2, [r7, #28]
 800256c:	f002 0203 	and.w	r2, r2, #3
 8002570:	0092      	lsls	r2, r2, #2
 8002572:	4093      	lsls	r3, r2
 8002574:	69ba      	ldr	r2, [r7, #24]
 8002576:	4313      	orrs	r3, r2
 8002578:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800257a:	4938      	ldr	r1, [pc, #224]	; (800265c <HAL_GPIO_Init+0x34c>)
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	089b      	lsrs	r3, r3, #2
 8002580:	3302      	adds	r3, #2
 8002582:	69ba      	ldr	r2, [r7, #24]
 8002584:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	43db      	mvns	r3, r3
 8002592:	69ba      	ldr	r2, [r7, #24]
 8002594:	4013      	ands	r3, r2
 8002596:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d003      	beq.n	80025ac <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80025a4:	69ba      	ldr	r2, [r7, #24]
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	4313      	orrs	r3, r2
 80025aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	69ba      	ldr	r2, [r7, #24]
 80025b0:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	43db      	mvns	r3, r3
 80025bc:	69ba      	ldr	r2, [r7, #24]
 80025be:	4013      	ands	r3, r2
 80025c0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d003      	beq.n	80025d6 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80025ce:	69ba      	ldr	r2, [r7, #24]
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	69ba      	ldr	r2, [r7, #24]
 80025da:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80025dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	43db      	mvns	r3, r3
 80025e8:	69ba      	ldr	r2, [r7, #24]
 80025ea:	4013      	ands	r3, r2
 80025ec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d003      	beq.n	8002602 <HAL_GPIO_Init+0x2f2>
        {
          temp |= iocurrent;
 80025fa:	69ba      	ldr	r2, [r7, #24]
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	4313      	orrs	r3, r2
 8002600:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002602:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002606:	69bb      	ldr	r3, [r7, #24]
 8002608:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800260a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	43db      	mvns	r3, r3
 8002616:	69ba      	ldr	r2, [r7, #24]
 8002618:	4013      	ands	r3, r2
 800261a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002624:	2b00      	cmp	r3, #0
 8002626:	d003      	beq.n	8002630 <HAL_GPIO_Init+0x320>
        {
          temp |= iocurrent;
 8002628:	69ba      	ldr	r2, [r7, #24]
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	4313      	orrs	r3, r2
 800262e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002630:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002634:	69bb      	ldr	r3, [r7, #24]
 8002636:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	3301      	adds	r3, #1
 800263c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	fa22 f303 	lsr.w	r3, r2, r3
 8002648:	2b00      	cmp	r3, #0
 800264a:	f47f ae6b 	bne.w	8002324 <HAL_GPIO_Init+0x14>
  }
}
 800264e:	bf00      	nop
 8002650:	bf00      	nop
 8002652:	3724      	adds	r7, #36	; 0x24
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr
 800265c:	58000400 	.word	0x58000400

08002660 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002660:	b480      	push	{r7}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	460b      	mov	r3, r1
 800266a:	807b      	strh	r3, [r7, #2]
 800266c:	4613      	mov	r3, r2
 800266e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002670:	787b      	ldrb	r3, [r7, #1]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d003      	beq.n	800267e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002676:	887a      	ldrh	r2, [r7, #2]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800267c:	e003      	b.n	8002686 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800267e:	887b      	ldrh	r3, [r7, #2]
 8002680:	041a      	lsls	r2, r3, #16
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	619a      	str	r2, [r3, #24]
}
 8002686:	bf00      	nop
 8002688:	370c      	adds	r7, #12
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr

08002692 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002692:	b480      	push	{r7}
 8002694:	b085      	sub	sp, #20
 8002696:	af00      	add	r7, sp, #0
 8002698:	6078      	str	r0, [r7, #4]
 800269a:	460b      	mov	r3, r1
 800269c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	695b      	ldr	r3, [r3, #20]
 80026a2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80026a4:	887a      	ldrh	r2, [r7, #2]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	4013      	ands	r3, r2
 80026aa:	041a      	lsls	r2, r3, #16
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	43d9      	mvns	r1, r3
 80026b0:	887b      	ldrh	r3, [r7, #2]
 80026b2:	400b      	ands	r3, r1
 80026b4:	431a      	orrs	r2, r3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	619a      	str	r2, [r3, #24]
}
 80026ba:	bf00      	nop
 80026bc:	3714      	adds	r7, #20
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr
	...

080026c8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b084      	sub	sp, #16
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80026d0:	4b29      	ldr	r3, [pc, #164]	; (8002778 <HAL_PWREx_ConfigSupply+0xb0>)
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	f003 0307 	and.w	r3, r3, #7
 80026d8:	2b06      	cmp	r3, #6
 80026da:	d00a      	beq.n	80026f2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80026dc:	4b26      	ldr	r3, [pc, #152]	; (8002778 <HAL_PWREx_ConfigSupply+0xb0>)
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80026e4:	687a      	ldr	r2, [r7, #4]
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d001      	beq.n	80026ee <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e03f      	b.n	800276e <HAL_PWREx_ConfigSupply+0xa6>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80026ee:	2300      	movs	r3, #0
 80026f0:	e03d      	b.n	800276e <HAL_PWREx_ConfigSupply+0xa6>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80026f2:	4b21      	ldr	r3, [pc, #132]	; (8002778 <HAL_PWREx_ConfigSupply+0xb0>)
 80026f4:	68db      	ldr	r3, [r3, #12]
 80026f6:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80026fa:	491f      	ldr	r1, [pc, #124]	; (8002778 <HAL_PWREx_ConfigSupply+0xb0>)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	4313      	orrs	r3, r2
 8002700:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002702:	f7fe fa7b 	bl	8000bfc <HAL_GetTick>
 8002706:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002708:	e009      	b.n	800271e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800270a:	f7fe fa77 	bl	8000bfc <HAL_GetTick>
 800270e:	4602      	mov	r2, r0
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002718:	d901      	bls.n	800271e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e027      	b.n	800276e <HAL_PWREx_ConfigSupply+0xa6>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800271e:	4b16      	ldr	r3, [pc, #88]	; (8002778 <HAL_PWREx_ConfigSupply+0xb0>)
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002726:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800272a:	d1ee      	bne.n	800270a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2b1e      	cmp	r3, #30
 8002730:	d008      	beq.n	8002744 <HAL_PWREx_ConfigSupply+0x7c>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2b2e      	cmp	r3, #46	; 0x2e
 8002736:	d005      	beq.n	8002744 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2b1d      	cmp	r3, #29
 800273c:	d002      	beq.n	8002744 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2b2d      	cmp	r3, #45	; 0x2d
 8002742:	d113      	bne.n	800276c <HAL_PWREx_ConfigSupply+0xa4>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002744:	f7fe fa5a 	bl	8000bfc <HAL_GetTick>
 8002748:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800274a:	e009      	b.n	8002760 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800274c:	f7fe fa56 	bl	8000bfc <HAL_GetTick>
 8002750:	4602      	mov	r2, r0
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800275a:	d901      	bls.n	8002760 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e006      	b.n	800276e <HAL_PWREx_ConfigSupply+0xa6>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002760:	4b05      	ldr	r3, [pc, #20]	; (8002778 <HAL_PWREx_ConfigSupply+0xb0>)
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	f003 0311 	and.w	r3, r3, #17
 8002768:	2b11      	cmp	r3, #17
 800276a:	d1ef      	bne.n	800274c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800276c:	2300      	movs	r3, #0
}
 800276e:	4618      	mov	r0, r3
 8002770:	3710      	adds	r7, #16
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	58024800 	.word	0x58024800

0800277c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b08c      	sub	sp, #48	; 0x30
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d101      	bne.n	800278e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e37a      	b.n	8002e84 <HAL_RCC_OscConfig+0x708>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0301 	and.w	r3, r3, #1
 8002796:	2b00      	cmp	r3, #0
 8002798:	f000 8087 	beq.w	80028aa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800279c:	4ba0      	ldr	r3, [pc, #640]	; (8002a20 <HAL_RCC_OscConfig+0x2a4>)
 800279e:	691b      	ldr	r3, [r3, #16]
 80027a0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80027a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80027a6:	4b9e      	ldr	r3, [pc, #632]	; (8002a20 <HAL_RCC_OscConfig+0x2a4>)
 80027a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027aa:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80027ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027ae:	2b10      	cmp	r3, #16
 80027b0:	d007      	beq.n	80027c2 <HAL_RCC_OscConfig+0x46>
 80027b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027b4:	2b18      	cmp	r3, #24
 80027b6:	d110      	bne.n	80027da <HAL_RCC_OscConfig+0x5e>
 80027b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ba:	f003 0303 	and.w	r3, r3, #3
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d10b      	bne.n	80027da <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027c2:	4b97      	ldr	r3, [pc, #604]	; (8002a20 <HAL_RCC_OscConfig+0x2a4>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d06c      	beq.n	80028a8 <HAL_RCC_OscConfig+0x12c>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d168      	bne.n	80028a8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e354      	b.n	8002e84 <HAL_RCC_OscConfig+0x708>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027e2:	d106      	bne.n	80027f2 <HAL_RCC_OscConfig+0x76>
 80027e4:	4b8e      	ldr	r3, [pc, #568]	; (8002a20 <HAL_RCC_OscConfig+0x2a4>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a8d      	ldr	r2, [pc, #564]	; (8002a20 <HAL_RCC_OscConfig+0x2a4>)
 80027ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027ee:	6013      	str	r3, [r2, #0]
 80027f0:	e02e      	b.n	8002850 <HAL_RCC_OscConfig+0xd4>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d10c      	bne.n	8002814 <HAL_RCC_OscConfig+0x98>
 80027fa:	4b89      	ldr	r3, [pc, #548]	; (8002a20 <HAL_RCC_OscConfig+0x2a4>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a88      	ldr	r2, [pc, #544]	; (8002a20 <HAL_RCC_OscConfig+0x2a4>)
 8002800:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002804:	6013      	str	r3, [r2, #0]
 8002806:	4b86      	ldr	r3, [pc, #536]	; (8002a20 <HAL_RCC_OscConfig+0x2a4>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a85      	ldr	r2, [pc, #532]	; (8002a20 <HAL_RCC_OscConfig+0x2a4>)
 800280c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002810:	6013      	str	r3, [r2, #0]
 8002812:	e01d      	b.n	8002850 <HAL_RCC_OscConfig+0xd4>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800281c:	d10c      	bne.n	8002838 <HAL_RCC_OscConfig+0xbc>
 800281e:	4b80      	ldr	r3, [pc, #512]	; (8002a20 <HAL_RCC_OscConfig+0x2a4>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a7f      	ldr	r2, [pc, #508]	; (8002a20 <HAL_RCC_OscConfig+0x2a4>)
 8002824:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002828:	6013      	str	r3, [r2, #0]
 800282a:	4b7d      	ldr	r3, [pc, #500]	; (8002a20 <HAL_RCC_OscConfig+0x2a4>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a7c      	ldr	r2, [pc, #496]	; (8002a20 <HAL_RCC_OscConfig+0x2a4>)
 8002830:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002834:	6013      	str	r3, [r2, #0]
 8002836:	e00b      	b.n	8002850 <HAL_RCC_OscConfig+0xd4>
 8002838:	4b79      	ldr	r3, [pc, #484]	; (8002a20 <HAL_RCC_OscConfig+0x2a4>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a78      	ldr	r2, [pc, #480]	; (8002a20 <HAL_RCC_OscConfig+0x2a4>)
 800283e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002842:	6013      	str	r3, [r2, #0]
 8002844:	4b76      	ldr	r3, [pc, #472]	; (8002a20 <HAL_RCC_OscConfig+0x2a4>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a75      	ldr	r2, [pc, #468]	; (8002a20 <HAL_RCC_OscConfig+0x2a4>)
 800284a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800284e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d013      	beq.n	8002880 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002858:	f7fe f9d0 	bl	8000bfc <HAL_GetTick>
 800285c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800285e:	e008      	b.n	8002872 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002860:	f7fe f9cc 	bl	8000bfc <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	2b64      	cmp	r3, #100	; 0x64
 800286c:	d901      	bls.n	8002872 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e308      	b.n	8002e84 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002872:	4b6b      	ldr	r3, [pc, #428]	; (8002a20 <HAL_RCC_OscConfig+0x2a4>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d0f0      	beq.n	8002860 <HAL_RCC_OscConfig+0xe4>
 800287e:	e014      	b.n	80028aa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002880:	f7fe f9bc 	bl	8000bfc <HAL_GetTick>
 8002884:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002886:	e008      	b.n	800289a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002888:	f7fe f9b8 	bl	8000bfc <HAL_GetTick>
 800288c:	4602      	mov	r2, r0
 800288e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	2b64      	cmp	r3, #100	; 0x64
 8002894:	d901      	bls.n	800289a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e2f4      	b.n	8002e84 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800289a:	4b61      	ldr	r3, [pc, #388]	; (8002a20 <HAL_RCC_OscConfig+0x2a4>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d1f0      	bne.n	8002888 <HAL_RCC_OscConfig+0x10c>
 80028a6:	e000      	b.n	80028aa <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0302 	and.w	r3, r3, #2
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d06d      	beq.n	8002992 <HAL_RCC_OscConfig+0x216>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028b6:	4b5a      	ldr	r3, [pc, #360]	; (8002a20 <HAL_RCC_OscConfig+0x2a4>)
 80028b8:	691b      	ldr	r3, [r3, #16]
 80028ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80028be:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80028c0:	4b57      	ldr	r3, [pc, #348]	; (8002a20 <HAL_RCC_OscConfig+0x2a4>)
 80028c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028c4:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80028c6:	6a3b      	ldr	r3, [r7, #32]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d007      	beq.n	80028dc <HAL_RCC_OscConfig+0x160>
 80028cc:	6a3b      	ldr	r3, [r7, #32]
 80028ce:	2b18      	cmp	r3, #24
 80028d0:	d11b      	bne.n	800290a <HAL_RCC_OscConfig+0x18e>
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	f003 0303 	and.w	r3, r3, #3
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d116      	bne.n	800290a <HAL_RCC_OscConfig+0x18e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028dc:	4b50      	ldr	r3, [pc, #320]	; (8002a20 <HAL_RCC_OscConfig+0x2a4>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0304 	and.w	r3, r3, #4
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d005      	beq.n	80028f4 <HAL_RCC_OscConfig+0x178>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d101      	bne.n	80028f4 <HAL_RCC_OscConfig+0x178>
      {
        return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e2c7      	b.n	8002e84 <HAL_RCC_OscConfig+0x708>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028f4:	4b4a      	ldr	r3, [pc, #296]	; (8002a20 <HAL_RCC_OscConfig+0x2a4>)
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	691b      	ldr	r3, [r3, #16]
 8002900:	061b      	lsls	r3, r3, #24
 8002902:	4947      	ldr	r1, [pc, #284]	; (8002a20 <HAL_RCC_OscConfig+0x2a4>)
 8002904:	4313      	orrs	r3, r2
 8002906:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002908:	e043      	b.n	8002992 <HAL_RCC_OscConfig+0x216>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	68db      	ldr	r3, [r3, #12]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d026      	beq.n	8002960 <HAL_RCC_OscConfig+0x1e4>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002912:	4b43      	ldr	r3, [pc, #268]	; (8002a20 <HAL_RCC_OscConfig+0x2a4>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f023 0219 	bic.w	r2, r3, #25
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	68db      	ldr	r3, [r3, #12]
 800291e:	4940      	ldr	r1, [pc, #256]	; (8002a20 <HAL_RCC_OscConfig+0x2a4>)
 8002920:	4313      	orrs	r3, r2
 8002922:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002924:	f7fe f96a 	bl	8000bfc <HAL_GetTick>
 8002928:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800292a:	e008      	b.n	800293e <HAL_RCC_OscConfig+0x1c2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800292c:	f7fe f966 	bl	8000bfc <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	2b02      	cmp	r3, #2
 8002938:	d901      	bls.n	800293e <HAL_RCC_OscConfig+0x1c2>
          {
            return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e2a2      	b.n	8002e84 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800293e:	4b38      	ldr	r3, [pc, #224]	; (8002a20 <HAL_RCC_OscConfig+0x2a4>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0304 	and.w	r3, r3, #4
 8002946:	2b00      	cmp	r3, #0
 8002948:	d0f0      	beq.n	800292c <HAL_RCC_OscConfig+0x1b0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800294a:	4b35      	ldr	r3, [pc, #212]	; (8002a20 <HAL_RCC_OscConfig+0x2a4>)
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	691b      	ldr	r3, [r3, #16]
 8002956:	061b      	lsls	r3, r3, #24
 8002958:	4931      	ldr	r1, [pc, #196]	; (8002a20 <HAL_RCC_OscConfig+0x2a4>)
 800295a:	4313      	orrs	r3, r2
 800295c:	604b      	str	r3, [r1, #4]
 800295e:	e018      	b.n	8002992 <HAL_RCC_OscConfig+0x216>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002960:	4b2f      	ldr	r3, [pc, #188]	; (8002a20 <HAL_RCC_OscConfig+0x2a4>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a2e      	ldr	r2, [pc, #184]	; (8002a20 <HAL_RCC_OscConfig+0x2a4>)
 8002966:	f023 0301 	bic.w	r3, r3, #1
 800296a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800296c:	f7fe f946 	bl	8000bfc <HAL_GetTick>
 8002970:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002972:	e008      	b.n	8002986 <HAL_RCC_OscConfig+0x20a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002974:	f7fe f942 	bl	8000bfc <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	2b02      	cmp	r3, #2
 8002980:	d901      	bls.n	8002986 <HAL_RCC_OscConfig+0x20a>
          {
            return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e27e      	b.n	8002e84 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002986:	4b26      	ldr	r3, [pc, #152]	; (8002a20 <HAL_RCC_OscConfig+0x2a4>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0304 	and.w	r3, r3, #4
 800298e:	2b00      	cmp	r3, #0
 8002990:	d1f0      	bne.n	8002974 <HAL_RCC_OscConfig+0x1f8>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0310 	and.w	r3, r3, #16
 800299a:	2b00      	cmp	r3, #0
 800299c:	d06c      	beq.n	8002a78 <HAL_RCC_OscConfig+0x2fc>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800299e:	4b20      	ldr	r3, [pc, #128]	; (8002a20 <HAL_RCC_OscConfig+0x2a4>)
 80029a0:	691b      	ldr	r3, [r3, #16]
 80029a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80029a6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80029a8:	4b1d      	ldr	r3, [pc, #116]	; (8002a20 <HAL_RCC_OscConfig+0x2a4>)
 80029aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ac:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80029ae:	69bb      	ldr	r3, [r7, #24]
 80029b0:	2b08      	cmp	r3, #8
 80029b2:	d007      	beq.n	80029c4 <HAL_RCC_OscConfig+0x248>
 80029b4:	69bb      	ldr	r3, [r7, #24]
 80029b6:	2b18      	cmp	r3, #24
 80029b8:	d11b      	bne.n	80029f2 <HAL_RCC_OscConfig+0x276>
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	f003 0303 	and.w	r3, r3, #3
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d116      	bne.n	80029f2 <HAL_RCC_OscConfig+0x276>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80029c4:	4b16      	ldr	r3, [pc, #88]	; (8002a20 <HAL_RCC_OscConfig+0x2a4>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d005      	beq.n	80029dc <HAL_RCC_OscConfig+0x260>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	69db      	ldr	r3, [r3, #28]
 80029d4:	2b80      	cmp	r3, #128	; 0x80
 80029d6:	d001      	beq.n	80029dc <HAL_RCC_OscConfig+0x260>
      {
        return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e253      	b.n	8002e84 <HAL_RCC_OscConfig+0x708>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80029dc:	4b10      	ldr	r3, [pc, #64]	; (8002a20 <HAL_RCC_OscConfig+0x2a4>)
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6a1b      	ldr	r3, [r3, #32]
 80029e8:	061b      	lsls	r3, r3, #24
 80029ea:	490d      	ldr	r1, [pc, #52]	; (8002a20 <HAL_RCC_OscConfig+0x2a4>)
 80029ec:	4313      	orrs	r3, r2
 80029ee:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80029f0:	e042      	b.n	8002a78 <HAL_RCC_OscConfig+0x2fc>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	69db      	ldr	r3, [r3, #28]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d025      	beq.n	8002a46 <HAL_RCC_OscConfig+0x2ca>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80029fa:	4b09      	ldr	r3, [pc, #36]	; (8002a20 <HAL_RCC_OscConfig+0x2a4>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a08      	ldr	r2, [pc, #32]	; (8002a20 <HAL_RCC_OscConfig+0x2a4>)
 8002a00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a06:	f7fe f8f9 	bl	8000bfc <HAL_GetTick>
 8002a0a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002a0c:	e00a      	b.n	8002a24 <HAL_RCC_OscConfig+0x2a8>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002a0e:	f7fe f8f5 	bl	8000bfc <HAL_GetTick>
 8002a12:	4602      	mov	r2, r0
 8002a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a16:	1ad3      	subs	r3, r2, r3
 8002a18:	2b02      	cmp	r3, #2
 8002a1a:	d903      	bls.n	8002a24 <HAL_RCC_OscConfig+0x2a8>
          {
            return HAL_TIMEOUT;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	e231      	b.n	8002e84 <HAL_RCC_OscConfig+0x708>
 8002a20:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002a24:	4ba3      	ldr	r3, [pc, #652]	; (8002cb4 <HAL_RCC_OscConfig+0x538>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d0ee      	beq.n	8002a0e <HAL_RCC_OscConfig+0x292>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002a30:	4ba0      	ldr	r3, [pc, #640]	; (8002cb4 <HAL_RCC_OscConfig+0x538>)
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6a1b      	ldr	r3, [r3, #32]
 8002a3c:	061b      	lsls	r3, r3, #24
 8002a3e:	499d      	ldr	r1, [pc, #628]	; (8002cb4 <HAL_RCC_OscConfig+0x538>)
 8002a40:	4313      	orrs	r3, r2
 8002a42:	60cb      	str	r3, [r1, #12]
 8002a44:	e018      	b.n	8002a78 <HAL_RCC_OscConfig+0x2fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002a46:	4b9b      	ldr	r3, [pc, #620]	; (8002cb4 <HAL_RCC_OscConfig+0x538>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a9a      	ldr	r2, [pc, #616]	; (8002cb4 <HAL_RCC_OscConfig+0x538>)
 8002a4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a52:	f7fe f8d3 	bl	8000bfc <HAL_GetTick>
 8002a56:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002a58:	e008      	b.n	8002a6c <HAL_RCC_OscConfig+0x2f0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002a5a:	f7fe f8cf 	bl	8000bfc <HAL_GetTick>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a62:	1ad3      	subs	r3, r2, r3
 8002a64:	2b02      	cmp	r3, #2
 8002a66:	d901      	bls.n	8002a6c <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 8002a68:	2303      	movs	r3, #3
 8002a6a:	e20b      	b.n	8002e84 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002a6c:	4b91      	ldr	r3, [pc, #580]	; (8002cb4 <HAL_RCC_OscConfig+0x538>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d1f0      	bne.n	8002a5a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0308 	and.w	r3, r3, #8
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d036      	beq.n	8002af2 <HAL_RCC_OscConfig+0x376>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	695b      	ldr	r3, [r3, #20]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d019      	beq.n	8002ac0 <HAL_RCC_OscConfig+0x344>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a8c:	4b89      	ldr	r3, [pc, #548]	; (8002cb4 <HAL_RCC_OscConfig+0x538>)
 8002a8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a90:	4a88      	ldr	r2, [pc, #544]	; (8002cb4 <HAL_RCC_OscConfig+0x538>)
 8002a92:	f043 0301 	orr.w	r3, r3, #1
 8002a96:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a98:	f7fe f8b0 	bl	8000bfc <HAL_GetTick>
 8002a9c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002a9e:	e008      	b.n	8002ab2 <HAL_RCC_OscConfig+0x336>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002aa0:	f7fe f8ac 	bl	8000bfc <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d901      	bls.n	8002ab2 <HAL_RCC_OscConfig+0x336>
        {
          return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e1e8      	b.n	8002e84 <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002ab2:	4b80      	ldr	r3, [pc, #512]	; (8002cb4 <HAL_RCC_OscConfig+0x538>)
 8002ab4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ab6:	f003 0302 	and.w	r3, r3, #2
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d0f0      	beq.n	8002aa0 <HAL_RCC_OscConfig+0x324>
 8002abe:	e018      	b.n	8002af2 <HAL_RCC_OscConfig+0x376>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ac0:	4b7c      	ldr	r3, [pc, #496]	; (8002cb4 <HAL_RCC_OscConfig+0x538>)
 8002ac2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ac4:	4a7b      	ldr	r2, [pc, #492]	; (8002cb4 <HAL_RCC_OscConfig+0x538>)
 8002ac6:	f023 0301 	bic.w	r3, r3, #1
 8002aca:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002acc:	f7fe f896 	bl	8000bfc <HAL_GetTick>
 8002ad0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002ad2:	e008      	b.n	8002ae6 <HAL_RCC_OscConfig+0x36a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ad4:	f7fe f892 	bl	8000bfc <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d901      	bls.n	8002ae6 <HAL_RCC_OscConfig+0x36a>
        {
          return HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e1ce      	b.n	8002e84 <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002ae6:	4b73      	ldr	r3, [pc, #460]	; (8002cb4 <HAL_RCC_OscConfig+0x538>)
 8002ae8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002aea:	f003 0302 	and.w	r3, r3, #2
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d1f0      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x358>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0320 	and.w	r3, r3, #32
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d036      	beq.n	8002b6c <HAL_RCC_OscConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	699b      	ldr	r3, [r3, #24]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d019      	beq.n	8002b3a <HAL_RCC_OscConfig+0x3be>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002b06:	4b6b      	ldr	r3, [pc, #428]	; (8002cb4 <HAL_RCC_OscConfig+0x538>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a6a      	ldr	r2, [pc, #424]	; (8002cb4 <HAL_RCC_OscConfig+0x538>)
 8002b0c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b10:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002b12:	f7fe f873 	bl	8000bfc <HAL_GetTick>
 8002b16:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002b18:	e008      	b.n	8002b2c <HAL_RCC_OscConfig+0x3b0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002b1a:	f7fe f86f 	bl	8000bfc <HAL_GetTick>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	2b02      	cmp	r3, #2
 8002b26:	d901      	bls.n	8002b2c <HAL_RCC_OscConfig+0x3b0>
        {
          return HAL_TIMEOUT;
 8002b28:	2303      	movs	r3, #3
 8002b2a:	e1ab      	b.n	8002e84 <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002b2c:	4b61      	ldr	r3, [pc, #388]	; (8002cb4 <HAL_RCC_OscConfig+0x538>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d0f0      	beq.n	8002b1a <HAL_RCC_OscConfig+0x39e>
 8002b38:	e018      	b.n	8002b6c <HAL_RCC_OscConfig+0x3f0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002b3a:	4b5e      	ldr	r3, [pc, #376]	; (8002cb4 <HAL_RCC_OscConfig+0x538>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a5d      	ldr	r2, [pc, #372]	; (8002cb4 <HAL_RCC_OscConfig+0x538>)
 8002b40:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002b44:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002b46:	f7fe f859 	bl	8000bfc <HAL_GetTick>
 8002b4a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002b4c:	e008      	b.n	8002b60 <HAL_RCC_OscConfig+0x3e4>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002b4e:	f7fe f855 	bl	8000bfc <HAL_GetTick>
 8002b52:	4602      	mov	r2, r0
 8002b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b56:	1ad3      	subs	r3, r2, r3
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	d901      	bls.n	8002b60 <HAL_RCC_OscConfig+0x3e4>
        {
          return HAL_TIMEOUT;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	e191      	b.n	8002e84 <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002b60:	4b54      	ldr	r3, [pc, #336]	; (8002cb4 <HAL_RCC_OscConfig+0x538>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d1f0      	bne.n	8002b4e <HAL_RCC_OscConfig+0x3d2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 0304 	and.w	r3, r3, #4
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	f000 8081 	beq.w	8002c7c <HAL_RCC_OscConfig+0x500>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002b7a:	4b4f      	ldr	r3, [pc, #316]	; (8002cb8 <HAL_RCC_OscConfig+0x53c>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a4e      	ldr	r2, [pc, #312]	; (8002cb8 <HAL_RCC_OscConfig+0x53c>)
 8002b80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b84:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b86:	f7fe f839 	bl	8000bfc <HAL_GetTick>
 8002b8a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b8c:	e008      	b.n	8002ba0 <HAL_RCC_OscConfig+0x424>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002b8e:	f7fe f835 	bl	8000bfc <HAL_GetTick>
 8002b92:	4602      	mov	r2, r0
 8002b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	2b64      	cmp	r3, #100	; 0x64
 8002b9a:	d901      	bls.n	8002ba0 <HAL_RCC_OscConfig+0x424>
      {
        return HAL_TIMEOUT;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	e171      	b.n	8002e84 <HAL_RCC_OscConfig+0x708>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ba0:	4b45      	ldr	r3, [pc, #276]	; (8002cb8 <HAL_RCC_OscConfig+0x53c>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d0f0      	beq.n	8002b8e <HAL_RCC_OscConfig+0x412>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d106      	bne.n	8002bc2 <HAL_RCC_OscConfig+0x446>
 8002bb4:	4b3f      	ldr	r3, [pc, #252]	; (8002cb4 <HAL_RCC_OscConfig+0x538>)
 8002bb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bb8:	4a3e      	ldr	r2, [pc, #248]	; (8002cb4 <HAL_RCC_OscConfig+0x538>)
 8002bba:	f043 0301 	orr.w	r3, r3, #1
 8002bbe:	6713      	str	r3, [r2, #112]	; 0x70
 8002bc0:	e02d      	b.n	8002c1e <HAL_RCC_OscConfig+0x4a2>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d10c      	bne.n	8002be4 <HAL_RCC_OscConfig+0x468>
 8002bca:	4b3a      	ldr	r3, [pc, #232]	; (8002cb4 <HAL_RCC_OscConfig+0x538>)
 8002bcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bce:	4a39      	ldr	r2, [pc, #228]	; (8002cb4 <HAL_RCC_OscConfig+0x538>)
 8002bd0:	f023 0301 	bic.w	r3, r3, #1
 8002bd4:	6713      	str	r3, [r2, #112]	; 0x70
 8002bd6:	4b37      	ldr	r3, [pc, #220]	; (8002cb4 <HAL_RCC_OscConfig+0x538>)
 8002bd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bda:	4a36      	ldr	r2, [pc, #216]	; (8002cb4 <HAL_RCC_OscConfig+0x538>)
 8002bdc:	f023 0304 	bic.w	r3, r3, #4
 8002be0:	6713      	str	r3, [r2, #112]	; 0x70
 8002be2:	e01c      	b.n	8002c1e <HAL_RCC_OscConfig+0x4a2>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	2b05      	cmp	r3, #5
 8002bea:	d10c      	bne.n	8002c06 <HAL_RCC_OscConfig+0x48a>
 8002bec:	4b31      	ldr	r3, [pc, #196]	; (8002cb4 <HAL_RCC_OscConfig+0x538>)
 8002bee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bf0:	4a30      	ldr	r2, [pc, #192]	; (8002cb4 <HAL_RCC_OscConfig+0x538>)
 8002bf2:	f043 0304 	orr.w	r3, r3, #4
 8002bf6:	6713      	str	r3, [r2, #112]	; 0x70
 8002bf8:	4b2e      	ldr	r3, [pc, #184]	; (8002cb4 <HAL_RCC_OscConfig+0x538>)
 8002bfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bfc:	4a2d      	ldr	r2, [pc, #180]	; (8002cb4 <HAL_RCC_OscConfig+0x538>)
 8002bfe:	f043 0301 	orr.w	r3, r3, #1
 8002c02:	6713      	str	r3, [r2, #112]	; 0x70
 8002c04:	e00b      	b.n	8002c1e <HAL_RCC_OscConfig+0x4a2>
 8002c06:	4b2b      	ldr	r3, [pc, #172]	; (8002cb4 <HAL_RCC_OscConfig+0x538>)
 8002c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c0a:	4a2a      	ldr	r2, [pc, #168]	; (8002cb4 <HAL_RCC_OscConfig+0x538>)
 8002c0c:	f023 0301 	bic.w	r3, r3, #1
 8002c10:	6713      	str	r3, [r2, #112]	; 0x70
 8002c12:	4b28      	ldr	r3, [pc, #160]	; (8002cb4 <HAL_RCC_OscConfig+0x538>)
 8002c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c16:	4a27      	ldr	r2, [pc, #156]	; (8002cb4 <HAL_RCC_OscConfig+0x538>)
 8002c18:	f023 0304 	bic.w	r3, r3, #4
 8002c1c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d015      	beq.n	8002c52 <HAL_RCC_OscConfig+0x4d6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c26:	f7fd ffe9 	bl	8000bfc <HAL_GetTick>
 8002c2a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c2c:	e00a      	b.n	8002c44 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c2e:	f7fd ffe5 	bl	8000bfc <HAL_GetTick>
 8002c32:	4602      	mov	r2, r0
 8002c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d901      	bls.n	8002c44 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8002c40:	2303      	movs	r3, #3
 8002c42:	e11f      	b.n	8002e84 <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c44:	4b1b      	ldr	r3, [pc, #108]	; (8002cb4 <HAL_RCC_OscConfig+0x538>)
 8002c46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c48:	f003 0302 	and.w	r3, r3, #2
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d0ee      	beq.n	8002c2e <HAL_RCC_OscConfig+0x4b2>
 8002c50:	e014      	b.n	8002c7c <HAL_RCC_OscConfig+0x500>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c52:	f7fd ffd3 	bl	8000bfc <HAL_GetTick>
 8002c56:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002c58:	e00a      	b.n	8002c70 <HAL_RCC_OscConfig+0x4f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c5a:	f7fd ffcf 	bl	8000bfc <HAL_GetTick>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d901      	bls.n	8002c70 <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	e109      	b.n	8002e84 <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002c70:	4b10      	ldr	r3, [pc, #64]	; (8002cb4 <HAL_RCC_OscConfig+0x538>)
 8002c72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c74:	f003 0302 	and.w	r3, r3, #2
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d1ee      	bne.n	8002c5a <HAL_RCC_OscConfig+0x4de>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	f000 80fe 	beq.w	8002e82 <HAL_RCC_OscConfig+0x706>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002c86:	4b0b      	ldr	r3, [pc, #44]	; (8002cb4 <HAL_RCC_OscConfig+0x538>)
 8002c88:	691b      	ldr	r3, [r3, #16]
 8002c8a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002c8e:	2b18      	cmp	r3, #24
 8002c90:	f000 80b9 	beq.w	8002e06 <HAL_RCC_OscConfig+0x68a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c98:	2b02      	cmp	r3, #2
 8002c9a:	f040 809a 	bne.w	8002dd2 <HAL_RCC_OscConfig+0x656>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c9e:	4b05      	ldr	r3, [pc, #20]	; (8002cb4 <HAL_RCC_OscConfig+0x538>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a04      	ldr	r2, [pc, #16]	; (8002cb4 <HAL_RCC_OscConfig+0x538>)
 8002ca4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ca8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002caa:	f7fd ffa7 	bl	8000bfc <HAL_GetTick>
 8002cae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002cb0:	e00d      	b.n	8002cce <HAL_RCC_OscConfig+0x552>
 8002cb2:	bf00      	nop
 8002cb4:	58024400 	.word	0x58024400
 8002cb8:	58024800 	.word	0x58024800
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cbc:	f7fd ff9e 	bl	8000bfc <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	2b02      	cmp	r3, #2
 8002cc8:	d901      	bls.n	8002cce <HAL_RCC_OscConfig+0x552>
          {
            return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e0da      	b.n	8002e84 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002cce:	4b6f      	ldr	r3, [pc, #444]	; (8002e8c <HAL_RCC_OscConfig+0x710>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d1f0      	bne.n	8002cbc <HAL_RCC_OscConfig+0x540>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cda:	4b6c      	ldr	r3, [pc, #432]	; (8002e8c <HAL_RCC_OscConfig+0x710>)
 8002cdc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002cde:	4b6c      	ldr	r3, [pc, #432]	; (8002e90 <HAL_RCC_OscConfig+0x714>)
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002cea:	0112      	lsls	r2, r2, #4
 8002cec:	430a      	orrs	r2, r1
 8002cee:	4967      	ldr	r1, [pc, #412]	; (8002e8c <HAL_RCC_OscConfig+0x710>)
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	628b      	str	r3, [r1, #40]	; 0x28
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf8:	3b01      	subs	r3, #1
 8002cfa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d02:	3b01      	subs	r3, #1
 8002d04:	025b      	lsls	r3, r3, #9
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	431a      	orrs	r2, r3
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d0e:	3b01      	subs	r3, #1
 8002d10:	041b      	lsls	r3, r3, #16
 8002d12:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002d16:	431a      	orrs	r2, r3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d1c:	3b01      	subs	r3, #1
 8002d1e:	061b      	lsls	r3, r3, #24
 8002d20:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002d24:	4959      	ldr	r1, [pc, #356]	; (8002e8c <HAL_RCC_OscConfig+0x710>)
 8002d26:	4313      	orrs	r3, r2
 8002d28:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002d2a:	4b58      	ldr	r3, [pc, #352]	; (8002e8c <HAL_RCC_OscConfig+0x710>)
 8002d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d2e:	4a57      	ldr	r2, [pc, #348]	; (8002e8c <HAL_RCC_OscConfig+0x710>)
 8002d30:	f023 0301 	bic.w	r3, r3, #1
 8002d34:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002d36:	4b55      	ldr	r3, [pc, #340]	; (8002e8c <HAL_RCC_OscConfig+0x710>)
 8002d38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d3a:	4b56      	ldr	r3, [pc, #344]	; (8002e94 <HAL_RCC_OscConfig+0x718>)
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002d42:	00d2      	lsls	r2, r2, #3
 8002d44:	4951      	ldr	r1, [pc, #324]	; (8002e8c <HAL_RCC_OscConfig+0x710>)
 8002d46:	4313      	orrs	r3, r2
 8002d48:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002d4a:	4b50      	ldr	r3, [pc, #320]	; (8002e8c <HAL_RCC_OscConfig+0x710>)
 8002d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d4e:	f023 020c 	bic.w	r2, r3, #12
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d56:	494d      	ldr	r1, [pc, #308]	; (8002e8c <HAL_RCC_OscConfig+0x710>)
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002d5c:	4b4b      	ldr	r3, [pc, #300]	; (8002e8c <HAL_RCC_OscConfig+0x710>)
 8002d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d60:	f023 0202 	bic.w	r2, r3, #2
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d68:	4948      	ldr	r1, [pc, #288]	; (8002e8c <HAL_RCC_OscConfig+0x710>)
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002d6e:	4b47      	ldr	r3, [pc, #284]	; (8002e8c <HAL_RCC_OscConfig+0x710>)
 8002d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d72:	4a46      	ldr	r2, [pc, #280]	; (8002e8c <HAL_RCC_OscConfig+0x710>)
 8002d74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d78:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d7a:	4b44      	ldr	r3, [pc, #272]	; (8002e8c <HAL_RCC_OscConfig+0x710>)
 8002d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d7e:	4a43      	ldr	r2, [pc, #268]	; (8002e8c <HAL_RCC_OscConfig+0x710>)
 8002d80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d84:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002d86:	4b41      	ldr	r3, [pc, #260]	; (8002e8c <HAL_RCC_OscConfig+0x710>)
 8002d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d8a:	4a40      	ldr	r2, [pc, #256]	; (8002e8c <HAL_RCC_OscConfig+0x710>)
 8002d8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d90:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002d92:	4b3e      	ldr	r3, [pc, #248]	; (8002e8c <HAL_RCC_OscConfig+0x710>)
 8002d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d96:	4a3d      	ldr	r2, [pc, #244]	; (8002e8c <HAL_RCC_OscConfig+0x710>)
 8002d98:	f043 0301 	orr.w	r3, r3, #1
 8002d9c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d9e:	4b3b      	ldr	r3, [pc, #236]	; (8002e8c <HAL_RCC_OscConfig+0x710>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a3a      	ldr	r2, [pc, #232]	; (8002e8c <HAL_RCC_OscConfig+0x710>)
 8002da4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002da8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002daa:	f7fd ff27 	bl	8000bfc <HAL_GetTick>
 8002dae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002db0:	e008      	b.n	8002dc4 <HAL_RCC_OscConfig+0x648>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002db2:	f7fd ff23 	bl	8000bfc <HAL_GetTick>
 8002db6:	4602      	mov	r2, r0
 8002db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	2b02      	cmp	r3, #2
 8002dbe:	d901      	bls.n	8002dc4 <HAL_RCC_OscConfig+0x648>
          {
            return HAL_TIMEOUT;
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	e05f      	b.n	8002e84 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002dc4:	4b31      	ldr	r3, [pc, #196]	; (8002e8c <HAL_RCC_OscConfig+0x710>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d0f0      	beq.n	8002db2 <HAL_RCC_OscConfig+0x636>
 8002dd0:	e057      	b.n	8002e82 <HAL_RCC_OscConfig+0x706>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dd2:	4b2e      	ldr	r3, [pc, #184]	; (8002e8c <HAL_RCC_OscConfig+0x710>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a2d      	ldr	r2, [pc, #180]	; (8002e8c <HAL_RCC_OscConfig+0x710>)
 8002dd8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ddc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dde:	f7fd ff0d 	bl	8000bfc <HAL_GetTick>
 8002de2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002de4:	e008      	b.n	8002df8 <HAL_RCC_OscConfig+0x67c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002de6:	f7fd ff09 	bl	8000bfc <HAL_GetTick>
 8002dea:	4602      	mov	r2, r0
 8002dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d901      	bls.n	8002df8 <HAL_RCC_OscConfig+0x67c>
          {
            return HAL_TIMEOUT;
 8002df4:	2303      	movs	r3, #3
 8002df6:	e045      	b.n	8002e84 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002df8:	4b24      	ldr	r3, [pc, #144]	; (8002e8c <HAL_RCC_OscConfig+0x710>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d1f0      	bne.n	8002de6 <HAL_RCC_OscConfig+0x66a>
 8002e04:	e03d      	b.n	8002e82 <HAL_RCC_OscConfig+0x706>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002e06:	4b21      	ldr	r3, [pc, #132]	; (8002e8c <HAL_RCC_OscConfig+0x710>)
 8002e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e0a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002e0c:	4b1f      	ldr	r3, [pc, #124]	; (8002e8c <HAL_RCC_OscConfig+0x710>)
 8002e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e10:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d031      	beq.n	8002e7e <HAL_RCC_OscConfig+0x702>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	f003 0203 	and.w	r2, r3, #3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d12a      	bne.n	8002e7e <HAL_RCC_OscConfig+0x702>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	091b      	lsrs	r3, r3, #4
 8002e2c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d122      	bne.n	8002e7e <HAL_RCC_OscConfig+0x702>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e42:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d11a      	bne.n	8002e7e <HAL_RCC_OscConfig+0x702>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	0a5b      	lsrs	r3, r3, #9
 8002e4c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e54:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d111      	bne.n	8002e7e <HAL_RCC_OscConfig+0x702>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	0c1b      	lsrs	r3, r3, #16
 8002e5e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e66:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d108      	bne.n	8002e7e <HAL_RCC_OscConfig+0x702>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	0e1b      	lsrs	r3, r3, #24
 8002e70:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e78:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d001      	beq.n	8002e82 <HAL_RCC_OscConfig+0x706>
      {
        return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e000      	b.n	8002e84 <HAL_RCC_OscConfig+0x708>
      }
    }
  }
  return HAL_OK;
 8002e82:	2300      	movs	r3, #0
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3730      	adds	r7, #48	; 0x30
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	58024400 	.word	0x58024400
 8002e90:	fffffc0c 	.word	0xfffffc0c
 8002e94:	ffff0007 	.word	0xffff0007

08002e98 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b086      	sub	sp, #24
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d101      	bne.n	8002eac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e19c      	b.n	80031e6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002eac:	4b8a      	ldr	r3, [pc, #552]	; (80030d8 <HAL_RCC_ClockConfig+0x240>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 030f 	and.w	r3, r3, #15
 8002eb4:	683a      	ldr	r2, [r7, #0]
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d910      	bls.n	8002edc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eba:	4b87      	ldr	r3, [pc, #540]	; (80030d8 <HAL_RCC_ClockConfig+0x240>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f023 020f 	bic.w	r2, r3, #15
 8002ec2:	4985      	ldr	r1, [pc, #532]	; (80030d8 <HAL_RCC_ClockConfig+0x240>)
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eca:	4b83      	ldr	r3, [pc, #524]	; (80030d8 <HAL_RCC_ClockConfig+0x240>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 030f 	and.w	r3, r3, #15
 8002ed2:	683a      	ldr	r2, [r7, #0]
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d001      	beq.n	8002edc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e184      	b.n	80031e6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 0304 	and.w	r3, r3, #4
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d010      	beq.n	8002f0a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	691a      	ldr	r2, [r3, #16]
 8002eec:	4b7b      	ldr	r3, [pc, #492]	; (80030dc <HAL_RCC_ClockConfig+0x244>)
 8002eee:	699b      	ldr	r3, [r3, #24]
 8002ef0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d908      	bls.n	8002f0a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002ef8:	4b78      	ldr	r3, [pc, #480]	; (80030dc <HAL_RCC_ClockConfig+0x244>)
 8002efa:	699b      	ldr	r3, [r3, #24]
 8002efc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	691b      	ldr	r3, [r3, #16]
 8002f04:	4975      	ldr	r1, [pc, #468]	; (80030dc <HAL_RCC_ClockConfig+0x244>)
 8002f06:	4313      	orrs	r3, r2
 8002f08:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0308 	and.w	r3, r3, #8
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d010      	beq.n	8002f38 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	695a      	ldr	r2, [r3, #20]
 8002f1a:	4b70      	ldr	r3, [pc, #448]	; (80030dc <HAL_RCC_ClockConfig+0x244>)
 8002f1c:	69db      	ldr	r3, [r3, #28]
 8002f1e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d908      	bls.n	8002f38 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002f26:	4b6d      	ldr	r3, [pc, #436]	; (80030dc <HAL_RCC_ClockConfig+0x244>)
 8002f28:	69db      	ldr	r3, [r3, #28]
 8002f2a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	695b      	ldr	r3, [r3, #20]
 8002f32:	496a      	ldr	r1, [pc, #424]	; (80030dc <HAL_RCC_ClockConfig+0x244>)
 8002f34:	4313      	orrs	r3, r2
 8002f36:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0310 	and.w	r3, r3, #16
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d010      	beq.n	8002f66 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	699a      	ldr	r2, [r3, #24]
 8002f48:	4b64      	ldr	r3, [pc, #400]	; (80030dc <HAL_RCC_ClockConfig+0x244>)
 8002f4a:	69db      	ldr	r3, [r3, #28]
 8002f4c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d908      	bls.n	8002f66 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002f54:	4b61      	ldr	r3, [pc, #388]	; (80030dc <HAL_RCC_ClockConfig+0x244>)
 8002f56:	69db      	ldr	r3, [r3, #28]
 8002f58:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	699b      	ldr	r3, [r3, #24]
 8002f60:	495e      	ldr	r1, [pc, #376]	; (80030dc <HAL_RCC_ClockConfig+0x244>)
 8002f62:	4313      	orrs	r3, r2
 8002f64:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0320 	and.w	r3, r3, #32
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d010      	beq.n	8002f94 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	69da      	ldr	r2, [r3, #28]
 8002f76:	4b59      	ldr	r3, [pc, #356]	; (80030dc <HAL_RCC_ClockConfig+0x244>)
 8002f78:	6a1b      	ldr	r3, [r3, #32]
 8002f7a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d908      	bls.n	8002f94 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002f82:	4b56      	ldr	r3, [pc, #344]	; (80030dc <HAL_RCC_ClockConfig+0x244>)
 8002f84:	6a1b      	ldr	r3, [r3, #32]
 8002f86:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	69db      	ldr	r3, [r3, #28]
 8002f8e:	4953      	ldr	r1, [pc, #332]	; (80030dc <HAL_RCC_ClockConfig+0x244>)
 8002f90:	4313      	orrs	r3, r2
 8002f92:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 0302 	and.w	r3, r3, #2
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d010      	beq.n	8002fc2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	68da      	ldr	r2, [r3, #12]
 8002fa4:	4b4d      	ldr	r3, [pc, #308]	; (80030dc <HAL_RCC_ClockConfig+0x244>)
 8002fa6:	699b      	ldr	r3, [r3, #24]
 8002fa8:	f003 030f 	and.w	r3, r3, #15
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d908      	bls.n	8002fc2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fb0:	4b4a      	ldr	r3, [pc, #296]	; (80030dc <HAL_RCC_ClockConfig+0x244>)
 8002fb2:	699b      	ldr	r3, [r3, #24]
 8002fb4:	f023 020f 	bic.w	r2, r3, #15
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	4947      	ldr	r1, [pc, #284]	; (80030dc <HAL_RCC_ClockConfig+0x244>)
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0301 	and.w	r3, r3, #1
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d055      	beq.n	800307a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002fce:	4b43      	ldr	r3, [pc, #268]	; (80030dc <HAL_RCC_ClockConfig+0x244>)
 8002fd0:	699b      	ldr	r3, [r3, #24]
 8002fd2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	4940      	ldr	r1, [pc, #256]	; (80030dc <HAL_RCC_ClockConfig+0x244>)
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	2b02      	cmp	r3, #2
 8002fe6:	d107      	bne.n	8002ff8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002fe8:	4b3c      	ldr	r3, [pc, #240]	; (80030dc <HAL_RCC_ClockConfig+0x244>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d121      	bne.n	8003038 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e0f6      	b.n	80031e6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	2b03      	cmp	r3, #3
 8002ffe:	d107      	bne.n	8003010 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003000:	4b36      	ldr	r3, [pc, #216]	; (80030dc <HAL_RCC_ClockConfig+0x244>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003008:	2b00      	cmp	r3, #0
 800300a:	d115      	bne.n	8003038 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	e0ea      	b.n	80031e6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	2b01      	cmp	r3, #1
 8003016:	d107      	bne.n	8003028 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003018:	4b30      	ldr	r3, [pc, #192]	; (80030dc <HAL_RCC_ClockConfig+0x244>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003020:	2b00      	cmp	r3, #0
 8003022:	d109      	bne.n	8003038 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e0de      	b.n	80031e6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003028:	4b2c      	ldr	r3, [pc, #176]	; (80030dc <HAL_RCC_ClockConfig+0x244>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 0304 	and.w	r3, r3, #4
 8003030:	2b00      	cmp	r3, #0
 8003032:	d101      	bne.n	8003038 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e0d6      	b.n	80031e6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003038:	4b28      	ldr	r3, [pc, #160]	; (80030dc <HAL_RCC_ClockConfig+0x244>)
 800303a:	691b      	ldr	r3, [r3, #16]
 800303c:	f023 0207 	bic.w	r2, r3, #7
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	4925      	ldr	r1, [pc, #148]	; (80030dc <HAL_RCC_ClockConfig+0x244>)
 8003046:	4313      	orrs	r3, r2
 8003048:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800304a:	f7fd fdd7 	bl	8000bfc <HAL_GetTick>
 800304e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003050:	e00a      	b.n	8003068 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003052:	f7fd fdd3 	bl	8000bfc <HAL_GetTick>
 8003056:	4602      	mov	r2, r0
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003060:	4293      	cmp	r3, r2
 8003062:	d901      	bls.n	8003068 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003064:	2303      	movs	r3, #3
 8003066:	e0be      	b.n	80031e6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003068:	4b1c      	ldr	r3, [pc, #112]	; (80030dc <HAL_RCC_ClockConfig+0x244>)
 800306a:	691b      	ldr	r3, [r3, #16]
 800306c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	00db      	lsls	r3, r3, #3
 8003076:	429a      	cmp	r2, r3
 8003078:	d1eb      	bne.n	8003052 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0302 	and.w	r3, r3, #2
 8003082:	2b00      	cmp	r3, #0
 8003084:	d010      	beq.n	80030a8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	68da      	ldr	r2, [r3, #12]
 800308a:	4b14      	ldr	r3, [pc, #80]	; (80030dc <HAL_RCC_ClockConfig+0x244>)
 800308c:	699b      	ldr	r3, [r3, #24]
 800308e:	f003 030f 	and.w	r3, r3, #15
 8003092:	429a      	cmp	r2, r3
 8003094:	d208      	bcs.n	80030a8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003096:	4b11      	ldr	r3, [pc, #68]	; (80030dc <HAL_RCC_ClockConfig+0x244>)
 8003098:	699b      	ldr	r3, [r3, #24]
 800309a:	f023 020f 	bic.w	r2, r3, #15
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	68db      	ldr	r3, [r3, #12]
 80030a2:	490e      	ldr	r1, [pc, #56]	; (80030dc <HAL_RCC_ClockConfig+0x244>)
 80030a4:	4313      	orrs	r3, r2
 80030a6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030a8:	4b0b      	ldr	r3, [pc, #44]	; (80030d8 <HAL_RCC_ClockConfig+0x240>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 030f 	and.w	r3, r3, #15
 80030b0:	683a      	ldr	r2, [r7, #0]
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d214      	bcs.n	80030e0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030b6:	4b08      	ldr	r3, [pc, #32]	; (80030d8 <HAL_RCC_ClockConfig+0x240>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f023 020f 	bic.w	r2, r3, #15
 80030be:	4906      	ldr	r1, [pc, #24]	; (80030d8 <HAL_RCC_ClockConfig+0x240>)
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	4313      	orrs	r3, r2
 80030c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030c6:	4b04      	ldr	r3, [pc, #16]	; (80030d8 <HAL_RCC_ClockConfig+0x240>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 030f 	and.w	r3, r3, #15
 80030ce:	683a      	ldr	r2, [r7, #0]
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d005      	beq.n	80030e0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e086      	b.n	80031e6 <HAL_RCC_ClockConfig+0x34e>
 80030d8:	52002000 	.word	0x52002000
 80030dc:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 0304 	and.w	r3, r3, #4
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d010      	beq.n	800310e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	691a      	ldr	r2, [r3, #16]
 80030f0:	4b3f      	ldr	r3, [pc, #252]	; (80031f0 <HAL_RCC_ClockConfig+0x358>)
 80030f2:	699b      	ldr	r3, [r3, #24]
 80030f4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d208      	bcs.n	800310e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80030fc:	4b3c      	ldr	r3, [pc, #240]	; (80031f0 <HAL_RCC_ClockConfig+0x358>)
 80030fe:	699b      	ldr	r3, [r3, #24]
 8003100:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	691b      	ldr	r3, [r3, #16]
 8003108:	4939      	ldr	r1, [pc, #228]	; (80031f0 <HAL_RCC_ClockConfig+0x358>)
 800310a:	4313      	orrs	r3, r2
 800310c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 0308 	and.w	r3, r3, #8
 8003116:	2b00      	cmp	r3, #0
 8003118:	d010      	beq.n	800313c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	695a      	ldr	r2, [r3, #20]
 800311e:	4b34      	ldr	r3, [pc, #208]	; (80031f0 <HAL_RCC_ClockConfig+0x358>)
 8003120:	69db      	ldr	r3, [r3, #28]
 8003122:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003126:	429a      	cmp	r2, r3
 8003128:	d208      	bcs.n	800313c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800312a:	4b31      	ldr	r3, [pc, #196]	; (80031f0 <HAL_RCC_ClockConfig+0x358>)
 800312c:	69db      	ldr	r3, [r3, #28]
 800312e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	695b      	ldr	r3, [r3, #20]
 8003136:	492e      	ldr	r1, [pc, #184]	; (80031f0 <HAL_RCC_ClockConfig+0x358>)
 8003138:	4313      	orrs	r3, r2
 800313a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 0310 	and.w	r3, r3, #16
 8003144:	2b00      	cmp	r3, #0
 8003146:	d010      	beq.n	800316a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	699a      	ldr	r2, [r3, #24]
 800314c:	4b28      	ldr	r3, [pc, #160]	; (80031f0 <HAL_RCC_ClockConfig+0x358>)
 800314e:	69db      	ldr	r3, [r3, #28]
 8003150:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003154:	429a      	cmp	r2, r3
 8003156:	d208      	bcs.n	800316a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003158:	4b25      	ldr	r3, [pc, #148]	; (80031f0 <HAL_RCC_ClockConfig+0x358>)
 800315a:	69db      	ldr	r3, [r3, #28]
 800315c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	699b      	ldr	r3, [r3, #24]
 8003164:	4922      	ldr	r1, [pc, #136]	; (80031f0 <HAL_RCC_ClockConfig+0x358>)
 8003166:	4313      	orrs	r3, r2
 8003168:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 0320 	and.w	r3, r3, #32
 8003172:	2b00      	cmp	r3, #0
 8003174:	d010      	beq.n	8003198 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	69da      	ldr	r2, [r3, #28]
 800317a:	4b1d      	ldr	r3, [pc, #116]	; (80031f0 <HAL_RCC_ClockConfig+0x358>)
 800317c:	6a1b      	ldr	r3, [r3, #32]
 800317e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003182:	429a      	cmp	r2, r3
 8003184:	d208      	bcs.n	8003198 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003186:	4b1a      	ldr	r3, [pc, #104]	; (80031f0 <HAL_RCC_ClockConfig+0x358>)
 8003188:	6a1b      	ldr	r3, [r3, #32]
 800318a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	69db      	ldr	r3, [r3, #28]
 8003192:	4917      	ldr	r1, [pc, #92]	; (80031f0 <HAL_RCC_ClockConfig+0x358>)
 8003194:	4313      	orrs	r3, r2
 8003196:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003198:	f000 f834 	bl	8003204 <HAL_RCC_GetSysClockFreq>
 800319c:	4602      	mov	r2, r0
 800319e:	4b14      	ldr	r3, [pc, #80]	; (80031f0 <HAL_RCC_ClockConfig+0x358>)
 80031a0:	699b      	ldr	r3, [r3, #24]
 80031a2:	0a1b      	lsrs	r3, r3, #8
 80031a4:	f003 030f 	and.w	r3, r3, #15
 80031a8:	4912      	ldr	r1, [pc, #72]	; (80031f4 <HAL_RCC_ClockConfig+0x35c>)
 80031aa:	5ccb      	ldrb	r3, [r1, r3]
 80031ac:	f003 031f 	and.w	r3, r3, #31
 80031b0:	fa22 f303 	lsr.w	r3, r2, r3
 80031b4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80031b6:	4b0e      	ldr	r3, [pc, #56]	; (80031f0 <HAL_RCC_ClockConfig+0x358>)
 80031b8:	699b      	ldr	r3, [r3, #24]
 80031ba:	f003 030f 	and.w	r3, r3, #15
 80031be:	4a0d      	ldr	r2, [pc, #52]	; (80031f4 <HAL_RCC_ClockConfig+0x35c>)
 80031c0:	5cd3      	ldrb	r3, [r2, r3]
 80031c2:	f003 031f 	and.w	r3, r3, #31
 80031c6:	693a      	ldr	r2, [r7, #16]
 80031c8:	fa22 f303 	lsr.w	r3, r2, r3
 80031cc:	4a0a      	ldr	r2, [pc, #40]	; (80031f8 <HAL_RCC_ClockConfig+0x360>)
 80031ce:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80031d0:	4a0a      	ldr	r2, [pc, #40]	; (80031fc <HAL_RCC_ClockConfig+0x364>)
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80031d6:	4b0a      	ldr	r3, [pc, #40]	; (8003200 <HAL_RCC_ClockConfig+0x368>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4618      	mov	r0, r3
 80031dc:	f7fd fcc4 	bl	8000b68 <HAL_InitTick>
 80031e0:	4603      	mov	r3, r0
 80031e2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80031e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3718      	adds	r7, #24
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	58024400 	.word	0x58024400
 80031f4:	0800468c 	.word	0x0800468c
 80031f8:	20000004 	.word	0x20000004
 80031fc:	20000000 	.word	0x20000000
 8003200:	20000008 	.word	0x20000008

08003204 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003204:	b480      	push	{r7}
 8003206:	b089      	sub	sp, #36	; 0x24
 8003208:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800320a:	4bb3      	ldr	r3, [pc, #716]	; (80034d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800320c:	691b      	ldr	r3, [r3, #16]
 800320e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003212:	2b18      	cmp	r3, #24
 8003214:	f200 8155 	bhi.w	80034c2 <HAL_RCC_GetSysClockFreq+0x2be>
 8003218:	a201      	add	r2, pc, #4	; (adr r2, 8003220 <HAL_RCC_GetSysClockFreq+0x1c>)
 800321a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800321e:	bf00      	nop
 8003220:	08003285 	.word	0x08003285
 8003224:	080034c3 	.word	0x080034c3
 8003228:	080034c3 	.word	0x080034c3
 800322c:	080034c3 	.word	0x080034c3
 8003230:	080034c3 	.word	0x080034c3
 8003234:	080034c3 	.word	0x080034c3
 8003238:	080034c3 	.word	0x080034c3
 800323c:	080034c3 	.word	0x080034c3
 8003240:	080032ab 	.word	0x080032ab
 8003244:	080034c3 	.word	0x080034c3
 8003248:	080034c3 	.word	0x080034c3
 800324c:	080034c3 	.word	0x080034c3
 8003250:	080034c3 	.word	0x080034c3
 8003254:	080034c3 	.word	0x080034c3
 8003258:	080034c3 	.word	0x080034c3
 800325c:	080034c3 	.word	0x080034c3
 8003260:	080032b1 	.word	0x080032b1
 8003264:	080034c3 	.word	0x080034c3
 8003268:	080034c3 	.word	0x080034c3
 800326c:	080034c3 	.word	0x080034c3
 8003270:	080034c3 	.word	0x080034c3
 8003274:	080034c3 	.word	0x080034c3
 8003278:	080034c3 	.word	0x080034c3
 800327c:	080034c3 	.word	0x080034c3
 8003280:	080032b7 	.word	0x080032b7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003284:	4b94      	ldr	r3, [pc, #592]	; (80034d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 0320 	and.w	r3, r3, #32
 800328c:	2b00      	cmp	r3, #0
 800328e:	d009      	beq.n	80032a4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003290:	4b91      	ldr	r3, [pc, #580]	; (80034d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	08db      	lsrs	r3, r3, #3
 8003296:	f003 0303 	and.w	r3, r3, #3
 800329a:	4a90      	ldr	r2, [pc, #576]	; (80034dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800329c:	fa22 f303 	lsr.w	r3, r2, r3
 80032a0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80032a2:	e111      	b.n	80034c8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80032a4:	4b8d      	ldr	r3, [pc, #564]	; (80034dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 80032a6:	61bb      	str	r3, [r7, #24]
    break;
 80032a8:	e10e      	b.n	80034c8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80032aa:	4b8d      	ldr	r3, [pc, #564]	; (80034e0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80032ac:	61bb      	str	r3, [r7, #24]
    break;
 80032ae:	e10b      	b.n	80034c8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80032b0:	4b8c      	ldr	r3, [pc, #560]	; (80034e4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80032b2:	61bb      	str	r3, [r7, #24]
    break;
 80032b4:	e108      	b.n	80034c8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80032b6:	4b88      	ldr	r3, [pc, #544]	; (80034d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ba:	f003 0303 	and.w	r3, r3, #3
 80032be:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80032c0:	4b85      	ldr	r3, [pc, #532]	; (80034d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032c4:	091b      	lsrs	r3, r3, #4
 80032c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032ca:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80032cc:	4b82      	ldr	r3, [pc, #520]	; (80034d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d0:	f003 0301 	and.w	r3, r3, #1
 80032d4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80032d6:	4b80      	ldr	r3, [pc, #512]	; (80034d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032da:	08db      	lsrs	r3, r3, #3
 80032dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80032e0:	68fa      	ldr	r2, [r7, #12]
 80032e2:	fb02 f303 	mul.w	r3, r2, r3
 80032e6:	ee07 3a90 	vmov	s15, r3
 80032ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032ee:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	f000 80e1 	beq.w	80034bc <HAL_RCC_GetSysClockFreq+0x2b8>
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	2b02      	cmp	r3, #2
 80032fe:	f000 8083 	beq.w	8003408 <HAL_RCC_GetSysClockFreq+0x204>
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	2b02      	cmp	r3, #2
 8003306:	f200 80a1 	bhi.w	800344c <HAL_RCC_GetSysClockFreq+0x248>
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d003      	beq.n	8003318 <HAL_RCC_GetSysClockFreq+0x114>
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	2b01      	cmp	r3, #1
 8003314:	d056      	beq.n	80033c4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003316:	e099      	b.n	800344c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003318:	4b6f      	ldr	r3, [pc, #444]	; (80034d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0320 	and.w	r3, r3, #32
 8003320:	2b00      	cmp	r3, #0
 8003322:	d02d      	beq.n	8003380 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003324:	4b6c      	ldr	r3, [pc, #432]	; (80034d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	08db      	lsrs	r3, r3, #3
 800332a:	f003 0303 	and.w	r3, r3, #3
 800332e:	4a6b      	ldr	r2, [pc, #428]	; (80034dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003330:	fa22 f303 	lsr.w	r3, r2, r3
 8003334:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	ee07 3a90 	vmov	s15, r3
 800333c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	ee07 3a90 	vmov	s15, r3
 8003346:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800334a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800334e:	4b62      	ldr	r3, [pc, #392]	; (80034d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003352:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003356:	ee07 3a90 	vmov	s15, r3
 800335a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800335e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003362:	eddf 5a61 	vldr	s11, [pc, #388]	; 80034e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003366:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800336a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800336e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003372:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003376:	ee67 7a27 	vmul.f32	s15, s14, s15
 800337a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800337e:	e087      	b.n	8003490 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	ee07 3a90 	vmov	s15, r3
 8003386:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800338a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80034ec <HAL_RCC_GetSysClockFreq+0x2e8>
 800338e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003392:	4b51      	ldr	r3, [pc, #324]	; (80034d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003396:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800339a:	ee07 3a90 	vmov	s15, r3
 800339e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80033a6:	eddf 5a50 	vldr	s11, [pc, #320]	; 80034e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80033aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80033b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80033c2:	e065      	b.n	8003490 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	ee07 3a90 	vmov	s15, r3
 80033ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033ce:	eddf 6a48 	vldr	s13, [pc, #288]	; 80034f0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80033d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033d6:	4b40      	ldr	r3, [pc, #256]	; (80034d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033de:	ee07 3a90 	vmov	s15, r3
 80033e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80033ea:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80034e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80033ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80033fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003402:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003406:	e043      	b.n	8003490 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	ee07 3a90 	vmov	s15, r3
 800340e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003412:	eddf 6a38 	vldr	s13, [pc, #224]	; 80034f4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003416:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800341a:	4b2f      	ldr	r3, [pc, #188]	; (80034d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800341c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003422:	ee07 3a90 	vmov	s15, r3
 8003426:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800342a:	ed97 6a02 	vldr	s12, [r7, #8]
 800342e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80034e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003432:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003436:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800343a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800343e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003442:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003446:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800344a:	e021      	b.n	8003490 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	ee07 3a90 	vmov	s15, r3
 8003452:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003456:	eddf 6a26 	vldr	s13, [pc, #152]	; 80034f0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800345a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800345e:	4b1e      	ldr	r3, [pc, #120]	; (80034d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003462:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003466:	ee07 3a90 	vmov	s15, r3
 800346a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800346e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003472:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80034e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003476:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800347a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800347e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003482:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003486:	ee67 7a27 	vmul.f32	s15, s14, s15
 800348a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800348e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003490:	4b11      	ldr	r3, [pc, #68]	; (80034d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003494:	0a5b      	lsrs	r3, r3, #9
 8003496:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800349a:	3301      	adds	r3, #1
 800349c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	ee07 3a90 	vmov	s15, r3
 80034a4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80034a8:	edd7 6a07 	vldr	s13, [r7, #28]
 80034ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80034b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80034b4:	ee17 3a90 	vmov	r3, s15
 80034b8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80034ba:	e005      	b.n	80034c8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80034bc:	2300      	movs	r3, #0
 80034be:	61bb      	str	r3, [r7, #24]
    break;
 80034c0:	e002      	b.n	80034c8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80034c2:	4b07      	ldr	r3, [pc, #28]	; (80034e0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80034c4:	61bb      	str	r3, [r7, #24]
    break;
 80034c6:	bf00      	nop
  }

  return sysclockfreq;
 80034c8:	69bb      	ldr	r3, [r7, #24]
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3724      	adds	r7, #36	; 0x24
 80034ce:	46bd      	mov	sp, r7
 80034d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d4:	4770      	bx	lr
 80034d6:	bf00      	nop
 80034d8:	58024400 	.word	0x58024400
 80034dc:	03d09000 	.word	0x03d09000
 80034e0:	003d0900 	.word	0x003d0900
 80034e4:	017d7840 	.word	0x017d7840
 80034e8:	46000000 	.word	0x46000000
 80034ec:	4c742400 	.word	0x4c742400
 80034f0:	4a742400 	.word	0x4a742400
 80034f4:	4bbebc20 	.word	0x4bbebc20

080034f8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b086      	sub	sp, #24
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003500:	2300      	movs	r3, #0
 8003502:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003504:	2300      	movs	r3, #0
 8003506:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003510:	2b00      	cmp	r3, #0
 8003512:	d03f      	beq.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003518:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800351c:	d02a      	beq.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800351e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003522:	d824      	bhi.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003524:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003528:	d018      	beq.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800352a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800352e:	d81e      	bhi.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003530:	2b00      	cmp	r3, #0
 8003532:	d003      	beq.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003534:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003538:	d007      	beq.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800353a:	e018      	b.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800353c:	4bab      	ldr	r3, [pc, #684]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800353e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003540:	4aaa      	ldr	r2, [pc, #680]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003542:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003546:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003548:	e015      	b.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	3304      	adds	r3, #4
 800354e:	2102      	movs	r1, #2
 8003550:	4618      	mov	r0, r3
 8003552:	f000 fecb 	bl	80042ec <RCCEx_PLL2_Config>
 8003556:	4603      	mov	r3, r0
 8003558:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800355a:	e00c      	b.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	3324      	adds	r3, #36	; 0x24
 8003560:	2102      	movs	r1, #2
 8003562:	4618      	mov	r0, r3
 8003564:	f000 ff74 	bl	8004450 <RCCEx_PLL3_Config>
 8003568:	4603      	mov	r3, r0
 800356a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800356c:	e003      	b.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	75fb      	strb	r3, [r7, #23]
      break;
 8003572:	e000      	b.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003574:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003576:	7dfb      	ldrb	r3, [r7, #23]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d109      	bne.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800357c:	4b9b      	ldr	r3, [pc, #620]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800357e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003580:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003588:	4998      	ldr	r1, [pc, #608]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800358a:	4313      	orrs	r3, r2
 800358c:	650b      	str	r3, [r1, #80]	; 0x50
 800358e:	e001      	b.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003590:	7dfb      	ldrb	r3, [r7, #23]
 8003592:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800359c:	2b00      	cmp	r3, #0
 800359e:	d03d      	beq.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035a4:	2b04      	cmp	r3, #4
 80035a6:	d826      	bhi.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80035a8:	a201      	add	r2, pc, #4	; (adr r2, 80035b0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80035aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035ae:	bf00      	nop
 80035b0:	080035c5 	.word	0x080035c5
 80035b4:	080035d3 	.word	0x080035d3
 80035b8:	080035e5 	.word	0x080035e5
 80035bc:	080035fd 	.word	0x080035fd
 80035c0:	080035fd 	.word	0x080035fd
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035c4:	4b89      	ldr	r3, [pc, #548]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80035c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c8:	4a88      	ldr	r2, [pc, #544]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80035ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035ce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80035d0:	e015      	b.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	3304      	adds	r3, #4
 80035d6:	2100      	movs	r1, #0
 80035d8:	4618      	mov	r0, r3
 80035da:	f000 fe87 	bl	80042ec <RCCEx_PLL2_Config>
 80035de:	4603      	mov	r3, r0
 80035e0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80035e2:	e00c      	b.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	3324      	adds	r3, #36	; 0x24
 80035e8:	2100      	movs	r1, #0
 80035ea:	4618      	mov	r0, r3
 80035ec:	f000 ff30 	bl	8004450 <RCCEx_PLL3_Config>
 80035f0:	4603      	mov	r3, r0
 80035f2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80035f4:	e003      	b.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	75fb      	strb	r3, [r7, #23]
      break;
 80035fa:	e000      	b.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80035fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035fe:	7dfb      	ldrb	r3, [r7, #23]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d109      	bne.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003604:	4b79      	ldr	r3, [pc, #484]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003606:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003608:	f023 0207 	bic.w	r2, r3, #7
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003610:	4976      	ldr	r1, [pc, #472]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003612:	4313      	orrs	r3, r2
 8003614:	650b      	str	r3, [r1, #80]	; 0x50
 8003616:	e001      	b.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003618:	7dfb      	ldrb	r3, [r7, #23]
 800361a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003624:	2b00      	cmp	r3, #0
 8003626:	d051      	beq.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800362e:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8003632:	d036      	beq.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003634:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8003638:	d830      	bhi.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800363a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800363e:	d032      	beq.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8003640:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003644:	d82a      	bhi.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8003646:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800364a:	d02e      	beq.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 800364c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003650:	d824      	bhi.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8003652:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003656:	d018      	beq.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8003658:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800365c:	d81e      	bhi.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800365e:	2b00      	cmp	r3, #0
 8003660:	d003      	beq.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x172>
 8003662:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003666:	d007      	beq.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8003668:	e018      	b.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800366a:	4b60      	ldr	r3, [pc, #384]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800366c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800366e:	4a5f      	ldr	r2, [pc, #380]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003670:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003674:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003676:	e019      	b.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	3304      	adds	r3, #4
 800367c:	2100      	movs	r1, #0
 800367e:	4618      	mov	r0, r3
 8003680:	f000 fe34 	bl	80042ec <RCCEx_PLL2_Config>
 8003684:	4603      	mov	r3, r0
 8003686:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003688:	e010      	b.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	3324      	adds	r3, #36	; 0x24
 800368e:	2100      	movs	r1, #0
 8003690:	4618      	mov	r0, r3
 8003692:	f000 fedd 	bl	8004450 <RCCEx_PLL3_Config>
 8003696:	4603      	mov	r3, r0
 8003698:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800369a:	e007      	b.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	75fb      	strb	r3, [r7, #23]
      break;
 80036a0:	e004      	b.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80036a2:	bf00      	nop
 80036a4:	e002      	b.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80036a6:	bf00      	nop
 80036a8:	e000      	b.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80036aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036ac:	7dfb      	ldrb	r3, [r7, #23]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d10a      	bne.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80036b2:	4b4e      	ldr	r3, [pc, #312]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80036b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036b6:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80036c0:	494a      	ldr	r1, [pc, #296]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80036c2:	4313      	orrs	r3, r2
 80036c4:	658b      	str	r3, [r1, #88]	; 0x58
 80036c6:	e001      	b.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036c8:	7dfb      	ldrb	r3, [r7, #23]
 80036ca:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d051      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80036de:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80036e2:	d036      	beq.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 80036e4:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80036e8:	d830      	bhi.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x254>
 80036ea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80036ee:	d032      	beq.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 80036f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80036f4:	d82a      	bhi.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x254>
 80036f6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80036fa:	d02e      	beq.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x262>
 80036fc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003700:	d824      	bhi.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x254>
 8003702:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003706:	d018      	beq.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x242>
 8003708:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800370c:	d81e      	bhi.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x254>
 800370e:	2b00      	cmp	r3, #0
 8003710:	d003      	beq.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x222>
 8003712:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003716:	d007      	beq.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8003718:	e018      	b.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800371a:	4b34      	ldr	r3, [pc, #208]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800371c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800371e:	4a33      	ldr	r2, [pc, #204]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003720:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003724:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003726:	e019      	b.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	3304      	adds	r3, #4
 800372c:	2100      	movs	r1, #0
 800372e:	4618      	mov	r0, r3
 8003730:	f000 fddc 	bl	80042ec <RCCEx_PLL2_Config>
 8003734:	4603      	mov	r3, r0
 8003736:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003738:	e010      	b.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	3324      	adds	r3, #36	; 0x24
 800373e:	2100      	movs	r1, #0
 8003740:	4618      	mov	r0, r3
 8003742:	f000 fe85 	bl	8004450 <RCCEx_PLL3_Config>
 8003746:	4603      	mov	r3, r0
 8003748:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800374a:	e007      	b.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	75fb      	strb	r3, [r7, #23]
      break;
 8003750:	e004      	b.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8003752:	bf00      	nop
 8003754:	e002      	b.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8003756:	bf00      	nop
 8003758:	e000      	b.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800375a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800375c:	7dfb      	ldrb	r3, [r7, #23]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d10a      	bne.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003762:	4b22      	ldr	r3, [pc, #136]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003764:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003766:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003770:	491e      	ldr	r1, [pc, #120]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003772:	4313      	orrs	r3, r2
 8003774:	658b      	str	r3, [r1, #88]	; 0x58
 8003776:	e001      	b.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003778:	7dfb      	ldrb	r3, [r7, #23]
 800377a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003784:	2b00      	cmp	r3, #0
 8003786:	d035      	beq.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800378c:	2b30      	cmp	r3, #48	; 0x30
 800378e:	d01c      	beq.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003790:	2b30      	cmp	r3, #48	; 0x30
 8003792:	d817      	bhi.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8003794:	2b20      	cmp	r3, #32
 8003796:	d00c      	beq.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8003798:	2b20      	cmp	r3, #32
 800379a:	d813      	bhi.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 800379c:	2b00      	cmp	r3, #0
 800379e:	d016      	beq.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 80037a0:	2b10      	cmp	r3, #16
 80037a2:	d10f      	bne.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037a4:	4b11      	ldr	r3, [pc, #68]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80037a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a8:	4a10      	ldr	r2, [pc, #64]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80037aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80037b0:	e00e      	b.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	3304      	adds	r3, #4
 80037b6:	2102      	movs	r1, #2
 80037b8:	4618      	mov	r0, r3
 80037ba:	f000 fd97 	bl	80042ec <RCCEx_PLL2_Config>
 80037be:	4603      	mov	r3, r0
 80037c0:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80037c2:	e005      	b.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	75fb      	strb	r3, [r7, #23]
      break;
 80037c8:	e002      	b.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 80037ca:	bf00      	nop
 80037cc:	e000      	b.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 80037ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037d0:	7dfb      	ldrb	r3, [r7, #23]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d10c      	bne.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80037d6:	4b05      	ldr	r3, [pc, #20]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80037d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037da:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037e2:	4902      	ldr	r1, [pc, #8]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80037e4:	4313      	orrs	r3, r2
 80037e6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80037e8:	e004      	b.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80037ea:	bf00      	nop
 80037ec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037f0:	7dfb      	ldrb	r3, [r7, #23]
 80037f2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d047      	beq.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003804:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003808:	d030      	beq.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x374>
 800380a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800380e:	d82a      	bhi.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8003810:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003814:	d02c      	beq.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8003816:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800381a:	d824      	bhi.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800381c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003820:	d018      	beq.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003822:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003826:	d81e      	bhi.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8003828:	2b00      	cmp	r3, #0
 800382a:	d003      	beq.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800382c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003830:	d007      	beq.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003832:	e018      	b.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003834:	4bac      	ldr	r3, [pc, #688]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003838:	4aab      	ldr	r2, [pc, #684]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800383a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800383e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003840:	e017      	b.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	3304      	adds	r3, #4
 8003846:	2100      	movs	r1, #0
 8003848:	4618      	mov	r0, r3
 800384a:	f000 fd4f 	bl	80042ec <RCCEx_PLL2_Config>
 800384e:	4603      	mov	r3, r0
 8003850:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003852:	e00e      	b.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	3324      	adds	r3, #36	; 0x24
 8003858:	2100      	movs	r1, #0
 800385a:	4618      	mov	r0, r3
 800385c:	f000 fdf8 	bl	8004450 <RCCEx_PLL3_Config>
 8003860:	4603      	mov	r3, r0
 8003862:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003864:	e005      	b.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	75fb      	strb	r3, [r7, #23]
      break;
 800386a:	e002      	b.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 800386c:	bf00      	nop
 800386e:	e000      	b.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8003870:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003872:	7dfb      	ldrb	r3, [r7, #23]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d109      	bne.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003878:	4b9b      	ldr	r3, [pc, #620]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800387a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800387c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003884:	4998      	ldr	r1, [pc, #608]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003886:	4313      	orrs	r3, r2
 8003888:	650b      	str	r3, [r1, #80]	; 0x50
 800388a:	e001      	b.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800388c:	7dfb      	ldrb	r3, [r7, #23]
 800388e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003898:	2b00      	cmp	r3, #0
 800389a:	d049      	beq.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038a4:	d02e      	beq.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 80038a6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038aa:	d828      	bhi.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x406>
 80038ac:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80038b0:	d02a      	beq.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x410>
 80038b2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80038b6:	d822      	bhi.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x406>
 80038b8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80038bc:	d026      	beq.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x414>
 80038be:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80038c2:	d81c      	bhi.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x406>
 80038c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80038c8:	d010      	beq.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 80038ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80038ce:	d816      	bhi.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x406>
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d01d      	beq.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x418>
 80038d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038d8:	d111      	bne.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	3304      	adds	r3, #4
 80038de:	2101      	movs	r1, #1
 80038e0:	4618      	mov	r0, r3
 80038e2:	f000 fd03 	bl	80042ec <RCCEx_PLL2_Config>
 80038e6:	4603      	mov	r3, r0
 80038e8:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80038ea:	e012      	b.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	3324      	adds	r3, #36	; 0x24
 80038f0:	2101      	movs	r1, #1
 80038f2:	4618      	mov	r0, r3
 80038f4:	f000 fdac 	bl	8004450 <RCCEx_PLL3_Config>
 80038f8:	4603      	mov	r3, r0
 80038fa:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80038fc:	e009      	b.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	75fb      	strb	r3, [r7, #23]
      break;
 8003902:	e006      	b.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8003904:	bf00      	nop
 8003906:	e004      	b.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8003908:	bf00      	nop
 800390a:	e002      	b.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800390c:	bf00      	nop
 800390e:	e000      	b.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8003910:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003912:	7dfb      	ldrb	r3, [r7, #23]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d109      	bne.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003918:	4b73      	ldr	r3, [pc, #460]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800391a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800391c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003924:	4970      	ldr	r1, [pc, #448]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003926:	4313      	orrs	r3, r2
 8003928:	650b      	str	r3, [r1, #80]	; 0x50
 800392a:	e001      	b.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800392c:	7dfb      	ldrb	r3, [r7, #23]
 800392e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003938:	2b00      	cmp	r3, #0
 800393a:	d04b      	beq.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003942:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003946:	d02e      	beq.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8003948:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800394c:	d828      	bhi.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800394e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003952:	d02a      	beq.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8003954:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003958:	d822      	bhi.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800395a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800395e:	d026      	beq.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8003960:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003964:	d81c      	bhi.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003966:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800396a:	d010      	beq.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x496>
 800396c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003970:	d816      	bhi.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003972:	2b00      	cmp	r3, #0
 8003974:	d01d      	beq.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8003976:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800397a:	d111      	bne.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	3304      	adds	r3, #4
 8003980:	2101      	movs	r1, #1
 8003982:	4618      	mov	r0, r3
 8003984:	f000 fcb2 	bl	80042ec <RCCEx_PLL2_Config>
 8003988:	4603      	mov	r3, r0
 800398a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800398c:	e012      	b.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	3324      	adds	r3, #36	; 0x24
 8003992:	2101      	movs	r1, #1
 8003994:	4618      	mov	r0, r3
 8003996:	f000 fd5b 	bl	8004450 <RCCEx_PLL3_Config>
 800399a:	4603      	mov	r3, r0
 800399c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800399e:	e009      	b.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	75fb      	strb	r3, [r7, #23]
      break;
 80039a4:	e006      	b.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80039a6:	bf00      	nop
 80039a8:	e004      	b.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80039aa:	bf00      	nop
 80039ac:	e002      	b.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80039ae:	bf00      	nop
 80039b0:	e000      	b.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80039b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039b4:	7dfb      	ldrb	r3, [r7, #23]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d10a      	bne.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80039ba:	4b4b      	ldr	r3, [pc, #300]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80039bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039be:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80039c8:	4947      	ldr	r1, [pc, #284]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80039ca:	4313      	orrs	r3, r2
 80039cc:	658b      	str	r3, [r1, #88]	; 0x58
 80039ce:	e001      	b.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039d0:	7dfb      	ldrb	r3, [r7, #23]
 80039d2:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d02f      	beq.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80039e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039e8:	d00e      	beq.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x510>
 80039ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039ee:	d814      	bhi.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x522>
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d015      	beq.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x528>
 80039f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80039f8:	d10f      	bne.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039fa:	4b3b      	ldr	r3, [pc, #236]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80039fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039fe:	4a3a      	ldr	r2, [pc, #232]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003a00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a04:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003a06:	e00c      	b.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	3304      	adds	r3, #4
 8003a0c:	2101      	movs	r1, #1
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f000 fc6c 	bl	80042ec <RCCEx_PLL2_Config>
 8003a14:	4603      	mov	r3, r0
 8003a16:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003a18:	e003      	b.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	75fb      	strb	r3, [r7, #23]
      break;
 8003a1e:	e000      	b.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8003a20:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a22:	7dfb      	ldrb	r3, [r7, #23]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d109      	bne.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003a28:	4b2f      	ldr	r3, [pc, #188]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003a2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a2c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a34:	492c      	ldr	r1, [pc, #176]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003a36:	4313      	orrs	r3, r2
 8003a38:	650b      	str	r3, [r1, #80]	; 0x50
 8003a3a:	e001      	b.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a3c:	7dfb      	ldrb	r3, [r7, #23]
 8003a3e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d032      	beq.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a50:	2b03      	cmp	r3, #3
 8003a52:	d81b      	bhi.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x594>
 8003a54:	a201      	add	r2, pc, #4	; (adr r2, 8003a5c <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8003a56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a5a:	bf00      	nop
 8003a5c:	08003a93 	.word	0x08003a93
 8003a60:	08003a6d 	.word	0x08003a6d
 8003a64:	08003a7b 	.word	0x08003a7b
 8003a68:	08003a93 	.word	0x08003a93
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a6c:	4b1e      	ldr	r3, [pc, #120]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a70:	4a1d      	ldr	r2, [pc, #116]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003a72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a76:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003a78:	e00c      	b.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	3304      	adds	r3, #4
 8003a7e:	2102      	movs	r1, #2
 8003a80:	4618      	mov	r0, r3
 8003a82:	f000 fc33 	bl	80042ec <RCCEx_PLL2_Config>
 8003a86:	4603      	mov	r3, r0
 8003a88:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003a8a:	e003      	b.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	75fb      	strb	r3, [r7, #23]
      break;
 8003a90:	e000      	b.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8003a92:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a94:	7dfb      	ldrb	r3, [r7, #23]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d109      	bne.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003a9a:	4b13      	ldr	r3, [pc, #76]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a9e:	f023 0203 	bic.w	r2, r3, #3
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aa6:	4910      	ldr	r1, [pc, #64]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003aac:	e001      	b.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aae:	7dfb      	ldrb	r3, [r7, #23]
 8003ab0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	f000 808a 	beq.w	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ac0:	4b0a      	ldr	r3, [pc, #40]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a09      	ldr	r2, [pc, #36]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003ac6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003aca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003acc:	f7fd f896 	bl	8000bfc <HAL_GetTick>
 8003ad0:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ad2:	e00d      	b.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ad4:	f7fd f892 	bl	8000bfc <HAL_GetTick>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	2b64      	cmp	r3, #100	; 0x64
 8003ae0:	d906      	bls.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	75fb      	strb	r3, [r7, #23]
        break;
 8003ae6:	e009      	b.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x604>
 8003ae8:	58024400 	.word	0x58024400
 8003aec:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003af0:	4bb9      	ldr	r3, [pc, #740]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d0eb      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 8003afc:	7dfb      	ldrb	r3, [r7, #23]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d166      	bne.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003b02:	4bb6      	ldr	r3, [pc, #728]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003b04:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003b0c:	4053      	eors	r3, r2
 8003b0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d013      	beq.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b16:	4bb1      	ldr	r3, [pc, #708]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003b18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b1e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b20:	4bae      	ldr	r3, [pc, #696]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003b22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b24:	4aad      	ldr	r2, [pc, #692]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003b26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b2a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b2c:	4bab      	ldr	r3, [pc, #684]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003b2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b30:	4aaa      	ldr	r2, [pc, #680]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003b32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b36:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003b38:	4aa8      	ldr	r2, [pc, #672]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003b44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b48:	d115      	bne.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b4a:	f7fd f857 	bl	8000bfc <HAL_GetTick>
 8003b4e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b50:	e00b      	b.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b52:	f7fd f853 	bl	8000bfc <HAL_GetTick>
 8003b56:	4602      	mov	r2, r0
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	1ad3      	subs	r3, r2, r3
 8003b5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d902      	bls.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 8003b64:	2303      	movs	r3, #3
 8003b66:	75fb      	strb	r3, [r7, #23]
            break;
 8003b68:	e005      	b.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b6a:	4b9c      	ldr	r3, [pc, #624]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b6e:	f003 0302 	and.w	r3, r3, #2
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d0ed      	beq.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 8003b76:	7dfb      	ldrb	r3, [r7, #23]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d126      	bne.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003b82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b86:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b8a:	d10d      	bne.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 8003b8c:	4b93      	ldr	r3, [pc, #588]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003b8e:	691b      	ldr	r3, [r3, #16]
 8003b90:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003b9a:	0919      	lsrs	r1, r3, #4
 8003b9c:	4b90      	ldr	r3, [pc, #576]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8003b9e:	400b      	ands	r3, r1
 8003ba0:	498e      	ldr	r1, [pc, #568]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	610b      	str	r3, [r1, #16]
 8003ba6:	e005      	b.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 8003ba8:	4b8c      	ldr	r3, [pc, #560]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003baa:	691b      	ldr	r3, [r3, #16]
 8003bac:	4a8b      	ldr	r2, [pc, #556]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003bae:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003bb2:	6113      	str	r3, [r2, #16]
 8003bb4:	4b89      	ldr	r3, [pc, #548]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003bb6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003bbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bc2:	4986      	ldr	r1, [pc, #536]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	670b      	str	r3, [r1, #112]	; 0x70
 8003bc8:	e004      	b.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003bca:	7dfb      	ldrb	r3, [r7, #23]
 8003bcc:	75bb      	strb	r3, [r7, #22]
 8003bce:	e001      	b.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bd0:	7dfb      	ldrb	r3, [r7, #23]
 8003bd2:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 0301 	and.w	r3, r3, #1
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d07e      	beq.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003be4:	2b28      	cmp	r3, #40	; 0x28
 8003be6:	d867      	bhi.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 8003be8:	a201      	add	r2, pc, #4	; (adr r2, 8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 8003bea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bee:	bf00      	nop
 8003bf0:	08003cbf 	.word	0x08003cbf
 8003bf4:	08003cb9 	.word	0x08003cb9
 8003bf8:	08003cb9 	.word	0x08003cb9
 8003bfc:	08003cb9 	.word	0x08003cb9
 8003c00:	08003cb9 	.word	0x08003cb9
 8003c04:	08003cb9 	.word	0x08003cb9
 8003c08:	08003cb9 	.word	0x08003cb9
 8003c0c:	08003cb9 	.word	0x08003cb9
 8003c10:	08003c95 	.word	0x08003c95
 8003c14:	08003cb9 	.word	0x08003cb9
 8003c18:	08003cb9 	.word	0x08003cb9
 8003c1c:	08003cb9 	.word	0x08003cb9
 8003c20:	08003cb9 	.word	0x08003cb9
 8003c24:	08003cb9 	.word	0x08003cb9
 8003c28:	08003cb9 	.word	0x08003cb9
 8003c2c:	08003cb9 	.word	0x08003cb9
 8003c30:	08003ca7 	.word	0x08003ca7
 8003c34:	08003cb9 	.word	0x08003cb9
 8003c38:	08003cb9 	.word	0x08003cb9
 8003c3c:	08003cb9 	.word	0x08003cb9
 8003c40:	08003cb9 	.word	0x08003cb9
 8003c44:	08003cb9 	.word	0x08003cb9
 8003c48:	08003cb9 	.word	0x08003cb9
 8003c4c:	08003cb9 	.word	0x08003cb9
 8003c50:	08003cbf 	.word	0x08003cbf
 8003c54:	08003cb9 	.word	0x08003cb9
 8003c58:	08003cb9 	.word	0x08003cb9
 8003c5c:	08003cb9 	.word	0x08003cb9
 8003c60:	08003cb9 	.word	0x08003cb9
 8003c64:	08003cb9 	.word	0x08003cb9
 8003c68:	08003cb9 	.word	0x08003cb9
 8003c6c:	08003cb9 	.word	0x08003cb9
 8003c70:	08003cbf 	.word	0x08003cbf
 8003c74:	08003cb9 	.word	0x08003cb9
 8003c78:	08003cb9 	.word	0x08003cb9
 8003c7c:	08003cb9 	.word	0x08003cb9
 8003c80:	08003cb9 	.word	0x08003cb9
 8003c84:	08003cb9 	.word	0x08003cb9
 8003c88:	08003cb9 	.word	0x08003cb9
 8003c8c:	08003cb9 	.word	0x08003cb9
 8003c90:	08003cbf 	.word	0x08003cbf
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	3304      	adds	r3, #4
 8003c98:	2101      	movs	r1, #1
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f000 fb26 	bl	80042ec <RCCEx_PLL2_Config>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003ca4:	e00c      	b.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	3324      	adds	r3, #36	; 0x24
 8003caa:	2101      	movs	r1, #1
 8003cac:	4618      	mov	r0, r3
 8003cae:	f000 fbcf 	bl	8004450 <RCCEx_PLL3_Config>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003cb6:	e003      	b.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	75fb      	strb	r3, [r7, #23]
      break;
 8003cbc:	e000      	b.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 8003cbe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cc0:	7dfb      	ldrb	r3, [r7, #23]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d109      	bne.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003cc6:	4b45      	ldr	r3, [pc, #276]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003cc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cca:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cd2:	4942      	ldr	r1, [pc, #264]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	654b      	str	r3, [r1, #84]	; 0x54
 8003cd8:	e001      	b.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cda:	7dfb      	ldrb	r3, [r7, #23]
 8003cdc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 0302 	and.w	r3, r3, #2
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d037      	beq.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cee:	2b05      	cmp	r3, #5
 8003cf0:	d820      	bhi.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8003cf2:	a201      	add	r2, pc, #4	; (adr r2, 8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8003cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cf8:	08003d3b 	.word	0x08003d3b
 8003cfc:	08003d11 	.word	0x08003d11
 8003d00:	08003d23 	.word	0x08003d23
 8003d04:	08003d3b 	.word	0x08003d3b
 8003d08:	08003d3b 	.word	0x08003d3b
 8003d0c:	08003d3b 	.word	0x08003d3b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	3304      	adds	r3, #4
 8003d14:	2101      	movs	r1, #1
 8003d16:	4618      	mov	r0, r3
 8003d18:	f000 fae8 	bl	80042ec <RCCEx_PLL2_Config>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003d20:	e00c      	b.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	3324      	adds	r3, #36	; 0x24
 8003d26:	2101      	movs	r1, #1
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f000 fb91 	bl	8004450 <RCCEx_PLL3_Config>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003d32:	e003      	b.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	75fb      	strb	r3, [r7, #23]
      break;
 8003d38:	e000      	b.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 8003d3a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d3c:	7dfb      	ldrb	r3, [r7, #23]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d109      	bne.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003d42:	4b26      	ldr	r3, [pc, #152]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003d44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d46:	f023 0207 	bic.w	r2, r3, #7
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d4e:	4923      	ldr	r1, [pc, #140]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003d50:	4313      	orrs	r3, r2
 8003d52:	654b      	str	r3, [r1, #84]	; 0x54
 8003d54:	e001      	b.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d56:	7dfb      	ldrb	r3, [r7, #23]
 8003d58:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 0304 	and.w	r3, r3, #4
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d040      	beq.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d6c:	2b05      	cmp	r3, #5
 8003d6e:	d821      	bhi.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8003d70:	a201      	add	r2, pc, #4	; (adr r2, 8003d78 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8003d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d76:	bf00      	nop
 8003d78:	08003dbb 	.word	0x08003dbb
 8003d7c:	08003d91 	.word	0x08003d91
 8003d80:	08003da3 	.word	0x08003da3
 8003d84:	08003dbb 	.word	0x08003dbb
 8003d88:	08003dbb 	.word	0x08003dbb
 8003d8c:	08003dbb 	.word	0x08003dbb
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	3304      	adds	r3, #4
 8003d94:	2101      	movs	r1, #1
 8003d96:	4618      	mov	r0, r3
 8003d98:	f000 faa8 	bl	80042ec <RCCEx_PLL2_Config>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003da0:	e00c      	b.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	3324      	adds	r3, #36	; 0x24
 8003da6:	2101      	movs	r1, #1
 8003da8:	4618      	mov	r0, r3
 8003daa:	f000 fb51 	bl	8004450 <RCCEx_PLL3_Config>
 8003dae:	4603      	mov	r3, r0
 8003db0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003db2:	e003      	b.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	75fb      	strb	r3, [r7, #23]
      break;
 8003db8:	e000      	b.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 8003dba:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003dbc:	7dfb      	ldrb	r3, [r7, #23]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d110      	bne.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003dc2:	4b06      	ldr	r3, [pc, #24]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dc6:	f023 0207 	bic.w	r2, r3, #7
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003dd0:	4902      	ldr	r1, [pc, #8]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	658b      	str	r3, [r1, #88]	; 0x58
 8003dd6:	e007      	b.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8003dd8:	58024800 	.word	0x58024800
 8003ddc:	58024400 	.word	0x58024400
 8003de0:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003de4:	7dfb      	ldrb	r3, [r7, #23]
 8003de6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 0320 	and.w	r3, r3, #32
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d04b      	beq.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dfa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003dfe:	d02e      	beq.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x966>
 8003e00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e04:	d828      	bhi.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8003e06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e0a:	d02a      	beq.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8003e0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e10:	d822      	bhi.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8003e12:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003e16:	d026      	beq.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8003e18:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003e1c:	d81c      	bhi.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8003e1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e22:	d010      	beq.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8003e24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e28:	d816      	bhi.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d01d      	beq.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x972>
 8003e2e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e32:	d111      	bne.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	3304      	adds	r3, #4
 8003e38:	2100      	movs	r1, #0
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f000 fa56 	bl	80042ec <RCCEx_PLL2_Config>
 8003e40:	4603      	mov	r3, r0
 8003e42:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003e44:	e012      	b.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	3324      	adds	r3, #36	; 0x24
 8003e4a:	2102      	movs	r1, #2
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f000 faff 	bl	8004450 <RCCEx_PLL3_Config>
 8003e52:	4603      	mov	r3, r0
 8003e54:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003e56:	e009      	b.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	75fb      	strb	r3, [r7, #23]
      break;
 8003e5c:	e006      	b.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8003e5e:	bf00      	nop
 8003e60:	e004      	b.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8003e62:	bf00      	nop
 8003e64:	e002      	b.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8003e66:	bf00      	nop
 8003e68:	e000      	b.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8003e6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e6c:	7dfb      	ldrb	r3, [r7, #23]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d10a      	bne.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e72:	4bb2      	ldr	r3, [pc, #712]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003e74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e76:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e80:	49ae      	ldr	r1, [pc, #696]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003e82:	4313      	orrs	r3, r2
 8003e84:	654b      	str	r3, [r1, #84]	; 0x54
 8003e86:	e001      	b.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e88:	7dfb      	ldrb	r3, [r7, #23]
 8003e8a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d04b      	beq.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e9e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003ea2:	d02e      	beq.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8003ea4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003ea8:	d828      	bhi.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8003eaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003eae:	d02a      	beq.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8003eb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003eb4:	d822      	bhi.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8003eb6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003eba:	d026      	beq.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8003ebc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ec0:	d81c      	bhi.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8003ec2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ec6:	d010      	beq.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8003ec8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ecc:	d816      	bhi.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d01d      	beq.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8003ed2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ed6:	d111      	bne.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	3304      	adds	r3, #4
 8003edc:	2100      	movs	r1, #0
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f000 fa04 	bl	80042ec <RCCEx_PLL2_Config>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003ee8:	e012      	b.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	3324      	adds	r3, #36	; 0x24
 8003eee:	2102      	movs	r1, #2
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f000 faad 	bl	8004450 <RCCEx_PLL3_Config>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003efa:	e009      	b.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	75fb      	strb	r3, [r7, #23]
      break;
 8003f00:	e006      	b.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8003f02:	bf00      	nop
 8003f04:	e004      	b.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8003f06:	bf00      	nop
 8003f08:	e002      	b.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8003f0a:	bf00      	nop
 8003f0c:	e000      	b.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8003f0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f10:	7dfb      	ldrb	r3, [r7, #23]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d10a      	bne.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003f16:	4b89      	ldr	r3, [pc, #548]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003f18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f1a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f24:	4985      	ldr	r1, [pc, #532]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003f26:	4313      	orrs	r3, r2
 8003f28:	658b      	str	r3, [r1, #88]	; 0x58
 8003f2a:	e001      	b.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f2c:	7dfb      	ldrb	r3, [r7, #23]
 8003f2e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d04b      	beq.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f42:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003f46:	d02e      	beq.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8003f48:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003f4c:	d828      	bhi.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8003f4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f52:	d02a      	beq.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8003f54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f58:	d822      	bhi.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8003f5a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003f5e:	d026      	beq.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8003f60:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003f64:	d81c      	bhi.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8003f66:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f6a:	d010      	beq.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0xa96>
 8003f6c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f70:	d816      	bhi.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d01d      	beq.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0xaba>
 8003f76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f7a:	d111      	bne.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	3304      	adds	r3, #4
 8003f80:	2100      	movs	r1, #0
 8003f82:	4618      	mov	r0, r3
 8003f84:	f000 f9b2 	bl	80042ec <RCCEx_PLL2_Config>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003f8c:	e012      	b.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	3324      	adds	r3, #36	; 0x24
 8003f92:	2102      	movs	r1, #2
 8003f94:	4618      	mov	r0, r3
 8003f96:	f000 fa5b 	bl	8004450 <RCCEx_PLL3_Config>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003f9e:	e009      	b.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	75fb      	strb	r3, [r7, #23]
      break;
 8003fa4:	e006      	b.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8003fa6:	bf00      	nop
 8003fa8:	e004      	b.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8003faa:	bf00      	nop
 8003fac:	e002      	b.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8003fae:	bf00      	nop
 8003fb0:	e000      	b.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8003fb2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fb4:	7dfb      	ldrb	r3, [r7, #23]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d10a      	bne.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003fba:	4b60      	ldr	r3, [pc, #384]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003fbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fbe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003fc8:	495c      	ldr	r1, [pc, #368]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	658b      	str	r3, [r1, #88]	; 0x58
 8003fce:	e001      	b.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fd0:	7dfb      	ldrb	r3, [r7, #23]
 8003fd2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 0308 	and.w	r3, r3, #8
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d018      	beq.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fe4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fe8:	d10a      	bne.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	3324      	adds	r3, #36	; 0x24
 8003fee:	2102      	movs	r1, #2
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f000 fa2d 	bl	8004450 <RCCEx_PLL3_Config>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d001      	beq.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8004000:	4b4e      	ldr	r3, [pc, #312]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004002:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004004:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800400c:	494b      	ldr	r1, [pc, #300]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800400e:	4313      	orrs	r3, r2
 8004010:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 0310 	and.w	r3, r3, #16
 800401a:	2b00      	cmp	r3, #0
 800401c:	d01a      	beq.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004024:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004028:	d10a      	bne.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	3324      	adds	r3, #36	; 0x24
 800402e:	2102      	movs	r1, #2
 8004030:	4618      	mov	r0, r3
 8004032:	f000 fa0d 	bl	8004450 <RCCEx_PLL3_Config>
 8004036:	4603      	mov	r3, r0
 8004038:	2b00      	cmp	r3, #0
 800403a:	d001      	beq.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004040:	4b3e      	ldr	r3, [pc, #248]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004042:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004044:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800404e:	493b      	ldr	r1, [pc, #236]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004050:	4313      	orrs	r3, r2
 8004052:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800405c:	2b00      	cmp	r3, #0
 800405e:	d034      	beq.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004066:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800406a:	d01d      	beq.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800406c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004070:	d817      	bhi.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8004072:	2b00      	cmp	r3, #0
 8004074:	d003      	beq.n	800407e <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8004076:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800407a:	d009      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800407c:	e011      	b.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	3304      	adds	r3, #4
 8004082:	2100      	movs	r1, #0
 8004084:	4618      	mov	r0, r3
 8004086:	f000 f931 	bl	80042ec <RCCEx_PLL2_Config>
 800408a:	4603      	mov	r3, r0
 800408c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800408e:	e00c      	b.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	3324      	adds	r3, #36	; 0x24
 8004094:	2102      	movs	r1, #2
 8004096:	4618      	mov	r0, r3
 8004098:	f000 f9da 	bl	8004450 <RCCEx_PLL3_Config>
 800409c:	4603      	mov	r3, r0
 800409e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80040a0:	e003      	b.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	75fb      	strb	r3, [r7, #23]
      break;
 80040a6:	e000      	b.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 80040a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040aa:	7dfb      	ldrb	r3, [r7, #23]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d10a      	bne.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80040b0:	4b22      	ldr	r3, [pc, #136]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80040b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040b4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80040be:	491f      	ldr	r1, [pc, #124]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80040c0:	4313      	orrs	r3, r2
 80040c2:	658b      	str	r3, [r1, #88]	; 0x58
 80040c4:	e001      	b.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040c6:	7dfb      	ldrb	r3, [r7, #23]
 80040c8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d036      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040dc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80040e0:	d01c      	beq.n	800411c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80040e2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80040e6:	d816      	bhi.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80040e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040ec:	d003      	beq.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80040ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80040f2:	d007      	beq.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 80040f4:	e00f      	b.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040f6:	4b11      	ldr	r3, [pc, #68]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80040f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040fa:	4a10      	ldr	r2, [pc, #64]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80040fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004100:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004102:	e00c      	b.n	800411e <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	3324      	adds	r3, #36	; 0x24
 8004108:	2101      	movs	r1, #1
 800410a:	4618      	mov	r0, r3
 800410c:	f000 f9a0 	bl	8004450 <RCCEx_PLL3_Config>
 8004110:	4603      	mov	r3, r0
 8004112:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004114:	e003      	b.n	800411e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	75fb      	strb	r3, [r7, #23]
      break;
 800411a:	e000      	b.n	800411e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 800411c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800411e:	7dfb      	ldrb	r3, [r7, #23]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d10d      	bne.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004124:	4b05      	ldr	r3, [pc, #20]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004126:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004128:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004132:	4902      	ldr	r1, [pc, #8]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004134:	4313      	orrs	r3, r2
 8004136:	654b      	str	r3, [r1, #84]	; 0x54
 8004138:	e004      	b.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 800413a:	bf00      	nop
 800413c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004140:	7dfb      	ldrb	r3, [r7, #23]
 8004142:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800414c:	2b00      	cmp	r3, #0
 800414e:	d029      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004154:	2b00      	cmp	r3, #0
 8004156:	d003      	beq.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004158:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800415c:	d007      	beq.n	800416e <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800415e:	e00f      	b.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004160:	4b61      	ldr	r3, [pc, #388]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004164:	4a60      	ldr	r2, [pc, #384]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004166:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800416a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800416c:	e00b      	b.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	3304      	adds	r3, #4
 8004172:	2102      	movs	r1, #2
 8004174:	4618      	mov	r0, r3
 8004176:	f000 f8b9 	bl	80042ec <RCCEx_PLL2_Config>
 800417a:	4603      	mov	r3, r0
 800417c:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800417e:	e002      	b.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	75fb      	strb	r3, [r7, #23]
      break;
 8004184:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004186:	7dfb      	ldrb	r3, [r7, #23]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d109      	bne.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800418c:	4b56      	ldr	r3, [pc, #344]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800418e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004190:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004198:	4953      	ldr	r1, [pc, #332]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800419a:	4313      	orrs	r3, r2
 800419c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800419e:	e001      	b.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041a0:	7dfb      	ldrb	r3, [r7, #23]
 80041a2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d00a      	beq.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	3324      	adds	r3, #36	; 0x24
 80041b4:	2102      	movs	r1, #2
 80041b6:	4618      	mov	r0, r3
 80041b8:	f000 f94a 	bl	8004450 <RCCEx_PLL3_Config>
 80041bc:	4603      	mov	r3, r0
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d001      	beq.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d030      	beq.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041da:	d017      	beq.n	800420c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80041dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041e0:	d811      	bhi.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 80041e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041e6:	d013      	beq.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 80041e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041ec:	d80b      	bhi.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d010      	beq.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 80041f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041f6:	d106      	bne.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041f8:	4b3b      	ldr	r3, [pc, #236]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80041fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041fc:	4a3a      	ldr	r2, [pc, #232]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80041fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004202:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004204:	e007      	b.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	75fb      	strb	r3, [r7, #23]
      break;
 800420a:	e004      	b.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 800420c:	bf00      	nop
 800420e:	e002      	b.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8004210:	bf00      	nop
 8004212:	e000      	b.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8004214:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004216:	7dfb      	ldrb	r3, [r7, #23]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d109      	bne.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800421c:	4b32      	ldr	r3, [pc, #200]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800421e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004220:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004228:	492f      	ldr	r1, [pc, #188]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800422a:	4313      	orrs	r3, r2
 800422c:	654b      	str	r3, [r1, #84]	; 0x54
 800422e:	e001      	b.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004230:	7dfb      	ldrb	r3, [r7, #23]
 8004232:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800423c:	2b00      	cmp	r3, #0
 800423e:	d008      	beq.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004240:	4b29      	ldr	r3, [pc, #164]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004242:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004244:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800424c:	4926      	ldr	r1, [pc, #152]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800424e:	4313      	orrs	r3, r2
 8004250:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800425a:	2b00      	cmp	r3, #0
 800425c:	d008      	beq.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800425e:	4b22      	ldr	r3, [pc, #136]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004260:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004262:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800426a:	491f      	ldr	r1, [pc, #124]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800426c:	4313      	orrs	r3, r2
 800426e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004278:	2b00      	cmp	r3, #0
 800427a:	d00d      	beq.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800427c:	4b1a      	ldr	r3, [pc, #104]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800427e:	691b      	ldr	r3, [r3, #16]
 8004280:	4a19      	ldr	r2, [pc, #100]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004282:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004286:	6113      	str	r3, [r2, #16]
 8004288:	4b17      	ldr	r3, [pc, #92]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800428a:	691a      	ldr	r2, [r3, #16]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004292:	4915      	ldr	r1, [pc, #84]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004294:	4313      	orrs	r3, r2
 8004296:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	2b00      	cmp	r3, #0
 800429e:	da08      	bge.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80042a0:	4b11      	ldr	r3, [pc, #68]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80042a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042a4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042ac:	490e      	ldr	r1, [pc, #56]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80042ae:	4313      	orrs	r3, r2
 80042b0:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d009      	beq.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80042be:	4b0a      	ldr	r3, [pc, #40]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80042c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042c2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042cc:	4906      	ldr	r1, [pc, #24]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80042ce:	4313      	orrs	r3, r2
 80042d0:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80042d2:	7dbb      	ldrb	r3, [r7, #22]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d101      	bne.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 80042d8:	2300      	movs	r3, #0
 80042da:	e000      	b.n	80042de <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3718      	adds	r7, #24
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}
 80042e6:	bf00      	nop
 80042e8:	58024400 	.word	0x58024400

080042ec <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b084      	sub	sp, #16
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
 80042f4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80042f6:	2300      	movs	r3, #0
 80042f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80042fa:	4b53      	ldr	r3, [pc, #332]	; (8004448 <RCCEx_PLL2_Config+0x15c>)
 80042fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042fe:	f003 0303 	and.w	r3, r3, #3
 8004302:	2b03      	cmp	r3, #3
 8004304:	d101      	bne.n	800430a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	e099      	b.n	800443e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800430a:	4b4f      	ldr	r3, [pc, #316]	; (8004448 <RCCEx_PLL2_Config+0x15c>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a4e      	ldr	r2, [pc, #312]	; (8004448 <RCCEx_PLL2_Config+0x15c>)
 8004310:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004314:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004316:	f7fc fc71 	bl	8000bfc <HAL_GetTick>
 800431a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800431c:	e008      	b.n	8004330 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800431e:	f7fc fc6d 	bl	8000bfc <HAL_GetTick>
 8004322:	4602      	mov	r2, r0
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	1ad3      	subs	r3, r2, r3
 8004328:	2b02      	cmp	r3, #2
 800432a:	d901      	bls.n	8004330 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800432c:	2303      	movs	r3, #3
 800432e:	e086      	b.n	800443e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004330:	4b45      	ldr	r3, [pc, #276]	; (8004448 <RCCEx_PLL2_Config+0x15c>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004338:	2b00      	cmp	r3, #0
 800433a:	d1f0      	bne.n	800431e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800433c:	4b42      	ldr	r3, [pc, #264]	; (8004448 <RCCEx_PLL2_Config+0x15c>)
 800433e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004340:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	031b      	lsls	r3, r3, #12
 800434a:	493f      	ldr	r1, [pc, #252]	; (8004448 <RCCEx_PLL2_Config+0x15c>)
 800434c:	4313      	orrs	r3, r2
 800434e:	628b      	str	r3, [r1, #40]	; 0x28
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	3b01      	subs	r3, #1
 8004356:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	3b01      	subs	r3, #1
 8004360:	025b      	lsls	r3, r3, #9
 8004362:	b29b      	uxth	r3, r3
 8004364:	431a      	orrs	r2, r3
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	68db      	ldr	r3, [r3, #12]
 800436a:	3b01      	subs	r3, #1
 800436c:	041b      	lsls	r3, r3, #16
 800436e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004372:	431a      	orrs	r2, r3
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	691b      	ldr	r3, [r3, #16]
 8004378:	3b01      	subs	r3, #1
 800437a:	061b      	lsls	r3, r3, #24
 800437c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004380:	4931      	ldr	r1, [pc, #196]	; (8004448 <RCCEx_PLL2_Config+0x15c>)
 8004382:	4313      	orrs	r3, r2
 8004384:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004386:	4b30      	ldr	r3, [pc, #192]	; (8004448 <RCCEx_PLL2_Config+0x15c>)
 8004388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800438a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	695b      	ldr	r3, [r3, #20]
 8004392:	492d      	ldr	r1, [pc, #180]	; (8004448 <RCCEx_PLL2_Config+0x15c>)
 8004394:	4313      	orrs	r3, r2
 8004396:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004398:	4b2b      	ldr	r3, [pc, #172]	; (8004448 <RCCEx_PLL2_Config+0x15c>)
 800439a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800439c:	f023 0220 	bic.w	r2, r3, #32
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	699b      	ldr	r3, [r3, #24]
 80043a4:	4928      	ldr	r1, [pc, #160]	; (8004448 <RCCEx_PLL2_Config+0x15c>)
 80043a6:	4313      	orrs	r3, r2
 80043a8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80043aa:	4b27      	ldr	r3, [pc, #156]	; (8004448 <RCCEx_PLL2_Config+0x15c>)
 80043ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ae:	4a26      	ldr	r2, [pc, #152]	; (8004448 <RCCEx_PLL2_Config+0x15c>)
 80043b0:	f023 0310 	bic.w	r3, r3, #16
 80043b4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80043b6:	4b24      	ldr	r3, [pc, #144]	; (8004448 <RCCEx_PLL2_Config+0x15c>)
 80043b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043ba:	4b24      	ldr	r3, [pc, #144]	; (800444c <RCCEx_PLL2_Config+0x160>)
 80043bc:	4013      	ands	r3, r2
 80043be:	687a      	ldr	r2, [r7, #4]
 80043c0:	69d2      	ldr	r2, [r2, #28]
 80043c2:	00d2      	lsls	r2, r2, #3
 80043c4:	4920      	ldr	r1, [pc, #128]	; (8004448 <RCCEx_PLL2_Config+0x15c>)
 80043c6:	4313      	orrs	r3, r2
 80043c8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80043ca:	4b1f      	ldr	r3, [pc, #124]	; (8004448 <RCCEx_PLL2_Config+0x15c>)
 80043cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ce:	4a1e      	ldr	r2, [pc, #120]	; (8004448 <RCCEx_PLL2_Config+0x15c>)
 80043d0:	f043 0310 	orr.w	r3, r3, #16
 80043d4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d106      	bne.n	80043ea <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80043dc:	4b1a      	ldr	r3, [pc, #104]	; (8004448 <RCCEx_PLL2_Config+0x15c>)
 80043de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043e0:	4a19      	ldr	r2, [pc, #100]	; (8004448 <RCCEx_PLL2_Config+0x15c>)
 80043e2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80043e6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80043e8:	e00f      	b.n	800440a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d106      	bne.n	80043fe <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80043f0:	4b15      	ldr	r3, [pc, #84]	; (8004448 <RCCEx_PLL2_Config+0x15c>)
 80043f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f4:	4a14      	ldr	r2, [pc, #80]	; (8004448 <RCCEx_PLL2_Config+0x15c>)
 80043f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80043fa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80043fc:	e005      	b.n	800440a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80043fe:	4b12      	ldr	r3, [pc, #72]	; (8004448 <RCCEx_PLL2_Config+0x15c>)
 8004400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004402:	4a11      	ldr	r2, [pc, #68]	; (8004448 <RCCEx_PLL2_Config+0x15c>)
 8004404:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004408:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800440a:	4b0f      	ldr	r3, [pc, #60]	; (8004448 <RCCEx_PLL2_Config+0x15c>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a0e      	ldr	r2, [pc, #56]	; (8004448 <RCCEx_PLL2_Config+0x15c>)
 8004410:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004414:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004416:	f7fc fbf1 	bl	8000bfc <HAL_GetTick>
 800441a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800441c:	e008      	b.n	8004430 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800441e:	f7fc fbed 	bl	8000bfc <HAL_GetTick>
 8004422:	4602      	mov	r2, r0
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	1ad3      	subs	r3, r2, r3
 8004428:	2b02      	cmp	r3, #2
 800442a:	d901      	bls.n	8004430 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800442c:	2303      	movs	r3, #3
 800442e:	e006      	b.n	800443e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004430:	4b05      	ldr	r3, [pc, #20]	; (8004448 <RCCEx_PLL2_Config+0x15c>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004438:	2b00      	cmp	r3, #0
 800443a:	d0f0      	beq.n	800441e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800443c:	7bfb      	ldrb	r3, [r7, #15]
}
 800443e:	4618      	mov	r0, r3
 8004440:	3710      	adds	r7, #16
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
 8004446:	bf00      	nop
 8004448:	58024400 	.word	0x58024400
 800444c:	ffff0007 	.word	0xffff0007

08004450 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b084      	sub	sp, #16
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
 8004458:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800445a:	2300      	movs	r3, #0
 800445c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800445e:	4b53      	ldr	r3, [pc, #332]	; (80045ac <RCCEx_PLL3_Config+0x15c>)
 8004460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004462:	f003 0303 	and.w	r3, r3, #3
 8004466:	2b03      	cmp	r3, #3
 8004468:	d101      	bne.n	800446e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e099      	b.n	80045a2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800446e:	4b4f      	ldr	r3, [pc, #316]	; (80045ac <RCCEx_PLL3_Config+0x15c>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a4e      	ldr	r2, [pc, #312]	; (80045ac <RCCEx_PLL3_Config+0x15c>)
 8004474:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004478:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800447a:	f7fc fbbf 	bl	8000bfc <HAL_GetTick>
 800447e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004480:	e008      	b.n	8004494 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004482:	f7fc fbbb 	bl	8000bfc <HAL_GetTick>
 8004486:	4602      	mov	r2, r0
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	1ad3      	subs	r3, r2, r3
 800448c:	2b02      	cmp	r3, #2
 800448e:	d901      	bls.n	8004494 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004490:	2303      	movs	r3, #3
 8004492:	e086      	b.n	80045a2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004494:	4b45      	ldr	r3, [pc, #276]	; (80045ac <RCCEx_PLL3_Config+0x15c>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800449c:	2b00      	cmp	r3, #0
 800449e:	d1f0      	bne.n	8004482 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80044a0:	4b42      	ldr	r3, [pc, #264]	; (80045ac <RCCEx_PLL3_Config+0x15c>)
 80044a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044a4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	051b      	lsls	r3, r3, #20
 80044ae:	493f      	ldr	r1, [pc, #252]	; (80045ac <RCCEx_PLL3_Config+0x15c>)
 80044b0:	4313      	orrs	r3, r2
 80044b2:	628b      	str	r3, [r1, #40]	; 0x28
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	3b01      	subs	r3, #1
 80044ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	3b01      	subs	r3, #1
 80044c4:	025b      	lsls	r3, r3, #9
 80044c6:	b29b      	uxth	r3, r3
 80044c8:	431a      	orrs	r2, r3
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	68db      	ldr	r3, [r3, #12]
 80044ce:	3b01      	subs	r3, #1
 80044d0:	041b      	lsls	r3, r3, #16
 80044d2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80044d6:	431a      	orrs	r2, r3
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	691b      	ldr	r3, [r3, #16]
 80044dc:	3b01      	subs	r3, #1
 80044de:	061b      	lsls	r3, r3, #24
 80044e0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80044e4:	4931      	ldr	r1, [pc, #196]	; (80045ac <RCCEx_PLL3_Config+0x15c>)
 80044e6:	4313      	orrs	r3, r2
 80044e8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80044ea:	4b30      	ldr	r3, [pc, #192]	; (80045ac <RCCEx_PLL3_Config+0x15c>)
 80044ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ee:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	695b      	ldr	r3, [r3, #20]
 80044f6:	492d      	ldr	r1, [pc, #180]	; (80045ac <RCCEx_PLL3_Config+0x15c>)
 80044f8:	4313      	orrs	r3, r2
 80044fa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80044fc:	4b2b      	ldr	r3, [pc, #172]	; (80045ac <RCCEx_PLL3_Config+0x15c>)
 80044fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004500:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	699b      	ldr	r3, [r3, #24]
 8004508:	4928      	ldr	r1, [pc, #160]	; (80045ac <RCCEx_PLL3_Config+0x15c>)
 800450a:	4313      	orrs	r3, r2
 800450c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800450e:	4b27      	ldr	r3, [pc, #156]	; (80045ac <RCCEx_PLL3_Config+0x15c>)
 8004510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004512:	4a26      	ldr	r2, [pc, #152]	; (80045ac <RCCEx_PLL3_Config+0x15c>)
 8004514:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004518:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800451a:	4b24      	ldr	r3, [pc, #144]	; (80045ac <RCCEx_PLL3_Config+0x15c>)
 800451c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800451e:	4b24      	ldr	r3, [pc, #144]	; (80045b0 <RCCEx_PLL3_Config+0x160>)
 8004520:	4013      	ands	r3, r2
 8004522:	687a      	ldr	r2, [r7, #4]
 8004524:	69d2      	ldr	r2, [r2, #28]
 8004526:	00d2      	lsls	r2, r2, #3
 8004528:	4920      	ldr	r1, [pc, #128]	; (80045ac <RCCEx_PLL3_Config+0x15c>)
 800452a:	4313      	orrs	r3, r2
 800452c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800452e:	4b1f      	ldr	r3, [pc, #124]	; (80045ac <RCCEx_PLL3_Config+0x15c>)
 8004530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004532:	4a1e      	ldr	r2, [pc, #120]	; (80045ac <RCCEx_PLL3_Config+0x15c>)
 8004534:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004538:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d106      	bne.n	800454e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004540:	4b1a      	ldr	r3, [pc, #104]	; (80045ac <RCCEx_PLL3_Config+0x15c>)
 8004542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004544:	4a19      	ldr	r2, [pc, #100]	; (80045ac <RCCEx_PLL3_Config+0x15c>)
 8004546:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800454a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800454c:	e00f      	b.n	800456e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	2b01      	cmp	r3, #1
 8004552:	d106      	bne.n	8004562 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004554:	4b15      	ldr	r3, [pc, #84]	; (80045ac <RCCEx_PLL3_Config+0x15c>)
 8004556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004558:	4a14      	ldr	r2, [pc, #80]	; (80045ac <RCCEx_PLL3_Config+0x15c>)
 800455a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800455e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004560:	e005      	b.n	800456e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004562:	4b12      	ldr	r3, [pc, #72]	; (80045ac <RCCEx_PLL3_Config+0x15c>)
 8004564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004566:	4a11      	ldr	r2, [pc, #68]	; (80045ac <RCCEx_PLL3_Config+0x15c>)
 8004568:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800456c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800456e:	4b0f      	ldr	r3, [pc, #60]	; (80045ac <RCCEx_PLL3_Config+0x15c>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a0e      	ldr	r2, [pc, #56]	; (80045ac <RCCEx_PLL3_Config+0x15c>)
 8004574:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004578:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800457a:	f7fc fb3f 	bl	8000bfc <HAL_GetTick>
 800457e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004580:	e008      	b.n	8004594 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004582:	f7fc fb3b 	bl	8000bfc <HAL_GetTick>
 8004586:	4602      	mov	r2, r0
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	1ad3      	subs	r3, r2, r3
 800458c:	2b02      	cmp	r3, #2
 800458e:	d901      	bls.n	8004594 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004590:	2303      	movs	r3, #3
 8004592:	e006      	b.n	80045a2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004594:	4b05      	ldr	r3, [pc, #20]	; (80045ac <RCCEx_PLL3_Config+0x15c>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800459c:	2b00      	cmp	r3, #0
 800459e:	d0f0      	beq.n	8004582 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80045a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3710      	adds	r7, #16
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}
 80045aa:	bf00      	nop
 80045ac:	58024400 	.word	0x58024400
 80045b0:	ffff0007 	.word	0xffff0007

080045b4 <__libc_init_array>:
 80045b4:	b570      	push	{r4, r5, r6, lr}
 80045b6:	4d0d      	ldr	r5, [pc, #52]	; (80045ec <__libc_init_array+0x38>)
 80045b8:	4c0d      	ldr	r4, [pc, #52]	; (80045f0 <__libc_init_array+0x3c>)
 80045ba:	1b64      	subs	r4, r4, r5
 80045bc:	10a4      	asrs	r4, r4, #2
 80045be:	2600      	movs	r6, #0
 80045c0:	42a6      	cmp	r6, r4
 80045c2:	d109      	bne.n	80045d8 <__libc_init_array+0x24>
 80045c4:	4d0b      	ldr	r5, [pc, #44]	; (80045f4 <__libc_init_array+0x40>)
 80045c6:	4c0c      	ldr	r4, [pc, #48]	; (80045f8 <__libc_init_array+0x44>)
 80045c8:	f000 f82e 	bl	8004628 <_init>
 80045cc:	1b64      	subs	r4, r4, r5
 80045ce:	10a4      	asrs	r4, r4, #2
 80045d0:	2600      	movs	r6, #0
 80045d2:	42a6      	cmp	r6, r4
 80045d4:	d105      	bne.n	80045e2 <__libc_init_array+0x2e>
 80045d6:	bd70      	pop	{r4, r5, r6, pc}
 80045d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80045dc:	4798      	blx	r3
 80045de:	3601      	adds	r6, #1
 80045e0:	e7ee      	b.n	80045c0 <__libc_init_array+0xc>
 80045e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80045e6:	4798      	blx	r3
 80045e8:	3601      	adds	r6, #1
 80045ea:	e7f2      	b.n	80045d2 <__libc_init_array+0x1e>
 80045ec:	080046ac 	.word	0x080046ac
 80045f0:	080046ac 	.word	0x080046ac
 80045f4:	080046ac 	.word	0x080046ac
 80045f8:	080046b0 	.word	0x080046b0

080045fc <memcpy>:
 80045fc:	440a      	add	r2, r1
 80045fe:	4291      	cmp	r1, r2
 8004600:	f100 33ff 	add.w	r3, r0, #4294967295
 8004604:	d100      	bne.n	8004608 <memcpy+0xc>
 8004606:	4770      	bx	lr
 8004608:	b510      	push	{r4, lr}
 800460a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800460e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004612:	4291      	cmp	r1, r2
 8004614:	d1f9      	bne.n	800460a <memcpy+0xe>
 8004616:	bd10      	pop	{r4, pc}

08004618 <memset>:
 8004618:	4402      	add	r2, r0
 800461a:	4603      	mov	r3, r0
 800461c:	4293      	cmp	r3, r2
 800461e:	d100      	bne.n	8004622 <memset+0xa>
 8004620:	4770      	bx	lr
 8004622:	f803 1b01 	strb.w	r1, [r3], #1
 8004626:	e7f9      	b.n	800461c <memset+0x4>

08004628 <_init>:
 8004628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800462a:	bf00      	nop
 800462c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800462e:	bc08      	pop	{r3}
 8004630:	469e      	mov	lr, r3
 8004632:	4770      	bx	lr

08004634 <_fini>:
 8004634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004636:	bf00      	nop
 8004638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800463a:	bc08      	pop	{r3}
 800463c:	469e      	mov	lr, r3
 800463e:	4770      	bx	lr
