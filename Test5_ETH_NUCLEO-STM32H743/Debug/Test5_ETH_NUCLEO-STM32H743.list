
Test5_ETH_NUCLEO-STM32H743.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054bc  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08005754  08005754  00015754  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800578c  0800578c  0001578c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005794  08005794  00015794  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08005798  08005798  00015798  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  0800579c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000004d4  24000010  080057ac  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240004e4  080057ac  000204e4  2**0
                  ALLOC
  9 .lwip_sec     00000200  30040000  30040000  00030000  2**0
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001a6cb  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00002cce  00000000  00000000  0003a709  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00000d40  00000000  00000000  0003d3d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00000c78  00000000  00000000  0003e118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00035a8c  00000000  00000000  0003ed90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000fbe5  00000000  00000000  0007481c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00155adc  00000000  00000000  00084401  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  001d9edd  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00003760  00000000  00000000  001d9f30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800573c 	.word	0x0800573c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	0800573c 	.word	0x0800573c

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b084      	sub	sp, #16
 80005d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80005d6:	f000 fadf 	bl	8000b98 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80005da:	4b3d      	ldr	r3, [pc, #244]	; (80006d0 <main+0x100>)
 80005dc:	695b      	ldr	r3, [r3, #20]
 80005de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d11b      	bne.n	800061e <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005e6:	f3bf 8f4f 	dsb	sy
}
 80005ea:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005ec:	f3bf 8f6f 	isb	sy
}
 80005f0:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80005f2:	4b37      	ldr	r3, [pc, #220]	; (80006d0 <main+0x100>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80005fa:	f3bf 8f4f 	dsb	sy
}
 80005fe:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000600:	f3bf 8f6f 	isb	sy
}
 8000604:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000606:	4b32      	ldr	r3, [pc, #200]	; (80006d0 <main+0x100>)
 8000608:	695b      	ldr	r3, [r3, #20]
 800060a:	4a31      	ldr	r2, [pc, #196]	; (80006d0 <main+0x100>)
 800060c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000610:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000612:	f3bf 8f4f 	dsb	sy
}
 8000616:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000618:	f3bf 8f6f 	isb	sy
}
 800061c:	e000      	b.n	8000620 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800061e:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000620:	4b2b      	ldr	r3, [pc, #172]	; (80006d0 <main+0x100>)
 8000622:	695b      	ldr	r3, [r3, #20]
 8000624:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000628:	2b00      	cmp	r3, #0
 800062a:	d138      	bne.n	800069e <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800062c:	4b28      	ldr	r3, [pc, #160]	; (80006d0 <main+0x100>)
 800062e:	2200      	movs	r2, #0
 8000630:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000634:	f3bf 8f4f 	dsb	sy
}
 8000638:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800063a:	4b25      	ldr	r3, [pc, #148]	; (80006d0 <main+0x100>)
 800063c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000640:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	0b5b      	lsrs	r3, r3, #13
 8000646:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800064a:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	08db      	lsrs	r3, r3, #3
 8000650:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000654:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000656:	68bb      	ldr	r3, [r7, #8]
 8000658:	015a      	lsls	r2, r3, #5
 800065a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800065e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000660:	687a      	ldr	r2, [r7, #4]
 8000662:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000664:	491a      	ldr	r1, [pc, #104]	; (80006d0 <main+0x100>)
 8000666:	4313      	orrs	r3, r2
 8000668:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	1e5a      	subs	r2, r3, #1
 8000670:	607a      	str	r2, [r7, #4]
 8000672:	2b00      	cmp	r3, #0
 8000674:	d1ef      	bne.n	8000656 <main+0x86>
    } while(sets-- != 0U);
 8000676:	68bb      	ldr	r3, [r7, #8]
 8000678:	1e5a      	subs	r2, r3, #1
 800067a:	60ba      	str	r2, [r7, #8]
 800067c:	2b00      	cmp	r3, #0
 800067e:	d1e5      	bne.n	800064c <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000680:	f3bf 8f4f 	dsb	sy
}
 8000684:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000686:	4b12      	ldr	r3, [pc, #72]	; (80006d0 <main+0x100>)
 8000688:	695b      	ldr	r3, [r3, #20]
 800068a:	4a11      	ldr	r2, [pc, #68]	; (80006d0 <main+0x100>)
 800068c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000690:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000692:	f3bf 8f4f 	dsb	sy
}
 8000696:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000698:	f3bf 8f6f 	isb	sy
}
 800069c:	e000      	b.n	80006a0 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800069e:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006a0:	f000 fca6 	bl	8000ff0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006a4:	f000 f81a 	bl	80006dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006a8:	f000 f910 	bl	80008cc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80006ac:	f000 f890 	bl	80007d0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80006b0:	f000 f8da 	bl	8000868 <MX_USB_OTG_FS_PCD_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	   if (Timer_sys[1] == 0)
 80006b4:	4b07      	ldr	r3, [pc, #28]	; (80006d4 <main+0x104>)
 80006b6:	885b      	ldrh	r3, [r3, #2]
 80006b8:	b29b      	uxth	r3, r3
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d1fa      	bne.n	80006b4 <main+0xe4>
	  {
		 Timer_sys[1] = 200;
 80006be:	4b05      	ldr	r3, [pc, #20]	; (80006d4 <main+0x104>)
 80006c0:	22c8      	movs	r2, #200	; 0xc8
 80006c2:	805a      	strh	r2, [r3, #2]
		 HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 80006c4:	2102      	movs	r1, #2
 80006c6:	4804      	ldr	r0, [pc, #16]	; (80006d8 <main+0x108>)
 80006c8:	f001 f883 	bl	80017d2 <HAL_GPIO_TogglePin>
	   if (Timer_sys[1] == 0)
 80006cc:	e7f2      	b.n	80006b4 <main+0xe4>
 80006ce:	bf00      	nop
 80006d0:	e000ed00 	.word	0xe000ed00
 80006d4:	240004cc 	.word	0x240004cc
 80006d8:	58021000 	.word	0x58021000

080006dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b09c      	sub	sp, #112	; 0x70
 80006e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006e6:	224c      	movs	r2, #76	; 0x4c
 80006e8:	2100      	movs	r1, #0
 80006ea:	4618      	mov	r0, r3
 80006ec:	f005 f81e 	bl	800572c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f0:	1d3b      	adds	r3, r7, #4
 80006f2:	2220      	movs	r2, #32
 80006f4:	2100      	movs	r1, #0
 80006f6:	4618      	mov	r0, r3
 80006f8:	f005 f818 	bl	800572c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80006fc:	2002      	movs	r0, #2
 80006fe:	f001 f9cb 	bl	8001a98 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000702:	2300      	movs	r3, #0
 8000704:	603b      	str	r3, [r7, #0]
 8000706:	4b30      	ldr	r3, [pc, #192]	; (80007c8 <SystemClock_Config+0xec>)
 8000708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800070a:	4a2f      	ldr	r2, [pc, #188]	; (80007c8 <SystemClock_Config+0xec>)
 800070c:	f023 0301 	bic.w	r3, r3, #1
 8000710:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000712:	4b2d      	ldr	r3, [pc, #180]	; (80007c8 <SystemClock_Config+0xec>)
 8000714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000716:	f003 0301 	and.w	r3, r3, #1
 800071a:	603b      	str	r3, [r7, #0]
 800071c:	4b2b      	ldr	r3, [pc, #172]	; (80007cc <SystemClock_Config+0xf0>)
 800071e:	699b      	ldr	r3, [r3, #24]
 8000720:	4a2a      	ldr	r2, [pc, #168]	; (80007cc <SystemClock_Config+0xf0>)
 8000722:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000726:	6193      	str	r3, [r2, #24]
 8000728:	4b28      	ldr	r3, [pc, #160]	; (80007cc <SystemClock_Config+0xf0>)
 800072a:	699b      	ldr	r3, [r3, #24]
 800072c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000730:	603b      	str	r3, [r7, #0]
 8000732:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000734:	bf00      	nop
 8000736:	4b25      	ldr	r3, [pc, #148]	; (80007cc <SystemClock_Config+0xf0>)
 8000738:	699b      	ldr	r3, [r3, #24]
 800073a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800073e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000742:	d1f8      	bne.n	8000736 <SystemClock_Config+0x5a>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000744:	2301      	movs	r3, #1
 8000746:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000748:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800074c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800074e:	2302      	movs	r3, #2
 8000750:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000752:	2302      	movs	r3, #2
 8000754:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000756:	2301      	movs	r3, #1
 8000758:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 100;
 800075a:	2364      	movs	r3, #100	; 0x64
 800075c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800075e:	2302      	movs	r3, #2
 8000760:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 13;
 8000762:	230d      	movs	r3, #13
 8000764:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000766:	2302      	movs	r3, #2
 8000768:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800076a:	230c      	movs	r3, #12
 800076c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800076e:	2300      	movs	r3, #0
 8000770:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000772:	2300      	movs	r3, #0
 8000774:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000776:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800077a:	4618      	mov	r0, r3
 800077c:	f001 f9d6 	bl	8001b2c <HAL_RCC_OscConfig>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000786:	f000 fa51 	bl	8000c2c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800078a:	233f      	movs	r3, #63	; 0x3f
 800078c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800078e:	2303      	movs	r3, #3
 8000790:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000792:	2300      	movs	r3, #0
 8000794:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000796:	2308      	movs	r3, #8
 8000798:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800079a:	2340      	movs	r3, #64	; 0x40
 800079c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800079e:	2340      	movs	r3, #64	; 0x40
 80007a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80007a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007a6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80007a8:	2340      	movs	r3, #64	; 0x40
 80007aa:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007ac:	1d3b      	adds	r3, r7, #4
 80007ae:	2102      	movs	r1, #2
 80007b0:	4618      	mov	r0, r3
 80007b2:	f001 fdcb 	bl	800234c <HAL_RCC_ClockConfig>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 80007bc:	f000 fa36 	bl	8000c2c <Error_Handler>
  }
}
 80007c0:	bf00      	nop
 80007c2:	3770      	adds	r7, #112	; 0x70
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	58000400 	.word	0x58000400
 80007cc:	58024800 	.word	0x58024800

080007d0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007d4:	4b22      	ldr	r3, [pc, #136]	; (8000860 <MX_USART3_UART_Init+0x90>)
 80007d6:	4a23      	ldr	r2, [pc, #140]	; (8000864 <MX_USART3_UART_Init+0x94>)
 80007d8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007da:	4b21      	ldr	r3, [pc, #132]	; (8000860 <MX_USART3_UART_Init+0x90>)
 80007dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007e0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007e2:	4b1f      	ldr	r3, [pc, #124]	; (8000860 <MX_USART3_UART_Init+0x90>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007e8:	4b1d      	ldr	r3, [pc, #116]	; (8000860 <MX_USART3_UART_Init+0x90>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007ee:	4b1c      	ldr	r3, [pc, #112]	; (8000860 <MX_USART3_UART_Init+0x90>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007f4:	4b1a      	ldr	r3, [pc, #104]	; (8000860 <MX_USART3_UART_Init+0x90>)
 80007f6:	220c      	movs	r2, #12
 80007f8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007fa:	4b19      	ldr	r3, [pc, #100]	; (8000860 <MX_USART3_UART_Init+0x90>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000800:	4b17      	ldr	r3, [pc, #92]	; (8000860 <MX_USART3_UART_Init+0x90>)
 8000802:	2200      	movs	r2, #0
 8000804:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000806:	4b16      	ldr	r3, [pc, #88]	; (8000860 <MX_USART3_UART_Init+0x90>)
 8000808:	2200      	movs	r2, #0
 800080a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800080c:	4b14      	ldr	r3, [pc, #80]	; (8000860 <MX_USART3_UART_Init+0x90>)
 800080e:	2200      	movs	r2, #0
 8000810:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000812:	4b13      	ldr	r3, [pc, #76]	; (8000860 <MX_USART3_UART_Init+0x90>)
 8000814:	2200      	movs	r2, #0
 8000816:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000818:	4811      	ldr	r0, [pc, #68]	; (8000860 <MX_USART3_UART_Init+0x90>)
 800081a:	f003 fc85 	bl	8004128 <HAL_UART_Init>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000824:	f000 fa02 	bl	8000c2c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000828:	2100      	movs	r1, #0
 800082a:	480d      	ldr	r0, [pc, #52]	; (8000860 <MX_USART3_UART_Init+0x90>)
 800082c:	f004 fbd2 	bl	8004fd4 <HAL_UARTEx_SetTxFifoThreshold>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000836:	f000 f9f9 	bl	8000c2c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800083a:	2100      	movs	r1, #0
 800083c:	4808      	ldr	r0, [pc, #32]	; (8000860 <MX_USART3_UART_Init+0x90>)
 800083e:	f004 fc07 	bl	8005050 <HAL_UARTEx_SetRxFifoThreshold>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000848:	f000 f9f0 	bl	8000c2c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800084c:	4804      	ldr	r0, [pc, #16]	; (8000860 <MX_USART3_UART_Init+0x90>)
 800084e:	f004 fb88 	bl	8004f62 <HAL_UARTEx_DisableFifoMode>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000858:	f000 f9e8 	bl	8000c2c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800085c:	bf00      	nop
 800085e:	bd80      	pop	{r7, pc}
 8000860:	2400002c 	.word	0x2400002c
 8000864:	40004800 	.word	0x40004800

08000868 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800086c:	4b15      	ldr	r3, [pc, #84]	; (80008c4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800086e:	4a16      	ldr	r2, [pc, #88]	; (80008c8 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000870:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000872:	4b14      	ldr	r3, [pc, #80]	; (80008c4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000874:	2209      	movs	r2, #9
 8000876:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000878:	4b12      	ldr	r3, [pc, #72]	; (80008c4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800087a:	2202      	movs	r2, #2
 800087c:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800087e:	4b11      	ldr	r3, [pc, #68]	; (80008c4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000880:	2200      	movs	r2, #0
 8000882:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000884:	4b0f      	ldr	r3, [pc, #60]	; (80008c4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000886:	2202      	movs	r2, #2
 8000888:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800088a:	4b0e      	ldr	r3, [pc, #56]	; (80008c4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800088c:	2201      	movs	r2, #1
 800088e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000890:	4b0c      	ldr	r3, [pc, #48]	; (80008c4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000892:	2200      	movs	r2, #0
 8000894:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000896:	4b0b      	ldr	r3, [pc, #44]	; (80008c4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000898:	2200      	movs	r2, #0
 800089a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800089c:	4b09      	ldr	r3, [pc, #36]	; (80008c4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800089e:	2201      	movs	r2, #1
 80008a0:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80008a2:	4b08      	ldr	r3, [pc, #32]	; (80008c4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008a4:	2201      	movs	r2, #1
 80008a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80008a8:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80008ae:	4805      	ldr	r0, [pc, #20]	; (80008c4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008b0:	f000 ffa9 	bl	8001806 <HAL_PCD_Init>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 80008ba:	f000 f9b7 	bl	8000c2c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80008be:	bf00      	nop
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	240000c0 	.word	0x240000c0
 80008c8:	40080000 	.word	0x40080000

080008cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b08c      	sub	sp, #48	; 0x30
 80008d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d2:	f107 031c 	add.w	r3, r7, #28
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]
 80008da:	605a      	str	r2, [r3, #4]
 80008dc:	609a      	str	r2, [r3, #8]
 80008de:	60da      	str	r2, [r3, #12]
 80008e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008e2:	4b81      	ldr	r3, [pc, #516]	; (8000ae8 <MX_GPIO_Init+0x21c>)
 80008e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008e8:	4a7f      	ldr	r2, [pc, #508]	; (8000ae8 <MX_GPIO_Init+0x21c>)
 80008ea:	f043 0304 	orr.w	r3, r3, #4
 80008ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008f2:	4b7d      	ldr	r3, [pc, #500]	; (8000ae8 <MX_GPIO_Init+0x21c>)
 80008f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008f8:	f003 0304 	and.w	r3, r3, #4
 80008fc:	61bb      	str	r3, [r7, #24]
 80008fe:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000900:	4b79      	ldr	r3, [pc, #484]	; (8000ae8 <MX_GPIO_Init+0x21c>)
 8000902:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000906:	4a78      	ldr	r2, [pc, #480]	; (8000ae8 <MX_GPIO_Init+0x21c>)
 8000908:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800090c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000910:	4b75      	ldr	r3, [pc, #468]	; (8000ae8 <MX_GPIO_Init+0x21c>)
 8000912:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800091a:	617b      	str	r3, [r7, #20]
 800091c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800091e:	4b72      	ldr	r3, [pc, #456]	; (8000ae8 <MX_GPIO_Init+0x21c>)
 8000920:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000924:	4a70      	ldr	r2, [pc, #448]	; (8000ae8 <MX_GPIO_Init+0x21c>)
 8000926:	f043 0301 	orr.w	r3, r3, #1
 800092a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800092e:	4b6e      	ldr	r3, [pc, #440]	; (8000ae8 <MX_GPIO_Init+0x21c>)
 8000930:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000934:	f003 0301 	and.w	r3, r3, #1
 8000938:	613b      	str	r3, [r7, #16]
 800093a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800093c:	4b6a      	ldr	r3, [pc, #424]	; (8000ae8 <MX_GPIO_Init+0x21c>)
 800093e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000942:	4a69      	ldr	r2, [pc, #420]	; (8000ae8 <MX_GPIO_Init+0x21c>)
 8000944:	f043 0302 	orr.w	r3, r3, #2
 8000948:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800094c:	4b66      	ldr	r3, [pc, #408]	; (8000ae8 <MX_GPIO_Init+0x21c>)
 800094e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000952:	f003 0302 	and.w	r3, r3, #2
 8000956:	60fb      	str	r3, [r7, #12]
 8000958:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800095a:	4b63      	ldr	r3, [pc, #396]	; (8000ae8 <MX_GPIO_Init+0x21c>)
 800095c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000960:	4a61      	ldr	r2, [pc, #388]	; (8000ae8 <MX_GPIO_Init+0x21c>)
 8000962:	f043 0308 	orr.w	r3, r3, #8
 8000966:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800096a:	4b5f      	ldr	r3, [pc, #380]	; (8000ae8 <MX_GPIO_Init+0x21c>)
 800096c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000970:	f003 0308 	and.w	r3, r3, #8
 8000974:	60bb      	str	r3, [r7, #8]
 8000976:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000978:	4b5b      	ldr	r3, [pc, #364]	; (8000ae8 <MX_GPIO_Init+0x21c>)
 800097a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800097e:	4a5a      	ldr	r2, [pc, #360]	; (8000ae8 <MX_GPIO_Init+0x21c>)
 8000980:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000984:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000988:	4b57      	ldr	r3, [pc, #348]	; (8000ae8 <MX_GPIO_Init+0x21c>)
 800098a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800098e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000992:	607b      	str	r3, [r7, #4]
 8000994:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000996:	4b54      	ldr	r3, [pc, #336]	; (8000ae8 <MX_GPIO_Init+0x21c>)
 8000998:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800099c:	4a52      	ldr	r2, [pc, #328]	; (8000ae8 <MX_GPIO_Init+0x21c>)
 800099e:	f043 0310 	orr.w	r3, r3, #16
 80009a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009a6:	4b50      	ldr	r3, [pc, #320]	; (8000ae8 <MX_GPIO_Init+0x21c>)
 80009a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009ac:	f003 0310 	and.w	r3, r3, #16
 80009b0:	603b      	str	r3, [r7, #0]
 80009b2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 80009b4:	2200      	movs	r2, #0
 80009b6:	f244 0101 	movw	r1, #16385	; 0x4001
 80009ba:	484c      	ldr	r0, [pc, #304]	; (8000aec <MX_GPIO_Init+0x220>)
 80009bc:	f000 fef0 	bl	80017a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80009c0:	2200      	movs	r2, #0
 80009c2:	2140      	movs	r1, #64	; 0x40
 80009c4:	484a      	ldr	r0, [pc, #296]	; (8000af0 <MX_GPIO_Init+0x224>)
 80009c6:	f000 feeb 	bl	80017a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009ca:	2200      	movs	r2, #0
 80009cc:	2102      	movs	r1, #2
 80009ce:	4849      	ldr	r0, [pc, #292]	; (8000af4 <MX_GPIO_Init+0x228>)
 80009d0:	f000 fee6 	bl	80017a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80009d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009da:	4b47      	ldr	r3, [pc, #284]	; (8000af8 <MX_GPIO_Init+0x22c>)
 80009dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009de:	2300      	movs	r3, #0
 80009e0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80009e2:	f107 031c 	add.w	r3, r7, #28
 80009e6:	4619      	mov	r1, r3
 80009e8:	4844      	ldr	r0, [pc, #272]	; (8000afc <MX_GPIO_Init+0x230>)
 80009ea:	f000 fd29 	bl	8001440 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80009ee:	2332      	movs	r3, #50	; 0x32
 80009f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f2:	2302      	movs	r3, #2
 80009f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f6:	2300      	movs	r3, #0
 80009f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009fa:	2303      	movs	r3, #3
 80009fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009fe:	230b      	movs	r3, #11
 8000a00:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a02:	f107 031c 	add.w	r3, r7, #28
 8000a06:	4619      	mov	r1, r3
 8000a08:	483c      	ldr	r0, [pc, #240]	; (8000afc <MX_GPIO_Init+0x230>)
 8000a0a:	f000 fd19 	bl	8001440 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000a0e:	2386      	movs	r3, #134	; 0x86
 8000a10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a12:	2302      	movs	r3, #2
 8000a14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a1a:	2303      	movs	r3, #3
 8000a1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a1e:	230b      	movs	r3, #11
 8000a20:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a22:	f107 031c 	add.w	r3, r7, #28
 8000a26:	4619      	mov	r1, r3
 8000a28:	4835      	ldr	r0, [pc, #212]	; (8000b00 <MX_GPIO_Init+0x234>)
 8000a2a:	f000 fd09 	bl	8001440 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000a2e:	f244 0301 	movw	r3, #16385	; 0x4001
 8000a32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a34:	2301      	movs	r3, #1
 8000a36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a40:	f107 031c 	add.w	r3, r7, #28
 8000a44:	4619      	mov	r1, r3
 8000a46:	4829      	ldr	r0, [pc, #164]	; (8000aec <MX_GPIO_Init+0x220>)
 8000a48:	f000 fcfa 	bl	8001440 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000a4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a52:	2302      	movs	r3, #2
 8000a54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a56:	2300      	movs	r3, #0
 8000a58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a5a:	2303      	movs	r3, #3
 8000a5c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a5e:	230b      	movs	r3, #11
 8000a60:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000a62:	f107 031c 	add.w	r3, r7, #28
 8000a66:	4619      	mov	r1, r3
 8000a68:	4820      	ldr	r0, [pc, #128]	; (8000aec <MX_GPIO_Init+0x220>)
 8000a6a:	f000 fce9 	bl	8001440 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a6e:	2340      	movs	r3, #64	; 0x40
 8000a70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a72:	2301      	movs	r3, #1
 8000a74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	2300      	movs	r3, #0
 8000a78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a7e:	f107 031c 	add.w	r3, r7, #28
 8000a82:	4619      	mov	r1, r3
 8000a84:	481a      	ldr	r0, [pc, #104]	; (8000af0 <MX_GPIO_Init+0x224>)
 8000a86:	f000 fcdb 	bl	8001440 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a8a:	2380      	movs	r3, #128	; 0x80
 8000a8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a92:	2300      	movs	r3, #0
 8000a94:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a96:	f107 031c 	add.w	r3, r7, #28
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	4814      	ldr	r0, [pc, #80]	; (8000af0 <MX_GPIO_Init+0x224>)
 8000a9e:	f000 fccf 	bl	8001440 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000aa2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000aa6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aac:	2300      	movs	r3, #0
 8000aae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab0:	2303      	movs	r3, #3
 8000ab2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ab4:	230b      	movs	r3, #11
 8000ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ab8:	f107 031c 	add.w	r3, r7, #28
 8000abc:	4619      	mov	r1, r3
 8000abe:	480c      	ldr	r0, [pc, #48]	; (8000af0 <MX_GPIO_Init+0x224>)
 8000ac0:	f000 fcbe 	bl	8001440 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	2300      	movs	r3, #0
 8000ace:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ad4:	f107 031c 	add.w	r3, r7, #28
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4806      	ldr	r0, [pc, #24]	; (8000af4 <MX_GPIO_Init+0x228>)
 8000adc:	f000 fcb0 	bl	8001440 <HAL_GPIO_Init>

}
 8000ae0:	bf00      	nop
 8000ae2:	3730      	adds	r7, #48	; 0x30
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	58024400 	.word	0x58024400
 8000aec:	58020400 	.word	0x58020400
 8000af0:	58021800 	.word	0x58021800
 8000af4:	58021000 	.word	0x58021000
 8000af8:	11110000 	.word	0x11110000
 8000afc:	58020800 	.word	0x58020800
 8000b00:	58020000 	.word	0x58020000

08000b04 <HAL_SYSTICK_Callback>:

/* USER CODE BEGIN 4 */

void HAL_SYSTICK_Callback(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b083      	sub	sp, #12
 8000b08:	af00      	add	r7, sp, #0
	uint16_t t_timer;
	uint8_t i;

	Licznikms++;                        /* increment counter necessary in Delay() */
 8000b0a:	4b1e      	ldr	r3, [pc, #120]	; (8000b84 <HAL_SYSTICK_Callback+0x80>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	3301      	adds	r3, #1
 8000b10:	4a1c      	ldr	r2, [pc, #112]	; (8000b84 <HAL_SYSTICK_Callback+0x80>)
 8000b12:	6013      	str	r3, [r2, #0]
	uwTickms++;
 8000b14:	4b1c      	ldr	r3, [pc, #112]	; (8000b88 <HAL_SYSTICK_Callback+0x84>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	3301      	adds	r3, #1
 8000b1a:	4a1b      	ldr	r2, [pc, #108]	; (8000b88 <HAL_SYSTICK_Callback+0x84>)
 8000b1c:	6013      	str	r3, [r2, #0]
	Tickms++;
 8000b1e:	4b1b      	ldr	r3, [pc, #108]	; (8000b8c <HAL_SYSTICK_Callback+0x88>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	3301      	adds	r3, #1
 8000b24:	4a19      	ldr	r2, [pc, #100]	; (8000b8c <HAL_SYSTICK_Callback+0x88>)
 8000b26:	6013      	str	r3, [r2, #0]

	if (Tickms >= 1000)
 8000b28:	4b18      	ldr	r3, [pc, #96]	; (8000b8c <HAL_SYSTICK_Callback+0x88>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000b30:	d307      	bcc.n	8000b42 <HAL_SYSTICK_Callback+0x3e>
	{
		Tickms = 0;
 8000b32:	4b16      	ldr	r3, [pc, #88]	; (8000b8c <HAL_SYSTICK_Callback+0x88>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
		//Ticks++;
		g_COUNT_SEC++;
 8000b38:	4b15      	ldr	r3, [pc, #84]	; (8000b90 <HAL_SYSTICK_Callback+0x8c>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	3301      	adds	r3, #1
 8000b3e:	4a14      	ldr	r2, [pc, #80]	; (8000b90 <HAL_SYSTICK_Callback+0x8c>)
 8000b40:	6013      	str	r3, [r2, #0]
	}

	// obsluga timerow systemowych
	for (i = 0; i< ELEMS(Timer_sys); i++)
 8000b42:	2300      	movs	r3, #0
 8000b44:	71fb      	strb	r3, [r7, #7]
 8000b46:	e012      	b.n	8000b6e <HAL_SYSTICK_Callback+0x6a>
	{
		t_timer = Timer_sys[i];
 8000b48:	79fb      	ldrb	r3, [r7, #7]
 8000b4a:	4a12      	ldr	r2, [pc, #72]	; (8000b94 <HAL_SYSTICK_Callback+0x90>)
 8000b4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b50:	80bb      	strh	r3, [r7, #4]
		if (t_timer) Timer_sys[i] = --t_timer;
 8000b52:	88bb      	ldrh	r3, [r7, #4]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d007      	beq.n	8000b68 <HAL_SYSTICK_Callback+0x64>
 8000b58:	88bb      	ldrh	r3, [r7, #4]
 8000b5a:	3b01      	subs	r3, #1
 8000b5c:	80bb      	strh	r3, [r7, #4]
 8000b5e:	79fb      	ldrb	r3, [r7, #7]
 8000b60:	490c      	ldr	r1, [pc, #48]	; (8000b94 <HAL_SYSTICK_Callback+0x90>)
 8000b62:	88ba      	ldrh	r2, [r7, #4]
 8000b64:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for (i = 0; i< ELEMS(Timer_sys); i++)
 8000b68:	79fb      	ldrb	r3, [r7, #7]
 8000b6a:	3301      	adds	r3, #1
 8000b6c:	71fb      	strb	r3, [r7, #7]
 8000b6e:	79fb      	ldrb	r3, [r7, #7]
 8000b70:	2b05      	cmp	r3, #5
 8000b72:	d9e9      	bls.n	8000b48 <HAL_SYSTICK_Callback+0x44>

	}
}
 8000b74:	bf00      	nop
 8000b76:	bf00      	nop
 8000b78:	370c      	adds	r7, #12
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	240004d8 	.word	0x240004d8
 8000b88:	240004c8 	.word	0x240004c8
 8000b8c:	240000bc 	.word	0x240000bc
 8000b90:	240004dc 	.word	0x240004dc
 8000b94:	240004cc 	.word	0x240004cc

08000b98 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b084      	sub	sp, #16
 8000b9c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000b9e:	463b      	mov	r3, r7
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000baa:	f000 fbc7 	bl	800133c <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 8000bb6:	4b1b      	ldr	r3, [pc, #108]	; (8000c24 <MPU_Config+0x8c>)
 8000bb8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 8000bba:	230d      	movs	r3, #13
 8000bbc:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000bc6:	2303      	movs	r3, #3
 8000bc8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000bda:	463b      	mov	r3, r7
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f000 fbe5 	bl	80013ac <HAL_MPU_ConfigRegion>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000be2:	2301      	movs	r3, #1
 8000be4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30044000;
 8000be6:	4b10      	ldr	r3, [pc, #64]	; (8000c28 <MPU_Config+0x90>)
 8000be8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000bea:	2300      	movs	r3, #0
 8000bec:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	73bb      	strb	r3, [r7, #14]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000bf2:	463b      	mov	r3, r7
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f000 fbd9 	bl	80013ac <HAL_MPU_ConfigRegion>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 8000bfe:	4b09      	ldr	r3, [pc, #36]	; (8000c24 <MPU_Config+0x8c>)
 8000c00:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
 8000c02:	2307      	movs	r3, #7
 8000c04:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000c06:	2300      	movs	r3, #0
 8000c08:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000c0e:	463b      	mov	r3, r7
 8000c10:	4618      	mov	r0, r3
 8000c12:	f000 fbcb 	bl	80013ac <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000c16:	2004      	movs	r0, #4
 8000c18:	f000 fba8 	bl	800136c <HAL_MPU_Enable>

}
 8000c1c:	bf00      	nop
 8000c1e:	3710      	adds	r7, #16
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	30040000 	.word	0x30040000
 8000c28:	30044000 	.word	0x30044000

08000c2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000c30:	b672      	cpsid	i
}
 8000c32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c34:	e7fe      	b.n	8000c34 <Error_Handler+0x8>
	...

08000c38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c3e:	4b0a      	ldr	r3, [pc, #40]	; (8000c68 <HAL_MspInit+0x30>)
 8000c40:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c44:	4a08      	ldr	r2, [pc, #32]	; (8000c68 <HAL_MspInit+0x30>)
 8000c46:	f043 0302 	orr.w	r3, r3, #2
 8000c4a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000c4e:	4b06      	ldr	r3, [pc, #24]	; (8000c68 <HAL_MspInit+0x30>)
 8000c50:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c54:	f003 0302 	and.w	r3, r3, #2
 8000c58:	607b      	str	r3, [r7, #4]
 8000c5a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c5c:	bf00      	nop
 8000c5e:	370c      	adds	r7, #12
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr
 8000c68:	58024400 	.word	0x58024400

08000c6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b0b8      	sub	sp, #224	; 0xe0
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c74:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000c78:	2200      	movs	r2, #0
 8000c7a:	601a      	str	r2, [r3, #0]
 8000c7c:	605a      	str	r2, [r3, #4]
 8000c7e:	609a      	str	r2, [r3, #8]
 8000c80:	60da      	str	r2, [r3, #12]
 8000c82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c84:	f107 0310 	add.w	r3, r7, #16
 8000c88:	22bc      	movs	r2, #188	; 0xbc
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f004 fd4d 	bl	800572c <memset>
  if(huart->Instance==USART3)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	4a25      	ldr	r2, [pc, #148]	; (8000d2c <HAL_UART_MspInit+0xc0>)
 8000c98:	4293      	cmp	r3, r2
 8000c9a:	d142      	bne.n	8000d22 <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000c9c:	2302      	movs	r3, #2
 8000c9e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ca6:	f107 0310 	add.w	r3, r7, #16
 8000caa:	4618      	mov	r0, r3
 8000cac:	f001 feda 	bl	8002a64 <HAL_RCCEx_PeriphCLKConfig>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000cb6:	f7ff ffb9 	bl	8000c2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000cba:	4b1d      	ldr	r3, [pc, #116]	; (8000d30 <HAL_UART_MspInit+0xc4>)
 8000cbc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000cc0:	4a1b      	ldr	r2, [pc, #108]	; (8000d30 <HAL_UART_MspInit+0xc4>)
 8000cc2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cc6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000cca:	4b19      	ldr	r3, [pc, #100]	; (8000d30 <HAL_UART_MspInit+0xc4>)
 8000ccc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000cd0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cd4:	60fb      	str	r3, [r7, #12]
 8000cd6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cd8:	4b15      	ldr	r3, [pc, #84]	; (8000d30 <HAL_UART_MspInit+0xc4>)
 8000cda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cde:	4a14      	ldr	r2, [pc, #80]	; (8000d30 <HAL_UART_MspInit+0xc4>)
 8000ce0:	f043 0308 	orr.w	r3, r3, #8
 8000ce4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ce8:	4b11      	ldr	r3, [pc, #68]	; (8000d30 <HAL_UART_MspInit+0xc4>)
 8000cea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cee:	f003 0308 	and.w	r3, r3, #8
 8000cf2:	60bb      	str	r3, [r7, #8]
 8000cf4:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000cf6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000cfa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfe:	2302      	movs	r3, #2
 8000d00:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d04:	2300      	movs	r3, #0
 8000d06:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d10:	2307      	movs	r3, #7
 8000d12:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d16:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	4805      	ldr	r0, [pc, #20]	; (8000d34 <HAL_UART_MspInit+0xc8>)
 8000d1e:	f000 fb8f 	bl	8001440 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d22:	bf00      	nop
 8000d24:	37e0      	adds	r7, #224	; 0xe0
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	40004800 	.word	0x40004800
 8000d30:	58024400 	.word	0x58024400
 8000d34:	58020c00 	.word	0x58020c00

08000d38 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b0b8      	sub	sp, #224	; 0xe0
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d40:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000d44:	2200      	movs	r2, #0
 8000d46:	601a      	str	r2, [r3, #0]
 8000d48:	605a      	str	r2, [r3, #4]
 8000d4a:	609a      	str	r2, [r3, #8]
 8000d4c:	60da      	str	r2, [r3, #12]
 8000d4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d50:	f107 0310 	add.w	r3, r7, #16
 8000d54:	22bc      	movs	r2, #188	; 0xbc
 8000d56:	2100      	movs	r1, #0
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f004 fce7 	bl	800572c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4a2f      	ldr	r2, [pc, #188]	; (8000e20 <HAL_PCD_MspInit+0xe8>)
 8000d64:	4293      	cmp	r3, r2
 8000d66:	d156      	bne.n	8000e16 <HAL_PCD_MspInit+0xde>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000d68:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000d6c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000d6e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000d72:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d76:	f107 0310 	add.w	r3, r7, #16
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f001 fe72 	bl	8002a64 <HAL_RCCEx_PeriphCLKConfig>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 8000d86:	f7ff ff51 	bl	8000c2c <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8000d8a:	f000 febf 	bl	8001b0c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d8e:	4b25      	ldr	r3, [pc, #148]	; (8000e24 <HAL_PCD_MspInit+0xec>)
 8000d90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d94:	4a23      	ldr	r2, [pc, #140]	; (8000e24 <HAL_PCD_MspInit+0xec>)
 8000d96:	f043 0301 	orr.w	r3, r3, #1
 8000d9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d9e:	4b21      	ldr	r3, [pc, #132]	; (8000e24 <HAL_PCD_MspInit+0xec>)
 8000da0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000da4:	f003 0301 	and.w	r3, r3, #1
 8000da8:	60fb      	str	r3, [r7, #12]
 8000daa:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000dac:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000db0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db4:	2302      	movs	r3, #2
 8000db6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000dc6:	230a      	movs	r3, #10
 8000dc8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dcc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4815      	ldr	r0, [pc, #84]	; (8000e28 <HAL_PCD_MspInit+0xf0>)
 8000dd4:	f000 fb34 	bl	8001440 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000dd8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ddc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000de0:	2300      	movs	r3, #0
 8000de2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de6:	2300      	movs	r3, #0
 8000de8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000dec:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000df0:	4619      	mov	r1, r3
 8000df2:	480d      	ldr	r0, [pc, #52]	; (8000e28 <HAL_PCD_MspInit+0xf0>)
 8000df4:	f000 fb24 	bl	8001440 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000df8:	4b0a      	ldr	r3, [pc, #40]	; (8000e24 <HAL_PCD_MspInit+0xec>)
 8000dfa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000dfe:	4a09      	ldr	r2, [pc, #36]	; (8000e24 <HAL_PCD_MspInit+0xec>)
 8000e00:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000e04:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000e08:	4b06      	ldr	r3, [pc, #24]	; (8000e24 <HAL_PCD_MspInit+0xec>)
 8000e0a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e0e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000e12:	60bb      	str	r3, [r7, #8]
 8000e14:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000e16:	bf00      	nop
 8000e18:	37e0      	adds	r7, #224	; 0xe0
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	40080000 	.word	0x40080000
 8000e24:	58024400 	.word	0x58024400
 8000e28:	58020000 	.word	0x58020000

08000e2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e30:	e7fe      	b.n	8000e30 <NMI_Handler+0x4>

08000e32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e32:	b480      	push	{r7}
 8000e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e36:	e7fe      	b.n	8000e36 <HardFault_Handler+0x4>

08000e38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e3c:	e7fe      	b.n	8000e3c <MemManage_Handler+0x4>

08000e3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e3e:	b480      	push	{r7}
 8000e40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e42:	e7fe      	b.n	8000e42 <BusFault_Handler+0x4>

08000e44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e48:	e7fe      	b.n	8000e48 <UsageFault_Handler+0x4>

08000e4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e4a:	b480      	push	{r7}
 8000e4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e4e:	bf00      	nop
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr

08000e58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e5c:	bf00      	nop
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr

08000e66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e66:	b480      	push	{r7}
 8000e68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e6a:	bf00      	nop
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr

08000e74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e78:	f000 f92c 	bl	80010d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 8000e7c:	f000 fada 	bl	8001434 <HAL_SYSTICK_IRQHandler>

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e80:	bf00      	nop
 8000e82:	bd80      	pop	{r7, pc}

08000e84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e88:	4b39      	ldr	r3, [pc, #228]	; (8000f70 <SystemInit+0xec>)
 8000e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e8e:	4a38      	ldr	r2, [pc, #224]	; (8000f70 <SystemInit+0xec>)
 8000e90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e98:	4b36      	ldr	r3, [pc, #216]	; (8000f74 <SystemInit+0xf0>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	f003 030f 	and.w	r3, r3, #15
 8000ea0:	2b06      	cmp	r3, #6
 8000ea2:	d807      	bhi.n	8000eb4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ea4:	4b33      	ldr	r3, [pc, #204]	; (8000f74 <SystemInit+0xf0>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f023 030f 	bic.w	r3, r3, #15
 8000eac:	4a31      	ldr	r2, [pc, #196]	; (8000f74 <SystemInit+0xf0>)
 8000eae:	f043 0307 	orr.w	r3, r3, #7
 8000eb2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000eb4:	4b30      	ldr	r3, [pc, #192]	; (8000f78 <SystemInit+0xf4>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a2f      	ldr	r2, [pc, #188]	; (8000f78 <SystemInit+0xf4>)
 8000eba:	f043 0301 	orr.w	r3, r3, #1
 8000ebe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000ec0:	4b2d      	ldr	r3, [pc, #180]	; (8000f78 <SystemInit+0xf4>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000ec6:	4b2c      	ldr	r3, [pc, #176]	; (8000f78 <SystemInit+0xf4>)
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	492b      	ldr	r1, [pc, #172]	; (8000f78 <SystemInit+0xf4>)
 8000ecc:	4b2b      	ldr	r3, [pc, #172]	; (8000f7c <SystemInit+0xf8>)
 8000ece:	4013      	ands	r3, r2
 8000ed0:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ed2:	4b28      	ldr	r3, [pc, #160]	; (8000f74 <SystemInit+0xf0>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f003 0308 	and.w	r3, r3, #8
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d007      	beq.n	8000eee <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ede:	4b25      	ldr	r3, [pc, #148]	; (8000f74 <SystemInit+0xf0>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f023 030f 	bic.w	r3, r3, #15
 8000ee6:	4a23      	ldr	r2, [pc, #140]	; (8000f74 <SystemInit+0xf0>)
 8000ee8:	f043 0307 	orr.w	r3, r3, #7
 8000eec:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000eee:	4b22      	ldr	r3, [pc, #136]	; (8000f78 <SystemInit+0xf4>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000ef4:	4b20      	ldr	r3, [pc, #128]	; (8000f78 <SystemInit+0xf4>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000efa:	4b1f      	ldr	r3, [pc, #124]	; (8000f78 <SystemInit+0xf4>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000f00:	4b1d      	ldr	r3, [pc, #116]	; (8000f78 <SystemInit+0xf4>)
 8000f02:	4a1f      	ldr	r2, [pc, #124]	; (8000f80 <SystemInit+0xfc>)
 8000f04:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000f06:	4b1c      	ldr	r3, [pc, #112]	; (8000f78 <SystemInit+0xf4>)
 8000f08:	4a1e      	ldr	r2, [pc, #120]	; (8000f84 <SystemInit+0x100>)
 8000f0a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000f0c:	4b1a      	ldr	r3, [pc, #104]	; (8000f78 <SystemInit+0xf4>)
 8000f0e:	4a1e      	ldr	r2, [pc, #120]	; (8000f88 <SystemInit+0x104>)
 8000f10:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000f12:	4b19      	ldr	r3, [pc, #100]	; (8000f78 <SystemInit+0xf4>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000f18:	4b17      	ldr	r3, [pc, #92]	; (8000f78 <SystemInit+0xf4>)
 8000f1a:	4a1b      	ldr	r2, [pc, #108]	; (8000f88 <SystemInit+0x104>)
 8000f1c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000f1e:	4b16      	ldr	r3, [pc, #88]	; (8000f78 <SystemInit+0xf4>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000f24:	4b14      	ldr	r3, [pc, #80]	; (8000f78 <SystemInit+0xf4>)
 8000f26:	4a18      	ldr	r2, [pc, #96]	; (8000f88 <SystemInit+0x104>)
 8000f28:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000f2a:	4b13      	ldr	r3, [pc, #76]	; (8000f78 <SystemInit+0xf4>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f30:	4b11      	ldr	r3, [pc, #68]	; (8000f78 <SystemInit+0xf4>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a10      	ldr	r2, [pc, #64]	; (8000f78 <SystemInit+0xf4>)
 8000f36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f3a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000f3c:	4b0e      	ldr	r3, [pc, #56]	; (8000f78 <SystemInit+0xf4>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000f42:	4b12      	ldr	r3, [pc, #72]	; (8000f8c <SystemInit+0x108>)
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	4b12      	ldr	r3, [pc, #72]	; (8000f90 <SystemInit+0x10c>)
 8000f48:	4013      	ands	r3, r2
 8000f4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000f4e:	d202      	bcs.n	8000f56 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000f50:	4b10      	ldr	r3, [pc, #64]	; (8000f94 <SystemInit+0x110>)
 8000f52:	2201      	movs	r2, #1
 8000f54:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000f56:	4b10      	ldr	r3, [pc, #64]	; (8000f98 <SystemInit+0x114>)
 8000f58:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000f5c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f5e:	4b04      	ldr	r3, [pc, #16]	; (8000f70 <SystemInit+0xec>)
 8000f60:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f64:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8000f66:	bf00      	nop
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr
 8000f70:	e000ed00 	.word	0xe000ed00
 8000f74:	52002000 	.word	0x52002000
 8000f78:	58024400 	.word	0x58024400
 8000f7c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000f80:	02020200 	.word	0x02020200
 8000f84:	01ff0000 	.word	0x01ff0000
 8000f88:	01010280 	.word	0x01010280
 8000f8c:	5c001000 	.word	0x5c001000
 8000f90:	ffff0000 	.word	0xffff0000
 8000f94:	51008108 	.word	0x51008108
 8000f98:	52004000 	.word	0x52004000

08000f9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000f9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fd4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000fa0:	f7ff ff70 	bl	8000e84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fa4:	480c      	ldr	r0, [pc, #48]	; (8000fd8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fa6:	490d      	ldr	r1, [pc, #52]	; (8000fdc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fa8:	4a0d      	ldr	r2, [pc, #52]	; (8000fe0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000faa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fac:	e002      	b.n	8000fb4 <LoopCopyDataInit>

08000fae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fb2:	3304      	adds	r3, #4

08000fb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fb8:	d3f9      	bcc.n	8000fae <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fba:	4a0a      	ldr	r2, [pc, #40]	; (8000fe4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fbc:	4c0a      	ldr	r4, [pc, #40]	; (8000fe8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fc0:	e001      	b.n	8000fc6 <LoopFillZerobss>

08000fc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fc4:	3204      	adds	r2, #4

08000fc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fc8:	d3fb      	bcc.n	8000fc2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fca:	f004 fb8b 	bl	80056e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fce:	f7ff faff 	bl	80005d0 <main>
  bx  lr
 8000fd2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fd4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000fd8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000fdc:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000fe0:	0800579c 	.word	0x0800579c
  ldr r2, =_sbss
 8000fe4:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000fe8:	240004e4 	.word	0x240004e4

08000fec <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fec:	e7fe      	b.n	8000fec <ADC3_IRQHandler>
	...

08000ff0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ff6:	2003      	movs	r0, #3
 8000ff8:	f000 f96e 	bl	80012d8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000ffc:	f001 fb5c 	bl	80026b8 <HAL_RCC_GetSysClockFreq>
 8001000:	4602      	mov	r2, r0
 8001002:	4b15      	ldr	r3, [pc, #84]	; (8001058 <HAL_Init+0x68>)
 8001004:	699b      	ldr	r3, [r3, #24]
 8001006:	0a1b      	lsrs	r3, r3, #8
 8001008:	f003 030f 	and.w	r3, r3, #15
 800100c:	4913      	ldr	r1, [pc, #76]	; (800105c <HAL_Init+0x6c>)
 800100e:	5ccb      	ldrb	r3, [r1, r3]
 8001010:	f003 031f 	and.w	r3, r3, #31
 8001014:	fa22 f303 	lsr.w	r3, r2, r3
 8001018:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800101a:	4b0f      	ldr	r3, [pc, #60]	; (8001058 <HAL_Init+0x68>)
 800101c:	699b      	ldr	r3, [r3, #24]
 800101e:	f003 030f 	and.w	r3, r3, #15
 8001022:	4a0e      	ldr	r2, [pc, #56]	; (800105c <HAL_Init+0x6c>)
 8001024:	5cd3      	ldrb	r3, [r2, r3]
 8001026:	f003 031f 	and.w	r3, r3, #31
 800102a:	687a      	ldr	r2, [r7, #4]
 800102c:	fa22 f303 	lsr.w	r3, r2, r3
 8001030:	4a0b      	ldr	r2, [pc, #44]	; (8001060 <HAL_Init+0x70>)
 8001032:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001034:	4a0b      	ldr	r2, [pc, #44]	; (8001064 <HAL_Init+0x74>)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800103a:	2000      	movs	r0, #0
 800103c:	f000 f814 	bl	8001068 <HAL_InitTick>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001046:	2301      	movs	r3, #1
 8001048:	e002      	b.n	8001050 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800104a:	f7ff fdf5 	bl	8000c38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800104e:	2300      	movs	r3, #0
}
 8001050:	4618      	mov	r0, r3
 8001052:	3708      	adds	r7, #8
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	58024400 	.word	0x58024400
 800105c:	08005754 	.word	0x08005754
 8001060:	24000004 	.word	0x24000004
 8001064:	24000000 	.word	0x24000000

08001068 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001070:	4b15      	ldr	r3, [pc, #84]	; (80010c8 <HAL_InitTick+0x60>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d101      	bne.n	800107c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001078:	2301      	movs	r3, #1
 800107a:	e021      	b.n	80010c0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800107c:	4b13      	ldr	r3, [pc, #76]	; (80010cc <HAL_InitTick+0x64>)
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	4b11      	ldr	r3, [pc, #68]	; (80010c8 <HAL_InitTick+0x60>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	4619      	mov	r1, r3
 8001086:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800108a:	fbb3 f3f1 	udiv	r3, r3, r1
 800108e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001092:	4618      	mov	r0, r3
 8001094:	f000 f945 	bl	8001322 <HAL_SYSTICK_Config>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800109e:	2301      	movs	r3, #1
 80010a0:	e00e      	b.n	80010c0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2b0f      	cmp	r3, #15
 80010a6:	d80a      	bhi.n	80010be <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010a8:	2200      	movs	r2, #0
 80010aa:	6879      	ldr	r1, [r7, #4]
 80010ac:	f04f 30ff 	mov.w	r0, #4294967295
 80010b0:	f000 f91d 	bl	80012ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010b4:	4a06      	ldr	r2, [pc, #24]	; (80010d0 <HAL_InitTick+0x68>)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010ba:	2300      	movs	r3, #0
 80010bc:	e000      	b.n	80010c0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80010be:	2301      	movs	r3, #1
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	3708      	adds	r7, #8
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	2400000c 	.word	0x2400000c
 80010cc:	24000000 	.word	0x24000000
 80010d0:	24000008 	.word	0x24000008

080010d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010d8:	4b06      	ldr	r3, [pc, #24]	; (80010f4 <HAL_IncTick+0x20>)
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	461a      	mov	r2, r3
 80010de:	4b06      	ldr	r3, [pc, #24]	; (80010f8 <HAL_IncTick+0x24>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4413      	add	r3, r2
 80010e4:	4a04      	ldr	r2, [pc, #16]	; (80010f8 <HAL_IncTick+0x24>)
 80010e6:	6013      	str	r3, [r2, #0]
}
 80010e8:	bf00      	nop
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	2400000c 	.word	0x2400000c
 80010f8:	240004e0 	.word	0x240004e0

080010fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001100:	4b03      	ldr	r3, [pc, #12]	; (8001110 <HAL_GetTick+0x14>)
 8001102:	681b      	ldr	r3, [r3, #0]
}
 8001104:	4618      	mov	r0, r3
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	240004e0 	.word	0x240004e0

08001114 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800111c:	f7ff ffee 	bl	80010fc <HAL_GetTick>
 8001120:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800112c:	d005      	beq.n	800113a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800112e:	4b0a      	ldr	r3, [pc, #40]	; (8001158 <HAL_Delay+0x44>)
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	461a      	mov	r2, r3
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	4413      	add	r3, r2
 8001138:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800113a:	bf00      	nop
 800113c:	f7ff ffde 	bl	80010fc <HAL_GetTick>
 8001140:	4602      	mov	r2, r0
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	68fa      	ldr	r2, [r7, #12]
 8001148:	429a      	cmp	r2, r3
 800114a:	d8f7      	bhi.n	800113c <HAL_Delay+0x28>
  {
  }
}
 800114c:	bf00      	nop
 800114e:	bf00      	nop
 8001150:	3710      	adds	r7, #16
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	2400000c 	.word	0x2400000c

0800115c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001160:	4b03      	ldr	r3, [pc, #12]	; (8001170 <HAL_GetREVID+0x14>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	0c1b      	lsrs	r3, r3, #16
}
 8001166:	4618      	mov	r0, r3
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr
 8001170:	5c001000 	.word	0x5c001000

08001174 <__NVIC_SetPriorityGrouping>:
{
 8001174:	b480      	push	{r7}
 8001176:	b085      	sub	sp, #20
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	f003 0307 	and.w	r3, r3, #7
 8001182:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001184:	4b0b      	ldr	r3, [pc, #44]	; (80011b4 <__NVIC_SetPriorityGrouping+0x40>)
 8001186:	68db      	ldr	r3, [r3, #12]
 8001188:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800118a:	68ba      	ldr	r2, [r7, #8]
 800118c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001190:	4013      	ands	r3, r2
 8001192:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800119c:	4b06      	ldr	r3, [pc, #24]	; (80011b8 <__NVIC_SetPriorityGrouping+0x44>)
 800119e:	4313      	orrs	r3, r2
 80011a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011a2:	4a04      	ldr	r2, [pc, #16]	; (80011b4 <__NVIC_SetPriorityGrouping+0x40>)
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	60d3      	str	r3, [r2, #12]
}
 80011a8:	bf00      	nop
 80011aa:	3714      	adds	r7, #20
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr
 80011b4:	e000ed00 	.word	0xe000ed00
 80011b8:	05fa0000 	.word	0x05fa0000

080011bc <__NVIC_GetPriorityGrouping>:
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011c0:	4b04      	ldr	r3, [pc, #16]	; (80011d4 <__NVIC_GetPriorityGrouping+0x18>)
 80011c2:	68db      	ldr	r3, [r3, #12]
 80011c4:	0a1b      	lsrs	r3, r3, #8
 80011c6:	f003 0307 	and.w	r3, r3, #7
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr
 80011d4:	e000ed00 	.word	0xe000ed00

080011d8 <__NVIC_SetPriority>:
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	4603      	mov	r3, r0
 80011e0:	6039      	str	r1, [r7, #0]
 80011e2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80011e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	db0a      	blt.n	8001202 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	b2da      	uxtb	r2, r3
 80011f0:	490c      	ldr	r1, [pc, #48]	; (8001224 <__NVIC_SetPriority+0x4c>)
 80011f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011f6:	0112      	lsls	r2, r2, #4
 80011f8:	b2d2      	uxtb	r2, r2
 80011fa:	440b      	add	r3, r1
 80011fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001200:	e00a      	b.n	8001218 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	b2da      	uxtb	r2, r3
 8001206:	4908      	ldr	r1, [pc, #32]	; (8001228 <__NVIC_SetPriority+0x50>)
 8001208:	88fb      	ldrh	r3, [r7, #6]
 800120a:	f003 030f 	and.w	r3, r3, #15
 800120e:	3b04      	subs	r3, #4
 8001210:	0112      	lsls	r2, r2, #4
 8001212:	b2d2      	uxtb	r2, r2
 8001214:	440b      	add	r3, r1
 8001216:	761a      	strb	r2, [r3, #24]
}
 8001218:	bf00      	nop
 800121a:	370c      	adds	r7, #12
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr
 8001224:	e000e100 	.word	0xe000e100
 8001228:	e000ed00 	.word	0xe000ed00

0800122c <NVIC_EncodePriority>:
{
 800122c:	b480      	push	{r7}
 800122e:	b089      	sub	sp, #36	; 0x24
 8001230:	af00      	add	r7, sp, #0
 8001232:	60f8      	str	r0, [r7, #12]
 8001234:	60b9      	str	r1, [r7, #8]
 8001236:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	f003 0307 	and.w	r3, r3, #7
 800123e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	f1c3 0307 	rsb	r3, r3, #7
 8001246:	2b04      	cmp	r3, #4
 8001248:	bf28      	it	cs
 800124a:	2304      	movcs	r3, #4
 800124c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	3304      	adds	r3, #4
 8001252:	2b06      	cmp	r3, #6
 8001254:	d902      	bls.n	800125c <NVIC_EncodePriority+0x30>
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	3b03      	subs	r3, #3
 800125a:	e000      	b.n	800125e <NVIC_EncodePriority+0x32>
 800125c:	2300      	movs	r3, #0
 800125e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001260:	f04f 32ff 	mov.w	r2, #4294967295
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	fa02 f303 	lsl.w	r3, r2, r3
 800126a:	43da      	mvns	r2, r3
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	401a      	ands	r2, r3
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001274:	f04f 31ff 	mov.w	r1, #4294967295
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	fa01 f303 	lsl.w	r3, r1, r3
 800127e:	43d9      	mvns	r1, r3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001284:	4313      	orrs	r3, r2
}
 8001286:	4618      	mov	r0, r3
 8001288:	3724      	adds	r7, #36	; 0x24
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
	...

08001294 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	3b01      	subs	r3, #1
 80012a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012a4:	d301      	bcc.n	80012aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012a6:	2301      	movs	r3, #1
 80012a8:	e00f      	b.n	80012ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012aa:	4a0a      	ldr	r2, [pc, #40]	; (80012d4 <SysTick_Config+0x40>)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	3b01      	subs	r3, #1
 80012b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012b2:	210f      	movs	r1, #15
 80012b4:	f04f 30ff 	mov.w	r0, #4294967295
 80012b8:	f7ff ff8e 	bl	80011d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012bc:	4b05      	ldr	r3, [pc, #20]	; (80012d4 <SysTick_Config+0x40>)
 80012be:	2200      	movs	r2, #0
 80012c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012c2:	4b04      	ldr	r3, [pc, #16]	; (80012d4 <SysTick_Config+0x40>)
 80012c4:	2207      	movs	r2, #7
 80012c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012c8:	2300      	movs	r3, #0
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	e000e010 	.word	0xe000e010

080012d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012e0:	6878      	ldr	r0, [r7, #4]
 80012e2:	f7ff ff47 	bl	8001174 <__NVIC_SetPriorityGrouping>
}
 80012e6:	bf00      	nop
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}

080012ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b086      	sub	sp, #24
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	4603      	mov	r3, r0
 80012f6:	60b9      	str	r1, [r7, #8]
 80012f8:	607a      	str	r2, [r7, #4]
 80012fa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80012fc:	f7ff ff5e 	bl	80011bc <__NVIC_GetPriorityGrouping>
 8001300:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001302:	687a      	ldr	r2, [r7, #4]
 8001304:	68b9      	ldr	r1, [r7, #8]
 8001306:	6978      	ldr	r0, [r7, #20]
 8001308:	f7ff ff90 	bl	800122c <NVIC_EncodePriority>
 800130c:	4602      	mov	r2, r0
 800130e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001312:	4611      	mov	r1, r2
 8001314:	4618      	mov	r0, r3
 8001316:	f7ff ff5f 	bl	80011d8 <__NVIC_SetPriority>
}
 800131a:	bf00      	nop
 800131c:	3718      	adds	r7, #24
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}

08001322 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001322:	b580      	push	{r7, lr}
 8001324:	b082      	sub	sp, #8
 8001326:	af00      	add	r7, sp, #0
 8001328:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800132a:	6878      	ldr	r0, [r7, #4]
 800132c:	f7ff ffb2 	bl	8001294 <SysTick_Config>
 8001330:	4603      	mov	r3, r0
}
 8001332:	4618      	mov	r0, r3
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
	...

0800133c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001340:	f3bf 8f5f 	dmb	sy
}
 8001344:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001346:	4b07      	ldr	r3, [pc, #28]	; (8001364 <HAL_MPU_Disable+0x28>)
 8001348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800134a:	4a06      	ldr	r2, [pc, #24]	; (8001364 <HAL_MPU_Disable+0x28>)
 800134c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001350:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001352:	4b05      	ldr	r3, [pc, #20]	; (8001368 <HAL_MPU_Disable+0x2c>)
 8001354:	2200      	movs	r2, #0
 8001356:	605a      	str	r2, [r3, #4]
}
 8001358:	bf00      	nop
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	e000ed00 	.word	0xe000ed00
 8001368:	e000ed90 	.word	0xe000ed90

0800136c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001374:	4a0b      	ldr	r2, [pc, #44]	; (80013a4 <HAL_MPU_Enable+0x38>)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	f043 0301 	orr.w	r3, r3, #1
 800137c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800137e:	4b0a      	ldr	r3, [pc, #40]	; (80013a8 <HAL_MPU_Enable+0x3c>)
 8001380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001382:	4a09      	ldr	r2, [pc, #36]	; (80013a8 <HAL_MPU_Enable+0x3c>)
 8001384:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001388:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800138a:	f3bf 8f4f 	dsb	sy
}
 800138e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001390:	f3bf 8f6f 	isb	sy
}
 8001394:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001396:	bf00      	nop
 8001398:	370c      	adds	r7, #12
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	e000ed90 	.word	0xe000ed90
 80013a8:	e000ed00 	.word	0xe000ed00

080013ac <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	785a      	ldrb	r2, [r3, #1]
 80013b8:	4b1d      	ldr	r3, [pc, #116]	; (8001430 <HAL_MPU_ConfigRegion+0x84>)
 80013ba:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d029      	beq.n	8001418 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 80013c4:	4a1a      	ldr	r2, [pc, #104]	; (8001430 <HAL_MPU_ConfigRegion+0x84>)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	7b1b      	ldrb	r3, [r3, #12]
 80013d0:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	7adb      	ldrb	r3, [r3, #11]
 80013d6:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80013d8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	7a9b      	ldrb	r3, [r3, #10]
 80013de:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80013e0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	7b5b      	ldrb	r3, [r3, #13]
 80013e6:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80013e8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	7b9b      	ldrb	r3, [r3, #14]
 80013ee:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80013f0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	7bdb      	ldrb	r3, [r3, #15]
 80013f6:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80013f8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	7a5b      	ldrb	r3, [r3, #9]
 80013fe:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001400:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	7a1b      	ldrb	r3, [r3, #8]
 8001406:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001408:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800140a:	687a      	ldr	r2, [r7, #4]
 800140c:	7812      	ldrb	r2, [r2, #0]
 800140e:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001410:	4a07      	ldr	r2, [pc, #28]	; (8001430 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001412:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001414:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8001416:	e005      	b.n	8001424 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8001418:	4b05      	ldr	r3, [pc, #20]	; (8001430 <HAL_MPU_ConfigRegion+0x84>)
 800141a:	2200      	movs	r2, #0
 800141c:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 800141e:	4b04      	ldr	r3, [pc, #16]	; (8001430 <HAL_MPU_ConfigRegion+0x84>)
 8001420:	2200      	movs	r2, #0
 8001422:	611a      	str	r2, [r3, #16]
}
 8001424:	bf00      	nop
 8001426:	370c      	adds	r7, #12
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr
 8001430:	e000ed90 	.word	0xe000ed90

08001434 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001438:	f7ff fb64 	bl	8000b04 <HAL_SYSTICK_Callback>
}
 800143c:	bf00      	nop
 800143e:	bd80      	pop	{r7, pc}

08001440 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001440:	b480      	push	{r7}
 8001442:	b089      	sub	sp, #36	; 0x24
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800144a:	2300      	movs	r3, #0
 800144c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800144e:	4b89      	ldr	r3, [pc, #548]	; (8001674 <HAL_GPIO_Init+0x234>)
 8001450:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001452:	e194      	b.n	800177e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	2101      	movs	r1, #1
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	fa01 f303 	lsl.w	r3, r1, r3
 8001460:	4013      	ands	r3, r2
 8001462:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	2b00      	cmp	r3, #0
 8001468:	f000 8186 	beq.w	8001778 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	2b01      	cmp	r3, #1
 8001472:	d00b      	beq.n	800148c <HAL_GPIO_Init+0x4c>
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	2b02      	cmp	r3, #2
 800147a:	d007      	beq.n	800148c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001480:	2b11      	cmp	r3, #17
 8001482:	d003      	beq.n	800148c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	2b12      	cmp	r3, #18
 800148a:	d130      	bne.n	80014ee <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	005b      	lsls	r3, r3, #1
 8001496:	2203      	movs	r2, #3
 8001498:	fa02 f303 	lsl.w	r3, r2, r3
 800149c:	43db      	mvns	r3, r3
 800149e:	69ba      	ldr	r2, [r7, #24]
 80014a0:	4013      	ands	r3, r2
 80014a2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	68da      	ldr	r2, [r3, #12]
 80014a8:	69fb      	ldr	r3, [r7, #28]
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	fa02 f303 	lsl.w	r3, r2, r3
 80014b0:	69ba      	ldr	r2, [r7, #24]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	69ba      	ldr	r2, [r7, #24]
 80014ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014c2:	2201      	movs	r2, #1
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ca:	43db      	mvns	r3, r3
 80014cc:	69ba      	ldr	r2, [r7, #24]
 80014ce:	4013      	ands	r3, r2
 80014d0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	091b      	lsrs	r3, r3, #4
 80014d8:	f003 0201 	and.w	r2, r3, #1
 80014dc:	69fb      	ldr	r3, [r7, #28]
 80014de:	fa02 f303 	lsl.w	r3, r2, r3
 80014e2:	69ba      	ldr	r2, [r7, #24]
 80014e4:	4313      	orrs	r3, r2
 80014e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	69ba      	ldr	r2, [r7, #24]
 80014ec:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	68db      	ldr	r3, [r3, #12]
 80014f2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	005b      	lsls	r3, r3, #1
 80014f8:	2203      	movs	r2, #3
 80014fa:	fa02 f303 	lsl.w	r3, r2, r3
 80014fe:	43db      	mvns	r3, r3
 8001500:	69ba      	ldr	r2, [r7, #24]
 8001502:	4013      	ands	r3, r2
 8001504:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	689a      	ldr	r2, [r3, #8]
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	005b      	lsls	r3, r3, #1
 800150e:	fa02 f303 	lsl.w	r3, r2, r3
 8001512:	69ba      	ldr	r2, [r7, #24]
 8001514:	4313      	orrs	r3, r2
 8001516:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	69ba      	ldr	r2, [r7, #24]
 800151c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	2b02      	cmp	r3, #2
 8001524:	d003      	beq.n	800152e <HAL_GPIO_Init+0xee>
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	2b12      	cmp	r3, #18
 800152c:	d123      	bne.n	8001576 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	08da      	lsrs	r2, r3, #3
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	3208      	adds	r2, #8
 8001536:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800153a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	f003 0307 	and.w	r3, r3, #7
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	220f      	movs	r2, #15
 8001546:	fa02 f303 	lsl.w	r3, r2, r3
 800154a:	43db      	mvns	r3, r3
 800154c:	69ba      	ldr	r2, [r7, #24]
 800154e:	4013      	ands	r3, r2
 8001550:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	691a      	ldr	r2, [r3, #16]
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	f003 0307 	and.w	r3, r3, #7
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	fa02 f303 	lsl.w	r3, r2, r3
 8001562:	69ba      	ldr	r2, [r7, #24]
 8001564:	4313      	orrs	r3, r2
 8001566:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	08da      	lsrs	r2, r3, #3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	3208      	adds	r2, #8
 8001570:	69b9      	ldr	r1, [r7, #24]
 8001572:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	005b      	lsls	r3, r3, #1
 8001580:	2203      	movs	r2, #3
 8001582:	fa02 f303 	lsl.w	r3, r2, r3
 8001586:	43db      	mvns	r3, r3
 8001588:	69ba      	ldr	r2, [r7, #24]
 800158a:	4013      	ands	r3, r2
 800158c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	f003 0203 	and.w	r2, r3, #3
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	005b      	lsls	r3, r3, #1
 800159a:	fa02 f303 	lsl.w	r3, r2, r3
 800159e:	69ba      	ldr	r2, [r7, #24]
 80015a0:	4313      	orrs	r3, r2
 80015a2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	69ba      	ldr	r2, [r7, #24]
 80015a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	f000 80e0 	beq.w	8001778 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015b8:	4b2f      	ldr	r3, [pc, #188]	; (8001678 <HAL_GPIO_Init+0x238>)
 80015ba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80015be:	4a2e      	ldr	r2, [pc, #184]	; (8001678 <HAL_GPIO_Init+0x238>)
 80015c0:	f043 0302 	orr.w	r3, r3, #2
 80015c4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80015c8:	4b2b      	ldr	r3, [pc, #172]	; (8001678 <HAL_GPIO_Init+0x238>)
 80015ca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80015ce:	f003 0302 	and.w	r3, r3, #2
 80015d2:	60fb      	str	r3, [r7, #12]
 80015d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015d6:	4a29      	ldr	r2, [pc, #164]	; (800167c <HAL_GPIO_Init+0x23c>)
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	089b      	lsrs	r3, r3, #2
 80015dc:	3302      	adds	r3, #2
 80015de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	f003 0303 	and.w	r3, r3, #3
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	220f      	movs	r2, #15
 80015ee:	fa02 f303 	lsl.w	r3, r2, r3
 80015f2:	43db      	mvns	r3, r3
 80015f4:	69ba      	ldr	r2, [r7, #24]
 80015f6:	4013      	ands	r3, r2
 80015f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4a20      	ldr	r2, [pc, #128]	; (8001680 <HAL_GPIO_Init+0x240>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d052      	beq.n	80016a8 <HAL_GPIO_Init+0x268>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4a1f      	ldr	r2, [pc, #124]	; (8001684 <HAL_GPIO_Init+0x244>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d031      	beq.n	800166e <HAL_GPIO_Init+0x22e>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	4a1e      	ldr	r2, [pc, #120]	; (8001688 <HAL_GPIO_Init+0x248>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d02b      	beq.n	800166a <HAL_GPIO_Init+0x22a>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4a1d      	ldr	r2, [pc, #116]	; (800168c <HAL_GPIO_Init+0x24c>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d025      	beq.n	8001666 <HAL_GPIO_Init+0x226>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4a1c      	ldr	r2, [pc, #112]	; (8001690 <HAL_GPIO_Init+0x250>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d01f      	beq.n	8001662 <HAL_GPIO_Init+0x222>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4a1b      	ldr	r2, [pc, #108]	; (8001694 <HAL_GPIO_Init+0x254>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d019      	beq.n	800165e <HAL_GPIO_Init+0x21e>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4a1a      	ldr	r2, [pc, #104]	; (8001698 <HAL_GPIO_Init+0x258>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d013      	beq.n	800165a <HAL_GPIO_Init+0x21a>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4a19      	ldr	r2, [pc, #100]	; (800169c <HAL_GPIO_Init+0x25c>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d00d      	beq.n	8001656 <HAL_GPIO_Init+0x216>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	4a18      	ldr	r2, [pc, #96]	; (80016a0 <HAL_GPIO_Init+0x260>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d007      	beq.n	8001652 <HAL_GPIO_Init+0x212>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4a17      	ldr	r2, [pc, #92]	; (80016a4 <HAL_GPIO_Init+0x264>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d101      	bne.n	800164e <HAL_GPIO_Init+0x20e>
 800164a:	2309      	movs	r3, #9
 800164c:	e02d      	b.n	80016aa <HAL_GPIO_Init+0x26a>
 800164e:	230a      	movs	r3, #10
 8001650:	e02b      	b.n	80016aa <HAL_GPIO_Init+0x26a>
 8001652:	2308      	movs	r3, #8
 8001654:	e029      	b.n	80016aa <HAL_GPIO_Init+0x26a>
 8001656:	2307      	movs	r3, #7
 8001658:	e027      	b.n	80016aa <HAL_GPIO_Init+0x26a>
 800165a:	2306      	movs	r3, #6
 800165c:	e025      	b.n	80016aa <HAL_GPIO_Init+0x26a>
 800165e:	2305      	movs	r3, #5
 8001660:	e023      	b.n	80016aa <HAL_GPIO_Init+0x26a>
 8001662:	2304      	movs	r3, #4
 8001664:	e021      	b.n	80016aa <HAL_GPIO_Init+0x26a>
 8001666:	2303      	movs	r3, #3
 8001668:	e01f      	b.n	80016aa <HAL_GPIO_Init+0x26a>
 800166a:	2302      	movs	r3, #2
 800166c:	e01d      	b.n	80016aa <HAL_GPIO_Init+0x26a>
 800166e:	2301      	movs	r3, #1
 8001670:	e01b      	b.n	80016aa <HAL_GPIO_Init+0x26a>
 8001672:	bf00      	nop
 8001674:	58000080 	.word	0x58000080
 8001678:	58024400 	.word	0x58024400
 800167c:	58000400 	.word	0x58000400
 8001680:	58020000 	.word	0x58020000
 8001684:	58020400 	.word	0x58020400
 8001688:	58020800 	.word	0x58020800
 800168c:	58020c00 	.word	0x58020c00
 8001690:	58021000 	.word	0x58021000
 8001694:	58021400 	.word	0x58021400
 8001698:	58021800 	.word	0x58021800
 800169c:	58021c00 	.word	0x58021c00
 80016a0:	58022000 	.word	0x58022000
 80016a4:	58022400 	.word	0x58022400
 80016a8:	2300      	movs	r3, #0
 80016aa:	69fa      	ldr	r2, [r7, #28]
 80016ac:	f002 0203 	and.w	r2, r2, #3
 80016b0:	0092      	lsls	r2, r2, #2
 80016b2:	4093      	lsls	r3, r2
 80016b4:	69ba      	ldr	r2, [r7, #24]
 80016b6:	4313      	orrs	r3, r2
 80016b8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016ba:	4938      	ldr	r1, [pc, #224]	; (800179c <HAL_GPIO_Init+0x35c>)
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	089b      	lsrs	r3, r3, #2
 80016c0:	3302      	adds	r3, #2
 80016c2:	69ba      	ldr	r2, [r7, #24]
 80016c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	43db      	mvns	r3, r3
 80016d2:	69ba      	ldr	r2, [r7, #24]
 80016d4:	4013      	ands	r3, r2
 80016d6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d003      	beq.n	80016ec <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80016e4:	69ba      	ldr	r2, [r7, #24]
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	4313      	orrs	r3, r2
 80016ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	69ba      	ldr	r2, [r7, #24]
 80016f0:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	43db      	mvns	r3, r3
 80016fc:	69ba      	ldr	r2, [r7, #24]
 80016fe:	4013      	ands	r3, r2
 8001700:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800170a:	2b00      	cmp	r3, #0
 800170c:	d003      	beq.n	8001716 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800170e:	69ba      	ldr	r2, [r7, #24]
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	4313      	orrs	r3, r2
 8001714:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	69ba      	ldr	r2, [r7, #24]
 800171a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800171c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	43db      	mvns	r3, r3
 8001728:	69ba      	ldr	r2, [r7, #24]
 800172a:	4013      	ands	r3, r2
 800172c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001736:	2b00      	cmp	r3, #0
 8001738:	d003      	beq.n	8001742 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800173a:	69ba      	ldr	r2, [r7, #24]
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	4313      	orrs	r3, r2
 8001740:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001742:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001746:	69bb      	ldr	r3, [r7, #24]
 8001748:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800174a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	43db      	mvns	r3, r3
 8001756:	69ba      	ldr	r2, [r7, #24]
 8001758:	4013      	ands	r3, r2
 800175a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001764:	2b00      	cmp	r3, #0
 8001766:	d003      	beq.n	8001770 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8001768:	69ba      	ldr	r2, [r7, #24]
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	4313      	orrs	r3, r2
 800176e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001770:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001774:	69bb      	ldr	r3, [r7, #24]
 8001776:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	3301      	adds	r3, #1
 800177c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	fa22 f303 	lsr.w	r3, r2, r3
 8001788:	2b00      	cmp	r3, #0
 800178a:	f47f ae63 	bne.w	8001454 <HAL_GPIO_Init+0x14>
  }
}
 800178e:	bf00      	nop
 8001790:	bf00      	nop
 8001792:	3724      	adds	r7, #36	; 0x24
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr
 800179c:	58000400 	.word	0x58000400

080017a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	460b      	mov	r3, r1
 80017aa:	807b      	strh	r3, [r7, #2]
 80017ac:	4613      	mov	r3, r2
 80017ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017b0:	787b      	ldrb	r3, [r7, #1]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d003      	beq.n	80017be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017b6:	887a      	ldrh	r2, [r7, #2]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80017bc:	e003      	b.n	80017c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80017be:	887b      	ldrh	r3, [r7, #2]
 80017c0:	041a      	lsls	r2, r3, #16
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	619a      	str	r2, [r3, #24]
}
 80017c6:	bf00      	nop
 80017c8:	370c      	adds	r7, #12
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr

080017d2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80017d2:	b480      	push	{r7}
 80017d4:	b085      	sub	sp, #20
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	6078      	str	r0, [r7, #4]
 80017da:	460b      	mov	r3, r1
 80017dc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	695b      	ldr	r3, [r3, #20]
 80017e2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80017e4:	887a      	ldrh	r2, [r7, #2]
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	4013      	ands	r3, r2
 80017ea:	041a      	lsls	r2, r3, #16
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	43d9      	mvns	r1, r3
 80017f0:	887b      	ldrh	r3, [r7, #2]
 80017f2:	400b      	ands	r3, r1
 80017f4:	431a      	orrs	r2, r3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	619a      	str	r2, [r3, #24]
}
 80017fa:	bf00      	nop
 80017fc:	3714      	adds	r7, #20
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr

08001806 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001806:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001808:	b08f      	sub	sp, #60	; 0x3c
 800180a:	af0a      	add	r7, sp, #40	; 0x28
 800180c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d101      	bne.n	8001818 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001814:	2301      	movs	r3, #1
 8001816:	e116      	b.n	8001a46 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001824:	b2db      	uxtb	r3, r3
 8001826:	2b00      	cmp	r3, #0
 8001828:	d106      	bne.n	8001838 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2200      	movs	r2, #0
 800182e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f7ff fa80 	bl	8000d38 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2203      	movs	r2, #3
 800183c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001844:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001848:	2b00      	cmp	r3, #0
 800184a:	d102      	bne.n	8001852 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2200      	movs	r2, #0
 8001850:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4618      	mov	r0, r3
 8001858:	f003 fcf4 	bl	8005244 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	603b      	str	r3, [r7, #0]
 8001862:	687e      	ldr	r6, [r7, #4]
 8001864:	466d      	mov	r5, sp
 8001866:	f106 0410 	add.w	r4, r6, #16
 800186a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800186c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800186e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001870:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001872:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001876:	e885 0003 	stmia.w	r5, {r0, r1}
 800187a:	1d33      	adds	r3, r6, #4
 800187c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800187e:	6838      	ldr	r0, [r7, #0]
 8001880:	f003 fc72 	bl	8005168 <USB_CoreInit>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d005      	beq.n	8001896 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2202      	movs	r2, #2
 800188e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e0d7      	b.n	8001a46 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	2100      	movs	r1, #0
 800189c:	4618      	mov	r0, r3
 800189e:	f003 fce2 	bl	8005266 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018a2:	2300      	movs	r3, #0
 80018a4:	73fb      	strb	r3, [r7, #15]
 80018a6:	e04a      	b.n	800193e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80018a8:	7bfa      	ldrb	r2, [r7, #15]
 80018aa:	6879      	ldr	r1, [r7, #4]
 80018ac:	4613      	mov	r3, r2
 80018ae:	00db      	lsls	r3, r3, #3
 80018b0:	1a9b      	subs	r3, r3, r2
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	440b      	add	r3, r1
 80018b6:	333d      	adds	r3, #61	; 0x3d
 80018b8:	2201      	movs	r2, #1
 80018ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80018bc:	7bfa      	ldrb	r2, [r7, #15]
 80018be:	6879      	ldr	r1, [r7, #4]
 80018c0:	4613      	mov	r3, r2
 80018c2:	00db      	lsls	r3, r3, #3
 80018c4:	1a9b      	subs	r3, r3, r2
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	440b      	add	r3, r1
 80018ca:	333c      	adds	r3, #60	; 0x3c
 80018cc:	7bfa      	ldrb	r2, [r7, #15]
 80018ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80018d0:	7bfa      	ldrb	r2, [r7, #15]
 80018d2:	7bfb      	ldrb	r3, [r7, #15]
 80018d4:	b298      	uxth	r0, r3
 80018d6:	6879      	ldr	r1, [r7, #4]
 80018d8:	4613      	mov	r3, r2
 80018da:	00db      	lsls	r3, r3, #3
 80018dc:	1a9b      	subs	r3, r3, r2
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	440b      	add	r3, r1
 80018e2:	3342      	adds	r3, #66	; 0x42
 80018e4:	4602      	mov	r2, r0
 80018e6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80018e8:	7bfa      	ldrb	r2, [r7, #15]
 80018ea:	6879      	ldr	r1, [r7, #4]
 80018ec:	4613      	mov	r3, r2
 80018ee:	00db      	lsls	r3, r3, #3
 80018f0:	1a9b      	subs	r3, r3, r2
 80018f2:	009b      	lsls	r3, r3, #2
 80018f4:	440b      	add	r3, r1
 80018f6:	333f      	adds	r3, #63	; 0x3f
 80018f8:	2200      	movs	r2, #0
 80018fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80018fc:	7bfa      	ldrb	r2, [r7, #15]
 80018fe:	6879      	ldr	r1, [r7, #4]
 8001900:	4613      	mov	r3, r2
 8001902:	00db      	lsls	r3, r3, #3
 8001904:	1a9b      	subs	r3, r3, r2
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	440b      	add	r3, r1
 800190a:	3344      	adds	r3, #68	; 0x44
 800190c:	2200      	movs	r2, #0
 800190e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001910:	7bfa      	ldrb	r2, [r7, #15]
 8001912:	6879      	ldr	r1, [r7, #4]
 8001914:	4613      	mov	r3, r2
 8001916:	00db      	lsls	r3, r3, #3
 8001918:	1a9b      	subs	r3, r3, r2
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	440b      	add	r3, r1
 800191e:	3348      	adds	r3, #72	; 0x48
 8001920:	2200      	movs	r2, #0
 8001922:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001924:	7bfa      	ldrb	r2, [r7, #15]
 8001926:	6879      	ldr	r1, [r7, #4]
 8001928:	4613      	mov	r3, r2
 800192a:	00db      	lsls	r3, r3, #3
 800192c:	1a9b      	subs	r3, r3, r2
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	440b      	add	r3, r1
 8001932:	3350      	adds	r3, #80	; 0x50
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001938:	7bfb      	ldrb	r3, [r7, #15]
 800193a:	3301      	adds	r3, #1
 800193c:	73fb      	strb	r3, [r7, #15]
 800193e:	7bfa      	ldrb	r2, [r7, #15]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	429a      	cmp	r2, r3
 8001946:	d3af      	bcc.n	80018a8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001948:	2300      	movs	r3, #0
 800194a:	73fb      	strb	r3, [r7, #15]
 800194c:	e044      	b.n	80019d8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800194e:	7bfa      	ldrb	r2, [r7, #15]
 8001950:	6879      	ldr	r1, [r7, #4]
 8001952:	4613      	mov	r3, r2
 8001954:	00db      	lsls	r3, r3, #3
 8001956:	1a9b      	subs	r3, r3, r2
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	440b      	add	r3, r1
 800195c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001960:	2200      	movs	r2, #0
 8001962:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001964:	7bfa      	ldrb	r2, [r7, #15]
 8001966:	6879      	ldr	r1, [r7, #4]
 8001968:	4613      	mov	r3, r2
 800196a:	00db      	lsls	r3, r3, #3
 800196c:	1a9b      	subs	r3, r3, r2
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	440b      	add	r3, r1
 8001972:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001976:	7bfa      	ldrb	r2, [r7, #15]
 8001978:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800197a:	7bfa      	ldrb	r2, [r7, #15]
 800197c:	6879      	ldr	r1, [r7, #4]
 800197e:	4613      	mov	r3, r2
 8001980:	00db      	lsls	r3, r3, #3
 8001982:	1a9b      	subs	r3, r3, r2
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	440b      	add	r3, r1
 8001988:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800198c:	2200      	movs	r2, #0
 800198e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001990:	7bfa      	ldrb	r2, [r7, #15]
 8001992:	6879      	ldr	r1, [r7, #4]
 8001994:	4613      	mov	r3, r2
 8001996:	00db      	lsls	r3, r3, #3
 8001998:	1a9b      	subs	r3, r3, r2
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	440b      	add	r3, r1
 800199e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80019a2:	2200      	movs	r2, #0
 80019a4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80019a6:	7bfa      	ldrb	r2, [r7, #15]
 80019a8:	6879      	ldr	r1, [r7, #4]
 80019aa:	4613      	mov	r3, r2
 80019ac:	00db      	lsls	r3, r3, #3
 80019ae:	1a9b      	subs	r3, r3, r2
 80019b0:	009b      	lsls	r3, r3, #2
 80019b2:	440b      	add	r3, r1
 80019b4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80019b8:	2200      	movs	r2, #0
 80019ba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80019bc:	7bfa      	ldrb	r2, [r7, #15]
 80019be:	6879      	ldr	r1, [r7, #4]
 80019c0:	4613      	mov	r3, r2
 80019c2:	00db      	lsls	r3, r3, #3
 80019c4:	1a9b      	subs	r3, r3, r2
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	440b      	add	r3, r1
 80019ca:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80019ce:	2200      	movs	r2, #0
 80019d0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019d2:	7bfb      	ldrb	r3, [r7, #15]
 80019d4:	3301      	adds	r3, #1
 80019d6:	73fb      	strb	r3, [r7, #15]
 80019d8:	7bfa      	ldrb	r2, [r7, #15]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	429a      	cmp	r2, r3
 80019e0:	d3b5      	bcc.n	800194e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	603b      	str	r3, [r7, #0]
 80019e8:	687e      	ldr	r6, [r7, #4]
 80019ea:	466d      	mov	r5, sp
 80019ec:	f106 0410 	add.w	r4, r6, #16
 80019f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019f8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80019fc:	e885 0003 	stmia.w	r5, {r0, r1}
 8001a00:	1d33      	adds	r3, r6, #4
 8001a02:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a04:	6838      	ldr	r0, [r7, #0]
 8001a06:	f003 fc59 	bl	80052bc <USB_DevInit>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d005      	beq.n	8001a1c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2202      	movs	r2, #2
 8001a14:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e014      	b.n	8001a46 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2201      	movs	r2, #1
 8001a28:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d102      	bne.n	8001a3a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f000 f80b 	bl	8001a50 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f003 fdfb 	bl	800563a <USB_DevDisconnect>

  return HAL_OK;
 8001a44:	2300      	movs	r3, #0
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3714      	adds	r7, #20
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001a50 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b085      	sub	sp, #20
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2201      	movs	r2, #1
 8001a62:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	699b      	ldr	r3, [r3, #24]
 8001a72:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001a7e:	4b05      	ldr	r3, [pc, #20]	; (8001a94 <HAL_PCDEx_ActivateLPM+0x44>)
 8001a80:	4313      	orrs	r3, r2
 8001a82:	68fa      	ldr	r2, [r7, #12]
 8001a84:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001a86:	2300      	movs	r3, #0
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3714      	adds	r7, #20
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr
 8001a94:	10000003 	.word	0x10000003

08001a98 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001aa0:	4b19      	ldr	r3, [pc, #100]	; (8001b08 <HAL_PWREx_ConfigSupply+0x70>)
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	f003 0304 	and.w	r3, r3, #4
 8001aa8:	2b04      	cmp	r3, #4
 8001aaa:	d00a      	beq.n	8001ac2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001aac:	4b16      	ldr	r3, [pc, #88]	; (8001b08 <HAL_PWREx_ConfigSupply+0x70>)
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	f003 0307 	and.w	r3, r3, #7
 8001ab4:	687a      	ldr	r2, [r7, #4]
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d001      	beq.n	8001abe <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e01f      	b.n	8001afe <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	e01d      	b.n	8001afe <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001ac2:	4b11      	ldr	r3, [pc, #68]	; (8001b08 <HAL_PWREx_ConfigSupply+0x70>)
 8001ac4:	68db      	ldr	r3, [r3, #12]
 8001ac6:	f023 0207 	bic.w	r2, r3, #7
 8001aca:	490f      	ldr	r1, [pc, #60]	; (8001b08 <HAL_PWREx_ConfigSupply+0x70>)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001ad2:	f7ff fb13 	bl	80010fc <HAL_GetTick>
 8001ad6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001ad8:	e009      	b.n	8001aee <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001ada:	f7ff fb0f 	bl	80010fc <HAL_GetTick>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ae8:	d901      	bls.n	8001aee <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e007      	b.n	8001afe <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001aee:	4b06      	ldr	r3, [pc, #24]	; (8001b08 <HAL_PWREx_ConfigSupply+0x70>)
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001af6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001afa:	d1ee      	bne.n	8001ada <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001afc:	2300      	movs	r3, #0
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3710      	adds	r7, #16
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	58024800 	.word	0x58024800

08001b0c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8001b10:	4b05      	ldr	r3, [pc, #20]	; (8001b28 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	4a04      	ldr	r2, [pc, #16]	; (8001b28 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8001b16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b1a:	60d3      	str	r3, [r2, #12]
}
 8001b1c:	bf00      	nop
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	58024800 	.word	0x58024800

08001b2c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b08c      	sub	sp, #48	; 0x30
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d101      	bne.n	8001b3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e3ff      	b.n	800233e <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 0301 	and.w	r3, r3, #1
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	f000 8087 	beq.w	8001c5a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b4c:	4b99      	ldr	r3, [pc, #612]	; (8001db4 <HAL_RCC_OscConfig+0x288>)
 8001b4e:	691b      	ldr	r3, [r3, #16]
 8001b50:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001b54:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001b56:	4b97      	ldr	r3, [pc, #604]	; (8001db4 <HAL_RCC_OscConfig+0x288>)
 8001b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b5a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b5e:	2b10      	cmp	r3, #16
 8001b60:	d007      	beq.n	8001b72 <HAL_RCC_OscConfig+0x46>
 8001b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b64:	2b18      	cmp	r3, #24
 8001b66:	d110      	bne.n	8001b8a <HAL_RCC_OscConfig+0x5e>
 8001b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b6a:	f003 0303 	and.w	r3, r3, #3
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d10b      	bne.n	8001b8a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b72:	4b90      	ldr	r3, [pc, #576]	; (8001db4 <HAL_RCC_OscConfig+0x288>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d06c      	beq.n	8001c58 <HAL_RCC_OscConfig+0x12c>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d168      	bne.n	8001c58 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e3d9      	b.n	800233e <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b92:	d106      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x76>
 8001b94:	4b87      	ldr	r3, [pc, #540]	; (8001db4 <HAL_RCC_OscConfig+0x288>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a86      	ldr	r2, [pc, #536]	; (8001db4 <HAL_RCC_OscConfig+0x288>)
 8001b9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b9e:	6013      	str	r3, [r2, #0]
 8001ba0:	e02e      	b.n	8001c00 <HAL_RCC_OscConfig+0xd4>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d10c      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x98>
 8001baa:	4b82      	ldr	r3, [pc, #520]	; (8001db4 <HAL_RCC_OscConfig+0x288>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a81      	ldr	r2, [pc, #516]	; (8001db4 <HAL_RCC_OscConfig+0x288>)
 8001bb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bb4:	6013      	str	r3, [r2, #0]
 8001bb6:	4b7f      	ldr	r3, [pc, #508]	; (8001db4 <HAL_RCC_OscConfig+0x288>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a7e      	ldr	r2, [pc, #504]	; (8001db4 <HAL_RCC_OscConfig+0x288>)
 8001bbc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bc0:	6013      	str	r3, [r2, #0]
 8001bc2:	e01d      	b.n	8001c00 <HAL_RCC_OscConfig+0xd4>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bcc:	d10c      	bne.n	8001be8 <HAL_RCC_OscConfig+0xbc>
 8001bce:	4b79      	ldr	r3, [pc, #484]	; (8001db4 <HAL_RCC_OscConfig+0x288>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a78      	ldr	r2, [pc, #480]	; (8001db4 <HAL_RCC_OscConfig+0x288>)
 8001bd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bd8:	6013      	str	r3, [r2, #0]
 8001bda:	4b76      	ldr	r3, [pc, #472]	; (8001db4 <HAL_RCC_OscConfig+0x288>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a75      	ldr	r2, [pc, #468]	; (8001db4 <HAL_RCC_OscConfig+0x288>)
 8001be0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001be4:	6013      	str	r3, [r2, #0]
 8001be6:	e00b      	b.n	8001c00 <HAL_RCC_OscConfig+0xd4>
 8001be8:	4b72      	ldr	r3, [pc, #456]	; (8001db4 <HAL_RCC_OscConfig+0x288>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a71      	ldr	r2, [pc, #452]	; (8001db4 <HAL_RCC_OscConfig+0x288>)
 8001bee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bf2:	6013      	str	r3, [r2, #0]
 8001bf4:	4b6f      	ldr	r3, [pc, #444]	; (8001db4 <HAL_RCC_OscConfig+0x288>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a6e      	ldr	r2, [pc, #440]	; (8001db4 <HAL_RCC_OscConfig+0x288>)
 8001bfa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bfe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d013      	beq.n	8001c30 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c08:	f7ff fa78 	bl	80010fc <HAL_GetTick>
 8001c0c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001c0e:	e008      	b.n	8001c22 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c10:	f7ff fa74 	bl	80010fc <HAL_GetTick>
 8001c14:	4602      	mov	r2, r0
 8001c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	2b64      	cmp	r3, #100	; 0x64
 8001c1c:	d901      	bls.n	8001c22 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e38d      	b.n	800233e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001c22:	4b64      	ldr	r3, [pc, #400]	; (8001db4 <HAL_RCC_OscConfig+0x288>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d0f0      	beq.n	8001c10 <HAL_RCC_OscConfig+0xe4>
 8001c2e:	e014      	b.n	8001c5a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c30:	f7ff fa64 	bl	80010fc <HAL_GetTick>
 8001c34:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001c36:	e008      	b.n	8001c4a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c38:	f7ff fa60 	bl	80010fc <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	2b64      	cmp	r3, #100	; 0x64
 8001c44:	d901      	bls.n	8001c4a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e379      	b.n	800233e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001c4a:	4b5a      	ldr	r3, [pc, #360]	; (8001db4 <HAL_RCC_OscConfig+0x288>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d1f0      	bne.n	8001c38 <HAL_RCC_OscConfig+0x10c>
 8001c56:	e000      	b.n	8001c5a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0302 	and.w	r3, r3, #2
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	f000 80ae 	beq.w	8001dc4 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c68:	4b52      	ldr	r3, [pc, #328]	; (8001db4 <HAL_RCC_OscConfig+0x288>)
 8001c6a:	691b      	ldr	r3, [r3, #16]
 8001c6c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001c70:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001c72:	4b50      	ldr	r3, [pc, #320]	; (8001db4 <HAL_RCC_OscConfig+0x288>)
 8001c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c76:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001c78:	6a3b      	ldr	r3, [r7, #32]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d007      	beq.n	8001c8e <HAL_RCC_OscConfig+0x162>
 8001c7e:	6a3b      	ldr	r3, [r7, #32]
 8001c80:	2b18      	cmp	r3, #24
 8001c82:	d13a      	bne.n	8001cfa <HAL_RCC_OscConfig+0x1ce>
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	f003 0303 	and.w	r3, r3, #3
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d135      	bne.n	8001cfa <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c8e:	4b49      	ldr	r3, [pc, #292]	; (8001db4 <HAL_RCC_OscConfig+0x288>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 0304 	and.w	r3, r3, #4
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d005      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x17a>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	68db      	ldr	r3, [r3, #12]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d101      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e34b      	b.n	800233e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ca6:	f7ff fa59 	bl	800115c <HAL_GetREVID>
 8001caa:	4603      	mov	r3, r0
 8001cac:	f241 0203 	movw	r2, #4099	; 0x1003
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d817      	bhi.n	8001ce4 <HAL_RCC_OscConfig+0x1b8>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	691b      	ldr	r3, [r3, #16]
 8001cb8:	2b40      	cmp	r3, #64	; 0x40
 8001cba:	d108      	bne.n	8001cce <HAL_RCC_OscConfig+0x1a2>
 8001cbc:	4b3d      	ldr	r3, [pc, #244]	; (8001db4 <HAL_RCC_OscConfig+0x288>)
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001cc4:	4a3b      	ldr	r2, [pc, #236]	; (8001db4 <HAL_RCC_OscConfig+0x288>)
 8001cc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cca:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ccc:	e07a      	b.n	8001dc4 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cce:	4b39      	ldr	r3, [pc, #228]	; (8001db4 <HAL_RCC_OscConfig+0x288>)
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	691b      	ldr	r3, [r3, #16]
 8001cda:	031b      	lsls	r3, r3, #12
 8001cdc:	4935      	ldr	r1, [pc, #212]	; (8001db4 <HAL_RCC_OscConfig+0x288>)
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ce2:	e06f      	b.n	8001dc4 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ce4:	4b33      	ldr	r3, [pc, #204]	; (8001db4 <HAL_RCC_OscConfig+0x288>)
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	691b      	ldr	r3, [r3, #16]
 8001cf0:	061b      	lsls	r3, r3, #24
 8001cf2:	4930      	ldr	r1, [pc, #192]	; (8001db4 <HAL_RCC_OscConfig+0x288>)
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001cf8:	e064      	b.n	8001dc4 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	68db      	ldr	r3, [r3, #12]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d045      	beq.n	8001d8e <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001d02:	4b2c      	ldr	r3, [pc, #176]	; (8001db4 <HAL_RCC_OscConfig+0x288>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f023 0219 	bic.w	r2, r3, #25
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	68db      	ldr	r3, [r3, #12]
 8001d0e:	4929      	ldr	r1, [pc, #164]	; (8001db4 <HAL_RCC_OscConfig+0x288>)
 8001d10:	4313      	orrs	r3, r2
 8001d12:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d14:	f7ff f9f2 	bl	80010fc <HAL_GetTick>
 8001d18:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d1a:	e008      	b.n	8001d2e <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d1c:	f7ff f9ee 	bl	80010fc <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d901      	bls.n	8001d2e <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	e307      	b.n	800233e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d2e:	4b21      	ldr	r3, [pc, #132]	; (8001db4 <HAL_RCC_OscConfig+0x288>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0304 	and.w	r3, r3, #4
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d0f0      	beq.n	8001d1c <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d3a:	f7ff fa0f 	bl	800115c <HAL_GetREVID>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	f241 0203 	movw	r2, #4099	; 0x1003
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d817      	bhi.n	8001d78 <HAL_RCC_OscConfig+0x24c>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	691b      	ldr	r3, [r3, #16]
 8001d4c:	2b40      	cmp	r3, #64	; 0x40
 8001d4e:	d108      	bne.n	8001d62 <HAL_RCC_OscConfig+0x236>
 8001d50:	4b18      	ldr	r3, [pc, #96]	; (8001db4 <HAL_RCC_OscConfig+0x288>)
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001d58:	4a16      	ldr	r2, [pc, #88]	; (8001db4 <HAL_RCC_OscConfig+0x288>)
 8001d5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d5e:	6053      	str	r3, [r2, #4]
 8001d60:	e030      	b.n	8001dc4 <HAL_RCC_OscConfig+0x298>
 8001d62:	4b14      	ldr	r3, [pc, #80]	; (8001db4 <HAL_RCC_OscConfig+0x288>)
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	691b      	ldr	r3, [r3, #16]
 8001d6e:	031b      	lsls	r3, r3, #12
 8001d70:	4910      	ldr	r1, [pc, #64]	; (8001db4 <HAL_RCC_OscConfig+0x288>)
 8001d72:	4313      	orrs	r3, r2
 8001d74:	604b      	str	r3, [r1, #4]
 8001d76:	e025      	b.n	8001dc4 <HAL_RCC_OscConfig+0x298>
 8001d78:	4b0e      	ldr	r3, [pc, #56]	; (8001db4 <HAL_RCC_OscConfig+0x288>)
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	691b      	ldr	r3, [r3, #16]
 8001d84:	061b      	lsls	r3, r3, #24
 8001d86:	490b      	ldr	r1, [pc, #44]	; (8001db4 <HAL_RCC_OscConfig+0x288>)
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	604b      	str	r3, [r1, #4]
 8001d8c:	e01a      	b.n	8001dc4 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d8e:	4b09      	ldr	r3, [pc, #36]	; (8001db4 <HAL_RCC_OscConfig+0x288>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a08      	ldr	r2, [pc, #32]	; (8001db4 <HAL_RCC_OscConfig+0x288>)
 8001d94:	f023 0301 	bic.w	r3, r3, #1
 8001d98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d9a:	f7ff f9af 	bl	80010fc <HAL_GetTick>
 8001d9e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001da0:	e00a      	b.n	8001db8 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001da2:	f7ff f9ab 	bl	80010fc <HAL_GetTick>
 8001da6:	4602      	mov	r2, r0
 8001da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	d903      	bls.n	8001db8 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8001db0:	2303      	movs	r3, #3
 8001db2:	e2c4      	b.n	800233e <HAL_RCC_OscConfig+0x812>
 8001db4:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001db8:	4ba4      	ldr	r3, [pc, #656]	; (800204c <HAL_RCC_OscConfig+0x520>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 0304 	and.w	r3, r3, #4
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d1ee      	bne.n	8001da2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 0310 	and.w	r3, r3, #16
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	f000 80a9 	beq.w	8001f24 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dd2:	4b9e      	ldr	r3, [pc, #632]	; (800204c <HAL_RCC_OscConfig+0x520>)
 8001dd4:	691b      	ldr	r3, [r3, #16]
 8001dd6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001dda:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001ddc:	4b9b      	ldr	r3, [pc, #620]	; (800204c <HAL_RCC_OscConfig+0x520>)
 8001dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001de0:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001de2:	69bb      	ldr	r3, [r7, #24]
 8001de4:	2b08      	cmp	r3, #8
 8001de6:	d007      	beq.n	8001df8 <HAL_RCC_OscConfig+0x2cc>
 8001de8:	69bb      	ldr	r3, [r7, #24]
 8001dea:	2b18      	cmp	r3, #24
 8001dec:	d13a      	bne.n	8001e64 <HAL_RCC_OscConfig+0x338>
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	f003 0303 	and.w	r3, r3, #3
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d135      	bne.n	8001e64 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001df8:	4b94      	ldr	r3, [pc, #592]	; (800204c <HAL_RCC_OscConfig+0x520>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d005      	beq.n	8001e10 <HAL_RCC_OscConfig+0x2e4>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	69db      	ldr	r3, [r3, #28]
 8001e08:	2b80      	cmp	r3, #128	; 0x80
 8001e0a:	d001      	beq.n	8001e10 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e296      	b.n	800233e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001e10:	f7ff f9a4 	bl	800115c <HAL_GetREVID>
 8001e14:	4603      	mov	r3, r0
 8001e16:	f241 0203 	movw	r2, #4099	; 0x1003
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d817      	bhi.n	8001e4e <HAL_RCC_OscConfig+0x322>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6a1b      	ldr	r3, [r3, #32]
 8001e22:	2b20      	cmp	r3, #32
 8001e24:	d108      	bne.n	8001e38 <HAL_RCC_OscConfig+0x30c>
 8001e26:	4b89      	ldr	r3, [pc, #548]	; (800204c <HAL_RCC_OscConfig+0x520>)
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001e2e:	4a87      	ldr	r2, [pc, #540]	; (800204c <HAL_RCC_OscConfig+0x520>)
 8001e30:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001e34:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001e36:	e075      	b.n	8001f24 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001e38:	4b84      	ldr	r3, [pc, #528]	; (800204c <HAL_RCC_OscConfig+0x520>)
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6a1b      	ldr	r3, [r3, #32]
 8001e44:	069b      	lsls	r3, r3, #26
 8001e46:	4981      	ldr	r1, [pc, #516]	; (800204c <HAL_RCC_OscConfig+0x520>)
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001e4c:	e06a      	b.n	8001f24 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001e4e:	4b7f      	ldr	r3, [pc, #508]	; (800204c <HAL_RCC_OscConfig+0x520>)
 8001e50:	68db      	ldr	r3, [r3, #12]
 8001e52:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6a1b      	ldr	r3, [r3, #32]
 8001e5a:	061b      	lsls	r3, r3, #24
 8001e5c:	497b      	ldr	r1, [pc, #492]	; (800204c <HAL_RCC_OscConfig+0x520>)
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001e62:	e05f      	b.n	8001f24 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	69db      	ldr	r3, [r3, #28]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d042      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001e6c:	4b77      	ldr	r3, [pc, #476]	; (800204c <HAL_RCC_OscConfig+0x520>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a76      	ldr	r2, [pc, #472]	; (800204c <HAL_RCC_OscConfig+0x520>)
 8001e72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e78:	f7ff f940 	bl	80010fc <HAL_GetTick>
 8001e7c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001e7e:	e008      	b.n	8001e92 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001e80:	f7ff f93c 	bl	80010fc <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d901      	bls.n	8001e92 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e255      	b.n	800233e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001e92:	4b6e      	ldr	r3, [pc, #440]	; (800204c <HAL_RCC_OscConfig+0x520>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d0f0      	beq.n	8001e80 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001e9e:	f7ff f95d 	bl	800115c <HAL_GetREVID>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	f241 0203 	movw	r2, #4099	; 0x1003
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d817      	bhi.n	8001edc <HAL_RCC_OscConfig+0x3b0>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6a1b      	ldr	r3, [r3, #32]
 8001eb0:	2b20      	cmp	r3, #32
 8001eb2:	d108      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x39a>
 8001eb4:	4b65      	ldr	r3, [pc, #404]	; (800204c <HAL_RCC_OscConfig+0x520>)
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001ebc:	4a63      	ldr	r2, [pc, #396]	; (800204c <HAL_RCC_OscConfig+0x520>)
 8001ebe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001ec2:	6053      	str	r3, [r2, #4]
 8001ec4:	e02e      	b.n	8001f24 <HAL_RCC_OscConfig+0x3f8>
 8001ec6:	4b61      	ldr	r3, [pc, #388]	; (800204c <HAL_RCC_OscConfig+0x520>)
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6a1b      	ldr	r3, [r3, #32]
 8001ed2:	069b      	lsls	r3, r3, #26
 8001ed4:	495d      	ldr	r1, [pc, #372]	; (800204c <HAL_RCC_OscConfig+0x520>)
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	604b      	str	r3, [r1, #4]
 8001eda:	e023      	b.n	8001f24 <HAL_RCC_OscConfig+0x3f8>
 8001edc:	4b5b      	ldr	r3, [pc, #364]	; (800204c <HAL_RCC_OscConfig+0x520>)
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6a1b      	ldr	r3, [r3, #32]
 8001ee8:	061b      	lsls	r3, r3, #24
 8001eea:	4958      	ldr	r1, [pc, #352]	; (800204c <HAL_RCC_OscConfig+0x520>)
 8001eec:	4313      	orrs	r3, r2
 8001eee:	60cb      	str	r3, [r1, #12]
 8001ef0:	e018      	b.n	8001f24 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001ef2:	4b56      	ldr	r3, [pc, #344]	; (800204c <HAL_RCC_OscConfig+0x520>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a55      	ldr	r2, [pc, #340]	; (800204c <HAL_RCC_OscConfig+0x520>)
 8001ef8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001efc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001efe:	f7ff f8fd 	bl	80010fc <HAL_GetTick>
 8001f02:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001f04:	e008      	b.n	8001f18 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001f06:	f7ff f8f9 	bl	80010fc <HAL_GetTick>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	2b02      	cmp	r3, #2
 8001f12:	d901      	bls.n	8001f18 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8001f14:	2303      	movs	r3, #3
 8001f16:	e212      	b.n	800233e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001f18:	4b4c      	ldr	r3, [pc, #304]	; (800204c <HAL_RCC_OscConfig+0x520>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d1f0      	bne.n	8001f06 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 0308 	and.w	r3, r3, #8
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d036      	beq.n	8001f9e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	695b      	ldr	r3, [r3, #20]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d019      	beq.n	8001f6c <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f38:	4b44      	ldr	r3, [pc, #272]	; (800204c <HAL_RCC_OscConfig+0x520>)
 8001f3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f3c:	4a43      	ldr	r2, [pc, #268]	; (800204c <HAL_RCC_OscConfig+0x520>)
 8001f3e:	f043 0301 	orr.w	r3, r3, #1
 8001f42:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f44:	f7ff f8da 	bl	80010fc <HAL_GetTick>
 8001f48:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001f4a:	e008      	b.n	8001f5e <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f4c:	f7ff f8d6 	bl	80010fc <HAL_GetTick>
 8001f50:	4602      	mov	r2, r0
 8001f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d901      	bls.n	8001f5e <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	e1ef      	b.n	800233e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001f5e:	4b3b      	ldr	r3, [pc, #236]	; (800204c <HAL_RCC_OscConfig+0x520>)
 8001f60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f62:	f003 0302 	and.w	r3, r3, #2
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d0f0      	beq.n	8001f4c <HAL_RCC_OscConfig+0x420>
 8001f6a:	e018      	b.n	8001f9e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f6c:	4b37      	ldr	r3, [pc, #220]	; (800204c <HAL_RCC_OscConfig+0x520>)
 8001f6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f70:	4a36      	ldr	r2, [pc, #216]	; (800204c <HAL_RCC_OscConfig+0x520>)
 8001f72:	f023 0301 	bic.w	r3, r3, #1
 8001f76:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f78:	f7ff f8c0 	bl	80010fc <HAL_GetTick>
 8001f7c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001f7e:	e008      	b.n	8001f92 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f80:	f7ff f8bc 	bl	80010fc <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d901      	bls.n	8001f92 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e1d5      	b.n	800233e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001f92:	4b2e      	ldr	r3, [pc, #184]	; (800204c <HAL_RCC_OscConfig+0x520>)
 8001f94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f96:	f003 0302 	and.w	r3, r3, #2
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d1f0      	bne.n	8001f80 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0320 	and.w	r3, r3, #32
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d036      	beq.n	8002018 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	699b      	ldr	r3, [r3, #24]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d019      	beq.n	8001fe6 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001fb2:	4b26      	ldr	r3, [pc, #152]	; (800204c <HAL_RCC_OscConfig+0x520>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a25      	ldr	r2, [pc, #148]	; (800204c <HAL_RCC_OscConfig+0x520>)
 8001fb8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001fbc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001fbe:	f7ff f89d 	bl	80010fc <HAL_GetTick>
 8001fc2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001fc4:	e008      	b.n	8001fd8 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001fc6:	f7ff f899 	bl	80010fc <HAL_GetTick>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	2b02      	cmp	r3, #2
 8001fd2:	d901      	bls.n	8001fd8 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	e1b2      	b.n	800233e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001fd8:	4b1c      	ldr	r3, [pc, #112]	; (800204c <HAL_RCC_OscConfig+0x520>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d0f0      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x49a>
 8001fe4:	e018      	b.n	8002018 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001fe6:	4b19      	ldr	r3, [pc, #100]	; (800204c <HAL_RCC_OscConfig+0x520>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a18      	ldr	r2, [pc, #96]	; (800204c <HAL_RCC_OscConfig+0x520>)
 8001fec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001ff0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001ff2:	f7ff f883 	bl	80010fc <HAL_GetTick>
 8001ff6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001ff8:	e008      	b.n	800200c <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001ffa:	f7ff f87f 	bl	80010fc <HAL_GetTick>
 8001ffe:	4602      	mov	r2, r0
 8002000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002002:	1ad3      	subs	r3, r2, r3
 8002004:	2b02      	cmp	r3, #2
 8002006:	d901      	bls.n	800200c <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8002008:	2303      	movs	r3, #3
 800200a:	e198      	b.n	800233e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800200c:	4b0f      	ldr	r3, [pc, #60]	; (800204c <HAL_RCC_OscConfig+0x520>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002014:	2b00      	cmp	r3, #0
 8002016:	d1f0      	bne.n	8001ffa <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0304 	and.w	r3, r3, #4
 8002020:	2b00      	cmp	r3, #0
 8002022:	f000 8085 	beq.w	8002130 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002026:	4b0a      	ldr	r3, [pc, #40]	; (8002050 <HAL_RCC_OscConfig+0x524>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a09      	ldr	r2, [pc, #36]	; (8002050 <HAL_RCC_OscConfig+0x524>)
 800202c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002030:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002032:	f7ff f863 	bl	80010fc <HAL_GetTick>
 8002036:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002038:	e00c      	b.n	8002054 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800203a:	f7ff f85f 	bl	80010fc <HAL_GetTick>
 800203e:	4602      	mov	r2, r0
 8002040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	2b64      	cmp	r3, #100	; 0x64
 8002046:	d905      	bls.n	8002054 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8002048:	2303      	movs	r3, #3
 800204a:	e178      	b.n	800233e <HAL_RCC_OscConfig+0x812>
 800204c:	58024400 	.word	0x58024400
 8002050:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002054:	4b96      	ldr	r3, [pc, #600]	; (80022b0 <HAL_RCC_OscConfig+0x784>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800205c:	2b00      	cmp	r3, #0
 800205e:	d0ec      	beq.n	800203a <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	2b01      	cmp	r3, #1
 8002066:	d106      	bne.n	8002076 <HAL_RCC_OscConfig+0x54a>
 8002068:	4b92      	ldr	r3, [pc, #584]	; (80022b4 <HAL_RCC_OscConfig+0x788>)
 800206a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800206c:	4a91      	ldr	r2, [pc, #580]	; (80022b4 <HAL_RCC_OscConfig+0x788>)
 800206e:	f043 0301 	orr.w	r3, r3, #1
 8002072:	6713      	str	r3, [r2, #112]	; 0x70
 8002074:	e02d      	b.n	80020d2 <HAL_RCC_OscConfig+0x5a6>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d10c      	bne.n	8002098 <HAL_RCC_OscConfig+0x56c>
 800207e:	4b8d      	ldr	r3, [pc, #564]	; (80022b4 <HAL_RCC_OscConfig+0x788>)
 8002080:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002082:	4a8c      	ldr	r2, [pc, #560]	; (80022b4 <HAL_RCC_OscConfig+0x788>)
 8002084:	f023 0301 	bic.w	r3, r3, #1
 8002088:	6713      	str	r3, [r2, #112]	; 0x70
 800208a:	4b8a      	ldr	r3, [pc, #552]	; (80022b4 <HAL_RCC_OscConfig+0x788>)
 800208c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800208e:	4a89      	ldr	r2, [pc, #548]	; (80022b4 <HAL_RCC_OscConfig+0x788>)
 8002090:	f023 0304 	bic.w	r3, r3, #4
 8002094:	6713      	str	r3, [r2, #112]	; 0x70
 8002096:	e01c      	b.n	80020d2 <HAL_RCC_OscConfig+0x5a6>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	2b05      	cmp	r3, #5
 800209e:	d10c      	bne.n	80020ba <HAL_RCC_OscConfig+0x58e>
 80020a0:	4b84      	ldr	r3, [pc, #528]	; (80022b4 <HAL_RCC_OscConfig+0x788>)
 80020a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020a4:	4a83      	ldr	r2, [pc, #524]	; (80022b4 <HAL_RCC_OscConfig+0x788>)
 80020a6:	f043 0304 	orr.w	r3, r3, #4
 80020aa:	6713      	str	r3, [r2, #112]	; 0x70
 80020ac:	4b81      	ldr	r3, [pc, #516]	; (80022b4 <HAL_RCC_OscConfig+0x788>)
 80020ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020b0:	4a80      	ldr	r2, [pc, #512]	; (80022b4 <HAL_RCC_OscConfig+0x788>)
 80020b2:	f043 0301 	orr.w	r3, r3, #1
 80020b6:	6713      	str	r3, [r2, #112]	; 0x70
 80020b8:	e00b      	b.n	80020d2 <HAL_RCC_OscConfig+0x5a6>
 80020ba:	4b7e      	ldr	r3, [pc, #504]	; (80022b4 <HAL_RCC_OscConfig+0x788>)
 80020bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020be:	4a7d      	ldr	r2, [pc, #500]	; (80022b4 <HAL_RCC_OscConfig+0x788>)
 80020c0:	f023 0301 	bic.w	r3, r3, #1
 80020c4:	6713      	str	r3, [r2, #112]	; 0x70
 80020c6:	4b7b      	ldr	r3, [pc, #492]	; (80022b4 <HAL_RCC_OscConfig+0x788>)
 80020c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020ca:	4a7a      	ldr	r2, [pc, #488]	; (80022b4 <HAL_RCC_OscConfig+0x788>)
 80020cc:	f023 0304 	bic.w	r3, r3, #4
 80020d0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d015      	beq.n	8002106 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020da:	f7ff f80f 	bl	80010fc <HAL_GetTick>
 80020de:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80020e0:	e00a      	b.n	80020f8 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020e2:	f7ff f80b 	bl	80010fc <HAL_GetTick>
 80020e6:	4602      	mov	r2, r0
 80020e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ea:	1ad3      	subs	r3, r2, r3
 80020ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d901      	bls.n	80020f8 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 80020f4:	2303      	movs	r3, #3
 80020f6:	e122      	b.n	800233e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80020f8:	4b6e      	ldr	r3, [pc, #440]	; (80022b4 <HAL_RCC_OscConfig+0x788>)
 80020fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020fc:	f003 0302 	and.w	r3, r3, #2
 8002100:	2b00      	cmp	r3, #0
 8002102:	d0ee      	beq.n	80020e2 <HAL_RCC_OscConfig+0x5b6>
 8002104:	e014      	b.n	8002130 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002106:	f7fe fff9 	bl	80010fc <HAL_GetTick>
 800210a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800210c:	e00a      	b.n	8002124 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800210e:	f7fe fff5 	bl	80010fc <HAL_GetTick>
 8002112:	4602      	mov	r2, r0
 8002114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002116:	1ad3      	subs	r3, r2, r3
 8002118:	f241 3288 	movw	r2, #5000	; 0x1388
 800211c:	4293      	cmp	r3, r2
 800211e:	d901      	bls.n	8002124 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8002120:	2303      	movs	r3, #3
 8002122:	e10c      	b.n	800233e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002124:	4b63      	ldr	r3, [pc, #396]	; (80022b4 <HAL_RCC_OscConfig+0x788>)
 8002126:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002128:	f003 0302 	and.w	r3, r3, #2
 800212c:	2b00      	cmp	r3, #0
 800212e:	d1ee      	bne.n	800210e <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002134:	2b00      	cmp	r3, #0
 8002136:	f000 8101 	beq.w	800233c <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800213a:	4b5e      	ldr	r3, [pc, #376]	; (80022b4 <HAL_RCC_OscConfig+0x788>)
 800213c:	691b      	ldr	r3, [r3, #16]
 800213e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002142:	2b18      	cmp	r3, #24
 8002144:	f000 80bc 	beq.w	80022c0 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800214c:	2b02      	cmp	r3, #2
 800214e:	f040 8095 	bne.w	800227c <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002152:	4b58      	ldr	r3, [pc, #352]	; (80022b4 <HAL_RCC_OscConfig+0x788>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a57      	ldr	r2, [pc, #348]	; (80022b4 <HAL_RCC_OscConfig+0x788>)
 8002158:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800215c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800215e:	f7fe ffcd 	bl	80010fc <HAL_GetTick>
 8002162:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002164:	e008      	b.n	8002178 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002166:	f7fe ffc9 	bl	80010fc <HAL_GetTick>
 800216a:	4602      	mov	r2, r0
 800216c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216e:	1ad3      	subs	r3, r2, r3
 8002170:	2b02      	cmp	r3, #2
 8002172:	d901      	bls.n	8002178 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8002174:	2303      	movs	r3, #3
 8002176:	e0e2      	b.n	800233e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002178:	4b4e      	ldr	r3, [pc, #312]	; (80022b4 <HAL_RCC_OscConfig+0x788>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002180:	2b00      	cmp	r3, #0
 8002182:	d1f0      	bne.n	8002166 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002184:	4b4b      	ldr	r3, [pc, #300]	; (80022b4 <HAL_RCC_OscConfig+0x788>)
 8002186:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002188:	4b4b      	ldr	r3, [pc, #300]	; (80022b8 <HAL_RCC_OscConfig+0x78c>)
 800218a:	4013      	ands	r3, r2
 800218c:	687a      	ldr	r2, [r7, #4]
 800218e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002194:	0112      	lsls	r2, r2, #4
 8002196:	430a      	orrs	r2, r1
 8002198:	4946      	ldr	r1, [pc, #280]	; (80022b4 <HAL_RCC_OscConfig+0x788>)
 800219a:	4313      	orrs	r3, r2
 800219c:	628b      	str	r3, [r1, #40]	; 0x28
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a2:	3b01      	subs	r3, #1
 80021a4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021ac:	3b01      	subs	r3, #1
 80021ae:	025b      	lsls	r3, r3, #9
 80021b0:	b29b      	uxth	r3, r3
 80021b2:	431a      	orrs	r2, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021b8:	3b01      	subs	r3, #1
 80021ba:	041b      	lsls	r3, r3, #16
 80021bc:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80021c0:	431a      	orrs	r2, r3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021c6:	3b01      	subs	r3, #1
 80021c8:	061b      	lsls	r3, r3, #24
 80021ca:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80021ce:	4939      	ldr	r1, [pc, #228]	; (80022b4 <HAL_RCC_OscConfig+0x788>)
 80021d0:	4313      	orrs	r3, r2
 80021d2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80021d4:	4b37      	ldr	r3, [pc, #220]	; (80022b4 <HAL_RCC_OscConfig+0x788>)
 80021d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d8:	4a36      	ldr	r2, [pc, #216]	; (80022b4 <HAL_RCC_OscConfig+0x788>)
 80021da:	f023 0301 	bic.w	r3, r3, #1
 80021de:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80021e0:	4b34      	ldr	r3, [pc, #208]	; (80022b4 <HAL_RCC_OscConfig+0x788>)
 80021e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021e4:	4b35      	ldr	r3, [pc, #212]	; (80022bc <HAL_RCC_OscConfig+0x790>)
 80021e6:	4013      	ands	r3, r2
 80021e8:	687a      	ldr	r2, [r7, #4]
 80021ea:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80021ec:	00d2      	lsls	r2, r2, #3
 80021ee:	4931      	ldr	r1, [pc, #196]	; (80022b4 <HAL_RCC_OscConfig+0x788>)
 80021f0:	4313      	orrs	r3, r2
 80021f2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80021f4:	4b2f      	ldr	r3, [pc, #188]	; (80022b4 <HAL_RCC_OscConfig+0x788>)
 80021f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f8:	f023 020c 	bic.w	r2, r3, #12
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002200:	492c      	ldr	r1, [pc, #176]	; (80022b4 <HAL_RCC_OscConfig+0x788>)
 8002202:	4313      	orrs	r3, r2
 8002204:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002206:	4b2b      	ldr	r3, [pc, #172]	; (80022b4 <HAL_RCC_OscConfig+0x788>)
 8002208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800220a:	f023 0202 	bic.w	r2, r3, #2
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002212:	4928      	ldr	r1, [pc, #160]	; (80022b4 <HAL_RCC_OscConfig+0x788>)
 8002214:	4313      	orrs	r3, r2
 8002216:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002218:	4b26      	ldr	r3, [pc, #152]	; (80022b4 <HAL_RCC_OscConfig+0x788>)
 800221a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800221c:	4a25      	ldr	r2, [pc, #148]	; (80022b4 <HAL_RCC_OscConfig+0x788>)
 800221e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002222:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002224:	4b23      	ldr	r3, [pc, #140]	; (80022b4 <HAL_RCC_OscConfig+0x788>)
 8002226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002228:	4a22      	ldr	r2, [pc, #136]	; (80022b4 <HAL_RCC_OscConfig+0x788>)
 800222a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800222e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002230:	4b20      	ldr	r3, [pc, #128]	; (80022b4 <HAL_RCC_OscConfig+0x788>)
 8002232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002234:	4a1f      	ldr	r2, [pc, #124]	; (80022b4 <HAL_RCC_OscConfig+0x788>)
 8002236:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800223a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800223c:	4b1d      	ldr	r3, [pc, #116]	; (80022b4 <HAL_RCC_OscConfig+0x788>)
 800223e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002240:	4a1c      	ldr	r2, [pc, #112]	; (80022b4 <HAL_RCC_OscConfig+0x788>)
 8002242:	f043 0301 	orr.w	r3, r3, #1
 8002246:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002248:	4b1a      	ldr	r3, [pc, #104]	; (80022b4 <HAL_RCC_OscConfig+0x788>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a19      	ldr	r2, [pc, #100]	; (80022b4 <HAL_RCC_OscConfig+0x788>)
 800224e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002252:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002254:	f7fe ff52 	bl	80010fc <HAL_GetTick>
 8002258:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800225a:	e008      	b.n	800226e <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800225c:	f7fe ff4e 	bl	80010fc <HAL_GetTick>
 8002260:	4602      	mov	r2, r0
 8002262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	2b02      	cmp	r3, #2
 8002268:	d901      	bls.n	800226e <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 800226a:	2303      	movs	r3, #3
 800226c:	e067      	b.n	800233e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800226e:	4b11      	ldr	r3, [pc, #68]	; (80022b4 <HAL_RCC_OscConfig+0x788>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d0f0      	beq.n	800225c <HAL_RCC_OscConfig+0x730>
 800227a:	e05f      	b.n	800233c <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800227c:	4b0d      	ldr	r3, [pc, #52]	; (80022b4 <HAL_RCC_OscConfig+0x788>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a0c      	ldr	r2, [pc, #48]	; (80022b4 <HAL_RCC_OscConfig+0x788>)
 8002282:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002286:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002288:	f7fe ff38 	bl	80010fc <HAL_GetTick>
 800228c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800228e:	e008      	b.n	80022a2 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002290:	f7fe ff34 	bl	80010fc <HAL_GetTick>
 8002294:	4602      	mov	r2, r0
 8002296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	2b02      	cmp	r3, #2
 800229c:	d901      	bls.n	80022a2 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e04d      	b.n	800233e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80022a2:	4b04      	ldr	r3, [pc, #16]	; (80022b4 <HAL_RCC_OscConfig+0x788>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d1f0      	bne.n	8002290 <HAL_RCC_OscConfig+0x764>
 80022ae:	e045      	b.n	800233c <HAL_RCC_OscConfig+0x810>
 80022b0:	58024800 	.word	0x58024800
 80022b4:	58024400 	.word	0x58024400
 80022b8:	fffffc0c 	.word	0xfffffc0c
 80022bc:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80022c0:	4b21      	ldr	r3, [pc, #132]	; (8002348 <HAL_RCC_OscConfig+0x81c>)
 80022c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80022c6:	4b20      	ldr	r3, [pc, #128]	; (8002348 <HAL_RCC_OscConfig+0x81c>)
 80022c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ca:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d031      	beq.n	8002338 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	f003 0203 	and.w	r2, r3, #3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022de:	429a      	cmp	r2, r3
 80022e0:	d12a      	bne.n	8002338 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	091b      	lsrs	r3, r3, #4
 80022e6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d122      	bne.n	8002338 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fc:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80022fe:	429a      	cmp	r2, r3
 8002300:	d11a      	bne.n	8002338 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	0a5b      	lsrs	r3, r3, #9
 8002306:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800230e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002310:	429a      	cmp	r2, r3
 8002312:	d111      	bne.n	8002338 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	0c1b      	lsrs	r3, r3, #16
 8002318:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002320:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002322:	429a      	cmp	r2, r3
 8002324:	d108      	bne.n	8002338 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	0e1b      	lsrs	r3, r3, #24
 800232a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002332:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002334:	429a      	cmp	r2, r3
 8002336:	d001      	beq.n	800233c <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e000      	b.n	800233e <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 800233c:	2300      	movs	r3, #0
}
 800233e:	4618      	mov	r0, r3
 8002340:	3730      	adds	r7, #48	; 0x30
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	58024400 	.word	0x58024400

0800234c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b086      	sub	sp, #24
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d101      	bne.n	8002360 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e19c      	b.n	800269a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002360:	4b8a      	ldr	r3, [pc, #552]	; (800258c <HAL_RCC_ClockConfig+0x240>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 030f 	and.w	r3, r3, #15
 8002368:	683a      	ldr	r2, [r7, #0]
 800236a:	429a      	cmp	r2, r3
 800236c:	d910      	bls.n	8002390 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800236e:	4b87      	ldr	r3, [pc, #540]	; (800258c <HAL_RCC_ClockConfig+0x240>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f023 020f 	bic.w	r2, r3, #15
 8002376:	4985      	ldr	r1, [pc, #532]	; (800258c <HAL_RCC_ClockConfig+0x240>)
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	4313      	orrs	r3, r2
 800237c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800237e:	4b83      	ldr	r3, [pc, #524]	; (800258c <HAL_RCC_ClockConfig+0x240>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 030f 	and.w	r3, r3, #15
 8002386:	683a      	ldr	r2, [r7, #0]
 8002388:	429a      	cmp	r2, r3
 800238a:	d001      	beq.n	8002390 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	e184      	b.n	800269a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0304 	and.w	r3, r3, #4
 8002398:	2b00      	cmp	r3, #0
 800239a:	d010      	beq.n	80023be <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	691a      	ldr	r2, [r3, #16]
 80023a0:	4b7b      	ldr	r3, [pc, #492]	; (8002590 <HAL_RCC_ClockConfig+0x244>)
 80023a2:	699b      	ldr	r3, [r3, #24]
 80023a4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d908      	bls.n	80023be <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80023ac:	4b78      	ldr	r3, [pc, #480]	; (8002590 <HAL_RCC_ClockConfig+0x244>)
 80023ae:	699b      	ldr	r3, [r3, #24]
 80023b0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	691b      	ldr	r3, [r3, #16]
 80023b8:	4975      	ldr	r1, [pc, #468]	; (8002590 <HAL_RCC_ClockConfig+0x244>)
 80023ba:	4313      	orrs	r3, r2
 80023bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0308 	and.w	r3, r3, #8
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d010      	beq.n	80023ec <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	695a      	ldr	r2, [r3, #20]
 80023ce:	4b70      	ldr	r3, [pc, #448]	; (8002590 <HAL_RCC_ClockConfig+0x244>)
 80023d0:	69db      	ldr	r3, [r3, #28]
 80023d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d908      	bls.n	80023ec <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80023da:	4b6d      	ldr	r3, [pc, #436]	; (8002590 <HAL_RCC_ClockConfig+0x244>)
 80023dc:	69db      	ldr	r3, [r3, #28]
 80023de:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	695b      	ldr	r3, [r3, #20]
 80023e6:	496a      	ldr	r1, [pc, #424]	; (8002590 <HAL_RCC_ClockConfig+0x244>)
 80023e8:	4313      	orrs	r3, r2
 80023ea:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0310 	and.w	r3, r3, #16
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d010      	beq.n	800241a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	699a      	ldr	r2, [r3, #24]
 80023fc:	4b64      	ldr	r3, [pc, #400]	; (8002590 <HAL_RCC_ClockConfig+0x244>)
 80023fe:	69db      	ldr	r3, [r3, #28]
 8002400:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002404:	429a      	cmp	r2, r3
 8002406:	d908      	bls.n	800241a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002408:	4b61      	ldr	r3, [pc, #388]	; (8002590 <HAL_RCC_ClockConfig+0x244>)
 800240a:	69db      	ldr	r3, [r3, #28]
 800240c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	699b      	ldr	r3, [r3, #24]
 8002414:	495e      	ldr	r1, [pc, #376]	; (8002590 <HAL_RCC_ClockConfig+0x244>)
 8002416:	4313      	orrs	r3, r2
 8002418:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0320 	and.w	r3, r3, #32
 8002422:	2b00      	cmp	r3, #0
 8002424:	d010      	beq.n	8002448 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	69da      	ldr	r2, [r3, #28]
 800242a:	4b59      	ldr	r3, [pc, #356]	; (8002590 <HAL_RCC_ClockConfig+0x244>)
 800242c:	6a1b      	ldr	r3, [r3, #32]
 800242e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002432:	429a      	cmp	r2, r3
 8002434:	d908      	bls.n	8002448 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002436:	4b56      	ldr	r3, [pc, #344]	; (8002590 <HAL_RCC_ClockConfig+0x244>)
 8002438:	6a1b      	ldr	r3, [r3, #32]
 800243a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	69db      	ldr	r3, [r3, #28]
 8002442:	4953      	ldr	r1, [pc, #332]	; (8002590 <HAL_RCC_ClockConfig+0x244>)
 8002444:	4313      	orrs	r3, r2
 8002446:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0302 	and.w	r3, r3, #2
 8002450:	2b00      	cmp	r3, #0
 8002452:	d010      	beq.n	8002476 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	68da      	ldr	r2, [r3, #12]
 8002458:	4b4d      	ldr	r3, [pc, #308]	; (8002590 <HAL_RCC_ClockConfig+0x244>)
 800245a:	699b      	ldr	r3, [r3, #24]
 800245c:	f003 030f 	and.w	r3, r3, #15
 8002460:	429a      	cmp	r2, r3
 8002462:	d908      	bls.n	8002476 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002464:	4b4a      	ldr	r3, [pc, #296]	; (8002590 <HAL_RCC_ClockConfig+0x244>)
 8002466:	699b      	ldr	r3, [r3, #24]
 8002468:	f023 020f 	bic.w	r2, r3, #15
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	4947      	ldr	r1, [pc, #284]	; (8002590 <HAL_RCC_ClockConfig+0x244>)
 8002472:	4313      	orrs	r3, r2
 8002474:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0301 	and.w	r3, r3, #1
 800247e:	2b00      	cmp	r3, #0
 8002480:	d055      	beq.n	800252e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002482:	4b43      	ldr	r3, [pc, #268]	; (8002590 <HAL_RCC_ClockConfig+0x244>)
 8002484:	699b      	ldr	r3, [r3, #24]
 8002486:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	4940      	ldr	r1, [pc, #256]	; (8002590 <HAL_RCC_ClockConfig+0x244>)
 8002490:	4313      	orrs	r3, r2
 8002492:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	2b02      	cmp	r3, #2
 800249a:	d107      	bne.n	80024ac <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800249c:	4b3c      	ldr	r3, [pc, #240]	; (8002590 <HAL_RCC_ClockConfig+0x244>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d121      	bne.n	80024ec <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e0f6      	b.n	800269a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	2b03      	cmp	r3, #3
 80024b2:	d107      	bne.n	80024c4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80024b4:	4b36      	ldr	r3, [pc, #216]	; (8002590 <HAL_RCC_ClockConfig+0x244>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d115      	bne.n	80024ec <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e0ea      	b.n	800269a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d107      	bne.n	80024dc <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80024cc:	4b30      	ldr	r3, [pc, #192]	; (8002590 <HAL_RCC_ClockConfig+0x244>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d109      	bne.n	80024ec <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e0de      	b.n	800269a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80024dc:	4b2c      	ldr	r3, [pc, #176]	; (8002590 <HAL_RCC_ClockConfig+0x244>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 0304 	and.w	r3, r3, #4
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d101      	bne.n	80024ec <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e0d6      	b.n	800269a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80024ec:	4b28      	ldr	r3, [pc, #160]	; (8002590 <HAL_RCC_ClockConfig+0x244>)
 80024ee:	691b      	ldr	r3, [r3, #16]
 80024f0:	f023 0207 	bic.w	r2, r3, #7
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	4925      	ldr	r1, [pc, #148]	; (8002590 <HAL_RCC_ClockConfig+0x244>)
 80024fa:	4313      	orrs	r3, r2
 80024fc:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024fe:	f7fe fdfd 	bl	80010fc <HAL_GetTick>
 8002502:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002504:	e00a      	b.n	800251c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002506:	f7fe fdf9 	bl	80010fc <HAL_GetTick>
 800250a:	4602      	mov	r2, r0
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	f241 3288 	movw	r2, #5000	; 0x1388
 8002514:	4293      	cmp	r3, r2
 8002516:	d901      	bls.n	800251c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002518:	2303      	movs	r3, #3
 800251a:	e0be      	b.n	800269a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800251c:	4b1c      	ldr	r3, [pc, #112]	; (8002590 <HAL_RCC_ClockConfig+0x244>)
 800251e:	691b      	ldr	r3, [r3, #16]
 8002520:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	00db      	lsls	r3, r3, #3
 800252a:	429a      	cmp	r2, r3
 800252c:	d1eb      	bne.n	8002506 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0302 	and.w	r3, r3, #2
 8002536:	2b00      	cmp	r3, #0
 8002538:	d010      	beq.n	800255c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	68da      	ldr	r2, [r3, #12]
 800253e:	4b14      	ldr	r3, [pc, #80]	; (8002590 <HAL_RCC_ClockConfig+0x244>)
 8002540:	699b      	ldr	r3, [r3, #24]
 8002542:	f003 030f 	and.w	r3, r3, #15
 8002546:	429a      	cmp	r2, r3
 8002548:	d208      	bcs.n	800255c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800254a:	4b11      	ldr	r3, [pc, #68]	; (8002590 <HAL_RCC_ClockConfig+0x244>)
 800254c:	699b      	ldr	r3, [r3, #24]
 800254e:	f023 020f 	bic.w	r2, r3, #15
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	490e      	ldr	r1, [pc, #56]	; (8002590 <HAL_RCC_ClockConfig+0x244>)
 8002558:	4313      	orrs	r3, r2
 800255a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800255c:	4b0b      	ldr	r3, [pc, #44]	; (800258c <HAL_RCC_ClockConfig+0x240>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 030f 	and.w	r3, r3, #15
 8002564:	683a      	ldr	r2, [r7, #0]
 8002566:	429a      	cmp	r2, r3
 8002568:	d214      	bcs.n	8002594 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800256a:	4b08      	ldr	r3, [pc, #32]	; (800258c <HAL_RCC_ClockConfig+0x240>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f023 020f 	bic.w	r2, r3, #15
 8002572:	4906      	ldr	r1, [pc, #24]	; (800258c <HAL_RCC_ClockConfig+0x240>)
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	4313      	orrs	r3, r2
 8002578:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800257a:	4b04      	ldr	r3, [pc, #16]	; (800258c <HAL_RCC_ClockConfig+0x240>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 030f 	and.w	r3, r3, #15
 8002582:	683a      	ldr	r2, [r7, #0]
 8002584:	429a      	cmp	r2, r3
 8002586:	d005      	beq.n	8002594 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e086      	b.n	800269a <HAL_RCC_ClockConfig+0x34e>
 800258c:	52002000 	.word	0x52002000
 8002590:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0304 	and.w	r3, r3, #4
 800259c:	2b00      	cmp	r3, #0
 800259e:	d010      	beq.n	80025c2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	691a      	ldr	r2, [r3, #16]
 80025a4:	4b3f      	ldr	r3, [pc, #252]	; (80026a4 <HAL_RCC_ClockConfig+0x358>)
 80025a6:	699b      	ldr	r3, [r3, #24]
 80025a8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d208      	bcs.n	80025c2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80025b0:	4b3c      	ldr	r3, [pc, #240]	; (80026a4 <HAL_RCC_ClockConfig+0x358>)
 80025b2:	699b      	ldr	r3, [r3, #24]
 80025b4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	691b      	ldr	r3, [r3, #16]
 80025bc:	4939      	ldr	r1, [pc, #228]	; (80026a4 <HAL_RCC_ClockConfig+0x358>)
 80025be:	4313      	orrs	r3, r2
 80025c0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 0308 	and.w	r3, r3, #8
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d010      	beq.n	80025f0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	695a      	ldr	r2, [r3, #20]
 80025d2:	4b34      	ldr	r3, [pc, #208]	; (80026a4 <HAL_RCC_ClockConfig+0x358>)
 80025d4:	69db      	ldr	r3, [r3, #28]
 80025d6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80025da:	429a      	cmp	r2, r3
 80025dc:	d208      	bcs.n	80025f0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80025de:	4b31      	ldr	r3, [pc, #196]	; (80026a4 <HAL_RCC_ClockConfig+0x358>)
 80025e0:	69db      	ldr	r3, [r3, #28]
 80025e2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	695b      	ldr	r3, [r3, #20]
 80025ea:	492e      	ldr	r1, [pc, #184]	; (80026a4 <HAL_RCC_ClockConfig+0x358>)
 80025ec:	4313      	orrs	r3, r2
 80025ee:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0310 	and.w	r3, r3, #16
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d010      	beq.n	800261e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	699a      	ldr	r2, [r3, #24]
 8002600:	4b28      	ldr	r3, [pc, #160]	; (80026a4 <HAL_RCC_ClockConfig+0x358>)
 8002602:	69db      	ldr	r3, [r3, #28]
 8002604:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002608:	429a      	cmp	r2, r3
 800260a:	d208      	bcs.n	800261e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800260c:	4b25      	ldr	r3, [pc, #148]	; (80026a4 <HAL_RCC_ClockConfig+0x358>)
 800260e:	69db      	ldr	r3, [r3, #28]
 8002610:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	699b      	ldr	r3, [r3, #24]
 8002618:	4922      	ldr	r1, [pc, #136]	; (80026a4 <HAL_RCC_ClockConfig+0x358>)
 800261a:	4313      	orrs	r3, r2
 800261c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0320 	and.w	r3, r3, #32
 8002626:	2b00      	cmp	r3, #0
 8002628:	d010      	beq.n	800264c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	69da      	ldr	r2, [r3, #28]
 800262e:	4b1d      	ldr	r3, [pc, #116]	; (80026a4 <HAL_RCC_ClockConfig+0x358>)
 8002630:	6a1b      	ldr	r3, [r3, #32]
 8002632:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002636:	429a      	cmp	r2, r3
 8002638:	d208      	bcs.n	800264c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800263a:	4b1a      	ldr	r3, [pc, #104]	; (80026a4 <HAL_RCC_ClockConfig+0x358>)
 800263c:	6a1b      	ldr	r3, [r3, #32]
 800263e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	69db      	ldr	r3, [r3, #28]
 8002646:	4917      	ldr	r1, [pc, #92]	; (80026a4 <HAL_RCC_ClockConfig+0x358>)
 8002648:	4313      	orrs	r3, r2
 800264a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800264c:	f000 f834 	bl	80026b8 <HAL_RCC_GetSysClockFreq>
 8002650:	4602      	mov	r2, r0
 8002652:	4b14      	ldr	r3, [pc, #80]	; (80026a4 <HAL_RCC_ClockConfig+0x358>)
 8002654:	699b      	ldr	r3, [r3, #24]
 8002656:	0a1b      	lsrs	r3, r3, #8
 8002658:	f003 030f 	and.w	r3, r3, #15
 800265c:	4912      	ldr	r1, [pc, #72]	; (80026a8 <HAL_RCC_ClockConfig+0x35c>)
 800265e:	5ccb      	ldrb	r3, [r1, r3]
 8002660:	f003 031f 	and.w	r3, r3, #31
 8002664:	fa22 f303 	lsr.w	r3, r2, r3
 8002668:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800266a:	4b0e      	ldr	r3, [pc, #56]	; (80026a4 <HAL_RCC_ClockConfig+0x358>)
 800266c:	699b      	ldr	r3, [r3, #24]
 800266e:	f003 030f 	and.w	r3, r3, #15
 8002672:	4a0d      	ldr	r2, [pc, #52]	; (80026a8 <HAL_RCC_ClockConfig+0x35c>)
 8002674:	5cd3      	ldrb	r3, [r2, r3]
 8002676:	f003 031f 	and.w	r3, r3, #31
 800267a:	693a      	ldr	r2, [r7, #16]
 800267c:	fa22 f303 	lsr.w	r3, r2, r3
 8002680:	4a0a      	ldr	r2, [pc, #40]	; (80026ac <HAL_RCC_ClockConfig+0x360>)
 8002682:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002684:	4a0a      	ldr	r2, [pc, #40]	; (80026b0 <HAL_RCC_ClockConfig+0x364>)
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800268a:	4b0a      	ldr	r3, [pc, #40]	; (80026b4 <HAL_RCC_ClockConfig+0x368>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4618      	mov	r0, r3
 8002690:	f7fe fcea 	bl	8001068 <HAL_InitTick>
 8002694:	4603      	mov	r3, r0
 8002696:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002698:	7bfb      	ldrb	r3, [r7, #15]
}
 800269a:	4618      	mov	r0, r3
 800269c:	3718      	adds	r7, #24
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	58024400 	.word	0x58024400
 80026a8:	08005754 	.word	0x08005754
 80026ac:	24000004 	.word	0x24000004
 80026b0:	24000000 	.word	0x24000000
 80026b4:	24000008 	.word	0x24000008

080026b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b089      	sub	sp, #36	; 0x24
 80026bc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026be:	4bb3      	ldr	r3, [pc, #716]	; (800298c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026c0:	691b      	ldr	r3, [r3, #16]
 80026c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80026c6:	2b18      	cmp	r3, #24
 80026c8:	f200 8155 	bhi.w	8002976 <HAL_RCC_GetSysClockFreq+0x2be>
 80026cc:	a201      	add	r2, pc, #4	; (adr r2, 80026d4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80026ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026d2:	bf00      	nop
 80026d4:	08002739 	.word	0x08002739
 80026d8:	08002977 	.word	0x08002977
 80026dc:	08002977 	.word	0x08002977
 80026e0:	08002977 	.word	0x08002977
 80026e4:	08002977 	.word	0x08002977
 80026e8:	08002977 	.word	0x08002977
 80026ec:	08002977 	.word	0x08002977
 80026f0:	08002977 	.word	0x08002977
 80026f4:	0800275f 	.word	0x0800275f
 80026f8:	08002977 	.word	0x08002977
 80026fc:	08002977 	.word	0x08002977
 8002700:	08002977 	.word	0x08002977
 8002704:	08002977 	.word	0x08002977
 8002708:	08002977 	.word	0x08002977
 800270c:	08002977 	.word	0x08002977
 8002710:	08002977 	.word	0x08002977
 8002714:	08002765 	.word	0x08002765
 8002718:	08002977 	.word	0x08002977
 800271c:	08002977 	.word	0x08002977
 8002720:	08002977 	.word	0x08002977
 8002724:	08002977 	.word	0x08002977
 8002728:	08002977 	.word	0x08002977
 800272c:	08002977 	.word	0x08002977
 8002730:	08002977 	.word	0x08002977
 8002734:	0800276b 	.word	0x0800276b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002738:	4b94      	ldr	r3, [pc, #592]	; (800298c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0320 	and.w	r3, r3, #32
 8002740:	2b00      	cmp	r3, #0
 8002742:	d009      	beq.n	8002758 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002744:	4b91      	ldr	r3, [pc, #580]	; (800298c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	08db      	lsrs	r3, r3, #3
 800274a:	f003 0303 	and.w	r3, r3, #3
 800274e:	4a90      	ldr	r2, [pc, #576]	; (8002990 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002750:	fa22 f303 	lsr.w	r3, r2, r3
 8002754:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8002756:	e111      	b.n	800297c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002758:	4b8d      	ldr	r3, [pc, #564]	; (8002990 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800275a:	61bb      	str	r3, [r7, #24]
    break;
 800275c:	e10e      	b.n	800297c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800275e:	4b8d      	ldr	r3, [pc, #564]	; (8002994 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002760:	61bb      	str	r3, [r7, #24]
    break;
 8002762:	e10b      	b.n	800297c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002764:	4b8c      	ldr	r3, [pc, #560]	; (8002998 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002766:	61bb      	str	r3, [r7, #24]
    break;
 8002768:	e108      	b.n	800297c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800276a:	4b88      	ldr	r3, [pc, #544]	; (800298c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800276c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800276e:	f003 0303 	and.w	r3, r3, #3
 8002772:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002774:	4b85      	ldr	r3, [pc, #532]	; (800298c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002778:	091b      	lsrs	r3, r3, #4
 800277a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800277e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002780:	4b82      	ldr	r3, [pc, #520]	; (800298c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002784:	f003 0301 	and.w	r3, r3, #1
 8002788:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800278a:	4b80      	ldr	r3, [pc, #512]	; (800298c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800278c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800278e:	08db      	lsrs	r3, r3, #3
 8002790:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002794:	68fa      	ldr	r2, [r7, #12]
 8002796:	fb02 f303 	mul.w	r3, r2, r3
 800279a:	ee07 3a90 	vmov	s15, r3
 800279e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027a2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	f000 80e1 	beq.w	8002970 <HAL_RCC_GetSysClockFreq+0x2b8>
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	f000 8083 	beq.w	80028bc <HAL_RCC_GetSysClockFreq+0x204>
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	f200 80a1 	bhi.w	8002900 <HAL_RCC_GetSysClockFreq+0x248>
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d003      	beq.n	80027cc <HAL_RCC_GetSysClockFreq+0x114>
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d056      	beq.n	8002878 <HAL_RCC_GetSysClockFreq+0x1c0>
 80027ca:	e099      	b.n	8002900 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80027cc:	4b6f      	ldr	r3, [pc, #444]	; (800298c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0320 	and.w	r3, r3, #32
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d02d      	beq.n	8002834 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80027d8:	4b6c      	ldr	r3, [pc, #432]	; (800298c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	08db      	lsrs	r3, r3, #3
 80027de:	f003 0303 	and.w	r3, r3, #3
 80027e2:	4a6b      	ldr	r2, [pc, #428]	; (8002990 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80027e4:	fa22 f303 	lsr.w	r3, r2, r3
 80027e8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	ee07 3a90 	vmov	s15, r3
 80027f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	ee07 3a90 	vmov	s15, r3
 80027fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002802:	4b62      	ldr	r3, [pc, #392]	; (800298c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002806:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800280a:	ee07 3a90 	vmov	s15, r3
 800280e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002812:	ed97 6a02 	vldr	s12, [r7, #8]
 8002816:	eddf 5a61 	vldr	s11, [pc, #388]	; 800299c <HAL_RCC_GetSysClockFreq+0x2e4>
 800281a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800281e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002822:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002826:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800282a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800282e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8002832:	e087      	b.n	8002944 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	ee07 3a90 	vmov	s15, r3
 800283a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800283e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80029a0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002842:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002846:	4b51      	ldr	r3, [pc, #324]	; (800298c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800284e:	ee07 3a90 	vmov	s15, r3
 8002852:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002856:	ed97 6a02 	vldr	s12, [r7, #8]
 800285a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800299c <HAL_RCC_GetSysClockFreq+0x2e4>
 800285e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002862:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002866:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800286a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800286e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002872:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002876:	e065      	b.n	8002944 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	ee07 3a90 	vmov	s15, r3
 800287e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002882:	eddf 6a48 	vldr	s13, [pc, #288]	; 80029a4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002886:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800288a:	4b40      	ldr	r3, [pc, #256]	; (800298c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800288c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002892:	ee07 3a90 	vmov	s15, r3
 8002896:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800289a:	ed97 6a02 	vldr	s12, [r7, #8]
 800289e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800299c <HAL_RCC_GetSysClockFreq+0x2e4>
 80028a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80028a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80028aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80028ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80028b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80028ba:	e043      	b.n	8002944 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	ee07 3a90 	vmov	s15, r3
 80028c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028c6:	eddf 6a38 	vldr	s13, [pc, #224]	; 80029a8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80028ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80028ce:	4b2f      	ldr	r3, [pc, #188]	; (800298c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028d6:	ee07 3a90 	vmov	s15, r3
 80028da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80028de:	ed97 6a02 	vldr	s12, [r7, #8]
 80028e2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800299c <HAL_RCC_GetSysClockFreq+0x2e4>
 80028e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80028ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80028ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80028f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80028f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80028fe:	e021      	b.n	8002944 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	ee07 3a90 	vmov	s15, r3
 8002906:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800290a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80029a4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800290e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002912:	4b1e      	ldr	r3, [pc, #120]	; (800298c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002916:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800291a:	ee07 3a90 	vmov	s15, r3
 800291e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002922:	ed97 6a02 	vldr	s12, [r7, #8]
 8002926:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800299c <HAL_RCC_GetSysClockFreq+0x2e4>
 800292a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800292e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002932:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002936:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800293a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800293e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002942:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002944:	4b11      	ldr	r3, [pc, #68]	; (800298c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002948:	0a5b      	lsrs	r3, r3, #9
 800294a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800294e:	3301      	adds	r3, #1
 8002950:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	ee07 3a90 	vmov	s15, r3
 8002958:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800295c:	edd7 6a07 	vldr	s13, [r7, #28]
 8002960:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002964:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002968:	ee17 3a90 	vmov	r3, s15
 800296c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800296e:	e005      	b.n	800297c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8002970:	2300      	movs	r3, #0
 8002972:	61bb      	str	r3, [r7, #24]
    break;
 8002974:	e002      	b.n	800297c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8002976:	4b07      	ldr	r3, [pc, #28]	; (8002994 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002978:	61bb      	str	r3, [r7, #24]
    break;
 800297a:	bf00      	nop
  }

  return sysclockfreq;
 800297c:	69bb      	ldr	r3, [r7, #24]
}
 800297e:	4618      	mov	r0, r3
 8002980:	3724      	adds	r7, #36	; 0x24
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr
 800298a:	bf00      	nop
 800298c:	58024400 	.word	0x58024400
 8002990:	03d09000 	.word	0x03d09000
 8002994:	003d0900 	.word	0x003d0900
 8002998:	007a1200 	.word	0x007a1200
 800299c:	46000000 	.word	0x46000000
 80029a0:	4c742400 	.word	0x4c742400
 80029a4:	4a742400 	.word	0x4a742400
 80029a8:	4af42400 	.word	0x4af42400

080029ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b082      	sub	sp, #8
 80029b0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80029b2:	f7ff fe81 	bl	80026b8 <HAL_RCC_GetSysClockFreq>
 80029b6:	4602      	mov	r2, r0
 80029b8:	4b10      	ldr	r3, [pc, #64]	; (80029fc <HAL_RCC_GetHCLKFreq+0x50>)
 80029ba:	699b      	ldr	r3, [r3, #24]
 80029bc:	0a1b      	lsrs	r3, r3, #8
 80029be:	f003 030f 	and.w	r3, r3, #15
 80029c2:	490f      	ldr	r1, [pc, #60]	; (8002a00 <HAL_RCC_GetHCLKFreq+0x54>)
 80029c4:	5ccb      	ldrb	r3, [r1, r3]
 80029c6:	f003 031f 	and.w	r3, r3, #31
 80029ca:	fa22 f303 	lsr.w	r3, r2, r3
 80029ce:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80029d0:	4b0a      	ldr	r3, [pc, #40]	; (80029fc <HAL_RCC_GetHCLKFreq+0x50>)
 80029d2:	699b      	ldr	r3, [r3, #24]
 80029d4:	f003 030f 	and.w	r3, r3, #15
 80029d8:	4a09      	ldr	r2, [pc, #36]	; (8002a00 <HAL_RCC_GetHCLKFreq+0x54>)
 80029da:	5cd3      	ldrb	r3, [r2, r3]
 80029dc:	f003 031f 	and.w	r3, r3, #31
 80029e0:	687a      	ldr	r2, [r7, #4]
 80029e2:	fa22 f303 	lsr.w	r3, r2, r3
 80029e6:	4a07      	ldr	r2, [pc, #28]	; (8002a04 <HAL_RCC_GetHCLKFreq+0x58>)
 80029e8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80029ea:	4a07      	ldr	r2, [pc, #28]	; (8002a08 <HAL_RCC_GetHCLKFreq+0x5c>)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80029f0:	4b04      	ldr	r3, [pc, #16]	; (8002a04 <HAL_RCC_GetHCLKFreq+0x58>)
 80029f2:	681b      	ldr	r3, [r3, #0]
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3708      	adds	r7, #8
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	58024400 	.word	0x58024400
 8002a00:	08005754 	.word	0x08005754
 8002a04:	24000004 	.word	0x24000004
 8002a08:	24000000 	.word	0x24000000

08002a0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002a10:	f7ff ffcc 	bl	80029ac <HAL_RCC_GetHCLKFreq>
 8002a14:	4602      	mov	r2, r0
 8002a16:	4b06      	ldr	r3, [pc, #24]	; (8002a30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a18:	69db      	ldr	r3, [r3, #28]
 8002a1a:	091b      	lsrs	r3, r3, #4
 8002a1c:	f003 0307 	and.w	r3, r3, #7
 8002a20:	4904      	ldr	r1, [pc, #16]	; (8002a34 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002a22:	5ccb      	ldrb	r3, [r1, r3]
 8002a24:	f003 031f 	and.w	r3, r3, #31
 8002a28:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	58024400 	.word	0x58024400
 8002a34:	08005754 	.word	0x08005754

08002a38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002a3c:	f7ff ffb6 	bl	80029ac <HAL_RCC_GetHCLKFreq>
 8002a40:	4602      	mov	r2, r0
 8002a42:	4b06      	ldr	r3, [pc, #24]	; (8002a5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a44:	69db      	ldr	r3, [r3, #28]
 8002a46:	0a1b      	lsrs	r3, r3, #8
 8002a48:	f003 0307 	and.w	r3, r3, #7
 8002a4c:	4904      	ldr	r1, [pc, #16]	; (8002a60 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002a4e:	5ccb      	ldrb	r3, [r1, r3]
 8002a50:	f003 031f 	and.w	r3, r3, #31
 8002a54:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	58024400 	.word	0x58024400
 8002a60:	08005754 	.word	0x08005754

08002a64 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b086      	sub	sp, #24
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002a70:	2300      	movs	r3, #0
 8002a72:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d03f      	beq.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a84:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002a88:	d02a      	beq.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002a8a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002a8e:	d824      	bhi.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002a90:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a94:	d018      	beq.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002a96:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a9a:	d81e      	bhi.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d003      	beq.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002aa0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002aa4:	d007      	beq.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002aa6:	e018      	b.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002aa8:	4bab      	ldr	r3, [pc, #684]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aac:	4aaa      	ldr	r2, [pc, #680]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002aae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ab2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002ab4:	e015      	b.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	3304      	adds	r3, #4
 8002aba:	2102      	movs	r1, #2
 8002abc:	4618      	mov	r0, r3
 8002abe:	f001 f9cf 	bl	8003e60 <RCCEx_PLL2_Config>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002ac6:	e00c      	b.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	3324      	adds	r3, #36	; 0x24
 8002acc:	2102      	movs	r1, #2
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f001 fa78 	bl	8003fc4 <RCCEx_PLL3_Config>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002ad8:	e003      	b.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	75fb      	strb	r3, [r7, #23]
      break;
 8002ade:	e000      	b.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002ae0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ae2:	7dfb      	ldrb	r3, [r7, #23]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d109      	bne.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002ae8:	4b9b      	ldr	r3, [pc, #620]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002aea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002aec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002af4:	4998      	ldr	r1, [pc, #608]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002af6:	4313      	orrs	r3, r2
 8002af8:	650b      	str	r3, [r1, #80]	; 0x50
 8002afa:	e001      	b.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002afc:	7dfb      	ldrb	r3, [r7, #23]
 8002afe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d03d      	beq.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b10:	2b04      	cmp	r3, #4
 8002b12:	d826      	bhi.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002b14:	a201      	add	r2, pc, #4	; (adr r2, 8002b1c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8002b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b1a:	bf00      	nop
 8002b1c:	08002b31 	.word	0x08002b31
 8002b20:	08002b3f 	.word	0x08002b3f
 8002b24:	08002b51 	.word	0x08002b51
 8002b28:	08002b69 	.word	0x08002b69
 8002b2c:	08002b69 	.word	0x08002b69
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b30:	4b89      	ldr	r3, [pc, #548]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b34:	4a88      	ldr	r2, [pc, #544]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002b36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b3a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002b3c:	e015      	b.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	3304      	adds	r3, #4
 8002b42:	2100      	movs	r1, #0
 8002b44:	4618      	mov	r0, r3
 8002b46:	f001 f98b 	bl	8003e60 <RCCEx_PLL2_Config>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002b4e:	e00c      	b.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	3324      	adds	r3, #36	; 0x24
 8002b54:	2100      	movs	r1, #0
 8002b56:	4618      	mov	r0, r3
 8002b58:	f001 fa34 	bl	8003fc4 <RCCEx_PLL3_Config>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002b60:	e003      	b.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	75fb      	strb	r3, [r7, #23]
      break;
 8002b66:	e000      	b.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002b68:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b6a:	7dfb      	ldrb	r3, [r7, #23]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d109      	bne.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b70:	4b79      	ldr	r3, [pc, #484]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002b72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b74:	f023 0207 	bic.w	r2, r3, #7
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b7c:	4976      	ldr	r1, [pc, #472]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	650b      	str	r3, [r1, #80]	; 0x50
 8002b82:	e001      	b.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b84:	7dfb      	ldrb	r3, [r7, #23]
 8002b86:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d042      	beq.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b9c:	d02b      	beq.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8002b9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ba2:	d825      	bhi.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002ba4:	2bc0      	cmp	r3, #192	; 0xc0
 8002ba6:	d028      	beq.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002ba8:	2bc0      	cmp	r3, #192	; 0xc0
 8002baa:	d821      	bhi.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002bac:	2b80      	cmp	r3, #128	; 0x80
 8002bae:	d016      	beq.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8002bb0:	2b80      	cmp	r3, #128	; 0x80
 8002bb2:	d81d      	bhi.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d002      	beq.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8002bb8:	2b40      	cmp	r3, #64	; 0x40
 8002bba:	d007      	beq.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x168>
 8002bbc:	e018      	b.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002bbe:	4b66      	ldr	r3, [pc, #408]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc2:	4a65      	ldr	r2, [pc, #404]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002bc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bc8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002bca:	e017      	b.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	3304      	adds	r3, #4
 8002bd0:	2100      	movs	r1, #0
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f001 f944 	bl	8003e60 <RCCEx_PLL2_Config>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002bdc:	e00e      	b.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	3324      	adds	r3, #36	; 0x24
 8002be2:	2100      	movs	r1, #0
 8002be4:	4618      	mov	r0, r3
 8002be6:	f001 f9ed 	bl	8003fc4 <RCCEx_PLL3_Config>
 8002bea:	4603      	mov	r3, r0
 8002bec:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002bee:	e005      	b.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	75fb      	strb	r3, [r7, #23]
      break;
 8002bf4:	e002      	b.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8002bf6:	bf00      	nop
 8002bf8:	e000      	b.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8002bfa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002bfc:	7dfb      	ldrb	r3, [r7, #23]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d109      	bne.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002c02:	4b55      	ldr	r3, [pc, #340]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002c04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c06:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c0e:	4952      	ldr	r1, [pc, #328]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002c10:	4313      	orrs	r3, r2
 8002c12:	650b      	str	r3, [r1, #80]	; 0x50
 8002c14:	e001      	b.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c16:	7dfb      	ldrb	r3, [r7, #23]
 8002c18:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d049      	beq.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002c2c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002c30:	d030      	beq.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8002c32:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002c36:	d82a      	bhi.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002c38:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002c3c:	d02c      	beq.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8002c3e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002c42:	d824      	bhi.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002c44:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c48:	d018      	beq.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x218>
 8002c4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c4e:	d81e      	bhi.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d003      	beq.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002c54:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c58:	d007      	beq.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x206>
 8002c5a:	e018      	b.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c5c:	4b3e      	ldr	r3, [pc, #248]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c60:	4a3d      	ldr	r2, [pc, #244]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002c62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c66:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002c68:	e017      	b.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	3304      	adds	r3, #4
 8002c6e:	2100      	movs	r1, #0
 8002c70:	4618      	mov	r0, r3
 8002c72:	f001 f8f5 	bl	8003e60 <RCCEx_PLL2_Config>
 8002c76:	4603      	mov	r3, r0
 8002c78:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002c7a:	e00e      	b.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	3324      	adds	r3, #36	; 0x24
 8002c80:	2100      	movs	r1, #0
 8002c82:	4618      	mov	r0, r3
 8002c84:	f001 f99e 	bl	8003fc4 <RCCEx_PLL3_Config>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002c8c:	e005      	b.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	75fb      	strb	r3, [r7, #23]
      break;
 8002c92:	e002      	b.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002c94:	bf00      	nop
 8002c96:	e000      	b.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002c98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c9a:	7dfb      	ldrb	r3, [r7, #23]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d10a      	bne.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002ca0:	4b2d      	ldr	r3, [pc, #180]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002ca2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ca4:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002cae:	492a      	ldr	r1, [pc, #168]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	658b      	str	r3, [r1, #88]	; 0x58
 8002cb4:	e001      	b.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cb6:	7dfb      	ldrb	r3, [r7, #23]
 8002cb8:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d04c      	beq.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002ccc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002cd0:	d030      	beq.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8002cd2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002cd6:	d82a      	bhi.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002cd8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002cdc:	d02c      	beq.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8002cde:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002ce2:	d824      	bhi.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002ce4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002ce8:	d018      	beq.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8002cea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002cee:	d81e      	bhi.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d003      	beq.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x298>
 8002cf4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002cf8:	d007      	beq.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8002cfa:	e018      	b.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002cfc:	4b16      	ldr	r3, [pc, #88]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d00:	4a15      	ldr	r2, [pc, #84]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002d02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d06:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002d08:	e017      	b.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	3304      	adds	r3, #4
 8002d0e:	2100      	movs	r1, #0
 8002d10:	4618      	mov	r0, r3
 8002d12:	f001 f8a5 	bl	8003e60 <RCCEx_PLL2_Config>
 8002d16:	4603      	mov	r3, r0
 8002d18:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002d1a:	e00e      	b.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	3324      	adds	r3, #36	; 0x24
 8002d20:	2100      	movs	r1, #0
 8002d22:	4618      	mov	r0, r3
 8002d24:	f001 f94e 	bl	8003fc4 <RCCEx_PLL3_Config>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002d2c:	e005      	b.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	75fb      	strb	r3, [r7, #23]
      break;
 8002d32:	e002      	b.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8002d34:	bf00      	nop
 8002d36:	e000      	b.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8002d38:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d3a:	7dfb      	ldrb	r3, [r7, #23]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d10d      	bne.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002d40:	4b05      	ldr	r3, [pc, #20]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002d42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d44:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002d4e:	4902      	ldr	r1, [pc, #8]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002d50:	4313      	orrs	r3, r2
 8002d52:	658b      	str	r3, [r1, #88]	; 0x58
 8002d54:	e004      	b.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8002d56:	bf00      	nop
 8002d58:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d5c:	7dfb      	ldrb	r3, [r7, #23]
 8002d5e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d032      	beq.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d70:	2b30      	cmp	r3, #48	; 0x30
 8002d72:	d01c      	beq.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002d74:	2b30      	cmp	r3, #48	; 0x30
 8002d76:	d817      	bhi.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8002d78:	2b20      	cmp	r3, #32
 8002d7a:	d00c      	beq.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8002d7c:	2b20      	cmp	r3, #32
 8002d7e:	d813      	bhi.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d016      	beq.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8002d84:	2b10      	cmp	r3, #16
 8002d86:	d10f      	bne.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d88:	4baf      	ldr	r3, [pc, #700]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d8c:	4aae      	ldr	r2, [pc, #696]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002d8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d92:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002d94:	e00e      	b.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	3304      	adds	r3, #4
 8002d9a:	2102      	movs	r1, #2
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f001 f85f 	bl	8003e60 <RCCEx_PLL2_Config>
 8002da2:	4603      	mov	r3, r0
 8002da4:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002da6:	e005      	b.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	75fb      	strb	r3, [r7, #23]
      break;
 8002dac:	e002      	b.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8002dae:	bf00      	nop
 8002db0:	e000      	b.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8002db2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002db4:	7dfb      	ldrb	r3, [r7, #23]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d109      	bne.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002dba:	4ba3      	ldr	r3, [pc, #652]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002dbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dbe:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dc6:	49a0      	ldr	r1, [pc, #640]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002dcc:	e001      	b.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dce:	7dfb      	ldrb	r3, [r7, #23]
 8002dd0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d047      	beq.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002de2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002de6:	d030      	beq.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8002de8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002dec:	d82a      	bhi.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8002dee:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002df2:	d02c      	beq.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8002df4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002df8:	d824      	bhi.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8002dfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dfe:	d018      	beq.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8002e00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e04:	d81e      	bhi.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d003      	beq.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8002e0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e0e:	d007      	beq.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8002e10:	e018      	b.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e12:	4b8d      	ldr	r3, [pc, #564]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e16:	4a8c      	ldr	r2, [pc, #560]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002e18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e1c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002e1e:	e017      	b.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	3304      	adds	r3, #4
 8002e24:	2100      	movs	r1, #0
 8002e26:	4618      	mov	r0, r3
 8002e28:	f001 f81a 	bl	8003e60 <RCCEx_PLL2_Config>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002e30:	e00e      	b.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	3324      	adds	r3, #36	; 0x24
 8002e36:	2100      	movs	r1, #0
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f001 f8c3 	bl	8003fc4 <RCCEx_PLL3_Config>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002e42:	e005      	b.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	75fb      	strb	r3, [r7, #23]
      break;
 8002e48:	e002      	b.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8002e4a:	bf00      	nop
 8002e4c:	e000      	b.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8002e4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e50:	7dfb      	ldrb	r3, [r7, #23]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d109      	bne.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002e56:	4b7c      	ldr	r3, [pc, #496]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002e58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e5a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e62:	4979      	ldr	r1, [pc, #484]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002e64:	4313      	orrs	r3, r2
 8002e66:	650b      	str	r3, [r1, #80]	; 0x50
 8002e68:	e001      	b.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e6a:	7dfb      	ldrb	r3, [r7, #23]
 8002e6c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d049      	beq.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e7e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e82:	d02e      	beq.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8002e84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e88:	d828      	bhi.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x478>
 8002e8a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002e8e:	d02a      	beq.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8002e90:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002e94:	d822      	bhi.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x478>
 8002e96:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002e9a:	d026      	beq.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x486>
 8002e9c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002ea0:	d81c      	bhi.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x478>
 8002ea2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002ea6:	d010      	beq.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x466>
 8002ea8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002eac:	d816      	bhi.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x478>
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d01d      	beq.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8002eb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002eb6:	d111      	bne.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	3304      	adds	r3, #4
 8002ebc:	2101      	movs	r1, #1
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f000 ffce 	bl	8003e60 <RCCEx_PLL2_Config>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002ec8:	e012      	b.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	3324      	adds	r3, #36	; 0x24
 8002ece:	2101      	movs	r1, #1
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f001 f877 	bl	8003fc4 <RCCEx_PLL3_Config>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002eda:	e009      	b.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	75fb      	strb	r3, [r7, #23]
      break;
 8002ee0:	e006      	b.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8002ee2:	bf00      	nop
 8002ee4:	e004      	b.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8002ee6:	bf00      	nop
 8002ee8:	e002      	b.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8002eea:	bf00      	nop
 8002eec:	e000      	b.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8002eee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ef0:	7dfb      	ldrb	r3, [r7, #23]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d109      	bne.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002ef6:	4b54      	ldr	r3, [pc, #336]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002ef8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002efa:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f02:	4951      	ldr	r1, [pc, #324]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002f04:	4313      	orrs	r3, r2
 8002f06:	650b      	str	r3, [r1, #80]	; 0x50
 8002f08:	e001      	b.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f0a:	7dfb      	ldrb	r3, [r7, #23]
 8002f0c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d04b      	beq.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002f20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f24:	d02e      	beq.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8002f26:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f2a:	d828      	bhi.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002f2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f30:	d02a      	beq.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8002f32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f36:	d822      	bhi.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002f38:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002f3c:	d026      	beq.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x528>
 8002f3e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002f42:	d81c      	bhi.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002f44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f48:	d010      	beq.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x508>
 8002f4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f4e:	d816      	bhi.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d01d      	beq.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8002f54:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002f58:	d111      	bne.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	3304      	adds	r3, #4
 8002f5e:	2101      	movs	r1, #1
 8002f60:	4618      	mov	r0, r3
 8002f62:	f000 ff7d 	bl	8003e60 <RCCEx_PLL2_Config>
 8002f66:	4603      	mov	r3, r0
 8002f68:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002f6a:	e012      	b.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	3324      	adds	r3, #36	; 0x24
 8002f70:	2101      	movs	r1, #1
 8002f72:	4618      	mov	r0, r3
 8002f74:	f001 f826 	bl	8003fc4 <RCCEx_PLL3_Config>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002f7c:	e009      	b.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	75fb      	strb	r3, [r7, #23]
      break;
 8002f82:	e006      	b.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8002f84:	bf00      	nop
 8002f86:	e004      	b.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8002f88:	bf00      	nop
 8002f8a:	e002      	b.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8002f8c:	bf00      	nop
 8002f8e:	e000      	b.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8002f90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f92:	7dfb      	ldrb	r3, [r7, #23]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d10a      	bne.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002f98:	4b2b      	ldr	r3, [pc, #172]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002f9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f9c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002fa6:	4928      	ldr	r1, [pc, #160]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	658b      	str	r3, [r1, #88]	; 0x58
 8002fac:	e001      	b.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fae:	7dfb      	ldrb	r3, [r7, #23]
 8002fb0:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d02f      	beq.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002fc2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002fc6:	d00e      	beq.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8002fc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002fcc:	d814      	bhi.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d015      	beq.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8002fd2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002fd6:	d10f      	bne.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002fd8:	4b1b      	ldr	r3, [pc, #108]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fdc:	4a1a      	ldr	r2, [pc, #104]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002fde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fe2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002fe4:	e00c      	b.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	3304      	adds	r3, #4
 8002fea:	2101      	movs	r1, #1
 8002fec:	4618      	mov	r0, r3
 8002fee:	f000 ff37 	bl	8003e60 <RCCEx_PLL2_Config>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002ff6:	e003      	b.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	75fb      	strb	r3, [r7, #23]
      break;
 8002ffc:	e000      	b.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8002ffe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003000:	7dfb      	ldrb	r3, [r7, #23]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d109      	bne.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003006:	4b10      	ldr	r3, [pc, #64]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003008:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800300a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003012:	490d      	ldr	r1, [pc, #52]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003014:	4313      	orrs	r3, r2
 8003016:	650b      	str	r3, [r1, #80]	; 0x50
 8003018:	e001      	b.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800301a:	7dfb      	ldrb	r3, [r7, #23]
 800301c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d033      	beq.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800302e:	2b03      	cmp	r3, #3
 8003030:	d81c      	bhi.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8003032:	a201      	add	r2, pc, #4	; (adr r2, 8003038 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8003034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003038:	08003073 	.word	0x08003073
 800303c:	0800304d 	.word	0x0800304d
 8003040:	0800305b 	.word	0x0800305b
 8003044:	08003073 	.word	0x08003073
 8003048:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800304c:	4bb8      	ldr	r3, [pc, #736]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800304e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003050:	4ab7      	ldr	r2, [pc, #732]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003052:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003056:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003058:	e00c      	b.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	3304      	adds	r3, #4
 800305e:	2102      	movs	r1, #2
 8003060:	4618      	mov	r0, r3
 8003062:	f000 fefd 	bl	8003e60 <RCCEx_PLL2_Config>
 8003066:	4603      	mov	r3, r0
 8003068:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800306a:	e003      	b.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	75fb      	strb	r3, [r7, #23]
      break;
 8003070:	e000      	b.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8003072:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003074:	7dfb      	ldrb	r3, [r7, #23]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d109      	bne.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800307a:	4bad      	ldr	r3, [pc, #692]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800307c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800307e:	f023 0203 	bic.w	r2, r3, #3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003086:	49aa      	ldr	r1, [pc, #680]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003088:	4313      	orrs	r3, r2
 800308a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800308c:	e001      	b.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800308e:	7dfb      	ldrb	r3, [r7, #23]
 8003090:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800309a:	2b00      	cmp	r3, #0
 800309c:	f000 8086 	beq.w	80031ac <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030a0:	4ba4      	ldr	r3, [pc, #656]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4aa3      	ldr	r2, [pc, #652]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80030a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030aa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80030ac:	f7fe f826 	bl	80010fc <HAL_GetTick>
 80030b0:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80030b2:	e009      	b.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030b4:	f7fe f822 	bl	80010fc <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	2b64      	cmp	r3, #100	; 0x64
 80030c0:	d902      	bls.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	75fb      	strb	r3, [r7, #23]
        break;
 80030c6:	e005      	b.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80030c8:	4b9a      	ldr	r3, [pc, #616]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d0ef      	beq.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80030d4:	7dfb      	ldrb	r3, [r7, #23]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d166      	bne.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80030da:	4b95      	ldr	r3, [pc, #596]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80030dc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80030e4:	4053      	eors	r3, r2
 80030e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d013      	beq.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80030ee:	4b90      	ldr	r3, [pc, #576]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80030f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030f6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80030f8:	4b8d      	ldr	r3, [pc, #564]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80030fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030fc:	4a8c      	ldr	r2, [pc, #560]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80030fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003102:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003104:	4b8a      	ldr	r3, [pc, #552]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003106:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003108:	4a89      	ldr	r2, [pc, #548]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800310a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800310e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003110:	4a87      	ldr	r2, [pc, #540]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800311c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003120:	d115      	bne.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003122:	f7fd ffeb 	bl	80010fc <HAL_GetTick>
 8003126:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003128:	e00b      	b.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800312a:	f7fd ffe7 	bl	80010fc <HAL_GetTick>
 800312e:	4602      	mov	r2, r0
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	1ad3      	subs	r3, r2, r3
 8003134:	f241 3288 	movw	r2, #5000	; 0x1388
 8003138:	4293      	cmp	r3, r2
 800313a:	d902      	bls.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800313c:	2303      	movs	r3, #3
 800313e:	75fb      	strb	r3, [r7, #23]
            break;
 8003140:	e005      	b.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003142:	4b7b      	ldr	r3, [pc, #492]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003146:	f003 0302 	and.w	r3, r3, #2
 800314a:	2b00      	cmp	r3, #0
 800314c:	d0ed      	beq.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800314e:	7dfb      	ldrb	r3, [r7, #23]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d126      	bne.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800315a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800315e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003162:	d10d      	bne.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8003164:	4b72      	ldr	r3, [pc, #456]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003166:	691b      	ldr	r3, [r3, #16]
 8003168:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003172:	0919      	lsrs	r1, r3, #4
 8003174:	4b70      	ldr	r3, [pc, #448]	; (8003338 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8003176:	400b      	ands	r3, r1
 8003178:	496d      	ldr	r1, [pc, #436]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800317a:	4313      	orrs	r3, r2
 800317c:	610b      	str	r3, [r1, #16]
 800317e:	e005      	b.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8003180:	4b6b      	ldr	r3, [pc, #428]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003182:	691b      	ldr	r3, [r3, #16]
 8003184:	4a6a      	ldr	r2, [pc, #424]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003186:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800318a:	6113      	str	r3, [r2, #16]
 800318c:	4b68      	ldr	r3, [pc, #416]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800318e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003196:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800319a:	4965      	ldr	r1, [pc, #404]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800319c:	4313      	orrs	r3, r2
 800319e:	670b      	str	r3, [r1, #112]	; 0x70
 80031a0:	e004      	b.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80031a2:	7dfb      	ldrb	r3, [r7, #23]
 80031a4:	75bb      	strb	r3, [r7, #22]
 80031a6:	e001      	b.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031a8:	7dfb      	ldrb	r3, [r7, #23]
 80031aa:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 0301 	and.w	r3, r3, #1
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d07e      	beq.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031bc:	2b28      	cmp	r3, #40	; 0x28
 80031be:	d867      	bhi.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80031c0:	a201      	add	r2, pc, #4	; (adr r2, 80031c8 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80031c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031c6:	bf00      	nop
 80031c8:	08003297 	.word	0x08003297
 80031cc:	08003291 	.word	0x08003291
 80031d0:	08003291 	.word	0x08003291
 80031d4:	08003291 	.word	0x08003291
 80031d8:	08003291 	.word	0x08003291
 80031dc:	08003291 	.word	0x08003291
 80031e0:	08003291 	.word	0x08003291
 80031e4:	08003291 	.word	0x08003291
 80031e8:	0800326d 	.word	0x0800326d
 80031ec:	08003291 	.word	0x08003291
 80031f0:	08003291 	.word	0x08003291
 80031f4:	08003291 	.word	0x08003291
 80031f8:	08003291 	.word	0x08003291
 80031fc:	08003291 	.word	0x08003291
 8003200:	08003291 	.word	0x08003291
 8003204:	08003291 	.word	0x08003291
 8003208:	0800327f 	.word	0x0800327f
 800320c:	08003291 	.word	0x08003291
 8003210:	08003291 	.word	0x08003291
 8003214:	08003291 	.word	0x08003291
 8003218:	08003291 	.word	0x08003291
 800321c:	08003291 	.word	0x08003291
 8003220:	08003291 	.word	0x08003291
 8003224:	08003291 	.word	0x08003291
 8003228:	08003297 	.word	0x08003297
 800322c:	08003291 	.word	0x08003291
 8003230:	08003291 	.word	0x08003291
 8003234:	08003291 	.word	0x08003291
 8003238:	08003291 	.word	0x08003291
 800323c:	08003291 	.word	0x08003291
 8003240:	08003291 	.word	0x08003291
 8003244:	08003291 	.word	0x08003291
 8003248:	08003297 	.word	0x08003297
 800324c:	08003291 	.word	0x08003291
 8003250:	08003291 	.word	0x08003291
 8003254:	08003291 	.word	0x08003291
 8003258:	08003291 	.word	0x08003291
 800325c:	08003291 	.word	0x08003291
 8003260:	08003291 	.word	0x08003291
 8003264:	08003291 	.word	0x08003291
 8003268:	08003297 	.word	0x08003297
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	3304      	adds	r3, #4
 8003270:	2101      	movs	r1, #1
 8003272:	4618      	mov	r0, r3
 8003274:	f000 fdf4 	bl	8003e60 <RCCEx_PLL2_Config>
 8003278:	4603      	mov	r3, r0
 800327a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800327c:	e00c      	b.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	3324      	adds	r3, #36	; 0x24
 8003282:	2101      	movs	r1, #1
 8003284:	4618      	mov	r0, r3
 8003286:	f000 fe9d 	bl	8003fc4 <RCCEx_PLL3_Config>
 800328a:	4603      	mov	r3, r0
 800328c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800328e:	e003      	b.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	75fb      	strb	r3, [r7, #23]
      break;
 8003294:	e000      	b.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8003296:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003298:	7dfb      	ldrb	r3, [r7, #23]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d109      	bne.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800329e:	4b24      	ldr	r3, [pc, #144]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80032a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032a2:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80032aa:	4921      	ldr	r1, [pc, #132]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80032ac:	4313      	orrs	r3, r2
 80032ae:	654b      	str	r3, [r1, #84]	; 0x54
 80032b0:	e001      	b.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032b2:	7dfb      	ldrb	r3, [r7, #23]
 80032b4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 0302 	and.w	r3, r3, #2
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d03e      	beq.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032c6:	2b05      	cmp	r3, #5
 80032c8:	d820      	bhi.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 80032ca:	a201      	add	r2, pc, #4	; (adr r2, 80032d0 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 80032cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032d0:	08003313 	.word	0x08003313
 80032d4:	080032e9 	.word	0x080032e9
 80032d8:	080032fb 	.word	0x080032fb
 80032dc:	08003313 	.word	0x08003313
 80032e0:	08003313 	.word	0x08003313
 80032e4:	08003313 	.word	0x08003313
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	3304      	adds	r3, #4
 80032ec:	2101      	movs	r1, #1
 80032ee:	4618      	mov	r0, r3
 80032f0:	f000 fdb6 	bl	8003e60 <RCCEx_PLL2_Config>
 80032f4:	4603      	mov	r3, r0
 80032f6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80032f8:	e00c      	b.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	3324      	adds	r3, #36	; 0x24
 80032fe:	2101      	movs	r1, #1
 8003300:	4618      	mov	r0, r3
 8003302:	f000 fe5f 	bl	8003fc4 <RCCEx_PLL3_Config>
 8003306:	4603      	mov	r3, r0
 8003308:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800330a:	e003      	b.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	75fb      	strb	r3, [r7, #23]
      break;
 8003310:	e000      	b.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8003312:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003314:	7dfb      	ldrb	r3, [r7, #23]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d110      	bne.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800331a:	4b05      	ldr	r3, [pc, #20]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800331c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800331e:	f023 0207 	bic.w	r2, r3, #7
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003326:	4902      	ldr	r1, [pc, #8]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003328:	4313      	orrs	r3, r2
 800332a:	654b      	str	r3, [r1, #84]	; 0x54
 800332c:	e008      	b.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 800332e:	bf00      	nop
 8003330:	58024400 	.word	0x58024400
 8003334:	58024800 	.word	0x58024800
 8003338:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800333c:	7dfb      	ldrb	r3, [r7, #23]
 800333e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 0304 	and.w	r3, r3, #4
 8003348:	2b00      	cmp	r3, #0
 800334a:	d039      	beq.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003352:	2b05      	cmp	r3, #5
 8003354:	d820      	bhi.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8003356:	a201      	add	r2, pc, #4	; (adr r2, 800335c <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8003358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800335c:	0800339f 	.word	0x0800339f
 8003360:	08003375 	.word	0x08003375
 8003364:	08003387 	.word	0x08003387
 8003368:	0800339f 	.word	0x0800339f
 800336c:	0800339f 	.word	0x0800339f
 8003370:	0800339f 	.word	0x0800339f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	3304      	adds	r3, #4
 8003378:	2101      	movs	r1, #1
 800337a:	4618      	mov	r0, r3
 800337c:	f000 fd70 	bl	8003e60 <RCCEx_PLL2_Config>
 8003380:	4603      	mov	r3, r0
 8003382:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003384:	e00c      	b.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	3324      	adds	r3, #36	; 0x24
 800338a:	2101      	movs	r1, #1
 800338c:	4618      	mov	r0, r3
 800338e:	f000 fe19 	bl	8003fc4 <RCCEx_PLL3_Config>
 8003392:	4603      	mov	r3, r0
 8003394:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003396:	e003      	b.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	75fb      	strb	r3, [r7, #23]
      break;
 800339c:	e000      	b.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 800339e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033a0:	7dfb      	ldrb	r3, [r7, #23]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d10a      	bne.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80033a6:	4bb7      	ldr	r3, [pc, #732]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80033a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033aa:	f023 0207 	bic.w	r2, r3, #7
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033b4:	49b3      	ldr	r1, [pc, #716]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80033b6:	4313      	orrs	r3, r2
 80033b8:	658b      	str	r3, [r1, #88]	; 0x58
 80033ba:	e001      	b.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033bc:	7dfb      	ldrb	r3, [r7, #23]
 80033be:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 0320 	and.w	r3, r3, #32
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d04b      	beq.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80033d6:	d02e      	beq.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 80033d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80033dc:	d828      	bhi.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80033de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033e2:	d02a      	beq.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80033e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033e8:	d822      	bhi.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80033ea:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80033ee:	d026      	beq.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80033f0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80033f4:	d81c      	bhi.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80033f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80033fa:	d010      	beq.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 80033fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003400:	d816      	bhi.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003402:	2b00      	cmp	r3, #0
 8003404:	d01d      	beq.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8003406:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800340a:	d111      	bne.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	3304      	adds	r3, #4
 8003410:	2100      	movs	r1, #0
 8003412:	4618      	mov	r0, r3
 8003414:	f000 fd24 	bl	8003e60 <RCCEx_PLL2_Config>
 8003418:	4603      	mov	r3, r0
 800341a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800341c:	e012      	b.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	3324      	adds	r3, #36	; 0x24
 8003422:	2102      	movs	r1, #2
 8003424:	4618      	mov	r0, r3
 8003426:	f000 fdcd 	bl	8003fc4 <RCCEx_PLL3_Config>
 800342a:	4603      	mov	r3, r0
 800342c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800342e:	e009      	b.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	75fb      	strb	r3, [r7, #23]
      break;
 8003434:	e006      	b.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003436:	bf00      	nop
 8003438:	e004      	b.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800343a:	bf00      	nop
 800343c:	e002      	b.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800343e:	bf00      	nop
 8003440:	e000      	b.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003442:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003444:	7dfb      	ldrb	r3, [r7, #23]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d10a      	bne.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800344a:	4b8e      	ldr	r3, [pc, #568]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800344c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800344e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003458:	498a      	ldr	r1, [pc, #552]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800345a:	4313      	orrs	r3, r2
 800345c:	654b      	str	r3, [r1, #84]	; 0x54
 800345e:	e001      	b.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003460:	7dfb      	ldrb	r3, [r7, #23]
 8003462:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800346c:	2b00      	cmp	r3, #0
 800346e:	d04b      	beq.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003476:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800347a:	d02e      	beq.n	80034da <HAL_RCCEx_PeriphCLKConfig+0xa76>
 800347c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003480:	d828      	bhi.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003482:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003486:	d02a      	beq.n	80034de <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8003488:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800348c:	d822      	bhi.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800348e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003492:	d026      	beq.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8003494:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003498:	d81c      	bhi.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800349a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800349e:	d010      	beq.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 80034a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034a4:	d816      	bhi.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d01d      	beq.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80034aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034ae:	d111      	bne.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	3304      	adds	r3, #4
 80034b4:	2100      	movs	r1, #0
 80034b6:	4618      	mov	r0, r3
 80034b8:	f000 fcd2 	bl	8003e60 <RCCEx_PLL2_Config>
 80034bc:	4603      	mov	r3, r0
 80034be:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80034c0:	e012      	b.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	3324      	adds	r3, #36	; 0x24
 80034c6:	2102      	movs	r1, #2
 80034c8:	4618      	mov	r0, r3
 80034ca:	f000 fd7b 	bl	8003fc4 <RCCEx_PLL3_Config>
 80034ce:	4603      	mov	r3, r0
 80034d0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80034d2:	e009      	b.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	75fb      	strb	r3, [r7, #23]
      break;
 80034d8:	e006      	b.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80034da:	bf00      	nop
 80034dc:	e004      	b.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80034de:	bf00      	nop
 80034e0:	e002      	b.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80034e2:	bf00      	nop
 80034e4:	e000      	b.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80034e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034e8:	7dfb      	ldrb	r3, [r7, #23]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d10a      	bne.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80034ee:	4b65      	ldr	r3, [pc, #404]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80034f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034f2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80034fc:	4961      	ldr	r1, [pc, #388]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80034fe:	4313      	orrs	r3, r2
 8003500:	658b      	str	r3, [r1, #88]	; 0x58
 8003502:	e001      	b.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003504:	7dfb      	ldrb	r3, [r7, #23]
 8003506:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003510:	2b00      	cmp	r3, #0
 8003512:	d04b      	beq.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800351a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800351e:	d02e      	beq.n	800357e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8003520:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003524:	d828      	bhi.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8003526:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800352a:	d02a      	beq.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 800352c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003530:	d822      	bhi.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8003532:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003536:	d026      	beq.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8003538:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800353c:	d81c      	bhi.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800353e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003542:	d010      	beq.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8003544:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003548:	d816      	bhi.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800354a:	2b00      	cmp	r3, #0
 800354c:	d01d      	beq.n	800358a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800354e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003552:	d111      	bne.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	3304      	adds	r3, #4
 8003558:	2100      	movs	r1, #0
 800355a:	4618      	mov	r0, r3
 800355c:	f000 fc80 	bl	8003e60 <RCCEx_PLL2_Config>
 8003560:	4603      	mov	r3, r0
 8003562:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003564:	e012      	b.n	800358c <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	3324      	adds	r3, #36	; 0x24
 800356a:	2102      	movs	r1, #2
 800356c:	4618      	mov	r0, r3
 800356e:	f000 fd29 	bl	8003fc4 <RCCEx_PLL3_Config>
 8003572:	4603      	mov	r3, r0
 8003574:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003576:	e009      	b.n	800358c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	75fb      	strb	r3, [r7, #23]
      break;
 800357c:	e006      	b.n	800358c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800357e:	bf00      	nop
 8003580:	e004      	b.n	800358c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8003582:	bf00      	nop
 8003584:	e002      	b.n	800358c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8003586:	bf00      	nop
 8003588:	e000      	b.n	800358c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800358a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800358c:	7dfb      	ldrb	r3, [r7, #23]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d10a      	bne.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003592:	4b3c      	ldr	r3, [pc, #240]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003596:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80035a0:	4938      	ldr	r1, [pc, #224]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80035a2:	4313      	orrs	r3, r2
 80035a4:	658b      	str	r3, [r1, #88]	; 0x58
 80035a6:	e001      	b.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035a8:	7dfb      	ldrb	r3, [r7, #23]
 80035aa:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 0308 	and.w	r3, r3, #8
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d01a      	beq.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035c2:	d10a      	bne.n	80035da <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	3324      	adds	r3, #36	; 0x24
 80035c8:	2102      	movs	r1, #2
 80035ca:	4618      	mov	r0, r3
 80035cc:	f000 fcfa 	bl	8003fc4 <RCCEx_PLL3_Config>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d001      	beq.n	80035da <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80035da:	4b2a      	ldr	r3, [pc, #168]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80035dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035de:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035e8:	4926      	ldr	r1, [pc, #152]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80035ea:	4313      	orrs	r3, r2
 80035ec:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 0310 	and.w	r3, r3, #16
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d01a      	beq.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003600:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003604:	d10a      	bne.n	800361c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	3324      	adds	r3, #36	; 0x24
 800360a:	2102      	movs	r1, #2
 800360c:	4618      	mov	r0, r3
 800360e:	f000 fcd9 	bl	8003fc4 <RCCEx_PLL3_Config>
 8003612:	4603      	mov	r3, r0
 8003614:	2b00      	cmp	r3, #0
 8003616:	d001      	beq.n	800361c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800361c:	4b19      	ldr	r3, [pc, #100]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800361e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003620:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800362a:	4916      	ldr	r1, [pc, #88]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800362c:	4313      	orrs	r3, r2
 800362e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003638:	2b00      	cmp	r3, #0
 800363a:	d036      	beq.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003642:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003646:	d01f      	beq.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8003648:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800364c:	d817      	bhi.n	800367e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 800364e:	2b00      	cmp	r3, #0
 8003650:	d003      	beq.n	800365a <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8003652:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003656:	d009      	beq.n	800366c <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8003658:	e011      	b.n	800367e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	3304      	adds	r3, #4
 800365e:	2100      	movs	r1, #0
 8003660:	4618      	mov	r0, r3
 8003662:	f000 fbfd 	bl	8003e60 <RCCEx_PLL2_Config>
 8003666:	4603      	mov	r3, r0
 8003668:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800366a:	e00e      	b.n	800368a <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	3324      	adds	r3, #36	; 0x24
 8003670:	2102      	movs	r1, #2
 8003672:	4618      	mov	r0, r3
 8003674:	f000 fca6 	bl	8003fc4 <RCCEx_PLL3_Config>
 8003678:	4603      	mov	r3, r0
 800367a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800367c:	e005      	b.n	800368a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	75fb      	strb	r3, [r7, #23]
      break;
 8003682:	e002      	b.n	800368a <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8003684:	58024400 	.word	0x58024400
      break;
 8003688:	bf00      	nop
    }

    if(ret == HAL_OK)
 800368a:	7dfb      	ldrb	r3, [r7, #23]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d10a      	bne.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003690:	4b93      	ldr	r3, [pc, #588]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003692:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003694:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800369e:	4990      	ldr	r1, [pc, #576]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80036a0:	4313      	orrs	r3, r2
 80036a2:	658b      	str	r3, [r1, #88]	; 0x58
 80036a4:	e001      	b.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036a6:	7dfb      	ldrb	r3, [r7, #23]
 80036a8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d033      	beq.n	800371e <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036bc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80036c0:	d01c      	beq.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0xc98>
 80036c2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80036c6:	d816      	bhi.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 80036c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036cc:	d003      	beq.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 80036ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80036d2:	d007      	beq.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 80036d4:	e00f      	b.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036d6:	4b82      	ldr	r3, [pc, #520]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80036d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036da:	4a81      	ldr	r2, [pc, #516]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80036dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036e0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80036e2:	e00c      	b.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	3324      	adds	r3, #36	; 0x24
 80036e8:	2101      	movs	r1, #1
 80036ea:	4618      	mov	r0, r3
 80036ec:	f000 fc6a 	bl	8003fc4 <RCCEx_PLL3_Config>
 80036f0:	4603      	mov	r3, r0
 80036f2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80036f4:	e003      	b.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	75fb      	strb	r3, [r7, #23]
      break;
 80036fa:	e000      	b.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 80036fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036fe:	7dfb      	ldrb	r3, [r7, #23]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d10a      	bne.n	800371a <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003704:	4b76      	ldr	r3, [pc, #472]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003706:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003708:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003712:	4973      	ldr	r1, [pc, #460]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003714:	4313      	orrs	r3, r2
 8003716:	654b      	str	r3, [r1, #84]	; 0x54
 8003718:	e001      	b.n	800371e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800371a:	7dfb      	ldrb	r3, [r7, #23]
 800371c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003726:	2b00      	cmp	r3, #0
 8003728:	d029      	beq.n	800377e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800372e:	2b00      	cmp	r3, #0
 8003730:	d003      	beq.n	800373a <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8003732:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003736:	d007      	beq.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8003738:	e00f      	b.n	800375a <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800373a:	4b69      	ldr	r3, [pc, #420]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800373c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800373e:	4a68      	ldr	r2, [pc, #416]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003740:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003744:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003746:	e00b      	b.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	3304      	adds	r3, #4
 800374c:	2102      	movs	r1, #2
 800374e:	4618      	mov	r0, r3
 8003750:	f000 fb86 	bl	8003e60 <RCCEx_PLL2_Config>
 8003754:	4603      	mov	r3, r0
 8003756:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003758:	e002      	b.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	75fb      	strb	r3, [r7, #23]
      break;
 800375e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003760:	7dfb      	ldrb	r3, [r7, #23]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d109      	bne.n	800377a <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003766:	4b5e      	ldr	r3, [pc, #376]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800376a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003772:	495b      	ldr	r1, [pc, #364]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003774:	4313      	orrs	r3, r2
 8003776:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003778:	e001      	b.n	800377e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800377a:	7dfb      	ldrb	r3, [r7, #23]
 800377c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d00a      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	3324      	adds	r3, #36	; 0x24
 800378e:	2102      	movs	r1, #2
 8003790:	4618      	mov	r0, r3
 8003792:	f000 fc17 	bl	8003fc4 <RCCEx_PLL3_Config>
 8003796:	4603      	mov	r3, r0
 8003798:	2b00      	cmp	r3, #0
 800379a:	d001      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d030      	beq.n	800380e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80037b4:	d017      	beq.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 80037b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80037ba:	d811      	bhi.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80037bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037c0:	d013      	beq.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80037c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037c6:	d80b      	bhi.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d010      	beq.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80037cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037d0:	d106      	bne.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037d2:	4b43      	ldr	r3, [pc, #268]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80037d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d6:	4a42      	ldr	r2, [pc, #264]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80037d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037dc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80037de:	e007      	b.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	75fb      	strb	r3, [r7, #23]
      break;
 80037e4:	e004      	b.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80037e6:	bf00      	nop
 80037e8:	e002      	b.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80037ea:	bf00      	nop
 80037ec:	e000      	b.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80037ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037f0:	7dfb      	ldrb	r3, [r7, #23]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d109      	bne.n	800380a <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80037f6:	4b3a      	ldr	r3, [pc, #232]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80037f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037fa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003802:	4937      	ldr	r1, [pc, #220]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003804:	4313      	orrs	r3, r2
 8003806:	654b      	str	r3, [r1, #84]	; 0x54
 8003808:	e001      	b.n	800380e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800380a:	7dfb      	ldrb	r3, [r7, #23]
 800380c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003816:	2b00      	cmp	r3, #0
 8003818:	d008      	beq.n	800382c <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800381a:	4b31      	ldr	r3, [pc, #196]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800381c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800381e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003826:	492e      	ldr	r1, [pc, #184]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003828:	4313      	orrs	r3, r2
 800382a:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003834:	2b00      	cmp	r3, #0
 8003836:	d009      	beq.n	800384c <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003838:	4b29      	ldr	r3, [pc, #164]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800383a:	691b      	ldr	r3, [r3, #16]
 800383c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003846:	4926      	ldr	r1, [pc, #152]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003848:	4313      	orrs	r3, r2
 800384a:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003854:	2b00      	cmp	r3, #0
 8003856:	d008      	beq.n	800386a <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003858:	4b21      	ldr	r3, [pc, #132]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800385a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800385c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003864:	491e      	ldr	r1, [pc, #120]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003866:	4313      	orrs	r3, r2
 8003868:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003872:	2b00      	cmp	r3, #0
 8003874:	d00d      	beq.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003876:	4b1a      	ldr	r3, [pc, #104]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003878:	691b      	ldr	r3, [r3, #16]
 800387a:	4a19      	ldr	r2, [pc, #100]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800387c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003880:	6113      	str	r3, [r2, #16]
 8003882:	4b17      	ldr	r3, [pc, #92]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003884:	691a      	ldr	r2, [r3, #16]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800388c:	4914      	ldr	r1, [pc, #80]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800388e:	4313      	orrs	r3, r2
 8003890:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	2b00      	cmp	r3, #0
 8003898:	da08      	bge.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800389a:	4b11      	ldr	r3, [pc, #68]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800389c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800389e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038a6:	490e      	ldr	r1, [pc, #56]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80038a8:	4313      	orrs	r3, r2
 80038aa:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d009      	beq.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80038b8:	4b09      	ldr	r3, [pc, #36]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80038ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038bc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038c6:	4906      	ldr	r1, [pc, #24]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80038c8:	4313      	orrs	r3, r2
 80038ca:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80038cc:	7dbb      	ldrb	r3, [r7, #22]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d101      	bne.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 80038d2:	2300      	movs	r3, #0
 80038d4:	e000      	b.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3718      	adds	r7, #24
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}
 80038e0:	58024400 	.word	0x58024400

080038e4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80038e8:	f7ff f860 	bl	80029ac <HAL_RCC_GetHCLKFreq>
 80038ec:	4602      	mov	r2, r0
 80038ee:	4b06      	ldr	r3, [pc, #24]	; (8003908 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80038f0:	6a1b      	ldr	r3, [r3, #32]
 80038f2:	091b      	lsrs	r3, r3, #4
 80038f4:	f003 0307 	and.w	r3, r3, #7
 80038f8:	4904      	ldr	r1, [pc, #16]	; (800390c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80038fa:	5ccb      	ldrb	r3, [r1, r3]
 80038fc:	f003 031f 	and.w	r3, r3, #31
 8003900:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003904:	4618      	mov	r0, r3
 8003906:	bd80      	pop	{r7, pc}
 8003908:	58024400 	.word	0x58024400
 800390c:	08005754 	.word	0x08005754

08003910 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8003910:	b480      	push	{r7}
 8003912:	b089      	sub	sp, #36	; 0x24
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003918:	4ba1      	ldr	r3, [pc, #644]	; (8003ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800391a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800391c:	f003 0303 	and.w	r3, r3, #3
 8003920:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8003922:	4b9f      	ldr	r3, [pc, #636]	; (8003ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003926:	0b1b      	lsrs	r3, r3, #12
 8003928:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800392c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800392e:	4b9c      	ldr	r3, [pc, #624]	; (8003ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003932:	091b      	lsrs	r3, r3, #4
 8003934:	f003 0301 	and.w	r3, r3, #1
 8003938:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800393a:	4b99      	ldr	r3, [pc, #612]	; (8003ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800393c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800393e:	08db      	lsrs	r3, r3, #3
 8003940:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003944:	693a      	ldr	r2, [r7, #16]
 8003946:	fb02 f303 	mul.w	r3, r2, r3
 800394a:	ee07 3a90 	vmov	s15, r3
 800394e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003952:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	2b00      	cmp	r3, #0
 800395a:	f000 8111 	beq.w	8003b80 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800395e:	69bb      	ldr	r3, [r7, #24]
 8003960:	2b02      	cmp	r3, #2
 8003962:	f000 8083 	beq.w	8003a6c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003966:	69bb      	ldr	r3, [r7, #24]
 8003968:	2b02      	cmp	r3, #2
 800396a:	f200 80a1 	bhi.w	8003ab0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800396e:	69bb      	ldr	r3, [r7, #24]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d003      	beq.n	800397c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003974:	69bb      	ldr	r3, [r7, #24]
 8003976:	2b01      	cmp	r3, #1
 8003978:	d056      	beq.n	8003a28 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800397a:	e099      	b.n	8003ab0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800397c:	4b88      	ldr	r3, [pc, #544]	; (8003ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 0320 	and.w	r3, r3, #32
 8003984:	2b00      	cmp	r3, #0
 8003986:	d02d      	beq.n	80039e4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003988:	4b85      	ldr	r3, [pc, #532]	; (8003ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	08db      	lsrs	r3, r3, #3
 800398e:	f003 0303 	and.w	r3, r3, #3
 8003992:	4a84      	ldr	r2, [pc, #528]	; (8003ba4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003994:	fa22 f303 	lsr.w	r3, r2, r3
 8003998:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	ee07 3a90 	vmov	s15, r3
 80039a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	ee07 3a90 	vmov	s15, r3
 80039aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039b2:	4b7b      	ldr	r3, [pc, #492]	; (8003ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039ba:	ee07 3a90 	vmov	s15, r3
 80039be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80039c6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003ba8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80039ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039de:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80039e2:	e087      	b.n	8003af4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	ee07 3a90 	vmov	s15, r3
 80039ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039ee:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003bac <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80039f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039f6:	4b6a      	ldr	r3, [pc, #424]	; (8003ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039fe:	ee07 3a90 	vmov	s15, r3
 8003a02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a06:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a0a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003ba8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003a0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a22:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003a26:	e065      	b.n	8003af4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	ee07 3a90 	vmov	s15, r3
 8003a2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a32:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003bb0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003a36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a3a:	4b59      	ldr	r3, [pc, #356]	; (8003ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a42:	ee07 3a90 	vmov	s15, r3
 8003a46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a4e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003ba8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003a52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a66:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003a6a:	e043      	b.n	8003af4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	ee07 3a90 	vmov	s15, r3
 8003a72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a76:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003bb4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003a7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a7e:	4b48      	ldr	r3, [pc, #288]	; (8003ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a86:	ee07 3a90 	vmov	s15, r3
 8003a8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a92:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003ba8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003a96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003aa2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003aa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003aaa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003aae:	e021      	b.n	8003af4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	ee07 3a90 	vmov	s15, r3
 8003ab6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003aba:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003bb0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003abe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ac2:	4b37      	ldr	r3, [pc, #220]	; (8003ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ac6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003aca:	ee07 3a90 	vmov	s15, r3
 8003ace:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ad2:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ad6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003ba8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003ada:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ade:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ae2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ae6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003aea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003aee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003af2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8003af4:	4b2a      	ldr	r3, [pc, #168]	; (8003ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003af8:	0a5b      	lsrs	r3, r3, #9
 8003afa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003afe:	ee07 3a90 	vmov	s15, r3
 8003b02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b06:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003b0a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003b0e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003b12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b1a:	ee17 2a90 	vmov	r2, s15
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8003b22:	4b1f      	ldr	r3, [pc, #124]	; (8003ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b26:	0c1b      	lsrs	r3, r3, #16
 8003b28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b2c:	ee07 3a90 	vmov	s15, r3
 8003b30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b34:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003b38:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003b3c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003b40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b48:	ee17 2a90 	vmov	r2, s15
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8003b50:	4b13      	ldr	r3, [pc, #76]	; (8003ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b54:	0e1b      	lsrs	r3, r3, #24
 8003b56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b5a:	ee07 3a90 	vmov	s15, r3
 8003b5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b62:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003b66:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003b6a:	edd7 6a07 	vldr	s13, [r7, #28]
 8003b6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b76:	ee17 2a90 	vmov	r2, s15
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003b7e:	e008      	b.n	8003b92 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2200      	movs	r2, #0
 8003b84:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	609a      	str	r2, [r3, #8]
}
 8003b92:	bf00      	nop
 8003b94:	3724      	adds	r7, #36	; 0x24
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr
 8003b9e:	bf00      	nop
 8003ba0:	58024400 	.word	0x58024400
 8003ba4:	03d09000 	.word	0x03d09000
 8003ba8:	46000000 	.word	0x46000000
 8003bac:	4c742400 	.word	0x4c742400
 8003bb0:	4a742400 	.word	0x4a742400
 8003bb4:	4af42400 	.word	0x4af42400

08003bb8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b089      	sub	sp, #36	; 0x24
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003bc0:	4ba1      	ldr	r3, [pc, #644]	; (8003e48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bc4:	f003 0303 	and.w	r3, r3, #3
 8003bc8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8003bca:	4b9f      	ldr	r3, [pc, #636]	; (8003e48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bce:	0d1b      	lsrs	r3, r3, #20
 8003bd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003bd4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003bd6:	4b9c      	ldr	r3, [pc, #624]	; (8003e48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bda:	0a1b      	lsrs	r3, r3, #8
 8003bdc:	f003 0301 	and.w	r3, r3, #1
 8003be0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8003be2:	4b99      	ldr	r3, [pc, #612]	; (8003e48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003be6:	08db      	lsrs	r3, r3, #3
 8003be8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003bec:	693a      	ldr	r2, [r7, #16]
 8003bee:	fb02 f303 	mul.w	r3, r2, r3
 8003bf2:	ee07 3a90 	vmov	s15, r3
 8003bf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bfa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	f000 8111 	beq.w	8003e28 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003c06:	69bb      	ldr	r3, [r7, #24]
 8003c08:	2b02      	cmp	r3, #2
 8003c0a:	f000 8083 	beq.w	8003d14 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003c0e:	69bb      	ldr	r3, [r7, #24]
 8003c10:	2b02      	cmp	r3, #2
 8003c12:	f200 80a1 	bhi.w	8003d58 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003c16:	69bb      	ldr	r3, [r7, #24]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d003      	beq.n	8003c24 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003c1c:	69bb      	ldr	r3, [r7, #24]
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d056      	beq.n	8003cd0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003c22:	e099      	b.n	8003d58 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003c24:	4b88      	ldr	r3, [pc, #544]	; (8003e48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 0320 	and.w	r3, r3, #32
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d02d      	beq.n	8003c8c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003c30:	4b85      	ldr	r3, [pc, #532]	; (8003e48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	08db      	lsrs	r3, r3, #3
 8003c36:	f003 0303 	and.w	r3, r3, #3
 8003c3a:	4a84      	ldr	r2, [pc, #528]	; (8003e4c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003c3c:	fa22 f303 	lsr.w	r3, r2, r3
 8003c40:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	ee07 3a90 	vmov	s15, r3
 8003c48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	ee07 3a90 	vmov	s15, r3
 8003c52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c5a:	4b7b      	ldr	r3, [pc, #492]	; (8003e48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c62:	ee07 3a90 	vmov	s15, r3
 8003c66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c6e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003e50 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003c72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c86:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003c8a:	e087      	b.n	8003d9c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	ee07 3a90 	vmov	s15, r3
 8003c92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c96:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003e54 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003c9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c9e:	4b6a      	ldr	r3, [pc, #424]	; (8003e48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ca6:	ee07 3a90 	vmov	s15, r3
 8003caa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cae:	ed97 6a03 	vldr	s12, [r7, #12]
 8003cb2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003e50 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003cb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003cba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003cbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003cc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003cc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003cce:	e065      	b.n	8003d9c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	ee07 3a90 	vmov	s15, r3
 8003cd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cda:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003e58 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003cde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ce2:	4b59      	ldr	r3, [pc, #356]	; (8003e48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cea:	ee07 3a90 	vmov	s15, r3
 8003cee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cf2:	ed97 6a03 	vldr	s12, [r7, #12]
 8003cf6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003e50 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003cfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003cfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d0e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003d12:	e043      	b.n	8003d9c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	ee07 3a90 	vmov	s15, r3
 8003d1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d1e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003e5c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003d22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d26:	4b48      	ldr	r3, [pc, #288]	; (8003e48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d2e:	ee07 3a90 	vmov	s15, r3
 8003d32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d36:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d3a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003e50 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003d3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d52:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003d56:	e021      	b.n	8003d9c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	ee07 3a90 	vmov	s15, r3
 8003d5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d62:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003e58 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003d66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d6a:	4b37      	ldr	r3, [pc, #220]	; (8003e48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d72:	ee07 3a90 	vmov	s15, r3
 8003d76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d7e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003e50 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003d82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d96:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003d9a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8003d9c:	4b2a      	ldr	r3, [pc, #168]	; (8003e48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da0:	0a5b      	lsrs	r3, r3, #9
 8003da2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003da6:	ee07 3a90 	vmov	s15, r3
 8003daa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003db2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003db6:	edd7 6a07 	vldr	s13, [r7, #28]
 8003dba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003dbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003dc2:	ee17 2a90 	vmov	r2, s15
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8003dca:	4b1f      	ldr	r3, [pc, #124]	; (8003e48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dce:	0c1b      	lsrs	r3, r3, #16
 8003dd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003dd4:	ee07 3a90 	vmov	s15, r3
 8003dd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ddc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003de0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003de4:	edd7 6a07 	vldr	s13, [r7, #28]
 8003de8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003dec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003df0:	ee17 2a90 	vmov	r2, s15
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8003df8:	4b13      	ldr	r3, [pc, #76]	; (8003e48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfc:	0e1b      	lsrs	r3, r3, #24
 8003dfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e02:	ee07 3a90 	vmov	s15, r3
 8003e06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e0a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003e0e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003e12:	edd7 6a07 	vldr	s13, [r7, #28]
 8003e16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e1e:	ee17 2a90 	vmov	r2, s15
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003e26:	e008      	b.n	8003e3a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2200      	movs	r2, #0
 8003e32:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2200      	movs	r2, #0
 8003e38:	609a      	str	r2, [r3, #8]
}
 8003e3a:	bf00      	nop
 8003e3c:	3724      	adds	r7, #36	; 0x24
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr
 8003e46:	bf00      	nop
 8003e48:	58024400 	.word	0x58024400
 8003e4c:	03d09000 	.word	0x03d09000
 8003e50:	46000000 	.word	0x46000000
 8003e54:	4c742400 	.word	0x4c742400
 8003e58:	4a742400 	.word	0x4a742400
 8003e5c:	4af42400 	.word	0x4af42400

08003e60 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b084      	sub	sp, #16
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
 8003e68:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003e6e:	4b53      	ldr	r3, [pc, #332]	; (8003fbc <RCCEx_PLL2_Config+0x15c>)
 8003e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e72:	f003 0303 	and.w	r3, r3, #3
 8003e76:	2b03      	cmp	r3, #3
 8003e78:	d101      	bne.n	8003e7e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e099      	b.n	8003fb2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003e7e:	4b4f      	ldr	r3, [pc, #316]	; (8003fbc <RCCEx_PLL2_Config+0x15c>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a4e      	ldr	r2, [pc, #312]	; (8003fbc <RCCEx_PLL2_Config+0x15c>)
 8003e84:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003e88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e8a:	f7fd f937 	bl	80010fc <HAL_GetTick>
 8003e8e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003e90:	e008      	b.n	8003ea4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003e92:	f7fd f933 	bl	80010fc <HAL_GetTick>
 8003e96:	4602      	mov	r2, r0
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	1ad3      	subs	r3, r2, r3
 8003e9c:	2b02      	cmp	r3, #2
 8003e9e:	d901      	bls.n	8003ea4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003ea0:	2303      	movs	r3, #3
 8003ea2:	e086      	b.n	8003fb2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003ea4:	4b45      	ldr	r3, [pc, #276]	; (8003fbc <RCCEx_PLL2_Config+0x15c>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d1f0      	bne.n	8003e92 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003eb0:	4b42      	ldr	r3, [pc, #264]	; (8003fbc <RCCEx_PLL2_Config+0x15c>)
 8003eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	031b      	lsls	r3, r3, #12
 8003ebe:	493f      	ldr	r1, [pc, #252]	; (8003fbc <RCCEx_PLL2_Config+0x15c>)
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	628b      	str	r3, [r1, #40]	; 0x28
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	3b01      	subs	r3, #1
 8003eca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	3b01      	subs	r3, #1
 8003ed4:	025b      	lsls	r3, r3, #9
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	431a      	orrs	r2, r3
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	68db      	ldr	r3, [r3, #12]
 8003ede:	3b01      	subs	r3, #1
 8003ee0:	041b      	lsls	r3, r3, #16
 8003ee2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003ee6:	431a      	orrs	r2, r3
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	691b      	ldr	r3, [r3, #16]
 8003eec:	3b01      	subs	r3, #1
 8003eee:	061b      	lsls	r3, r3, #24
 8003ef0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003ef4:	4931      	ldr	r1, [pc, #196]	; (8003fbc <RCCEx_PLL2_Config+0x15c>)
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003efa:	4b30      	ldr	r3, [pc, #192]	; (8003fbc <RCCEx_PLL2_Config+0x15c>)
 8003efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003efe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	695b      	ldr	r3, [r3, #20]
 8003f06:	492d      	ldr	r1, [pc, #180]	; (8003fbc <RCCEx_PLL2_Config+0x15c>)
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003f0c:	4b2b      	ldr	r3, [pc, #172]	; (8003fbc <RCCEx_PLL2_Config+0x15c>)
 8003f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f10:	f023 0220 	bic.w	r2, r3, #32
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	699b      	ldr	r3, [r3, #24]
 8003f18:	4928      	ldr	r1, [pc, #160]	; (8003fbc <RCCEx_PLL2_Config+0x15c>)
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003f1e:	4b27      	ldr	r3, [pc, #156]	; (8003fbc <RCCEx_PLL2_Config+0x15c>)
 8003f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f22:	4a26      	ldr	r2, [pc, #152]	; (8003fbc <RCCEx_PLL2_Config+0x15c>)
 8003f24:	f023 0310 	bic.w	r3, r3, #16
 8003f28:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003f2a:	4b24      	ldr	r3, [pc, #144]	; (8003fbc <RCCEx_PLL2_Config+0x15c>)
 8003f2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f2e:	4b24      	ldr	r3, [pc, #144]	; (8003fc0 <RCCEx_PLL2_Config+0x160>)
 8003f30:	4013      	ands	r3, r2
 8003f32:	687a      	ldr	r2, [r7, #4]
 8003f34:	69d2      	ldr	r2, [r2, #28]
 8003f36:	00d2      	lsls	r2, r2, #3
 8003f38:	4920      	ldr	r1, [pc, #128]	; (8003fbc <RCCEx_PLL2_Config+0x15c>)
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003f3e:	4b1f      	ldr	r3, [pc, #124]	; (8003fbc <RCCEx_PLL2_Config+0x15c>)
 8003f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f42:	4a1e      	ldr	r2, [pc, #120]	; (8003fbc <RCCEx_PLL2_Config+0x15c>)
 8003f44:	f043 0310 	orr.w	r3, r3, #16
 8003f48:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d106      	bne.n	8003f5e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003f50:	4b1a      	ldr	r3, [pc, #104]	; (8003fbc <RCCEx_PLL2_Config+0x15c>)
 8003f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f54:	4a19      	ldr	r2, [pc, #100]	; (8003fbc <RCCEx_PLL2_Config+0x15c>)
 8003f56:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003f5a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003f5c:	e00f      	b.n	8003f7e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d106      	bne.n	8003f72 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003f64:	4b15      	ldr	r3, [pc, #84]	; (8003fbc <RCCEx_PLL2_Config+0x15c>)
 8003f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f68:	4a14      	ldr	r2, [pc, #80]	; (8003fbc <RCCEx_PLL2_Config+0x15c>)
 8003f6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f6e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003f70:	e005      	b.n	8003f7e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003f72:	4b12      	ldr	r3, [pc, #72]	; (8003fbc <RCCEx_PLL2_Config+0x15c>)
 8003f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f76:	4a11      	ldr	r2, [pc, #68]	; (8003fbc <RCCEx_PLL2_Config+0x15c>)
 8003f78:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003f7c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003f7e:	4b0f      	ldr	r3, [pc, #60]	; (8003fbc <RCCEx_PLL2_Config+0x15c>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a0e      	ldr	r2, [pc, #56]	; (8003fbc <RCCEx_PLL2_Config+0x15c>)
 8003f84:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003f88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f8a:	f7fd f8b7 	bl	80010fc <HAL_GetTick>
 8003f8e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003f90:	e008      	b.n	8003fa4 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003f92:	f7fd f8b3 	bl	80010fc <HAL_GetTick>
 8003f96:	4602      	mov	r2, r0
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	1ad3      	subs	r3, r2, r3
 8003f9c:	2b02      	cmp	r3, #2
 8003f9e:	d901      	bls.n	8003fa4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	e006      	b.n	8003fb2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003fa4:	4b05      	ldr	r3, [pc, #20]	; (8003fbc <RCCEx_PLL2_Config+0x15c>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d0f0      	beq.n	8003f92 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003fb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3710      	adds	r7, #16
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	bf00      	nop
 8003fbc:	58024400 	.word	0x58024400
 8003fc0:	ffff0007 	.word	0xffff0007

08003fc4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b084      	sub	sp, #16
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
 8003fcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003fd2:	4b53      	ldr	r3, [pc, #332]	; (8004120 <RCCEx_PLL3_Config+0x15c>)
 8003fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fd6:	f003 0303 	and.w	r3, r3, #3
 8003fda:	2b03      	cmp	r3, #3
 8003fdc:	d101      	bne.n	8003fe2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e099      	b.n	8004116 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003fe2:	4b4f      	ldr	r3, [pc, #316]	; (8004120 <RCCEx_PLL3_Config+0x15c>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a4e      	ldr	r2, [pc, #312]	; (8004120 <RCCEx_PLL3_Config+0x15c>)
 8003fe8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fee:	f7fd f885 	bl	80010fc <HAL_GetTick>
 8003ff2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003ff4:	e008      	b.n	8004008 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003ff6:	f7fd f881 	bl	80010fc <HAL_GetTick>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	1ad3      	subs	r3, r2, r3
 8004000:	2b02      	cmp	r3, #2
 8004002:	d901      	bls.n	8004008 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004004:	2303      	movs	r3, #3
 8004006:	e086      	b.n	8004116 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004008:	4b45      	ldr	r3, [pc, #276]	; (8004120 <RCCEx_PLL3_Config+0x15c>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004010:	2b00      	cmp	r3, #0
 8004012:	d1f0      	bne.n	8003ff6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004014:	4b42      	ldr	r3, [pc, #264]	; (8004120 <RCCEx_PLL3_Config+0x15c>)
 8004016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004018:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	051b      	lsls	r3, r3, #20
 8004022:	493f      	ldr	r1, [pc, #252]	; (8004120 <RCCEx_PLL3_Config+0x15c>)
 8004024:	4313      	orrs	r3, r2
 8004026:	628b      	str	r3, [r1, #40]	; 0x28
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	3b01      	subs	r3, #1
 800402e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	3b01      	subs	r3, #1
 8004038:	025b      	lsls	r3, r3, #9
 800403a:	b29b      	uxth	r3, r3
 800403c:	431a      	orrs	r2, r3
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	3b01      	subs	r3, #1
 8004044:	041b      	lsls	r3, r3, #16
 8004046:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800404a:	431a      	orrs	r2, r3
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	691b      	ldr	r3, [r3, #16]
 8004050:	3b01      	subs	r3, #1
 8004052:	061b      	lsls	r3, r3, #24
 8004054:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004058:	4931      	ldr	r1, [pc, #196]	; (8004120 <RCCEx_PLL3_Config+0x15c>)
 800405a:	4313      	orrs	r3, r2
 800405c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800405e:	4b30      	ldr	r3, [pc, #192]	; (8004120 <RCCEx_PLL3_Config+0x15c>)
 8004060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004062:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	695b      	ldr	r3, [r3, #20]
 800406a:	492d      	ldr	r1, [pc, #180]	; (8004120 <RCCEx_PLL3_Config+0x15c>)
 800406c:	4313      	orrs	r3, r2
 800406e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004070:	4b2b      	ldr	r3, [pc, #172]	; (8004120 <RCCEx_PLL3_Config+0x15c>)
 8004072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004074:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	699b      	ldr	r3, [r3, #24]
 800407c:	4928      	ldr	r1, [pc, #160]	; (8004120 <RCCEx_PLL3_Config+0x15c>)
 800407e:	4313      	orrs	r3, r2
 8004080:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004082:	4b27      	ldr	r3, [pc, #156]	; (8004120 <RCCEx_PLL3_Config+0x15c>)
 8004084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004086:	4a26      	ldr	r2, [pc, #152]	; (8004120 <RCCEx_PLL3_Config+0x15c>)
 8004088:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800408c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800408e:	4b24      	ldr	r3, [pc, #144]	; (8004120 <RCCEx_PLL3_Config+0x15c>)
 8004090:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004092:	4b24      	ldr	r3, [pc, #144]	; (8004124 <RCCEx_PLL3_Config+0x160>)
 8004094:	4013      	ands	r3, r2
 8004096:	687a      	ldr	r2, [r7, #4]
 8004098:	69d2      	ldr	r2, [r2, #28]
 800409a:	00d2      	lsls	r2, r2, #3
 800409c:	4920      	ldr	r1, [pc, #128]	; (8004120 <RCCEx_PLL3_Config+0x15c>)
 800409e:	4313      	orrs	r3, r2
 80040a0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80040a2:	4b1f      	ldr	r3, [pc, #124]	; (8004120 <RCCEx_PLL3_Config+0x15c>)
 80040a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a6:	4a1e      	ldr	r2, [pc, #120]	; (8004120 <RCCEx_PLL3_Config+0x15c>)
 80040a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040ac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d106      	bne.n	80040c2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80040b4:	4b1a      	ldr	r3, [pc, #104]	; (8004120 <RCCEx_PLL3_Config+0x15c>)
 80040b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b8:	4a19      	ldr	r2, [pc, #100]	; (8004120 <RCCEx_PLL3_Config+0x15c>)
 80040ba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80040be:	62d3      	str	r3, [r2, #44]	; 0x2c
 80040c0:	e00f      	b.n	80040e2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d106      	bne.n	80040d6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80040c8:	4b15      	ldr	r3, [pc, #84]	; (8004120 <RCCEx_PLL3_Config+0x15c>)
 80040ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040cc:	4a14      	ldr	r2, [pc, #80]	; (8004120 <RCCEx_PLL3_Config+0x15c>)
 80040ce:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80040d2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80040d4:	e005      	b.n	80040e2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80040d6:	4b12      	ldr	r3, [pc, #72]	; (8004120 <RCCEx_PLL3_Config+0x15c>)
 80040d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040da:	4a11      	ldr	r2, [pc, #68]	; (8004120 <RCCEx_PLL3_Config+0x15c>)
 80040dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040e0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80040e2:	4b0f      	ldr	r3, [pc, #60]	; (8004120 <RCCEx_PLL3_Config+0x15c>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a0e      	ldr	r2, [pc, #56]	; (8004120 <RCCEx_PLL3_Config+0x15c>)
 80040e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040ee:	f7fd f805 	bl	80010fc <HAL_GetTick>
 80040f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80040f4:	e008      	b.n	8004108 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80040f6:	f7fd f801 	bl	80010fc <HAL_GetTick>
 80040fa:	4602      	mov	r2, r0
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	1ad3      	subs	r3, r2, r3
 8004100:	2b02      	cmp	r3, #2
 8004102:	d901      	bls.n	8004108 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004104:	2303      	movs	r3, #3
 8004106:	e006      	b.n	8004116 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004108:	4b05      	ldr	r3, [pc, #20]	; (8004120 <RCCEx_PLL3_Config+0x15c>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004110:	2b00      	cmp	r3, #0
 8004112:	d0f0      	beq.n	80040f6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004114:	7bfb      	ldrb	r3, [r7, #15]
}
 8004116:	4618      	mov	r0, r3
 8004118:	3710      	adds	r7, #16
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}
 800411e:	bf00      	nop
 8004120:	58024400 	.word	0x58024400
 8004124:	ffff0007 	.word	0xffff0007

08004128 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b082      	sub	sp, #8
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d101      	bne.n	800413a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e042      	b.n	80041c0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004140:	2b00      	cmp	r3, #0
 8004142:	d106      	bne.n	8004152 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2200      	movs	r2, #0
 8004148:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	f7fc fd8d 	bl	8000c6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2224      	movs	r2, #36	; 0x24
 8004156:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f022 0201 	bic.w	r2, r2, #1
 8004168:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f000 f82c 	bl	80041c8 <UART_SetConfig>
 8004170:	4603      	mov	r3, r0
 8004172:	2b01      	cmp	r3, #1
 8004174:	d101      	bne.n	800417a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	e022      	b.n	80041c0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800417e:	2b00      	cmp	r3, #0
 8004180:	d002      	beq.n	8004188 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	f000 fd80 	bl	8004c88 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	685a      	ldr	r2, [r3, #4]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004196:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	689a      	ldr	r2, [r3, #8]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80041a6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f042 0201 	orr.w	r2, r2, #1
 80041b6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80041b8:	6878      	ldr	r0, [r7, #4]
 80041ba:	f000 fe07 	bl	8004dcc <UART_CheckIdleState>
 80041be:	4603      	mov	r3, r0
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	3708      	adds	r7, #8
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}

080041c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041c8:	b5b0      	push	{r4, r5, r7, lr}
 80041ca:	b08e      	sub	sp, #56	; 0x38
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80041d0:	2300      	movs	r3, #0
 80041d2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	689a      	ldr	r2, [r3, #8]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	691b      	ldr	r3, [r3, #16]
 80041de:	431a      	orrs	r2, r3
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	695b      	ldr	r3, [r3, #20]
 80041e4:	431a      	orrs	r2, r3
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	69db      	ldr	r3, [r3, #28]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	4bbf      	ldr	r3, [pc, #764]	; (80044f4 <UART_SetConfig+0x32c>)
 80041f6:	4013      	ands	r3, r2
 80041f8:	687a      	ldr	r2, [r7, #4]
 80041fa:	6812      	ldr	r2, [r2, #0]
 80041fc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80041fe:	430b      	orrs	r3, r1
 8004200:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	68da      	ldr	r2, [r3, #12]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	430a      	orrs	r2, r1
 8004216:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	699b      	ldr	r3, [r3, #24]
 800421c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4ab5      	ldr	r2, [pc, #724]	; (80044f8 <UART_SetConfig+0x330>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d004      	beq.n	8004232 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6a1b      	ldr	r3, [r3, #32]
 800422c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800422e:	4313      	orrs	r3, r2
 8004230:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	689a      	ldr	r2, [r3, #8]
 8004238:	4bb0      	ldr	r3, [pc, #704]	; (80044fc <UART_SetConfig+0x334>)
 800423a:	4013      	ands	r3, r2
 800423c:	687a      	ldr	r2, [r7, #4]
 800423e:	6812      	ldr	r2, [r2, #0]
 8004240:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004242:	430b      	orrs	r3, r1
 8004244:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800424c:	f023 010f 	bic.w	r1, r3, #15
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	430a      	orrs	r2, r1
 800425a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4aa7      	ldr	r2, [pc, #668]	; (8004500 <UART_SetConfig+0x338>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d176      	bne.n	8004354 <UART_SetConfig+0x18c>
 8004266:	4ba7      	ldr	r3, [pc, #668]	; (8004504 <UART_SetConfig+0x33c>)
 8004268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800426a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800426e:	2b28      	cmp	r3, #40	; 0x28
 8004270:	d86c      	bhi.n	800434c <UART_SetConfig+0x184>
 8004272:	a201      	add	r2, pc, #4	; (adr r2, 8004278 <UART_SetConfig+0xb0>)
 8004274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004278:	0800431d 	.word	0x0800431d
 800427c:	0800434d 	.word	0x0800434d
 8004280:	0800434d 	.word	0x0800434d
 8004284:	0800434d 	.word	0x0800434d
 8004288:	0800434d 	.word	0x0800434d
 800428c:	0800434d 	.word	0x0800434d
 8004290:	0800434d 	.word	0x0800434d
 8004294:	0800434d 	.word	0x0800434d
 8004298:	08004325 	.word	0x08004325
 800429c:	0800434d 	.word	0x0800434d
 80042a0:	0800434d 	.word	0x0800434d
 80042a4:	0800434d 	.word	0x0800434d
 80042a8:	0800434d 	.word	0x0800434d
 80042ac:	0800434d 	.word	0x0800434d
 80042b0:	0800434d 	.word	0x0800434d
 80042b4:	0800434d 	.word	0x0800434d
 80042b8:	0800432d 	.word	0x0800432d
 80042bc:	0800434d 	.word	0x0800434d
 80042c0:	0800434d 	.word	0x0800434d
 80042c4:	0800434d 	.word	0x0800434d
 80042c8:	0800434d 	.word	0x0800434d
 80042cc:	0800434d 	.word	0x0800434d
 80042d0:	0800434d 	.word	0x0800434d
 80042d4:	0800434d 	.word	0x0800434d
 80042d8:	08004335 	.word	0x08004335
 80042dc:	0800434d 	.word	0x0800434d
 80042e0:	0800434d 	.word	0x0800434d
 80042e4:	0800434d 	.word	0x0800434d
 80042e8:	0800434d 	.word	0x0800434d
 80042ec:	0800434d 	.word	0x0800434d
 80042f0:	0800434d 	.word	0x0800434d
 80042f4:	0800434d 	.word	0x0800434d
 80042f8:	0800433d 	.word	0x0800433d
 80042fc:	0800434d 	.word	0x0800434d
 8004300:	0800434d 	.word	0x0800434d
 8004304:	0800434d 	.word	0x0800434d
 8004308:	0800434d 	.word	0x0800434d
 800430c:	0800434d 	.word	0x0800434d
 8004310:	0800434d 	.word	0x0800434d
 8004314:	0800434d 	.word	0x0800434d
 8004318:	08004345 	.word	0x08004345
 800431c:	2301      	movs	r3, #1
 800431e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004322:	e222      	b.n	800476a <UART_SetConfig+0x5a2>
 8004324:	2304      	movs	r3, #4
 8004326:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800432a:	e21e      	b.n	800476a <UART_SetConfig+0x5a2>
 800432c:	2308      	movs	r3, #8
 800432e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004332:	e21a      	b.n	800476a <UART_SetConfig+0x5a2>
 8004334:	2310      	movs	r3, #16
 8004336:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800433a:	e216      	b.n	800476a <UART_SetConfig+0x5a2>
 800433c:	2320      	movs	r3, #32
 800433e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004342:	e212      	b.n	800476a <UART_SetConfig+0x5a2>
 8004344:	2340      	movs	r3, #64	; 0x40
 8004346:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800434a:	e20e      	b.n	800476a <UART_SetConfig+0x5a2>
 800434c:	2380      	movs	r3, #128	; 0x80
 800434e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004352:	e20a      	b.n	800476a <UART_SetConfig+0x5a2>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a6b      	ldr	r2, [pc, #428]	; (8004508 <UART_SetConfig+0x340>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d130      	bne.n	80043c0 <UART_SetConfig+0x1f8>
 800435e:	4b69      	ldr	r3, [pc, #420]	; (8004504 <UART_SetConfig+0x33c>)
 8004360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004362:	f003 0307 	and.w	r3, r3, #7
 8004366:	2b05      	cmp	r3, #5
 8004368:	d826      	bhi.n	80043b8 <UART_SetConfig+0x1f0>
 800436a:	a201      	add	r2, pc, #4	; (adr r2, 8004370 <UART_SetConfig+0x1a8>)
 800436c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004370:	08004389 	.word	0x08004389
 8004374:	08004391 	.word	0x08004391
 8004378:	08004399 	.word	0x08004399
 800437c:	080043a1 	.word	0x080043a1
 8004380:	080043a9 	.word	0x080043a9
 8004384:	080043b1 	.word	0x080043b1
 8004388:	2300      	movs	r3, #0
 800438a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800438e:	e1ec      	b.n	800476a <UART_SetConfig+0x5a2>
 8004390:	2304      	movs	r3, #4
 8004392:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004396:	e1e8      	b.n	800476a <UART_SetConfig+0x5a2>
 8004398:	2308      	movs	r3, #8
 800439a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800439e:	e1e4      	b.n	800476a <UART_SetConfig+0x5a2>
 80043a0:	2310      	movs	r3, #16
 80043a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80043a6:	e1e0      	b.n	800476a <UART_SetConfig+0x5a2>
 80043a8:	2320      	movs	r3, #32
 80043aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80043ae:	e1dc      	b.n	800476a <UART_SetConfig+0x5a2>
 80043b0:	2340      	movs	r3, #64	; 0x40
 80043b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80043b6:	e1d8      	b.n	800476a <UART_SetConfig+0x5a2>
 80043b8:	2380      	movs	r3, #128	; 0x80
 80043ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80043be:	e1d4      	b.n	800476a <UART_SetConfig+0x5a2>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a51      	ldr	r2, [pc, #324]	; (800450c <UART_SetConfig+0x344>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d130      	bne.n	800442c <UART_SetConfig+0x264>
 80043ca:	4b4e      	ldr	r3, [pc, #312]	; (8004504 <UART_SetConfig+0x33c>)
 80043cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ce:	f003 0307 	and.w	r3, r3, #7
 80043d2:	2b05      	cmp	r3, #5
 80043d4:	d826      	bhi.n	8004424 <UART_SetConfig+0x25c>
 80043d6:	a201      	add	r2, pc, #4	; (adr r2, 80043dc <UART_SetConfig+0x214>)
 80043d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043dc:	080043f5 	.word	0x080043f5
 80043e0:	080043fd 	.word	0x080043fd
 80043e4:	08004405 	.word	0x08004405
 80043e8:	0800440d 	.word	0x0800440d
 80043ec:	08004415 	.word	0x08004415
 80043f0:	0800441d 	.word	0x0800441d
 80043f4:	2300      	movs	r3, #0
 80043f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80043fa:	e1b6      	b.n	800476a <UART_SetConfig+0x5a2>
 80043fc:	2304      	movs	r3, #4
 80043fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004402:	e1b2      	b.n	800476a <UART_SetConfig+0x5a2>
 8004404:	2308      	movs	r3, #8
 8004406:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800440a:	e1ae      	b.n	800476a <UART_SetConfig+0x5a2>
 800440c:	2310      	movs	r3, #16
 800440e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004412:	e1aa      	b.n	800476a <UART_SetConfig+0x5a2>
 8004414:	2320      	movs	r3, #32
 8004416:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800441a:	e1a6      	b.n	800476a <UART_SetConfig+0x5a2>
 800441c:	2340      	movs	r3, #64	; 0x40
 800441e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004422:	e1a2      	b.n	800476a <UART_SetConfig+0x5a2>
 8004424:	2380      	movs	r3, #128	; 0x80
 8004426:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800442a:	e19e      	b.n	800476a <UART_SetConfig+0x5a2>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a37      	ldr	r2, [pc, #220]	; (8004510 <UART_SetConfig+0x348>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d130      	bne.n	8004498 <UART_SetConfig+0x2d0>
 8004436:	4b33      	ldr	r3, [pc, #204]	; (8004504 <UART_SetConfig+0x33c>)
 8004438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800443a:	f003 0307 	and.w	r3, r3, #7
 800443e:	2b05      	cmp	r3, #5
 8004440:	d826      	bhi.n	8004490 <UART_SetConfig+0x2c8>
 8004442:	a201      	add	r2, pc, #4	; (adr r2, 8004448 <UART_SetConfig+0x280>)
 8004444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004448:	08004461 	.word	0x08004461
 800444c:	08004469 	.word	0x08004469
 8004450:	08004471 	.word	0x08004471
 8004454:	08004479 	.word	0x08004479
 8004458:	08004481 	.word	0x08004481
 800445c:	08004489 	.word	0x08004489
 8004460:	2300      	movs	r3, #0
 8004462:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004466:	e180      	b.n	800476a <UART_SetConfig+0x5a2>
 8004468:	2304      	movs	r3, #4
 800446a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800446e:	e17c      	b.n	800476a <UART_SetConfig+0x5a2>
 8004470:	2308      	movs	r3, #8
 8004472:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004476:	e178      	b.n	800476a <UART_SetConfig+0x5a2>
 8004478:	2310      	movs	r3, #16
 800447a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800447e:	e174      	b.n	800476a <UART_SetConfig+0x5a2>
 8004480:	2320      	movs	r3, #32
 8004482:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004486:	e170      	b.n	800476a <UART_SetConfig+0x5a2>
 8004488:	2340      	movs	r3, #64	; 0x40
 800448a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800448e:	e16c      	b.n	800476a <UART_SetConfig+0x5a2>
 8004490:	2380      	movs	r3, #128	; 0x80
 8004492:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004496:	e168      	b.n	800476a <UART_SetConfig+0x5a2>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a1d      	ldr	r2, [pc, #116]	; (8004514 <UART_SetConfig+0x34c>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d142      	bne.n	8004528 <UART_SetConfig+0x360>
 80044a2:	4b18      	ldr	r3, [pc, #96]	; (8004504 <UART_SetConfig+0x33c>)
 80044a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044a6:	f003 0307 	and.w	r3, r3, #7
 80044aa:	2b05      	cmp	r3, #5
 80044ac:	d838      	bhi.n	8004520 <UART_SetConfig+0x358>
 80044ae:	a201      	add	r2, pc, #4	; (adr r2, 80044b4 <UART_SetConfig+0x2ec>)
 80044b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044b4:	080044cd 	.word	0x080044cd
 80044b8:	080044d5 	.word	0x080044d5
 80044bc:	080044dd 	.word	0x080044dd
 80044c0:	080044e5 	.word	0x080044e5
 80044c4:	080044ed 	.word	0x080044ed
 80044c8:	08004519 	.word	0x08004519
 80044cc:	2300      	movs	r3, #0
 80044ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80044d2:	e14a      	b.n	800476a <UART_SetConfig+0x5a2>
 80044d4:	2304      	movs	r3, #4
 80044d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80044da:	e146      	b.n	800476a <UART_SetConfig+0x5a2>
 80044dc:	2308      	movs	r3, #8
 80044de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80044e2:	e142      	b.n	800476a <UART_SetConfig+0x5a2>
 80044e4:	2310      	movs	r3, #16
 80044e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80044ea:	e13e      	b.n	800476a <UART_SetConfig+0x5a2>
 80044ec:	2320      	movs	r3, #32
 80044ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80044f2:	e13a      	b.n	800476a <UART_SetConfig+0x5a2>
 80044f4:	cfff69f3 	.word	0xcfff69f3
 80044f8:	58000c00 	.word	0x58000c00
 80044fc:	11fff4ff 	.word	0x11fff4ff
 8004500:	40011000 	.word	0x40011000
 8004504:	58024400 	.word	0x58024400
 8004508:	40004400 	.word	0x40004400
 800450c:	40004800 	.word	0x40004800
 8004510:	40004c00 	.word	0x40004c00
 8004514:	40005000 	.word	0x40005000
 8004518:	2340      	movs	r3, #64	; 0x40
 800451a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800451e:	e124      	b.n	800476a <UART_SetConfig+0x5a2>
 8004520:	2380      	movs	r3, #128	; 0x80
 8004522:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004526:	e120      	b.n	800476a <UART_SetConfig+0x5a2>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4acc      	ldr	r2, [pc, #816]	; (8004860 <UART_SetConfig+0x698>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d176      	bne.n	8004620 <UART_SetConfig+0x458>
 8004532:	4bcc      	ldr	r3, [pc, #816]	; (8004864 <UART_SetConfig+0x69c>)
 8004534:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004536:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800453a:	2b28      	cmp	r3, #40	; 0x28
 800453c:	d86c      	bhi.n	8004618 <UART_SetConfig+0x450>
 800453e:	a201      	add	r2, pc, #4	; (adr r2, 8004544 <UART_SetConfig+0x37c>)
 8004540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004544:	080045e9 	.word	0x080045e9
 8004548:	08004619 	.word	0x08004619
 800454c:	08004619 	.word	0x08004619
 8004550:	08004619 	.word	0x08004619
 8004554:	08004619 	.word	0x08004619
 8004558:	08004619 	.word	0x08004619
 800455c:	08004619 	.word	0x08004619
 8004560:	08004619 	.word	0x08004619
 8004564:	080045f1 	.word	0x080045f1
 8004568:	08004619 	.word	0x08004619
 800456c:	08004619 	.word	0x08004619
 8004570:	08004619 	.word	0x08004619
 8004574:	08004619 	.word	0x08004619
 8004578:	08004619 	.word	0x08004619
 800457c:	08004619 	.word	0x08004619
 8004580:	08004619 	.word	0x08004619
 8004584:	080045f9 	.word	0x080045f9
 8004588:	08004619 	.word	0x08004619
 800458c:	08004619 	.word	0x08004619
 8004590:	08004619 	.word	0x08004619
 8004594:	08004619 	.word	0x08004619
 8004598:	08004619 	.word	0x08004619
 800459c:	08004619 	.word	0x08004619
 80045a0:	08004619 	.word	0x08004619
 80045a4:	08004601 	.word	0x08004601
 80045a8:	08004619 	.word	0x08004619
 80045ac:	08004619 	.word	0x08004619
 80045b0:	08004619 	.word	0x08004619
 80045b4:	08004619 	.word	0x08004619
 80045b8:	08004619 	.word	0x08004619
 80045bc:	08004619 	.word	0x08004619
 80045c0:	08004619 	.word	0x08004619
 80045c4:	08004609 	.word	0x08004609
 80045c8:	08004619 	.word	0x08004619
 80045cc:	08004619 	.word	0x08004619
 80045d0:	08004619 	.word	0x08004619
 80045d4:	08004619 	.word	0x08004619
 80045d8:	08004619 	.word	0x08004619
 80045dc:	08004619 	.word	0x08004619
 80045e0:	08004619 	.word	0x08004619
 80045e4:	08004611 	.word	0x08004611
 80045e8:	2301      	movs	r3, #1
 80045ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80045ee:	e0bc      	b.n	800476a <UART_SetConfig+0x5a2>
 80045f0:	2304      	movs	r3, #4
 80045f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80045f6:	e0b8      	b.n	800476a <UART_SetConfig+0x5a2>
 80045f8:	2308      	movs	r3, #8
 80045fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80045fe:	e0b4      	b.n	800476a <UART_SetConfig+0x5a2>
 8004600:	2310      	movs	r3, #16
 8004602:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004606:	e0b0      	b.n	800476a <UART_SetConfig+0x5a2>
 8004608:	2320      	movs	r3, #32
 800460a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800460e:	e0ac      	b.n	800476a <UART_SetConfig+0x5a2>
 8004610:	2340      	movs	r3, #64	; 0x40
 8004612:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004616:	e0a8      	b.n	800476a <UART_SetConfig+0x5a2>
 8004618:	2380      	movs	r3, #128	; 0x80
 800461a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800461e:	e0a4      	b.n	800476a <UART_SetConfig+0x5a2>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a90      	ldr	r2, [pc, #576]	; (8004868 <UART_SetConfig+0x6a0>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d130      	bne.n	800468c <UART_SetConfig+0x4c4>
 800462a:	4b8e      	ldr	r3, [pc, #568]	; (8004864 <UART_SetConfig+0x69c>)
 800462c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800462e:	f003 0307 	and.w	r3, r3, #7
 8004632:	2b05      	cmp	r3, #5
 8004634:	d826      	bhi.n	8004684 <UART_SetConfig+0x4bc>
 8004636:	a201      	add	r2, pc, #4	; (adr r2, 800463c <UART_SetConfig+0x474>)
 8004638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800463c:	08004655 	.word	0x08004655
 8004640:	0800465d 	.word	0x0800465d
 8004644:	08004665 	.word	0x08004665
 8004648:	0800466d 	.word	0x0800466d
 800464c:	08004675 	.word	0x08004675
 8004650:	0800467d 	.word	0x0800467d
 8004654:	2300      	movs	r3, #0
 8004656:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800465a:	e086      	b.n	800476a <UART_SetConfig+0x5a2>
 800465c:	2304      	movs	r3, #4
 800465e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004662:	e082      	b.n	800476a <UART_SetConfig+0x5a2>
 8004664:	2308      	movs	r3, #8
 8004666:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800466a:	e07e      	b.n	800476a <UART_SetConfig+0x5a2>
 800466c:	2310      	movs	r3, #16
 800466e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004672:	e07a      	b.n	800476a <UART_SetConfig+0x5a2>
 8004674:	2320      	movs	r3, #32
 8004676:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800467a:	e076      	b.n	800476a <UART_SetConfig+0x5a2>
 800467c:	2340      	movs	r3, #64	; 0x40
 800467e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004682:	e072      	b.n	800476a <UART_SetConfig+0x5a2>
 8004684:	2380      	movs	r3, #128	; 0x80
 8004686:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800468a:	e06e      	b.n	800476a <UART_SetConfig+0x5a2>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a76      	ldr	r2, [pc, #472]	; (800486c <UART_SetConfig+0x6a4>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d130      	bne.n	80046f8 <UART_SetConfig+0x530>
 8004696:	4b73      	ldr	r3, [pc, #460]	; (8004864 <UART_SetConfig+0x69c>)
 8004698:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800469a:	f003 0307 	and.w	r3, r3, #7
 800469e:	2b05      	cmp	r3, #5
 80046a0:	d826      	bhi.n	80046f0 <UART_SetConfig+0x528>
 80046a2:	a201      	add	r2, pc, #4	; (adr r2, 80046a8 <UART_SetConfig+0x4e0>)
 80046a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046a8:	080046c1 	.word	0x080046c1
 80046ac:	080046c9 	.word	0x080046c9
 80046b0:	080046d1 	.word	0x080046d1
 80046b4:	080046d9 	.word	0x080046d9
 80046b8:	080046e1 	.word	0x080046e1
 80046bc:	080046e9 	.word	0x080046e9
 80046c0:	2300      	movs	r3, #0
 80046c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80046c6:	e050      	b.n	800476a <UART_SetConfig+0x5a2>
 80046c8:	2304      	movs	r3, #4
 80046ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80046ce:	e04c      	b.n	800476a <UART_SetConfig+0x5a2>
 80046d0:	2308      	movs	r3, #8
 80046d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80046d6:	e048      	b.n	800476a <UART_SetConfig+0x5a2>
 80046d8:	2310      	movs	r3, #16
 80046da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80046de:	e044      	b.n	800476a <UART_SetConfig+0x5a2>
 80046e0:	2320      	movs	r3, #32
 80046e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80046e6:	e040      	b.n	800476a <UART_SetConfig+0x5a2>
 80046e8:	2340      	movs	r3, #64	; 0x40
 80046ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80046ee:	e03c      	b.n	800476a <UART_SetConfig+0x5a2>
 80046f0:	2380      	movs	r3, #128	; 0x80
 80046f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80046f6:	e038      	b.n	800476a <UART_SetConfig+0x5a2>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a5c      	ldr	r2, [pc, #368]	; (8004870 <UART_SetConfig+0x6a8>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d130      	bne.n	8004764 <UART_SetConfig+0x59c>
 8004702:	4b58      	ldr	r3, [pc, #352]	; (8004864 <UART_SetConfig+0x69c>)
 8004704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004706:	f003 0307 	and.w	r3, r3, #7
 800470a:	2b05      	cmp	r3, #5
 800470c:	d826      	bhi.n	800475c <UART_SetConfig+0x594>
 800470e:	a201      	add	r2, pc, #4	; (adr r2, 8004714 <UART_SetConfig+0x54c>)
 8004710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004714:	0800472d 	.word	0x0800472d
 8004718:	08004735 	.word	0x08004735
 800471c:	0800473d 	.word	0x0800473d
 8004720:	08004745 	.word	0x08004745
 8004724:	0800474d 	.word	0x0800474d
 8004728:	08004755 	.word	0x08004755
 800472c:	2302      	movs	r3, #2
 800472e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004732:	e01a      	b.n	800476a <UART_SetConfig+0x5a2>
 8004734:	2304      	movs	r3, #4
 8004736:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800473a:	e016      	b.n	800476a <UART_SetConfig+0x5a2>
 800473c:	2308      	movs	r3, #8
 800473e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004742:	e012      	b.n	800476a <UART_SetConfig+0x5a2>
 8004744:	2310      	movs	r3, #16
 8004746:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800474a:	e00e      	b.n	800476a <UART_SetConfig+0x5a2>
 800474c:	2320      	movs	r3, #32
 800474e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004752:	e00a      	b.n	800476a <UART_SetConfig+0x5a2>
 8004754:	2340      	movs	r3, #64	; 0x40
 8004756:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800475a:	e006      	b.n	800476a <UART_SetConfig+0x5a2>
 800475c:	2380      	movs	r3, #128	; 0x80
 800475e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004762:	e002      	b.n	800476a <UART_SetConfig+0x5a2>
 8004764:	2380      	movs	r3, #128	; 0x80
 8004766:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a40      	ldr	r2, [pc, #256]	; (8004870 <UART_SetConfig+0x6a8>)
 8004770:	4293      	cmp	r3, r2
 8004772:	f040 80ef 	bne.w	8004954 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004776:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800477a:	2b20      	cmp	r3, #32
 800477c:	dc46      	bgt.n	800480c <UART_SetConfig+0x644>
 800477e:	2b02      	cmp	r3, #2
 8004780:	f2c0 8081 	blt.w	8004886 <UART_SetConfig+0x6be>
 8004784:	3b02      	subs	r3, #2
 8004786:	2b1e      	cmp	r3, #30
 8004788:	d87d      	bhi.n	8004886 <UART_SetConfig+0x6be>
 800478a:	a201      	add	r2, pc, #4	; (adr r2, 8004790 <UART_SetConfig+0x5c8>)
 800478c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004790:	08004813 	.word	0x08004813
 8004794:	08004887 	.word	0x08004887
 8004798:	0800481b 	.word	0x0800481b
 800479c:	08004887 	.word	0x08004887
 80047a0:	08004887 	.word	0x08004887
 80047a4:	08004887 	.word	0x08004887
 80047a8:	0800482b 	.word	0x0800482b
 80047ac:	08004887 	.word	0x08004887
 80047b0:	08004887 	.word	0x08004887
 80047b4:	08004887 	.word	0x08004887
 80047b8:	08004887 	.word	0x08004887
 80047bc:	08004887 	.word	0x08004887
 80047c0:	08004887 	.word	0x08004887
 80047c4:	08004887 	.word	0x08004887
 80047c8:	0800483b 	.word	0x0800483b
 80047cc:	08004887 	.word	0x08004887
 80047d0:	08004887 	.word	0x08004887
 80047d4:	08004887 	.word	0x08004887
 80047d8:	08004887 	.word	0x08004887
 80047dc:	08004887 	.word	0x08004887
 80047e0:	08004887 	.word	0x08004887
 80047e4:	08004887 	.word	0x08004887
 80047e8:	08004887 	.word	0x08004887
 80047ec:	08004887 	.word	0x08004887
 80047f0:	08004887 	.word	0x08004887
 80047f4:	08004887 	.word	0x08004887
 80047f8:	08004887 	.word	0x08004887
 80047fc:	08004887 	.word	0x08004887
 8004800:	08004887 	.word	0x08004887
 8004804:	08004887 	.word	0x08004887
 8004808:	08004879 	.word	0x08004879
 800480c:	2b40      	cmp	r3, #64	; 0x40
 800480e:	d036      	beq.n	800487e <UART_SetConfig+0x6b6>
 8004810:	e039      	b.n	8004886 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8004812:	f7ff f867 	bl	80038e4 <HAL_RCCEx_GetD3PCLK1Freq>
 8004816:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8004818:	e03b      	b.n	8004892 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800481a:	f107 0314 	add.w	r3, r7, #20
 800481e:	4618      	mov	r0, r3
 8004820:	f7ff f876 	bl	8003910 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004824:	69bb      	ldr	r3, [r7, #24]
 8004826:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004828:	e033      	b.n	8004892 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800482a:	f107 0308 	add.w	r3, r7, #8
 800482e:	4618      	mov	r0, r3
 8004830:	f7ff f9c2 	bl	8003bb8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004838:	e02b      	b.n	8004892 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800483a:	4b0a      	ldr	r3, [pc, #40]	; (8004864 <UART_SetConfig+0x69c>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f003 0320 	and.w	r3, r3, #32
 8004842:	2b00      	cmp	r3, #0
 8004844:	d009      	beq.n	800485a <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004846:	4b07      	ldr	r3, [pc, #28]	; (8004864 <UART_SetConfig+0x69c>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	08db      	lsrs	r3, r3, #3
 800484c:	f003 0303 	and.w	r3, r3, #3
 8004850:	4a08      	ldr	r2, [pc, #32]	; (8004874 <UART_SetConfig+0x6ac>)
 8004852:	fa22 f303 	lsr.w	r3, r2, r3
 8004856:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004858:	e01b      	b.n	8004892 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800485a:	4b06      	ldr	r3, [pc, #24]	; (8004874 <UART_SetConfig+0x6ac>)
 800485c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800485e:	e018      	b.n	8004892 <UART_SetConfig+0x6ca>
 8004860:	40011400 	.word	0x40011400
 8004864:	58024400 	.word	0x58024400
 8004868:	40007800 	.word	0x40007800
 800486c:	40007c00 	.word	0x40007c00
 8004870:	58000c00 	.word	0x58000c00
 8004874:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004878:	4bc4      	ldr	r3, [pc, #784]	; (8004b8c <UART_SetConfig+0x9c4>)
 800487a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800487c:	e009      	b.n	8004892 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800487e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004882:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004884:	e005      	b.n	8004892 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8004886:	2300      	movs	r3, #0
 8004888:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8004890:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004894:	2b00      	cmp	r3, #0
 8004896:	f000 81da 	beq.w	8004c4e <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800489e:	4abc      	ldr	r2, [pc, #752]	; (8004b90 <UART_SetConfig+0x9c8>)
 80048a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80048a4:	461a      	mov	r2, r3
 80048a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80048ac:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	685a      	ldr	r2, [r3, #4]
 80048b2:	4613      	mov	r3, r2
 80048b4:	005b      	lsls	r3, r3, #1
 80048b6:	4413      	add	r3, r2
 80048b8:	6a3a      	ldr	r2, [r7, #32]
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d305      	bcc.n	80048ca <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80048c4:	6a3a      	ldr	r2, [r7, #32]
 80048c6:	429a      	cmp	r2, r3
 80048c8:	d903      	bls.n	80048d2 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80048d0:	e1bd      	b.n	8004c4e <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80048d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048d4:	4618      	mov	r0, r3
 80048d6:	f04f 0100 	mov.w	r1, #0
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048de:	4aac      	ldr	r2, [pc, #688]	; (8004b90 <UART_SetConfig+0x9c8>)
 80048e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80048e4:	b29a      	uxth	r2, r3
 80048e6:	f04f 0300 	mov.w	r3, #0
 80048ea:	f7fb fcf5 	bl	80002d8 <__aeabi_uldivmod>
 80048ee:	4602      	mov	r2, r0
 80048f0:	460b      	mov	r3, r1
 80048f2:	4610      	mov	r0, r2
 80048f4:	4619      	mov	r1, r3
 80048f6:	f04f 0200 	mov.w	r2, #0
 80048fa:	f04f 0300 	mov.w	r3, #0
 80048fe:	020b      	lsls	r3, r1, #8
 8004900:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004904:	0202      	lsls	r2, r0, #8
 8004906:	6879      	ldr	r1, [r7, #4]
 8004908:	6849      	ldr	r1, [r1, #4]
 800490a:	0849      	lsrs	r1, r1, #1
 800490c:	4608      	mov	r0, r1
 800490e:	f04f 0100 	mov.w	r1, #0
 8004912:	1814      	adds	r4, r2, r0
 8004914:	eb43 0501 	adc.w	r5, r3, r1
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	461a      	mov	r2, r3
 800491e:	f04f 0300 	mov.w	r3, #0
 8004922:	4620      	mov	r0, r4
 8004924:	4629      	mov	r1, r5
 8004926:	f7fb fcd7 	bl	80002d8 <__aeabi_uldivmod>
 800492a:	4602      	mov	r2, r0
 800492c:	460b      	mov	r3, r1
 800492e:	4613      	mov	r3, r2
 8004930:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004934:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004938:	d308      	bcc.n	800494c <UART_SetConfig+0x784>
 800493a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800493c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004940:	d204      	bcs.n	800494c <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004948:	60da      	str	r2, [r3, #12]
 800494a:	e180      	b.n	8004c4e <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8004952:	e17c      	b.n	8004c4e <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	69db      	ldr	r3, [r3, #28]
 8004958:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800495c:	f040 80bf 	bne.w	8004ade <UART_SetConfig+0x916>
  {
    switch (clocksource)
 8004960:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004964:	2b20      	cmp	r3, #32
 8004966:	dc49      	bgt.n	80049fc <UART_SetConfig+0x834>
 8004968:	2b00      	cmp	r3, #0
 800496a:	db7c      	blt.n	8004a66 <UART_SetConfig+0x89e>
 800496c:	2b20      	cmp	r3, #32
 800496e:	d87a      	bhi.n	8004a66 <UART_SetConfig+0x89e>
 8004970:	a201      	add	r2, pc, #4	; (adr r2, 8004978 <UART_SetConfig+0x7b0>)
 8004972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004976:	bf00      	nop
 8004978:	08004a03 	.word	0x08004a03
 800497c:	08004a0b 	.word	0x08004a0b
 8004980:	08004a67 	.word	0x08004a67
 8004984:	08004a67 	.word	0x08004a67
 8004988:	08004a13 	.word	0x08004a13
 800498c:	08004a67 	.word	0x08004a67
 8004990:	08004a67 	.word	0x08004a67
 8004994:	08004a67 	.word	0x08004a67
 8004998:	08004a23 	.word	0x08004a23
 800499c:	08004a67 	.word	0x08004a67
 80049a0:	08004a67 	.word	0x08004a67
 80049a4:	08004a67 	.word	0x08004a67
 80049a8:	08004a67 	.word	0x08004a67
 80049ac:	08004a67 	.word	0x08004a67
 80049b0:	08004a67 	.word	0x08004a67
 80049b4:	08004a67 	.word	0x08004a67
 80049b8:	08004a33 	.word	0x08004a33
 80049bc:	08004a67 	.word	0x08004a67
 80049c0:	08004a67 	.word	0x08004a67
 80049c4:	08004a67 	.word	0x08004a67
 80049c8:	08004a67 	.word	0x08004a67
 80049cc:	08004a67 	.word	0x08004a67
 80049d0:	08004a67 	.word	0x08004a67
 80049d4:	08004a67 	.word	0x08004a67
 80049d8:	08004a67 	.word	0x08004a67
 80049dc:	08004a67 	.word	0x08004a67
 80049e0:	08004a67 	.word	0x08004a67
 80049e4:	08004a67 	.word	0x08004a67
 80049e8:	08004a67 	.word	0x08004a67
 80049ec:	08004a67 	.word	0x08004a67
 80049f0:	08004a67 	.word	0x08004a67
 80049f4:	08004a67 	.word	0x08004a67
 80049f8:	08004a59 	.word	0x08004a59
 80049fc:	2b40      	cmp	r3, #64	; 0x40
 80049fe:	d02e      	beq.n	8004a5e <UART_SetConfig+0x896>
 8004a00:	e031      	b.n	8004a66 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a02:	f7fe f803 	bl	8002a0c <HAL_RCC_GetPCLK1Freq>
 8004a06:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8004a08:	e033      	b.n	8004a72 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a0a:	f7fe f815 	bl	8002a38 <HAL_RCC_GetPCLK2Freq>
 8004a0e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8004a10:	e02f      	b.n	8004a72 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004a12:	f107 0314 	add.w	r3, r7, #20
 8004a16:	4618      	mov	r0, r3
 8004a18:	f7fe ff7a 	bl	8003910 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004a1c:	69bb      	ldr	r3, [r7, #24]
 8004a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004a20:	e027      	b.n	8004a72 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004a22:	f107 0308 	add.w	r3, r7, #8
 8004a26:	4618      	mov	r0, r3
 8004a28:	f7ff f8c6 	bl	8003bb8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004a30:	e01f      	b.n	8004a72 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a32:	4b58      	ldr	r3, [pc, #352]	; (8004b94 <UART_SetConfig+0x9cc>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 0320 	and.w	r3, r3, #32
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d009      	beq.n	8004a52 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004a3e:	4b55      	ldr	r3, [pc, #340]	; (8004b94 <UART_SetConfig+0x9cc>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	08db      	lsrs	r3, r3, #3
 8004a44:	f003 0303 	and.w	r3, r3, #3
 8004a48:	4a53      	ldr	r2, [pc, #332]	; (8004b98 <UART_SetConfig+0x9d0>)
 8004a4a:	fa22 f303 	lsr.w	r3, r2, r3
 8004a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004a50:	e00f      	b.n	8004a72 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8004a52:	4b51      	ldr	r3, [pc, #324]	; (8004b98 <UART_SetConfig+0x9d0>)
 8004a54:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004a56:	e00c      	b.n	8004a72 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004a58:	4b4c      	ldr	r3, [pc, #304]	; (8004b8c <UART_SetConfig+0x9c4>)
 8004a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004a5c:	e009      	b.n	8004a72 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a62:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004a64:	e005      	b.n	8004a72 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8004a66:	2300      	movs	r3, #0
 8004a68:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8004a70:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	f000 80ea 	beq.w	8004c4e <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a7e:	4a44      	ldr	r2, [pc, #272]	; (8004b90 <UART_SetConfig+0x9c8>)
 8004a80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a84:	461a      	mov	r2, r3
 8004a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a88:	fbb3 f3f2 	udiv	r3, r3, r2
 8004a8c:	005a      	lsls	r2, r3, #1
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	085b      	lsrs	r3, r3, #1
 8004a94:	441a      	add	r2, r3
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a9e:	b29b      	uxth	r3, r3
 8004aa0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aa4:	2b0f      	cmp	r3, #15
 8004aa6:	d916      	bls.n	8004ad6 <UART_SetConfig+0x90e>
 8004aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aaa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004aae:	d212      	bcs.n	8004ad6 <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	f023 030f 	bic.w	r3, r3, #15
 8004ab8:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004abc:	085b      	lsrs	r3, r3, #1
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	f003 0307 	and.w	r3, r3, #7
 8004ac4:	b29a      	uxth	r2, r3
 8004ac6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004ad2:	60da      	str	r2, [r3, #12]
 8004ad4:	e0bb      	b.n	8004c4e <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8004adc:	e0b7      	b.n	8004c4e <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004ade:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004ae2:	2b20      	cmp	r3, #32
 8004ae4:	dc4a      	bgt.n	8004b7c <UART_SetConfig+0x9b4>
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	f2c0 8086 	blt.w	8004bf8 <UART_SetConfig+0xa30>
 8004aec:	2b20      	cmp	r3, #32
 8004aee:	f200 8083 	bhi.w	8004bf8 <UART_SetConfig+0xa30>
 8004af2:	a201      	add	r2, pc, #4	; (adr r2, 8004af8 <UART_SetConfig+0x930>)
 8004af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004af8:	08004b83 	.word	0x08004b83
 8004afc:	08004b9d 	.word	0x08004b9d
 8004b00:	08004bf9 	.word	0x08004bf9
 8004b04:	08004bf9 	.word	0x08004bf9
 8004b08:	08004ba5 	.word	0x08004ba5
 8004b0c:	08004bf9 	.word	0x08004bf9
 8004b10:	08004bf9 	.word	0x08004bf9
 8004b14:	08004bf9 	.word	0x08004bf9
 8004b18:	08004bb5 	.word	0x08004bb5
 8004b1c:	08004bf9 	.word	0x08004bf9
 8004b20:	08004bf9 	.word	0x08004bf9
 8004b24:	08004bf9 	.word	0x08004bf9
 8004b28:	08004bf9 	.word	0x08004bf9
 8004b2c:	08004bf9 	.word	0x08004bf9
 8004b30:	08004bf9 	.word	0x08004bf9
 8004b34:	08004bf9 	.word	0x08004bf9
 8004b38:	08004bc5 	.word	0x08004bc5
 8004b3c:	08004bf9 	.word	0x08004bf9
 8004b40:	08004bf9 	.word	0x08004bf9
 8004b44:	08004bf9 	.word	0x08004bf9
 8004b48:	08004bf9 	.word	0x08004bf9
 8004b4c:	08004bf9 	.word	0x08004bf9
 8004b50:	08004bf9 	.word	0x08004bf9
 8004b54:	08004bf9 	.word	0x08004bf9
 8004b58:	08004bf9 	.word	0x08004bf9
 8004b5c:	08004bf9 	.word	0x08004bf9
 8004b60:	08004bf9 	.word	0x08004bf9
 8004b64:	08004bf9 	.word	0x08004bf9
 8004b68:	08004bf9 	.word	0x08004bf9
 8004b6c:	08004bf9 	.word	0x08004bf9
 8004b70:	08004bf9 	.word	0x08004bf9
 8004b74:	08004bf9 	.word	0x08004bf9
 8004b78:	08004beb 	.word	0x08004beb
 8004b7c:	2b40      	cmp	r3, #64	; 0x40
 8004b7e:	d037      	beq.n	8004bf0 <UART_SetConfig+0xa28>
 8004b80:	e03a      	b.n	8004bf8 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b82:	f7fd ff43 	bl	8002a0c <HAL_RCC_GetPCLK1Freq>
 8004b86:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8004b88:	e03c      	b.n	8004c04 <UART_SetConfig+0xa3c>
 8004b8a:	bf00      	nop
 8004b8c:	003d0900 	.word	0x003d0900
 8004b90:	08005764 	.word	0x08005764
 8004b94:	58024400 	.word	0x58024400
 8004b98:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b9c:	f7fd ff4c 	bl	8002a38 <HAL_RCC_GetPCLK2Freq>
 8004ba0:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8004ba2:	e02f      	b.n	8004c04 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004ba4:	f107 0314 	add.w	r3, r7, #20
 8004ba8:	4618      	mov	r0, r3
 8004baa:	f7fe feb1 	bl	8003910 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004bae:	69bb      	ldr	r3, [r7, #24]
 8004bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004bb2:	e027      	b.n	8004c04 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004bb4:	f107 0308 	add.w	r3, r7, #8
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f7fe fffd 	bl	8003bb8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004bc2:	e01f      	b.n	8004c04 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004bc4:	4b2c      	ldr	r3, [pc, #176]	; (8004c78 <UART_SetConfig+0xab0>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f003 0320 	and.w	r3, r3, #32
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d009      	beq.n	8004be4 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004bd0:	4b29      	ldr	r3, [pc, #164]	; (8004c78 <UART_SetConfig+0xab0>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	08db      	lsrs	r3, r3, #3
 8004bd6:	f003 0303 	and.w	r3, r3, #3
 8004bda:	4a28      	ldr	r2, [pc, #160]	; (8004c7c <UART_SetConfig+0xab4>)
 8004bdc:	fa22 f303 	lsr.w	r3, r2, r3
 8004be0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004be2:	e00f      	b.n	8004c04 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8004be4:	4b25      	ldr	r3, [pc, #148]	; (8004c7c <UART_SetConfig+0xab4>)
 8004be6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004be8:	e00c      	b.n	8004c04 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004bea:	4b25      	ldr	r3, [pc, #148]	; (8004c80 <UART_SetConfig+0xab8>)
 8004bec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004bee:	e009      	b.n	8004c04 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bf0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004bf6:	e005      	b.n	8004c04 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8004c02:	bf00      	nop
    }

    if (pclk != 0U)
 8004c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d021      	beq.n	8004c4e <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c0e:	4a1d      	ldr	r2, [pc, #116]	; (8004c84 <UART_SetConfig+0xabc>)
 8004c10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c14:	461a      	mov	r2, r3
 8004c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c18:	fbb3 f2f2 	udiv	r2, r3, r2
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	085b      	lsrs	r3, r3, #1
 8004c22:	441a      	add	r2, r3
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c32:	2b0f      	cmp	r3, #15
 8004c34:	d908      	bls.n	8004c48 <UART_SetConfig+0xa80>
 8004c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c3c:	d204      	bcs.n	8004c48 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c44:	60da      	str	r2, [r3, #12]
 8004c46:	e002      	b.n	8004c4e <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2201      	movs	r2, #1
 8004c52:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2201      	movs	r2, #1
 8004c5a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2200      	movs	r2, #0
 8004c62:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2200      	movs	r2, #0
 8004c68:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004c6a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3738      	adds	r7, #56	; 0x38
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bdb0      	pop	{r4, r5, r7, pc}
 8004c76:	bf00      	nop
 8004c78:	58024400 	.word	0x58024400
 8004c7c:	03d09000 	.word	0x03d09000
 8004c80:	003d0900 	.word	0x003d0900
 8004c84:	08005764 	.word	0x08005764

08004c88 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b083      	sub	sp, #12
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c94:	f003 0301 	and.w	r3, r3, #1
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d00a      	beq.n	8004cb2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	430a      	orrs	r2, r1
 8004cb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cb6:	f003 0302 	and.w	r3, r3, #2
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d00a      	beq.n	8004cd4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	430a      	orrs	r2, r1
 8004cd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cd8:	f003 0304 	and.w	r3, r3, #4
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d00a      	beq.n	8004cf6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	430a      	orrs	r2, r1
 8004cf4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cfa:	f003 0308 	and.w	r3, r3, #8
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d00a      	beq.n	8004d18 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	430a      	orrs	r2, r1
 8004d16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d1c:	f003 0310 	and.w	r3, r3, #16
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d00a      	beq.n	8004d3a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	430a      	orrs	r2, r1
 8004d38:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d3e:	f003 0320 	and.w	r3, r3, #32
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d00a      	beq.n	8004d5c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	430a      	orrs	r2, r1
 8004d5a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d01a      	beq.n	8004d9e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	430a      	orrs	r2, r1
 8004d7c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d86:	d10a      	bne.n	8004d9e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	430a      	orrs	r2, r1
 8004d9c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004da2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d00a      	beq.n	8004dc0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	430a      	orrs	r2, r1
 8004dbe:	605a      	str	r2, [r3, #4]
  }
}
 8004dc0:	bf00      	nop
 8004dc2:	370c      	adds	r7, #12
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr

08004dcc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b086      	sub	sp, #24
 8004dd0:	af02      	add	r7, sp, #8
 8004dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ddc:	f7fc f98e 	bl	80010fc <HAL_GetTick>
 8004de0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f003 0308 	and.w	r3, r3, #8
 8004dec:	2b08      	cmp	r3, #8
 8004dee:	d10e      	bne.n	8004e0e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004df0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004df4:	9300      	str	r3, [sp, #0]
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f000 f82f 	bl	8004e62 <UART_WaitOnFlagUntilTimeout>
 8004e04:	4603      	mov	r3, r0
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d001      	beq.n	8004e0e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e0a:	2303      	movs	r3, #3
 8004e0c:	e025      	b.n	8004e5a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f003 0304 	and.w	r3, r3, #4
 8004e18:	2b04      	cmp	r3, #4
 8004e1a:	d10e      	bne.n	8004e3a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e1c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e20:	9300      	str	r3, [sp, #0]
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2200      	movs	r2, #0
 8004e26:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f000 f819 	bl	8004e62 <UART_WaitOnFlagUntilTimeout>
 8004e30:	4603      	mov	r3, r0
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d001      	beq.n	8004e3a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e36:	2303      	movs	r3, #3
 8004e38:	e00f      	b.n	8004e5a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2220      	movs	r2, #32
 8004e3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2220      	movs	r2, #32
 8004e46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2200      	movs	r2, #0
 8004e54:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004e58:	2300      	movs	r3, #0
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3710      	adds	r7, #16
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}

08004e62 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004e62:	b580      	push	{r7, lr}
 8004e64:	b084      	sub	sp, #16
 8004e66:	af00      	add	r7, sp, #0
 8004e68:	60f8      	str	r0, [r7, #12]
 8004e6a:	60b9      	str	r1, [r7, #8]
 8004e6c:	603b      	str	r3, [r7, #0]
 8004e6e:	4613      	mov	r3, r2
 8004e70:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e72:	e062      	b.n	8004f3a <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e74:	69bb      	ldr	r3, [r7, #24]
 8004e76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e7a:	d05e      	beq.n	8004f3a <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e7c:	f7fc f93e 	bl	80010fc <HAL_GetTick>
 8004e80:	4602      	mov	r2, r0
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	1ad3      	subs	r3, r2, r3
 8004e86:	69ba      	ldr	r2, [r7, #24]
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	d302      	bcc.n	8004e92 <UART_WaitOnFlagUntilTimeout+0x30>
 8004e8c:	69bb      	ldr	r3, [r7, #24]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d11d      	bne.n	8004ece <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004ea0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	689a      	ldr	r2, [r3, #8]
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f022 0201 	bic.w	r2, r2, #1
 8004eb0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2220      	movs	r2, #32
 8004eb6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2220      	movs	r2, #32
 8004ebe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004eca:	2303      	movs	r3, #3
 8004ecc:	e045      	b.n	8004f5a <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f003 0304 	and.w	r3, r3, #4
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d02e      	beq.n	8004f3a <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	69db      	ldr	r3, [r3, #28]
 8004ee2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ee6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004eea:	d126      	bne.n	8004f3a <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ef4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004f04:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	689a      	ldr	r2, [r3, #8]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f022 0201 	bic.w	r2, r2, #1
 8004f14:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	2220      	movs	r2, #32
 8004f1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2220      	movs	r2, #32
 8004f22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2220      	movs	r2, #32
 8004f2a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2200      	movs	r2, #0
 8004f32:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004f36:	2303      	movs	r3, #3
 8004f38:	e00f      	b.n	8004f5a <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	69da      	ldr	r2, [r3, #28]
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	4013      	ands	r3, r2
 8004f44:	68ba      	ldr	r2, [r7, #8]
 8004f46:	429a      	cmp	r2, r3
 8004f48:	bf0c      	ite	eq
 8004f4a:	2301      	moveq	r3, #1
 8004f4c:	2300      	movne	r3, #0
 8004f4e:	b2db      	uxtb	r3, r3
 8004f50:	461a      	mov	r2, r3
 8004f52:	79fb      	ldrb	r3, [r7, #7]
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d08d      	beq.n	8004e74 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f58:	2300      	movs	r3, #0
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3710      	adds	r7, #16
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}

08004f62 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004f62:	b480      	push	{r7}
 8004f64:	b085      	sub	sp, #20
 8004f66:	af00      	add	r7, sp, #0
 8004f68:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d101      	bne.n	8004f78 <HAL_UARTEx_DisableFifoMode+0x16>
 8004f74:	2302      	movs	r3, #2
 8004f76:	e027      	b.n	8004fc8 <HAL_UARTEx_DisableFifoMode+0x66>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2224      	movs	r2, #36	; 0x24
 8004f84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f022 0201 	bic.w	r2, r2, #1
 8004f9e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004fa6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2200      	movs	r2, #0
 8004fac:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	68fa      	ldr	r2, [r7, #12]
 8004fb4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2220      	movs	r2, #32
 8004fba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004fc6:	2300      	movs	r3, #0
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	3714      	adds	r7, #20
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd2:	4770      	bx	lr

08004fd4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b084      	sub	sp, #16
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
 8004fdc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d101      	bne.n	8004fec <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004fe8:	2302      	movs	r3, #2
 8004fea:	e02d      	b.n	8005048 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2224      	movs	r2, #36	; 0x24
 8004ff8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f022 0201 	bic.w	r2, r2, #1
 8005012:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	683a      	ldr	r2, [r7, #0]
 8005024:	430a      	orrs	r2, r1
 8005026:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f000 f84f 	bl	80050cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	68fa      	ldr	r2, [r7, #12]
 8005034:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2220      	movs	r2, #32
 800503a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2200      	movs	r2, #0
 8005042:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005046:	2300      	movs	r3, #0
}
 8005048:	4618      	mov	r0, r3
 800504a:	3710      	adds	r7, #16
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}

08005050 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b084      	sub	sp, #16
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
 8005058:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005060:	2b01      	cmp	r3, #1
 8005062:	d101      	bne.n	8005068 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005064:	2302      	movs	r3, #2
 8005066:	e02d      	b.n	80050c4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2201      	movs	r2, #1
 800506c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2224      	movs	r2, #36	; 0x24
 8005074:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	681a      	ldr	r2, [r3, #0]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f022 0201 	bic.w	r2, r2, #1
 800508e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	683a      	ldr	r2, [r7, #0]
 80050a0:	430a      	orrs	r2, r1
 80050a2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	f000 f811 	bl	80050cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	68fa      	ldr	r2, [r7, #12]
 80050b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2220      	movs	r2, #32
 80050b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2200      	movs	r2, #0
 80050be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80050c2:	2300      	movs	r3, #0
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	3710      	adds	r7, #16
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}

080050cc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b085      	sub	sp, #20
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d108      	bne.n	80050ee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2201      	movs	r2, #1
 80050e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2201      	movs	r2, #1
 80050e8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80050ec:	e031      	b.n	8005152 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80050ee:	2310      	movs	r3, #16
 80050f0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80050f2:	2310      	movs	r3, #16
 80050f4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	0e5b      	lsrs	r3, r3, #25
 80050fe:	b2db      	uxtb	r3, r3
 8005100:	f003 0307 	and.w	r3, r3, #7
 8005104:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	0f5b      	lsrs	r3, r3, #29
 800510e:	b2db      	uxtb	r3, r3
 8005110:	f003 0307 	and.w	r3, r3, #7
 8005114:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005116:	7bbb      	ldrb	r3, [r7, #14]
 8005118:	7b3a      	ldrb	r2, [r7, #12]
 800511a:	4911      	ldr	r1, [pc, #68]	; (8005160 <UARTEx_SetNbDataToProcess+0x94>)
 800511c:	5c8a      	ldrb	r2, [r1, r2]
 800511e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005122:	7b3a      	ldrb	r2, [r7, #12]
 8005124:	490f      	ldr	r1, [pc, #60]	; (8005164 <UARTEx_SetNbDataToProcess+0x98>)
 8005126:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005128:	fb93 f3f2 	sdiv	r3, r3, r2
 800512c:	b29a      	uxth	r2, r3
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005134:	7bfb      	ldrb	r3, [r7, #15]
 8005136:	7b7a      	ldrb	r2, [r7, #13]
 8005138:	4909      	ldr	r1, [pc, #36]	; (8005160 <UARTEx_SetNbDataToProcess+0x94>)
 800513a:	5c8a      	ldrb	r2, [r1, r2]
 800513c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005140:	7b7a      	ldrb	r2, [r7, #13]
 8005142:	4908      	ldr	r1, [pc, #32]	; (8005164 <UARTEx_SetNbDataToProcess+0x98>)
 8005144:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005146:	fb93 f3f2 	sdiv	r3, r3, r2
 800514a:	b29a      	uxth	r2, r3
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005152:	bf00      	nop
 8005154:	3714      	adds	r7, #20
 8005156:	46bd      	mov	sp, r7
 8005158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515c:	4770      	bx	lr
 800515e:	bf00      	nop
 8005160:	0800577c 	.word	0x0800577c
 8005164:	08005784 	.word	0x08005784

08005168 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005168:	b084      	sub	sp, #16
 800516a:	b580      	push	{r7, lr}
 800516c:	b084      	sub	sp, #16
 800516e:	af00      	add	r7, sp, #0
 8005170:	6078      	str	r0, [r7, #4]
 8005172:	f107 001c 	add.w	r0, r7, #28
 8005176:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800517a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800517c:	2b01      	cmp	r3, #1
 800517e:	d120      	bne.n	80051c2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005184:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	68da      	ldr	r2, [r3, #12]
 8005190:	4b2a      	ldr	r3, [pc, #168]	; (800523c <USB_CoreInit+0xd4>)
 8005192:	4013      	ands	r3, r2
 8005194:	687a      	ldr	r2, [r7, #4]
 8005196:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	68db      	ldr	r3, [r3, #12]
 800519c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80051a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	d105      	bne.n	80051b6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	68db      	ldr	r3, [r3, #12]
 80051ae:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f000 fa60 	bl	800567c <USB_CoreReset>
 80051bc:	4603      	mov	r3, r0
 80051be:	73fb      	strb	r3, [r7, #15]
 80051c0:	e01a      	b.n	80051f8 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	68db      	ldr	r3, [r3, #12]
 80051c6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f000 fa54 	bl	800567c <USB_CoreReset>
 80051d4:	4603      	mov	r3, r0
 80051d6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80051d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d106      	bne.n	80051ec <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051e2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	639a      	str	r2, [r3, #56]	; 0x38
 80051ea:	e005      	b.n	80051f8 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051f0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80051f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051fa:	2b01      	cmp	r3, #1
 80051fc:	d116      	bne.n	800522c <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005202:	b29a      	uxth	r2, r3
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800520c:	4b0c      	ldr	r3, [pc, #48]	; (8005240 <USB_CoreInit+0xd8>)
 800520e:	4313      	orrs	r3, r2
 8005210:	687a      	ldr	r2, [r7, #4]
 8005212:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	f043 0206 	orr.w	r2, r3, #6
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	f043 0220 	orr.w	r2, r3, #32
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800522c:	7bfb      	ldrb	r3, [r7, #15]
}
 800522e:	4618      	mov	r0, r3
 8005230:	3710      	adds	r7, #16
 8005232:	46bd      	mov	sp, r7
 8005234:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005238:	b004      	add	sp, #16
 800523a:	4770      	bx	lr
 800523c:	ffbdffbf 	.word	0xffbdffbf
 8005240:	03ee0000 	.word	0x03ee0000

08005244 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005244:	b480      	push	{r7}
 8005246:	b083      	sub	sp, #12
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	f023 0201 	bic.w	r2, r3, #1
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005258:	2300      	movs	r3, #0
}
 800525a:	4618      	mov	r0, r3
 800525c:	370c      	adds	r7, #12
 800525e:	46bd      	mov	sp, r7
 8005260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005264:	4770      	bx	lr

08005266 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005266:	b580      	push	{r7, lr}
 8005268:	b082      	sub	sp, #8
 800526a:	af00      	add	r7, sp, #0
 800526c:	6078      	str	r0, [r7, #4]
 800526e:	460b      	mov	r3, r1
 8005270:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	68db      	ldr	r3, [r3, #12]
 8005276:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800527e:	78fb      	ldrb	r3, [r7, #3]
 8005280:	2b01      	cmp	r3, #1
 8005282:	d106      	bne.n	8005292 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	68db      	ldr	r3, [r3, #12]
 8005288:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	60da      	str	r2, [r3, #12]
 8005290:	e00b      	b.n	80052aa <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005292:	78fb      	ldrb	r3, [r7, #3]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d106      	bne.n	80052a6 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	68db      	ldr	r3, [r3, #12]
 800529c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	60da      	str	r2, [r3, #12]
 80052a4:	e001      	b.n	80052aa <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	e003      	b.n	80052b2 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80052aa:	2032      	movs	r0, #50	; 0x32
 80052ac:	f7fb ff32 	bl	8001114 <HAL_Delay>

  return HAL_OK;
 80052b0:	2300      	movs	r3, #0
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3708      	adds	r7, #8
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}
	...

080052bc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80052bc:	b084      	sub	sp, #16
 80052be:	b580      	push	{r7, lr}
 80052c0:	b086      	sub	sp, #24
 80052c2:	af00      	add	r7, sp, #0
 80052c4:	6078      	str	r0, [r7, #4]
 80052c6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80052ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80052ce:	2300      	movs	r3, #0
 80052d0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80052d6:	2300      	movs	r3, #0
 80052d8:	613b      	str	r3, [r7, #16]
 80052da:	e009      	b.n	80052f0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80052dc:	687a      	ldr	r2, [r7, #4]
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	3340      	adds	r3, #64	; 0x40
 80052e2:	009b      	lsls	r3, r3, #2
 80052e4:	4413      	add	r3, r2
 80052e6:	2200      	movs	r2, #0
 80052e8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	3301      	adds	r3, #1
 80052ee:	613b      	str	r3, [r7, #16]
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	2b0e      	cmp	r3, #14
 80052f4:	d9f2      	bls.n	80052dc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80052f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d11c      	bne.n	8005336 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	68fa      	ldr	r2, [r7, #12]
 8005306:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800530a:	f043 0302 	orr.w	r3, r3, #2
 800530e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005314:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	601a      	str	r2, [r3, #0]
 8005334:	e005      	b.n	8005342 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800533a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005348:	461a      	mov	r2, r3
 800534a:	2300      	movs	r3, #0
 800534c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005354:	4619      	mov	r1, r3
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800535c:	461a      	mov	r2, r3
 800535e:	680b      	ldr	r3, [r1, #0]
 8005360:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005364:	2b01      	cmp	r3, #1
 8005366:	d10c      	bne.n	8005382 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800536a:	2b00      	cmp	r3, #0
 800536c:	d104      	bne.n	8005378 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800536e:	2100      	movs	r1, #0
 8005370:	6878      	ldr	r0, [r7, #4]
 8005372:	f000 f949 	bl	8005608 <USB_SetDevSpeed>
 8005376:	e008      	b.n	800538a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005378:	2101      	movs	r1, #1
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	f000 f944 	bl	8005608 <USB_SetDevSpeed>
 8005380:	e003      	b.n	800538a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005382:	2103      	movs	r1, #3
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f000 f93f 	bl	8005608 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800538a:	2110      	movs	r1, #16
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	f000 f8f3 	bl	8005578 <USB_FlushTxFifo>
 8005392:	4603      	mov	r3, r0
 8005394:	2b00      	cmp	r3, #0
 8005396:	d001      	beq.n	800539c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005398:	2301      	movs	r3, #1
 800539a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800539c:	6878      	ldr	r0, [r7, #4]
 800539e:	f000 f911 	bl	80055c4 <USB_FlushRxFifo>
 80053a2:	4603      	mov	r3, r0
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d001      	beq.n	80053ac <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80053a8:	2301      	movs	r3, #1
 80053aa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053b2:	461a      	mov	r2, r3
 80053b4:	2300      	movs	r3, #0
 80053b6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053be:	461a      	mov	r2, r3
 80053c0:	2300      	movs	r3, #0
 80053c2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053ca:	461a      	mov	r2, r3
 80053cc:	2300      	movs	r3, #0
 80053ce:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80053d0:	2300      	movs	r3, #0
 80053d2:	613b      	str	r3, [r7, #16]
 80053d4:	e043      	b.n	800545e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	015a      	lsls	r2, r3, #5
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	4413      	add	r3, r2
 80053de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80053e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80053ec:	d118      	bne.n	8005420 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d10a      	bne.n	800540a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	015a      	lsls	r2, r3, #5
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	4413      	add	r3, r2
 80053fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005400:	461a      	mov	r2, r3
 8005402:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005406:	6013      	str	r3, [r2, #0]
 8005408:	e013      	b.n	8005432 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	015a      	lsls	r2, r3, #5
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	4413      	add	r3, r2
 8005412:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005416:	461a      	mov	r2, r3
 8005418:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800541c:	6013      	str	r3, [r2, #0]
 800541e:	e008      	b.n	8005432 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	015a      	lsls	r2, r3, #5
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	4413      	add	r3, r2
 8005428:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800542c:	461a      	mov	r2, r3
 800542e:	2300      	movs	r3, #0
 8005430:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	015a      	lsls	r2, r3, #5
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	4413      	add	r3, r2
 800543a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800543e:	461a      	mov	r2, r3
 8005440:	2300      	movs	r3, #0
 8005442:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	015a      	lsls	r2, r3, #5
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	4413      	add	r3, r2
 800544c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005450:	461a      	mov	r2, r3
 8005452:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005456:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	3301      	adds	r3, #1
 800545c:	613b      	str	r3, [r7, #16]
 800545e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005460:	693a      	ldr	r2, [r7, #16]
 8005462:	429a      	cmp	r2, r3
 8005464:	d3b7      	bcc.n	80053d6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005466:	2300      	movs	r3, #0
 8005468:	613b      	str	r3, [r7, #16]
 800546a:	e043      	b.n	80054f4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	015a      	lsls	r2, r3, #5
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	4413      	add	r3, r2
 8005474:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800547e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005482:	d118      	bne.n	80054b6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d10a      	bne.n	80054a0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	015a      	lsls	r2, r3, #5
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	4413      	add	r3, r2
 8005492:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005496:	461a      	mov	r2, r3
 8005498:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800549c:	6013      	str	r3, [r2, #0]
 800549e:	e013      	b.n	80054c8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	015a      	lsls	r2, r3, #5
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	4413      	add	r3, r2
 80054a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054ac:	461a      	mov	r2, r3
 80054ae:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80054b2:	6013      	str	r3, [r2, #0]
 80054b4:	e008      	b.n	80054c8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	015a      	lsls	r2, r3, #5
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	4413      	add	r3, r2
 80054be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054c2:	461a      	mov	r2, r3
 80054c4:	2300      	movs	r3, #0
 80054c6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	015a      	lsls	r2, r3, #5
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	4413      	add	r3, r2
 80054d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054d4:	461a      	mov	r2, r3
 80054d6:	2300      	movs	r3, #0
 80054d8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	015a      	lsls	r2, r3, #5
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	4413      	add	r3, r2
 80054e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054e6:	461a      	mov	r2, r3
 80054e8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80054ec:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	3301      	adds	r3, #1
 80054f2:	613b      	str	r3, [r7, #16]
 80054f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f6:	693a      	ldr	r2, [r7, #16]
 80054f8:	429a      	cmp	r2, r3
 80054fa:	d3b7      	bcc.n	800546c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005502:	691b      	ldr	r3, [r3, #16]
 8005504:	68fa      	ldr	r2, [r7, #12]
 8005506:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800550a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800550e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2200      	movs	r2, #0
 8005514:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800551c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800551e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005520:	2b00      	cmp	r3, #0
 8005522:	d105      	bne.n	8005530 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	699b      	ldr	r3, [r3, #24]
 8005528:	f043 0210 	orr.w	r2, r3, #16
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	699a      	ldr	r2, [r3, #24]
 8005534:	4b0e      	ldr	r3, [pc, #56]	; (8005570 <USB_DevInit+0x2b4>)
 8005536:	4313      	orrs	r3, r2
 8005538:	687a      	ldr	r2, [r7, #4]
 800553a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800553c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800553e:	2b00      	cmp	r3, #0
 8005540:	d005      	beq.n	800554e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	699b      	ldr	r3, [r3, #24]
 8005546:	f043 0208 	orr.w	r2, r3, #8
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800554e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005550:	2b01      	cmp	r3, #1
 8005552:	d105      	bne.n	8005560 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	699a      	ldr	r2, [r3, #24]
 8005558:	4b06      	ldr	r3, [pc, #24]	; (8005574 <USB_DevInit+0x2b8>)
 800555a:	4313      	orrs	r3, r2
 800555c:	687a      	ldr	r2, [r7, #4]
 800555e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005560:	7dfb      	ldrb	r3, [r7, #23]
}
 8005562:	4618      	mov	r0, r3
 8005564:	3718      	adds	r7, #24
 8005566:	46bd      	mov	sp, r7
 8005568:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800556c:	b004      	add	sp, #16
 800556e:	4770      	bx	lr
 8005570:	803c3800 	.word	0x803c3800
 8005574:	40000004 	.word	0x40000004

08005578 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005578:	b480      	push	{r7}
 800557a:	b085      	sub	sp, #20
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
 8005580:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005582:	2300      	movs	r3, #0
 8005584:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	019b      	lsls	r3, r3, #6
 800558a:	f043 0220 	orr.w	r2, r3, #32
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	3301      	adds	r3, #1
 8005596:	60fb      	str	r3, [r7, #12]
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	4a09      	ldr	r2, [pc, #36]	; (80055c0 <USB_FlushTxFifo+0x48>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d901      	bls.n	80055a4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80055a0:	2303      	movs	r3, #3
 80055a2:	e006      	b.n	80055b2 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	691b      	ldr	r3, [r3, #16]
 80055a8:	f003 0320 	and.w	r3, r3, #32
 80055ac:	2b20      	cmp	r3, #32
 80055ae:	d0f0      	beq.n	8005592 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80055b0:	2300      	movs	r3, #0
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	3714      	adds	r7, #20
 80055b6:	46bd      	mov	sp, r7
 80055b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055bc:	4770      	bx	lr
 80055be:	bf00      	nop
 80055c0:	00030d40 	.word	0x00030d40

080055c4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b085      	sub	sp, #20
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80055cc:	2300      	movs	r3, #0
 80055ce:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2210      	movs	r2, #16
 80055d4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	3301      	adds	r3, #1
 80055da:	60fb      	str	r3, [r7, #12]
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	4a09      	ldr	r2, [pc, #36]	; (8005604 <USB_FlushRxFifo+0x40>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d901      	bls.n	80055e8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80055e4:	2303      	movs	r3, #3
 80055e6:	e006      	b.n	80055f6 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	691b      	ldr	r3, [r3, #16]
 80055ec:	f003 0310 	and.w	r3, r3, #16
 80055f0:	2b10      	cmp	r3, #16
 80055f2:	d0f0      	beq.n	80055d6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80055f4:	2300      	movs	r3, #0
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3714      	adds	r7, #20
 80055fa:	46bd      	mov	sp, r7
 80055fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005600:	4770      	bx	lr
 8005602:	bf00      	nop
 8005604:	00030d40 	.word	0x00030d40

08005608 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005608:	b480      	push	{r7}
 800560a:	b085      	sub	sp, #20
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
 8005610:	460b      	mov	r3, r1
 8005612:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800561e:	681a      	ldr	r2, [r3, #0]
 8005620:	78fb      	ldrb	r3, [r7, #3]
 8005622:	68f9      	ldr	r1, [r7, #12]
 8005624:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005628:	4313      	orrs	r3, r2
 800562a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800562c:	2300      	movs	r3, #0
}
 800562e:	4618      	mov	r0, r3
 8005630:	3714      	adds	r7, #20
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr

0800563a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800563a:	b480      	push	{r7}
 800563c:	b085      	sub	sp, #20
 800563e:	af00      	add	r7, sp, #0
 8005640:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	68fa      	ldr	r2, [r7, #12]
 8005650:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005654:	f023 0303 	bic.w	r3, r3, #3
 8005658:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	68fa      	ldr	r2, [r7, #12]
 8005664:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005668:	f043 0302 	orr.w	r3, r3, #2
 800566c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800566e:	2300      	movs	r3, #0
}
 8005670:	4618      	mov	r0, r3
 8005672:	3714      	adds	r7, #20
 8005674:	46bd      	mov	sp, r7
 8005676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567a:	4770      	bx	lr

0800567c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800567c:	b480      	push	{r7}
 800567e:	b085      	sub	sp, #20
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005684:	2300      	movs	r3, #0
 8005686:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	3301      	adds	r3, #1
 800568c:	60fb      	str	r3, [r7, #12]
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	4a13      	ldr	r2, [pc, #76]	; (80056e0 <USB_CoreReset+0x64>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d901      	bls.n	800569a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005696:	2303      	movs	r3, #3
 8005698:	e01b      	b.n	80056d2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	691b      	ldr	r3, [r3, #16]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	daf2      	bge.n	8005688 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80056a2:	2300      	movs	r3, #0
 80056a4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	691b      	ldr	r3, [r3, #16]
 80056aa:	f043 0201 	orr.w	r2, r3, #1
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	3301      	adds	r3, #1
 80056b6:	60fb      	str	r3, [r7, #12]
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	4a09      	ldr	r2, [pc, #36]	; (80056e0 <USB_CoreReset+0x64>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d901      	bls.n	80056c4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80056c0:	2303      	movs	r3, #3
 80056c2:	e006      	b.n	80056d2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	691b      	ldr	r3, [r3, #16]
 80056c8:	f003 0301 	and.w	r3, r3, #1
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	d0f0      	beq.n	80056b2 <USB_CoreReset+0x36>

  return HAL_OK;
 80056d0:	2300      	movs	r3, #0
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	3714      	adds	r7, #20
 80056d6:	46bd      	mov	sp, r7
 80056d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056dc:	4770      	bx	lr
 80056de:	bf00      	nop
 80056e0:	00030d40 	.word	0x00030d40

080056e4 <__libc_init_array>:
 80056e4:	b570      	push	{r4, r5, r6, lr}
 80056e6:	4d0d      	ldr	r5, [pc, #52]	; (800571c <__libc_init_array+0x38>)
 80056e8:	4c0d      	ldr	r4, [pc, #52]	; (8005720 <__libc_init_array+0x3c>)
 80056ea:	1b64      	subs	r4, r4, r5
 80056ec:	10a4      	asrs	r4, r4, #2
 80056ee:	2600      	movs	r6, #0
 80056f0:	42a6      	cmp	r6, r4
 80056f2:	d109      	bne.n	8005708 <__libc_init_array+0x24>
 80056f4:	4d0b      	ldr	r5, [pc, #44]	; (8005724 <__libc_init_array+0x40>)
 80056f6:	4c0c      	ldr	r4, [pc, #48]	; (8005728 <__libc_init_array+0x44>)
 80056f8:	f000 f820 	bl	800573c <_init>
 80056fc:	1b64      	subs	r4, r4, r5
 80056fe:	10a4      	asrs	r4, r4, #2
 8005700:	2600      	movs	r6, #0
 8005702:	42a6      	cmp	r6, r4
 8005704:	d105      	bne.n	8005712 <__libc_init_array+0x2e>
 8005706:	bd70      	pop	{r4, r5, r6, pc}
 8005708:	f855 3b04 	ldr.w	r3, [r5], #4
 800570c:	4798      	blx	r3
 800570e:	3601      	adds	r6, #1
 8005710:	e7ee      	b.n	80056f0 <__libc_init_array+0xc>
 8005712:	f855 3b04 	ldr.w	r3, [r5], #4
 8005716:	4798      	blx	r3
 8005718:	3601      	adds	r6, #1
 800571a:	e7f2      	b.n	8005702 <__libc_init_array+0x1e>
 800571c:	08005794 	.word	0x08005794
 8005720:	08005794 	.word	0x08005794
 8005724:	08005794 	.word	0x08005794
 8005728:	08005798 	.word	0x08005798

0800572c <memset>:
 800572c:	4402      	add	r2, r0
 800572e:	4603      	mov	r3, r0
 8005730:	4293      	cmp	r3, r2
 8005732:	d100      	bne.n	8005736 <memset+0xa>
 8005734:	4770      	bx	lr
 8005736:	f803 1b01 	strb.w	r1, [r3], #1
 800573a:	e7f9      	b.n	8005730 <memset+0x4>

0800573c <_init>:
 800573c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800573e:	bf00      	nop
 8005740:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005742:	bc08      	pop	{r3}
 8005744:	469e      	mov	lr, r3
 8005746:	4770      	bx	lr

08005748 <_fini>:
 8005748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800574a:	bf00      	nop
 800574c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800574e:	bc08      	pop	{r3}
 8005750:	469e      	mov	lr, r3
 8005752:	4770      	bx	lr
