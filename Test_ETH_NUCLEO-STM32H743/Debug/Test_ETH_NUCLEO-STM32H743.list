
Test_ETH_NUCLEO-STM32H743.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017c44  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002e64  08017ee4  08017ee4  00027ee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801ad48  0801ad48  0002ad48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801ad50  0801ad50  0002ad50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801ad54  0801ad54  0002ad54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000098  24000000  0801ad58  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00007940  24000098  0801adf0  00030098  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240079d8  0801adf0  000379d8  2**0
                  ALLOC
  9 .lwip_sec     000019d0  30040000  30040000  00040000  2**2
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  00030098  2**0
                  CONTENTS, READONLY
 11 .debug_info   0005cc76  00000000  00000000  000300c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00009b3d  00000000  00000000  0008cd3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000027e0  00000000  00000000  00096880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00002648  00000000  00000000  00099060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00048fbf  00000000  00000000  0009b6a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0003d56b  00000000  00000000  000e4667  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00187e13  00000000  00000000  00121bd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  002a99e5  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000ae94  00000000  00000000  002a9a38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000098 	.word	0x24000098
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08017ecc 	.word	0x08017ecc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400009c 	.word	0x2400009c
 80002dc:	08017ecc 	.word	0x08017ecc

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b96e 	b.w	8000674 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468c      	mov	ip, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	f040 8083 	bne.w	80004c6 <__udivmoddi4+0x116>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d947      	bls.n	8000456 <__udivmoddi4+0xa6>
 80003c6:	fab2 f282 	clz	r2, r2
 80003ca:	b142      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003cc:	f1c2 0020 	rsb	r0, r2, #32
 80003d0:	fa24 f000 	lsr.w	r0, r4, r0
 80003d4:	4091      	lsls	r1, r2
 80003d6:	4097      	lsls	r7, r2
 80003d8:	ea40 0c01 	orr.w	ip, r0, r1
 80003dc:	4094      	lsls	r4, r2
 80003de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fbbc f6f8 	udiv	r6, ip, r8
 80003e8:	fa1f fe87 	uxth.w	lr, r7
 80003ec:	fb08 c116 	mls	r1, r8, r6, ip
 80003f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f4:	fb06 f10e 	mul.w	r1, r6, lr
 80003f8:	4299      	cmp	r1, r3
 80003fa:	d909      	bls.n	8000410 <__udivmoddi4+0x60>
 80003fc:	18fb      	adds	r3, r7, r3
 80003fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000402:	f080 8119 	bcs.w	8000638 <__udivmoddi4+0x288>
 8000406:	4299      	cmp	r1, r3
 8000408:	f240 8116 	bls.w	8000638 <__udivmoddi4+0x288>
 800040c:	3e02      	subs	r6, #2
 800040e:	443b      	add	r3, r7
 8000410:	1a5b      	subs	r3, r3, r1
 8000412:	b2a4      	uxth	r4, r4
 8000414:	fbb3 f0f8 	udiv	r0, r3, r8
 8000418:	fb08 3310 	mls	r3, r8, r0, r3
 800041c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000420:	fb00 fe0e 	mul.w	lr, r0, lr
 8000424:	45a6      	cmp	lr, r4
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x8c>
 8000428:	193c      	adds	r4, r7, r4
 800042a:	f100 33ff 	add.w	r3, r0, #4294967295
 800042e:	f080 8105 	bcs.w	800063c <__udivmoddi4+0x28c>
 8000432:	45a6      	cmp	lr, r4
 8000434:	f240 8102 	bls.w	800063c <__udivmoddi4+0x28c>
 8000438:	3802      	subs	r0, #2
 800043a:	443c      	add	r4, r7
 800043c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	2600      	movs	r6, #0
 8000446:	b11d      	cbz	r5, 8000450 <__udivmoddi4+0xa0>
 8000448:	40d4      	lsrs	r4, r2
 800044a:	2300      	movs	r3, #0
 800044c:	e9c5 4300 	strd	r4, r3, [r5]
 8000450:	4631      	mov	r1, r6
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	b902      	cbnz	r2, 800045a <__udivmoddi4+0xaa>
 8000458:	deff      	udf	#255	; 0xff
 800045a:	fab2 f282 	clz	r2, r2
 800045e:	2a00      	cmp	r2, #0
 8000460:	d150      	bne.n	8000504 <__udivmoddi4+0x154>
 8000462:	1bcb      	subs	r3, r1, r7
 8000464:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000468:	fa1f f887 	uxth.w	r8, r7
 800046c:	2601      	movs	r6, #1
 800046e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000472:	0c21      	lsrs	r1, r4, #16
 8000474:	fb0e 331c 	mls	r3, lr, ip, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb08 f30c 	mul.w	r3, r8, ip
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0xe4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f10c 30ff 	add.w	r0, ip, #4294967295
 800048a:	d202      	bcs.n	8000492 <__udivmoddi4+0xe2>
 800048c:	428b      	cmp	r3, r1
 800048e:	f200 80e9 	bhi.w	8000664 <__udivmoddi4+0x2b4>
 8000492:	4684      	mov	ip, r0
 8000494:	1ac9      	subs	r1, r1, r3
 8000496:	b2a3      	uxth	r3, r4
 8000498:	fbb1 f0fe 	udiv	r0, r1, lr
 800049c:	fb0e 1110 	mls	r1, lr, r0, r1
 80004a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004a4:	fb08 f800 	mul.w	r8, r8, r0
 80004a8:	45a0      	cmp	r8, r4
 80004aa:	d907      	bls.n	80004bc <__udivmoddi4+0x10c>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b2:	d202      	bcs.n	80004ba <__udivmoddi4+0x10a>
 80004b4:	45a0      	cmp	r8, r4
 80004b6:	f200 80d9 	bhi.w	800066c <__udivmoddi4+0x2bc>
 80004ba:	4618      	mov	r0, r3
 80004bc:	eba4 0408 	sub.w	r4, r4, r8
 80004c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004c4:	e7bf      	b.n	8000446 <__udivmoddi4+0x96>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d909      	bls.n	80004de <__udivmoddi4+0x12e>
 80004ca:	2d00      	cmp	r5, #0
 80004cc:	f000 80b1 	beq.w	8000632 <__udivmoddi4+0x282>
 80004d0:	2600      	movs	r6, #0
 80004d2:	e9c5 0100 	strd	r0, r1, [r5]
 80004d6:	4630      	mov	r0, r6
 80004d8:	4631      	mov	r1, r6
 80004da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004de:	fab3 f683 	clz	r6, r3
 80004e2:	2e00      	cmp	r6, #0
 80004e4:	d14a      	bne.n	800057c <__udivmoddi4+0x1cc>
 80004e6:	428b      	cmp	r3, r1
 80004e8:	d302      	bcc.n	80004f0 <__udivmoddi4+0x140>
 80004ea:	4282      	cmp	r2, r0
 80004ec:	f200 80b8 	bhi.w	8000660 <__udivmoddi4+0x2b0>
 80004f0:	1a84      	subs	r4, r0, r2
 80004f2:	eb61 0103 	sbc.w	r1, r1, r3
 80004f6:	2001      	movs	r0, #1
 80004f8:	468c      	mov	ip, r1
 80004fa:	2d00      	cmp	r5, #0
 80004fc:	d0a8      	beq.n	8000450 <__udivmoddi4+0xa0>
 80004fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000502:	e7a5      	b.n	8000450 <__udivmoddi4+0xa0>
 8000504:	f1c2 0320 	rsb	r3, r2, #32
 8000508:	fa20 f603 	lsr.w	r6, r0, r3
 800050c:	4097      	lsls	r7, r2
 800050e:	fa01 f002 	lsl.w	r0, r1, r2
 8000512:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000516:	40d9      	lsrs	r1, r3
 8000518:	4330      	orrs	r0, r6
 800051a:	0c03      	lsrs	r3, r0, #16
 800051c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000520:	fa1f f887 	uxth.w	r8, r7
 8000524:	fb0e 1116 	mls	r1, lr, r6, r1
 8000528:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800052c:	fb06 f108 	mul.w	r1, r6, r8
 8000530:	4299      	cmp	r1, r3
 8000532:	fa04 f402 	lsl.w	r4, r4, r2
 8000536:	d909      	bls.n	800054c <__udivmoddi4+0x19c>
 8000538:	18fb      	adds	r3, r7, r3
 800053a:	f106 3cff 	add.w	ip, r6, #4294967295
 800053e:	f080 808d 	bcs.w	800065c <__udivmoddi4+0x2ac>
 8000542:	4299      	cmp	r1, r3
 8000544:	f240 808a 	bls.w	800065c <__udivmoddi4+0x2ac>
 8000548:	3e02      	subs	r6, #2
 800054a:	443b      	add	r3, r7
 800054c:	1a5b      	subs	r3, r3, r1
 800054e:	b281      	uxth	r1, r0
 8000550:	fbb3 f0fe 	udiv	r0, r3, lr
 8000554:	fb0e 3310 	mls	r3, lr, r0, r3
 8000558:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055c:	fb00 f308 	mul.w	r3, r0, r8
 8000560:	428b      	cmp	r3, r1
 8000562:	d907      	bls.n	8000574 <__udivmoddi4+0x1c4>
 8000564:	1879      	adds	r1, r7, r1
 8000566:	f100 3cff 	add.w	ip, r0, #4294967295
 800056a:	d273      	bcs.n	8000654 <__udivmoddi4+0x2a4>
 800056c:	428b      	cmp	r3, r1
 800056e:	d971      	bls.n	8000654 <__udivmoddi4+0x2a4>
 8000570:	3802      	subs	r0, #2
 8000572:	4439      	add	r1, r7
 8000574:	1acb      	subs	r3, r1, r3
 8000576:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800057a:	e778      	b.n	800046e <__udivmoddi4+0xbe>
 800057c:	f1c6 0c20 	rsb	ip, r6, #32
 8000580:	fa03 f406 	lsl.w	r4, r3, r6
 8000584:	fa22 f30c 	lsr.w	r3, r2, ip
 8000588:	431c      	orrs	r4, r3
 800058a:	fa20 f70c 	lsr.w	r7, r0, ip
 800058e:	fa01 f306 	lsl.w	r3, r1, r6
 8000592:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000596:	fa21 f10c 	lsr.w	r1, r1, ip
 800059a:	431f      	orrs	r7, r3
 800059c:	0c3b      	lsrs	r3, r7, #16
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fa1f f884 	uxth.w	r8, r4
 80005a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005ae:	fb09 fa08 	mul.w	sl, r9, r8
 80005b2:	458a      	cmp	sl, r1
 80005b4:	fa02 f206 	lsl.w	r2, r2, r6
 80005b8:	fa00 f306 	lsl.w	r3, r0, r6
 80005bc:	d908      	bls.n	80005d0 <__udivmoddi4+0x220>
 80005be:	1861      	adds	r1, r4, r1
 80005c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005c4:	d248      	bcs.n	8000658 <__udivmoddi4+0x2a8>
 80005c6:	458a      	cmp	sl, r1
 80005c8:	d946      	bls.n	8000658 <__udivmoddi4+0x2a8>
 80005ca:	f1a9 0902 	sub.w	r9, r9, #2
 80005ce:	4421      	add	r1, r4
 80005d0:	eba1 010a 	sub.w	r1, r1, sl
 80005d4:	b2bf      	uxth	r7, r7
 80005d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005da:	fb0e 1110 	mls	r1, lr, r0, r1
 80005de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005e2:	fb00 f808 	mul.w	r8, r0, r8
 80005e6:	45b8      	cmp	r8, r7
 80005e8:	d907      	bls.n	80005fa <__udivmoddi4+0x24a>
 80005ea:	19e7      	adds	r7, r4, r7
 80005ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80005f0:	d22e      	bcs.n	8000650 <__udivmoddi4+0x2a0>
 80005f2:	45b8      	cmp	r8, r7
 80005f4:	d92c      	bls.n	8000650 <__udivmoddi4+0x2a0>
 80005f6:	3802      	subs	r0, #2
 80005f8:	4427      	add	r7, r4
 80005fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80005fe:	eba7 0708 	sub.w	r7, r7, r8
 8000602:	fba0 8902 	umull	r8, r9, r0, r2
 8000606:	454f      	cmp	r7, r9
 8000608:	46c6      	mov	lr, r8
 800060a:	4649      	mov	r1, r9
 800060c:	d31a      	bcc.n	8000644 <__udivmoddi4+0x294>
 800060e:	d017      	beq.n	8000640 <__udivmoddi4+0x290>
 8000610:	b15d      	cbz	r5, 800062a <__udivmoddi4+0x27a>
 8000612:	ebb3 020e 	subs.w	r2, r3, lr
 8000616:	eb67 0701 	sbc.w	r7, r7, r1
 800061a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800061e:	40f2      	lsrs	r2, r6
 8000620:	ea4c 0202 	orr.w	r2, ip, r2
 8000624:	40f7      	lsrs	r7, r6
 8000626:	e9c5 2700 	strd	r2, r7, [r5]
 800062a:	2600      	movs	r6, #0
 800062c:	4631      	mov	r1, r6
 800062e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000632:	462e      	mov	r6, r5
 8000634:	4628      	mov	r0, r5
 8000636:	e70b      	b.n	8000450 <__udivmoddi4+0xa0>
 8000638:	4606      	mov	r6, r0
 800063a:	e6e9      	b.n	8000410 <__udivmoddi4+0x60>
 800063c:	4618      	mov	r0, r3
 800063e:	e6fd      	b.n	800043c <__udivmoddi4+0x8c>
 8000640:	4543      	cmp	r3, r8
 8000642:	d2e5      	bcs.n	8000610 <__udivmoddi4+0x260>
 8000644:	ebb8 0e02 	subs.w	lr, r8, r2
 8000648:	eb69 0104 	sbc.w	r1, r9, r4
 800064c:	3801      	subs	r0, #1
 800064e:	e7df      	b.n	8000610 <__udivmoddi4+0x260>
 8000650:	4608      	mov	r0, r1
 8000652:	e7d2      	b.n	80005fa <__udivmoddi4+0x24a>
 8000654:	4660      	mov	r0, ip
 8000656:	e78d      	b.n	8000574 <__udivmoddi4+0x1c4>
 8000658:	4681      	mov	r9, r0
 800065a:	e7b9      	b.n	80005d0 <__udivmoddi4+0x220>
 800065c:	4666      	mov	r6, ip
 800065e:	e775      	b.n	800054c <__udivmoddi4+0x19c>
 8000660:	4630      	mov	r0, r6
 8000662:	e74a      	b.n	80004fa <__udivmoddi4+0x14a>
 8000664:	f1ac 0c02 	sub.w	ip, ip, #2
 8000668:	4439      	add	r1, r7
 800066a:	e713      	b.n	8000494 <__udivmoddi4+0xe4>
 800066c:	3802      	subs	r0, #2
 800066e:	443c      	add	r4, r7
 8000670:	e724      	b.n	80004bc <__udivmoddi4+0x10c>
 8000672:	bf00      	nop

08000674 <__aeabi_idiv0>:
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000678:	b480      	push	{r7}
 800067a:	b085      	sub	sp, #20
 800067c:	af00      	add	r7, sp, #0
 800067e:	60f8      	str	r0, [r7, #12]
 8000680:	60b9      	str	r1, [r7, #8]
 8000682:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	4a07      	ldr	r2, [pc, #28]	; (80006a4 <vApplicationGetIdleTaskMemory+0x2c>)
 8000688:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800068a:	68bb      	ldr	r3, [r7, #8]
 800068c:	4a06      	ldr	r2, [pc, #24]	; (80006a8 <vApplicationGetIdleTaskMemory+0x30>)
 800068e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	2280      	movs	r2, #128	; 0x80
 8000694:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000696:	bf00      	nop
 8000698:	3714      	adds	r7, #20
 800069a:	46bd      	mov	sp, r7
 800069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop
 80006a4:	240000b4 	.word	0x240000b4
 80006a8:	24000108 	.word	0x24000108

080006ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006ac:	b5b0      	push	{r4, r5, r7, lr}
 80006ae:	b08a      	sub	sp, #40	; 0x28
 80006b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80006b2:	f000 fa6b 	bl	8000b8c <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80006b6:	4b40      	ldr	r3, [pc, #256]	; (80007b8 <main+0x10c>)
 80006b8:	695b      	ldr	r3, [r3, #20]
 80006ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d11b      	bne.n	80006fa <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80006c2:	f3bf 8f4f 	dsb	sy
}
 80006c6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006c8:	f3bf 8f6f 	isb	sy
}
 80006cc:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80006ce:	4b3a      	ldr	r3, [pc, #232]	; (80007b8 <main+0x10c>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80006d6:	f3bf 8f4f 	dsb	sy
}
 80006da:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006dc:	f3bf 8f6f 	isb	sy
}
 80006e0:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80006e2:	4b35      	ldr	r3, [pc, #212]	; (80007b8 <main+0x10c>)
 80006e4:	695b      	ldr	r3, [r3, #20]
 80006e6:	4a34      	ldr	r2, [pc, #208]	; (80007b8 <main+0x10c>)
 80006e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006ec:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80006ee:	f3bf 8f4f 	dsb	sy
}
 80006f2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006f4:	f3bf 8f6f 	isb	sy
}
 80006f8:	e000      	b.n	80006fc <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80006fa:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80006fc:	4b2e      	ldr	r3, [pc, #184]	; (80007b8 <main+0x10c>)
 80006fe:	695b      	ldr	r3, [r3, #20]
 8000700:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000704:	2b00      	cmp	r3, #0
 8000706:	d138      	bne.n	800077a <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000708:	4b2b      	ldr	r3, [pc, #172]	; (80007b8 <main+0x10c>)
 800070a:	2200      	movs	r2, #0
 800070c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000710:	f3bf 8f4f 	dsb	sy
}
 8000714:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000716:	4b28      	ldr	r3, [pc, #160]	; (80007b8 <main+0x10c>)
 8000718:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800071c:	627b      	str	r3, [r7, #36]	; 0x24

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800071e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000720:	0b5b      	lsrs	r3, r3, #13
 8000722:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000726:	623b      	str	r3, [r7, #32]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800072a:	08db      	lsrs	r3, r3, #3
 800072c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000730:	61fb      	str	r3, [r7, #28]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000732:	6a3b      	ldr	r3, [r7, #32]
 8000734:	015a      	lsls	r2, r3, #5
 8000736:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800073a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800073c:	69fa      	ldr	r2, [r7, #28]
 800073e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000740:	491d      	ldr	r1, [pc, #116]	; (80007b8 <main+0x10c>)
 8000742:	4313      	orrs	r3, r2
 8000744:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000748:	69fb      	ldr	r3, [r7, #28]
 800074a:	1e5a      	subs	r2, r3, #1
 800074c:	61fa      	str	r2, [r7, #28]
 800074e:	2b00      	cmp	r3, #0
 8000750:	d1ef      	bne.n	8000732 <main+0x86>
    } while(sets-- != 0U);
 8000752:	6a3b      	ldr	r3, [r7, #32]
 8000754:	1e5a      	subs	r2, r3, #1
 8000756:	623a      	str	r2, [r7, #32]
 8000758:	2b00      	cmp	r3, #0
 800075a:	d1e5      	bne.n	8000728 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 800075c:	f3bf 8f4f 	dsb	sy
}
 8000760:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000762:	4b15      	ldr	r3, [pc, #84]	; (80007b8 <main+0x10c>)
 8000764:	695b      	ldr	r3, [r3, #20]
 8000766:	4a14      	ldr	r2, [pc, #80]	; (80007b8 <main+0x10c>)
 8000768:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800076c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800076e:	f3bf 8f4f 	dsb	sy
}
 8000772:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000774:	f3bf 8f6f 	isb	sy
}
 8000778:	e000      	b.n	800077c <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800077a:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800077c:	f001 f8e8 	bl	8001950 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000780:	f000 f820 	bl	80007c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000784:	f000 f916 	bl	80009b4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000788:	f000 f896 	bl	80008b8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800078c:	f000 f8e0 	bl	8000950 <MX_USB_OTG_FS_PCD_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 8000790:	4b0a      	ldr	r3, [pc, #40]	; (80007bc <main+0x110>)
 8000792:	463c      	mov	r4, r7
 8000794:	461d      	mov	r5, r3
 8000796:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000798:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800079a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800079e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80007a2:	463b      	mov	r3, r7
 80007a4:	2100      	movs	r1, #0
 80007a6:	4618      	mov	r0, r3
 80007a8:	f008 fbe3 	bl	8008f72 <osThreadCreate>
 80007ac:	4603      	mov	r3, r0
 80007ae:	4a04      	ldr	r2, [pc, #16]	; (80007c0 <main+0x114>)
 80007b0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80007b2:	f008 fbc7 	bl	8008f44 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007b6:	e7fe      	b.n	80007b6 <main+0x10a>
 80007b8:	e000ed00 	.word	0xe000ed00
 80007bc:	08017ef0 	.word	0x08017ef0
 80007c0:	24004204 	.word	0x24004204

080007c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b09c      	sub	sp, #112	; 0x70
 80007c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ce:	224c      	movs	r2, #76	; 0x4c
 80007d0:	2100      	movs	r1, #0
 80007d2:	4618      	mov	r0, r3
 80007d4:	f016 fb58 	bl	8016e88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007d8:	1d3b      	adds	r3, r7, #4
 80007da:	2220      	movs	r2, #32
 80007dc:	2100      	movs	r1, #0
 80007de:	4618      	mov	r0, r3
 80007e0:	f016 fb52 	bl	8016e88 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80007e4:	2002      	movs	r0, #2
 80007e6:	f003 fc87 	bl	80040f8 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007ea:	2300      	movs	r3, #0
 80007ec:	603b      	str	r3, [r7, #0]
 80007ee:	4b30      	ldr	r3, [pc, #192]	; (80008b0 <SystemClock_Config+0xec>)
 80007f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007f2:	4a2f      	ldr	r2, [pc, #188]	; (80008b0 <SystemClock_Config+0xec>)
 80007f4:	f023 0301 	bic.w	r3, r3, #1
 80007f8:	62d3      	str	r3, [r2, #44]	; 0x2c
 80007fa:	4b2d      	ldr	r3, [pc, #180]	; (80008b0 <SystemClock_Config+0xec>)
 80007fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007fe:	f003 0301 	and.w	r3, r3, #1
 8000802:	603b      	str	r3, [r7, #0]
 8000804:	4b2b      	ldr	r3, [pc, #172]	; (80008b4 <SystemClock_Config+0xf0>)
 8000806:	699b      	ldr	r3, [r3, #24]
 8000808:	4a2a      	ldr	r2, [pc, #168]	; (80008b4 <SystemClock_Config+0xf0>)
 800080a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800080e:	6193      	str	r3, [r2, #24]
 8000810:	4b28      	ldr	r3, [pc, #160]	; (80008b4 <SystemClock_Config+0xf0>)
 8000812:	699b      	ldr	r3, [r3, #24]
 8000814:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000818:	603b      	str	r3, [r7, #0]
 800081a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800081c:	bf00      	nop
 800081e:	4b25      	ldr	r3, [pc, #148]	; (80008b4 <SystemClock_Config+0xf0>)
 8000820:	699b      	ldr	r3, [r3, #24]
 8000822:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000826:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800082a:	d1f8      	bne.n	800081e <SystemClock_Config+0x5a>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800082c:	2301      	movs	r3, #1
 800082e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000830:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000834:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000836:	2302      	movs	r3, #2
 8000838:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800083a:	2302      	movs	r3, #2
 800083c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800083e:	2301      	movs	r3, #1
 8000840:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000842:	2364      	movs	r3, #100	; 0x64
 8000844:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000846:	2302      	movs	r3, #2
 8000848:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 13;
 800084a:	230d      	movs	r3, #13
 800084c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800084e:	2302      	movs	r3, #2
 8000850:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000852:	230c      	movs	r3, #12
 8000854:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000856:	2300      	movs	r3, #0
 8000858:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800085a:	2300      	movs	r3, #0
 800085c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800085e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000862:	4618      	mov	r0, r3
 8000864:	f003 fc92 	bl	800418c <HAL_RCC_OscConfig>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800086e:	f000 f9e9 	bl	8000c44 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000872:	233f      	movs	r3, #63	; 0x3f
 8000874:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000876:	2303      	movs	r3, #3
 8000878:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800087a:	2300      	movs	r3, #0
 800087c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800087e:	2308      	movs	r3, #8
 8000880:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000882:	2340      	movs	r3, #64	; 0x40
 8000884:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000886:	2340      	movs	r3, #64	; 0x40
 8000888:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800088a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800088e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000890:	2340      	movs	r3, #64	; 0x40
 8000892:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000894:	1d3b      	adds	r3, r7, #4
 8000896:	2102      	movs	r1, #2
 8000898:	4618      	mov	r0, r3
 800089a:	f004 f887 	bl	80049ac <HAL_RCC_ClockConfig>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 80008a4:	f000 f9ce 	bl	8000c44 <Error_Handler>
  }
}
 80008a8:	bf00      	nop
 80008aa:	3770      	adds	r7, #112	; 0x70
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	58000400 	.word	0x58000400
 80008b4:	58024800 	.word	0x58024800

080008b8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008bc:	4b22      	ldr	r3, [pc, #136]	; (8000948 <MX_USART3_UART_Init+0x90>)
 80008be:	4a23      	ldr	r2, [pc, #140]	; (800094c <MX_USART3_UART_Init+0x94>)
 80008c0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008c2:	4b21      	ldr	r3, [pc, #132]	; (8000948 <MX_USART3_UART_Init+0x90>)
 80008c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008c8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008ca:	4b1f      	ldr	r3, [pc, #124]	; (8000948 <MX_USART3_UART_Init+0x90>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008d0:	4b1d      	ldr	r3, [pc, #116]	; (8000948 <MX_USART3_UART_Init+0x90>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008d6:	4b1c      	ldr	r3, [pc, #112]	; (8000948 <MX_USART3_UART_Init+0x90>)
 80008d8:	2200      	movs	r2, #0
 80008da:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008dc:	4b1a      	ldr	r3, [pc, #104]	; (8000948 <MX_USART3_UART_Init+0x90>)
 80008de:	220c      	movs	r2, #12
 80008e0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008e2:	4b19      	ldr	r3, [pc, #100]	; (8000948 <MX_USART3_UART_Init+0x90>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008e8:	4b17      	ldr	r3, [pc, #92]	; (8000948 <MX_USART3_UART_Init+0x90>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008ee:	4b16      	ldr	r3, [pc, #88]	; (8000948 <MX_USART3_UART_Init+0x90>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008f4:	4b14      	ldr	r3, [pc, #80]	; (8000948 <MX_USART3_UART_Init+0x90>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008fa:	4b13      	ldr	r3, [pc, #76]	; (8000948 <MX_USART3_UART_Init+0x90>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000900:	4811      	ldr	r0, [pc, #68]	; (8000948 <MX_USART3_UART_Init+0x90>)
 8000902:	f006 fa55 	bl	8006db0 <HAL_UART_Init>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800090c:	f000 f99a 	bl	8000c44 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000910:	2100      	movs	r1, #0
 8000912:	480d      	ldr	r0, [pc, #52]	; (8000948 <MX_USART3_UART_Init+0x90>)
 8000914:	f007 f9a2 	bl	8007c5c <HAL_UARTEx_SetTxFifoThreshold>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800091e:	f000 f991 	bl	8000c44 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000922:	2100      	movs	r1, #0
 8000924:	4808      	ldr	r0, [pc, #32]	; (8000948 <MX_USART3_UART_Init+0x90>)
 8000926:	f007 f9d7 	bl	8007cd8 <HAL_UARTEx_SetRxFifoThreshold>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000930:	f000 f988 	bl	8000c44 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000934:	4804      	ldr	r0, [pc, #16]	; (8000948 <MX_USART3_UART_Init+0x90>)
 8000936:	f007 f958 	bl	8007bea <HAL_UARTEx_DisableFifoMode>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000940:	f000 f980 	bl	8000c44 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000944:	bf00      	nop
 8000946:	bd80      	pop	{r7, pc}
 8000948:	24004208 	.word	0x24004208
 800094c:	40004800 	.word	0x40004800

08000950 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000954:	4b15      	ldr	r3, [pc, #84]	; (80009ac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000956:	4a16      	ldr	r2, [pc, #88]	; (80009b0 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000958:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800095a:	4b14      	ldr	r3, [pc, #80]	; (80009ac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800095c:	2209      	movs	r2, #9
 800095e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000960:	4b12      	ldr	r3, [pc, #72]	; (80009ac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000962:	2202      	movs	r2, #2
 8000964:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000966:	4b11      	ldr	r3, [pc, #68]	; (80009ac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000968:	2200      	movs	r2, #0
 800096a:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800096c:	4b0f      	ldr	r3, [pc, #60]	; (80009ac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800096e:	2202      	movs	r2, #2
 8000970:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000972:	4b0e      	ldr	r3, [pc, #56]	; (80009ac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000974:	2201      	movs	r2, #1
 8000976:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000978:	4b0c      	ldr	r3, [pc, #48]	; (80009ac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800097a:	2200      	movs	r2, #0
 800097c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800097e:	4b0b      	ldr	r3, [pc, #44]	; (80009ac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000980:	2200      	movs	r2, #0
 8000982:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000984:	4b09      	ldr	r3, [pc, #36]	; (80009ac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000986:	2201      	movs	r2, #1
 8000988:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800098a:	4b08      	ldr	r3, [pc, #32]	; (80009ac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800098c:	2201      	movs	r2, #1
 800098e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000990:	4b06      	ldr	r3, [pc, #24]	; (80009ac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000992:	2200      	movs	r2, #0
 8000994:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000996:	4805      	ldr	r0, [pc, #20]	; (80009ac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000998:	f003 fa65 	bl	8003e66 <HAL_PCD_Init>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 80009a2:	f000 f94f 	bl	8000c44 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80009a6:	bf00      	nop
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	24004298 	.word	0x24004298
 80009b0:	40080000 	.word	0x40080000

080009b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b08c      	sub	sp, #48	; 0x30
 80009b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ba:	f107 031c 	add.w	r3, r7, #28
 80009be:	2200      	movs	r2, #0
 80009c0:	601a      	str	r2, [r3, #0]
 80009c2:	605a      	str	r2, [r3, #4]
 80009c4:	609a      	str	r2, [r3, #8]
 80009c6:	60da      	str	r2, [r3, #12]
 80009c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ca:	4b60      	ldr	r3, [pc, #384]	; (8000b4c <MX_GPIO_Init+0x198>)
 80009cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d0:	4a5e      	ldr	r2, [pc, #376]	; (8000b4c <MX_GPIO_Init+0x198>)
 80009d2:	f043 0304 	orr.w	r3, r3, #4
 80009d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009da:	4b5c      	ldr	r3, [pc, #368]	; (8000b4c <MX_GPIO_Init+0x198>)
 80009dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e0:	f003 0304 	and.w	r3, r3, #4
 80009e4:	61bb      	str	r3, [r7, #24]
 80009e6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009e8:	4b58      	ldr	r3, [pc, #352]	; (8000b4c <MX_GPIO_Init+0x198>)
 80009ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009ee:	4a57      	ldr	r2, [pc, #348]	; (8000b4c <MX_GPIO_Init+0x198>)
 80009f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009f8:	4b54      	ldr	r3, [pc, #336]	; (8000b4c <MX_GPIO_Init+0x198>)
 80009fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a02:	617b      	str	r3, [r7, #20]
 8000a04:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a06:	4b51      	ldr	r3, [pc, #324]	; (8000b4c <MX_GPIO_Init+0x198>)
 8000a08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a0c:	4a4f      	ldr	r2, [pc, #316]	; (8000b4c <MX_GPIO_Init+0x198>)
 8000a0e:	f043 0301 	orr.w	r3, r3, #1
 8000a12:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a16:	4b4d      	ldr	r3, [pc, #308]	; (8000b4c <MX_GPIO_Init+0x198>)
 8000a18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a1c:	f003 0301 	and.w	r3, r3, #1
 8000a20:	613b      	str	r3, [r7, #16]
 8000a22:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a24:	4b49      	ldr	r3, [pc, #292]	; (8000b4c <MX_GPIO_Init+0x198>)
 8000a26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a2a:	4a48      	ldr	r2, [pc, #288]	; (8000b4c <MX_GPIO_Init+0x198>)
 8000a2c:	f043 0302 	orr.w	r3, r3, #2
 8000a30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a34:	4b45      	ldr	r3, [pc, #276]	; (8000b4c <MX_GPIO_Init+0x198>)
 8000a36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a3a:	f003 0302 	and.w	r3, r3, #2
 8000a3e:	60fb      	str	r3, [r7, #12]
 8000a40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a42:	4b42      	ldr	r3, [pc, #264]	; (8000b4c <MX_GPIO_Init+0x198>)
 8000a44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a48:	4a40      	ldr	r2, [pc, #256]	; (8000b4c <MX_GPIO_Init+0x198>)
 8000a4a:	f043 0308 	orr.w	r3, r3, #8
 8000a4e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a52:	4b3e      	ldr	r3, [pc, #248]	; (8000b4c <MX_GPIO_Init+0x198>)
 8000a54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a58:	f003 0308 	and.w	r3, r3, #8
 8000a5c:	60bb      	str	r3, [r7, #8]
 8000a5e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a60:	4b3a      	ldr	r3, [pc, #232]	; (8000b4c <MX_GPIO_Init+0x198>)
 8000a62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a66:	4a39      	ldr	r2, [pc, #228]	; (8000b4c <MX_GPIO_Init+0x198>)
 8000a68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a6c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a70:	4b36      	ldr	r3, [pc, #216]	; (8000b4c <MX_GPIO_Init+0x198>)
 8000a72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a7a:	607b      	str	r3, [r7, #4]
 8000a7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a7e:	4b33      	ldr	r3, [pc, #204]	; (8000b4c <MX_GPIO_Init+0x198>)
 8000a80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a84:	4a31      	ldr	r2, [pc, #196]	; (8000b4c <MX_GPIO_Init+0x198>)
 8000a86:	f043 0310 	orr.w	r3, r3, #16
 8000a8a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a8e:	4b2f      	ldr	r3, [pc, #188]	; (8000b4c <MX_GPIO_Init+0x198>)
 8000a90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a94:	f003 0310 	and.w	r3, r3, #16
 8000a98:	603b      	str	r3, [r7, #0]
 8000a9a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	f244 0101 	movw	r1, #16385	; 0x4001
 8000aa2:	482b      	ldr	r0, [pc, #172]	; (8000b50 <MX_GPIO_Init+0x19c>)
 8000aa4:	f003 f9ac 	bl	8003e00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	2140      	movs	r1, #64	; 0x40
 8000aac:	4829      	ldr	r0, [pc, #164]	; (8000b54 <MX_GPIO_Init+0x1a0>)
 8000aae:	f003 f9a7 	bl	8003e00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	2102      	movs	r1, #2
 8000ab6:	4828      	ldr	r0, [pc, #160]	; (8000b58 <MX_GPIO_Init+0x1a4>)
 8000ab8:	f003 f9a2 	bl	8003e00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000abc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ac0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ac2:	4b26      	ldr	r3, [pc, #152]	; (8000b5c <MX_GPIO_Init+0x1a8>)
 8000ac4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000aca:	f107 031c 	add.w	r3, r7, #28
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4823      	ldr	r0, [pc, #140]	; (8000b60 <MX_GPIO_Init+0x1ac>)
 8000ad2:	f002 ffe5 	bl	8003aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000ad6:	f244 0301 	movw	r3, #16385	; 0x4001
 8000ada:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000adc:	2301      	movs	r3, #1
 8000ade:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae8:	f107 031c 	add.w	r3, r7, #28
 8000aec:	4619      	mov	r1, r3
 8000aee:	4818      	ldr	r0, [pc, #96]	; (8000b50 <MX_GPIO_Init+0x19c>)
 8000af0:	f002 ffd6 	bl	8003aa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000af4:	2340      	movs	r3, #64	; 0x40
 8000af6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af8:	2301      	movs	r3, #1
 8000afa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afc:	2300      	movs	r3, #0
 8000afe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b00:	2300      	movs	r3, #0
 8000b02:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b04:	f107 031c 	add.w	r3, r7, #28
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4812      	ldr	r0, [pc, #72]	; (8000b54 <MX_GPIO_Init+0x1a0>)
 8000b0c:	f002 ffc8 	bl	8003aa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000b10:	2380      	movs	r3, #128	; 0x80
 8000b12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b14:	2300      	movs	r3, #0
 8000b16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b1c:	f107 031c 	add.w	r3, r7, #28
 8000b20:	4619      	mov	r1, r3
 8000b22:	480c      	ldr	r0, [pc, #48]	; (8000b54 <MX_GPIO_Init+0x1a0>)
 8000b24:	f002 ffbc 	bl	8003aa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	2300      	movs	r3, #0
 8000b32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b34:	2300      	movs	r3, #0
 8000b36:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b38:	f107 031c 	add.w	r3, r7, #28
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4806      	ldr	r0, [pc, #24]	; (8000b58 <MX_GPIO_Init+0x1a4>)
 8000b40:	f002 ffae 	bl	8003aa0 <HAL_GPIO_Init>

}
 8000b44:	bf00      	nop
 8000b46:	3730      	adds	r7, #48	; 0x30
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	58024400 	.word	0x58024400
 8000b50:	58020400 	.word	0x58020400
 8000b54:	58021800 	.word	0x58021800
 8000b58:	58021000 	.word	0x58021000
 8000b5c:	11110000 	.word	0x11110000
 8000b60:	58020800 	.word	0x58020800

08000b64 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000b6c:	f007 fbfe 	bl	800836c <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  tcp_echoserver_init();
 8000b70:	f000 fb68 	bl	8001244 <tcp_echoserver_init>

	/* Infinite loop */
	for (;;)
	{
	  osDelay(1000);
 8000b74:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b78:	f008 fa47 	bl	800900a <osDelay>
	  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000b7c:	2101      	movs	r1, #1
 8000b7e:	4802      	ldr	r0, [pc, #8]	; (8000b88 <StartDefaultTask+0x24>)
 8000b80:	f003 f957 	bl	8003e32 <HAL_GPIO_TogglePin>
	  osDelay(1000);
 8000b84:	e7f6      	b.n	8000b74 <StartDefaultTask+0x10>
 8000b86:	bf00      	nop
 8000b88:	58020400 	.word	0x58020400

08000b8c <MPU_Config>:
}

/* MPU Configuration */

void MPU_Config(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b084      	sub	sp, #16
 8000b90:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000b92:	463b      	mov	r3, r7
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	605a      	str	r2, [r3, #4]
 8000b9a:	609a      	str	r2, [r3, #8]
 8000b9c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000b9e:	f001 f857 	bl	8001c50 <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 8000baa:	4b1b      	ldr	r3, [pc, #108]	; (8000c18 <MPU_Config+0x8c>)
 8000bac:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 8000bae:	230d      	movs	r3, #13
 8000bb0:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000bba:	2303      	movs	r3, #3
 8000bbc:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000bce:	463b      	mov	r3, r7
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f001 f875 	bl	8001cc0 <HAL_MPU_ConfigRegion>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30044000;
 8000bda:	4b10      	ldr	r3, [pc, #64]	; (8000c1c <MPU_Config+0x90>)
 8000bdc:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000bde:	2300      	movs	r3, #0
 8000be0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000be2:	2301      	movs	r3, #1
 8000be4:	73bb      	strb	r3, [r7, #14]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000be6:	463b      	mov	r3, r7
 8000be8:	4618      	mov	r0, r3
 8000bea:	f001 f869 	bl	8001cc0 <HAL_MPU_ConfigRegion>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000bee:	2302      	movs	r3, #2
 8000bf0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 8000bf2:	4b09      	ldr	r3, [pc, #36]	; (8000c18 <MPU_Config+0x8c>)
 8000bf4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
 8000bf6:	2307      	movs	r3, #7
 8000bf8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000c02:	463b      	mov	r3, r7
 8000c04:	4618      	mov	r0, r3
 8000c06:	f001 f85b 	bl	8001cc0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000c0a:	2004      	movs	r0, #4
 8000c0c:	f001 f838 	bl	8001c80 <HAL_MPU_Enable>

}
 8000c10:	bf00      	nop
 8000c12:	3710      	adds	r7, #16
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	30040000 	.word	0x30040000
 8000c1c:	30044000 	.word	0x30044000

08000c20 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a04      	ldr	r2, [pc, #16]	; (8000c40 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d101      	bne.n	8000c36 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c32:	f000 fec9 	bl	80019c8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c36:	bf00      	nop
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	40001000 	.word	0x40001000

08000c44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000c48:	b672      	cpsid	i
}
 8000c4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c4c:	e7fe      	b.n	8000c4c <Error_Handler+0x8>
	...

08000c50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c56:	4b0c      	ldr	r3, [pc, #48]	; (8000c88 <HAL_MspInit+0x38>)
 8000c58:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c5c:	4a0a      	ldr	r2, [pc, #40]	; (8000c88 <HAL_MspInit+0x38>)
 8000c5e:	f043 0302 	orr.w	r3, r3, #2
 8000c62:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000c66:	4b08      	ldr	r3, [pc, #32]	; (8000c88 <HAL_MspInit+0x38>)
 8000c68:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c6c:	f003 0302 	and.w	r3, r3, #2
 8000c70:	607b      	str	r3, [r7, #4]
 8000c72:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c74:	2200      	movs	r2, #0
 8000c76:	210f      	movs	r1, #15
 8000c78:	f06f 0001 	mvn.w	r0, #1
 8000c7c:	f000 ffc0 	bl	8001c00 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c80:	bf00      	nop
 8000c82:	3708      	adds	r7, #8
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	58024400 	.word	0x58024400

08000c8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b0b8      	sub	sp, #224	; 0xe0
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c94:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
 8000c9c:	605a      	str	r2, [r3, #4]
 8000c9e:	609a      	str	r2, [r3, #8]
 8000ca0:	60da      	str	r2, [r3, #12]
 8000ca2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ca4:	f107 0310 	add.w	r3, r7, #16
 8000ca8:	22bc      	movs	r2, #188	; 0xbc
 8000caa:	2100      	movs	r1, #0
 8000cac:	4618      	mov	r0, r3
 8000cae:	f016 f8eb 	bl	8016e88 <memset>
  if(huart->Instance==USART3)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4a25      	ldr	r2, [pc, #148]	; (8000d4c <HAL_UART_MspInit+0xc0>)
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	d142      	bne.n	8000d42 <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000cbc:	2302      	movs	r3, #2
 8000cbe:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cc6:	f107 0310 	add.w	r3, r7, #16
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f004 fa3c 	bl	8005148 <HAL_RCCEx_PeriphCLKConfig>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000cd6:	f7ff ffb5 	bl	8000c44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000cda:	4b1d      	ldr	r3, [pc, #116]	; (8000d50 <HAL_UART_MspInit+0xc4>)
 8000cdc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ce0:	4a1b      	ldr	r2, [pc, #108]	; (8000d50 <HAL_UART_MspInit+0xc4>)
 8000ce2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ce6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000cea:	4b19      	ldr	r3, [pc, #100]	; (8000d50 <HAL_UART_MspInit+0xc4>)
 8000cec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000cf0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cf4:	60fb      	str	r3, [r7, #12]
 8000cf6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cf8:	4b15      	ldr	r3, [pc, #84]	; (8000d50 <HAL_UART_MspInit+0xc4>)
 8000cfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cfe:	4a14      	ldr	r2, [pc, #80]	; (8000d50 <HAL_UART_MspInit+0xc4>)
 8000d00:	f043 0308 	orr.w	r3, r3, #8
 8000d04:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d08:	4b11      	ldr	r3, [pc, #68]	; (8000d50 <HAL_UART_MspInit+0xc4>)
 8000d0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d0e:	f003 0308 	and.w	r3, r3, #8
 8000d12:	60bb      	str	r3, [r7, #8]
 8000d14:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000d16:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d1a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1e:	2302      	movs	r3, #2
 8000d20:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d24:	2300      	movs	r3, #0
 8000d26:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d30:	2307      	movs	r3, #7
 8000d32:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d36:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	4805      	ldr	r0, [pc, #20]	; (8000d54 <HAL_UART_MspInit+0xc8>)
 8000d3e:	f002 feaf 	bl	8003aa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d42:	bf00      	nop
 8000d44:	37e0      	adds	r7, #224	; 0xe0
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	40004800 	.word	0x40004800
 8000d50:	58024400 	.word	0x58024400
 8000d54:	58020c00 	.word	0x58020c00

08000d58 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b0b8      	sub	sp, #224	; 0xe0
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d60:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	605a      	str	r2, [r3, #4]
 8000d6a:	609a      	str	r2, [r3, #8]
 8000d6c:	60da      	str	r2, [r3, #12]
 8000d6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d70:	f107 0310 	add.w	r3, r7, #16
 8000d74:	22bc      	movs	r2, #188	; 0xbc
 8000d76:	2100      	movs	r1, #0
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f016 f885 	bl	8016e88 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4a2f      	ldr	r2, [pc, #188]	; (8000e40 <HAL_PCD_MspInit+0xe8>)
 8000d84:	4293      	cmp	r3, r2
 8000d86:	d156      	bne.n	8000e36 <HAL_PCD_MspInit+0xde>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000d88:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000d8c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000d8e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000d92:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d96:	f107 0310 	add.w	r3, r7, #16
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f004 f9d4 	bl	8005148 <HAL_RCCEx_PeriphCLKConfig>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 8000da6:	f7ff ff4d 	bl	8000c44 <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8000daa:	f003 f9df 	bl	800416c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dae:	4b25      	ldr	r3, [pc, #148]	; (8000e44 <HAL_PCD_MspInit+0xec>)
 8000db0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000db4:	4a23      	ldr	r2, [pc, #140]	; (8000e44 <HAL_PCD_MspInit+0xec>)
 8000db6:	f043 0301 	orr.w	r3, r3, #1
 8000dba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dbe:	4b21      	ldr	r3, [pc, #132]	; (8000e44 <HAL_PCD_MspInit+0xec>)
 8000dc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dc4:	f003 0301 	and.w	r3, r3, #1
 8000dc8:	60fb      	str	r3, [r7, #12]
 8000dca:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000dcc:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000dd0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd4:	2302      	movs	r3, #2
 8000dd6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de0:	2300      	movs	r3, #0
 8000de2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000de6:	230a      	movs	r3, #10
 8000de8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dec:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000df0:	4619      	mov	r1, r3
 8000df2:	4815      	ldr	r0, [pc, #84]	; (8000e48 <HAL_PCD_MspInit+0xf0>)
 8000df4:	f002 fe54 	bl	8003aa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000df8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000dfc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e00:	2300      	movs	r3, #0
 8000e02:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e06:	2300      	movs	r3, #0
 8000e08:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000e0c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000e10:	4619      	mov	r1, r3
 8000e12:	480d      	ldr	r0, [pc, #52]	; (8000e48 <HAL_PCD_MspInit+0xf0>)
 8000e14:	f002 fe44 	bl	8003aa0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000e18:	4b0a      	ldr	r3, [pc, #40]	; (8000e44 <HAL_PCD_MspInit+0xec>)
 8000e1a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e1e:	4a09      	ldr	r2, [pc, #36]	; (8000e44 <HAL_PCD_MspInit+0xec>)
 8000e20:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000e24:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000e28:	4b06      	ldr	r3, [pc, #24]	; (8000e44 <HAL_PCD_MspInit+0xec>)
 8000e2a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e2e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000e32:	60bb      	str	r3, [r7, #8]
 8000e34:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000e36:	bf00      	nop
 8000e38:	37e0      	adds	r7, #224	; 0xe0
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	40080000 	.word	0x40080000
 8000e44:	58024400 	.word	0x58024400
 8000e48:	58020000 	.word	0x58020000

08000e4c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b090      	sub	sp, #64	; 0x40
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	2b0f      	cmp	r3, #15
 8000e58:	d827      	bhi.n	8000eaa <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	6879      	ldr	r1, [r7, #4]
 8000e5e:	2036      	movs	r0, #54	; 0x36
 8000e60:	f000 fece 	bl	8001c00 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000e64:	2036      	movs	r0, #54	; 0x36
 8000e66:	f000 fee5 	bl	8001c34 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8000e6a:	4a29      	ldr	r2, [pc, #164]	; (8000f10 <HAL_InitTick+0xc4>)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000e70:	4b28      	ldr	r3, [pc, #160]	; (8000f14 <HAL_InitTick+0xc8>)
 8000e72:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e76:	4a27      	ldr	r2, [pc, #156]	; (8000f14 <HAL_InitTick+0xc8>)
 8000e78:	f043 0310 	orr.w	r3, r3, #16
 8000e7c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000e80:	4b24      	ldr	r3, [pc, #144]	; (8000f14 <HAL_InitTick+0xc8>)
 8000e82:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e86:	f003 0310 	and.w	r3, r3, #16
 8000e8a:	60fb      	str	r3, [r7, #12]
 8000e8c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e8e:	f107 0210 	add.w	r2, r7, #16
 8000e92:	f107 0314 	add.w	r3, r7, #20
 8000e96:	4611      	mov	r1, r2
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f004 f913 	bl	80050c4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ea0:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d106      	bne.n	8000eb6 <HAL_InitTick+0x6a>
 8000ea8:	e001      	b.n	8000eae <HAL_InitTick+0x62>
    return HAL_ERROR;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	e02b      	b.n	8000f06 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000eae:	f004 f8dd 	bl	800506c <HAL_RCC_GetPCLK1Freq>
 8000eb2:	63f8      	str	r0, [r7, #60]	; 0x3c
 8000eb4:	e004      	b.n	8000ec0 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000eb6:	f004 f8d9 	bl	800506c <HAL_RCC_GetPCLK1Freq>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	005b      	lsls	r3, r3, #1
 8000ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ec0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ec2:	4a15      	ldr	r2, [pc, #84]	; (8000f18 <HAL_InitTick+0xcc>)
 8000ec4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ec8:	0c9b      	lsrs	r3, r3, #18
 8000eca:	3b01      	subs	r3, #1
 8000ecc:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000ece:	4b13      	ldr	r3, [pc, #76]	; (8000f1c <HAL_InitTick+0xd0>)
 8000ed0:	4a13      	ldr	r2, [pc, #76]	; (8000f20 <HAL_InitTick+0xd4>)
 8000ed2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000ed4:	4b11      	ldr	r3, [pc, #68]	; (8000f1c <HAL_InitTick+0xd0>)
 8000ed6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000eda:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000edc:	4a0f      	ldr	r2, [pc, #60]	; (8000f1c <HAL_InitTick+0xd0>)
 8000ede:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ee0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000ee2:	4b0e      	ldr	r3, [pc, #56]	; (8000f1c <HAL_InitTick+0xd0>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ee8:	4b0c      	ldr	r3, [pc, #48]	; (8000f1c <HAL_InitTick+0xd0>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000eee:	480b      	ldr	r0, [pc, #44]	; (8000f1c <HAL_InitTick+0xd0>)
 8000ef0:	f005 fc8c 	bl	800680c <HAL_TIM_Base_Init>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d104      	bne.n	8000f04 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000efa:	4808      	ldr	r0, [pc, #32]	; (8000f1c <HAL_InitTick+0xd0>)
 8000efc:	f005 fce8 	bl	80068d0 <HAL_TIM_Base_Start_IT>
 8000f00:	4603      	mov	r3, r0
 8000f02:	e000      	b.n	8000f06 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8000f04:	2301      	movs	r3, #1
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3740      	adds	r7, #64	; 0x40
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	24000008 	.word	0x24000008
 8000f14:	58024400 	.word	0x58024400
 8000f18:	431bde83 	.word	0x431bde83
 8000f1c:	240046a0 	.word	0x240046a0
 8000f20:	40001000 	.word	0x40001000

08000f24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f28:	e7fe      	b.n	8000f28 <NMI_Handler+0x4>

08000f2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f2a:	b480      	push	{r7}
 8000f2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f2e:	e7fe      	b.n	8000f2e <HardFault_Handler+0x4>

08000f30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f34:	e7fe      	b.n	8000f34 <MemManage_Handler+0x4>

08000f36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f36:	b480      	push	{r7}
 8000f38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f3a:	e7fe      	b.n	8000f3a <BusFault_Handler+0x4>

08000f3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f40:	e7fe      	b.n	8000f40 <UsageFault_Handler+0x4>

08000f42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f42:	b480      	push	{r7}
 8000f44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f46:	bf00      	nop
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr

08000f50 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000f54:	4802      	ldr	r0, [pc, #8]	; (8000f60 <TIM6_DAC_IRQHandler+0x10>)
 8000f56:	f005 fd2b 	bl	80069b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000f5a:	bf00      	nop
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	240046a0 	.word	0x240046a0

08000f64 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000f68:	4802      	ldr	r0, [pc, #8]	; (8000f74 <ETH_IRQHandler+0x10>)
 8000f6a:	f001 fbc7 	bl	80026fc <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000f6e:	bf00      	nop
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	24004828 	.word	0x24004828

08000f78 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
	return 1;
 8000f7c:	2301      	movs	r3, #1
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr

08000f88 <_kill>:

int _kill(int pid, int sig)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000f92:	4b05      	ldr	r3, [pc, #20]	; (8000fa8 <_kill+0x20>)
 8000f94:	2216      	movs	r2, #22
 8000f96:	601a      	str	r2, [r3, #0]
	return -1;
 8000f98:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	370c      	adds	r7, #12
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr
 8000fa8:	240079c4 	.word	0x240079c4

08000fac <_exit>:

void _exit (int status)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000fb4:	f04f 31ff 	mov.w	r1, #4294967295
 8000fb8:	6878      	ldr	r0, [r7, #4]
 8000fba:	f7ff ffe5 	bl	8000f88 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000fbe:	e7fe      	b.n	8000fbe <_exit+0x12>

08000fc0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b086      	sub	sp, #24
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	60f8      	str	r0, [r7, #12]
 8000fc8:	60b9      	str	r1, [r7, #8]
 8000fca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fcc:	2300      	movs	r3, #0
 8000fce:	617b      	str	r3, [r7, #20]
 8000fd0:	e00a      	b.n	8000fe8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000fd2:	f3af 8000 	nop.w
 8000fd6:	4601      	mov	r1, r0
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	1c5a      	adds	r2, r3, #1
 8000fdc:	60ba      	str	r2, [r7, #8]
 8000fde:	b2ca      	uxtb	r2, r1
 8000fe0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	617b      	str	r3, [r7, #20]
 8000fe8:	697a      	ldr	r2, [r7, #20]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	429a      	cmp	r2, r3
 8000fee:	dbf0      	blt.n	8000fd2 <_read+0x12>
	}

return len;
 8000ff0:	687b      	ldr	r3, [r7, #4]
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3718      	adds	r7, #24
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b086      	sub	sp, #24
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	60f8      	str	r0, [r7, #12]
 8001002:	60b9      	str	r1, [r7, #8]
 8001004:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001006:	2300      	movs	r3, #0
 8001008:	617b      	str	r3, [r7, #20]
 800100a:	e009      	b.n	8001020 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	1c5a      	adds	r2, r3, #1
 8001010:	60ba      	str	r2, [r7, #8]
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	4618      	mov	r0, r3
 8001016:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	3301      	adds	r3, #1
 800101e:	617b      	str	r3, [r7, #20]
 8001020:	697a      	ldr	r2, [r7, #20]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	429a      	cmp	r2, r3
 8001026:	dbf1      	blt.n	800100c <_write+0x12>
	}
	return len;
 8001028:	687b      	ldr	r3, [r7, #4]
}
 800102a:	4618      	mov	r0, r3
 800102c:	3718      	adds	r7, #24
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}

08001032 <_close>:

int _close(int file)
{
 8001032:	b480      	push	{r7}
 8001034:	b083      	sub	sp, #12
 8001036:	af00      	add	r7, sp, #0
 8001038:	6078      	str	r0, [r7, #4]
	return -1;
 800103a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800103e:	4618      	mov	r0, r3
 8001040:	370c      	adds	r7, #12
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr

0800104a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800104a:	b480      	push	{r7}
 800104c:	b083      	sub	sp, #12
 800104e:	af00      	add	r7, sp, #0
 8001050:	6078      	str	r0, [r7, #4]
 8001052:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800105a:	605a      	str	r2, [r3, #4]
	return 0;
 800105c:	2300      	movs	r3, #0
}
 800105e:	4618      	mov	r0, r3
 8001060:	370c      	adds	r7, #12
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr

0800106a <_isatty>:

int _isatty(int file)
{
 800106a:	b480      	push	{r7}
 800106c:	b083      	sub	sp, #12
 800106e:	af00      	add	r7, sp, #0
 8001070:	6078      	str	r0, [r7, #4]
	return 1;
 8001072:	2301      	movs	r3, #1
}
 8001074:	4618      	mov	r0, r3
 8001076:	370c      	adds	r7, #12
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr

08001080 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001080:	b480      	push	{r7}
 8001082:	b085      	sub	sp, #20
 8001084:	af00      	add	r7, sp, #0
 8001086:	60f8      	str	r0, [r7, #12]
 8001088:	60b9      	str	r1, [r7, #8]
 800108a:	607a      	str	r2, [r7, #4]
	return 0;
 800108c:	2300      	movs	r3, #0
}
 800108e:	4618      	mov	r0, r3
 8001090:	3714      	adds	r7, #20
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
	...

0800109c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800109c:	b480      	push	{r7}
 800109e:	b087      	sub	sp, #28
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010a4:	4a14      	ldr	r2, [pc, #80]	; (80010f8 <_sbrk+0x5c>)
 80010a6:	4b15      	ldr	r3, [pc, #84]	; (80010fc <_sbrk+0x60>)
 80010a8:	1ad3      	subs	r3, r2, r3
 80010aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010b0:	4b13      	ldr	r3, [pc, #76]	; (8001100 <_sbrk+0x64>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d102      	bne.n	80010be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010b8:	4b11      	ldr	r3, [pc, #68]	; (8001100 <_sbrk+0x64>)
 80010ba:	4a12      	ldr	r2, [pc, #72]	; (8001104 <_sbrk+0x68>)
 80010bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010be:	4b10      	ldr	r3, [pc, #64]	; (8001100 <_sbrk+0x64>)
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4413      	add	r3, r2
 80010c6:	693a      	ldr	r2, [r7, #16]
 80010c8:	429a      	cmp	r2, r3
 80010ca:	d205      	bcs.n	80010d8 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80010cc:	4b0e      	ldr	r3, [pc, #56]	; (8001108 <_sbrk+0x6c>)
 80010ce:	220c      	movs	r2, #12
 80010d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010d2:	f04f 33ff 	mov.w	r3, #4294967295
 80010d6:	e009      	b.n	80010ec <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80010d8:	4b09      	ldr	r3, [pc, #36]	; (8001100 <_sbrk+0x64>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010de:	4b08      	ldr	r3, [pc, #32]	; (8001100 <_sbrk+0x64>)
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4413      	add	r3, r2
 80010e6:	4a06      	ldr	r2, [pc, #24]	; (8001100 <_sbrk+0x64>)
 80010e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010ea:	68fb      	ldr	r3, [r7, #12]
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	371c      	adds	r7, #28
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr
 80010f8:	24080000 	.word	0x24080000
 80010fc:	00000400 	.word	0x00000400
 8001100:	24000308 	.word	0x24000308
 8001104:	240079d8 	.word	0x240079d8
 8001108:	240079c4 	.word	0x240079c4

0800110c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001112:	4b41      	ldr	r3, [pc, #260]	; (8001218 <SystemInit+0x10c>)
 8001114:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001118:	4a3f      	ldr	r2, [pc, #252]	; (8001218 <SystemInit+0x10c>)
 800111a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800111e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001122:	4b3e      	ldr	r3, [pc, #248]	; (800121c <SystemInit+0x110>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f003 030f 	and.w	r3, r3, #15
 800112a:	2b06      	cmp	r3, #6
 800112c:	d807      	bhi.n	800113e <SystemInit+0x32>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800112e:	4b3b      	ldr	r3, [pc, #236]	; (800121c <SystemInit+0x110>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f023 030f 	bic.w	r3, r3, #15
 8001136:	4a39      	ldr	r2, [pc, #228]	; (800121c <SystemInit+0x110>)
 8001138:	f043 0307 	orr.w	r3, r3, #7
 800113c:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800113e:	4b38      	ldr	r3, [pc, #224]	; (8001220 <SystemInit+0x114>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4a37      	ldr	r2, [pc, #220]	; (8001220 <SystemInit+0x114>)
 8001144:	f043 0301 	orr.w	r3, r3, #1
 8001148:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800114a:	4b35      	ldr	r3, [pc, #212]	; (8001220 <SystemInit+0x114>)
 800114c:	2200      	movs	r2, #0
 800114e:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001150:	4b33      	ldr	r3, [pc, #204]	; (8001220 <SystemInit+0x114>)
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	4932      	ldr	r1, [pc, #200]	; (8001220 <SystemInit+0x114>)
 8001156:	4b33      	ldr	r3, [pc, #204]	; (8001224 <SystemInit+0x118>)
 8001158:	4013      	ands	r3, r2
 800115a:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800115c:	4b2f      	ldr	r3, [pc, #188]	; (800121c <SystemInit+0x110>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f003 0308 	and.w	r3, r3, #8
 8001164:	2b00      	cmp	r3, #0
 8001166:	d007      	beq.n	8001178 <SystemInit+0x6c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001168:	4b2c      	ldr	r3, [pc, #176]	; (800121c <SystemInit+0x110>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f023 030f 	bic.w	r3, r3, #15
 8001170:	4a2a      	ldr	r2, [pc, #168]	; (800121c <SystemInit+0x110>)
 8001172:	f043 0307 	orr.w	r3, r3, #7
 8001176:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001178:	4b29      	ldr	r3, [pc, #164]	; (8001220 <SystemInit+0x114>)
 800117a:	2200      	movs	r2, #0
 800117c:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800117e:	4b28      	ldr	r3, [pc, #160]	; (8001220 <SystemInit+0x114>)
 8001180:	2200      	movs	r2, #0
 8001182:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001184:	4b26      	ldr	r3, [pc, #152]	; (8001220 <SystemInit+0x114>)
 8001186:	2200      	movs	r2, #0
 8001188:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800118a:	4b25      	ldr	r3, [pc, #148]	; (8001220 <SystemInit+0x114>)
 800118c:	4a26      	ldr	r2, [pc, #152]	; (8001228 <SystemInit+0x11c>)
 800118e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001190:	4b23      	ldr	r3, [pc, #140]	; (8001220 <SystemInit+0x114>)
 8001192:	4a26      	ldr	r2, [pc, #152]	; (800122c <SystemInit+0x120>)
 8001194:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001196:	4b22      	ldr	r3, [pc, #136]	; (8001220 <SystemInit+0x114>)
 8001198:	4a25      	ldr	r2, [pc, #148]	; (8001230 <SystemInit+0x124>)
 800119a:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800119c:	4b20      	ldr	r3, [pc, #128]	; (8001220 <SystemInit+0x114>)
 800119e:	2200      	movs	r2, #0
 80011a0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80011a2:	4b1f      	ldr	r3, [pc, #124]	; (8001220 <SystemInit+0x114>)
 80011a4:	4a22      	ldr	r2, [pc, #136]	; (8001230 <SystemInit+0x124>)
 80011a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80011a8:	4b1d      	ldr	r3, [pc, #116]	; (8001220 <SystemInit+0x114>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80011ae:	4b1c      	ldr	r3, [pc, #112]	; (8001220 <SystemInit+0x114>)
 80011b0:	4a1f      	ldr	r2, [pc, #124]	; (8001230 <SystemInit+0x124>)
 80011b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80011b4:	4b1a      	ldr	r3, [pc, #104]	; (8001220 <SystemInit+0x114>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80011ba:	4b19      	ldr	r3, [pc, #100]	; (8001220 <SystemInit+0x114>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4a18      	ldr	r2, [pc, #96]	; (8001220 <SystemInit+0x114>)
 80011c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011c4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80011c6:	4b16      	ldr	r3, [pc, #88]	; (8001220 <SystemInit+0x114>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80011cc:	4b19      	ldr	r3, [pc, #100]	; (8001234 <SystemInit+0x128>)
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	4b19      	ldr	r3, [pc, #100]	; (8001238 <SystemInit+0x12c>)
 80011d2:	4013      	ands	r3, r2
 80011d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80011d8:	d202      	bcs.n	80011e0 <SystemInit+0xd4>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80011da:	4b18      	ldr	r3, [pc, #96]	; (800123c <SystemInit+0x130>)
 80011dc:	2201      	movs	r2, #1
 80011de:	601a      	str	r2, [r3, #0]
#endif

#if defined (DATA_IN_D2_SRAM)
  /* in case of initialized data in D2 SRAM (AHB SRAM) , enable the D2 SRAM clock (AHB SRAM clock) */
#if defined(RCC_AHB2ENR_D2SRAM3EN)
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN | RCC_AHB2ENR_D2SRAM3EN);
 80011e0:	4b0f      	ldr	r3, [pc, #60]	; (8001220 <SystemInit+0x114>)
 80011e2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80011e6:	4a0e      	ldr	r2, [pc, #56]	; (8001220 <SystemInit+0x114>)
 80011e8:	f043 4360 	orr.w	r3, r3, #3758096384	; 0xe0000000
 80011ec:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN);
#else
  RCC->AHB2ENR |= (RCC_AHB2ENR_AHBSRAM1EN | RCC_AHB2ENR_AHBSRAM2EN);
#endif /* RCC_AHB2ENR_D2SRAM3EN */

  tmpreg = RCC->AHB2ENR;
 80011f0:	4b0b      	ldr	r3, [pc, #44]	; (8001220 <SystemInit+0x114>)
 80011f2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80011f6:	607b      	str	r3, [r7, #4]
  (void) tmpreg;
 80011f8:	687b      	ldr	r3, [r7, #4]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80011fa:	4b11      	ldr	r3, [pc, #68]	; (8001240 <SystemInit+0x134>)
 80011fc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001200:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001202:	4b05      	ldr	r3, [pc, #20]	; (8001218 <SystemInit+0x10c>)
 8001204:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001208:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800120a:	bf00      	nop
 800120c:	370c      	adds	r7, #12
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	e000ed00 	.word	0xe000ed00
 800121c:	52002000 	.word	0x52002000
 8001220:	58024400 	.word	0x58024400
 8001224:	eaf6ed7f 	.word	0xeaf6ed7f
 8001228:	02020200 	.word	0x02020200
 800122c:	01ff0000 	.word	0x01ff0000
 8001230:	01010280 	.word	0x01010280
 8001234:	5c001000 	.word	0x5c001000
 8001238:	ffff0000 	.word	0xffff0000
 800123c:	51008108 	.word	0x51008108
 8001240:	52004000 	.word	0x52004000

08001244 <tcp_echoserver_init>:
  * @brief  Initializes the tcp echo server
  * @param  None
  * @retval None
  */
void tcp_echoserver_init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
  /* create new tcp pcb */
  tcp_echoserver_pcb = tcp_new();
 800124a:	f00e fa07 	bl	800f65c <tcp_new>
 800124e:	4603      	mov	r3, r0
 8001250:	4a16      	ldr	r2, [pc, #88]	; (80012ac <tcp_echoserver_init+0x68>)
 8001252:	6013      	str	r3, [r2, #0]

  if (tcp_echoserver_pcb != NULL)
 8001254:	4b15      	ldr	r3, [pc, #84]	; (80012ac <tcp_echoserver_init+0x68>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d022      	beq.n	80012a2 <tcp_echoserver_init+0x5e>
  {
    err_t err;
    
    /* bind echo_pcb to port 7 (ECHO protocol) */
    err = tcp_bind(tcp_echoserver_pcb, IP_ADDR_ANY, 7);
 800125c:	4b13      	ldr	r3, [pc, #76]	; (80012ac <tcp_echoserver_init+0x68>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	2207      	movs	r2, #7
 8001262:	4913      	ldr	r1, [pc, #76]	; (80012b0 <tcp_echoserver_init+0x6c>)
 8001264:	4618      	mov	r0, r3
 8001266:	f00d f955 	bl	800e514 <tcp_bind>
 800126a:	4603      	mov	r3, r0
 800126c:	71fb      	strb	r3, [r7, #7]
    
    if (err == ERR_OK)
 800126e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d10f      	bne.n	8001296 <tcp_echoserver_init+0x52>
    {
      /* start tcp listening for echo_pcb */
      tcp_echoserver_pcb = tcp_listen(tcp_echoserver_pcb);
 8001276:	4b0d      	ldr	r3, [pc, #52]	; (80012ac <tcp_echoserver_init+0x68>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	21ff      	movs	r1, #255	; 0xff
 800127c:	4618      	mov	r0, r3
 800127e:	f00d fa01 	bl	800e684 <tcp_listen_with_backlog>
 8001282:	4603      	mov	r3, r0
 8001284:	4a09      	ldr	r2, [pc, #36]	; (80012ac <tcp_echoserver_init+0x68>)
 8001286:	6013      	str	r3, [r2, #0]
      
      /* initialize LwIP tcp_accept callback function */
      tcp_accept(tcp_echoserver_pcb, tcp_echoserver_accept);
 8001288:	4b08      	ldr	r3, [pc, #32]	; (80012ac <tcp_echoserver_init+0x68>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4909      	ldr	r1, [pc, #36]	; (80012b4 <tcp_echoserver_init+0x70>)
 800128e:	4618      	mov	r0, r3
 8001290:	f00e fa64 	bl	800f75c <tcp_accept>
    {
      /* deallocate the pcb */
      memp_free(MEMP_TCP_PCB, tcp_echoserver_pcb);
    }
  }
}
 8001294:	e005      	b.n	80012a2 <tcp_echoserver_init+0x5e>
      memp_free(MEMP_TCP_PCB, tcp_echoserver_pcb);
 8001296:	4b05      	ldr	r3, [pc, #20]	; (80012ac <tcp_echoserver_init+0x68>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4619      	mov	r1, r3
 800129c:	2001      	movs	r0, #1
 800129e:	f00b fce5 	bl	800cc6c <memp_free>
}
 80012a2:	bf00      	nop
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	2400030c 	.word	0x2400030c
 80012b0:	0801abe0 	.word	0x0801abe0
 80012b4:	080012b9 	.word	0x080012b9

080012b8 <tcp_echoserver_accept>:
  * @param  newpcb: pointer on tcp_pcb struct for the newly created tcp connection
  * @param  err: not used 
  * @retval err_t: error status
  */
static err_t tcp_echoserver_accept(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b086      	sub	sp, #24
 80012bc:	af00      	add	r7, sp, #0
 80012be:	60f8      	str	r0, [r7, #12]
 80012c0:	60b9      	str	r1, [r7, #8]
 80012c2:	4613      	mov	r3, r2
 80012c4:	71fb      	strb	r3, [r7, #7]

  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  /* set priority for the newly accepted tcp connection newpcb */
  tcp_setprio(newpcb, TCP_PRIO_MIN);
 80012c6:	2101      	movs	r1, #1
 80012c8:	68b8      	ldr	r0, [r7, #8]
 80012ca:	f00d ffd5 	bl	800f278 <tcp_setprio>

  /* allocate structure es to maintain tcp connection informations */
  es = (struct tcp_echoserver_struct *)mem_malloc(sizeof(struct tcp_echoserver_struct));
 80012ce:	200c      	movs	r0, #12
 80012d0:	f00b faae 	bl	800c830 <mem_malloc>
 80012d4:	6138      	str	r0, [r7, #16]
  if (es != NULL)
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d01f      	beq.n	800131c <tcp_echoserver_accept+0x64>
  {
    es->state = ES_ACCEPTED;
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	2201      	movs	r2, #1
 80012e0:	701a      	strb	r2, [r3, #0]
    es->pcb = newpcb;
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	68ba      	ldr	r2, [r7, #8]
 80012e6:	605a      	str	r2, [r3, #4]
    es->retries = 0;
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	2200      	movs	r2, #0
 80012ec:	705a      	strb	r2, [r3, #1]
    es->p = NULL;
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	2200      	movs	r2, #0
 80012f2:	609a      	str	r2, [r3, #8]
    
    /* pass newly allocated es structure as argument to newpcb */
    tcp_arg(newpcb, es);
 80012f4:	6939      	ldr	r1, [r7, #16]
 80012f6:	68b8      	ldr	r0, [r7, #8]
 80012f8:	f00e f9b8 	bl	800f66c <tcp_arg>
    
    /* initialize lwip tcp_recv callback function for newpcb  */ 
    tcp_recv(newpcb, tcp_echoserver_recv);
 80012fc:	490d      	ldr	r1, [pc, #52]	; (8001334 <tcp_echoserver_accept+0x7c>)
 80012fe:	68b8      	ldr	r0, [r7, #8]
 8001300:	f00e f9c6 	bl	800f690 <tcp_recv>
    
    /* initialize lwip tcp_err callback function for newpcb  */
    tcp_err(newpcb, tcp_echoserver_error);
 8001304:	490c      	ldr	r1, [pc, #48]	; (8001338 <tcp_echoserver_accept+0x80>)
 8001306:	68b8      	ldr	r0, [r7, #8]
 8001308:	f00e fa06 	bl	800f718 <tcp_err>
    
    /* initialize lwip tcp_poll callback function for newpcb */
    tcp_poll(newpcb, tcp_echoserver_poll, 0);
 800130c:	2200      	movs	r2, #0
 800130e:	490b      	ldr	r1, [pc, #44]	; (800133c <tcp_echoserver_accept+0x84>)
 8001310:	68b8      	ldr	r0, [r7, #8]
 8001312:	f00e fa3b 	bl	800f78c <tcp_poll>
    
    ret_err = ERR_OK;
 8001316:	2300      	movs	r3, #0
 8001318:	75fb      	strb	r3, [r7, #23]
 800131a:	e005      	b.n	8001328 <tcp_echoserver_accept+0x70>
  }
  else
  {
    /*  close tcp connection */
    tcp_echoserver_connection_close(newpcb, es);
 800131c:	6939      	ldr	r1, [r7, #16]
 800131e:	68b8      	ldr	r0, [r7, #8]
 8001320:	f000 f965 	bl	80015ee <tcp_echoserver_connection_close>
    /* return memory error */
    ret_err = ERR_MEM;
 8001324:	23ff      	movs	r3, #255	; 0xff
 8001326:	75fb      	strb	r3, [r7, #23]
  }
  return ret_err;  
 8001328:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800132c:	4618      	mov	r0, r3
 800132e:	3718      	adds	r7, #24
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	08001341 	.word	0x08001341
 8001338:	08001475 	.word	0x08001475
 800133c:	08001499 	.word	0x08001499

08001340 <tcp_echoserver_recv>:
  * @param  pbuf: pointer on the received pbuf
  * @param  err: error information regarding the reveived pbuf
  * @retval err_t: error code
  */
static err_t tcp_echoserver_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b088      	sub	sp, #32
 8001344:	af00      	add	r7, sp, #0
 8001346:	60f8      	str	r0, [r7, #12]
 8001348:	60b9      	str	r1, [r7, #8]
 800134a:	607a      	str	r2, [r7, #4]
 800134c:	70fb      	strb	r3, [r7, #3]
  struct tcp_echoserver_struct *es;
  err_t ret_err;

  LWIP_ASSERT("arg != NULL",arg != NULL);
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d105      	bne.n	8001360 <tcp_echoserver_recv+0x20>
 8001354:	4b43      	ldr	r3, [pc, #268]	; (8001464 <tcp_echoserver_recv+0x124>)
 8001356:	22ad      	movs	r2, #173	; 0xad
 8001358:	4943      	ldr	r1, [pc, #268]	; (8001468 <tcp_echoserver_recv+0x128>)
 800135a:	4844      	ldr	r0, [pc, #272]	; (800146c <tcp_echoserver_recv+0x12c>)
 800135c:	f015 fd9c 	bl	8016e98 <iprintf>
  
  es = (struct tcp_echoserver_struct *)arg;
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	61bb      	str	r3, [r7, #24]
  
  /* if we receive an empty tcp frame from client => close connection */
  if (p == NULL)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d116      	bne.n	8001398 <tcp_echoserver_recv+0x58>
  {
    /* remote host closed connection */
    es->state = ES_CLOSING;
 800136a:	69bb      	ldr	r3, [r7, #24]
 800136c:	2203      	movs	r2, #3
 800136e:	701a      	strb	r2, [r3, #0]
    if(es->p == NULL)
 8001370:	69bb      	ldr	r3, [r7, #24]
 8001372:	689b      	ldr	r3, [r3, #8]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d104      	bne.n	8001382 <tcp_echoserver_recv+0x42>
    {
       /* we're done sending, close connection */
       tcp_echoserver_connection_close(tpcb, es);
 8001378:	69b9      	ldr	r1, [r7, #24]
 800137a:	68b8      	ldr	r0, [r7, #8]
 800137c:	f000 f937 	bl	80015ee <tcp_echoserver_connection_close>
 8001380:	e007      	b.n	8001392 <tcp_echoserver_recv+0x52>
    }
    else
    {
      /* we're not done yet */
      /* acknowledge received packet */
      tcp_sent(tpcb, tcp_echoserver_sent);
 8001382:	493b      	ldr	r1, [pc, #236]	; (8001470 <tcp_echoserver_recv+0x130>)
 8001384:	68b8      	ldr	r0, [r7, #8]
 8001386:	f00e f9a5 	bl	800f6d4 <tcp_sent>
      
      /* send remaining data*/
      tcp_echoserver_send(tpcb, es);
 800138a:	69b9      	ldr	r1, [r7, #24]
 800138c:	68b8      	ldr	r0, [r7, #8]
 800138e:	f000 f8db 	bl	8001548 <tcp_echoserver_send>
    }
    ret_err = ERR_OK;
 8001392:	2300      	movs	r3, #0
 8001394:	77fb      	strb	r3, [r7, #31]
 8001396:	e05f      	b.n	8001458 <tcp_echoserver_recv+0x118>
  }   
  /* else : a non empty frame was received from client but for some reason err != ERR_OK */
  else if(err != ERR_OK)
 8001398:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d00b      	beq.n	80013b8 <tcp_echoserver_recv+0x78>
  {
    /* free received pbuf*/
    if (p != NULL)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d005      	beq.n	80013b2 <tcp_echoserver_recv+0x72>
    {
      es->p = NULL;
 80013a6:	69bb      	ldr	r3, [r7, #24]
 80013a8:	2200      	movs	r2, #0
 80013aa:	609a      	str	r2, [r3, #8]
      pbuf_free(p);
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	f00c fb01 	bl	800d9b4 <pbuf_free>
    }
    ret_err = err;
 80013b2:	78fb      	ldrb	r3, [r7, #3]
 80013b4:	77fb      	strb	r3, [r7, #31]
 80013b6:	e04f      	b.n	8001458 <tcp_echoserver_recv+0x118>
  }
  else if(es->state == ES_ACCEPTED)
 80013b8:	69bb      	ldr	r3, [r7, #24]
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d110      	bne.n	80013e2 <tcp_echoserver_recv+0xa2>
  {
    /* first data chunk in p->payload */
    es->state = ES_RECEIVED;
 80013c0:	69bb      	ldr	r3, [r7, #24]
 80013c2:	2202      	movs	r2, #2
 80013c4:	701a      	strb	r2, [r3, #0]
    
    /* store reference to incoming pbuf (chain) */
    es->p = p;
 80013c6:	69bb      	ldr	r3, [r7, #24]
 80013c8:	687a      	ldr	r2, [r7, #4]
 80013ca:	609a      	str	r2, [r3, #8]
    
    /* initialize LwIP tcp_sent callback function */
    tcp_sent(tpcb, tcp_echoserver_sent);
 80013cc:	4928      	ldr	r1, [pc, #160]	; (8001470 <tcp_echoserver_recv+0x130>)
 80013ce:	68b8      	ldr	r0, [r7, #8]
 80013d0:	f00e f980 	bl	800f6d4 <tcp_sent>
    
    /* send back the received data (echo) */
    tcp_echoserver_send(tpcb, es);
 80013d4:	69b9      	ldr	r1, [r7, #24]
 80013d6:	68b8      	ldr	r0, [r7, #8]
 80013d8:	f000 f8b6 	bl	8001548 <tcp_echoserver_send>
    
    ret_err = ERR_OK;
 80013dc:	2300      	movs	r3, #0
 80013de:	77fb      	strb	r3, [r7, #31]
 80013e0:	e03a      	b.n	8001458 <tcp_echoserver_recv+0x118>
  }
  else if (es->state == ES_RECEIVED)
 80013e2:	69bb      	ldr	r3, [r7, #24]
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	d115      	bne.n	8001416 <tcp_echoserver_recv+0xd6>
  {
    /* more data received from client and previous data has been already sent*/
    if(es->p == NULL)
 80013ea:	69bb      	ldr	r3, [r7, #24]
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d107      	bne.n	8001402 <tcp_echoserver_recv+0xc2>
    {
      es->p = p;
 80013f2:	69bb      	ldr	r3, [r7, #24]
 80013f4:	687a      	ldr	r2, [r7, #4]
 80013f6:	609a      	str	r2, [r3, #8]
  
      /* send back received data */
      tcp_echoserver_send(tpcb, es);
 80013f8:	69b9      	ldr	r1, [r7, #24]
 80013fa:	68b8      	ldr	r0, [r7, #8]
 80013fc:	f000 f8a4 	bl	8001548 <tcp_echoserver_send>
 8001400:	e006      	b.n	8001410 <tcp_echoserver_recv+0xd0>
    else
    {
      struct pbuf *ptr;

      /* chain pbufs to the end of what we recv'ed previously  */
      ptr = es->p;
 8001402:	69bb      	ldr	r3, [r7, #24]
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	617b      	str	r3, [r7, #20]
      pbuf_chain(ptr,p);
 8001408:	6879      	ldr	r1, [r7, #4]
 800140a:	6978      	ldr	r0, [r7, #20]
 800140c:	f00c fbf6 	bl	800dbfc <pbuf_chain>
    }
    ret_err = ERR_OK;
 8001410:	2300      	movs	r3, #0
 8001412:	77fb      	strb	r3, [r7, #31]
 8001414:	e020      	b.n	8001458 <tcp_echoserver_recv+0x118>
  }
  else if(es->state == ES_CLOSING)
 8001416:	69bb      	ldr	r3, [r7, #24]
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	2b03      	cmp	r3, #3
 800141c:	d10e      	bne.n	800143c <tcp_echoserver_recv+0xfc>
  {
    /* odd case, remote side closing twice, trash data */
    tcp_recved(tpcb, p->tot_len);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	891b      	ldrh	r3, [r3, #8]
 8001422:	4619      	mov	r1, r3
 8001424:	68b8      	ldr	r0, [r7, #8]
 8001426:	f00d fa43 	bl	800e8b0 <tcp_recved>
    es->p = NULL;
 800142a:	69bb      	ldr	r3, [r7, #24]
 800142c:	2200      	movs	r2, #0
 800142e:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	f00c fabf 	bl	800d9b4 <pbuf_free>
    ret_err = ERR_OK;
 8001436:	2300      	movs	r3, #0
 8001438:	77fb      	strb	r3, [r7, #31]
 800143a:	e00d      	b.n	8001458 <tcp_echoserver_recv+0x118>
  }
  else
  {
    /* unkown es->state, trash data  */
    tcp_recved(tpcb, p->tot_len);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	891b      	ldrh	r3, [r3, #8]
 8001440:	4619      	mov	r1, r3
 8001442:	68b8      	ldr	r0, [r7, #8]
 8001444:	f00d fa34 	bl	800e8b0 <tcp_recved>
    es->p = NULL;
 8001448:	69bb      	ldr	r3, [r7, #24]
 800144a:	2200      	movs	r2, #0
 800144c:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	f00c fab0 	bl	800d9b4 <pbuf_free>
    ret_err = ERR_OK;
 8001454:	2300      	movs	r3, #0
 8001456:	77fb      	strb	r3, [r7, #31]
  }
  return ret_err;
 8001458:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800145c:	4618      	mov	r0, r3
 800145e:	3720      	adds	r7, #32
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	08017f0c 	.word	0x08017f0c
 8001468:	08017f2c 	.word	0x08017f2c
 800146c:	08017f38 	.word	0x08017f38
 8001470:	080014f9 	.word	0x080014f9

08001474 <tcp_echoserver_error>:
  * @param  arg: pointer on argument parameter 
  * @param  err: not used
  * @retval None
  */
static void tcp_echoserver_error(void *arg, err_t err)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	460b      	mov	r3, r1
 800147e:	70fb      	strb	r3, [r7, #3]
  struct tcp_echoserver_struct *es;

  LWIP_UNUSED_ARG(err);

  es = (struct tcp_echoserver_struct *)arg;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	60fb      	str	r3, [r7, #12]
  if (es != NULL)
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d002      	beq.n	8001490 <tcp_echoserver_error+0x1c>
  {
    /*  free es structure */
    mem_free(es);
 800148a:	68f8      	ldr	r0, [r7, #12]
 800148c:	f00b f830 	bl	800c4f0 <mem_free>
  }
}
 8001490:	bf00      	nop
 8001492:	3710      	adds	r7, #16
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}

08001498 <tcp_echoserver_poll>:
  * @param  arg: pointer on argument passed to callback
  * @param  tpcb: pointer on the tcp_pcb for the current tcp connection
  * @retval err_t: error code
  */
static err_t tcp_echoserver_poll(void *arg, struct tcp_pcb *tpcb)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	6039      	str	r1, [r7, #0]
  err_t ret_err;
  struct tcp_echoserver_struct *es;

  es = (struct tcp_echoserver_struct *)arg;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	60bb      	str	r3, [r7, #8]
  if (es != NULL)
 80014a6:	68bb      	ldr	r3, [r7, #8]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d017      	beq.n	80014dc <tcp_echoserver_poll+0x44>
  {
    if (es->p != NULL)
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d008      	beq.n	80014c6 <tcp_echoserver_poll+0x2e>
    {
      tcp_sent(tpcb, tcp_echoserver_sent);
 80014b4:	490f      	ldr	r1, [pc, #60]	; (80014f4 <tcp_echoserver_poll+0x5c>)
 80014b6:	6838      	ldr	r0, [r7, #0]
 80014b8:	f00e f90c 	bl	800f6d4 <tcp_sent>
      /* there is a remaining pbuf (chain) , try to send data */
      tcp_echoserver_send(tpcb, es);
 80014bc:	68b9      	ldr	r1, [r7, #8]
 80014be:	6838      	ldr	r0, [r7, #0]
 80014c0:	f000 f842 	bl	8001548 <tcp_echoserver_send>
 80014c4:	e007      	b.n	80014d6 <tcp_echoserver_poll+0x3e>
    }
    else
    {
      /* no remaining pbuf (chain)  */
      if(es->state == ES_CLOSING)
 80014c6:	68bb      	ldr	r3, [r7, #8]
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	2b03      	cmp	r3, #3
 80014cc:	d103      	bne.n	80014d6 <tcp_echoserver_poll+0x3e>
      {
        /*  close tcp connection */
        tcp_echoserver_connection_close(tpcb, es);
 80014ce:	68b9      	ldr	r1, [r7, #8]
 80014d0:	6838      	ldr	r0, [r7, #0]
 80014d2:	f000 f88c 	bl	80015ee <tcp_echoserver_connection_close>
      }
    }
    ret_err = ERR_OK;
 80014d6:	2300      	movs	r3, #0
 80014d8:	73fb      	strb	r3, [r7, #15]
 80014da:	e004      	b.n	80014e6 <tcp_echoserver_poll+0x4e>
  }
  else
  {
    /* nothing to be done */
    tcp_abort(tpcb);
 80014dc:	6838      	ldr	r0, [r7, #0]
 80014de:	f00d f80d 	bl	800e4fc <tcp_abort>
    ret_err = ERR_ABRT;
 80014e2:	23f3      	movs	r3, #243	; 0xf3
 80014e4:	73fb      	strb	r3, [r7, #15]
  }
  return ret_err;
 80014e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3710      	adds	r7, #16
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	080014f9 	.word	0x080014f9

080014f8 <tcp_echoserver_sent>:
  *         is received from remote host for sent data) 
  * @param  None
  * @retval None
  */
static err_t tcp_echoserver_sent(void *arg, struct tcp_pcb *tpcb, u16_t len)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b086      	sub	sp, #24
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	60f8      	str	r0, [r7, #12]
 8001500:	60b9      	str	r1, [r7, #8]
 8001502:	4613      	mov	r3, r2
 8001504:	80fb      	strh	r3, [r7, #6]
  struct tcp_echoserver_struct *es;

  LWIP_UNUSED_ARG(len);

  es = (struct tcp_echoserver_struct *)arg;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	617b      	str	r3, [r7, #20]
  es->retries = 0;
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	2200      	movs	r2, #0
 800150e:	705a      	strb	r2, [r3, #1]
  
  if(es->p != NULL)
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d008      	beq.n	800152a <tcp_echoserver_sent+0x32>
  {
    /* still got pbufs to send */
    tcp_sent(tpcb, tcp_echoserver_sent);
 8001518:	490a      	ldr	r1, [pc, #40]	; (8001544 <tcp_echoserver_sent+0x4c>)
 800151a:	68b8      	ldr	r0, [r7, #8]
 800151c:	f00e f8da 	bl	800f6d4 <tcp_sent>
    tcp_echoserver_send(tpcb, es);
 8001520:	6979      	ldr	r1, [r7, #20]
 8001522:	68b8      	ldr	r0, [r7, #8]
 8001524:	f000 f810 	bl	8001548 <tcp_echoserver_send>
 8001528:	e007      	b.n	800153a <tcp_echoserver_sent+0x42>
  }
  else
  {
    /* if no more data to send and client closed connection*/
    if(es->state == ES_CLOSING)
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	2b03      	cmp	r3, #3
 8001530:	d103      	bne.n	800153a <tcp_echoserver_sent+0x42>
      tcp_echoserver_connection_close(tpcb, es);
 8001532:	6979      	ldr	r1, [r7, #20]
 8001534:	68b8      	ldr	r0, [r7, #8]
 8001536:	f000 f85a 	bl	80015ee <tcp_echoserver_connection_close>
  }
  return ERR_OK;
 800153a:	2300      	movs	r3, #0
}
 800153c:	4618      	mov	r0, r3
 800153e:	3718      	adds	r7, #24
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	080014f9 	.word	0x080014f9

08001548 <tcp_echoserver_send>:
  * @param  tpcb: pointer on the tcp_pcb connection
  * @param  es: pointer on echo_state structure
  * @retval None
  */
static void tcp_echoserver_send(struct tcp_pcb *tpcb, struct tcp_echoserver_struct *es)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b086      	sub	sp, #24
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	6039      	str	r1, [r7, #0]
  struct pbuf *ptr;
  err_t wr_err = ERR_OK;
 8001552:	2300      	movs	r3, #0
 8001554:	75fb      	strb	r3, [r7, #23]
 
  while ((wr_err == ERR_OK) &&
 8001556:	e036      	b.n	80015c6 <tcp_echoserver_send+0x7e>
         (es->p != NULL) && 
         (es->p->len <= tcp_sndbuf(tpcb)))
  {
    
    /* get pointer on pbuf from es structure */
    ptr = es->p;
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	613b      	str	r3, [r7, #16]

    /* enqueue data for transmission */
    wr_err = tcp_write(tpcb, ptr->payload, ptr->len, 1);
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	6859      	ldr	r1, [r3, #4]
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	895a      	ldrh	r2, [r3, #10]
 8001566:	2301      	movs	r3, #1
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	f010 ffbd 	bl	80124e8 <tcp_write>
 800156e:	4603      	mov	r3, r0
 8001570:	75fb      	strb	r3, [r7, #23]
    
    if (wr_err == ERR_OK)
 8001572:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d11d      	bne.n	80015b6 <tcp_echoserver_send+0x6e>
    {
      u16_t plen;
      u8_t freed;

      plen = ptr->len;
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	895b      	ldrh	r3, [r3, #10]
 800157e:	81fb      	strh	r3, [r7, #14]
     
      /* continue with next pbuf in chain (if any) */
      es->p = ptr->next;
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	609a      	str	r2, [r3, #8]
      
      if(es->p != NULL)
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d004      	beq.n	800159a <tcp_echoserver_send+0x52>
      {
        /* increment reference count for es->p */
        pbuf_ref(es->p);
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	4618      	mov	r0, r3
 8001596:	f00c fab3 	bl	800db00 <pbuf_ref>
      
     /* chop first pbuf from chain */
      do
      {
        /* try hard to free pbuf */
        freed = pbuf_free(ptr);
 800159a:	6938      	ldr	r0, [r7, #16]
 800159c:	f00c fa0a 	bl	800d9b4 <pbuf_free>
 80015a0:	4603      	mov	r3, r0
 80015a2:	737b      	strb	r3, [r7, #13]
      }
      while(freed == 0);
 80015a4:	7b7b      	ldrb	r3, [r7, #13]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d0f7      	beq.n	800159a <tcp_echoserver_send+0x52>
     /* we can read more data now */
     tcp_recved(tpcb, plen);
 80015aa:	89fb      	ldrh	r3, [r7, #14]
 80015ac:	4619      	mov	r1, r3
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f00d f97e 	bl	800e8b0 <tcp_recved>
 80015b4:	e007      	b.n	80015c6 <tcp_echoserver_send+0x7e>
   }
   else if(wr_err == ERR_MEM)
 80015b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80015ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015be:	d102      	bne.n	80015c6 <tcp_echoserver_send+0x7e>
   {
      /* we are low on memory, try later / harder, defer to poll */
     es->p = ptr;
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	693a      	ldr	r2, [r7, #16]
 80015c4:	609a      	str	r2, [r3, #8]
  while ((wr_err == ERR_OK) &&
 80015c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d10b      	bne.n	80015e6 <tcp_echoserver_send+0x9e>
         (es->p != NULL) && 
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	689b      	ldr	r3, [r3, #8]
  while ((wr_err == ERR_OK) &&
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d007      	beq.n	80015e6 <tcp_echoserver_send+0x9e>
         (es->p->len <= tcp_sndbuf(tpcb)))
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	895a      	ldrh	r2, [r3, #10]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
         (es->p != NULL) && 
 80015e2:	429a      	cmp	r2, r3
 80015e4:	d9b8      	bls.n	8001558 <tcp_echoserver_send+0x10>
   else
   {
     /* other problem ?? */
   }
  }
}
 80015e6:	bf00      	nop
 80015e8:	3718      	adds	r7, #24
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}

080015ee <tcp_echoserver_connection_close>:
  * @param  tcp_pcb: pointer on the tcp connection
  * @param  es: pointer on echo_state structure
  * @retval None
  */
static void tcp_echoserver_connection_close(struct tcp_pcb *tpcb, struct tcp_echoserver_struct *es)
{
 80015ee:	b580      	push	{r7, lr}
 80015f0:	b082      	sub	sp, #8
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	6078      	str	r0, [r7, #4]
 80015f6:	6039      	str	r1, [r7, #0]
  
  /* remove all callbacks */
  tcp_arg(tpcb, NULL);
 80015f8:	2100      	movs	r1, #0
 80015fa:	6878      	ldr	r0, [r7, #4]
 80015fc:	f00e f836 	bl	800f66c <tcp_arg>
  tcp_sent(tpcb, NULL);
 8001600:	2100      	movs	r1, #0
 8001602:	6878      	ldr	r0, [r7, #4]
 8001604:	f00e f866 	bl	800f6d4 <tcp_sent>
  tcp_recv(tpcb, NULL);
 8001608:	2100      	movs	r1, #0
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	f00e f840 	bl	800f690 <tcp_recv>
  tcp_err(tpcb, NULL);
 8001610:	2100      	movs	r1, #0
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f00e f880 	bl	800f718 <tcp_err>
  tcp_poll(tpcb, NULL, 0);
 8001618:	2200      	movs	r2, #0
 800161a:	2100      	movs	r1, #0
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f00e f8b5 	bl	800f78c <tcp_poll>
  
  /* delete es structure */
  if (es != NULL)
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d002      	beq.n	800162e <tcp_echoserver_connection_close+0x40>
  {
    mem_free(es);
 8001628:	6838      	ldr	r0, [r7, #0]
 800162a:	f00a ff61 	bl	800c4f0 <mem_free>
  }  
  
  /* close tcp connection */
  tcp_close(tpcb);
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	f00c fe7a 	bl	800e328 <tcp_close>
}
 8001634:	bf00      	nop
 8001636:	3708      	adds	r7, #8
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}

0800163c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800163c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001674 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001640:	f7ff fd64 	bl	800110c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001644:	480c      	ldr	r0, [pc, #48]	; (8001678 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001646:	490d      	ldr	r1, [pc, #52]	; (800167c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001648:	4a0d      	ldr	r2, [pc, #52]	; (8001680 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800164a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800164c:	e002      	b.n	8001654 <LoopCopyDataInit>

0800164e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800164e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001650:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001652:	3304      	adds	r3, #4

08001654 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001654:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001656:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001658:	d3f9      	bcc.n	800164e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800165a:	4a0a      	ldr	r2, [pc, #40]	; (8001684 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800165c:	4c0a      	ldr	r4, [pc, #40]	; (8001688 <LoopFillZerobss+0x22>)
  movs r3, #0
 800165e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001660:	e001      	b.n	8001666 <LoopFillZerobss>

08001662 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001662:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001664:	3204      	adds	r2, #4

08001666 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001666:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001668:	d3fb      	bcc.n	8001662 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800166a:	f015 fbcd 	bl	8016e08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800166e:	f7ff f81d 	bl	80006ac <main>
  bx  lr
 8001672:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001674:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001678:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800167c:	24000098 	.word	0x24000098
  ldr r2, =_sidata
 8001680:	0801ad58 	.word	0x0801ad58
  ldr r2, =_sbss
 8001684:	24000098 	.word	0x24000098
  ldr r4, =_ebss
 8001688:	240079d8 	.word	0x240079d8

0800168c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800168c:	e7fe      	b.n	800168c <ADC3_IRQHandler>

0800168e <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 800168e:	b480      	push	{r7}
 8001690:	b083      	sub	sp, #12
 8001692:	af00      	add	r7, sp, #0
 8001694:	6078      	str	r0, [r7, #4]
 8001696:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d00b      	beq.n	80016b6 <LAN8742_RegisterBusIO+0x28>
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	68db      	ldr	r3, [r3, #12]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d007      	beq.n	80016b6 <LAN8742_RegisterBusIO+0x28>
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d003      	beq.n	80016b6 <LAN8742_RegisterBusIO+0x28>
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	691b      	ldr	r3, [r3, #16]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d102      	bne.n	80016bc <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 80016b6:	f04f 33ff 	mov.w	r3, #4294967295
 80016ba:	e014      	b.n	80016e6 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	685a      	ldr	r2, [r3, #4]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	68da      	ldr	r2, [r3, #12]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	689a      	ldr	r2, [r3, #8]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	691a      	ldr	r2, [r3, #16]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 80016e4:	2300      	movs	r3, #0
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	370c      	adds	r7, #12
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr

080016f2 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 80016f2:	b580      	push	{r7, lr}
 80016f4:	b086      	sub	sp, #24
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 80016fa:	2300      	movs	r3, #0
 80016fc:	60fb      	str	r3, [r7, #12]
 80016fe:	2300      	movs	r3, #0
 8001700:	60bb      	str	r3, [r7, #8]
 8001702:	2300      	movs	r3, #0
 8001704:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8001706:	2300      	movs	r3, #0
 8001708:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d17c      	bne.n	800180c <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d002      	beq.n	8001720 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2220      	movs	r2, #32
 8001724:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001726:	2300      	movs	r3, #0
 8001728:	617b      	str	r3, [r7, #20]
 800172a:	e01c      	b.n	8001766 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	695b      	ldr	r3, [r3, #20]
 8001730:	f107 0208 	add.w	r2, r7, #8
 8001734:	2112      	movs	r1, #18
 8001736:	6978      	ldr	r0, [r7, #20]
 8001738:	4798      	blx	r3
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	da03      	bge.n	8001748 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8001740:	f06f 0304 	mvn.w	r3, #4
 8001744:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8001746:	e00b      	b.n	8001760 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	f003 031f 	and.w	r3, r3, #31
 800174e:	697a      	ldr	r2, [r7, #20]
 8001750:	429a      	cmp	r2, r3
 8001752:	d105      	bne.n	8001760 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	697a      	ldr	r2, [r7, #20]
 8001758:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 800175a:	2300      	movs	r3, #0
 800175c:	613b      	str	r3, [r7, #16]
         break;
 800175e:	e005      	b.n	800176c <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	3301      	adds	r3, #1
 8001764:	617b      	str	r3, [r7, #20]
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	2b1f      	cmp	r3, #31
 800176a:	d9df      	bls.n	800172c <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2b1f      	cmp	r3, #31
 8001772:	d902      	bls.n	800177a <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001774:	f06f 0302 	mvn.w	r3, #2
 8001778:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d145      	bne.n	800180c <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	691b      	ldr	r3, [r3, #16]
 8001784:	687a      	ldr	r2, [r7, #4]
 8001786:	6810      	ldr	r0, [r2, #0]
 8001788:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800178c:	2100      	movs	r1, #0
 800178e:	4798      	blx	r3
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	db37      	blt.n	8001806 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	695b      	ldr	r3, [r3, #20]
 800179a:	687a      	ldr	r2, [r7, #4]
 800179c:	6810      	ldr	r0, [r2, #0]
 800179e:	f107 0208 	add.w	r2, r7, #8
 80017a2:	2100      	movs	r1, #0
 80017a4:	4798      	blx	r3
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	db28      	blt.n	80017fe <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	699b      	ldr	r3, [r3, #24]
 80017b0:	4798      	blx	r3
 80017b2:	4603      	mov	r3, r0
 80017b4:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80017b6:	e01c      	b.n	80017f2 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	699b      	ldr	r3, [r3, #24]
 80017bc:	4798      	blx	r3
 80017be:	4603      	mov	r3, r0
 80017c0:	461a      	mov	r2, r3
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80017ca:	d80e      	bhi.n	80017ea <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	695b      	ldr	r3, [r3, #20]
 80017d0:	687a      	ldr	r2, [r7, #4]
 80017d2:	6810      	ldr	r0, [r2, #0]
 80017d4:	f107 0208 	add.w	r2, r7, #8
 80017d8:	2100      	movs	r1, #0
 80017da:	4798      	blx	r3
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	da07      	bge.n	80017f2 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 80017e2:	f06f 0304 	mvn.w	r3, #4
 80017e6:	613b      	str	r3, [r7, #16]
                 break;
 80017e8:	e010      	b.n	800180c <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 80017ea:	f06f 0301 	mvn.w	r3, #1
 80017ee:	613b      	str	r3, [r7, #16]
               break;
 80017f0:	e00c      	b.n	800180c <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d1dd      	bne.n	80017b8 <LAN8742_Init+0xc6>
 80017fc:	e006      	b.n	800180c <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 80017fe:	f06f 0304 	mvn.w	r3, #4
 8001802:	613b      	str	r3, [r7, #16]
 8001804:	e002      	b.n	800180c <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8001806:	f06f 0303 	mvn.w	r3, #3
 800180a:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d112      	bne.n	8001838 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	699b      	ldr	r3, [r3, #24]
 8001816:	4798      	blx	r3
 8001818:	4603      	mov	r3, r0
 800181a:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 800181c:	bf00      	nop
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	699b      	ldr	r3, [r3, #24]
 8001822:	4798      	blx	r3
 8001824:	4603      	mov	r3, r0
 8001826:	461a      	mov	r2, r3
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	1ad3      	subs	r3, r2, r3
 800182c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001830:	d9f5      	bls.n	800181e <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2201      	movs	r2, #1
 8001836:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8001838:	693b      	ldr	r3, [r7, #16]
 }
 800183a:	4618      	mov	r0, r3
 800183c:	3718      	adds	r7, #24
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}

08001842 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001842:	b580      	push	{r7, lr}
 8001844:	b084      	sub	sp, #16
 8001846:	af00      	add	r7, sp, #0
 8001848:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 800184a:	2300      	movs	r3, #0
 800184c:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	695b      	ldr	r3, [r3, #20]
 8001852:	687a      	ldr	r2, [r7, #4]
 8001854:	6810      	ldr	r0, [r2, #0]
 8001856:	f107 020c 	add.w	r2, r7, #12
 800185a:	2101      	movs	r1, #1
 800185c:	4798      	blx	r3
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	da02      	bge.n	800186a <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001864:	f06f 0304 	mvn.w	r3, #4
 8001868:	e06e      	b.n	8001948 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	695b      	ldr	r3, [r3, #20]
 800186e:	687a      	ldr	r2, [r7, #4]
 8001870:	6810      	ldr	r0, [r2, #0]
 8001872:	f107 020c 	add.w	r2, r7, #12
 8001876:	2101      	movs	r1, #1
 8001878:	4798      	blx	r3
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	da02      	bge.n	8001886 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001880:	f06f 0304 	mvn.w	r3, #4
 8001884:	e060      	b.n	8001948 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	f003 0304 	and.w	r3, r3, #4
 800188c:	2b00      	cmp	r3, #0
 800188e:	d101      	bne.n	8001894 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8001890:	2301      	movs	r3, #1
 8001892:	e059      	b.n	8001948 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	695b      	ldr	r3, [r3, #20]
 8001898:	687a      	ldr	r2, [r7, #4]
 800189a:	6810      	ldr	r0, [r2, #0]
 800189c:	f107 020c 	add.w	r2, r7, #12
 80018a0:	2100      	movs	r1, #0
 80018a2:	4798      	blx	r3
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	da02      	bge.n	80018b0 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 80018aa:	f06f 0304 	mvn.w	r3, #4
 80018ae:	e04b      	b.n	8001948 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d11b      	bne.n	80018f2 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d006      	beq.n	80018d2 <LAN8742_GetLinkState+0x90>
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80018ce:	2302      	movs	r3, #2
 80018d0:	e03a      	b.n	8001948 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d001      	beq.n	80018e0 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80018dc:	2303      	movs	r3, #3
 80018de:	e033      	b.n	8001948 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80018ea:	2304      	movs	r3, #4
 80018ec:	e02c      	b.n	8001948 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80018ee:	2305      	movs	r3, #5
 80018f0:	e02a      	b.n	8001948 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	695b      	ldr	r3, [r3, #20]
 80018f6:	687a      	ldr	r2, [r7, #4]
 80018f8:	6810      	ldr	r0, [r2, #0]
 80018fa:	f107 020c 	add.w	r2, r7, #12
 80018fe:	211f      	movs	r1, #31
 8001900:	4798      	blx	r3
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	da02      	bge.n	800190e <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001908:	f06f 0304 	mvn.w	r3, #4
 800190c:	e01c      	b.n	8001948 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001914:	2b00      	cmp	r3, #0
 8001916:	d101      	bne.n	800191c <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001918:	2306      	movs	r3, #6
 800191a:	e015      	b.n	8001948 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	f003 031c 	and.w	r3, r3, #28
 8001922:	2b18      	cmp	r3, #24
 8001924:	d101      	bne.n	800192a <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001926:	2302      	movs	r3, #2
 8001928:	e00e      	b.n	8001948 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	f003 031c 	and.w	r3, r3, #28
 8001930:	2b08      	cmp	r3, #8
 8001932:	d101      	bne.n	8001938 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001934:	2303      	movs	r3, #3
 8001936:	e007      	b.n	8001948 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	f003 031c 	and.w	r3, r3, #28
 800193e:	2b14      	cmp	r3, #20
 8001940:	d101      	bne.n	8001946 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001942:	2304      	movs	r3, #4
 8001944:	e000      	b.n	8001948 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001946:	2305      	movs	r3, #5
    }				
  }
}
 8001948:	4618      	mov	r0, r3
 800194a:	3710      	adds	r7, #16
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}

08001950 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001956:	2003      	movs	r0, #3
 8001958:	f000 f947 	bl	8001bea <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800195c:	f003 f9dc 	bl	8004d18 <HAL_RCC_GetSysClockFreq>
 8001960:	4602      	mov	r2, r0
 8001962:	4b15      	ldr	r3, [pc, #84]	; (80019b8 <HAL_Init+0x68>)
 8001964:	699b      	ldr	r3, [r3, #24]
 8001966:	0a1b      	lsrs	r3, r3, #8
 8001968:	f003 030f 	and.w	r3, r3, #15
 800196c:	4913      	ldr	r1, [pc, #76]	; (80019bc <HAL_Init+0x6c>)
 800196e:	5ccb      	ldrb	r3, [r1, r3]
 8001970:	f003 031f 	and.w	r3, r3, #31
 8001974:	fa22 f303 	lsr.w	r3, r2, r3
 8001978:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800197a:	4b0f      	ldr	r3, [pc, #60]	; (80019b8 <HAL_Init+0x68>)
 800197c:	699b      	ldr	r3, [r3, #24]
 800197e:	f003 030f 	and.w	r3, r3, #15
 8001982:	4a0e      	ldr	r2, [pc, #56]	; (80019bc <HAL_Init+0x6c>)
 8001984:	5cd3      	ldrb	r3, [r2, r3]
 8001986:	f003 031f 	and.w	r3, r3, #31
 800198a:	687a      	ldr	r2, [r7, #4]
 800198c:	fa22 f303 	lsr.w	r3, r2, r3
 8001990:	4a0b      	ldr	r2, [pc, #44]	; (80019c0 <HAL_Init+0x70>)
 8001992:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001994:	4a0b      	ldr	r2, [pc, #44]	; (80019c4 <HAL_Init+0x74>)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800199a:	2000      	movs	r0, #0
 800199c:	f7ff fa56 	bl	8000e4c <HAL_InitTick>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e002      	b.n	80019b0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80019aa:	f7ff f951 	bl	8000c50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019ae:	2300      	movs	r3, #0
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	3708      	adds	r7, #8
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	58024400 	.word	0x58024400
 80019bc:	0801aa8c 	.word	0x0801aa8c
 80019c0:	24000004 	.word	0x24000004
 80019c4:	24000000 	.word	0x24000000

080019c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80019cc:	4b06      	ldr	r3, [pc, #24]	; (80019e8 <HAL_IncTick+0x20>)
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	461a      	mov	r2, r3
 80019d2:	4b06      	ldr	r3, [pc, #24]	; (80019ec <HAL_IncTick+0x24>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4413      	add	r3, r2
 80019d8:	4a04      	ldr	r2, [pc, #16]	; (80019ec <HAL_IncTick+0x24>)
 80019da:	6013      	str	r3, [r2, #0]
}
 80019dc:	bf00      	nop
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	2400000c 	.word	0x2400000c
 80019ec:	240046ec 	.word	0x240046ec

080019f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  return uwTick;
 80019f4:	4b03      	ldr	r3, [pc, #12]	; (8001a04 <HAL_GetTick+0x14>)
 80019f6:	681b      	ldr	r3, [r3, #0]
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	240046ec 	.word	0x240046ec

08001a08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b084      	sub	sp, #16
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a10:	f7ff ffee 	bl	80019f0 <HAL_GetTick>
 8001a14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a20:	d005      	beq.n	8001a2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a22:	4b0a      	ldr	r3, [pc, #40]	; (8001a4c <HAL_Delay+0x44>)
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	461a      	mov	r2, r3
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	4413      	add	r3, r2
 8001a2c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a2e:	bf00      	nop
 8001a30:	f7ff ffde 	bl	80019f0 <HAL_GetTick>
 8001a34:	4602      	mov	r2, r0
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	68fa      	ldr	r2, [r7, #12]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d8f7      	bhi.n	8001a30 <HAL_Delay+0x28>
  {
  }
}
 8001a40:	bf00      	nop
 8001a42:	bf00      	nop
 8001a44:	3710      	adds	r7, #16
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	2400000c 	.word	0x2400000c

08001a50 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001a54:	4b03      	ldr	r3, [pc, #12]	; (8001a64 <HAL_GetREVID+0x14>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	0c1b      	lsrs	r3, r3, #16
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr
 8001a64:	5c001000 	.word	0x5c001000

08001a68 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001a70:	4b06      	ldr	r3, [pc, #24]	; (8001a8c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001a78:	4904      	ldr	r1, [pc, #16]	; (8001a8c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	604b      	str	r3, [r1, #4]
}
 8001a80:	bf00      	nop
 8001a82:	370c      	adds	r7, #12
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr
 8001a8c:	58000400 	.word	0x58000400

08001a90 <__NVIC_SetPriorityGrouping>:
{
 8001a90:	b480      	push	{r7}
 8001a92:	b085      	sub	sp, #20
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	f003 0307 	and.w	r3, r3, #7
 8001a9e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001aa0:	4b0b      	ldr	r3, [pc, #44]	; (8001ad0 <__NVIC_SetPriorityGrouping+0x40>)
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aa6:	68ba      	ldr	r2, [r7, #8]
 8001aa8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001aac:	4013      	ands	r3, r2
 8001aae:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001ab8:	4b06      	ldr	r3, [pc, #24]	; (8001ad4 <__NVIC_SetPriorityGrouping+0x44>)
 8001aba:	4313      	orrs	r3, r2
 8001abc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001abe:	4a04      	ldr	r2, [pc, #16]	; (8001ad0 <__NVIC_SetPriorityGrouping+0x40>)
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	60d3      	str	r3, [r2, #12]
}
 8001ac4:	bf00      	nop
 8001ac6:	3714      	adds	r7, #20
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr
 8001ad0:	e000ed00 	.word	0xe000ed00
 8001ad4:	05fa0000 	.word	0x05fa0000

08001ad8 <__NVIC_GetPriorityGrouping>:
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001adc:	4b04      	ldr	r3, [pc, #16]	; (8001af0 <__NVIC_GetPriorityGrouping+0x18>)
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	0a1b      	lsrs	r3, r3, #8
 8001ae2:	f003 0307 	and.w	r3, r3, #7
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr
 8001af0:	e000ed00 	.word	0xe000ed00

08001af4 <__NVIC_EnableIRQ>:
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	4603      	mov	r3, r0
 8001afc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001afe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	db0b      	blt.n	8001b1e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b06:	88fb      	ldrh	r3, [r7, #6]
 8001b08:	f003 021f 	and.w	r2, r3, #31
 8001b0c:	4907      	ldr	r1, [pc, #28]	; (8001b2c <__NVIC_EnableIRQ+0x38>)
 8001b0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b12:	095b      	lsrs	r3, r3, #5
 8001b14:	2001      	movs	r0, #1
 8001b16:	fa00 f202 	lsl.w	r2, r0, r2
 8001b1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001b1e:	bf00      	nop
 8001b20:	370c      	adds	r7, #12
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	e000e100 	.word	0xe000e100

08001b30 <__NVIC_SetPriority>:
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	4603      	mov	r3, r0
 8001b38:	6039      	str	r1, [r7, #0]
 8001b3a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001b3c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	db0a      	blt.n	8001b5a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	b2da      	uxtb	r2, r3
 8001b48:	490c      	ldr	r1, [pc, #48]	; (8001b7c <__NVIC_SetPriority+0x4c>)
 8001b4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b4e:	0112      	lsls	r2, r2, #4
 8001b50:	b2d2      	uxtb	r2, r2
 8001b52:	440b      	add	r3, r1
 8001b54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001b58:	e00a      	b.n	8001b70 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	b2da      	uxtb	r2, r3
 8001b5e:	4908      	ldr	r1, [pc, #32]	; (8001b80 <__NVIC_SetPriority+0x50>)
 8001b60:	88fb      	ldrh	r3, [r7, #6]
 8001b62:	f003 030f 	and.w	r3, r3, #15
 8001b66:	3b04      	subs	r3, #4
 8001b68:	0112      	lsls	r2, r2, #4
 8001b6a:	b2d2      	uxtb	r2, r2
 8001b6c:	440b      	add	r3, r1
 8001b6e:	761a      	strb	r2, [r3, #24]
}
 8001b70:	bf00      	nop
 8001b72:	370c      	adds	r7, #12
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr
 8001b7c:	e000e100 	.word	0xe000e100
 8001b80:	e000ed00 	.word	0xe000ed00

08001b84 <NVIC_EncodePriority>:
{
 8001b84:	b480      	push	{r7}
 8001b86:	b089      	sub	sp, #36	; 0x24
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	60f8      	str	r0, [r7, #12]
 8001b8c:	60b9      	str	r1, [r7, #8]
 8001b8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	f003 0307 	and.w	r3, r3, #7
 8001b96:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	f1c3 0307 	rsb	r3, r3, #7
 8001b9e:	2b04      	cmp	r3, #4
 8001ba0:	bf28      	it	cs
 8001ba2:	2304      	movcs	r3, #4
 8001ba4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	3304      	adds	r3, #4
 8001baa:	2b06      	cmp	r3, #6
 8001bac:	d902      	bls.n	8001bb4 <NVIC_EncodePriority+0x30>
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	3b03      	subs	r3, #3
 8001bb2:	e000      	b.n	8001bb6 <NVIC_EncodePriority+0x32>
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bb8:	f04f 32ff 	mov.w	r2, #4294967295
 8001bbc:	69bb      	ldr	r3, [r7, #24]
 8001bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc2:	43da      	mvns	r2, r3
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	401a      	ands	r2, r3
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bcc:	f04f 31ff 	mov.w	r1, #4294967295
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	fa01 f303 	lsl.w	r3, r1, r3
 8001bd6:	43d9      	mvns	r1, r3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bdc:	4313      	orrs	r3, r2
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3724      	adds	r7, #36	; 0x24
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr

08001bea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bea:	b580      	push	{r7, lr}
 8001bec:	b082      	sub	sp, #8
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f7ff ff4c 	bl	8001a90 <__NVIC_SetPriorityGrouping>
}
 8001bf8:	bf00      	nop
 8001bfa:	3708      	adds	r7, #8
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b086      	sub	sp, #24
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	4603      	mov	r3, r0
 8001c08:	60b9      	str	r1, [r7, #8]
 8001c0a:	607a      	str	r2, [r7, #4]
 8001c0c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c0e:	f7ff ff63 	bl	8001ad8 <__NVIC_GetPriorityGrouping>
 8001c12:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c14:	687a      	ldr	r2, [r7, #4]
 8001c16:	68b9      	ldr	r1, [r7, #8]
 8001c18:	6978      	ldr	r0, [r7, #20]
 8001c1a:	f7ff ffb3 	bl	8001b84 <NVIC_EncodePriority>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001c24:	4611      	mov	r1, r2
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7ff ff82 	bl	8001b30 <__NVIC_SetPriority>
}
 8001c2c:	bf00      	nop
 8001c2e:	3718      	adds	r7, #24
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}

08001c34 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7ff ff56 	bl	8001af4 <__NVIC_EnableIRQ>
}
 8001c48:	bf00      	nop
 8001c4a:	3708      	adds	r7, #8
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}

08001c50 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001c54:	f3bf 8f5f 	dmb	sy
}
 8001c58:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001c5a:	4b07      	ldr	r3, [pc, #28]	; (8001c78 <HAL_MPU_Disable+0x28>)
 8001c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c5e:	4a06      	ldr	r2, [pc, #24]	; (8001c78 <HAL_MPU_Disable+0x28>)
 8001c60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c64:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001c66:	4b05      	ldr	r3, [pc, #20]	; (8001c7c <HAL_MPU_Disable+0x2c>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	605a      	str	r2, [r3, #4]
}
 8001c6c:	bf00      	nop
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	e000ed00 	.word	0xe000ed00
 8001c7c:	e000ed90 	.word	0xe000ed90

08001c80 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001c88:	4a0b      	ldr	r2, [pc, #44]	; (8001cb8 <HAL_MPU_Enable+0x38>)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	f043 0301 	orr.w	r3, r3, #1
 8001c90:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001c92:	4b0a      	ldr	r3, [pc, #40]	; (8001cbc <HAL_MPU_Enable+0x3c>)
 8001c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c96:	4a09      	ldr	r2, [pc, #36]	; (8001cbc <HAL_MPU_Enable+0x3c>)
 8001c98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c9c:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001c9e:	f3bf 8f4f 	dsb	sy
}
 8001ca2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001ca4:	f3bf 8f6f 	isb	sy
}
 8001ca8:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001caa:	bf00      	nop
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	e000ed90 	.word	0xe000ed90
 8001cbc:	e000ed00 	.word	0xe000ed00

08001cc0 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	785a      	ldrb	r2, [r3, #1]
 8001ccc:	4b1d      	ldr	r3, [pc, #116]	; (8001d44 <HAL_MPU_ConfigRegion+0x84>)
 8001cce:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d029      	beq.n	8001d2c <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8001cd8:	4a1a      	ldr	r2, [pc, #104]	; (8001d44 <HAL_MPU_ConfigRegion+0x84>)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	7b1b      	ldrb	r3, [r3, #12]
 8001ce4:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	7adb      	ldrb	r3, [r3, #11]
 8001cea:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001cec:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	7a9b      	ldrb	r3, [r3, #10]
 8001cf2:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001cf4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	7b5b      	ldrb	r3, [r3, #13]
 8001cfa:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001cfc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	7b9b      	ldrb	r3, [r3, #14]
 8001d02:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001d04:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	7bdb      	ldrb	r3, [r3, #15]
 8001d0a:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001d0c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	7a5b      	ldrb	r3, [r3, #9]
 8001d12:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001d14:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	7a1b      	ldrb	r3, [r3, #8]
 8001d1a:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001d1c:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001d1e:	687a      	ldr	r2, [r7, #4]
 8001d20:	7812      	ldrb	r2, [r2, #0]
 8001d22:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001d24:	4a07      	ldr	r2, [pc, #28]	; (8001d44 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001d26:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001d28:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8001d2a:	e005      	b.n	8001d38 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8001d2c:	4b05      	ldr	r3, [pc, #20]	; (8001d44 <HAL_MPU_ConfigRegion+0x84>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8001d32:	4b04      	ldr	r3, [pc, #16]	; (8001d44 <HAL_MPU_ConfigRegion+0x84>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	611a      	str	r2, [r3, #16]
}
 8001d38:	bf00      	nop
 8001d3a:	370c      	adds	r7, #12
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr
 8001d44:	e000ed90 	.word	0xe000ed90

08001d48 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d101      	bne.n	8001d5a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e0c6      	b.n	8001ee8 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d102      	bne.n	8001d68 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f006 fc52 	bl	800860c <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2223      	movs	r2, #35	; 0x23
 8001d6c:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d6e:	4b60      	ldr	r3, [pc, #384]	; (8001ef0 <HAL_ETH_Init+0x1a8>)
 8001d70:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001d74:	4a5e      	ldr	r2, [pc, #376]	; (8001ef0 <HAL_ETH_Init+0x1a8>)
 8001d76:	f043 0302 	orr.w	r3, r3, #2
 8001d7a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001d7e:	4b5c      	ldr	r3, [pc, #368]	; (8001ef0 <HAL_ETH_Init+0x1a8>)
 8001d80:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001d84:	f003 0302 	and.w	r3, r3, #2
 8001d88:	60bb      	str	r3, [r7, #8]
 8001d8a:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	7a1b      	ldrb	r3, [r3, #8]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d103      	bne.n	8001d9c <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001d94:	2000      	movs	r0, #0
 8001d96:	f7ff fe67 	bl	8001a68 <HAL_SYSCFG_ETHInterfaceSelect>
 8001d9a:	e003      	b.n	8001da4 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001d9c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001da0:	f7ff fe62 	bl	8001a68 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f042 0201 	orr.w	r2, r2, #1
 8001db6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001dbc:	f7ff fe18 	bl	80019f0 <HAL_GetTick>
 8001dc0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001dc2:	e00f      	b.n	8001de4 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8001dc4:	f7ff fe14 	bl	80019f0 <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001dd2:	d907      	bls.n	8001de4 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2204      	movs	r2, #4
 8001dd8:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	22e0      	movs	r2, #224	; 0xe0
 8001dde:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	e081      	b.n	8001ee8 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0301 	and.w	r3, r3, #1
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d1e6      	bne.n	8001dc4 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f001 fad8 	bl	80033ac <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001dfc:	f003 f906 	bl	800500c <HAL_RCC_GetHCLKFreq>
 8001e00:	4603      	mov	r3, r0
 8001e02:	4a3c      	ldr	r2, [pc, #240]	; (8001ef4 <HAL_ETH_Init+0x1ac>)
 8001e04:	fba2 2303 	umull	r2, r3, r2, r3
 8001e08:	0c9a      	lsrs	r2, r3, #18
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	3a01      	subs	r2, #1
 8001e10:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f001 fa2b 	bl	8003270 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001e30:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001e34:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	695b      	ldr	r3, [r3, #20]
 8001e3a:	f003 0303 	and.w	r3, r3, #3
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d007      	beq.n	8001e52 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2201      	movs	r2, #1
 8001e46:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	22e0      	movs	r2, #224	; 0xe0
 8001e4c:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e04a      	b.n	8001ee8 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	f241 1308 	movw	r3, #4360	; 0x1108
 8001e5a:	4413      	add	r3, r2
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	4b26      	ldr	r3, [pc, #152]	; (8001ef8 <HAL_ETH_Init+0x1b0>)
 8001e60:	4013      	ands	r3, r2
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	6952      	ldr	r2, [r2, #20]
 8001e66:	0052      	lsls	r2, r2, #1
 8001e68:	6879      	ldr	r1, [r7, #4]
 8001e6a:	6809      	ldr	r1, [r1, #0]
 8001e6c:	431a      	orrs	r2, r3
 8001e6e:	f241 1308 	movw	r3, #4360	; 0x1108
 8001e72:	440b      	add	r3, r1
 8001e74:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f001 faf0 	bl	800345c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001e7c:	6878      	ldr	r0, [r7, #4]
 8001e7e:	f001 fb34 	bl	80034ea <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	3305      	adds	r3, #5
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	021a      	lsls	r2, r3, #8
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	3304      	adds	r3, #4
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	4619      	mov	r1, r3
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	430a      	orrs	r2, r1
 8001e9c:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	3303      	adds	r3, #3
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	061a      	lsls	r2, r3, #24
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	3302      	adds	r3, #2
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	041b      	lsls	r3, r3, #16
 8001eb4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	3301      	adds	r3, #1
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001ec0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001ece:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001ed0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2210      	movs	r2, #16
 8001ede:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2210      	movs	r2, #16
 8001ee4:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8001ee6:	2300      	movs	r3, #0
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3710      	adds	r7, #16
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	58024400 	.word	0x58024400
 8001ef4:	431bde83 	.word	0x431bde83
 8001ef8:	ffff8001 	.word	0xffff8001

08001efc <HAL_ETH_DescAssignMemory>:
  * @param  pBuffer1: address of buffer 1
  * @param  pBuffer2: address of buffer 2 if available
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DescAssignMemory(ETH_HandleTypeDef *heth, uint32_t Index, uint8_t *pBuffer1, uint8_t *pBuffer2)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b087      	sub	sp, #28
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	60f8      	str	r0, [r7, #12]
 8001f04:	60b9      	str	r1, [r7, #8]
 8001f06:	607a      	str	r2, [r7, #4]
 8001f08:	603b      	str	r3, [r7, #0]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[Index];
 8001f0a:	68fa      	ldr	r2, [r7, #12]
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	3310      	adds	r3, #16
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	4413      	add	r3, r2
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	617b      	str	r3, [r7, #20]

  if((pBuffer1 == NULL) || (Index >= (uint32_t)ETH_RX_DESC_CNT))
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d002      	beq.n	8001f24 <HAL_ETH_DescAssignMemory+0x28>
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	2b03      	cmp	r3, #3
 8001f22:	d904      	bls.n	8001f2e <HAL_ETH_DescAssignMemory+0x32>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	2201      	movs	r2, #1
 8001f28:	675a      	str	r2, [r3, #116]	; 0x74
    /* Return Error */
    return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e021      	b.n	8001f72 <HAL_ETH_DescAssignMemory+0x76>
  }

  /* write buffer address to RDES0 */
  WRITE_REG(dmarxdesc->DESC0, (uint32_t)pBuffer1);
 8001f2e:	687a      	ldr	r2, [r7, #4]
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	601a      	str	r2, [r3, #0]
  /* store buffer address */
  WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)pBuffer1);
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	611a      	str	r2, [r3, #16]
  /* set buffer address valid bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	60da      	str	r2, [r3, #12]

  if(pBuffer2 != NULL)
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d00b      	beq.n	8001f64 <HAL_ETH_DescAssignMemory+0x68>
  {
    /* write buffer 2 address to RDES1 */
    WRITE_REG(dmarxdesc->DESC2, (uint32_t)pBuffer2);
 8001f4c:	683a      	ldr	r2, [r7, #0]
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	609a      	str	r2, [r3, #8]
     /* store buffer 2 address */
    WRITE_REG(dmarxdesc->BackupAddr1, (uint32_t)pBuffer2);
 8001f52:	683a      	ldr	r2, [r7, #0]
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	615a      	str	r2, [r3, #20]
    /* set buffer 2 address valid bit to RDES3 */
    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	60da      	str	r2, [r3, #12]
  }
  /* set OWN bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8001f70:	2300      	movs	r3, #0
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	371c      	adds	r7, #28
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr

08001f7e <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8001f7e:	b480      	push	{r7}
 8001f80:	b085      	sub	sp, #20
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	6078      	str	r0, [r7, #4]
  uint32_t descindex;

  ETH_DMADescTypeDef *dmarxdesc;

  if(heth->gState == HAL_ETH_STATE_READY)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f8a:	2b10      	cmp	r3, #16
 8001f8c:	d174      	bne.n	8002078 <HAL_ETH_Start_IT+0xfa>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2223      	movs	r2, #35	; 0x23
 8001f92:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Set IOC bit to all Rx descriptors */
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001f94:	2300      	movs	r3, #0
 8001f96:	60fb      	str	r3, [r7, #12]
 8001f98:	e00f      	b.n	8001fba <HAL_ETH_Start_IT+0x3c>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	3310      	adds	r3, #16
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	4413      	add	r3, r2
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	60bb      	str	r3, [r7, #8]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	60da      	str	r2, [r3, #12]
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	3301      	adds	r3, #1
 8001fb8:	60fb      	str	r3, [r7, #12]
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	2b03      	cmp	r3, #3
 8001fbe:	d9ec      	bls.n	8001f9a <HAL_ETH_Start_IT+0x1c>
    }

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	665a      	str	r2, [r3, #100]	; 0x64

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f042 0202 	orr.w	r2, r2, #2
 8001fd4:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f042 0201 	orr.w	r2, r2, #1
 8001fe4:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f042 0201 	orr.w	r2, r2, #1
 8001ff6:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	f241 1304 	movw	r3, #4356	; 0x1104
 8002002:	4413      	add	r3, r2
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	6811      	ldr	r1, [r2, #0]
 800200a:	f043 0201 	orr.w	r2, r3, #1
 800200e:	f241 1304 	movw	r3, #4356	; 0x1104
 8002012:	440b      	add	r3, r1
 8002014:	601a      	str	r2, [r3, #0]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	f241 1308 	movw	r3, #4360	; 0x1108
 800201e:	4413      	add	r3, r2
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	6811      	ldr	r1, [r2, #0]
 8002026:	f043 0201 	orr.w	r2, r3, #1
 800202a:	f241 1308 	movw	r3, #4360	; 0x1108
 800202e:	440b      	add	r3, r1
 8002030:	601a      	str	r2, [r3, #0]

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f442 7281 	orr.w	r2, r2, #258	; 0x102
 8002044:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002048:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	f241 1334 	movw	r3, #4404	; 0x1134
 8002052:	4413      	add	r3, r2
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	6811      	ldr	r1, [r2, #0]
 800205a:	f24d 0241 	movw	r2, #53313	; 0xd041
 800205e:	431a      	orrs	r2, r3
 8002060:	f241 1334 	movw	r3, #4404	; 0x1134
 8002064:	440b      	add	r3, r1
 8002066:	601a      	str	r2, [r3, #0]
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE));

    heth->gState = HAL_ETH_STATE_READY;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2210      	movs	r2, #16
 800206c:	66da      	str	r2, [r3, #108]	; 0x6c
    heth->RxState = HAL_ETH_STATE_BUSY_RX;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2222      	movs	r2, #34	; 0x22
 8002072:	671a      	str	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8002074:	2300      	movs	r3, #0
 8002076:	e000      	b.n	800207a <HAL_ETH_Start_IT+0xfc>
  }
  else
  {
    return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
  }
}
 800207a:	4618      	mov	r0, r3
 800207c:	3714      	adds	r7, #20
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
	...

08002088 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8002088:	b480      	push	{r7}
 800208a:	b085      	sub	sp, #20
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;

  if(heth->gState != HAL_ETH_STATE_RESET)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002094:	2b00      	cmp	r3, #0
 8002096:	d067      	beq.n	8002168 <HAL_ETH_Stop_IT+0xe0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2223      	movs	r2, #35	; 0x23
 800209c:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Disable interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	f241 1334 	movw	r3, #4404	; 0x1134
 80020a6:	4413      	add	r3, r2
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	6811      	ldr	r1, [r2, #0]
 80020ae:	4a32      	ldr	r2, [pc, #200]	; (8002178 <HAL_ETH_Stop_IT+0xf0>)
 80020b0:	401a      	ands	r2, r3
 80020b2:	f241 1334 	movw	r3, #4404	; 0x1134
 80020b6:	440b      	add	r3, r1
 80020b8:	601a      	str	r2, [r3, #0]
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	f241 1304 	movw	r3, #4356	; 0x1104
 80020c2:	4413      	add	r3, r2
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	6811      	ldr	r1, [r2, #0]
 80020ca:	f023 0201 	bic.w	r2, r3, #1
 80020ce:	f241 1304 	movw	r3, #4356	; 0x1104
 80020d2:	440b      	add	r3, r1
 80020d4:	601a      	str	r2, [r3, #0]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	f241 1308 	movw	r3, #4360	; 0x1108
 80020de:	4413      	add	r3, r2
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	6811      	ldr	r1, [r2, #0]
 80020e6:	f023 0201 	bic.w	r2, r3, #1
 80020ea:	f241 1308 	movw	r3, #4360	; 0x1108
 80020ee:	440b      	add	r3, r1
 80020f0:	601a      	str	r2, [r3, #0]

    /* Disable the MAC reception */
    CLEAR_BIT( heth->Instance->MACCR, ETH_MACCR_RE);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f022 0201 	bic.w	r2, r2, #1
 8002100:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f042 0201 	orr.w	r2, r2, #1
 8002112:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f022 0202 	bic.w	r2, r2, #2
 8002124:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8002126:	2300      	movs	r3, #0
 8002128:	60fb      	str	r3, [r7, #12]
 800212a:	e00f      	b.n	800214c <HAL_ETH_Stop_IT+0xc4>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 800212c:	687a      	ldr	r2, [r7, #4]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	3310      	adds	r3, #16
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	4413      	add	r3, r2
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	60bb      	str	r3, [r7, #8]
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	68db      	ldr	r3, [r3, #12]
 800213e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	60da      	str	r2, [r3, #12]
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	3301      	adds	r3, #1
 800214a:	60fb      	str	r3, [r7, #12]
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2b03      	cmp	r3, #3
 8002150:	d9ec      	bls.n	800212c <HAL_ETH_Stop_IT+0xa4>
    }

    heth->RxDescList.ItMode = 0U;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2200      	movs	r2, #0
 8002156:	665a      	str	r2, [r3, #100]	; 0x64

    heth->gState = HAL_ETH_STATE_READY;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2210      	movs	r2, #16
 800215c:	66da      	str	r2, [r3, #108]	; 0x6c
    heth->RxState = HAL_ETH_STATE_READY;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2210      	movs	r2, #16
 8002162:	671a      	str	r2, [r3, #112]	; 0x70

    /* Return function status */
    return HAL_OK;
 8002164:	2300      	movs	r3, #0
 8002166:	e000      	b.n	800216a <HAL_ETH_Stop_IT+0xe2>
  }
  else
  {
    return HAL_ERROR;
 8002168:	2301      	movs	r3, #1
  }
}
 800216a:	4618      	mov	r0, r3
 800216c:	3714      	adds	r7, #20
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	ffff2fbe 	.word	0xffff2fbe

0800217c <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b086      	sub	sp, #24
 8002180:	af00      	add	r7, sp, #0
 8002182:	60f8      	str	r0, [r7, #12]
 8002184:	60b9      	str	r1, [r7, #8]
 8002186:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  const ETH_DMADescTypeDef *dmatxdesc;

  if(pTxConfig == NULL)
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d107      	bne.n	800219e <HAL_ETH_Transmit+0x22>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002192:	f043 0201 	orr.w	r2, r3, #1
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	675a      	str	r2, [r3, #116]	; 0x74
    return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e073      	b.n	8002286 <HAL_ETH_Transmit+0x10a>
  }

  if(heth->gState == HAL_ETH_STATE_READY)
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021a2:	2b10      	cmp	r3, #16
 80021a4:	d16e      	bne.n	8002284 <HAL_ETH_Transmit+0x108>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 80021a6:	2200      	movs	r2, #0
 80021a8:	68b9      	ldr	r1, [r7, #8]
 80021aa:	68f8      	ldr	r0, [r7, #12]
 80021ac:	f001 f9fa 	bl	80035a4 <ETH_Prepare_Tx_Descriptors>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d007      	beq.n	80021c6 <HAL_ETH_Transmit+0x4a>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021ba:	f043 0202 	orr.w	r2, r3, #2
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	675a      	str	r2, [r3, #116]	; 0x74
      return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e05f      	b.n	8002286 <HAL_ETH_Transmit+0x10a>
    }

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	3206      	adds	r2, #6
 80021ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021d2:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021d8:	1c5a      	adds	r2, r3, #1
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	629a      	str	r2, [r3, #40]	; 0x28
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021e2:	2b03      	cmp	r3, #3
 80021e4:	d904      	bls.n	80021f0 <HAL_ETH_Transmit+0x74>
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ea:	1f1a      	subs	r2, r3, #4
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	68fa      	ldr	r2, [r7, #12]
 80021fa:	3106      	adds	r1, #6
 80021fc:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8002200:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8002204:	601a      	str	r2, [r3, #0]

    tickstart = HAL_GetTick();
 8002206:	f7ff fbf3 	bl	80019f0 <HAL_GetTick>
 800220a:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 800220c:	e034      	b.n	8002278 <HAL_ETH_Transmit+0xfc>
    {
      if((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800221c:	2b00      	cmp	r3, #0
 800221e:	d011      	beq.n	8002244 <HAL_ETH_Transmit+0xc8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002224:	f043 0208 	orr.w	r2, r3, #8
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	675a      	str	r2, [r3, #116]	; 0x74
        heth->DMAErrorCode = heth->Instance->DMACSR;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	679a      	str	r2, [r3, #120]	; 0x78
        /* Set ETH HAL State to Ready */
        heth->gState = HAL_ETH_STATE_ERROR;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	22e0      	movs	r2, #224	; 0xe0
 800223e:	66da      	str	r2, [r3, #108]	; 0x6c
        /* Return function status */
        return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e020      	b.n	8002286 <HAL_ETH_Transmit+0x10a>
      }

      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	f1b3 3fff 	cmp.w	r3, #4294967295
 800224a:	d015      	beq.n	8002278 <HAL_ETH_Transmit+0xfc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout) || (Timeout == 0U))
 800224c:	f7ff fbd0 	bl	80019f0 <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	429a      	cmp	r2, r3
 800225a:	d302      	bcc.n	8002262 <HAL_ETH_Transmit+0xe6>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d10a      	bne.n	8002278 <HAL_ETH_Transmit+0xfc>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002266:	f043 0204 	orr.w	r2, r3, #4
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	675a      	str	r2, [r3, #116]	; 0x74
          heth->gState = HAL_ETH_STATE_ERROR;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	22e0      	movs	r2, #224	; 0xe0
 8002272:	66da      	str	r2, [r3, #108]	; 0x6c
          return HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e006      	b.n	8002286 <HAL_ETH_Transmit+0x10a>
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	2b00      	cmp	r3, #0
 800227e:	dbc6      	blt.n	800220e <HAL_ETH_Transmit+0x92>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8002280:	2300      	movs	r3, #0
 8002282:	e000      	b.n	8002286 <HAL_ETH_Transmit+0x10a>
  }
  else
  {
    return HAL_ERROR;
 8002284:	2301      	movs	r3, #1
  }
}
 8002286:	4618      	mov	r0, r3
 8002288:	3718      	adds	r7, #24
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}

0800228e <HAL_ETH_IsRxDataAvailable>:
  *         the configuration information for ETHERNET module
  * @retval  1: A Packet is received
  *          0: no Packet received
  */
uint8_t HAL_ETH_IsRxDataAvailable(ETH_HandleTypeDef *heth)
{
 800228e:	b480      	push	{r7}
 8002290:	b089      	sub	sp, #36	; 0x24
 8002292:	af00      	add	r7, sp, #0
 8002294:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	3344      	adds	r3, #68	; 0x44
 800229a:	60bb      	str	r3, [r7, #8]
  uint32_t descidx = dmarxdesclist->CurRxDesc;
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	691b      	ldr	r3, [r3, #16]
 80022a0:	61fb      	str	r3, [r7, #28]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	69fa      	ldr	r2, [r7, #28]
 80022a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022aa:	61bb      	str	r3, [r7, #24]
  uint32_t descscancnt = 0;
 80022ac:	2300      	movs	r3, #0
 80022ae:	617b      	str	r3, [r7, #20]
  uint32_t appdesccnt = 0, firstappdescidx = 0;
 80022b0:	2300      	movs	r3, #0
 80022b2:	613b      	str	r3, [r7, #16]
 80022b4:	2300      	movs	r3, #0
 80022b6:	60fb      	str	r3, [r7, #12]

  if(dmarxdesclist->AppDescNbr != 0U)
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	699b      	ldr	r3, [r3, #24]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d06b      	beq.n	8002398 <HAL_ETH_IsRxDataAvailable+0x10a>
  {
    /* data already received by not yet processed*/
    return 0;
 80022c0:	2300      	movs	r3, #0
 80022c2:	e0ce      	b.n	8002462 <HAL_ETH_IsRxDataAvailable+0x1d4>
  }

  /* Check if descriptor is not owned by DMA */
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
  {
    descscancnt++;
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	3301      	adds	r3, #1
 80022c8:	617b      	str	r3, [r7, #20]

    /* Check if last descriptor */
    if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 80022ca:	69bb      	ldr	r3, [r7, #24]
 80022cc:	68db      	ldr	r3, [r3, #12]
 80022ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d036      	beq.n	8002344 <HAL_ETH_IsRxDataAvailable+0xb6>
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	3301      	adds	r3, #1
 80022da:	613b      	str	r3, [r7, #16]

      if(appdesccnt == 1U)
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d101      	bne.n	80022e6 <HAL_ETH_IsRxDataAvailable+0x58>
      {
        WRITE_REG(firstappdescidx, descidx);
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	60fb      	str	r3, [r7, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	3301      	adds	r3, #1
 80022ea:	61fb      	str	r3, [r7, #28]
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	2b03      	cmp	r3, #3
 80022f0:	d902      	bls.n	80022f8 <HAL_ETH_IsRxDataAvailable+0x6a>
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	3b04      	subs	r3, #4
 80022f6:	61fb      	str	r3, [r7, #28]

      /* Check for Context descriptor */
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	69fa      	ldr	r2, [r7, #28]
 80022fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002300:	61bb      	str	r3, [r7, #24]

      if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_OWN)  == (uint32_t)RESET)
 8002302:	69bb      	ldr	r3, [r7, #24]
 8002304:	68db      	ldr	r3, [r3, #12]
 8002306:	2b00      	cmp	r3, #0
 8002308:	db11      	blt.n	800232e <HAL_ETH_IsRxDataAvailable+0xa0>
      {
        if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 800230a:	69bb      	ldr	r3, [r7, #24]
 800230c:	68db      	ldr	r3, [r3, #12]
 800230e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d00b      	beq.n	800232e <HAL_ETH_IsRxDataAvailable+0xa0>
        {
          /* Increment the number of descriptors to be passed to the application */
          dmarxdesclist->AppContextDesc = 1;
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	2201      	movs	r2, #1
 800231a:	61da      	str	r2, [r3, #28]
          /* Increment current rx descriptor index */
          INCR_RX_DESC_INDEX(descidx, 1U);
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	3301      	adds	r3, #1
 8002320:	61fb      	str	r3, [r7, #28]
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	2b03      	cmp	r3, #3
 8002326:	d902      	bls.n	800232e <HAL_ETH_IsRxDataAvailable+0xa0>
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	3b04      	subs	r3, #4
 800232c:	61fb      	str	r3, [r7, #28]
        }
      }
      /* Fill information to Rx descriptors list */
      dmarxdesclist->CurRxDesc = descidx;
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	69fa      	ldr	r2, [r7, #28]
 8002332:	611a      	str	r2, [r3, #16]
      dmarxdesclist->FirstAppDesc = firstappdescidx;
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	68fa      	ldr	r2, [r7, #12]
 8002338:	615a      	str	r2, [r3, #20]
      dmarxdesclist->AppDescNbr = appdesccnt;
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	693a      	ldr	r2, [r7, #16]
 800233e:	619a      	str	r2, [r3, #24]

      /* Return function status */
      return 1;
 8002340:	2301      	movs	r3, #1
 8002342:	e08e      	b.n	8002462 <HAL_ETH_IsRxDataAvailable+0x1d4>
    }
    /* Check if first descriptor */
    else if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8002344:	69bb      	ldr	r3, [r7, #24]
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d012      	beq.n	8002376 <HAL_ETH_IsRxDataAvailable+0xe8>
    {
      WRITE_REG(firstappdescidx, descidx);
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	60fb      	str	r3, [r7, #12]
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt = 1U;
 8002354:	2301      	movs	r3, #1
 8002356:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	3301      	adds	r3, #1
 800235c:	61fb      	str	r3, [r7, #28]
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	2b03      	cmp	r3, #3
 8002362:	d902      	bls.n	800236a <HAL_ETH_IsRxDataAvailable+0xdc>
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	3b04      	subs	r3, #4
 8002368:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	69fa      	ldr	r2, [r7, #28]
 800236e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002372:	61bb      	str	r3, [r7, #24]
 8002374:	e010      	b.n	8002398 <HAL_ETH_IsRxDataAvailable+0x10a>
    }
    /* It should be an intermediate descriptor */
    else
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	3301      	adds	r3, #1
 800237a:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	3301      	adds	r3, #1
 8002380:	61fb      	str	r3, [r7, #28]
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	2b03      	cmp	r3, #3
 8002386:	d902      	bls.n	800238e <HAL_ETH_IsRxDataAvailable+0x100>
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	3b04      	subs	r3, #4
 800238c:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	69fa      	ldr	r2, [r7, #28]
 8002392:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002396:	61bb      	str	r3, [r7, #24]
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
 8002398:	69bb      	ldr	r3, [r7, #24]
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	2b00      	cmp	r3, #0
 800239e:	db02      	blt.n	80023a6 <HAL_ETH_IsRxDataAvailable+0x118>
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	2b03      	cmp	r3, #3
 80023a4:	d98e      	bls.n	80022c4 <HAL_ETH_IsRxDataAvailable+0x36>
    }
  }

  /* Build Descriptors if an incomplete Packet is received */
  if(appdesccnt > 0U)
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d056      	beq.n	800245a <HAL_ETH_IsRxDataAvailable+0x1cc>
  {
    dmarxdesclist->CurRxDesc = descidx;
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	69fa      	ldr	r2, [r7, #28]
 80023b0:	611a      	str	r2, [r3, #16]
    dmarxdesclist->FirstAppDesc = firstappdescidx;
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	68fa      	ldr	r2, [r7, #12]
 80023b6:	615a      	str	r2, [r3, #20]
    descidx = firstappdescidx;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	61fb      	str	r3, [r7, #28]
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	69fa      	ldr	r2, [r7, #28]
 80023c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023c4:	61bb      	str	r3, [r7, #24]

    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 80023c6:	2300      	movs	r3, #0
 80023c8:	617b      	str	r3, [r7, #20]
 80023ca:	e03b      	b.n	8002444 <HAL_ETH_IsRxDataAvailable+0x1b6>
    {
      WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 80023cc:	69bb      	ldr	r3, [r7, #24]
 80023ce:	691a      	ldr	r2, [r3, #16]
 80023d0:	69bb      	ldr	r3, [r7, #24]
 80023d2:	601a      	str	r2, [r3, #0]
      WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 80023d4:	69bb      	ldr	r3, [r7, #24]
 80023d6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80023da:	60da      	str	r2, [r3, #12]

      if (READ_REG(dmarxdesc->BackupAddr1) != ((uint32_t)RESET))
 80023dc:	69bb      	ldr	r3, [r7, #24]
 80023de:	695b      	ldr	r3, [r3, #20]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d009      	beq.n	80023f8 <HAL_ETH_IsRxDataAvailable+0x16a>
      {
        WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 80023e4:	69bb      	ldr	r3, [r7, #24]
 80023e6:	695a      	ldr	r2, [r3, #20]
 80023e8:	69bb      	ldr	r3, [r7, #24]
 80023ea:	609a      	str	r2, [r3, #8]
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 80023ec:	69bb      	ldr	r3, [r7, #24]
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80023f4:	69bb      	ldr	r3, [r7, #24]
 80023f6:	60da      	str	r2, [r3, #12]
      }

      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 80023f8:	69bb      	ldr	r3, [r7, #24]
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002400:	69bb      	ldr	r3, [r7, #24]
 8002402:	60da      	str	r2, [r3, #12]

      if(dmarxdesclist->ItMode != ((uint32_t)RESET))
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	6a1b      	ldr	r3, [r3, #32]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d005      	beq.n	8002418 <HAL_ETH_IsRxDataAvailable+0x18a>
      {
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 800240c:	69bb      	ldr	r3, [r7, #24]
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002414:	69bb      	ldr	r3, [r7, #24]
 8002416:	60da      	str	r2, [r3, #12]
      }
      if(descscancnt < (appdesccnt - 1U))
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	3b01      	subs	r3, #1
 800241c:	697a      	ldr	r2, [r7, #20]
 800241e:	429a      	cmp	r2, r3
 8002420:	d20d      	bcs.n	800243e <HAL_ETH_IsRxDataAvailable+0x1b0>
      {
        /* Increment rx descriptor index */
        INCR_RX_DESC_INDEX(descidx, 1U);
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	3301      	adds	r3, #1
 8002426:	61fb      	str	r3, [r7, #28]
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	2b03      	cmp	r3, #3
 800242c:	d902      	bls.n	8002434 <HAL_ETH_IsRxDataAvailable+0x1a6>
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	3b04      	subs	r3, #4
 8002432:	61fb      	str	r3, [r7, #28]
        /* Get descriptor address */
        dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	69fa      	ldr	r2, [r7, #28]
 8002438:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800243c:	61bb      	str	r3, [r7, #24]
    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	3301      	adds	r3, #1
 8002442:	617b      	str	r3, [r7, #20]
 8002444:	697a      	ldr	r2, [r7, #20]
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	429a      	cmp	r2, r3
 800244a:	d3bf      	bcc.n	80023cc <HAL_ETH_IsRxDataAvailable+0x13e>
      }
    }

    /* Set the Tail pointer address to the last rx descriptor hold by the app */
    WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6819      	ldr	r1, [r3, #0]
 8002450:	69ba      	ldr	r2, [r7, #24]
 8002452:	f241 1328 	movw	r3, #4392	; 0x1128
 8002456:	440b      	add	r3, r1
 8002458:	601a      	str	r2, [r3, #0]
  }

  /* Fill information to Rx descriptors list: No received Packet */
  dmarxdesclist->AppDescNbr = 0U;
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	2200      	movs	r2, #0
 800245e:	619a      	str	r2, [r3, #24]

  return 0;
 8002460:	2300      	movs	r3, #0
}
 8002462:	4618      	mov	r0, r3
 8002464:	3724      	adds	r7, #36	; 0x24
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr

0800246e <HAL_ETH_GetRxDataBuffer>:
  *         the configuration information for ETHERNET module
  * @param  RxBuffer: Pointer to a ETH_BufferTypeDef structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataBuffer(ETH_HandleTypeDef *heth, ETH_BufferTypeDef *RxBuffer)
{
 800246e:	b580      	push	{r7, lr}
 8002470:	b08a      	sub	sp, #40	; 0x28
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]
 8002476:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	3344      	adds	r3, #68	; 0x44
 800247c:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	695b      	ldr	r3, [r3, #20]
 8002482:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t index, accumulatedlen = 0, lastdesclen;
 8002484:	2300      	movs	r3, #0
 8002486:	61fb      	str	r3, [r7, #28]
  __IO const ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800248c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002490:	61bb      	str	r3, [r7, #24]
  ETH_BufferTypeDef *rxbuff = RxBuffer;
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	617b      	str	r3, [r7, #20]

  if(rxbuff == NULL)
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d104      	bne.n	80024a6 <HAL_ETH_GetRxDataBuffer+0x38>
  {
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2201      	movs	r2, #1
 80024a0:	675a      	str	r2, [r3, #116]	; 0x74
    return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e07d      	b.n	80025a2 <HAL_ETH_GetRxDataBuffer+0x134>
  }

  if(dmarxdesclist->AppDescNbr == 0U)
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	699b      	ldr	r3, [r3, #24]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d10f      	bne.n	80024ce <HAL_ETH_GetRxDataBuffer+0x60>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f7ff feed 	bl	800228e <HAL_ETH_IsRxDataAvailable>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d101      	bne.n	80024be <HAL_ETH_GetRxDataBuffer+0x50>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e071      	b.n	80025a2 <HAL_ETH_GetRxDataBuffer+0x134>
    }
    else
    {
      descidx = dmarxdesclist->FirstAppDesc;
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	695b      	ldr	r3, [r3, #20]
 80024c2:	627b      	str	r3, [r7, #36]	; 0x24
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024cc:	61bb      	str	r3, [r7, #24]
    }
  }

  /* Get intermediate descriptors buffers: in case of the Packet is split into multi descriptors */
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 80024ce:	2300      	movs	r3, #0
 80024d0:	623b      	str	r3, [r7, #32]
 80024d2:	e031      	b.n	8002538 <HAL_ETH_GetRxDataBuffer+0xca>
  {
    /* Get Address and length of the first buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 80024d4:	69bb      	ldr	r3, [r7, #24]
 80024d6:	691b      	ldr	r3, [r3, #16]
 80024d8:	461a      	mov	r2, r3
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	601a      	str	r2, [r3, #0]
    rxbuff->len =  heth->Init.RxBuffLen;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	695a      	ldr	r2, [r3, #20]
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	605a      	str	r2, [r3, #4]

    /* Check if the second buffer address of this descriptor is valid */
    if(dmarxdesc->BackupAddr1 != 0U)
 80024e6:	69bb      	ldr	r3, [r7, #24]
 80024e8:	695b      	ldr	r3, [r3, #20]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d00b      	beq.n	8002506 <HAL_ETH_GetRxDataBuffer+0x98>
    {
      /* Point to next buffer */
      rxbuff = rxbuff->next;
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	617b      	str	r3, [r7, #20]
      /* Get Address and length of the second buffer address */
      rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 80024f4:	69bb      	ldr	r3, [r7, #24]
 80024f6:	695b      	ldr	r3, [r3, #20]
 80024f8:	461a      	mov	r2, r3
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	601a      	str	r2, [r3, #0]
      rxbuff->len =  heth->Init.RxBuffLen;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	695a      	ldr	r2, [r3, #20]
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	605a      	str	r2, [r3, #4]
    {
      /* Nothing to do here */
    }

    /* get total length until this descriptor */
    accumulatedlen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 8002506:	69bb      	ldr	r3, [r7, #24]
 8002508:	68db      	ldr	r3, [r3, #12]
 800250a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800250e:	61fb      	str	r3, [r7, #28]

    /* Increment to next descriptor */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8002510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002512:	3301      	adds	r3, #1
 8002514:	627b      	str	r3, [r7, #36]	; 0x24
 8002516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002518:	2b03      	cmp	r3, #3
 800251a:	d902      	bls.n	8002522 <HAL_ETH_GetRxDataBuffer+0xb4>
 800251c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251e:	3b04      	subs	r3, #4
 8002520:	627b      	str	r3, [r7, #36]	; 0x24
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002526:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800252a:	61bb      	str	r3, [r7, #24]

    /* Point to next buffer */
    rxbuff = rxbuff->next;
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	617b      	str	r3, [r7, #20]
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 8002532:	6a3b      	ldr	r3, [r7, #32]
 8002534:	3301      	adds	r3, #1
 8002536:	623b      	str	r3, [r7, #32]
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	699b      	ldr	r3, [r3, #24]
 800253c:	3b01      	subs	r3, #1
 800253e:	6a3a      	ldr	r2, [r7, #32]
 8002540:	429a      	cmp	r2, r3
 8002542:	d3c7      	bcc.n	80024d4 <HAL_ETH_GetRxDataBuffer+0x66>
  }

  /* last descriptor data length */
  lastdesclen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - accumulatedlen;
 8002544:	69bb      	ldr	r3, [r7, #24]
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	1ad3      	subs	r3, r2, r3
 8002550:	60fb      	str	r3, [r7, #12]

  /* Get Address of the first buffer address */
  rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 8002552:	69bb      	ldr	r3, [r7, #24]
 8002554:	691b      	ldr	r3, [r3, #16]
 8002556:	461a      	mov	r2, r3
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	601a      	str	r2, [r3, #0]

  /* data is in only one buffer */
  if(lastdesclen <= heth->Init.RxBuffLen)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	695b      	ldr	r3, [r3, #20]
 8002560:	68fa      	ldr	r2, [r7, #12]
 8002562:	429a      	cmp	r2, r3
 8002564:	d803      	bhi.n	800256e <HAL_ETH_GetRxDataBuffer+0x100>
  {
    rxbuff->len = lastdesclen;
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	68fa      	ldr	r2, [r7, #12]
 800256a:	605a      	str	r2, [r3, #4]
 800256c:	e018      	b.n	80025a0 <HAL_ETH_GetRxDataBuffer+0x132>
  }
  /* data is in two buffers */
  else if(dmarxdesc->BackupAddr1 != 0U)
 800256e:	69bb      	ldr	r3, [r7, #24]
 8002570:	695b      	ldr	r3, [r3, #20]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d012      	beq.n	800259c <HAL_ETH_GetRxDataBuffer+0x12e>
  {
    /* Get the Length of the first buffer address */
    rxbuff->len = heth->Init.RxBuffLen;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	695a      	ldr	r2, [r3, #20]
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	605a      	str	r2, [r3, #4]
    /* Point to next buffer */
    rxbuff = rxbuff->next;
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	617b      	str	r3, [r7, #20]
    /* Get the Address the Length of the second buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	695b      	ldr	r3, [r3, #20]
 8002588:	461a      	mov	r2, r3
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	601a      	str	r2, [r3, #0]
    rxbuff->len =  lastdesclen - (heth->Init.RxBuffLen);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	695b      	ldr	r3, [r3, #20]
 8002592:	68fa      	ldr	r2, [r7, #12]
 8002594:	1ad2      	subs	r2, r2, r3
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	605a      	str	r2, [r3, #4]
 800259a:	e001      	b.n	80025a0 <HAL_ETH_GetRxDataBuffer+0x132>
  }
  else /* Buffer 2 not valid*/
  {
    return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e000      	b.n	80025a2 <HAL_ETH_GetRxDataBuffer+0x134>
  }

  return HAL_OK;
 80025a0:	2300      	movs	r3, #0
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3728      	adds	r7, #40	; 0x28
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}

080025aa <HAL_ETH_GetRxDataLength>:
  *         the configuration information for ETHERNET module
  * @param  Length: parameter to hold Rx packet length
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataLength(ETH_HandleTypeDef *heth, uint32_t *Length)
{
 80025aa:	b580      	push	{r7, lr}
 80025ac:	b086      	sub	sp, #24
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	6078      	str	r0, [r7, #4]
 80025b2:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	3344      	adds	r3, #68	; 0x44
 80025b8:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	695b      	ldr	r3, [r3, #20]
 80025be:	617b      	str	r3, [r7, #20]
  __IO const ETH_DMADescTypeDef *dmarxdesc;

  if(dmarxdesclist->AppDescNbr == 0U)
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	699b      	ldr	r3, [r3, #24]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d107      	bne.n	80025d8 <HAL_ETH_GetRxDataLength+0x2e>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f7ff fe60 	bl	800228e <HAL_ETH_IsRxDataAvailable>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d101      	bne.n	80025d8 <HAL_ETH_GetRxDataLength+0x2e>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e017      	b.n	8002608 <HAL_ETH_GetRxDataLength+0x5e>
    }
  }

  /* Get index of last descriptor */
  INCR_RX_DESC_INDEX(descidx, (dmarxdesclist->AppDescNbr - 1U));
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	699a      	ldr	r2, [r3, #24]
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	4413      	add	r3, r2
 80025e0:	3b01      	subs	r3, #1
 80025e2:	617b      	str	r3, [r7, #20]
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	2b03      	cmp	r3, #3
 80025e8:	d902      	bls.n	80025f0 <HAL_ETH_GetRxDataLength+0x46>
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	3b04      	subs	r3, #4
 80025ee:	617b      	str	r3, [r7, #20]
  /* Point to last descriptor */
  dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	697a      	ldr	r2, [r7, #20]
 80025f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025f8:	60fb      	str	r3, [r7, #12]

  *Length = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002606:	2300      	movs	r3, #0
}
 8002608:	4618      	mov	r0, r3
 800260a:	3718      	adds	r7, #24
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}

08002610 <HAL_ETH_BuildRxDescriptors>:
* @param  heth: pointer to a ETH_HandleTypeDef structure that contains
*         the configuration information for ETHERNET module
* @retval HAL status.
*/
HAL_StatusTypeDef HAL_ETH_BuildRxDescriptors(ETH_HandleTypeDef *heth)
{
 8002610:	b480      	push	{r7}
 8002612:	b089      	sub	sp, #36	; 0x24
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	3344      	adds	r3, #68	; 0x44
 800261c:	60fb      	str	r3, [r7, #12]
  uint32_t descindex = dmarxdesclist->FirstAppDesc;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	695b      	ldr	r3, [r3, #20]
 8002622:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	69fa      	ldr	r2, [r7, #28]
 8002628:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800262c:	61bb      	str	r3, [r7, #24]
  uint32_t totalappdescnbr = dmarxdesclist->AppDescNbr;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	699b      	ldr	r3, [r3, #24]
 8002632:	617b      	str	r3, [r7, #20]
  uint32_t descscan;

  if(dmarxdesclist->AppDescNbr == 0U)
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	699b      	ldr	r3, [r3, #24]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d101      	bne.n	8002640 <HAL_ETH_BuildRxDescriptors+0x30>
  {
    /* No Rx descriptors to build */
    return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e057      	b.n	80026f0 <HAL_ETH_BuildRxDescriptors+0xe0>
  }

  if(dmarxdesclist->AppContextDesc != 0U)
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	69db      	ldr	r3, [r3, #28]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d002      	beq.n	800264e <HAL_ETH_BuildRxDescriptors+0x3e>
  {
    /* A context descriptor is available */
    totalappdescnbr += 1U;
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	3301      	adds	r3, #1
 800264c:	617b      	str	r3, [r7, #20]
  }

  for(descscan =0; descscan < totalappdescnbr; descscan++)
 800264e:	2300      	movs	r3, #0
 8002650:	613b      	str	r3, [r7, #16]
 8002652:	e03b      	b.n	80026cc <HAL_ETH_BuildRxDescriptors+0xbc>
  {
    WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 8002654:	69bb      	ldr	r3, [r7, #24]
 8002656:	691a      	ldr	r2, [r3, #16]
 8002658:	69bb      	ldr	r3, [r7, #24]
 800265a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 800265c:	69bb      	ldr	r3, [r7, #24]
 800265e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002662:	60da      	str	r2, [r3, #12]

    if (READ_REG(dmarxdesc->BackupAddr1) != 0U)
 8002664:	69bb      	ldr	r3, [r7, #24]
 8002666:	695b      	ldr	r3, [r3, #20]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d009      	beq.n	8002680 <HAL_ETH_BuildRxDescriptors+0x70>
    {
      WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 800266c:	69bb      	ldr	r3, [r7, #24]
 800266e:	695a      	ldr	r2, [r3, #20]
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	609a      	str	r2, [r3, #8]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8002674:	69bb      	ldr	r3, [r7, #24]
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800267c:	69bb      	ldr	r3, [r7, #24]
 800267e:	60da      	str	r2, [r3, #12]
    }

    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8002680:	69bb      	ldr	r3, [r7, #24]
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002688:	69bb      	ldr	r3, [r7, #24]
 800268a:	60da      	str	r2, [r3, #12]

    if(dmarxdesclist->ItMode != 0U)
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	6a1b      	ldr	r3, [r3, #32]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d005      	beq.n	80026a0 <HAL_ETH_BuildRxDescriptors+0x90>
    {
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8002694:	69bb      	ldr	r3, [r7, #24]
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800269c:	69bb      	ldr	r3, [r7, #24]
 800269e:	60da      	str	r2, [r3, #12]
    }

    if(descscan < (totalappdescnbr - 1U))
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	3b01      	subs	r3, #1
 80026a4:	693a      	ldr	r2, [r7, #16]
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d20d      	bcs.n	80026c6 <HAL_ETH_BuildRxDescriptors+0xb6>
    {
      /* Increment rx descriptor index */
      INCR_RX_DESC_INDEX(descindex, 1U);
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	3301      	adds	r3, #1
 80026ae:	61fb      	str	r3, [r7, #28]
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	2b03      	cmp	r3, #3
 80026b4:	d902      	bls.n	80026bc <HAL_ETH_BuildRxDescriptors+0xac>
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	3b04      	subs	r3, #4
 80026ba:	61fb      	str	r3, [r7, #28]
      /* Get descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	69fa      	ldr	r2, [r7, #28]
 80026c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026c4:	61bb      	str	r3, [r7, #24]
  for(descscan =0; descscan < totalappdescnbr; descscan++)
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	3301      	adds	r3, #1
 80026ca:	613b      	str	r3, [r7, #16]
 80026cc:	693a      	ldr	r2, [r7, #16]
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d3bf      	bcc.n	8002654 <HAL_ETH_BuildRxDescriptors+0x44>
    }
  }

  /* Set the Tail pointer address to the last rx descriptor hold by the app */
  WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6819      	ldr	r1, [r3, #0]
 80026d8:	69ba      	ldr	r2, [r7, #24]
 80026da:	f241 1328 	movw	r3, #4392	; 0x1128
 80026de:	440b      	add	r3, r1
 80026e0:	601a      	str	r2, [r3, #0]

  /* reset the Application desc number */
  WRITE_REG(dmarxdesclist->AppDescNbr, 0);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	2200      	movs	r2, #0
 80026e6:	619a      	str	r2, [r3, #24]

  /*  reset the application context descriptor */
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2200      	movs	r2, #0
 80026ec:	661a      	str	r2, [r3, #96]	; 0x60

  return HAL_OK;
 80026ee:	2300      	movs	r3, #0
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3724      	adds	r7, #36	; 0x24
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr

080026fc <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b082      	sub	sp, #8
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002712:	2b40      	cmp	r3, #64	; 0x40
 8002714:	d113      	bne.n	800273e <HAL_ETH_IRQHandler+0x42>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	f241 1334 	movw	r3, #4404	; 0x1134
 800271e:	4413      	add	r3, r2
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002726:	2b40      	cmp	r3, #64	; 0x40
 8002728:	d109      	bne.n	800273e <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f006 f844 	bl	80087b8 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002738:	f248 0240 	movw	r2, #32832	; 0x8040
 800273c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0301 	and.w	r3, r3, #1
 800274c:	2b01      	cmp	r3, #1
 800274e:	d113      	bne.n	8002778 <HAL_ETH_IRQHandler+0x7c>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	f241 1334 	movw	r3, #4404	; 0x1134
 8002758:	4413      	add	r3, r2
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0301 	and.w	r3, r3, #1
 8002760:	2b01      	cmp	r3, #1
 8002762:	d109      	bne.n	8002778 <HAL_ETH_IRQHandler+0x7c>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
        /*Call registered Transmit complete callback*/
        heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	f000 f8b7 	bl	80028d8 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002772:	f248 0201 	movw	r2, #32769	; 0x8001
 8002776:	601a      	str	r2, [r3, #0]
    }
  }


  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002786:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800278a:	d149      	bne.n	8002820 <HAL_ETH_IRQHandler+0x124>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	f241 1334 	movw	r3, #4404	; 0x1134
 8002794:	4413      	add	r3, r2
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800279c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80027a0:	d13e      	bne.n	8002820 <HAL_ETH_IRQHandler+0x124>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027a6:	f043 0208 	orr.w	r2, r3, #8
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	675a      	str	r2, [r3, #116]	; 0x74

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027c0:	d11b      	bne.n	80027fa <HAL_ETH_IRQHandler+0xfe>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	f241 1302 	movw	r3, #4354	; 0x1102
 80027d0:	4013      	ands	r3, r2
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	6793      	str	r3, [r2, #120]	; 0x78

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	f241 1334 	movw	r3, #4404	; 0x1134
 80027de:	4413      	add	r3, r2
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	6811      	ldr	r1, [r2, #0]
 80027e6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80027ea:	f241 1334 	movw	r3, #4404	; 0x1134
 80027ee:	440b      	add	r3, r1
 80027f0:	601a      	str	r2, [r3, #0]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	22e0      	movs	r2, #224	; 0xe0
 80027f6:	66da      	str	r2, [r3, #108]	; 0x6c
 80027f8:	e00f      	b.n	800281a <HAL_ETH_IRQHandler+0x11e>
      }
      else
      {
        /* Get DMA error status  */
       heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f403 42cd 	and.w	r2, r3, #26240	; 0x6680
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	679a      	str	r2, [r3, #120]	; 0x78
                                                       ETH_DMACSR_RBU | ETH_DMACSR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002814:	f44f 42cd 	mov.w	r2, #26240	; 0x6680
 8002818:	601a      	str	r2, [r3, #0]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered DMA Error callback*/
      heth->DMAErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_DMAErrorCallback(heth);
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	f000 f866 	bl	80028ec <HAL_ETH_DMAErrorCallback>

    }
  }

  /* ETH MAC Error IT */
  if(__HAL_ETH_MAC_GET_IT(heth, (ETH_MACIER_RXSTSIE | ETH_MACIER_TXSTSIE)))
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002828:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800282c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002830:	d10e      	bne.n	8002850 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	67da      	str	r2, [r3, #124]	; 0x7c

    heth->gState = HAL_ETH_STATE_ERROR;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	22e0      	movs	r2, #224	; 0xe0
 8002842:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered MAC Error callback*/
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet MAC Error callback */
    HAL_ETH_MACErrorCallback(heth);
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	f000 f85b 	bl	8002900 <HAL_ETH_MACErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACErrorCode = (uint32_t)(0x0U);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2200      	movs	r2, #0
 800284e:	67da      	str	r2, [r3, #124]	; 0x7c
  }

  /* ETH PMT IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002858:	f003 0310 	and.w	r3, r3, #16
 800285c:	2b10      	cmp	r3, #16
 800285e:	d10f      	bne.n	8002880 <HAL_ETH_IRQHandler+0x184>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002868:	f003 0260 	and.w	r2, r3, #96	; 0x60
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f000 f84e 	bl	8002914 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2200      	movs	r2, #0
 800287c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }

  /* ETH EEE IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002888:	f003 0320 	and.w	r3, r3, #32
 800288c:	2b20      	cmp	r3, #32
 800288e:	d10f      	bne.n	80028b0 <HAL_ETH_IRQHandler+0x1b4>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002898:	f003 020f 	and.w	r2, r3, #15
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f000 f840 	bl	8002928 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2200      	movs	r2, #0
 80028ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif
    }
  }
#else
  /* check ETH WAKEUP exti flag */
  if(__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 80028b0:	4b08      	ldr	r3, [pc, #32]	; (80028d4 <HAL_ETH_IRQHandler+0x1d8>)
 80028b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d006      	beq.n	80028ca <HAL_ETH_IRQHandler+0x1ce>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80028bc:	4b05      	ldr	r3, [pc, #20]	; (80028d4 <HAL_ETH_IRQHandler+0x1d8>)
 80028be:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80028c2:	629a      	str	r2, [r3, #40]	; 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered WakeUp callback*/
      heth->WakeUpCallback(heth);
#else
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	f000 f839 	bl	800293c <HAL_ETH_WakeUpCallback>
#endif
  }
#endif
}
 80028ca:	bf00      	nop
 80028cc:	3708      	adds	r7, #8
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	58000080 	.word	0x58000080

080028d8 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 80028e0:	bf00      	nop
 80028e2:	370c      	adds	r7, #12
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr

080028ec <HAL_ETH_DMAErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_DMAErrorCallback(ETH_HandleTypeDef *heth)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_DMAErrorCallback could be implemented in the user file
  */
}
 80028f4:	bf00      	nop
 80028f6:	370c      	adds	r7, #12
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr

08002900 <HAL_ETH_MACErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_MACErrorCallback(ETH_HandleTypeDef *heth)
{
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_MACErrorCallback could be implemented in the user file
  */
}
 8002908:	bf00      	nop
 800290a:	370c      	adds	r7, #12
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr

08002914 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 800291c:	bf00      	nop
 800291e:	370c      	adds	r7, #12
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr

08002928 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 8002928:	b480      	push	{r7}
 800292a:	b083      	sub	sp, #12
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 8002930:	bf00      	nop
 8002932:	370c      	adds	r7, #12
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr

0800293c <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 800293c:	b480      	push	{r7}
 800293e:	b083      	sub	sp, #12
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8002944:	bf00      	nop
 8002946:	370c      	adds	r7, #12
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr

08002950 <HAL_ETH_ReadPHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t *pRegValue)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b086      	sub	sp, #24
 8002954:	af00      	add	r7, sp, #0
 8002956:	60f8      	str	r0, [r7, #12]
 8002958:	60b9      	str	r1, [r7, #8]
 800295a:	607a      	str	r2, [r7, #4]
 800295c:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002966:	f003 0301 	and.w	r3, r3, #1
 800296a:	2b00      	cmp	r3, #0
 800296c:	d001      	beq.n	8002972 <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e03e      	b.n	80029f0 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800297a:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	055b      	lsls	r3, r3, #21
 8002986:	4313      	orrs	r3, r2
 8002988:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	041b      	lsls	r3, r3, #16
 8002994:	4313      	orrs	r3, r2
 8002996:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	f043 030c 	orr.w	r3, r3, #12
 800299e:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	f043 0301 	orr.w	r3, r3, #1
 80029a6:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	697a      	ldr	r2, [r7, #20]
 80029ae:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 80029b2:	f7ff f81d 	bl	80019f0 <HAL_GetTick>
 80029b6:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80029b8:	e009      	b.n	80029ce <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 80029ba:	f7ff f819 	bl	80019f0 <HAL_GetTick>
 80029be:	4602      	mov	r2, r0
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80029c8:	d901      	bls.n	80029ce <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e010      	b.n	80029f0 <HAL_ETH_ReadPHYRegister+0xa0>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80029d6:	f003 0301 	and.w	r3, r3, #1
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d1ed      	bne.n	80029ba <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80029e6:	b29b      	uxth	r3, r3
 80029e8:	461a      	mov	r2, r3
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80029ee:	2300      	movs	r3, #0
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3718      	adds	r7, #24
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}

080029f8 <HAL_ETH_WritePHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t RegValue)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b086      	sub	sp, #24
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	60b9      	str	r1, [r7, #8]
 8002a02:	607a      	str	r2, [r7, #4]
 8002a04:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002a0e:	f003 0301 	and.w	r3, r3, #1
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d001      	beq.n	8002a1a <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e03c      	b.n	8002a94 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002a22:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	055b      	lsls	r3, r3, #21
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	041b      	lsls	r3, r3, #16
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	f023 030c 	bic.w	r3, r3, #12
 8002a46:	f043 0304 	orr.w	r3, r3, #4
 8002a4a:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	f043 0301 	orr.w	r3, r3, #1
 8002a52:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	b29a      	uxth	r2, r3
 8002a58:	4b10      	ldr	r3, [pc, #64]	; (8002a9c <HAL_ETH_WritePHYRegister+0xa4>)
 8002a5a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8002a5e:	4a0f      	ldr	r2, [pc, #60]	; (8002a9c <HAL_ETH_WritePHYRegister+0xa4>)
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 8002a66:	f7fe ffc3 	bl	80019f0 <HAL_GetTick>
 8002a6a:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002a6c:	e009      	b.n	8002a82 <HAL_ETH_WritePHYRegister+0x8a>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 8002a6e:	f7fe ffbf 	bl	80019f0 <HAL_GetTick>
 8002a72:	4602      	mov	r2, r0
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a7c:	d901      	bls.n	8002a82 <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e008      	b.n	8002a94 <HAL_ETH_WritePHYRegister+0x9c>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002a8a:	f003 0301 	and.w	r3, r3, #1
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d1ed      	bne.n	8002a6e <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 8002a92:	2300      	movs	r3, #0
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3718      	adds	r7, #24
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	40028000 	.word	0x40028000

08002aa0 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d101      	bne.n	8002ab4 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e1c3      	b.n	8002e3c <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 020c 	and.w	r2, r3, #12
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC)>> 4) > 0U) ? ENABLE : DISABLE;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 0310 	and.w	r3, r3, #16
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	bf14      	ite	ne
 8002ad0:	2301      	movne	r3, #1
 8002ad2:	2300      	moveq	r3, #0
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	bf0c      	ite	eq
 8002afa:	2301      	moveq	r3, #1
 8002afc:	2300      	movne	r3, #0
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	461a      	mov	r2, r3
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U) ? ENABLE : DISABLE;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	bf14      	ite	ne
 8002b16:	2301      	movne	r3, #1
 8002b18:	2300      	moveq	r3, #0
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	bf0c      	ite	eq
 8002b30:	2301      	moveq	r3, #1
 8002b32:	2300      	movne	r3, #0
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	461a      	mov	r2, r3
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	bf14      	ite	ne
 8002b4a:	2301      	movne	r3, #1
 8002b4c:	2300      	moveq	r3, #0
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	461a      	mov	r2, r3
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	bf14      	ite	ne
 8002b64:	2301      	movne	r3, #1
 8002b66:	2300      	moveq	r3, #0
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	bf14      	ite	ne
 8002b9a:	2301      	movne	r3, #1
 8002b9c:	2300      	moveq	r3, #0
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >>17) == 0U) ? ENABLE : DISABLE;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	bf0c      	ite	eq
 8002bb4:	2301      	moveq	r3, #1
 8002bb6:	2300      	movne	r3, #0
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	461a      	mov	r2, r3
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >>19) == 0U) ? ENABLE : DISABLE;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	bf0c      	ite	eq
 8002bce:	2301      	moveq	r3, #1
 8002bd0:	2300      	movne	r3, #0
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	bf14      	ite	ne
 8002be8:	2301      	movne	r3, #1
 8002bea:	2300      	moveq	r3, #0
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	461a      	mov	r2, r3
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	bf14      	ite	ne
 8002c02:	2301      	movne	r3, #1
 8002c04:	2300      	moveq	r3, #0
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	461a      	mov	r2, r3
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	bf14      	ite	ne
 8002c1c:	2301      	movne	r3, #1
 8002c1e:	2300      	moveq	r3, #0
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	461a      	mov	r2, r3
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	bf14      	ite	ne
 8002c36:	2301      	movne	r3, #1
 8002c38:	2300      	moveq	r3, #0
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	461a      	mov	r2, r3
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	bf14      	ite	ne
 8002c5e:	2301      	movne	r3, #1
 8002c60:	2300      	moveq	r3, #0
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	461a      	mov	r2, r3
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	bf0c      	ite	eq
 8002c94:	2301      	moveq	r3, #1
 8002c96:	2300      	movne	r3, #0
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	bf14      	ite	ne
 8002cb0:	2301      	movne	r3, #1
 8002cb2:	2300      	moveq	r3, #0
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	bf14      	ite	ne
 8002ccc:	2301      	movne	r3, #1
 8002cce:	2300      	moveq	r3, #0
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U) ? ENABLE : DISABLE;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	bf14      	ite	ne
 8002ce8:	2301      	movne	r3, #1
 8002cea:	2300      	moveq	r3, #0
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	461a      	mov	r2, r3
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	0e5b      	lsrs	r3, r3, #25
 8002cfe:	f003 021f 	and.w	r2, r3, #31
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	bf14      	ite	ne
 8002d14:	2301      	movne	r3, #1
 8002d16:	2300      	moveq	r3, #0
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	f003 020f 	and.w	r2, r3, #15
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d36:	f003 0302 	and.w	r3, r3, #2
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	bf14      	ite	ne
 8002d3e:	2301      	movne	r3, #1
 8002d40:	2300      	moveq	r3, #0
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	461a      	mov	r2, r3
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	bf0c      	ite	eq
 8002d5a:	2301      	moveq	r3, #1
 8002d5c:	2300      	movne	r3, #0
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	461a      	mov	r2, r3
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d6e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d7c:	0c1b      	lsrs	r3, r3, #16
 8002d7e:	b29a      	uxth	r2, r3
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d8c:	f003 0301 	and.w	r3, r3, #1
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	bf14      	ite	ne
 8002d94:	2301      	movne	r3, #1
 8002d96:	2300      	moveq	r3, #0
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U) ? ENABLE : DISABLE;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002daa:	f003 0302 	and.w	r3, r3, #2
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	bf14      	ite	ne
 8002db2:	2301      	movne	r3, #1
 8002db4:	2300      	moveq	r3, #0
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	461a      	mov	r2, r3
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8002dc8:	f003 0272 	and.w	r2, r3, #114	; 0x72
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002dd8:	f003 0223 	and.w	r2, r3, #35	; 0x23
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002de8:	f003 0308 	and.w	r3, r3, #8
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	bf14      	ite	ne
 8002df0:	2301      	movne	r3, #1
 8002df2:	2300      	moveq	r3, #0
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	461a      	mov	r2, r3
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002e06:	f003 0310 	and.w	r3, r3, #16
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	bf14      	ite	ne
 8002e0e:	2301      	movne	r3, #1
 8002e10:	2300      	moveq	r3, #0
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	461a      	mov	r2, r3
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002e24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	bf0c      	ite	eq
 8002e2c:	2301      	moveq	r3, #1
 8002e2e:	2300      	movne	r3, #0
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	461a      	mov	r2, r3
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8002e3a:	2300      	movs	r3, #0
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	370c      	adds	r7, #12
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr

08002e48 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b082      	sub	sp, #8
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
 8002e50:	6039      	str	r1, [r7, #0]
  if(macconf == NULL)
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d101      	bne.n	8002e5c <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e00a      	b.n	8002e72 <HAL_ETH_SetMACConfig+0x2a>
  }

  if(heth->RxState == HAL_ETH_STATE_READY)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e60:	2b10      	cmp	r3, #16
 8002e62:	d105      	bne.n	8002e70 <HAL_ETH_SetMACConfig+0x28>
  {
    ETH_SetMACConfig(heth, macconf);
 8002e64:	6839      	ldr	r1, [r7, #0]
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f000 f860 	bl	8002f2c <ETH_SetMACConfig>

    return HAL_OK;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	e000      	b.n	8002e72 <HAL_ETH_SetMACConfig+0x2a>
  }
  else
  {
    return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
  }
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3708      	adds	r7, #8
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
	...

08002e7c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b084      	sub	sp, #16
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002e8c:	60fb      	str	r3, [r7, #12]

	/* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002e94:	60fb      	str	r3, [r7, #12]

	/* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002e96:	f002 f8b9 	bl	800500c <HAL_RCC_GetHCLKFreq>
 8002e9a:	60b8      	str	r0, [r7, #8]

	/* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	4a1e      	ldr	r2, [pc, #120]	; (8002f18 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d908      	bls.n	8002eb6 <HAL_ETH_SetMDIOClockRange+0x3a>
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	4a1d      	ldr	r2, [pc, #116]	; (8002f1c <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d804      	bhi.n	8002eb6 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002eb2:	60fb      	str	r3, [r7, #12]
 8002eb4:	e027      	b.n	8002f06 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	4a18      	ldr	r2, [pc, #96]	; (8002f1c <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d908      	bls.n	8002ed0 <HAL_ETH_SetMDIOClockRange+0x54>
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	4a17      	ldr	r2, [pc, #92]	; (8002f20 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d204      	bcs.n	8002ed0 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002ecc:	60fb      	str	r3, [r7, #12]
 8002ece:	e01a      	b.n	8002f06 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	4a13      	ldr	r2, [pc, #76]	; (8002f20 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d303      	bcc.n	8002ee0 <HAL_ETH_SetMDIOClockRange+0x64>
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	4a12      	ldr	r2, [pc, #72]	; (8002f24 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d911      	bls.n	8002f04 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	4a10      	ldr	r2, [pc, #64]	; (8002f24 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d908      	bls.n	8002efa <HAL_ETH_SetMDIOClockRange+0x7e>
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	4a0f      	ldr	r2, [pc, #60]	; (8002f28 <HAL_ETH_SetMDIOClockRange+0xac>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d804      	bhi.n	8002efa <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ef6:	60fb      	str	r3, [r7, #12]
 8002ef8:	e005      	b.n	8002f06 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f00:	60fb      	str	r3, [r7, #12]
 8002f02:	e000      	b.n	8002f06 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8002f04:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	68fa      	ldr	r2, [r7, #12]
 8002f0c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8002f10:	bf00      	nop
 8002f12:	3710      	adds	r7, #16
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	01312cff 	.word	0x01312cff
 8002f1c:	02160ebf 	.word	0x02160ebf
 8002f20:	03938700 	.word	0x03938700
 8002f24:	05f5e0ff 	.word	0x05f5e0ff
 8002f28:	08f0d17f 	.word	0x08f0d17f

08002f2c <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b085      	sub	sp, #20
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8002f3e:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	791b      	ldrb	r3, [r3, #4]
 8002f44:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8002f46:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	7b1b      	ldrb	r3, [r3, #12]
 8002f4c:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8002f4e:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	7b5b      	ldrb	r3, [r3, #13]
 8002f54:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002f56:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	7b9b      	ldrb	r3, [r3, #14]
 8002f5c:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8002f5e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	7bdb      	ldrb	r3, [r3, #15]
 8002f64:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002f66:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002f68:	683a      	ldr	r2, [r7, #0]
 8002f6a:	7c12      	ldrb	r2, [r2, #16]
 8002f6c:	2a00      	cmp	r2, #0
 8002f6e:	d102      	bne.n	8002f76 <ETH_SetMACConfig+0x4a>
 8002f70:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002f74:	e000      	b.n	8002f78 <ETH_SetMACConfig+0x4c>
 8002f76:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002f78:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002f7a:	683a      	ldr	r2, [r7, #0]
 8002f7c:	7c52      	ldrb	r2, [r2, #17]
 8002f7e:	2a00      	cmp	r2, #0
 8002f80:	d102      	bne.n	8002f88 <ETH_SetMACConfig+0x5c>
 8002f82:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002f86:	e000      	b.n	8002f8a <ETH_SetMACConfig+0x5e>
 8002f88:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002f8a:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	7c9b      	ldrb	r3, [r3, #18]
 8002f90:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002f92:	431a      	orrs	r2, r3
                                macconf->Speed |
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8002f98:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8002f9e:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	7f1b      	ldrb	r3, [r3, #28]
 8002fa4:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8002fa6:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	7f5b      	ldrb	r3, [r3, #29]
 8002fac:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8002fae:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8002fb0:	683a      	ldr	r2, [r7, #0]
 8002fb2:	7f92      	ldrb	r2, [r2, #30]
 8002fb4:	2a00      	cmp	r2, #0
 8002fb6:	d102      	bne.n	8002fbe <ETH_SetMACConfig+0x92>
 8002fb8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002fbc:	e000      	b.n	8002fc0 <ETH_SetMACConfig+0x94>
 8002fbe:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8002fc0:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	7fdb      	ldrb	r3, [r3, #31]
 8002fc6:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8002fc8:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8002fca:	683a      	ldr	r2, [r7, #0]
 8002fcc:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002fd0:	2a00      	cmp	r2, #0
 8002fd2:	d102      	bne.n	8002fda <ETH_SetMACConfig+0xae>
 8002fd4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002fd8:	e000      	b.n	8002fdc <ETH_SetMACConfig+0xb0>
 8002fda:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8002fdc:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8002fe2:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002fea:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8002fec:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	4b56      	ldr	r3, [pc, #344]	; (8003158 <ETH_SetMACConfig+0x22c>)
 8002ffe:	4013      	ands	r3, r2
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	6812      	ldr	r2, [r2, #0]
 8003004:	68f9      	ldr	r1, [r7, #12]
 8003006:	430b      	orrs	r3, r1
 8003008:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800300e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003016:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8003018:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003020:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8003022:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800302a:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 800302c:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 800302e:	683a      	ldr	r2, [r7, #0]
 8003030:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8003034:	2a00      	cmp	r2, #0
 8003036:	d102      	bne.n	800303e <ETH_SetMACConfig+0x112>
 8003038:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800303c:	e000      	b.n	8003040 <ETH_SetMACConfig+0x114>
 800303e:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8003040:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8003046:	4313      	orrs	r3, r2
 8003048:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	685a      	ldr	r2, [r3, #4]
 8003050:	4b42      	ldr	r3, [pc, #264]	; (800315c <ETH_SetMACConfig+0x230>)
 8003052:	4013      	ands	r3, r2
 8003054:	687a      	ldr	r2, [r7, #4]
 8003056:	6812      	ldr	r2, [r2, #0]
 8003058:	68f9      	ldr	r1, [r7, #12]
 800305a:	430b      	orrs	r3, r1
 800305c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003064:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800306a:	4313      	orrs	r3, r2
 800306c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	68da      	ldr	r2, [r3, #12]
 8003074:	4b3a      	ldr	r3, [pc, #232]	; (8003160 <ETH_SetMACConfig+0x234>)
 8003076:	4013      	ands	r3, r2
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	6812      	ldr	r2, [r2, #0]
 800307c:	68f9      	ldr	r1, [r7, #12]
 800307e:	430b      	orrs	r3, r1
 8003080:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003088:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800308e:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8003090:	683a      	ldr	r2, [r7, #0]
 8003092:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8003096:	2a00      	cmp	r2, #0
 8003098:	d101      	bne.n	800309e <ETH_SetMACConfig+0x172>
 800309a:	2280      	movs	r2, #128	; 0x80
 800309c:	e000      	b.n	80030a0 <ETH_SetMACConfig+0x174>
 800309e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80030a0:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030a6:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80030a8:	4313      	orrs	r3, r2
 80030aa:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80030b2:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80030b6:	4013      	ands	r3, r2
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	6812      	ldr	r2, [r2, #0]
 80030bc:	68f9      	ldr	r1, [r7, #12]
 80030be:	430b      	orrs	r3, r1
 80030c0:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80030c8:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80030d0:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80030d2:	4313      	orrs	r3, r2
 80030d4:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030de:	f023 0103 	bic.w	r1, r3, #3
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	68fa      	ldr	r2, [r7, #12]
 80030e8:	430a      	orrs	r2, r1
 80030ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80030f6:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	430a      	orrs	r2, r1
 8003104:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800310c:	683a      	ldr	r2, [r7, #0]
 800310e:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8003112:	2a00      	cmp	r2, #0
 8003114:	d101      	bne.n	800311a <ETH_SetMACConfig+0x1ee>
 8003116:	2240      	movs	r2, #64	; 0x40
 8003118:	e000      	b.n	800311c <ETH_SetMACConfig+0x1f0>
 800311a:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 800311c:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8003124:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8003126:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800312e:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8003130:	4313      	orrs	r3, r2
 8003132:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800313c:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	68fa      	ldr	r2, [r7, #12]
 8003146:	430a      	orrs	r2, r1
 8003148:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 800314c:	bf00      	nop
 800314e:	3714      	adds	r7, #20
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr
 8003158:	00048083 	.word	0x00048083
 800315c:	c0f88000 	.word	0xc0f88000
 8003160:	fffffef0 	.word	0xfffffef0

08003164 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003164:	b480      	push	{r7}
 8003166:	b085      	sub	sp, #20
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
 800316c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	4b38      	ldr	r3, [pc, #224]	; (800325c <ETH_SetDMAConfig+0xf8>)
 800317a:	4013      	ands	r3, r2
 800317c:	683a      	ldr	r2, [r7, #0]
 800317e:	6812      	ldr	r2, [r2, #0]
 8003180:	6879      	ldr	r1, [r7, #4]
 8003182:	6809      	ldr	r1, [r1, #0]
 8003184:	431a      	orrs	r2, r3
 8003186:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 800318a:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	791b      	ldrb	r3, [r3, #4]
 8003190:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003196:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	7b1b      	ldrb	r3, [r3, #12]
 800319c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800319e:	4313      	orrs	r3, r2
 80031a0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	f241 0304 	movw	r3, #4100	; 0x1004
 80031aa:	4413      	add	r3, r2
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	4b2c      	ldr	r3, [pc, #176]	; (8003260 <ETH_SetDMAConfig+0xfc>)
 80031b0:	4013      	ands	r3, r2
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	6811      	ldr	r1, [r2, #0]
 80031b6:	68fa      	ldr	r2, [r7, #12]
 80031b8:	431a      	orrs	r2, r3
 80031ba:	f241 0304 	movw	r3, #4100	; 0x1004
 80031be:	440b      	add	r3, r1
 80031c0:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	7b5b      	ldrb	r3, [r3, #13]
 80031c6:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80031cc:	4313      	orrs	r3, r2
 80031ce:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	4b22      	ldr	r3, [pc, #136]	; (8003264 <ETH_SetDMAConfig+0x100>)
 80031dc:	4013      	ands	r3, r2
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	6811      	ldr	r1, [r2, #0]
 80031e2:	68fa      	ldr	r2, [r7, #12]
 80031e4:	431a      	orrs	r2, r3
 80031e6:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 80031ea:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	7d1b      	ldrb	r3, [r3, #20]
 80031f4:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80031f6:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	7f5b      	ldrb	r3, [r3, #29]
 80031fc:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80031fe:	4313      	orrs	r3, r2
 8003200:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	f241 1304 	movw	r3, #4356	; 0x1104
 800320a:	4413      	add	r3, r2
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	4b16      	ldr	r3, [pc, #88]	; (8003268 <ETH_SetDMAConfig+0x104>)
 8003210:	4013      	ands	r3, r2
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	6811      	ldr	r1, [r2, #0]
 8003216:	68fa      	ldr	r2, [r7, #12]
 8003218:	431a      	orrs	r2, r3
 800321a:	f241 1304 	movw	r3, #4356	; 0x1104
 800321e:	440b      	add	r3, r1
 8003220:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	7f1b      	ldrb	r3, [r3, #28]
 8003226:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800322c:	4313      	orrs	r3, r2
 800322e:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	f241 1308 	movw	r3, #4360	; 0x1108
 8003238:	4413      	add	r3, r2
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	4b0b      	ldr	r3, [pc, #44]	; (800326c <ETH_SetDMAConfig+0x108>)
 800323e:	4013      	ands	r3, r2
 8003240:	687a      	ldr	r2, [r7, #4]
 8003242:	6811      	ldr	r1, [r2, #0]
 8003244:	68fa      	ldr	r2, [r7, #12]
 8003246:	431a      	orrs	r2, r3
 8003248:	f241 1308 	movw	r3, #4360	; 0x1108
 800324c:	440b      	add	r3, r1
 800324e:	601a      	str	r2, [r3, #0]
}
 8003250:	bf00      	nop
 8003252:	3714      	adds	r7, #20
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr
 800325c:	ffff87fd 	.word	0xffff87fd
 8003260:	ffff2ffe 	.word	0xffff2ffe
 8003264:	fffec000 	.word	0xfffec000
 8003268:	ffc0efef 	.word	0xffc0efef
 800326c:	7fc0ffff 	.word	0x7fc0ffff

08003270 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b0a4      	sub	sp, #144	; 0x90
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8003278:	2301      	movs	r3, #1
 800327a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800327e:	2300      	movs	r3, #0
 8003280:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8003282:	2300      	movs	r3, #0
 8003284:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003288:	2300      	movs	r3, #0
 800328a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800328e:	2301      	movs	r3, #1
 8003290:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8003294:	2301      	movs	r3, #1
 8003296:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800329a:	2301      	movs	r3, #1
 800329c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80032a0:	2300      	movs	r3, #0
 80032a2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80032a6:	2301      	movs	r3, #1
 80032a8:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80032ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80032b0:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80032b2:	2300      	movs	r3, #0
 80032b4:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80032b8:	2300      	movs	r3, #0
 80032ba:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80032bc:	2300      	movs	r3, #0
 80032be:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80032c2:	2300      	movs	r3, #0
 80032c4:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80032c8:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80032cc:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80032ce:	2300      	movs	r3, #0
 80032d0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80032d4:	2300      	movs	r3, #0
 80032d6:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80032d8:	2301      	movs	r3, #1
 80032da:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80032de:	2300      	movs	r3, #0
 80032e0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80032e4:	2300      	movs	r3, #0
 80032e6:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80032ea:	2300      	movs	r3, #0
 80032ec:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 80032ee:	2300      	movs	r3, #0
 80032f0:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80032f2:	2300      	movs	r3, #0
 80032f4:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80032f6:	2300      	movs	r3, #0
 80032f8:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80032fc:	2300      	movs	r3, #0
 80032fe:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8003302:	2301      	movs	r3, #1
 8003304:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8003308:	2320      	movs	r3, #32
 800330a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800330e:	2301      	movs	r3, #1
 8003310:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8003314:	2300      	movs	r3, #0
 8003316:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800331a:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800331e:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003320:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003324:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8003326:	2300      	movs	r3, #0
 8003328:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 800332c:	2302      	movs	r3, #2
 800332e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003332:	2300      	movs	r3, #0
 8003334:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003338:	2300      	movs	r3, #0
 800333a:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800333e:	2300      	movs	r3, #0
 8003340:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8003344:	2301      	movs	r3, #1
 8003346:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800334a:	2300      	movs	r3, #0
 800334c:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800334e:	2301      	movs	r3, #1
 8003350:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003354:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003358:	4619      	mov	r1, r3
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f7ff fde6 	bl	8002f2c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003360:	2301      	movs	r3, #1
 8003362:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003364:	2301      	movs	r3, #1
 8003366:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8003368:	2300      	movs	r3, #0
 800336a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 800336c:	2300      	movs	r3, #0
 800336e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8003372:	2300      	movs	r3, #0
 8003374:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8003376:	2300      	movs	r3, #0
 8003378:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800337a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800337e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8003380:	2300      	movs	r3, #0
 8003382:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003384:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003388:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800338a:	2300      	movs	r3, #0
 800338c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8003390:	f44f 7306 	mov.w	r3, #536	; 0x218
 8003394:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003396:	f107 0308 	add.w	r3, r7, #8
 800339a:	4619      	mov	r1, r3
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	f7ff fee1 	bl	8003164 <ETH_SetDMAConfig>
}
 80033a2:	bf00      	nop
 80033a4:	3790      	adds	r7, #144	; 0x90
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
	...

080033ac <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b084      	sub	sp, #16
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80033bc:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80033c4:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80033c6:	f001 fe21 	bl	800500c <HAL_RCC_GetHCLKFreq>
 80033ca:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	4a1e      	ldr	r2, [pc, #120]	; (8003448 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d908      	bls.n	80033e6 <ETH_MAC_MDIO_ClkConfig+0x3a>
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	4a1d      	ldr	r2, [pc, #116]	; (800344c <ETH_MAC_MDIO_ClkConfig+0xa0>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d804      	bhi.n	80033e6 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80033e2:	60fb      	str	r3, [r7, #12]
 80033e4:	e027      	b.n	8003436 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	4a18      	ldr	r2, [pc, #96]	; (800344c <ETH_MAC_MDIO_ClkConfig+0xa0>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d908      	bls.n	8003400 <ETH_MAC_MDIO_ClkConfig+0x54>
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	4a17      	ldr	r2, [pc, #92]	; (8003450 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d204      	bcs.n	8003400 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80033fc:	60fb      	str	r3, [r7, #12]
 80033fe:	e01a      	b.n	8003436 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	4a13      	ldr	r2, [pc, #76]	; (8003450 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d303      	bcc.n	8003410 <ETH_MAC_MDIO_ClkConfig+0x64>
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	4a12      	ldr	r2, [pc, #72]	; (8003454 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d911      	bls.n	8003434 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	4a10      	ldr	r2, [pc, #64]	; (8003454 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d908      	bls.n	800342a <ETH_MAC_MDIO_ClkConfig+0x7e>
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	4a0f      	ldr	r2, [pc, #60]	; (8003458 <ETH_MAC_MDIO_ClkConfig+0xac>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d804      	bhi.n	800342a <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003426:	60fb      	str	r3, [r7, #12]
 8003428:	e005      	b.n	8003436 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003430:	60fb      	str	r3, [r7, #12]
 8003432:	e000      	b.n	8003436 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8003434:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	68fa      	ldr	r2, [r7, #12]
 800343c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8003440:	bf00      	nop
 8003442:	3710      	adds	r7, #16
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}
 8003448:	01312cff 	.word	0x01312cff
 800344c:	02160ebf 	.word	0x02160ebf
 8003450:	03938700 	.word	0x03938700
 8003454:	05f5e0ff 	.word	0x05f5e0ff
 8003458:	08f0d17f 	.word	0x08f0d17f

0800345c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800345c:	b480      	push	{r7}
 800345e:	b085      	sub	sp, #20
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003464:	2300      	movs	r3, #0
 8003466:	60fb      	str	r3, [r7, #12]
 8003468:	e01d      	b.n	80034a6 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	68d9      	ldr	r1, [r3, #12]
 800346e:	68fa      	ldr	r2, [r7, #12]
 8003470:	4613      	mov	r3, r2
 8003472:	005b      	lsls	r3, r3, #1
 8003474:	4413      	add	r3, r2
 8003476:	00db      	lsls	r3, r3, #3
 8003478:	440b      	add	r3, r1
 800347a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	2200      	movs	r2, #0
 8003480:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	2200      	movs	r2, #0
 8003486:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	2200      	movs	r2, #0
 800348c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	2200      	movs	r2, #0
 8003492:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003494:	68b9      	ldr	r1, [r7, #8]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	68fa      	ldr	r2, [r7, #12]
 800349a:	3206      	adds	r2, #6
 800349c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	3301      	adds	r3, #1
 80034a4:	60fb      	str	r3, [r7, #12]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2b03      	cmp	r3, #3
 80034aa:	d9de      	bls.n	800346a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2200      	movs	r2, #0
 80034b0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	f241 132c 	movw	r3, #4396	; 0x112c
 80034ba:	4413      	add	r3, r2
 80034bc:	2203      	movs	r2, #3
 80034be:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	68d9      	ldr	r1, [r3, #12]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	f241 1314 	movw	r3, #4372	; 0x1114
 80034cc:	4413      	add	r3, r2
 80034ce:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	68da      	ldr	r2, [r3, #12]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 80034dc:	601a      	str	r2, [r3, #0]
}
 80034de:	bf00      	nop
 80034e0:	3714      	adds	r7, #20
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr

080034ea <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80034ea:	b480      	push	{r7}
 80034ec:	b085      	sub	sp, #20
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80034f2:	2300      	movs	r3, #0
 80034f4:	60fb      	str	r3, [r7, #12]
 80034f6:	e024      	b.n	8003542 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6919      	ldr	r1, [r3, #16]
 80034fc:	68fa      	ldr	r2, [r7, #12]
 80034fe:	4613      	mov	r3, r2
 8003500:	005b      	lsls	r3, r3, #1
 8003502:	4413      	add	r3, r2
 8003504:	00db      	lsls	r3, r3, #3
 8003506:	440b      	add	r3, r1
 8003508:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	2200      	movs	r2, #0
 800350e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	2200      	movs	r2, #0
 8003514:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	2200      	movs	r2, #0
 800351a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	2200      	movs	r2, #0
 8003520:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	2200      	movs	r2, #0
 8003526:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	2200      	movs	r2, #0
 800352c:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800352e:	68ba      	ldr	r2, [r7, #8]
 8003530:	6879      	ldr	r1, [r7, #4]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	3310      	adds	r3, #16
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	440b      	add	r3, r1
 800353a:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	3301      	adds	r3, #1
 8003540:	60fb      	str	r3, [r7, #12]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2b03      	cmp	r3, #3
 8003546:	d9d7      	bls.n	80034f8 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2200      	movs	r2, #0
 800354c:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2200      	movs	r2, #0
 8003552:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2200      	movs	r2, #0
 800355e:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2200      	movs	r2, #0
 8003564:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	f241 1330 	movw	r3, #4400	; 0x1130
 800356e:	4413      	add	r3, r2
 8003570:	2203      	movs	r2, #3
 8003572:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6919      	ldr	r1, [r3, #16]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	f241 131c 	movw	r3, #4380	; 0x111c
 8003580:	4413      	add	r3, r2
 8003582:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	691b      	ldr	r3, [r3, #16]
 8003588:	f103 0148 	add.w	r1, r3, #72	; 0x48
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	f241 1328 	movw	r3, #4392	; 0x1128
 8003594:	4413      	add	r3, r2
 8003596:	6019      	str	r1, [r3, #0]
}
 8003598:	bf00      	nop
 800359a:	3714      	adds	r7, #20
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr

080035a4 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b08d      	sub	sp, #52	; 0x34
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	60f8      	str	r0, [r7, #12]
 80035ac:	60b9      	str	r1, [r7, #8]
 80035ae:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	3318      	adds	r3, #24
 80035b4:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	691b      	ldr	r3, [r3, #16]
 80035ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	691b      	ldr	r3, [r3, #16]
 80035c0:	613b      	str	r3, [r7, #16]
  uint32_t descnbr = 0, idx;
 80035c2:	2300      	movs	r3, #0
 80035c4:	62bb      	str	r3, [r7, #40]	; 0x28
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035ce:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 80035d6:	2300      	movs	r3, #0
 80035d8:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN) || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80035da:	6a3b      	ldr	r3, [r7, #32]
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80035e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80035e6:	d007      	beq.n	80035f8 <ETH_Prepare_Tx_Descriptors+0x54>
 80035e8:	697a      	ldr	r2, [r7, #20]
 80035ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035ec:	3304      	adds	r3, #4
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	4413      	add	r3, r2
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d001      	beq.n	80035fc <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80035f8:	2302      	movs	r3, #2
 80035fa:	e24a      	b.n	8003a92 <ETH_Prepare_Tx_Descriptors+0x4ee>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 0304 	and.w	r3, r3, #4
 8003604:	2b00      	cmp	r3, #0
 8003606:	d044      	beq.n	8003692 <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8003608:	6a3b      	ldr	r3, [r7, #32]
 800360a:	68da      	ldr	r2, [r3, #12]
 800360c:	4b72      	ldr	r3, [pc, #456]	; (80037d8 <ETH_Prepare_Tx_Descriptors+0x234>)
 800360e:	4013      	ands	r3, r2
 8003610:	68ba      	ldr	r2, [r7, #8]
 8003612:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003614:	431a      	orrs	r2, r3
 8003616:	6a3b      	ldr	r3, [r7, #32]
 8003618:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 800361a:	6a3b      	ldr	r3, [r7, #32]
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003622:	6a3b      	ldr	r3, [r7, #32]
 8003624:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003634:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != 0U)
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 0308 	and.w	r3, r3, #8
 800363e:	2b00      	cmp	r3, #0
 8003640:	d027      	beq.n	8003692 <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8003642:	6a3b      	ldr	r3, [r7, #32]
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	b29a      	uxth	r2, r3
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800364c:	041b      	lsls	r3, r3, #16
 800364e:	431a      	orrs	r2, r3
 8003650:	6a3b      	ldr	r3, [r7, #32]
 8003652:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8003654:	6a3b      	ldr	r3, [r7, #32]
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800365c:	6a3b      	ldr	r3, [r7, #32]
 800365e:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8003660:	6a3b      	ldr	r3, [r7, #32]
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800366c:	431a      	orrs	r2, r3
 800366e:	6a3b      	ldr	r3, [r7, #32]
 8003670:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003680:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003690:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 0310 	and.w	r3, r3, #16
 800369a:	2b00      	cmp	r3, #0
 800369c:	d00e      	beq.n	80036bc <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 800369e:	6a3b      	ldr	r3, [r7, #32]
 80036a0:	689a      	ldr	r2, [r3, #8]
 80036a2:	4b4e      	ldr	r3, [pc, #312]	; (80037dc <ETH_Prepare_Tx_Descriptors+0x238>)
 80036a4:	4013      	ands	r3, r2
 80036a6:	68ba      	ldr	r2, [r7, #8]
 80036a8:	6992      	ldr	r2, [r2, #24]
 80036aa:	431a      	orrs	r2, r3
 80036ac:	6a3b      	ldr	r3, [r7, #32]
 80036ae:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 80036b0:	6a3b      	ldr	r3, [r7, #32]
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80036b8:	6a3b      	ldr	r3, [r7, #32]
 80036ba:	60da      	str	r2, [r3, #12]
  }

  if((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)|| (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U))
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 0304 	and.w	r3, r3, #4
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d105      	bne.n	80036d4 <ETH_Prepare_Tx_Descriptors+0x130>
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 0310 	and.w	r3, r3, #16
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d030      	beq.n	8003736 <ETH_Prepare_Tx_Descriptors+0x192>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 80036d4:	6a3b      	ldr	r3, [r7, #32]
 80036d6:	68db      	ldr	r3, [r3, #12]
 80036d8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80036dc:	6a3b      	ldr	r3, [r7, #32]
 80036de:	60da      	str	r2, [r3, #12]
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 80036e0:	6a3b      	ldr	r3, [r7, #32]
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80036e8:	6a3b      	ldr	r3, [r7, #32]
 80036ea:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80036ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ee:	3301      	adds	r3, #1
 80036f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036f4:	2b03      	cmp	r3, #3
 80036f6:	d902      	bls.n	80036fe <ETH_Prepare_Tx_Descriptors+0x15a>
 80036f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036fa:	3b04      	subs	r3, #4
 80036fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003702:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003706:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 8003708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800370a:	3301      	adds	r3, #1
 800370c:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 800370e:	6a3b      	ldr	r3, [r7, #32]
 8003710:	68db      	ldr	r3, [r3, #12]
 8003712:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003716:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800371a:	d10c      	bne.n	8003736 <ETH_Prepare_Tx_Descriptors+0x192>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	693a      	ldr	r2, [r7, #16]
 8003720:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003724:	623b      	str	r3, [r7, #32]
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8003726:	6a3b      	ldr	r3, [r7, #32]
 8003728:	68db      	ldr	r3, [r3, #12]
 800372a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800372e:	6a3b      	ldr	r3, [r7, #32]
 8003730:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 8003732:	2302      	movs	r3, #2
 8003734:	e1ad      	b.n	8003a92 <ETH_Prepare_Tx_Descriptors+0x4ee>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 8003736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003738:	3301      	adds	r3, #1
 800373a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	461a      	mov	r2, r3
 8003742:	6a3b      	ldr	r3, [r7, #32]
 8003744:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8003746:	6a3b      	ldr	r3, [r7, #32]
 8003748:	689a      	ldr	r2, [r3, #8]
 800374a:	4b24      	ldr	r3, [pc, #144]	; (80037dc <ETH_Prepare_Tx_Descriptors+0x238>)
 800374c:	4013      	ands	r3, r2
 800374e:	69fa      	ldr	r2, [r7, #28]
 8003750:	6852      	ldr	r2, [r2, #4]
 8003752:	431a      	orrs	r2, r3
 8003754:	6a3b      	ldr	r3, [r7, #32]
 8003756:	609a      	str	r2, [r3, #8]

  if(txbuffer->next != NULL)
 8003758:	69fb      	ldr	r3, [r7, #28]
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d012      	beq.n	8003786 <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    txbuffer = txbuffer->next;
 8003760:	69fb      	ldr	r3, [r7, #28]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8003766:	69fb      	ldr	r3, [r7, #28]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	461a      	mov	r2, r3
 800376c:	6a3b      	ldr	r3, [r7, #32]
 800376e:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8003770:	6a3b      	ldr	r3, [r7, #32]
 8003772:	689a      	ldr	r2, [r3, #8]
 8003774:	4b1a      	ldr	r3, [pc, #104]	; (80037e0 <ETH_Prepare_Tx_Descriptors+0x23c>)
 8003776:	4013      	ands	r3, r2
 8003778:	69fa      	ldr	r2, [r7, #28]
 800377a:	6852      	ldr	r2, [r2, #4]
 800377c:	0412      	lsls	r2, r2, #16
 800377e:	431a      	orrs	r2, r3
 8003780:	6a3b      	ldr	r3, [r7, #32]
 8003782:	609a      	str	r2, [r3, #8]
 8003784:	e008      	b.n	8003798 <ETH_Prepare_Tx_Descriptors+0x1f4>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003786:	6a3b      	ldr	r3, [r7, #32]
 8003788:	2200      	movs	r2, #0
 800378a:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 800378c:	6a3b      	ldr	r3, [r7, #32]
 800378e:	689a      	ldr	r2, [r3, #8]
 8003790:	4b13      	ldr	r3, [pc, #76]	; (80037e0 <ETH_Prepare_Tx_Descriptors+0x23c>)
 8003792:	4013      	ands	r3, r2
 8003794:	6a3a      	ldr	r2, [r7, #32]
 8003796:	6093      	str	r3, [r2, #8]
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0310 	and.w	r3, r3, #16
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d021      	beq.n	80037e8 <ETH_Prepare_Tx_Descriptors+0x244>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 80037a4:	6a3b      	ldr	r3, [r7, #32]
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	6a1b      	ldr	r3, [r3, #32]
 80037b0:	04db      	lsls	r3, r3, #19
 80037b2:	431a      	orrs	r2, r3
 80037b4:	6a3b      	ldr	r3, [r7, #32]
 80037b6:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 80037b8:	6a3b      	ldr	r3, [r7, #32]
 80037ba:	68da      	ldr	r2, [r3, #12]
 80037bc:	4b09      	ldr	r3, [pc, #36]	; (80037e4 <ETH_Prepare_Tx_Descriptors+0x240>)
 80037be:	4013      	ands	r3, r2
 80037c0:	68ba      	ldr	r2, [r7, #8]
 80037c2:	69d2      	ldr	r2, [r2, #28]
 80037c4:	431a      	orrs	r2, r3
 80037c6:	6a3b      	ldr	r3, [r7, #32]
 80037c8:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 80037ca:	6a3b      	ldr	r3, [r7, #32]
 80037cc:	68db      	ldr	r3, [r3, #12]
 80037ce:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80037d2:	6a3b      	ldr	r3, [r7, #32]
 80037d4:	60da      	str	r2, [r3, #12]
 80037d6:	e02e      	b.n	8003836 <ETH_Prepare_Tx_Descriptors+0x292>
 80037d8:	ffff0000 	.word	0xffff0000
 80037dc:	ffffc000 	.word	0xffffc000
 80037e0:	c000ffff 	.word	0xc000ffff
 80037e4:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 80037e8:	6a3b      	ldr	r3, [r7, #32]
 80037ea:	68da      	ldr	r2, [r3, #12]
 80037ec:	4b93      	ldr	r3, [pc, #588]	; (8003a3c <ETH_Prepare_Tx_Descriptors+0x498>)
 80037ee:	4013      	ands	r3, r2
 80037f0:	68ba      	ldr	r2, [r7, #8]
 80037f2:	6852      	ldr	r2, [r2, #4]
 80037f4:	431a      	orrs	r2, r3
 80037f6:	6a3b      	ldr	r3, [r7, #32]
 80037f8:	60da      	str	r2, [r3, #12]

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 0301 	and.w	r3, r3, #1
 8003802:	2b00      	cmp	r3, #0
 8003804:	d008      	beq.n	8003818 <ETH_Prepare_Tx_Descriptors+0x274>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8003806:	6a3b      	ldr	r3, [r7, #32]
 8003808:	68db      	ldr	r3, [r3, #12]
 800380a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	695b      	ldr	r3, [r3, #20]
 8003812:	431a      	orrs	r2, r3
 8003814:	6a3b      	ldr	r3, [r7, #32]
 8003816:	60da      	str	r2, [r3, #12]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0320 	and.w	r3, r3, #32
 8003820:	2b00      	cmp	r3, #0
 8003822:	d008      	beq.n	8003836 <ETH_Prepare_Tx_Descriptors+0x292>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8003824:	6a3b      	ldr	r3, [r7, #32]
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	691b      	ldr	r3, [r3, #16]
 8003830:	431a      	orrs	r2, r3
 8003832:	6a3b      	ldr	r3, [r7, #32]
 8003834:	60da      	str	r2, [r3, #12]
    }
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0304 	and.w	r3, r3, #4
 800383e:	2b00      	cmp	r3, #0
 8003840:	d008      	beq.n	8003854 <ETH_Prepare_Tx_Descriptors+0x2b0>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8003842:	6a3b      	ldr	r3, [r7, #32]
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800384e:	431a      	orrs	r2, r3
 8003850:	6a3b      	ldr	r3, [r7, #32]
 8003852:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8003854:	6a3b      	ldr	r3, [r7, #32]
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800385c:	6a3b      	ldr	r3, [r7, #32]
 800385e:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8003860:	6a3b      	ldr	r3, [r7, #32]
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003868:	6a3b      	ldr	r3, [r7, #32]
 800386a:	60da      	str	r2, [r3, #12]
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 800386c:	6a3b      	ldr	r3, [r7, #32]
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003874:	6a3b      	ldr	r3, [r7, #32]
 8003876:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != 0U)
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 0302 	and.w	r3, r3, #2
 8003880:	2b00      	cmp	r3, #0
 8003882:	f000 80cb 	beq.w	8003a1c <ETH_Prepare_Tx_Descriptors+0x478>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8003886:	6a3b      	ldr	r3, [r7, #32]
 8003888:	68db      	ldr	r3, [r3, #12]
 800388a:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	68db      	ldr	r3, [r3, #12]
 8003892:	431a      	orrs	r2, r3
 8003894:	6a3b      	ldr	r3, [r7, #32]
 8003896:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8003898:	e0c0      	b.n	8003a1c <ETH_Prepare_Tx_Descriptors+0x478>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 800389a:	6a3b      	ldr	r3, [r7, #32]
 800389c:	68db      	ldr	r3, [r3, #12]
 800389e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80038a2:	6a3b      	ldr	r3, [r7, #32]
 80038a4:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80038a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038a8:	3301      	adds	r3, #1
 80038aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038ae:	2b03      	cmp	r3, #3
 80038b0:	d902      	bls.n	80038b8 <ETH_Prepare_Tx_Descriptors+0x314>
 80038b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038b4:	3b04      	subs	r3, #4
 80038b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038c0:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 80038c2:	6a3b      	ldr	r3, [r7, #32]
 80038c4:	68db      	ldr	r3, [r3, #12]
 80038c6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80038ca:	6a3b      	ldr	r3, [r7, #32]
 80038cc:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN) || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80038ce:	6a3b      	ldr	r3, [r7, #32]
 80038d0:	68db      	ldr	r3, [r3, #12]
 80038d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80038d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80038da:	d007      	beq.n	80038ec <ETH_Prepare_Tx_Descriptors+0x348>
 80038dc:	697a      	ldr	r2, [r7, #20]
 80038de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038e0:	3304      	adds	r3, #4
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	4413      	add	r3, r2
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d026      	beq.n	800393a <ETH_Prepare_Tx_Descriptors+0x396>
    {
      descidx = firstdescidx;
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038f8:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for(idx = 0; idx < descnbr; idx ++)
 80038fa:	2300      	movs	r3, #0
 80038fc:	627b      	str	r3, [r7, #36]	; 0x24
 80038fe:	e016      	b.n	800392e <ETH_Prepare_Tx_Descriptors+0x38a>
      {
        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8003900:	6a3b      	ldr	r3, [r7, #32]
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003908:	6a3b      	ldr	r3, [r7, #32]
 800390a:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 800390c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800390e:	3301      	adds	r3, #1
 8003910:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003914:	2b03      	cmp	r3, #3
 8003916:	d902      	bls.n	800391e <ETH_Prepare_Tx_Descriptors+0x37a>
 8003918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800391a:	3b04      	subs	r3, #4
 800391c:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003922:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003926:	623b      	str	r3, [r7, #32]
      for(idx = 0; idx < descnbr; idx ++)
 8003928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392a:	3301      	adds	r3, #1
 800392c:	627b      	str	r3, [r7, #36]	; 0x24
 800392e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003932:	429a      	cmp	r2, r3
 8003934:	d3e4      	bcc.n	8003900 <ETH_Prepare_Tx_Descriptors+0x35c>
      }

      return HAL_ETH_ERROR_BUSY;
 8003936:	2302      	movs	r3, #2
 8003938:	e0ab      	b.n	8003a92 <ETH_Prepare_Tx_Descriptors+0x4ee>
    }

    descnbr += 1U;
 800393a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800393c:	3301      	adds	r3, #1
 800393e:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8003940:	69fb      	ldr	r3, [r7, #28]
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8003946:	69fb      	ldr	r3, [r7, #28]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	461a      	mov	r2, r3
 800394c:	6a3b      	ldr	r3, [r7, #32]
 800394e:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8003950:	6a3b      	ldr	r3, [r7, #32]
 8003952:	689a      	ldr	r2, [r3, #8]
 8003954:	4b3a      	ldr	r3, [pc, #232]	; (8003a40 <ETH_Prepare_Tx_Descriptors+0x49c>)
 8003956:	4013      	ands	r3, r2
 8003958:	69fa      	ldr	r2, [r7, #28]
 800395a:	6852      	ldr	r2, [r2, #4]
 800395c:	431a      	orrs	r2, r3
 800395e:	6a3b      	ldr	r3, [r7, #32]
 8003960:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d012      	beq.n	8003990 <ETH_Prepare_Tx_Descriptors+0x3ec>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	461a      	mov	r2, r3
 8003976:	6a3b      	ldr	r3, [r7, #32]
 8003978:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 800397a:	6a3b      	ldr	r3, [r7, #32]
 800397c:	689a      	ldr	r2, [r3, #8]
 800397e:	4b31      	ldr	r3, [pc, #196]	; (8003a44 <ETH_Prepare_Tx_Descriptors+0x4a0>)
 8003980:	4013      	ands	r3, r2
 8003982:	69fa      	ldr	r2, [r7, #28]
 8003984:	6852      	ldr	r2, [r2, #4]
 8003986:	0412      	lsls	r2, r2, #16
 8003988:	431a      	orrs	r2, r3
 800398a:	6a3b      	ldr	r3, [r7, #32]
 800398c:	609a      	str	r2, [r3, #8]
 800398e:	e008      	b.n	80039a2 <ETH_Prepare_Tx_Descriptors+0x3fe>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003990:	6a3b      	ldr	r3, [r7, #32]
 8003992:	2200      	movs	r2, #0
 8003994:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8003996:	6a3b      	ldr	r3, [r7, #32]
 8003998:	689a      	ldr	r2, [r3, #8]
 800399a:	4b2a      	ldr	r3, [pc, #168]	; (8003a44 <ETH_Prepare_Tx_Descriptors+0x4a0>)
 800399c:	4013      	ands	r3, r2
 800399e:	6a3a      	ldr	r2, [r7, #32]
 80039a0:	6093      	str	r3, [r2, #8]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0310 	and.w	r3, r3, #16
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d00f      	beq.n	80039ce <ETH_Prepare_Tx_Descriptors+0x42a>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 80039ae:	6a3b      	ldr	r3, [r7, #32]
 80039b0:	68da      	ldr	r2, [r3, #12]
 80039b2:	4b25      	ldr	r3, [pc, #148]	; (8003a48 <ETH_Prepare_Tx_Descriptors+0x4a4>)
 80039b4:	4013      	ands	r3, r2
 80039b6:	68ba      	ldr	r2, [r7, #8]
 80039b8:	69d2      	ldr	r2, [r2, #28]
 80039ba:	431a      	orrs	r2, r3
 80039bc:	6a3b      	ldr	r3, [r7, #32]
 80039be:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 80039c0:	6a3b      	ldr	r3, [r7, #32]
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80039c8:	6a3b      	ldr	r3, [r7, #32]
 80039ca:	60da      	str	r2, [r3, #12]
 80039cc:	e017      	b.n	80039fe <ETH_Prepare_Tx_Descriptors+0x45a>
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 80039ce:	6a3b      	ldr	r3, [r7, #32]
 80039d0:	68da      	ldr	r2, [r3, #12]
 80039d2:	4b1a      	ldr	r3, [pc, #104]	; (8003a3c <ETH_Prepare_Tx_Descriptors+0x498>)
 80039d4:	4013      	ands	r3, r2
 80039d6:	68ba      	ldr	r2, [r7, #8]
 80039d8:	6852      	ldr	r2, [r2, #4]
 80039da:	431a      	orrs	r2, r3
 80039dc:	6a3b      	ldr	r3, [r7, #32]
 80039de:	60da      	str	r2, [r3, #12]

      if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 0301 	and.w	r3, r3, #1
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d008      	beq.n	80039fe <ETH_Prepare_Tx_Descriptors+0x45a>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 80039ec:	6a3b      	ldr	r3, [r7, #32]
 80039ee:	68db      	ldr	r3, [r3, #12]
 80039f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	695b      	ldr	r3, [r3, #20]
 80039f8:	431a      	orrs	r2, r3
 80039fa:	6a3b      	ldr	r3, [r7, #32]
 80039fc:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 80039fe:	69bb      	ldr	r3, [r7, #24]
 8003a00:	3301      	adds	r3, #1
 8003a02:	61bb      	str	r3, [r7, #24]
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8003a04:	6a3b      	ldr	r3, [r7, #32]
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003a0c:	6a3b      	ldr	r3, [r7, #32]
 8003a0e:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8003a10:	6a3b      	ldr	r3, [r7, #32]
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003a18:	6a3b      	ldr	r3, [r7, #32]
 8003a1a:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	f47f af3a 	bne.w	800389a <ETH_Prepare_Tx_Descriptors+0x2f6>
  }

  if(ItMode != ((uint32_t)RESET))
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d00f      	beq.n	8003a4c <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8003a2c:	6a3b      	ldr	r3, [r7, #32]
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003a34:	6a3b      	ldr	r3, [r7, #32]
 8003a36:	609a      	str	r2, [r3, #8]
 8003a38:	e00e      	b.n	8003a58 <ETH_Prepare_Tx_Descriptors+0x4b4>
 8003a3a:	bf00      	nop
 8003a3c:	ffff8000 	.word	0xffff8000
 8003a40:	ffffc000 	.word	0xffffc000
 8003a44:	c000ffff 	.word	0xc000ffff
 8003a48:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8003a4c:	6a3b      	ldr	r3, [r7, #32]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003a54:	6a3b      	ldr	r3, [r7, #32]
 8003a56:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8003a58:	6a3b      	ldr	r3, [r7, #32]
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003a60:	6a3b      	ldr	r3, [r7, #32]
 8003a62:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a68:	6979      	ldr	r1, [r7, #20]
 8003a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a6c:	3304      	adds	r3, #4
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	440b      	add	r3, r1
 8003a72:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a78:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8003a7a:	b672      	cpsid	i
}
 8003a7c:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a82:	69bb      	ldr	r3, [r7, #24]
 8003a84:	4413      	add	r3, r2
 8003a86:	1c5a      	adds	r2, r3, #1
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8003a8c:	b662      	cpsie	i
}
 8003a8e:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8003a90:	2300      	movs	r3, #0
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3734      	adds	r7, #52	; 0x34
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr
 8003a9e:	bf00      	nop

08003aa0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b089      	sub	sp, #36	; 0x24
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003aae:	4b89      	ldr	r3, [pc, #548]	; (8003cd4 <HAL_GPIO_Init+0x234>)
 8003ab0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003ab2:	e194      	b.n	8003dde <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	2101      	movs	r1, #1
 8003aba:	69fb      	ldr	r3, [r7, #28]
 8003abc:	fa01 f303 	lsl.w	r3, r1, r3
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	f000 8186 	beq.w	8003dd8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d00b      	beq.n	8003aec <HAL_GPIO_Init+0x4c>
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	2b02      	cmp	r3, #2
 8003ada:	d007      	beq.n	8003aec <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003ae0:	2b11      	cmp	r3, #17
 8003ae2:	d003      	beq.n	8003aec <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	2b12      	cmp	r3, #18
 8003aea:	d130      	bne.n	8003b4e <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003af2:	69fb      	ldr	r3, [r7, #28]
 8003af4:	005b      	lsls	r3, r3, #1
 8003af6:	2203      	movs	r2, #3
 8003af8:	fa02 f303 	lsl.w	r3, r2, r3
 8003afc:	43db      	mvns	r3, r3
 8003afe:	69ba      	ldr	r2, [r7, #24]
 8003b00:	4013      	ands	r3, r2
 8003b02:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	68da      	ldr	r2, [r3, #12]
 8003b08:	69fb      	ldr	r3, [r7, #28]
 8003b0a:	005b      	lsls	r3, r3, #1
 8003b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b10:	69ba      	ldr	r2, [r7, #24]
 8003b12:	4313      	orrs	r3, r2
 8003b14:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	69ba      	ldr	r2, [r7, #24]
 8003b1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003b22:	2201      	movs	r2, #1
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	fa02 f303 	lsl.w	r3, r2, r3
 8003b2a:	43db      	mvns	r3, r3
 8003b2c:	69ba      	ldr	r2, [r7, #24]
 8003b2e:	4013      	ands	r3, r2
 8003b30:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	091b      	lsrs	r3, r3, #4
 8003b38:	f003 0201 	and.w	r2, r3, #1
 8003b3c:	69fb      	ldr	r3, [r7, #28]
 8003b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b42:	69ba      	ldr	r2, [r7, #24]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	69ba      	ldr	r2, [r7, #24]
 8003b4c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003b54:	69fb      	ldr	r3, [r7, #28]
 8003b56:	005b      	lsls	r3, r3, #1
 8003b58:	2203      	movs	r2, #3
 8003b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b5e:	43db      	mvns	r3, r3
 8003b60:	69ba      	ldr	r2, [r7, #24]
 8003b62:	4013      	ands	r3, r2
 8003b64:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	689a      	ldr	r2, [r3, #8]
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	005b      	lsls	r3, r3, #1
 8003b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b72:	69ba      	ldr	r2, [r7, #24]
 8003b74:	4313      	orrs	r3, r2
 8003b76:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	69ba      	ldr	r2, [r7, #24]
 8003b7c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	2b02      	cmp	r3, #2
 8003b84:	d003      	beq.n	8003b8e <HAL_GPIO_Init+0xee>
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	2b12      	cmp	r3, #18
 8003b8c:	d123      	bne.n	8003bd6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	08da      	lsrs	r2, r3, #3
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	3208      	adds	r2, #8
 8003b96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003b9c:	69fb      	ldr	r3, [r7, #28]
 8003b9e:	f003 0307 	and.w	r3, r3, #7
 8003ba2:	009b      	lsls	r3, r3, #2
 8003ba4:	220f      	movs	r2, #15
 8003ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8003baa:	43db      	mvns	r3, r3
 8003bac:	69ba      	ldr	r2, [r7, #24]
 8003bae:	4013      	ands	r3, r2
 8003bb0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	691a      	ldr	r2, [r3, #16]
 8003bb6:	69fb      	ldr	r3, [r7, #28]
 8003bb8:	f003 0307 	and.w	r3, r3, #7
 8003bbc:	009b      	lsls	r3, r3, #2
 8003bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc2:	69ba      	ldr	r2, [r7, #24]
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003bc8:	69fb      	ldr	r3, [r7, #28]
 8003bca:	08da      	lsrs	r2, r3, #3
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	3208      	adds	r2, #8
 8003bd0:	69b9      	ldr	r1, [r7, #24]
 8003bd2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	005b      	lsls	r3, r3, #1
 8003be0:	2203      	movs	r2, #3
 8003be2:	fa02 f303 	lsl.w	r3, r2, r3
 8003be6:	43db      	mvns	r3, r3
 8003be8:	69ba      	ldr	r2, [r7, #24]
 8003bea:	4013      	ands	r3, r2
 8003bec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	f003 0203 	and.w	r2, r3, #3
 8003bf6:	69fb      	ldr	r3, [r7, #28]
 8003bf8:	005b      	lsls	r3, r3, #1
 8003bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8003bfe:	69ba      	ldr	r2, [r7, #24]
 8003c00:	4313      	orrs	r3, r2
 8003c02:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	69ba      	ldr	r2, [r7, #24]
 8003c08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	f000 80e0 	beq.w	8003dd8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c18:	4b2f      	ldr	r3, [pc, #188]	; (8003cd8 <HAL_GPIO_Init+0x238>)
 8003c1a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003c1e:	4a2e      	ldr	r2, [pc, #184]	; (8003cd8 <HAL_GPIO_Init+0x238>)
 8003c20:	f043 0302 	orr.w	r3, r3, #2
 8003c24:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003c28:	4b2b      	ldr	r3, [pc, #172]	; (8003cd8 <HAL_GPIO_Init+0x238>)
 8003c2a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003c2e:	f003 0302 	and.w	r3, r3, #2
 8003c32:	60fb      	str	r3, [r7, #12]
 8003c34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c36:	4a29      	ldr	r2, [pc, #164]	; (8003cdc <HAL_GPIO_Init+0x23c>)
 8003c38:	69fb      	ldr	r3, [r7, #28]
 8003c3a:	089b      	lsrs	r3, r3, #2
 8003c3c:	3302      	adds	r3, #2
 8003c3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003c44:	69fb      	ldr	r3, [r7, #28]
 8003c46:	f003 0303 	and.w	r3, r3, #3
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	220f      	movs	r2, #15
 8003c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c52:	43db      	mvns	r3, r3
 8003c54:	69ba      	ldr	r2, [r7, #24]
 8003c56:	4013      	ands	r3, r2
 8003c58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	4a20      	ldr	r2, [pc, #128]	; (8003ce0 <HAL_GPIO_Init+0x240>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d052      	beq.n	8003d08 <HAL_GPIO_Init+0x268>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	4a1f      	ldr	r2, [pc, #124]	; (8003ce4 <HAL_GPIO_Init+0x244>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d031      	beq.n	8003cce <HAL_GPIO_Init+0x22e>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	4a1e      	ldr	r2, [pc, #120]	; (8003ce8 <HAL_GPIO_Init+0x248>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d02b      	beq.n	8003cca <HAL_GPIO_Init+0x22a>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	4a1d      	ldr	r2, [pc, #116]	; (8003cec <HAL_GPIO_Init+0x24c>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d025      	beq.n	8003cc6 <HAL_GPIO_Init+0x226>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	4a1c      	ldr	r2, [pc, #112]	; (8003cf0 <HAL_GPIO_Init+0x250>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d01f      	beq.n	8003cc2 <HAL_GPIO_Init+0x222>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	4a1b      	ldr	r2, [pc, #108]	; (8003cf4 <HAL_GPIO_Init+0x254>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d019      	beq.n	8003cbe <HAL_GPIO_Init+0x21e>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	4a1a      	ldr	r2, [pc, #104]	; (8003cf8 <HAL_GPIO_Init+0x258>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d013      	beq.n	8003cba <HAL_GPIO_Init+0x21a>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	4a19      	ldr	r2, [pc, #100]	; (8003cfc <HAL_GPIO_Init+0x25c>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d00d      	beq.n	8003cb6 <HAL_GPIO_Init+0x216>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4a18      	ldr	r2, [pc, #96]	; (8003d00 <HAL_GPIO_Init+0x260>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d007      	beq.n	8003cb2 <HAL_GPIO_Init+0x212>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	4a17      	ldr	r2, [pc, #92]	; (8003d04 <HAL_GPIO_Init+0x264>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d101      	bne.n	8003cae <HAL_GPIO_Init+0x20e>
 8003caa:	2309      	movs	r3, #9
 8003cac:	e02d      	b.n	8003d0a <HAL_GPIO_Init+0x26a>
 8003cae:	230a      	movs	r3, #10
 8003cb0:	e02b      	b.n	8003d0a <HAL_GPIO_Init+0x26a>
 8003cb2:	2308      	movs	r3, #8
 8003cb4:	e029      	b.n	8003d0a <HAL_GPIO_Init+0x26a>
 8003cb6:	2307      	movs	r3, #7
 8003cb8:	e027      	b.n	8003d0a <HAL_GPIO_Init+0x26a>
 8003cba:	2306      	movs	r3, #6
 8003cbc:	e025      	b.n	8003d0a <HAL_GPIO_Init+0x26a>
 8003cbe:	2305      	movs	r3, #5
 8003cc0:	e023      	b.n	8003d0a <HAL_GPIO_Init+0x26a>
 8003cc2:	2304      	movs	r3, #4
 8003cc4:	e021      	b.n	8003d0a <HAL_GPIO_Init+0x26a>
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e01f      	b.n	8003d0a <HAL_GPIO_Init+0x26a>
 8003cca:	2302      	movs	r3, #2
 8003ccc:	e01d      	b.n	8003d0a <HAL_GPIO_Init+0x26a>
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e01b      	b.n	8003d0a <HAL_GPIO_Init+0x26a>
 8003cd2:	bf00      	nop
 8003cd4:	58000080 	.word	0x58000080
 8003cd8:	58024400 	.word	0x58024400
 8003cdc:	58000400 	.word	0x58000400
 8003ce0:	58020000 	.word	0x58020000
 8003ce4:	58020400 	.word	0x58020400
 8003ce8:	58020800 	.word	0x58020800
 8003cec:	58020c00 	.word	0x58020c00
 8003cf0:	58021000 	.word	0x58021000
 8003cf4:	58021400 	.word	0x58021400
 8003cf8:	58021800 	.word	0x58021800
 8003cfc:	58021c00 	.word	0x58021c00
 8003d00:	58022000 	.word	0x58022000
 8003d04:	58022400 	.word	0x58022400
 8003d08:	2300      	movs	r3, #0
 8003d0a:	69fa      	ldr	r2, [r7, #28]
 8003d0c:	f002 0203 	and.w	r2, r2, #3
 8003d10:	0092      	lsls	r2, r2, #2
 8003d12:	4093      	lsls	r3, r2
 8003d14:	69ba      	ldr	r2, [r7, #24]
 8003d16:	4313      	orrs	r3, r2
 8003d18:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d1a:	4938      	ldr	r1, [pc, #224]	; (8003dfc <HAL_GPIO_Init+0x35c>)
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	089b      	lsrs	r3, r3, #2
 8003d20:	3302      	adds	r3, #2
 8003d22:	69ba      	ldr	r2, [r7, #24]
 8003d24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	43db      	mvns	r3, r3
 8003d32:	69ba      	ldr	r2, [r7, #24]
 8003d34:	4013      	ands	r3, r2
 8003d36:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d003      	beq.n	8003d4c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003d44:	69ba      	ldr	r2, [r7, #24]
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	69ba      	ldr	r2, [r7, #24]
 8003d50:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	43db      	mvns	r3, r3
 8003d5c:	69ba      	ldr	r2, [r7, #24]
 8003d5e:	4013      	ands	r3, r2
 8003d60:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d003      	beq.n	8003d76 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003d6e:	69ba      	ldr	r2, [r7, #24]
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	69ba      	ldr	r2, [r7, #24]
 8003d7a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003d7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	43db      	mvns	r3, r3
 8003d88:	69ba      	ldr	r2, [r7, #24]
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d003      	beq.n	8003da2 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8003d9a:	69ba      	ldr	r2, [r7, #24]
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003da2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003da6:	69bb      	ldr	r3, [r7, #24]
 8003da8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003daa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	43db      	mvns	r3, r3
 8003db6:	69ba      	ldr	r2, [r7, #24]
 8003db8:	4013      	ands	r3, r2
 8003dba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d003      	beq.n	8003dd0 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8003dc8:	69ba      	ldr	r2, [r7, #24]
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003dd0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003dd4:	69bb      	ldr	r3, [r7, #24]
 8003dd6:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8003dd8:	69fb      	ldr	r3, [r7, #28]
 8003dda:	3301      	adds	r3, #1
 8003ddc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	fa22 f303 	lsr.w	r3, r2, r3
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	f47f ae63 	bne.w	8003ab4 <HAL_GPIO_Init+0x14>
  }
}
 8003dee:	bf00      	nop
 8003df0:	bf00      	nop
 8003df2:	3724      	adds	r7, #36	; 0x24
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr
 8003dfc:	58000400 	.word	0x58000400

08003e00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b083      	sub	sp, #12
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
 8003e08:	460b      	mov	r3, r1
 8003e0a:	807b      	strh	r3, [r7, #2]
 8003e0c:	4613      	mov	r3, r2
 8003e0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003e10:	787b      	ldrb	r3, [r7, #1]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d003      	beq.n	8003e1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e16:	887a      	ldrh	r2, [r7, #2]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003e1c:	e003      	b.n	8003e26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003e1e:	887b      	ldrh	r3, [r7, #2]
 8003e20:	041a      	lsls	r2, r3, #16
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	619a      	str	r2, [r3, #24]
}
 8003e26:	bf00      	nop
 8003e28:	370c      	adds	r7, #12
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr

08003e32 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003e32:	b480      	push	{r7}
 8003e34:	b085      	sub	sp, #20
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	6078      	str	r0, [r7, #4]
 8003e3a:	460b      	mov	r3, r1
 8003e3c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	695b      	ldr	r3, [r3, #20]
 8003e42:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003e44:	887a      	ldrh	r2, [r7, #2]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	4013      	ands	r3, r2
 8003e4a:	041a      	lsls	r2, r3, #16
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	43d9      	mvns	r1, r3
 8003e50:	887b      	ldrh	r3, [r7, #2]
 8003e52:	400b      	ands	r3, r1
 8003e54:	431a      	orrs	r2, r3
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	619a      	str	r2, [r3, #24]
}
 8003e5a:	bf00      	nop
 8003e5c:	3714      	adds	r7, #20
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr

08003e66 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003e66:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e68:	b08f      	sub	sp, #60	; 0x3c
 8003e6a:	af0a      	add	r7, sp, #40	; 0x28
 8003e6c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d101      	bne.n	8003e78 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	e116      	b.n	80040a6 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d106      	bne.n	8003e98 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f7fc ff60 	bl	8000d58 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2203      	movs	r2, #3
 8003e9c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ea4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d102      	bne.n	8003eb2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f004 f808 	bl	8007ecc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	603b      	str	r3, [r7, #0]
 8003ec2:	687e      	ldr	r6, [r7, #4]
 8003ec4:	466d      	mov	r5, sp
 8003ec6:	f106 0410 	add.w	r4, r6, #16
 8003eca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ecc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ece:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ed0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ed2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003ed6:	e885 0003 	stmia.w	r5, {r0, r1}
 8003eda:	1d33      	adds	r3, r6, #4
 8003edc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ede:	6838      	ldr	r0, [r7, #0]
 8003ee0:	f003 ff86 	bl	8007df0 <USB_CoreInit>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d005      	beq.n	8003ef6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2202      	movs	r2, #2
 8003eee:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e0d7      	b.n	80040a6 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	2100      	movs	r1, #0
 8003efc:	4618      	mov	r0, r3
 8003efe:	f003 fff6 	bl	8007eee <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f02:	2300      	movs	r3, #0
 8003f04:	73fb      	strb	r3, [r7, #15]
 8003f06:	e04a      	b.n	8003f9e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003f08:	7bfa      	ldrb	r2, [r7, #15]
 8003f0a:	6879      	ldr	r1, [r7, #4]
 8003f0c:	4613      	mov	r3, r2
 8003f0e:	00db      	lsls	r3, r3, #3
 8003f10:	1a9b      	subs	r3, r3, r2
 8003f12:	009b      	lsls	r3, r3, #2
 8003f14:	440b      	add	r3, r1
 8003f16:	333d      	adds	r3, #61	; 0x3d
 8003f18:	2201      	movs	r2, #1
 8003f1a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003f1c:	7bfa      	ldrb	r2, [r7, #15]
 8003f1e:	6879      	ldr	r1, [r7, #4]
 8003f20:	4613      	mov	r3, r2
 8003f22:	00db      	lsls	r3, r3, #3
 8003f24:	1a9b      	subs	r3, r3, r2
 8003f26:	009b      	lsls	r3, r3, #2
 8003f28:	440b      	add	r3, r1
 8003f2a:	333c      	adds	r3, #60	; 0x3c
 8003f2c:	7bfa      	ldrb	r2, [r7, #15]
 8003f2e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003f30:	7bfa      	ldrb	r2, [r7, #15]
 8003f32:	7bfb      	ldrb	r3, [r7, #15]
 8003f34:	b298      	uxth	r0, r3
 8003f36:	6879      	ldr	r1, [r7, #4]
 8003f38:	4613      	mov	r3, r2
 8003f3a:	00db      	lsls	r3, r3, #3
 8003f3c:	1a9b      	subs	r3, r3, r2
 8003f3e:	009b      	lsls	r3, r3, #2
 8003f40:	440b      	add	r3, r1
 8003f42:	3342      	adds	r3, #66	; 0x42
 8003f44:	4602      	mov	r2, r0
 8003f46:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003f48:	7bfa      	ldrb	r2, [r7, #15]
 8003f4a:	6879      	ldr	r1, [r7, #4]
 8003f4c:	4613      	mov	r3, r2
 8003f4e:	00db      	lsls	r3, r3, #3
 8003f50:	1a9b      	subs	r3, r3, r2
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	440b      	add	r3, r1
 8003f56:	333f      	adds	r3, #63	; 0x3f
 8003f58:	2200      	movs	r2, #0
 8003f5a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003f5c:	7bfa      	ldrb	r2, [r7, #15]
 8003f5e:	6879      	ldr	r1, [r7, #4]
 8003f60:	4613      	mov	r3, r2
 8003f62:	00db      	lsls	r3, r3, #3
 8003f64:	1a9b      	subs	r3, r3, r2
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	440b      	add	r3, r1
 8003f6a:	3344      	adds	r3, #68	; 0x44
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003f70:	7bfa      	ldrb	r2, [r7, #15]
 8003f72:	6879      	ldr	r1, [r7, #4]
 8003f74:	4613      	mov	r3, r2
 8003f76:	00db      	lsls	r3, r3, #3
 8003f78:	1a9b      	subs	r3, r3, r2
 8003f7a:	009b      	lsls	r3, r3, #2
 8003f7c:	440b      	add	r3, r1
 8003f7e:	3348      	adds	r3, #72	; 0x48
 8003f80:	2200      	movs	r2, #0
 8003f82:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003f84:	7bfa      	ldrb	r2, [r7, #15]
 8003f86:	6879      	ldr	r1, [r7, #4]
 8003f88:	4613      	mov	r3, r2
 8003f8a:	00db      	lsls	r3, r3, #3
 8003f8c:	1a9b      	subs	r3, r3, r2
 8003f8e:	009b      	lsls	r3, r3, #2
 8003f90:	440b      	add	r3, r1
 8003f92:	3350      	adds	r3, #80	; 0x50
 8003f94:	2200      	movs	r2, #0
 8003f96:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f98:	7bfb      	ldrb	r3, [r7, #15]
 8003f9a:	3301      	adds	r3, #1
 8003f9c:	73fb      	strb	r3, [r7, #15]
 8003f9e:	7bfa      	ldrb	r2, [r7, #15]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d3af      	bcc.n	8003f08 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003fa8:	2300      	movs	r3, #0
 8003faa:	73fb      	strb	r3, [r7, #15]
 8003fac:	e044      	b.n	8004038 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003fae:	7bfa      	ldrb	r2, [r7, #15]
 8003fb0:	6879      	ldr	r1, [r7, #4]
 8003fb2:	4613      	mov	r3, r2
 8003fb4:	00db      	lsls	r3, r3, #3
 8003fb6:	1a9b      	subs	r3, r3, r2
 8003fb8:	009b      	lsls	r3, r3, #2
 8003fba:	440b      	add	r3, r1
 8003fbc:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003fc4:	7bfa      	ldrb	r2, [r7, #15]
 8003fc6:	6879      	ldr	r1, [r7, #4]
 8003fc8:	4613      	mov	r3, r2
 8003fca:	00db      	lsls	r3, r3, #3
 8003fcc:	1a9b      	subs	r3, r3, r2
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	440b      	add	r3, r1
 8003fd2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003fd6:	7bfa      	ldrb	r2, [r7, #15]
 8003fd8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003fda:	7bfa      	ldrb	r2, [r7, #15]
 8003fdc:	6879      	ldr	r1, [r7, #4]
 8003fde:	4613      	mov	r3, r2
 8003fe0:	00db      	lsls	r3, r3, #3
 8003fe2:	1a9b      	subs	r3, r3, r2
 8003fe4:	009b      	lsls	r3, r3, #2
 8003fe6:	440b      	add	r3, r1
 8003fe8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003fec:	2200      	movs	r2, #0
 8003fee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003ff0:	7bfa      	ldrb	r2, [r7, #15]
 8003ff2:	6879      	ldr	r1, [r7, #4]
 8003ff4:	4613      	mov	r3, r2
 8003ff6:	00db      	lsls	r3, r3, #3
 8003ff8:	1a9b      	subs	r3, r3, r2
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	440b      	add	r3, r1
 8003ffe:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004002:	2200      	movs	r2, #0
 8004004:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004006:	7bfa      	ldrb	r2, [r7, #15]
 8004008:	6879      	ldr	r1, [r7, #4]
 800400a:	4613      	mov	r3, r2
 800400c:	00db      	lsls	r3, r3, #3
 800400e:	1a9b      	subs	r3, r3, r2
 8004010:	009b      	lsls	r3, r3, #2
 8004012:	440b      	add	r3, r1
 8004014:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004018:	2200      	movs	r2, #0
 800401a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800401c:	7bfa      	ldrb	r2, [r7, #15]
 800401e:	6879      	ldr	r1, [r7, #4]
 8004020:	4613      	mov	r3, r2
 8004022:	00db      	lsls	r3, r3, #3
 8004024:	1a9b      	subs	r3, r3, r2
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	440b      	add	r3, r1
 800402a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800402e:	2200      	movs	r2, #0
 8004030:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004032:	7bfb      	ldrb	r3, [r7, #15]
 8004034:	3301      	adds	r3, #1
 8004036:	73fb      	strb	r3, [r7, #15]
 8004038:	7bfa      	ldrb	r2, [r7, #15]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	429a      	cmp	r2, r3
 8004040:	d3b5      	bcc.n	8003fae <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	603b      	str	r3, [r7, #0]
 8004048:	687e      	ldr	r6, [r7, #4]
 800404a:	466d      	mov	r5, sp
 800404c:	f106 0410 	add.w	r4, r6, #16
 8004050:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004052:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004054:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004056:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004058:	e894 0003 	ldmia.w	r4, {r0, r1}
 800405c:	e885 0003 	stmia.w	r5, {r0, r1}
 8004060:	1d33      	adds	r3, r6, #4
 8004062:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004064:	6838      	ldr	r0, [r7, #0]
 8004066:	f003 ff6d 	bl	8007f44 <USB_DevInit>
 800406a:	4603      	mov	r3, r0
 800406c:	2b00      	cmp	r3, #0
 800406e:	d005      	beq.n	800407c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2202      	movs	r2, #2
 8004074:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	e014      	b.n	80040a6 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2200      	movs	r2, #0
 8004080:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2201      	movs	r2, #1
 8004088:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004090:	2b01      	cmp	r3, #1
 8004092:	d102      	bne.n	800409a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	f000 f80b 	bl	80040b0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4618      	mov	r0, r3
 80040a0:	f004 f90f 	bl	80082c2 <USB_DevDisconnect>

  return HAL_OK;
 80040a4:	2300      	movs	r3, #0
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	3714      	adds	r7, #20
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080040b0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b085      	sub	sp, #20
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2201      	movs	r2, #1
 80040c2:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2200      	movs	r2, #0
 80040ca:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	699b      	ldr	r3, [r3, #24]
 80040d2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80040de:	4b05      	ldr	r3, [pc, #20]	; (80040f4 <HAL_PCDEx_ActivateLPM+0x44>)
 80040e0:	4313      	orrs	r3, r2
 80040e2:	68fa      	ldr	r2, [r7, #12]
 80040e4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80040e6:	2300      	movs	r3, #0
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3714      	adds	r7, #20
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr
 80040f4:	10000003 	.word	0x10000003

080040f8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b084      	sub	sp, #16
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004100:	4b19      	ldr	r3, [pc, #100]	; (8004168 <HAL_PWREx_ConfigSupply+0x70>)
 8004102:	68db      	ldr	r3, [r3, #12]
 8004104:	f003 0304 	and.w	r3, r3, #4
 8004108:	2b04      	cmp	r3, #4
 800410a:	d00a      	beq.n	8004122 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800410c:	4b16      	ldr	r3, [pc, #88]	; (8004168 <HAL_PWREx_ConfigSupply+0x70>)
 800410e:	68db      	ldr	r3, [r3, #12]
 8004110:	f003 0307 	and.w	r3, r3, #7
 8004114:	687a      	ldr	r2, [r7, #4]
 8004116:	429a      	cmp	r2, r3
 8004118:	d001      	beq.n	800411e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e01f      	b.n	800415e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800411e:	2300      	movs	r3, #0
 8004120:	e01d      	b.n	800415e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004122:	4b11      	ldr	r3, [pc, #68]	; (8004168 <HAL_PWREx_ConfigSupply+0x70>)
 8004124:	68db      	ldr	r3, [r3, #12]
 8004126:	f023 0207 	bic.w	r2, r3, #7
 800412a:	490f      	ldr	r1, [pc, #60]	; (8004168 <HAL_PWREx_ConfigSupply+0x70>)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	4313      	orrs	r3, r2
 8004130:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004132:	f7fd fc5d 	bl	80019f0 <HAL_GetTick>
 8004136:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004138:	e009      	b.n	800414e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800413a:	f7fd fc59 	bl	80019f0 <HAL_GetTick>
 800413e:	4602      	mov	r2, r0
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	1ad3      	subs	r3, r2, r3
 8004144:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004148:	d901      	bls.n	800414e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	e007      	b.n	800415e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800414e:	4b06      	ldr	r3, [pc, #24]	; (8004168 <HAL_PWREx_ConfigSupply+0x70>)
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004156:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800415a:	d1ee      	bne.n	800413a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800415c:	2300      	movs	r3, #0
}
 800415e:	4618      	mov	r0, r3
 8004160:	3710      	adds	r7, #16
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}
 8004166:	bf00      	nop
 8004168:	58024800 	.word	0x58024800

0800416c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800416c:	b480      	push	{r7}
 800416e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8004170:	4b05      	ldr	r3, [pc, #20]	; (8004188 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	4a04      	ldr	r2, [pc, #16]	; (8004188 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004176:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800417a:	60d3      	str	r3, [r2, #12]
}
 800417c:	bf00      	nop
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr
 8004186:	bf00      	nop
 8004188:	58024800 	.word	0x58024800

0800418c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b08c      	sub	sp, #48	; 0x30
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d101      	bne.n	800419e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e3ff      	b.n	800499e <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 0301 	and.w	r3, r3, #1
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	f000 8087 	beq.w	80042ba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041ac:	4b99      	ldr	r3, [pc, #612]	; (8004414 <HAL_RCC_OscConfig+0x288>)
 80041ae:	691b      	ldr	r3, [r3, #16]
 80041b0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80041b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80041b6:	4b97      	ldr	r3, [pc, #604]	; (8004414 <HAL_RCC_OscConfig+0x288>)
 80041b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ba:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80041bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041be:	2b10      	cmp	r3, #16
 80041c0:	d007      	beq.n	80041d2 <HAL_RCC_OscConfig+0x46>
 80041c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041c4:	2b18      	cmp	r3, #24
 80041c6:	d110      	bne.n	80041ea <HAL_RCC_OscConfig+0x5e>
 80041c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ca:	f003 0303 	and.w	r3, r3, #3
 80041ce:	2b02      	cmp	r3, #2
 80041d0:	d10b      	bne.n	80041ea <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041d2:	4b90      	ldr	r3, [pc, #576]	; (8004414 <HAL_RCC_OscConfig+0x288>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d06c      	beq.n	80042b8 <HAL_RCC_OscConfig+0x12c>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d168      	bne.n	80042b8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e3d9      	b.n	800499e <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041f2:	d106      	bne.n	8004202 <HAL_RCC_OscConfig+0x76>
 80041f4:	4b87      	ldr	r3, [pc, #540]	; (8004414 <HAL_RCC_OscConfig+0x288>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a86      	ldr	r2, [pc, #536]	; (8004414 <HAL_RCC_OscConfig+0x288>)
 80041fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041fe:	6013      	str	r3, [r2, #0]
 8004200:	e02e      	b.n	8004260 <HAL_RCC_OscConfig+0xd4>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d10c      	bne.n	8004224 <HAL_RCC_OscConfig+0x98>
 800420a:	4b82      	ldr	r3, [pc, #520]	; (8004414 <HAL_RCC_OscConfig+0x288>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a81      	ldr	r2, [pc, #516]	; (8004414 <HAL_RCC_OscConfig+0x288>)
 8004210:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004214:	6013      	str	r3, [r2, #0]
 8004216:	4b7f      	ldr	r3, [pc, #508]	; (8004414 <HAL_RCC_OscConfig+0x288>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a7e      	ldr	r2, [pc, #504]	; (8004414 <HAL_RCC_OscConfig+0x288>)
 800421c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004220:	6013      	str	r3, [r2, #0]
 8004222:	e01d      	b.n	8004260 <HAL_RCC_OscConfig+0xd4>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800422c:	d10c      	bne.n	8004248 <HAL_RCC_OscConfig+0xbc>
 800422e:	4b79      	ldr	r3, [pc, #484]	; (8004414 <HAL_RCC_OscConfig+0x288>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a78      	ldr	r2, [pc, #480]	; (8004414 <HAL_RCC_OscConfig+0x288>)
 8004234:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004238:	6013      	str	r3, [r2, #0]
 800423a:	4b76      	ldr	r3, [pc, #472]	; (8004414 <HAL_RCC_OscConfig+0x288>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a75      	ldr	r2, [pc, #468]	; (8004414 <HAL_RCC_OscConfig+0x288>)
 8004240:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004244:	6013      	str	r3, [r2, #0]
 8004246:	e00b      	b.n	8004260 <HAL_RCC_OscConfig+0xd4>
 8004248:	4b72      	ldr	r3, [pc, #456]	; (8004414 <HAL_RCC_OscConfig+0x288>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a71      	ldr	r2, [pc, #452]	; (8004414 <HAL_RCC_OscConfig+0x288>)
 800424e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004252:	6013      	str	r3, [r2, #0]
 8004254:	4b6f      	ldr	r3, [pc, #444]	; (8004414 <HAL_RCC_OscConfig+0x288>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a6e      	ldr	r2, [pc, #440]	; (8004414 <HAL_RCC_OscConfig+0x288>)
 800425a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800425e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d013      	beq.n	8004290 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004268:	f7fd fbc2 	bl	80019f0 <HAL_GetTick>
 800426c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800426e:	e008      	b.n	8004282 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004270:	f7fd fbbe 	bl	80019f0 <HAL_GetTick>
 8004274:	4602      	mov	r2, r0
 8004276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004278:	1ad3      	subs	r3, r2, r3
 800427a:	2b64      	cmp	r3, #100	; 0x64
 800427c:	d901      	bls.n	8004282 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800427e:	2303      	movs	r3, #3
 8004280:	e38d      	b.n	800499e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004282:	4b64      	ldr	r3, [pc, #400]	; (8004414 <HAL_RCC_OscConfig+0x288>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800428a:	2b00      	cmp	r3, #0
 800428c:	d0f0      	beq.n	8004270 <HAL_RCC_OscConfig+0xe4>
 800428e:	e014      	b.n	80042ba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004290:	f7fd fbae 	bl	80019f0 <HAL_GetTick>
 8004294:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004296:	e008      	b.n	80042aa <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004298:	f7fd fbaa 	bl	80019f0 <HAL_GetTick>
 800429c:	4602      	mov	r2, r0
 800429e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a0:	1ad3      	subs	r3, r2, r3
 80042a2:	2b64      	cmp	r3, #100	; 0x64
 80042a4:	d901      	bls.n	80042aa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80042a6:	2303      	movs	r3, #3
 80042a8:	e379      	b.n	800499e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80042aa:	4b5a      	ldr	r3, [pc, #360]	; (8004414 <HAL_RCC_OscConfig+0x288>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d1f0      	bne.n	8004298 <HAL_RCC_OscConfig+0x10c>
 80042b6:	e000      	b.n	80042ba <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 0302 	and.w	r3, r3, #2
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	f000 80ae 	beq.w	8004424 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042c8:	4b52      	ldr	r3, [pc, #328]	; (8004414 <HAL_RCC_OscConfig+0x288>)
 80042ca:	691b      	ldr	r3, [r3, #16]
 80042cc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80042d0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80042d2:	4b50      	ldr	r3, [pc, #320]	; (8004414 <HAL_RCC_OscConfig+0x288>)
 80042d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042d6:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80042d8:	6a3b      	ldr	r3, [r7, #32]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d007      	beq.n	80042ee <HAL_RCC_OscConfig+0x162>
 80042de:	6a3b      	ldr	r3, [r7, #32]
 80042e0:	2b18      	cmp	r3, #24
 80042e2:	d13a      	bne.n	800435a <HAL_RCC_OscConfig+0x1ce>
 80042e4:	69fb      	ldr	r3, [r7, #28]
 80042e6:	f003 0303 	and.w	r3, r3, #3
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d135      	bne.n	800435a <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80042ee:	4b49      	ldr	r3, [pc, #292]	; (8004414 <HAL_RCC_OscConfig+0x288>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 0304 	and.w	r3, r3, #4
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d005      	beq.n	8004306 <HAL_RCC_OscConfig+0x17a>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	68db      	ldr	r3, [r3, #12]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d101      	bne.n	8004306 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	e34b      	b.n	800499e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004306:	f7fd fba3 	bl	8001a50 <HAL_GetREVID>
 800430a:	4603      	mov	r3, r0
 800430c:	f241 0203 	movw	r2, #4099	; 0x1003
 8004310:	4293      	cmp	r3, r2
 8004312:	d817      	bhi.n	8004344 <HAL_RCC_OscConfig+0x1b8>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	691b      	ldr	r3, [r3, #16]
 8004318:	2b40      	cmp	r3, #64	; 0x40
 800431a:	d108      	bne.n	800432e <HAL_RCC_OscConfig+0x1a2>
 800431c:	4b3d      	ldr	r3, [pc, #244]	; (8004414 <HAL_RCC_OscConfig+0x288>)
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004324:	4a3b      	ldr	r2, [pc, #236]	; (8004414 <HAL_RCC_OscConfig+0x288>)
 8004326:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800432a:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800432c:	e07a      	b.n	8004424 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800432e:	4b39      	ldr	r3, [pc, #228]	; (8004414 <HAL_RCC_OscConfig+0x288>)
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	691b      	ldr	r3, [r3, #16]
 800433a:	031b      	lsls	r3, r3, #12
 800433c:	4935      	ldr	r1, [pc, #212]	; (8004414 <HAL_RCC_OscConfig+0x288>)
 800433e:	4313      	orrs	r3, r2
 8004340:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004342:	e06f      	b.n	8004424 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004344:	4b33      	ldr	r3, [pc, #204]	; (8004414 <HAL_RCC_OscConfig+0x288>)
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	691b      	ldr	r3, [r3, #16]
 8004350:	061b      	lsls	r3, r3, #24
 8004352:	4930      	ldr	r1, [pc, #192]	; (8004414 <HAL_RCC_OscConfig+0x288>)
 8004354:	4313      	orrs	r3, r2
 8004356:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004358:	e064      	b.n	8004424 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	68db      	ldr	r3, [r3, #12]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d045      	beq.n	80043ee <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004362:	4b2c      	ldr	r3, [pc, #176]	; (8004414 <HAL_RCC_OscConfig+0x288>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f023 0219 	bic.w	r2, r3, #25
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	68db      	ldr	r3, [r3, #12]
 800436e:	4929      	ldr	r1, [pc, #164]	; (8004414 <HAL_RCC_OscConfig+0x288>)
 8004370:	4313      	orrs	r3, r2
 8004372:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004374:	f7fd fb3c 	bl	80019f0 <HAL_GetTick>
 8004378:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800437a:	e008      	b.n	800438e <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800437c:	f7fd fb38 	bl	80019f0 <HAL_GetTick>
 8004380:	4602      	mov	r2, r0
 8004382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	2b02      	cmp	r3, #2
 8004388:	d901      	bls.n	800438e <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800438a:	2303      	movs	r3, #3
 800438c:	e307      	b.n	800499e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800438e:	4b21      	ldr	r3, [pc, #132]	; (8004414 <HAL_RCC_OscConfig+0x288>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 0304 	and.w	r3, r3, #4
 8004396:	2b00      	cmp	r3, #0
 8004398:	d0f0      	beq.n	800437c <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800439a:	f7fd fb59 	bl	8001a50 <HAL_GetREVID>
 800439e:	4603      	mov	r3, r0
 80043a0:	f241 0203 	movw	r2, #4099	; 0x1003
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d817      	bhi.n	80043d8 <HAL_RCC_OscConfig+0x24c>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	691b      	ldr	r3, [r3, #16]
 80043ac:	2b40      	cmp	r3, #64	; 0x40
 80043ae:	d108      	bne.n	80043c2 <HAL_RCC_OscConfig+0x236>
 80043b0:	4b18      	ldr	r3, [pc, #96]	; (8004414 <HAL_RCC_OscConfig+0x288>)
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80043b8:	4a16      	ldr	r2, [pc, #88]	; (8004414 <HAL_RCC_OscConfig+0x288>)
 80043ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043be:	6053      	str	r3, [r2, #4]
 80043c0:	e030      	b.n	8004424 <HAL_RCC_OscConfig+0x298>
 80043c2:	4b14      	ldr	r3, [pc, #80]	; (8004414 <HAL_RCC_OscConfig+0x288>)
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	691b      	ldr	r3, [r3, #16]
 80043ce:	031b      	lsls	r3, r3, #12
 80043d0:	4910      	ldr	r1, [pc, #64]	; (8004414 <HAL_RCC_OscConfig+0x288>)
 80043d2:	4313      	orrs	r3, r2
 80043d4:	604b      	str	r3, [r1, #4]
 80043d6:	e025      	b.n	8004424 <HAL_RCC_OscConfig+0x298>
 80043d8:	4b0e      	ldr	r3, [pc, #56]	; (8004414 <HAL_RCC_OscConfig+0x288>)
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	691b      	ldr	r3, [r3, #16]
 80043e4:	061b      	lsls	r3, r3, #24
 80043e6:	490b      	ldr	r1, [pc, #44]	; (8004414 <HAL_RCC_OscConfig+0x288>)
 80043e8:	4313      	orrs	r3, r2
 80043ea:	604b      	str	r3, [r1, #4]
 80043ec:	e01a      	b.n	8004424 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043ee:	4b09      	ldr	r3, [pc, #36]	; (8004414 <HAL_RCC_OscConfig+0x288>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a08      	ldr	r2, [pc, #32]	; (8004414 <HAL_RCC_OscConfig+0x288>)
 80043f4:	f023 0301 	bic.w	r3, r3, #1
 80043f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043fa:	f7fd faf9 	bl	80019f0 <HAL_GetTick>
 80043fe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004400:	e00a      	b.n	8004418 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004402:	f7fd faf5 	bl	80019f0 <HAL_GetTick>
 8004406:	4602      	mov	r2, r0
 8004408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800440a:	1ad3      	subs	r3, r2, r3
 800440c:	2b02      	cmp	r3, #2
 800440e:	d903      	bls.n	8004418 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8004410:	2303      	movs	r3, #3
 8004412:	e2c4      	b.n	800499e <HAL_RCC_OscConfig+0x812>
 8004414:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004418:	4ba4      	ldr	r3, [pc, #656]	; (80046ac <HAL_RCC_OscConfig+0x520>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 0304 	and.w	r3, r3, #4
 8004420:	2b00      	cmp	r3, #0
 8004422:	d1ee      	bne.n	8004402 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 0310 	and.w	r3, r3, #16
 800442c:	2b00      	cmp	r3, #0
 800442e:	f000 80a9 	beq.w	8004584 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004432:	4b9e      	ldr	r3, [pc, #632]	; (80046ac <HAL_RCC_OscConfig+0x520>)
 8004434:	691b      	ldr	r3, [r3, #16]
 8004436:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800443a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800443c:	4b9b      	ldr	r3, [pc, #620]	; (80046ac <HAL_RCC_OscConfig+0x520>)
 800443e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004440:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004442:	69bb      	ldr	r3, [r7, #24]
 8004444:	2b08      	cmp	r3, #8
 8004446:	d007      	beq.n	8004458 <HAL_RCC_OscConfig+0x2cc>
 8004448:	69bb      	ldr	r3, [r7, #24]
 800444a:	2b18      	cmp	r3, #24
 800444c:	d13a      	bne.n	80044c4 <HAL_RCC_OscConfig+0x338>
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	f003 0303 	and.w	r3, r3, #3
 8004454:	2b01      	cmp	r3, #1
 8004456:	d135      	bne.n	80044c4 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004458:	4b94      	ldr	r3, [pc, #592]	; (80046ac <HAL_RCC_OscConfig+0x520>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004460:	2b00      	cmp	r3, #0
 8004462:	d005      	beq.n	8004470 <HAL_RCC_OscConfig+0x2e4>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	69db      	ldr	r3, [r3, #28]
 8004468:	2b80      	cmp	r3, #128	; 0x80
 800446a:	d001      	beq.n	8004470 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	e296      	b.n	800499e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004470:	f7fd faee 	bl	8001a50 <HAL_GetREVID>
 8004474:	4603      	mov	r3, r0
 8004476:	f241 0203 	movw	r2, #4099	; 0x1003
 800447a:	4293      	cmp	r3, r2
 800447c:	d817      	bhi.n	80044ae <HAL_RCC_OscConfig+0x322>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6a1b      	ldr	r3, [r3, #32]
 8004482:	2b20      	cmp	r3, #32
 8004484:	d108      	bne.n	8004498 <HAL_RCC_OscConfig+0x30c>
 8004486:	4b89      	ldr	r3, [pc, #548]	; (80046ac <HAL_RCC_OscConfig+0x520>)
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800448e:	4a87      	ldr	r2, [pc, #540]	; (80046ac <HAL_RCC_OscConfig+0x520>)
 8004490:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004494:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004496:	e075      	b.n	8004584 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004498:	4b84      	ldr	r3, [pc, #528]	; (80046ac <HAL_RCC_OscConfig+0x520>)
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6a1b      	ldr	r3, [r3, #32]
 80044a4:	069b      	lsls	r3, r3, #26
 80044a6:	4981      	ldr	r1, [pc, #516]	; (80046ac <HAL_RCC_OscConfig+0x520>)
 80044a8:	4313      	orrs	r3, r2
 80044aa:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80044ac:	e06a      	b.n	8004584 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80044ae:	4b7f      	ldr	r3, [pc, #508]	; (80046ac <HAL_RCC_OscConfig+0x520>)
 80044b0:	68db      	ldr	r3, [r3, #12]
 80044b2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6a1b      	ldr	r3, [r3, #32]
 80044ba:	061b      	lsls	r3, r3, #24
 80044bc:	497b      	ldr	r1, [pc, #492]	; (80046ac <HAL_RCC_OscConfig+0x520>)
 80044be:	4313      	orrs	r3, r2
 80044c0:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80044c2:	e05f      	b.n	8004584 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	69db      	ldr	r3, [r3, #28]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d042      	beq.n	8004552 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80044cc:	4b77      	ldr	r3, [pc, #476]	; (80046ac <HAL_RCC_OscConfig+0x520>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a76      	ldr	r2, [pc, #472]	; (80046ac <HAL_RCC_OscConfig+0x520>)
 80044d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044d8:	f7fd fa8a 	bl	80019f0 <HAL_GetTick>
 80044dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80044de:	e008      	b.n	80044f2 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80044e0:	f7fd fa86 	bl	80019f0 <HAL_GetTick>
 80044e4:	4602      	mov	r2, r0
 80044e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e8:	1ad3      	subs	r3, r2, r3
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	d901      	bls.n	80044f2 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80044ee:	2303      	movs	r3, #3
 80044f0:	e255      	b.n	800499e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80044f2:	4b6e      	ldr	r3, [pc, #440]	; (80046ac <HAL_RCC_OscConfig+0x520>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d0f0      	beq.n	80044e0 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80044fe:	f7fd faa7 	bl	8001a50 <HAL_GetREVID>
 8004502:	4603      	mov	r3, r0
 8004504:	f241 0203 	movw	r2, #4099	; 0x1003
 8004508:	4293      	cmp	r3, r2
 800450a:	d817      	bhi.n	800453c <HAL_RCC_OscConfig+0x3b0>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6a1b      	ldr	r3, [r3, #32]
 8004510:	2b20      	cmp	r3, #32
 8004512:	d108      	bne.n	8004526 <HAL_RCC_OscConfig+0x39a>
 8004514:	4b65      	ldr	r3, [pc, #404]	; (80046ac <HAL_RCC_OscConfig+0x520>)
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800451c:	4a63      	ldr	r2, [pc, #396]	; (80046ac <HAL_RCC_OscConfig+0x520>)
 800451e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004522:	6053      	str	r3, [r2, #4]
 8004524:	e02e      	b.n	8004584 <HAL_RCC_OscConfig+0x3f8>
 8004526:	4b61      	ldr	r3, [pc, #388]	; (80046ac <HAL_RCC_OscConfig+0x520>)
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6a1b      	ldr	r3, [r3, #32]
 8004532:	069b      	lsls	r3, r3, #26
 8004534:	495d      	ldr	r1, [pc, #372]	; (80046ac <HAL_RCC_OscConfig+0x520>)
 8004536:	4313      	orrs	r3, r2
 8004538:	604b      	str	r3, [r1, #4]
 800453a:	e023      	b.n	8004584 <HAL_RCC_OscConfig+0x3f8>
 800453c:	4b5b      	ldr	r3, [pc, #364]	; (80046ac <HAL_RCC_OscConfig+0x520>)
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6a1b      	ldr	r3, [r3, #32]
 8004548:	061b      	lsls	r3, r3, #24
 800454a:	4958      	ldr	r1, [pc, #352]	; (80046ac <HAL_RCC_OscConfig+0x520>)
 800454c:	4313      	orrs	r3, r2
 800454e:	60cb      	str	r3, [r1, #12]
 8004550:	e018      	b.n	8004584 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004552:	4b56      	ldr	r3, [pc, #344]	; (80046ac <HAL_RCC_OscConfig+0x520>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a55      	ldr	r2, [pc, #340]	; (80046ac <HAL_RCC_OscConfig+0x520>)
 8004558:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800455c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800455e:	f7fd fa47 	bl	80019f0 <HAL_GetTick>
 8004562:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004564:	e008      	b.n	8004578 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004566:	f7fd fa43 	bl	80019f0 <HAL_GetTick>
 800456a:	4602      	mov	r2, r0
 800456c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456e:	1ad3      	subs	r3, r2, r3
 8004570:	2b02      	cmp	r3, #2
 8004572:	d901      	bls.n	8004578 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8004574:	2303      	movs	r3, #3
 8004576:	e212      	b.n	800499e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004578:	4b4c      	ldr	r3, [pc, #304]	; (80046ac <HAL_RCC_OscConfig+0x520>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004580:	2b00      	cmp	r3, #0
 8004582:	d1f0      	bne.n	8004566 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 0308 	and.w	r3, r3, #8
 800458c:	2b00      	cmp	r3, #0
 800458e:	d036      	beq.n	80045fe <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	695b      	ldr	r3, [r3, #20]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d019      	beq.n	80045cc <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004598:	4b44      	ldr	r3, [pc, #272]	; (80046ac <HAL_RCC_OscConfig+0x520>)
 800459a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800459c:	4a43      	ldr	r2, [pc, #268]	; (80046ac <HAL_RCC_OscConfig+0x520>)
 800459e:	f043 0301 	orr.w	r3, r3, #1
 80045a2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045a4:	f7fd fa24 	bl	80019f0 <HAL_GetTick>
 80045a8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80045aa:	e008      	b.n	80045be <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045ac:	f7fd fa20 	bl	80019f0 <HAL_GetTick>
 80045b0:	4602      	mov	r2, r0
 80045b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b4:	1ad3      	subs	r3, r2, r3
 80045b6:	2b02      	cmp	r3, #2
 80045b8:	d901      	bls.n	80045be <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80045ba:	2303      	movs	r3, #3
 80045bc:	e1ef      	b.n	800499e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80045be:	4b3b      	ldr	r3, [pc, #236]	; (80046ac <HAL_RCC_OscConfig+0x520>)
 80045c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045c2:	f003 0302 	and.w	r3, r3, #2
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d0f0      	beq.n	80045ac <HAL_RCC_OscConfig+0x420>
 80045ca:	e018      	b.n	80045fe <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045cc:	4b37      	ldr	r3, [pc, #220]	; (80046ac <HAL_RCC_OscConfig+0x520>)
 80045ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045d0:	4a36      	ldr	r2, [pc, #216]	; (80046ac <HAL_RCC_OscConfig+0x520>)
 80045d2:	f023 0301 	bic.w	r3, r3, #1
 80045d6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045d8:	f7fd fa0a 	bl	80019f0 <HAL_GetTick>
 80045dc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80045de:	e008      	b.n	80045f2 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045e0:	f7fd fa06 	bl	80019f0 <HAL_GetTick>
 80045e4:	4602      	mov	r2, r0
 80045e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e8:	1ad3      	subs	r3, r2, r3
 80045ea:	2b02      	cmp	r3, #2
 80045ec:	d901      	bls.n	80045f2 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80045ee:	2303      	movs	r3, #3
 80045f0:	e1d5      	b.n	800499e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80045f2:	4b2e      	ldr	r3, [pc, #184]	; (80046ac <HAL_RCC_OscConfig+0x520>)
 80045f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045f6:	f003 0302 	and.w	r3, r3, #2
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d1f0      	bne.n	80045e0 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 0320 	and.w	r3, r3, #32
 8004606:	2b00      	cmp	r3, #0
 8004608:	d036      	beq.n	8004678 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	699b      	ldr	r3, [r3, #24]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d019      	beq.n	8004646 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004612:	4b26      	ldr	r3, [pc, #152]	; (80046ac <HAL_RCC_OscConfig+0x520>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a25      	ldr	r2, [pc, #148]	; (80046ac <HAL_RCC_OscConfig+0x520>)
 8004618:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800461c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800461e:	f7fd f9e7 	bl	80019f0 <HAL_GetTick>
 8004622:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004624:	e008      	b.n	8004638 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004626:	f7fd f9e3 	bl	80019f0 <HAL_GetTick>
 800462a:	4602      	mov	r2, r0
 800462c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462e:	1ad3      	subs	r3, r2, r3
 8004630:	2b02      	cmp	r3, #2
 8004632:	d901      	bls.n	8004638 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8004634:	2303      	movs	r3, #3
 8004636:	e1b2      	b.n	800499e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004638:	4b1c      	ldr	r3, [pc, #112]	; (80046ac <HAL_RCC_OscConfig+0x520>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004640:	2b00      	cmp	r3, #0
 8004642:	d0f0      	beq.n	8004626 <HAL_RCC_OscConfig+0x49a>
 8004644:	e018      	b.n	8004678 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004646:	4b19      	ldr	r3, [pc, #100]	; (80046ac <HAL_RCC_OscConfig+0x520>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a18      	ldr	r2, [pc, #96]	; (80046ac <HAL_RCC_OscConfig+0x520>)
 800464c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004650:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004652:	f7fd f9cd 	bl	80019f0 <HAL_GetTick>
 8004656:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004658:	e008      	b.n	800466c <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800465a:	f7fd f9c9 	bl	80019f0 <HAL_GetTick>
 800465e:	4602      	mov	r2, r0
 8004660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004662:	1ad3      	subs	r3, r2, r3
 8004664:	2b02      	cmp	r3, #2
 8004666:	d901      	bls.n	800466c <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8004668:	2303      	movs	r3, #3
 800466a:	e198      	b.n	800499e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800466c:	4b0f      	ldr	r3, [pc, #60]	; (80046ac <HAL_RCC_OscConfig+0x520>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004674:	2b00      	cmp	r3, #0
 8004676:	d1f0      	bne.n	800465a <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f003 0304 	and.w	r3, r3, #4
 8004680:	2b00      	cmp	r3, #0
 8004682:	f000 8085 	beq.w	8004790 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004686:	4b0a      	ldr	r3, [pc, #40]	; (80046b0 <HAL_RCC_OscConfig+0x524>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a09      	ldr	r2, [pc, #36]	; (80046b0 <HAL_RCC_OscConfig+0x524>)
 800468c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004690:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004692:	f7fd f9ad 	bl	80019f0 <HAL_GetTick>
 8004696:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004698:	e00c      	b.n	80046b4 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800469a:	f7fd f9a9 	bl	80019f0 <HAL_GetTick>
 800469e:	4602      	mov	r2, r0
 80046a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a2:	1ad3      	subs	r3, r2, r3
 80046a4:	2b64      	cmp	r3, #100	; 0x64
 80046a6:	d905      	bls.n	80046b4 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 80046a8:	2303      	movs	r3, #3
 80046aa:	e178      	b.n	800499e <HAL_RCC_OscConfig+0x812>
 80046ac:	58024400 	.word	0x58024400
 80046b0:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80046b4:	4b96      	ldr	r3, [pc, #600]	; (8004910 <HAL_RCC_OscConfig+0x784>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d0ec      	beq.n	800469a <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d106      	bne.n	80046d6 <HAL_RCC_OscConfig+0x54a>
 80046c8:	4b92      	ldr	r3, [pc, #584]	; (8004914 <HAL_RCC_OscConfig+0x788>)
 80046ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046cc:	4a91      	ldr	r2, [pc, #580]	; (8004914 <HAL_RCC_OscConfig+0x788>)
 80046ce:	f043 0301 	orr.w	r3, r3, #1
 80046d2:	6713      	str	r3, [r2, #112]	; 0x70
 80046d4:	e02d      	b.n	8004732 <HAL_RCC_OscConfig+0x5a6>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d10c      	bne.n	80046f8 <HAL_RCC_OscConfig+0x56c>
 80046de:	4b8d      	ldr	r3, [pc, #564]	; (8004914 <HAL_RCC_OscConfig+0x788>)
 80046e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046e2:	4a8c      	ldr	r2, [pc, #560]	; (8004914 <HAL_RCC_OscConfig+0x788>)
 80046e4:	f023 0301 	bic.w	r3, r3, #1
 80046e8:	6713      	str	r3, [r2, #112]	; 0x70
 80046ea:	4b8a      	ldr	r3, [pc, #552]	; (8004914 <HAL_RCC_OscConfig+0x788>)
 80046ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ee:	4a89      	ldr	r2, [pc, #548]	; (8004914 <HAL_RCC_OscConfig+0x788>)
 80046f0:	f023 0304 	bic.w	r3, r3, #4
 80046f4:	6713      	str	r3, [r2, #112]	; 0x70
 80046f6:	e01c      	b.n	8004732 <HAL_RCC_OscConfig+0x5a6>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	2b05      	cmp	r3, #5
 80046fe:	d10c      	bne.n	800471a <HAL_RCC_OscConfig+0x58e>
 8004700:	4b84      	ldr	r3, [pc, #528]	; (8004914 <HAL_RCC_OscConfig+0x788>)
 8004702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004704:	4a83      	ldr	r2, [pc, #524]	; (8004914 <HAL_RCC_OscConfig+0x788>)
 8004706:	f043 0304 	orr.w	r3, r3, #4
 800470a:	6713      	str	r3, [r2, #112]	; 0x70
 800470c:	4b81      	ldr	r3, [pc, #516]	; (8004914 <HAL_RCC_OscConfig+0x788>)
 800470e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004710:	4a80      	ldr	r2, [pc, #512]	; (8004914 <HAL_RCC_OscConfig+0x788>)
 8004712:	f043 0301 	orr.w	r3, r3, #1
 8004716:	6713      	str	r3, [r2, #112]	; 0x70
 8004718:	e00b      	b.n	8004732 <HAL_RCC_OscConfig+0x5a6>
 800471a:	4b7e      	ldr	r3, [pc, #504]	; (8004914 <HAL_RCC_OscConfig+0x788>)
 800471c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800471e:	4a7d      	ldr	r2, [pc, #500]	; (8004914 <HAL_RCC_OscConfig+0x788>)
 8004720:	f023 0301 	bic.w	r3, r3, #1
 8004724:	6713      	str	r3, [r2, #112]	; 0x70
 8004726:	4b7b      	ldr	r3, [pc, #492]	; (8004914 <HAL_RCC_OscConfig+0x788>)
 8004728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800472a:	4a7a      	ldr	r2, [pc, #488]	; (8004914 <HAL_RCC_OscConfig+0x788>)
 800472c:	f023 0304 	bic.w	r3, r3, #4
 8004730:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d015      	beq.n	8004766 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800473a:	f7fd f959 	bl	80019f0 <HAL_GetTick>
 800473e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004740:	e00a      	b.n	8004758 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004742:	f7fd f955 	bl	80019f0 <HAL_GetTick>
 8004746:	4602      	mov	r2, r0
 8004748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800474a:	1ad3      	subs	r3, r2, r3
 800474c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004750:	4293      	cmp	r3, r2
 8004752:	d901      	bls.n	8004758 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8004754:	2303      	movs	r3, #3
 8004756:	e122      	b.n	800499e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004758:	4b6e      	ldr	r3, [pc, #440]	; (8004914 <HAL_RCC_OscConfig+0x788>)
 800475a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800475c:	f003 0302 	and.w	r3, r3, #2
 8004760:	2b00      	cmp	r3, #0
 8004762:	d0ee      	beq.n	8004742 <HAL_RCC_OscConfig+0x5b6>
 8004764:	e014      	b.n	8004790 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004766:	f7fd f943 	bl	80019f0 <HAL_GetTick>
 800476a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800476c:	e00a      	b.n	8004784 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800476e:	f7fd f93f 	bl	80019f0 <HAL_GetTick>
 8004772:	4602      	mov	r2, r0
 8004774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004776:	1ad3      	subs	r3, r2, r3
 8004778:	f241 3288 	movw	r2, #5000	; 0x1388
 800477c:	4293      	cmp	r3, r2
 800477e:	d901      	bls.n	8004784 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8004780:	2303      	movs	r3, #3
 8004782:	e10c      	b.n	800499e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004784:	4b63      	ldr	r3, [pc, #396]	; (8004914 <HAL_RCC_OscConfig+0x788>)
 8004786:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004788:	f003 0302 	and.w	r3, r3, #2
 800478c:	2b00      	cmp	r3, #0
 800478e:	d1ee      	bne.n	800476e <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004794:	2b00      	cmp	r3, #0
 8004796:	f000 8101 	beq.w	800499c <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800479a:	4b5e      	ldr	r3, [pc, #376]	; (8004914 <HAL_RCC_OscConfig+0x788>)
 800479c:	691b      	ldr	r3, [r3, #16]
 800479e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80047a2:	2b18      	cmp	r3, #24
 80047a4:	f000 80bc 	beq.w	8004920 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ac:	2b02      	cmp	r3, #2
 80047ae:	f040 8095 	bne.w	80048dc <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047b2:	4b58      	ldr	r3, [pc, #352]	; (8004914 <HAL_RCC_OscConfig+0x788>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a57      	ldr	r2, [pc, #348]	; (8004914 <HAL_RCC_OscConfig+0x788>)
 80047b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80047bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047be:	f7fd f917 	bl	80019f0 <HAL_GetTick>
 80047c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80047c4:	e008      	b.n	80047d8 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047c6:	f7fd f913 	bl	80019f0 <HAL_GetTick>
 80047ca:	4602      	mov	r2, r0
 80047cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ce:	1ad3      	subs	r3, r2, r3
 80047d0:	2b02      	cmp	r3, #2
 80047d2:	d901      	bls.n	80047d8 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 80047d4:	2303      	movs	r3, #3
 80047d6:	e0e2      	b.n	800499e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80047d8:	4b4e      	ldr	r3, [pc, #312]	; (8004914 <HAL_RCC_OscConfig+0x788>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d1f0      	bne.n	80047c6 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80047e4:	4b4b      	ldr	r3, [pc, #300]	; (8004914 <HAL_RCC_OscConfig+0x788>)
 80047e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80047e8:	4b4b      	ldr	r3, [pc, #300]	; (8004918 <HAL_RCC_OscConfig+0x78c>)
 80047ea:	4013      	ands	r3, r2
 80047ec:	687a      	ldr	r2, [r7, #4]
 80047ee:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80047f0:	687a      	ldr	r2, [r7, #4]
 80047f2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80047f4:	0112      	lsls	r2, r2, #4
 80047f6:	430a      	orrs	r2, r1
 80047f8:	4946      	ldr	r1, [pc, #280]	; (8004914 <HAL_RCC_OscConfig+0x788>)
 80047fa:	4313      	orrs	r3, r2
 80047fc:	628b      	str	r3, [r1, #40]	; 0x28
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004802:	3b01      	subs	r3, #1
 8004804:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800480c:	3b01      	subs	r3, #1
 800480e:	025b      	lsls	r3, r3, #9
 8004810:	b29b      	uxth	r3, r3
 8004812:	431a      	orrs	r2, r3
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004818:	3b01      	subs	r3, #1
 800481a:	041b      	lsls	r3, r3, #16
 800481c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004820:	431a      	orrs	r2, r3
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004826:	3b01      	subs	r3, #1
 8004828:	061b      	lsls	r3, r3, #24
 800482a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800482e:	4939      	ldr	r1, [pc, #228]	; (8004914 <HAL_RCC_OscConfig+0x788>)
 8004830:	4313      	orrs	r3, r2
 8004832:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8004834:	4b37      	ldr	r3, [pc, #220]	; (8004914 <HAL_RCC_OscConfig+0x788>)
 8004836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004838:	4a36      	ldr	r2, [pc, #216]	; (8004914 <HAL_RCC_OscConfig+0x788>)
 800483a:	f023 0301 	bic.w	r3, r3, #1
 800483e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004840:	4b34      	ldr	r3, [pc, #208]	; (8004914 <HAL_RCC_OscConfig+0x788>)
 8004842:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004844:	4b35      	ldr	r3, [pc, #212]	; (800491c <HAL_RCC_OscConfig+0x790>)
 8004846:	4013      	ands	r3, r2
 8004848:	687a      	ldr	r2, [r7, #4]
 800484a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800484c:	00d2      	lsls	r2, r2, #3
 800484e:	4931      	ldr	r1, [pc, #196]	; (8004914 <HAL_RCC_OscConfig+0x788>)
 8004850:	4313      	orrs	r3, r2
 8004852:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004854:	4b2f      	ldr	r3, [pc, #188]	; (8004914 <HAL_RCC_OscConfig+0x788>)
 8004856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004858:	f023 020c 	bic.w	r2, r3, #12
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004860:	492c      	ldr	r1, [pc, #176]	; (8004914 <HAL_RCC_OscConfig+0x788>)
 8004862:	4313      	orrs	r3, r2
 8004864:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004866:	4b2b      	ldr	r3, [pc, #172]	; (8004914 <HAL_RCC_OscConfig+0x788>)
 8004868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800486a:	f023 0202 	bic.w	r2, r3, #2
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004872:	4928      	ldr	r1, [pc, #160]	; (8004914 <HAL_RCC_OscConfig+0x788>)
 8004874:	4313      	orrs	r3, r2
 8004876:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004878:	4b26      	ldr	r3, [pc, #152]	; (8004914 <HAL_RCC_OscConfig+0x788>)
 800487a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800487c:	4a25      	ldr	r2, [pc, #148]	; (8004914 <HAL_RCC_OscConfig+0x788>)
 800487e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004882:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004884:	4b23      	ldr	r3, [pc, #140]	; (8004914 <HAL_RCC_OscConfig+0x788>)
 8004886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004888:	4a22      	ldr	r2, [pc, #136]	; (8004914 <HAL_RCC_OscConfig+0x788>)
 800488a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800488e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004890:	4b20      	ldr	r3, [pc, #128]	; (8004914 <HAL_RCC_OscConfig+0x788>)
 8004892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004894:	4a1f      	ldr	r2, [pc, #124]	; (8004914 <HAL_RCC_OscConfig+0x788>)
 8004896:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800489a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800489c:	4b1d      	ldr	r3, [pc, #116]	; (8004914 <HAL_RCC_OscConfig+0x788>)
 800489e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a0:	4a1c      	ldr	r2, [pc, #112]	; (8004914 <HAL_RCC_OscConfig+0x788>)
 80048a2:	f043 0301 	orr.w	r3, r3, #1
 80048a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048a8:	4b1a      	ldr	r3, [pc, #104]	; (8004914 <HAL_RCC_OscConfig+0x788>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a19      	ldr	r2, [pc, #100]	; (8004914 <HAL_RCC_OscConfig+0x788>)
 80048ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80048b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048b4:	f7fd f89c 	bl	80019f0 <HAL_GetTick>
 80048b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80048ba:	e008      	b.n	80048ce <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048bc:	f7fd f898 	bl	80019f0 <HAL_GetTick>
 80048c0:	4602      	mov	r2, r0
 80048c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c4:	1ad3      	subs	r3, r2, r3
 80048c6:	2b02      	cmp	r3, #2
 80048c8:	d901      	bls.n	80048ce <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 80048ca:	2303      	movs	r3, #3
 80048cc:	e067      	b.n	800499e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80048ce:	4b11      	ldr	r3, [pc, #68]	; (8004914 <HAL_RCC_OscConfig+0x788>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d0f0      	beq.n	80048bc <HAL_RCC_OscConfig+0x730>
 80048da:	e05f      	b.n	800499c <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048dc:	4b0d      	ldr	r3, [pc, #52]	; (8004914 <HAL_RCC_OscConfig+0x788>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a0c      	ldr	r2, [pc, #48]	; (8004914 <HAL_RCC_OscConfig+0x788>)
 80048e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80048e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048e8:	f7fd f882 	bl	80019f0 <HAL_GetTick>
 80048ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80048ee:	e008      	b.n	8004902 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048f0:	f7fd f87e 	bl	80019f0 <HAL_GetTick>
 80048f4:	4602      	mov	r2, r0
 80048f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f8:	1ad3      	subs	r3, r2, r3
 80048fa:	2b02      	cmp	r3, #2
 80048fc:	d901      	bls.n	8004902 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 80048fe:	2303      	movs	r3, #3
 8004900:	e04d      	b.n	800499e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004902:	4b04      	ldr	r3, [pc, #16]	; (8004914 <HAL_RCC_OscConfig+0x788>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800490a:	2b00      	cmp	r3, #0
 800490c:	d1f0      	bne.n	80048f0 <HAL_RCC_OscConfig+0x764>
 800490e:	e045      	b.n	800499c <HAL_RCC_OscConfig+0x810>
 8004910:	58024800 	.word	0x58024800
 8004914:	58024400 	.word	0x58024400
 8004918:	fffffc0c 	.word	0xfffffc0c
 800491c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004920:	4b21      	ldr	r3, [pc, #132]	; (80049a8 <HAL_RCC_OscConfig+0x81c>)
 8004922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004924:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004926:	4b20      	ldr	r3, [pc, #128]	; (80049a8 <HAL_RCC_OscConfig+0x81c>)
 8004928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800492a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004930:	2b01      	cmp	r3, #1
 8004932:	d031      	beq.n	8004998 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	f003 0203 	and.w	r2, r3, #3
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800493e:	429a      	cmp	r2, r3
 8004940:	d12a      	bne.n	8004998 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	091b      	lsrs	r3, r3, #4
 8004946:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800494e:	429a      	cmp	r2, r3
 8004950:	d122      	bne.n	8004998 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800495c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800495e:	429a      	cmp	r2, r3
 8004960:	d11a      	bne.n	8004998 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	0a5b      	lsrs	r3, r3, #9
 8004966:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800496e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004970:	429a      	cmp	r2, r3
 8004972:	d111      	bne.n	8004998 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	0c1b      	lsrs	r3, r3, #16
 8004978:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004980:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004982:	429a      	cmp	r2, r3
 8004984:	d108      	bne.n	8004998 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	0e1b      	lsrs	r3, r3, #24
 800498a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004992:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004994:	429a      	cmp	r2, r3
 8004996:	d001      	beq.n	800499c <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8004998:	2301      	movs	r3, #1
 800499a:	e000      	b.n	800499e <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 800499c:	2300      	movs	r3, #0
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3730      	adds	r7, #48	; 0x30
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}
 80049a6:	bf00      	nop
 80049a8:	58024400 	.word	0x58024400

080049ac <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b086      	sub	sp, #24
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
 80049b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d101      	bne.n	80049c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	e19c      	b.n	8004cfa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80049c0:	4b8a      	ldr	r3, [pc, #552]	; (8004bec <HAL_RCC_ClockConfig+0x240>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 030f 	and.w	r3, r3, #15
 80049c8:	683a      	ldr	r2, [r7, #0]
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d910      	bls.n	80049f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049ce:	4b87      	ldr	r3, [pc, #540]	; (8004bec <HAL_RCC_ClockConfig+0x240>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f023 020f 	bic.w	r2, r3, #15
 80049d6:	4985      	ldr	r1, [pc, #532]	; (8004bec <HAL_RCC_ClockConfig+0x240>)
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	4313      	orrs	r3, r2
 80049dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049de:	4b83      	ldr	r3, [pc, #524]	; (8004bec <HAL_RCC_ClockConfig+0x240>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 030f 	and.w	r3, r3, #15
 80049e6:	683a      	ldr	r2, [r7, #0]
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d001      	beq.n	80049f0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80049ec:	2301      	movs	r3, #1
 80049ee:	e184      	b.n	8004cfa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f003 0304 	and.w	r3, r3, #4
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d010      	beq.n	8004a1e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	691a      	ldr	r2, [r3, #16]
 8004a00:	4b7b      	ldr	r3, [pc, #492]	; (8004bf0 <HAL_RCC_ClockConfig+0x244>)
 8004a02:	699b      	ldr	r3, [r3, #24]
 8004a04:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d908      	bls.n	8004a1e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004a0c:	4b78      	ldr	r3, [pc, #480]	; (8004bf0 <HAL_RCC_ClockConfig+0x244>)
 8004a0e:	699b      	ldr	r3, [r3, #24]
 8004a10:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	691b      	ldr	r3, [r3, #16]
 8004a18:	4975      	ldr	r1, [pc, #468]	; (8004bf0 <HAL_RCC_ClockConfig+0x244>)
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f003 0308 	and.w	r3, r3, #8
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d010      	beq.n	8004a4c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	695a      	ldr	r2, [r3, #20]
 8004a2e:	4b70      	ldr	r3, [pc, #448]	; (8004bf0 <HAL_RCC_ClockConfig+0x244>)
 8004a30:	69db      	ldr	r3, [r3, #28]
 8004a32:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d908      	bls.n	8004a4c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004a3a:	4b6d      	ldr	r3, [pc, #436]	; (8004bf0 <HAL_RCC_ClockConfig+0x244>)
 8004a3c:	69db      	ldr	r3, [r3, #28]
 8004a3e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	695b      	ldr	r3, [r3, #20]
 8004a46:	496a      	ldr	r1, [pc, #424]	; (8004bf0 <HAL_RCC_ClockConfig+0x244>)
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f003 0310 	and.w	r3, r3, #16
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d010      	beq.n	8004a7a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	699a      	ldr	r2, [r3, #24]
 8004a5c:	4b64      	ldr	r3, [pc, #400]	; (8004bf0 <HAL_RCC_ClockConfig+0x244>)
 8004a5e:	69db      	ldr	r3, [r3, #28]
 8004a60:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004a64:	429a      	cmp	r2, r3
 8004a66:	d908      	bls.n	8004a7a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004a68:	4b61      	ldr	r3, [pc, #388]	; (8004bf0 <HAL_RCC_ClockConfig+0x244>)
 8004a6a:	69db      	ldr	r3, [r3, #28]
 8004a6c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	699b      	ldr	r3, [r3, #24]
 8004a74:	495e      	ldr	r1, [pc, #376]	; (8004bf0 <HAL_RCC_ClockConfig+0x244>)
 8004a76:	4313      	orrs	r3, r2
 8004a78:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 0320 	and.w	r3, r3, #32
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d010      	beq.n	8004aa8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	69da      	ldr	r2, [r3, #28]
 8004a8a:	4b59      	ldr	r3, [pc, #356]	; (8004bf0 <HAL_RCC_ClockConfig+0x244>)
 8004a8c:	6a1b      	ldr	r3, [r3, #32]
 8004a8e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004a92:	429a      	cmp	r2, r3
 8004a94:	d908      	bls.n	8004aa8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004a96:	4b56      	ldr	r3, [pc, #344]	; (8004bf0 <HAL_RCC_ClockConfig+0x244>)
 8004a98:	6a1b      	ldr	r3, [r3, #32]
 8004a9a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	69db      	ldr	r3, [r3, #28]
 8004aa2:	4953      	ldr	r1, [pc, #332]	; (8004bf0 <HAL_RCC_ClockConfig+0x244>)
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f003 0302 	and.w	r3, r3, #2
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d010      	beq.n	8004ad6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	68da      	ldr	r2, [r3, #12]
 8004ab8:	4b4d      	ldr	r3, [pc, #308]	; (8004bf0 <HAL_RCC_ClockConfig+0x244>)
 8004aba:	699b      	ldr	r3, [r3, #24]
 8004abc:	f003 030f 	and.w	r3, r3, #15
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d908      	bls.n	8004ad6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ac4:	4b4a      	ldr	r3, [pc, #296]	; (8004bf0 <HAL_RCC_ClockConfig+0x244>)
 8004ac6:	699b      	ldr	r3, [r3, #24]
 8004ac8:	f023 020f 	bic.w	r2, r3, #15
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	68db      	ldr	r3, [r3, #12]
 8004ad0:	4947      	ldr	r1, [pc, #284]	; (8004bf0 <HAL_RCC_ClockConfig+0x244>)
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 0301 	and.w	r3, r3, #1
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d055      	beq.n	8004b8e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004ae2:	4b43      	ldr	r3, [pc, #268]	; (8004bf0 <HAL_RCC_ClockConfig+0x244>)
 8004ae4:	699b      	ldr	r3, [r3, #24]
 8004ae6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	4940      	ldr	r1, [pc, #256]	; (8004bf0 <HAL_RCC_ClockConfig+0x244>)
 8004af0:	4313      	orrs	r3, r2
 8004af2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	2b02      	cmp	r3, #2
 8004afa:	d107      	bne.n	8004b0c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004afc:	4b3c      	ldr	r3, [pc, #240]	; (8004bf0 <HAL_RCC_ClockConfig+0x244>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d121      	bne.n	8004b4c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e0f6      	b.n	8004cfa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	2b03      	cmp	r3, #3
 8004b12:	d107      	bne.n	8004b24 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004b14:	4b36      	ldr	r3, [pc, #216]	; (8004bf0 <HAL_RCC_ClockConfig+0x244>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d115      	bne.n	8004b4c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	e0ea      	b.n	8004cfa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d107      	bne.n	8004b3c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004b2c:	4b30      	ldr	r3, [pc, #192]	; (8004bf0 <HAL_RCC_ClockConfig+0x244>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d109      	bne.n	8004b4c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	e0de      	b.n	8004cfa <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b3c:	4b2c      	ldr	r3, [pc, #176]	; (8004bf0 <HAL_RCC_ClockConfig+0x244>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f003 0304 	and.w	r3, r3, #4
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d101      	bne.n	8004b4c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	e0d6      	b.n	8004cfa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004b4c:	4b28      	ldr	r3, [pc, #160]	; (8004bf0 <HAL_RCC_ClockConfig+0x244>)
 8004b4e:	691b      	ldr	r3, [r3, #16]
 8004b50:	f023 0207 	bic.w	r2, r3, #7
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	4925      	ldr	r1, [pc, #148]	; (8004bf0 <HAL_RCC_ClockConfig+0x244>)
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b5e:	f7fc ff47 	bl	80019f0 <HAL_GetTick>
 8004b62:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b64:	e00a      	b.n	8004b7c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b66:	f7fc ff43 	bl	80019f0 <HAL_GetTick>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	1ad3      	subs	r3, r2, r3
 8004b70:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d901      	bls.n	8004b7c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004b78:	2303      	movs	r3, #3
 8004b7a:	e0be      	b.n	8004cfa <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b7c:	4b1c      	ldr	r3, [pc, #112]	; (8004bf0 <HAL_RCC_ClockConfig+0x244>)
 8004b7e:	691b      	ldr	r3, [r3, #16]
 8004b80:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	00db      	lsls	r3, r3, #3
 8004b8a:	429a      	cmp	r2, r3
 8004b8c:	d1eb      	bne.n	8004b66 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f003 0302 	and.w	r3, r3, #2
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d010      	beq.n	8004bbc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	68da      	ldr	r2, [r3, #12]
 8004b9e:	4b14      	ldr	r3, [pc, #80]	; (8004bf0 <HAL_RCC_ClockConfig+0x244>)
 8004ba0:	699b      	ldr	r3, [r3, #24]
 8004ba2:	f003 030f 	and.w	r3, r3, #15
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d208      	bcs.n	8004bbc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004baa:	4b11      	ldr	r3, [pc, #68]	; (8004bf0 <HAL_RCC_ClockConfig+0x244>)
 8004bac:	699b      	ldr	r3, [r3, #24]
 8004bae:	f023 020f 	bic.w	r2, r3, #15
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	68db      	ldr	r3, [r3, #12]
 8004bb6:	490e      	ldr	r1, [pc, #56]	; (8004bf0 <HAL_RCC_ClockConfig+0x244>)
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004bbc:	4b0b      	ldr	r3, [pc, #44]	; (8004bec <HAL_RCC_ClockConfig+0x240>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f003 030f 	and.w	r3, r3, #15
 8004bc4:	683a      	ldr	r2, [r7, #0]
 8004bc6:	429a      	cmp	r2, r3
 8004bc8:	d214      	bcs.n	8004bf4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bca:	4b08      	ldr	r3, [pc, #32]	; (8004bec <HAL_RCC_ClockConfig+0x240>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f023 020f 	bic.w	r2, r3, #15
 8004bd2:	4906      	ldr	r1, [pc, #24]	; (8004bec <HAL_RCC_ClockConfig+0x240>)
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bda:	4b04      	ldr	r3, [pc, #16]	; (8004bec <HAL_RCC_ClockConfig+0x240>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f003 030f 	and.w	r3, r3, #15
 8004be2:	683a      	ldr	r2, [r7, #0]
 8004be4:	429a      	cmp	r2, r3
 8004be6:	d005      	beq.n	8004bf4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	e086      	b.n	8004cfa <HAL_RCC_ClockConfig+0x34e>
 8004bec:	52002000 	.word	0x52002000
 8004bf0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f003 0304 	and.w	r3, r3, #4
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d010      	beq.n	8004c22 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	691a      	ldr	r2, [r3, #16]
 8004c04:	4b3f      	ldr	r3, [pc, #252]	; (8004d04 <HAL_RCC_ClockConfig+0x358>)
 8004c06:	699b      	ldr	r3, [r3, #24]
 8004c08:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	d208      	bcs.n	8004c22 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004c10:	4b3c      	ldr	r3, [pc, #240]	; (8004d04 <HAL_RCC_ClockConfig+0x358>)
 8004c12:	699b      	ldr	r3, [r3, #24]
 8004c14:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	691b      	ldr	r3, [r3, #16]
 8004c1c:	4939      	ldr	r1, [pc, #228]	; (8004d04 <HAL_RCC_ClockConfig+0x358>)
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 0308 	and.w	r3, r3, #8
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d010      	beq.n	8004c50 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	695a      	ldr	r2, [r3, #20]
 8004c32:	4b34      	ldr	r3, [pc, #208]	; (8004d04 <HAL_RCC_ClockConfig+0x358>)
 8004c34:	69db      	ldr	r3, [r3, #28]
 8004c36:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	d208      	bcs.n	8004c50 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004c3e:	4b31      	ldr	r3, [pc, #196]	; (8004d04 <HAL_RCC_ClockConfig+0x358>)
 8004c40:	69db      	ldr	r3, [r3, #28]
 8004c42:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	695b      	ldr	r3, [r3, #20]
 8004c4a:	492e      	ldr	r1, [pc, #184]	; (8004d04 <HAL_RCC_ClockConfig+0x358>)
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f003 0310 	and.w	r3, r3, #16
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d010      	beq.n	8004c7e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	699a      	ldr	r2, [r3, #24]
 8004c60:	4b28      	ldr	r3, [pc, #160]	; (8004d04 <HAL_RCC_ClockConfig+0x358>)
 8004c62:	69db      	ldr	r3, [r3, #28]
 8004c64:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d208      	bcs.n	8004c7e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004c6c:	4b25      	ldr	r3, [pc, #148]	; (8004d04 <HAL_RCC_ClockConfig+0x358>)
 8004c6e:	69db      	ldr	r3, [r3, #28]
 8004c70:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	699b      	ldr	r3, [r3, #24]
 8004c78:	4922      	ldr	r1, [pc, #136]	; (8004d04 <HAL_RCC_ClockConfig+0x358>)
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f003 0320 	and.w	r3, r3, #32
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d010      	beq.n	8004cac <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	69da      	ldr	r2, [r3, #28]
 8004c8e:	4b1d      	ldr	r3, [pc, #116]	; (8004d04 <HAL_RCC_ClockConfig+0x358>)
 8004c90:	6a1b      	ldr	r3, [r3, #32]
 8004c92:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004c96:	429a      	cmp	r2, r3
 8004c98:	d208      	bcs.n	8004cac <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004c9a:	4b1a      	ldr	r3, [pc, #104]	; (8004d04 <HAL_RCC_ClockConfig+0x358>)
 8004c9c:	6a1b      	ldr	r3, [r3, #32]
 8004c9e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	69db      	ldr	r3, [r3, #28]
 8004ca6:	4917      	ldr	r1, [pc, #92]	; (8004d04 <HAL_RCC_ClockConfig+0x358>)
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004cac:	f000 f834 	bl	8004d18 <HAL_RCC_GetSysClockFreq>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	4b14      	ldr	r3, [pc, #80]	; (8004d04 <HAL_RCC_ClockConfig+0x358>)
 8004cb4:	699b      	ldr	r3, [r3, #24]
 8004cb6:	0a1b      	lsrs	r3, r3, #8
 8004cb8:	f003 030f 	and.w	r3, r3, #15
 8004cbc:	4912      	ldr	r1, [pc, #72]	; (8004d08 <HAL_RCC_ClockConfig+0x35c>)
 8004cbe:	5ccb      	ldrb	r3, [r1, r3]
 8004cc0:	f003 031f 	and.w	r3, r3, #31
 8004cc4:	fa22 f303 	lsr.w	r3, r2, r3
 8004cc8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004cca:	4b0e      	ldr	r3, [pc, #56]	; (8004d04 <HAL_RCC_ClockConfig+0x358>)
 8004ccc:	699b      	ldr	r3, [r3, #24]
 8004cce:	f003 030f 	and.w	r3, r3, #15
 8004cd2:	4a0d      	ldr	r2, [pc, #52]	; (8004d08 <HAL_RCC_ClockConfig+0x35c>)
 8004cd4:	5cd3      	ldrb	r3, [r2, r3]
 8004cd6:	f003 031f 	and.w	r3, r3, #31
 8004cda:	693a      	ldr	r2, [r7, #16]
 8004cdc:	fa22 f303 	lsr.w	r3, r2, r3
 8004ce0:	4a0a      	ldr	r2, [pc, #40]	; (8004d0c <HAL_RCC_ClockConfig+0x360>)
 8004ce2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004ce4:	4a0a      	ldr	r2, [pc, #40]	; (8004d10 <HAL_RCC_ClockConfig+0x364>)
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8004cea:	4b0a      	ldr	r3, [pc, #40]	; (8004d14 <HAL_RCC_ClockConfig+0x368>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f7fc f8ac 	bl	8000e4c <HAL_InitTick>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3718      	adds	r7, #24
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}
 8004d02:	bf00      	nop
 8004d04:	58024400 	.word	0x58024400
 8004d08:	0801aa8c 	.word	0x0801aa8c
 8004d0c:	24000004 	.word	0x24000004
 8004d10:	24000000 	.word	0x24000000
 8004d14:	24000008 	.word	0x24000008

08004d18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b089      	sub	sp, #36	; 0x24
 8004d1c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d1e:	4bb3      	ldr	r3, [pc, #716]	; (8004fec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d20:	691b      	ldr	r3, [r3, #16]
 8004d22:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d26:	2b18      	cmp	r3, #24
 8004d28:	f200 8155 	bhi.w	8004fd6 <HAL_RCC_GetSysClockFreq+0x2be>
 8004d2c:	a201      	add	r2, pc, #4	; (adr r2, 8004d34 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d32:	bf00      	nop
 8004d34:	08004d99 	.word	0x08004d99
 8004d38:	08004fd7 	.word	0x08004fd7
 8004d3c:	08004fd7 	.word	0x08004fd7
 8004d40:	08004fd7 	.word	0x08004fd7
 8004d44:	08004fd7 	.word	0x08004fd7
 8004d48:	08004fd7 	.word	0x08004fd7
 8004d4c:	08004fd7 	.word	0x08004fd7
 8004d50:	08004fd7 	.word	0x08004fd7
 8004d54:	08004dbf 	.word	0x08004dbf
 8004d58:	08004fd7 	.word	0x08004fd7
 8004d5c:	08004fd7 	.word	0x08004fd7
 8004d60:	08004fd7 	.word	0x08004fd7
 8004d64:	08004fd7 	.word	0x08004fd7
 8004d68:	08004fd7 	.word	0x08004fd7
 8004d6c:	08004fd7 	.word	0x08004fd7
 8004d70:	08004fd7 	.word	0x08004fd7
 8004d74:	08004dc5 	.word	0x08004dc5
 8004d78:	08004fd7 	.word	0x08004fd7
 8004d7c:	08004fd7 	.word	0x08004fd7
 8004d80:	08004fd7 	.word	0x08004fd7
 8004d84:	08004fd7 	.word	0x08004fd7
 8004d88:	08004fd7 	.word	0x08004fd7
 8004d8c:	08004fd7 	.word	0x08004fd7
 8004d90:	08004fd7 	.word	0x08004fd7
 8004d94:	08004dcb 	.word	0x08004dcb
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d98:	4b94      	ldr	r3, [pc, #592]	; (8004fec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f003 0320 	and.w	r3, r3, #32
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d009      	beq.n	8004db8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004da4:	4b91      	ldr	r3, [pc, #580]	; (8004fec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	08db      	lsrs	r3, r3, #3
 8004daa:	f003 0303 	and.w	r3, r3, #3
 8004dae:	4a90      	ldr	r2, [pc, #576]	; (8004ff0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004db0:	fa22 f303 	lsr.w	r3, r2, r3
 8004db4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8004db6:	e111      	b.n	8004fdc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004db8:	4b8d      	ldr	r3, [pc, #564]	; (8004ff0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004dba:	61bb      	str	r3, [r7, #24]
    break;
 8004dbc:	e10e      	b.n	8004fdc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004dbe:	4b8d      	ldr	r3, [pc, #564]	; (8004ff4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004dc0:	61bb      	str	r3, [r7, #24]
    break;
 8004dc2:	e10b      	b.n	8004fdc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004dc4:	4b8c      	ldr	r3, [pc, #560]	; (8004ff8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004dc6:	61bb      	str	r3, [r7, #24]
    break;
 8004dc8:	e108      	b.n	8004fdc <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004dca:	4b88      	ldr	r3, [pc, #544]	; (8004fec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dce:	f003 0303 	and.w	r3, r3, #3
 8004dd2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004dd4:	4b85      	ldr	r3, [pc, #532]	; (8004fec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dd8:	091b      	lsrs	r3, r3, #4
 8004dda:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004dde:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004de0:	4b82      	ldr	r3, [pc, #520]	; (8004fec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de4:	f003 0301 	and.w	r3, r3, #1
 8004de8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004dea:	4b80      	ldr	r3, [pc, #512]	; (8004fec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004dec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dee:	08db      	lsrs	r3, r3, #3
 8004df0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004df4:	68fa      	ldr	r2, [r7, #12]
 8004df6:	fb02 f303 	mul.w	r3, r2, r3
 8004dfa:	ee07 3a90 	vmov	s15, r3
 8004dfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e02:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	f000 80e1 	beq.w	8004fd0 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	2b02      	cmp	r3, #2
 8004e12:	f000 8083 	beq.w	8004f1c <HAL_RCC_GetSysClockFreq+0x204>
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	2b02      	cmp	r3, #2
 8004e1a:	f200 80a1 	bhi.w	8004f60 <HAL_RCC_GetSysClockFreq+0x248>
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d003      	beq.n	8004e2c <HAL_RCC_GetSysClockFreq+0x114>
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d056      	beq.n	8004ed8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004e2a:	e099      	b.n	8004f60 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004e2c:	4b6f      	ldr	r3, [pc, #444]	; (8004fec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f003 0320 	and.w	r3, r3, #32
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d02d      	beq.n	8004e94 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004e38:	4b6c      	ldr	r3, [pc, #432]	; (8004fec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	08db      	lsrs	r3, r3, #3
 8004e3e:	f003 0303 	and.w	r3, r3, #3
 8004e42:	4a6b      	ldr	r2, [pc, #428]	; (8004ff0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004e44:	fa22 f303 	lsr.w	r3, r2, r3
 8004e48:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	ee07 3a90 	vmov	s15, r3
 8004e50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	ee07 3a90 	vmov	s15, r3
 8004e5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e62:	4b62      	ldr	r3, [pc, #392]	; (8004fec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e6a:	ee07 3a90 	vmov	s15, r3
 8004e6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e72:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e76:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004ffc <HAL_RCC_GetSysClockFreq+0x2e4>
 8004e7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e8e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004e92:	e087      	b.n	8004fa4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	ee07 3a90 	vmov	s15, r3
 8004e9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e9e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005000 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004ea2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ea6:	4b51      	ldr	r3, [pc, #324]	; (8004fec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004eae:	ee07 3a90 	vmov	s15, r3
 8004eb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004eb6:	ed97 6a02 	vldr	s12, [r7, #8]
 8004eba:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004ffc <HAL_RCC_GetSysClockFreq+0x2e4>
 8004ebe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ec2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ec6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004eca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ece:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ed2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ed6:	e065      	b.n	8004fa4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	ee07 3a90 	vmov	s15, r3
 8004ede:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ee2:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005004 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004ee6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004eea:	4b40      	ldr	r3, [pc, #256]	; (8004fec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ef2:	ee07 3a90 	vmov	s15, r3
 8004ef6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004efa:	ed97 6a02 	vldr	s12, [r7, #8]
 8004efe:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004ffc <HAL_RCC_GetSysClockFreq+0x2e4>
 8004f02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f1a:	e043      	b.n	8004fa4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	ee07 3a90 	vmov	s15, r3
 8004f22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f26:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005008 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004f2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f2e:	4b2f      	ldr	r3, [pc, #188]	; (8004fec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f36:	ee07 3a90 	vmov	s15, r3
 8004f3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f3e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004f42:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004ffc <HAL_RCC_GetSysClockFreq+0x2e4>
 8004f46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f5e:	e021      	b.n	8004fa4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	ee07 3a90 	vmov	s15, r3
 8004f66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f6a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005004 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004f6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f72:	4b1e      	ldr	r3, [pc, #120]	; (8004fec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f7a:	ee07 3a90 	vmov	s15, r3
 8004f7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f82:	ed97 6a02 	vldr	s12, [r7, #8]
 8004f86:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004ffc <HAL_RCC_GetSysClockFreq+0x2e4>
 8004f8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004fa2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004fa4:	4b11      	ldr	r3, [pc, #68]	; (8004fec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fa8:	0a5b      	lsrs	r3, r3, #9
 8004faa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fae:	3301      	adds	r3, #1
 8004fb0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	ee07 3a90 	vmov	s15, r3
 8004fb8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004fbc:	edd7 6a07 	vldr	s13, [r7, #28]
 8004fc0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004fc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004fc8:	ee17 3a90 	vmov	r3, s15
 8004fcc:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004fce:	e005      	b.n	8004fdc <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	61bb      	str	r3, [r7, #24]
    break;
 8004fd4:	e002      	b.n	8004fdc <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8004fd6:	4b07      	ldr	r3, [pc, #28]	; (8004ff4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004fd8:	61bb      	str	r3, [r7, #24]
    break;
 8004fda:	bf00      	nop
  }

  return sysclockfreq;
 8004fdc:	69bb      	ldr	r3, [r7, #24]
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3724      	adds	r7, #36	; 0x24
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe8:	4770      	bx	lr
 8004fea:	bf00      	nop
 8004fec:	58024400 	.word	0x58024400
 8004ff0:	03d09000 	.word	0x03d09000
 8004ff4:	003d0900 	.word	0x003d0900
 8004ff8:	007a1200 	.word	0x007a1200
 8004ffc:	46000000 	.word	0x46000000
 8005000:	4c742400 	.word	0x4c742400
 8005004:	4a742400 	.word	0x4a742400
 8005008:	4af42400 	.word	0x4af42400

0800500c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b082      	sub	sp, #8
 8005010:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005012:	f7ff fe81 	bl	8004d18 <HAL_RCC_GetSysClockFreq>
 8005016:	4602      	mov	r2, r0
 8005018:	4b10      	ldr	r3, [pc, #64]	; (800505c <HAL_RCC_GetHCLKFreq+0x50>)
 800501a:	699b      	ldr	r3, [r3, #24]
 800501c:	0a1b      	lsrs	r3, r3, #8
 800501e:	f003 030f 	and.w	r3, r3, #15
 8005022:	490f      	ldr	r1, [pc, #60]	; (8005060 <HAL_RCC_GetHCLKFreq+0x54>)
 8005024:	5ccb      	ldrb	r3, [r1, r3]
 8005026:	f003 031f 	and.w	r3, r3, #31
 800502a:	fa22 f303 	lsr.w	r3, r2, r3
 800502e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005030:	4b0a      	ldr	r3, [pc, #40]	; (800505c <HAL_RCC_GetHCLKFreq+0x50>)
 8005032:	699b      	ldr	r3, [r3, #24]
 8005034:	f003 030f 	and.w	r3, r3, #15
 8005038:	4a09      	ldr	r2, [pc, #36]	; (8005060 <HAL_RCC_GetHCLKFreq+0x54>)
 800503a:	5cd3      	ldrb	r3, [r2, r3]
 800503c:	f003 031f 	and.w	r3, r3, #31
 8005040:	687a      	ldr	r2, [r7, #4]
 8005042:	fa22 f303 	lsr.w	r3, r2, r3
 8005046:	4a07      	ldr	r2, [pc, #28]	; (8005064 <HAL_RCC_GetHCLKFreq+0x58>)
 8005048:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800504a:	4a07      	ldr	r2, [pc, #28]	; (8005068 <HAL_RCC_GetHCLKFreq+0x5c>)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005050:	4b04      	ldr	r3, [pc, #16]	; (8005064 <HAL_RCC_GetHCLKFreq+0x58>)
 8005052:	681b      	ldr	r3, [r3, #0]
}
 8005054:	4618      	mov	r0, r3
 8005056:	3708      	adds	r7, #8
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}
 800505c:	58024400 	.word	0x58024400
 8005060:	0801aa8c 	.word	0x0801aa8c
 8005064:	24000004 	.word	0x24000004
 8005068:	24000000 	.word	0x24000000

0800506c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005070:	f7ff ffcc 	bl	800500c <HAL_RCC_GetHCLKFreq>
 8005074:	4602      	mov	r2, r0
 8005076:	4b06      	ldr	r3, [pc, #24]	; (8005090 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005078:	69db      	ldr	r3, [r3, #28]
 800507a:	091b      	lsrs	r3, r3, #4
 800507c:	f003 0307 	and.w	r3, r3, #7
 8005080:	4904      	ldr	r1, [pc, #16]	; (8005094 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005082:	5ccb      	ldrb	r3, [r1, r3]
 8005084:	f003 031f 	and.w	r3, r3, #31
 8005088:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800508c:	4618      	mov	r0, r3
 800508e:	bd80      	pop	{r7, pc}
 8005090:	58024400 	.word	0x58024400
 8005094:	0801aa8c 	.word	0x0801aa8c

08005098 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800509c:	f7ff ffb6 	bl	800500c <HAL_RCC_GetHCLKFreq>
 80050a0:	4602      	mov	r2, r0
 80050a2:	4b06      	ldr	r3, [pc, #24]	; (80050bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80050a4:	69db      	ldr	r3, [r3, #28]
 80050a6:	0a1b      	lsrs	r3, r3, #8
 80050a8:	f003 0307 	and.w	r3, r3, #7
 80050ac:	4904      	ldr	r1, [pc, #16]	; (80050c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80050ae:	5ccb      	ldrb	r3, [r1, r3]
 80050b0:	f003 031f 	and.w	r3, r3, #31
 80050b4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	bd80      	pop	{r7, pc}
 80050bc:	58024400 	.word	0x58024400
 80050c0:	0801aa8c 	.word	0x0801aa8c

080050c4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b083      	sub	sp, #12
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
 80050cc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	223f      	movs	r2, #63	; 0x3f
 80050d2:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80050d4:	4b1a      	ldr	r3, [pc, #104]	; (8005140 <HAL_RCC_GetClockConfig+0x7c>)
 80050d6:	691b      	ldr	r3, [r3, #16]
 80050d8:	f003 0207 	and.w	r2, r3, #7
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80050e0:	4b17      	ldr	r3, [pc, #92]	; (8005140 <HAL_RCC_GetClockConfig+0x7c>)
 80050e2:	699b      	ldr	r3, [r3, #24]
 80050e4:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80050ec:	4b14      	ldr	r3, [pc, #80]	; (8005140 <HAL_RCC_GetClockConfig+0x7c>)
 80050ee:	699b      	ldr	r3, [r3, #24]
 80050f0:	f003 020f 	and.w	r2, r3, #15
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80050f8:	4b11      	ldr	r3, [pc, #68]	; (8005140 <HAL_RCC_GetClockConfig+0x7c>)
 80050fa:	699b      	ldr	r3, [r3, #24]
 80050fc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8005104:	4b0e      	ldr	r3, [pc, #56]	; (8005140 <HAL_RCC_GetClockConfig+0x7c>)
 8005106:	69db      	ldr	r3, [r3, #28]
 8005108:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8005110:	4b0b      	ldr	r3, [pc, #44]	; (8005140 <HAL_RCC_GetClockConfig+0x7c>)
 8005112:	69db      	ldr	r3, [r3, #28]
 8005114:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800511c:	4b08      	ldr	r3, [pc, #32]	; (8005140 <HAL_RCC_GetClockConfig+0x7c>)
 800511e:	6a1b      	ldr	r3, [r3, #32]
 8005120:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005128:	4b06      	ldr	r3, [pc, #24]	; (8005144 <HAL_RCC_GetClockConfig+0x80>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f003 020f 	and.w	r2, r3, #15
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	601a      	str	r2, [r3, #0]
}
 8005134:	bf00      	nop
 8005136:	370c      	adds	r7, #12
 8005138:	46bd      	mov	sp, r7
 800513a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513e:	4770      	bx	lr
 8005140:	58024400 	.word	0x58024400
 8005144:	52002000 	.word	0x52002000

08005148 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b086      	sub	sp, #24
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005150:	2300      	movs	r3, #0
 8005152:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005154:	2300      	movs	r3, #0
 8005156:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005160:	2b00      	cmp	r3, #0
 8005162:	d03f      	beq.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005168:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800516c:	d02a      	beq.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800516e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005172:	d824      	bhi.n	80051be <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005174:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005178:	d018      	beq.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x64>
 800517a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800517e:	d81e      	bhi.n	80051be <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005180:	2b00      	cmp	r3, #0
 8005182:	d003      	beq.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005184:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005188:	d007      	beq.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800518a:	e018      	b.n	80051be <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800518c:	4bab      	ldr	r3, [pc, #684]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800518e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005190:	4aaa      	ldr	r2, [pc, #680]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005192:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005196:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005198:	e015      	b.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	3304      	adds	r3, #4
 800519e:	2102      	movs	r1, #2
 80051a0:	4618      	mov	r0, r3
 80051a2:	f001 f9cf 	bl	8006544 <RCCEx_PLL2_Config>
 80051a6:	4603      	mov	r3, r0
 80051a8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80051aa:	e00c      	b.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	3324      	adds	r3, #36	; 0x24
 80051b0:	2102      	movs	r1, #2
 80051b2:	4618      	mov	r0, r3
 80051b4:	f001 fa78 	bl	80066a8 <RCCEx_PLL3_Config>
 80051b8:	4603      	mov	r3, r0
 80051ba:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80051bc:	e003      	b.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80051be:	2301      	movs	r3, #1
 80051c0:	75fb      	strb	r3, [r7, #23]
      break;
 80051c2:	e000      	b.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80051c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051c6:	7dfb      	ldrb	r3, [r7, #23]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d109      	bne.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80051cc:	4b9b      	ldr	r3, [pc, #620]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80051ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051d0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051d8:	4998      	ldr	r1, [pc, #608]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80051da:	4313      	orrs	r3, r2
 80051dc:	650b      	str	r3, [r1, #80]	; 0x50
 80051de:	e001      	b.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051e0:	7dfb      	ldrb	r3, [r7, #23]
 80051e2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d03d      	beq.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051f4:	2b04      	cmp	r3, #4
 80051f6:	d826      	bhi.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80051f8:	a201      	add	r2, pc, #4	; (adr r2, 8005200 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80051fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051fe:	bf00      	nop
 8005200:	08005215 	.word	0x08005215
 8005204:	08005223 	.word	0x08005223
 8005208:	08005235 	.word	0x08005235
 800520c:	0800524d 	.word	0x0800524d
 8005210:	0800524d 	.word	0x0800524d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005214:	4b89      	ldr	r3, [pc, #548]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005218:	4a88      	ldr	r2, [pc, #544]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800521a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800521e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005220:	e015      	b.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	3304      	adds	r3, #4
 8005226:	2100      	movs	r1, #0
 8005228:	4618      	mov	r0, r3
 800522a:	f001 f98b 	bl	8006544 <RCCEx_PLL2_Config>
 800522e:	4603      	mov	r3, r0
 8005230:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005232:	e00c      	b.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	3324      	adds	r3, #36	; 0x24
 8005238:	2100      	movs	r1, #0
 800523a:	4618      	mov	r0, r3
 800523c:	f001 fa34 	bl	80066a8 <RCCEx_PLL3_Config>
 8005240:	4603      	mov	r3, r0
 8005242:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005244:	e003      	b.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	75fb      	strb	r3, [r7, #23]
      break;
 800524a:	e000      	b.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800524c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800524e:	7dfb      	ldrb	r3, [r7, #23]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d109      	bne.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005254:	4b79      	ldr	r3, [pc, #484]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005256:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005258:	f023 0207 	bic.w	r2, r3, #7
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005260:	4976      	ldr	r1, [pc, #472]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005262:	4313      	orrs	r3, r2
 8005264:	650b      	str	r3, [r1, #80]	; 0x50
 8005266:	e001      	b.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005268:	7dfb      	ldrb	r3, [r7, #23]
 800526a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005274:	2b00      	cmp	r3, #0
 8005276:	d042      	beq.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800527c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005280:	d02b      	beq.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x192>
 8005282:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005286:	d825      	bhi.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005288:	2bc0      	cmp	r3, #192	; 0xc0
 800528a:	d028      	beq.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x196>
 800528c:	2bc0      	cmp	r3, #192	; 0xc0
 800528e:	d821      	bhi.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005290:	2b80      	cmp	r3, #128	; 0x80
 8005292:	d016      	beq.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8005294:	2b80      	cmp	r3, #128	; 0x80
 8005296:	d81d      	bhi.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005298:	2b00      	cmp	r3, #0
 800529a:	d002      	beq.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800529c:	2b40      	cmp	r3, #64	; 0x40
 800529e:	d007      	beq.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80052a0:	e018      	b.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052a2:	4b66      	ldr	r3, [pc, #408]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80052a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052a6:	4a65      	ldr	r2, [pc, #404]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80052a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052ac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80052ae:	e017      	b.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	3304      	adds	r3, #4
 80052b4:	2100      	movs	r1, #0
 80052b6:	4618      	mov	r0, r3
 80052b8:	f001 f944 	bl	8006544 <RCCEx_PLL2_Config>
 80052bc:	4603      	mov	r3, r0
 80052be:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80052c0:	e00e      	b.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	3324      	adds	r3, #36	; 0x24
 80052c6:	2100      	movs	r1, #0
 80052c8:	4618      	mov	r0, r3
 80052ca:	f001 f9ed 	bl	80066a8 <RCCEx_PLL3_Config>
 80052ce:	4603      	mov	r3, r0
 80052d0:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80052d2:	e005      	b.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80052d4:	2301      	movs	r3, #1
 80052d6:	75fb      	strb	r3, [r7, #23]
      break;
 80052d8:	e002      	b.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80052da:	bf00      	nop
 80052dc:	e000      	b.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80052de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80052e0:	7dfb      	ldrb	r3, [r7, #23]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d109      	bne.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80052e6:	4b55      	ldr	r3, [pc, #340]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80052e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052ea:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052f2:	4952      	ldr	r1, [pc, #328]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80052f4:	4313      	orrs	r3, r2
 80052f6:	650b      	str	r3, [r1, #80]	; 0x50
 80052f8:	e001      	b.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052fa:	7dfb      	ldrb	r3, [r7, #23]
 80052fc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005306:	2b00      	cmp	r3, #0
 8005308:	d049      	beq.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005310:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005314:	d030      	beq.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8005316:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800531a:	d82a      	bhi.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800531c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005320:	d02c      	beq.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x234>
 8005322:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005326:	d824      	bhi.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005328:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800532c:	d018      	beq.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800532e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005332:	d81e      	bhi.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005334:	2b00      	cmp	r3, #0
 8005336:	d003      	beq.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8005338:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800533c:	d007      	beq.n	800534e <HAL_RCCEx_PeriphCLKConfig+0x206>
 800533e:	e018      	b.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005340:	4b3e      	ldr	r3, [pc, #248]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005344:	4a3d      	ldr	r2, [pc, #244]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005346:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800534a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800534c:	e017      	b.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	3304      	adds	r3, #4
 8005352:	2100      	movs	r1, #0
 8005354:	4618      	mov	r0, r3
 8005356:	f001 f8f5 	bl	8006544 <RCCEx_PLL2_Config>
 800535a:	4603      	mov	r3, r0
 800535c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800535e:	e00e      	b.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	3324      	adds	r3, #36	; 0x24
 8005364:	2100      	movs	r1, #0
 8005366:	4618      	mov	r0, r3
 8005368:	f001 f99e 	bl	80066a8 <RCCEx_PLL3_Config>
 800536c:	4603      	mov	r3, r0
 800536e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005370:	e005      	b.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	75fb      	strb	r3, [r7, #23]
      break;
 8005376:	e002      	b.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005378:	bf00      	nop
 800537a:	e000      	b.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800537c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800537e:	7dfb      	ldrb	r3, [r7, #23]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d10a      	bne.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005384:	4b2d      	ldr	r3, [pc, #180]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005386:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005388:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005392:	492a      	ldr	r1, [pc, #168]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005394:	4313      	orrs	r3, r2
 8005396:	658b      	str	r3, [r1, #88]	; 0x58
 8005398:	e001      	b.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800539a:	7dfb      	ldrb	r3, [r7, #23]
 800539c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d04c      	beq.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80053b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80053b4:	d030      	beq.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80053b6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80053ba:	d82a      	bhi.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80053bc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80053c0:	d02c      	beq.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 80053c2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80053c6:	d824      	bhi.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80053c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80053cc:	d018      	beq.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80053ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80053d2:	d81e      	bhi.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d003      	beq.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80053d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80053dc:	d007      	beq.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80053de:	e018      	b.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053e0:	4b16      	ldr	r3, [pc, #88]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80053e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053e4:	4a15      	ldr	r2, [pc, #84]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80053e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053ea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80053ec:	e017      	b.n	800541e <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	3304      	adds	r3, #4
 80053f2:	2100      	movs	r1, #0
 80053f4:	4618      	mov	r0, r3
 80053f6:	f001 f8a5 	bl	8006544 <RCCEx_PLL2_Config>
 80053fa:	4603      	mov	r3, r0
 80053fc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80053fe:	e00e      	b.n	800541e <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	3324      	adds	r3, #36	; 0x24
 8005404:	2100      	movs	r1, #0
 8005406:	4618      	mov	r0, r3
 8005408:	f001 f94e 	bl	80066a8 <RCCEx_PLL3_Config>
 800540c:	4603      	mov	r3, r0
 800540e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005410:	e005      	b.n	800541e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005412:	2301      	movs	r3, #1
 8005414:	75fb      	strb	r3, [r7, #23]
      break;
 8005416:	e002      	b.n	800541e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8005418:	bf00      	nop
 800541a:	e000      	b.n	800541e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800541c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800541e:	7dfb      	ldrb	r3, [r7, #23]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d10d      	bne.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005424:	4b05      	ldr	r3, [pc, #20]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005426:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005428:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005432:	4902      	ldr	r1, [pc, #8]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005434:	4313      	orrs	r3, r2
 8005436:	658b      	str	r3, [r1, #88]	; 0x58
 8005438:	e004      	b.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800543a:	bf00      	nop
 800543c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005440:	7dfb      	ldrb	r3, [r7, #23]
 8005442:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800544c:	2b00      	cmp	r3, #0
 800544e:	d032      	beq.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005454:	2b30      	cmp	r3, #48	; 0x30
 8005456:	d01c      	beq.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005458:	2b30      	cmp	r3, #48	; 0x30
 800545a:	d817      	bhi.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x344>
 800545c:	2b20      	cmp	r3, #32
 800545e:	d00c      	beq.n	800547a <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005460:	2b20      	cmp	r3, #32
 8005462:	d813      	bhi.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x344>
 8005464:	2b00      	cmp	r3, #0
 8005466:	d016      	beq.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005468:	2b10      	cmp	r3, #16
 800546a:	d10f      	bne.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800546c:	4baf      	ldr	r3, [pc, #700]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800546e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005470:	4aae      	ldr	r2, [pc, #696]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005472:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005476:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005478:	e00e      	b.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	3304      	adds	r3, #4
 800547e:	2102      	movs	r1, #2
 8005480:	4618      	mov	r0, r3
 8005482:	f001 f85f 	bl	8006544 <RCCEx_PLL2_Config>
 8005486:	4603      	mov	r3, r0
 8005488:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800548a:	e005      	b.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800548c:	2301      	movs	r3, #1
 800548e:	75fb      	strb	r3, [r7, #23]
      break;
 8005490:	e002      	b.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8005492:	bf00      	nop
 8005494:	e000      	b.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8005496:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005498:	7dfb      	ldrb	r3, [r7, #23]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d109      	bne.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800549e:	4ba3      	ldr	r3, [pc, #652]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80054a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054a2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054aa:	49a0      	ldr	r1, [pc, #640]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80054ac:	4313      	orrs	r3, r2
 80054ae:	64cb      	str	r3, [r1, #76]	; 0x4c
 80054b0:	e001      	b.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054b2:	7dfb      	ldrb	r3, [r7, #23]
 80054b4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d047      	beq.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80054ca:	d030      	beq.n	800552e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 80054cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80054d0:	d82a      	bhi.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80054d2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80054d6:	d02c      	beq.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 80054d8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80054dc:	d824      	bhi.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80054de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054e2:	d018      	beq.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 80054e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054e8:	d81e      	bhi.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d003      	beq.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 80054ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054f2:	d007      	beq.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80054f4:	e018      	b.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054f6:	4b8d      	ldr	r3, [pc, #564]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80054f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054fa:	4a8c      	ldr	r2, [pc, #560]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80054fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005500:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005502:	e017      	b.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	3304      	adds	r3, #4
 8005508:	2100      	movs	r1, #0
 800550a:	4618      	mov	r0, r3
 800550c:	f001 f81a 	bl	8006544 <RCCEx_PLL2_Config>
 8005510:	4603      	mov	r3, r0
 8005512:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005514:	e00e      	b.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	3324      	adds	r3, #36	; 0x24
 800551a:	2100      	movs	r1, #0
 800551c:	4618      	mov	r0, r3
 800551e:	f001 f8c3 	bl	80066a8 <RCCEx_PLL3_Config>
 8005522:	4603      	mov	r3, r0
 8005524:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005526:	e005      	b.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005528:	2301      	movs	r3, #1
 800552a:	75fb      	strb	r3, [r7, #23]
      break;
 800552c:	e002      	b.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800552e:	bf00      	nop
 8005530:	e000      	b.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8005532:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005534:	7dfb      	ldrb	r3, [r7, #23]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d109      	bne.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800553a:	4b7c      	ldr	r3, [pc, #496]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800553c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800553e:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005546:	4979      	ldr	r1, [pc, #484]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005548:	4313      	orrs	r3, r2
 800554a:	650b      	str	r3, [r1, #80]	; 0x50
 800554c:	e001      	b.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800554e:	7dfb      	ldrb	r3, [r7, #23]
 8005550:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800555a:	2b00      	cmp	r3, #0
 800555c:	d049      	beq.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005562:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005566:	d02e      	beq.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8005568:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800556c:	d828      	bhi.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800556e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005572:	d02a      	beq.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x482>
 8005574:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005578:	d822      	bhi.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800557a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800557e:	d026      	beq.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0x486>
 8005580:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005584:	d81c      	bhi.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005586:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800558a:	d010      	beq.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0x466>
 800558c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005590:	d816      	bhi.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005592:	2b00      	cmp	r3, #0
 8005594:	d01d      	beq.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8005596:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800559a:	d111      	bne.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	3304      	adds	r3, #4
 80055a0:	2101      	movs	r1, #1
 80055a2:	4618      	mov	r0, r3
 80055a4:	f000 ffce 	bl	8006544 <RCCEx_PLL2_Config>
 80055a8:	4603      	mov	r3, r0
 80055aa:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80055ac:	e012      	b.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	3324      	adds	r3, #36	; 0x24
 80055b2:	2101      	movs	r1, #1
 80055b4:	4618      	mov	r0, r3
 80055b6:	f001 f877 	bl	80066a8 <RCCEx_PLL3_Config>
 80055ba:	4603      	mov	r3, r0
 80055bc:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80055be:	e009      	b.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80055c0:	2301      	movs	r3, #1
 80055c2:	75fb      	strb	r3, [r7, #23]
      break;
 80055c4:	e006      	b.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80055c6:	bf00      	nop
 80055c8:	e004      	b.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80055ca:	bf00      	nop
 80055cc:	e002      	b.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80055ce:	bf00      	nop
 80055d0:	e000      	b.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80055d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80055d4:	7dfb      	ldrb	r3, [r7, #23]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d109      	bne.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80055da:	4b54      	ldr	r3, [pc, #336]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80055dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055de:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055e6:	4951      	ldr	r1, [pc, #324]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80055e8:	4313      	orrs	r3, r2
 80055ea:	650b      	str	r3, [r1, #80]	; 0x50
 80055ec:	e001      	b.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055ee:	7dfb      	ldrb	r3, [r7, #23]
 80055f0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d04b      	beq.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005604:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005608:	d02e      	beq.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x520>
 800560a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800560e:	d828      	bhi.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005610:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005614:	d02a      	beq.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8005616:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800561a:	d822      	bhi.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800561c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005620:	d026      	beq.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8005622:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005626:	d81c      	bhi.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005628:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800562c:	d010      	beq.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x508>
 800562e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005632:	d816      	bhi.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005634:	2b00      	cmp	r3, #0
 8005636:	d01d      	beq.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8005638:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800563c:	d111      	bne.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	3304      	adds	r3, #4
 8005642:	2101      	movs	r1, #1
 8005644:	4618      	mov	r0, r3
 8005646:	f000 ff7d 	bl	8006544 <RCCEx_PLL2_Config>
 800564a:	4603      	mov	r3, r0
 800564c:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800564e:	e012      	b.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	3324      	adds	r3, #36	; 0x24
 8005654:	2101      	movs	r1, #1
 8005656:	4618      	mov	r0, r3
 8005658:	f001 f826 	bl	80066a8 <RCCEx_PLL3_Config>
 800565c:	4603      	mov	r3, r0
 800565e:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005660:	e009      	b.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8005662:	2301      	movs	r3, #1
 8005664:	75fb      	strb	r3, [r7, #23]
      break;
 8005666:	e006      	b.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005668:	bf00      	nop
 800566a:	e004      	b.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800566c:	bf00      	nop
 800566e:	e002      	b.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005670:	bf00      	nop
 8005672:	e000      	b.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005674:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005676:	7dfb      	ldrb	r3, [r7, #23]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d10a      	bne.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800567c:	4b2b      	ldr	r3, [pc, #172]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800567e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005680:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800568a:	4928      	ldr	r1, [pc, #160]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800568c:	4313      	orrs	r3, r2
 800568e:	658b      	str	r3, [r1, #88]	; 0x58
 8005690:	e001      	b.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005692:	7dfb      	ldrb	r3, [r7, #23]
 8005694:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d02f      	beq.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80056aa:	d00e      	beq.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x582>
 80056ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80056b0:	d814      	bhi.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x594>
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d015      	beq.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80056b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80056ba:	d10f      	bne.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056bc:	4b1b      	ldr	r3, [pc, #108]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80056be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056c0:	4a1a      	ldr	r2, [pc, #104]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80056c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056c6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80056c8:	e00c      	b.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	3304      	adds	r3, #4
 80056ce:	2101      	movs	r1, #1
 80056d0:	4618      	mov	r0, r3
 80056d2:	f000 ff37 	bl	8006544 <RCCEx_PLL2_Config>
 80056d6:	4603      	mov	r3, r0
 80056d8:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80056da:	e003      	b.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	75fb      	strb	r3, [r7, #23]
      break;
 80056e0:	e000      	b.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 80056e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80056e4:	7dfb      	ldrb	r3, [r7, #23]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d109      	bne.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80056ea:	4b10      	ldr	r3, [pc, #64]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80056ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056ee:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056f6:	490d      	ldr	r1, [pc, #52]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80056f8:	4313      	orrs	r3, r2
 80056fa:	650b      	str	r3, [r1, #80]	; 0x50
 80056fc:	e001      	b.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056fe:	7dfb      	ldrb	r3, [r7, #23]
 8005700:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800570a:	2b00      	cmp	r3, #0
 800570c:	d033      	beq.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005712:	2b03      	cmp	r3, #3
 8005714:	d81c      	bhi.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8005716:	a201      	add	r2, pc, #4	; (adr r2, 800571c <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8005718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800571c:	08005757 	.word	0x08005757
 8005720:	08005731 	.word	0x08005731
 8005724:	0800573f 	.word	0x0800573f
 8005728:	08005757 	.word	0x08005757
 800572c:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005730:	4bb8      	ldr	r3, [pc, #736]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005734:	4ab7      	ldr	r2, [pc, #732]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005736:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800573a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800573c:	e00c      	b.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	3304      	adds	r3, #4
 8005742:	2102      	movs	r1, #2
 8005744:	4618      	mov	r0, r3
 8005746:	f000 fefd 	bl	8006544 <RCCEx_PLL2_Config>
 800574a:	4603      	mov	r3, r0
 800574c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800574e:	e003      	b.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005750:	2301      	movs	r3, #1
 8005752:	75fb      	strb	r3, [r7, #23]
      break;
 8005754:	e000      	b.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8005756:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005758:	7dfb      	ldrb	r3, [r7, #23]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d109      	bne.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800575e:	4bad      	ldr	r3, [pc, #692]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005762:	f023 0203 	bic.w	r2, r3, #3
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800576a:	49aa      	ldr	r1, [pc, #680]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800576c:	4313      	orrs	r3, r2
 800576e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005770:	e001      	b.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005772:	7dfb      	ldrb	r3, [r7, #23]
 8005774:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800577e:	2b00      	cmp	r3, #0
 8005780:	f000 8086 	beq.w	8005890 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005784:	4ba4      	ldr	r3, [pc, #656]	; (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4aa3      	ldr	r2, [pc, #652]	; (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800578a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800578e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005790:	f7fc f92e 	bl	80019f0 <HAL_GetTick>
 8005794:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005796:	e009      	b.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005798:	f7fc f92a 	bl	80019f0 <HAL_GetTick>
 800579c:	4602      	mov	r2, r0
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	1ad3      	subs	r3, r2, r3
 80057a2:	2b64      	cmp	r3, #100	; 0x64
 80057a4:	d902      	bls.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80057a6:	2303      	movs	r3, #3
 80057a8:	75fb      	strb	r3, [r7, #23]
        break;
 80057aa:	e005      	b.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80057ac:	4b9a      	ldr	r3, [pc, #616]	; (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d0ef      	beq.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80057b8:	7dfb      	ldrb	r3, [r7, #23]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d166      	bne.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80057be:	4b95      	ldr	r3, [pc, #596]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80057c0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80057c8:	4053      	eors	r3, r2
 80057ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d013      	beq.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80057d2:	4b90      	ldr	r3, [pc, #576]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80057d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057da:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80057dc:	4b8d      	ldr	r3, [pc, #564]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80057de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057e0:	4a8c      	ldr	r2, [pc, #560]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80057e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057e6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80057e8:	4b8a      	ldr	r3, [pc, #552]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80057ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057ec:	4a89      	ldr	r2, [pc, #548]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80057ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057f2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80057f4:	4a87      	ldr	r2, [pc, #540]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005800:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005804:	d115      	bne.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005806:	f7fc f8f3 	bl	80019f0 <HAL_GetTick>
 800580a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800580c:	e00b      	b.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800580e:	f7fc f8ef 	bl	80019f0 <HAL_GetTick>
 8005812:	4602      	mov	r2, r0
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	1ad3      	subs	r3, r2, r3
 8005818:	f241 3288 	movw	r2, #5000	; 0x1388
 800581c:	4293      	cmp	r3, r2
 800581e:	d902      	bls.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8005820:	2303      	movs	r3, #3
 8005822:	75fb      	strb	r3, [r7, #23]
            break;
 8005824:	e005      	b.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005826:	4b7b      	ldr	r3, [pc, #492]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800582a:	f003 0302 	and.w	r3, r3, #2
 800582e:	2b00      	cmp	r3, #0
 8005830:	d0ed      	beq.n	800580e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8005832:	7dfb      	ldrb	r3, [r7, #23]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d126      	bne.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800583e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005842:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005846:	d10d      	bne.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8005848:	4b72      	ldr	r3, [pc, #456]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800584a:	691b      	ldr	r3, [r3, #16]
 800584c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005856:	0919      	lsrs	r1, r3, #4
 8005858:	4b70      	ldr	r3, [pc, #448]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 800585a:	400b      	ands	r3, r1
 800585c:	496d      	ldr	r1, [pc, #436]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800585e:	4313      	orrs	r3, r2
 8005860:	610b      	str	r3, [r1, #16]
 8005862:	e005      	b.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8005864:	4b6b      	ldr	r3, [pc, #428]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005866:	691b      	ldr	r3, [r3, #16]
 8005868:	4a6a      	ldr	r2, [pc, #424]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800586a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800586e:	6113      	str	r3, [r2, #16]
 8005870:	4b68      	ldr	r3, [pc, #416]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005872:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800587a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800587e:	4965      	ldr	r1, [pc, #404]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005880:	4313      	orrs	r3, r2
 8005882:	670b      	str	r3, [r1, #112]	; 0x70
 8005884:	e004      	b.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005886:	7dfb      	ldrb	r3, [r7, #23]
 8005888:	75bb      	strb	r3, [r7, #22]
 800588a:	e001      	b.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800588c:	7dfb      	ldrb	r3, [r7, #23]
 800588e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f003 0301 	and.w	r3, r3, #1
 8005898:	2b00      	cmp	r3, #0
 800589a:	d07e      	beq.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80058a0:	2b28      	cmp	r3, #40	; 0x28
 80058a2:	d867      	bhi.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80058a4:	a201      	add	r2, pc, #4	; (adr r2, 80058ac <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80058a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058aa:	bf00      	nop
 80058ac:	0800597b 	.word	0x0800597b
 80058b0:	08005975 	.word	0x08005975
 80058b4:	08005975 	.word	0x08005975
 80058b8:	08005975 	.word	0x08005975
 80058bc:	08005975 	.word	0x08005975
 80058c0:	08005975 	.word	0x08005975
 80058c4:	08005975 	.word	0x08005975
 80058c8:	08005975 	.word	0x08005975
 80058cc:	08005951 	.word	0x08005951
 80058d0:	08005975 	.word	0x08005975
 80058d4:	08005975 	.word	0x08005975
 80058d8:	08005975 	.word	0x08005975
 80058dc:	08005975 	.word	0x08005975
 80058e0:	08005975 	.word	0x08005975
 80058e4:	08005975 	.word	0x08005975
 80058e8:	08005975 	.word	0x08005975
 80058ec:	08005963 	.word	0x08005963
 80058f0:	08005975 	.word	0x08005975
 80058f4:	08005975 	.word	0x08005975
 80058f8:	08005975 	.word	0x08005975
 80058fc:	08005975 	.word	0x08005975
 8005900:	08005975 	.word	0x08005975
 8005904:	08005975 	.word	0x08005975
 8005908:	08005975 	.word	0x08005975
 800590c:	0800597b 	.word	0x0800597b
 8005910:	08005975 	.word	0x08005975
 8005914:	08005975 	.word	0x08005975
 8005918:	08005975 	.word	0x08005975
 800591c:	08005975 	.word	0x08005975
 8005920:	08005975 	.word	0x08005975
 8005924:	08005975 	.word	0x08005975
 8005928:	08005975 	.word	0x08005975
 800592c:	0800597b 	.word	0x0800597b
 8005930:	08005975 	.word	0x08005975
 8005934:	08005975 	.word	0x08005975
 8005938:	08005975 	.word	0x08005975
 800593c:	08005975 	.word	0x08005975
 8005940:	08005975 	.word	0x08005975
 8005944:	08005975 	.word	0x08005975
 8005948:	08005975 	.word	0x08005975
 800594c:	0800597b 	.word	0x0800597b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	3304      	adds	r3, #4
 8005954:	2101      	movs	r1, #1
 8005956:	4618      	mov	r0, r3
 8005958:	f000 fdf4 	bl	8006544 <RCCEx_PLL2_Config>
 800595c:	4603      	mov	r3, r0
 800595e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005960:	e00c      	b.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	3324      	adds	r3, #36	; 0x24
 8005966:	2101      	movs	r1, #1
 8005968:	4618      	mov	r0, r3
 800596a:	f000 fe9d 	bl	80066a8 <RCCEx_PLL3_Config>
 800596e:	4603      	mov	r3, r0
 8005970:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005972:	e003      	b.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005974:	2301      	movs	r3, #1
 8005976:	75fb      	strb	r3, [r7, #23]
      break;
 8005978:	e000      	b.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 800597a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800597c:	7dfb      	ldrb	r3, [r7, #23]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d109      	bne.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005982:	4b24      	ldr	r3, [pc, #144]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005984:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005986:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800598e:	4921      	ldr	r1, [pc, #132]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005990:	4313      	orrs	r3, r2
 8005992:	654b      	str	r3, [r1, #84]	; 0x54
 8005994:	e001      	b.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005996:	7dfb      	ldrb	r3, [r7, #23]
 8005998:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f003 0302 	and.w	r3, r3, #2
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d03e      	beq.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059aa:	2b05      	cmp	r3, #5
 80059ac:	d820      	bhi.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 80059ae:	a201      	add	r2, pc, #4	; (adr r2, 80059b4 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 80059b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059b4:	080059f7 	.word	0x080059f7
 80059b8:	080059cd 	.word	0x080059cd
 80059bc:	080059df 	.word	0x080059df
 80059c0:	080059f7 	.word	0x080059f7
 80059c4:	080059f7 	.word	0x080059f7
 80059c8:	080059f7 	.word	0x080059f7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	3304      	adds	r3, #4
 80059d0:	2101      	movs	r1, #1
 80059d2:	4618      	mov	r0, r3
 80059d4:	f000 fdb6 	bl	8006544 <RCCEx_PLL2_Config>
 80059d8:	4603      	mov	r3, r0
 80059da:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80059dc:	e00c      	b.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	3324      	adds	r3, #36	; 0x24
 80059e2:	2101      	movs	r1, #1
 80059e4:	4618      	mov	r0, r3
 80059e6:	f000 fe5f 	bl	80066a8 <RCCEx_PLL3_Config>
 80059ea:	4603      	mov	r3, r0
 80059ec:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80059ee:	e003      	b.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80059f0:	2301      	movs	r3, #1
 80059f2:	75fb      	strb	r3, [r7, #23]
      break;
 80059f4:	e000      	b.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 80059f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80059f8:	7dfb      	ldrb	r3, [r7, #23]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d110      	bne.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80059fe:	4b05      	ldr	r3, [pc, #20]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005a00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a02:	f023 0207 	bic.w	r2, r3, #7
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a0a:	4902      	ldr	r1, [pc, #8]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	654b      	str	r3, [r1, #84]	; 0x54
 8005a10:	e008      	b.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8005a12:	bf00      	nop
 8005a14:	58024400 	.word	0x58024400
 8005a18:	58024800 	.word	0x58024800
 8005a1c:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a20:	7dfb      	ldrb	r3, [r7, #23]
 8005a22:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f003 0304 	and.w	r3, r3, #4
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d039      	beq.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a36:	2b05      	cmp	r3, #5
 8005a38:	d820      	bhi.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x934>
 8005a3a:	a201      	add	r2, pc, #4	; (adr r2, 8005a40 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8005a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a40:	08005a83 	.word	0x08005a83
 8005a44:	08005a59 	.word	0x08005a59
 8005a48:	08005a6b 	.word	0x08005a6b
 8005a4c:	08005a83 	.word	0x08005a83
 8005a50:	08005a83 	.word	0x08005a83
 8005a54:	08005a83 	.word	0x08005a83
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	3304      	adds	r3, #4
 8005a5c:	2101      	movs	r1, #1
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f000 fd70 	bl	8006544 <RCCEx_PLL2_Config>
 8005a64:	4603      	mov	r3, r0
 8005a66:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005a68:	e00c      	b.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	3324      	adds	r3, #36	; 0x24
 8005a6e:	2101      	movs	r1, #1
 8005a70:	4618      	mov	r0, r3
 8005a72:	f000 fe19 	bl	80066a8 <RCCEx_PLL3_Config>
 8005a76:	4603      	mov	r3, r0
 8005a78:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005a7a:	e003      	b.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	75fb      	strb	r3, [r7, #23]
      break;
 8005a80:	e000      	b.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8005a82:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a84:	7dfb      	ldrb	r3, [r7, #23]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d10a      	bne.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005a8a:	4bb7      	ldr	r3, [pc, #732]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005a8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a8e:	f023 0207 	bic.w	r2, r3, #7
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a98:	49b3      	ldr	r1, [pc, #716]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	658b      	str	r3, [r1, #88]	; 0x58
 8005a9e:	e001      	b.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005aa0:	7dfb      	ldrb	r3, [r7, #23]
 8005aa2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f003 0320 	and.w	r3, r3, #32
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d04b      	beq.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ab6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005aba:	d02e      	beq.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8005abc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005ac0:	d828      	bhi.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8005ac2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ac6:	d02a      	beq.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8005ac8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005acc:	d822      	bhi.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8005ace:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005ad2:	d026      	beq.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8005ad4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005ad8:	d81c      	bhi.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8005ada:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ade:	d010      	beq.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8005ae0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ae4:	d816      	bhi.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d01d      	beq.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8005aea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005aee:	d111      	bne.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	3304      	adds	r3, #4
 8005af4:	2100      	movs	r1, #0
 8005af6:	4618      	mov	r0, r3
 8005af8:	f000 fd24 	bl	8006544 <RCCEx_PLL2_Config>
 8005afc:	4603      	mov	r3, r0
 8005afe:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005b00:	e012      	b.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	3324      	adds	r3, #36	; 0x24
 8005b06:	2102      	movs	r1, #2
 8005b08:	4618      	mov	r0, r3
 8005b0a:	f000 fdcd 	bl	80066a8 <RCCEx_PLL3_Config>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005b12:	e009      	b.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b14:	2301      	movs	r3, #1
 8005b16:	75fb      	strb	r3, [r7, #23]
      break;
 8005b18:	e006      	b.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8005b1a:	bf00      	nop
 8005b1c:	e004      	b.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8005b1e:	bf00      	nop
 8005b20:	e002      	b.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8005b22:	bf00      	nop
 8005b24:	e000      	b.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8005b26:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b28:	7dfb      	ldrb	r3, [r7, #23]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d10a      	bne.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005b2e:	4b8e      	ldr	r3, [pc, #568]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005b30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b32:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b3c:	498a      	ldr	r1, [pc, #552]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	654b      	str	r3, [r1, #84]	; 0x54
 8005b42:	e001      	b.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b44:	7dfb      	ldrb	r3, [r7, #23]
 8005b46:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d04b      	beq.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005b5a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005b5e:	d02e      	beq.n	8005bbe <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8005b60:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005b64:	d828      	bhi.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8005b66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b6a:	d02a      	beq.n	8005bc2 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8005b6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b70:	d822      	bhi.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8005b72:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005b76:	d026      	beq.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8005b78:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005b7c:	d81c      	bhi.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8005b7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b82:	d010      	beq.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8005b84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b88:	d816      	bhi.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d01d      	beq.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8005b8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b92:	d111      	bne.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	3304      	adds	r3, #4
 8005b98:	2100      	movs	r1, #0
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f000 fcd2 	bl	8006544 <RCCEx_PLL2_Config>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005ba4:	e012      	b.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	3324      	adds	r3, #36	; 0x24
 8005baa:	2102      	movs	r1, #2
 8005bac:	4618      	mov	r0, r3
 8005bae:	f000 fd7b 	bl	80066a8 <RCCEx_PLL3_Config>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005bb6:	e009      	b.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	75fb      	strb	r3, [r7, #23]
      break;
 8005bbc:	e006      	b.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8005bbe:	bf00      	nop
 8005bc0:	e004      	b.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8005bc2:	bf00      	nop
 8005bc4:	e002      	b.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8005bc6:	bf00      	nop
 8005bc8:	e000      	b.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8005bca:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005bcc:	7dfb      	ldrb	r3, [r7, #23]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d10a      	bne.n	8005be8 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005bd2:	4b65      	ldr	r3, [pc, #404]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005bd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bd6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005be0:	4961      	ldr	r1, [pc, #388]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005be2:	4313      	orrs	r3, r2
 8005be4:	658b      	str	r3, [r1, #88]	; 0x58
 8005be6:	e001      	b.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005be8:	7dfb      	ldrb	r3, [r7, #23]
 8005bea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d04b      	beq.n	8005c90 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005bfe:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005c02:	d02e      	beq.n	8005c62 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8005c04:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005c08:	d828      	bhi.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8005c0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c0e:	d02a      	beq.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8005c10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c14:	d822      	bhi.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8005c16:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005c1a:	d026      	beq.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8005c1c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005c20:	d81c      	bhi.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8005c22:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c26:	d010      	beq.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8005c28:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c2c:	d816      	bhi.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d01d      	beq.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8005c32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c36:	d111      	bne.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	3304      	adds	r3, #4
 8005c3c:	2100      	movs	r1, #0
 8005c3e:	4618      	mov	r0, r3
 8005c40:	f000 fc80 	bl	8006544 <RCCEx_PLL2_Config>
 8005c44:	4603      	mov	r3, r0
 8005c46:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005c48:	e012      	b.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	3324      	adds	r3, #36	; 0x24
 8005c4e:	2102      	movs	r1, #2
 8005c50:	4618      	mov	r0, r3
 8005c52:	f000 fd29 	bl	80066a8 <RCCEx_PLL3_Config>
 8005c56:	4603      	mov	r3, r0
 8005c58:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005c5a:	e009      	b.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	75fb      	strb	r3, [r7, #23]
      break;
 8005c60:	e006      	b.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8005c62:	bf00      	nop
 8005c64:	e004      	b.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8005c66:	bf00      	nop
 8005c68:	e002      	b.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8005c6a:	bf00      	nop
 8005c6c:	e000      	b.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8005c6e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c70:	7dfb      	ldrb	r3, [r7, #23]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d10a      	bne.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005c76:	4b3c      	ldr	r3, [pc, #240]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005c78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c7a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005c84:	4938      	ldr	r1, [pc, #224]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005c86:	4313      	orrs	r3, r2
 8005c88:	658b      	str	r3, [r1, #88]	; 0x58
 8005c8a:	e001      	b.n	8005c90 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c8c:	7dfb      	ldrb	r3, [r7, #23]
 8005c8e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f003 0308 	and.w	r3, r3, #8
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d01a      	beq.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ca2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ca6:	d10a      	bne.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	3324      	adds	r3, #36	; 0x24
 8005cac:	2102      	movs	r1, #2
 8005cae:	4618      	mov	r0, r3
 8005cb0:	f000 fcfa 	bl	80066a8 <RCCEx_PLL3_Config>
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d001      	beq.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8005cba:	2301      	movs	r3, #1
 8005cbc:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005cbe:	4b2a      	ldr	r3, [pc, #168]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005cc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cc2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ccc:	4926      	ldr	r1, [pc, #152]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f003 0310 	and.w	r3, r3, #16
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d01a      	beq.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ce4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ce8:	d10a      	bne.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	3324      	adds	r3, #36	; 0x24
 8005cee:	2102      	movs	r1, #2
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	f000 fcd9 	bl	80066a8 <RCCEx_PLL3_Config>
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d001      	beq.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005d00:	4b19      	ldr	r3, [pc, #100]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005d02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d04:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d0e:	4916      	ldr	r1, [pc, #88]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005d10:	4313      	orrs	r3, r2
 8005d12:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d036      	beq.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005d26:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d2a:	d01f      	beq.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8005d2c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d30:	d817      	bhi.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d003      	beq.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8005d36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d3a:	d009      	beq.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8005d3c:	e011      	b.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	3304      	adds	r3, #4
 8005d42:	2100      	movs	r1, #0
 8005d44:	4618      	mov	r0, r3
 8005d46:	f000 fbfd 	bl	8006544 <RCCEx_PLL2_Config>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005d4e:	e00e      	b.n	8005d6e <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	3324      	adds	r3, #36	; 0x24
 8005d54:	2102      	movs	r1, #2
 8005d56:	4618      	mov	r0, r3
 8005d58:	f000 fca6 	bl	80066a8 <RCCEx_PLL3_Config>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005d60:	e005      	b.n	8005d6e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d62:	2301      	movs	r3, #1
 8005d64:	75fb      	strb	r3, [r7, #23]
      break;
 8005d66:	e002      	b.n	8005d6e <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8005d68:	58024400 	.word	0x58024400
      break;
 8005d6c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d6e:	7dfb      	ldrb	r3, [r7, #23]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d10a      	bne.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005d74:	4b93      	ldr	r3, [pc, #588]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005d76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d78:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005d82:	4990      	ldr	r1, [pc, #576]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005d84:	4313      	orrs	r3, r2
 8005d86:	658b      	str	r3, [r1, #88]	; 0x58
 8005d88:	e001      	b.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d8a:	7dfb      	ldrb	r3, [r7, #23]
 8005d8c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d033      	beq.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005da0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005da4:	d01c      	beq.n	8005de0 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8005da6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005daa:	d816      	bhi.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8005dac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005db0:	d003      	beq.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8005db2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005db6:	d007      	beq.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8005db8:	e00f      	b.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005dba:	4b82      	ldr	r3, [pc, #520]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dbe:	4a81      	ldr	r2, [pc, #516]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005dc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005dc4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8005dc6:	e00c      	b.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	3324      	adds	r3, #36	; 0x24
 8005dcc:	2101      	movs	r1, #1
 8005dce:	4618      	mov	r0, r3
 8005dd0:	f000 fc6a 	bl	80066a8 <RCCEx_PLL3_Config>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8005dd8:	e003      	b.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005dda:	2301      	movs	r3, #1
 8005ddc:	75fb      	strb	r3, [r7, #23]
      break;
 8005dde:	e000      	b.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8005de0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005de2:	7dfb      	ldrb	r3, [r7, #23]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d10a      	bne.n	8005dfe <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005de8:	4b76      	ldr	r3, [pc, #472]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005dea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005df6:	4973      	ldr	r1, [pc, #460]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	654b      	str	r3, [r1, #84]	; 0x54
 8005dfc:	e001      	b.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dfe:	7dfb      	ldrb	r3, [r7, #23]
 8005e00:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d029      	beq.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d003      	beq.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8005e16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e1a:	d007      	beq.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8005e1c:	e00f      	b.n	8005e3e <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e1e:	4b69      	ldr	r3, [pc, #420]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e22:	4a68      	ldr	r2, [pc, #416]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005e24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e28:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005e2a:	e00b      	b.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	3304      	adds	r3, #4
 8005e30:	2102      	movs	r1, #2
 8005e32:	4618      	mov	r0, r3
 8005e34:	f000 fb86 	bl	8006544 <RCCEx_PLL2_Config>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005e3c:	e002      	b.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	75fb      	strb	r3, [r7, #23]
      break;
 8005e42:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e44:	7dfb      	ldrb	r3, [r7, #23]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d109      	bne.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005e4a:	4b5e      	ldr	r3, [pc, #376]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005e4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e4e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e56:	495b      	ldr	r1, [pc, #364]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005e5c:	e001      	b.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e5e:	7dfb      	ldrb	r3, [r7, #23]
 8005e60:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d00a      	beq.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	3324      	adds	r3, #36	; 0x24
 8005e72:	2102      	movs	r1, #2
 8005e74:	4618      	mov	r0, r3
 8005e76:	f000 fc17 	bl	80066a8 <RCCEx_PLL3_Config>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d001      	beq.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8005e80:	2301      	movs	r3, #1
 8005e82:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d030      	beq.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e94:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e98:	d017      	beq.n	8005eca <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8005e9a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e9e:	d811      	bhi.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8005ea0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ea4:	d013      	beq.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8005ea6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005eaa:	d80b      	bhi.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d010      	beq.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8005eb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005eb4:	d106      	bne.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005eb6:	4b43      	ldr	r3, [pc, #268]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eba:	4a42      	ldr	r2, [pc, #264]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005ebc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ec0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8005ec2:	e007      	b.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	75fb      	strb	r3, [r7, #23]
      break;
 8005ec8:	e004      	b.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8005eca:	bf00      	nop
 8005ecc:	e002      	b.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8005ece:	bf00      	nop
 8005ed0:	e000      	b.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8005ed2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ed4:	7dfb      	ldrb	r3, [r7, #23]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d109      	bne.n	8005eee <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005eda:	4b3a      	ldr	r3, [pc, #232]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005edc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ede:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ee6:	4937      	ldr	r1, [pc, #220]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	654b      	str	r3, [r1, #84]	; 0x54
 8005eec:	e001      	b.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005eee:	7dfb      	ldrb	r3, [r7, #23]
 8005ef0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d008      	beq.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005efe:	4b31      	ldr	r3, [pc, #196]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005f00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f02:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f0a:	492e      	ldr	r1, [pc, #184]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d009      	beq.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005f1c:	4b29      	ldr	r3, [pc, #164]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005f1e:	691b      	ldr	r3, [r3, #16]
 8005f20:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005f2a:	4926      	ldr	r1, [pc, #152]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d008      	beq.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005f3c:	4b21      	ldr	r3, [pc, #132]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005f3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f40:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f48:	491e      	ldr	r1, [pc, #120]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d00d      	beq.n	8005f76 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005f5a:	4b1a      	ldr	r3, [pc, #104]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005f5c:	691b      	ldr	r3, [r3, #16]
 8005f5e:	4a19      	ldr	r2, [pc, #100]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005f60:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005f64:	6113      	str	r3, [r2, #16]
 8005f66:	4b17      	ldr	r3, [pc, #92]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005f68:	691a      	ldr	r2, [r3, #16]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005f70:	4914      	ldr	r1, [pc, #80]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005f72:	4313      	orrs	r3, r2
 8005f74:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	da08      	bge.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005f7e:	4b11      	ldr	r3, [pc, #68]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f82:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f8a:	490e      	ldr	r1, [pc, #56]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d009      	beq.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005f9c:	4b09      	ldr	r3, [pc, #36]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005f9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fa0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005faa:	4906      	ldr	r1, [pc, #24]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005fac:	4313      	orrs	r3, r2
 8005fae:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8005fb0:	7dbb      	ldrb	r3, [r7, #22]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d101      	bne.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	e000      	b.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8005fba:	2301      	movs	r3, #1
}
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	3718      	adds	r7, #24
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bd80      	pop	{r7, pc}
 8005fc4:	58024400 	.word	0x58024400

08005fc8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005fcc:	f7ff f81e 	bl	800500c <HAL_RCC_GetHCLKFreq>
 8005fd0:	4602      	mov	r2, r0
 8005fd2:	4b06      	ldr	r3, [pc, #24]	; (8005fec <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005fd4:	6a1b      	ldr	r3, [r3, #32]
 8005fd6:	091b      	lsrs	r3, r3, #4
 8005fd8:	f003 0307 	and.w	r3, r3, #7
 8005fdc:	4904      	ldr	r1, [pc, #16]	; (8005ff0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005fde:	5ccb      	ldrb	r3, [r1, r3]
 8005fe0:	f003 031f 	and.w	r3, r3, #31
 8005fe4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	bd80      	pop	{r7, pc}
 8005fec:	58024400 	.word	0x58024400
 8005ff0:	0801aa8c 	.word	0x0801aa8c

08005ff4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b089      	sub	sp, #36	; 0x24
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005ffc:	4ba1      	ldr	r3, [pc, #644]	; (8006284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006000:	f003 0303 	and.w	r3, r3, #3
 8006004:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8006006:	4b9f      	ldr	r3, [pc, #636]	; (8006284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800600a:	0b1b      	lsrs	r3, r3, #12
 800600c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006010:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006012:	4b9c      	ldr	r3, [pc, #624]	; (8006284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006016:	091b      	lsrs	r3, r3, #4
 8006018:	f003 0301 	and.w	r3, r3, #1
 800601c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800601e:	4b99      	ldr	r3, [pc, #612]	; (8006284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006020:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006022:	08db      	lsrs	r3, r3, #3
 8006024:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006028:	693a      	ldr	r2, [r7, #16]
 800602a:	fb02 f303 	mul.w	r3, r2, r3
 800602e:	ee07 3a90 	vmov	s15, r3
 8006032:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006036:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	2b00      	cmp	r3, #0
 800603e:	f000 8111 	beq.w	8006264 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006042:	69bb      	ldr	r3, [r7, #24]
 8006044:	2b02      	cmp	r3, #2
 8006046:	f000 8083 	beq.w	8006150 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800604a:	69bb      	ldr	r3, [r7, #24]
 800604c:	2b02      	cmp	r3, #2
 800604e:	f200 80a1 	bhi.w	8006194 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006052:	69bb      	ldr	r3, [r7, #24]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d003      	beq.n	8006060 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006058:	69bb      	ldr	r3, [r7, #24]
 800605a:	2b01      	cmp	r3, #1
 800605c:	d056      	beq.n	800610c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800605e:	e099      	b.n	8006194 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006060:	4b88      	ldr	r3, [pc, #544]	; (8006284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f003 0320 	and.w	r3, r3, #32
 8006068:	2b00      	cmp	r3, #0
 800606a:	d02d      	beq.n	80060c8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800606c:	4b85      	ldr	r3, [pc, #532]	; (8006284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	08db      	lsrs	r3, r3, #3
 8006072:	f003 0303 	and.w	r3, r3, #3
 8006076:	4a84      	ldr	r2, [pc, #528]	; (8006288 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006078:	fa22 f303 	lsr.w	r3, r2, r3
 800607c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	ee07 3a90 	vmov	s15, r3
 8006084:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	ee07 3a90 	vmov	s15, r3
 800608e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006092:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006096:	4b7b      	ldr	r3, [pc, #492]	; (8006284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800609a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800609e:	ee07 3a90 	vmov	s15, r3
 80060a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80060aa:	eddf 5a78 	vldr	s11, [pc, #480]	; 800628c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80060ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060c2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80060c6:	e087      	b.n	80061d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	ee07 3a90 	vmov	s15, r3
 80060ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060d2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006290 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80060d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060da:	4b6a      	ldr	r3, [pc, #424]	; (8006284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80060dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060e2:	ee07 3a90 	vmov	s15, r3
 80060e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80060ee:	eddf 5a67 	vldr	s11, [pc, #412]	; 800628c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80060f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006102:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006106:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800610a:	e065      	b.n	80061d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	ee07 3a90 	vmov	s15, r3
 8006112:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006116:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006294 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800611a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800611e:	4b59      	ldr	r3, [pc, #356]	; (8006284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006122:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006126:	ee07 3a90 	vmov	s15, r3
 800612a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800612e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006132:	eddf 5a56 	vldr	s11, [pc, #344]	; 800628c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006136:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800613a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800613e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006142:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006146:	ee67 7a27 	vmul.f32	s15, s14, s15
 800614a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800614e:	e043      	b.n	80061d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	ee07 3a90 	vmov	s15, r3
 8006156:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800615a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006298 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800615e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006162:	4b48      	ldr	r3, [pc, #288]	; (8006284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006166:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800616a:	ee07 3a90 	vmov	s15, r3
 800616e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006172:	ed97 6a03 	vldr	s12, [r7, #12]
 8006176:	eddf 5a45 	vldr	s11, [pc, #276]	; 800628c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800617a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800617e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006182:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006186:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800618a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800618e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006192:	e021      	b.n	80061d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	ee07 3a90 	vmov	s15, r3
 800619a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800619e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006294 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80061a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061a6:	4b37      	ldr	r3, [pc, #220]	; (8006284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80061a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061ae:	ee07 3a90 	vmov	s15, r3
 80061b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80061ba:	eddf 5a34 	vldr	s11, [pc, #208]	; 800628c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80061be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80061ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80061d6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80061d8:	4b2a      	ldr	r3, [pc, #168]	; (8006284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80061da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061dc:	0a5b      	lsrs	r3, r3, #9
 80061de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061e2:	ee07 3a90 	vmov	s15, r3
 80061e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80061ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80061f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80061f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80061fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061fe:	ee17 2a90 	vmov	r2, s15
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8006206:	4b1f      	ldr	r3, [pc, #124]	; (8006284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800620a:	0c1b      	lsrs	r3, r3, #16
 800620c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006210:	ee07 3a90 	vmov	s15, r3
 8006214:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006218:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800621c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006220:	edd7 6a07 	vldr	s13, [r7, #28]
 8006224:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006228:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800622c:	ee17 2a90 	vmov	r2, s15
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8006234:	4b13      	ldr	r3, [pc, #76]	; (8006284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006238:	0e1b      	lsrs	r3, r3, #24
 800623a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800623e:	ee07 3a90 	vmov	s15, r3
 8006242:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006246:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800624a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800624e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006252:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006256:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800625a:	ee17 2a90 	vmov	r2, s15
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006262:	e008      	b.n	8006276 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2200      	movs	r2, #0
 8006268:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2200      	movs	r2, #0
 800626e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2200      	movs	r2, #0
 8006274:	609a      	str	r2, [r3, #8]
}
 8006276:	bf00      	nop
 8006278:	3724      	adds	r7, #36	; 0x24
 800627a:	46bd      	mov	sp, r7
 800627c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006280:	4770      	bx	lr
 8006282:	bf00      	nop
 8006284:	58024400 	.word	0x58024400
 8006288:	03d09000 	.word	0x03d09000
 800628c:	46000000 	.word	0x46000000
 8006290:	4c742400 	.word	0x4c742400
 8006294:	4a742400 	.word	0x4a742400
 8006298:	4af42400 	.word	0x4af42400

0800629c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800629c:	b480      	push	{r7}
 800629e:	b089      	sub	sp, #36	; 0x24
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80062a4:	4ba1      	ldr	r3, [pc, #644]	; (800652c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80062a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062a8:	f003 0303 	and.w	r3, r3, #3
 80062ac:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80062ae:	4b9f      	ldr	r3, [pc, #636]	; (800652c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80062b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062b2:	0d1b      	lsrs	r3, r3, #20
 80062b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80062b8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80062ba:	4b9c      	ldr	r3, [pc, #624]	; (800652c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80062bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062be:	0a1b      	lsrs	r3, r3, #8
 80062c0:	f003 0301 	and.w	r3, r3, #1
 80062c4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80062c6:	4b99      	ldr	r3, [pc, #612]	; (800652c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80062c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062ca:	08db      	lsrs	r3, r3, #3
 80062cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80062d0:	693a      	ldr	r2, [r7, #16]
 80062d2:	fb02 f303 	mul.w	r3, r2, r3
 80062d6:	ee07 3a90 	vmov	s15, r3
 80062da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062de:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	f000 8111 	beq.w	800650c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80062ea:	69bb      	ldr	r3, [r7, #24]
 80062ec:	2b02      	cmp	r3, #2
 80062ee:	f000 8083 	beq.w	80063f8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80062f2:	69bb      	ldr	r3, [r7, #24]
 80062f4:	2b02      	cmp	r3, #2
 80062f6:	f200 80a1 	bhi.w	800643c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80062fa:	69bb      	ldr	r3, [r7, #24]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d003      	beq.n	8006308 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006300:	69bb      	ldr	r3, [r7, #24]
 8006302:	2b01      	cmp	r3, #1
 8006304:	d056      	beq.n	80063b4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006306:	e099      	b.n	800643c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006308:	4b88      	ldr	r3, [pc, #544]	; (800652c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f003 0320 	and.w	r3, r3, #32
 8006310:	2b00      	cmp	r3, #0
 8006312:	d02d      	beq.n	8006370 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006314:	4b85      	ldr	r3, [pc, #532]	; (800652c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	08db      	lsrs	r3, r3, #3
 800631a:	f003 0303 	and.w	r3, r3, #3
 800631e:	4a84      	ldr	r2, [pc, #528]	; (8006530 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006320:	fa22 f303 	lsr.w	r3, r2, r3
 8006324:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	ee07 3a90 	vmov	s15, r3
 800632c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	ee07 3a90 	vmov	s15, r3
 8006336:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800633a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800633e:	4b7b      	ldr	r3, [pc, #492]	; (800652c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006342:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006346:	ee07 3a90 	vmov	s15, r3
 800634a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800634e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006352:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006534 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006356:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800635a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800635e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006362:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006366:	ee67 7a27 	vmul.f32	s15, s14, s15
 800636a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800636e:	e087      	b.n	8006480 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006370:	697b      	ldr	r3, [r7, #20]
 8006372:	ee07 3a90 	vmov	s15, r3
 8006376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800637a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006538 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800637e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006382:	4b6a      	ldr	r3, [pc, #424]	; (800652c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006386:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800638a:	ee07 3a90 	vmov	s15, r3
 800638e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006392:	ed97 6a03 	vldr	s12, [r7, #12]
 8006396:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006534 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800639a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800639e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80063a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063ae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80063b2:	e065      	b.n	8006480 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	ee07 3a90 	vmov	s15, r3
 80063ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063be:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800653c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80063c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063c6:	4b59      	ldr	r3, [pc, #356]	; (800652c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80063c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063ce:	ee07 3a90 	vmov	s15, r3
 80063d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80063da:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006534 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80063de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80063ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063f2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80063f6:	e043      	b.n	8006480 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80063f8:	697b      	ldr	r3, [r7, #20]
 80063fa:	ee07 3a90 	vmov	s15, r3
 80063fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006402:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006540 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006406:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800640a:	4b48      	ldr	r3, [pc, #288]	; (800652c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800640c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800640e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006412:	ee07 3a90 	vmov	s15, r3
 8006416:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800641a:	ed97 6a03 	vldr	s12, [r7, #12]
 800641e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006534 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006422:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006426:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800642a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800642e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006432:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006436:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800643a:	e021      	b.n	8006480 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800643c:	697b      	ldr	r3, [r7, #20]
 800643e:	ee07 3a90 	vmov	s15, r3
 8006442:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006446:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800653c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800644a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800644e:	4b37      	ldr	r3, [pc, #220]	; (800652c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006452:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006456:	ee07 3a90 	vmov	s15, r3
 800645a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800645e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006462:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006534 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006466:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800646a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800646e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006472:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006476:	ee67 7a27 	vmul.f32	s15, s14, s15
 800647a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800647e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8006480:	4b2a      	ldr	r3, [pc, #168]	; (800652c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006484:	0a5b      	lsrs	r3, r3, #9
 8006486:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800648a:	ee07 3a90 	vmov	s15, r3
 800648e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006492:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006496:	ee37 7a87 	vadd.f32	s14, s15, s14
 800649a:	edd7 6a07 	vldr	s13, [r7, #28]
 800649e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80064a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80064a6:	ee17 2a90 	vmov	r2, s15
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80064ae:	4b1f      	ldr	r3, [pc, #124]	; (800652c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80064b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064b2:	0c1b      	lsrs	r3, r3, #16
 80064b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064b8:	ee07 3a90 	vmov	s15, r3
 80064bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80064c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80064c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80064cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80064d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80064d4:	ee17 2a90 	vmov	r2, s15
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80064dc:	4b13      	ldr	r3, [pc, #76]	; (800652c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80064de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064e0:	0e1b      	lsrs	r3, r3, #24
 80064e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064e6:	ee07 3a90 	vmov	s15, r3
 80064ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80064f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80064f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80064fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80064fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006502:	ee17 2a90 	vmov	r2, s15
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800650a:	e008      	b.n	800651e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2200      	movs	r2, #0
 8006510:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2200      	movs	r2, #0
 8006516:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2200      	movs	r2, #0
 800651c:	609a      	str	r2, [r3, #8]
}
 800651e:	bf00      	nop
 8006520:	3724      	adds	r7, #36	; 0x24
 8006522:	46bd      	mov	sp, r7
 8006524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006528:	4770      	bx	lr
 800652a:	bf00      	nop
 800652c:	58024400 	.word	0x58024400
 8006530:	03d09000 	.word	0x03d09000
 8006534:	46000000 	.word	0x46000000
 8006538:	4c742400 	.word	0x4c742400
 800653c:	4a742400 	.word	0x4a742400
 8006540:	4af42400 	.word	0x4af42400

08006544 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b084      	sub	sp, #16
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
 800654c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800654e:	2300      	movs	r3, #0
 8006550:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006552:	4b53      	ldr	r3, [pc, #332]	; (80066a0 <RCCEx_PLL2_Config+0x15c>)
 8006554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006556:	f003 0303 	and.w	r3, r3, #3
 800655a:	2b03      	cmp	r3, #3
 800655c:	d101      	bne.n	8006562 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800655e:	2301      	movs	r3, #1
 8006560:	e099      	b.n	8006696 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006562:	4b4f      	ldr	r3, [pc, #316]	; (80066a0 <RCCEx_PLL2_Config+0x15c>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4a4e      	ldr	r2, [pc, #312]	; (80066a0 <RCCEx_PLL2_Config+0x15c>)
 8006568:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800656c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800656e:	f7fb fa3f 	bl	80019f0 <HAL_GetTick>
 8006572:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006574:	e008      	b.n	8006588 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006576:	f7fb fa3b 	bl	80019f0 <HAL_GetTick>
 800657a:	4602      	mov	r2, r0
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	1ad3      	subs	r3, r2, r3
 8006580:	2b02      	cmp	r3, #2
 8006582:	d901      	bls.n	8006588 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006584:	2303      	movs	r3, #3
 8006586:	e086      	b.n	8006696 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006588:	4b45      	ldr	r3, [pc, #276]	; (80066a0 <RCCEx_PLL2_Config+0x15c>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006590:	2b00      	cmp	r3, #0
 8006592:	d1f0      	bne.n	8006576 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006594:	4b42      	ldr	r3, [pc, #264]	; (80066a0 <RCCEx_PLL2_Config+0x15c>)
 8006596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006598:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	031b      	lsls	r3, r3, #12
 80065a2:	493f      	ldr	r1, [pc, #252]	; (80066a0 <RCCEx_PLL2_Config+0x15c>)
 80065a4:	4313      	orrs	r3, r2
 80065a6:	628b      	str	r3, [r1, #40]	; 0x28
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	685b      	ldr	r3, [r3, #4]
 80065ac:	3b01      	subs	r3, #1
 80065ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	689b      	ldr	r3, [r3, #8]
 80065b6:	3b01      	subs	r3, #1
 80065b8:	025b      	lsls	r3, r3, #9
 80065ba:	b29b      	uxth	r3, r3
 80065bc:	431a      	orrs	r2, r3
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	68db      	ldr	r3, [r3, #12]
 80065c2:	3b01      	subs	r3, #1
 80065c4:	041b      	lsls	r3, r3, #16
 80065c6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80065ca:	431a      	orrs	r2, r3
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	691b      	ldr	r3, [r3, #16]
 80065d0:	3b01      	subs	r3, #1
 80065d2:	061b      	lsls	r3, r3, #24
 80065d4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80065d8:	4931      	ldr	r1, [pc, #196]	; (80066a0 <RCCEx_PLL2_Config+0x15c>)
 80065da:	4313      	orrs	r3, r2
 80065dc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80065de:	4b30      	ldr	r3, [pc, #192]	; (80066a0 <RCCEx_PLL2_Config+0x15c>)
 80065e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065e2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	695b      	ldr	r3, [r3, #20]
 80065ea:	492d      	ldr	r1, [pc, #180]	; (80066a0 <RCCEx_PLL2_Config+0x15c>)
 80065ec:	4313      	orrs	r3, r2
 80065ee:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80065f0:	4b2b      	ldr	r3, [pc, #172]	; (80066a0 <RCCEx_PLL2_Config+0x15c>)
 80065f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065f4:	f023 0220 	bic.w	r2, r3, #32
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	699b      	ldr	r3, [r3, #24]
 80065fc:	4928      	ldr	r1, [pc, #160]	; (80066a0 <RCCEx_PLL2_Config+0x15c>)
 80065fe:	4313      	orrs	r3, r2
 8006600:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006602:	4b27      	ldr	r3, [pc, #156]	; (80066a0 <RCCEx_PLL2_Config+0x15c>)
 8006604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006606:	4a26      	ldr	r2, [pc, #152]	; (80066a0 <RCCEx_PLL2_Config+0x15c>)
 8006608:	f023 0310 	bic.w	r3, r3, #16
 800660c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800660e:	4b24      	ldr	r3, [pc, #144]	; (80066a0 <RCCEx_PLL2_Config+0x15c>)
 8006610:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006612:	4b24      	ldr	r3, [pc, #144]	; (80066a4 <RCCEx_PLL2_Config+0x160>)
 8006614:	4013      	ands	r3, r2
 8006616:	687a      	ldr	r2, [r7, #4]
 8006618:	69d2      	ldr	r2, [r2, #28]
 800661a:	00d2      	lsls	r2, r2, #3
 800661c:	4920      	ldr	r1, [pc, #128]	; (80066a0 <RCCEx_PLL2_Config+0x15c>)
 800661e:	4313      	orrs	r3, r2
 8006620:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006622:	4b1f      	ldr	r3, [pc, #124]	; (80066a0 <RCCEx_PLL2_Config+0x15c>)
 8006624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006626:	4a1e      	ldr	r2, [pc, #120]	; (80066a0 <RCCEx_PLL2_Config+0x15c>)
 8006628:	f043 0310 	orr.w	r3, r3, #16
 800662c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d106      	bne.n	8006642 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006634:	4b1a      	ldr	r3, [pc, #104]	; (80066a0 <RCCEx_PLL2_Config+0x15c>)
 8006636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006638:	4a19      	ldr	r2, [pc, #100]	; (80066a0 <RCCEx_PLL2_Config+0x15c>)
 800663a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800663e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006640:	e00f      	b.n	8006662 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	2b01      	cmp	r3, #1
 8006646:	d106      	bne.n	8006656 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006648:	4b15      	ldr	r3, [pc, #84]	; (80066a0 <RCCEx_PLL2_Config+0x15c>)
 800664a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800664c:	4a14      	ldr	r2, [pc, #80]	; (80066a0 <RCCEx_PLL2_Config+0x15c>)
 800664e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006652:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006654:	e005      	b.n	8006662 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006656:	4b12      	ldr	r3, [pc, #72]	; (80066a0 <RCCEx_PLL2_Config+0x15c>)
 8006658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800665a:	4a11      	ldr	r2, [pc, #68]	; (80066a0 <RCCEx_PLL2_Config+0x15c>)
 800665c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006660:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006662:	4b0f      	ldr	r3, [pc, #60]	; (80066a0 <RCCEx_PLL2_Config+0x15c>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a0e      	ldr	r2, [pc, #56]	; (80066a0 <RCCEx_PLL2_Config+0x15c>)
 8006668:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800666c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800666e:	f7fb f9bf 	bl	80019f0 <HAL_GetTick>
 8006672:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006674:	e008      	b.n	8006688 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006676:	f7fb f9bb 	bl	80019f0 <HAL_GetTick>
 800667a:	4602      	mov	r2, r0
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	1ad3      	subs	r3, r2, r3
 8006680:	2b02      	cmp	r3, #2
 8006682:	d901      	bls.n	8006688 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006684:	2303      	movs	r3, #3
 8006686:	e006      	b.n	8006696 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006688:	4b05      	ldr	r3, [pc, #20]	; (80066a0 <RCCEx_PLL2_Config+0x15c>)
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006690:	2b00      	cmp	r3, #0
 8006692:	d0f0      	beq.n	8006676 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006694:	7bfb      	ldrb	r3, [r7, #15]
}
 8006696:	4618      	mov	r0, r3
 8006698:	3710      	adds	r7, #16
 800669a:	46bd      	mov	sp, r7
 800669c:	bd80      	pop	{r7, pc}
 800669e:	bf00      	nop
 80066a0:	58024400 	.word	0x58024400
 80066a4:	ffff0007 	.word	0xffff0007

080066a8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b084      	sub	sp, #16
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
 80066b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80066b2:	2300      	movs	r3, #0
 80066b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80066b6:	4b53      	ldr	r3, [pc, #332]	; (8006804 <RCCEx_PLL3_Config+0x15c>)
 80066b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066ba:	f003 0303 	and.w	r3, r3, #3
 80066be:	2b03      	cmp	r3, #3
 80066c0:	d101      	bne.n	80066c6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80066c2:	2301      	movs	r3, #1
 80066c4:	e099      	b.n	80067fa <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80066c6:	4b4f      	ldr	r3, [pc, #316]	; (8006804 <RCCEx_PLL3_Config+0x15c>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a4e      	ldr	r2, [pc, #312]	; (8006804 <RCCEx_PLL3_Config+0x15c>)
 80066cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80066d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80066d2:	f7fb f98d 	bl	80019f0 <HAL_GetTick>
 80066d6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80066d8:	e008      	b.n	80066ec <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80066da:	f7fb f989 	bl	80019f0 <HAL_GetTick>
 80066de:	4602      	mov	r2, r0
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	1ad3      	subs	r3, r2, r3
 80066e4:	2b02      	cmp	r3, #2
 80066e6:	d901      	bls.n	80066ec <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80066e8:	2303      	movs	r3, #3
 80066ea:	e086      	b.n	80067fa <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80066ec:	4b45      	ldr	r3, [pc, #276]	; (8006804 <RCCEx_PLL3_Config+0x15c>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d1f0      	bne.n	80066da <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80066f8:	4b42      	ldr	r3, [pc, #264]	; (8006804 <RCCEx_PLL3_Config+0x15c>)
 80066fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066fc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	051b      	lsls	r3, r3, #20
 8006706:	493f      	ldr	r1, [pc, #252]	; (8006804 <RCCEx_PLL3_Config+0x15c>)
 8006708:	4313      	orrs	r3, r2
 800670a:	628b      	str	r3, [r1, #40]	; 0x28
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	685b      	ldr	r3, [r3, #4]
 8006710:	3b01      	subs	r3, #1
 8006712:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	689b      	ldr	r3, [r3, #8]
 800671a:	3b01      	subs	r3, #1
 800671c:	025b      	lsls	r3, r3, #9
 800671e:	b29b      	uxth	r3, r3
 8006720:	431a      	orrs	r2, r3
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	68db      	ldr	r3, [r3, #12]
 8006726:	3b01      	subs	r3, #1
 8006728:	041b      	lsls	r3, r3, #16
 800672a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800672e:	431a      	orrs	r2, r3
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	691b      	ldr	r3, [r3, #16]
 8006734:	3b01      	subs	r3, #1
 8006736:	061b      	lsls	r3, r3, #24
 8006738:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800673c:	4931      	ldr	r1, [pc, #196]	; (8006804 <RCCEx_PLL3_Config+0x15c>)
 800673e:	4313      	orrs	r3, r2
 8006740:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006742:	4b30      	ldr	r3, [pc, #192]	; (8006804 <RCCEx_PLL3_Config+0x15c>)
 8006744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006746:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	695b      	ldr	r3, [r3, #20]
 800674e:	492d      	ldr	r1, [pc, #180]	; (8006804 <RCCEx_PLL3_Config+0x15c>)
 8006750:	4313      	orrs	r3, r2
 8006752:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006754:	4b2b      	ldr	r3, [pc, #172]	; (8006804 <RCCEx_PLL3_Config+0x15c>)
 8006756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006758:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	699b      	ldr	r3, [r3, #24]
 8006760:	4928      	ldr	r1, [pc, #160]	; (8006804 <RCCEx_PLL3_Config+0x15c>)
 8006762:	4313      	orrs	r3, r2
 8006764:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006766:	4b27      	ldr	r3, [pc, #156]	; (8006804 <RCCEx_PLL3_Config+0x15c>)
 8006768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800676a:	4a26      	ldr	r2, [pc, #152]	; (8006804 <RCCEx_PLL3_Config+0x15c>)
 800676c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006770:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006772:	4b24      	ldr	r3, [pc, #144]	; (8006804 <RCCEx_PLL3_Config+0x15c>)
 8006774:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006776:	4b24      	ldr	r3, [pc, #144]	; (8006808 <RCCEx_PLL3_Config+0x160>)
 8006778:	4013      	ands	r3, r2
 800677a:	687a      	ldr	r2, [r7, #4]
 800677c:	69d2      	ldr	r2, [r2, #28]
 800677e:	00d2      	lsls	r2, r2, #3
 8006780:	4920      	ldr	r1, [pc, #128]	; (8006804 <RCCEx_PLL3_Config+0x15c>)
 8006782:	4313      	orrs	r3, r2
 8006784:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006786:	4b1f      	ldr	r3, [pc, #124]	; (8006804 <RCCEx_PLL3_Config+0x15c>)
 8006788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800678a:	4a1e      	ldr	r2, [pc, #120]	; (8006804 <RCCEx_PLL3_Config+0x15c>)
 800678c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006790:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d106      	bne.n	80067a6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006798:	4b1a      	ldr	r3, [pc, #104]	; (8006804 <RCCEx_PLL3_Config+0x15c>)
 800679a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800679c:	4a19      	ldr	r2, [pc, #100]	; (8006804 <RCCEx_PLL3_Config+0x15c>)
 800679e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80067a2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80067a4:	e00f      	b.n	80067c6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	2b01      	cmp	r3, #1
 80067aa:	d106      	bne.n	80067ba <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80067ac:	4b15      	ldr	r3, [pc, #84]	; (8006804 <RCCEx_PLL3_Config+0x15c>)
 80067ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067b0:	4a14      	ldr	r2, [pc, #80]	; (8006804 <RCCEx_PLL3_Config+0x15c>)
 80067b2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80067b6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80067b8:	e005      	b.n	80067c6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80067ba:	4b12      	ldr	r3, [pc, #72]	; (8006804 <RCCEx_PLL3_Config+0x15c>)
 80067bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067be:	4a11      	ldr	r2, [pc, #68]	; (8006804 <RCCEx_PLL3_Config+0x15c>)
 80067c0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80067c4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80067c6:	4b0f      	ldr	r3, [pc, #60]	; (8006804 <RCCEx_PLL3_Config+0x15c>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4a0e      	ldr	r2, [pc, #56]	; (8006804 <RCCEx_PLL3_Config+0x15c>)
 80067cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80067d2:	f7fb f90d 	bl	80019f0 <HAL_GetTick>
 80067d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80067d8:	e008      	b.n	80067ec <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80067da:	f7fb f909 	bl	80019f0 <HAL_GetTick>
 80067de:	4602      	mov	r2, r0
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	1ad3      	subs	r3, r2, r3
 80067e4:	2b02      	cmp	r3, #2
 80067e6:	d901      	bls.n	80067ec <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80067e8:	2303      	movs	r3, #3
 80067ea:	e006      	b.n	80067fa <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80067ec:	4b05      	ldr	r3, [pc, #20]	; (8006804 <RCCEx_PLL3_Config+0x15c>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d0f0      	beq.n	80067da <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80067f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	3710      	adds	r7, #16
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}
 8006802:	bf00      	nop
 8006804:	58024400 	.word	0x58024400
 8006808:	ffff0007 	.word	0xffff0007

0800680c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b082      	sub	sp, #8
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d101      	bne.n	800681e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800681a:	2301      	movs	r3, #1
 800681c:	e049      	b.n	80068b2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006824:	b2db      	uxtb	r3, r3
 8006826:	2b00      	cmp	r3, #0
 8006828:	d106      	bne.n	8006838 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2200      	movs	r2, #0
 800682e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f000 f841 	bl	80068ba <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2202      	movs	r2, #2
 800683c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681a      	ldr	r2, [r3, #0]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	3304      	adds	r3, #4
 8006848:	4619      	mov	r1, r3
 800684a:	4610      	mov	r0, r2
 800684c:	f000 f9f8 	bl	8006c40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2201      	movs	r2, #1
 8006854:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2201      	movs	r2, #1
 800685c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2201      	movs	r2, #1
 8006864:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2201      	movs	r2, #1
 800686c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2201      	movs	r2, #1
 8006874:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2201      	movs	r2, #1
 800687c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2201      	movs	r2, #1
 8006884:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2201      	movs	r2, #1
 800688c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2201      	movs	r2, #1
 8006894:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2201      	movs	r2, #1
 800689c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2201      	movs	r2, #1
 80068a4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2201      	movs	r2, #1
 80068ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80068b0:	2300      	movs	r3, #0
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	3708      	adds	r7, #8
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd80      	pop	{r7, pc}

080068ba <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80068ba:	b480      	push	{r7}
 80068bc:	b083      	sub	sp, #12
 80068be:	af00      	add	r7, sp, #0
 80068c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80068c2:	bf00      	nop
 80068c4:	370c      	adds	r7, #12
 80068c6:	46bd      	mov	sp, r7
 80068c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068cc:	4770      	bx	lr
	...

080068d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80068d0:	b480      	push	{r7}
 80068d2:	b085      	sub	sp, #20
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068de:	b2db      	uxtb	r3, r3
 80068e0:	2b01      	cmp	r3, #1
 80068e2:	d001      	beq.n	80068e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80068e4:	2301      	movs	r3, #1
 80068e6:	e04f      	b.n	8006988 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2202      	movs	r2, #2
 80068ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	68da      	ldr	r2, [r3, #12]
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f042 0201 	orr.w	r2, r2, #1
 80068fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a23      	ldr	r2, [pc, #140]	; (8006994 <HAL_TIM_Base_Start_IT+0xc4>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d01d      	beq.n	8006946 <HAL_TIM_Base_Start_IT+0x76>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006912:	d018      	beq.n	8006946 <HAL_TIM_Base_Start_IT+0x76>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a1f      	ldr	r2, [pc, #124]	; (8006998 <HAL_TIM_Base_Start_IT+0xc8>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d013      	beq.n	8006946 <HAL_TIM_Base_Start_IT+0x76>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a1e      	ldr	r2, [pc, #120]	; (800699c <HAL_TIM_Base_Start_IT+0xcc>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d00e      	beq.n	8006946 <HAL_TIM_Base_Start_IT+0x76>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a1c      	ldr	r2, [pc, #112]	; (80069a0 <HAL_TIM_Base_Start_IT+0xd0>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d009      	beq.n	8006946 <HAL_TIM_Base_Start_IT+0x76>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4a1b      	ldr	r2, [pc, #108]	; (80069a4 <HAL_TIM_Base_Start_IT+0xd4>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d004      	beq.n	8006946 <HAL_TIM_Base_Start_IT+0x76>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4a19      	ldr	r2, [pc, #100]	; (80069a8 <HAL_TIM_Base_Start_IT+0xd8>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d115      	bne.n	8006972 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	689a      	ldr	r2, [r3, #8]
 800694c:	4b17      	ldr	r3, [pc, #92]	; (80069ac <HAL_TIM_Base_Start_IT+0xdc>)
 800694e:	4013      	ands	r3, r2
 8006950:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	2b06      	cmp	r3, #6
 8006956:	d015      	beq.n	8006984 <HAL_TIM_Base_Start_IT+0xb4>
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800695e:	d011      	beq.n	8006984 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	681a      	ldr	r2, [r3, #0]
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f042 0201 	orr.w	r2, r2, #1
 800696e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006970:	e008      	b.n	8006984 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	681a      	ldr	r2, [r3, #0]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f042 0201 	orr.w	r2, r2, #1
 8006980:	601a      	str	r2, [r3, #0]
 8006982:	e000      	b.n	8006986 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006984:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006986:	2300      	movs	r3, #0
}
 8006988:	4618      	mov	r0, r3
 800698a:	3714      	adds	r7, #20
 800698c:	46bd      	mov	sp, r7
 800698e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006992:	4770      	bx	lr
 8006994:	40010000 	.word	0x40010000
 8006998:	40000400 	.word	0x40000400
 800699c:	40000800 	.word	0x40000800
 80069a0:	40000c00 	.word	0x40000c00
 80069a4:	40010400 	.word	0x40010400
 80069a8:	40001800 	.word	0x40001800
 80069ac:	00010007 	.word	0x00010007

080069b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b082      	sub	sp, #8
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	691b      	ldr	r3, [r3, #16]
 80069be:	f003 0302 	and.w	r3, r3, #2
 80069c2:	2b02      	cmp	r3, #2
 80069c4:	d122      	bne.n	8006a0c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	68db      	ldr	r3, [r3, #12]
 80069cc:	f003 0302 	and.w	r3, r3, #2
 80069d0:	2b02      	cmp	r3, #2
 80069d2:	d11b      	bne.n	8006a0c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f06f 0202 	mvn.w	r2, #2
 80069dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2201      	movs	r2, #1
 80069e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	699b      	ldr	r3, [r3, #24]
 80069ea:	f003 0303 	and.w	r3, r3, #3
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d003      	beq.n	80069fa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f000 f905 	bl	8006c02 <HAL_TIM_IC_CaptureCallback>
 80069f8:	e005      	b.n	8006a06 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f000 f8f7 	bl	8006bee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	f000 f908 	bl	8006c16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	691b      	ldr	r3, [r3, #16]
 8006a12:	f003 0304 	and.w	r3, r3, #4
 8006a16:	2b04      	cmp	r3, #4
 8006a18:	d122      	bne.n	8006a60 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	68db      	ldr	r3, [r3, #12]
 8006a20:	f003 0304 	and.w	r3, r3, #4
 8006a24:	2b04      	cmp	r3, #4
 8006a26:	d11b      	bne.n	8006a60 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f06f 0204 	mvn.w	r2, #4
 8006a30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2202      	movs	r2, #2
 8006a36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	699b      	ldr	r3, [r3, #24]
 8006a3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d003      	beq.n	8006a4e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f000 f8db 	bl	8006c02 <HAL_TIM_IC_CaptureCallback>
 8006a4c:	e005      	b.n	8006a5a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f000 f8cd 	bl	8006bee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f000 f8de 	bl	8006c16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	691b      	ldr	r3, [r3, #16]
 8006a66:	f003 0308 	and.w	r3, r3, #8
 8006a6a:	2b08      	cmp	r3, #8
 8006a6c:	d122      	bne.n	8006ab4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	68db      	ldr	r3, [r3, #12]
 8006a74:	f003 0308 	and.w	r3, r3, #8
 8006a78:	2b08      	cmp	r3, #8
 8006a7a:	d11b      	bne.n	8006ab4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f06f 0208 	mvn.w	r2, #8
 8006a84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2204      	movs	r2, #4
 8006a8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	69db      	ldr	r3, [r3, #28]
 8006a92:	f003 0303 	and.w	r3, r3, #3
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d003      	beq.n	8006aa2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f000 f8b1 	bl	8006c02 <HAL_TIM_IC_CaptureCallback>
 8006aa0:	e005      	b.n	8006aae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f000 f8a3 	bl	8006bee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	f000 f8b4 	bl	8006c16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	691b      	ldr	r3, [r3, #16]
 8006aba:	f003 0310 	and.w	r3, r3, #16
 8006abe:	2b10      	cmp	r3, #16
 8006ac0:	d122      	bne.n	8006b08 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	68db      	ldr	r3, [r3, #12]
 8006ac8:	f003 0310 	and.w	r3, r3, #16
 8006acc:	2b10      	cmp	r3, #16
 8006ace:	d11b      	bne.n	8006b08 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f06f 0210 	mvn.w	r2, #16
 8006ad8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2208      	movs	r2, #8
 8006ade:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	69db      	ldr	r3, [r3, #28]
 8006ae6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d003      	beq.n	8006af6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f000 f887 	bl	8006c02 <HAL_TIM_IC_CaptureCallback>
 8006af4:	e005      	b.n	8006b02 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f000 f879 	bl	8006bee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f000 f88a 	bl	8006c16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2200      	movs	r2, #0
 8006b06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	691b      	ldr	r3, [r3, #16]
 8006b0e:	f003 0301 	and.w	r3, r3, #1
 8006b12:	2b01      	cmp	r3, #1
 8006b14:	d10e      	bne.n	8006b34 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	68db      	ldr	r3, [r3, #12]
 8006b1c:	f003 0301 	and.w	r3, r3, #1
 8006b20:	2b01      	cmp	r3, #1
 8006b22:	d107      	bne.n	8006b34 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f06f 0201 	mvn.w	r2, #1
 8006b2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f7fa f876 	bl	8000c20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	691b      	ldr	r3, [r3, #16]
 8006b3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b3e:	2b80      	cmp	r3, #128	; 0x80
 8006b40:	d10e      	bne.n	8006b60 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	68db      	ldr	r3, [r3, #12]
 8006b48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b4c:	2b80      	cmp	r3, #128	; 0x80
 8006b4e:	d107      	bne.n	8006b60 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006b58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f000 f914 	bl	8006d88 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	691b      	ldr	r3, [r3, #16]
 8006b66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b6e:	d10e      	bne.n	8006b8e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	68db      	ldr	r3, [r3, #12]
 8006b76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b7a:	2b80      	cmp	r3, #128	; 0x80
 8006b7c:	d107      	bne.n	8006b8e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006b86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f000 f907 	bl	8006d9c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	691b      	ldr	r3, [r3, #16]
 8006b94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b98:	2b40      	cmp	r3, #64	; 0x40
 8006b9a:	d10e      	bne.n	8006bba <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	68db      	ldr	r3, [r3, #12]
 8006ba2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ba6:	2b40      	cmp	r3, #64	; 0x40
 8006ba8:	d107      	bne.n	8006bba <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006bb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f000 f838 	bl	8006c2a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	691b      	ldr	r3, [r3, #16]
 8006bc0:	f003 0320 	and.w	r3, r3, #32
 8006bc4:	2b20      	cmp	r3, #32
 8006bc6:	d10e      	bne.n	8006be6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	68db      	ldr	r3, [r3, #12]
 8006bce:	f003 0320 	and.w	r3, r3, #32
 8006bd2:	2b20      	cmp	r3, #32
 8006bd4:	d107      	bne.n	8006be6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f06f 0220 	mvn.w	r2, #32
 8006bde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f000 f8c7 	bl	8006d74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006be6:	bf00      	nop
 8006be8:	3708      	adds	r7, #8
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd80      	pop	{r7, pc}

08006bee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006bee:	b480      	push	{r7}
 8006bf0:	b083      	sub	sp, #12
 8006bf2:	af00      	add	r7, sp, #0
 8006bf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006bf6:	bf00      	nop
 8006bf8:	370c      	adds	r7, #12
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c00:	4770      	bx	lr

08006c02 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006c02:	b480      	push	{r7}
 8006c04:	b083      	sub	sp, #12
 8006c06:	af00      	add	r7, sp, #0
 8006c08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006c0a:	bf00      	nop
 8006c0c:	370c      	adds	r7, #12
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c14:	4770      	bx	lr

08006c16 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006c16:	b480      	push	{r7}
 8006c18:	b083      	sub	sp, #12
 8006c1a:	af00      	add	r7, sp, #0
 8006c1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006c1e:	bf00      	nop
 8006c20:	370c      	adds	r7, #12
 8006c22:	46bd      	mov	sp, r7
 8006c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c28:	4770      	bx	lr

08006c2a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006c2a:	b480      	push	{r7}
 8006c2c:	b083      	sub	sp, #12
 8006c2e:	af00      	add	r7, sp, #0
 8006c30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006c32:	bf00      	nop
 8006c34:	370c      	adds	r7, #12
 8006c36:	46bd      	mov	sp, r7
 8006c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3c:	4770      	bx	lr
	...

08006c40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006c40:	b480      	push	{r7}
 8006c42:	b085      	sub	sp, #20
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
 8006c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	4a40      	ldr	r2, [pc, #256]	; (8006d54 <TIM_Base_SetConfig+0x114>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d013      	beq.n	8006c80 <TIM_Base_SetConfig+0x40>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c5e:	d00f      	beq.n	8006c80 <TIM_Base_SetConfig+0x40>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	4a3d      	ldr	r2, [pc, #244]	; (8006d58 <TIM_Base_SetConfig+0x118>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d00b      	beq.n	8006c80 <TIM_Base_SetConfig+0x40>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	4a3c      	ldr	r2, [pc, #240]	; (8006d5c <TIM_Base_SetConfig+0x11c>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d007      	beq.n	8006c80 <TIM_Base_SetConfig+0x40>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	4a3b      	ldr	r2, [pc, #236]	; (8006d60 <TIM_Base_SetConfig+0x120>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d003      	beq.n	8006c80 <TIM_Base_SetConfig+0x40>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	4a3a      	ldr	r2, [pc, #232]	; (8006d64 <TIM_Base_SetConfig+0x124>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d108      	bne.n	8006c92 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	685b      	ldr	r3, [r3, #4]
 8006c8c:	68fa      	ldr	r2, [r7, #12]
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	4a2f      	ldr	r2, [pc, #188]	; (8006d54 <TIM_Base_SetConfig+0x114>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d01f      	beq.n	8006cda <TIM_Base_SetConfig+0x9a>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ca0:	d01b      	beq.n	8006cda <TIM_Base_SetConfig+0x9a>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	4a2c      	ldr	r2, [pc, #176]	; (8006d58 <TIM_Base_SetConfig+0x118>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d017      	beq.n	8006cda <TIM_Base_SetConfig+0x9a>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	4a2b      	ldr	r2, [pc, #172]	; (8006d5c <TIM_Base_SetConfig+0x11c>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d013      	beq.n	8006cda <TIM_Base_SetConfig+0x9a>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	4a2a      	ldr	r2, [pc, #168]	; (8006d60 <TIM_Base_SetConfig+0x120>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d00f      	beq.n	8006cda <TIM_Base_SetConfig+0x9a>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	4a29      	ldr	r2, [pc, #164]	; (8006d64 <TIM_Base_SetConfig+0x124>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d00b      	beq.n	8006cda <TIM_Base_SetConfig+0x9a>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	4a28      	ldr	r2, [pc, #160]	; (8006d68 <TIM_Base_SetConfig+0x128>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d007      	beq.n	8006cda <TIM_Base_SetConfig+0x9a>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	4a27      	ldr	r2, [pc, #156]	; (8006d6c <TIM_Base_SetConfig+0x12c>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d003      	beq.n	8006cda <TIM_Base_SetConfig+0x9a>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	4a26      	ldr	r2, [pc, #152]	; (8006d70 <TIM_Base_SetConfig+0x130>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d108      	bne.n	8006cec <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ce0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	68db      	ldr	r3, [r3, #12]
 8006ce6:	68fa      	ldr	r2, [r7, #12]
 8006ce8:	4313      	orrs	r3, r2
 8006cea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	695b      	ldr	r3, [r3, #20]
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	68fa      	ldr	r2, [r7, #12]
 8006cfe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	689a      	ldr	r2, [r3, #8]
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	681a      	ldr	r2, [r3, #0]
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	4a10      	ldr	r2, [pc, #64]	; (8006d54 <TIM_Base_SetConfig+0x114>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d00f      	beq.n	8006d38 <TIM_Base_SetConfig+0xf8>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	4a12      	ldr	r2, [pc, #72]	; (8006d64 <TIM_Base_SetConfig+0x124>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d00b      	beq.n	8006d38 <TIM_Base_SetConfig+0xf8>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	4a11      	ldr	r2, [pc, #68]	; (8006d68 <TIM_Base_SetConfig+0x128>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d007      	beq.n	8006d38 <TIM_Base_SetConfig+0xf8>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	4a10      	ldr	r2, [pc, #64]	; (8006d6c <TIM_Base_SetConfig+0x12c>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d003      	beq.n	8006d38 <TIM_Base_SetConfig+0xf8>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	4a0f      	ldr	r2, [pc, #60]	; (8006d70 <TIM_Base_SetConfig+0x130>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d103      	bne.n	8006d40 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	691a      	ldr	r2, [r3, #16]
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2201      	movs	r2, #1
 8006d44:	615a      	str	r2, [r3, #20]
}
 8006d46:	bf00      	nop
 8006d48:	3714      	adds	r7, #20
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d50:	4770      	bx	lr
 8006d52:	bf00      	nop
 8006d54:	40010000 	.word	0x40010000
 8006d58:	40000400 	.word	0x40000400
 8006d5c:	40000800 	.word	0x40000800
 8006d60:	40000c00 	.word	0x40000c00
 8006d64:	40010400 	.word	0x40010400
 8006d68:	40014000 	.word	0x40014000
 8006d6c:	40014400 	.word	0x40014400
 8006d70:	40014800 	.word	0x40014800

08006d74 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006d74:	b480      	push	{r7}
 8006d76:	b083      	sub	sp, #12
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006d7c:	bf00      	nop
 8006d7e:	370c      	adds	r7, #12
 8006d80:	46bd      	mov	sp, r7
 8006d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d86:	4770      	bx	lr

08006d88 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b083      	sub	sp, #12
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006d90:	bf00      	nop
 8006d92:	370c      	adds	r7, #12
 8006d94:	46bd      	mov	sp, r7
 8006d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9a:	4770      	bx	lr

08006d9c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b083      	sub	sp, #12
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006da4:	bf00      	nop
 8006da6:	370c      	adds	r7, #12
 8006da8:	46bd      	mov	sp, r7
 8006daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dae:	4770      	bx	lr

08006db0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b082      	sub	sp, #8
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d101      	bne.n	8006dc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	e042      	b.n	8006e48 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d106      	bne.n	8006dda <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	f7f9 ff59 	bl	8000c8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2224      	movs	r2, #36	; 0x24
 8006dde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	681a      	ldr	r2, [r3, #0]
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f022 0201 	bic.w	r2, r2, #1
 8006df0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f000 f82c 	bl	8006e50 <UART_SetConfig>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	2b01      	cmp	r3, #1
 8006dfc:	d101      	bne.n	8006e02 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006dfe:	2301      	movs	r3, #1
 8006e00:	e022      	b.n	8006e48 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d002      	beq.n	8006e10 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f000 fd80 	bl	8007910 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	685a      	ldr	r2, [r3, #4]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006e1e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	689a      	ldr	r2, [r3, #8]
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006e2e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	681a      	ldr	r2, [r3, #0]
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f042 0201 	orr.w	r2, r2, #1
 8006e3e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	f000 fe07 	bl	8007a54 <UART_CheckIdleState>
 8006e46:	4603      	mov	r3, r0
}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	3708      	adds	r7, #8
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bd80      	pop	{r7, pc}

08006e50 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006e50:	b5b0      	push	{r4, r5, r7, lr}
 8006e52:	b08e      	sub	sp, #56	; 0x38
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006e58:	2300      	movs	r3, #0
 8006e5a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	689a      	ldr	r2, [r3, #8]
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	691b      	ldr	r3, [r3, #16]
 8006e66:	431a      	orrs	r2, r3
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	695b      	ldr	r3, [r3, #20]
 8006e6c:	431a      	orrs	r2, r3
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	69db      	ldr	r3, [r3, #28]
 8006e72:	4313      	orrs	r3, r2
 8006e74:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	681a      	ldr	r2, [r3, #0]
 8006e7c:	4bbf      	ldr	r3, [pc, #764]	; (800717c <UART_SetConfig+0x32c>)
 8006e7e:	4013      	ands	r3, r2
 8006e80:	687a      	ldr	r2, [r7, #4]
 8006e82:	6812      	ldr	r2, [r2, #0]
 8006e84:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006e86:	430b      	orrs	r3, r1
 8006e88:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	68da      	ldr	r2, [r3, #12]
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	430a      	orrs	r2, r1
 8006e9e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	699b      	ldr	r3, [r3, #24]
 8006ea4:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4ab5      	ldr	r2, [pc, #724]	; (8007180 <UART_SetConfig+0x330>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d004      	beq.n	8006eba <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6a1b      	ldr	r3, [r3, #32]
 8006eb4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	689a      	ldr	r2, [r3, #8]
 8006ec0:	4bb0      	ldr	r3, [pc, #704]	; (8007184 <UART_SetConfig+0x334>)
 8006ec2:	4013      	ands	r3, r2
 8006ec4:	687a      	ldr	r2, [r7, #4]
 8006ec6:	6812      	ldr	r2, [r2, #0]
 8006ec8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006eca:	430b      	orrs	r3, r1
 8006ecc:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ed4:	f023 010f 	bic.w	r1, r3, #15
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	430a      	orrs	r2, r1
 8006ee2:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	4aa7      	ldr	r2, [pc, #668]	; (8007188 <UART_SetConfig+0x338>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d176      	bne.n	8006fdc <UART_SetConfig+0x18c>
 8006eee:	4ba7      	ldr	r3, [pc, #668]	; (800718c <UART_SetConfig+0x33c>)
 8006ef0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ef2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006ef6:	2b28      	cmp	r3, #40	; 0x28
 8006ef8:	d86c      	bhi.n	8006fd4 <UART_SetConfig+0x184>
 8006efa:	a201      	add	r2, pc, #4	; (adr r2, 8006f00 <UART_SetConfig+0xb0>)
 8006efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f00:	08006fa5 	.word	0x08006fa5
 8006f04:	08006fd5 	.word	0x08006fd5
 8006f08:	08006fd5 	.word	0x08006fd5
 8006f0c:	08006fd5 	.word	0x08006fd5
 8006f10:	08006fd5 	.word	0x08006fd5
 8006f14:	08006fd5 	.word	0x08006fd5
 8006f18:	08006fd5 	.word	0x08006fd5
 8006f1c:	08006fd5 	.word	0x08006fd5
 8006f20:	08006fad 	.word	0x08006fad
 8006f24:	08006fd5 	.word	0x08006fd5
 8006f28:	08006fd5 	.word	0x08006fd5
 8006f2c:	08006fd5 	.word	0x08006fd5
 8006f30:	08006fd5 	.word	0x08006fd5
 8006f34:	08006fd5 	.word	0x08006fd5
 8006f38:	08006fd5 	.word	0x08006fd5
 8006f3c:	08006fd5 	.word	0x08006fd5
 8006f40:	08006fb5 	.word	0x08006fb5
 8006f44:	08006fd5 	.word	0x08006fd5
 8006f48:	08006fd5 	.word	0x08006fd5
 8006f4c:	08006fd5 	.word	0x08006fd5
 8006f50:	08006fd5 	.word	0x08006fd5
 8006f54:	08006fd5 	.word	0x08006fd5
 8006f58:	08006fd5 	.word	0x08006fd5
 8006f5c:	08006fd5 	.word	0x08006fd5
 8006f60:	08006fbd 	.word	0x08006fbd
 8006f64:	08006fd5 	.word	0x08006fd5
 8006f68:	08006fd5 	.word	0x08006fd5
 8006f6c:	08006fd5 	.word	0x08006fd5
 8006f70:	08006fd5 	.word	0x08006fd5
 8006f74:	08006fd5 	.word	0x08006fd5
 8006f78:	08006fd5 	.word	0x08006fd5
 8006f7c:	08006fd5 	.word	0x08006fd5
 8006f80:	08006fc5 	.word	0x08006fc5
 8006f84:	08006fd5 	.word	0x08006fd5
 8006f88:	08006fd5 	.word	0x08006fd5
 8006f8c:	08006fd5 	.word	0x08006fd5
 8006f90:	08006fd5 	.word	0x08006fd5
 8006f94:	08006fd5 	.word	0x08006fd5
 8006f98:	08006fd5 	.word	0x08006fd5
 8006f9c:	08006fd5 	.word	0x08006fd5
 8006fa0:	08006fcd 	.word	0x08006fcd
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006faa:	e222      	b.n	80073f2 <UART_SetConfig+0x5a2>
 8006fac:	2304      	movs	r3, #4
 8006fae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006fb2:	e21e      	b.n	80073f2 <UART_SetConfig+0x5a2>
 8006fb4:	2308      	movs	r3, #8
 8006fb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006fba:	e21a      	b.n	80073f2 <UART_SetConfig+0x5a2>
 8006fbc:	2310      	movs	r3, #16
 8006fbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006fc2:	e216      	b.n	80073f2 <UART_SetConfig+0x5a2>
 8006fc4:	2320      	movs	r3, #32
 8006fc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006fca:	e212      	b.n	80073f2 <UART_SetConfig+0x5a2>
 8006fcc:	2340      	movs	r3, #64	; 0x40
 8006fce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006fd2:	e20e      	b.n	80073f2 <UART_SetConfig+0x5a2>
 8006fd4:	2380      	movs	r3, #128	; 0x80
 8006fd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006fda:	e20a      	b.n	80073f2 <UART_SetConfig+0x5a2>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a6b      	ldr	r2, [pc, #428]	; (8007190 <UART_SetConfig+0x340>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d130      	bne.n	8007048 <UART_SetConfig+0x1f8>
 8006fe6:	4b69      	ldr	r3, [pc, #420]	; (800718c <UART_SetConfig+0x33c>)
 8006fe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fea:	f003 0307 	and.w	r3, r3, #7
 8006fee:	2b05      	cmp	r3, #5
 8006ff0:	d826      	bhi.n	8007040 <UART_SetConfig+0x1f0>
 8006ff2:	a201      	add	r2, pc, #4	; (adr r2, 8006ff8 <UART_SetConfig+0x1a8>)
 8006ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ff8:	08007011 	.word	0x08007011
 8006ffc:	08007019 	.word	0x08007019
 8007000:	08007021 	.word	0x08007021
 8007004:	08007029 	.word	0x08007029
 8007008:	08007031 	.word	0x08007031
 800700c:	08007039 	.word	0x08007039
 8007010:	2300      	movs	r3, #0
 8007012:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007016:	e1ec      	b.n	80073f2 <UART_SetConfig+0x5a2>
 8007018:	2304      	movs	r3, #4
 800701a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800701e:	e1e8      	b.n	80073f2 <UART_SetConfig+0x5a2>
 8007020:	2308      	movs	r3, #8
 8007022:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007026:	e1e4      	b.n	80073f2 <UART_SetConfig+0x5a2>
 8007028:	2310      	movs	r3, #16
 800702a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800702e:	e1e0      	b.n	80073f2 <UART_SetConfig+0x5a2>
 8007030:	2320      	movs	r3, #32
 8007032:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007036:	e1dc      	b.n	80073f2 <UART_SetConfig+0x5a2>
 8007038:	2340      	movs	r3, #64	; 0x40
 800703a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800703e:	e1d8      	b.n	80073f2 <UART_SetConfig+0x5a2>
 8007040:	2380      	movs	r3, #128	; 0x80
 8007042:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007046:	e1d4      	b.n	80073f2 <UART_SetConfig+0x5a2>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4a51      	ldr	r2, [pc, #324]	; (8007194 <UART_SetConfig+0x344>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d130      	bne.n	80070b4 <UART_SetConfig+0x264>
 8007052:	4b4e      	ldr	r3, [pc, #312]	; (800718c <UART_SetConfig+0x33c>)
 8007054:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007056:	f003 0307 	and.w	r3, r3, #7
 800705a:	2b05      	cmp	r3, #5
 800705c:	d826      	bhi.n	80070ac <UART_SetConfig+0x25c>
 800705e:	a201      	add	r2, pc, #4	; (adr r2, 8007064 <UART_SetConfig+0x214>)
 8007060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007064:	0800707d 	.word	0x0800707d
 8007068:	08007085 	.word	0x08007085
 800706c:	0800708d 	.word	0x0800708d
 8007070:	08007095 	.word	0x08007095
 8007074:	0800709d 	.word	0x0800709d
 8007078:	080070a5 	.word	0x080070a5
 800707c:	2300      	movs	r3, #0
 800707e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007082:	e1b6      	b.n	80073f2 <UART_SetConfig+0x5a2>
 8007084:	2304      	movs	r3, #4
 8007086:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800708a:	e1b2      	b.n	80073f2 <UART_SetConfig+0x5a2>
 800708c:	2308      	movs	r3, #8
 800708e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007092:	e1ae      	b.n	80073f2 <UART_SetConfig+0x5a2>
 8007094:	2310      	movs	r3, #16
 8007096:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800709a:	e1aa      	b.n	80073f2 <UART_SetConfig+0x5a2>
 800709c:	2320      	movs	r3, #32
 800709e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80070a2:	e1a6      	b.n	80073f2 <UART_SetConfig+0x5a2>
 80070a4:	2340      	movs	r3, #64	; 0x40
 80070a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80070aa:	e1a2      	b.n	80073f2 <UART_SetConfig+0x5a2>
 80070ac:	2380      	movs	r3, #128	; 0x80
 80070ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80070b2:	e19e      	b.n	80073f2 <UART_SetConfig+0x5a2>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4a37      	ldr	r2, [pc, #220]	; (8007198 <UART_SetConfig+0x348>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d130      	bne.n	8007120 <UART_SetConfig+0x2d0>
 80070be:	4b33      	ldr	r3, [pc, #204]	; (800718c <UART_SetConfig+0x33c>)
 80070c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070c2:	f003 0307 	and.w	r3, r3, #7
 80070c6:	2b05      	cmp	r3, #5
 80070c8:	d826      	bhi.n	8007118 <UART_SetConfig+0x2c8>
 80070ca:	a201      	add	r2, pc, #4	; (adr r2, 80070d0 <UART_SetConfig+0x280>)
 80070cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070d0:	080070e9 	.word	0x080070e9
 80070d4:	080070f1 	.word	0x080070f1
 80070d8:	080070f9 	.word	0x080070f9
 80070dc:	08007101 	.word	0x08007101
 80070e0:	08007109 	.word	0x08007109
 80070e4:	08007111 	.word	0x08007111
 80070e8:	2300      	movs	r3, #0
 80070ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80070ee:	e180      	b.n	80073f2 <UART_SetConfig+0x5a2>
 80070f0:	2304      	movs	r3, #4
 80070f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80070f6:	e17c      	b.n	80073f2 <UART_SetConfig+0x5a2>
 80070f8:	2308      	movs	r3, #8
 80070fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80070fe:	e178      	b.n	80073f2 <UART_SetConfig+0x5a2>
 8007100:	2310      	movs	r3, #16
 8007102:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007106:	e174      	b.n	80073f2 <UART_SetConfig+0x5a2>
 8007108:	2320      	movs	r3, #32
 800710a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800710e:	e170      	b.n	80073f2 <UART_SetConfig+0x5a2>
 8007110:	2340      	movs	r3, #64	; 0x40
 8007112:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007116:	e16c      	b.n	80073f2 <UART_SetConfig+0x5a2>
 8007118:	2380      	movs	r3, #128	; 0x80
 800711a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800711e:	e168      	b.n	80073f2 <UART_SetConfig+0x5a2>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4a1d      	ldr	r2, [pc, #116]	; (800719c <UART_SetConfig+0x34c>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d142      	bne.n	80071b0 <UART_SetConfig+0x360>
 800712a:	4b18      	ldr	r3, [pc, #96]	; (800718c <UART_SetConfig+0x33c>)
 800712c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800712e:	f003 0307 	and.w	r3, r3, #7
 8007132:	2b05      	cmp	r3, #5
 8007134:	d838      	bhi.n	80071a8 <UART_SetConfig+0x358>
 8007136:	a201      	add	r2, pc, #4	; (adr r2, 800713c <UART_SetConfig+0x2ec>)
 8007138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800713c:	08007155 	.word	0x08007155
 8007140:	0800715d 	.word	0x0800715d
 8007144:	08007165 	.word	0x08007165
 8007148:	0800716d 	.word	0x0800716d
 800714c:	08007175 	.word	0x08007175
 8007150:	080071a1 	.word	0x080071a1
 8007154:	2300      	movs	r3, #0
 8007156:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800715a:	e14a      	b.n	80073f2 <UART_SetConfig+0x5a2>
 800715c:	2304      	movs	r3, #4
 800715e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007162:	e146      	b.n	80073f2 <UART_SetConfig+0x5a2>
 8007164:	2308      	movs	r3, #8
 8007166:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800716a:	e142      	b.n	80073f2 <UART_SetConfig+0x5a2>
 800716c:	2310      	movs	r3, #16
 800716e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007172:	e13e      	b.n	80073f2 <UART_SetConfig+0x5a2>
 8007174:	2320      	movs	r3, #32
 8007176:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800717a:	e13a      	b.n	80073f2 <UART_SetConfig+0x5a2>
 800717c:	cfff69f3 	.word	0xcfff69f3
 8007180:	58000c00 	.word	0x58000c00
 8007184:	11fff4ff 	.word	0x11fff4ff
 8007188:	40011000 	.word	0x40011000
 800718c:	58024400 	.word	0x58024400
 8007190:	40004400 	.word	0x40004400
 8007194:	40004800 	.word	0x40004800
 8007198:	40004c00 	.word	0x40004c00
 800719c:	40005000 	.word	0x40005000
 80071a0:	2340      	movs	r3, #64	; 0x40
 80071a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80071a6:	e124      	b.n	80073f2 <UART_SetConfig+0x5a2>
 80071a8:	2380      	movs	r3, #128	; 0x80
 80071aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80071ae:	e120      	b.n	80073f2 <UART_SetConfig+0x5a2>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	4acc      	ldr	r2, [pc, #816]	; (80074e8 <UART_SetConfig+0x698>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d176      	bne.n	80072a8 <UART_SetConfig+0x458>
 80071ba:	4bcc      	ldr	r3, [pc, #816]	; (80074ec <UART_SetConfig+0x69c>)
 80071bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80071c2:	2b28      	cmp	r3, #40	; 0x28
 80071c4:	d86c      	bhi.n	80072a0 <UART_SetConfig+0x450>
 80071c6:	a201      	add	r2, pc, #4	; (adr r2, 80071cc <UART_SetConfig+0x37c>)
 80071c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071cc:	08007271 	.word	0x08007271
 80071d0:	080072a1 	.word	0x080072a1
 80071d4:	080072a1 	.word	0x080072a1
 80071d8:	080072a1 	.word	0x080072a1
 80071dc:	080072a1 	.word	0x080072a1
 80071e0:	080072a1 	.word	0x080072a1
 80071e4:	080072a1 	.word	0x080072a1
 80071e8:	080072a1 	.word	0x080072a1
 80071ec:	08007279 	.word	0x08007279
 80071f0:	080072a1 	.word	0x080072a1
 80071f4:	080072a1 	.word	0x080072a1
 80071f8:	080072a1 	.word	0x080072a1
 80071fc:	080072a1 	.word	0x080072a1
 8007200:	080072a1 	.word	0x080072a1
 8007204:	080072a1 	.word	0x080072a1
 8007208:	080072a1 	.word	0x080072a1
 800720c:	08007281 	.word	0x08007281
 8007210:	080072a1 	.word	0x080072a1
 8007214:	080072a1 	.word	0x080072a1
 8007218:	080072a1 	.word	0x080072a1
 800721c:	080072a1 	.word	0x080072a1
 8007220:	080072a1 	.word	0x080072a1
 8007224:	080072a1 	.word	0x080072a1
 8007228:	080072a1 	.word	0x080072a1
 800722c:	08007289 	.word	0x08007289
 8007230:	080072a1 	.word	0x080072a1
 8007234:	080072a1 	.word	0x080072a1
 8007238:	080072a1 	.word	0x080072a1
 800723c:	080072a1 	.word	0x080072a1
 8007240:	080072a1 	.word	0x080072a1
 8007244:	080072a1 	.word	0x080072a1
 8007248:	080072a1 	.word	0x080072a1
 800724c:	08007291 	.word	0x08007291
 8007250:	080072a1 	.word	0x080072a1
 8007254:	080072a1 	.word	0x080072a1
 8007258:	080072a1 	.word	0x080072a1
 800725c:	080072a1 	.word	0x080072a1
 8007260:	080072a1 	.word	0x080072a1
 8007264:	080072a1 	.word	0x080072a1
 8007268:	080072a1 	.word	0x080072a1
 800726c:	08007299 	.word	0x08007299
 8007270:	2301      	movs	r3, #1
 8007272:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007276:	e0bc      	b.n	80073f2 <UART_SetConfig+0x5a2>
 8007278:	2304      	movs	r3, #4
 800727a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800727e:	e0b8      	b.n	80073f2 <UART_SetConfig+0x5a2>
 8007280:	2308      	movs	r3, #8
 8007282:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007286:	e0b4      	b.n	80073f2 <UART_SetConfig+0x5a2>
 8007288:	2310      	movs	r3, #16
 800728a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800728e:	e0b0      	b.n	80073f2 <UART_SetConfig+0x5a2>
 8007290:	2320      	movs	r3, #32
 8007292:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007296:	e0ac      	b.n	80073f2 <UART_SetConfig+0x5a2>
 8007298:	2340      	movs	r3, #64	; 0x40
 800729a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800729e:	e0a8      	b.n	80073f2 <UART_SetConfig+0x5a2>
 80072a0:	2380      	movs	r3, #128	; 0x80
 80072a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80072a6:	e0a4      	b.n	80073f2 <UART_SetConfig+0x5a2>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4a90      	ldr	r2, [pc, #576]	; (80074f0 <UART_SetConfig+0x6a0>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d130      	bne.n	8007314 <UART_SetConfig+0x4c4>
 80072b2:	4b8e      	ldr	r3, [pc, #568]	; (80074ec <UART_SetConfig+0x69c>)
 80072b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072b6:	f003 0307 	and.w	r3, r3, #7
 80072ba:	2b05      	cmp	r3, #5
 80072bc:	d826      	bhi.n	800730c <UART_SetConfig+0x4bc>
 80072be:	a201      	add	r2, pc, #4	; (adr r2, 80072c4 <UART_SetConfig+0x474>)
 80072c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072c4:	080072dd 	.word	0x080072dd
 80072c8:	080072e5 	.word	0x080072e5
 80072cc:	080072ed 	.word	0x080072ed
 80072d0:	080072f5 	.word	0x080072f5
 80072d4:	080072fd 	.word	0x080072fd
 80072d8:	08007305 	.word	0x08007305
 80072dc:	2300      	movs	r3, #0
 80072de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80072e2:	e086      	b.n	80073f2 <UART_SetConfig+0x5a2>
 80072e4:	2304      	movs	r3, #4
 80072e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80072ea:	e082      	b.n	80073f2 <UART_SetConfig+0x5a2>
 80072ec:	2308      	movs	r3, #8
 80072ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80072f2:	e07e      	b.n	80073f2 <UART_SetConfig+0x5a2>
 80072f4:	2310      	movs	r3, #16
 80072f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80072fa:	e07a      	b.n	80073f2 <UART_SetConfig+0x5a2>
 80072fc:	2320      	movs	r3, #32
 80072fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007302:	e076      	b.n	80073f2 <UART_SetConfig+0x5a2>
 8007304:	2340      	movs	r3, #64	; 0x40
 8007306:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800730a:	e072      	b.n	80073f2 <UART_SetConfig+0x5a2>
 800730c:	2380      	movs	r3, #128	; 0x80
 800730e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007312:	e06e      	b.n	80073f2 <UART_SetConfig+0x5a2>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4a76      	ldr	r2, [pc, #472]	; (80074f4 <UART_SetConfig+0x6a4>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d130      	bne.n	8007380 <UART_SetConfig+0x530>
 800731e:	4b73      	ldr	r3, [pc, #460]	; (80074ec <UART_SetConfig+0x69c>)
 8007320:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007322:	f003 0307 	and.w	r3, r3, #7
 8007326:	2b05      	cmp	r3, #5
 8007328:	d826      	bhi.n	8007378 <UART_SetConfig+0x528>
 800732a:	a201      	add	r2, pc, #4	; (adr r2, 8007330 <UART_SetConfig+0x4e0>)
 800732c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007330:	08007349 	.word	0x08007349
 8007334:	08007351 	.word	0x08007351
 8007338:	08007359 	.word	0x08007359
 800733c:	08007361 	.word	0x08007361
 8007340:	08007369 	.word	0x08007369
 8007344:	08007371 	.word	0x08007371
 8007348:	2300      	movs	r3, #0
 800734a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800734e:	e050      	b.n	80073f2 <UART_SetConfig+0x5a2>
 8007350:	2304      	movs	r3, #4
 8007352:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007356:	e04c      	b.n	80073f2 <UART_SetConfig+0x5a2>
 8007358:	2308      	movs	r3, #8
 800735a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800735e:	e048      	b.n	80073f2 <UART_SetConfig+0x5a2>
 8007360:	2310      	movs	r3, #16
 8007362:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007366:	e044      	b.n	80073f2 <UART_SetConfig+0x5a2>
 8007368:	2320      	movs	r3, #32
 800736a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800736e:	e040      	b.n	80073f2 <UART_SetConfig+0x5a2>
 8007370:	2340      	movs	r3, #64	; 0x40
 8007372:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007376:	e03c      	b.n	80073f2 <UART_SetConfig+0x5a2>
 8007378:	2380      	movs	r3, #128	; 0x80
 800737a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800737e:	e038      	b.n	80073f2 <UART_SetConfig+0x5a2>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4a5c      	ldr	r2, [pc, #368]	; (80074f8 <UART_SetConfig+0x6a8>)
 8007386:	4293      	cmp	r3, r2
 8007388:	d130      	bne.n	80073ec <UART_SetConfig+0x59c>
 800738a:	4b58      	ldr	r3, [pc, #352]	; (80074ec <UART_SetConfig+0x69c>)
 800738c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800738e:	f003 0307 	and.w	r3, r3, #7
 8007392:	2b05      	cmp	r3, #5
 8007394:	d826      	bhi.n	80073e4 <UART_SetConfig+0x594>
 8007396:	a201      	add	r2, pc, #4	; (adr r2, 800739c <UART_SetConfig+0x54c>)
 8007398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800739c:	080073b5 	.word	0x080073b5
 80073a0:	080073bd 	.word	0x080073bd
 80073a4:	080073c5 	.word	0x080073c5
 80073a8:	080073cd 	.word	0x080073cd
 80073ac:	080073d5 	.word	0x080073d5
 80073b0:	080073dd 	.word	0x080073dd
 80073b4:	2302      	movs	r3, #2
 80073b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80073ba:	e01a      	b.n	80073f2 <UART_SetConfig+0x5a2>
 80073bc:	2304      	movs	r3, #4
 80073be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80073c2:	e016      	b.n	80073f2 <UART_SetConfig+0x5a2>
 80073c4:	2308      	movs	r3, #8
 80073c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80073ca:	e012      	b.n	80073f2 <UART_SetConfig+0x5a2>
 80073cc:	2310      	movs	r3, #16
 80073ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80073d2:	e00e      	b.n	80073f2 <UART_SetConfig+0x5a2>
 80073d4:	2320      	movs	r3, #32
 80073d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80073da:	e00a      	b.n	80073f2 <UART_SetConfig+0x5a2>
 80073dc:	2340      	movs	r3, #64	; 0x40
 80073de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80073e2:	e006      	b.n	80073f2 <UART_SetConfig+0x5a2>
 80073e4:	2380      	movs	r3, #128	; 0x80
 80073e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80073ea:	e002      	b.n	80073f2 <UART_SetConfig+0x5a2>
 80073ec:	2380      	movs	r3, #128	; 0x80
 80073ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	4a40      	ldr	r2, [pc, #256]	; (80074f8 <UART_SetConfig+0x6a8>)
 80073f8:	4293      	cmp	r3, r2
 80073fa:	f040 80ef 	bne.w	80075dc <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80073fe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007402:	2b20      	cmp	r3, #32
 8007404:	dc46      	bgt.n	8007494 <UART_SetConfig+0x644>
 8007406:	2b02      	cmp	r3, #2
 8007408:	f2c0 8081 	blt.w	800750e <UART_SetConfig+0x6be>
 800740c:	3b02      	subs	r3, #2
 800740e:	2b1e      	cmp	r3, #30
 8007410:	d87d      	bhi.n	800750e <UART_SetConfig+0x6be>
 8007412:	a201      	add	r2, pc, #4	; (adr r2, 8007418 <UART_SetConfig+0x5c8>)
 8007414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007418:	0800749b 	.word	0x0800749b
 800741c:	0800750f 	.word	0x0800750f
 8007420:	080074a3 	.word	0x080074a3
 8007424:	0800750f 	.word	0x0800750f
 8007428:	0800750f 	.word	0x0800750f
 800742c:	0800750f 	.word	0x0800750f
 8007430:	080074b3 	.word	0x080074b3
 8007434:	0800750f 	.word	0x0800750f
 8007438:	0800750f 	.word	0x0800750f
 800743c:	0800750f 	.word	0x0800750f
 8007440:	0800750f 	.word	0x0800750f
 8007444:	0800750f 	.word	0x0800750f
 8007448:	0800750f 	.word	0x0800750f
 800744c:	0800750f 	.word	0x0800750f
 8007450:	080074c3 	.word	0x080074c3
 8007454:	0800750f 	.word	0x0800750f
 8007458:	0800750f 	.word	0x0800750f
 800745c:	0800750f 	.word	0x0800750f
 8007460:	0800750f 	.word	0x0800750f
 8007464:	0800750f 	.word	0x0800750f
 8007468:	0800750f 	.word	0x0800750f
 800746c:	0800750f 	.word	0x0800750f
 8007470:	0800750f 	.word	0x0800750f
 8007474:	0800750f 	.word	0x0800750f
 8007478:	0800750f 	.word	0x0800750f
 800747c:	0800750f 	.word	0x0800750f
 8007480:	0800750f 	.word	0x0800750f
 8007484:	0800750f 	.word	0x0800750f
 8007488:	0800750f 	.word	0x0800750f
 800748c:	0800750f 	.word	0x0800750f
 8007490:	08007501 	.word	0x08007501
 8007494:	2b40      	cmp	r3, #64	; 0x40
 8007496:	d036      	beq.n	8007506 <UART_SetConfig+0x6b6>
 8007498:	e039      	b.n	800750e <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800749a:	f7fe fd95 	bl	8005fc8 <HAL_RCCEx_GetD3PCLK1Freq>
 800749e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80074a0:	e03b      	b.n	800751a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80074a2:	f107 0314 	add.w	r3, r7, #20
 80074a6:	4618      	mov	r0, r3
 80074a8:	f7fe fda4 	bl	8005ff4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80074ac:	69bb      	ldr	r3, [r7, #24]
 80074ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80074b0:	e033      	b.n	800751a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80074b2:	f107 0308 	add.w	r3, r7, #8
 80074b6:	4618      	mov	r0, r3
 80074b8:	f7fe fef0 	bl	800629c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80074c0:	e02b      	b.n	800751a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80074c2:	4b0a      	ldr	r3, [pc, #40]	; (80074ec <UART_SetConfig+0x69c>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f003 0320 	and.w	r3, r3, #32
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d009      	beq.n	80074e2 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80074ce:	4b07      	ldr	r3, [pc, #28]	; (80074ec <UART_SetConfig+0x69c>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	08db      	lsrs	r3, r3, #3
 80074d4:	f003 0303 	and.w	r3, r3, #3
 80074d8:	4a08      	ldr	r2, [pc, #32]	; (80074fc <UART_SetConfig+0x6ac>)
 80074da:	fa22 f303 	lsr.w	r3, r2, r3
 80074de:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80074e0:	e01b      	b.n	800751a <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 80074e2:	4b06      	ldr	r3, [pc, #24]	; (80074fc <UART_SetConfig+0x6ac>)
 80074e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80074e6:	e018      	b.n	800751a <UART_SetConfig+0x6ca>
 80074e8:	40011400 	.word	0x40011400
 80074ec:	58024400 	.word	0x58024400
 80074f0:	40007800 	.word	0x40007800
 80074f4:	40007c00 	.word	0x40007c00
 80074f8:	58000c00 	.word	0x58000c00
 80074fc:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007500:	4bc4      	ldr	r3, [pc, #784]	; (8007814 <UART_SetConfig+0x9c4>)
 8007502:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007504:	e009      	b.n	800751a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007506:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800750a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800750c:	e005      	b.n	800751a <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800750e:	2300      	movs	r3, #0
 8007510:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007512:	2301      	movs	r3, #1
 8007514:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8007518:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800751a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800751c:	2b00      	cmp	r3, #0
 800751e:	f000 81da 	beq.w	80078d6 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007526:	4abc      	ldr	r2, [pc, #752]	; (8007818 <UART_SetConfig+0x9c8>)
 8007528:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800752c:	461a      	mov	r2, r3
 800752e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007530:	fbb3 f3f2 	udiv	r3, r3, r2
 8007534:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	685a      	ldr	r2, [r3, #4]
 800753a:	4613      	mov	r3, r2
 800753c:	005b      	lsls	r3, r3, #1
 800753e:	4413      	add	r3, r2
 8007540:	6a3a      	ldr	r2, [r7, #32]
 8007542:	429a      	cmp	r2, r3
 8007544:	d305      	bcc.n	8007552 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	685b      	ldr	r3, [r3, #4]
 800754a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800754c:	6a3a      	ldr	r2, [r7, #32]
 800754e:	429a      	cmp	r2, r3
 8007550:	d903      	bls.n	800755a <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8007552:	2301      	movs	r3, #1
 8007554:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8007558:	e1bd      	b.n	80078d6 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800755a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800755c:	4618      	mov	r0, r3
 800755e:	f04f 0100 	mov.w	r1, #0
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007566:	4aac      	ldr	r2, [pc, #688]	; (8007818 <UART_SetConfig+0x9c8>)
 8007568:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800756c:	b29a      	uxth	r2, r3
 800756e:	f04f 0300 	mov.w	r3, #0
 8007572:	f7f8 ff05 	bl	8000380 <__aeabi_uldivmod>
 8007576:	4602      	mov	r2, r0
 8007578:	460b      	mov	r3, r1
 800757a:	4610      	mov	r0, r2
 800757c:	4619      	mov	r1, r3
 800757e:	f04f 0200 	mov.w	r2, #0
 8007582:	f04f 0300 	mov.w	r3, #0
 8007586:	020b      	lsls	r3, r1, #8
 8007588:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800758c:	0202      	lsls	r2, r0, #8
 800758e:	6879      	ldr	r1, [r7, #4]
 8007590:	6849      	ldr	r1, [r1, #4]
 8007592:	0849      	lsrs	r1, r1, #1
 8007594:	4608      	mov	r0, r1
 8007596:	f04f 0100 	mov.w	r1, #0
 800759a:	1814      	adds	r4, r2, r0
 800759c:	eb43 0501 	adc.w	r5, r3, r1
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	685b      	ldr	r3, [r3, #4]
 80075a4:	461a      	mov	r2, r3
 80075a6:	f04f 0300 	mov.w	r3, #0
 80075aa:	4620      	mov	r0, r4
 80075ac:	4629      	mov	r1, r5
 80075ae:	f7f8 fee7 	bl	8000380 <__aeabi_uldivmod>
 80075b2:	4602      	mov	r2, r0
 80075b4:	460b      	mov	r3, r1
 80075b6:	4613      	mov	r3, r2
 80075b8:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80075ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80075c0:	d308      	bcc.n	80075d4 <UART_SetConfig+0x784>
 80075c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80075c8:	d204      	bcs.n	80075d4 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80075d0:	60da      	str	r2, [r3, #12]
 80075d2:	e180      	b.n	80078d6 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 80075d4:	2301      	movs	r3, #1
 80075d6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80075da:	e17c      	b.n	80078d6 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	69db      	ldr	r3, [r3, #28]
 80075e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075e4:	f040 80bf 	bne.w	8007766 <UART_SetConfig+0x916>
  {
    switch (clocksource)
 80075e8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80075ec:	2b20      	cmp	r3, #32
 80075ee:	dc49      	bgt.n	8007684 <UART_SetConfig+0x834>
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	db7c      	blt.n	80076ee <UART_SetConfig+0x89e>
 80075f4:	2b20      	cmp	r3, #32
 80075f6:	d87a      	bhi.n	80076ee <UART_SetConfig+0x89e>
 80075f8:	a201      	add	r2, pc, #4	; (adr r2, 8007600 <UART_SetConfig+0x7b0>)
 80075fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075fe:	bf00      	nop
 8007600:	0800768b 	.word	0x0800768b
 8007604:	08007693 	.word	0x08007693
 8007608:	080076ef 	.word	0x080076ef
 800760c:	080076ef 	.word	0x080076ef
 8007610:	0800769b 	.word	0x0800769b
 8007614:	080076ef 	.word	0x080076ef
 8007618:	080076ef 	.word	0x080076ef
 800761c:	080076ef 	.word	0x080076ef
 8007620:	080076ab 	.word	0x080076ab
 8007624:	080076ef 	.word	0x080076ef
 8007628:	080076ef 	.word	0x080076ef
 800762c:	080076ef 	.word	0x080076ef
 8007630:	080076ef 	.word	0x080076ef
 8007634:	080076ef 	.word	0x080076ef
 8007638:	080076ef 	.word	0x080076ef
 800763c:	080076ef 	.word	0x080076ef
 8007640:	080076bb 	.word	0x080076bb
 8007644:	080076ef 	.word	0x080076ef
 8007648:	080076ef 	.word	0x080076ef
 800764c:	080076ef 	.word	0x080076ef
 8007650:	080076ef 	.word	0x080076ef
 8007654:	080076ef 	.word	0x080076ef
 8007658:	080076ef 	.word	0x080076ef
 800765c:	080076ef 	.word	0x080076ef
 8007660:	080076ef 	.word	0x080076ef
 8007664:	080076ef 	.word	0x080076ef
 8007668:	080076ef 	.word	0x080076ef
 800766c:	080076ef 	.word	0x080076ef
 8007670:	080076ef 	.word	0x080076ef
 8007674:	080076ef 	.word	0x080076ef
 8007678:	080076ef 	.word	0x080076ef
 800767c:	080076ef 	.word	0x080076ef
 8007680:	080076e1 	.word	0x080076e1
 8007684:	2b40      	cmp	r3, #64	; 0x40
 8007686:	d02e      	beq.n	80076e6 <UART_SetConfig+0x896>
 8007688:	e031      	b.n	80076ee <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800768a:	f7fd fcef 	bl	800506c <HAL_RCC_GetPCLK1Freq>
 800768e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007690:	e033      	b.n	80076fa <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007692:	f7fd fd01 	bl	8005098 <HAL_RCC_GetPCLK2Freq>
 8007696:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007698:	e02f      	b.n	80076fa <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800769a:	f107 0314 	add.w	r3, r7, #20
 800769e:	4618      	mov	r0, r3
 80076a0:	f7fe fca8 	bl	8005ff4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80076a4:	69bb      	ldr	r3, [r7, #24]
 80076a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80076a8:	e027      	b.n	80076fa <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80076aa:	f107 0308 	add.w	r3, r7, #8
 80076ae:	4618      	mov	r0, r3
 80076b0:	f7fe fdf4 	bl	800629c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80076b8:	e01f      	b.n	80076fa <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80076ba:	4b58      	ldr	r3, [pc, #352]	; (800781c <UART_SetConfig+0x9cc>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f003 0320 	and.w	r3, r3, #32
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d009      	beq.n	80076da <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80076c6:	4b55      	ldr	r3, [pc, #340]	; (800781c <UART_SetConfig+0x9cc>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	08db      	lsrs	r3, r3, #3
 80076cc:	f003 0303 	and.w	r3, r3, #3
 80076d0:	4a53      	ldr	r2, [pc, #332]	; (8007820 <UART_SetConfig+0x9d0>)
 80076d2:	fa22 f303 	lsr.w	r3, r2, r3
 80076d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80076d8:	e00f      	b.n	80076fa <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 80076da:	4b51      	ldr	r3, [pc, #324]	; (8007820 <UART_SetConfig+0x9d0>)
 80076dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80076de:	e00c      	b.n	80076fa <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80076e0:	4b4c      	ldr	r3, [pc, #304]	; (8007814 <UART_SetConfig+0x9c4>)
 80076e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80076e4:	e009      	b.n	80076fa <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80076e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80076ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80076ec:	e005      	b.n	80076fa <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 80076ee:	2300      	movs	r3, #0
 80076f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80076f2:	2301      	movs	r3, #1
 80076f4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80076f8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80076fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	f000 80ea 	beq.w	80078d6 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007706:	4a44      	ldr	r2, [pc, #272]	; (8007818 <UART_SetConfig+0x9c8>)
 8007708:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800770c:	461a      	mov	r2, r3
 800770e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007710:	fbb3 f3f2 	udiv	r3, r3, r2
 8007714:	005a      	lsls	r2, r3, #1
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	685b      	ldr	r3, [r3, #4]
 800771a:	085b      	lsrs	r3, r3, #1
 800771c:	441a      	add	r2, r3
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	685b      	ldr	r3, [r3, #4]
 8007722:	fbb2 f3f3 	udiv	r3, r2, r3
 8007726:	b29b      	uxth	r3, r3
 8007728:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800772a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800772c:	2b0f      	cmp	r3, #15
 800772e:	d916      	bls.n	800775e <UART_SetConfig+0x90e>
 8007730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007732:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007736:	d212      	bcs.n	800775e <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800773a:	b29b      	uxth	r3, r3
 800773c:	f023 030f 	bic.w	r3, r3, #15
 8007740:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007744:	085b      	lsrs	r3, r3, #1
 8007746:	b29b      	uxth	r3, r3
 8007748:	f003 0307 	and.w	r3, r3, #7
 800774c:	b29a      	uxth	r2, r3
 800774e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007750:	4313      	orrs	r3, r2
 8007752:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800775a:	60da      	str	r2, [r3, #12]
 800775c:	e0bb      	b.n	80078d6 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800775e:	2301      	movs	r3, #1
 8007760:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8007764:	e0b7      	b.n	80078d6 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007766:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800776a:	2b20      	cmp	r3, #32
 800776c:	dc4a      	bgt.n	8007804 <UART_SetConfig+0x9b4>
 800776e:	2b00      	cmp	r3, #0
 8007770:	f2c0 8086 	blt.w	8007880 <UART_SetConfig+0xa30>
 8007774:	2b20      	cmp	r3, #32
 8007776:	f200 8083 	bhi.w	8007880 <UART_SetConfig+0xa30>
 800777a:	a201      	add	r2, pc, #4	; (adr r2, 8007780 <UART_SetConfig+0x930>)
 800777c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007780:	0800780b 	.word	0x0800780b
 8007784:	08007825 	.word	0x08007825
 8007788:	08007881 	.word	0x08007881
 800778c:	08007881 	.word	0x08007881
 8007790:	0800782d 	.word	0x0800782d
 8007794:	08007881 	.word	0x08007881
 8007798:	08007881 	.word	0x08007881
 800779c:	08007881 	.word	0x08007881
 80077a0:	0800783d 	.word	0x0800783d
 80077a4:	08007881 	.word	0x08007881
 80077a8:	08007881 	.word	0x08007881
 80077ac:	08007881 	.word	0x08007881
 80077b0:	08007881 	.word	0x08007881
 80077b4:	08007881 	.word	0x08007881
 80077b8:	08007881 	.word	0x08007881
 80077bc:	08007881 	.word	0x08007881
 80077c0:	0800784d 	.word	0x0800784d
 80077c4:	08007881 	.word	0x08007881
 80077c8:	08007881 	.word	0x08007881
 80077cc:	08007881 	.word	0x08007881
 80077d0:	08007881 	.word	0x08007881
 80077d4:	08007881 	.word	0x08007881
 80077d8:	08007881 	.word	0x08007881
 80077dc:	08007881 	.word	0x08007881
 80077e0:	08007881 	.word	0x08007881
 80077e4:	08007881 	.word	0x08007881
 80077e8:	08007881 	.word	0x08007881
 80077ec:	08007881 	.word	0x08007881
 80077f0:	08007881 	.word	0x08007881
 80077f4:	08007881 	.word	0x08007881
 80077f8:	08007881 	.word	0x08007881
 80077fc:	08007881 	.word	0x08007881
 8007800:	08007873 	.word	0x08007873
 8007804:	2b40      	cmp	r3, #64	; 0x40
 8007806:	d037      	beq.n	8007878 <UART_SetConfig+0xa28>
 8007808:	e03a      	b.n	8007880 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800780a:	f7fd fc2f 	bl	800506c <HAL_RCC_GetPCLK1Freq>
 800780e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007810:	e03c      	b.n	800788c <UART_SetConfig+0xa3c>
 8007812:	bf00      	nop
 8007814:	003d0900 	.word	0x003d0900
 8007818:	0801aa9c 	.word	0x0801aa9c
 800781c:	58024400 	.word	0x58024400
 8007820:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007824:	f7fd fc38 	bl	8005098 <HAL_RCC_GetPCLK2Freq>
 8007828:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800782a:	e02f      	b.n	800788c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800782c:	f107 0314 	add.w	r3, r7, #20
 8007830:	4618      	mov	r0, r3
 8007832:	f7fe fbdf 	bl	8005ff4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007836:	69bb      	ldr	r3, [r7, #24]
 8007838:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800783a:	e027      	b.n	800788c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800783c:	f107 0308 	add.w	r3, r7, #8
 8007840:	4618      	mov	r0, r3
 8007842:	f7fe fd2b 	bl	800629c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800784a:	e01f      	b.n	800788c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800784c:	4b2c      	ldr	r3, [pc, #176]	; (8007900 <UART_SetConfig+0xab0>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f003 0320 	and.w	r3, r3, #32
 8007854:	2b00      	cmp	r3, #0
 8007856:	d009      	beq.n	800786c <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007858:	4b29      	ldr	r3, [pc, #164]	; (8007900 <UART_SetConfig+0xab0>)
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	08db      	lsrs	r3, r3, #3
 800785e:	f003 0303 	and.w	r3, r3, #3
 8007862:	4a28      	ldr	r2, [pc, #160]	; (8007904 <UART_SetConfig+0xab4>)
 8007864:	fa22 f303 	lsr.w	r3, r2, r3
 8007868:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800786a:	e00f      	b.n	800788c <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800786c:	4b25      	ldr	r3, [pc, #148]	; (8007904 <UART_SetConfig+0xab4>)
 800786e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007870:	e00c      	b.n	800788c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007872:	4b25      	ldr	r3, [pc, #148]	; (8007908 <UART_SetConfig+0xab8>)
 8007874:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007876:	e009      	b.n	800788c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007878:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800787c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800787e:	e005      	b.n	800788c <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8007880:	2300      	movs	r3, #0
 8007882:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007884:	2301      	movs	r3, #1
 8007886:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800788a:	bf00      	nop
    }

    if (pclk != 0U)
 800788c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800788e:	2b00      	cmp	r3, #0
 8007890:	d021      	beq.n	80078d6 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007896:	4a1d      	ldr	r2, [pc, #116]	; (800790c <UART_SetConfig+0xabc>)
 8007898:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800789c:	461a      	mov	r2, r3
 800789e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078a0:	fbb3 f2f2 	udiv	r2, r3, r2
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	685b      	ldr	r3, [r3, #4]
 80078a8:	085b      	lsrs	r3, r3, #1
 80078aa:	441a      	add	r2, r3
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	685b      	ldr	r3, [r3, #4]
 80078b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80078b4:	b29b      	uxth	r3, r3
 80078b6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80078b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ba:	2b0f      	cmp	r3, #15
 80078bc:	d908      	bls.n	80078d0 <UART_SetConfig+0xa80>
 80078be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078c4:	d204      	bcs.n	80078d0 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80078cc:	60da      	str	r2, [r3, #12]
 80078ce:	e002      	b.n	80078d6 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 80078d0:	2301      	movs	r3, #1
 80078d2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2201      	movs	r2, #1
 80078da:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2201      	movs	r2, #1
 80078e2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2200      	movs	r2, #0
 80078ea:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2200      	movs	r2, #0
 80078f0:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80078f2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 80078f6:	4618      	mov	r0, r3
 80078f8:	3738      	adds	r7, #56	; 0x38
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bdb0      	pop	{r4, r5, r7, pc}
 80078fe:	bf00      	nop
 8007900:	58024400 	.word	0x58024400
 8007904:	03d09000 	.word	0x03d09000
 8007908:	003d0900 	.word	0x003d0900
 800790c:	0801aa9c 	.word	0x0801aa9c

08007910 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007910:	b480      	push	{r7}
 8007912:	b083      	sub	sp, #12
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800791c:	f003 0301 	and.w	r3, r3, #1
 8007920:	2b00      	cmp	r3, #0
 8007922:	d00a      	beq.n	800793a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	685b      	ldr	r3, [r3, #4]
 800792a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	430a      	orrs	r2, r1
 8007938:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800793e:	f003 0302 	and.w	r3, r3, #2
 8007942:	2b00      	cmp	r3, #0
 8007944:	d00a      	beq.n	800795c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	685b      	ldr	r3, [r3, #4]
 800794c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	430a      	orrs	r2, r1
 800795a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007960:	f003 0304 	and.w	r3, r3, #4
 8007964:	2b00      	cmp	r3, #0
 8007966:	d00a      	beq.n	800797e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	685b      	ldr	r3, [r3, #4]
 800796e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	430a      	orrs	r2, r1
 800797c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007982:	f003 0308 	and.w	r3, r3, #8
 8007986:	2b00      	cmp	r3, #0
 8007988:	d00a      	beq.n	80079a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	685b      	ldr	r3, [r3, #4]
 8007990:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	430a      	orrs	r2, r1
 800799e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079a4:	f003 0310 	and.w	r3, r3, #16
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d00a      	beq.n	80079c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	689b      	ldr	r3, [r3, #8]
 80079b2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	430a      	orrs	r2, r1
 80079c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079c6:	f003 0320 	and.w	r3, r3, #32
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d00a      	beq.n	80079e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	689b      	ldr	r3, [r3, #8]
 80079d4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	430a      	orrs	r2, r1
 80079e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d01a      	beq.n	8007a26 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	685b      	ldr	r3, [r3, #4]
 80079f6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	430a      	orrs	r2, r1
 8007a04:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a0e:	d10a      	bne.n	8007a26 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	685b      	ldr	r3, [r3, #4]
 8007a16:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	430a      	orrs	r2, r1
 8007a24:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d00a      	beq.n	8007a48 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	685b      	ldr	r3, [r3, #4]
 8007a38:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	430a      	orrs	r2, r1
 8007a46:	605a      	str	r2, [r3, #4]
  }
}
 8007a48:	bf00      	nop
 8007a4a:	370c      	adds	r7, #12
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a52:	4770      	bx	lr

08007a54 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b086      	sub	sp, #24
 8007a58:	af02      	add	r7, sp, #8
 8007a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2200      	movs	r2, #0
 8007a60:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007a64:	f7f9 ffc4 	bl	80019f0 <HAL_GetTick>
 8007a68:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f003 0308 	and.w	r3, r3, #8
 8007a74:	2b08      	cmp	r3, #8
 8007a76:	d10e      	bne.n	8007a96 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a78:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007a7c:	9300      	str	r3, [sp, #0]
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	2200      	movs	r2, #0
 8007a82:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f000 f82f 	bl	8007aea <UART_WaitOnFlagUntilTimeout>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d001      	beq.n	8007a96 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a92:	2303      	movs	r3, #3
 8007a94:	e025      	b.n	8007ae2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f003 0304 	and.w	r3, r3, #4
 8007aa0:	2b04      	cmp	r3, #4
 8007aa2:	d10e      	bne.n	8007ac2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007aa4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007aa8:	9300      	str	r3, [sp, #0]
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	2200      	movs	r2, #0
 8007aae:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f000 f819 	bl	8007aea <UART_WaitOnFlagUntilTimeout>
 8007ab8:	4603      	mov	r3, r0
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d001      	beq.n	8007ac2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007abe:	2303      	movs	r3, #3
 8007ac0:	e00f      	b.n	8007ae2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2220      	movs	r2, #32
 8007ac6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2220      	movs	r2, #32
 8007ace:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2200      	movs	r2, #0
 8007adc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007ae0:	2300      	movs	r3, #0
}
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	3710      	adds	r7, #16
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bd80      	pop	{r7, pc}

08007aea <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007aea:	b580      	push	{r7, lr}
 8007aec:	b084      	sub	sp, #16
 8007aee:	af00      	add	r7, sp, #0
 8007af0:	60f8      	str	r0, [r7, #12]
 8007af2:	60b9      	str	r1, [r7, #8]
 8007af4:	603b      	str	r3, [r7, #0]
 8007af6:	4613      	mov	r3, r2
 8007af8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007afa:	e062      	b.n	8007bc2 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007afc:	69bb      	ldr	r3, [r7, #24]
 8007afe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b02:	d05e      	beq.n	8007bc2 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b04:	f7f9 ff74 	bl	80019f0 <HAL_GetTick>
 8007b08:	4602      	mov	r2, r0
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	1ad3      	subs	r3, r2, r3
 8007b0e:	69ba      	ldr	r2, [r7, #24]
 8007b10:	429a      	cmp	r2, r3
 8007b12:	d302      	bcc.n	8007b1a <UART_WaitOnFlagUntilTimeout+0x30>
 8007b14:	69bb      	ldr	r3, [r7, #24]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d11d      	bne.n	8007b56 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	681a      	ldr	r2, [r3, #0]
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007b28:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	689a      	ldr	r2, [r3, #8]
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f022 0201 	bic.w	r2, r2, #1
 8007b38:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	2220      	movs	r2, #32
 8007b3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	2220      	movs	r2, #32
 8007b46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007b52:	2303      	movs	r3, #3
 8007b54:	e045      	b.n	8007be2 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f003 0304 	and.w	r3, r3, #4
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d02e      	beq.n	8007bc2 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	69db      	ldr	r3, [r3, #28]
 8007b6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b72:	d126      	bne.n	8007bc2 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007b7c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	681a      	ldr	r2, [r3, #0]
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007b8c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	689a      	ldr	r2, [r3, #8]
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f022 0201 	bic.w	r2, r2, #1
 8007b9c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	2220      	movs	r2, #32
 8007ba2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	2220      	movs	r2, #32
 8007baa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	2220      	movs	r2, #32
 8007bb2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	2200      	movs	r2, #0
 8007bba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007bbe:	2303      	movs	r3, #3
 8007bc0:	e00f      	b.n	8007be2 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	69da      	ldr	r2, [r3, #28]
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	4013      	ands	r3, r2
 8007bcc:	68ba      	ldr	r2, [r7, #8]
 8007bce:	429a      	cmp	r2, r3
 8007bd0:	bf0c      	ite	eq
 8007bd2:	2301      	moveq	r3, #1
 8007bd4:	2300      	movne	r3, #0
 8007bd6:	b2db      	uxtb	r3, r3
 8007bd8:	461a      	mov	r2, r3
 8007bda:	79fb      	ldrb	r3, [r7, #7]
 8007bdc:	429a      	cmp	r2, r3
 8007bde:	d08d      	beq.n	8007afc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007be0:	2300      	movs	r3, #0
}
 8007be2:	4618      	mov	r0, r3
 8007be4:	3710      	adds	r7, #16
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}

08007bea <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007bea:	b480      	push	{r7}
 8007bec:	b085      	sub	sp, #20
 8007bee:	af00      	add	r7, sp, #0
 8007bf0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007bf8:	2b01      	cmp	r3, #1
 8007bfa:	d101      	bne.n	8007c00 <HAL_UARTEx_DisableFifoMode+0x16>
 8007bfc:	2302      	movs	r3, #2
 8007bfe:	e027      	b.n	8007c50 <HAL_UARTEx_DisableFifoMode+0x66>
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2201      	movs	r2, #1
 8007c04:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2224      	movs	r2, #36	; 0x24
 8007c0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	681a      	ldr	r2, [r3, #0]
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f022 0201 	bic.w	r2, r2, #1
 8007c26:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007c2e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2200      	movs	r2, #0
 8007c34:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	68fa      	ldr	r2, [r7, #12]
 8007c3c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2220      	movs	r2, #32
 8007c42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2200      	movs	r2, #0
 8007c4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007c4e:	2300      	movs	r3, #0
}
 8007c50:	4618      	mov	r0, r3
 8007c52:	3714      	adds	r7, #20
 8007c54:	46bd      	mov	sp, r7
 8007c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5a:	4770      	bx	lr

08007c5c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b084      	sub	sp, #16
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
 8007c64:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007c6c:	2b01      	cmp	r3, #1
 8007c6e:	d101      	bne.n	8007c74 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007c70:	2302      	movs	r3, #2
 8007c72:	e02d      	b.n	8007cd0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2201      	movs	r2, #1
 8007c78:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2224      	movs	r2, #36	; 0x24
 8007c80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	681a      	ldr	r2, [r3, #0]
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f022 0201 	bic.w	r2, r2, #1
 8007c9a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	689b      	ldr	r3, [r3, #8]
 8007ca2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	683a      	ldr	r2, [r7, #0]
 8007cac:	430a      	orrs	r2, r1
 8007cae:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	f000 f84f 	bl	8007d54 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	68fa      	ldr	r2, [r7, #12]
 8007cbc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2220      	movs	r2, #32
 8007cc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2200      	movs	r2, #0
 8007cca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007cce:	2300      	movs	r3, #0
}
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	3710      	adds	r7, #16
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	bd80      	pop	{r7, pc}

08007cd8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b084      	sub	sp, #16
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
 8007ce0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007ce8:	2b01      	cmp	r3, #1
 8007cea:	d101      	bne.n	8007cf0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007cec:	2302      	movs	r3, #2
 8007cee:	e02d      	b.n	8007d4c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2201      	movs	r2, #1
 8007cf4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2224      	movs	r2, #36	; 0x24
 8007cfc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	681a      	ldr	r2, [r3, #0]
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f022 0201 	bic.w	r2, r2, #1
 8007d16:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	689b      	ldr	r3, [r3, #8]
 8007d1e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	683a      	ldr	r2, [r7, #0]
 8007d28:	430a      	orrs	r2, r1
 8007d2a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f000 f811 	bl	8007d54 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	68fa      	ldr	r2, [r7, #12]
 8007d38:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2220      	movs	r2, #32
 8007d3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2200      	movs	r2, #0
 8007d46:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007d4a:	2300      	movs	r3, #0
}
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	3710      	adds	r7, #16
 8007d50:	46bd      	mov	sp, r7
 8007d52:	bd80      	pop	{r7, pc}

08007d54 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007d54:	b480      	push	{r7}
 8007d56:	b085      	sub	sp, #20
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d108      	bne.n	8007d76 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2201      	movs	r2, #1
 8007d68:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2201      	movs	r2, #1
 8007d70:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007d74:	e031      	b.n	8007dda <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007d76:	2310      	movs	r3, #16
 8007d78:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007d7a:	2310      	movs	r3, #16
 8007d7c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	689b      	ldr	r3, [r3, #8]
 8007d84:	0e5b      	lsrs	r3, r3, #25
 8007d86:	b2db      	uxtb	r3, r3
 8007d88:	f003 0307 	and.w	r3, r3, #7
 8007d8c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	689b      	ldr	r3, [r3, #8]
 8007d94:	0f5b      	lsrs	r3, r3, #29
 8007d96:	b2db      	uxtb	r3, r3
 8007d98:	f003 0307 	and.w	r3, r3, #7
 8007d9c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007d9e:	7bbb      	ldrb	r3, [r7, #14]
 8007da0:	7b3a      	ldrb	r2, [r7, #12]
 8007da2:	4911      	ldr	r1, [pc, #68]	; (8007de8 <UARTEx_SetNbDataToProcess+0x94>)
 8007da4:	5c8a      	ldrb	r2, [r1, r2]
 8007da6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007daa:	7b3a      	ldrb	r2, [r7, #12]
 8007dac:	490f      	ldr	r1, [pc, #60]	; (8007dec <UARTEx_SetNbDataToProcess+0x98>)
 8007dae:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007db0:	fb93 f3f2 	sdiv	r3, r3, r2
 8007db4:	b29a      	uxth	r2, r3
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007dbc:	7bfb      	ldrb	r3, [r7, #15]
 8007dbe:	7b7a      	ldrb	r2, [r7, #13]
 8007dc0:	4909      	ldr	r1, [pc, #36]	; (8007de8 <UARTEx_SetNbDataToProcess+0x94>)
 8007dc2:	5c8a      	ldrb	r2, [r1, r2]
 8007dc4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007dc8:	7b7a      	ldrb	r2, [r7, #13]
 8007dca:	4908      	ldr	r1, [pc, #32]	; (8007dec <UARTEx_SetNbDataToProcess+0x98>)
 8007dcc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007dce:	fb93 f3f2 	sdiv	r3, r3, r2
 8007dd2:	b29a      	uxth	r2, r3
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007dda:	bf00      	nop
 8007ddc:	3714      	adds	r7, #20
 8007dde:	46bd      	mov	sp, r7
 8007de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de4:	4770      	bx	lr
 8007de6:	bf00      	nop
 8007de8:	0801aab4 	.word	0x0801aab4
 8007dec:	0801aabc 	.word	0x0801aabc

08007df0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007df0:	b084      	sub	sp, #16
 8007df2:	b580      	push	{r7, lr}
 8007df4:	b084      	sub	sp, #16
 8007df6:	af00      	add	r7, sp, #0
 8007df8:	6078      	str	r0, [r7, #4]
 8007dfa:	f107 001c 	add.w	r0, r7, #28
 8007dfe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e04:	2b01      	cmp	r3, #1
 8007e06:	d120      	bne.n	8007e4a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e0c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	68da      	ldr	r2, [r3, #12]
 8007e18:	4b2a      	ldr	r3, [pc, #168]	; (8007ec4 <USB_CoreInit+0xd4>)
 8007e1a:	4013      	ands	r3, r2
 8007e1c:	687a      	ldr	r2, [r7, #4]
 8007e1e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	68db      	ldr	r3, [r3, #12]
 8007e24:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007e2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e2e:	2b01      	cmp	r3, #1
 8007e30:	d105      	bne.n	8007e3e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	68db      	ldr	r3, [r3, #12]
 8007e36:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f000 fa60 	bl	8008304 <USB_CoreReset>
 8007e44:	4603      	mov	r3, r0
 8007e46:	73fb      	strb	r3, [r7, #15]
 8007e48:	e01a      	b.n	8007e80 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	68db      	ldr	r3, [r3, #12]
 8007e4e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	f000 fa54 	bl	8008304 <USB_CoreReset>
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007e60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d106      	bne.n	8007e74 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e6a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	639a      	str	r2, [r3, #56]	; 0x38
 8007e72:	e005      	b.n	8007e80 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e78:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e82:	2b01      	cmp	r3, #1
 8007e84:	d116      	bne.n	8007eb4 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e8a:	b29a      	uxth	r2, r3
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007e94:	4b0c      	ldr	r3, [pc, #48]	; (8007ec8 <USB_CoreInit+0xd8>)
 8007e96:	4313      	orrs	r3, r2
 8007e98:	687a      	ldr	r2, [r7, #4]
 8007e9a:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	689b      	ldr	r3, [r3, #8]
 8007ea0:	f043 0206 	orr.w	r2, r3, #6
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	689b      	ldr	r3, [r3, #8]
 8007eac:	f043 0220 	orr.w	r2, r3, #32
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007eb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	3710      	adds	r7, #16
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007ec0:	b004      	add	sp, #16
 8007ec2:	4770      	bx	lr
 8007ec4:	ffbdffbf 	.word	0xffbdffbf
 8007ec8:	03ee0000 	.word	0x03ee0000

08007ecc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007ecc:	b480      	push	{r7}
 8007ece:	b083      	sub	sp, #12
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	689b      	ldr	r3, [r3, #8]
 8007ed8:	f023 0201 	bic.w	r2, r3, #1
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007ee0:	2300      	movs	r3, #0
}
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	370c      	adds	r7, #12
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eec:	4770      	bx	lr

08007eee <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007eee:	b580      	push	{r7, lr}
 8007ef0:	b082      	sub	sp, #8
 8007ef2:	af00      	add	r7, sp, #0
 8007ef4:	6078      	str	r0, [r7, #4]
 8007ef6:	460b      	mov	r3, r1
 8007ef8:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	68db      	ldr	r3, [r3, #12]
 8007efe:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007f06:	78fb      	ldrb	r3, [r7, #3]
 8007f08:	2b01      	cmp	r3, #1
 8007f0a:	d106      	bne.n	8007f1a <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	68db      	ldr	r3, [r3, #12]
 8007f10:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	60da      	str	r2, [r3, #12]
 8007f18:	e00b      	b.n	8007f32 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8007f1a:	78fb      	ldrb	r3, [r7, #3]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d106      	bne.n	8007f2e <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	68db      	ldr	r3, [r3, #12]
 8007f24:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	60da      	str	r2, [r3, #12]
 8007f2c:	e001      	b.n	8007f32 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8007f2e:	2301      	movs	r3, #1
 8007f30:	e003      	b.n	8007f3a <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8007f32:	2032      	movs	r0, #50	; 0x32
 8007f34:	f7f9 fd68 	bl	8001a08 <HAL_Delay>

  return HAL_OK;
 8007f38:	2300      	movs	r3, #0
}
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	3708      	adds	r7, #8
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	bd80      	pop	{r7, pc}
	...

08007f44 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007f44:	b084      	sub	sp, #16
 8007f46:	b580      	push	{r7, lr}
 8007f48:	b086      	sub	sp, #24
 8007f4a:	af00      	add	r7, sp, #0
 8007f4c:	6078      	str	r0, [r7, #4]
 8007f4e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007f52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007f56:	2300      	movs	r3, #0
 8007f58:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007f5e:	2300      	movs	r3, #0
 8007f60:	613b      	str	r3, [r7, #16]
 8007f62:	e009      	b.n	8007f78 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007f64:	687a      	ldr	r2, [r7, #4]
 8007f66:	693b      	ldr	r3, [r7, #16]
 8007f68:	3340      	adds	r3, #64	; 0x40
 8007f6a:	009b      	lsls	r3, r3, #2
 8007f6c:	4413      	add	r3, r2
 8007f6e:	2200      	movs	r2, #0
 8007f70:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007f72:	693b      	ldr	r3, [r7, #16]
 8007f74:	3301      	adds	r3, #1
 8007f76:	613b      	str	r3, [r7, #16]
 8007f78:	693b      	ldr	r3, [r7, #16]
 8007f7a:	2b0e      	cmp	r3, #14
 8007f7c:	d9f2      	bls.n	8007f64 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007f7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d11c      	bne.n	8007fbe <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f8a:	685b      	ldr	r3, [r3, #4]
 8007f8c:	68fa      	ldr	r2, [r7, #12]
 8007f8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f92:	f043 0302 	orr.w	r3, r3, #2
 8007f96:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f9c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	601a      	str	r2, [r3, #0]
 8007fbc:	e005      	b.n	8007fca <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fc2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007fd0:	461a      	mov	r2, r3
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fdc:	4619      	mov	r1, r3
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fe4:	461a      	mov	r2, r3
 8007fe6:	680b      	ldr	r3, [r1, #0]
 8007fe8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fec:	2b01      	cmp	r3, #1
 8007fee:	d10c      	bne.n	800800a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d104      	bne.n	8008000 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007ff6:	2100      	movs	r1, #0
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f000 f949 	bl	8008290 <USB_SetDevSpeed>
 8007ffe:	e008      	b.n	8008012 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008000:	2101      	movs	r1, #1
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	f000 f944 	bl	8008290 <USB_SetDevSpeed>
 8008008:	e003      	b.n	8008012 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800800a:	2103      	movs	r1, #3
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f000 f93f 	bl	8008290 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008012:	2110      	movs	r1, #16
 8008014:	6878      	ldr	r0, [r7, #4]
 8008016:	f000 f8f3 	bl	8008200 <USB_FlushTxFifo>
 800801a:	4603      	mov	r3, r0
 800801c:	2b00      	cmp	r3, #0
 800801e:	d001      	beq.n	8008024 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8008020:	2301      	movs	r3, #1
 8008022:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	f000 f911 	bl	800824c <USB_FlushRxFifo>
 800802a:	4603      	mov	r3, r0
 800802c:	2b00      	cmp	r3, #0
 800802e:	d001      	beq.n	8008034 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8008030:	2301      	movs	r3, #1
 8008032:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800803a:	461a      	mov	r2, r3
 800803c:	2300      	movs	r3, #0
 800803e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008046:	461a      	mov	r2, r3
 8008048:	2300      	movs	r3, #0
 800804a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008052:	461a      	mov	r2, r3
 8008054:	2300      	movs	r3, #0
 8008056:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008058:	2300      	movs	r3, #0
 800805a:	613b      	str	r3, [r7, #16]
 800805c:	e043      	b.n	80080e6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800805e:	693b      	ldr	r3, [r7, #16]
 8008060:	015a      	lsls	r2, r3, #5
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	4413      	add	r3, r2
 8008066:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008070:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008074:	d118      	bne.n	80080a8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8008076:	693b      	ldr	r3, [r7, #16]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d10a      	bne.n	8008092 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800807c:	693b      	ldr	r3, [r7, #16]
 800807e:	015a      	lsls	r2, r3, #5
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	4413      	add	r3, r2
 8008084:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008088:	461a      	mov	r2, r3
 800808a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800808e:	6013      	str	r3, [r2, #0]
 8008090:	e013      	b.n	80080ba <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008092:	693b      	ldr	r3, [r7, #16]
 8008094:	015a      	lsls	r2, r3, #5
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	4413      	add	r3, r2
 800809a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800809e:	461a      	mov	r2, r3
 80080a0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80080a4:	6013      	str	r3, [r2, #0]
 80080a6:	e008      	b.n	80080ba <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80080a8:	693b      	ldr	r3, [r7, #16]
 80080aa:	015a      	lsls	r2, r3, #5
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	4413      	add	r3, r2
 80080b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080b4:	461a      	mov	r2, r3
 80080b6:	2300      	movs	r3, #0
 80080b8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80080ba:	693b      	ldr	r3, [r7, #16]
 80080bc:	015a      	lsls	r2, r3, #5
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	4413      	add	r3, r2
 80080c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080c6:	461a      	mov	r2, r3
 80080c8:	2300      	movs	r3, #0
 80080ca:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80080cc:	693b      	ldr	r3, [r7, #16]
 80080ce:	015a      	lsls	r2, r3, #5
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	4413      	add	r3, r2
 80080d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080d8:	461a      	mov	r2, r3
 80080da:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80080de:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80080e0:	693b      	ldr	r3, [r7, #16]
 80080e2:	3301      	adds	r3, #1
 80080e4:	613b      	str	r3, [r7, #16]
 80080e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080e8:	693a      	ldr	r2, [r7, #16]
 80080ea:	429a      	cmp	r2, r3
 80080ec:	d3b7      	bcc.n	800805e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80080ee:	2300      	movs	r3, #0
 80080f0:	613b      	str	r3, [r7, #16]
 80080f2:	e043      	b.n	800817c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80080f4:	693b      	ldr	r3, [r7, #16]
 80080f6:	015a      	lsls	r2, r3, #5
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	4413      	add	r3, r2
 80080fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008106:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800810a:	d118      	bne.n	800813e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800810c:	693b      	ldr	r3, [r7, #16]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d10a      	bne.n	8008128 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008112:	693b      	ldr	r3, [r7, #16]
 8008114:	015a      	lsls	r2, r3, #5
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	4413      	add	r3, r2
 800811a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800811e:	461a      	mov	r2, r3
 8008120:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008124:	6013      	str	r3, [r2, #0]
 8008126:	e013      	b.n	8008150 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008128:	693b      	ldr	r3, [r7, #16]
 800812a:	015a      	lsls	r2, r3, #5
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	4413      	add	r3, r2
 8008130:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008134:	461a      	mov	r2, r3
 8008136:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800813a:	6013      	str	r3, [r2, #0]
 800813c:	e008      	b.n	8008150 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800813e:	693b      	ldr	r3, [r7, #16]
 8008140:	015a      	lsls	r2, r3, #5
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	4413      	add	r3, r2
 8008146:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800814a:	461a      	mov	r2, r3
 800814c:	2300      	movs	r3, #0
 800814e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008150:	693b      	ldr	r3, [r7, #16]
 8008152:	015a      	lsls	r2, r3, #5
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	4413      	add	r3, r2
 8008158:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800815c:	461a      	mov	r2, r3
 800815e:	2300      	movs	r3, #0
 8008160:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008162:	693b      	ldr	r3, [r7, #16]
 8008164:	015a      	lsls	r2, r3, #5
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	4413      	add	r3, r2
 800816a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800816e:	461a      	mov	r2, r3
 8008170:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008174:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008176:	693b      	ldr	r3, [r7, #16]
 8008178:	3301      	adds	r3, #1
 800817a:	613b      	str	r3, [r7, #16]
 800817c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800817e:	693a      	ldr	r2, [r7, #16]
 8008180:	429a      	cmp	r2, r3
 8008182:	d3b7      	bcc.n	80080f4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800818a:	691b      	ldr	r3, [r3, #16]
 800818c:	68fa      	ldr	r2, [r7, #12]
 800818e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008192:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008196:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2200      	movs	r2, #0
 800819c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80081a4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80081a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d105      	bne.n	80081b8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	699b      	ldr	r3, [r3, #24]
 80081b0:	f043 0210 	orr.w	r2, r3, #16
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	699a      	ldr	r2, [r3, #24]
 80081bc:	4b0e      	ldr	r3, [pc, #56]	; (80081f8 <USB_DevInit+0x2b4>)
 80081be:	4313      	orrs	r3, r2
 80081c0:	687a      	ldr	r2, [r7, #4]
 80081c2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80081c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d005      	beq.n	80081d6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	699b      	ldr	r3, [r3, #24]
 80081ce:	f043 0208 	orr.w	r2, r3, #8
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80081d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081d8:	2b01      	cmp	r3, #1
 80081da:	d105      	bne.n	80081e8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	699a      	ldr	r2, [r3, #24]
 80081e0:	4b06      	ldr	r3, [pc, #24]	; (80081fc <USB_DevInit+0x2b8>)
 80081e2:	4313      	orrs	r3, r2
 80081e4:	687a      	ldr	r2, [r7, #4]
 80081e6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80081e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80081ea:	4618      	mov	r0, r3
 80081ec:	3718      	adds	r7, #24
 80081ee:	46bd      	mov	sp, r7
 80081f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80081f4:	b004      	add	sp, #16
 80081f6:	4770      	bx	lr
 80081f8:	803c3800 	.word	0x803c3800
 80081fc:	40000004 	.word	0x40000004

08008200 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008200:	b480      	push	{r7}
 8008202:	b085      	sub	sp, #20
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
 8008208:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800820a:	2300      	movs	r3, #0
 800820c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	019b      	lsls	r3, r3, #6
 8008212:	f043 0220 	orr.w	r2, r3, #32
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	3301      	adds	r3, #1
 800821e:	60fb      	str	r3, [r7, #12]
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	4a09      	ldr	r2, [pc, #36]	; (8008248 <USB_FlushTxFifo+0x48>)
 8008224:	4293      	cmp	r3, r2
 8008226:	d901      	bls.n	800822c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8008228:	2303      	movs	r3, #3
 800822a:	e006      	b.n	800823a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	691b      	ldr	r3, [r3, #16]
 8008230:	f003 0320 	and.w	r3, r3, #32
 8008234:	2b20      	cmp	r3, #32
 8008236:	d0f0      	beq.n	800821a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8008238:	2300      	movs	r3, #0
}
 800823a:	4618      	mov	r0, r3
 800823c:	3714      	adds	r7, #20
 800823e:	46bd      	mov	sp, r7
 8008240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008244:	4770      	bx	lr
 8008246:	bf00      	nop
 8008248:	00030d40 	.word	0x00030d40

0800824c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800824c:	b480      	push	{r7}
 800824e:	b085      	sub	sp, #20
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8008254:	2300      	movs	r3, #0
 8008256:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2210      	movs	r2, #16
 800825c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	3301      	adds	r3, #1
 8008262:	60fb      	str	r3, [r7, #12]
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	4a09      	ldr	r2, [pc, #36]	; (800828c <USB_FlushRxFifo+0x40>)
 8008268:	4293      	cmp	r3, r2
 800826a:	d901      	bls.n	8008270 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800826c:	2303      	movs	r3, #3
 800826e:	e006      	b.n	800827e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	691b      	ldr	r3, [r3, #16]
 8008274:	f003 0310 	and.w	r3, r3, #16
 8008278:	2b10      	cmp	r3, #16
 800827a:	d0f0      	beq.n	800825e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800827c:	2300      	movs	r3, #0
}
 800827e:	4618      	mov	r0, r3
 8008280:	3714      	adds	r7, #20
 8008282:	46bd      	mov	sp, r7
 8008284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008288:	4770      	bx	lr
 800828a:	bf00      	nop
 800828c:	00030d40 	.word	0x00030d40

08008290 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008290:	b480      	push	{r7}
 8008292:	b085      	sub	sp, #20
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
 8008298:	460b      	mov	r3, r1
 800829a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082a6:	681a      	ldr	r2, [r3, #0]
 80082a8:	78fb      	ldrb	r3, [r7, #3]
 80082aa:	68f9      	ldr	r1, [r7, #12]
 80082ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80082b0:	4313      	orrs	r3, r2
 80082b2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80082b4:	2300      	movs	r3, #0
}
 80082b6:	4618      	mov	r0, r3
 80082b8:	3714      	adds	r7, #20
 80082ba:	46bd      	mov	sp, r7
 80082bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c0:	4770      	bx	lr

080082c2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80082c2:	b480      	push	{r7}
 80082c4:	b085      	sub	sp, #20
 80082c6:	af00      	add	r7, sp, #0
 80082c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	68fa      	ldr	r2, [r7, #12]
 80082d8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80082dc:	f023 0303 	bic.w	r3, r3, #3
 80082e0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082e8:	685b      	ldr	r3, [r3, #4]
 80082ea:	68fa      	ldr	r2, [r7, #12]
 80082ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80082f0:	f043 0302 	orr.w	r3, r3, #2
 80082f4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80082f6:	2300      	movs	r3, #0
}
 80082f8:	4618      	mov	r0, r3
 80082fa:	3714      	adds	r7, #20
 80082fc:	46bd      	mov	sp, r7
 80082fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008302:	4770      	bx	lr

08008304 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008304:	b480      	push	{r7}
 8008306:	b085      	sub	sp, #20
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800830c:	2300      	movs	r3, #0
 800830e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	3301      	adds	r3, #1
 8008314:	60fb      	str	r3, [r7, #12]
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	4a13      	ldr	r2, [pc, #76]	; (8008368 <USB_CoreReset+0x64>)
 800831a:	4293      	cmp	r3, r2
 800831c:	d901      	bls.n	8008322 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800831e:	2303      	movs	r3, #3
 8008320:	e01b      	b.n	800835a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	691b      	ldr	r3, [r3, #16]
 8008326:	2b00      	cmp	r3, #0
 8008328:	daf2      	bge.n	8008310 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800832a:	2300      	movs	r3, #0
 800832c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	691b      	ldr	r3, [r3, #16]
 8008332:	f043 0201 	orr.w	r2, r3, #1
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	3301      	adds	r3, #1
 800833e:	60fb      	str	r3, [r7, #12]
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	4a09      	ldr	r2, [pc, #36]	; (8008368 <USB_CoreReset+0x64>)
 8008344:	4293      	cmp	r3, r2
 8008346:	d901      	bls.n	800834c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008348:	2303      	movs	r3, #3
 800834a:	e006      	b.n	800835a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	691b      	ldr	r3, [r3, #16]
 8008350:	f003 0301 	and.w	r3, r3, #1
 8008354:	2b01      	cmp	r3, #1
 8008356:	d0f0      	beq.n	800833a <USB_CoreReset+0x36>

  return HAL_OK;
 8008358:	2300      	movs	r3, #0
}
 800835a:	4618      	mov	r0, r3
 800835c:	3714      	adds	r7, #20
 800835e:	46bd      	mov	sp, r7
 8008360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008364:	4770      	bx	lr
 8008366:	bf00      	nop
 8008368:	00030d40 	.word	0x00030d40

0800836c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800836c:	b5b0      	push	{r4, r5, r7, lr}
 800836e:	b08c      	sub	sp, #48	; 0x30
 8008370:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8008372:	4b96      	ldr	r3, [pc, #600]	; (80085cc <MX_LWIP_Init+0x260>)
 8008374:	22c0      	movs	r2, #192	; 0xc0
 8008376:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8008378:	4b94      	ldr	r3, [pc, #592]	; (80085cc <MX_LWIP_Init+0x260>)
 800837a:	22a8      	movs	r2, #168	; 0xa8
 800837c:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 8;
 800837e:	4b93      	ldr	r3, [pc, #588]	; (80085cc <MX_LWIP_Init+0x260>)
 8008380:	2208      	movs	r2, #8
 8008382:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 77;
 8008384:	4b91      	ldr	r3, [pc, #580]	; (80085cc <MX_LWIP_Init+0x260>)
 8008386:	224d      	movs	r2, #77	; 0x4d
 8008388:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800838a:	4b91      	ldr	r3, [pc, #580]	; (80085d0 <MX_LWIP_Init+0x264>)
 800838c:	22ff      	movs	r2, #255	; 0xff
 800838e:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8008390:	4b8f      	ldr	r3, [pc, #572]	; (80085d0 <MX_LWIP_Init+0x264>)
 8008392:	22ff      	movs	r2, #255	; 0xff
 8008394:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8008396:	4b8e      	ldr	r3, [pc, #568]	; (80085d0 <MX_LWIP_Init+0x264>)
 8008398:	22ff      	movs	r2, #255	; 0xff
 800839a:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800839c:	4b8c      	ldr	r3, [pc, #560]	; (80085d0 <MX_LWIP_Init+0x264>)
 800839e:	2200      	movs	r2, #0
 80083a0:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 80083a2:	4b8c      	ldr	r3, [pc, #560]	; (80085d4 <MX_LWIP_Init+0x268>)
 80083a4:	2200      	movs	r2, #0
 80083a6:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 80083a8:	4b8a      	ldr	r3, [pc, #552]	; (80085d4 <MX_LWIP_Init+0x268>)
 80083aa:	2200      	movs	r2, #0
 80083ac:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 80083ae:	4b89      	ldr	r3, [pc, #548]	; (80085d4 <MX_LWIP_Init+0x268>)
 80083b0:	2200      	movs	r2, #0
 80083b2:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 80083b4:	4b87      	ldr	r3, [pc, #540]	; (80085d4 <MX_LWIP_Init+0x268>)
 80083b6:	2200      	movs	r2, #0
 80083b8:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 80083ba:	2100      	movs	r1, #0
 80083bc:	2000      	movs	r0, #0
 80083be:	f003 fdf5 	bl	800bfac <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80083c2:	4b82      	ldr	r3, [pc, #520]	; (80085cc <MX_LWIP_Init+0x260>)
 80083c4:	781b      	ldrb	r3, [r3, #0]
 80083c6:	061a      	lsls	r2, r3, #24
 80083c8:	4b80      	ldr	r3, [pc, #512]	; (80085cc <MX_LWIP_Init+0x260>)
 80083ca:	785b      	ldrb	r3, [r3, #1]
 80083cc:	041b      	lsls	r3, r3, #16
 80083ce:	431a      	orrs	r2, r3
 80083d0:	4b7e      	ldr	r3, [pc, #504]	; (80085cc <MX_LWIP_Init+0x260>)
 80083d2:	789b      	ldrb	r3, [r3, #2]
 80083d4:	021b      	lsls	r3, r3, #8
 80083d6:	4313      	orrs	r3, r2
 80083d8:	4a7c      	ldr	r2, [pc, #496]	; (80085cc <MX_LWIP_Init+0x260>)
 80083da:	78d2      	ldrb	r2, [r2, #3]
 80083dc:	4313      	orrs	r3, r2
 80083de:	061a      	lsls	r2, r3, #24
 80083e0:	4b7a      	ldr	r3, [pc, #488]	; (80085cc <MX_LWIP_Init+0x260>)
 80083e2:	781b      	ldrb	r3, [r3, #0]
 80083e4:	0619      	lsls	r1, r3, #24
 80083e6:	4b79      	ldr	r3, [pc, #484]	; (80085cc <MX_LWIP_Init+0x260>)
 80083e8:	785b      	ldrb	r3, [r3, #1]
 80083ea:	041b      	lsls	r3, r3, #16
 80083ec:	4319      	orrs	r1, r3
 80083ee:	4b77      	ldr	r3, [pc, #476]	; (80085cc <MX_LWIP_Init+0x260>)
 80083f0:	789b      	ldrb	r3, [r3, #2]
 80083f2:	021b      	lsls	r3, r3, #8
 80083f4:	430b      	orrs	r3, r1
 80083f6:	4975      	ldr	r1, [pc, #468]	; (80085cc <MX_LWIP_Init+0x260>)
 80083f8:	78c9      	ldrb	r1, [r1, #3]
 80083fa:	430b      	orrs	r3, r1
 80083fc:	021b      	lsls	r3, r3, #8
 80083fe:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008402:	431a      	orrs	r2, r3
 8008404:	4b71      	ldr	r3, [pc, #452]	; (80085cc <MX_LWIP_Init+0x260>)
 8008406:	781b      	ldrb	r3, [r3, #0]
 8008408:	0619      	lsls	r1, r3, #24
 800840a:	4b70      	ldr	r3, [pc, #448]	; (80085cc <MX_LWIP_Init+0x260>)
 800840c:	785b      	ldrb	r3, [r3, #1]
 800840e:	041b      	lsls	r3, r3, #16
 8008410:	4319      	orrs	r1, r3
 8008412:	4b6e      	ldr	r3, [pc, #440]	; (80085cc <MX_LWIP_Init+0x260>)
 8008414:	789b      	ldrb	r3, [r3, #2]
 8008416:	021b      	lsls	r3, r3, #8
 8008418:	430b      	orrs	r3, r1
 800841a:	496c      	ldr	r1, [pc, #432]	; (80085cc <MX_LWIP_Init+0x260>)
 800841c:	78c9      	ldrb	r1, [r1, #3]
 800841e:	430b      	orrs	r3, r1
 8008420:	0a1b      	lsrs	r3, r3, #8
 8008422:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008426:	431a      	orrs	r2, r3
 8008428:	4b68      	ldr	r3, [pc, #416]	; (80085cc <MX_LWIP_Init+0x260>)
 800842a:	781b      	ldrb	r3, [r3, #0]
 800842c:	0619      	lsls	r1, r3, #24
 800842e:	4b67      	ldr	r3, [pc, #412]	; (80085cc <MX_LWIP_Init+0x260>)
 8008430:	785b      	ldrb	r3, [r3, #1]
 8008432:	041b      	lsls	r3, r3, #16
 8008434:	4319      	orrs	r1, r3
 8008436:	4b65      	ldr	r3, [pc, #404]	; (80085cc <MX_LWIP_Init+0x260>)
 8008438:	789b      	ldrb	r3, [r3, #2]
 800843a:	021b      	lsls	r3, r3, #8
 800843c:	430b      	orrs	r3, r1
 800843e:	4963      	ldr	r1, [pc, #396]	; (80085cc <MX_LWIP_Init+0x260>)
 8008440:	78c9      	ldrb	r1, [r1, #3]
 8008442:	430b      	orrs	r3, r1
 8008444:	0e1b      	lsrs	r3, r3, #24
 8008446:	4313      	orrs	r3, r2
 8008448:	4a63      	ldr	r2, [pc, #396]	; (80085d8 <MX_LWIP_Init+0x26c>)
 800844a:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800844c:	4b60      	ldr	r3, [pc, #384]	; (80085d0 <MX_LWIP_Init+0x264>)
 800844e:	781b      	ldrb	r3, [r3, #0]
 8008450:	061a      	lsls	r2, r3, #24
 8008452:	4b5f      	ldr	r3, [pc, #380]	; (80085d0 <MX_LWIP_Init+0x264>)
 8008454:	785b      	ldrb	r3, [r3, #1]
 8008456:	041b      	lsls	r3, r3, #16
 8008458:	431a      	orrs	r2, r3
 800845a:	4b5d      	ldr	r3, [pc, #372]	; (80085d0 <MX_LWIP_Init+0x264>)
 800845c:	789b      	ldrb	r3, [r3, #2]
 800845e:	021b      	lsls	r3, r3, #8
 8008460:	4313      	orrs	r3, r2
 8008462:	4a5b      	ldr	r2, [pc, #364]	; (80085d0 <MX_LWIP_Init+0x264>)
 8008464:	78d2      	ldrb	r2, [r2, #3]
 8008466:	4313      	orrs	r3, r2
 8008468:	061a      	lsls	r2, r3, #24
 800846a:	4b59      	ldr	r3, [pc, #356]	; (80085d0 <MX_LWIP_Init+0x264>)
 800846c:	781b      	ldrb	r3, [r3, #0]
 800846e:	0619      	lsls	r1, r3, #24
 8008470:	4b57      	ldr	r3, [pc, #348]	; (80085d0 <MX_LWIP_Init+0x264>)
 8008472:	785b      	ldrb	r3, [r3, #1]
 8008474:	041b      	lsls	r3, r3, #16
 8008476:	4319      	orrs	r1, r3
 8008478:	4b55      	ldr	r3, [pc, #340]	; (80085d0 <MX_LWIP_Init+0x264>)
 800847a:	789b      	ldrb	r3, [r3, #2]
 800847c:	021b      	lsls	r3, r3, #8
 800847e:	430b      	orrs	r3, r1
 8008480:	4953      	ldr	r1, [pc, #332]	; (80085d0 <MX_LWIP_Init+0x264>)
 8008482:	78c9      	ldrb	r1, [r1, #3]
 8008484:	430b      	orrs	r3, r1
 8008486:	021b      	lsls	r3, r3, #8
 8008488:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800848c:	431a      	orrs	r2, r3
 800848e:	4b50      	ldr	r3, [pc, #320]	; (80085d0 <MX_LWIP_Init+0x264>)
 8008490:	781b      	ldrb	r3, [r3, #0]
 8008492:	0619      	lsls	r1, r3, #24
 8008494:	4b4e      	ldr	r3, [pc, #312]	; (80085d0 <MX_LWIP_Init+0x264>)
 8008496:	785b      	ldrb	r3, [r3, #1]
 8008498:	041b      	lsls	r3, r3, #16
 800849a:	4319      	orrs	r1, r3
 800849c:	4b4c      	ldr	r3, [pc, #304]	; (80085d0 <MX_LWIP_Init+0x264>)
 800849e:	789b      	ldrb	r3, [r3, #2]
 80084a0:	021b      	lsls	r3, r3, #8
 80084a2:	430b      	orrs	r3, r1
 80084a4:	494a      	ldr	r1, [pc, #296]	; (80085d0 <MX_LWIP_Init+0x264>)
 80084a6:	78c9      	ldrb	r1, [r1, #3]
 80084a8:	430b      	orrs	r3, r1
 80084aa:	0a1b      	lsrs	r3, r3, #8
 80084ac:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80084b0:	431a      	orrs	r2, r3
 80084b2:	4b47      	ldr	r3, [pc, #284]	; (80085d0 <MX_LWIP_Init+0x264>)
 80084b4:	781b      	ldrb	r3, [r3, #0]
 80084b6:	0619      	lsls	r1, r3, #24
 80084b8:	4b45      	ldr	r3, [pc, #276]	; (80085d0 <MX_LWIP_Init+0x264>)
 80084ba:	785b      	ldrb	r3, [r3, #1]
 80084bc:	041b      	lsls	r3, r3, #16
 80084be:	4319      	orrs	r1, r3
 80084c0:	4b43      	ldr	r3, [pc, #268]	; (80085d0 <MX_LWIP_Init+0x264>)
 80084c2:	789b      	ldrb	r3, [r3, #2]
 80084c4:	021b      	lsls	r3, r3, #8
 80084c6:	430b      	orrs	r3, r1
 80084c8:	4941      	ldr	r1, [pc, #260]	; (80085d0 <MX_LWIP_Init+0x264>)
 80084ca:	78c9      	ldrb	r1, [r1, #3]
 80084cc:	430b      	orrs	r3, r1
 80084ce:	0e1b      	lsrs	r3, r3, #24
 80084d0:	4313      	orrs	r3, r2
 80084d2:	4a42      	ldr	r2, [pc, #264]	; (80085dc <MX_LWIP_Init+0x270>)
 80084d4:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80084d6:	4b3f      	ldr	r3, [pc, #252]	; (80085d4 <MX_LWIP_Init+0x268>)
 80084d8:	781b      	ldrb	r3, [r3, #0]
 80084da:	061a      	lsls	r2, r3, #24
 80084dc:	4b3d      	ldr	r3, [pc, #244]	; (80085d4 <MX_LWIP_Init+0x268>)
 80084de:	785b      	ldrb	r3, [r3, #1]
 80084e0:	041b      	lsls	r3, r3, #16
 80084e2:	431a      	orrs	r2, r3
 80084e4:	4b3b      	ldr	r3, [pc, #236]	; (80085d4 <MX_LWIP_Init+0x268>)
 80084e6:	789b      	ldrb	r3, [r3, #2]
 80084e8:	021b      	lsls	r3, r3, #8
 80084ea:	4313      	orrs	r3, r2
 80084ec:	4a39      	ldr	r2, [pc, #228]	; (80085d4 <MX_LWIP_Init+0x268>)
 80084ee:	78d2      	ldrb	r2, [r2, #3]
 80084f0:	4313      	orrs	r3, r2
 80084f2:	061a      	lsls	r2, r3, #24
 80084f4:	4b37      	ldr	r3, [pc, #220]	; (80085d4 <MX_LWIP_Init+0x268>)
 80084f6:	781b      	ldrb	r3, [r3, #0]
 80084f8:	0619      	lsls	r1, r3, #24
 80084fa:	4b36      	ldr	r3, [pc, #216]	; (80085d4 <MX_LWIP_Init+0x268>)
 80084fc:	785b      	ldrb	r3, [r3, #1]
 80084fe:	041b      	lsls	r3, r3, #16
 8008500:	4319      	orrs	r1, r3
 8008502:	4b34      	ldr	r3, [pc, #208]	; (80085d4 <MX_LWIP_Init+0x268>)
 8008504:	789b      	ldrb	r3, [r3, #2]
 8008506:	021b      	lsls	r3, r3, #8
 8008508:	430b      	orrs	r3, r1
 800850a:	4932      	ldr	r1, [pc, #200]	; (80085d4 <MX_LWIP_Init+0x268>)
 800850c:	78c9      	ldrb	r1, [r1, #3]
 800850e:	430b      	orrs	r3, r1
 8008510:	021b      	lsls	r3, r3, #8
 8008512:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008516:	431a      	orrs	r2, r3
 8008518:	4b2e      	ldr	r3, [pc, #184]	; (80085d4 <MX_LWIP_Init+0x268>)
 800851a:	781b      	ldrb	r3, [r3, #0]
 800851c:	0619      	lsls	r1, r3, #24
 800851e:	4b2d      	ldr	r3, [pc, #180]	; (80085d4 <MX_LWIP_Init+0x268>)
 8008520:	785b      	ldrb	r3, [r3, #1]
 8008522:	041b      	lsls	r3, r3, #16
 8008524:	4319      	orrs	r1, r3
 8008526:	4b2b      	ldr	r3, [pc, #172]	; (80085d4 <MX_LWIP_Init+0x268>)
 8008528:	789b      	ldrb	r3, [r3, #2]
 800852a:	021b      	lsls	r3, r3, #8
 800852c:	430b      	orrs	r3, r1
 800852e:	4929      	ldr	r1, [pc, #164]	; (80085d4 <MX_LWIP_Init+0x268>)
 8008530:	78c9      	ldrb	r1, [r1, #3]
 8008532:	430b      	orrs	r3, r1
 8008534:	0a1b      	lsrs	r3, r3, #8
 8008536:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800853a:	431a      	orrs	r2, r3
 800853c:	4b25      	ldr	r3, [pc, #148]	; (80085d4 <MX_LWIP_Init+0x268>)
 800853e:	781b      	ldrb	r3, [r3, #0]
 8008540:	0619      	lsls	r1, r3, #24
 8008542:	4b24      	ldr	r3, [pc, #144]	; (80085d4 <MX_LWIP_Init+0x268>)
 8008544:	785b      	ldrb	r3, [r3, #1]
 8008546:	041b      	lsls	r3, r3, #16
 8008548:	4319      	orrs	r1, r3
 800854a:	4b22      	ldr	r3, [pc, #136]	; (80085d4 <MX_LWIP_Init+0x268>)
 800854c:	789b      	ldrb	r3, [r3, #2]
 800854e:	021b      	lsls	r3, r3, #8
 8008550:	430b      	orrs	r3, r1
 8008552:	4920      	ldr	r1, [pc, #128]	; (80085d4 <MX_LWIP_Init+0x268>)
 8008554:	78c9      	ldrb	r1, [r1, #3]
 8008556:	430b      	orrs	r3, r1
 8008558:	0e1b      	lsrs	r3, r3, #24
 800855a:	4313      	orrs	r3, r2
 800855c:	4a20      	ldr	r2, [pc, #128]	; (80085e0 <MX_LWIP_Init+0x274>)
 800855e:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8008560:	4b20      	ldr	r3, [pc, #128]	; (80085e4 <MX_LWIP_Init+0x278>)
 8008562:	9302      	str	r3, [sp, #8]
 8008564:	4b20      	ldr	r3, [pc, #128]	; (80085e8 <MX_LWIP_Init+0x27c>)
 8008566:	9301      	str	r3, [sp, #4]
 8008568:	2300      	movs	r3, #0
 800856a:	9300      	str	r3, [sp, #0]
 800856c:	4b1c      	ldr	r3, [pc, #112]	; (80085e0 <MX_LWIP_Init+0x274>)
 800856e:	4a1b      	ldr	r2, [pc, #108]	; (80085dc <MX_LWIP_Init+0x270>)
 8008570:	4919      	ldr	r1, [pc, #100]	; (80085d8 <MX_LWIP_Init+0x26c>)
 8008572:	481e      	ldr	r0, [pc, #120]	; (80085ec <MX_LWIP_Init+0x280>)
 8008574:	f004 fbac 	bl	800ccd0 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8008578:	481c      	ldr	r0, [pc, #112]	; (80085ec <MX_LWIP_Init+0x280>)
 800857a:	f004 fd5b 	bl	800d034 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800857e:	4b1b      	ldr	r3, [pc, #108]	; (80085ec <MX_LWIP_Init+0x280>)
 8008580:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008584:	089b      	lsrs	r3, r3, #2
 8008586:	f003 0301 	and.w	r3, r3, #1
 800858a:	b2db      	uxtb	r3, r3
 800858c:	2b00      	cmp	r3, #0
 800858e:	d003      	beq.n	8008598 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8008590:	4816      	ldr	r0, [pc, #88]	; (80085ec <MX_LWIP_Init+0x280>)
 8008592:	f004 fd5f 	bl	800d054 <netif_set_up>
 8008596:	e002      	b.n	800859e <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8008598:	4814      	ldr	r0, [pc, #80]	; (80085ec <MX_LWIP_Init+0x280>)
 800859a:	f004 fdc7 	bl	800d12c <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800859e:	4914      	ldr	r1, [pc, #80]	; (80085f0 <MX_LWIP_Init+0x284>)
 80085a0:	4812      	ldr	r0, [pc, #72]	; (80085ec <MX_LWIP_Init+0x280>)
 80085a2:	f004 fe59 	bl	800d258 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 80085a6:	4b13      	ldr	r3, [pc, #76]	; (80085f4 <MX_LWIP_Init+0x288>)
 80085a8:	1d3c      	adds	r4, r7, #4
 80085aa:	461d      	mov	r5, r3
 80085ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80085ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80085b0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80085b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 80085b8:	1d3b      	adds	r3, r7, #4
 80085ba:	490c      	ldr	r1, [pc, #48]	; (80085ec <MX_LWIP_Init+0x280>)
 80085bc:	4618      	mov	r0, r3
 80085be:	f000 fcd8 	bl	8008f72 <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80085c2:	bf00      	nop
 80085c4:	3720      	adds	r7, #32
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bdb0      	pop	{r4, r5, r7, pc}
 80085ca:	bf00      	nop
 80085cc:	24004730 	.word	0x24004730
 80085d0:	2400472c 	.word	0x2400472c
 80085d4:	240046f0 	.word	0x240046f0
 80085d8:	24004728 	.word	0x24004728
 80085dc:	24004734 	.word	0x24004734
 80085e0:	24004738 	.word	0x24004738
 80085e4:	0800bee9 	.word	0x0800bee9
 80085e8:	08008cbd 	.word	0x08008cbd
 80085ec:	240046f4 	.word	0x240046f4
 80085f0:	080085f9 	.word	0x080085f9
 80085f4:	08017f68 	.word	0x08017f68

080085f8 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 80085f8:	b480      	push	{r7}
 80085fa:	b083      	sub	sp, #12
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8008600:	bf00      	nop
 8008602:	370c      	adds	r7, #12
 8008604:	46bd      	mov	sp, r7
 8008606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860a:	4770      	bx	lr

0800860c <HAL_ETH_MspInit>:
/* Private functions ---------------------------------------------------------*/
void pbuf_free_custom(struct pbuf *p);
void Error_Handler(void);

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b08e      	sub	sp, #56	; 0x38
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008614:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008618:	2200      	movs	r2, #0
 800861a:	601a      	str	r2, [r3, #0]
 800861c:	605a      	str	r2, [r3, #4]
 800861e:	609a      	str	r2, [r3, #8]
 8008620:	60da      	str	r2, [r3, #12]
 8008622:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	4a5d      	ldr	r2, [pc, #372]	; (80087a0 <HAL_ETH_MspInit+0x194>)
 800862a:	4293      	cmp	r3, r2
 800862c:	f040 80b3 	bne.w	8008796 <HAL_ETH_MspInit+0x18a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8008630:	4b5c      	ldr	r3, [pc, #368]	; (80087a4 <HAL_ETH_MspInit+0x198>)
 8008632:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008636:	4a5b      	ldr	r2, [pc, #364]	; (80087a4 <HAL_ETH_MspInit+0x198>)
 8008638:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800863c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8008640:	4b58      	ldr	r3, [pc, #352]	; (80087a4 <HAL_ETH_MspInit+0x198>)
 8008642:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008646:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800864a:	623b      	str	r3, [r7, #32]
 800864c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800864e:	4b55      	ldr	r3, [pc, #340]	; (80087a4 <HAL_ETH_MspInit+0x198>)
 8008650:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008654:	4a53      	ldr	r2, [pc, #332]	; (80087a4 <HAL_ETH_MspInit+0x198>)
 8008656:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800865a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800865e:	4b51      	ldr	r3, [pc, #324]	; (80087a4 <HAL_ETH_MspInit+0x198>)
 8008660:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008664:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008668:	61fb      	str	r3, [r7, #28]
 800866a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 800866c:	4b4d      	ldr	r3, [pc, #308]	; (80087a4 <HAL_ETH_MspInit+0x198>)
 800866e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008672:	4a4c      	ldr	r2, [pc, #304]	; (80087a4 <HAL_ETH_MspInit+0x198>)
 8008674:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008678:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800867c:	4b49      	ldr	r3, [pc, #292]	; (80087a4 <HAL_ETH_MspInit+0x198>)
 800867e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008686:	61bb      	str	r3, [r7, #24]
 8008688:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800868a:	4b46      	ldr	r3, [pc, #280]	; (80087a4 <HAL_ETH_MspInit+0x198>)
 800868c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008690:	4a44      	ldr	r2, [pc, #272]	; (80087a4 <HAL_ETH_MspInit+0x198>)
 8008692:	f043 0304 	orr.w	r3, r3, #4
 8008696:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800869a:	4b42      	ldr	r3, [pc, #264]	; (80087a4 <HAL_ETH_MspInit+0x198>)
 800869c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80086a0:	f003 0304 	and.w	r3, r3, #4
 80086a4:	617b      	str	r3, [r7, #20]
 80086a6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80086a8:	4b3e      	ldr	r3, [pc, #248]	; (80087a4 <HAL_ETH_MspInit+0x198>)
 80086aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80086ae:	4a3d      	ldr	r2, [pc, #244]	; (80087a4 <HAL_ETH_MspInit+0x198>)
 80086b0:	f043 0301 	orr.w	r3, r3, #1
 80086b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80086b8:	4b3a      	ldr	r3, [pc, #232]	; (80087a4 <HAL_ETH_MspInit+0x198>)
 80086ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80086be:	f003 0301 	and.w	r3, r3, #1
 80086c2:	613b      	str	r3, [r7, #16]
 80086c4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80086c6:	4b37      	ldr	r3, [pc, #220]	; (80087a4 <HAL_ETH_MspInit+0x198>)
 80086c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80086cc:	4a35      	ldr	r2, [pc, #212]	; (80087a4 <HAL_ETH_MspInit+0x198>)
 80086ce:	f043 0302 	orr.w	r3, r3, #2
 80086d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80086d6:	4b33      	ldr	r3, [pc, #204]	; (80087a4 <HAL_ETH_MspInit+0x198>)
 80086d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80086dc:	f003 0302 	and.w	r3, r3, #2
 80086e0:	60fb      	str	r3, [r7, #12]
 80086e2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80086e4:	4b2f      	ldr	r3, [pc, #188]	; (80087a4 <HAL_ETH_MspInit+0x198>)
 80086e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80086ea:	4a2e      	ldr	r2, [pc, #184]	; (80087a4 <HAL_ETH_MspInit+0x198>)
 80086ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80086f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80086f4:	4b2b      	ldr	r3, [pc, #172]	; (80087a4 <HAL_ETH_MspInit+0x198>)
 80086f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80086fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086fe:	60bb      	str	r3, [r7, #8]
 8008700:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8008702:	2332      	movs	r3, #50	; 0x32
 8008704:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008706:	2302      	movs	r3, #2
 8008708:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800870a:	2300      	movs	r3, #0
 800870c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800870e:	2303      	movs	r3, #3
 8008710:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008712:	230b      	movs	r3, #11
 8008714:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008716:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800871a:	4619      	mov	r1, r3
 800871c:	4822      	ldr	r0, [pc, #136]	; (80087a8 <HAL_ETH_MspInit+0x19c>)
 800871e:	f7fb f9bf 	bl	8003aa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8008722:	2386      	movs	r3, #134	; 0x86
 8008724:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008726:	2302      	movs	r3, #2
 8008728:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800872a:	2300      	movs	r3, #0
 800872c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800872e:	2303      	movs	r3, #3
 8008730:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008732:	230b      	movs	r3, #11
 8008734:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008736:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800873a:	4619      	mov	r1, r3
 800873c:	481b      	ldr	r0, [pc, #108]	; (80087ac <HAL_ETH_MspInit+0x1a0>)
 800873e:	f7fb f9af 	bl	8003aa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8008742:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008746:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008748:	2302      	movs	r3, #2
 800874a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800874c:	2300      	movs	r3, #0
 800874e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008750:	2303      	movs	r3, #3
 8008752:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008754:	230b      	movs	r3, #11
 8008756:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8008758:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800875c:	4619      	mov	r1, r3
 800875e:	4814      	ldr	r0, [pc, #80]	; (80087b0 <HAL_ETH_MspInit+0x1a4>)
 8008760:	f7fb f99e 	bl	8003aa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8008764:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8008768:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800876a:	2302      	movs	r3, #2
 800876c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800876e:	2300      	movs	r3, #0
 8008770:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008772:	2303      	movs	r3, #3
 8008774:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008776:	230b      	movs	r3, #11
 8008778:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800877a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800877e:	4619      	mov	r1, r3
 8008780:	480c      	ldr	r0, [pc, #48]	; (80087b4 <HAL_ETH_MspInit+0x1a8>)
 8008782:	f7fb f98d 	bl	8003aa0 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8008786:	2200      	movs	r2, #0
 8008788:	2105      	movs	r1, #5
 800878a:	203d      	movs	r0, #61	; 0x3d
 800878c:	f7f9 fa38 	bl	8001c00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8008790:	203d      	movs	r0, #61	; 0x3d
 8008792:	f7f9 fa4f 	bl	8001c34 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8008796:	bf00      	nop
 8008798:	3738      	adds	r7, #56	; 0x38
 800879a:	46bd      	mov	sp, r7
 800879c:	bd80      	pop	{r7, pc}
 800879e:	bf00      	nop
 80087a0:	40028000 	.word	0x40028000
 80087a4:	58024400 	.word	0x58024400
 80087a8:	58020800 	.word	0x58020800
 80087ac:	58020000 	.word	0x58020000
 80087b0:	58020400 	.word	0x58020400
 80087b4:	58021800 	.word	0x58021800

080087b8 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b082      	sub	sp, #8
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 80087c0:	4b04      	ldr	r3, [pc, #16]	; (80087d4 <HAL_ETH_RxCpltCallback+0x1c>)
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	4618      	mov	r0, r3
 80087c6:	f000 fd51 	bl	800926c <osSemaphoreRelease>
}
 80087ca:	bf00      	nop
 80087cc:	3708      	adds	r7, #8
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bd80      	pop	{r7, pc}
 80087d2:	bf00      	nop
 80087d4:	24000310 	.word	0x24000310

080087d8 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80087d8:	b5b0      	push	{r4, r5, r7, lr}
 80087da:	b0ac      	sub	sp, #176	; 0xb0
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 80087e0:	2300      	movs	r3, #0
 80087e2:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
  uint32_t idx = 0;
 80087e6:	2300      	movs	r3, #0
 80087e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  ETH_MACConfigTypeDef MACConf;
  int32_t PHYLinkState;
  uint32_t duplex, speed = 0;
 80087ec:	2300      	movs	r3, #0
 80087ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80087f2:	4b91      	ldr	r3, [pc, #580]	; (8008a38 <low_level_init+0x260>)
 80087f4:	4a91      	ldr	r2, [pc, #580]	; (8008a3c <low_level_init+0x264>)
 80087f6:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80087f8:	2300      	movs	r3, #0
 80087fa:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 80087fe:	2380      	movs	r3, #128	; 0x80
 8008800:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 8008804:	23e1      	movs	r3, #225	; 0xe1
 8008806:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 800880a:	2300      	movs	r3, #0
 800880c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x00;
 8008810:	2300      	movs	r3, #0
 8008812:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x00;
 8008816:	2300      	movs	r3, #0
 8008818:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 800881c:	4a86      	ldr	r2, [pc, #536]	; (8008a38 <low_level_init+0x260>)
 800881e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008822:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8008824:	4b84      	ldr	r3, [pc, #528]	; (8008a38 <low_level_init+0x260>)
 8008826:	2201      	movs	r2, #1
 8008828:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800882a:	4b83      	ldr	r3, [pc, #524]	; (8008a38 <low_level_init+0x260>)
 800882c:	4a84      	ldr	r2, [pc, #528]	; (8008a40 <low_level_init+0x268>)
 800882e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8008830:	4b81      	ldr	r3, [pc, #516]	; (8008a38 <low_level_init+0x260>)
 8008832:	4a84      	ldr	r2, [pc, #528]	; (8008a44 <low_level_init+0x26c>)
 8008834:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8008836:	4b80      	ldr	r3, [pc, #512]	; (8008a38 <low_level_init+0x260>)
 8008838:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800883c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800883e:	487e      	ldr	r0, [pc, #504]	; (8008a38 <low_level_init+0x260>)
 8008840:	f7f9 fa82 	bl	8001d48 <HAL_ETH_Init>
 8008844:	4603      	mov	r3, r0
 8008846:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800884a:	2234      	movs	r2, #52	; 0x34
 800884c:	2100      	movs	r1, #0
 800884e:	487e      	ldr	r0, [pc, #504]	; (8008a48 <low_level_init+0x270>)
 8008850:	f00e fb1a 	bl	8016e88 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8008854:	4b7c      	ldr	r3, [pc, #496]	; (8008a48 <low_level_init+0x270>)
 8008856:	2221      	movs	r2, #33	; 0x21
 8008858:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800885a:	4b7b      	ldr	r3, [pc, #492]	; (8008a48 <low_level_init+0x270>)
 800885c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8008860:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8008862:	4b79      	ldr	r3, [pc, #484]	; (8008a48 <low_level_init+0x270>)
 8008864:	2200      	movs	r2, #0
 8008866:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8008868:	4878      	ldr	r0, [pc, #480]	; (8008a4c <low_level_init+0x274>)
 800886a:	f004 f8eb 	bl	800ca44 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2206      	movs	r2, #6
 8008872:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8008876:	4b70      	ldr	r3, [pc, #448]	; (8008a38 <low_level_init+0x260>)
 8008878:	685b      	ldr	r3, [r3, #4]
 800887a:	781a      	ldrb	r2, [r3, #0]
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8008882:	4b6d      	ldr	r3, [pc, #436]	; (8008a38 <low_level_init+0x260>)
 8008884:	685b      	ldr	r3, [r3, #4]
 8008886:	785a      	ldrb	r2, [r3, #1]
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800888e:	4b6a      	ldr	r3, [pc, #424]	; (8008a38 <low_level_init+0x260>)
 8008890:	685b      	ldr	r3, [r3, #4]
 8008892:	789a      	ldrb	r2, [r3, #2]
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800889a:	4b67      	ldr	r3, [pc, #412]	; (8008a38 <low_level_init+0x260>)
 800889c:	685b      	ldr	r3, [r3, #4]
 800889e:	78da      	ldrb	r2, [r3, #3]
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80088a6:	4b64      	ldr	r3, [pc, #400]	; (8008a38 <low_level_init+0x260>)
 80088a8:	685b      	ldr	r3, [r3, #4]
 80088aa:	791a      	ldrb	r2, [r3, #4]
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80088b2:	4b61      	ldr	r3, [pc, #388]	; (8008a38 <low_level_init+0x260>)
 80088b4:	685b      	ldr	r3, [r3, #4]
 80088b6:	795a      	ldrb	r2, [r3, #5]
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80088c4:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80088cc:	f043 030a 	orr.w	r3, r3, #10
 80088d0:	b2da      	uxtb	r2, r3
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 80088d8:	2300      	movs	r3, #0
 80088da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80088de:	e012      	b.n	8008906 <low_level_init+0x12e>
  {
    HAL_ETH_DescAssignMemory(&heth, idx, Rx_Buff[idx], NULL);
 80088e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80088e4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80088e8:	fb02 f303 	mul.w	r3, r2, r3
 80088ec:	4a58      	ldr	r2, [pc, #352]	; (8008a50 <low_level_init+0x278>)
 80088ee:	441a      	add	r2, r3
 80088f0:	2300      	movs	r3, #0
 80088f2:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 80088f6:	4850      	ldr	r0, [pc, #320]	; (8008a38 <low_level_init+0x260>)
 80088f8:	f7f9 fb00 	bl	8001efc <HAL_ETH_DescAssignMemory>
  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 80088fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008900:	3301      	adds	r3, #1
 8008902:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008906:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800890a:	2b03      	cmp	r3, #3
 800890c:	d9e8      	bls.n	80088e0 <low_level_init+0x108>
  }

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 800890e:	2300      	movs	r3, #0
 8008910:	62bb      	str	r3, [r7, #40]	; 0x28
 8008912:	2300      	movs	r3, #0
 8008914:	62fb      	str	r3, [r7, #44]	; 0x2c
  RxPktSemaphore = osSemaphoreCreate(osSemaphore(SEM) , 1 );
 8008916:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800891a:	2101      	movs	r1, #1
 800891c:	4618      	mov	r0, r3
 800891e:	f000 fc25 	bl	800916c <osSemaphoreCreate>
 8008922:	4603      	mov	r3, r0
 8008924:	4a4b      	ldr	r2, [pc, #300]	; (8008a54 <low_level_init+0x27c>)
 8008926:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8008928:	4b4b      	ldr	r3, [pc, #300]	; (8008a58 <low_level_init+0x280>)
 800892a:	f107 040c 	add.w	r4, r7, #12
 800892e:	461d      	mov	r5, r3
 8008930:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008932:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008934:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008938:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 800893c:	f107 030c 	add.w	r3, r7, #12
 8008940:	6879      	ldr	r1, [r7, #4]
 8008942:	4618      	mov	r0, r3
 8008944:	f000 fb15 	bl	8008f72 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8008948:	4944      	ldr	r1, [pc, #272]	; (8008a5c <low_level_init+0x284>)
 800894a:	4845      	ldr	r0, [pc, #276]	; (8008a60 <low_level_init+0x288>)
 800894c:	f7f8 fe9f 	bl	800168e <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8008950:	4843      	ldr	r0, [pc, #268]	; (8008a60 <low_level_init+0x288>)
 8008952:	f7f8 fece 	bl	80016f2 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8008956:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 800895a:	2b00      	cmp	r3, #0
 800895c:	d165      	bne.n	8008a2a <low_level_init+0x252>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800895e:	4840      	ldr	r0, [pc, #256]	; (8008a60 <low_level_init+0x288>)
 8008960:	f7f8 ff6f 	bl	8001842 <LAN8742_GetLinkState>
 8008964:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8008968:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800896c:	2b01      	cmp	r3, #1
 800896e:	dc06      	bgt.n	800897e <low_level_init+0x1a6>
    {
      netif_set_link_down(netif);
 8008970:	6878      	ldr	r0, [r7, #4]
 8008972:	f004 fc41 	bl	800d1f8 <netif_set_link_down>
      netif_set_down(netif);
 8008976:	6878      	ldr	r0, [r7, #4]
 8008978:	f004 fbd8 	bl	800d12c <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800897c:	e057      	b.n	8008a2e <low_level_init+0x256>
 800897e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008982:	3b02      	subs	r3, #2
 8008984:	2b03      	cmp	r3, #3
 8008986:	d82b      	bhi.n	80089e0 <low_level_init+0x208>
 8008988:	a201      	add	r2, pc, #4	; (adr r2, 8008990 <low_level_init+0x1b8>)
 800898a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800898e:	bf00      	nop
 8008990:	080089a1 	.word	0x080089a1
 8008994:	080089b3 	.word	0x080089b3
 8008998:	080089c3 	.word	0x080089c3
 800899c:	080089d3 	.word	0x080089d3
        duplex = ETH_FULLDUPLEX_MODE;
 80089a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80089a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 80089a8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80089ac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 80089b0:	e01f      	b.n	80089f2 <low_level_init+0x21a>
        duplex = ETH_HALFDUPLEX_MODE;
 80089b2:	2300      	movs	r3, #0
 80089b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 80089b8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80089bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 80089c0:	e017      	b.n	80089f2 <low_level_init+0x21a>
        duplex = ETH_FULLDUPLEX_MODE;
 80089c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80089c6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_10M;
 80089ca:	2300      	movs	r3, #0
 80089cc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 80089d0:	e00f      	b.n	80089f2 <low_level_init+0x21a>
        duplex = ETH_HALFDUPLEX_MODE;
 80089d2:	2300      	movs	r3, #0
 80089d4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_10M;
 80089d8:	2300      	movs	r3, #0
 80089da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 80089de:	e008      	b.n	80089f2 <low_level_init+0x21a>
        duplex = ETH_FULLDUPLEX_MODE;
 80089e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80089e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 80089e8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80089ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 80089f0:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 80089f2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80089f6:	4619      	mov	r1, r3
 80089f8:	480f      	ldr	r0, [pc, #60]	; (8008a38 <low_level_init+0x260>)
 80089fa:	f7fa f851 	bl	8002aa0 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 80089fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008a02:	653b      	str	r3, [r7, #80]	; 0x50
    MACConf.Speed = speed;
 8008a04:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008a08:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8008a0a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008a0e:	4619      	mov	r1, r3
 8008a10:	4809      	ldr	r0, [pc, #36]	; (8008a38 <low_level_init+0x260>)
 8008a12:	f7fa fa19 	bl	8002e48 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 8008a16:	4808      	ldr	r0, [pc, #32]	; (8008a38 <low_level_init+0x260>)
 8008a18:	f7f9 fab1 	bl	8001f7e <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8008a1c:	6878      	ldr	r0, [r7, #4]
 8008a1e:	f004 fb19 	bl	800d054 <netif_set_up>
    netif_set_link_up(netif);
 8008a22:	6878      	ldr	r0, [r7, #4]
 8008a24:	f004 fbb4 	bl	800d190 <netif_set_link_up>
}
 8008a28:	e001      	b.n	8008a2e <low_level_init+0x256>
    Error_Handler();
 8008a2a:	f7f8 f90b 	bl	8000c44 <Error_Handler>
}
 8008a2e:	bf00      	nop
 8008a30:	37b0      	adds	r7, #176	; 0xb0
 8008a32:	46bd      	mov	sp, r7
 8008a34:	bdb0      	pop	{r4, r5, r7, pc}
 8008a36:	bf00      	nop
 8008a38:	24004828 	.word	0x24004828
 8008a3c:	40028000 	.word	0x40028000
 8008a40:	30040060 	.word	0x30040060
 8008a44:	30040000 	.word	0x30040000
 8008a48:	240048b0 	.word	0x240048b0
 8008a4c:	0801aac4 	.word	0x0801aac4
 8008a50:	30040200 	.word	0x30040200
 8008a54:	24000310 	.word	0x24000310
 8008a58:	08017f8c 	.word	0x08017f8c
 8008a5c:	24000010 	.word	0x24000010
 8008a60:	24004808 	.word	0x24004808

08008a64 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b092      	sub	sp, #72	; 0x48
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
 8008a6c:	6039      	str	r1, [r7, #0]
  uint32_t i=0;
 8008a6e:	2300      	movs	r3, #0
 8008a70:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q;
  err_t errval = ERR_OK;
 8008a72:	2300      	movs	r3, #0
 8008a74:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT];

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8008a78:	f107 030c 	add.w	r3, r7, #12
 8008a7c:	2230      	movs	r2, #48	; 0x30
 8008a7e:	2100      	movs	r1, #0
 8008a80:	4618      	mov	r0, r3
 8008a82:	f00e fa01 	bl	8016e88 <memset>

  for(q = p; q != NULL; q = q->next)
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	643b      	str	r3, [r7, #64]	; 0x40
 8008a8a:	e049      	b.n	8008b20 <low_level_output+0xbc>
  {
    if(i >= ETH_TX_DESC_CNT)
 8008a8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a8e:	2b03      	cmp	r3, #3
 8008a90:	d902      	bls.n	8008a98 <low_level_output+0x34>
      return ERR_IF;
 8008a92:	f06f 030b 	mvn.w	r3, #11
 8008a96:	e056      	b.n	8008b46 <low_level_output+0xe2>

    Txbuffer[i].buffer = q->payload;
 8008a98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a9a:	6859      	ldr	r1, [r3, #4]
 8008a9c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008a9e:	4613      	mov	r3, r2
 8008aa0:	005b      	lsls	r3, r3, #1
 8008aa2:	4413      	add	r3, r2
 8008aa4:	009b      	lsls	r3, r3, #2
 8008aa6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8008aaa:	4413      	add	r3, r2
 8008aac:	3b3c      	subs	r3, #60	; 0x3c
 8008aae:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8008ab0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ab2:	895b      	ldrh	r3, [r3, #10]
 8008ab4:	4619      	mov	r1, r3
 8008ab6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008ab8:	4613      	mov	r3, r2
 8008aba:	005b      	lsls	r3, r3, #1
 8008abc:	4413      	add	r3, r2
 8008abe:	009b      	lsls	r3, r3, #2
 8008ac0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8008ac4:	4413      	add	r3, r2
 8008ac6:	3b38      	subs	r3, #56	; 0x38
 8008ac8:	6019      	str	r1, [r3, #0]

    if(i>0)
 8008aca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d012      	beq.n	8008af6 <low_level_output+0x92>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8008ad0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ad2:	1e5a      	subs	r2, r3, #1
 8008ad4:	f107 000c 	add.w	r0, r7, #12
 8008ad8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008ada:	460b      	mov	r3, r1
 8008adc:	005b      	lsls	r3, r3, #1
 8008ade:	440b      	add	r3, r1
 8008ae0:	009b      	lsls	r3, r3, #2
 8008ae2:	18c1      	adds	r1, r0, r3
 8008ae4:	4613      	mov	r3, r2
 8008ae6:	005b      	lsls	r3, r3, #1
 8008ae8:	4413      	add	r3, r2
 8008aea:	009b      	lsls	r3, r3, #2
 8008aec:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8008af0:	4413      	add	r3, r2
 8008af2:	3b34      	subs	r3, #52	; 0x34
 8008af4:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8008af6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d10a      	bne.n	8008b14 <low_level_output+0xb0>
    {
      Txbuffer[i].next = NULL;
 8008afe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008b00:	4613      	mov	r3, r2
 8008b02:	005b      	lsls	r3, r3, #1
 8008b04:	4413      	add	r3, r2
 8008b06:	009b      	lsls	r3, r3, #2
 8008b08:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8008b0c:	4413      	add	r3, r2
 8008b0e:	3b34      	subs	r3, #52	; 0x34
 8008b10:	2200      	movs	r2, #0
 8008b12:	601a      	str	r2, [r3, #0]
    }

    i++;
 8008b14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b16:	3301      	adds	r3, #1
 8008b18:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8008b1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	643b      	str	r3, [r7, #64]	; 0x40
 8008b20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d1b2      	bne.n	8008a8c <low_level_output+0x28>
  }

  TxConfig.Length =  p->tot_len;
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	891b      	ldrh	r3, [r3, #8]
 8008b2a:	461a      	mov	r2, r3
 8008b2c:	4b08      	ldr	r3, [pc, #32]	; (8008b50 <low_level_output+0xec>)
 8008b2e:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8008b30:	4a07      	ldr	r2, [pc, #28]	; (8008b50 <low_level_output+0xec>)
 8008b32:	f107 030c 	add.w	r3, r7, #12
 8008b36:	6093      	str	r3, [r2, #8]

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8008b38:	2214      	movs	r2, #20
 8008b3a:	4905      	ldr	r1, [pc, #20]	; (8008b50 <low_level_output+0xec>)
 8008b3c:	4805      	ldr	r0, [pc, #20]	; (8008b54 <low_level_output+0xf0>)
 8008b3e:	f7f9 fb1d 	bl	800217c <HAL_ETH_Transmit>

  return errval;
 8008b42:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8008b46:	4618      	mov	r0, r3
 8008b48:	3748      	adds	r7, #72	; 0x48
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	bd80      	pop	{r7, pc}
 8008b4e:	bf00      	nop
 8008b50:	240048b0 	.word	0x240048b0
 8008b54:	24004828 	.word	0x24004828

08008b58 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b098      	sub	sp, #96	; 0x60
 8008b5c:	af02      	add	r7, sp, #8
 8008b5e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8008b60:	2300      	movs	r3, #0
 8008b62:	657b      	str	r3, [r7, #84]	; 0x54
  ETH_BufferTypeDef RxBuff[ETH_RX_DESC_CNT];
  uint32_t framelength = 0, i = 0;
 8008b64:	2300      	movs	r3, #0
 8008b66:	60bb      	str	r3, [r7, #8]
 8008b68:	2300      	movs	r3, #0
 8008b6a:	653b      	str	r3, [r7, #80]	; 0x50
  struct pbuf_custom* custom_pbuf;

  memset(RxBuff, 0 , ETH_RX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8008b6c:	f107 030c 	add.w	r3, r7, #12
 8008b70:	2230      	movs	r2, #48	; 0x30
 8008b72:	2100      	movs	r1, #0
 8008b74:	4618      	mov	r0, r3
 8008b76:	f00e f987 	bl	8016e88 <memset>

  for(i = 0; i < ETH_RX_DESC_CNT -1; i++)
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	653b      	str	r3, [r7, #80]	; 0x50
 8008b7e:	e015      	b.n	8008bac <low_level_input+0x54>
  {
    RxBuff[i].next=&RxBuff[i+1];
 8008b80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b82:	1c5a      	adds	r2, r3, #1
 8008b84:	f107 010c 	add.w	r1, r7, #12
 8008b88:	4613      	mov	r3, r2
 8008b8a:	005b      	lsls	r3, r3, #1
 8008b8c:	4413      	add	r3, r2
 8008b8e:	009b      	lsls	r3, r3, #2
 8008b90:	4419      	add	r1, r3
 8008b92:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008b94:	4613      	mov	r3, r2
 8008b96:	005b      	lsls	r3, r3, #1
 8008b98:	4413      	add	r3, r2
 8008b9a:	009b      	lsls	r3, r3, #2
 8008b9c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8008ba0:	4413      	add	r3, r2
 8008ba2:	3b44      	subs	r3, #68	; 0x44
 8008ba4:	6019      	str	r1, [r3, #0]
  for(i = 0; i < ETH_RX_DESC_CNT -1; i++)
 8008ba6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ba8:	3301      	adds	r3, #1
 8008baa:	653b      	str	r3, [r7, #80]	; 0x50
 8008bac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008bae:	2b02      	cmp	r3, #2
 8008bb0:	d9e6      	bls.n	8008b80 <low_level_input+0x28>
  }

  if (HAL_ETH_GetRxDataBuffer(&heth, RxBuff) == HAL_OK)
 8008bb2:	f107 030c 	add.w	r3, r7, #12
 8008bb6:	4619      	mov	r1, r3
 8008bb8:	4828      	ldr	r0, [pc, #160]	; (8008c5c <low_level_input+0x104>)
 8008bba:	f7f9 fc58 	bl	800246e <HAL_ETH_GetRxDataBuffer>
 8008bbe:	4603      	mov	r3, r0
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d145      	bne.n	8008c50 <low_level_input+0xf8>
  {
    HAL_ETH_GetRxDataLength(&heth, &framelength);
 8008bc4:	f107 0308 	add.w	r3, r7, #8
 8008bc8:	4619      	mov	r1, r3
 8008bca:	4824      	ldr	r0, [pc, #144]	; (8008c5c <low_level_input+0x104>)
 8008bcc:	f7f9 fced 	bl	80025aa <HAL_ETH_GetRxDataLength>

    /* Build Rx descriptor to be ready for next data reception */
    HAL_ETH_BuildRxDescriptors(&heth);
 8008bd0:	4822      	ldr	r0, [pc, #136]	; (8008c5c <low_level_input+0x104>)
 8008bd2:	f7f9 fd1d 	bl	8002610 <HAL_ETH_BuildRxDescriptors>

#if !defined(DUAL_CORE) || defined(CORE_CM7)
    /* Invalidate data cache for ETH Rx Buffers */
    SCB_InvalidateDCache_by_Addr((uint32_t *)RxBuff->buffer, framelength);
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	68ba      	ldr	r2, [r7, #8]
 8008bda:	64bb      	str	r3, [r7, #72]	; 0x48
 8008bdc:	647a      	str	r2, [r7, #68]	; 0x44
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8008bde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	dd1d      	ble.n	8008c20 <low_level_input+0xc8>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8008be4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008be6:	f003 021f 	and.w	r2, r3, #31
 8008bea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008bec:	4413      	add	r3, r2
 8008bee:	643b      	str	r3, [r7, #64]	; 0x40
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8008bf0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("dsb 0xF":::"memory");
 8008bf4:	f3bf 8f4f 	dsb	sy
}
 8008bf8:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8008bfa:	4a19      	ldr	r2, [pc, #100]	; (8008c60 <low_level_input+0x108>)
 8008bfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bfe:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8008c02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c04:	3320      	adds	r3, #32
 8008c06:	63fb      	str	r3, [r7, #60]	; 0x3c
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8008c08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c0a:	3b20      	subs	r3, #32
 8008c0c:	643b      	str	r3, [r7, #64]	; 0x40
      } while ( op_size > 0 );
 8008c0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	dcf2      	bgt.n	8008bfa <low_level_input+0xa2>
  __ASM volatile ("dsb 0xF":::"memory");
 8008c14:	f3bf 8f4f 	dsb	sy
}
 8008c18:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8008c1a:	f3bf 8f6f 	isb	sy
}
 8008c1e:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 8008c20:	bf00      	nop
#endif

    custom_pbuf  = (struct pbuf_custom*)LWIP_MEMPOOL_ALLOC(RX_POOL);
 8008c22:	4810      	ldr	r0, [pc, #64]	; (8008c64 <low_level_input+0x10c>)
 8008c24:	f003 ff8a 	bl	800cb3c <memp_malloc_pool>
 8008c28:	64f8      	str	r0, [r7, #76]	; 0x4c
    if(custom_pbuf != NULL)
 8008c2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d00f      	beq.n	8008c50 <low_level_input+0xf8>
    {
      custom_pbuf->custom_free_function = pbuf_free_custom;
 8008c30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c32:	4a0d      	ldr	r2, [pc, #52]	; (8008c68 <low_level_input+0x110>)
 8008c34:	611a      	str	r2, [r3, #16]
      p = pbuf_alloced_custom(PBUF_RAW, framelength, PBUF_REF, custom_pbuf, RxBuff->buffer, framelength);
 8008c36:	68bb      	ldr	r3, [r7, #8]
 8008c38:	b299      	uxth	r1, r3
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	68ba      	ldr	r2, [r7, #8]
 8008c3e:	b292      	uxth	r2, r2
 8008c40:	9201      	str	r2, [sp, #4]
 8008c42:	9300      	str	r3, [sp, #0]
 8008c44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c46:	2241      	movs	r2, #65	; 0x41
 8008c48:	2000      	movs	r0, #0
 8008c4a:	f004 fcf9 	bl	800d640 <pbuf_alloced_custom>
 8008c4e:	6578      	str	r0, [r7, #84]	; 0x54
    }
  }

  return p;
 8008c50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
}
 8008c52:	4618      	mov	r0, r3
 8008c54:	3758      	adds	r7, #88	; 0x58
 8008c56:	46bd      	mov	sp, r7
 8008c58:	bd80      	pop	{r7, pc}
 8008c5a:	bf00      	nop
 8008c5c:	24004828 	.word	0x24004828
 8008c60:	e000ed00 	.word	0xe000ed00
 8008c64:	0801aac4 	.word	0x0801aac4
 8008c68:	08008d19 	.word	0x08008d19

08008c6c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b084      	sub	sp, #16
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8008c78:	4b0f      	ldr	r3, [pc, #60]	; (8008cb8 <ethernetif_input+0x4c>)
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	f04f 31ff 	mov.w	r1, #4294967295
 8008c80:	4618      	mov	r0, r3
 8008c82:	f000 faa5 	bl	80091d0 <osSemaphoreWait>
 8008c86:	4603      	mov	r3, r0
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d1f5      	bne.n	8008c78 <ethernetif_input+0xc>
    {
      do
      {
        p = low_level_input( netif );
 8008c8c:	68f8      	ldr	r0, [r7, #12]
 8008c8e:	f7ff ff63 	bl	8008b58 <low_level_input>
 8008c92:	60b8      	str	r0, [r7, #8]
        if (p != NULL)
 8008c94:	68bb      	ldr	r3, [r7, #8]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d00a      	beq.n	8008cb0 <ethernetif_input+0x44>
        {
          if (netif->input( p, netif) != ERR_OK )
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	691b      	ldr	r3, [r3, #16]
 8008c9e:	68f9      	ldr	r1, [r7, #12]
 8008ca0:	68b8      	ldr	r0, [r7, #8]
 8008ca2:	4798      	blx	r3
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d002      	beq.n	8008cb0 <ethernetif_input+0x44>
          {
            pbuf_free(p);
 8008caa:	68b8      	ldr	r0, [r7, #8]
 8008cac:	f004 fe82 	bl	800d9b4 <pbuf_free>
          }
        }
      } while(p!=NULL);
 8008cb0:	68bb      	ldr	r3, [r7, #8]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d1ea      	bne.n	8008c8c <ethernetif_input+0x20>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8008cb6:	e7df      	b.n	8008c78 <ethernetif_input+0xc>
 8008cb8:	24000310 	.word	0x24000310

08008cbc <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b082      	sub	sp, #8
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d106      	bne.n	8008cd8 <ethernetif_init+0x1c>
 8008cca:	4b0e      	ldr	r3, [pc, #56]	; (8008d04 <ethernetif_init+0x48>)
 8008ccc:	f44f 7212 	mov.w	r2, #584	; 0x248
 8008cd0:	490d      	ldr	r1, [pc, #52]	; (8008d08 <ethernetif_init+0x4c>)
 8008cd2:	480e      	ldr	r0, [pc, #56]	; (8008d0c <ethernetif_init+0x50>)
 8008cd4:	f00e f8e0 	bl	8016e98 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2273      	movs	r2, #115	; 0x73
 8008cdc:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2274      	movs	r2, #116	; 0x74
 8008ce4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	4a09      	ldr	r2, [pc, #36]	; (8008d10 <ethernetif_init+0x54>)
 8008cec:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	4a08      	ldr	r2, [pc, #32]	; (8008d14 <ethernetif_init+0x58>)
 8008cf2:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8008cf4:	6878      	ldr	r0, [r7, #4]
 8008cf6:	f7ff fd6f 	bl	80087d8 <low_level_init>

  return ERR_OK;
 8008cfa:	2300      	movs	r3, #0
}
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	3708      	adds	r7, #8
 8008d00:	46bd      	mov	sp, r7
 8008d02:	bd80      	pop	{r7, pc}
 8008d04:	08017fa8 	.word	0x08017fa8
 8008d08:	08017fc4 	.word	0x08017fc4
 8008d0c:	08017fd4 	.word	0x08017fd4
 8008d10:	08014ea9 	.word	0x08014ea9
 8008d14:	08008a65 	.word	0x08008a65

08008d18 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b084      	sub	sp, #16
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	60fb      	str	r3, [r7, #12]

  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8008d24:	68f9      	ldr	r1, [r7, #12]
 8008d26:	4803      	ldr	r0, [pc, #12]	; (8008d34 <pbuf_free_custom+0x1c>)
 8008d28:	f003 ff7c 	bl	800cc24 <memp_free_pool>
}
 8008d2c:	bf00      	nop
 8008d2e:	3710      	adds	r7, #16
 8008d30:	46bd      	mov	sp, r7
 8008d32:	bd80      	pop	{r7, pc}
 8008d34:	0801aac4 	.word	0x0801aac4

08008d38 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8008d3c:	f7f8 fe58 	bl	80019f0 <HAL_GetTick>
 8008d40:	4603      	mov	r3, r0
}
 8008d42:	4618      	mov	r0, r3
 8008d44:	bd80      	pop	{r7, pc}
	...

08008d48 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8008d4c:	4802      	ldr	r0, [pc, #8]	; (8008d58 <ETH_PHY_IO_Init+0x10>)
 8008d4e:	f7fa f895 	bl	8002e7c <HAL_ETH_SetMDIOClockRange>

  return 0;
 8008d52:	2300      	movs	r3, #0
}
 8008d54:	4618      	mov	r0, r3
 8008d56:	bd80      	pop	{r7, pc}
 8008d58:	24004828 	.word	0x24004828

08008d5c <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	af00      	add	r7, sp, #0
  return 0;
 8008d60:	2300      	movs	r3, #0
}
 8008d62:	4618      	mov	r0, r3
 8008d64:	46bd      	mov	sp, r7
 8008d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6a:	4770      	bx	lr

08008d6c <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b084      	sub	sp, #16
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	60f8      	str	r0, [r7, #12]
 8008d74:	60b9      	str	r1, [r7, #8]
 8008d76:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	68ba      	ldr	r2, [r7, #8]
 8008d7c:	68f9      	ldr	r1, [r7, #12]
 8008d7e:	4807      	ldr	r0, [pc, #28]	; (8008d9c <ETH_PHY_IO_ReadReg+0x30>)
 8008d80:	f7f9 fde6 	bl	8002950 <HAL_ETH_ReadPHYRegister>
 8008d84:	4603      	mov	r3, r0
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d002      	beq.n	8008d90 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8008d8a:	f04f 33ff 	mov.w	r3, #4294967295
 8008d8e:	e000      	b.n	8008d92 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8008d90:	2300      	movs	r3, #0
}
 8008d92:	4618      	mov	r0, r3
 8008d94:	3710      	adds	r7, #16
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bd80      	pop	{r7, pc}
 8008d9a:	bf00      	nop
 8008d9c:	24004828 	.word	0x24004828

08008da0 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b084      	sub	sp, #16
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	60f8      	str	r0, [r7, #12]
 8008da8:	60b9      	str	r1, [r7, #8]
 8008daa:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	68ba      	ldr	r2, [r7, #8]
 8008db0:	68f9      	ldr	r1, [r7, #12]
 8008db2:	4807      	ldr	r0, [pc, #28]	; (8008dd0 <ETH_PHY_IO_WriteReg+0x30>)
 8008db4:	f7f9 fe20 	bl	80029f8 <HAL_ETH_WritePHYRegister>
 8008db8:	4603      	mov	r3, r0
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d002      	beq.n	8008dc4 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8008dbe:	f04f 33ff 	mov.w	r3, #4294967295
 8008dc2:	e000      	b.n	8008dc6 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8008dc4:	2300      	movs	r3, #0
}
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	3710      	adds	r7, #16
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	bd80      	pop	{r7, pc}
 8008dce:	bf00      	nop
 8008dd0:	24004828 	.word	0x24004828

08008dd4 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8008dd8:	f7f8 fe0a 	bl	80019f0 <HAL_GetTick>
 8008ddc:	4603      	mov	r3, r0
}
 8008dde:	4618      	mov	r0, r3
 8008de0:	bd80      	pop	{r7, pc}
	...

08008de4 <ethernet_link_thread>:
  * @param  argument: netif
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b0a0      	sub	sp, #128	; 0x80
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf;
  int32_t PHYLinkState;
  uint32_t linkchanged = 0, speed = 0, duplex =0;
 8008dec:	2300      	movs	r3, #0
 8008dee:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008df0:	2300      	movs	r3, #0
 8008df2:	67bb      	str	r3, [r7, #120]	; 0x78
 8008df4:	2300      	movs	r3, #0
 8008df6:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	673b      	str	r3, [r7, #112]	; 0x70

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8008dfc:	483a      	ldr	r0, [pc, #232]	; (8008ee8 <ethernet_link_thread+0x104>)
 8008dfe:	f7f8 fd20 	bl	8001842 <LAN8742_GetLinkState>
 8008e02:	66f8      	str	r0, [r7, #108]	; 0x6c

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8008e04:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008e06:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008e0a:	089b      	lsrs	r3, r3, #2
 8008e0c:	f003 0301 	and.w	r3, r3, #1
 8008e10:	b2db      	uxtb	r3, r3
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d00c      	beq.n	8008e30 <ethernet_link_thread+0x4c>
 8008e16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e18:	2b01      	cmp	r3, #1
 8008e1a:	dc09      	bgt.n	8008e30 <ethernet_link_thread+0x4c>
  {
    HAL_ETH_Stop_IT(&heth);
 8008e1c:	4833      	ldr	r0, [pc, #204]	; (8008eec <ethernet_link_thread+0x108>)
 8008e1e:	f7f9 f933 	bl	8002088 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8008e22:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8008e24:	f004 f982 	bl	800d12c <netif_set_down>
    netif_set_link_down(netif);
 8008e28:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8008e2a:	f004 f9e5 	bl	800d1f8 <netif_set_link_down>
 8008e2e:	e056      	b.n	8008ede <ethernet_link_thread+0xfa>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8008e30:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008e32:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008e36:	f003 0304 	and.w	r3, r3, #4
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d14f      	bne.n	8008ede <ethernet_link_thread+0xfa>
 8008e3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e40:	2b01      	cmp	r3, #1
 8008e42:	dd4c      	ble.n	8008ede <ethernet_link_thread+0xfa>
 8008e44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e46:	3b02      	subs	r3, #2
 8008e48:	2b03      	cmp	r3, #3
 8008e4a:	d82b      	bhi.n	8008ea4 <ethernet_link_thread+0xc0>
 8008e4c:	a201      	add	r2, pc, #4	; (adr r2, 8008e54 <ethernet_link_thread+0x70>)
 8008e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e52:	bf00      	nop
 8008e54:	08008e65 	.word	0x08008e65
 8008e58:	08008e77 	.word	0x08008e77
 8008e5c:	08008e87 	.word	0x08008e87
 8008e60:	08008e97 	.word	0x08008e97
  {
    switch (PHYLinkState)
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8008e64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008e68:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8008e6a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008e6e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8008e70:	2301      	movs	r3, #1
 8008e72:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8008e74:	e017      	b.n	8008ea6 <ethernet_link_thread+0xc2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8008e76:	2300      	movs	r3, #0
 8008e78:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8008e7a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008e7e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8008e80:	2301      	movs	r3, #1
 8008e82:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8008e84:	e00f      	b.n	8008ea6 <ethernet_link_thread+0xc2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8008e86:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008e8a:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8008e90:	2301      	movs	r3, #1
 8008e92:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8008e94:	e007      	b.n	8008ea6 <ethernet_link_thread+0xc2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8008e96:	2300      	movs	r3, #0
 8008e98:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8008e9e:	2301      	movs	r3, #1
 8008ea0:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8008ea2:	e000      	b.n	8008ea6 <ethernet_link_thread+0xc2>
    default:
      break;
 8008ea4:	bf00      	nop
    }

    if(linkchanged)
 8008ea6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d018      	beq.n	8008ede <ethernet_link_thread+0xfa>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8008eac:	f107 0308 	add.w	r3, r7, #8
 8008eb0:	4619      	mov	r1, r3
 8008eb2:	480e      	ldr	r0, [pc, #56]	; (8008eec <ethernet_link_thread+0x108>)
 8008eb4:	f7f9 fdf4 	bl	8002aa0 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8008eb8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008eba:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8008ebc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008ebe:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8008ec0:	f107 0308 	add.w	r3, r7, #8
 8008ec4:	4619      	mov	r1, r3
 8008ec6:	4809      	ldr	r0, [pc, #36]	; (8008eec <ethernet_link_thread+0x108>)
 8008ec8:	f7f9 ffbe 	bl	8002e48 <HAL_ETH_SetMACConfig>

      HAL_ETH_Start_IT(&heth);
 8008ecc:	4807      	ldr	r0, [pc, #28]	; (8008eec <ethernet_link_thread+0x108>)
 8008ece:	f7f9 f856 	bl	8001f7e <HAL_ETH_Start_IT>
      netif_set_up(netif);
 8008ed2:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8008ed4:	f004 f8be 	bl	800d054 <netif_set_up>
      netif_set_link_up(netif);
 8008ed8:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8008eda:	f004 f959 	bl	800d190 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8008ede:	2064      	movs	r0, #100	; 0x64
 8008ee0:	f000 f893 	bl	800900a <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8008ee4:	e78a      	b.n	8008dfc <ethernet_link_thread+0x18>
 8008ee6:	bf00      	nop
 8008ee8:	24004808 	.word	0x24004808
 8008eec:	24004828 	.word	0x24004828

08008ef0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8008ef0:	b480      	push	{r7}
 8008ef2:	b085      	sub	sp, #20
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008efa:	2300      	movs	r3, #0
 8008efc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8008efe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008f02:	2b84      	cmp	r3, #132	; 0x84
 8008f04:	d005      	beq.n	8008f12 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8008f06:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	4413      	add	r3, r2
 8008f0e:	3303      	adds	r3, #3
 8008f10:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8008f12:	68fb      	ldr	r3, [r7, #12]
}
 8008f14:	4618      	mov	r0, r3
 8008f16:	3714      	adds	r7, #20
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1e:	4770      	bx	lr

08008f20 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8008f20:	b480      	push	{r7}
 8008f22:	b083      	sub	sp, #12
 8008f24:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008f26:	f3ef 8305 	mrs	r3, IPSR
 8008f2a:	607b      	str	r3, [r7, #4]
  return(result);
 8008f2c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	bf14      	ite	ne
 8008f32:	2301      	movne	r3, #1
 8008f34:	2300      	moveq	r3, #0
 8008f36:	b2db      	uxtb	r3, r3
}
 8008f38:	4618      	mov	r0, r3
 8008f3a:	370c      	adds	r7, #12
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f42:	4770      	bx	lr

08008f44 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8008f48:	f001 fc5e 	bl	800a808 <vTaskStartScheduler>
  
  return osOK;
 8008f4c:	2300      	movs	r3, #0
}
 8008f4e:	4618      	mov	r0, r3
 8008f50:	bd80      	pop	{r7, pc}

08008f52 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8008f52:	b580      	push	{r7, lr}
 8008f54:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8008f56:	f7ff ffe3 	bl	8008f20 <inHandlerMode>
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d003      	beq.n	8008f68 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8008f60:	f001 fd6c 	bl	800aa3c <xTaskGetTickCountFromISR>
 8008f64:	4603      	mov	r3, r0
 8008f66:	e002      	b.n	8008f6e <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8008f68:	f001 fd58 	bl	800aa1c <xTaskGetTickCount>
 8008f6c:	4603      	mov	r3, r0
  }
}
 8008f6e:	4618      	mov	r0, r3
 8008f70:	bd80      	pop	{r7, pc}

08008f72 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008f72:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f74:	b089      	sub	sp, #36	; 0x24
 8008f76:	af04      	add	r7, sp, #16
 8008f78:	6078      	str	r0, [r7, #4]
 8008f7a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	695b      	ldr	r3, [r3, #20]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d020      	beq.n	8008fc6 <osThreadCreate+0x54>
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	699b      	ldr	r3, [r3, #24]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d01c      	beq.n	8008fc6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	685c      	ldr	r4, [r3, #4]
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681d      	ldr	r5, [r3, #0]
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	691e      	ldr	r6, [r3, #16]
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	f7ff ffa6 	bl	8008ef0 <makeFreeRtosPriority>
 8008fa4:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	695b      	ldr	r3, [r3, #20]
 8008faa:	687a      	ldr	r2, [r7, #4]
 8008fac:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008fae:	9202      	str	r2, [sp, #8]
 8008fb0:	9301      	str	r3, [sp, #4]
 8008fb2:	9100      	str	r1, [sp, #0]
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	4632      	mov	r2, r6
 8008fb8:	4629      	mov	r1, r5
 8008fba:	4620      	mov	r0, r4
 8008fbc:	f001 fa5c 	bl	800a478 <xTaskCreateStatic>
 8008fc0:	4603      	mov	r3, r0
 8008fc2:	60fb      	str	r3, [r7, #12]
 8008fc4:	e01c      	b.n	8009000 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	685c      	ldr	r4, [r3, #4]
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008fd2:	b29e      	uxth	r6, r3
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008fda:	4618      	mov	r0, r3
 8008fdc:	f7ff ff88 	bl	8008ef0 <makeFreeRtosPriority>
 8008fe0:	4602      	mov	r2, r0
 8008fe2:	f107 030c 	add.w	r3, r7, #12
 8008fe6:	9301      	str	r3, [sp, #4]
 8008fe8:	9200      	str	r2, [sp, #0]
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	4632      	mov	r2, r6
 8008fee:	4629      	mov	r1, r5
 8008ff0:	4620      	mov	r0, r4
 8008ff2:	f001 fa9e 	bl	800a532 <xTaskCreate>
 8008ff6:	4603      	mov	r3, r0
 8008ff8:	2b01      	cmp	r3, #1
 8008ffa:	d001      	beq.n	8009000 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	e000      	b.n	8009002 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8009000:	68fb      	ldr	r3, [r7, #12]
}
 8009002:	4618      	mov	r0, r3
 8009004:	3714      	adds	r7, #20
 8009006:	46bd      	mov	sp, r7
 8009008:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800900a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800900a:	b580      	push	{r7, lr}
 800900c:	b084      	sub	sp, #16
 800900e:	af00      	add	r7, sp, #0
 8009010:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d001      	beq.n	8009020 <osDelay+0x16>
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	e000      	b.n	8009022 <osDelay+0x18>
 8009020:	2301      	movs	r3, #1
 8009022:	4618      	mov	r0, r3
 8009024:	f001 fbbc 	bl	800a7a0 <vTaskDelay>
  
  return osOK;
 8009028:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800902a:	4618      	mov	r0, r3
 800902c:	3710      	adds	r7, #16
 800902e:	46bd      	mov	sp, r7
 8009030:	bd80      	pop	{r7, pc}

08009032 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8009032:	b580      	push	{r7, lr}
 8009034:	b082      	sub	sp, #8
 8009036:	af00      	add	r7, sp, #0
 8009038:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	685b      	ldr	r3, [r3, #4]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d007      	beq.n	8009052 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	685b      	ldr	r3, [r3, #4]
 8009046:	4619      	mov	r1, r3
 8009048:	2001      	movs	r0, #1
 800904a:	f000 fc40 	bl	80098ce <xQueueCreateMutexStatic>
 800904e:	4603      	mov	r3, r0
 8009050:	e003      	b.n	800905a <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8009052:	2001      	movs	r0, #1
 8009054:	f000 fc23 	bl	800989e <xQueueCreateMutex>
 8009058:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800905a:	4618      	mov	r0, r3
 800905c:	3708      	adds	r7, #8
 800905e:	46bd      	mov	sp, r7
 8009060:	bd80      	pop	{r7, pc}
	...

08009064 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b084      	sub	sp, #16
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
 800906c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800906e:	2300      	movs	r3, #0
 8009070:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d101      	bne.n	800907c <osMutexWait+0x18>
    return osErrorParameter;
 8009078:	2380      	movs	r3, #128	; 0x80
 800907a:	e03a      	b.n	80090f2 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800907c:	2300      	movs	r3, #0
 800907e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009086:	d103      	bne.n	8009090 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8009088:	f04f 33ff 	mov.w	r3, #4294967295
 800908c:	60fb      	str	r3, [r7, #12]
 800908e:	e009      	b.n	80090a4 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d006      	beq.n	80090a4 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d101      	bne.n	80090a4 <osMutexWait+0x40>
      ticks = 1;
 80090a0:	2301      	movs	r3, #1
 80090a2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80090a4:	f7ff ff3c 	bl	8008f20 <inHandlerMode>
 80090a8:	4603      	mov	r3, r0
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d017      	beq.n	80090de <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80090ae:	f107 0308 	add.w	r3, r7, #8
 80090b2:	461a      	mov	r2, r3
 80090b4:	2100      	movs	r1, #0
 80090b6:	6878      	ldr	r0, [r7, #4]
 80090b8:	f001 f836 	bl	800a128 <xQueueReceiveFromISR>
 80090bc:	4603      	mov	r3, r0
 80090be:	2b01      	cmp	r3, #1
 80090c0:	d001      	beq.n	80090c6 <osMutexWait+0x62>
      return osErrorOS;
 80090c2:	23ff      	movs	r3, #255	; 0xff
 80090c4:	e015      	b.n	80090f2 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80090c6:	68bb      	ldr	r3, [r7, #8]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d011      	beq.n	80090f0 <osMutexWait+0x8c>
 80090cc:	4b0b      	ldr	r3, [pc, #44]	; (80090fc <osMutexWait+0x98>)
 80090ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090d2:	601a      	str	r2, [r3, #0]
 80090d4:	f3bf 8f4f 	dsb	sy
 80090d8:	f3bf 8f6f 	isb	sy
 80090dc:	e008      	b.n	80090f0 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 80090de:	68f9      	ldr	r1, [r7, #12]
 80090e0:	6878      	ldr	r0, [r7, #4]
 80090e2:	f000 ff15 	bl	8009f10 <xQueueSemaphoreTake>
 80090e6:	4603      	mov	r3, r0
 80090e8:	2b01      	cmp	r3, #1
 80090ea:	d001      	beq.n	80090f0 <osMutexWait+0x8c>
    return osErrorOS;
 80090ec:	23ff      	movs	r3, #255	; 0xff
 80090ee:	e000      	b.n	80090f2 <osMutexWait+0x8e>
  }
  
  return osOK;
 80090f0:	2300      	movs	r3, #0
}
 80090f2:	4618      	mov	r0, r3
 80090f4:	3710      	adds	r7, #16
 80090f6:	46bd      	mov	sp, r7
 80090f8:	bd80      	pop	{r7, pc}
 80090fa:	bf00      	nop
 80090fc:	e000ed04 	.word	0xe000ed04

08009100 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b084      	sub	sp, #16
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8009108:	2300      	movs	r3, #0
 800910a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800910c:	2300      	movs	r3, #0
 800910e:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8009110:	f7ff ff06 	bl	8008f20 <inHandlerMode>
 8009114:	4603      	mov	r3, r0
 8009116:	2b00      	cmp	r3, #0
 8009118:	d016      	beq.n	8009148 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800911a:	f107 0308 	add.w	r3, r7, #8
 800911e:	4619      	mov	r1, r3
 8009120:	6878      	ldr	r0, [r7, #4]
 8009122:	f000 fd88 	bl	8009c36 <xQueueGiveFromISR>
 8009126:	4603      	mov	r3, r0
 8009128:	2b01      	cmp	r3, #1
 800912a:	d001      	beq.n	8009130 <osMutexRelease+0x30>
      return osErrorOS;
 800912c:	23ff      	movs	r3, #255	; 0xff
 800912e:	e017      	b.n	8009160 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009130:	68bb      	ldr	r3, [r7, #8]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d013      	beq.n	800915e <osMutexRelease+0x5e>
 8009136:	4b0c      	ldr	r3, [pc, #48]	; (8009168 <osMutexRelease+0x68>)
 8009138:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800913c:	601a      	str	r2, [r3, #0]
 800913e:	f3bf 8f4f 	dsb	sy
 8009142:	f3bf 8f6f 	isb	sy
 8009146:	e00a      	b.n	800915e <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8009148:	2300      	movs	r3, #0
 800914a:	2200      	movs	r2, #0
 800914c:	2100      	movs	r1, #0
 800914e:	6878      	ldr	r0, [r7, #4]
 8009150:	f000 fbd8 	bl	8009904 <xQueueGenericSend>
 8009154:	4603      	mov	r3, r0
 8009156:	2b01      	cmp	r3, #1
 8009158:	d001      	beq.n	800915e <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800915a:	23ff      	movs	r3, #255	; 0xff
 800915c:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800915e:	68fb      	ldr	r3, [r7, #12]
}
 8009160:	4618      	mov	r0, r3
 8009162:	3710      	adds	r7, #16
 8009164:	46bd      	mov	sp, r7
 8009166:	bd80      	pop	{r7, pc}
 8009168:	e000ed04 	.word	0xe000ed04

0800916c <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800916c:	b580      	push	{r7, lr}
 800916e:	b086      	sub	sp, #24
 8009170:	af02      	add	r7, sp, #8
 8009172:	6078      	str	r0, [r7, #4]
 8009174:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	685b      	ldr	r3, [r3, #4]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d00f      	beq.n	800919e <osSemaphoreCreate+0x32>
    if (count == 1) {
 800917e:	683b      	ldr	r3, [r7, #0]
 8009180:	2b01      	cmp	r3, #1
 8009182:	d10a      	bne.n	800919a <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	685b      	ldr	r3, [r3, #4]
 8009188:	2203      	movs	r2, #3
 800918a:	9200      	str	r2, [sp, #0]
 800918c:	2200      	movs	r2, #0
 800918e:	2100      	movs	r1, #0
 8009190:	2001      	movs	r0, #1
 8009192:	f000 fa99 	bl	80096c8 <xQueueGenericCreateStatic>
 8009196:	4603      	mov	r3, r0
 8009198:	e016      	b.n	80091c8 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800919a:	2300      	movs	r3, #0
 800919c:	e014      	b.n	80091c8 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	2b01      	cmp	r3, #1
 80091a2:	d110      	bne.n	80091c6 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 80091a4:	2203      	movs	r2, #3
 80091a6:	2100      	movs	r1, #0
 80091a8:	2001      	movs	r0, #1
 80091aa:	f000 fb05 	bl	80097b8 <xQueueGenericCreate>
 80091ae:	60f8      	str	r0, [r7, #12]
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d005      	beq.n	80091c2 <osSemaphoreCreate+0x56>
 80091b6:	2300      	movs	r3, #0
 80091b8:	2200      	movs	r2, #0
 80091ba:	2100      	movs	r1, #0
 80091bc:	68f8      	ldr	r0, [r7, #12]
 80091be:	f000 fba1 	bl	8009904 <xQueueGenericSend>
      return sema;
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	e000      	b.n	80091c8 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 80091c6:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 80091c8:	4618      	mov	r0, r3
 80091ca:	3710      	adds	r7, #16
 80091cc:	46bd      	mov	sp, r7
 80091ce:	bd80      	pop	{r7, pc}

080091d0 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b084      	sub	sp, #16
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
 80091d8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80091da:	2300      	movs	r3, #0
 80091dc:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d101      	bne.n	80091e8 <osSemaphoreWait+0x18>
    return osErrorParameter;
 80091e4:	2380      	movs	r3, #128	; 0x80
 80091e6:	e03a      	b.n	800925e <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 80091e8:	2300      	movs	r3, #0
 80091ea:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091f2:	d103      	bne.n	80091fc <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80091f4:	f04f 33ff 	mov.w	r3, #4294967295
 80091f8:	60fb      	str	r3, [r7, #12]
 80091fa:	e009      	b.n	8009210 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d006      	beq.n	8009210 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d101      	bne.n	8009210 <osSemaphoreWait+0x40>
      ticks = 1;
 800920c:	2301      	movs	r3, #1
 800920e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8009210:	f7ff fe86 	bl	8008f20 <inHandlerMode>
 8009214:	4603      	mov	r3, r0
 8009216:	2b00      	cmp	r3, #0
 8009218:	d017      	beq.n	800924a <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800921a:	f107 0308 	add.w	r3, r7, #8
 800921e:	461a      	mov	r2, r3
 8009220:	2100      	movs	r1, #0
 8009222:	6878      	ldr	r0, [r7, #4]
 8009224:	f000 ff80 	bl	800a128 <xQueueReceiveFromISR>
 8009228:	4603      	mov	r3, r0
 800922a:	2b01      	cmp	r3, #1
 800922c:	d001      	beq.n	8009232 <osSemaphoreWait+0x62>
      return osErrorOS;
 800922e:	23ff      	movs	r3, #255	; 0xff
 8009230:	e015      	b.n	800925e <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8009232:	68bb      	ldr	r3, [r7, #8]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d011      	beq.n	800925c <osSemaphoreWait+0x8c>
 8009238:	4b0b      	ldr	r3, [pc, #44]	; (8009268 <osSemaphoreWait+0x98>)
 800923a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800923e:	601a      	str	r2, [r3, #0]
 8009240:	f3bf 8f4f 	dsb	sy
 8009244:	f3bf 8f6f 	isb	sy
 8009248:	e008      	b.n	800925c <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800924a:	68f9      	ldr	r1, [r7, #12]
 800924c:	6878      	ldr	r0, [r7, #4]
 800924e:	f000 fe5f 	bl	8009f10 <xQueueSemaphoreTake>
 8009252:	4603      	mov	r3, r0
 8009254:	2b01      	cmp	r3, #1
 8009256:	d001      	beq.n	800925c <osSemaphoreWait+0x8c>
    return osErrorOS;
 8009258:	23ff      	movs	r3, #255	; 0xff
 800925a:	e000      	b.n	800925e <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800925c:	2300      	movs	r3, #0
}
 800925e:	4618      	mov	r0, r3
 8009260:	3710      	adds	r7, #16
 8009262:	46bd      	mov	sp, r7
 8009264:	bd80      	pop	{r7, pc}
 8009266:	bf00      	nop
 8009268:	e000ed04 	.word	0xe000ed04

0800926c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b084      	sub	sp, #16
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8009274:	2300      	movs	r3, #0
 8009276:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8009278:	2300      	movs	r3, #0
 800927a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800927c:	f7ff fe50 	bl	8008f20 <inHandlerMode>
 8009280:	4603      	mov	r3, r0
 8009282:	2b00      	cmp	r3, #0
 8009284:	d016      	beq.n	80092b4 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8009286:	f107 0308 	add.w	r3, r7, #8
 800928a:	4619      	mov	r1, r3
 800928c:	6878      	ldr	r0, [r7, #4]
 800928e:	f000 fcd2 	bl	8009c36 <xQueueGiveFromISR>
 8009292:	4603      	mov	r3, r0
 8009294:	2b01      	cmp	r3, #1
 8009296:	d001      	beq.n	800929c <osSemaphoreRelease+0x30>
      return osErrorOS;
 8009298:	23ff      	movs	r3, #255	; 0xff
 800929a:	e017      	b.n	80092cc <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800929c:	68bb      	ldr	r3, [r7, #8]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d013      	beq.n	80092ca <osSemaphoreRelease+0x5e>
 80092a2:	4b0c      	ldr	r3, [pc, #48]	; (80092d4 <osSemaphoreRelease+0x68>)
 80092a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092a8:	601a      	str	r2, [r3, #0]
 80092aa:	f3bf 8f4f 	dsb	sy
 80092ae:	f3bf 8f6f 	isb	sy
 80092b2:	e00a      	b.n	80092ca <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80092b4:	2300      	movs	r3, #0
 80092b6:	2200      	movs	r2, #0
 80092b8:	2100      	movs	r1, #0
 80092ba:	6878      	ldr	r0, [r7, #4]
 80092bc:	f000 fb22 	bl	8009904 <xQueueGenericSend>
 80092c0:	4603      	mov	r3, r0
 80092c2:	2b01      	cmp	r3, #1
 80092c4:	d001      	beq.n	80092ca <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80092c6:	23ff      	movs	r3, #255	; 0xff
 80092c8:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80092ca:	68fb      	ldr	r3, [r7, #12]
}
 80092cc:	4618      	mov	r0, r3
 80092ce:	3710      	adds	r7, #16
 80092d0:	46bd      	mov	sp, r7
 80092d2:	bd80      	pop	{r7, pc}
 80092d4:	e000ed04 	.word	0xe000ed04

080092d8 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80092d8:	b590      	push	{r4, r7, lr}
 80092da:	b085      	sub	sp, #20
 80092dc:	af02      	add	r7, sp, #8
 80092de:	6078      	str	r0, [r7, #4]
 80092e0:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	689b      	ldr	r3, [r3, #8]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d011      	beq.n	800930e <osMessageCreate+0x36>
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	68db      	ldr	r3, [r3, #12]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d00d      	beq.n	800930e <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	6818      	ldr	r0, [r3, #0]
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	6859      	ldr	r1, [r3, #4]
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	689a      	ldr	r2, [r3, #8]
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	68db      	ldr	r3, [r3, #12]
 8009302:	2400      	movs	r4, #0
 8009304:	9400      	str	r4, [sp, #0]
 8009306:	f000 f9df 	bl	80096c8 <xQueueGenericCreateStatic>
 800930a:	4603      	mov	r3, r0
 800930c:	e008      	b.n	8009320 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	6818      	ldr	r0, [r3, #0]
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	685b      	ldr	r3, [r3, #4]
 8009316:	2200      	movs	r2, #0
 8009318:	4619      	mov	r1, r3
 800931a:	f000 fa4d 	bl	80097b8 <xQueueGenericCreate>
 800931e:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8009320:	4618      	mov	r0, r3
 8009322:	370c      	adds	r7, #12
 8009324:	46bd      	mov	sp, r7
 8009326:	bd90      	pop	{r4, r7, pc}

08009328 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b086      	sub	sp, #24
 800932c:	af00      	add	r7, sp, #0
 800932e:	60f8      	str	r0, [r7, #12]
 8009330:	60b9      	str	r1, [r7, #8]
 8009332:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8009334:	2300      	movs	r3, #0
 8009336:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800933c:	697b      	ldr	r3, [r7, #20]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d101      	bne.n	8009346 <osMessagePut+0x1e>
    ticks = 1;
 8009342:	2301      	movs	r3, #1
 8009344:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8009346:	f7ff fdeb 	bl	8008f20 <inHandlerMode>
 800934a:	4603      	mov	r3, r0
 800934c:	2b00      	cmp	r3, #0
 800934e:	d018      	beq.n	8009382 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8009350:	f107 0210 	add.w	r2, r7, #16
 8009354:	f107 0108 	add.w	r1, r7, #8
 8009358:	2300      	movs	r3, #0
 800935a:	68f8      	ldr	r0, [r7, #12]
 800935c:	f000 fbd0 	bl	8009b00 <xQueueGenericSendFromISR>
 8009360:	4603      	mov	r3, r0
 8009362:	2b01      	cmp	r3, #1
 8009364:	d001      	beq.n	800936a <osMessagePut+0x42>
      return osErrorOS;
 8009366:	23ff      	movs	r3, #255	; 0xff
 8009368:	e018      	b.n	800939c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800936a:	693b      	ldr	r3, [r7, #16]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d014      	beq.n	800939a <osMessagePut+0x72>
 8009370:	4b0c      	ldr	r3, [pc, #48]	; (80093a4 <osMessagePut+0x7c>)
 8009372:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009376:	601a      	str	r2, [r3, #0]
 8009378:	f3bf 8f4f 	dsb	sy
 800937c:	f3bf 8f6f 	isb	sy
 8009380:	e00b      	b.n	800939a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8009382:	f107 0108 	add.w	r1, r7, #8
 8009386:	2300      	movs	r3, #0
 8009388:	697a      	ldr	r2, [r7, #20]
 800938a:	68f8      	ldr	r0, [r7, #12]
 800938c:	f000 faba 	bl	8009904 <xQueueGenericSend>
 8009390:	4603      	mov	r3, r0
 8009392:	2b01      	cmp	r3, #1
 8009394:	d001      	beq.n	800939a <osMessagePut+0x72>
      return osErrorOS;
 8009396:	23ff      	movs	r3, #255	; 0xff
 8009398:	e000      	b.n	800939c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800939a:	2300      	movs	r3, #0
}
 800939c:	4618      	mov	r0, r3
 800939e:	3718      	adds	r7, #24
 80093a0:	46bd      	mov	sp, r7
 80093a2:	bd80      	pop	{r7, pc}
 80093a4:	e000ed04 	.word	0xe000ed04

080093a8 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80093a8:	b590      	push	{r4, r7, lr}
 80093aa:	b08b      	sub	sp, #44	; 0x2c
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	60f8      	str	r0, [r7, #12]
 80093b0:	60b9      	str	r1, [r7, #8]
 80093b2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80093b4:	68bb      	ldr	r3, [r7, #8]
 80093b6:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80093b8:	2300      	movs	r3, #0
 80093ba:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80093bc:	68bb      	ldr	r3, [r7, #8]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d10a      	bne.n	80093d8 <osMessageGet+0x30>
    event.status = osErrorParameter;
 80093c2:	2380      	movs	r3, #128	; 0x80
 80093c4:	617b      	str	r3, [r7, #20]
    return event;
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	461c      	mov	r4, r3
 80093ca:	f107 0314 	add.w	r3, r7, #20
 80093ce:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80093d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80093d6:	e054      	b.n	8009482 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80093d8:	2300      	movs	r3, #0
 80093da:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80093dc:	2300      	movs	r3, #0
 80093de:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093e6:	d103      	bne.n	80093f0 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80093e8:	f04f 33ff 	mov.w	r3, #4294967295
 80093ec:	627b      	str	r3, [r7, #36]	; 0x24
 80093ee:	e009      	b.n	8009404 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d006      	beq.n	8009404 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80093fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d101      	bne.n	8009404 <osMessageGet+0x5c>
      ticks = 1;
 8009400:	2301      	movs	r3, #1
 8009402:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8009404:	f7ff fd8c 	bl	8008f20 <inHandlerMode>
 8009408:	4603      	mov	r3, r0
 800940a:	2b00      	cmp	r3, #0
 800940c:	d01c      	beq.n	8009448 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800940e:	f107 0220 	add.w	r2, r7, #32
 8009412:	f107 0314 	add.w	r3, r7, #20
 8009416:	3304      	adds	r3, #4
 8009418:	4619      	mov	r1, r3
 800941a:	68b8      	ldr	r0, [r7, #8]
 800941c:	f000 fe84 	bl	800a128 <xQueueReceiveFromISR>
 8009420:	4603      	mov	r3, r0
 8009422:	2b01      	cmp	r3, #1
 8009424:	d102      	bne.n	800942c <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8009426:	2310      	movs	r3, #16
 8009428:	617b      	str	r3, [r7, #20]
 800942a:	e001      	b.n	8009430 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800942c:	2300      	movs	r3, #0
 800942e:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009430:	6a3b      	ldr	r3, [r7, #32]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d01d      	beq.n	8009472 <osMessageGet+0xca>
 8009436:	4b15      	ldr	r3, [pc, #84]	; (800948c <osMessageGet+0xe4>)
 8009438:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800943c:	601a      	str	r2, [r3, #0]
 800943e:	f3bf 8f4f 	dsb	sy
 8009442:	f3bf 8f6f 	isb	sy
 8009446:	e014      	b.n	8009472 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8009448:	f107 0314 	add.w	r3, r7, #20
 800944c:	3304      	adds	r3, #4
 800944e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009450:	4619      	mov	r1, r3
 8009452:	68b8      	ldr	r0, [r7, #8]
 8009454:	f000 fc7c 	bl	8009d50 <xQueueReceive>
 8009458:	4603      	mov	r3, r0
 800945a:	2b01      	cmp	r3, #1
 800945c:	d102      	bne.n	8009464 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800945e:	2310      	movs	r3, #16
 8009460:	617b      	str	r3, [r7, #20]
 8009462:	e006      	b.n	8009472 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8009464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009466:	2b00      	cmp	r3, #0
 8009468:	d101      	bne.n	800946e <osMessageGet+0xc6>
 800946a:	2300      	movs	r3, #0
 800946c:	e000      	b.n	8009470 <osMessageGet+0xc8>
 800946e:	2340      	movs	r3, #64	; 0x40
 8009470:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	461c      	mov	r4, r3
 8009476:	f107 0314 	add.w	r3, r7, #20
 800947a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800947e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8009482:	68f8      	ldr	r0, [r7, #12]
 8009484:	372c      	adds	r7, #44	; 0x2c
 8009486:	46bd      	mov	sp, r7
 8009488:	bd90      	pop	{r4, r7, pc}
 800948a:	bf00      	nop
 800948c:	e000ed04 	.word	0xe000ed04

08009490 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009490:	b480      	push	{r7}
 8009492:	b083      	sub	sp, #12
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	f103 0208 	add.w	r2, r3, #8
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	f04f 32ff 	mov.w	r2, #4294967295
 80094a8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	f103 0208 	add.w	r2, r3, #8
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	f103 0208 	add.w	r2, r3, #8
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	2200      	movs	r2, #0
 80094c2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80094c4:	bf00      	nop
 80094c6:	370c      	adds	r7, #12
 80094c8:	46bd      	mov	sp, r7
 80094ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ce:	4770      	bx	lr

080094d0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80094d0:	b480      	push	{r7}
 80094d2:	b083      	sub	sp, #12
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2200      	movs	r2, #0
 80094dc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80094de:	bf00      	nop
 80094e0:	370c      	adds	r7, #12
 80094e2:	46bd      	mov	sp, r7
 80094e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e8:	4770      	bx	lr

080094ea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80094ea:	b480      	push	{r7}
 80094ec:	b085      	sub	sp, #20
 80094ee:	af00      	add	r7, sp, #0
 80094f0:	6078      	str	r0, [r7, #4]
 80094f2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	685b      	ldr	r3, [r3, #4]
 80094f8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80094fa:	683b      	ldr	r3, [r7, #0]
 80094fc:	68fa      	ldr	r2, [r7, #12]
 80094fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	689a      	ldr	r2, [r3, #8]
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	689b      	ldr	r3, [r3, #8]
 800950c:	683a      	ldr	r2, [r7, #0]
 800950e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	683a      	ldr	r2, [r7, #0]
 8009514:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009516:	683b      	ldr	r3, [r7, #0]
 8009518:	687a      	ldr	r2, [r7, #4]
 800951a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	1c5a      	adds	r2, r3, #1
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	601a      	str	r2, [r3, #0]
}
 8009526:	bf00      	nop
 8009528:	3714      	adds	r7, #20
 800952a:	46bd      	mov	sp, r7
 800952c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009530:	4770      	bx	lr

08009532 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009532:	b480      	push	{r7}
 8009534:	b085      	sub	sp, #20
 8009536:	af00      	add	r7, sp, #0
 8009538:	6078      	str	r0, [r7, #4]
 800953a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800953c:	683b      	ldr	r3, [r7, #0]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009542:	68bb      	ldr	r3, [r7, #8]
 8009544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009548:	d103      	bne.n	8009552 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	691b      	ldr	r3, [r3, #16]
 800954e:	60fb      	str	r3, [r7, #12]
 8009550:	e00c      	b.n	800956c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	3308      	adds	r3, #8
 8009556:	60fb      	str	r3, [r7, #12]
 8009558:	e002      	b.n	8009560 <vListInsert+0x2e>
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	685b      	ldr	r3, [r3, #4]
 800955e:	60fb      	str	r3, [r7, #12]
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	685b      	ldr	r3, [r3, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	68ba      	ldr	r2, [r7, #8]
 8009568:	429a      	cmp	r2, r3
 800956a:	d2f6      	bcs.n	800955a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	685a      	ldr	r2, [r3, #4]
 8009570:	683b      	ldr	r3, [r7, #0]
 8009572:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	685b      	ldr	r3, [r3, #4]
 8009578:	683a      	ldr	r2, [r7, #0]
 800957a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	68fa      	ldr	r2, [r7, #12]
 8009580:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	683a      	ldr	r2, [r7, #0]
 8009586:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009588:	683b      	ldr	r3, [r7, #0]
 800958a:	687a      	ldr	r2, [r7, #4]
 800958c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	1c5a      	adds	r2, r3, #1
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	601a      	str	r2, [r3, #0]
}
 8009598:	bf00      	nop
 800959a:	3714      	adds	r7, #20
 800959c:	46bd      	mov	sp, r7
 800959e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a2:	4770      	bx	lr

080095a4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80095a4:	b480      	push	{r7}
 80095a6:	b085      	sub	sp, #20
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	691b      	ldr	r3, [r3, #16]
 80095b0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	685b      	ldr	r3, [r3, #4]
 80095b6:	687a      	ldr	r2, [r7, #4]
 80095b8:	6892      	ldr	r2, [r2, #8]
 80095ba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	689b      	ldr	r3, [r3, #8]
 80095c0:	687a      	ldr	r2, [r7, #4]
 80095c2:	6852      	ldr	r2, [r2, #4]
 80095c4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	685b      	ldr	r3, [r3, #4]
 80095ca:	687a      	ldr	r2, [r7, #4]
 80095cc:	429a      	cmp	r2, r3
 80095ce:	d103      	bne.n	80095d8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	689a      	ldr	r2, [r3, #8]
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2200      	movs	r2, #0
 80095dc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	1e5a      	subs	r2, r3, #1
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	681b      	ldr	r3, [r3, #0]
}
 80095ec:	4618      	mov	r0, r3
 80095ee:	3714      	adds	r7, #20
 80095f0:	46bd      	mov	sp, r7
 80095f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f6:	4770      	bx	lr

080095f8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b084      	sub	sp, #16
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
 8009600:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d10a      	bne.n	8009622 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800960c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009610:	f383 8811 	msr	BASEPRI, r3
 8009614:	f3bf 8f6f 	isb	sy
 8009618:	f3bf 8f4f 	dsb	sy
 800961c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800961e:	bf00      	nop
 8009620:	e7fe      	b.n	8009620 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009622:	f002 f85f 	bl	800b6e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	681a      	ldr	r2, [r3, #0]
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800962e:	68f9      	ldr	r1, [r7, #12]
 8009630:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009632:	fb01 f303 	mul.w	r3, r1, r3
 8009636:	441a      	add	r2, r3
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	2200      	movs	r2, #0
 8009640:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	681a      	ldr	r2, [r3, #0]
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	681a      	ldr	r2, [r3, #0]
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009652:	3b01      	subs	r3, #1
 8009654:	68f9      	ldr	r1, [r7, #12]
 8009656:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009658:	fb01 f303 	mul.w	r3, r1, r3
 800965c:	441a      	add	r2, r3
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	22ff      	movs	r2, #255	; 0xff
 8009666:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	22ff      	movs	r2, #255	; 0xff
 800966e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d114      	bne.n	80096a2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	691b      	ldr	r3, [r3, #16]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d01a      	beq.n	80096b6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	3310      	adds	r3, #16
 8009684:	4618      	mov	r0, r3
 8009686:	f001 fb23 	bl	800acd0 <xTaskRemoveFromEventList>
 800968a:	4603      	mov	r3, r0
 800968c:	2b00      	cmp	r3, #0
 800968e:	d012      	beq.n	80096b6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009690:	4b0c      	ldr	r3, [pc, #48]	; (80096c4 <xQueueGenericReset+0xcc>)
 8009692:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009696:	601a      	str	r2, [r3, #0]
 8009698:	f3bf 8f4f 	dsb	sy
 800969c:	f3bf 8f6f 	isb	sy
 80096a0:	e009      	b.n	80096b6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	3310      	adds	r3, #16
 80096a6:	4618      	mov	r0, r3
 80096a8:	f7ff fef2 	bl	8009490 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	3324      	adds	r3, #36	; 0x24
 80096b0:	4618      	mov	r0, r3
 80096b2:	f7ff feed 	bl	8009490 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80096b6:	f002 f845 	bl	800b744 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80096ba:	2301      	movs	r3, #1
}
 80096bc:	4618      	mov	r0, r3
 80096be:	3710      	adds	r7, #16
 80096c0:	46bd      	mov	sp, r7
 80096c2:	bd80      	pop	{r7, pc}
 80096c4:	e000ed04 	.word	0xe000ed04

080096c8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b08e      	sub	sp, #56	; 0x38
 80096cc:	af02      	add	r7, sp, #8
 80096ce:	60f8      	str	r0, [r7, #12]
 80096d0:	60b9      	str	r1, [r7, #8]
 80096d2:	607a      	str	r2, [r7, #4]
 80096d4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d10a      	bne.n	80096f2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80096dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096e0:	f383 8811 	msr	BASEPRI, r3
 80096e4:	f3bf 8f6f 	isb	sy
 80096e8:	f3bf 8f4f 	dsb	sy
 80096ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80096ee:	bf00      	nop
 80096f0:	e7fe      	b.n	80096f0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80096f2:	683b      	ldr	r3, [r7, #0]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d10a      	bne.n	800970e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80096f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096fc:	f383 8811 	msr	BASEPRI, r3
 8009700:	f3bf 8f6f 	isb	sy
 8009704:	f3bf 8f4f 	dsb	sy
 8009708:	627b      	str	r3, [r7, #36]	; 0x24
}
 800970a:	bf00      	nop
 800970c:	e7fe      	b.n	800970c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d002      	beq.n	800971a <xQueueGenericCreateStatic+0x52>
 8009714:	68bb      	ldr	r3, [r7, #8]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d001      	beq.n	800971e <xQueueGenericCreateStatic+0x56>
 800971a:	2301      	movs	r3, #1
 800971c:	e000      	b.n	8009720 <xQueueGenericCreateStatic+0x58>
 800971e:	2300      	movs	r3, #0
 8009720:	2b00      	cmp	r3, #0
 8009722:	d10a      	bne.n	800973a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009728:	f383 8811 	msr	BASEPRI, r3
 800972c:	f3bf 8f6f 	isb	sy
 8009730:	f3bf 8f4f 	dsb	sy
 8009734:	623b      	str	r3, [r7, #32]
}
 8009736:	bf00      	nop
 8009738:	e7fe      	b.n	8009738 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d102      	bne.n	8009746 <xQueueGenericCreateStatic+0x7e>
 8009740:	68bb      	ldr	r3, [r7, #8]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d101      	bne.n	800974a <xQueueGenericCreateStatic+0x82>
 8009746:	2301      	movs	r3, #1
 8009748:	e000      	b.n	800974c <xQueueGenericCreateStatic+0x84>
 800974a:	2300      	movs	r3, #0
 800974c:	2b00      	cmp	r3, #0
 800974e:	d10a      	bne.n	8009766 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009754:	f383 8811 	msr	BASEPRI, r3
 8009758:	f3bf 8f6f 	isb	sy
 800975c:	f3bf 8f4f 	dsb	sy
 8009760:	61fb      	str	r3, [r7, #28]
}
 8009762:	bf00      	nop
 8009764:	e7fe      	b.n	8009764 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009766:	2348      	movs	r3, #72	; 0x48
 8009768:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800976a:	697b      	ldr	r3, [r7, #20]
 800976c:	2b48      	cmp	r3, #72	; 0x48
 800976e:	d00a      	beq.n	8009786 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009774:	f383 8811 	msr	BASEPRI, r3
 8009778:	f3bf 8f6f 	isb	sy
 800977c:	f3bf 8f4f 	dsb	sy
 8009780:	61bb      	str	r3, [r7, #24]
}
 8009782:	bf00      	nop
 8009784:	e7fe      	b.n	8009784 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009786:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800978c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800978e:	2b00      	cmp	r3, #0
 8009790:	d00d      	beq.n	80097ae <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009794:	2201      	movs	r2, #1
 8009796:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800979a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800979e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097a0:	9300      	str	r3, [sp, #0]
 80097a2:	4613      	mov	r3, r2
 80097a4:	687a      	ldr	r2, [r7, #4]
 80097a6:	68b9      	ldr	r1, [r7, #8]
 80097a8:	68f8      	ldr	r0, [r7, #12]
 80097aa:	f000 f83f 	bl	800982c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80097ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80097b0:	4618      	mov	r0, r3
 80097b2:	3730      	adds	r7, #48	; 0x30
 80097b4:	46bd      	mov	sp, r7
 80097b6:	bd80      	pop	{r7, pc}

080097b8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b08a      	sub	sp, #40	; 0x28
 80097bc:	af02      	add	r7, sp, #8
 80097be:	60f8      	str	r0, [r7, #12]
 80097c0:	60b9      	str	r1, [r7, #8]
 80097c2:	4613      	mov	r3, r2
 80097c4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d10a      	bne.n	80097e2 <xQueueGenericCreate+0x2a>
	__asm volatile
 80097cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097d0:	f383 8811 	msr	BASEPRI, r3
 80097d4:	f3bf 8f6f 	isb	sy
 80097d8:	f3bf 8f4f 	dsb	sy
 80097dc:	613b      	str	r3, [r7, #16]
}
 80097de:	bf00      	nop
 80097e0:	e7fe      	b.n	80097e0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	68ba      	ldr	r2, [r7, #8]
 80097e6:	fb02 f303 	mul.w	r3, r2, r3
 80097ea:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80097ec:	69fb      	ldr	r3, [r7, #28]
 80097ee:	3348      	adds	r3, #72	; 0x48
 80097f0:	4618      	mov	r0, r3
 80097f2:	f002 f899 	bl	800b928 <pvPortMalloc>
 80097f6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80097f8:	69bb      	ldr	r3, [r7, #24]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d011      	beq.n	8009822 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80097fe:	69bb      	ldr	r3, [r7, #24]
 8009800:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009802:	697b      	ldr	r3, [r7, #20]
 8009804:	3348      	adds	r3, #72	; 0x48
 8009806:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009808:	69bb      	ldr	r3, [r7, #24]
 800980a:	2200      	movs	r2, #0
 800980c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009810:	79fa      	ldrb	r2, [r7, #7]
 8009812:	69bb      	ldr	r3, [r7, #24]
 8009814:	9300      	str	r3, [sp, #0]
 8009816:	4613      	mov	r3, r2
 8009818:	697a      	ldr	r2, [r7, #20]
 800981a:	68b9      	ldr	r1, [r7, #8]
 800981c:	68f8      	ldr	r0, [r7, #12]
 800981e:	f000 f805 	bl	800982c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009822:	69bb      	ldr	r3, [r7, #24]
	}
 8009824:	4618      	mov	r0, r3
 8009826:	3720      	adds	r7, #32
 8009828:	46bd      	mov	sp, r7
 800982a:	bd80      	pop	{r7, pc}

0800982c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800982c:	b580      	push	{r7, lr}
 800982e:	b084      	sub	sp, #16
 8009830:	af00      	add	r7, sp, #0
 8009832:	60f8      	str	r0, [r7, #12]
 8009834:	60b9      	str	r1, [r7, #8]
 8009836:	607a      	str	r2, [r7, #4]
 8009838:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800983a:	68bb      	ldr	r3, [r7, #8]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d103      	bne.n	8009848 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009840:	69bb      	ldr	r3, [r7, #24]
 8009842:	69ba      	ldr	r2, [r7, #24]
 8009844:	601a      	str	r2, [r3, #0]
 8009846:	e002      	b.n	800984e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009848:	69bb      	ldr	r3, [r7, #24]
 800984a:	687a      	ldr	r2, [r7, #4]
 800984c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800984e:	69bb      	ldr	r3, [r7, #24]
 8009850:	68fa      	ldr	r2, [r7, #12]
 8009852:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009854:	69bb      	ldr	r3, [r7, #24]
 8009856:	68ba      	ldr	r2, [r7, #8]
 8009858:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800985a:	2101      	movs	r1, #1
 800985c:	69b8      	ldr	r0, [r7, #24]
 800985e:	f7ff fecb 	bl	80095f8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009862:	bf00      	nop
 8009864:	3710      	adds	r7, #16
 8009866:	46bd      	mov	sp, r7
 8009868:	bd80      	pop	{r7, pc}

0800986a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800986a:	b580      	push	{r7, lr}
 800986c:	b082      	sub	sp, #8
 800986e:	af00      	add	r7, sp, #0
 8009870:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d00e      	beq.n	8009896 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	2200      	movs	r2, #0
 800987c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	2200      	movs	r2, #0
 8009882:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2200      	movs	r2, #0
 8009888:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800988a:	2300      	movs	r3, #0
 800988c:	2200      	movs	r2, #0
 800988e:	2100      	movs	r1, #0
 8009890:	6878      	ldr	r0, [r7, #4]
 8009892:	f000 f837 	bl	8009904 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8009896:	bf00      	nop
 8009898:	3708      	adds	r7, #8
 800989a:	46bd      	mov	sp, r7
 800989c:	bd80      	pop	{r7, pc}

0800989e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800989e:	b580      	push	{r7, lr}
 80098a0:	b086      	sub	sp, #24
 80098a2:	af00      	add	r7, sp, #0
 80098a4:	4603      	mov	r3, r0
 80098a6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80098a8:	2301      	movs	r3, #1
 80098aa:	617b      	str	r3, [r7, #20]
 80098ac:	2300      	movs	r3, #0
 80098ae:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80098b0:	79fb      	ldrb	r3, [r7, #7]
 80098b2:	461a      	mov	r2, r3
 80098b4:	6939      	ldr	r1, [r7, #16]
 80098b6:	6978      	ldr	r0, [r7, #20]
 80098b8:	f7ff ff7e 	bl	80097b8 <xQueueGenericCreate>
 80098bc:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80098be:	68f8      	ldr	r0, [r7, #12]
 80098c0:	f7ff ffd3 	bl	800986a <prvInitialiseMutex>

		return xNewQueue;
 80098c4:	68fb      	ldr	r3, [r7, #12]
	}
 80098c6:	4618      	mov	r0, r3
 80098c8:	3718      	adds	r7, #24
 80098ca:	46bd      	mov	sp, r7
 80098cc:	bd80      	pop	{r7, pc}

080098ce <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80098ce:	b580      	push	{r7, lr}
 80098d0:	b088      	sub	sp, #32
 80098d2:	af02      	add	r7, sp, #8
 80098d4:	4603      	mov	r3, r0
 80098d6:	6039      	str	r1, [r7, #0]
 80098d8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80098da:	2301      	movs	r3, #1
 80098dc:	617b      	str	r3, [r7, #20]
 80098de:	2300      	movs	r3, #0
 80098e0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80098e2:	79fb      	ldrb	r3, [r7, #7]
 80098e4:	9300      	str	r3, [sp, #0]
 80098e6:	683b      	ldr	r3, [r7, #0]
 80098e8:	2200      	movs	r2, #0
 80098ea:	6939      	ldr	r1, [r7, #16]
 80098ec:	6978      	ldr	r0, [r7, #20]
 80098ee:	f7ff feeb 	bl	80096c8 <xQueueGenericCreateStatic>
 80098f2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80098f4:	68f8      	ldr	r0, [r7, #12]
 80098f6:	f7ff ffb8 	bl	800986a <prvInitialiseMutex>

		return xNewQueue;
 80098fa:	68fb      	ldr	r3, [r7, #12]
	}
 80098fc:	4618      	mov	r0, r3
 80098fe:	3718      	adds	r7, #24
 8009900:	46bd      	mov	sp, r7
 8009902:	bd80      	pop	{r7, pc}

08009904 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009904:	b580      	push	{r7, lr}
 8009906:	b08e      	sub	sp, #56	; 0x38
 8009908:	af00      	add	r7, sp, #0
 800990a:	60f8      	str	r0, [r7, #12]
 800990c:	60b9      	str	r1, [r7, #8]
 800990e:	607a      	str	r2, [r7, #4]
 8009910:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009912:	2300      	movs	r3, #0
 8009914:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800991a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800991c:	2b00      	cmp	r3, #0
 800991e:	d10a      	bne.n	8009936 <xQueueGenericSend+0x32>
	__asm volatile
 8009920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009924:	f383 8811 	msr	BASEPRI, r3
 8009928:	f3bf 8f6f 	isb	sy
 800992c:	f3bf 8f4f 	dsb	sy
 8009930:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009932:	bf00      	nop
 8009934:	e7fe      	b.n	8009934 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009936:	68bb      	ldr	r3, [r7, #8]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d103      	bne.n	8009944 <xQueueGenericSend+0x40>
 800993c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800993e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009940:	2b00      	cmp	r3, #0
 8009942:	d101      	bne.n	8009948 <xQueueGenericSend+0x44>
 8009944:	2301      	movs	r3, #1
 8009946:	e000      	b.n	800994a <xQueueGenericSend+0x46>
 8009948:	2300      	movs	r3, #0
 800994a:	2b00      	cmp	r3, #0
 800994c:	d10a      	bne.n	8009964 <xQueueGenericSend+0x60>
	__asm volatile
 800994e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009952:	f383 8811 	msr	BASEPRI, r3
 8009956:	f3bf 8f6f 	isb	sy
 800995a:	f3bf 8f4f 	dsb	sy
 800995e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009960:	bf00      	nop
 8009962:	e7fe      	b.n	8009962 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009964:	683b      	ldr	r3, [r7, #0]
 8009966:	2b02      	cmp	r3, #2
 8009968:	d103      	bne.n	8009972 <xQueueGenericSend+0x6e>
 800996a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800996c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800996e:	2b01      	cmp	r3, #1
 8009970:	d101      	bne.n	8009976 <xQueueGenericSend+0x72>
 8009972:	2301      	movs	r3, #1
 8009974:	e000      	b.n	8009978 <xQueueGenericSend+0x74>
 8009976:	2300      	movs	r3, #0
 8009978:	2b00      	cmp	r3, #0
 800997a:	d10a      	bne.n	8009992 <xQueueGenericSend+0x8e>
	__asm volatile
 800997c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009980:	f383 8811 	msr	BASEPRI, r3
 8009984:	f3bf 8f6f 	isb	sy
 8009988:	f3bf 8f4f 	dsb	sy
 800998c:	623b      	str	r3, [r7, #32]
}
 800998e:	bf00      	nop
 8009990:	e7fe      	b.n	8009990 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009992:	f001 fb59 	bl	800b048 <xTaskGetSchedulerState>
 8009996:	4603      	mov	r3, r0
 8009998:	2b00      	cmp	r3, #0
 800999a:	d102      	bne.n	80099a2 <xQueueGenericSend+0x9e>
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d101      	bne.n	80099a6 <xQueueGenericSend+0xa2>
 80099a2:	2301      	movs	r3, #1
 80099a4:	e000      	b.n	80099a8 <xQueueGenericSend+0xa4>
 80099a6:	2300      	movs	r3, #0
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d10a      	bne.n	80099c2 <xQueueGenericSend+0xbe>
	__asm volatile
 80099ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099b0:	f383 8811 	msr	BASEPRI, r3
 80099b4:	f3bf 8f6f 	isb	sy
 80099b8:	f3bf 8f4f 	dsb	sy
 80099bc:	61fb      	str	r3, [r7, #28]
}
 80099be:	bf00      	nop
 80099c0:	e7fe      	b.n	80099c0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80099c2:	f001 fe8f 	bl	800b6e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80099c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80099ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099ce:	429a      	cmp	r2, r3
 80099d0:	d302      	bcc.n	80099d8 <xQueueGenericSend+0xd4>
 80099d2:	683b      	ldr	r3, [r7, #0]
 80099d4:	2b02      	cmp	r3, #2
 80099d6:	d129      	bne.n	8009a2c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80099d8:	683a      	ldr	r2, [r7, #0]
 80099da:	68b9      	ldr	r1, [r7, #8]
 80099dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80099de:	f000 fc3b 	bl	800a258 <prvCopyDataToQueue>
 80099e2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80099e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d010      	beq.n	8009a0e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80099ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099ee:	3324      	adds	r3, #36	; 0x24
 80099f0:	4618      	mov	r0, r3
 80099f2:	f001 f96d 	bl	800acd0 <xTaskRemoveFromEventList>
 80099f6:	4603      	mov	r3, r0
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d013      	beq.n	8009a24 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80099fc:	4b3f      	ldr	r3, [pc, #252]	; (8009afc <xQueueGenericSend+0x1f8>)
 80099fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a02:	601a      	str	r2, [r3, #0]
 8009a04:	f3bf 8f4f 	dsb	sy
 8009a08:	f3bf 8f6f 	isb	sy
 8009a0c:	e00a      	b.n	8009a24 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d007      	beq.n	8009a24 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009a14:	4b39      	ldr	r3, [pc, #228]	; (8009afc <xQueueGenericSend+0x1f8>)
 8009a16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a1a:	601a      	str	r2, [r3, #0]
 8009a1c:	f3bf 8f4f 	dsb	sy
 8009a20:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009a24:	f001 fe8e 	bl	800b744 <vPortExitCritical>
				return pdPASS;
 8009a28:	2301      	movs	r3, #1
 8009a2a:	e063      	b.n	8009af4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d103      	bne.n	8009a3a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009a32:	f001 fe87 	bl	800b744 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009a36:	2300      	movs	r3, #0
 8009a38:	e05c      	b.n	8009af4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009a3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d106      	bne.n	8009a4e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009a40:	f107 0314 	add.w	r3, r7, #20
 8009a44:	4618      	mov	r0, r3
 8009a46:	f001 f9a5 	bl	800ad94 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009a4a:	2301      	movs	r3, #1
 8009a4c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009a4e:	f001 fe79 	bl	800b744 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009a52:	f000 ff39 	bl	800a8c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009a56:	f001 fe45 	bl	800b6e4 <vPortEnterCritical>
 8009a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a5c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009a60:	b25b      	sxtb	r3, r3
 8009a62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a66:	d103      	bne.n	8009a70 <xQueueGenericSend+0x16c>
 8009a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a72:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009a76:	b25b      	sxtb	r3, r3
 8009a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a7c:	d103      	bne.n	8009a86 <xQueueGenericSend+0x182>
 8009a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a80:	2200      	movs	r2, #0
 8009a82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009a86:	f001 fe5d 	bl	800b744 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009a8a:	1d3a      	adds	r2, r7, #4
 8009a8c:	f107 0314 	add.w	r3, r7, #20
 8009a90:	4611      	mov	r1, r2
 8009a92:	4618      	mov	r0, r3
 8009a94:	f001 f994 	bl	800adc0 <xTaskCheckForTimeOut>
 8009a98:	4603      	mov	r3, r0
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d124      	bne.n	8009ae8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009a9e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009aa0:	f000 fcd2 	bl	800a448 <prvIsQueueFull>
 8009aa4:	4603      	mov	r3, r0
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d018      	beq.n	8009adc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aac:	3310      	adds	r3, #16
 8009aae:	687a      	ldr	r2, [r7, #4]
 8009ab0:	4611      	mov	r1, r2
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	f001 f8e8 	bl	800ac88 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009ab8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009aba:	f000 fc5d 	bl	800a378 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009abe:	f000 ff11 	bl	800a8e4 <xTaskResumeAll>
 8009ac2:	4603      	mov	r3, r0
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	f47f af7c 	bne.w	80099c2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009aca:	4b0c      	ldr	r3, [pc, #48]	; (8009afc <xQueueGenericSend+0x1f8>)
 8009acc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ad0:	601a      	str	r2, [r3, #0]
 8009ad2:	f3bf 8f4f 	dsb	sy
 8009ad6:	f3bf 8f6f 	isb	sy
 8009ada:	e772      	b.n	80099c2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009adc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009ade:	f000 fc4b 	bl	800a378 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009ae2:	f000 feff 	bl	800a8e4 <xTaskResumeAll>
 8009ae6:	e76c      	b.n	80099c2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009ae8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009aea:	f000 fc45 	bl	800a378 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009aee:	f000 fef9 	bl	800a8e4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009af2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009af4:	4618      	mov	r0, r3
 8009af6:	3738      	adds	r7, #56	; 0x38
 8009af8:	46bd      	mov	sp, r7
 8009afa:	bd80      	pop	{r7, pc}
 8009afc:	e000ed04 	.word	0xe000ed04

08009b00 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b090      	sub	sp, #64	; 0x40
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	60f8      	str	r0, [r7, #12]
 8009b08:	60b9      	str	r1, [r7, #8]
 8009b0a:	607a      	str	r2, [r7, #4]
 8009b0c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8009b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d10a      	bne.n	8009b2e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b1c:	f383 8811 	msr	BASEPRI, r3
 8009b20:	f3bf 8f6f 	isb	sy
 8009b24:	f3bf 8f4f 	dsb	sy
 8009b28:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009b2a:	bf00      	nop
 8009b2c:	e7fe      	b.n	8009b2c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009b2e:	68bb      	ldr	r3, [r7, #8]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d103      	bne.n	8009b3c <xQueueGenericSendFromISR+0x3c>
 8009b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d101      	bne.n	8009b40 <xQueueGenericSendFromISR+0x40>
 8009b3c:	2301      	movs	r3, #1
 8009b3e:	e000      	b.n	8009b42 <xQueueGenericSendFromISR+0x42>
 8009b40:	2300      	movs	r3, #0
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d10a      	bne.n	8009b5c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b4a:	f383 8811 	msr	BASEPRI, r3
 8009b4e:	f3bf 8f6f 	isb	sy
 8009b52:	f3bf 8f4f 	dsb	sy
 8009b56:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009b58:	bf00      	nop
 8009b5a:	e7fe      	b.n	8009b5a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009b5c:	683b      	ldr	r3, [r7, #0]
 8009b5e:	2b02      	cmp	r3, #2
 8009b60:	d103      	bne.n	8009b6a <xQueueGenericSendFromISR+0x6a>
 8009b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b66:	2b01      	cmp	r3, #1
 8009b68:	d101      	bne.n	8009b6e <xQueueGenericSendFromISR+0x6e>
 8009b6a:	2301      	movs	r3, #1
 8009b6c:	e000      	b.n	8009b70 <xQueueGenericSendFromISR+0x70>
 8009b6e:	2300      	movs	r3, #0
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d10a      	bne.n	8009b8a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b78:	f383 8811 	msr	BASEPRI, r3
 8009b7c:	f3bf 8f6f 	isb	sy
 8009b80:	f3bf 8f4f 	dsb	sy
 8009b84:	623b      	str	r3, [r7, #32]
}
 8009b86:	bf00      	nop
 8009b88:	e7fe      	b.n	8009b88 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009b8a:	f001 fe8d 	bl	800b8a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009b8e:	f3ef 8211 	mrs	r2, BASEPRI
 8009b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b96:	f383 8811 	msr	BASEPRI, r3
 8009b9a:	f3bf 8f6f 	isb	sy
 8009b9e:	f3bf 8f4f 	dsb	sy
 8009ba2:	61fa      	str	r2, [r7, #28]
 8009ba4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009ba6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009ba8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bb2:	429a      	cmp	r2, r3
 8009bb4:	d302      	bcc.n	8009bbc <xQueueGenericSendFromISR+0xbc>
 8009bb6:	683b      	ldr	r3, [r7, #0]
 8009bb8:	2b02      	cmp	r3, #2
 8009bba:	d12f      	bne.n	8009c1c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bbe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009bc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bca:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009bcc:	683a      	ldr	r2, [r7, #0]
 8009bce:	68b9      	ldr	r1, [r7, #8]
 8009bd0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009bd2:	f000 fb41 	bl	800a258 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009bd6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8009bda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bde:	d112      	bne.n	8009c06 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009be0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d016      	beq.n	8009c16 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bea:	3324      	adds	r3, #36	; 0x24
 8009bec:	4618      	mov	r0, r3
 8009bee:	f001 f86f 	bl	800acd0 <xTaskRemoveFromEventList>
 8009bf2:	4603      	mov	r3, r0
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d00e      	beq.n	8009c16 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d00b      	beq.n	8009c16 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	2201      	movs	r2, #1
 8009c02:	601a      	str	r2, [r3, #0]
 8009c04:	e007      	b.n	8009c16 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009c06:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009c0a:	3301      	adds	r3, #1
 8009c0c:	b2db      	uxtb	r3, r3
 8009c0e:	b25a      	sxtb	r2, r3
 8009c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009c16:	2301      	movs	r3, #1
 8009c18:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8009c1a:	e001      	b.n	8009c20 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009c20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c22:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009c24:	697b      	ldr	r3, [r7, #20]
 8009c26:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009c2a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009c2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009c2e:	4618      	mov	r0, r3
 8009c30:	3740      	adds	r7, #64	; 0x40
 8009c32:	46bd      	mov	sp, r7
 8009c34:	bd80      	pop	{r7, pc}

08009c36 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009c36:	b580      	push	{r7, lr}
 8009c38:	b08e      	sub	sp, #56	; 0x38
 8009c3a:	af00      	add	r7, sp, #0
 8009c3c:	6078      	str	r0, [r7, #4]
 8009c3e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8009c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d10a      	bne.n	8009c60 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8009c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c4e:	f383 8811 	msr	BASEPRI, r3
 8009c52:	f3bf 8f6f 	isb	sy
 8009c56:	f3bf 8f4f 	dsb	sy
 8009c5a:	623b      	str	r3, [r7, #32]
}
 8009c5c:	bf00      	nop
 8009c5e:	e7fe      	b.n	8009c5e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d00a      	beq.n	8009c7e <xQueueGiveFromISR+0x48>
	__asm volatile
 8009c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c6c:	f383 8811 	msr	BASEPRI, r3
 8009c70:	f3bf 8f6f 	isb	sy
 8009c74:	f3bf 8f4f 	dsb	sy
 8009c78:	61fb      	str	r3, [r7, #28]
}
 8009c7a:	bf00      	nop
 8009c7c:	e7fe      	b.n	8009c7c <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8009c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d103      	bne.n	8009c8e <xQueueGiveFromISR+0x58>
 8009c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c88:	689b      	ldr	r3, [r3, #8]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d101      	bne.n	8009c92 <xQueueGiveFromISR+0x5c>
 8009c8e:	2301      	movs	r3, #1
 8009c90:	e000      	b.n	8009c94 <xQueueGiveFromISR+0x5e>
 8009c92:	2300      	movs	r3, #0
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d10a      	bne.n	8009cae <xQueueGiveFromISR+0x78>
	__asm volatile
 8009c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c9c:	f383 8811 	msr	BASEPRI, r3
 8009ca0:	f3bf 8f6f 	isb	sy
 8009ca4:	f3bf 8f4f 	dsb	sy
 8009ca8:	61bb      	str	r3, [r7, #24]
}
 8009caa:	bf00      	nop
 8009cac:	e7fe      	b.n	8009cac <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009cae:	f001 fdfb 	bl	800b8a8 <vPortValidateInterruptPriority>
	__asm volatile
 8009cb2:	f3ef 8211 	mrs	r2, BASEPRI
 8009cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cba:	f383 8811 	msr	BASEPRI, r3
 8009cbe:	f3bf 8f6f 	isb	sy
 8009cc2:	f3bf 8f4f 	dsb	sy
 8009cc6:	617a      	str	r2, [r7, #20]
 8009cc8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8009cca:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cd2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8009cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009cd8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009cda:	429a      	cmp	r2, r3
 8009cdc:	d22b      	bcs.n	8009d36 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ce0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009ce4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cea:	1c5a      	adds	r2, r3, #1
 8009cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cee:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009cf0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cf8:	d112      	bne.n	8009d20 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d016      	beq.n	8009d30 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d04:	3324      	adds	r3, #36	; 0x24
 8009d06:	4618      	mov	r0, r3
 8009d08:	f000 ffe2 	bl	800acd0 <xTaskRemoveFromEventList>
 8009d0c:	4603      	mov	r3, r0
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d00e      	beq.n	8009d30 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009d12:	683b      	ldr	r3, [r7, #0]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d00b      	beq.n	8009d30 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	2201      	movs	r2, #1
 8009d1c:	601a      	str	r2, [r3, #0]
 8009d1e:	e007      	b.n	8009d30 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009d20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009d24:	3301      	adds	r3, #1
 8009d26:	b2db      	uxtb	r3, r3
 8009d28:	b25a      	sxtb	r2, r3
 8009d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009d30:	2301      	movs	r3, #1
 8009d32:	637b      	str	r3, [r7, #52]	; 0x34
 8009d34:	e001      	b.n	8009d3a <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009d36:	2300      	movs	r3, #0
 8009d38:	637b      	str	r3, [r7, #52]	; 0x34
 8009d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d3c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	f383 8811 	msr	BASEPRI, r3
}
 8009d44:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009d46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009d48:	4618      	mov	r0, r3
 8009d4a:	3738      	adds	r7, #56	; 0x38
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	bd80      	pop	{r7, pc}

08009d50 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b08c      	sub	sp, #48	; 0x30
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	60f8      	str	r0, [r7, #12]
 8009d58:	60b9      	str	r1, [r7, #8]
 8009d5a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d10a      	bne.n	8009d80 <xQueueReceive+0x30>
	__asm volatile
 8009d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d6e:	f383 8811 	msr	BASEPRI, r3
 8009d72:	f3bf 8f6f 	isb	sy
 8009d76:	f3bf 8f4f 	dsb	sy
 8009d7a:	623b      	str	r3, [r7, #32]
}
 8009d7c:	bf00      	nop
 8009d7e:	e7fe      	b.n	8009d7e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009d80:	68bb      	ldr	r3, [r7, #8]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d103      	bne.n	8009d8e <xQueueReceive+0x3e>
 8009d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d101      	bne.n	8009d92 <xQueueReceive+0x42>
 8009d8e:	2301      	movs	r3, #1
 8009d90:	e000      	b.n	8009d94 <xQueueReceive+0x44>
 8009d92:	2300      	movs	r3, #0
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d10a      	bne.n	8009dae <xQueueReceive+0x5e>
	__asm volatile
 8009d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d9c:	f383 8811 	msr	BASEPRI, r3
 8009da0:	f3bf 8f6f 	isb	sy
 8009da4:	f3bf 8f4f 	dsb	sy
 8009da8:	61fb      	str	r3, [r7, #28]
}
 8009daa:	bf00      	nop
 8009dac:	e7fe      	b.n	8009dac <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009dae:	f001 f94b 	bl	800b048 <xTaskGetSchedulerState>
 8009db2:	4603      	mov	r3, r0
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d102      	bne.n	8009dbe <xQueueReceive+0x6e>
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d101      	bne.n	8009dc2 <xQueueReceive+0x72>
 8009dbe:	2301      	movs	r3, #1
 8009dc0:	e000      	b.n	8009dc4 <xQueueReceive+0x74>
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d10a      	bne.n	8009dde <xQueueReceive+0x8e>
	__asm volatile
 8009dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dcc:	f383 8811 	msr	BASEPRI, r3
 8009dd0:	f3bf 8f6f 	isb	sy
 8009dd4:	f3bf 8f4f 	dsb	sy
 8009dd8:	61bb      	str	r3, [r7, #24]
}
 8009dda:	bf00      	nop
 8009ddc:	e7fe      	b.n	8009ddc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009dde:	f001 fc81 	bl	800b6e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009de6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d01f      	beq.n	8009e2e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009dee:	68b9      	ldr	r1, [r7, #8]
 8009df0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009df2:	f000 fa9b 	bl	800a32c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009df8:	1e5a      	subs	r2, r3, #1
 8009dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dfc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e00:	691b      	ldr	r3, [r3, #16]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d00f      	beq.n	8009e26 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e08:	3310      	adds	r3, #16
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	f000 ff60 	bl	800acd0 <xTaskRemoveFromEventList>
 8009e10:	4603      	mov	r3, r0
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d007      	beq.n	8009e26 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009e16:	4b3d      	ldr	r3, [pc, #244]	; (8009f0c <xQueueReceive+0x1bc>)
 8009e18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e1c:	601a      	str	r2, [r3, #0]
 8009e1e:	f3bf 8f4f 	dsb	sy
 8009e22:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009e26:	f001 fc8d 	bl	800b744 <vPortExitCritical>
				return pdPASS;
 8009e2a:	2301      	movs	r3, #1
 8009e2c:	e069      	b.n	8009f02 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d103      	bne.n	8009e3c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009e34:	f001 fc86 	bl	800b744 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009e38:	2300      	movs	r3, #0
 8009e3a:	e062      	b.n	8009f02 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d106      	bne.n	8009e50 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009e42:	f107 0310 	add.w	r3, r7, #16
 8009e46:	4618      	mov	r0, r3
 8009e48:	f000 ffa4 	bl	800ad94 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009e4c:	2301      	movs	r3, #1
 8009e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009e50:	f001 fc78 	bl	800b744 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009e54:	f000 fd38 	bl	800a8c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009e58:	f001 fc44 	bl	800b6e4 <vPortEnterCritical>
 8009e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e5e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009e62:	b25b      	sxtb	r3, r3
 8009e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e68:	d103      	bne.n	8009e72 <xQueueReceive+0x122>
 8009e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e6c:	2200      	movs	r2, #0
 8009e6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e74:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009e78:	b25b      	sxtb	r3, r3
 8009e7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e7e:	d103      	bne.n	8009e88 <xQueueReceive+0x138>
 8009e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e82:	2200      	movs	r2, #0
 8009e84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009e88:	f001 fc5c 	bl	800b744 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009e8c:	1d3a      	adds	r2, r7, #4
 8009e8e:	f107 0310 	add.w	r3, r7, #16
 8009e92:	4611      	mov	r1, r2
 8009e94:	4618      	mov	r0, r3
 8009e96:	f000 ff93 	bl	800adc0 <xTaskCheckForTimeOut>
 8009e9a:	4603      	mov	r3, r0
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d123      	bne.n	8009ee8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009ea0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ea2:	f000 fabb 	bl	800a41c <prvIsQueueEmpty>
 8009ea6:	4603      	mov	r3, r0
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d017      	beq.n	8009edc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eae:	3324      	adds	r3, #36	; 0x24
 8009eb0:	687a      	ldr	r2, [r7, #4]
 8009eb2:	4611      	mov	r1, r2
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	f000 fee7 	bl	800ac88 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009eba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ebc:	f000 fa5c 	bl	800a378 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009ec0:	f000 fd10 	bl	800a8e4 <xTaskResumeAll>
 8009ec4:	4603      	mov	r3, r0
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d189      	bne.n	8009dde <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009eca:	4b10      	ldr	r3, [pc, #64]	; (8009f0c <xQueueReceive+0x1bc>)
 8009ecc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ed0:	601a      	str	r2, [r3, #0]
 8009ed2:	f3bf 8f4f 	dsb	sy
 8009ed6:	f3bf 8f6f 	isb	sy
 8009eda:	e780      	b.n	8009dde <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009edc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ede:	f000 fa4b 	bl	800a378 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009ee2:	f000 fcff 	bl	800a8e4 <xTaskResumeAll>
 8009ee6:	e77a      	b.n	8009dde <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009ee8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009eea:	f000 fa45 	bl	800a378 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009eee:	f000 fcf9 	bl	800a8e4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009ef2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ef4:	f000 fa92 	bl	800a41c <prvIsQueueEmpty>
 8009ef8:	4603      	mov	r3, r0
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	f43f af6f 	beq.w	8009dde <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009f00:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009f02:	4618      	mov	r0, r3
 8009f04:	3730      	adds	r7, #48	; 0x30
 8009f06:	46bd      	mov	sp, r7
 8009f08:	bd80      	pop	{r7, pc}
 8009f0a:	bf00      	nop
 8009f0c:	e000ed04 	.word	0xe000ed04

08009f10 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8009f10:	b580      	push	{r7, lr}
 8009f12:	b08e      	sub	sp, #56	; 0x38
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
 8009f18:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8009f22:	2300      	movs	r3, #0
 8009f24:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d10a      	bne.n	8009f42 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8009f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f30:	f383 8811 	msr	BASEPRI, r3
 8009f34:	f3bf 8f6f 	isb	sy
 8009f38:	f3bf 8f4f 	dsb	sy
 8009f3c:	623b      	str	r3, [r7, #32]
}
 8009f3e:	bf00      	nop
 8009f40:	e7fe      	b.n	8009f40 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d00a      	beq.n	8009f60 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8009f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f4e:	f383 8811 	msr	BASEPRI, r3
 8009f52:	f3bf 8f6f 	isb	sy
 8009f56:	f3bf 8f4f 	dsb	sy
 8009f5a:	61fb      	str	r3, [r7, #28]
}
 8009f5c:	bf00      	nop
 8009f5e:	e7fe      	b.n	8009f5e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009f60:	f001 f872 	bl	800b048 <xTaskGetSchedulerState>
 8009f64:	4603      	mov	r3, r0
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d102      	bne.n	8009f70 <xQueueSemaphoreTake+0x60>
 8009f6a:	683b      	ldr	r3, [r7, #0]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d101      	bne.n	8009f74 <xQueueSemaphoreTake+0x64>
 8009f70:	2301      	movs	r3, #1
 8009f72:	e000      	b.n	8009f76 <xQueueSemaphoreTake+0x66>
 8009f74:	2300      	movs	r3, #0
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d10a      	bne.n	8009f90 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8009f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f7e:	f383 8811 	msr	BASEPRI, r3
 8009f82:	f3bf 8f6f 	isb	sy
 8009f86:	f3bf 8f4f 	dsb	sy
 8009f8a:	61bb      	str	r3, [r7, #24]
}
 8009f8c:	bf00      	nop
 8009f8e:	e7fe      	b.n	8009f8e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009f90:	f001 fba8 	bl	800b6e4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f98:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d024      	beq.n	8009fea <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fa2:	1e5a      	subs	r2, r3, #1
 8009fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fa6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d104      	bne.n	8009fba <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8009fb0:	f001 f9f2 	bl	800b398 <pvTaskIncrementMutexHeldCount>
 8009fb4:	4602      	mov	r2, r0
 8009fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fb8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fbc:	691b      	ldr	r3, [r3, #16]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d00f      	beq.n	8009fe2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fc4:	3310      	adds	r3, #16
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	f000 fe82 	bl	800acd0 <xTaskRemoveFromEventList>
 8009fcc:	4603      	mov	r3, r0
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d007      	beq.n	8009fe2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009fd2:	4b54      	ldr	r3, [pc, #336]	; (800a124 <xQueueSemaphoreTake+0x214>)
 8009fd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009fd8:	601a      	str	r2, [r3, #0]
 8009fda:	f3bf 8f4f 	dsb	sy
 8009fde:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009fe2:	f001 fbaf 	bl	800b744 <vPortExitCritical>
				return pdPASS;
 8009fe6:	2301      	movs	r3, #1
 8009fe8:	e097      	b.n	800a11a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009fea:	683b      	ldr	r3, [r7, #0]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d111      	bne.n	800a014 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d00a      	beq.n	800a00c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8009ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ffa:	f383 8811 	msr	BASEPRI, r3
 8009ffe:	f3bf 8f6f 	isb	sy
 800a002:	f3bf 8f4f 	dsb	sy
 800a006:	617b      	str	r3, [r7, #20]
}
 800a008:	bf00      	nop
 800a00a:	e7fe      	b.n	800a00a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a00c:	f001 fb9a 	bl	800b744 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a010:	2300      	movs	r3, #0
 800a012:	e082      	b.n	800a11a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a016:	2b00      	cmp	r3, #0
 800a018:	d106      	bne.n	800a028 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a01a:	f107 030c 	add.w	r3, r7, #12
 800a01e:	4618      	mov	r0, r3
 800a020:	f000 feb8 	bl	800ad94 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a024:	2301      	movs	r3, #1
 800a026:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a028:	f001 fb8c 	bl	800b744 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a02c:	f000 fc4c 	bl	800a8c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a030:	f001 fb58 	bl	800b6e4 <vPortEnterCritical>
 800a034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a036:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a03a:	b25b      	sxtb	r3, r3
 800a03c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a040:	d103      	bne.n	800a04a <xQueueSemaphoreTake+0x13a>
 800a042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a044:	2200      	movs	r2, #0
 800a046:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a04a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a04c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a050:	b25b      	sxtb	r3, r3
 800a052:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a056:	d103      	bne.n	800a060 <xQueueSemaphoreTake+0x150>
 800a058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a05a:	2200      	movs	r2, #0
 800a05c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a060:	f001 fb70 	bl	800b744 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a064:	463a      	mov	r2, r7
 800a066:	f107 030c 	add.w	r3, r7, #12
 800a06a:	4611      	mov	r1, r2
 800a06c:	4618      	mov	r0, r3
 800a06e:	f000 fea7 	bl	800adc0 <xTaskCheckForTimeOut>
 800a072:	4603      	mov	r3, r0
 800a074:	2b00      	cmp	r3, #0
 800a076:	d132      	bne.n	800a0de <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a078:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a07a:	f000 f9cf 	bl	800a41c <prvIsQueueEmpty>
 800a07e:	4603      	mov	r3, r0
 800a080:	2b00      	cmp	r3, #0
 800a082:	d026      	beq.n	800a0d2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d109      	bne.n	800a0a0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800a08c:	f001 fb2a 	bl	800b6e4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a092:	689b      	ldr	r3, [r3, #8]
 800a094:	4618      	mov	r0, r3
 800a096:	f000 fff5 	bl	800b084 <xTaskPriorityInherit>
 800a09a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800a09c:	f001 fb52 	bl	800b744 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a0a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0a2:	3324      	adds	r3, #36	; 0x24
 800a0a4:	683a      	ldr	r2, [r7, #0]
 800a0a6:	4611      	mov	r1, r2
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	f000 fded 	bl	800ac88 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a0ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a0b0:	f000 f962 	bl	800a378 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a0b4:	f000 fc16 	bl	800a8e4 <xTaskResumeAll>
 800a0b8:	4603      	mov	r3, r0
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	f47f af68 	bne.w	8009f90 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800a0c0:	4b18      	ldr	r3, [pc, #96]	; (800a124 <xQueueSemaphoreTake+0x214>)
 800a0c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0c6:	601a      	str	r2, [r3, #0]
 800a0c8:	f3bf 8f4f 	dsb	sy
 800a0cc:	f3bf 8f6f 	isb	sy
 800a0d0:	e75e      	b.n	8009f90 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a0d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a0d4:	f000 f950 	bl	800a378 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a0d8:	f000 fc04 	bl	800a8e4 <xTaskResumeAll>
 800a0dc:	e758      	b.n	8009f90 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a0de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a0e0:	f000 f94a 	bl	800a378 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a0e4:	f000 fbfe 	bl	800a8e4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a0e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a0ea:	f000 f997 	bl	800a41c <prvIsQueueEmpty>
 800a0ee:	4603      	mov	r3, r0
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	f43f af4d 	beq.w	8009f90 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a0f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d00d      	beq.n	800a118 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800a0fc:	f001 faf2 	bl	800b6e4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a100:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a102:	f000 f891 	bl	800a228 <prvGetDisinheritPriorityAfterTimeout>
 800a106:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a10a:	689b      	ldr	r3, [r3, #8]
 800a10c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a10e:	4618      	mov	r0, r3
 800a110:	f001 f8b4 	bl	800b27c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a114:	f001 fb16 	bl	800b744 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a118:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a11a:	4618      	mov	r0, r3
 800a11c:	3738      	adds	r7, #56	; 0x38
 800a11e:	46bd      	mov	sp, r7
 800a120:	bd80      	pop	{r7, pc}
 800a122:	bf00      	nop
 800a124:	e000ed04 	.word	0xe000ed04

0800a128 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a128:	b580      	push	{r7, lr}
 800a12a:	b08e      	sub	sp, #56	; 0x38
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	60f8      	str	r0, [r7, #12]
 800a130:	60b9      	str	r1, [r7, #8]
 800a132:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d10a      	bne.n	800a154 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800a13e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a142:	f383 8811 	msr	BASEPRI, r3
 800a146:	f3bf 8f6f 	isb	sy
 800a14a:	f3bf 8f4f 	dsb	sy
 800a14e:	623b      	str	r3, [r7, #32]
}
 800a150:	bf00      	nop
 800a152:	e7fe      	b.n	800a152 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a154:	68bb      	ldr	r3, [r7, #8]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d103      	bne.n	800a162 <xQueueReceiveFromISR+0x3a>
 800a15a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a15c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d101      	bne.n	800a166 <xQueueReceiveFromISR+0x3e>
 800a162:	2301      	movs	r3, #1
 800a164:	e000      	b.n	800a168 <xQueueReceiveFromISR+0x40>
 800a166:	2300      	movs	r3, #0
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d10a      	bne.n	800a182 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800a16c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a170:	f383 8811 	msr	BASEPRI, r3
 800a174:	f3bf 8f6f 	isb	sy
 800a178:	f3bf 8f4f 	dsb	sy
 800a17c:	61fb      	str	r3, [r7, #28]
}
 800a17e:	bf00      	nop
 800a180:	e7fe      	b.n	800a180 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a182:	f001 fb91 	bl	800b8a8 <vPortValidateInterruptPriority>
	__asm volatile
 800a186:	f3ef 8211 	mrs	r2, BASEPRI
 800a18a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a18e:	f383 8811 	msr	BASEPRI, r3
 800a192:	f3bf 8f6f 	isb	sy
 800a196:	f3bf 8f4f 	dsb	sy
 800a19a:	61ba      	str	r2, [r7, #24]
 800a19c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a19e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a1a0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a1a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1a6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a1a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d02f      	beq.n	800a20e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a1ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a1b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a1b8:	68b9      	ldr	r1, [r7, #8]
 800a1ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a1bc:	f000 f8b6 	bl	800a32c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a1c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1c2:	1e5a      	subs	r2, r3, #1
 800a1c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1c6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a1c8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a1cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1d0:	d112      	bne.n	800a1f8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a1d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1d4:	691b      	ldr	r3, [r3, #16]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d016      	beq.n	800a208 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a1da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1dc:	3310      	adds	r3, #16
 800a1de:	4618      	mov	r0, r3
 800a1e0:	f000 fd76 	bl	800acd0 <xTaskRemoveFromEventList>
 800a1e4:	4603      	mov	r3, r0
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d00e      	beq.n	800a208 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d00b      	beq.n	800a208 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	2201      	movs	r2, #1
 800a1f4:	601a      	str	r2, [r3, #0]
 800a1f6:	e007      	b.n	800a208 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a1f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a1fc:	3301      	adds	r3, #1
 800a1fe:	b2db      	uxtb	r3, r3
 800a200:	b25a      	sxtb	r2, r3
 800a202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a204:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800a208:	2301      	movs	r3, #1
 800a20a:	637b      	str	r3, [r7, #52]	; 0x34
 800a20c:	e001      	b.n	800a212 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800a20e:	2300      	movs	r3, #0
 800a210:	637b      	str	r3, [r7, #52]	; 0x34
 800a212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a214:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a216:	693b      	ldr	r3, [r7, #16]
 800a218:	f383 8811 	msr	BASEPRI, r3
}
 800a21c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a21e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a220:	4618      	mov	r0, r3
 800a222:	3738      	adds	r7, #56	; 0x38
 800a224:	46bd      	mov	sp, r7
 800a226:	bd80      	pop	{r7, pc}

0800a228 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800a228:	b480      	push	{r7}
 800a22a:	b085      	sub	sp, #20
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a234:	2b00      	cmp	r3, #0
 800a236:	d006      	beq.n	800a246 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	f1c3 0307 	rsb	r3, r3, #7
 800a242:	60fb      	str	r3, [r7, #12]
 800a244:	e001      	b.n	800a24a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a246:	2300      	movs	r3, #0
 800a248:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a24a:	68fb      	ldr	r3, [r7, #12]
	}
 800a24c:	4618      	mov	r0, r3
 800a24e:	3714      	adds	r7, #20
 800a250:	46bd      	mov	sp, r7
 800a252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a256:	4770      	bx	lr

0800a258 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	b086      	sub	sp, #24
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	60f8      	str	r0, [r7, #12]
 800a260:	60b9      	str	r1, [r7, #8]
 800a262:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a264:	2300      	movs	r3, #0
 800a266:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a26c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a272:	2b00      	cmp	r3, #0
 800a274:	d10d      	bne.n	800a292 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d14d      	bne.n	800a31a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	689b      	ldr	r3, [r3, #8]
 800a282:	4618      	mov	r0, r3
 800a284:	f000 ff74 	bl	800b170 <xTaskPriorityDisinherit>
 800a288:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	2200      	movs	r2, #0
 800a28e:	609a      	str	r2, [r3, #8]
 800a290:	e043      	b.n	800a31a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d119      	bne.n	800a2cc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	6858      	ldr	r0, [r3, #4]
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2a0:	461a      	mov	r2, r3
 800a2a2:	68b9      	ldr	r1, [r7, #8]
 800a2a4:	f00c fde2 	bl	8016e6c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	685a      	ldr	r2, [r3, #4]
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2b0:	441a      	add	r2, r3
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	685a      	ldr	r2, [r3, #4]
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	689b      	ldr	r3, [r3, #8]
 800a2be:	429a      	cmp	r2, r3
 800a2c0:	d32b      	bcc.n	800a31a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	681a      	ldr	r2, [r3, #0]
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	605a      	str	r2, [r3, #4]
 800a2ca:	e026      	b.n	800a31a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	68d8      	ldr	r0, [r3, #12]
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2d4:	461a      	mov	r2, r3
 800a2d6:	68b9      	ldr	r1, [r7, #8]
 800a2d8:	f00c fdc8 	bl	8016e6c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	68da      	ldr	r2, [r3, #12]
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2e4:	425b      	negs	r3, r3
 800a2e6:	441a      	add	r2, r3
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	68da      	ldr	r2, [r3, #12]
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	429a      	cmp	r2, r3
 800a2f6:	d207      	bcs.n	800a308 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	689a      	ldr	r2, [r3, #8]
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a300:	425b      	negs	r3, r3
 800a302:	441a      	add	r2, r3
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	2b02      	cmp	r3, #2
 800a30c:	d105      	bne.n	800a31a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a30e:	693b      	ldr	r3, [r7, #16]
 800a310:	2b00      	cmp	r3, #0
 800a312:	d002      	beq.n	800a31a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a314:	693b      	ldr	r3, [r7, #16]
 800a316:	3b01      	subs	r3, #1
 800a318:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a31a:	693b      	ldr	r3, [r7, #16]
 800a31c:	1c5a      	adds	r2, r3, #1
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a322:	697b      	ldr	r3, [r7, #20]
}
 800a324:	4618      	mov	r0, r3
 800a326:	3718      	adds	r7, #24
 800a328:	46bd      	mov	sp, r7
 800a32a:	bd80      	pop	{r7, pc}

0800a32c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b082      	sub	sp, #8
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]
 800a334:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d018      	beq.n	800a370 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	68da      	ldr	r2, [r3, #12]
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a346:	441a      	add	r2, r3
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	68da      	ldr	r2, [r3, #12]
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	689b      	ldr	r3, [r3, #8]
 800a354:	429a      	cmp	r2, r3
 800a356:	d303      	bcc.n	800a360 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681a      	ldr	r2, [r3, #0]
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	68d9      	ldr	r1, [r3, #12]
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a368:	461a      	mov	r2, r3
 800a36a:	6838      	ldr	r0, [r7, #0]
 800a36c:	f00c fd7e 	bl	8016e6c <memcpy>
	}
}
 800a370:	bf00      	nop
 800a372:	3708      	adds	r7, #8
 800a374:	46bd      	mov	sp, r7
 800a376:	bd80      	pop	{r7, pc}

0800a378 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a378:	b580      	push	{r7, lr}
 800a37a:	b084      	sub	sp, #16
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a380:	f001 f9b0 	bl	800b6e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a38a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a38c:	e011      	b.n	800a3b2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a392:	2b00      	cmp	r3, #0
 800a394:	d012      	beq.n	800a3bc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	3324      	adds	r3, #36	; 0x24
 800a39a:	4618      	mov	r0, r3
 800a39c:	f000 fc98 	bl	800acd0 <xTaskRemoveFromEventList>
 800a3a0:	4603      	mov	r3, r0
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d001      	beq.n	800a3aa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a3a6:	f000 fd6d 	bl	800ae84 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a3aa:	7bfb      	ldrb	r3, [r7, #15]
 800a3ac:	3b01      	subs	r3, #1
 800a3ae:	b2db      	uxtb	r3, r3
 800a3b0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a3b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	dce9      	bgt.n	800a38e <prvUnlockQueue+0x16>
 800a3ba:	e000      	b.n	800a3be <prvUnlockQueue+0x46>
					break;
 800a3bc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	22ff      	movs	r2, #255	; 0xff
 800a3c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a3c6:	f001 f9bd 	bl	800b744 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a3ca:	f001 f98b 	bl	800b6e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a3d4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a3d6:	e011      	b.n	800a3fc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	691b      	ldr	r3, [r3, #16]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d012      	beq.n	800a406 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	3310      	adds	r3, #16
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	f000 fc73 	bl	800acd0 <xTaskRemoveFromEventList>
 800a3ea:	4603      	mov	r3, r0
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d001      	beq.n	800a3f4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a3f0:	f000 fd48 	bl	800ae84 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a3f4:	7bbb      	ldrb	r3, [r7, #14]
 800a3f6:	3b01      	subs	r3, #1
 800a3f8:	b2db      	uxtb	r3, r3
 800a3fa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a3fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a400:	2b00      	cmp	r3, #0
 800a402:	dce9      	bgt.n	800a3d8 <prvUnlockQueue+0x60>
 800a404:	e000      	b.n	800a408 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a406:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	22ff      	movs	r2, #255	; 0xff
 800a40c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a410:	f001 f998 	bl	800b744 <vPortExitCritical>
}
 800a414:	bf00      	nop
 800a416:	3710      	adds	r7, #16
 800a418:	46bd      	mov	sp, r7
 800a41a:	bd80      	pop	{r7, pc}

0800a41c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b084      	sub	sp, #16
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a424:	f001 f95e 	bl	800b6e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d102      	bne.n	800a436 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a430:	2301      	movs	r3, #1
 800a432:	60fb      	str	r3, [r7, #12]
 800a434:	e001      	b.n	800a43a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a436:	2300      	movs	r3, #0
 800a438:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a43a:	f001 f983 	bl	800b744 <vPortExitCritical>

	return xReturn;
 800a43e:	68fb      	ldr	r3, [r7, #12]
}
 800a440:	4618      	mov	r0, r3
 800a442:	3710      	adds	r7, #16
 800a444:	46bd      	mov	sp, r7
 800a446:	bd80      	pop	{r7, pc}

0800a448 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a448:	b580      	push	{r7, lr}
 800a44a:	b084      	sub	sp, #16
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a450:	f001 f948 	bl	800b6e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a45c:	429a      	cmp	r2, r3
 800a45e:	d102      	bne.n	800a466 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a460:	2301      	movs	r3, #1
 800a462:	60fb      	str	r3, [r7, #12]
 800a464:	e001      	b.n	800a46a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a466:	2300      	movs	r3, #0
 800a468:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a46a:	f001 f96b 	bl	800b744 <vPortExitCritical>

	return xReturn;
 800a46e:	68fb      	ldr	r3, [r7, #12]
}
 800a470:	4618      	mov	r0, r3
 800a472:	3710      	adds	r7, #16
 800a474:	46bd      	mov	sp, r7
 800a476:	bd80      	pop	{r7, pc}

0800a478 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a478:	b580      	push	{r7, lr}
 800a47a:	b08e      	sub	sp, #56	; 0x38
 800a47c:	af04      	add	r7, sp, #16
 800a47e:	60f8      	str	r0, [r7, #12]
 800a480:	60b9      	str	r1, [r7, #8]
 800a482:	607a      	str	r2, [r7, #4]
 800a484:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a486:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d10a      	bne.n	800a4a2 <xTaskCreateStatic+0x2a>
	__asm volatile
 800a48c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a490:	f383 8811 	msr	BASEPRI, r3
 800a494:	f3bf 8f6f 	isb	sy
 800a498:	f3bf 8f4f 	dsb	sy
 800a49c:	623b      	str	r3, [r7, #32]
}
 800a49e:	bf00      	nop
 800a4a0:	e7fe      	b.n	800a4a0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a4a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d10a      	bne.n	800a4be <xTaskCreateStatic+0x46>
	__asm volatile
 800a4a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4ac:	f383 8811 	msr	BASEPRI, r3
 800a4b0:	f3bf 8f6f 	isb	sy
 800a4b4:	f3bf 8f4f 	dsb	sy
 800a4b8:	61fb      	str	r3, [r7, #28]
}
 800a4ba:	bf00      	nop
 800a4bc:	e7fe      	b.n	800a4bc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a4be:	2354      	movs	r3, #84	; 0x54
 800a4c0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a4c2:	693b      	ldr	r3, [r7, #16]
 800a4c4:	2b54      	cmp	r3, #84	; 0x54
 800a4c6:	d00a      	beq.n	800a4de <xTaskCreateStatic+0x66>
	__asm volatile
 800a4c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4cc:	f383 8811 	msr	BASEPRI, r3
 800a4d0:	f3bf 8f6f 	isb	sy
 800a4d4:	f3bf 8f4f 	dsb	sy
 800a4d8:	61bb      	str	r3, [r7, #24]
}
 800a4da:	bf00      	nop
 800a4dc:	e7fe      	b.n	800a4dc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a4de:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a4e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d01e      	beq.n	800a524 <xTaskCreateStatic+0xac>
 800a4e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d01b      	beq.n	800a524 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a4ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4ee:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a4f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a4f4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a4f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4f8:	2202      	movs	r2, #2
 800a4fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a4fe:	2300      	movs	r3, #0
 800a500:	9303      	str	r3, [sp, #12]
 800a502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a504:	9302      	str	r3, [sp, #8]
 800a506:	f107 0314 	add.w	r3, r7, #20
 800a50a:	9301      	str	r3, [sp, #4]
 800a50c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a50e:	9300      	str	r3, [sp, #0]
 800a510:	683b      	ldr	r3, [r7, #0]
 800a512:	687a      	ldr	r2, [r7, #4]
 800a514:	68b9      	ldr	r1, [r7, #8]
 800a516:	68f8      	ldr	r0, [r7, #12]
 800a518:	f000 f850 	bl	800a5bc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a51c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a51e:	f000 f8d5 	bl	800a6cc <prvAddNewTaskToReadyList>
 800a522:	e001      	b.n	800a528 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a524:	2300      	movs	r3, #0
 800a526:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a528:	697b      	ldr	r3, [r7, #20]
	}
 800a52a:	4618      	mov	r0, r3
 800a52c:	3728      	adds	r7, #40	; 0x28
 800a52e:	46bd      	mov	sp, r7
 800a530:	bd80      	pop	{r7, pc}

0800a532 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a532:	b580      	push	{r7, lr}
 800a534:	b08c      	sub	sp, #48	; 0x30
 800a536:	af04      	add	r7, sp, #16
 800a538:	60f8      	str	r0, [r7, #12]
 800a53a:	60b9      	str	r1, [r7, #8]
 800a53c:	603b      	str	r3, [r7, #0]
 800a53e:	4613      	mov	r3, r2
 800a540:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a542:	88fb      	ldrh	r3, [r7, #6]
 800a544:	009b      	lsls	r3, r3, #2
 800a546:	4618      	mov	r0, r3
 800a548:	f001 f9ee 	bl	800b928 <pvPortMalloc>
 800a54c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a54e:	697b      	ldr	r3, [r7, #20]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d00e      	beq.n	800a572 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a554:	2054      	movs	r0, #84	; 0x54
 800a556:	f001 f9e7 	bl	800b928 <pvPortMalloc>
 800a55a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a55c:	69fb      	ldr	r3, [r7, #28]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d003      	beq.n	800a56a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a562:	69fb      	ldr	r3, [r7, #28]
 800a564:	697a      	ldr	r2, [r7, #20]
 800a566:	631a      	str	r2, [r3, #48]	; 0x30
 800a568:	e005      	b.n	800a576 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a56a:	6978      	ldr	r0, [r7, #20]
 800a56c:	f001 faa8 	bl	800bac0 <vPortFree>
 800a570:	e001      	b.n	800a576 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a572:	2300      	movs	r3, #0
 800a574:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a576:	69fb      	ldr	r3, [r7, #28]
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d017      	beq.n	800a5ac <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a57c:	69fb      	ldr	r3, [r7, #28]
 800a57e:	2200      	movs	r2, #0
 800a580:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a584:	88fa      	ldrh	r2, [r7, #6]
 800a586:	2300      	movs	r3, #0
 800a588:	9303      	str	r3, [sp, #12]
 800a58a:	69fb      	ldr	r3, [r7, #28]
 800a58c:	9302      	str	r3, [sp, #8]
 800a58e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a590:	9301      	str	r3, [sp, #4]
 800a592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a594:	9300      	str	r3, [sp, #0]
 800a596:	683b      	ldr	r3, [r7, #0]
 800a598:	68b9      	ldr	r1, [r7, #8]
 800a59a:	68f8      	ldr	r0, [r7, #12]
 800a59c:	f000 f80e 	bl	800a5bc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a5a0:	69f8      	ldr	r0, [r7, #28]
 800a5a2:	f000 f893 	bl	800a6cc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a5a6:	2301      	movs	r3, #1
 800a5a8:	61bb      	str	r3, [r7, #24]
 800a5aa:	e002      	b.n	800a5b2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a5ac:	f04f 33ff 	mov.w	r3, #4294967295
 800a5b0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a5b2:	69bb      	ldr	r3, [r7, #24]
	}
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	3720      	adds	r7, #32
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	bd80      	pop	{r7, pc}

0800a5bc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	b088      	sub	sp, #32
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	60f8      	str	r0, [r7, #12]
 800a5c4:	60b9      	str	r1, [r7, #8]
 800a5c6:	607a      	str	r2, [r7, #4]
 800a5c8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a5ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a5ce:	6879      	ldr	r1, [r7, #4]
 800a5d0:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800a5d4:	440b      	add	r3, r1
 800a5d6:	009b      	lsls	r3, r3, #2
 800a5d8:	4413      	add	r3, r2
 800a5da:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a5dc:	69bb      	ldr	r3, [r7, #24]
 800a5de:	f023 0307 	bic.w	r3, r3, #7
 800a5e2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a5e4:	69bb      	ldr	r3, [r7, #24]
 800a5e6:	f003 0307 	and.w	r3, r3, #7
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d00a      	beq.n	800a604 <prvInitialiseNewTask+0x48>
	__asm volatile
 800a5ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5f2:	f383 8811 	msr	BASEPRI, r3
 800a5f6:	f3bf 8f6f 	isb	sy
 800a5fa:	f3bf 8f4f 	dsb	sy
 800a5fe:	617b      	str	r3, [r7, #20]
}
 800a600:	bf00      	nop
 800a602:	e7fe      	b.n	800a602 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a604:	68bb      	ldr	r3, [r7, #8]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d01f      	beq.n	800a64a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a60a:	2300      	movs	r3, #0
 800a60c:	61fb      	str	r3, [r7, #28]
 800a60e:	e012      	b.n	800a636 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a610:	68ba      	ldr	r2, [r7, #8]
 800a612:	69fb      	ldr	r3, [r7, #28]
 800a614:	4413      	add	r3, r2
 800a616:	7819      	ldrb	r1, [r3, #0]
 800a618:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a61a:	69fb      	ldr	r3, [r7, #28]
 800a61c:	4413      	add	r3, r2
 800a61e:	3334      	adds	r3, #52	; 0x34
 800a620:	460a      	mov	r2, r1
 800a622:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a624:	68ba      	ldr	r2, [r7, #8]
 800a626:	69fb      	ldr	r3, [r7, #28]
 800a628:	4413      	add	r3, r2
 800a62a:	781b      	ldrb	r3, [r3, #0]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d006      	beq.n	800a63e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a630:	69fb      	ldr	r3, [r7, #28]
 800a632:	3301      	adds	r3, #1
 800a634:	61fb      	str	r3, [r7, #28]
 800a636:	69fb      	ldr	r3, [r7, #28]
 800a638:	2b0f      	cmp	r3, #15
 800a63a:	d9e9      	bls.n	800a610 <prvInitialiseNewTask+0x54>
 800a63c:	e000      	b.n	800a640 <prvInitialiseNewTask+0x84>
			{
				break;
 800a63e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a642:	2200      	movs	r2, #0
 800a644:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a648:	e003      	b.n	800a652 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a64a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a64c:	2200      	movs	r2, #0
 800a64e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a654:	2b06      	cmp	r3, #6
 800a656:	d901      	bls.n	800a65c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a658:	2306      	movs	r3, #6
 800a65a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a65c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a65e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a660:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a664:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a666:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800a668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a66a:	2200      	movs	r2, #0
 800a66c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a66e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a670:	3304      	adds	r3, #4
 800a672:	4618      	mov	r0, r3
 800a674:	f7fe ff2c 	bl	80094d0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a67a:	3318      	adds	r3, #24
 800a67c:	4618      	mov	r0, r3
 800a67e:	f7fe ff27 	bl	80094d0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a684:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a686:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a68a:	f1c3 0207 	rsb	r2, r3, #7
 800a68e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a690:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a694:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a696:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a69a:	2200      	movs	r2, #0
 800a69c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a69e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6a0:	2200      	movs	r2, #0
 800a6a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a6a6:	683a      	ldr	r2, [r7, #0]
 800a6a8:	68f9      	ldr	r1, [r7, #12]
 800a6aa:	69b8      	ldr	r0, [r7, #24]
 800a6ac:	f000 feee 	bl	800b48c <pxPortInitialiseStack>
 800a6b0:	4602      	mov	r2, r0
 800a6b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6b4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a6b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d002      	beq.n	800a6c2 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a6bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a6c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a6c2:	bf00      	nop
 800a6c4:	3720      	adds	r7, #32
 800a6c6:	46bd      	mov	sp, r7
 800a6c8:	bd80      	pop	{r7, pc}
	...

0800a6cc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b082      	sub	sp, #8
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a6d4:	f001 f806 	bl	800b6e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a6d8:	4b2a      	ldr	r3, [pc, #168]	; (800a784 <prvAddNewTaskToReadyList+0xb8>)
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	3301      	adds	r3, #1
 800a6de:	4a29      	ldr	r2, [pc, #164]	; (800a784 <prvAddNewTaskToReadyList+0xb8>)
 800a6e0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a6e2:	4b29      	ldr	r3, [pc, #164]	; (800a788 <prvAddNewTaskToReadyList+0xbc>)
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d109      	bne.n	800a6fe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a6ea:	4a27      	ldr	r2, [pc, #156]	; (800a788 <prvAddNewTaskToReadyList+0xbc>)
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a6f0:	4b24      	ldr	r3, [pc, #144]	; (800a784 <prvAddNewTaskToReadyList+0xb8>)
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	2b01      	cmp	r3, #1
 800a6f6:	d110      	bne.n	800a71a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a6f8:	f000 fbe8 	bl	800aecc <prvInitialiseTaskLists>
 800a6fc:	e00d      	b.n	800a71a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a6fe:	4b23      	ldr	r3, [pc, #140]	; (800a78c <prvAddNewTaskToReadyList+0xc0>)
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	2b00      	cmp	r3, #0
 800a704:	d109      	bne.n	800a71a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a706:	4b20      	ldr	r3, [pc, #128]	; (800a788 <prvAddNewTaskToReadyList+0xbc>)
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a710:	429a      	cmp	r2, r3
 800a712:	d802      	bhi.n	800a71a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a714:	4a1c      	ldr	r2, [pc, #112]	; (800a788 <prvAddNewTaskToReadyList+0xbc>)
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a71a:	4b1d      	ldr	r3, [pc, #116]	; (800a790 <prvAddNewTaskToReadyList+0xc4>)
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	3301      	adds	r3, #1
 800a720:	4a1b      	ldr	r2, [pc, #108]	; (800a790 <prvAddNewTaskToReadyList+0xc4>)
 800a722:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a728:	2201      	movs	r2, #1
 800a72a:	409a      	lsls	r2, r3
 800a72c:	4b19      	ldr	r3, [pc, #100]	; (800a794 <prvAddNewTaskToReadyList+0xc8>)
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	4313      	orrs	r3, r2
 800a732:	4a18      	ldr	r2, [pc, #96]	; (800a794 <prvAddNewTaskToReadyList+0xc8>)
 800a734:	6013      	str	r3, [r2, #0]
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a73a:	4613      	mov	r3, r2
 800a73c:	009b      	lsls	r3, r3, #2
 800a73e:	4413      	add	r3, r2
 800a740:	009b      	lsls	r3, r3, #2
 800a742:	4a15      	ldr	r2, [pc, #84]	; (800a798 <prvAddNewTaskToReadyList+0xcc>)
 800a744:	441a      	add	r2, r3
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	3304      	adds	r3, #4
 800a74a:	4619      	mov	r1, r3
 800a74c:	4610      	mov	r0, r2
 800a74e:	f7fe fecc 	bl	80094ea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a752:	f000 fff7 	bl	800b744 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a756:	4b0d      	ldr	r3, [pc, #52]	; (800a78c <prvAddNewTaskToReadyList+0xc0>)
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d00e      	beq.n	800a77c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a75e:	4b0a      	ldr	r3, [pc, #40]	; (800a788 <prvAddNewTaskToReadyList+0xbc>)
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a768:	429a      	cmp	r2, r3
 800a76a:	d207      	bcs.n	800a77c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a76c:	4b0b      	ldr	r3, [pc, #44]	; (800a79c <prvAddNewTaskToReadyList+0xd0>)
 800a76e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a772:	601a      	str	r2, [r3, #0]
 800a774:	f3bf 8f4f 	dsb	sy
 800a778:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a77c:	bf00      	nop
 800a77e:	3708      	adds	r7, #8
 800a780:	46bd      	mov	sp, r7
 800a782:	bd80      	pop	{r7, pc}
 800a784:	24000418 	.word	0x24000418
 800a788:	24000318 	.word	0x24000318
 800a78c:	24000424 	.word	0x24000424
 800a790:	24000434 	.word	0x24000434
 800a794:	24000420 	.word	0x24000420
 800a798:	2400031c 	.word	0x2400031c
 800a79c:	e000ed04 	.word	0xe000ed04

0800a7a0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a7a0:	b580      	push	{r7, lr}
 800a7a2:	b084      	sub	sp, #16
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d017      	beq.n	800a7e2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a7b2:	4b13      	ldr	r3, [pc, #76]	; (800a800 <vTaskDelay+0x60>)
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d00a      	beq.n	800a7d0 <vTaskDelay+0x30>
	__asm volatile
 800a7ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7be:	f383 8811 	msr	BASEPRI, r3
 800a7c2:	f3bf 8f6f 	isb	sy
 800a7c6:	f3bf 8f4f 	dsb	sy
 800a7ca:	60bb      	str	r3, [r7, #8]
}
 800a7cc:	bf00      	nop
 800a7ce:	e7fe      	b.n	800a7ce <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a7d0:	f000 f87a 	bl	800a8c8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a7d4:	2100      	movs	r1, #0
 800a7d6:	6878      	ldr	r0, [r7, #4]
 800a7d8:	f000 fdf2 	bl	800b3c0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a7dc:	f000 f882 	bl	800a8e4 <xTaskResumeAll>
 800a7e0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d107      	bne.n	800a7f8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a7e8:	4b06      	ldr	r3, [pc, #24]	; (800a804 <vTaskDelay+0x64>)
 800a7ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7ee:	601a      	str	r2, [r3, #0]
 800a7f0:	f3bf 8f4f 	dsb	sy
 800a7f4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a7f8:	bf00      	nop
 800a7fa:	3710      	adds	r7, #16
 800a7fc:	46bd      	mov	sp, r7
 800a7fe:	bd80      	pop	{r7, pc}
 800a800:	24000440 	.word	0x24000440
 800a804:	e000ed04 	.word	0xe000ed04

0800a808 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a808:	b580      	push	{r7, lr}
 800a80a:	b08a      	sub	sp, #40	; 0x28
 800a80c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a80e:	2300      	movs	r3, #0
 800a810:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a812:	2300      	movs	r3, #0
 800a814:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a816:	463a      	mov	r2, r7
 800a818:	1d39      	adds	r1, r7, #4
 800a81a:	f107 0308 	add.w	r3, r7, #8
 800a81e:	4618      	mov	r0, r3
 800a820:	f7f5 ff2a 	bl	8000678 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a824:	6839      	ldr	r1, [r7, #0]
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	68ba      	ldr	r2, [r7, #8]
 800a82a:	9202      	str	r2, [sp, #8]
 800a82c:	9301      	str	r3, [sp, #4]
 800a82e:	2300      	movs	r3, #0
 800a830:	9300      	str	r3, [sp, #0]
 800a832:	2300      	movs	r3, #0
 800a834:	460a      	mov	r2, r1
 800a836:	491e      	ldr	r1, [pc, #120]	; (800a8b0 <vTaskStartScheduler+0xa8>)
 800a838:	481e      	ldr	r0, [pc, #120]	; (800a8b4 <vTaskStartScheduler+0xac>)
 800a83a:	f7ff fe1d 	bl	800a478 <xTaskCreateStatic>
 800a83e:	4603      	mov	r3, r0
 800a840:	4a1d      	ldr	r2, [pc, #116]	; (800a8b8 <vTaskStartScheduler+0xb0>)
 800a842:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a844:	4b1c      	ldr	r3, [pc, #112]	; (800a8b8 <vTaskStartScheduler+0xb0>)
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d002      	beq.n	800a852 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a84c:	2301      	movs	r3, #1
 800a84e:	617b      	str	r3, [r7, #20]
 800a850:	e001      	b.n	800a856 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a852:	2300      	movs	r3, #0
 800a854:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a856:	697b      	ldr	r3, [r7, #20]
 800a858:	2b01      	cmp	r3, #1
 800a85a:	d116      	bne.n	800a88a <vTaskStartScheduler+0x82>
	__asm volatile
 800a85c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a860:	f383 8811 	msr	BASEPRI, r3
 800a864:	f3bf 8f6f 	isb	sy
 800a868:	f3bf 8f4f 	dsb	sy
 800a86c:	613b      	str	r3, [r7, #16]
}
 800a86e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a870:	4b12      	ldr	r3, [pc, #72]	; (800a8bc <vTaskStartScheduler+0xb4>)
 800a872:	f04f 32ff 	mov.w	r2, #4294967295
 800a876:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a878:	4b11      	ldr	r3, [pc, #68]	; (800a8c0 <vTaskStartScheduler+0xb8>)
 800a87a:	2201      	movs	r2, #1
 800a87c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a87e:	4b11      	ldr	r3, [pc, #68]	; (800a8c4 <vTaskStartScheduler+0xbc>)
 800a880:	2200      	movs	r2, #0
 800a882:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a884:	f000 fe8c 	bl	800b5a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a888:	e00e      	b.n	800a8a8 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a88a:	697b      	ldr	r3, [r7, #20]
 800a88c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a890:	d10a      	bne.n	800a8a8 <vTaskStartScheduler+0xa0>
	__asm volatile
 800a892:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a896:	f383 8811 	msr	BASEPRI, r3
 800a89a:	f3bf 8f6f 	isb	sy
 800a89e:	f3bf 8f4f 	dsb	sy
 800a8a2:	60fb      	str	r3, [r7, #12]
}
 800a8a4:	bf00      	nop
 800a8a6:	e7fe      	b.n	800a8a6 <vTaskStartScheduler+0x9e>
}
 800a8a8:	bf00      	nop
 800a8aa:	3718      	adds	r7, #24
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	bd80      	pop	{r7, pc}
 800a8b0:	08017ffc 	.word	0x08017ffc
 800a8b4:	0800ae9d 	.word	0x0800ae9d
 800a8b8:	2400043c 	.word	0x2400043c
 800a8bc:	24000438 	.word	0x24000438
 800a8c0:	24000424 	.word	0x24000424
 800a8c4:	2400041c 	.word	0x2400041c

0800a8c8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a8c8:	b480      	push	{r7}
 800a8ca:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a8cc:	4b04      	ldr	r3, [pc, #16]	; (800a8e0 <vTaskSuspendAll+0x18>)
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	3301      	adds	r3, #1
 800a8d2:	4a03      	ldr	r2, [pc, #12]	; (800a8e0 <vTaskSuspendAll+0x18>)
 800a8d4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a8d6:	bf00      	nop
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8de:	4770      	bx	lr
 800a8e0:	24000440 	.word	0x24000440

0800a8e4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	b084      	sub	sp, #16
 800a8e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a8f2:	4b41      	ldr	r3, [pc, #260]	; (800a9f8 <xTaskResumeAll+0x114>)
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d10a      	bne.n	800a910 <xTaskResumeAll+0x2c>
	__asm volatile
 800a8fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8fe:	f383 8811 	msr	BASEPRI, r3
 800a902:	f3bf 8f6f 	isb	sy
 800a906:	f3bf 8f4f 	dsb	sy
 800a90a:	603b      	str	r3, [r7, #0]
}
 800a90c:	bf00      	nop
 800a90e:	e7fe      	b.n	800a90e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a910:	f000 fee8 	bl	800b6e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a914:	4b38      	ldr	r3, [pc, #224]	; (800a9f8 <xTaskResumeAll+0x114>)
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	3b01      	subs	r3, #1
 800a91a:	4a37      	ldr	r2, [pc, #220]	; (800a9f8 <xTaskResumeAll+0x114>)
 800a91c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a91e:	4b36      	ldr	r3, [pc, #216]	; (800a9f8 <xTaskResumeAll+0x114>)
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	2b00      	cmp	r3, #0
 800a924:	d161      	bne.n	800a9ea <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a926:	4b35      	ldr	r3, [pc, #212]	; (800a9fc <xTaskResumeAll+0x118>)
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d05d      	beq.n	800a9ea <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a92e:	e02e      	b.n	800a98e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a930:	4b33      	ldr	r3, [pc, #204]	; (800aa00 <xTaskResumeAll+0x11c>)
 800a932:	68db      	ldr	r3, [r3, #12]
 800a934:	68db      	ldr	r3, [r3, #12]
 800a936:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	3318      	adds	r3, #24
 800a93c:	4618      	mov	r0, r3
 800a93e:	f7fe fe31 	bl	80095a4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	3304      	adds	r3, #4
 800a946:	4618      	mov	r0, r3
 800a948:	f7fe fe2c 	bl	80095a4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a950:	2201      	movs	r2, #1
 800a952:	409a      	lsls	r2, r3
 800a954:	4b2b      	ldr	r3, [pc, #172]	; (800aa04 <xTaskResumeAll+0x120>)
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	4313      	orrs	r3, r2
 800a95a:	4a2a      	ldr	r2, [pc, #168]	; (800aa04 <xTaskResumeAll+0x120>)
 800a95c:	6013      	str	r3, [r2, #0]
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a962:	4613      	mov	r3, r2
 800a964:	009b      	lsls	r3, r3, #2
 800a966:	4413      	add	r3, r2
 800a968:	009b      	lsls	r3, r3, #2
 800a96a:	4a27      	ldr	r2, [pc, #156]	; (800aa08 <xTaskResumeAll+0x124>)
 800a96c:	441a      	add	r2, r3
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	3304      	adds	r3, #4
 800a972:	4619      	mov	r1, r3
 800a974:	4610      	mov	r0, r2
 800a976:	f7fe fdb8 	bl	80094ea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a97e:	4b23      	ldr	r3, [pc, #140]	; (800aa0c <xTaskResumeAll+0x128>)
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a984:	429a      	cmp	r2, r3
 800a986:	d302      	bcc.n	800a98e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800a988:	4b21      	ldr	r3, [pc, #132]	; (800aa10 <xTaskResumeAll+0x12c>)
 800a98a:	2201      	movs	r2, #1
 800a98c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a98e:	4b1c      	ldr	r3, [pc, #112]	; (800aa00 <xTaskResumeAll+0x11c>)
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	2b00      	cmp	r3, #0
 800a994:	d1cc      	bne.n	800a930 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d001      	beq.n	800a9a0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a99c:	f000 fb34 	bl	800b008 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a9a0:	4b1c      	ldr	r3, [pc, #112]	; (800aa14 <xTaskResumeAll+0x130>)
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d010      	beq.n	800a9ce <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a9ac:	f000 f858 	bl	800aa60 <xTaskIncrementTick>
 800a9b0:	4603      	mov	r3, r0
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d002      	beq.n	800a9bc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800a9b6:	4b16      	ldr	r3, [pc, #88]	; (800aa10 <xTaskResumeAll+0x12c>)
 800a9b8:	2201      	movs	r2, #1
 800a9ba:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	3b01      	subs	r3, #1
 800a9c0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d1f1      	bne.n	800a9ac <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800a9c8:	4b12      	ldr	r3, [pc, #72]	; (800aa14 <xTaskResumeAll+0x130>)
 800a9ca:	2200      	movs	r2, #0
 800a9cc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a9ce:	4b10      	ldr	r3, [pc, #64]	; (800aa10 <xTaskResumeAll+0x12c>)
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d009      	beq.n	800a9ea <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a9d6:	2301      	movs	r3, #1
 800a9d8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a9da:	4b0f      	ldr	r3, [pc, #60]	; (800aa18 <xTaskResumeAll+0x134>)
 800a9dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9e0:	601a      	str	r2, [r3, #0]
 800a9e2:	f3bf 8f4f 	dsb	sy
 800a9e6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a9ea:	f000 feab 	bl	800b744 <vPortExitCritical>

	return xAlreadyYielded;
 800a9ee:	68bb      	ldr	r3, [r7, #8]
}
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	3710      	adds	r7, #16
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	bd80      	pop	{r7, pc}
 800a9f8:	24000440 	.word	0x24000440
 800a9fc:	24000418 	.word	0x24000418
 800aa00:	240003d8 	.word	0x240003d8
 800aa04:	24000420 	.word	0x24000420
 800aa08:	2400031c 	.word	0x2400031c
 800aa0c:	24000318 	.word	0x24000318
 800aa10:	2400042c 	.word	0x2400042c
 800aa14:	24000428 	.word	0x24000428
 800aa18:	e000ed04 	.word	0xe000ed04

0800aa1c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800aa1c:	b480      	push	{r7}
 800aa1e:	b083      	sub	sp, #12
 800aa20:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800aa22:	4b05      	ldr	r3, [pc, #20]	; (800aa38 <xTaskGetTickCount+0x1c>)
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800aa28:	687b      	ldr	r3, [r7, #4]
}
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	370c      	adds	r7, #12
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa34:	4770      	bx	lr
 800aa36:	bf00      	nop
 800aa38:	2400041c 	.word	0x2400041c

0800aa3c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800aa3c:	b580      	push	{r7, lr}
 800aa3e:	b082      	sub	sp, #8
 800aa40:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800aa42:	f000 ff31 	bl	800b8a8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800aa46:	2300      	movs	r3, #0
 800aa48:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800aa4a:	4b04      	ldr	r3, [pc, #16]	; (800aa5c <xTaskGetTickCountFromISR+0x20>)
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800aa50:	683b      	ldr	r3, [r7, #0]
}
 800aa52:	4618      	mov	r0, r3
 800aa54:	3708      	adds	r7, #8
 800aa56:	46bd      	mov	sp, r7
 800aa58:	bd80      	pop	{r7, pc}
 800aa5a:	bf00      	nop
 800aa5c:	2400041c 	.word	0x2400041c

0800aa60 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800aa60:	b580      	push	{r7, lr}
 800aa62:	b086      	sub	sp, #24
 800aa64:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800aa66:	2300      	movs	r3, #0
 800aa68:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aa6a:	4b4e      	ldr	r3, [pc, #312]	; (800aba4 <xTaskIncrementTick+0x144>)
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	f040 808e 	bne.w	800ab90 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800aa74:	4b4c      	ldr	r3, [pc, #304]	; (800aba8 <xTaskIncrementTick+0x148>)
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	3301      	adds	r3, #1
 800aa7a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800aa7c:	4a4a      	ldr	r2, [pc, #296]	; (800aba8 <xTaskIncrementTick+0x148>)
 800aa7e:	693b      	ldr	r3, [r7, #16]
 800aa80:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800aa82:	693b      	ldr	r3, [r7, #16]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d120      	bne.n	800aaca <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800aa88:	4b48      	ldr	r3, [pc, #288]	; (800abac <xTaskIncrementTick+0x14c>)
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d00a      	beq.n	800aaa8 <xTaskIncrementTick+0x48>
	__asm volatile
 800aa92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa96:	f383 8811 	msr	BASEPRI, r3
 800aa9a:	f3bf 8f6f 	isb	sy
 800aa9e:	f3bf 8f4f 	dsb	sy
 800aaa2:	603b      	str	r3, [r7, #0]
}
 800aaa4:	bf00      	nop
 800aaa6:	e7fe      	b.n	800aaa6 <xTaskIncrementTick+0x46>
 800aaa8:	4b40      	ldr	r3, [pc, #256]	; (800abac <xTaskIncrementTick+0x14c>)
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	60fb      	str	r3, [r7, #12]
 800aaae:	4b40      	ldr	r3, [pc, #256]	; (800abb0 <xTaskIncrementTick+0x150>)
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	4a3e      	ldr	r2, [pc, #248]	; (800abac <xTaskIncrementTick+0x14c>)
 800aab4:	6013      	str	r3, [r2, #0]
 800aab6:	4a3e      	ldr	r2, [pc, #248]	; (800abb0 <xTaskIncrementTick+0x150>)
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	6013      	str	r3, [r2, #0]
 800aabc:	4b3d      	ldr	r3, [pc, #244]	; (800abb4 <xTaskIncrementTick+0x154>)
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	3301      	adds	r3, #1
 800aac2:	4a3c      	ldr	r2, [pc, #240]	; (800abb4 <xTaskIncrementTick+0x154>)
 800aac4:	6013      	str	r3, [r2, #0]
 800aac6:	f000 fa9f 	bl	800b008 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800aaca:	4b3b      	ldr	r3, [pc, #236]	; (800abb8 <xTaskIncrementTick+0x158>)
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	693a      	ldr	r2, [r7, #16]
 800aad0:	429a      	cmp	r2, r3
 800aad2:	d348      	bcc.n	800ab66 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aad4:	4b35      	ldr	r3, [pc, #212]	; (800abac <xTaskIncrementTick+0x14c>)
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d104      	bne.n	800aae8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aade:	4b36      	ldr	r3, [pc, #216]	; (800abb8 <xTaskIncrementTick+0x158>)
 800aae0:	f04f 32ff 	mov.w	r2, #4294967295
 800aae4:	601a      	str	r2, [r3, #0]
					break;
 800aae6:	e03e      	b.n	800ab66 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aae8:	4b30      	ldr	r3, [pc, #192]	; (800abac <xTaskIncrementTick+0x14c>)
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	68db      	ldr	r3, [r3, #12]
 800aaee:	68db      	ldr	r3, [r3, #12]
 800aaf0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800aaf2:	68bb      	ldr	r3, [r7, #8]
 800aaf4:	685b      	ldr	r3, [r3, #4]
 800aaf6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800aaf8:	693a      	ldr	r2, [r7, #16]
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	429a      	cmp	r2, r3
 800aafe:	d203      	bcs.n	800ab08 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ab00:	4a2d      	ldr	r2, [pc, #180]	; (800abb8 <xTaskIncrementTick+0x158>)
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ab06:	e02e      	b.n	800ab66 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ab08:	68bb      	ldr	r3, [r7, #8]
 800ab0a:	3304      	adds	r3, #4
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	f7fe fd49 	bl	80095a4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ab12:	68bb      	ldr	r3, [r7, #8]
 800ab14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d004      	beq.n	800ab24 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ab1a:	68bb      	ldr	r3, [r7, #8]
 800ab1c:	3318      	adds	r3, #24
 800ab1e:	4618      	mov	r0, r3
 800ab20:	f7fe fd40 	bl	80095a4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ab24:	68bb      	ldr	r3, [r7, #8]
 800ab26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab28:	2201      	movs	r2, #1
 800ab2a:	409a      	lsls	r2, r3
 800ab2c:	4b23      	ldr	r3, [pc, #140]	; (800abbc <xTaskIncrementTick+0x15c>)
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	4313      	orrs	r3, r2
 800ab32:	4a22      	ldr	r2, [pc, #136]	; (800abbc <xTaskIncrementTick+0x15c>)
 800ab34:	6013      	str	r3, [r2, #0]
 800ab36:	68bb      	ldr	r3, [r7, #8]
 800ab38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab3a:	4613      	mov	r3, r2
 800ab3c:	009b      	lsls	r3, r3, #2
 800ab3e:	4413      	add	r3, r2
 800ab40:	009b      	lsls	r3, r3, #2
 800ab42:	4a1f      	ldr	r2, [pc, #124]	; (800abc0 <xTaskIncrementTick+0x160>)
 800ab44:	441a      	add	r2, r3
 800ab46:	68bb      	ldr	r3, [r7, #8]
 800ab48:	3304      	adds	r3, #4
 800ab4a:	4619      	mov	r1, r3
 800ab4c:	4610      	mov	r0, r2
 800ab4e:	f7fe fccc 	bl	80094ea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ab52:	68bb      	ldr	r3, [r7, #8]
 800ab54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab56:	4b1b      	ldr	r3, [pc, #108]	; (800abc4 <xTaskIncrementTick+0x164>)
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab5c:	429a      	cmp	r2, r3
 800ab5e:	d3b9      	bcc.n	800aad4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800ab60:	2301      	movs	r3, #1
 800ab62:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ab64:	e7b6      	b.n	800aad4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ab66:	4b17      	ldr	r3, [pc, #92]	; (800abc4 <xTaskIncrementTick+0x164>)
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab6c:	4914      	ldr	r1, [pc, #80]	; (800abc0 <xTaskIncrementTick+0x160>)
 800ab6e:	4613      	mov	r3, r2
 800ab70:	009b      	lsls	r3, r3, #2
 800ab72:	4413      	add	r3, r2
 800ab74:	009b      	lsls	r3, r3, #2
 800ab76:	440b      	add	r3, r1
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	2b01      	cmp	r3, #1
 800ab7c:	d901      	bls.n	800ab82 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800ab7e:	2301      	movs	r3, #1
 800ab80:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ab82:	4b11      	ldr	r3, [pc, #68]	; (800abc8 <xTaskIncrementTick+0x168>)
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d007      	beq.n	800ab9a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800ab8a:	2301      	movs	r3, #1
 800ab8c:	617b      	str	r3, [r7, #20]
 800ab8e:	e004      	b.n	800ab9a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ab90:	4b0e      	ldr	r3, [pc, #56]	; (800abcc <xTaskIncrementTick+0x16c>)
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	3301      	adds	r3, #1
 800ab96:	4a0d      	ldr	r2, [pc, #52]	; (800abcc <xTaskIncrementTick+0x16c>)
 800ab98:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ab9a:	697b      	ldr	r3, [r7, #20]
}
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	3718      	adds	r7, #24
 800aba0:	46bd      	mov	sp, r7
 800aba2:	bd80      	pop	{r7, pc}
 800aba4:	24000440 	.word	0x24000440
 800aba8:	2400041c 	.word	0x2400041c
 800abac:	240003d0 	.word	0x240003d0
 800abb0:	240003d4 	.word	0x240003d4
 800abb4:	24000430 	.word	0x24000430
 800abb8:	24000438 	.word	0x24000438
 800abbc:	24000420 	.word	0x24000420
 800abc0:	2400031c 	.word	0x2400031c
 800abc4:	24000318 	.word	0x24000318
 800abc8:	2400042c 	.word	0x2400042c
 800abcc:	24000428 	.word	0x24000428

0800abd0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800abd0:	b480      	push	{r7}
 800abd2:	b087      	sub	sp, #28
 800abd4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800abd6:	4b27      	ldr	r3, [pc, #156]	; (800ac74 <vTaskSwitchContext+0xa4>)
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d003      	beq.n	800abe6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800abde:	4b26      	ldr	r3, [pc, #152]	; (800ac78 <vTaskSwitchContext+0xa8>)
 800abe0:	2201      	movs	r2, #1
 800abe2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800abe4:	e03f      	b.n	800ac66 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800abe6:	4b24      	ldr	r3, [pc, #144]	; (800ac78 <vTaskSwitchContext+0xa8>)
 800abe8:	2200      	movs	r2, #0
 800abea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800abec:	4b23      	ldr	r3, [pc, #140]	; (800ac7c <vTaskSwitchContext+0xac>)
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	fab3 f383 	clz	r3, r3
 800abf8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800abfa:	7afb      	ldrb	r3, [r7, #11]
 800abfc:	f1c3 031f 	rsb	r3, r3, #31
 800ac00:	617b      	str	r3, [r7, #20]
 800ac02:	491f      	ldr	r1, [pc, #124]	; (800ac80 <vTaskSwitchContext+0xb0>)
 800ac04:	697a      	ldr	r2, [r7, #20]
 800ac06:	4613      	mov	r3, r2
 800ac08:	009b      	lsls	r3, r3, #2
 800ac0a:	4413      	add	r3, r2
 800ac0c:	009b      	lsls	r3, r3, #2
 800ac0e:	440b      	add	r3, r1
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d10a      	bne.n	800ac2c <vTaskSwitchContext+0x5c>
	__asm volatile
 800ac16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac1a:	f383 8811 	msr	BASEPRI, r3
 800ac1e:	f3bf 8f6f 	isb	sy
 800ac22:	f3bf 8f4f 	dsb	sy
 800ac26:	607b      	str	r3, [r7, #4]
}
 800ac28:	bf00      	nop
 800ac2a:	e7fe      	b.n	800ac2a <vTaskSwitchContext+0x5a>
 800ac2c:	697a      	ldr	r2, [r7, #20]
 800ac2e:	4613      	mov	r3, r2
 800ac30:	009b      	lsls	r3, r3, #2
 800ac32:	4413      	add	r3, r2
 800ac34:	009b      	lsls	r3, r3, #2
 800ac36:	4a12      	ldr	r2, [pc, #72]	; (800ac80 <vTaskSwitchContext+0xb0>)
 800ac38:	4413      	add	r3, r2
 800ac3a:	613b      	str	r3, [r7, #16]
 800ac3c:	693b      	ldr	r3, [r7, #16]
 800ac3e:	685b      	ldr	r3, [r3, #4]
 800ac40:	685a      	ldr	r2, [r3, #4]
 800ac42:	693b      	ldr	r3, [r7, #16]
 800ac44:	605a      	str	r2, [r3, #4]
 800ac46:	693b      	ldr	r3, [r7, #16]
 800ac48:	685a      	ldr	r2, [r3, #4]
 800ac4a:	693b      	ldr	r3, [r7, #16]
 800ac4c:	3308      	adds	r3, #8
 800ac4e:	429a      	cmp	r2, r3
 800ac50:	d104      	bne.n	800ac5c <vTaskSwitchContext+0x8c>
 800ac52:	693b      	ldr	r3, [r7, #16]
 800ac54:	685b      	ldr	r3, [r3, #4]
 800ac56:	685a      	ldr	r2, [r3, #4]
 800ac58:	693b      	ldr	r3, [r7, #16]
 800ac5a:	605a      	str	r2, [r3, #4]
 800ac5c:	693b      	ldr	r3, [r7, #16]
 800ac5e:	685b      	ldr	r3, [r3, #4]
 800ac60:	68db      	ldr	r3, [r3, #12]
 800ac62:	4a08      	ldr	r2, [pc, #32]	; (800ac84 <vTaskSwitchContext+0xb4>)
 800ac64:	6013      	str	r3, [r2, #0]
}
 800ac66:	bf00      	nop
 800ac68:	371c      	adds	r7, #28
 800ac6a:	46bd      	mov	sp, r7
 800ac6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac70:	4770      	bx	lr
 800ac72:	bf00      	nop
 800ac74:	24000440 	.word	0x24000440
 800ac78:	2400042c 	.word	0x2400042c
 800ac7c:	24000420 	.word	0x24000420
 800ac80:	2400031c 	.word	0x2400031c
 800ac84:	24000318 	.word	0x24000318

0800ac88 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b084      	sub	sp, #16
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
 800ac90:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d10a      	bne.n	800acae <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800ac98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac9c:	f383 8811 	msr	BASEPRI, r3
 800aca0:	f3bf 8f6f 	isb	sy
 800aca4:	f3bf 8f4f 	dsb	sy
 800aca8:	60fb      	str	r3, [r7, #12]
}
 800acaa:	bf00      	nop
 800acac:	e7fe      	b.n	800acac <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800acae:	4b07      	ldr	r3, [pc, #28]	; (800accc <vTaskPlaceOnEventList+0x44>)
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	3318      	adds	r3, #24
 800acb4:	4619      	mov	r1, r3
 800acb6:	6878      	ldr	r0, [r7, #4]
 800acb8:	f7fe fc3b 	bl	8009532 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800acbc:	2101      	movs	r1, #1
 800acbe:	6838      	ldr	r0, [r7, #0]
 800acc0:	f000 fb7e 	bl	800b3c0 <prvAddCurrentTaskToDelayedList>
}
 800acc4:	bf00      	nop
 800acc6:	3710      	adds	r7, #16
 800acc8:	46bd      	mov	sp, r7
 800acca:	bd80      	pop	{r7, pc}
 800accc:	24000318 	.word	0x24000318

0800acd0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800acd0:	b580      	push	{r7, lr}
 800acd2:	b086      	sub	sp, #24
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	68db      	ldr	r3, [r3, #12]
 800acdc:	68db      	ldr	r3, [r3, #12]
 800acde:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ace0:	693b      	ldr	r3, [r7, #16]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d10a      	bne.n	800acfc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800ace6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acea:	f383 8811 	msr	BASEPRI, r3
 800acee:	f3bf 8f6f 	isb	sy
 800acf2:	f3bf 8f4f 	dsb	sy
 800acf6:	60fb      	str	r3, [r7, #12]
}
 800acf8:	bf00      	nop
 800acfa:	e7fe      	b.n	800acfa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800acfc:	693b      	ldr	r3, [r7, #16]
 800acfe:	3318      	adds	r3, #24
 800ad00:	4618      	mov	r0, r3
 800ad02:	f7fe fc4f 	bl	80095a4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ad06:	4b1d      	ldr	r3, [pc, #116]	; (800ad7c <xTaskRemoveFromEventList+0xac>)
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d11c      	bne.n	800ad48 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ad0e:	693b      	ldr	r3, [r7, #16]
 800ad10:	3304      	adds	r3, #4
 800ad12:	4618      	mov	r0, r3
 800ad14:	f7fe fc46 	bl	80095a4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ad18:	693b      	ldr	r3, [r7, #16]
 800ad1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad1c:	2201      	movs	r2, #1
 800ad1e:	409a      	lsls	r2, r3
 800ad20:	4b17      	ldr	r3, [pc, #92]	; (800ad80 <xTaskRemoveFromEventList+0xb0>)
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	4313      	orrs	r3, r2
 800ad26:	4a16      	ldr	r2, [pc, #88]	; (800ad80 <xTaskRemoveFromEventList+0xb0>)
 800ad28:	6013      	str	r3, [r2, #0]
 800ad2a:	693b      	ldr	r3, [r7, #16]
 800ad2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad2e:	4613      	mov	r3, r2
 800ad30:	009b      	lsls	r3, r3, #2
 800ad32:	4413      	add	r3, r2
 800ad34:	009b      	lsls	r3, r3, #2
 800ad36:	4a13      	ldr	r2, [pc, #76]	; (800ad84 <xTaskRemoveFromEventList+0xb4>)
 800ad38:	441a      	add	r2, r3
 800ad3a:	693b      	ldr	r3, [r7, #16]
 800ad3c:	3304      	adds	r3, #4
 800ad3e:	4619      	mov	r1, r3
 800ad40:	4610      	mov	r0, r2
 800ad42:	f7fe fbd2 	bl	80094ea <vListInsertEnd>
 800ad46:	e005      	b.n	800ad54 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ad48:	693b      	ldr	r3, [r7, #16]
 800ad4a:	3318      	adds	r3, #24
 800ad4c:	4619      	mov	r1, r3
 800ad4e:	480e      	ldr	r0, [pc, #56]	; (800ad88 <xTaskRemoveFromEventList+0xb8>)
 800ad50:	f7fe fbcb 	bl	80094ea <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ad54:	693b      	ldr	r3, [r7, #16]
 800ad56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad58:	4b0c      	ldr	r3, [pc, #48]	; (800ad8c <xTaskRemoveFromEventList+0xbc>)
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad5e:	429a      	cmp	r2, r3
 800ad60:	d905      	bls.n	800ad6e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ad62:	2301      	movs	r3, #1
 800ad64:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ad66:	4b0a      	ldr	r3, [pc, #40]	; (800ad90 <xTaskRemoveFromEventList+0xc0>)
 800ad68:	2201      	movs	r2, #1
 800ad6a:	601a      	str	r2, [r3, #0]
 800ad6c:	e001      	b.n	800ad72 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800ad6e:	2300      	movs	r3, #0
 800ad70:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ad72:	697b      	ldr	r3, [r7, #20]
}
 800ad74:	4618      	mov	r0, r3
 800ad76:	3718      	adds	r7, #24
 800ad78:	46bd      	mov	sp, r7
 800ad7a:	bd80      	pop	{r7, pc}
 800ad7c:	24000440 	.word	0x24000440
 800ad80:	24000420 	.word	0x24000420
 800ad84:	2400031c 	.word	0x2400031c
 800ad88:	240003d8 	.word	0x240003d8
 800ad8c:	24000318 	.word	0x24000318
 800ad90:	2400042c 	.word	0x2400042c

0800ad94 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ad94:	b480      	push	{r7}
 800ad96:	b083      	sub	sp, #12
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ad9c:	4b06      	ldr	r3, [pc, #24]	; (800adb8 <vTaskInternalSetTimeOutState+0x24>)
 800ad9e:	681a      	ldr	r2, [r3, #0]
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ada4:	4b05      	ldr	r3, [pc, #20]	; (800adbc <vTaskInternalSetTimeOutState+0x28>)
 800ada6:	681a      	ldr	r2, [r3, #0]
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	605a      	str	r2, [r3, #4]
}
 800adac:	bf00      	nop
 800adae:	370c      	adds	r7, #12
 800adb0:	46bd      	mov	sp, r7
 800adb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb6:	4770      	bx	lr
 800adb8:	24000430 	.word	0x24000430
 800adbc:	2400041c 	.word	0x2400041c

0800adc0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800adc0:	b580      	push	{r7, lr}
 800adc2:	b088      	sub	sp, #32
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	6078      	str	r0, [r7, #4]
 800adc8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d10a      	bne.n	800ade6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800add0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800add4:	f383 8811 	msr	BASEPRI, r3
 800add8:	f3bf 8f6f 	isb	sy
 800addc:	f3bf 8f4f 	dsb	sy
 800ade0:	613b      	str	r3, [r7, #16]
}
 800ade2:	bf00      	nop
 800ade4:	e7fe      	b.n	800ade4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ade6:	683b      	ldr	r3, [r7, #0]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d10a      	bne.n	800ae02 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800adec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adf0:	f383 8811 	msr	BASEPRI, r3
 800adf4:	f3bf 8f6f 	isb	sy
 800adf8:	f3bf 8f4f 	dsb	sy
 800adfc:	60fb      	str	r3, [r7, #12]
}
 800adfe:	bf00      	nop
 800ae00:	e7fe      	b.n	800ae00 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800ae02:	f000 fc6f 	bl	800b6e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ae06:	4b1d      	ldr	r3, [pc, #116]	; (800ae7c <xTaskCheckForTimeOut+0xbc>)
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	685b      	ldr	r3, [r3, #4]
 800ae10:	69ba      	ldr	r2, [r7, #24]
 800ae12:	1ad3      	subs	r3, r2, r3
 800ae14:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ae16:	683b      	ldr	r3, [r7, #0]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae1e:	d102      	bne.n	800ae26 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ae20:	2300      	movs	r3, #0
 800ae22:	61fb      	str	r3, [r7, #28]
 800ae24:	e023      	b.n	800ae6e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681a      	ldr	r2, [r3, #0]
 800ae2a:	4b15      	ldr	r3, [pc, #84]	; (800ae80 <xTaskCheckForTimeOut+0xc0>)
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	429a      	cmp	r2, r3
 800ae30:	d007      	beq.n	800ae42 <xTaskCheckForTimeOut+0x82>
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	685b      	ldr	r3, [r3, #4]
 800ae36:	69ba      	ldr	r2, [r7, #24]
 800ae38:	429a      	cmp	r2, r3
 800ae3a:	d302      	bcc.n	800ae42 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ae3c:	2301      	movs	r3, #1
 800ae3e:	61fb      	str	r3, [r7, #28]
 800ae40:	e015      	b.n	800ae6e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ae42:	683b      	ldr	r3, [r7, #0]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	697a      	ldr	r2, [r7, #20]
 800ae48:	429a      	cmp	r2, r3
 800ae4a:	d20b      	bcs.n	800ae64 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ae4c:	683b      	ldr	r3, [r7, #0]
 800ae4e:	681a      	ldr	r2, [r3, #0]
 800ae50:	697b      	ldr	r3, [r7, #20]
 800ae52:	1ad2      	subs	r2, r2, r3
 800ae54:	683b      	ldr	r3, [r7, #0]
 800ae56:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ae58:	6878      	ldr	r0, [r7, #4]
 800ae5a:	f7ff ff9b 	bl	800ad94 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ae5e:	2300      	movs	r3, #0
 800ae60:	61fb      	str	r3, [r7, #28]
 800ae62:	e004      	b.n	800ae6e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800ae64:	683b      	ldr	r3, [r7, #0]
 800ae66:	2200      	movs	r2, #0
 800ae68:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ae6a:	2301      	movs	r3, #1
 800ae6c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ae6e:	f000 fc69 	bl	800b744 <vPortExitCritical>

	return xReturn;
 800ae72:	69fb      	ldr	r3, [r7, #28]
}
 800ae74:	4618      	mov	r0, r3
 800ae76:	3720      	adds	r7, #32
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	bd80      	pop	{r7, pc}
 800ae7c:	2400041c 	.word	0x2400041c
 800ae80:	24000430 	.word	0x24000430

0800ae84 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ae84:	b480      	push	{r7}
 800ae86:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ae88:	4b03      	ldr	r3, [pc, #12]	; (800ae98 <vTaskMissedYield+0x14>)
 800ae8a:	2201      	movs	r2, #1
 800ae8c:	601a      	str	r2, [r3, #0]
}
 800ae8e:	bf00      	nop
 800ae90:	46bd      	mov	sp, r7
 800ae92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae96:	4770      	bx	lr
 800ae98:	2400042c 	.word	0x2400042c

0800ae9c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ae9c:	b580      	push	{r7, lr}
 800ae9e:	b082      	sub	sp, #8
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800aea4:	f000 f852 	bl	800af4c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800aea8:	4b06      	ldr	r3, [pc, #24]	; (800aec4 <prvIdleTask+0x28>)
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	2b01      	cmp	r3, #1
 800aeae:	d9f9      	bls.n	800aea4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800aeb0:	4b05      	ldr	r3, [pc, #20]	; (800aec8 <prvIdleTask+0x2c>)
 800aeb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aeb6:	601a      	str	r2, [r3, #0]
 800aeb8:	f3bf 8f4f 	dsb	sy
 800aebc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800aec0:	e7f0      	b.n	800aea4 <prvIdleTask+0x8>
 800aec2:	bf00      	nop
 800aec4:	2400031c 	.word	0x2400031c
 800aec8:	e000ed04 	.word	0xe000ed04

0800aecc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800aecc:	b580      	push	{r7, lr}
 800aece:	b082      	sub	sp, #8
 800aed0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800aed2:	2300      	movs	r3, #0
 800aed4:	607b      	str	r3, [r7, #4]
 800aed6:	e00c      	b.n	800aef2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800aed8:	687a      	ldr	r2, [r7, #4]
 800aeda:	4613      	mov	r3, r2
 800aedc:	009b      	lsls	r3, r3, #2
 800aede:	4413      	add	r3, r2
 800aee0:	009b      	lsls	r3, r3, #2
 800aee2:	4a12      	ldr	r2, [pc, #72]	; (800af2c <prvInitialiseTaskLists+0x60>)
 800aee4:	4413      	add	r3, r2
 800aee6:	4618      	mov	r0, r3
 800aee8:	f7fe fad2 	bl	8009490 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	3301      	adds	r3, #1
 800aef0:	607b      	str	r3, [r7, #4]
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	2b06      	cmp	r3, #6
 800aef6:	d9ef      	bls.n	800aed8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800aef8:	480d      	ldr	r0, [pc, #52]	; (800af30 <prvInitialiseTaskLists+0x64>)
 800aefa:	f7fe fac9 	bl	8009490 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800aefe:	480d      	ldr	r0, [pc, #52]	; (800af34 <prvInitialiseTaskLists+0x68>)
 800af00:	f7fe fac6 	bl	8009490 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800af04:	480c      	ldr	r0, [pc, #48]	; (800af38 <prvInitialiseTaskLists+0x6c>)
 800af06:	f7fe fac3 	bl	8009490 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800af0a:	480c      	ldr	r0, [pc, #48]	; (800af3c <prvInitialiseTaskLists+0x70>)
 800af0c:	f7fe fac0 	bl	8009490 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800af10:	480b      	ldr	r0, [pc, #44]	; (800af40 <prvInitialiseTaskLists+0x74>)
 800af12:	f7fe fabd 	bl	8009490 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800af16:	4b0b      	ldr	r3, [pc, #44]	; (800af44 <prvInitialiseTaskLists+0x78>)
 800af18:	4a05      	ldr	r2, [pc, #20]	; (800af30 <prvInitialiseTaskLists+0x64>)
 800af1a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800af1c:	4b0a      	ldr	r3, [pc, #40]	; (800af48 <prvInitialiseTaskLists+0x7c>)
 800af1e:	4a05      	ldr	r2, [pc, #20]	; (800af34 <prvInitialiseTaskLists+0x68>)
 800af20:	601a      	str	r2, [r3, #0]
}
 800af22:	bf00      	nop
 800af24:	3708      	adds	r7, #8
 800af26:	46bd      	mov	sp, r7
 800af28:	bd80      	pop	{r7, pc}
 800af2a:	bf00      	nop
 800af2c:	2400031c 	.word	0x2400031c
 800af30:	240003a8 	.word	0x240003a8
 800af34:	240003bc 	.word	0x240003bc
 800af38:	240003d8 	.word	0x240003d8
 800af3c:	240003ec 	.word	0x240003ec
 800af40:	24000404 	.word	0x24000404
 800af44:	240003d0 	.word	0x240003d0
 800af48:	240003d4 	.word	0x240003d4

0800af4c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800af4c:	b580      	push	{r7, lr}
 800af4e:	b082      	sub	sp, #8
 800af50:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800af52:	e019      	b.n	800af88 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800af54:	f000 fbc6 	bl	800b6e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af58:	4b10      	ldr	r3, [pc, #64]	; (800af9c <prvCheckTasksWaitingTermination+0x50>)
 800af5a:	68db      	ldr	r3, [r3, #12]
 800af5c:	68db      	ldr	r3, [r3, #12]
 800af5e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	3304      	adds	r3, #4
 800af64:	4618      	mov	r0, r3
 800af66:	f7fe fb1d 	bl	80095a4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800af6a:	4b0d      	ldr	r3, [pc, #52]	; (800afa0 <prvCheckTasksWaitingTermination+0x54>)
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	3b01      	subs	r3, #1
 800af70:	4a0b      	ldr	r2, [pc, #44]	; (800afa0 <prvCheckTasksWaitingTermination+0x54>)
 800af72:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800af74:	4b0b      	ldr	r3, [pc, #44]	; (800afa4 <prvCheckTasksWaitingTermination+0x58>)
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	3b01      	subs	r3, #1
 800af7a:	4a0a      	ldr	r2, [pc, #40]	; (800afa4 <prvCheckTasksWaitingTermination+0x58>)
 800af7c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800af7e:	f000 fbe1 	bl	800b744 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800af82:	6878      	ldr	r0, [r7, #4]
 800af84:	f000 f810 	bl	800afa8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800af88:	4b06      	ldr	r3, [pc, #24]	; (800afa4 <prvCheckTasksWaitingTermination+0x58>)
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d1e1      	bne.n	800af54 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800af90:	bf00      	nop
 800af92:	bf00      	nop
 800af94:	3708      	adds	r7, #8
 800af96:	46bd      	mov	sp, r7
 800af98:	bd80      	pop	{r7, pc}
 800af9a:	bf00      	nop
 800af9c:	240003ec 	.word	0x240003ec
 800afa0:	24000418 	.word	0x24000418
 800afa4:	24000400 	.word	0x24000400

0800afa8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800afa8:	b580      	push	{r7, lr}
 800afaa:	b084      	sub	sp, #16
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d108      	bne.n	800afcc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afbe:	4618      	mov	r0, r3
 800afc0:	f000 fd7e 	bl	800bac0 <vPortFree>
				vPortFree( pxTCB );
 800afc4:	6878      	ldr	r0, [r7, #4]
 800afc6:	f000 fd7b 	bl	800bac0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800afca:	e018      	b.n	800affe <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800afd2:	2b01      	cmp	r3, #1
 800afd4:	d103      	bne.n	800afde <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800afd6:	6878      	ldr	r0, [r7, #4]
 800afd8:	f000 fd72 	bl	800bac0 <vPortFree>
	}
 800afdc:	e00f      	b.n	800affe <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800afe4:	2b02      	cmp	r3, #2
 800afe6:	d00a      	beq.n	800affe <prvDeleteTCB+0x56>
	__asm volatile
 800afe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afec:	f383 8811 	msr	BASEPRI, r3
 800aff0:	f3bf 8f6f 	isb	sy
 800aff4:	f3bf 8f4f 	dsb	sy
 800aff8:	60fb      	str	r3, [r7, #12]
}
 800affa:	bf00      	nop
 800affc:	e7fe      	b.n	800affc <prvDeleteTCB+0x54>
	}
 800affe:	bf00      	nop
 800b000:	3710      	adds	r7, #16
 800b002:	46bd      	mov	sp, r7
 800b004:	bd80      	pop	{r7, pc}
	...

0800b008 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b008:	b480      	push	{r7}
 800b00a:	b083      	sub	sp, #12
 800b00c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b00e:	4b0c      	ldr	r3, [pc, #48]	; (800b040 <prvResetNextTaskUnblockTime+0x38>)
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	2b00      	cmp	r3, #0
 800b016:	d104      	bne.n	800b022 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b018:	4b0a      	ldr	r3, [pc, #40]	; (800b044 <prvResetNextTaskUnblockTime+0x3c>)
 800b01a:	f04f 32ff 	mov.w	r2, #4294967295
 800b01e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b020:	e008      	b.n	800b034 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b022:	4b07      	ldr	r3, [pc, #28]	; (800b040 <prvResetNextTaskUnblockTime+0x38>)
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	68db      	ldr	r3, [r3, #12]
 800b028:	68db      	ldr	r3, [r3, #12]
 800b02a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	685b      	ldr	r3, [r3, #4]
 800b030:	4a04      	ldr	r2, [pc, #16]	; (800b044 <prvResetNextTaskUnblockTime+0x3c>)
 800b032:	6013      	str	r3, [r2, #0]
}
 800b034:	bf00      	nop
 800b036:	370c      	adds	r7, #12
 800b038:	46bd      	mov	sp, r7
 800b03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b03e:	4770      	bx	lr
 800b040:	240003d0 	.word	0x240003d0
 800b044:	24000438 	.word	0x24000438

0800b048 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b048:	b480      	push	{r7}
 800b04a:	b083      	sub	sp, #12
 800b04c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b04e:	4b0b      	ldr	r3, [pc, #44]	; (800b07c <xTaskGetSchedulerState+0x34>)
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	2b00      	cmp	r3, #0
 800b054:	d102      	bne.n	800b05c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b056:	2301      	movs	r3, #1
 800b058:	607b      	str	r3, [r7, #4]
 800b05a:	e008      	b.n	800b06e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b05c:	4b08      	ldr	r3, [pc, #32]	; (800b080 <xTaskGetSchedulerState+0x38>)
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d102      	bne.n	800b06a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b064:	2302      	movs	r3, #2
 800b066:	607b      	str	r3, [r7, #4]
 800b068:	e001      	b.n	800b06e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b06a:	2300      	movs	r3, #0
 800b06c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b06e:	687b      	ldr	r3, [r7, #4]
	}
 800b070:	4618      	mov	r0, r3
 800b072:	370c      	adds	r7, #12
 800b074:	46bd      	mov	sp, r7
 800b076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b07a:	4770      	bx	lr
 800b07c:	24000424 	.word	0x24000424
 800b080:	24000440 	.word	0x24000440

0800b084 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b084:	b580      	push	{r7, lr}
 800b086:	b084      	sub	sp, #16
 800b088:	af00      	add	r7, sp, #0
 800b08a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b090:	2300      	movs	r3, #0
 800b092:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	2b00      	cmp	r3, #0
 800b098:	d05e      	beq.n	800b158 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b09a:	68bb      	ldr	r3, [r7, #8]
 800b09c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b09e:	4b31      	ldr	r3, [pc, #196]	; (800b164 <xTaskPriorityInherit+0xe0>)
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0a4:	429a      	cmp	r2, r3
 800b0a6:	d24e      	bcs.n	800b146 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b0a8:	68bb      	ldr	r3, [r7, #8]
 800b0aa:	699b      	ldr	r3, [r3, #24]
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	db06      	blt.n	800b0be <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b0b0:	4b2c      	ldr	r3, [pc, #176]	; (800b164 <xTaskPriorityInherit+0xe0>)
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0b6:	f1c3 0207 	rsb	r2, r3, #7
 800b0ba:	68bb      	ldr	r3, [r7, #8]
 800b0bc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b0be:	68bb      	ldr	r3, [r7, #8]
 800b0c0:	6959      	ldr	r1, [r3, #20]
 800b0c2:	68bb      	ldr	r3, [r7, #8]
 800b0c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0c6:	4613      	mov	r3, r2
 800b0c8:	009b      	lsls	r3, r3, #2
 800b0ca:	4413      	add	r3, r2
 800b0cc:	009b      	lsls	r3, r3, #2
 800b0ce:	4a26      	ldr	r2, [pc, #152]	; (800b168 <xTaskPriorityInherit+0xe4>)
 800b0d0:	4413      	add	r3, r2
 800b0d2:	4299      	cmp	r1, r3
 800b0d4:	d12f      	bne.n	800b136 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b0d6:	68bb      	ldr	r3, [r7, #8]
 800b0d8:	3304      	adds	r3, #4
 800b0da:	4618      	mov	r0, r3
 800b0dc:	f7fe fa62 	bl	80095a4 <uxListRemove>
 800b0e0:	4603      	mov	r3, r0
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d10a      	bne.n	800b0fc <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800b0e6:	68bb      	ldr	r3, [r7, #8]
 800b0e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0ea:	2201      	movs	r2, #1
 800b0ec:	fa02 f303 	lsl.w	r3, r2, r3
 800b0f0:	43da      	mvns	r2, r3
 800b0f2:	4b1e      	ldr	r3, [pc, #120]	; (800b16c <xTaskPriorityInherit+0xe8>)
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	4013      	ands	r3, r2
 800b0f8:	4a1c      	ldr	r2, [pc, #112]	; (800b16c <xTaskPriorityInherit+0xe8>)
 800b0fa:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b0fc:	4b19      	ldr	r3, [pc, #100]	; (800b164 <xTaskPriorityInherit+0xe0>)
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b102:	68bb      	ldr	r3, [r7, #8]
 800b104:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b106:	68bb      	ldr	r3, [r7, #8]
 800b108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b10a:	2201      	movs	r2, #1
 800b10c:	409a      	lsls	r2, r3
 800b10e:	4b17      	ldr	r3, [pc, #92]	; (800b16c <xTaskPriorityInherit+0xe8>)
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	4313      	orrs	r3, r2
 800b114:	4a15      	ldr	r2, [pc, #84]	; (800b16c <xTaskPriorityInherit+0xe8>)
 800b116:	6013      	str	r3, [r2, #0]
 800b118:	68bb      	ldr	r3, [r7, #8]
 800b11a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b11c:	4613      	mov	r3, r2
 800b11e:	009b      	lsls	r3, r3, #2
 800b120:	4413      	add	r3, r2
 800b122:	009b      	lsls	r3, r3, #2
 800b124:	4a10      	ldr	r2, [pc, #64]	; (800b168 <xTaskPriorityInherit+0xe4>)
 800b126:	441a      	add	r2, r3
 800b128:	68bb      	ldr	r3, [r7, #8]
 800b12a:	3304      	adds	r3, #4
 800b12c:	4619      	mov	r1, r3
 800b12e:	4610      	mov	r0, r2
 800b130:	f7fe f9db 	bl	80094ea <vListInsertEnd>
 800b134:	e004      	b.n	800b140 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b136:	4b0b      	ldr	r3, [pc, #44]	; (800b164 <xTaskPriorityInherit+0xe0>)
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b13c:	68bb      	ldr	r3, [r7, #8]
 800b13e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800b140:	2301      	movs	r3, #1
 800b142:	60fb      	str	r3, [r7, #12]
 800b144:	e008      	b.n	800b158 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b146:	68bb      	ldr	r3, [r7, #8]
 800b148:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b14a:	4b06      	ldr	r3, [pc, #24]	; (800b164 <xTaskPriorityInherit+0xe0>)
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b150:	429a      	cmp	r2, r3
 800b152:	d201      	bcs.n	800b158 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800b154:	2301      	movs	r3, #1
 800b156:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b158:	68fb      	ldr	r3, [r7, #12]
	}
 800b15a:	4618      	mov	r0, r3
 800b15c:	3710      	adds	r7, #16
 800b15e:	46bd      	mov	sp, r7
 800b160:	bd80      	pop	{r7, pc}
 800b162:	bf00      	nop
 800b164:	24000318 	.word	0x24000318
 800b168:	2400031c 	.word	0x2400031c
 800b16c:	24000420 	.word	0x24000420

0800b170 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b170:	b580      	push	{r7, lr}
 800b172:	b086      	sub	sp, #24
 800b174:	af00      	add	r7, sp, #0
 800b176:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b17c:	2300      	movs	r3, #0
 800b17e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	2b00      	cmp	r3, #0
 800b184:	d06e      	beq.n	800b264 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b186:	4b3a      	ldr	r3, [pc, #232]	; (800b270 <xTaskPriorityDisinherit+0x100>)
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	693a      	ldr	r2, [r7, #16]
 800b18c:	429a      	cmp	r2, r3
 800b18e:	d00a      	beq.n	800b1a6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b190:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b194:	f383 8811 	msr	BASEPRI, r3
 800b198:	f3bf 8f6f 	isb	sy
 800b19c:	f3bf 8f4f 	dsb	sy
 800b1a0:	60fb      	str	r3, [r7, #12]
}
 800b1a2:	bf00      	nop
 800b1a4:	e7fe      	b.n	800b1a4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b1a6:	693b      	ldr	r3, [r7, #16]
 800b1a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d10a      	bne.n	800b1c4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b1ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1b2:	f383 8811 	msr	BASEPRI, r3
 800b1b6:	f3bf 8f6f 	isb	sy
 800b1ba:	f3bf 8f4f 	dsb	sy
 800b1be:	60bb      	str	r3, [r7, #8]
}
 800b1c0:	bf00      	nop
 800b1c2:	e7fe      	b.n	800b1c2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b1c4:	693b      	ldr	r3, [r7, #16]
 800b1c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b1c8:	1e5a      	subs	r2, r3, #1
 800b1ca:	693b      	ldr	r3, [r7, #16]
 800b1cc:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b1ce:	693b      	ldr	r3, [r7, #16]
 800b1d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1d2:	693b      	ldr	r3, [r7, #16]
 800b1d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1d6:	429a      	cmp	r2, r3
 800b1d8:	d044      	beq.n	800b264 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b1da:	693b      	ldr	r3, [r7, #16]
 800b1dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d140      	bne.n	800b264 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b1e2:	693b      	ldr	r3, [r7, #16]
 800b1e4:	3304      	adds	r3, #4
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	f7fe f9dc 	bl	80095a4 <uxListRemove>
 800b1ec:	4603      	mov	r3, r0
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d115      	bne.n	800b21e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b1f2:	693b      	ldr	r3, [r7, #16]
 800b1f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1f6:	491f      	ldr	r1, [pc, #124]	; (800b274 <xTaskPriorityDisinherit+0x104>)
 800b1f8:	4613      	mov	r3, r2
 800b1fa:	009b      	lsls	r3, r3, #2
 800b1fc:	4413      	add	r3, r2
 800b1fe:	009b      	lsls	r3, r3, #2
 800b200:	440b      	add	r3, r1
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d10a      	bne.n	800b21e <xTaskPriorityDisinherit+0xae>
 800b208:	693b      	ldr	r3, [r7, #16]
 800b20a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b20c:	2201      	movs	r2, #1
 800b20e:	fa02 f303 	lsl.w	r3, r2, r3
 800b212:	43da      	mvns	r2, r3
 800b214:	4b18      	ldr	r3, [pc, #96]	; (800b278 <xTaskPriorityDisinherit+0x108>)
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	4013      	ands	r3, r2
 800b21a:	4a17      	ldr	r2, [pc, #92]	; (800b278 <xTaskPriorityDisinherit+0x108>)
 800b21c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b21e:	693b      	ldr	r3, [r7, #16]
 800b220:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b222:	693b      	ldr	r3, [r7, #16]
 800b224:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b226:	693b      	ldr	r3, [r7, #16]
 800b228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b22a:	f1c3 0207 	rsb	r2, r3, #7
 800b22e:	693b      	ldr	r3, [r7, #16]
 800b230:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b232:	693b      	ldr	r3, [r7, #16]
 800b234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b236:	2201      	movs	r2, #1
 800b238:	409a      	lsls	r2, r3
 800b23a:	4b0f      	ldr	r3, [pc, #60]	; (800b278 <xTaskPriorityDisinherit+0x108>)
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	4313      	orrs	r3, r2
 800b240:	4a0d      	ldr	r2, [pc, #52]	; (800b278 <xTaskPriorityDisinherit+0x108>)
 800b242:	6013      	str	r3, [r2, #0]
 800b244:	693b      	ldr	r3, [r7, #16]
 800b246:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b248:	4613      	mov	r3, r2
 800b24a:	009b      	lsls	r3, r3, #2
 800b24c:	4413      	add	r3, r2
 800b24e:	009b      	lsls	r3, r3, #2
 800b250:	4a08      	ldr	r2, [pc, #32]	; (800b274 <xTaskPriorityDisinherit+0x104>)
 800b252:	441a      	add	r2, r3
 800b254:	693b      	ldr	r3, [r7, #16]
 800b256:	3304      	adds	r3, #4
 800b258:	4619      	mov	r1, r3
 800b25a:	4610      	mov	r0, r2
 800b25c:	f7fe f945 	bl	80094ea <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b260:	2301      	movs	r3, #1
 800b262:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b264:	697b      	ldr	r3, [r7, #20]
	}
 800b266:	4618      	mov	r0, r3
 800b268:	3718      	adds	r7, #24
 800b26a:	46bd      	mov	sp, r7
 800b26c:	bd80      	pop	{r7, pc}
 800b26e:	bf00      	nop
 800b270:	24000318 	.word	0x24000318
 800b274:	2400031c 	.word	0x2400031c
 800b278:	24000420 	.word	0x24000420

0800b27c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800b27c:	b580      	push	{r7, lr}
 800b27e:	b088      	sub	sp, #32
 800b280:	af00      	add	r7, sp, #0
 800b282:	6078      	str	r0, [r7, #4]
 800b284:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b28a:	2301      	movs	r3, #1
 800b28c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	2b00      	cmp	r3, #0
 800b292:	d077      	beq.n	800b384 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800b294:	69bb      	ldr	r3, [r7, #24]
 800b296:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d10a      	bne.n	800b2b2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800b29c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2a0:	f383 8811 	msr	BASEPRI, r3
 800b2a4:	f3bf 8f6f 	isb	sy
 800b2a8:	f3bf 8f4f 	dsb	sy
 800b2ac:	60fb      	str	r3, [r7, #12]
}
 800b2ae:	bf00      	nop
 800b2b0:	e7fe      	b.n	800b2b0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b2b2:	69bb      	ldr	r3, [r7, #24]
 800b2b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b2b6:	683a      	ldr	r2, [r7, #0]
 800b2b8:	429a      	cmp	r2, r3
 800b2ba:	d902      	bls.n	800b2c2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b2bc:	683b      	ldr	r3, [r7, #0]
 800b2be:	61fb      	str	r3, [r7, #28]
 800b2c0:	e002      	b.n	800b2c8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800b2c2:	69bb      	ldr	r3, [r7, #24]
 800b2c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b2c6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800b2c8:	69bb      	ldr	r3, [r7, #24]
 800b2ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2cc:	69fa      	ldr	r2, [r7, #28]
 800b2ce:	429a      	cmp	r2, r3
 800b2d0:	d058      	beq.n	800b384 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b2d2:	69bb      	ldr	r3, [r7, #24]
 800b2d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b2d6:	697a      	ldr	r2, [r7, #20]
 800b2d8:	429a      	cmp	r2, r3
 800b2da:	d153      	bne.n	800b384 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800b2dc:	4b2b      	ldr	r3, [pc, #172]	; (800b38c <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	69ba      	ldr	r2, [r7, #24]
 800b2e2:	429a      	cmp	r2, r3
 800b2e4:	d10a      	bne.n	800b2fc <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800b2e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2ea:	f383 8811 	msr	BASEPRI, r3
 800b2ee:	f3bf 8f6f 	isb	sy
 800b2f2:	f3bf 8f4f 	dsb	sy
 800b2f6:	60bb      	str	r3, [r7, #8]
}
 800b2f8:	bf00      	nop
 800b2fa:	e7fe      	b.n	800b2fa <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800b2fc:	69bb      	ldr	r3, [r7, #24]
 800b2fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b300:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800b302:	69bb      	ldr	r3, [r7, #24]
 800b304:	69fa      	ldr	r2, [r7, #28]
 800b306:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b308:	69bb      	ldr	r3, [r7, #24]
 800b30a:	699b      	ldr	r3, [r3, #24]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	db04      	blt.n	800b31a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b310:	69fb      	ldr	r3, [r7, #28]
 800b312:	f1c3 0207 	rsb	r2, r3, #7
 800b316:	69bb      	ldr	r3, [r7, #24]
 800b318:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b31a:	69bb      	ldr	r3, [r7, #24]
 800b31c:	6959      	ldr	r1, [r3, #20]
 800b31e:	693a      	ldr	r2, [r7, #16]
 800b320:	4613      	mov	r3, r2
 800b322:	009b      	lsls	r3, r3, #2
 800b324:	4413      	add	r3, r2
 800b326:	009b      	lsls	r3, r3, #2
 800b328:	4a19      	ldr	r2, [pc, #100]	; (800b390 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800b32a:	4413      	add	r3, r2
 800b32c:	4299      	cmp	r1, r3
 800b32e:	d129      	bne.n	800b384 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b330:	69bb      	ldr	r3, [r7, #24]
 800b332:	3304      	adds	r3, #4
 800b334:	4618      	mov	r0, r3
 800b336:	f7fe f935 	bl	80095a4 <uxListRemove>
 800b33a:	4603      	mov	r3, r0
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d10a      	bne.n	800b356 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800b340:	69bb      	ldr	r3, [r7, #24]
 800b342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b344:	2201      	movs	r2, #1
 800b346:	fa02 f303 	lsl.w	r3, r2, r3
 800b34a:	43da      	mvns	r2, r3
 800b34c:	4b11      	ldr	r3, [pc, #68]	; (800b394 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	4013      	ands	r3, r2
 800b352:	4a10      	ldr	r2, [pc, #64]	; (800b394 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800b354:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800b356:	69bb      	ldr	r3, [r7, #24]
 800b358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b35a:	2201      	movs	r2, #1
 800b35c:	409a      	lsls	r2, r3
 800b35e:	4b0d      	ldr	r3, [pc, #52]	; (800b394 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	4313      	orrs	r3, r2
 800b364:	4a0b      	ldr	r2, [pc, #44]	; (800b394 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800b366:	6013      	str	r3, [r2, #0]
 800b368:	69bb      	ldr	r3, [r7, #24]
 800b36a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b36c:	4613      	mov	r3, r2
 800b36e:	009b      	lsls	r3, r3, #2
 800b370:	4413      	add	r3, r2
 800b372:	009b      	lsls	r3, r3, #2
 800b374:	4a06      	ldr	r2, [pc, #24]	; (800b390 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800b376:	441a      	add	r2, r3
 800b378:	69bb      	ldr	r3, [r7, #24]
 800b37a:	3304      	adds	r3, #4
 800b37c:	4619      	mov	r1, r3
 800b37e:	4610      	mov	r0, r2
 800b380:	f7fe f8b3 	bl	80094ea <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b384:	bf00      	nop
 800b386:	3720      	adds	r7, #32
 800b388:	46bd      	mov	sp, r7
 800b38a:	bd80      	pop	{r7, pc}
 800b38c:	24000318 	.word	0x24000318
 800b390:	2400031c 	.word	0x2400031c
 800b394:	24000420 	.word	0x24000420

0800b398 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800b398:	b480      	push	{r7}
 800b39a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800b39c:	4b07      	ldr	r3, [pc, #28]	; (800b3bc <pvTaskIncrementMutexHeldCount+0x24>)
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d004      	beq.n	800b3ae <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800b3a4:	4b05      	ldr	r3, [pc, #20]	; (800b3bc <pvTaskIncrementMutexHeldCount+0x24>)
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b3aa:	3201      	adds	r2, #1
 800b3ac:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800b3ae:	4b03      	ldr	r3, [pc, #12]	; (800b3bc <pvTaskIncrementMutexHeldCount+0x24>)
 800b3b0:	681b      	ldr	r3, [r3, #0]
	}
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ba:	4770      	bx	lr
 800b3bc:	24000318 	.word	0x24000318

0800b3c0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b3c0:	b580      	push	{r7, lr}
 800b3c2:	b084      	sub	sp, #16
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	6078      	str	r0, [r7, #4]
 800b3c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b3ca:	4b29      	ldr	r3, [pc, #164]	; (800b470 <prvAddCurrentTaskToDelayedList+0xb0>)
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b3d0:	4b28      	ldr	r3, [pc, #160]	; (800b474 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	3304      	adds	r3, #4
 800b3d6:	4618      	mov	r0, r3
 800b3d8:	f7fe f8e4 	bl	80095a4 <uxListRemove>
 800b3dc:	4603      	mov	r3, r0
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d10b      	bne.n	800b3fa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800b3e2:	4b24      	ldr	r3, [pc, #144]	; (800b474 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3e8:	2201      	movs	r2, #1
 800b3ea:	fa02 f303 	lsl.w	r3, r2, r3
 800b3ee:	43da      	mvns	r2, r3
 800b3f0:	4b21      	ldr	r3, [pc, #132]	; (800b478 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	4013      	ands	r3, r2
 800b3f6:	4a20      	ldr	r2, [pc, #128]	; (800b478 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b3f8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b400:	d10a      	bne.n	800b418 <prvAddCurrentTaskToDelayedList+0x58>
 800b402:	683b      	ldr	r3, [r7, #0]
 800b404:	2b00      	cmp	r3, #0
 800b406:	d007      	beq.n	800b418 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b408:	4b1a      	ldr	r3, [pc, #104]	; (800b474 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	3304      	adds	r3, #4
 800b40e:	4619      	mov	r1, r3
 800b410:	481a      	ldr	r0, [pc, #104]	; (800b47c <prvAddCurrentTaskToDelayedList+0xbc>)
 800b412:	f7fe f86a 	bl	80094ea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b416:	e026      	b.n	800b466 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b418:	68fa      	ldr	r2, [r7, #12]
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	4413      	add	r3, r2
 800b41e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b420:	4b14      	ldr	r3, [pc, #80]	; (800b474 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	68ba      	ldr	r2, [r7, #8]
 800b426:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b428:	68ba      	ldr	r2, [r7, #8]
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	429a      	cmp	r2, r3
 800b42e:	d209      	bcs.n	800b444 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b430:	4b13      	ldr	r3, [pc, #76]	; (800b480 <prvAddCurrentTaskToDelayedList+0xc0>)
 800b432:	681a      	ldr	r2, [r3, #0]
 800b434:	4b0f      	ldr	r3, [pc, #60]	; (800b474 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	3304      	adds	r3, #4
 800b43a:	4619      	mov	r1, r3
 800b43c:	4610      	mov	r0, r2
 800b43e:	f7fe f878 	bl	8009532 <vListInsert>
}
 800b442:	e010      	b.n	800b466 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b444:	4b0f      	ldr	r3, [pc, #60]	; (800b484 <prvAddCurrentTaskToDelayedList+0xc4>)
 800b446:	681a      	ldr	r2, [r3, #0]
 800b448:	4b0a      	ldr	r3, [pc, #40]	; (800b474 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	3304      	adds	r3, #4
 800b44e:	4619      	mov	r1, r3
 800b450:	4610      	mov	r0, r2
 800b452:	f7fe f86e 	bl	8009532 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b456:	4b0c      	ldr	r3, [pc, #48]	; (800b488 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	68ba      	ldr	r2, [r7, #8]
 800b45c:	429a      	cmp	r2, r3
 800b45e:	d202      	bcs.n	800b466 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800b460:	4a09      	ldr	r2, [pc, #36]	; (800b488 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b462:	68bb      	ldr	r3, [r7, #8]
 800b464:	6013      	str	r3, [r2, #0]
}
 800b466:	bf00      	nop
 800b468:	3710      	adds	r7, #16
 800b46a:	46bd      	mov	sp, r7
 800b46c:	bd80      	pop	{r7, pc}
 800b46e:	bf00      	nop
 800b470:	2400041c 	.word	0x2400041c
 800b474:	24000318 	.word	0x24000318
 800b478:	24000420 	.word	0x24000420
 800b47c:	24000404 	.word	0x24000404
 800b480:	240003d4 	.word	0x240003d4
 800b484:	240003d0 	.word	0x240003d0
 800b488:	24000438 	.word	0x24000438

0800b48c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b48c:	b480      	push	{r7}
 800b48e:	b085      	sub	sp, #20
 800b490:	af00      	add	r7, sp, #0
 800b492:	60f8      	str	r0, [r7, #12]
 800b494:	60b9      	str	r1, [r7, #8]
 800b496:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	3b04      	subs	r3, #4
 800b49c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b4a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	3b04      	subs	r3, #4
 800b4aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b4ac:	68bb      	ldr	r3, [r7, #8]
 800b4ae:	f023 0201 	bic.w	r2, r3, #1
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	3b04      	subs	r3, #4
 800b4ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b4bc:	4a0c      	ldr	r2, [pc, #48]	; (800b4f0 <pxPortInitialiseStack+0x64>)
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	3b14      	subs	r3, #20
 800b4c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b4c8:	687a      	ldr	r2, [r7, #4]
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	3b04      	subs	r3, #4
 800b4d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	f06f 0202 	mvn.w	r2, #2
 800b4da:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	3b20      	subs	r3, #32
 800b4e0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b4e2:	68fb      	ldr	r3, [r7, #12]
}
 800b4e4:	4618      	mov	r0, r3
 800b4e6:	3714      	adds	r7, #20
 800b4e8:	46bd      	mov	sp, r7
 800b4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ee:	4770      	bx	lr
 800b4f0:	0800b4f5 	.word	0x0800b4f5

0800b4f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b4f4:	b480      	push	{r7}
 800b4f6:	b085      	sub	sp, #20
 800b4f8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b4fa:	2300      	movs	r3, #0
 800b4fc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b4fe:	4b12      	ldr	r3, [pc, #72]	; (800b548 <prvTaskExitError+0x54>)
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b506:	d00a      	beq.n	800b51e <prvTaskExitError+0x2a>
	__asm volatile
 800b508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b50c:	f383 8811 	msr	BASEPRI, r3
 800b510:	f3bf 8f6f 	isb	sy
 800b514:	f3bf 8f4f 	dsb	sy
 800b518:	60fb      	str	r3, [r7, #12]
}
 800b51a:	bf00      	nop
 800b51c:	e7fe      	b.n	800b51c <prvTaskExitError+0x28>
	__asm volatile
 800b51e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b522:	f383 8811 	msr	BASEPRI, r3
 800b526:	f3bf 8f6f 	isb	sy
 800b52a:	f3bf 8f4f 	dsb	sy
 800b52e:	60bb      	str	r3, [r7, #8]
}
 800b530:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b532:	bf00      	nop
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d0fc      	beq.n	800b534 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b53a:	bf00      	nop
 800b53c:	bf00      	nop
 800b53e:	3714      	adds	r7, #20
 800b540:	46bd      	mov	sp, r7
 800b542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b546:	4770      	bx	lr
 800b548:	24000024 	.word	0x24000024
 800b54c:	00000000 	.word	0x00000000

0800b550 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b550:	4b07      	ldr	r3, [pc, #28]	; (800b570 <pxCurrentTCBConst2>)
 800b552:	6819      	ldr	r1, [r3, #0]
 800b554:	6808      	ldr	r0, [r1, #0]
 800b556:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b55a:	f380 8809 	msr	PSP, r0
 800b55e:	f3bf 8f6f 	isb	sy
 800b562:	f04f 0000 	mov.w	r0, #0
 800b566:	f380 8811 	msr	BASEPRI, r0
 800b56a:	4770      	bx	lr
 800b56c:	f3af 8000 	nop.w

0800b570 <pxCurrentTCBConst2>:
 800b570:	24000318 	.word	0x24000318
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b574:	bf00      	nop
 800b576:	bf00      	nop

0800b578 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b578:	4808      	ldr	r0, [pc, #32]	; (800b59c <prvPortStartFirstTask+0x24>)
 800b57a:	6800      	ldr	r0, [r0, #0]
 800b57c:	6800      	ldr	r0, [r0, #0]
 800b57e:	f380 8808 	msr	MSP, r0
 800b582:	f04f 0000 	mov.w	r0, #0
 800b586:	f380 8814 	msr	CONTROL, r0
 800b58a:	b662      	cpsie	i
 800b58c:	b661      	cpsie	f
 800b58e:	f3bf 8f4f 	dsb	sy
 800b592:	f3bf 8f6f 	isb	sy
 800b596:	df00      	svc	0
 800b598:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b59a:	bf00      	nop
 800b59c:	e000ed08 	.word	0xe000ed08

0800b5a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b5a0:	b580      	push	{r7, lr}
 800b5a2:	b086      	sub	sp, #24
 800b5a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b5a6:	4b46      	ldr	r3, [pc, #280]	; (800b6c0 <xPortStartScheduler+0x120>)
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	4a46      	ldr	r2, [pc, #280]	; (800b6c4 <xPortStartScheduler+0x124>)
 800b5ac:	4293      	cmp	r3, r2
 800b5ae:	d10a      	bne.n	800b5c6 <xPortStartScheduler+0x26>
	__asm volatile
 800b5b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5b4:	f383 8811 	msr	BASEPRI, r3
 800b5b8:	f3bf 8f6f 	isb	sy
 800b5bc:	f3bf 8f4f 	dsb	sy
 800b5c0:	613b      	str	r3, [r7, #16]
}
 800b5c2:	bf00      	nop
 800b5c4:	e7fe      	b.n	800b5c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b5c6:	4b3e      	ldr	r3, [pc, #248]	; (800b6c0 <xPortStartScheduler+0x120>)
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	4a3f      	ldr	r2, [pc, #252]	; (800b6c8 <xPortStartScheduler+0x128>)
 800b5cc:	4293      	cmp	r3, r2
 800b5ce:	d10a      	bne.n	800b5e6 <xPortStartScheduler+0x46>
	__asm volatile
 800b5d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5d4:	f383 8811 	msr	BASEPRI, r3
 800b5d8:	f3bf 8f6f 	isb	sy
 800b5dc:	f3bf 8f4f 	dsb	sy
 800b5e0:	60fb      	str	r3, [r7, #12]
}
 800b5e2:	bf00      	nop
 800b5e4:	e7fe      	b.n	800b5e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b5e6:	4b39      	ldr	r3, [pc, #228]	; (800b6cc <xPortStartScheduler+0x12c>)
 800b5e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b5ea:	697b      	ldr	r3, [r7, #20]
 800b5ec:	781b      	ldrb	r3, [r3, #0]
 800b5ee:	b2db      	uxtb	r3, r3
 800b5f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b5f2:	697b      	ldr	r3, [r7, #20]
 800b5f4:	22ff      	movs	r2, #255	; 0xff
 800b5f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b5f8:	697b      	ldr	r3, [r7, #20]
 800b5fa:	781b      	ldrb	r3, [r3, #0]
 800b5fc:	b2db      	uxtb	r3, r3
 800b5fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b600:	78fb      	ldrb	r3, [r7, #3]
 800b602:	b2db      	uxtb	r3, r3
 800b604:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b608:	b2da      	uxtb	r2, r3
 800b60a:	4b31      	ldr	r3, [pc, #196]	; (800b6d0 <xPortStartScheduler+0x130>)
 800b60c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b60e:	4b31      	ldr	r3, [pc, #196]	; (800b6d4 <xPortStartScheduler+0x134>)
 800b610:	2207      	movs	r2, #7
 800b612:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b614:	e009      	b.n	800b62a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b616:	4b2f      	ldr	r3, [pc, #188]	; (800b6d4 <xPortStartScheduler+0x134>)
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	3b01      	subs	r3, #1
 800b61c:	4a2d      	ldr	r2, [pc, #180]	; (800b6d4 <xPortStartScheduler+0x134>)
 800b61e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b620:	78fb      	ldrb	r3, [r7, #3]
 800b622:	b2db      	uxtb	r3, r3
 800b624:	005b      	lsls	r3, r3, #1
 800b626:	b2db      	uxtb	r3, r3
 800b628:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b62a:	78fb      	ldrb	r3, [r7, #3]
 800b62c:	b2db      	uxtb	r3, r3
 800b62e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b632:	2b80      	cmp	r3, #128	; 0x80
 800b634:	d0ef      	beq.n	800b616 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b636:	4b27      	ldr	r3, [pc, #156]	; (800b6d4 <xPortStartScheduler+0x134>)
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	f1c3 0307 	rsb	r3, r3, #7
 800b63e:	2b04      	cmp	r3, #4
 800b640:	d00a      	beq.n	800b658 <xPortStartScheduler+0xb8>
	__asm volatile
 800b642:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b646:	f383 8811 	msr	BASEPRI, r3
 800b64a:	f3bf 8f6f 	isb	sy
 800b64e:	f3bf 8f4f 	dsb	sy
 800b652:	60bb      	str	r3, [r7, #8]
}
 800b654:	bf00      	nop
 800b656:	e7fe      	b.n	800b656 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b658:	4b1e      	ldr	r3, [pc, #120]	; (800b6d4 <xPortStartScheduler+0x134>)
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	021b      	lsls	r3, r3, #8
 800b65e:	4a1d      	ldr	r2, [pc, #116]	; (800b6d4 <xPortStartScheduler+0x134>)
 800b660:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b662:	4b1c      	ldr	r3, [pc, #112]	; (800b6d4 <xPortStartScheduler+0x134>)
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b66a:	4a1a      	ldr	r2, [pc, #104]	; (800b6d4 <xPortStartScheduler+0x134>)
 800b66c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	b2da      	uxtb	r2, r3
 800b672:	697b      	ldr	r3, [r7, #20]
 800b674:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b676:	4b18      	ldr	r3, [pc, #96]	; (800b6d8 <xPortStartScheduler+0x138>)
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	4a17      	ldr	r2, [pc, #92]	; (800b6d8 <xPortStartScheduler+0x138>)
 800b67c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b680:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b682:	4b15      	ldr	r3, [pc, #84]	; (800b6d8 <xPortStartScheduler+0x138>)
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	4a14      	ldr	r2, [pc, #80]	; (800b6d8 <xPortStartScheduler+0x138>)
 800b688:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b68c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b68e:	f000 f8dd 	bl	800b84c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b692:	4b12      	ldr	r3, [pc, #72]	; (800b6dc <xPortStartScheduler+0x13c>)
 800b694:	2200      	movs	r2, #0
 800b696:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b698:	f000 f8fc 	bl	800b894 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b69c:	4b10      	ldr	r3, [pc, #64]	; (800b6e0 <xPortStartScheduler+0x140>)
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	4a0f      	ldr	r2, [pc, #60]	; (800b6e0 <xPortStartScheduler+0x140>)
 800b6a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b6a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b6a8:	f7ff ff66 	bl	800b578 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b6ac:	f7ff fa90 	bl	800abd0 <vTaskSwitchContext>
	prvTaskExitError();
 800b6b0:	f7ff ff20 	bl	800b4f4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b6b4:	2300      	movs	r3, #0
}
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	3718      	adds	r7, #24
 800b6ba:	46bd      	mov	sp, r7
 800b6bc:	bd80      	pop	{r7, pc}
 800b6be:	bf00      	nop
 800b6c0:	e000ed00 	.word	0xe000ed00
 800b6c4:	410fc271 	.word	0x410fc271
 800b6c8:	410fc270 	.word	0x410fc270
 800b6cc:	e000e400 	.word	0xe000e400
 800b6d0:	24000444 	.word	0x24000444
 800b6d4:	24000448 	.word	0x24000448
 800b6d8:	e000ed20 	.word	0xe000ed20
 800b6dc:	24000024 	.word	0x24000024
 800b6e0:	e000ef34 	.word	0xe000ef34

0800b6e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b6e4:	b480      	push	{r7}
 800b6e6:	b083      	sub	sp, #12
 800b6e8:	af00      	add	r7, sp, #0
	__asm volatile
 800b6ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6ee:	f383 8811 	msr	BASEPRI, r3
 800b6f2:	f3bf 8f6f 	isb	sy
 800b6f6:	f3bf 8f4f 	dsb	sy
 800b6fa:	607b      	str	r3, [r7, #4]
}
 800b6fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b6fe:	4b0f      	ldr	r3, [pc, #60]	; (800b73c <vPortEnterCritical+0x58>)
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	3301      	adds	r3, #1
 800b704:	4a0d      	ldr	r2, [pc, #52]	; (800b73c <vPortEnterCritical+0x58>)
 800b706:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b708:	4b0c      	ldr	r3, [pc, #48]	; (800b73c <vPortEnterCritical+0x58>)
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	2b01      	cmp	r3, #1
 800b70e:	d10f      	bne.n	800b730 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b710:	4b0b      	ldr	r3, [pc, #44]	; (800b740 <vPortEnterCritical+0x5c>)
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	b2db      	uxtb	r3, r3
 800b716:	2b00      	cmp	r3, #0
 800b718:	d00a      	beq.n	800b730 <vPortEnterCritical+0x4c>
	__asm volatile
 800b71a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b71e:	f383 8811 	msr	BASEPRI, r3
 800b722:	f3bf 8f6f 	isb	sy
 800b726:	f3bf 8f4f 	dsb	sy
 800b72a:	603b      	str	r3, [r7, #0]
}
 800b72c:	bf00      	nop
 800b72e:	e7fe      	b.n	800b72e <vPortEnterCritical+0x4a>
	}
}
 800b730:	bf00      	nop
 800b732:	370c      	adds	r7, #12
 800b734:	46bd      	mov	sp, r7
 800b736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b73a:	4770      	bx	lr
 800b73c:	24000024 	.word	0x24000024
 800b740:	e000ed04 	.word	0xe000ed04

0800b744 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b744:	b480      	push	{r7}
 800b746:	b083      	sub	sp, #12
 800b748:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b74a:	4b12      	ldr	r3, [pc, #72]	; (800b794 <vPortExitCritical+0x50>)
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d10a      	bne.n	800b768 <vPortExitCritical+0x24>
	__asm volatile
 800b752:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b756:	f383 8811 	msr	BASEPRI, r3
 800b75a:	f3bf 8f6f 	isb	sy
 800b75e:	f3bf 8f4f 	dsb	sy
 800b762:	607b      	str	r3, [r7, #4]
}
 800b764:	bf00      	nop
 800b766:	e7fe      	b.n	800b766 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b768:	4b0a      	ldr	r3, [pc, #40]	; (800b794 <vPortExitCritical+0x50>)
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	3b01      	subs	r3, #1
 800b76e:	4a09      	ldr	r2, [pc, #36]	; (800b794 <vPortExitCritical+0x50>)
 800b770:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b772:	4b08      	ldr	r3, [pc, #32]	; (800b794 <vPortExitCritical+0x50>)
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	2b00      	cmp	r3, #0
 800b778:	d105      	bne.n	800b786 <vPortExitCritical+0x42>
 800b77a:	2300      	movs	r3, #0
 800b77c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b77e:	683b      	ldr	r3, [r7, #0]
 800b780:	f383 8811 	msr	BASEPRI, r3
}
 800b784:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b786:	bf00      	nop
 800b788:	370c      	adds	r7, #12
 800b78a:	46bd      	mov	sp, r7
 800b78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b790:	4770      	bx	lr
 800b792:	bf00      	nop
 800b794:	24000024 	.word	0x24000024
	...

0800b7a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b7a0:	f3ef 8009 	mrs	r0, PSP
 800b7a4:	f3bf 8f6f 	isb	sy
 800b7a8:	4b15      	ldr	r3, [pc, #84]	; (800b800 <pxCurrentTCBConst>)
 800b7aa:	681a      	ldr	r2, [r3, #0]
 800b7ac:	f01e 0f10 	tst.w	lr, #16
 800b7b0:	bf08      	it	eq
 800b7b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b7b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7ba:	6010      	str	r0, [r2, #0]
 800b7bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b7c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b7c4:	f380 8811 	msr	BASEPRI, r0
 800b7c8:	f3bf 8f4f 	dsb	sy
 800b7cc:	f3bf 8f6f 	isb	sy
 800b7d0:	f7ff f9fe 	bl	800abd0 <vTaskSwitchContext>
 800b7d4:	f04f 0000 	mov.w	r0, #0
 800b7d8:	f380 8811 	msr	BASEPRI, r0
 800b7dc:	bc09      	pop	{r0, r3}
 800b7de:	6819      	ldr	r1, [r3, #0]
 800b7e0:	6808      	ldr	r0, [r1, #0]
 800b7e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7e6:	f01e 0f10 	tst.w	lr, #16
 800b7ea:	bf08      	it	eq
 800b7ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b7f0:	f380 8809 	msr	PSP, r0
 800b7f4:	f3bf 8f6f 	isb	sy
 800b7f8:	4770      	bx	lr
 800b7fa:	bf00      	nop
 800b7fc:	f3af 8000 	nop.w

0800b800 <pxCurrentTCBConst>:
 800b800:	24000318 	.word	0x24000318
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b804:	bf00      	nop
 800b806:	bf00      	nop

0800b808 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b808:	b580      	push	{r7, lr}
 800b80a:	b082      	sub	sp, #8
 800b80c:	af00      	add	r7, sp, #0
	__asm volatile
 800b80e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b812:	f383 8811 	msr	BASEPRI, r3
 800b816:	f3bf 8f6f 	isb	sy
 800b81a:	f3bf 8f4f 	dsb	sy
 800b81e:	607b      	str	r3, [r7, #4]
}
 800b820:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b822:	f7ff f91d 	bl	800aa60 <xTaskIncrementTick>
 800b826:	4603      	mov	r3, r0
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d003      	beq.n	800b834 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b82c:	4b06      	ldr	r3, [pc, #24]	; (800b848 <SysTick_Handler+0x40>)
 800b82e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b832:	601a      	str	r2, [r3, #0]
 800b834:	2300      	movs	r3, #0
 800b836:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b838:	683b      	ldr	r3, [r7, #0]
 800b83a:	f383 8811 	msr	BASEPRI, r3
}
 800b83e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b840:	bf00      	nop
 800b842:	3708      	adds	r7, #8
 800b844:	46bd      	mov	sp, r7
 800b846:	bd80      	pop	{r7, pc}
 800b848:	e000ed04 	.word	0xe000ed04

0800b84c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b84c:	b480      	push	{r7}
 800b84e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b850:	4b0b      	ldr	r3, [pc, #44]	; (800b880 <vPortSetupTimerInterrupt+0x34>)
 800b852:	2200      	movs	r2, #0
 800b854:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b856:	4b0b      	ldr	r3, [pc, #44]	; (800b884 <vPortSetupTimerInterrupt+0x38>)
 800b858:	2200      	movs	r2, #0
 800b85a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b85c:	4b0a      	ldr	r3, [pc, #40]	; (800b888 <vPortSetupTimerInterrupt+0x3c>)
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	4a0a      	ldr	r2, [pc, #40]	; (800b88c <vPortSetupTimerInterrupt+0x40>)
 800b862:	fba2 2303 	umull	r2, r3, r2, r3
 800b866:	099b      	lsrs	r3, r3, #6
 800b868:	4a09      	ldr	r2, [pc, #36]	; (800b890 <vPortSetupTimerInterrupt+0x44>)
 800b86a:	3b01      	subs	r3, #1
 800b86c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b86e:	4b04      	ldr	r3, [pc, #16]	; (800b880 <vPortSetupTimerInterrupt+0x34>)
 800b870:	2207      	movs	r2, #7
 800b872:	601a      	str	r2, [r3, #0]
}
 800b874:	bf00      	nop
 800b876:	46bd      	mov	sp, r7
 800b878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b87c:	4770      	bx	lr
 800b87e:	bf00      	nop
 800b880:	e000e010 	.word	0xe000e010
 800b884:	e000e018 	.word	0xe000e018
 800b888:	24000000 	.word	0x24000000
 800b88c:	10624dd3 	.word	0x10624dd3
 800b890:	e000e014 	.word	0xe000e014

0800b894 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b894:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b8a4 <vPortEnableVFP+0x10>
 800b898:	6801      	ldr	r1, [r0, #0]
 800b89a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b89e:	6001      	str	r1, [r0, #0]
 800b8a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b8a2:	bf00      	nop
 800b8a4:	e000ed88 	.word	0xe000ed88

0800b8a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b8a8:	b480      	push	{r7}
 800b8aa:	b085      	sub	sp, #20
 800b8ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b8ae:	f3ef 8305 	mrs	r3, IPSR
 800b8b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	2b0f      	cmp	r3, #15
 800b8b8:	d914      	bls.n	800b8e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b8ba:	4a17      	ldr	r2, [pc, #92]	; (800b918 <vPortValidateInterruptPriority+0x70>)
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	4413      	add	r3, r2
 800b8c0:	781b      	ldrb	r3, [r3, #0]
 800b8c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b8c4:	4b15      	ldr	r3, [pc, #84]	; (800b91c <vPortValidateInterruptPriority+0x74>)
 800b8c6:	781b      	ldrb	r3, [r3, #0]
 800b8c8:	7afa      	ldrb	r2, [r7, #11]
 800b8ca:	429a      	cmp	r2, r3
 800b8cc:	d20a      	bcs.n	800b8e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b8ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8d2:	f383 8811 	msr	BASEPRI, r3
 800b8d6:	f3bf 8f6f 	isb	sy
 800b8da:	f3bf 8f4f 	dsb	sy
 800b8de:	607b      	str	r3, [r7, #4]
}
 800b8e0:	bf00      	nop
 800b8e2:	e7fe      	b.n	800b8e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b8e4:	4b0e      	ldr	r3, [pc, #56]	; (800b920 <vPortValidateInterruptPriority+0x78>)
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b8ec:	4b0d      	ldr	r3, [pc, #52]	; (800b924 <vPortValidateInterruptPriority+0x7c>)
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	429a      	cmp	r2, r3
 800b8f2:	d90a      	bls.n	800b90a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b8f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8f8:	f383 8811 	msr	BASEPRI, r3
 800b8fc:	f3bf 8f6f 	isb	sy
 800b900:	f3bf 8f4f 	dsb	sy
 800b904:	603b      	str	r3, [r7, #0]
}
 800b906:	bf00      	nop
 800b908:	e7fe      	b.n	800b908 <vPortValidateInterruptPriority+0x60>
	}
 800b90a:	bf00      	nop
 800b90c:	3714      	adds	r7, #20
 800b90e:	46bd      	mov	sp, r7
 800b910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b914:	4770      	bx	lr
 800b916:	bf00      	nop
 800b918:	e000e3f0 	.word	0xe000e3f0
 800b91c:	24000444 	.word	0x24000444
 800b920:	e000ed0c 	.word	0xe000ed0c
 800b924:	24000448 	.word	0x24000448

0800b928 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b928:	b580      	push	{r7, lr}
 800b92a:	b08a      	sub	sp, #40	; 0x28
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b930:	2300      	movs	r3, #0
 800b932:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b934:	f7fe ffc8 	bl	800a8c8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b938:	4b5b      	ldr	r3, [pc, #364]	; (800baa8 <pvPortMalloc+0x180>)
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d101      	bne.n	800b944 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b940:	f000 f920 	bl	800bb84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b944:	4b59      	ldr	r3, [pc, #356]	; (800baac <pvPortMalloc+0x184>)
 800b946:	681a      	ldr	r2, [r3, #0]
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	4013      	ands	r3, r2
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	f040 8093 	bne.w	800ba78 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	2b00      	cmp	r3, #0
 800b956:	d01d      	beq.n	800b994 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b958:	2208      	movs	r2, #8
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	4413      	add	r3, r2
 800b95e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	f003 0307 	and.w	r3, r3, #7
 800b966:	2b00      	cmp	r3, #0
 800b968:	d014      	beq.n	800b994 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	f023 0307 	bic.w	r3, r3, #7
 800b970:	3308      	adds	r3, #8
 800b972:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	f003 0307 	and.w	r3, r3, #7
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d00a      	beq.n	800b994 <pvPortMalloc+0x6c>
	__asm volatile
 800b97e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b982:	f383 8811 	msr	BASEPRI, r3
 800b986:	f3bf 8f6f 	isb	sy
 800b98a:	f3bf 8f4f 	dsb	sy
 800b98e:	617b      	str	r3, [r7, #20]
}
 800b990:	bf00      	nop
 800b992:	e7fe      	b.n	800b992 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	2b00      	cmp	r3, #0
 800b998:	d06e      	beq.n	800ba78 <pvPortMalloc+0x150>
 800b99a:	4b45      	ldr	r3, [pc, #276]	; (800bab0 <pvPortMalloc+0x188>)
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	687a      	ldr	r2, [r7, #4]
 800b9a0:	429a      	cmp	r2, r3
 800b9a2:	d869      	bhi.n	800ba78 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b9a4:	4b43      	ldr	r3, [pc, #268]	; (800bab4 <pvPortMalloc+0x18c>)
 800b9a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b9a8:	4b42      	ldr	r3, [pc, #264]	; (800bab4 <pvPortMalloc+0x18c>)
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b9ae:	e004      	b.n	800b9ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b9b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b9b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b9ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9bc:	685b      	ldr	r3, [r3, #4]
 800b9be:	687a      	ldr	r2, [r7, #4]
 800b9c0:	429a      	cmp	r2, r3
 800b9c2:	d903      	bls.n	800b9cc <pvPortMalloc+0xa4>
 800b9c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d1f1      	bne.n	800b9b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b9cc:	4b36      	ldr	r3, [pc, #216]	; (800baa8 <pvPortMalloc+0x180>)
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9d2:	429a      	cmp	r2, r3
 800b9d4:	d050      	beq.n	800ba78 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b9d6:	6a3b      	ldr	r3, [r7, #32]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	2208      	movs	r2, #8
 800b9dc:	4413      	add	r3, r2
 800b9de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b9e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9e2:	681a      	ldr	r2, [r3, #0]
 800b9e4:	6a3b      	ldr	r3, [r7, #32]
 800b9e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b9e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9ea:	685a      	ldr	r2, [r3, #4]
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	1ad2      	subs	r2, r2, r3
 800b9f0:	2308      	movs	r3, #8
 800b9f2:	005b      	lsls	r3, r3, #1
 800b9f4:	429a      	cmp	r2, r3
 800b9f6:	d91f      	bls.n	800ba38 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b9f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	4413      	add	r3, r2
 800b9fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ba00:	69bb      	ldr	r3, [r7, #24]
 800ba02:	f003 0307 	and.w	r3, r3, #7
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d00a      	beq.n	800ba20 <pvPortMalloc+0xf8>
	__asm volatile
 800ba0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba0e:	f383 8811 	msr	BASEPRI, r3
 800ba12:	f3bf 8f6f 	isb	sy
 800ba16:	f3bf 8f4f 	dsb	sy
 800ba1a:	613b      	str	r3, [r7, #16]
}
 800ba1c:	bf00      	nop
 800ba1e:	e7fe      	b.n	800ba1e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ba20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba22:	685a      	ldr	r2, [r3, #4]
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	1ad2      	subs	r2, r2, r3
 800ba28:	69bb      	ldr	r3, [r7, #24]
 800ba2a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ba2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba2e:	687a      	ldr	r2, [r7, #4]
 800ba30:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ba32:	69b8      	ldr	r0, [r7, #24]
 800ba34:	f000 f908 	bl	800bc48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ba38:	4b1d      	ldr	r3, [pc, #116]	; (800bab0 <pvPortMalloc+0x188>)
 800ba3a:	681a      	ldr	r2, [r3, #0]
 800ba3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba3e:	685b      	ldr	r3, [r3, #4]
 800ba40:	1ad3      	subs	r3, r2, r3
 800ba42:	4a1b      	ldr	r2, [pc, #108]	; (800bab0 <pvPortMalloc+0x188>)
 800ba44:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ba46:	4b1a      	ldr	r3, [pc, #104]	; (800bab0 <pvPortMalloc+0x188>)
 800ba48:	681a      	ldr	r2, [r3, #0]
 800ba4a:	4b1b      	ldr	r3, [pc, #108]	; (800bab8 <pvPortMalloc+0x190>)
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	429a      	cmp	r2, r3
 800ba50:	d203      	bcs.n	800ba5a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ba52:	4b17      	ldr	r3, [pc, #92]	; (800bab0 <pvPortMalloc+0x188>)
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	4a18      	ldr	r2, [pc, #96]	; (800bab8 <pvPortMalloc+0x190>)
 800ba58:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ba5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba5c:	685a      	ldr	r2, [r3, #4]
 800ba5e:	4b13      	ldr	r3, [pc, #76]	; (800baac <pvPortMalloc+0x184>)
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	431a      	orrs	r2, r3
 800ba64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba66:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ba68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba6a:	2200      	movs	r2, #0
 800ba6c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ba6e:	4b13      	ldr	r3, [pc, #76]	; (800babc <pvPortMalloc+0x194>)
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	3301      	adds	r3, #1
 800ba74:	4a11      	ldr	r2, [pc, #68]	; (800babc <pvPortMalloc+0x194>)
 800ba76:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ba78:	f7fe ff34 	bl	800a8e4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ba7c:	69fb      	ldr	r3, [r7, #28]
 800ba7e:	f003 0307 	and.w	r3, r3, #7
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d00a      	beq.n	800ba9c <pvPortMalloc+0x174>
	__asm volatile
 800ba86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba8a:	f383 8811 	msr	BASEPRI, r3
 800ba8e:	f3bf 8f6f 	isb	sy
 800ba92:	f3bf 8f4f 	dsb	sy
 800ba96:	60fb      	str	r3, [r7, #12]
}
 800ba98:	bf00      	nop
 800ba9a:	e7fe      	b.n	800ba9a <pvPortMalloc+0x172>
	return pvReturn;
 800ba9c:	69fb      	ldr	r3, [r7, #28]
}
 800ba9e:	4618      	mov	r0, r3
 800baa0:	3728      	adds	r7, #40	; 0x28
 800baa2:	46bd      	mov	sp, r7
 800baa4:	bd80      	pop	{r7, pc}
 800baa6:	bf00      	nop
 800baa8:	24004054 	.word	0x24004054
 800baac:	24004068 	.word	0x24004068
 800bab0:	24004058 	.word	0x24004058
 800bab4:	2400404c 	.word	0x2400404c
 800bab8:	2400405c 	.word	0x2400405c
 800babc:	24004060 	.word	0x24004060

0800bac0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800bac0:	b580      	push	{r7, lr}
 800bac2:	b086      	sub	sp, #24
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d04d      	beq.n	800bb6e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800bad2:	2308      	movs	r3, #8
 800bad4:	425b      	negs	r3, r3
 800bad6:	697a      	ldr	r2, [r7, #20]
 800bad8:	4413      	add	r3, r2
 800bada:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800badc:	697b      	ldr	r3, [r7, #20]
 800bade:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bae0:	693b      	ldr	r3, [r7, #16]
 800bae2:	685a      	ldr	r2, [r3, #4]
 800bae4:	4b24      	ldr	r3, [pc, #144]	; (800bb78 <vPortFree+0xb8>)
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	4013      	ands	r3, r2
 800baea:	2b00      	cmp	r3, #0
 800baec:	d10a      	bne.n	800bb04 <vPortFree+0x44>
	__asm volatile
 800baee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baf2:	f383 8811 	msr	BASEPRI, r3
 800baf6:	f3bf 8f6f 	isb	sy
 800bafa:	f3bf 8f4f 	dsb	sy
 800bafe:	60fb      	str	r3, [r7, #12]
}
 800bb00:	bf00      	nop
 800bb02:	e7fe      	b.n	800bb02 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bb04:	693b      	ldr	r3, [r7, #16]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d00a      	beq.n	800bb22 <vPortFree+0x62>
	__asm volatile
 800bb0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb10:	f383 8811 	msr	BASEPRI, r3
 800bb14:	f3bf 8f6f 	isb	sy
 800bb18:	f3bf 8f4f 	dsb	sy
 800bb1c:	60bb      	str	r3, [r7, #8]
}
 800bb1e:	bf00      	nop
 800bb20:	e7fe      	b.n	800bb20 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800bb22:	693b      	ldr	r3, [r7, #16]
 800bb24:	685a      	ldr	r2, [r3, #4]
 800bb26:	4b14      	ldr	r3, [pc, #80]	; (800bb78 <vPortFree+0xb8>)
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	4013      	ands	r3, r2
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d01e      	beq.n	800bb6e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800bb30:	693b      	ldr	r3, [r7, #16]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d11a      	bne.n	800bb6e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bb38:	693b      	ldr	r3, [r7, #16]
 800bb3a:	685a      	ldr	r2, [r3, #4]
 800bb3c:	4b0e      	ldr	r3, [pc, #56]	; (800bb78 <vPortFree+0xb8>)
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	43db      	mvns	r3, r3
 800bb42:	401a      	ands	r2, r3
 800bb44:	693b      	ldr	r3, [r7, #16]
 800bb46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800bb48:	f7fe febe 	bl	800a8c8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bb4c:	693b      	ldr	r3, [r7, #16]
 800bb4e:	685a      	ldr	r2, [r3, #4]
 800bb50:	4b0a      	ldr	r3, [pc, #40]	; (800bb7c <vPortFree+0xbc>)
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	4413      	add	r3, r2
 800bb56:	4a09      	ldr	r2, [pc, #36]	; (800bb7c <vPortFree+0xbc>)
 800bb58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bb5a:	6938      	ldr	r0, [r7, #16]
 800bb5c:	f000 f874 	bl	800bc48 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800bb60:	4b07      	ldr	r3, [pc, #28]	; (800bb80 <vPortFree+0xc0>)
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	3301      	adds	r3, #1
 800bb66:	4a06      	ldr	r2, [pc, #24]	; (800bb80 <vPortFree+0xc0>)
 800bb68:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800bb6a:	f7fe febb 	bl	800a8e4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800bb6e:	bf00      	nop
 800bb70:	3718      	adds	r7, #24
 800bb72:	46bd      	mov	sp, r7
 800bb74:	bd80      	pop	{r7, pc}
 800bb76:	bf00      	nop
 800bb78:	24004068 	.word	0x24004068
 800bb7c:	24004058 	.word	0x24004058
 800bb80:	24004064 	.word	0x24004064

0800bb84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bb84:	b480      	push	{r7}
 800bb86:	b085      	sub	sp, #20
 800bb88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bb8a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800bb8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bb90:	4b27      	ldr	r3, [pc, #156]	; (800bc30 <prvHeapInit+0xac>)
 800bb92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	f003 0307 	and.w	r3, r3, #7
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d00c      	beq.n	800bbb8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	3307      	adds	r3, #7
 800bba2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	f023 0307 	bic.w	r3, r3, #7
 800bbaa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bbac:	68ba      	ldr	r2, [r7, #8]
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	1ad3      	subs	r3, r2, r3
 800bbb2:	4a1f      	ldr	r2, [pc, #124]	; (800bc30 <prvHeapInit+0xac>)
 800bbb4:	4413      	add	r3, r2
 800bbb6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bbbc:	4a1d      	ldr	r2, [pc, #116]	; (800bc34 <prvHeapInit+0xb0>)
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bbc2:	4b1c      	ldr	r3, [pc, #112]	; (800bc34 <prvHeapInit+0xb0>)
 800bbc4:	2200      	movs	r2, #0
 800bbc6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	68ba      	ldr	r2, [r7, #8]
 800bbcc:	4413      	add	r3, r2
 800bbce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bbd0:	2208      	movs	r2, #8
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	1a9b      	subs	r3, r3, r2
 800bbd6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	f023 0307 	bic.w	r3, r3, #7
 800bbde:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	4a15      	ldr	r2, [pc, #84]	; (800bc38 <prvHeapInit+0xb4>)
 800bbe4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bbe6:	4b14      	ldr	r3, [pc, #80]	; (800bc38 <prvHeapInit+0xb4>)
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	2200      	movs	r2, #0
 800bbec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bbee:	4b12      	ldr	r3, [pc, #72]	; (800bc38 <prvHeapInit+0xb4>)
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	2200      	movs	r2, #0
 800bbf4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bbfa:	683b      	ldr	r3, [r7, #0]
 800bbfc:	68fa      	ldr	r2, [r7, #12]
 800bbfe:	1ad2      	subs	r2, r2, r3
 800bc00:	683b      	ldr	r3, [r7, #0]
 800bc02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bc04:	4b0c      	ldr	r3, [pc, #48]	; (800bc38 <prvHeapInit+0xb4>)
 800bc06:	681a      	ldr	r2, [r3, #0]
 800bc08:	683b      	ldr	r3, [r7, #0]
 800bc0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bc0c:	683b      	ldr	r3, [r7, #0]
 800bc0e:	685b      	ldr	r3, [r3, #4]
 800bc10:	4a0a      	ldr	r2, [pc, #40]	; (800bc3c <prvHeapInit+0xb8>)
 800bc12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bc14:	683b      	ldr	r3, [r7, #0]
 800bc16:	685b      	ldr	r3, [r3, #4]
 800bc18:	4a09      	ldr	r2, [pc, #36]	; (800bc40 <prvHeapInit+0xbc>)
 800bc1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bc1c:	4b09      	ldr	r3, [pc, #36]	; (800bc44 <prvHeapInit+0xc0>)
 800bc1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800bc22:	601a      	str	r2, [r3, #0]
}
 800bc24:	bf00      	nop
 800bc26:	3714      	adds	r7, #20
 800bc28:	46bd      	mov	sp, r7
 800bc2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc2e:	4770      	bx	lr
 800bc30:	2400044c 	.word	0x2400044c
 800bc34:	2400404c 	.word	0x2400404c
 800bc38:	24004054 	.word	0x24004054
 800bc3c:	2400405c 	.word	0x2400405c
 800bc40:	24004058 	.word	0x24004058
 800bc44:	24004068 	.word	0x24004068

0800bc48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bc48:	b480      	push	{r7}
 800bc4a:	b085      	sub	sp, #20
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bc50:	4b28      	ldr	r3, [pc, #160]	; (800bcf4 <prvInsertBlockIntoFreeList+0xac>)
 800bc52:	60fb      	str	r3, [r7, #12]
 800bc54:	e002      	b.n	800bc5c <prvInsertBlockIntoFreeList+0x14>
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	60fb      	str	r3, [r7, #12]
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	687a      	ldr	r2, [r7, #4]
 800bc62:	429a      	cmp	r2, r3
 800bc64:	d8f7      	bhi.n	800bc56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	685b      	ldr	r3, [r3, #4]
 800bc6e:	68ba      	ldr	r2, [r7, #8]
 800bc70:	4413      	add	r3, r2
 800bc72:	687a      	ldr	r2, [r7, #4]
 800bc74:	429a      	cmp	r2, r3
 800bc76:	d108      	bne.n	800bc8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	685a      	ldr	r2, [r3, #4]
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	685b      	ldr	r3, [r3, #4]
 800bc80:	441a      	add	r2, r3
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	685b      	ldr	r3, [r3, #4]
 800bc92:	68ba      	ldr	r2, [r7, #8]
 800bc94:	441a      	add	r2, r3
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	429a      	cmp	r2, r3
 800bc9c:	d118      	bne.n	800bcd0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	681a      	ldr	r2, [r3, #0]
 800bca2:	4b15      	ldr	r3, [pc, #84]	; (800bcf8 <prvInsertBlockIntoFreeList+0xb0>)
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	429a      	cmp	r2, r3
 800bca8:	d00d      	beq.n	800bcc6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	685a      	ldr	r2, [r3, #4]
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	685b      	ldr	r3, [r3, #4]
 800bcb4:	441a      	add	r2, r3
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	681a      	ldr	r2, [r3, #0]
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	601a      	str	r2, [r3, #0]
 800bcc4:	e008      	b.n	800bcd8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bcc6:	4b0c      	ldr	r3, [pc, #48]	; (800bcf8 <prvInsertBlockIntoFreeList+0xb0>)
 800bcc8:	681a      	ldr	r2, [r3, #0]
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	601a      	str	r2, [r3, #0]
 800bcce:	e003      	b.n	800bcd8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	681a      	ldr	r2, [r3, #0]
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bcd8:	68fa      	ldr	r2, [r7, #12]
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	429a      	cmp	r2, r3
 800bcde:	d002      	beq.n	800bce6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	687a      	ldr	r2, [r7, #4]
 800bce4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bce6:	bf00      	nop
 800bce8:	3714      	adds	r7, #20
 800bcea:	46bd      	mov	sp, r7
 800bcec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf0:	4770      	bx	lr
 800bcf2:	bf00      	nop
 800bcf4:	2400404c 	.word	0x2400404c
 800bcf8:	24004054 	.word	0x24004054

0800bcfc <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800bcfc:	b580      	push	{r7, lr}
 800bcfe:	b084      	sub	sp, #16
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	6078      	str	r0, [r7, #4]
 800bd04:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800bd06:	f008 fa91 	bl	801422c <sys_timeouts_sleeptime>
 800bd0a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd12:	d10b      	bne.n	800bd2c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800bd14:	4813      	ldr	r0, [pc, #76]	; (800bd64 <tcpip_timeouts_mbox_fetch+0x68>)
 800bd16:	f00b f826 	bl	8016d66 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800bd1a:	2200      	movs	r2, #0
 800bd1c:	6839      	ldr	r1, [r7, #0]
 800bd1e:	6878      	ldr	r0, [r7, #4]
 800bd20:	f00a ff98 	bl	8016c54 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800bd24:	480f      	ldr	r0, [pc, #60]	; (800bd64 <tcpip_timeouts_mbox_fetch+0x68>)
 800bd26:	f00b f80f 	bl	8016d48 <sys_mutex_lock>
    return;
 800bd2a:	e018      	b.n	800bd5e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d102      	bne.n	800bd38 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800bd32:	f008 fa41 	bl	80141b8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800bd36:	e7e6      	b.n	800bd06 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800bd38:	480a      	ldr	r0, [pc, #40]	; (800bd64 <tcpip_timeouts_mbox_fetch+0x68>)
 800bd3a:	f00b f814 	bl	8016d66 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800bd3e:	68fa      	ldr	r2, [r7, #12]
 800bd40:	6839      	ldr	r1, [r7, #0]
 800bd42:	6878      	ldr	r0, [r7, #4]
 800bd44:	f00a ff86 	bl	8016c54 <sys_arch_mbox_fetch>
 800bd48:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800bd4a:	4806      	ldr	r0, [pc, #24]	; (800bd64 <tcpip_timeouts_mbox_fetch+0x68>)
 800bd4c:	f00a fffc 	bl	8016d48 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800bd50:	68bb      	ldr	r3, [r7, #8]
 800bd52:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd56:	d102      	bne.n	800bd5e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800bd58:	f008 fa2e 	bl	80141b8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800bd5c:	e7d3      	b.n	800bd06 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800bd5e:	3710      	adds	r7, #16
 800bd60:	46bd      	mov	sp, r7
 800bd62:	bd80      	pop	{r7, pc}
 800bd64:	240048e4 	.word	0x240048e4

0800bd68 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800bd68:	b580      	push	{r7, lr}
 800bd6a:	b084      	sub	sp, #16
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800bd70:	4810      	ldr	r0, [pc, #64]	; (800bdb4 <tcpip_thread+0x4c>)
 800bd72:	f00a ffe9 	bl	8016d48 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800bd76:	4b10      	ldr	r3, [pc, #64]	; (800bdb8 <tcpip_thread+0x50>)
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d005      	beq.n	800bd8a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800bd7e:	4b0e      	ldr	r3, [pc, #56]	; (800bdb8 <tcpip_thread+0x50>)
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	4a0e      	ldr	r2, [pc, #56]	; (800bdbc <tcpip_thread+0x54>)
 800bd84:	6812      	ldr	r2, [r2, #0]
 800bd86:	4610      	mov	r0, r2
 800bd88:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800bd8a:	f107 030c 	add.w	r3, r7, #12
 800bd8e:	4619      	mov	r1, r3
 800bd90:	480b      	ldr	r0, [pc, #44]	; (800bdc0 <tcpip_thread+0x58>)
 800bd92:	f7ff ffb3 	bl	800bcfc <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d106      	bne.n	800bdaa <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800bd9c:	4b09      	ldr	r3, [pc, #36]	; (800bdc4 <tcpip_thread+0x5c>)
 800bd9e:	2291      	movs	r2, #145	; 0x91
 800bda0:	4909      	ldr	r1, [pc, #36]	; (800bdc8 <tcpip_thread+0x60>)
 800bda2:	480a      	ldr	r0, [pc, #40]	; (800bdcc <tcpip_thread+0x64>)
 800bda4:	f00b f878 	bl	8016e98 <iprintf>
      continue;
 800bda8:	e003      	b.n	800bdb2 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	4618      	mov	r0, r3
 800bdae:	f000 f80f 	bl	800bdd0 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800bdb2:	e7ea      	b.n	800bd8a <tcpip_thread+0x22>
 800bdb4:	240048e4 	.word	0x240048e4
 800bdb8:	2400406c 	.word	0x2400406c
 800bdbc:	24004070 	.word	0x24004070
 800bdc0:	24004074 	.word	0x24004074
 800bdc4:	08018004 	.word	0x08018004
 800bdc8:	08018034 	.word	0x08018034
 800bdcc:	08018054 	.word	0x08018054

0800bdd0 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800bdd0:	b580      	push	{r7, lr}
 800bdd2:	b082      	sub	sp, #8
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	781b      	ldrb	r3, [r3, #0]
 800bddc:	2b02      	cmp	r3, #2
 800bdde:	d026      	beq.n	800be2e <tcpip_thread_handle_msg+0x5e>
 800bde0:	2b02      	cmp	r3, #2
 800bde2:	dc2b      	bgt.n	800be3c <tcpip_thread_handle_msg+0x6c>
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d002      	beq.n	800bdee <tcpip_thread_handle_msg+0x1e>
 800bde8:	2b01      	cmp	r3, #1
 800bdea:	d015      	beq.n	800be18 <tcpip_thread_handle_msg+0x48>
 800bdec:	e026      	b.n	800be3c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	68db      	ldr	r3, [r3, #12]
 800bdf2:	687a      	ldr	r2, [r7, #4]
 800bdf4:	6850      	ldr	r0, [r2, #4]
 800bdf6:	687a      	ldr	r2, [r7, #4]
 800bdf8:	6892      	ldr	r2, [r2, #8]
 800bdfa:	4611      	mov	r1, r2
 800bdfc:	4798      	blx	r3
 800bdfe:	4603      	mov	r3, r0
 800be00:	2b00      	cmp	r3, #0
 800be02:	d004      	beq.n	800be0e <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	685b      	ldr	r3, [r3, #4]
 800be08:	4618      	mov	r0, r3
 800be0a:	f001 fdd3 	bl	800d9b4 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800be0e:	6879      	ldr	r1, [r7, #4]
 800be10:	2009      	movs	r0, #9
 800be12:	f000 ff2b 	bl	800cc6c <memp_free>
      break;
 800be16:	e018      	b.n	800be4a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	685b      	ldr	r3, [r3, #4]
 800be1c:	687a      	ldr	r2, [r7, #4]
 800be1e:	6892      	ldr	r2, [r2, #8]
 800be20:	4610      	mov	r0, r2
 800be22:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800be24:	6879      	ldr	r1, [r7, #4]
 800be26:	2008      	movs	r0, #8
 800be28:	f000 ff20 	bl	800cc6c <memp_free>
      break;
 800be2c:	e00d      	b.n	800be4a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	685b      	ldr	r3, [r3, #4]
 800be32:	687a      	ldr	r2, [r7, #4]
 800be34:	6892      	ldr	r2, [r2, #8]
 800be36:	4610      	mov	r0, r2
 800be38:	4798      	blx	r3
      break;
 800be3a:	e006      	b.n	800be4a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800be3c:	4b05      	ldr	r3, [pc, #20]	; (800be54 <tcpip_thread_handle_msg+0x84>)
 800be3e:	22cf      	movs	r2, #207	; 0xcf
 800be40:	4905      	ldr	r1, [pc, #20]	; (800be58 <tcpip_thread_handle_msg+0x88>)
 800be42:	4806      	ldr	r0, [pc, #24]	; (800be5c <tcpip_thread_handle_msg+0x8c>)
 800be44:	f00b f828 	bl	8016e98 <iprintf>
      break;
 800be48:	bf00      	nop
  }
}
 800be4a:	bf00      	nop
 800be4c:	3708      	adds	r7, #8
 800be4e:	46bd      	mov	sp, r7
 800be50:	bd80      	pop	{r7, pc}
 800be52:	bf00      	nop
 800be54:	08018004 	.word	0x08018004
 800be58:	08018034 	.word	0x08018034
 800be5c:	08018054 	.word	0x08018054

0800be60 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800be60:	b580      	push	{r7, lr}
 800be62:	b086      	sub	sp, #24
 800be64:	af00      	add	r7, sp, #0
 800be66:	60f8      	str	r0, [r7, #12]
 800be68:	60b9      	str	r1, [r7, #8]
 800be6a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800be6c:	481a      	ldr	r0, [pc, #104]	; (800bed8 <tcpip_inpkt+0x78>)
 800be6e:	f00a ff30 	bl	8016cd2 <sys_mbox_valid>
 800be72:	4603      	mov	r3, r0
 800be74:	2b00      	cmp	r3, #0
 800be76:	d105      	bne.n	800be84 <tcpip_inpkt+0x24>
 800be78:	4b18      	ldr	r3, [pc, #96]	; (800bedc <tcpip_inpkt+0x7c>)
 800be7a:	22fc      	movs	r2, #252	; 0xfc
 800be7c:	4918      	ldr	r1, [pc, #96]	; (800bee0 <tcpip_inpkt+0x80>)
 800be7e:	4819      	ldr	r0, [pc, #100]	; (800bee4 <tcpip_inpkt+0x84>)
 800be80:	f00b f80a 	bl	8016e98 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800be84:	2009      	movs	r0, #9
 800be86:	f000 fe7b 	bl	800cb80 <memp_malloc>
 800be8a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800be8c:	697b      	ldr	r3, [r7, #20]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d102      	bne.n	800be98 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800be92:	f04f 33ff 	mov.w	r3, #4294967295
 800be96:	e01a      	b.n	800bece <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800be98:	697b      	ldr	r3, [r7, #20]
 800be9a:	2200      	movs	r2, #0
 800be9c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800be9e:	697b      	ldr	r3, [r7, #20]
 800bea0:	68fa      	ldr	r2, [r7, #12]
 800bea2:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800bea4:	697b      	ldr	r3, [r7, #20]
 800bea6:	68ba      	ldr	r2, [r7, #8]
 800bea8:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800beaa:	697b      	ldr	r3, [r7, #20]
 800beac:	687a      	ldr	r2, [r7, #4]
 800beae:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800beb0:	6979      	ldr	r1, [r7, #20]
 800beb2:	4809      	ldr	r0, [pc, #36]	; (800bed8 <tcpip_inpkt+0x78>)
 800beb4:	f00a feb4 	bl	8016c20 <sys_mbox_trypost>
 800beb8:	4603      	mov	r3, r0
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d006      	beq.n	800becc <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800bebe:	6979      	ldr	r1, [r7, #20]
 800bec0:	2009      	movs	r0, #9
 800bec2:	f000 fed3 	bl	800cc6c <memp_free>
    return ERR_MEM;
 800bec6:	f04f 33ff 	mov.w	r3, #4294967295
 800beca:	e000      	b.n	800bece <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800becc:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800bece:	4618      	mov	r0, r3
 800bed0:	3718      	adds	r7, #24
 800bed2:	46bd      	mov	sp, r7
 800bed4:	bd80      	pop	{r7, pc}
 800bed6:	bf00      	nop
 800bed8:	24004074 	.word	0x24004074
 800bedc:	08018004 	.word	0x08018004
 800bee0:	0801807c 	.word	0x0801807c
 800bee4:	08018054 	.word	0x08018054

0800bee8 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800bee8:	b580      	push	{r7, lr}
 800beea:	b082      	sub	sp, #8
 800beec:	af00      	add	r7, sp, #0
 800beee:	6078      	str	r0, [r7, #4]
 800bef0:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800bef2:	683b      	ldr	r3, [r7, #0]
 800bef4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800bef8:	f003 0318 	and.w	r3, r3, #24
 800befc:	2b00      	cmp	r3, #0
 800befe:	d006      	beq.n	800bf0e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800bf00:	4a08      	ldr	r2, [pc, #32]	; (800bf24 <tcpip_input+0x3c>)
 800bf02:	6839      	ldr	r1, [r7, #0]
 800bf04:	6878      	ldr	r0, [r7, #4]
 800bf06:	f7ff ffab 	bl	800be60 <tcpip_inpkt>
 800bf0a:	4603      	mov	r3, r0
 800bf0c:	e005      	b.n	800bf1a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800bf0e:	4a06      	ldr	r2, [pc, #24]	; (800bf28 <tcpip_input+0x40>)
 800bf10:	6839      	ldr	r1, [r7, #0]
 800bf12:	6878      	ldr	r0, [r7, #4]
 800bf14:	f7ff ffa4 	bl	800be60 <tcpip_inpkt>
 800bf18:	4603      	mov	r3, r0
}
 800bf1a:	4618      	mov	r0, r3
 800bf1c:	3708      	adds	r7, #8
 800bf1e:	46bd      	mov	sp, r7
 800bf20:	bd80      	pop	{r7, pc}
 800bf22:	bf00      	nop
 800bf24:	08016a31 	.word	0x08016a31
 800bf28:	08015945 	.word	0x08015945

0800bf2c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800bf2c:	b580      	push	{r7, lr}
 800bf2e:	b084      	sub	sp, #16
 800bf30:	af00      	add	r7, sp, #0
 800bf32:	6078      	str	r0, [r7, #4]
 800bf34:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800bf36:	4819      	ldr	r0, [pc, #100]	; (800bf9c <tcpip_try_callback+0x70>)
 800bf38:	f00a fecb 	bl	8016cd2 <sys_mbox_valid>
 800bf3c:	4603      	mov	r3, r0
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d106      	bne.n	800bf50 <tcpip_try_callback+0x24>
 800bf42:	4b17      	ldr	r3, [pc, #92]	; (800bfa0 <tcpip_try_callback+0x74>)
 800bf44:	f240 125d 	movw	r2, #349	; 0x15d
 800bf48:	4916      	ldr	r1, [pc, #88]	; (800bfa4 <tcpip_try_callback+0x78>)
 800bf4a:	4817      	ldr	r0, [pc, #92]	; (800bfa8 <tcpip_try_callback+0x7c>)
 800bf4c:	f00a ffa4 	bl	8016e98 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800bf50:	2008      	movs	r0, #8
 800bf52:	f000 fe15 	bl	800cb80 <memp_malloc>
 800bf56:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d102      	bne.n	800bf64 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800bf5e:	f04f 33ff 	mov.w	r3, #4294967295
 800bf62:	e017      	b.n	800bf94 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	2201      	movs	r2, #1
 800bf68:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	687a      	ldr	r2, [r7, #4]
 800bf6e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	683a      	ldr	r2, [r7, #0]
 800bf74:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800bf76:	68f9      	ldr	r1, [r7, #12]
 800bf78:	4808      	ldr	r0, [pc, #32]	; (800bf9c <tcpip_try_callback+0x70>)
 800bf7a:	f00a fe51 	bl	8016c20 <sys_mbox_trypost>
 800bf7e:	4603      	mov	r3, r0
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d006      	beq.n	800bf92 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800bf84:	68f9      	ldr	r1, [r7, #12]
 800bf86:	2008      	movs	r0, #8
 800bf88:	f000 fe70 	bl	800cc6c <memp_free>
    return ERR_MEM;
 800bf8c:	f04f 33ff 	mov.w	r3, #4294967295
 800bf90:	e000      	b.n	800bf94 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800bf92:	2300      	movs	r3, #0
}
 800bf94:	4618      	mov	r0, r3
 800bf96:	3710      	adds	r7, #16
 800bf98:	46bd      	mov	sp, r7
 800bf9a:	bd80      	pop	{r7, pc}
 800bf9c:	24004074 	.word	0x24004074
 800bfa0:	08018004 	.word	0x08018004
 800bfa4:	0801807c 	.word	0x0801807c
 800bfa8:	08018054 	.word	0x08018054

0800bfac <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800bfac:	b580      	push	{r7, lr}
 800bfae:	b084      	sub	sp, #16
 800bfb0:	af02      	add	r7, sp, #8
 800bfb2:	6078      	str	r0, [r7, #4]
 800bfb4:	6039      	str	r1, [r7, #0]
  lwip_init();
 800bfb6:	f000 f92d 	bl	800c214 <lwip_init>

  tcpip_init_done = initfunc;
 800bfba:	4a17      	ldr	r2, [pc, #92]	; (800c018 <tcpip_init+0x6c>)
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800bfc0:	4a16      	ldr	r2, [pc, #88]	; (800c01c <tcpip_init+0x70>)
 800bfc2:	683b      	ldr	r3, [r7, #0]
 800bfc4:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800bfc6:	2106      	movs	r1, #6
 800bfc8:	4815      	ldr	r0, [pc, #84]	; (800c020 <tcpip_init+0x74>)
 800bfca:	f00a fe07 	bl	8016bdc <sys_mbox_new>
 800bfce:	4603      	mov	r3, r0
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d006      	beq.n	800bfe2 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800bfd4:	4b13      	ldr	r3, [pc, #76]	; (800c024 <tcpip_init+0x78>)
 800bfd6:	f240 2261 	movw	r2, #609	; 0x261
 800bfda:	4913      	ldr	r1, [pc, #76]	; (800c028 <tcpip_init+0x7c>)
 800bfdc:	4813      	ldr	r0, [pc, #76]	; (800c02c <tcpip_init+0x80>)
 800bfde:	f00a ff5b 	bl	8016e98 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800bfe2:	4813      	ldr	r0, [pc, #76]	; (800c030 <tcpip_init+0x84>)
 800bfe4:	f00a fe94 	bl	8016d10 <sys_mutex_new>
 800bfe8:	4603      	mov	r3, r0
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d006      	beq.n	800bffc <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800bfee:	4b0d      	ldr	r3, [pc, #52]	; (800c024 <tcpip_init+0x78>)
 800bff0:	f240 2265 	movw	r2, #613	; 0x265
 800bff4:	490f      	ldr	r1, [pc, #60]	; (800c034 <tcpip_init+0x88>)
 800bff6:	480d      	ldr	r0, [pc, #52]	; (800c02c <tcpip_init+0x80>)
 800bff8:	f00a ff4e 	bl	8016e98 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800bffc:	2300      	movs	r3, #0
 800bffe:	9300      	str	r3, [sp, #0]
 800c000:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c004:	2200      	movs	r2, #0
 800c006:	490c      	ldr	r1, [pc, #48]	; (800c038 <tcpip_init+0x8c>)
 800c008:	480c      	ldr	r0, [pc, #48]	; (800c03c <tcpip_init+0x90>)
 800c00a:	f00a feb9 	bl	8016d80 <sys_thread_new>
}
 800c00e:	bf00      	nop
 800c010:	3708      	adds	r7, #8
 800c012:	46bd      	mov	sp, r7
 800c014:	bd80      	pop	{r7, pc}
 800c016:	bf00      	nop
 800c018:	2400406c 	.word	0x2400406c
 800c01c:	24004070 	.word	0x24004070
 800c020:	24004074 	.word	0x24004074
 800c024:	08018004 	.word	0x08018004
 800c028:	0801808c 	.word	0x0801808c
 800c02c:	08018054 	.word	0x08018054
 800c030:	240048e4 	.word	0x240048e4
 800c034:	080180b0 	.word	0x080180b0
 800c038:	0800bd69 	.word	0x0800bd69
 800c03c:	080180d4 	.word	0x080180d4

0800c040 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800c040:	b480      	push	{r7}
 800c042:	b083      	sub	sp, #12
 800c044:	af00      	add	r7, sp, #0
 800c046:	4603      	mov	r3, r0
 800c048:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800c04a:	88fb      	ldrh	r3, [r7, #6]
 800c04c:	021b      	lsls	r3, r3, #8
 800c04e:	b21a      	sxth	r2, r3
 800c050:	88fb      	ldrh	r3, [r7, #6]
 800c052:	0a1b      	lsrs	r3, r3, #8
 800c054:	b29b      	uxth	r3, r3
 800c056:	b21b      	sxth	r3, r3
 800c058:	4313      	orrs	r3, r2
 800c05a:	b21b      	sxth	r3, r3
 800c05c:	b29b      	uxth	r3, r3
}
 800c05e:	4618      	mov	r0, r3
 800c060:	370c      	adds	r7, #12
 800c062:	46bd      	mov	sp, r7
 800c064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c068:	4770      	bx	lr

0800c06a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800c06a:	b480      	push	{r7}
 800c06c:	b083      	sub	sp, #12
 800c06e:	af00      	add	r7, sp, #0
 800c070:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	061a      	lsls	r2, r3, #24
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	021b      	lsls	r3, r3, #8
 800c07a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c07e:	431a      	orrs	r2, r3
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	0a1b      	lsrs	r3, r3, #8
 800c084:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c088:	431a      	orrs	r2, r3
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	0e1b      	lsrs	r3, r3, #24
 800c08e:	4313      	orrs	r3, r2
}
 800c090:	4618      	mov	r0, r3
 800c092:	370c      	adds	r7, #12
 800c094:	46bd      	mov	sp, r7
 800c096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c09a:	4770      	bx	lr

0800c09c <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800c09c:	b480      	push	{r7}
 800c09e:	b089      	sub	sp, #36	; 0x24
 800c0a0:	af00      	add	r7, sp, #0
 800c0a2:	6078      	str	r0, [r7, #4]
 800c0a4:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800c0aa:	2300      	movs	r3, #0
 800c0ac:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800c0ae:	2300      	movs	r3, #0
 800c0b0:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800c0b2:	69fb      	ldr	r3, [r7, #28]
 800c0b4:	f003 0301 	and.w	r3, r3, #1
 800c0b8:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800c0ba:	693b      	ldr	r3, [r7, #16]
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d00d      	beq.n	800c0dc <lwip_standard_chksum+0x40>
 800c0c0:	683b      	ldr	r3, [r7, #0]
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	dd0a      	ble.n	800c0dc <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800c0c6:	69fa      	ldr	r2, [r7, #28]
 800c0c8:	1c53      	adds	r3, r2, #1
 800c0ca:	61fb      	str	r3, [r7, #28]
 800c0cc:	f107 030e 	add.w	r3, r7, #14
 800c0d0:	3301      	adds	r3, #1
 800c0d2:	7812      	ldrb	r2, [r2, #0]
 800c0d4:	701a      	strb	r2, [r3, #0]
    len--;
 800c0d6:	683b      	ldr	r3, [r7, #0]
 800c0d8:	3b01      	subs	r3, #1
 800c0da:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 800c0dc:	69fb      	ldr	r3, [r7, #28]
 800c0de:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800c0e0:	e00a      	b.n	800c0f8 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800c0e2:	69bb      	ldr	r3, [r7, #24]
 800c0e4:	1c9a      	adds	r2, r3, #2
 800c0e6:	61ba      	str	r2, [r7, #24]
 800c0e8:	881b      	ldrh	r3, [r3, #0]
 800c0ea:	461a      	mov	r2, r3
 800c0ec:	697b      	ldr	r3, [r7, #20]
 800c0ee:	4413      	add	r3, r2
 800c0f0:	617b      	str	r3, [r7, #20]
    len -= 2;
 800c0f2:	683b      	ldr	r3, [r7, #0]
 800c0f4:	3b02      	subs	r3, #2
 800c0f6:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 800c0f8:	683b      	ldr	r3, [r7, #0]
 800c0fa:	2b01      	cmp	r3, #1
 800c0fc:	dcf1      	bgt.n	800c0e2 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800c0fe:	683b      	ldr	r3, [r7, #0]
 800c100:	2b00      	cmp	r3, #0
 800c102:	dd04      	ble.n	800c10e <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800c104:	f107 030e 	add.w	r3, r7, #14
 800c108:	69ba      	ldr	r2, [r7, #24]
 800c10a:	7812      	ldrb	r2, [r2, #0]
 800c10c:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800c10e:	89fb      	ldrh	r3, [r7, #14]
 800c110:	461a      	mov	r2, r3
 800c112:	697b      	ldr	r3, [r7, #20]
 800c114:	4413      	add	r3, r2
 800c116:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800c118:	697b      	ldr	r3, [r7, #20]
 800c11a:	0c1a      	lsrs	r2, r3, #16
 800c11c:	697b      	ldr	r3, [r7, #20]
 800c11e:	b29b      	uxth	r3, r3
 800c120:	4413      	add	r3, r2
 800c122:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 800c124:	697b      	ldr	r3, [r7, #20]
 800c126:	0c1a      	lsrs	r2, r3, #16
 800c128:	697b      	ldr	r3, [r7, #20]
 800c12a:	b29b      	uxth	r3, r3
 800c12c:	4413      	add	r3, r2
 800c12e:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800c130:	693b      	ldr	r3, [r7, #16]
 800c132:	2b00      	cmp	r3, #0
 800c134:	d007      	beq.n	800c146 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800c136:	697b      	ldr	r3, [r7, #20]
 800c138:	021b      	lsls	r3, r3, #8
 800c13a:	b29a      	uxth	r2, r3
 800c13c:	697b      	ldr	r3, [r7, #20]
 800c13e:	0a1b      	lsrs	r3, r3, #8
 800c140:	b2db      	uxtb	r3, r3
 800c142:	4313      	orrs	r3, r2
 800c144:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800c146:	697b      	ldr	r3, [r7, #20]
 800c148:	b29b      	uxth	r3, r3
}
 800c14a:	4618      	mov	r0, r3
 800c14c:	3724      	adds	r7, #36	; 0x24
 800c14e:	46bd      	mov	sp, r7
 800c150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c154:	4770      	bx	lr

0800c156 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 800c156:	b580      	push	{r7, lr}
 800c158:	b082      	sub	sp, #8
 800c15a:	af00      	add	r7, sp, #0
 800c15c:	6078      	str	r0, [r7, #4]
 800c15e:	460b      	mov	r3, r1
 800c160:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800c162:	887b      	ldrh	r3, [r7, #2]
 800c164:	4619      	mov	r1, r3
 800c166:	6878      	ldr	r0, [r7, #4]
 800c168:	f7ff ff98 	bl	800c09c <lwip_standard_chksum>
 800c16c:	4603      	mov	r3, r0
 800c16e:	43db      	mvns	r3, r3
 800c170:	b29b      	uxth	r3, r3
}
 800c172:	4618      	mov	r0, r3
 800c174:	3708      	adds	r7, #8
 800c176:	46bd      	mov	sp, r7
 800c178:	bd80      	pop	{r7, pc}

0800c17a <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 800c17a:	b580      	push	{r7, lr}
 800c17c:	b086      	sub	sp, #24
 800c17e:	af00      	add	r7, sp, #0
 800c180:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 800c182:	2300      	movs	r3, #0
 800c184:	60fb      	str	r3, [r7, #12]

  acc = 0;
 800c186:	2300      	movs	r3, #0
 800c188:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	613b      	str	r3, [r7, #16]
 800c18e:	e02b      	b.n	800c1e8 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 800c190:	693b      	ldr	r3, [r7, #16]
 800c192:	685a      	ldr	r2, [r3, #4]
 800c194:	693b      	ldr	r3, [r7, #16]
 800c196:	895b      	ldrh	r3, [r3, #10]
 800c198:	4619      	mov	r1, r3
 800c19a:	4610      	mov	r0, r2
 800c19c:	f7ff ff7e 	bl	800c09c <lwip_standard_chksum>
 800c1a0:	4603      	mov	r3, r0
 800c1a2:	461a      	mov	r2, r3
 800c1a4:	697b      	ldr	r3, [r7, #20]
 800c1a6:	4413      	add	r3, r2
 800c1a8:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 800c1aa:	697b      	ldr	r3, [r7, #20]
 800c1ac:	0c1a      	lsrs	r2, r3, #16
 800c1ae:	697b      	ldr	r3, [r7, #20]
 800c1b0:	b29b      	uxth	r3, r3
 800c1b2:	4413      	add	r3, r2
 800c1b4:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 800c1b6:	693b      	ldr	r3, [r7, #16]
 800c1b8:	895b      	ldrh	r3, [r3, #10]
 800c1ba:	f003 0301 	and.w	r3, r3, #1
 800c1be:	b29b      	uxth	r3, r3
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d00e      	beq.n	800c1e2 <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	bf0c      	ite	eq
 800c1ca:	2301      	moveq	r3, #1
 800c1cc:	2300      	movne	r3, #0
 800c1ce:	b2db      	uxtb	r3, r3
 800c1d0:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 800c1d2:	697b      	ldr	r3, [r7, #20]
 800c1d4:	021b      	lsls	r3, r3, #8
 800c1d6:	b29a      	uxth	r2, r3
 800c1d8:	697b      	ldr	r3, [r7, #20]
 800c1da:	0a1b      	lsrs	r3, r3, #8
 800c1dc:	b2db      	uxtb	r3, r3
 800c1de:	4313      	orrs	r3, r2
 800c1e0:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800c1e2:	693b      	ldr	r3, [r7, #16]
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	613b      	str	r3, [r7, #16]
 800c1e8:	693b      	ldr	r3, [r7, #16]
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d1d0      	bne.n	800c190 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d007      	beq.n	800c204 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 800c1f4:	697b      	ldr	r3, [r7, #20]
 800c1f6:	021b      	lsls	r3, r3, #8
 800c1f8:	b29a      	uxth	r2, r3
 800c1fa:	697b      	ldr	r3, [r7, #20]
 800c1fc:	0a1b      	lsrs	r3, r3, #8
 800c1fe:	b2db      	uxtb	r3, r3
 800c200:	4313      	orrs	r3, r2
 800c202:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 800c204:	697b      	ldr	r3, [r7, #20]
 800c206:	b29b      	uxth	r3, r3
 800c208:	43db      	mvns	r3, r3
 800c20a:	b29b      	uxth	r3, r3
}
 800c20c:	4618      	mov	r0, r3
 800c20e:	3718      	adds	r7, #24
 800c210:	46bd      	mov	sp, r7
 800c212:	bd80      	pop	{r7, pc}

0800c214 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800c214:	b580      	push	{r7, lr}
 800c216:	b082      	sub	sp, #8
 800c218:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800c21a:	2300      	movs	r3, #0
 800c21c:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800c21e:	f00a fd69 	bl	8016cf4 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800c222:	f000 f8d9 	bl	800c3d8 <mem_init>
  memp_init();
 800c226:	f000 fc3d 	bl	800caa4 <memp_init>
  pbuf_init();
  netif_init();
 800c22a:	f000 fd49 	bl	800ccc0 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800c22e:	f008 f835 	bl	801429c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800c232:	f001 fe69 	bl	800df08 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800c236:	f007 ff77 	bl	8014128 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800c23a:	bf00      	nop
 800c23c:	3708      	adds	r7, #8
 800c23e:	46bd      	mov	sp, r7
 800c240:	bd80      	pop	{r7, pc}
	...

0800c244 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800c244:	b480      	push	{r7}
 800c246:	b083      	sub	sp, #12
 800c248:	af00      	add	r7, sp, #0
 800c24a:	4603      	mov	r3, r0
 800c24c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800c24e:	4b05      	ldr	r3, [pc, #20]	; (800c264 <ptr_to_mem+0x20>)
 800c250:	681a      	ldr	r2, [r3, #0]
 800c252:	88fb      	ldrh	r3, [r7, #6]
 800c254:	4413      	add	r3, r2
}
 800c256:	4618      	mov	r0, r3
 800c258:	370c      	adds	r7, #12
 800c25a:	46bd      	mov	sp, r7
 800c25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c260:	4770      	bx	lr
 800c262:	bf00      	nop
 800c264:	24004078 	.word	0x24004078

0800c268 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800c268:	b480      	push	{r7}
 800c26a:	b083      	sub	sp, #12
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800c270:	4b05      	ldr	r3, [pc, #20]	; (800c288 <mem_to_ptr+0x20>)
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	687a      	ldr	r2, [r7, #4]
 800c276:	1ad3      	subs	r3, r2, r3
 800c278:	b29b      	uxth	r3, r3
}
 800c27a:	4618      	mov	r0, r3
 800c27c:	370c      	adds	r7, #12
 800c27e:	46bd      	mov	sp, r7
 800c280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c284:	4770      	bx	lr
 800c286:	bf00      	nop
 800c288:	24004078 	.word	0x24004078

0800c28c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800c28c:	b590      	push	{r4, r7, lr}
 800c28e:	b085      	sub	sp, #20
 800c290:	af00      	add	r7, sp, #0
 800c292:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800c294:	4b47      	ldr	r3, [pc, #284]	; (800c3b4 <plug_holes+0x128>)
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	687a      	ldr	r2, [r7, #4]
 800c29a:	429a      	cmp	r2, r3
 800c29c:	d206      	bcs.n	800c2ac <plug_holes+0x20>
 800c29e:	4b46      	ldr	r3, [pc, #280]	; (800c3b8 <plug_holes+0x12c>)
 800c2a0:	f240 12df 	movw	r2, #479	; 0x1df
 800c2a4:	4945      	ldr	r1, [pc, #276]	; (800c3bc <plug_holes+0x130>)
 800c2a6:	4846      	ldr	r0, [pc, #280]	; (800c3c0 <plug_holes+0x134>)
 800c2a8:	f00a fdf6 	bl	8016e98 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800c2ac:	4b45      	ldr	r3, [pc, #276]	; (800c3c4 <plug_holes+0x138>)
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	687a      	ldr	r2, [r7, #4]
 800c2b2:	429a      	cmp	r2, r3
 800c2b4:	d306      	bcc.n	800c2c4 <plug_holes+0x38>
 800c2b6:	4b40      	ldr	r3, [pc, #256]	; (800c3b8 <plug_holes+0x12c>)
 800c2b8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800c2bc:	4942      	ldr	r1, [pc, #264]	; (800c3c8 <plug_holes+0x13c>)
 800c2be:	4840      	ldr	r0, [pc, #256]	; (800c3c0 <plug_holes+0x134>)
 800c2c0:	f00a fdea 	bl	8016e98 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	791b      	ldrb	r3, [r3, #4]
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d006      	beq.n	800c2da <plug_holes+0x4e>
 800c2cc:	4b3a      	ldr	r3, [pc, #232]	; (800c3b8 <plug_holes+0x12c>)
 800c2ce:	f240 12e1 	movw	r2, #481	; 0x1e1
 800c2d2:	493e      	ldr	r1, [pc, #248]	; (800c3cc <plug_holes+0x140>)
 800c2d4:	483a      	ldr	r0, [pc, #232]	; (800c3c0 <plug_holes+0x134>)
 800c2d6:	f00a fddf 	bl	8016e98 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	881b      	ldrh	r3, [r3, #0]
 800c2de:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800c2e2:	4293      	cmp	r3, r2
 800c2e4:	d906      	bls.n	800c2f4 <plug_holes+0x68>
 800c2e6:	4b34      	ldr	r3, [pc, #208]	; (800c3b8 <plug_holes+0x12c>)
 800c2e8:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800c2ec:	4938      	ldr	r1, [pc, #224]	; (800c3d0 <plug_holes+0x144>)
 800c2ee:	4834      	ldr	r0, [pc, #208]	; (800c3c0 <plug_holes+0x134>)
 800c2f0:	f00a fdd2 	bl	8016e98 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	881b      	ldrh	r3, [r3, #0]
 800c2f8:	4618      	mov	r0, r3
 800c2fa:	f7ff ffa3 	bl	800c244 <ptr_to_mem>
 800c2fe:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800c300:	687a      	ldr	r2, [r7, #4]
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	429a      	cmp	r2, r3
 800c306:	d025      	beq.n	800c354 <plug_holes+0xc8>
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	791b      	ldrb	r3, [r3, #4]
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d121      	bne.n	800c354 <plug_holes+0xc8>
 800c310:	4b2c      	ldr	r3, [pc, #176]	; (800c3c4 <plug_holes+0x138>)
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	68fa      	ldr	r2, [r7, #12]
 800c316:	429a      	cmp	r2, r3
 800c318:	d01c      	beq.n	800c354 <plug_holes+0xc8>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800c31a:	4b2e      	ldr	r3, [pc, #184]	; (800c3d4 <plug_holes+0x148>)
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	68fa      	ldr	r2, [r7, #12]
 800c320:	429a      	cmp	r2, r3
 800c322:	d102      	bne.n	800c32a <plug_holes+0x9e>
      lfree = mem;
 800c324:	4a2b      	ldr	r2, [pc, #172]	; (800c3d4 <plug_holes+0x148>)
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	881a      	ldrh	r2, [r3, #0]
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	881b      	ldrh	r3, [r3, #0]
 800c336:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800c33a:	4293      	cmp	r3, r2
 800c33c:	d00a      	beq.n	800c354 <plug_holes+0xc8>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	881b      	ldrh	r3, [r3, #0]
 800c342:	4618      	mov	r0, r3
 800c344:	f7ff ff7e 	bl	800c244 <ptr_to_mem>
 800c348:	4604      	mov	r4, r0
 800c34a:	6878      	ldr	r0, [r7, #4]
 800c34c:	f7ff ff8c 	bl	800c268 <mem_to_ptr>
 800c350:	4603      	mov	r3, r0
 800c352:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	885b      	ldrh	r3, [r3, #2]
 800c358:	4618      	mov	r0, r3
 800c35a:	f7ff ff73 	bl	800c244 <ptr_to_mem>
 800c35e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800c360:	68ba      	ldr	r2, [r7, #8]
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	429a      	cmp	r2, r3
 800c366:	d020      	beq.n	800c3aa <plug_holes+0x11e>
 800c368:	68bb      	ldr	r3, [r7, #8]
 800c36a:	791b      	ldrb	r3, [r3, #4]
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d11c      	bne.n	800c3aa <plug_holes+0x11e>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800c370:	4b18      	ldr	r3, [pc, #96]	; (800c3d4 <plug_holes+0x148>)
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	687a      	ldr	r2, [r7, #4]
 800c376:	429a      	cmp	r2, r3
 800c378:	d102      	bne.n	800c380 <plug_holes+0xf4>
      lfree = pmem;
 800c37a:	4a16      	ldr	r2, [pc, #88]	; (800c3d4 <plug_holes+0x148>)
 800c37c:	68bb      	ldr	r3, [r7, #8]
 800c37e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	881a      	ldrh	r2, [r3, #0]
 800c384:	68bb      	ldr	r3, [r7, #8]
 800c386:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	881b      	ldrh	r3, [r3, #0]
 800c38c:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800c390:	4293      	cmp	r3, r2
 800c392:	d00a      	beq.n	800c3aa <plug_holes+0x11e>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	881b      	ldrh	r3, [r3, #0]
 800c398:	4618      	mov	r0, r3
 800c39a:	f7ff ff53 	bl	800c244 <ptr_to_mem>
 800c39e:	4604      	mov	r4, r0
 800c3a0:	68b8      	ldr	r0, [r7, #8]
 800c3a2:	f7ff ff61 	bl	800c268 <mem_to_ptr>
 800c3a6:	4603      	mov	r3, r0
 800c3a8:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800c3aa:	bf00      	nop
 800c3ac:	3714      	adds	r7, #20
 800c3ae:	46bd      	mov	sp, r7
 800c3b0:	bd90      	pop	{r4, r7, pc}
 800c3b2:	bf00      	nop
 800c3b4:	24004078 	.word	0x24004078
 800c3b8:	080180e4 	.word	0x080180e4
 800c3bc:	08018114 	.word	0x08018114
 800c3c0:	0801812c 	.word	0x0801812c
 800c3c4:	2400407c 	.word	0x2400407c
 800c3c8:	08018154 	.word	0x08018154
 800c3cc:	08018170 	.word	0x08018170
 800c3d0:	0801818c 	.word	0x0801818c
 800c3d4:	24004084 	.word	0x24004084

0800c3d8 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800c3d8:	b580      	push	{r7, lr}
 800c3da:	b082      	sub	sp, #8
 800c3dc:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800c3de:	4b1d      	ldr	r3, [pc, #116]	; (800c454 <mem_init+0x7c>)
 800c3e0:	4a1d      	ldr	r2, [pc, #116]	; (800c458 <mem_init+0x80>)
 800c3e2:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800c3e4:	4b1b      	ldr	r3, [pc, #108]	; (800c454 <mem_init+0x7c>)
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800c3f0:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	2200      	movs	r2, #0
 800c3f6:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	2200      	movs	r2, #0
 800c3fc:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800c3fe:	f643 70e8 	movw	r0, #16360	; 0x3fe8
 800c402:	f7ff ff1f 	bl	800c244 <ptr_to_mem>
 800c406:	4603      	mov	r3, r0
 800c408:	4a14      	ldr	r2, [pc, #80]	; (800c45c <mem_init+0x84>)
 800c40a:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800c40c:	4b13      	ldr	r3, [pc, #76]	; (800c45c <mem_init+0x84>)
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	2201      	movs	r2, #1
 800c412:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800c414:	4b11      	ldr	r3, [pc, #68]	; (800c45c <mem_init+0x84>)
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800c41c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800c41e:	4b0f      	ldr	r3, [pc, #60]	; (800c45c <mem_init+0x84>)
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800c426:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800c428:	4b0a      	ldr	r3, [pc, #40]	; (800c454 <mem_init+0x7c>)
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	4a0c      	ldr	r2, [pc, #48]	; (800c460 <mem_init+0x88>)
 800c42e:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800c430:	480c      	ldr	r0, [pc, #48]	; (800c464 <mem_init+0x8c>)
 800c432:	f00a fc6d 	bl	8016d10 <sys_mutex_new>
 800c436:	4603      	mov	r3, r0
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d006      	beq.n	800c44a <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800c43c:	4b0a      	ldr	r3, [pc, #40]	; (800c468 <mem_init+0x90>)
 800c43e:	f240 221f 	movw	r2, #543	; 0x21f
 800c442:	490a      	ldr	r1, [pc, #40]	; (800c46c <mem_init+0x94>)
 800c444:	480a      	ldr	r0, [pc, #40]	; (800c470 <mem_init+0x98>)
 800c446:	f00a fd27 	bl	8016e98 <iprintf>
  }
}
 800c44a:	bf00      	nop
 800c44c:	3708      	adds	r7, #8
 800c44e:	46bd      	mov	sp, r7
 800c450:	bd80      	pop	{r7, pc}
 800c452:	bf00      	nop
 800c454:	24004078 	.word	0x24004078
 800c458:	30044000 	.word	0x30044000
 800c45c:	2400407c 	.word	0x2400407c
 800c460:	24004084 	.word	0x24004084
 800c464:	24004080 	.word	0x24004080
 800c468:	080180e4 	.word	0x080180e4
 800c46c:	080181b8 	.word	0x080181b8
 800c470:	0801812c 	.word	0x0801812c

0800c474 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800c474:	b580      	push	{r7, lr}
 800c476:	b086      	sub	sp, #24
 800c478:	af00      	add	r7, sp, #0
 800c47a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800c47c:	6878      	ldr	r0, [r7, #4]
 800c47e:	f7ff fef3 	bl	800c268 <mem_to_ptr>
 800c482:	4603      	mov	r3, r0
 800c484:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	881b      	ldrh	r3, [r3, #0]
 800c48a:	4618      	mov	r0, r3
 800c48c:	f7ff feda 	bl	800c244 <ptr_to_mem>
 800c490:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	885b      	ldrh	r3, [r3, #2]
 800c496:	4618      	mov	r0, r3
 800c498:	f7ff fed4 	bl	800c244 <ptr_to_mem>
 800c49c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	881b      	ldrh	r3, [r3, #0]
 800c4a2:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800c4a6:	4293      	cmp	r3, r2
 800c4a8:	d819      	bhi.n	800c4de <mem_link_valid+0x6a>
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	885b      	ldrh	r3, [r3, #2]
 800c4ae:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800c4b2:	4293      	cmp	r3, r2
 800c4b4:	d813      	bhi.n	800c4de <mem_link_valid+0x6a>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800c4ba:	8afa      	ldrh	r2, [r7, #22]
 800c4bc:	429a      	cmp	r2, r3
 800c4be:	d004      	beq.n	800c4ca <mem_link_valid+0x56>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	881b      	ldrh	r3, [r3, #0]
 800c4c4:	8afa      	ldrh	r2, [r7, #22]
 800c4c6:	429a      	cmp	r2, r3
 800c4c8:	d109      	bne.n	800c4de <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800c4ca:	4b08      	ldr	r3, [pc, #32]	; (800c4ec <mem_link_valid+0x78>)
 800c4cc:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c4ce:	693a      	ldr	r2, [r7, #16]
 800c4d0:	429a      	cmp	r2, r3
 800c4d2:	d006      	beq.n	800c4e2 <mem_link_valid+0x6e>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800c4d4:	693b      	ldr	r3, [r7, #16]
 800c4d6:	885b      	ldrh	r3, [r3, #2]
 800c4d8:	8afa      	ldrh	r2, [r7, #22]
 800c4da:	429a      	cmp	r2, r3
 800c4dc:	d001      	beq.n	800c4e2 <mem_link_valid+0x6e>
    return 0;
 800c4de:	2300      	movs	r3, #0
 800c4e0:	e000      	b.n	800c4e4 <mem_link_valid+0x70>
  }
  return 1;
 800c4e2:	2301      	movs	r3, #1
}
 800c4e4:	4618      	mov	r0, r3
 800c4e6:	3718      	adds	r7, #24
 800c4e8:	46bd      	mov	sp, r7
 800c4ea:	bd80      	pop	{r7, pc}
 800c4ec:	2400407c 	.word	0x2400407c

0800c4f0 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800c4f0:	b580      	push	{r7, lr}
 800c4f2:	b088      	sub	sp, #32
 800c4f4:	af00      	add	r7, sp, #0
 800c4f6:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d070      	beq.n	800c5e0 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	f003 0303 	and.w	r3, r3, #3
 800c504:	2b00      	cmp	r3, #0
 800c506:	d00d      	beq.n	800c524 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800c508:	4b37      	ldr	r3, [pc, #220]	; (800c5e8 <mem_free+0xf8>)
 800c50a:	f240 2273 	movw	r2, #627	; 0x273
 800c50e:	4937      	ldr	r1, [pc, #220]	; (800c5ec <mem_free+0xfc>)
 800c510:	4837      	ldr	r0, [pc, #220]	; (800c5f0 <mem_free+0x100>)
 800c512:	f00a fcc1 	bl	8016e98 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c516:	f00a fc59 	bl	8016dcc <sys_arch_protect>
 800c51a:	60f8      	str	r0, [r7, #12]
 800c51c:	68f8      	ldr	r0, [r7, #12]
 800c51e:	f00a fc63 	bl	8016de8 <sys_arch_unprotect>
    return;
 800c522:	e05e      	b.n	800c5e2 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	3b08      	subs	r3, #8
 800c528:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800c52a:	4b32      	ldr	r3, [pc, #200]	; (800c5f4 <mem_free+0x104>)
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	69fa      	ldr	r2, [r7, #28]
 800c530:	429a      	cmp	r2, r3
 800c532:	d306      	bcc.n	800c542 <mem_free+0x52>
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	f103 020c 	add.w	r2, r3, #12
 800c53a:	4b2f      	ldr	r3, [pc, #188]	; (800c5f8 <mem_free+0x108>)
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	429a      	cmp	r2, r3
 800c540:	d90d      	bls.n	800c55e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800c542:	4b29      	ldr	r3, [pc, #164]	; (800c5e8 <mem_free+0xf8>)
 800c544:	f240 227f 	movw	r2, #639	; 0x27f
 800c548:	492c      	ldr	r1, [pc, #176]	; (800c5fc <mem_free+0x10c>)
 800c54a:	4829      	ldr	r0, [pc, #164]	; (800c5f0 <mem_free+0x100>)
 800c54c:	f00a fca4 	bl	8016e98 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c550:	f00a fc3c 	bl	8016dcc <sys_arch_protect>
 800c554:	6138      	str	r0, [r7, #16]
 800c556:	6938      	ldr	r0, [r7, #16]
 800c558:	f00a fc46 	bl	8016de8 <sys_arch_unprotect>
    return;
 800c55c:	e041      	b.n	800c5e2 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800c55e:	4828      	ldr	r0, [pc, #160]	; (800c600 <mem_free+0x110>)
 800c560:	f00a fbf2 	bl	8016d48 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800c564:	69fb      	ldr	r3, [r7, #28]
 800c566:	791b      	ldrb	r3, [r3, #4]
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d110      	bne.n	800c58e <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800c56c:	4b1e      	ldr	r3, [pc, #120]	; (800c5e8 <mem_free+0xf8>)
 800c56e:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800c572:	4924      	ldr	r1, [pc, #144]	; (800c604 <mem_free+0x114>)
 800c574:	481e      	ldr	r0, [pc, #120]	; (800c5f0 <mem_free+0x100>)
 800c576:	f00a fc8f 	bl	8016e98 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800c57a:	4821      	ldr	r0, [pc, #132]	; (800c600 <mem_free+0x110>)
 800c57c:	f00a fbf3 	bl	8016d66 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c580:	f00a fc24 	bl	8016dcc <sys_arch_protect>
 800c584:	6178      	str	r0, [r7, #20]
 800c586:	6978      	ldr	r0, [r7, #20]
 800c588:	f00a fc2e 	bl	8016de8 <sys_arch_unprotect>
    return;
 800c58c:	e029      	b.n	800c5e2 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800c58e:	69f8      	ldr	r0, [r7, #28]
 800c590:	f7ff ff70 	bl	800c474 <mem_link_valid>
 800c594:	4603      	mov	r3, r0
 800c596:	2b00      	cmp	r3, #0
 800c598:	d110      	bne.n	800c5bc <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800c59a:	4b13      	ldr	r3, [pc, #76]	; (800c5e8 <mem_free+0xf8>)
 800c59c:	f240 2295 	movw	r2, #661	; 0x295
 800c5a0:	4919      	ldr	r1, [pc, #100]	; (800c608 <mem_free+0x118>)
 800c5a2:	4813      	ldr	r0, [pc, #76]	; (800c5f0 <mem_free+0x100>)
 800c5a4:	f00a fc78 	bl	8016e98 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800c5a8:	4815      	ldr	r0, [pc, #84]	; (800c600 <mem_free+0x110>)
 800c5aa:	f00a fbdc 	bl	8016d66 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c5ae:	f00a fc0d 	bl	8016dcc <sys_arch_protect>
 800c5b2:	61b8      	str	r0, [r7, #24]
 800c5b4:	69b8      	ldr	r0, [r7, #24]
 800c5b6:	f00a fc17 	bl	8016de8 <sys_arch_unprotect>
    return;
 800c5ba:	e012      	b.n	800c5e2 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800c5bc:	69fb      	ldr	r3, [r7, #28]
 800c5be:	2200      	movs	r2, #0
 800c5c0:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800c5c2:	4b12      	ldr	r3, [pc, #72]	; (800c60c <mem_free+0x11c>)
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	69fa      	ldr	r2, [r7, #28]
 800c5c8:	429a      	cmp	r2, r3
 800c5ca:	d202      	bcs.n	800c5d2 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800c5cc:	4a0f      	ldr	r2, [pc, #60]	; (800c60c <mem_free+0x11c>)
 800c5ce:	69fb      	ldr	r3, [r7, #28]
 800c5d0:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800c5d2:	69f8      	ldr	r0, [r7, #28]
 800c5d4:	f7ff fe5a 	bl	800c28c <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800c5d8:	4809      	ldr	r0, [pc, #36]	; (800c600 <mem_free+0x110>)
 800c5da:	f00a fbc4 	bl	8016d66 <sys_mutex_unlock>
 800c5de:	e000      	b.n	800c5e2 <mem_free+0xf2>
    return;
 800c5e0:	bf00      	nop
}
 800c5e2:	3720      	adds	r7, #32
 800c5e4:	46bd      	mov	sp, r7
 800c5e6:	bd80      	pop	{r7, pc}
 800c5e8:	080180e4 	.word	0x080180e4
 800c5ec:	080181d4 	.word	0x080181d4
 800c5f0:	0801812c 	.word	0x0801812c
 800c5f4:	24004078 	.word	0x24004078
 800c5f8:	2400407c 	.word	0x2400407c
 800c5fc:	080181f8 	.word	0x080181f8
 800c600:	24004080 	.word	0x24004080
 800c604:	08018214 	.word	0x08018214
 800c608:	0801823c 	.word	0x0801823c
 800c60c:	24004084 	.word	0x24004084

0800c610 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800c610:	b580      	push	{r7, lr}
 800c612:	b088      	sub	sp, #32
 800c614:	af00      	add	r7, sp, #0
 800c616:	6078      	str	r0, [r7, #4]
 800c618:	460b      	mov	r3, r1
 800c61a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800c61c:	887b      	ldrh	r3, [r7, #2]
 800c61e:	3303      	adds	r3, #3
 800c620:	b29b      	uxth	r3, r3
 800c622:	f023 0303 	bic.w	r3, r3, #3
 800c626:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800c628:	8bfb      	ldrh	r3, [r7, #30]
 800c62a:	2b0b      	cmp	r3, #11
 800c62c:	d801      	bhi.n	800c632 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800c62e:	230c      	movs	r3, #12
 800c630:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800c632:	8bfb      	ldrh	r3, [r7, #30]
 800c634:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800c638:	4293      	cmp	r3, r2
 800c63a:	d803      	bhi.n	800c644 <mem_trim+0x34>
 800c63c:	8bfa      	ldrh	r2, [r7, #30]
 800c63e:	887b      	ldrh	r3, [r7, #2]
 800c640:	429a      	cmp	r2, r3
 800c642:	d201      	bcs.n	800c648 <mem_trim+0x38>
    return NULL;
 800c644:	2300      	movs	r3, #0
 800c646:	e0dc      	b.n	800c802 <mem_trim+0x1f2>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800c648:	4b70      	ldr	r3, [pc, #448]	; (800c80c <mem_trim+0x1fc>)
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	687a      	ldr	r2, [r7, #4]
 800c64e:	429a      	cmp	r2, r3
 800c650:	d304      	bcc.n	800c65c <mem_trim+0x4c>
 800c652:	4b6f      	ldr	r3, [pc, #444]	; (800c810 <mem_trim+0x200>)
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	687a      	ldr	r2, [r7, #4]
 800c658:	429a      	cmp	r2, r3
 800c65a:	d306      	bcc.n	800c66a <mem_trim+0x5a>
 800c65c:	4b6d      	ldr	r3, [pc, #436]	; (800c814 <mem_trim+0x204>)
 800c65e:	f240 22d1 	movw	r2, #721	; 0x2d1
 800c662:	496d      	ldr	r1, [pc, #436]	; (800c818 <mem_trim+0x208>)
 800c664:	486d      	ldr	r0, [pc, #436]	; (800c81c <mem_trim+0x20c>)
 800c666:	f00a fc17 	bl	8016e98 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800c66a:	4b68      	ldr	r3, [pc, #416]	; (800c80c <mem_trim+0x1fc>)
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	687a      	ldr	r2, [r7, #4]
 800c670:	429a      	cmp	r2, r3
 800c672:	d304      	bcc.n	800c67e <mem_trim+0x6e>
 800c674:	4b66      	ldr	r3, [pc, #408]	; (800c810 <mem_trim+0x200>)
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	687a      	ldr	r2, [r7, #4]
 800c67a:	429a      	cmp	r2, r3
 800c67c:	d307      	bcc.n	800c68e <mem_trim+0x7e>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c67e:	f00a fba5 	bl	8016dcc <sys_arch_protect>
 800c682:	60b8      	str	r0, [r7, #8]
 800c684:	68b8      	ldr	r0, [r7, #8]
 800c686:	f00a fbaf 	bl	8016de8 <sys_arch_unprotect>
    return rmem;
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	e0b9      	b.n	800c802 <mem_trim+0x1f2>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	3b08      	subs	r3, #8
 800c692:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800c694:	69b8      	ldr	r0, [r7, #24]
 800c696:	f7ff fde7 	bl	800c268 <mem_to_ptr>
 800c69a:	4603      	mov	r3, r0
 800c69c:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800c69e:	69bb      	ldr	r3, [r7, #24]
 800c6a0:	881a      	ldrh	r2, [r3, #0]
 800c6a2:	8afb      	ldrh	r3, [r7, #22]
 800c6a4:	1ad3      	subs	r3, r2, r3
 800c6a6:	b29b      	uxth	r3, r3
 800c6a8:	3b08      	subs	r3, #8
 800c6aa:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800c6ac:	8bfa      	ldrh	r2, [r7, #30]
 800c6ae:	8abb      	ldrh	r3, [r7, #20]
 800c6b0:	429a      	cmp	r2, r3
 800c6b2:	d906      	bls.n	800c6c2 <mem_trim+0xb2>
 800c6b4:	4b57      	ldr	r3, [pc, #348]	; (800c814 <mem_trim+0x204>)
 800c6b6:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800c6ba:	4959      	ldr	r1, [pc, #356]	; (800c820 <mem_trim+0x210>)
 800c6bc:	4857      	ldr	r0, [pc, #348]	; (800c81c <mem_trim+0x20c>)
 800c6be:	f00a fbeb 	bl	8016e98 <iprintf>
  if (newsize > size) {
 800c6c2:	8bfa      	ldrh	r2, [r7, #30]
 800c6c4:	8abb      	ldrh	r3, [r7, #20]
 800c6c6:	429a      	cmp	r2, r3
 800c6c8:	d901      	bls.n	800c6ce <mem_trim+0xbe>
    /* not supported */
    return NULL;
 800c6ca:	2300      	movs	r3, #0
 800c6cc:	e099      	b.n	800c802 <mem_trim+0x1f2>
  }
  if (newsize == size) {
 800c6ce:	8bfa      	ldrh	r2, [r7, #30]
 800c6d0:	8abb      	ldrh	r3, [r7, #20]
 800c6d2:	429a      	cmp	r2, r3
 800c6d4:	d101      	bne.n	800c6da <mem_trim+0xca>
    /* No change in size, simply return */
    return rmem;
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	e093      	b.n	800c802 <mem_trim+0x1f2>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800c6da:	4852      	ldr	r0, [pc, #328]	; (800c824 <mem_trim+0x214>)
 800c6dc:	f00a fb34 	bl	8016d48 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800c6e0:	69bb      	ldr	r3, [r7, #24]
 800c6e2:	881b      	ldrh	r3, [r3, #0]
 800c6e4:	4618      	mov	r0, r3
 800c6e6:	f7ff fdad 	bl	800c244 <ptr_to_mem>
 800c6ea:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800c6ec:	693b      	ldr	r3, [r7, #16]
 800c6ee:	791b      	ldrb	r3, [r3, #4]
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d141      	bne.n	800c778 <mem_trim+0x168>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800c6f4:	69bb      	ldr	r3, [r7, #24]
 800c6f6:	881b      	ldrh	r3, [r3, #0]
 800c6f8:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800c6fc:	4293      	cmp	r3, r2
 800c6fe:	d106      	bne.n	800c70e <mem_trim+0xfe>
 800c700:	4b44      	ldr	r3, [pc, #272]	; (800c814 <mem_trim+0x204>)
 800c702:	f240 22f5 	movw	r2, #757	; 0x2f5
 800c706:	4948      	ldr	r1, [pc, #288]	; (800c828 <mem_trim+0x218>)
 800c708:	4844      	ldr	r0, [pc, #272]	; (800c81c <mem_trim+0x20c>)
 800c70a:	f00a fbc5 	bl	8016e98 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800c70e:	693b      	ldr	r3, [r7, #16]
 800c710:	881b      	ldrh	r3, [r3, #0]
 800c712:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800c714:	8afa      	ldrh	r2, [r7, #22]
 800c716:	8bfb      	ldrh	r3, [r7, #30]
 800c718:	4413      	add	r3, r2
 800c71a:	b29b      	uxth	r3, r3
 800c71c:	3308      	adds	r3, #8
 800c71e:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800c720:	4b42      	ldr	r3, [pc, #264]	; (800c82c <mem_trim+0x21c>)
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	693a      	ldr	r2, [r7, #16]
 800c726:	429a      	cmp	r2, r3
 800c728:	d106      	bne.n	800c738 <mem_trim+0x128>
      lfree = ptr_to_mem(ptr2);
 800c72a:	89fb      	ldrh	r3, [r7, #14]
 800c72c:	4618      	mov	r0, r3
 800c72e:	f7ff fd89 	bl	800c244 <ptr_to_mem>
 800c732:	4603      	mov	r3, r0
 800c734:	4a3d      	ldr	r2, [pc, #244]	; (800c82c <mem_trim+0x21c>)
 800c736:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800c738:	89fb      	ldrh	r3, [r7, #14]
 800c73a:	4618      	mov	r0, r3
 800c73c:	f7ff fd82 	bl	800c244 <ptr_to_mem>
 800c740:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800c742:	693b      	ldr	r3, [r7, #16]
 800c744:	2200      	movs	r2, #0
 800c746:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800c748:	693b      	ldr	r3, [r7, #16]
 800c74a:	89ba      	ldrh	r2, [r7, #12]
 800c74c:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800c74e:	693b      	ldr	r3, [r7, #16]
 800c750:	8afa      	ldrh	r2, [r7, #22]
 800c752:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800c754:	69bb      	ldr	r3, [r7, #24]
 800c756:	89fa      	ldrh	r2, [r7, #14]
 800c758:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800c75a:	693b      	ldr	r3, [r7, #16]
 800c75c:	881b      	ldrh	r3, [r3, #0]
 800c75e:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800c762:	4293      	cmp	r3, r2
 800c764:	d049      	beq.n	800c7fa <mem_trim+0x1ea>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800c766:	693b      	ldr	r3, [r7, #16]
 800c768:	881b      	ldrh	r3, [r3, #0]
 800c76a:	4618      	mov	r0, r3
 800c76c:	f7ff fd6a 	bl	800c244 <ptr_to_mem>
 800c770:	4602      	mov	r2, r0
 800c772:	89fb      	ldrh	r3, [r7, #14]
 800c774:	8053      	strh	r3, [r2, #2]
 800c776:	e040      	b.n	800c7fa <mem_trim+0x1ea>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800c778:	8bfb      	ldrh	r3, [r7, #30]
 800c77a:	f103 0214 	add.w	r2, r3, #20
 800c77e:	8abb      	ldrh	r3, [r7, #20]
 800c780:	429a      	cmp	r2, r3
 800c782:	d83a      	bhi.n	800c7fa <mem_trim+0x1ea>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800c784:	8afa      	ldrh	r2, [r7, #22]
 800c786:	8bfb      	ldrh	r3, [r7, #30]
 800c788:	4413      	add	r3, r2
 800c78a:	b29b      	uxth	r3, r3
 800c78c:	3308      	adds	r3, #8
 800c78e:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800c790:	69bb      	ldr	r3, [r7, #24]
 800c792:	881b      	ldrh	r3, [r3, #0]
 800c794:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800c798:	4293      	cmp	r3, r2
 800c79a:	d106      	bne.n	800c7aa <mem_trim+0x19a>
 800c79c:	4b1d      	ldr	r3, [pc, #116]	; (800c814 <mem_trim+0x204>)
 800c79e:	f240 3216 	movw	r2, #790	; 0x316
 800c7a2:	4921      	ldr	r1, [pc, #132]	; (800c828 <mem_trim+0x218>)
 800c7a4:	481d      	ldr	r0, [pc, #116]	; (800c81c <mem_trim+0x20c>)
 800c7a6:	f00a fb77 	bl	8016e98 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800c7aa:	89fb      	ldrh	r3, [r7, #14]
 800c7ac:	4618      	mov	r0, r3
 800c7ae:	f7ff fd49 	bl	800c244 <ptr_to_mem>
 800c7b2:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800c7b4:	4b1d      	ldr	r3, [pc, #116]	; (800c82c <mem_trim+0x21c>)
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	693a      	ldr	r2, [r7, #16]
 800c7ba:	429a      	cmp	r2, r3
 800c7bc:	d202      	bcs.n	800c7c4 <mem_trim+0x1b4>
      lfree = mem2;
 800c7be:	4a1b      	ldr	r2, [pc, #108]	; (800c82c <mem_trim+0x21c>)
 800c7c0:	693b      	ldr	r3, [r7, #16]
 800c7c2:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800c7c4:	693b      	ldr	r3, [r7, #16]
 800c7c6:	2200      	movs	r2, #0
 800c7c8:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800c7ca:	69bb      	ldr	r3, [r7, #24]
 800c7cc:	881a      	ldrh	r2, [r3, #0]
 800c7ce:	693b      	ldr	r3, [r7, #16]
 800c7d0:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800c7d2:	693b      	ldr	r3, [r7, #16]
 800c7d4:	8afa      	ldrh	r2, [r7, #22]
 800c7d6:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800c7d8:	69bb      	ldr	r3, [r7, #24]
 800c7da:	89fa      	ldrh	r2, [r7, #14]
 800c7dc:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800c7de:	693b      	ldr	r3, [r7, #16]
 800c7e0:	881b      	ldrh	r3, [r3, #0]
 800c7e2:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800c7e6:	4293      	cmp	r3, r2
 800c7e8:	d007      	beq.n	800c7fa <mem_trim+0x1ea>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800c7ea:	693b      	ldr	r3, [r7, #16]
 800c7ec:	881b      	ldrh	r3, [r3, #0]
 800c7ee:	4618      	mov	r0, r3
 800c7f0:	f7ff fd28 	bl	800c244 <ptr_to_mem>
 800c7f4:	4602      	mov	r2, r0
 800c7f6:	89fb      	ldrh	r3, [r7, #14]
 800c7f8:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800c7fa:	480a      	ldr	r0, [pc, #40]	; (800c824 <mem_trim+0x214>)
 800c7fc:	f00a fab3 	bl	8016d66 <sys_mutex_unlock>
  return rmem;
 800c800:	687b      	ldr	r3, [r7, #4]
}
 800c802:	4618      	mov	r0, r3
 800c804:	3720      	adds	r7, #32
 800c806:	46bd      	mov	sp, r7
 800c808:	bd80      	pop	{r7, pc}
 800c80a:	bf00      	nop
 800c80c:	24004078 	.word	0x24004078
 800c810:	2400407c 	.word	0x2400407c
 800c814:	080180e4 	.word	0x080180e4
 800c818:	08018270 	.word	0x08018270
 800c81c:	0801812c 	.word	0x0801812c
 800c820:	08018288 	.word	0x08018288
 800c824:	24004080 	.word	0x24004080
 800c828:	080182a8 	.word	0x080182a8
 800c82c:	24004084 	.word	0x24004084

0800c830 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800c830:	b580      	push	{r7, lr}
 800c832:	b088      	sub	sp, #32
 800c834:	af00      	add	r7, sp, #0
 800c836:	4603      	mov	r3, r0
 800c838:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800c83a:	88fb      	ldrh	r3, [r7, #6]
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d101      	bne.n	800c844 <mem_malloc+0x14>
    return NULL;
 800c840:	2300      	movs	r3, #0
 800c842:	e0e6      	b.n	800ca12 <mem_malloc+0x1e2>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800c844:	88fb      	ldrh	r3, [r7, #6]
 800c846:	3303      	adds	r3, #3
 800c848:	b29b      	uxth	r3, r3
 800c84a:	f023 0303 	bic.w	r3, r3, #3
 800c84e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800c850:	8bbb      	ldrh	r3, [r7, #28]
 800c852:	2b0b      	cmp	r3, #11
 800c854:	d801      	bhi.n	800c85a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800c856:	230c      	movs	r3, #12
 800c858:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800c85a:	8bbb      	ldrh	r3, [r7, #28]
 800c85c:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800c860:	4293      	cmp	r3, r2
 800c862:	d803      	bhi.n	800c86c <mem_malloc+0x3c>
 800c864:	8bba      	ldrh	r2, [r7, #28]
 800c866:	88fb      	ldrh	r3, [r7, #6]
 800c868:	429a      	cmp	r2, r3
 800c86a:	d201      	bcs.n	800c870 <mem_malloc+0x40>
    return NULL;
 800c86c:	2300      	movs	r3, #0
 800c86e:	e0d0      	b.n	800ca12 <mem_malloc+0x1e2>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800c870:	486a      	ldr	r0, [pc, #424]	; (800ca1c <mem_malloc+0x1ec>)
 800c872:	f00a fa69 	bl	8016d48 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800c876:	4b6a      	ldr	r3, [pc, #424]	; (800ca20 <mem_malloc+0x1f0>)
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	4618      	mov	r0, r3
 800c87c:	f7ff fcf4 	bl	800c268 <mem_to_ptr>
 800c880:	4603      	mov	r3, r0
 800c882:	83fb      	strh	r3, [r7, #30]
 800c884:	e0b9      	b.n	800c9fa <mem_malloc+0x1ca>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800c886:	8bfb      	ldrh	r3, [r7, #30]
 800c888:	4618      	mov	r0, r3
 800c88a:	f7ff fcdb 	bl	800c244 <ptr_to_mem>
 800c88e:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800c890:	697b      	ldr	r3, [r7, #20]
 800c892:	791b      	ldrb	r3, [r3, #4]
 800c894:	2b00      	cmp	r3, #0
 800c896:	f040 80a9 	bne.w	800c9ec <mem_malloc+0x1bc>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800c89a:	697b      	ldr	r3, [r7, #20]
 800c89c:	881b      	ldrh	r3, [r3, #0]
 800c89e:	461a      	mov	r2, r3
 800c8a0:	8bfb      	ldrh	r3, [r7, #30]
 800c8a2:	1ad3      	subs	r3, r2, r3
 800c8a4:	f1a3 0208 	sub.w	r2, r3, #8
 800c8a8:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800c8aa:	429a      	cmp	r2, r3
 800c8ac:	f0c0 809e 	bcc.w	800c9ec <mem_malloc+0x1bc>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800c8b0:	697b      	ldr	r3, [r7, #20]
 800c8b2:	881b      	ldrh	r3, [r3, #0]
 800c8b4:	461a      	mov	r2, r3
 800c8b6:	8bfb      	ldrh	r3, [r7, #30]
 800c8b8:	1ad3      	subs	r3, r2, r3
 800c8ba:	f1a3 0208 	sub.w	r2, r3, #8
 800c8be:	8bbb      	ldrh	r3, [r7, #28]
 800c8c0:	3314      	adds	r3, #20
 800c8c2:	429a      	cmp	r2, r3
 800c8c4:	d335      	bcc.n	800c932 <mem_malloc+0x102>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800c8c6:	8bfa      	ldrh	r2, [r7, #30]
 800c8c8:	8bbb      	ldrh	r3, [r7, #28]
 800c8ca:	4413      	add	r3, r2
 800c8cc:	b29b      	uxth	r3, r3
 800c8ce:	3308      	adds	r3, #8
 800c8d0:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800c8d2:	8a7b      	ldrh	r3, [r7, #18]
 800c8d4:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800c8d8:	4293      	cmp	r3, r2
 800c8da:	d106      	bne.n	800c8ea <mem_malloc+0xba>
 800c8dc:	4b51      	ldr	r3, [pc, #324]	; (800ca24 <mem_malloc+0x1f4>)
 800c8de:	f240 3287 	movw	r2, #903	; 0x387
 800c8e2:	4951      	ldr	r1, [pc, #324]	; (800ca28 <mem_malloc+0x1f8>)
 800c8e4:	4851      	ldr	r0, [pc, #324]	; (800ca2c <mem_malloc+0x1fc>)
 800c8e6:	f00a fad7 	bl	8016e98 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800c8ea:	8a7b      	ldrh	r3, [r7, #18]
 800c8ec:	4618      	mov	r0, r3
 800c8ee:	f7ff fca9 	bl	800c244 <ptr_to_mem>
 800c8f2:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	2200      	movs	r2, #0
 800c8f8:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800c8fa:	697b      	ldr	r3, [r7, #20]
 800c8fc:	881a      	ldrh	r2, [r3, #0]
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	8bfa      	ldrh	r2, [r7, #30]
 800c906:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800c908:	697b      	ldr	r3, [r7, #20]
 800c90a:	8a7a      	ldrh	r2, [r7, #18]
 800c90c:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800c90e:	697b      	ldr	r3, [r7, #20]
 800c910:	2201      	movs	r2, #1
 800c912:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	881b      	ldrh	r3, [r3, #0]
 800c918:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800c91c:	4293      	cmp	r3, r2
 800c91e:	d00b      	beq.n	800c938 <mem_malloc+0x108>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	881b      	ldrh	r3, [r3, #0]
 800c924:	4618      	mov	r0, r3
 800c926:	f7ff fc8d 	bl	800c244 <ptr_to_mem>
 800c92a:	4602      	mov	r2, r0
 800c92c:	8a7b      	ldrh	r3, [r7, #18]
 800c92e:	8053      	strh	r3, [r2, #2]
 800c930:	e002      	b.n	800c938 <mem_malloc+0x108>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800c932:	697b      	ldr	r3, [r7, #20]
 800c934:	2201      	movs	r2, #1
 800c936:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800c938:	4b39      	ldr	r3, [pc, #228]	; (800ca20 <mem_malloc+0x1f0>)
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	697a      	ldr	r2, [r7, #20]
 800c93e:	429a      	cmp	r2, r3
 800c940:	d127      	bne.n	800c992 <mem_malloc+0x162>
          struct mem *cur = lfree;
 800c942:	4b37      	ldr	r3, [pc, #220]	; (800ca20 <mem_malloc+0x1f0>)
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800c948:	e005      	b.n	800c956 <mem_malloc+0x126>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800c94a:	69bb      	ldr	r3, [r7, #24]
 800c94c:	881b      	ldrh	r3, [r3, #0]
 800c94e:	4618      	mov	r0, r3
 800c950:	f7ff fc78 	bl	800c244 <ptr_to_mem>
 800c954:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800c956:	69bb      	ldr	r3, [r7, #24]
 800c958:	791b      	ldrb	r3, [r3, #4]
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d004      	beq.n	800c968 <mem_malloc+0x138>
 800c95e:	4b34      	ldr	r3, [pc, #208]	; (800ca30 <mem_malloc+0x200>)
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	69ba      	ldr	r2, [r7, #24]
 800c964:	429a      	cmp	r2, r3
 800c966:	d1f0      	bne.n	800c94a <mem_malloc+0x11a>
          }
          lfree = cur;
 800c968:	4a2d      	ldr	r2, [pc, #180]	; (800ca20 <mem_malloc+0x1f0>)
 800c96a:	69bb      	ldr	r3, [r7, #24]
 800c96c:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800c96e:	4b2c      	ldr	r3, [pc, #176]	; (800ca20 <mem_malloc+0x1f0>)
 800c970:	681a      	ldr	r2, [r3, #0]
 800c972:	4b2f      	ldr	r3, [pc, #188]	; (800ca30 <mem_malloc+0x200>)
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	429a      	cmp	r2, r3
 800c978:	d00b      	beq.n	800c992 <mem_malloc+0x162>
 800c97a:	4b29      	ldr	r3, [pc, #164]	; (800ca20 <mem_malloc+0x1f0>)
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	791b      	ldrb	r3, [r3, #4]
 800c980:	2b00      	cmp	r3, #0
 800c982:	d006      	beq.n	800c992 <mem_malloc+0x162>
 800c984:	4b27      	ldr	r3, [pc, #156]	; (800ca24 <mem_malloc+0x1f4>)
 800c986:	f240 32b5 	movw	r2, #949	; 0x3b5
 800c98a:	492a      	ldr	r1, [pc, #168]	; (800ca34 <mem_malloc+0x204>)
 800c98c:	4827      	ldr	r0, [pc, #156]	; (800ca2c <mem_malloc+0x1fc>)
 800c98e:	f00a fa83 	bl	8016e98 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800c992:	4822      	ldr	r0, [pc, #136]	; (800ca1c <mem_malloc+0x1ec>)
 800c994:	f00a f9e7 	bl	8016d66 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800c998:	8bba      	ldrh	r2, [r7, #28]
 800c99a:	697b      	ldr	r3, [r7, #20]
 800c99c:	4413      	add	r3, r2
 800c99e:	3308      	adds	r3, #8
 800c9a0:	4a23      	ldr	r2, [pc, #140]	; (800ca30 <mem_malloc+0x200>)
 800c9a2:	6812      	ldr	r2, [r2, #0]
 800c9a4:	4293      	cmp	r3, r2
 800c9a6:	d906      	bls.n	800c9b6 <mem_malloc+0x186>
 800c9a8:	4b1e      	ldr	r3, [pc, #120]	; (800ca24 <mem_malloc+0x1f4>)
 800c9aa:	f240 32b9 	movw	r2, #953	; 0x3b9
 800c9ae:	4922      	ldr	r1, [pc, #136]	; (800ca38 <mem_malloc+0x208>)
 800c9b0:	481e      	ldr	r0, [pc, #120]	; (800ca2c <mem_malloc+0x1fc>)
 800c9b2:	f00a fa71 	bl	8016e98 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800c9b6:	697b      	ldr	r3, [r7, #20]
 800c9b8:	f003 0303 	and.w	r3, r3, #3
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d006      	beq.n	800c9ce <mem_malloc+0x19e>
 800c9c0:	4b18      	ldr	r3, [pc, #96]	; (800ca24 <mem_malloc+0x1f4>)
 800c9c2:	f240 32bb 	movw	r2, #955	; 0x3bb
 800c9c6:	491d      	ldr	r1, [pc, #116]	; (800ca3c <mem_malloc+0x20c>)
 800c9c8:	4818      	ldr	r0, [pc, #96]	; (800ca2c <mem_malloc+0x1fc>)
 800c9ca:	f00a fa65 	bl	8016e98 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800c9ce:	697b      	ldr	r3, [r7, #20]
 800c9d0:	f003 0303 	and.w	r3, r3, #3
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d006      	beq.n	800c9e6 <mem_malloc+0x1b6>
 800c9d8:	4b12      	ldr	r3, [pc, #72]	; (800ca24 <mem_malloc+0x1f4>)
 800c9da:	f240 32bd 	movw	r2, #957	; 0x3bd
 800c9de:	4918      	ldr	r1, [pc, #96]	; (800ca40 <mem_malloc+0x210>)
 800c9e0:	4812      	ldr	r0, [pc, #72]	; (800ca2c <mem_malloc+0x1fc>)
 800c9e2:	f00a fa59 	bl	8016e98 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800c9e6:	697b      	ldr	r3, [r7, #20]
 800c9e8:	3308      	adds	r3, #8
 800c9ea:	e012      	b.n	800ca12 <mem_malloc+0x1e2>
         ptr = ptr_to_mem(ptr)->next) {
 800c9ec:	8bfb      	ldrh	r3, [r7, #30]
 800c9ee:	4618      	mov	r0, r3
 800c9f0:	f7ff fc28 	bl	800c244 <ptr_to_mem>
 800c9f4:	4603      	mov	r3, r0
 800c9f6:	881b      	ldrh	r3, [r3, #0]
 800c9f8:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800c9fa:	8bfa      	ldrh	r2, [r7, #30]
 800c9fc:	8bb9      	ldrh	r1, [r7, #28]
 800c9fe:	f643 73e8 	movw	r3, #16360	; 0x3fe8
 800ca02:	1a5b      	subs	r3, r3, r1
 800ca04:	429a      	cmp	r2, r3
 800ca06:	f4ff af3e 	bcc.w	800c886 <mem_malloc+0x56>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800ca0a:	4804      	ldr	r0, [pc, #16]	; (800ca1c <mem_malloc+0x1ec>)
 800ca0c:	f00a f9ab 	bl	8016d66 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800ca10:	2300      	movs	r3, #0
}
 800ca12:	4618      	mov	r0, r3
 800ca14:	3720      	adds	r7, #32
 800ca16:	46bd      	mov	sp, r7
 800ca18:	bd80      	pop	{r7, pc}
 800ca1a:	bf00      	nop
 800ca1c:	24004080 	.word	0x24004080
 800ca20:	24004084 	.word	0x24004084
 800ca24:	080180e4 	.word	0x080180e4
 800ca28:	080182a8 	.word	0x080182a8
 800ca2c:	0801812c 	.word	0x0801812c
 800ca30:	2400407c 	.word	0x2400407c
 800ca34:	080182bc 	.word	0x080182bc
 800ca38:	080182d8 	.word	0x080182d8
 800ca3c:	08018308 	.word	0x08018308
 800ca40:	08018338 	.word	0x08018338

0800ca44 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800ca44:	b480      	push	{r7}
 800ca46:	b085      	sub	sp, #20
 800ca48:	af00      	add	r7, sp, #0
 800ca4a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	689b      	ldr	r3, [r3, #8]
 800ca50:	2200      	movs	r2, #0
 800ca52:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	685b      	ldr	r3, [r3, #4]
 800ca58:	3303      	adds	r3, #3
 800ca5a:	f023 0303 	bic.w	r3, r3, #3
 800ca5e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800ca60:	2300      	movs	r3, #0
 800ca62:	60fb      	str	r3, [r7, #12]
 800ca64:	e011      	b.n	800ca8a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	689b      	ldr	r3, [r3, #8]
 800ca6a:	681a      	ldr	r2, [r3, #0]
 800ca6c:	68bb      	ldr	r3, [r7, #8]
 800ca6e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	689b      	ldr	r3, [r3, #8]
 800ca74:	68ba      	ldr	r2, [r7, #8]
 800ca76:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	881b      	ldrh	r3, [r3, #0]
 800ca7c:	461a      	mov	r2, r3
 800ca7e:	68bb      	ldr	r3, [r7, #8]
 800ca80:	4413      	add	r3, r2
 800ca82:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	3301      	adds	r3, #1
 800ca88:	60fb      	str	r3, [r7, #12]
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	885b      	ldrh	r3, [r3, #2]
 800ca8e:	461a      	mov	r2, r3
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	4293      	cmp	r3, r2
 800ca94:	dbe7      	blt.n	800ca66 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800ca96:	bf00      	nop
 800ca98:	bf00      	nop
 800ca9a:	3714      	adds	r7, #20
 800ca9c:	46bd      	mov	sp, r7
 800ca9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa2:	4770      	bx	lr

0800caa4 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800caa4:	b580      	push	{r7, lr}
 800caa6:	b082      	sub	sp, #8
 800caa8:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800caaa:	2300      	movs	r3, #0
 800caac:	80fb      	strh	r3, [r7, #6]
 800caae:	e009      	b.n	800cac4 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800cab0:	88fb      	ldrh	r3, [r7, #6]
 800cab2:	4a08      	ldr	r2, [pc, #32]	; (800cad4 <memp_init+0x30>)
 800cab4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cab8:	4618      	mov	r0, r3
 800caba:	f7ff ffc3 	bl	800ca44 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800cabe:	88fb      	ldrh	r3, [r7, #6]
 800cac0:	3301      	adds	r3, #1
 800cac2:	80fb      	strh	r3, [r7, #6]
 800cac4:	88fb      	ldrh	r3, [r7, #6]
 800cac6:	2b0c      	cmp	r3, #12
 800cac8:	d9f2      	bls.n	800cab0 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800caca:	bf00      	nop
 800cacc:	bf00      	nop
 800cace:	3708      	adds	r7, #8
 800cad0:	46bd      	mov	sp, r7
 800cad2:	bd80      	pop	{r7, pc}
 800cad4:	0801ab6c 	.word	0x0801ab6c

0800cad8 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800cad8:	b580      	push	{r7, lr}
 800cada:	b084      	sub	sp, #16
 800cadc:	af00      	add	r7, sp, #0
 800cade:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800cae0:	f00a f974 	bl	8016dcc <sys_arch_protect>
 800cae4:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	689b      	ldr	r3, [r3, #8]
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800caee:	68bb      	ldr	r3, [r7, #8]
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d015      	beq.n	800cb20 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	689b      	ldr	r3, [r3, #8]
 800caf8:	68ba      	ldr	r2, [r7, #8]
 800cafa:	6812      	ldr	r2, [r2, #0]
 800cafc:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800cafe:	68bb      	ldr	r3, [r7, #8]
 800cb00:	f003 0303 	and.w	r3, r3, #3
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d006      	beq.n	800cb16 <do_memp_malloc_pool+0x3e>
 800cb08:	4b09      	ldr	r3, [pc, #36]	; (800cb30 <do_memp_malloc_pool+0x58>)
 800cb0a:	f44f 728c 	mov.w	r2, #280	; 0x118
 800cb0e:	4909      	ldr	r1, [pc, #36]	; (800cb34 <do_memp_malloc_pool+0x5c>)
 800cb10:	4809      	ldr	r0, [pc, #36]	; (800cb38 <do_memp_malloc_pool+0x60>)
 800cb12:	f00a f9c1 	bl	8016e98 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800cb16:	68f8      	ldr	r0, [r7, #12]
 800cb18:	f00a f966 	bl	8016de8 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800cb1c:	68bb      	ldr	r3, [r7, #8]
 800cb1e:	e003      	b.n	800cb28 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800cb20:	68f8      	ldr	r0, [r7, #12]
 800cb22:	f00a f961 	bl	8016de8 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800cb26:	2300      	movs	r3, #0
}
 800cb28:	4618      	mov	r0, r3
 800cb2a:	3710      	adds	r7, #16
 800cb2c:	46bd      	mov	sp, r7
 800cb2e:	bd80      	pop	{r7, pc}
 800cb30:	0801835c 	.word	0x0801835c
 800cb34:	0801838c 	.word	0x0801838c
 800cb38:	080183b0 	.word	0x080183b0

0800cb3c <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800cb3c:	b580      	push	{r7, lr}
 800cb3e:	b082      	sub	sp, #8
 800cb40:	af00      	add	r7, sp, #0
 800cb42:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d106      	bne.n	800cb58 <memp_malloc_pool+0x1c>
 800cb4a:	4b0a      	ldr	r3, [pc, #40]	; (800cb74 <memp_malloc_pool+0x38>)
 800cb4c:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800cb50:	4909      	ldr	r1, [pc, #36]	; (800cb78 <memp_malloc_pool+0x3c>)
 800cb52:	480a      	ldr	r0, [pc, #40]	; (800cb7c <memp_malloc_pool+0x40>)
 800cb54:	f00a f9a0 	bl	8016e98 <iprintf>
  if (desc == NULL) {
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d101      	bne.n	800cb62 <memp_malloc_pool+0x26>
    return NULL;
 800cb5e:	2300      	movs	r3, #0
 800cb60:	e003      	b.n	800cb6a <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800cb62:	6878      	ldr	r0, [r7, #4]
 800cb64:	f7ff ffb8 	bl	800cad8 <do_memp_malloc_pool>
 800cb68:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800cb6a:	4618      	mov	r0, r3
 800cb6c:	3708      	adds	r7, #8
 800cb6e:	46bd      	mov	sp, r7
 800cb70:	bd80      	pop	{r7, pc}
 800cb72:	bf00      	nop
 800cb74:	0801835c 	.word	0x0801835c
 800cb78:	080183d8 	.word	0x080183d8
 800cb7c:	080183b0 	.word	0x080183b0

0800cb80 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800cb80:	b580      	push	{r7, lr}
 800cb82:	b084      	sub	sp, #16
 800cb84:	af00      	add	r7, sp, #0
 800cb86:	4603      	mov	r3, r0
 800cb88:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800cb8a:	79fb      	ldrb	r3, [r7, #7]
 800cb8c:	2b0c      	cmp	r3, #12
 800cb8e:	d908      	bls.n	800cba2 <memp_malloc+0x22>
 800cb90:	4b0a      	ldr	r3, [pc, #40]	; (800cbbc <memp_malloc+0x3c>)
 800cb92:	f240 1257 	movw	r2, #343	; 0x157
 800cb96:	490a      	ldr	r1, [pc, #40]	; (800cbc0 <memp_malloc+0x40>)
 800cb98:	480a      	ldr	r0, [pc, #40]	; (800cbc4 <memp_malloc+0x44>)
 800cb9a:	f00a f97d 	bl	8016e98 <iprintf>
 800cb9e:	2300      	movs	r3, #0
 800cba0:	e008      	b.n	800cbb4 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800cba2:	79fb      	ldrb	r3, [r7, #7]
 800cba4:	4a08      	ldr	r2, [pc, #32]	; (800cbc8 <memp_malloc+0x48>)
 800cba6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cbaa:	4618      	mov	r0, r3
 800cbac:	f7ff ff94 	bl	800cad8 <do_memp_malloc_pool>
 800cbb0:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800cbb2:	68fb      	ldr	r3, [r7, #12]
}
 800cbb4:	4618      	mov	r0, r3
 800cbb6:	3710      	adds	r7, #16
 800cbb8:	46bd      	mov	sp, r7
 800cbba:	bd80      	pop	{r7, pc}
 800cbbc:	0801835c 	.word	0x0801835c
 800cbc0:	080183ec 	.word	0x080183ec
 800cbc4:	080183b0 	.word	0x080183b0
 800cbc8:	0801ab6c 	.word	0x0801ab6c

0800cbcc <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800cbcc:	b580      	push	{r7, lr}
 800cbce:	b084      	sub	sp, #16
 800cbd0:	af00      	add	r7, sp, #0
 800cbd2:	6078      	str	r0, [r7, #4]
 800cbd4:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800cbd6:	683b      	ldr	r3, [r7, #0]
 800cbd8:	f003 0303 	and.w	r3, r3, #3
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d006      	beq.n	800cbee <do_memp_free_pool+0x22>
 800cbe0:	4b0d      	ldr	r3, [pc, #52]	; (800cc18 <do_memp_free_pool+0x4c>)
 800cbe2:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800cbe6:	490d      	ldr	r1, [pc, #52]	; (800cc1c <do_memp_free_pool+0x50>)
 800cbe8:	480d      	ldr	r0, [pc, #52]	; (800cc20 <do_memp_free_pool+0x54>)
 800cbea:	f00a f955 	bl	8016e98 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800cbee:	683b      	ldr	r3, [r7, #0]
 800cbf0:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800cbf2:	f00a f8eb 	bl	8016dcc <sys_arch_protect>
 800cbf6:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	689b      	ldr	r3, [r3, #8]
 800cbfc:	681a      	ldr	r2, [r3, #0]
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	689b      	ldr	r3, [r3, #8]
 800cc06:	68fa      	ldr	r2, [r7, #12]
 800cc08:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800cc0a:	68b8      	ldr	r0, [r7, #8]
 800cc0c:	f00a f8ec 	bl	8016de8 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800cc10:	bf00      	nop
 800cc12:	3710      	adds	r7, #16
 800cc14:	46bd      	mov	sp, r7
 800cc16:	bd80      	pop	{r7, pc}
 800cc18:	0801835c 	.word	0x0801835c
 800cc1c:	0801840c 	.word	0x0801840c
 800cc20:	080183b0 	.word	0x080183b0

0800cc24 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800cc24:	b580      	push	{r7, lr}
 800cc26:	b082      	sub	sp, #8
 800cc28:	af00      	add	r7, sp, #0
 800cc2a:	6078      	str	r0, [r7, #4]
 800cc2c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d106      	bne.n	800cc42 <memp_free_pool+0x1e>
 800cc34:	4b0a      	ldr	r3, [pc, #40]	; (800cc60 <memp_free_pool+0x3c>)
 800cc36:	f240 1295 	movw	r2, #405	; 0x195
 800cc3a:	490a      	ldr	r1, [pc, #40]	; (800cc64 <memp_free_pool+0x40>)
 800cc3c:	480a      	ldr	r0, [pc, #40]	; (800cc68 <memp_free_pool+0x44>)
 800cc3e:	f00a f92b 	bl	8016e98 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d007      	beq.n	800cc58 <memp_free_pool+0x34>
 800cc48:	683b      	ldr	r3, [r7, #0]
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d004      	beq.n	800cc58 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800cc4e:	6839      	ldr	r1, [r7, #0]
 800cc50:	6878      	ldr	r0, [r7, #4]
 800cc52:	f7ff ffbb 	bl	800cbcc <do_memp_free_pool>
 800cc56:	e000      	b.n	800cc5a <memp_free_pool+0x36>
    return;
 800cc58:	bf00      	nop
}
 800cc5a:	3708      	adds	r7, #8
 800cc5c:	46bd      	mov	sp, r7
 800cc5e:	bd80      	pop	{r7, pc}
 800cc60:	0801835c 	.word	0x0801835c
 800cc64:	080183d8 	.word	0x080183d8
 800cc68:	080183b0 	.word	0x080183b0

0800cc6c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800cc6c:	b580      	push	{r7, lr}
 800cc6e:	b082      	sub	sp, #8
 800cc70:	af00      	add	r7, sp, #0
 800cc72:	4603      	mov	r3, r0
 800cc74:	6039      	str	r1, [r7, #0]
 800cc76:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800cc78:	79fb      	ldrb	r3, [r7, #7]
 800cc7a:	2b0c      	cmp	r3, #12
 800cc7c:	d907      	bls.n	800cc8e <memp_free+0x22>
 800cc7e:	4b0c      	ldr	r3, [pc, #48]	; (800ccb0 <memp_free+0x44>)
 800cc80:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800cc84:	490b      	ldr	r1, [pc, #44]	; (800ccb4 <memp_free+0x48>)
 800cc86:	480c      	ldr	r0, [pc, #48]	; (800ccb8 <memp_free+0x4c>)
 800cc88:	f00a f906 	bl	8016e98 <iprintf>
 800cc8c:	e00c      	b.n	800cca8 <memp_free+0x3c>

  if (mem == NULL) {
 800cc8e:	683b      	ldr	r3, [r7, #0]
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d008      	beq.n	800cca6 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800cc94:	79fb      	ldrb	r3, [r7, #7]
 800cc96:	4a09      	ldr	r2, [pc, #36]	; (800ccbc <memp_free+0x50>)
 800cc98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc9c:	6839      	ldr	r1, [r7, #0]
 800cc9e:	4618      	mov	r0, r3
 800cca0:	f7ff ff94 	bl	800cbcc <do_memp_free_pool>
 800cca4:	e000      	b.n	800cca8 <memp_free+0x3c>
    return;
 800cca6:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800cca8:	3708      	adds	r7, #8
 800ccaa:	46bd      	mov	sp, r7
 800ccac:	bd80      	pop	{r7, pc}
 800ccae:	bf00      	nop
 800ccb0:	0801835c 	.word	0x0801835c
 800ccb4:	0801842c 	.word	0x0801842c
 800ccb8:	080183b0 	.word	0x080183b0
 800ccbc:	0801ab6c 	.word	0x0801ab6c

0800ccc0 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800ccc0:	b480      	push	{r7}
 800ccc2:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800ccc4:	bf00      	nop
 800ccc6:	46bd      	mov	sp, r7
 800ccc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cccc:	4770      	bx	lr
	...

0800ccd0 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800ccd0:	b580      	push	{r7, lr}
 800ccd2:	b086      	sub	sp, #24
 800ccd4:	af00      	add	r7, sp, #0
 800ccd6:	60f8      	str	r0, [r7, #12]
 800ccd8:	60b9      	str	r1, [r7, #8]
 800ccda:	607a      	str	r2, [r7, #4]
 800ccdc:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d108      	bne.n	800ccf6 <netif_add+0x26>
 800cce4:	4b57      	ldr	r3, [pc, #348]	; (800ce44 <netif_add+0x174>)
 800cce6:	f240 1227 	movw	r2, #295	; 0x127
 800ccea:	4957      	ldr	r1, [pc, #348]	; (800ce48 <netif_add+0x178>)
 800ccec:	4857      	ldr	r0, [pc, #348]	; (800ce4c <netif_add+0x17c>)
 800ccee:	f00a f8d3 	bl	8016e98 <iprintf>
 800ccf2:	2300      	movs	r3, #0
 800ccf4:	e0a2      	b.n	800ce3c <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800ccf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d108      	bne.n	800cd0e <netif_add+0x3e>
 800ccfc:	4b51      	ldr	r3, [pc, #324]	; (800ce44 <netif_add+0x174>)
 800ccfe:	f44f 7294 	mov.w	r2, #296	; 0x128
 800cd02:	4953      	ldr	r1, [pc, #332]	; (800ce50 <netif_add+0x180>)
 800cd04:	4851      	ldr	r0, [pc, #324]	; (800ce4c <netif_add+0x17c>)
 800cd06:	f00a f8c7 	bl	8016e98 <iprintf>
 800cd0a:	2300      	movs	r3, #0
 800cd0c:	e096      	b.n	800ce3c <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800cd0e:	68bb      	ldr	r3, [r7, #8]
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d101      	bne.n	800cd18 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800cd14:	4b4f      	ldr	r3, [pc, #316]	; (800ce54 <netif_add+0x184>)
 800cd16:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d101      	bne.n	800cd22 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800cd1e:	4b4d      	ldr	r3, [pc, #308]	; (800ce54 <netif_add+0x184>)
 800cd20:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800cd22:	683b      	ldr	r3, [r7, #0]
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d101      	bne.n	800cd2c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800cd28:	4b4a      	ldr	r3, [pc, #296]	; (800ce54 <netif_add+0x184>)
 800cd2a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	2200      	movs	r2, #0
 800cd30:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	2200      	movs	r2, #0
 800cd36:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	2200      	movs	r2, #0
 800cd3c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	4a45      	ldr	r2, [pc, #276]	; (800ce58 <netif_add+0x188>)
 800cd42:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	2200      	movs	r2, #0
 800cd48:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	2200      	movs	r2, #0
 800cd4e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	2200      	movs	r2, #0
 800cd56:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	6a3a      	ldr	r2, [r7, #32]
 800cd5c:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800cd5e:	4b3f      	ldr	r3, [pc, #252]	; (800ce5c <netif_add+0x18c>)
 800cd60:	781a      	ldrb	r2, [r3, #0]
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cd6c:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800cd6e:	683b      	ldr	r3, [r7, #0]
 800cd70:	687a      	ldr	r2, [r7, #4]
 800cd72:	68b9      	ldr	r1, [r7, #8]
 800cd74:	68f8      	ldr	r0, [r7, #12]
 800cd76:	f000 f913 	bl	800cfa0 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800cd7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd7c:	68f8      	ldr	r0, [r7, #12]
 800cd7e:	4798      	blx	r3
 800cd80:	4603      	mov	r3, r0
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d001      	beq.n	800cd8a <netif_add+0xba>
    return NULL;
 800cd86:	2300      	movs	r3, #0
 800cd88:	e058      	b.n	800ce3c <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cd90:	2bff      	cmp	r3, #255	; 0xff
 800cd92:	d103      	bne.n	800cd9c <netif_add+0xcc>
        netif->num = 0;
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	2200      	movs	r2, #0
 800cd98:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800cd9c:	2300      	movs	r3, #0
 800cd9e:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800cda0:	4b2f      	ldr	r3, [pc, #188]	; (800ce60 <netif_add+0x190>)
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	617b      	str	r3, [r7, #20]
 800cda6:	e02b      	b.n	800ce00 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800cda8:	697a      	ldr	r2, [r7, #20]
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	429a      	cmp	r2, r3
 800cdae:	d106      	bne.n	800cdbe <netif_add+0xee>
 800cdb0:	4b24      	ldr	r3, [pc, #144]	; (800ce44 <netif_add+0x174>)
 800cdb2:	f240 128b 	movw	r2, #395	; 0x18b
 800cdb6:	492b      	ldr	r1, [pc, #172]	; (800ce64 <netif_add+0x194>)
 800cdb8:	4824      	ldr	r0, [pc, #144]	; (800ce4c <netif_add+0x17c>)
 800cdba:	f00a f86d 	bl	8016e98 <iprintf>
        num_netifs++;
 800cdbe:	693b      	ldr	r3, [r7, #16]
 800cdc0:	3301      	adds	r3, #1
 800cdc2:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800cdc4:	693b      	ldr	r3, [r7, #16]
 800cdc6:	2bff      	cmp	r3, #255	; 0xff
 800cdc8:	dd06      	ble.n	800cdd8 <netif_add+0x108>
 800cdca:	4b1e      	ldr	r3, [pc, #120]	; (800ce44 <netif_add+0x174>)
 800cdcc:	f240 128d 	movw	r2, #397	; 0x18d
 800cdd0:	4925      	ldr	r1, [pc, #148]	; (800ce68 <netif_add+0x198>)
 800cdd2:	481e      	ldr	r0, [pc, #120]	; (800ce4c <netif_add+0x17c>)
 800cdd4:	f00a f860 	bl	8016e98 <iprintf>
        if (netif2->num == netif->num) {
 800cdd8:	697b      	ldr	r3, [r7, #20]
 800cdda:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cde4:	429a      	cmp	r2, r3
 800cde6:	d108      	bne.n	800cdfa <netif_add+0x12a>
          netif->num++;
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cdee:	3301      	adds	r3, #1
 800cdf0:	b2da      	uxtb	r2, r3
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800cdf8:	e005      	b.n	800ce06 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800cdfa:	697b      	ldr	r3, [r7, #20]
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	617b      	str	r3, [r7, #20]
 800ce00:	697b      	ldr	r3, [r7, #20]
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d1d0      	bne.n	800cda8 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800ce06:	697b      	ldr	r3, [r7, #20]
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d1be      	bne.n	800cd8a <netif_add+0xba>
  }
  if (netif->num == 254) {
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ce12:	2bfe      	cmp	r3, #254	; 0xfe
 800ce14:	d103      	bne.n	800ce1e <netif_add+0x14e>
    netif_num = 0;
 800ce16:	4b11      	ldr	r3, [pc, #68]	; (800ce5c <netif_add+0x18c>)
 800ce18:	2200      	movs	r2, #0
 800ce1a:	701a      	strb	r2, [r3, #0]
 800ce1c:	e006      	b.n	800ce2c <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ce24:	3301      	adds	r3, #1
 800ce26:	b2da      	uxtb	r2, r3
 800ce28:	4b0c      	ldr	r3, [pc, #48]	; (800ce5c <netif_add+0x18c>)
 800ce2a:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800ce2c:	4b0c      	ldr	r3, [pc, #48]	; (800ce60 <netif_add+0x190>)
 800ce2e:	681a      	ldr	r2, [r3, #0]
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800ce34:	4a0a      	ldr	r2, [pc, #40]	; (800ce60 <netif_add+0x190>)
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800ce3a:	68fb      	ldr	r3, [r7, #12]
}
 800ce3c:	4618      	mov	r0, r3
 800ce3e:	3718      	adds	r7, #24
 800ce40:	46bd      	mov	sp, r7
 800ce42:	bd80      	pop	{r7, pc}
 800ce44:	08018448 	.word	0x08018448
 800ce48:	080184dc 	.word	0x080184dc
 800ce4c:	08018498 	.word	0x08018498
 800ce50:	080184f8 	.word	0x080184f8
 800ce54:	0801abe0 	.word	0x0801abe0
 800ce58:	0800d27b 	.word	0x0800d27b
 800ce5c:	240040bc 	.word	0x240040bc
 800ce60:	24007998 	.word	0x24007998
 800ce64:	0801851c 	.word	0x0801851c
 800ce68:	08018530 	.word	0x08018530

0800ce6c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800ce6c:	b580      	push	{r7, lr}
 800ce6e:	b082      	sub	sp, #8
 800ce70:	af00      	add	r7, sp, #0
 800ce72:	6078      	str	r0, [r7, #4]
 800ce74:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800ce76:	6839      	ldr	r1, [r7, #0]
 800ce78:	6878      	ldr	r0, [r7, #4]
 800ce7a:	f002 fe2d 	bl	800fad8 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800ce7e:	6839      	ldr	r1, [r7, #0]
 800ce80:	6878      	ldr	r0, [r7, #4]
 800ce82:	f007 fb95 	bl	80145b0 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800ce86:	bf00      	nop
 800ce88:	3708      	adds	r7, #8
 800ce8a:	46bd      	mov	sp, r7
 800ce8c:	bd80      	pop	{r7, pc}
	...

0800ce90 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800ce90:	b580      	push	{r7, lr}
 800ce92:	b086      	sub	sp, #24
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	60f8      	str	r0, [r7, #12]
 800ce98:	60b9      	str	r1, [r7, #8]
 800ce9a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800ce9c:	68bb      	ldr	r3, [r7, #8]
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d106      	bne.n	800ceb0 <netif_do_set_ipaddr+0x20>
 800cea2:	4b1d      	ldr	r3, [pc, #116]	; (800cf18 <netif_do_set_ipaddr+0x88>)
 800cea4:	f240 12cb 	movw	r2, #459	; 0x1cb
 800cea8:	491c      	ldr	r1, [pc, #112]	; (800cf1c <netif_do_set_ipaddr+0x8c>)
 800ceaa:	481d      	ldr	r0, [pc, #116]	; (800cf20 <netif_do_set_ipaddr+0x90>)
 800ceac:	f009 fff4 	bl	8016e98 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d106      	bne.n	800cec4 <netif_do_set_ipaddr+0x34>
 800ceb6:	4b18      	ldr	r3, [pc, #96]	; (800cf18 <netif_do_set_ipaddr+0x88>)
 800ceb8:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800cebc:	4917      	ldr	r1, [pc, #92]	; (800cf1c <netif_do_set_ipaddr+0x8c>)
 800cebe:	4818      	ldr	r0, [pc, #96]	; (800cf20 <netif_do_set_ipaddr+0x90>)
 800cec0:	f009 ffea 	bl	8016e98 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800cec4:	68bb      	ldr	r3, [r7, #8]
 800cec6:	681a      	ldr	r2, [r3, #0]
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	3304      	adds	r3, #4
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	429a      	cmp	r2, r3
 800ced0:	d01c      	beq.n	800cf0c <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800ced2:	68bb      	ldr	r3, [r7, #8]
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	3304      	adds	r3, #4
 800cedc:	681a      	ldr	r2, [r3, #0]
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800cee2:	f107 0314 	add.w	r3, r7, #20
 800cee6:	4619      	mov	r1, r3
 800cee8:	6878      	ldr	r0, [r7, #4]
 800ceea:	f7ff ffbf 	bl	800ce6c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800ceee:	68bb      	ldr	r3, [r7, #8]
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d002      	beq.n	800cefa <netif_do_set_ipaddr+0x6a>
 800cef4:	68bb      	ldr	r3, [r7, #8]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	e000      	b.n	800cefc <netif_do_set_ipaddr+0x6c>
 800cefa:	2300      	movs	r3, #0
 800cefc:	68fa      	ldr	r2, [r7, #12]
 800cefe:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800cf00:	2101      	movs	r1, #1
 800cf02:	68f8      	ldr	r0, [r7, #12]
 800cf04:	f000 f8d2 	bl	800d0ac <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800cf08:	2301      	movs	r3, #1
 800cf0a:	e000      	b.n	800cf0e <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800cf0c:	2300      	movs	r3, #0
}
 800cf0e:	4618      	mov	r0, r3
 800cf10:	3718      	adds	r7, #24
 800cf12:	46bd      	mov	sp, r7
 800cf14:	bd80      	pop	{r7, pc}
 800cf16:	bf00      	nop
 800cf18:	08018448 	.word	0x08018448
 800cf1c:	08018560 	.word	0x08018560
 800cf20:	08018498 	.word	0x08018498

0800cf24 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800cf24:	b480      	push	{r7}
 800cf26:	b085      	sub	sp, #20
 800cf28:	af00      	add	r7, sp, #0
 800cf2a:	60f8      	str	r0, [r7, #12]
 800cf2c:	60b9      	str	r1, [r7, #8]
 800cf2e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800cf30:	68bb      	ldr	r3, [r7, #8]
 800cf32:	681a      	ldr	r2, [r3, #0]
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	3308      	adds	r3, #8
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	429a      	cmp	r2, r3
 800cf3c:	d00a      	beq.n	800cf54 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800cf3e:	68bb      	ldr	r3, [r7, #8]
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d002      	beq.n	800cf4a <netif_do_set_netmask+0x26>
 800cf44:	68bb      	ldr	r3, [r7, #8]
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	e000      	b.n	800cf4c <netif_do_set_netmask+0x28>
 800cf4a:	2300      	movs	r3, #0
 800cf4c:	68fa      	ldr	r2, [r7, #12]
 800cf4e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800cf50:	2301      	movs	r3, #1
 800cf52:	e000      	b.n	800cf56 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800cf54:	2300      	movs	r3, #0
}
 800cf56:	4618      	mov	r0, r3
 800cf58:	3714      	adds	r7, #20
 800cf5a:	46bd      	mov	sp, r7
 800cf5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf60:	4770      	bx	lr

0800cf62 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800cf62:	b480      	push	{r7}
 800cf64:	b085      	sub	sp, #20
 800cf66:	af00      	add	r7, sp, #0
 800cf68:	60f8      	str	r0, [r7, #12]
 800cf6a:	60b9      	str	r1, [r7, #8]
 800cf6c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800cf6e:	68bb      	ldr	r3, [r7, #8]
 800cf70:	681a      	ldr	r2, [r3, #0]
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	330c      	adds	r3, #12
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	429a      	cmp	r2, r3
 800cf7a:	d00a      	beq.n	800cf92 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800cf7c:	68bb      	ldr	r3, [r7, #8]
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d002      	beq.n	800cf88 <netif_do_set_gw+0x26>
 800cf82:	68bb      	ldr	r3, [r7, #8]
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	e000      	b.n	800cf8a <netif_do_set_gw+0x28>
 800cf88:	2300      	movs	r3, #0
 800cf8a:	68fa      	ldr	r2, [r7, #12]
 800cf8c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800cf8e:	2301      	movs	r3, #1
 800cf90:	e000      	b.n	800cf94 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800cf92:	2300      	movs	r3, #0
}
 800cf94:	4618      	mov	r0, r3
 800cf96:	3714      	adds	r7, #20
 800cf98:	46bd      	mov	sp, r7
 800cf9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf9e:	4770      	bx	lr

0800cfa0 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800cfa0:	b580      	push	{r7, lr}
 800cfa2:	b088      	sub	sp, #32
 800cfa4:	af00      	add	r7, sp, #0
 800cfa6:	60f8      	str	r0, [r7, #12]
 800cfa8:	60b9      	str	r1, [r7, #8]
 800cfaa:	607a      	str	r2, [r7, #4]
 800cfac:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800cfae:	2300      	movs	r3, #0
 800cfb0:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800cfb2:	2300      	movs	r3, #0
 800cfb4:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800cfb6:	68bb      	ldr	r3, [r7, #8]
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d101      	bne.n	800cfc0 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800cfbc:	4b1c      	ldr	r3, [pc, #112]	; (800d030 <netif_set_addr+0x90>)
 800cfbe:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d101      	bne.n	800cfca <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800cfc6:	4b1a      	ldr	r3, [pc, #104]	; (800d030 <netif_set_addr+0x90>)
 800cfc8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800cfca:	683b      	ldr	r3, [r7, #0]
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d101      	bne.n	800cfd4 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800cfd0:	4b17      	ldr	r3, [pc, #92]	; (800d030 <netif_set_addr+0x90>)
 800cfd2:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800cfd4:	68bb      	ldr	r3, [r7, #8]
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d003      	beq.n	800cfe2 <netif_set_addr+0x42>
 800cfda:	68bb      	ldr	r3, [r7, #8]
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d101      	bne.n	800cfe6 <netif_set_addr+0x46>
 800cfe2:	2301      	movs	r3, #1
 800cfe4:	e000      	b.n	800cfe8 <netif_set_addr+0x48>
 800cfe6:	2300      	movs	r3, #0
 800cfe8:	617b      	str	r3, [r7, #20]
  if (remove) {
 800cfea:	697b      	ldr	r3, [r7, #20]
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d006      	beq.n	800cffe <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800cff0:	f107 0310 	add.w	r3, r7, #16
 800cff4:	461a      	mov	r2, r3
 800cff6:	68b9      	ldr	r1, [r7, #8]
 800cff8:	68f8      	ldr	r0, [r7, #12]
 800cffa:	f7ff ff49 	bl	800ce90 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800cffe:	69fa      	ldr	r2, [r7, #28]
 800d000:	6879      	ldr	r1, [r7, #4]
 800d002:	68f8      	ldr	r0, [r7, #12]
 800d004:	f7ff ff8e 	bl	800cf24 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800d008:	69ba      	ldr	r2, [r7, #24]
 800d00a:	6839      	ldr	r1, [r7, #0]
 800d00c:	68f8      	ldr	r0, [r7, #12]
 800d00e:	f7ff ffa8 	bl	800cf62 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800d012:	697b      	ldr	r3, [r7, #20]
 800d014:	2b00      	cmp	r3, #0
 800d016:	d106      	bne.n	800d026 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800d018:	f107 0310 	add.w	r3, r7, #16
 800d01c:	461a      	mov	r2, r3
 800d01e:	68b9      	ldr	r1, [r7, #8]
 800d020:	68f8      	ldr	r0, [r7, #12]
 800d022:	f7ff ff35 	bl	800ce90 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800d026:	bf00      	nop
 800d028:	3720      	adds	r7, #32
 800d02a:	46bd      	mov	sp, r7
 800d02c:	bd80      	pop	{r7, pc}
 800d02e:	bf00      	nop
 800d030:	0801abe0 	.word	0x0801abe0

0800d034 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800d034:	b480      	push	{r7}
 800d036:	b083      	sub	sp, #12
 800d038:	af00      	add	r7, sp, #0
 800d03a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800d03c:	4a04      	ldr	r2, [pc, #16]	; (800d050 <netif_set_default+0x1c>)
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800d042:	bf00      	nop
 800d044:	370c      	adds	r7, #12
 800d046:	46bd      	mov	sp, r7
 800d048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d04c:	4770      	bx	lr
 800d04e:	bf00      	nop
 800d050:	2400799c 	.word	0x2400799c

0800d054 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800d054:	b580      	push	{r7, lr}
 800d056:	b082      	sub	sp, #8
 800d058:	af00      	add	r7, sp, #0
 800d05a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d107      	bne.n	800d072 <netif_set_up+0x1e>
 800d062:	4b0f      	ldr	r3, [pc, #60]	; (800d0a0 <netif_set_up+0x4c>)
 800d064:	f44f 7254 	mov.w	r2, #848	; 0x350
 800d068:	490e      	ldr	r1, [pc, #56]	; (800d0a4 <netif_set_up+0x50>)
 800d06a:	480f      	ldr	r0, [pc, #60]	; (800d0a8 <netif_set_up+0x54>)
 800d06c:	f009 ff14 	bl	8016e98 <iprintf>
 800d070:	e013      	b.n	800d09a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d078:	f003 0301 	and.w	r3, r3, #1
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d10c      	bne.n	800d09a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d086:	f043 0301 	orr.w	r3, r3, #1
 800d08a:	b2da      	uxtb	r2, r3
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800d092:	2103      	movs	r1, #3
 800d094:	6878      	ldr	r0, [r7, #4]
 800d096:	f000 f809 	bl	800d0ac <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800d09a:	3708      	adds	r7, #8
 800d09c:	46bd      	mov	sp, r7
 800d09e:	bd80      	pop	{r7, pc}
 800d0a0:	08018448 	.word	0x08018448
 800d0a4:	080185d0 	.word	0x080185d0
 800d0a8:	08018498 	.word	0x08018498

0800d0ac <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800d0ac:	b580      	push	{r7, lr}
 800d0ae:	b082      	sub	sp, #8
 800d0b0:	af00      	add	r7, sp, #0
 800d0b2:	6078      	str	r0, [r7, #4]
 800d0b4:	460b      	mov	r3, r1
 800d0b6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d106      	bne.n	800d0cc <netif_issue_reports+0x20>
 800d0be:	4b18      	ldr	r3, [pc, #96]	; (800d120 <netif_issue_reports+0x74>)
 800d0c0:	f240 326d 	movw	r2, #877	; 0x36d
 800d0c4:	4917      	ldr	r1, [pc, #92]	; (800d124 <netif_issue_reports+0x78>)
 800d0c6:	4818      	ldr	r0, [pc, #96]	; (800d128 <netif_issue_reports+0x7c>)
 800d0c8:	f009 fee6 	bl	8016e98 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d0d2:	f003 0304 	and.w	r3, r3, #4
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d01e      	beq.n	800d118 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d0e0:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d017      	beq.n	800d118 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800d0e8:	78fb      	ldrb	r3, [r7, #3]
 800d0ea:	f003 0301 	and.w	r3, r3, #1
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d013      	beq.n	800d11a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	3304      	adds	r3, #4
 800d0f6:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d00e      	beq.n	800d11a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d102:	f003 0308 	and.w	r3, r3, #8
 800d106:	2b00      	cmp	r3, #0
 800d108:	d007      	beq.n	800d11a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	3304      	adds	r3, #4
 800d10e:	4619      	mov	r1, r3
 800d110:	6878      	ldr	r0, [r7, #4]
 800d112:	f008 f9b7 	bl	8015484 <etharp_request>
 800d116:	e000      	b.n	800d11a <netif_issue_reports+0x6e>
    return;
 800d118:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800d11a:	3708      	adds	r7, #8
 800d11c:	46bd      	mov	sp, r7
 800d11e:	bd80      	pop	{r7, pc}
 800d120:	08018448 	.word	0x08018448
 800d124:	080185ec 	.word	0x080185ec
 800d128:	08018498 	.word	0x08018498

0800d12c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800d12c:	b580      	push	{r7, lr}
 800d12e:	b082      	sub	sp, #8
 800d130:	af00      	add	r7, sp, #0
 800d132:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	2b00      	cmp	r3, #0
 800d138:	d107      	bne.n	800d14a <netif_set_down+0x1e>
 800d13a:	4b12      	ldr	r3, [pc, #72]	; (800d184 <netif_set_down+0x58>)
 800d13c:	f240 329b 	movw	r2, #923	; 0x39b
 800d140:	4911      	ldr	r1, [pc, #68]	; (800d188 <netif_set_down+0x5c>)
 800d142:	4812      	ldr	r0, [pc, #72]	; (800d18c <netif_set_down+0x60>)
 800d144:	f009 fea8 	bl	8016e98 <iprintf>
 800d148:	e019      	b.n	800d17e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d150:	f003 0301 	and.w	r3, r3, #1
 800d154:	2b00      	cmp	r3, #0
 800d156:	d012      	beq.n	800d17e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d15e:	f023 0301 	bic.w	r3, r3, #1
 800d162:	b2da      	uxtb	r2, r3
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d170:	f003 0308 	and.w	r3, r3, #8
 800d174:	2b00      	cmp	r3, #0
 800d176:	d002      	beq.n	800d17e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800d178:	6878      	ldr	r0, [r7, #4]
 800d17a:	f007 fd41 	bl	8014c00 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800d17e:	3708      	adds	r7, #8
 800d180:	46bd      	mov	sp, r7
 800d182:	bd80      	pop	{r7, pc}
 800d184:	08018448 	.word	0x08018448
 800d188:	08018610 	.word	0x08018610
 800d18c:	08018498 	.word	0x08018498

0800d190 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800d190:	b580      	push	{r7, lr}
 800d192:	b082      	sub	sp, #8
 800d194:	af00      	add	r7, sp, #0
 800d196:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d107      	bne.n	800d1ae <netif_set_link_up+0x1e>
 800d19e:	4b13      	ldr	r3, [pc, #76]	; (800d1ec <netif_set_link_up+0x5c>)
 800d1a0:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800d1a4:	4912      	ldr	r1, [pc, #72]	; (800d1f0 <netif_set_link_up+0x60>)
 800d1a6:	4813      	ldr	r0, [pc, #76]	; (800d1f4 <netif_set_link_up+0x64>)
 800d1a8:	f009 fe76 	bl	8016e98 <iprintf>
 800d1ac:	e01b      	b.n	800d1e6 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d1b4:	f003 0304 	and.w	r3, r3, #4
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d114      	bne.n	800d1e6 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d1c2:	f043 0304 	orr.w	r3, r3, #4
 800d1c6:	b2da      	uxtb	r2, r3
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800d1ce:	2103      	movs	r1, #3
 800d1d0:	6878      	ldr	r0, [r7, #4]
 800d1d2:	f7ff ff6b 	bl	800d0ac <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	69db      	ldr	r3, [r3, #28]
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d003      	beq.n	800d1e6 <netif_set_link_up+0x56>
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	69db      	ldr	r3, [r3, #28]
 800d1e2:	6878      	ldr	r0, [r7, #4]
 800d1e4:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800d1e6:	3708      	adds	r7, #8
 800d1e8:	46bd      	mov	sp, r7
 800d1ea:	bd80      	pop	{r7, pc}
 800d1ec:	08018448 	.word	0x08018448
 800d1f0:	08018630 	.word	0x08018630
 800d1f4:	08018498 	.word	0x08018498

0800d1f8 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800d1f8:	b580      	push	{r7, lr}
 800d1fa:	b082      	sub	sp, #8
 800d1fc:	af00      	add	r7, sp, #0
 800d1fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	2b00      	cmp	r3, #0
 800d204:	d107      	bne.n	800d216 <netif_set_link_down+0x1e>
 800d206:	4b11      	ldr	r3, [pc, #68]	; (800d24c <netif_set_link_down+0x54>)
 800d208:	f240 4206 	movw	r2, #1030	; 0x406
 800d20c:	4910      	ldr	r1, [pc, #64]	; (800d250 <netif_set_link_down+0x58>)
 800d20e:	4811      	ldr	r0, [pc, #68]	; (800d254 <netif_set_link_down+0x5c>)
 800d210:	f009 fe42 	bl	8016e98 <iprintf>
 800d214:	e017      	b.n	800d246 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d21c:	f003 0304 	and.w	r3, r3, #4
 800d220:	2b00      	cmp	r3, #0
 800d222:	d010      	beq.n	800d246 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d22a:	f023 0304 	bic.w	r3, r3, #4
 800d22e:	b2da      	uxtb	r2, r3
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	69db      	ldr	r3, [r3, #28]
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d003      	beq.n	800d246 <netif_set_link_down+0x4e>
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	69db      	ldr	r3, [r3, #28]
 800d242:	6878      	ldr	r0, [r7, #4]
 800d244:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800d246:	3708      	adds	r7, #8
 800d248:	46bd      	mov	sp, r7
 800d24a:	bd80      	pop	{r7, pc}
 800d24c:	08018448 	.word	0x08018448
 800d250:	08018654 	.word	0x08018654
 800d254:	08018498 	.word	0x08018498

0800d258 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800d258:	b480      	push	{r7}
 800d25a:	b083      	sub	sp, #12
 800d25c:	af00      	add	r7, sp, #0
 800d25e:	6078      	str	r0, [r7, #4]
 800d260:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	2b00      	cmp	r3, #0
 800d266:	d002      	beq.n	800d26e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	683a      	ldr	r2, [r7, #0]
 800d26c:	61da      	str	r2, [r3, #28]
  }
}
 800d26e:	bf00      	nop
 800d270:	370c      	adds	r7, #12
 800d272:	46bd      	mov	sp, r7
 800d274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d278:	4770      	bx	lr

0800d27a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800d27a:	b480      	push	{r7}
 800d27c:	b085      	sub	sp, #20
 800d27e:	af00      	add	r7, sp, #0
 800d280:	60f8      	str	r0, [r7, #12]
 800d282:	60b9      	str	r1, [r7, #8]
 800d284:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800d286:	f06f 030b 	mvn.w	r3, #11
}
 800d28a:	4618      	mov	r0, r3
 800d28c:	3714      	adds	r7, #20
 800d28e:	46bd      	mov	sp, r7
 800d290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d294:	4770      	bx	lr
	...

0800d298 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800d298:	b480      	push	{r7}
 800d29a:	b085      	sub	sp, #20
 800d29c:	af00      	add	r7, sp, #0
 800d29e:	4603      	mov	r3, r0
 800d2a0:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800d2a2:	79fb      	ldrb	r3, [r7, #7]
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d013      	beq.n	800d2d0 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800d2a8:	4b0d      	ldr	r3, [pc, #52]	; (800d2e0 <netif_get_by_index+0x48>)
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	60fb      	str	r3, [r7, #12]
 800d2ae:	e00c      	b.n	800d2ca <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d2b6:	3301      	adds	r3, #1
 800d2b8:	b2db      	uxtb	r3, r3
 800d2ba:	79fa      	ldrb	r2, [r7, #7]
 800d2bc:	429a      	cmp	r2, r3
 800d2be:	d101      	bne.n	800d2c4 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	e006      	b.n	800d2d2 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	60fb      	str	r3, [r7, #12]
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d1ef      	bne.n	800d2b0 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800d2d0:	2300      	movs	r3, #0
}
 800d2d2:	4618      	mov	r0, r3
 800d2d4:	3714      	adds	r7, #20
 800d2d6:	46bd      	mov	sp, r7
 800d2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2dc:	4770      	bx	lr
 800d2de:	bf00      	nop
 800d2e0:	24007998 	.word	0x24007998

0800d2e4 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800d2e4:	b580      	push	{r7, lr}
 800d2e6:	b082      	sub	sp, #8
 800d2e8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800d2ea:	f009 fd6f 	bl	8016dcc <sys_arch_protect>
 800d2ee:	6038      	str	r0, [r7, #0]
 800d2f0:	4b0d      	ldr	r3, [pc, #52]	; (800d328 <pbuf_free_ooseq+0x44>)
 800d2f2:	2200      	movs	r2, #0
 800d2f4:	701a      	strb	r2, [r3, #0]
 800d2f6:	6838      	ldr	r0, [r7, #0]
 800d2f8:	f009 fd76 	bl	8016de8 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800d2fc:	4b0b      	ldr	r3, [pc, #44]	; (800d32c <pbuf_free_ooseq+0x48>)
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	607b      	str	r3, [r7, #4]
 800d302:	e00a      	b.n	800d31a <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d003      	beq.n	800d314 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800d30c:	6878      	ldr	r0, [r7, #4]
 800d30e:	f002 fc21 	bl	800fb54 <tcp_free_ooseq>
      return;
 800d312:	e005      	b.n	800d320 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	68db      	ldr	r3, [r3, #12]
 800d318:	607b      	str	r3, [r7, #4]
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d1f1      	bne.n	800d304 <pbuf_free_ooseq+0x20>
    }
  }
}
 800d320:	3708      	adds	r7, #8
 800d322:	46bd      	mov	sp, r7
 800d324:	bd80      	pop	{r7, pc}
 800d326:	bf00      	nop
 800d328:	240079a0 	.word	0x240079a0
 800d32c:	240079a8 	.word	0x240079a8

0800d330 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800d330:	b580      	push	{r7, lr}
 800d332:	b082      	sub	sp, #8
 800d334:	af00      	add	r7, sp, #0
 800d336:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800d338:	f7ff ffd4 	bl	800d2e4 <pbuf_free_ooseq>
}
 800d33c:	bf00      	nop
 800d33e:	3708      	adds	r7, #8
 800d340:	46bd      	mov	sp, r7
 800d342:	bd80      	pop	{r7, pc}

0800d344 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800d344:	b580      	push	{r7, lr}
 800d346:	b082      	sub	sp, #8
 800d348:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800d34a:	f009 fd3f 	bl	8016dcc <sys_arch_protect>
 800d34e:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800d350:	4b0f      	ldr	r3, [pc, #60]	; (800d390 <pbuf_pool_is_empty+0x4c>)
 800d352:	781b      	ldrb	r3, [r3, #0]
 800d354:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800d356:	4b0e      	ldr	r3, [pc, #56]	; (800d390 <pbuf_pool_is_empty+0x4c>)
 800d358:	2201      	movs	r2, #1
 800d35a:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800d35c:	6878      	ldr	r0, [r7, #4]
 800d35e:	f009 fd43 	bl	8016de8 <sys_arch_unprotect>

  if (!queued) {
 800d362:	78fb      	ldrb	r3, [r7, #3]
 800d364:	2b00      	cmp	r3, #0
 800d366:	d10f      	bne.n	800d388 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800d368:	2100      	movs	r1, #0
 800d36a:	480a      	ldr	r0, [pc, #40]	; (800d394 <pbuf_pool_is_empty+0x50>)
 800d36c:	f7fe fdde 	bl	800bf2c <tcpip_try_callback>
 800d370:	4603      	mov	r3, r0
 800d372:	2b00      	cmp	r3, #0
 800d374:	d008      	beq.n	800d388 <pbuf_pool_is_empty+0x44>
 800d376:	f009 fd29 	bl	8016dcc <sys_arch_protect>
 800d37a:	6078      	str	r0, [r7, #4]
 800d37c:	4b04      	ldr	r3, [pc, #16]	; (800d390 <pbuf_pool_is_empty+0x4c>)
 800d37e:	2200      	movs	r2, #0
 800d380:	701a      	strb	r2, [r3, #0]
 800d382:	6878      	ldr	r0, [r7, #4]
 800d384:	f009 fd30 	bl	8016de8 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800d388:	bf00      	nop
 800d38a:	3708      	adds	r7, #8
 800d38c:	46bd      	mov	sp, r7
 800d38e:	bd80      	pop	{r7, pc}
 800d390:	240079a0 	.word	0x240079a0
 800d394:	0800d331 	.word	0x0800d331

0800d398 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800d398:	b480      	push	{r7}
 800d39a:	b085      	sub	sp, #20
 800d39c:	af00      	add	r7, sp, #0
 800d39e:	60f8      	str	r0, [r7, #12]
 800d3a0:	60b9      	str	r1, [r7, #8]
 800d3a2:	4611      	mov	r1, r2
 800d3a4:	461a      	mov	r2, r3
 800d3a6:	460b      	mov	r3, r1
 800d3a8:	80fb      	strh	r3, [r7, #6]
 800d3aa:	4613      	mov	r3, r2
 800d3ac:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	2200      	movs	r2, #0
 800d3b2:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	68ba      	ldr	r2, [r7, #8]
 800d3b8:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	88fa      	ldrh	r2, [r7, #6]
 800d3be:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	88ba      	ldrh	r2, [r7, #4]
 800d3c4:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800d3c6:	8b3b      	ldrh	r3, [r7, #24]
 800d3c8:	b2da      	uxtb	r2, r3
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	7f3a      	ldrb	r2, [r7, #28]
 800d3d2:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	2201      	movs	r2, #1
 800d3d8:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	2200      	movs	r2, #0
 800d3de:	73da      	strb	r2, [r3, #15]
}
 800d3e0:	bf00      	nop
 800d3e2:	3714      	adds	r7, #20
 800d3e4:	46bd      	mov	sp, r7
 800d3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ea:	4770      	bx	lr

0800d3ec <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800d3ec:	b580      	push	{r7, lr}
 800d3ee:	b08c      	sub	sp, #48	; 0x30
 800d3f0:	af02      	add	r7, sp, #8
 800d3f2:	4603      	mov	r3, r0
 800d3f4:	71fb      	strb	r3, [r7, #7]
 800d3f6:	460b      	mov	r3, r1
 800d3f8:	80bb      	strh	r3, [r7, #4]
 800d3fa:	4613      	mov	r3, r2
 800d3fc:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800d3fe:	79fb      	ldrb	r3, [r7, #7]
 800d400:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800d402:	887b      	ldrh	r3, [r7, #2]
 800d404:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800d408:	d07f      	beq.n	800d50a <pbuf_alloc+0x11e>
 800d40a:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800d40e:	f300 80c8 	bgt.w	800d5a2 <pbuf_alloc+0x1b6>
 800d412:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800d416:	d010      	beq.n	800d43a <pbuf_alloc+0x4e>
 800d418:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800d41c:	f300 80c1 	bgt.w	800d5a2 <pbuf_alloc+0x1b6>
 800d420:	2b01      	cmp	r3, #1
 800d422:	d002      	beq.n	800d42a <pbuf_alloc+0x3e>
 800d424:	2b41      	cmp	r3, #65	; 0x41
 800d426:	f040 80bc 	bne.w	800d5a2 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800d42a:	887a      	ldrh	r2, [r7, #2]
 800d42c:	88bb      	ldrh	r3, [r7, #4]
 800d42e:	4619      	mov	r1, r3
 800d430:	2000      	movs	r0, #0
 800d432:	f000 f8d1 	bl	800d5d8 <pbuf_alloc_reference>
 800d436:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800d438:	e0bd      	b.n	800d5b6 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800d43a:	2300      	movs	r3, #0
 800d43c:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800d43e:	2300      	movs	r3, #0
 800d440:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800d442:	88bb      	ldrh	r3, [r7, #4]
 800d444:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800d446:	200c      	movs	r0, #12
 800d448:	f7ff fb9a 	bl	800cb80 <memp_malloc>
 800d44c:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800d44e:	693b      	ldr	r3, [r7, #16]
 800d450:	2b00      	cmp	r3, #0
 800d452:	d109      	bne.n	800d468 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800d454:	f7ff ff76 	bl	800d344 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800d458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d002      	beq.n	800d464 <pbuf_alloc+0x78>
            pbuf_free(p);
 800d45e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d460:	f000 faa8 	bl	800d9b4 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800d464:	2300      	movs	r3, #0
 800d466:	e0a7      	b.n	800d5b8 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800d468:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d46a:	3303      	adds	r3, #3
 800d46c:	b29b      	uxth	r3, r3
 800d46e:	f023 0303 	bic.w	r3, r3, #3
 800d472:	b29b      	uxth	r3, r3
 800d474:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800d478:	b29b      	uxth	r3, r3
 800d47a:	8b7a      	ldrh	r2, [r7, #26]
 800d47c:	4293      	cmp	r3, r2
 800d47e:	bf28      	it	cs
 800d480:	4613      	movcs	r3, r2
 800d482:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800d484:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d486:	3310      	adds	r3, #16
 800d488:	693a      	ldr	r2, [r7, #16]
 800d48a:	4413      	add	r3, r2
 800d48c:	3303      	adds	r3, #3
 800d48e:	f023 0303 	bic.w	r3, r3, #3
 800d492:	4618      	mov	r0, r3
 800d494:	89f9      	ldrh	r1, [r7, #14]
 800d496:	8b7a      	ldrh	r2, [r7, #26]
 800d498:	2300      	movs	r3, #0
 800d49a:	9301      	str	r3, [sp, #4]
 800d49c:	887b      	ldrh	r3, [r7, #2]
 800d49e:	9300      	str	r3, [sp, #0]
 800d4a0:	460b      	mov	r3, r1
 800d4a2:	4601      	mov	r1, r0
 800d4a4:	6938      	ldr	r0, [r7, #16]
 800d4a6:	f7ff ff77 	bl	800d398 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800d4aa:	693b      	ldr	r3, [r7, #16]
 800d4ac:	685b      	ldr	r3, [r3, #4]
 800d4ae:	f003 0303 	and.w	r3, r3, #3
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d006      	beq.n	800d4c4 <pbuf_alloc+0xd8>
 800d4b6:	4b42      	ldr	r3, [pc, #264]	; (800d5c0 <pbuf_alloc+0x1d4>)
 800d4b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d4bc:	4941      	ldr	r1, [pc, #260]	; (800d5c4 <pbuf_alloc+0x1d8>)
 800d4be:	4842      	ldr	r0, [pc, #264]	; (800d5c8 <pbuf_alloc+0x1dc>)
 800d4c0:	f009 fcea 	bl	8016e98 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800d4c4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d4c6:	3303      	adds	r3, #3
 800d4c8:	f023 0303 	bic.w	r3, r3, #3
 800d4cc:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800d4d0:	d106      	bne.n	800d4e0 <pbuf_alloc+0xf4>
 800d4d2:	4b3b      	ldr	r3, [pc, #236]	; (800d5c0 <pbuf_alloc+0x1d4>)
 800d4d4:	f44f 7281 	mov.w	r2, #258	; 0x102
 800d4d8:	493c      	ldr	r1, [pc, #240]	; (800d5cc <pbuf_alloc+0x1e0>)
 800d4da:	483b      	ldr	r0, [pc, #236]	; (800d5c8 <pbuf_alloc+0x1dc>)
 800d4dc:	f009 fcdc 	bl	8016e98 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800d4e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d102      	bne.n	800d4ec <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800d4e6:	693b      	ldr	r3, [r7, #16]
 800d4e8:	627b      	str	r3, [r7, #36]	; 0x24
 800d4ea:	e002      	b.n	800d4f2 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800d4ec:	69fb      	ldr	r3, [r7, #28]
 800d4ee:	693a      	ldr	r2, [r7, #16]
 800d4f0:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800d4f2:	693b      	ldr	r3, [r7, #16]
 800d4f4:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800d4f6:	8b7a      	ldrh	r2, [r7, #26]
 800d4f8:	89fb      	ldrh	r3, [r7, #14]
 800d4fa:	1ad3      	subs	r3, r2, r3
 800d4fc:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800d4fe:	2300      	movs	r3, #0
 800d500:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800d502:	8b7b      	ldrh	r3, [r7, #26]
 800d504:	2b00      	cmp	r3, #0
 800d506:	d19e      	bne.n	800d446 <pbuf_alloc+0x5a>
      break;
 800d508:	e055      	b.n	800d5b6 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800d50a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d50c:	3303      	adds	r3, #3
 800d50e:	b29b      	uxth	r3, r3
 800d510:	f023 0303 	bic.w	r3, r3, #3
 800d514:	b29a      	uxth	r2, r3
 800d516:	88bb      	ldrh	r3, [r7, #4]
 800d518:	3303      	adds	r3, #3
 800d51a:	b29b      	uxth	r3, r3
 800d51c:	f023 0303 	bic.w	r3, r3, #3
 800d520:	b29b      	uxth	r3, r3
 800d522:	4413      	add	r3, r2
 800d524:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800d526:	8b3b      	ldrh	r3, [r7, #24]
 800d528:	3310      	adds	r3, #16
 800d52a:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800d52c:	8b3a      	ldrh	r2, [r7, #24]
 800d52e:	88bb      	ldrh	r3, [r7, #4]
 800d530:	3303      	adds	r3, #3
 800d532:	f023 0303 	bic.w	r3, r3, #3
 800d536:	429a      	cmp	r2, r3
 800d538:	d306      	bcc.n	800d548 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800d53a:	8afa      	ldrh	r2, [r7, #22]
 800d53c:	88bb      	ldrh	r3, [r7, #4]
 800d53e:	3303      	adds	r3, #3
 800d540:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800d544:	429a      	cmp	r2, r3
 800d546:	d201      	bcs.n	800d54c <pbuf_alloc+0x160>
        return NULL;
 800d548:	2300      	movs	r3, #0
 800d54a:	e035      	b.n	800d5b8 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800d54c:	8afb      	ldrh	r3, [r7, #22]
 800d54e:	4618      	mov	r0, r3
 800d550:	f7ff f96e 	bl	800c830 <mem_malloc>
 800d554:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800d556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d101      	bne.n	800d560 <pbuf_alloc+0x174>
        return NULL;
 800d55c:	2300      	movs	r3, #0
 800d55e:	e02b      	b.n	800d5b8 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800d560:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d562:	3310      	adds	r3, #16
 800d564:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d566:	4413      	add	r3, r2
 800d568:	3303      	adds	r3, #3
 800d56a:	f023 0303 	bic.w	r3, r3, #3
 800d56e:	4618      	mov	r0, r3
 800d570:	88b9      	ldrh	r1, [r7, #4]
 800d572:	88ba      	ldrh	r2, [r7, #4]
 800d574:	2300      	movs	r3, #0
 800d576:	9301      	str	r3, [sp, #4]
 800d578:	887b      	ldrh	r3, [r7, #2]
 800d57a:	9300      	str	r3, [sp, #0]
 800d57c:	460b      	mov	r3, r1
 800d57e:	4601      	mov	r1, r0
 800d580:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d582:	f7ff ff09 	bl	800d398 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800d586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d588:	685b      	ldr	r3, [r3, #4]
 800d58a:	f003 0303 	and.w	r3, r3, #3
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d010      	beq.n	800d5b4 <pbuf_alloc+0x1c8>
 800d592:	4b0b      	ldr	r3, [pc, #44]	; (800d5c0 <pbuf_alloc+0x1d4>)
 800d594:	f44f 7291 	mov.w	r2, #290	; 0x122
 800d598:	490d      	ldr	r1, [pc, #52]	; (800d5d0 <pbuf_alloc+0x1e4>)
 800d59a:	480b      	ldr	r0, [pc, #44]	; (800d5c8 <pbuf_alloc+0x1dc>)
 800d59c:	f009 fc7c 	bl	8016e98 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800d5a0:	e008      	b.n	800d5b4 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800d5a2:	4b07      	ldr	r3, [pc, #28]	; (800d5c0 <pbuf_alloc+0x1d4>)
 800d5a4:	f240 1227 	movw	r2, #295	; 0x127
 800d5a8:	490a      	ldr	r1, [pc, #40]	; (800d5d4 <pbuf_alloc+0x1e8>)
 800d5aa:	4807      	ldr	r0, [pc, #28]	; (800d5c8 <pbuf_alloc+0x1dc>)
 800d5ac:	f009 fc74 	bl	8016e98 <iprintf>
      return NULL;
 800d5b0:	2300      	movs	r3, #0
 800d5b2:	e001      	b.n	800d5b8 <pbuf_alloc+0x1cc>
      break;
 800d5b4:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800d5b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d5b8:	4618      	mov	r0, r3
 800d5ba:	3728      	adds	r7, #40	; 0x28
 800d5bc:	46bd      	mov	sp, r7
 800d5be:	bd80      	pop	{r7, pc}
 800d5c0:	08018678 	.word	0x08018678
 800d5c4:	080186a8 	.word	0x080186a8
 800d5c8:	080186d8 	.word	0x080186d8
 800d5cc:	08018700 	.word	0x08018700
 800d5d0:	08018734 	.word	0x08018734
 800d5d4:	08018760 	.word	0x08018760

0800d5d8 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800d5d8:	b580      	push	{r7, lr}
 800d5da:	b086      	sub	sp, #24
 800d5dc:	af02      	add	r7, sp, #8
 800d5de:	6078      	str	r0, [r7, #4]
 800d5e0:	460b      	mov	r3, r1
 800d5e2:	807b      	strh	r3, [r7, #2]
 800d5e4:	4613      	mov	r3, r2
 800d5e6:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800d5e8:	883b      	ldrh	r3, [r7, #0]
 800d5ea:	2b41      	cmp	r3, #65	; 0x41
 800d5ec:	d009      	beq.n	800d602 <pbuf_alloc_reference+0x2a>
 800d5ee:	883b      	ldrh	r3, [r7, #0]
 800d5f0:	2b01      	cmp	r3, #1
 800d5f2:	d006      	beq.n	800d602 <pbuf_alloc_reference+0x2a>
 800d5f4:	4b0f      	ldr	r3, [pc, #60]	; (800d634 <pbuf_alloc_reference+0x5c>)
 800d5f6:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800d5fa:	490f      	ldr	r1, [pc, #60]	; (800d638 <pbuf_alloc_reference+0x60>)
 800d5fc:	480f      	ldr	r0, [pc, #60]	; (800d63c <pbuf_alloc_reference+0x64>)
 800d5fe:	f009 fc4b 	bl	8016e98 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800d602:	200b      	movs	r0, #11
 800d604:	f7ff fabc 	bl	800cb80 <memp_malloc>
 800d608:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d101      	bne.n	800d614 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800d610:	2300      	movs	r3, #0
 800d612:	e00b      	b.n	800d62c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800d614:	8879      	ldrh	r1, [r7, #2]
 800d616:	887a      	ldrh	r2, [r7, #2]
 800d618:	2300      	movs	r3, #0
 800d61a:	9301      	str	r3, [sp, #4]
 800d61c:	883b      	ldrh	r3, [r7, #0]
 800d61e:	9300      	str	r3, [sp, #0]
 800d620:	460b      	mov	r3, r1
 800d622:	6879      	ldr	r1, [r7, #4]
 800d624:	68f8      	ldr	r0, [r7, #12]
 800d626:	f7ff feb7 	bl	800d398 <pbuf_init_alloced_pbuf>
  return p;
 800d62a:	68fb      	ldr	r3, [r7, #12]
}
 800d62c:	4618      	mov	r0, r3
 800d62e:	3710      	adds	r7, #16
 800d630:	46bd      	mov	sp, r7
 800d632:	bd80      	pop	{r7, pc}
 800d634:	08018678 	.word	0x08018678
 800d638:	0801877c 	.word	0x0801877c
 800d63c:	080186d8 	.word	0x080186d8

0800d640 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800d640:	b580      	push	{r7, lr}
 800d642:	b088      	sub	sp, #32
 800d644:	af02      	add	r7, sp, #8
 800d646:	607b      	str	r3, [r7, #4]
 800d648:	4603      	mov	r3, r0
 800d64a:	73fb      	strb	r3, [r7, #15]
 800d64c:	460b      	mov	r3, r1
 800d64e:	81bb      	strh	r3, [r7, #12]
 800d650:	4613      	mov	r3, r2
 800d652:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800d654:	7bfb      	ldrb	r3, [r7, #15]
 800d656:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800d658:	8a7b      	ldrh	r3, [r7, #18]
 800d65a:	3303      	adds	r3, #3
 800d65c:	f023 0203 	bic.w	r2, r3, #3
 800d660:	89bb      	ldrh	r3, [r7, #12]
 800d662:	441a      	add	r2, r3
 800d664:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d666:	429a      	cmp	r2, r3
 800d668:	d901      	bls.n	800d66e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800d66a:	2300      	movs	r3, #0
 800d66c:	e018      	b.n	800d6a0 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800d66e:	6a3b      	ldr	r3, [r7, #32]
 800d670:	2b00      	cmp	r3, #0
 800d672:	d007      	beq.n	800d684 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800d674:	8a7b      	ldrh	r3, [r7, #18]
 800d676:	3303      	adds	r3, #3
 800d678:	f023 0303 	bic.w	r3, r3, #3
 800d67c:	6a3a      	ldr	r2, [r7, #32]
 800d67e:	4413      	add	r3, r2
 800d680:	617b      	str	r3, [r7, #20]
 800d682:	e001      	b.n	800d688 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800d684:	2300      	movs	r3, #0
 800d686:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800d688:	6878      	ldr	r0, [r7, #4]
 800d68a:	89b9      	ldrh	r1, [r7, #12]
 800d68c:	89ba      	ldrh	r2, [r7, #12]
 800d68e:	2302      	movs	r3, #2
 800d690:	9301      	str	r3, [sp, #4]
 800d692:	897b      	ldrh	r3, [r7, #10]
 800d694:	9300      	str	r3, [sp, #0]
 800d696:	460b      	mov	r3, r1
 800d698:	6979      	ldr	r1, [r7, #20]
 800d69a:	f7ff fe7d 	bl	800d398 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800d69e:	687b      	ldr	r3, [r7, #4]
}
 800d6a0:	4618      	mov	r0, r3
 800d6a2:	3718      	adds	r7, #24
 800d6a4:	46bd      	mov	sp, r7
 800d6a6:	bd80      	pop	{r7, pc}

0800d6a8 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800d6a8:	b580      	push	{r7, lr}
 800d6aa:	b084      	sub	sp, #16
 800d6ac:	af00      	add	r7, sp, #0
 800d6ae:	6078      	str	r0, [r7, #4]
 800d6b0:	460b      	mov	r3, r1
 800d6b2:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d106      	bne.n	800d6c8 <pbuf_realloc+0x20>
 800d6ba:	4b3a      	ldr	r3, [pc, #232]	; (800d7a4 <pbuf_realloc+0xfc>)
 800d6bc:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800d6c0:	4939      	ldr	r1, [pc, #228]	; (800d7a8 <pbuf_realloc+0x100>)
 800d6c2:	483a      	ldr	r0, [pc, #232]	; (800d7ac <pbuf_realloc+0x104>)
 800d6c4:	f009 fbe8 	bl	8016e98 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	891b      	ldrh	r3, [r3, #8]
 800d6cc:	887a      	ldrh	r2, [r7, #2]
 800d6ce:	429a      	cmp	r2, r3
 800d6d0:	d263      	bcs.n	800d79a <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	891a      	ldrh	r2, [r3, #8]
 800d6d6:	887b      	ldrh	r3, [r7, #2]
 800d6d8:	1ad3      	subs	r3, r2, r3
 800d6da:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800d6dc:	887b      	ldrh	r3, [r7, #2]
 800d6de:	817b      	strh	r3, [r7, #10]
  q = p;
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800d6e4:	e018      	b.n	800d718 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	895b      	ldrh	r3, [r3, #10]
 800d6ea:	897a      	ldrh	r2, [r7, #10]
 800d6ec:	1ad3      	subs	r3, r2, r3
 800d6ee:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	891a      	ldrh	r2, [r3, #8]
 800d6f4:	893b      	ldrh	r3, [r7, #8]
 800d6f6:	1ad3      	subs	r3, r2, r3
 800d6f8:	b29a      	uxth	r2, r3
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	2b00      	cmp	r3, #0
 800d708:	d106      	bne.n	800d718 <pbuf_realloc+0x70>
 800d70a:	4b26      	ldr	r3, [pc, #152]	; (800d7a4 <pbuf_realloc+0xfc>)
 800d70c:	f240 12af 	movw	r2, #431	; 0x1af
 800d710:	4927      	ldr	r1, [pc, #156]	; (800d7b0 <pbuf_realloc+0x108>)
 800d712:	4826      	ldr	r0, [pc, #152]	; (800d7ac <pbuf_realloc+0x104>)
 800d714:	f009 fbc0 	bl	8016e98 <iprintf>
  while (rem_len > q->len) {
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	895b      	ldrh	r3, [r3, #10]
 800d71c:	897a      	ldrh	r2, [r7, #10]
 800d71e:	429a      	cmp	r2, r3
 800d720:	d8e1      	bhi.n	800d6e6 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	7b1b      	ldrb	r3, [r3, #12]
 800d726:	f003 030f 	and.w	r3, r3, #15
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d121      	bne.n	800d772 <pbuf_realloc+0xca>
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	895b      	ldrh	r3, [r3, #10]
 800d732:	897a      	ldrh	r2, [r7, #10]
 800d734:	429a      	cmp	r2, r3
 800d736:	d01c      	beq.n	800d772 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	7b5b      	ldrb	r3, [r3, #13]
 800d73c:	f003 0302 	and.w	r3, r3, #2
 800d740:	2b00      	cmp	r3, #0
 800d742:	d116      	bne.n	800d772 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	685a      	ldr	r2, [r3, #4]
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	1ad3      	subs	r3, r2, r3
 800d74c:	b29a      	uxth	r2, r3
 800d74e:	897b      	ldrh	r3, [r7, #10]
 800d750:	4413      	add	r3, r2
 800d752:	b29b      	uxth	r3, r3
 800d754:	4619      	mov	r1, r3
 800d756:	68f8      	ldr	r0, [r7, #12]
 800d758:	f7fe ff5a 	bl	800c610 <mem_trim>
 800d75c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	2b00      	cmp	r3, #0
 800d762:	d106      	bne.n	800d772 <pbuf_realloc+0xca>
 800d764:	4b0f      	ldr	r3, [pc, #60]	; (800d7a4 <pbuf_realloc+0xfc>)
 800d766:	f240 12bd 	movw	r2, #445	; 0x1bd
 800d76a:	4912      	ldr	r1, [pc, #72]	; (800d7b4 <pbuf_realloc+0x10c>)
 800d76c:	480f      	ldr	r0, [pc, #60]	; (800d7ac <pbuf_realloc+0x104>)
 800d76e:	f009 fb93 	bl	8016e98 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	897a      	ldrh	r2, [r7, #10]
 800d776:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	895a      	ldrh	r2, [r3, #10]
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	2b00      	cmp	r3, #0
 800d786:	d004      	beq.n	800d792 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	4618      	mov	r0, r3
 800d78e:	f000 f911 	bl	800d9b4 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	2200      	movs	r2, #0
 800d796:	601a      	str	r2, [r3, #0]
 800d798:	e000      	b.n	800d79c <pbuf_realloc+0xf4>
    return;
 800d79a:	bf00      	nop

}
 800d79c:	3710      	adds	r7, #16
 800d79e:	46bd      	mov	sp, r7
 800d7a0:	bd80      	pop	{r7, pc}
 800d7a2:	bf00      	nop
 800d7a4:	08018678 	.word	0x08018678
 800d7a8:	08018790 	.word	0x08018790
 800d7ac:	080186d8 	.word	0x080186d8
 800d7b0:	080187a8 	.word	0x080187a8
 800d7b4:	080187c0 	.word	0x080187c0

0800d7b8 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800d7b8:	b580      	push	{r7, lr}
 800d7ba:	b086      	sub	sp, #24
 800d7bc:	af00      	add	r7, sp, #0
 800d7be:	60f8      	str	r0, [r7, #12]
 800d7c0:	60b9      	str	r1, [r7, #8]
 800d7c2:	4613      	mov	r3, r2
 800d7c4:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d106      	bne.n	800d7da <pbuf_add_header_impl+0x22>
 800d7cc:	4b2b      	ldr	r3, [pc, #172]	; (800d87c <pbuf_add_header_impl+0xc4>)
 800d7ce:	f240 12df 	movw	r2, #479	; 0x1df
 800d7d2:	492b      	ldr	r1, [pc, #172]	; (800d880 <pbuf_add_header_impl+0xc8>)
 800d7d4:	482b      	ldr	r0, [pc, #172]	; (800d884 <pbuf_add_header_impl+0xcc>)
 800d7d6:	f009 fb5f 	bl	8016e98 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d003      	beq.n	800d7e8 <pbuf_add_header_impl+0x30>
 800d7e0:	68bb      	ldr	r3, [r7, #8]
 800d7e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d7e6:	d301      	bcc.n	800d7ec <pbuf_add_header_impl+0x34>
    return 1;
 800d7e8:	2301      	movs	r3, #1
 800d7ea:	e043      	b.n	800d874 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800d7ec:	68bb      	ldr	r3, [r7, #8]
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d101      	bne.n	800d7f6 <pbuf_add_header_impl+0x3e>
    return 0;
 800d7f2:	2300      	movs	r3, #0
 800d7f4:	e03e      	b.n	800d874 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800d7f6:	68bb      	ldr	r3, [r7, #8]
 800d7f8:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	891a      	ldrh	r2, [r3, #8]
 800d7fe:	8a7b      	ldrh	r3, [r7, #18]
 800d800:	4413      	add	r3, r2
 800d802:	b29b      	uxth	r3, r3
 800d804:	8a7a      	ldrh	r2, [r7, #18]
 800d806:	429a      	cmp	r2, r3
 800d808:	d901      	bls.n	800d80e <pbuf_add_header_impl+0x56>
    return 1;
 800d80a:	2301      	movs	r3, #1
 800d80c:	e032      	b.n	800d874 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	7b1b      	ldrb	r3, [r3, #12]
 800d812:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800d814:	8a3b      	ldrh	r3, [r7, #16]
 800d816:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d00c      	beq.n	800d838 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	685a      	ldr	r2, [r3, #4]
 800d822:	68bb      	ldr	r3, [r7, #8]
 800d824:	425b      	negs	r3, r3
 800d826:	4413      	add	r3, r2
 800d828:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	3310      	adds	r3, #16
 800d82e:	697a      	ldr	r2, [r7, #20]
 800d830:	429a      	cmp	r2, r3
 800d832:	d20d      	bcs.n	800d850 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800d834:	2301      	movs	r3, #1
 800d836:	e01d      	b.n	800d874 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800d838:	79fb      	ldrb	r3, [r7, #7]
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d006      	beq.n	800d84c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	685a      	ldr	r2, [r3, #4]
 800d842:	68bb      	ldr	r3, [r7, #8]
 800d844:	425b      	negs	r3, r3
 800d846:	4413      	add	r3, r2
 800d848:	617b      	str	r3, [r7, #20]
 800d84a:	e001      	b.n	800d850 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800d84c:	2301      	movs	r3, #1
 800d84e:	e011      	b.n	800d874 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	697a      	ldr	r2, [r7, #20]
 800d854:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	895a      	ldrh	r2, [r3, #10]
 800d85a:	8a7b      	ldrh	r3, [r7, #18]
 800d85c:	4413      	add	r3, r2
 800d85e:	b29a      	uxth	r2, r3
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	891a      	ldrh	r2, [r3, #8]
 800d868:	8a7b      	ldrh	r3, [r7, #18]
 800d86a:	4413      	add	r3, r2
 800d86c:	b29a      	uxth	r2, r3
 800d86e:	68fb      	ldr	r3, [r7, #12]
 800d870:	811a      	strh	r2, [r3, #8]


  return 0;
 800d872:	2300      	movs	r3, #0
}
 800d874:	4618      	mov	r0, r3
 800d876:	3718      	adds	r7, #24
 800d878:	46bd      	mov	sp, r7
 800d87a:	bd80      	pop	{r7, pc}
 800d87c:	08018678 	.word	0x08018678
 800d880:	080187dc 	.word	0x080187dc
 800d884:	080186d8 	.word	0x080186d8

0800d888 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800d888:	b580      	push	{r7, lr}
 800d88a:	b082      	sub	sp, #8
 800d88c:	af00      	add	r7, sp, #0
 800d88e:	6078      	str	r0, [r7, #4]
 800d890:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800d892:	2200      	movs	r2, #0
 800d894:	6839      	ldr	r1, [r7, #0]
 800d896:	6878      	ldr	r0, [r7, #4]
 800d898:	f7ff ff8e 	bl	800d7b8 <pbuf_add_header_impl>
 800d89c:	4603      	mov	r3, r0
}
 800d89e:	4618      	mov	r0, r3
 800d8a0:	3708      	adds	r7, #8
 800d8a2:	46bd      	mov	sp, r7
 800d8a4:	bd80      	pop	{r7, pc}
	...

0800d8a8 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800d8a8:	b580      	push	{r7, lr}
 800d8aa:	b084      	sub	sp, #16
 800d8ac:	af00      	add	r7, sp, #0
 800d8ae:	6078      	str	r0, [r7, #4]
 800d8b0:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d106      	bne.n	800d8c6 <pbuf_remove_header+0x1e>
 800d8b8:	4b20      	ldr	r3, [pc, #128]	; (800d93c <pbuf_remove_header+0x94>)
 800d8ba:	f240 224b 	movw	r2, #587	; 0x24b
 800d8be:	4920      	ldr	r1, [pc, #128]	; (800d940 <pbuf_remove_header+0x98>)
 800d8c0:	4820      	ldr	r0, [pc, #128]	; (800d944 <pbuf_remove_header+0x9c>)
 800d8c2:	f009 fae9 	bl	8016e98 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d003      	beq.n	800d8d4 <pbuf_remove_header+0x2c>
 800d8cc:	683b      	ldr	r3, [r7, #0]
 800d8ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d8d2:	d301      	bcc.n	800d8d8 <pbuf_remove_header+0x30>
    return 1;
 800d8d4:	2301      	movs	r3, #1
 800d8d6:	e02c      	b.n	800d932 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800d8d8:	683b      	ldr	r3, [r7, #0]
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d101      	bne.n	800d8e2 <pbuf_remove_header+0x3a>
    return 0;
 800d8de:	2300      	movs	r3, #0
 800d8e0:	e027      	b.n	800d932 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800d8e2:	683b      	ldr	r3, [r7, #0]
 800d8e4:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	895b      	ldrh	r3, [r3, #10]
 800d8ea:	89fa      	ldrh	r2, [r7, #14]
 800d8ec:	429a      	cmp	r2, r3
 800d8ee:	d908      	bls.n	800d902 <pbuf_remove_header+0x5a>
 800d8f0:	4b12      	ldr	r3, [pc, #72]	; (800d93c <pbuf_remove_header+0x94>)
 800d8f2:	f240 2255 	movw	r2, #597	; 0x255
 800d8f6:	4914      	ldr	r1, [pc, #80]	; (800d948 <pbuf_remove_header+0xa0>)
 800d8f8:	4812      	ldr	r0, [pc, #72]	; (800d944 <pbuf_remove_header+0x9c>)
 800d8fa:	f009 facd 	bl	8016e98 <iprintf>
 800d8fe:	2301      	movs	r3, #1
 800d900:	e017      	b.n	800d932 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	685b      	ldr	r3, [r3, #4]
 800d906:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	685a      	ldr	r2, [r3, #4]
 800d90c:	683b      	ldr	r3, [r7, #0]
 800d90e:	441a      	add	r2, r3
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	895a      	ldrh	r2, [r3, #10]
 800d918:	89fb      	ldrh	r3, [r7, #14]
 800d91a:	1ad3      	subs	r3, r2, r3
 800d91c:	b29a      	uxth	r2, r3
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	891a      	ldrh	r2, [r3, #8]
 800d926:	89fb      	ldrh	r3, [r7, #14]
 800d928:	1ad3      	subs	r3, r2, r3
 800d92a:	b29a      	uxth	r2, r3
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800d930:	2300      	movs	r3, #0
}
 800d932:	4618      	mov	r0, r3
 800d934:	3710      	adds	r7, #16
 800d936:	46bd      	mov	sp, r7
 800d938:	bd80      	pop	{r7, pc}
 800d93a:	bf00      	nop
 800d93c:	08018678 	.word	0x08018678
 800d940:	080187dc 	.word	0x080187dc
 800d944:	080186d8 	.word	0x080186d8
 800d948:	080187e8 	.word	0x080187e8

0800d94c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800d94c:	b580      	push	{r7, lr}
 800d94e:	b082      	sub	sp, #8
 800d950:	af00      	add	r7, sp, #0
 800d952:	6078      	str	r0, [r7, #4]
 800d954:	460b      	mov	r3, r1
 800d956:	807b      	strh	r3, [r7, #2]
 800d958:	4613      	mov	r3, r2
 800d95a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800d95c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d960:	2b00      	cmp	r3, #0
 800d962:	da08      	bge.n	800d976 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800d964:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d968:	425b      	negs	r3, r3
 800d96a:	4619      	mov	r1, r3
 800d96c:	6878      	ldr	r0, [r7, #4]
 800d96e:	f7ff ff9b 	bl	800d8a8 <pbuf_remove_header>
 800d972:	4603      	mov	r3, r0
 800d974:	e007      	b.n	800d986 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800d976:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d97a:	787a      	ldrb	r2, [r7, #1]
 800d97c:	4619      	mov	r1, r3
 800d97e:	6878      	ldr	r0, [r7, #4]
 800d980:	f7ff ff1a 	bl	800d7b8 <pbuf_add_header_impl>
 800d984:	4603      	mov	r3, r0
  }
}
 800d986:	4618      	mov	r0, r3
 800d988:	3708      	adds	r7, #8
 800d98a:	46bd      	mov	sp, r7
 800d98c:	bd80      	pop	{r7, pc}

0800d98e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800d98e:	b580      	push	{r7, lr}
 800d990:	b082      	sub	sp, #8
 800d992:	af00      	add	r7, sp, #0
 800d994:	6078      	str	r0, [r7, #4]
 800d996:	460b      	mov	r3, r1
 800d998:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800d99a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d99e:	2201      	movs	r2, #1
 800d9a0:	4619      	mov	r1, r3
 800d9a2:	6878      	ldr	r0, [r7, #4]
 800d9a4:	f7ff ffd2 	bl	800d94c <pbuf_header_impl>
 800d9a8:	4603      	mov	r3, r0
}
 800d9aa:	4618      	mov	r0, r3
 800d9ac:	3708      	adds	r7, #8
 800d9ae:	46bd      	mov	sp, r7
 800d9b0:	bd80      	pop	{r7, pc}
	...

0800d9b4 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800d9b4:	b580      	push	{r7, lr}
 800d9b6:	b088      	sub	sp, #32
 800d9b8:	af00      	add	r7, sp, #0
 800d9ba:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d10b      	bne.n	800d9da <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d106      	bne.n	800d9d6 <pbuf_free+0x22>
 800d9c8:	4b3b      	ldr	r3, [pc, #236]	; (800dab8 <pbuf_free+0x104>)
 800d9ca:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800d9ce:	493b      	ldr	r1, [pc, #236]	; (800dabc <pbuf_free+0x108>)
 800d9d0:	483b      	ldr	r0, [pc, #236]	; (800dac0 <pbuf_free+0x10c>)
 800d9d2:	f009 fa61 	bl	8016e98 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800d9d6:	2300      	movs	r3, #0
 800d9d8:	e069      	b.n	800daae <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800d9da:	2300      	movs	r3, #0
 800d9dc:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800d9de:	e062      	b.n	800daa6 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800d9e0:	f009 f9f4 	bl	8016dcc <sys_arch_protect>
 800d9e4:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	7b9b      	ldrb	r3, [r3, #14]
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d106      	bne.n	800d9fc <pbuf_free+0x48>
 800d9ee:	4b32      	ldr	r3, [pc, #200]	; (800dab8 <pbuf_free+0x104>)
 800d9f0:	f240 22f1 	movw	r2, #753	; 0x2f1
 800d9f4:	4933      	ldr	r1, [pc, #204]	; (800dac4 <pbuf_free+0x110>)
 800d9f6:	4832      	ldr	r0, [pc, #200]	; (800dac0 <pbuf_free+0x10c>)
 800d9f8:	f009 fa4e 	bl	8016e98 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	7b9b      	ldrb	r3, [r3, #14]
 800da00:	3b01      	subs	r3, #1
 800da02:	b2da      	uxtb	r2, r3
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	739a      	strb	r2, [r3, #14]
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	7b9b      	ldrb	r3, [r3, #14]
 800da0c:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800da0e:	69b8      	ldr	r0, [r7, #24]
 800da10:	f009 f9ea 	bl	8016de8 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800da14:	7dfb      	ldrb	r3, [r7, #23]
 800da16:	2b00      	cmp	r3, #0
 800da18:	d143      	bne.n	800daa2 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	7b1b      	ldrb	r3, [r3, #12]
 800da24:	f003 030f 	and.w	r3, r3, #15
 800da28:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	7b5b      	ldrb	r3, [r3, #13]
 800da2e:	f003 0302 	and.w	r3, r3, #2
 800da32:	2b00      	cmp	r3, #0
 800da34:	d011      	beq.n	800da5a <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800da3a:	68bb      	ldr	r3, [r7, #8]
 800da3c:	691b      	ldr	r3, [r3, #16]
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d106      	bne.n	800da50 <pbuf_free+0x9c>
 800da42:	4b1d      	ldr	r3, [pc, #116]	; (800dab8 <pbuf_free+0x104>)
 800da44:	f240 22ff 	movw	r2, #767	; 0x2ff
 800da48:	491f      	ldr	r1, [pc, #124]	; (800dac8 <pbuf_free+0x114>)
 800da4a:	481d      	ldr	r0, [pc, #116]	; (800dac0 <pbuf_free+0x10c>)
 800da4c:	f009 fa24 	bl	8016e98 <iprintf>
        pc->custom_free_function(p);
 800da50:	68bb      	ldr	r3, [r7, #8]
 800da52:	691b      	ldr	r3, [r3, #16]
 800da54:	6878      	ldr	r0, [r7, #4]
 800da56:	4798      	blx	r3
 800da58:	e01d      	b.n	800da96 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800da5a:	7bfb      	ldrb	r3, [r7, #15]
 800da5c:	2b02      	cmp	r3, #2
 800da5e:	d104      	bne.n	800da6a <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800da60:	6879      	ldr	r1, [r7, #4]
 800da62:	200c      	movs	r0, #12
 800da64:	f7ff f902 	bl	800cc6c <memp_free>
 800da68:	e015      	b.n	800da96 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800da6a:	7bfb      	ldrb	r3, [r7, #15]
 800da6c:	2b01      	cmp	r3, #1
 800da6e:	d104      	bne.n	800da7a <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800da70:	6879      	ldr	r1, [r7, #4]
 800da72:	200b      	movs	r0, #11
 800da74:	f7ff f8fa 	bl	800cc6c <memp_free>
 800da78:	e00d      	b.n	800da96 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800da7a:	7bfb      	ldrb	r3, [r7, #15]
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d103      	bne.n	800da88 <pbuf_free+0xd4>
          mem_free(p);
 800da80:	6878      	ldr	r0, [r7, #4]
 800da82:	f7fe fd35 	bl	800c4f0 <mem_free>
 800da86:	e006      	b.n	800da96 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800da88:	4b0b      	ldr	r3, [pc, #44]	; (800dab8 <pbuf_free+0x104>)
 800da8a:	f240 320f 	movw	r2, #783	; 0x30f
 800da8e:	490f      	ldr	r1, [pc, #60]	; (800dacc <pbuf_free+0x118>)
 800da90:	480b      	ldr	r0, [pc, #44]	; (800dac0 <pbuf_free+0x10c>)
 800da92:	f009 fa01 	bl	8016e98 <iprintf>
        }
      }
      count++;
 800da96:	7ffb      	ldrb	r3, [r7, #31]
 800da98:	3301      	adds	r3, #1
 800da9a:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800da9c:	693b      	ldr	r3, [r7, #16]
 800da9e:	607b      	str	r3, [r7, #4]
 800daa0:	e001      	b.n	800daa6 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800daa2:	2300      	movs	r3, #0
 800daa4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d199      	bne.n	800d9e0 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800daac:	7ffb      	ldrb	r3, [r7, #31]
}
 800daae:	4618      	mov	r0, r3
 800dab0:	3720      	adds	r7, #32
 800dab2:	46bd      	mov	sp, r7
 800dab4:	bd80      	pop	{r7, pc}
 800dab6:	bf00      	nop
 800dab8:	08018678 	.word	0x08018678
 800dabc:	080187dc 	.word	0x080187dc
 800dac0:	080186d8 	.word	0x080186d8
 800dac4:	08018808 	.word	0x08018808
 800dac8:	08018820 	.word	0x08018820
 800dacc:	08018844 	.word	0x08018844

0800dad0 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800dad0:	b480      	push	{r7}
 800dad2:	b085      	sub	sp, #20
 800dad4:	af00      	add	r7, sp, #0
 800dad6:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800dad8:	2300      	movs	r3, #0
 800dada:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800dadc:	e005      	b.n	800daea <pbuf_clen+0x1a>
    ++len;
 800dade:	89fb      	ldrh	r3, [r7, #14]
 800dae0:	3301      	adds	r3, #1
 800dae2:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	2b00      	cmp	r3, #0
 800daee:	d1f6      	bne.n	800dade <pbuf_clen+0xe>
  }
  return len;
 800daf0:	89fb      	ldrh	r3, [r7, #14]
}
 800daf2:	4618      	mov	r0, r3
 800daf4:	3714      	adds	r7, #20
 800daf6:	46bd      	mov	sp, r7
 800daf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dafc:	4770      	bx	lr
	...

0800db00 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800db00:	b580      	push	{r7, lr}
 800db02:	b084      	sub	sp, #16
 800db04:	af00      	add	r7, sp, #0
 800db06:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d016      	beq.n	800db3c <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800db0e:	f009 f95d 	bl	8016dcc <sys_arch_protect>
 800db12:	60f8      	str	r0, [r7, #12]
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	7b9b      	ldrb	r3, [r3, #14]
 800db18:	3301      	adds	r3, #1
 800db1a:	b2da      	uxtb	r2, r3
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	739a      	strb	r2, [r3, #14]
 800db20:	68f8      	ldr	r0, [r7, #12]
 800db22:	f009 f961 	bl	8016de8 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	7b9b      	ldrb	r3, [r3, #14]
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d106      	bne.n	800db3c <pbuf_ref+0x3c>
 800db2e:	4b05      	ldr	r3, [pc, #20]	; (800db44 <pbuf_ref+0x44>)
 800db30:	f240 3242 	movw	r2, #834	; 0x342
 800db34:	4904      	ldr	r1, [pc, #16]	; (800db48 <pbuf_ref+0x48>)
 800db36:	4805      	ldr	r0, [pc, #20]	; (800db4c <pbuf_ref+0x4c>)
 800db38:	f009 f9ae 	bl	8016e98 <iprintf>
  }
}
 800db3c:	bf00      	nop
 800db3e:	3710      	adds	r7, #16
 800db40:	46bd      	mov	sp, r7
 800db42:	bd80      	pop	{r7, pc}
 800db44:	08018678 	.word	0x08018678
 800db48:	08018858 	.word	0x08018858
 800db4c:	080186d8 	.word	0x080186d8

0800db50 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800db50:	b580      	push	{r7, lr}
 800db52:	b084      	sub	sp, #16
 800db54:	af00      	add	r7, sp, #0
 800db56:	6078      	str	r0, [r7, #4]
 800db58:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d002      	beq.n	800db66 <pbuf_cat+0x16>
 800db60:	683b      	ldr	r3, [r7, #0]
 800db62:	2b00      	cmp	r3, #0
 800db64:	d107      	bne.n	800db76 <pbuf_cat+0x26>
 800db66:	4b20      	ldr	r3, [pc, #128]	; (800dbe8 <pbuf_cat+0x98>)
 800db68:	f240 3259 	movw	r2, #857	; 0x359
 800db6c:	491f      	ldr	r1, [pc, #124]	; (800dbec <pbuf_cat+0x9c>)
 800db6e:	4820      	ldr	r0, [pc, #128]	; (800dbf0 <pbuf_cat+0xa0>)
 800db70:	f009 f992 	bl	8016e98 <iprintf>
 800db74:	e034      	b.n	800dbe0 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	60fb      	str	r3, [r7, #12]
 800db7a:	e00a      	b.n	800db92 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	891a      	ldrh	r2, [r3, #8]
 800db80:	683b      	ldr	r3, [r7, #0]
 800db82:	891b      	ldrh	r3, [r3, #8]
 800db84:	4413      	add	r3, r2
 800db86:	b29a      	uxth	r2, r3
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	60fb      	str	r3, [r7, #12]
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	2b00      	cmp	r3, #0
 800db98:	d1f0      	bne.n	800db7c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800db9a:	68fb      	ldr	r3, [r7, #12]
 800db9c:	891a      	ldrh	r2, [r3, #8]
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	895b      	ldrh	r3, [r3, #10]
 800dba2:	429a      	cmp	r2, r3
 800dba4:	d006      	beq.n	800dbb4 <pbuf_cat+0x64>
 800dba6:	4b10      	ldr	r3, [pc, #64]	; (800dbe8 <pbuf_cat+0x98>)
 800dba8:	f240 3262 	movw	r2, #866	; 0x362
 800dbac:	4911      	ldr	r1, [pc, #68]	; (800dbf4 <pbuf_cat+0xa4>)
 800dbae:	4810      	ldr	r0, [pc, #64]	; (800dbf0 <pbuf_cat+0xa0>)
 800dbb0:	f009 f972 	bl	8016e98 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d006      	beq.n	800dbca <pbuf_cat+0x7a>
 800dbbc:	4b0a      	ldr	r3, [pc, #40]	; (800dbe8 <pbuf_cat+0x98>)
 800dbbe:	f240 3263 	movw	r2, #867	; 0x363
 800dbc2:	490d      	ldr	r1, [pc, #52]	; (800dbf8 <pbuf_cat+0xa8>)
 800dbc4:	480a      	ldr	r0, [pc, #40]	; (800dbf0 <pbuf_cat+0xa0>)
 800dbc6:	f009 f967 	bl	8016e98 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	891a      	ldrh	r2, [r3, #8]
 800dbce:	683b      	ldr	r3, [r7, #0]
 800dbd0:	891b      	ldrh	r3, [r3, #8]
 800dbd2:	4413      	add	r3, r2
 800dbd4:	b29a      	uxth	r2, r3
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	683a      	ldr	r2, [r7, #0]
 800dbde:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800dbe0:	3710      	adds	r7, #16
 800dbe2:	46bd      	mov	sp, r7
 800dbe4:	bd80      	pop	{r7, pc}
 800dbe6:	bf00      	nop
 800dbe8:	08018678 	.word	0x08018678
 800dbec:	0801886c 	.word	0x0801886c
 800dbf0:	080186d8 	.word	0x080186d8
 800dbf4:	080188a4 	.word	0x080188a4
 800dbf8:	080188d4 	.word	0x080188d4

0800dbfc <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800dbfc:	b580      	push	{r7, lr}
 800dbfe:	b082      	sub	sp, #8
 800dc00:	af00      	add	r7, sp, #0
 800dc02:	6078      	str	r0, [r7, #4]
 800dc04:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800dc06:	6839      	ldr	r1, [r7, #0]
 800dc08:	6878      	ldr	r0, [r7, #4]
 800dc0a:	f7ff ffa1 	bl	800db50 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800dc0e:	6838      	ldr	r0, [r7, #0]
 800dc10:	f7ff ff76 	bl	800db00 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800dc14:	bf00      	nop
 800dc16:	3708      	adds	r7, #8
 800dc18:	46bd      	mov	sp, r7
 800dc1a:	bd80      	pop	{r7, pc}

0800dc1c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800dc1c:	b580      	push	{r7, lr}
 800dc1e:	b086      	sub	sp, #24
 800dc20:	af00      	add	r7, sp, #0
 800dc22:	6078      	str	r0, [r7, #4]
 800dc24:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800dc26:	2300      	movs	r3, #0
 800dc28:	617b      	str	r3, [r7, #20]
 800dc2a:	2300      	movs	r3, #0
 800dc2c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d008      	beq.n	800dc46 <pbuf_copy+0x2a>
 800dc34:	683b      	ldr	r3, [r7, #0]
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d005      	beq.n	800dc46 <pbuf_copy+0x2a>
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	891a      	ldrh	r2, [r3, #8]
 800dc3e:	683b      	ldr	r3, [r7, #0]
 800dc40:	891b      	ldrh	r3, [r3, #8]
 800dc42:	429a      	cmp	r2, r3
 800dc44:	d209      	bcs.n	800dc5a <pbuf_copy+0x3e>
 800dc46:	4b57      	ldr	r3, [pc, #348]	; (800dda4 <pbuf_copy+0x188>)
 800dc48:	f240 32c9 	movw	r2, #969	; 0x3c9
 800dc4c:	4956      	ldr	r1, [pc, #344]	; (800dda8 <pbuf_copy+0x18c>)
 800dc4e:	4857      	ldr	r0, [pc, #348]	; (800ddac <pbuf_copy+0x190>)
 800dc50:	f009 f922 	bl	8016e98 <iprintf>
 800dc54:	f06f 030f 	mvn.w	r3, #15
 800dc58:	e09f      	b.n	800dd9a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	895b      	ldrh	r3, [r3, #10]
 800dc5e:	461a      	mov	r2, r3
 800dc60:	697b      	ldr	r3, [r7, #20]
 800dc62:	1ad2      	subs	r2, r2, r3
 800dc64:	683b      	ldr	r3, [r7, #0]
 800dc66:	895b      	ldrh	r3, [r3, #10]
 800dc68:	4619      	mov	r1, r3
 800dc6a:	693b      	ldr	r3, [r7, #16]
 800dc6c:	1acb      	subs	r3, r1, r3
 800dc6e:	429a      	cmp	r2, r3
 800dc70:	d306      	bcc.n	800dc80 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800dc72:	683b      	ldr	r3, [r7, #0]
 800dc74:	895b      	ldrh	r3, [r3, #10]
 800dc76:	461a      	mov	r2, r3
 800dc78:	693b      	ldr	r3, [r7, #16]
 800dc7a:	1ad3      	subs	r3, r2, r3
 800dc7c:	60fb      	str	r3, [r7, #12]
 800dc7e:	e005      	b.n	800dc8c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	895b      	ldrh	r3, [r3, #10]
 800dc84:	461a      	mov	r2, r3
 800dc86:	697b      	ldr	r3, [r7, #20]
 800dc88:	1ad3      	subs	r3, r2, r3
 800dc8a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	685a      	ldr	r2, [r3, #4]
 800dc90:	697b      	ldr	r3, [r7, #20]
 800dc92:	18d0      	adds	r0, r2, r3
 800dc94:	683b      	ldr	r3, [r7, #0]
 800dc96:	685a      	ldr	r2, [r3, #4]
 800dc98:	693b      	ldr	r3, [r7, #16]
 800dc9a:	4413      	add	r3, r2
 800dc9c:	68fa      	ldr	r2, [r7, #12]
 800dc9e:	4619      	mov	r1, r3
 800dca0:	f009 f8e4 	bl	8016e6c <memcpy>
    offset_to += len;
 800dca4:	697a      	ldr	r2, [r7, #20]
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	4413      	add	r3, r2
 800dcaa:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800dcac:	693a      	ldr	r2, [r7, #16]
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	4413      	add	r3, r2
 800dcb2:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	895b      	ldrh	r3, [r3, #10]
 800dcb8:	461a      	mov	r2, r3
 800dcba:	697b      	ldr	r3, [r7, #20]
 800dcbc:	4293      	cmp	r3, r2
 800dcbe:	d906      	bls.n	800dcce <pbuf_copy+0xb2>
 800dcc0:	4b38      	ldr	r3, [pc, #224]	; (800dda4 <pbuf_copy+0x188>)
 800dcc2:	f240 32d9 	movw	r2, #985	; 0x3d9
 800dcc6:	493a      	ldr	r1, [pc, #232]	; (800ddb0 <pbuf_copy+0x194>)
 800dcc8:	4838      	ldr	r0, [pc, #224]	; (800ddac <pbuf_copy+0x190>)
 800dcca:	f009 f8e5 	bl	8016e98 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800dcce:	683b      	ldr	r3, [r7, #0]
 800dcd0:	895b      	ldrh	r3, [r3, #10]
 800dcd2:	461a      	mov	r2, r3
 800dcd4:	693b      	ldr	r3, [r7, #16]
 800dcd6:	4293      	cmp	r3, r2
 800dcd8:	d906      	bls.n	800dce8 <pbuf_copy+0xcc>
 800dcda:	4b32      	ldr	r3, [pc, #200]	; (800dda4 <pbuf_copy+0x188>)
 800dcdc:	f240 32da 	movw	r2, #986	; 0x3da
 800dce0:	4934      	ldr	r1, [pc, #208]	; (800ddb4 <pbuf_copy+0x198>)
 800dce2:	4832      	ldr	r0, [pc, #200]	; (800ddac <pbuf_copy+0x190>)
 800dce4:	f009 f8d8 	bl	8016e98 <iprintf>
    if (offset_from >= p_from->len) {
 800dce8:	683b      	ldr	r3, [r7, #0]
 800dcea:	895b      	ldrh	r3, [r3, #10]
 800dcec:	461a      	mov	r2, r3
 800dcee:	693b      	ldr	r3, [r7, #16]
 800dcf0:	4293      	cmp	r3, r2
 800dcf2:	d304      	bcc.n	800dcfe <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800dcf4:	2300      	movs	r3, #0
 800dcf6:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800dcf8:	683b      	ldr	r3, [r7, #0]
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	895b      	ldrh	r3, [r3, #10]
 800dd02:	461a      	mov	r2, r3
 800dd04:	697b      	ldr	r3, [r7, #20]
 800dd06:	4293      	cmp	r3, r2
 800dd08:	d114      	bne.n	800dd34 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800dd0a:	2300      	movs	r3, #0
 800dd0c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d10c      	bne.n	800dd34 <pbuf_copy+0x118>
 800dd1a:	683b      	ldr	r3, [r7, #0]
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d009      	beq.n	800dd34 <pbuf_copy+0x118>
 800dd20:	4b20      	ldr	r3, [pc, #128]	; (800dda4 <pbuf_copy+0x188>)
 800dd22:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800dd26:	4924      	ldr	r1, [pc, #144]	; (800ddb8 <pbuf_copy+0x19c>)
 800dd28:	4820      	ldr	r0, [pc, #128]	; (800ddac <pbuf_copy+0x190>)
 800dd2a:	f009 f8b5 	bl	8016e98 <iprintf>
 800dd2e:	f06f 030f 	mvn.w	r3, #15
 800dd32:	e032      	b.n	800dd9a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800dd34:	683b      	ldr	r3, [r7, #0]
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d013      	beq.n	800dd62 <pbuf_copy+0x146>
 800dd3a:	683b      	ldr	r3, [r7, #0]
 800dd3c:	895a      	ldrh	r2, [r3, #10]
 800dd3e:	683b      	ldr	r3, [r7, #0]
 800dd40:	891b      	ldrh	r3, [r3, #8]
 800dd42:	429a      	cmp	r2, r3
 800dd44:	d10d      	bne.n	800dd62 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800dd46:	683b      	ldr	r3, [r7, #0]
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d009      	beq.n	800dd62 <pbuf_copy+0x146>
 800dd4e:	4b15      	ldr	r3, [pc, #84]	; (800dda4 <pbuf_copy+0x188>)
 800dd50:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800dd54:	4919      	ldr	r1, [pc, #100]	; (800ddbc <pbuf_copy+0x1a0>)
 800dd56:	4815      	ldr	r0, [pc, #84]	; (800ddac <pbuf_copy+0x190>)
 800dd58:	f009 f89e 	bl	8016e98 <iprintf>
 800dd5c:	f06f 0305 	mvn.w	r3, #5
 800dd60:	e01b      	b.n	800dd9a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d013      	beq.n	800dd90 <pbuf_copy+0x174>
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	895a      	ldrh	r2, [r3, #10]
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	891b      	ldrh	r3, [r3, #8]
 800dd70:	429a      	cmp	r2, r3
 800dd72:	d10d      	bne.n	800dd90 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d009      	beq.n	800dd90 <pbuf_copy+0x174>
 800dd7c:	4b09      	ldr	r3, [pc, #36]	; (800dda4 <pbuf_copy+0x188>)
 800dd7e:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800dd82:	490e      	ldr	r1, [pc, #56]	; (800ddbc <pbuf_copy+0x1a0>)
 800dd84:	4809      	ldr	r0, [pc, #36]	; (800ddac <pbuf_copy+0x190>)
 800dd86:	f009 f887 	bl	8016e98 <iprintf>
 800dd8a:	f06f 0305 	mvn.w	r3, #5
 800dd8e:	e004      	b.n	800dd9a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800dd90:	683b      	ldr	r3, [r7, #0]
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	f47f af61 	bne.w	800dc5a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800dd98:	2300      	movs	r3, #0
}
 800dd9a:	4618      	mov	r0, r3
 800dd9c:	3718      	adds	r7, #24
 800dd9e:	46bd      	mov	sp, r7
 800dda0:	bd80      	pop	{r7, pc}
 800dda2:	bf00      	nop
 800dda4:	08018678 	.word	0x08018678
 800dda8:	08018920 	.word	0x08018920
 800ddac:	080186d8 	.word	0x080186d8
 800ddb0:	08018950 	.word	0x08018950
 800ddb4:	08018968 	.word	0x08018968
 800ddb8:	08018984 	.word	0x08018984
 800ddbc:	08018994 	.word	0x08018994

0800ddc0 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800ddc0:	b580      	push	{r7, lr}
 800ddc2:	b088      	sub	sp, #32
 800ddc4:	af00      	add	r7, sp, #0
 800ddc6:	60f8      	str	r0, [r7, #12]
 800ddc8:	60b9      	str	r1, [r7, #8]
 800ddca:	4611      	mov	r1, r2
 800ddcc:	461a      	mov	r2, r3
 800ddce:	460b      	mov	r3, r1
 800ddd0:	80fb      	strh	r3, [r7, #6]
 800ddd2:	4613      	mov	r3, r2
 800ddd4:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800ddd6:	2300      	movs	r3, #0
 800ddd8:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800ddda:	2300      	movs	r3, #0
 800dddc:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d108      	bne.n	800ddf6 <pbuf_copy_partial+0x36>
 800dde4:	4b2b      	ldr	r3, [pc, #172]	; (800de94 <pbuf_copy_partial+0xd4>)
 800dde6:	f240 420a 	movw	r2, #1034	; 0x40a
 800ddea:	492b      	ldr	r1, [pc, #172]	; (800de98 <pbuf_copy_partial+0xd8>)
 800ddec:	482b      	ldr	r0, [pc, #172]	; (800de9c <pbuf_copy_partial+0xdc>)
 800ddee:	f009 f853 	bl	8016e98 <iprintf>
 800ddf2:	2300      	movs	r3, #0
 800ddf4:	e04a      	b.n	800de8c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800ddf6:	68bb      	ldr	r3, [r7, #8]
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d108      	bne.n	800de0e <pbuf_copy_partial+0x4e>
 800ddfc:	4b25      	ldr	r3, [pc, #148]	; (800de94 <pbuf_copy_partial+0xd4>)
 800ddfe:	f240 420b 	movw	r2, #1035	; 0x40b
 800de02:	4927      	ldr	r1, [pc, #156]	; (800dea0 <pbuf_copy_partial+0xe0>)
 800de04:	4825      	ldr	r0, [pc, #148]	; (800de9c <pbuf_copy_partial+0xdc>)
 800de06:	f009 f847 	bl	8016e98 <iprintf>
 800de0a:	2300      	movs	r3, #0
 800de0c:	e03e      	b.n	800de8c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	61fb      	str	r3, [r7, #28]
 800de12:	e034      	b.n	800de7e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800de14:	88bb      	ldrh	r3, [r7, #4]
 800de16:	2b00      	cmp	r3, #0
 800de18:	d00a      	beq.n	800de30 <pbuf_copy_partial+0x70>
 800de1a:	69fb      	ldr	r3, [r7, #28]
 800de1c:	895b      	ldrh	r3, [r3, #10]
 800de1e:	88ba      	ldrh	r2, [r7, #4]
 800de20:	429a      	cmp	r2, r3
 800de22:	d305      	bcc.n	800de30 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800de24:	69fb      	ldr	r3, [r7, #28]
 800de26:	895b      	ldrh	r3, [r3, #10]
 800de28:	88ba      	ldrh	r2, [r7, #4]
 800de2a:	1ad3      	subs	r3, r2, r3
 800de2c:	80bb      	strh	r3, [r7, #4]
 800de2e:	e023      	b.n	800de78 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800de30:	69fb      	ldr	r3, [r7, #28]
 800de32:	895a      	ldrh	r2, [r3, #10]
 800de34:	88bb      	ldrh	r3, [r7, #4]
 800de36:	1ad3      	subs	r3, r2, r3
 800de38:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800de3a:	8b3a      	ldrh	r2, [r7, #24]
 800de3c:	88fb      	ldrh	r3, [r7, #6]
 800de3e:	429a      	cmp	r2, r3
 800de40:	d901      	bls.n	800de46 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800de42:	88fb      	ldrh	r3, [r7, #6]
 800de44:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800de46:	8b7b      	ldrh	r3, [r7, #26]
 800de48:	68ba      	ldr	r2, [r7, #8]
 800de4a:	18d0      	adds	r0, r2, r3
 800de4c:	69fb      	ldr	r3, [r7, #28]
 800de4e:	685a      	ldr	r2, [r3, #4]
 800de50:	88bb      	ldrh	r3, [r7, #4]
 800de52:	4413      	add	r3, r2
 800de54:	8b3a      	ldrh	r2, [r7, #24]
 800de56:	4619      	mov	r1, r3
 800de58:	f009 f808 	bl	8016e6c <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800de5c:	8afa      	ldrh	r2, [r7, #22]
 800de5e:	8b3b      	ldrh	r3, [r7, #24]
 800de60:	4413      	add	r3, r2
 800de62:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800de64:	8b7a      	ldrh	r2, [r7, #26]
 800de66:	8b3b      	ldrh	r3, [r7, #24]
 800de68:	4413      	add	r3, r2
 800de6a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800de6c:	88fa      	ldrh	r2, [r7, #6]
 800de6e:	8b3b      	ldrh	r3, [r7, #24]
 800de70:	1ad3      	subs	r3, r2, r3
 800de72:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800de74:	2300      	movs	r3, #0
 800de76:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800de78:	69fb      	ldr	r3, [r7, #28]
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	61fb      	str	r3, [r7, #28]
 800de7e:	88fb      	ldrh	r3, [r7, #6]
 800de80:	2b00      	cmp	r3, #0
 800de82:	d002      	beq.n	800de8a <pbuf_copy_partial+0xca>
 800de84:	69fb      	ldr	r3, [r7, #28]
 800de86:	2b00      	cmp	r3, #0
 800de88:	d1c4      	bne.n	800de14 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800de8a:	8afb      	ldrh	r3, [r7, #22]
}
 800de8c:	4618      	mov	r0, r3
 800de8e:	3720      	adds	r7, #32
 800de90:	46bd      	mov	sp, r7
 800de92:	bd80      	pop	{r7, pc}
 800de94:	08018678 	.word	0x08018678
 800de98:	080189c0 	.word	0x080189c0
 800de9c:	080186d8 	.word	0x080186d8
 800dea0:	080189e0 	.word	0x080189e0

0800dea4 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800dea4:	b580      	push	{r7, lr}
 800dea6:	b084      	sub	sp, #16
 800dea8:	af00      	add	r7, sp, #0
 800deaa:	4603      	mov	r3, r0
 800deac:	603a      	str	r2, [r7, #0]
 800deae:	71fb      	strb	r3, [r7, #7]
 800deb0:	460b      	mov	r3, r1
 800deb2:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800deb4:	683b      	ldr	r3, [r7, #0]
 800deb6:	8919      	ldrh	r1, [r3, #8]
 800deb8:	88ba      	ldrh	r2, [r7, #4]
 800deba:	79fb      	ldrb	r3, [r7, #7]
 800debc:	4618      	mov	r0, r3
 800debe:	f7ff fa95 	bl	800d3ec <pbuf_alloc>
 800dec2:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d101      	bne.n	800dece <pbuf_clone+0x2a>
    return NULL;
 800deca:	2300      	movs	r3, #0
 800decc:	e011      	b.n	800def2 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800dece:	6839      	ldr	r1, [r7, #0]
 800ded0:	68f8      	ldr	r0, [r7, #12]
 800ded2:	f7ff fea3 	bl	800dc1c <pbuf_copy>
 800ded6:	4603      	mov	r3, r0
 800ded8:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800deda:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d006      	beq.n	800def0 <pbuf_clone+0x4c>
 800dee2:	4b06      	ldr	r3, [pc, #24]	; (800defc <pbuf_clone+0x58>)
 800dee4:	f240 5224 	movw	r2, #1316	; 0x524
 800dee8:	4905      	ldr	r1, [pc, #20]	; (800df00 <pbuf_clone+0x5c>)
 800deea:	4806      	ldr	r0, [pc, #24]	; (800df04 <pbuf_clone+0x60>)
 800deec:	f008 ffd4 	bl	8016e98 <iprintf>
  return q;
 800def0:	68fb      	ldr	r3, [r7, #12]
}
 800def2:	4618      	mov	r0, r3
 800def4:	3710      	adds	r7, #16
 800def6:	46bd      	mov	sp, r7
 800def8:	bd80      	pop	{r7, pc}
 800defa:	bf00      	nop
 800defc:	08018678 	.word	0x08018678
 800df00:	08018aec 	.word	0x08018aec
 800df04:	080186d8 	.word	0x080186d8

0800df08 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800df08:	b580      	push	{r7, lr}
 800df0a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800df0c:	f008 ffdc 	bl	8016ec8 <rand>
 800df10:	4603      	mov	r3, r0
 800df12:	b29b      	uxth	r3, r3
 800df14:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800df18:	b29b      	uxth	r3, r3
 800df1a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800df1e:	b29a      	uxth	r2, r3
 800df20:	4b01      	ldr	r3, [pc, #4]	; (800df28 <tcp_init+0x20>)
 800df22:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800df24:	bf00      	nop
 800df26:	bd80      	pop	{r7, pc}
 800df28:	24000028 	.word	0x24000028

0800df2c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800df2c:	b580      	push	{r7, lr}
 800df2e:	b082      	sub	sp, #8
 800df30:	af00      	add	r7, sp, #0
 800df32:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	7d1b      	ldrb	r3, [r3, #20]
 800df38:	2b01      	cmp	r3, #1
 800df3a:	d105      	bne.n	800df48 <tcp_free+0x1c>
 800df3c:	4b06      	ldr	r3, [pc, #24]	; (800df58 <tcp_free+0x2c>)
 800df3e:	22d4      	movs	r2, #212	; 0xd4
 800df40:	4906      	ldr	r1, [pc, #24]	; (800df5c <tcp_free+0x30>)
 800df42:	4807      	ldr	r0, [pc, #28]	; (800df60 <tcp_free+0x34>)
 800df44:	f008 ffa8 	bl	8016e98 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800df48:	6879      	ldr	r1, [r7, #4]
 800df4a:	2001      	movs	r0, #1
 800df4c:	f7fe fe8e 	bl	800cc6c <memp_free>
}
 800df50:	bf00      	nop
 800df52:	3708      	adds	r7, #8
 800df54:	46bd      	mov	sp, r7
 800df56:	bd80      	pop	{r7, pc}
 800df58:	08018b78 	.word	0x08018b78
 800df5c:	08018ba8 	.word	0x08018ba8
 800df60:	08018bbc 	.word	0x08018bbc

0800df64 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800df64:	b580      	push	{r7, lr}
 800df66:	b082      	sub	sp, #8
 800df68:	af00      	add	r7, sp, #0
 800df6a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	7d1b      	ldrb	r3, [r3, #20]
 800df70:	2b01      	cmp	r3, #1
 800df72:	d105      	bne.n	800df80 <tcp_free_listen+0x1c>
 800df74:	4b06      	ldr	r3, [pc, #24]	; (800df90 <tcp_free_listen+0x2c>)
 800df76:	22df      	movs	r2, #223	; 0xdf
 800df78:	4906      	ldr	r1, [pc, #24]	; (800df94 <tcp_free_listen+0x30>)
 800df7a:	4807      	ldr	r0, [pc, #28]	; (800df98 <tcp_free_listen+0x34>)
 800df7c:	f008 ff8c 	bl	8016e98 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800df80:	6879      	ldr	r1, [r7, #4]
 800df82:	2002      	movs	r0, #2
 800df84:	f7fe fe72 	bl	800cc6c <memp_free>
}
 800df88:	bf00      	nop
 800df8a:	3708      	adds	r7, #8
 800df8c:	46bd      	mov	sp, r7
 800df8e:	bd80      	pop	{r7, pc}
 800df90:	08018b78 	.word	0x08018b78
 800df94:	08018be4 	.word	0x08018be4
 800df98:	08018bbc 	.word	0x08018bbc

0800df9c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800df9c:	b580      	push	{r7, lr}
 800df9e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800dfa0:	f001 f85c 	bl	800f05c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800dfa4:	4b07      	ldr	r3, [pc, #28]	; (800dfc4 <tcp_tmr+0x28>)
 800dfa6:	781b      	ldrb	r3, [r3, #0]
 800dfa8:	3301      	adds	r3, #1
 800dfaa:	b2da      	uxtb	r2, r3
 800dfac:	4b05      	ldr	r3, [pc, #20]	; (800dfc4 <tcp_tmr+0x28>)
 800dfae:	701a      	strb	r2, [r3, #0]
 800dfb0:	4b04      	ldr	r3, [pc, #16]	; (800dfc4 <tcp_tmr+0x28>)
 800dfb2:	781b      	ldrb	r3, [r3, #0]
 800dfb4:	f003 0301 	and.w	r3, r3, #1
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d001      	beq.n	800dfc0 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800dfbc:	f000 fd0e 	bl	800e9dc <tcp_slowtmr>
  }
}
 800dfc0:	bf00      	nop
 800dfc2:	bd80      	pop	{r7, pc}
 800dfc4:	240040bd 	.word	0x240040bd

0800dfc8 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800dfc8:	b580      	push	{r7, lr}
 800dfca:	b084      	sub	sp, #16
 800dfcc:	af00      	add	r7, sp, #0
 800dfce:	6078      	str	r0, [r7, #4]
 800dfd0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800dfd2:	683b      	ldr	r3, [r7, #0]
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d105      	bne.n	800dfe4 <tcp_remove_listener+0x1c>
 800dfd8:	4b0d      	ldr	r3, [pc, #52]	; (800e010 <tcp_remove_listener+0x48>)
 800dfda:	22ff      	movs	r2, #255	; 0xff
 800dfdc:	490d      	ldr	r1, [pc, #52]	; (800e014 <tcp_remove_listener+0x4c>)
 800dfde:	480e      	ldr	r0, [pc, #56]	; (800e018 <tcp_remove_listener+0x50>)
 800dfe0:	f008 ff5a 	bl	8016e98 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	60fb      	str	r3, [r7, #12]
 800dfe8:	e00a      	b.n	800e000 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dfee:	683a      	ldr	r2, [r7, #0]
 800dff0:	429a      	cmp	r2, r3
 800dff2:	d102      	bne.n	800dffa <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	2200      	movs	r2, #0
 800dff8:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	68db      	ldr	r3, [r3, #12]
 800dffe:	60fb      	str	r3, [r7, #12]
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	2b00      	cmp	r3, #0
 800e004:	d1f1      	bne.n	800dfea <tcp_remove_listener+0x22>
    }
  }
}
 800e006:	bf00      	nop
 800e008:	bf00      	nop
 800e00a:	3710      	adds	r7, #16
 800e00c:	46bd      	mov	sp, r7
 800e00e:	bd80      	pop	{r7, pc}
 800e010:	08018b78 	.word	0x08018b78
 800e014:	08018c00 	.word	0x08018c00
 800e018:	08018bbc 	.word	0x08018bbc

0800e01c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800e01c:	b580      	push	{r7, lr}
 800e01e:	b084      	sub	sp, #16
 800e020:	af00      	add	r7, sp, #0
 800e022:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	2b00      	cmp	r3, #0
 800e028:	d106      	bne.n	800e038 <tcp_listen_closed+0x1c>
 800e02a:	4b14      	ldr	r3, [pc, #80]	; (800e07c <tcp_listen_closed+0x60>)
 800e02c:	f240 1211 	movw	r2, #273	; 0x111
 800e030:	4913      	ldr	r1, [pc, #76]	; (800e080 <tcp_listen_closed+0x64>)
 800e032:	4814      	ldr	r0, [pc, #80]	; (800e084 <tcp_listen_closed+0x68>)
 800e034:	f008 ff30 	bl	8016e98 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	7d1b      	ldrb	r3, [r3, #20]
 800e03c:	2b01      	cmp	r3, #1
 800e03e:	d006      	beq.n	800e04e <tcp_listen_closed+0x32>
 800e040:	4b0e      	ldr	r3, [pc, #56]	; (800e07c <tcp_listen_closed+0x60>)
 800e042:	f44f 7289 	mov.w	r2, #274	; 0x112
 800e046:	4910      	ldr	r1, [pc, #64]	; (800e088 <tcp_listen_closed+0x6c>)
 800e048:	480e      	ldr	r0, [pc, #56]	; (800e084 <tcp_listen_closed+0x68>)
 800e04a:	f008 ff25 	bl	8016e98 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800e04e:	2301      	movs	r3, #1
 800e050:	60fb      	str	r3, [r7, #12]
 800e052:	e00b      	b.n	800e06c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800e054:	4a0d      	ldr	r2, [pc, #52]	; (800e08c <tcp_listen_closed+0x70>)
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	6879      	ldr	r1, [r7, #4]
 800e060:	4618      	mov	r0, r3
 800e062:	f7ff ffb1 	bl	800dfc8 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	3301      	adds	r3, #1
 800e06a:	60fb      	str	r3, [r7, #12]
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	2b03      	cmp	r3, #3
 800e070:	d9f0      	bls.n	800e054 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800e072:	bf00      	nop
 800e074:	bf00      	nop
 800e076:	3710      	adds	r7, #16
 800e078:	46bd      	mov	sp, r7
 800e07a:	bd80      	pop	{r7, pc}
 800e07c:	08018b78 	.word	0x08018b78
 800e080:	08018c28 	.word	0x08018c28
 800e084:	08018bbc 	.word	0x08018bbc
 800e088:	08018c34 	.word	0x08018c34
 800e08c:	0801abb8 	.word	0x0801abb8

0800e090 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800e090:	b5b0      	push	{r4, r5, r7, lr}
 800e092:	b088      	sub	sp, #32
 800e094:	af04      	add	r7, sp, #16
 800e096:	6078      	str	r0, [r7, #4]
 800e098:	460b      	mov	r3, r1
 800e09a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d106      	bne.n	800e0b0 <tcp_close_shutdown+0x20>
 800e0a2:	4b63      	ldr	r3, [pc, #396]	; (800e230 <tcp_close_shutdown+0x1a0>)
 800e0a4:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800e0a8:	4962      	ldr	r1, [pc, #392]	; (800e234 <tcp_close_shutdown+0x1a4>)
 800e0aa:	4863      	ldr	r0, [pc, #396]	; (800e238 <tcp_close_shutdown+0x1a8>)
 800e0ac:	f008 fef4 	bl	8016e98 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800e0b0:	78fb      	ldrb	r3, [r7, #3]
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d066      	beq.n	800e184 <tcp_close_shutdown+0xf4>
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	7d1b      	ldrb	r3, [r3, #20]
 800e0ba:	2b04      	cmp	r3, #4
 800e0bc:	d003      	beq.n	800e0c6 <tcp_close_shutdown+0x36>
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	7d1b      	ldrb	r3, [r3, #20]
 800e0c2:	2b07      	cmp	r3, #7
 800e0c4:	d15e      	bne.n	800e184 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d104      	bne.n	800e0d8 <tcp_close_shutdown+0x48>
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e0d2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e0d6:	d055      	beq.n	800e184 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	8b5b      	ldrh	r3, [r3, #26]
 800e0dc:	f003 0310 	and.w	r3, r3, #16
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d106      	bne.n	800e0f2 <tcp_close_shutdown+0x62>
 800e0e4:	4b52      	ldr	r3, [pc, #328]	; (800e230 <tcp_close_shutdown+0x1a0>)
 800e0e6:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800e0ea:	4954      	ldr	r1, [pc, #336]	; (800e23c <tcp_close_shutdown+0x1ac>)
 800e0ec:	4852      	ldr	r0, [pc, #328]	; (800e238 <tcp_close_shutdown+0x1a8>)
 800e0ee:	f008 fed3 	bl	8016e98 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800e0fa:	687d      	ldr	r5, [r7, #4]
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	3304      	adds	r3, #4
 800e100:	687a      	ldr	r2, [r7, #4]
 800e102:	8ad2      	ldrh	r2, [r2, #22]
 800e104:	6879      	ldr	r1, [r7, #4]
 800e106:	8b09      	ldrh	r1, [r1, #24]
 800e108:	9102      	str	r1, [sp, #8]
 800e10a:	9201      	str	r2, [sp, #4]
 800e10c:	9300      	str	r3, [sp, #0]
 800e10e:	462b      	mov	r3, r5
 800e110:	4622      	mov	r2, r4
 800e112:	4601      	mov	r1, r0
 800e114:	6878      	ldr	r0, [r7, #4]
 800e116:	f005 fd85 	bl	8013c24 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800e11a:	6878      	ldr	r0, [r7, #4]
 800e11c:	f001 fb66 	bl	800f7ec <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800e120:	4b47      	ldr	r3, [pc, #284]	; (800e240 <tcp_close_shutdown+0x1b0>)
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	687a      	ldr	r2, [r7, #4]
 800e126:	429a      	cmp	r2, r3
 800e128:	d105      	bne.n	800e136 <tcp_close_shutdown+0xa6>
 800e12a:	4b45      	ldr	r3, [pc, #276]	; (800e240 <tcp_close_shutdown+0x1b0>)
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	68db      	ldr	r3, [r3, #12]
 800e130:	4a43      	ldr	r2, [pc, #268]	; (800e240 <tcp_close_shutdown+0x1b0>)
 800e132:	6013      	str	r3, [r2, #0]
 800e134:	e013      	b.n	800e15e <tcp_close_shutdown+0xce>
 800e136:	4b42      	ldr	r3, [pc, #264]	; (800e240 <tcp_close_shutdown+0x1b0>)
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	60fb      	str	r3, [r7, #12]
 800e13c:	e00c      	b.n	800e158 <tcp_close_shutdown+0xc8>
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	68db      	ldr	r3, [r3, #12]
 800e142:	687a      	ldr	r2, [r7, #4]
 800e144:	429a      	cmp	r2, r3
 800e146:	d104      	bne.n	800e152 <tcp_close_shutdown+0xc2>
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	68da      	ldr	r2, [r3, #12]
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	60da      	str	r2, [r3, #12]
 800e150:	e005      	b.n	800e15e <tcp_close_shutdown+0xce>
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	68db      	ldr	r3, [r3, #12]
 800e156:	60fb      	str	r3, [r7, #12]
 800e158:	68fb      	ldr	r3, [r7, #12]
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d1ef      	bne.n	800e13e <tcp_close_shutdown+0xae>
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	2200      	movs	r2, #0
 800e162:	60da      	str	r2, [r3, #12]
 800e164:	4b37      	ldr	r3, [pc, #220]	; (800e244 <tcp_close_shutdown+0x1b4>)
 800e166:	2201      	movs	r2, #1
 800e168:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800e16a:	4b37      	ldr	r3, [pc, #220]	; (800e248 <tcp_close_shutdown+0x1b8>)
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	687a      	ldr	r2, [r7, #4]
 800e170:	429a      	cmp	r2, r3
 800e172:	d102      	bne.n	800e17a <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800e174:	f003 fffa 	bl	801216c <tcp_trigger_input_pcb_close>
 800e178:	e002      	b.n	800e180 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800e17a:	6878      	ldr	r0, [r7, #4]
 800e17c:	f7ff fed6 	bl	800df2c <tcp_free>
      }
      return ERR_OK;
 800e180:	2300      	movs	r3, #0
 800e182:	e050      	b.n	800e226 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	7d1b      	ldrb	r3, [r3, #20]
 800e188:	2b02      	cmp	r3, #2
 800e18a:	d03b      	beq.n	800e204 <tcp_close_shutdown+0x174>
 800e18c:	2b02      	cmp	r3, #2
 800e18e:	dc44      	bgt.n	800e21a <tcp_close_shutdown+0x18a>
 800e190:	2b00      	cmp	r3, #0
 800e192:	d002      	beq.n	800e19a <tcp_close_shutdown+0x10a>
 800e194:	2b01      	cmp	r3, #1
 800e196:	d02a      	beq.n	800e1ee <tcp_close_shutdown+0x15e>
 800e198:	e03f      	b.n	800e21a <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	8adb      	ldrh	r3, [r3, #22]
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d021      	beq.n	800e1e6 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800e1a2:	4b2a      	ldr	r3, [pc, #168]	; (800e24c <tcp_close_shutdown+0x1bc>)
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	687a      	ldr	r2, [r7, #4]
 800e1a8:	429a      	cmp	r2, r3
 800e1aa:	d105      	bne.n	800e1b8 <tcp_close_shutdown+0x128>
 800e1ac:	4b27      	ldr	r3, [pc, #156]	; (800e24c <tcp_close_shutdown+0x1bc>)
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	68db      	ldr	r3, [r3, #12]
 800e1b2:	4a26      	ldr	r2, [pc, #152]	; (800e24c <tcp_close_shutdown+0x1bc>)
 800e1b4:	6013      	str	r3, [r2, #0]
 800e1b6:	e013      	b.n	800e1e0 <tcp_close_shutdown+0x150>
 800e1b8:	4b24      	ldr	r3, [pc, #144]	; (800e24c <tcp_close_shutdown+0x1bc>)
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	60bb      	str	r3, [r7, #8]
 800e1be:	e00c      	b.n	800e1da <tcp_close_shutdown+0x14a>
 800e1c0:	68bb      	ldr	r3, [r7, #8]
 800e1c2:	68db      	ldr	r3, [r3, #12]
 800e1c4:	687a      	ldr	r2, [r7, #4]
 800e1c6:	429a      	cmp	r2, r3
 800e1c8:	d104      	bne.n	800e1d4 <tcp_close_shutdown+0x144>
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	68da      	ldr	r2, [r3, #12]
 800e1ce:	68bb      	ldr	r3, [r7, #8]
 800e1d0:	60da      	str	r2, [r3, #12]
 800e1d2:	e005      	b.n	800e1e0 <tcp_close_shutdown+0x150>
 800e1d4:	68bb      	ldr	r3, [r7, #8]
 800e1d6:	68db      	ldr	r3, [r3, #12]
 800e1d8:	60bb      	str	r3, [r7, #8]
 800e1da:	68bb      	ldr	r3, [r7, #8]
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d1ef      	bne.n	800e1c0 <tcp_close_shutdown+0x130>
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	2200      	movs	r2, #0
 800e1e4:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800e1e6:	6878      	ldr	r0, [r7, #4]
 800e1e8:	f7ff fea0 	bl	800df2c <tcp_free>
      break;
 800e1ec:	e01a      	b.n	800e224 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800e1ee:	6878      	ldr	r0, [r7, #4]
 800e1f0:	f7ff ff14 	bl	800e01c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800e1f4:	6879      	ldr	r1, [r7, #4]
 800e1f6:	4816      	ldr	r0, [pc, #88]	; (800e250 <tcp_close_shutdown+0x1c0>)
 800e1f8:	f001 fb48 	bl	800f88c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800e1fc:	6878      	ldr	r0, [r7, #4]
 800e1fe:	f7ff feb1 	bl	800df64 <tcp_free_listen>
      break;
 800e202:	e00f      	b.n	800e224 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800e204:	6879      	ldr	r1, [r7, #4]
 800e206:	480e      	ldr	r0, [pc, #56]	; (800e240 <tcp_close_shutdown+0x1b0>)
 800e208:	f001 fb40 	bl	800f88c <tcp_pcb_remove>
 800e20c:	4b0d      	ldr	r3, [pc, #52]	; (800e244 <tcp_close_shutdown+0x1b4>)
 800e20e:	2201      	movs	r2, #1
 800e210:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800e212:	6878      	ldr	r0, [r7, #4]
 800e214:	f7ff fe8a 	bl	800df2c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800e218:	e004      	b.n	800e224 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800e21a:	6878      	ldr	r0, [r7, #4]
 800e21c:	f000 f81a 	bl	800e254 <tcp_close_shutdown_fin>
 800e220:	4603      	mov	r3, r0
 800e222:	e000      	b.n	800e226 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800e224:	2300      	movs	r3, #0
}
 800e226:	4618      	mov	r0, r3
 800e228:	3710      	adds	r7, #16
 800e22a:	46bd      	mov	sp, r7
 800e22c:	bdb0      	pop	{r4, r5, r7, pc}
 800e22e:	bf00      	nop
 800e230:	08018b78 	.word	0x08018b78
 800e234:	08018c4c 	.word	0x08018c4c
 800e238:	08018bbc 	.word	0x08018bbc
 800e23c:	08018c6c 	.word	0x08018c6c
 800e240:	240079a8 	.word	0x240079a8
 800e244:	240079a4 	.word	0x240079a4
 800e248:	240079bc 	.word	0x240079bc
 800e24c:	240079b4 	.word	0x240079b4
 800e250:	240079b0 	.word	0x240079b0

0800e254 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800e254:	b580      	push	{r7, lr}
 800e256:	b084      	sub	sp, #16
 800e258:	af00      	add	r7, sp, #0
 800e25a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d106      	bne.n	800e270 <tcp_close_shutdown_fin+0x1c>
 800e262:	4b2e      	ldr	r3, [pc, #184]	; (800e31c <tcp_close_shutdown_fin+0xc8>)
 800e264:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800e268:	492d      	ldr	r1, [pc, #180]	; (800e320 <tcp_close_shutdown_fin+0xcc>)
 800e26a:	482e      	ldr	r0, [pc, #184]	; (800e324 <tcp_close_shutdown_fin+0xd0>)
 800e26c:	f008 fe14 	bl	8016e98 <iprintf>

  switch (pcb->state) {
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	7d1b      	ldrb	r3, [r3, #20]
 800e274:	2b07      	cmp	r3, #7
 800e276:	d020      	beq.n	800e2ba <tcp_close_shutdown_fin+0x66>
 800e278:	2b07      	cmp	r3, #7
 800e27a:	dc2b      	bgt.n	800e2d4 <tcp_close_shutdown_fin+0x80>
 800e27c:	2b03      	cmp	r3, #3
 800e27e:	d002      	beq.n	800e286 <tcp_close_shutdown_fin+0x32>
 800e280:	2b04      	cmp	r3, #4
 800e282:	d00d      	beq.n	800e2a0 <tcp_close_shutdown_fin+0x4c>
 800e284:	e026      	b.n	800e2d4 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800e286:	6878      	ldr	r0, [r7, #4]
 800e288:	f004 fdda 	bl	8012e40 <tcp_send_fin>
 800e28c:	4603      	mov	r3, r0
 800e28e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e290:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e294:	2b00      	cmp	r3, #0
 800e296:	d11f      	bne.n	800e2d8 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	2205      	movs	r2, #5
 800e29c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e29e:	e01b      	b.n	800e2d8 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800e2a0:	6878      	ldr	r0, [r7, #4]
 800e2a2:	f004 fdcd 	bl	8012e40 <tcp_send_fin>
 800e2a6:	4603      	mov	r3, r0
 800e2a8:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e2aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d114      	bne.n	800e2dc <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	2205      	movs	r2, #5
 800e2b6:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e2b8:	e010      	b.n	800e2dc <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800e2ba:	6878      	ldr	r0, [r7, #4]
 800e2bc:	f004 fdc0 	bl	8012e40 <tcp_send_fin>
 800e2c0:	4603      	mov	r3, r0
 800e2c2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e2c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d109      	bne.n	800e2e0 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	2209      	movs	r2, #9
 800e2d0:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e2d2:	e005      	b.n	800e2e0 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800e2d4:	2300      	movs	r3, #0
 800e2d6:	e01c      	b.n	800e312 <tcp_close_shutdown_fin+0xbe>
      break;
 800e2d8:	bf00      	nop
 800e2da:	e002      	b.n	800e2e2 <tcp_close_shutdown_fin+0x8e>
      break;
 800e2dc:	bf00      	nop
 800e2de:	e000      	b.n	800e2e2 <tcp_close_shutdown_fin+0x8e>
      break;
 800e2e0:	bf00      	nop
  }

  if (err == ERR_OK) {
 800e2e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d103      	bne.n	800e2f2 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800e2ea:	6878      	ldr	r0, [r7, #4]
 800e2ec:	f004 fee6 	bl	80130bc <tcp_output>
 800e2f0:	e00d      	b.n	800e30e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800e2f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e2f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2fa:	d108      	bne.n	800e30e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	8b5b      	ldrh	r3, [r3, #26]
 800e300:	f043 0308 	orr.w	r3, r3, #8
 800e304:	b29a      	uxth	r2, r3
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800e30a:	2300      	movs	r3, #0
 800e30c:	e001      	b.n	800e312 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800e30e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e312:	4618      	mov	r0, r3
 800e314:	3710      	adds	r7, #16
 800e316:	46bd      	mov	sp, r7
 800e318:	bd80      	pop	{r7, pc}
 800e31a:	bf00      	nop
 800e31c:	08018b78 	.word	0x08018b78
 800e320:	08018c28 	.word	0x08018c28
 800e324:	08018bbc 	.word	0x08018bbc

0800e328 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800e328:	b580      	push	{r7, lr}
 800e32a:	b082      	sub	sp, #8
 800e32c:	af00      	add	r7, sp, #0
 800e32e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	2b00      	cmp	r3, #0
 800e334:	d109      	bne.n	800e34a <tcp_close+0x22>
 800e336:	4b0f      	ldr	r3, [pc, #60]	; (800e374 <tcp_close+0x4c>)
 800e338:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800e33c:	490e      	ldr	r1, [pc, #56]	; (800e378 <tcp_close+0x50>)
 800e33e:	480f      	ldr	r0, [pc, #60]	; (800e37c <tcp_close+0x54>)
 800e340:	f008 fdaa 	bl	8016e98 <iprintf>
 800e344:	f06f 030f 	mvn.w	r3, #15
 800e348:	e00f      	b.n	800e36a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	7d1b      	ldrb	r3, [r3, #20]
 800e34e:	2b01      	cmp	r3, #1
 800e350:	d006      	beq.n	800e360 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	8b5b      	ldrh	r3, [r3, #26]
 800e356:	f043 0310 	orr.w	r3, r3, #16
 800e35a:	b29a      	uxth	r2, r3
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800e360:	2101      	movs	r1, #1
 800e362:	6878      	ldr	r0, [r7, #4]
 800e364:	f7ff fe94 	bl	800e090 <tcp_close_shutdown>
 800e368:	4603      	mov	r3, r0
}
 800e36a:	4618      	mov	r0, r3
 800e36c:	3708      	adds	r7, #8
 800e36e:	46bd      	mov	sp, r7
 800e370:	bd80      	pop	{r7, pc}
 800e372:	bf00      	nop
 800e374:	08018b78 	.word	0x08018b78
 800e378:	08018c88 	.word	0x08018c88
 800e37c:	08018bbc 	.word	0x08018bbc

0800e380 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800e380:	b580      	push	{r7, lr}
 800e382:	b08e      	sub	sp, #56	; 0x38
 800e384:	af04      	add	r7, sp, #16
 800e386:	6078      	str	r0, [r7, #4]
 800e388:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	d107      	bne.n	800e3a0 <tcp_abandon+0x20>
 800e390:	4b52      	ldr	r3, [pc, #328]	; (800e4dc <tcp_abandon+0x15c>)
 800e392:	f240 223d 	movw	r2, #573	; 0x23d
 800e396:	4952      	ldr	r1, [pc, #328]	; (800e4e0 <tcp_abandon+0x160>)
 800e398:	4852      	ldr	r0, [pc, #328]	; (800e4e4 <tcp_abandon+0x164>)
 800e39a:	f008 fd7d 	bl	8016e98 <iprintf>
 800e39e:	e099      	b.n	800e4d4 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	7d1b      	ldrb	r3, [r3, #20]
 800e3a4:	2b01      	cmp	r3, #1
 800e3a6:	d106      	bne.n	800e3b6 <tcp_abandon+0x36>
 800e3a8:	4b4c      	ldr	r3, [pc, #304]	; (800e4dc <tcp_abandon+0x15c>)
 800e3aa:	f44f 7210 	mov.w	r2, #576	; 0x240
 800e3ae:	494e      	ldr	r1, [pc, #312]	; (800e4e8 <tcp_abandon+0x168>)
 800e3b0:	484c      	ldr	r0, [pc, #304]	; (800e4e4 <tcp_abandon+0x164>)
 800e3b2:	f008 fd71 	bl	8016e98 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	7d1b      	ldrb	r3, [r3, #20]
 800e3ba:	2b0a      	cmp	r3, #10
 800e3bc:	d107      	bne.n	800e3ce <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800e3be:	6879      	ldr	r1, [r7, #4]
 800e3c0:	484a      	ldr	r0, [pc, #296]	; (800e4ec <tcp_abandon+0x16c>)
 800e3c2:	f001 fa63 	bl	800f88c <tcp_pcb_remove>
    tcp_free(pcb);
 800e3c6:	6878      	ldr	r0, [r7, #4]
 800e3c8:	f7ff fdb0 	bl	800df2c <tcp_free>
 800e3cc:	e082      	b.n	800e4d4 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800e3ce:	2300      	movs	r3, #0
 800e3d0:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800e3d2:	2300      	movs	r3, #0
 800e3d4:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e3da:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3e0:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e3e8:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	691b      	ldr	r3, [r3, #16]
 800e3ee:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	7d1b      	ldrb	r3, [r3, #20]
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d126      	bne.n	800e446 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	8adb      	ldrh	r3, [r3, #22]
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d02e      	beq.n	800e45e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800e400:	4b3b      	ldr	r3, [pc, #236]	; (800e4f0 <tcp_abandon+0x170>)
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	687a      	ldr	r2, [r7, #4]
 800e406:	429a      	cmp	r2, r3
 800e408:	d105      	bne.n	800e416 <tcp_abandon+0x96>
 800e40a:	4b39      	ldr	r3, [pc, #228]	; (800e4f0 <tcp_abandon+0x170>)
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	68db      	ldr	r3, [r3, #12]
 800e410:	4a37      	ldr	r2, [pc, #220]	; (800e4f0 <tcp_abandon+0x170>)
 800e412:	6013      	str	r3, [r2, #0]
 800e414:	e013      	b.n	800e43e <tcp_abandon+0xbe>
 800e416:	4b36      	ldr	r3, [pc, #216]	; (800e4f0 <tcp_abandon+0x170>)
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	61fb      	str	r3, [r7, #28]
 800e41c:	e00c      	b.n	800e438 <tcp_abandon+0xb8>
 800e41e:	69fb      	ldr	r3, [r7, #28]
 800e420:	68db      	ldr	r3, [r3, #12]
 800e422:	687a      	ldr	r2, [r7, #4]
 800e424:	429a      	cmp	r2, r3
 800e426:	d104      	bne.n	800e432 <tcp_abandon+0xb2>
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	68da      	ldr	r2, [r3, #12]
 800e42c:	69fb      	ldr	r3, [r7, #28]
 800e42e:	60da      	str	r2, [r3, #12]
 800e430:	e005      	b.n	800e43e <tcp_abandon+0xbe>
 800e432:	69fb      	ldr	r3, [r7, #28]
 800e434:	68db      	ldr	r3, [r3, #12]
 800e436:	61fb      	str	r3, [r7, #28]
 800e438:	69fb      	ldr	r3, [r7, #28]
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d1ef      	bne.n	800e41e <tcp_abandon+0x9e>
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	2200      	movs	r2, #0
 800e442:	60da      	str	r2, [r3, #12]
 800e444:	e00b      	b.n	800e45e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800e446:	683b      	ldr	r3, [r7, #0]
 800e448:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	8adb      	ldrh	r3, [r3, #22]
 800e44e:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800e450:	6879      	ldr	r1, [r7, #4]
 800e452:	4828      	ldr	r0, [pc, #160]	; (800e4f4 <tcp_abandon+0x174>)
 800e454:	f001 fa1a 	bl	800f88c <tcp_pcb_remove>
 800e458:	4b27      	ldr	r3, [pc, #156]	; (800e4f8 <tcp_abandon+0x178>)
 800e45a:	2201      	movs	r2, #1
 800e45c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e462:	2b00      	cmp	r3, #0
 800e464:	d004      	beq.n	800e470 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e46a:	4618      	mov	r0, r3
 800e46c:	f000 fed6 	bl	800f21c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e474:	2b00      	cmp	r3, #0
 800e476:	d004      	beq.n	800e482 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e47c:	4618      	mov	r0, r3
 800e47e:	f000 fecd 	bl	800f21c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e486:	2b00      	cmp	r3, #0
 800e488:	d004      	beq.n	800e494 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e48e:	4618      	mov	r0, r3
 800e490:	f000 fec4 	bl	800f21c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800e494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e496:	2b00      	cmp	r3, #0
 800e498:	d00e      	beq.n	800e4b8 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800e49a:	6879      	ldr	r1, [r7, #4]
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	3304      	adds	r3, #4
 800e4a0:	687a      	ldr	r2, [r7, #4]
 800e4a2:	8b12      	ldrh	r2, [r2, #24]
 800e4a4:	9202      	str	r2, [sp, #8]
 800e4a6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800e4a8:	9201      	str	r2, [sp, #4]
 800e4aa:	9300      	str	r3, [sp, #0]
 800e4ac:	460b      	mov	r3, r1
 800e4ae:	697a      	ldr	r2, [r7, #20]
 800e4b0:	69b9      	ldr	r1, [r7, #24]
 800e4b2:	6878      	ldr	r0, [r7, #4]
 800e4b4:	f005 fbb6 	bl	8013c24 <tcp_rst>
    }
    last_state = pcb->state;
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	7d1b      	ldrb	r3, [r3, #20]
 800e4bc:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800e4be:	6878      	ldr	r0, [r7, #4]
 800e4c0:	f7ff fd34 	bl	800df2c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800e4c4:	693b      	ldr	r3, [r7, #16]
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d004      	beq.n	800e4d4 <tcp_abandon+0x154>
 800e4ca:	693b      	ldr	r3, [r7, #16]
 800e4cc:	f06f 010c 	mvn.w	r1, #12
 800e4d0:	68f8      	ldr	r0, [r7, #12]
 800e4d2:	4798      	blx	r3
  }
}
 800e4d4:	3728      	adds	r7, #40	; 0x28
 800e4d6:	46bd      	mov	sp, r7
 800e4d8:	bd80      	pop	{r7, pc}
 800e4da:	bf00      	nop
 800e4dc:	08018b78 	.word	0x08018b78
 800e4e0:	08018cbc 	.word	0x08018cbc
 800e4e4:	08018bbc 	.word	0x08018bbc
 800e4e8:	08018cd8 	.word	0x08018cd8
 800e4ec:	240079b8 	.word	0x240079b8
 800e4f0:	240079b4 	.word	0x240079b4
 800e4f4:	240079a8 	.word	0x240079a8
 800e4f8:	240079a4 	.word	0x240079a4

0800e4fc <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800e4fc:	b580      	push	{r7, lr}
 800e4fe:	b082      	sub	sp, #8
 800e500:	af00      	add	r7, sp, #0
 800e502:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800e504:	2101      	movs	r1, #1
 800e506:	6878      	ldr	r0, [r7, #4]
 800e508:	f7ff ff3a 	bl	800e380 <tcp_abandon>
}
 800e50c:	bf00      	nop
 800e50e:	3708      	adds	r7, #8
 800e510:	46bd      	mov	sp, r7
 800e512:	bd80      	pop	{r7, pc}

0800e514 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800e514:	b580      	push	{r7, lr}
 800e516:	b088      	sub	sp, #32
 800e518:	af00      	add	r7, sp, #0
 800e51a:	60f8      	str	r0, [r7, #12]
 800e51c:	60b9      	str	r1, [r7, #8]
 800e51e:	4613      	mov	r3, r2
 800e520:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800e522:	2304      	movs	r3, #4
 800e524:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800e526:	68bb      	ldr	r3, [r7, #8]
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d101      	bne.n	800e530 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800e52c:	4b3e      	ldr	r3, [pc, #248]	; (800e628 <tcp_bind+0x114>)
 800e52e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800e530:	68fb      	ldr	r3, [r7, #12]
 800e532:	2b00      	cmp	r3, #0
 800e534:	d109      	bne.n	800e54a <tcp_bind+0x36>
 800e536:	4b3d      	ldr	r3, [pc, #244]	; (800e62c <tcp_bind+0x118>)
 800e538:	f240 22a9 	movw	r2, #681	; 0x2a9
 800e53c:	493c      	ldr	r1, [pc, #240]	; (800e630 <tcp_bind+0x11c>)
 800e53e:	483d      	ldr	r0, [pc, #244]	; (800e634 <tcp_bind+0x120>)
 800e540:	f008 fcaa 	bl	8016e98 <iprintf>
 800e544:	f06f 030f 	mvn.w	r3, #15
 800e548:	e06a      	b.n	800e620 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800e54a:	68fb      	ldr	r3, [r7, #12]
 800e54c:	7d1b      	ldrb	r3, [r3, #20]
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d009      	beq.n	800e566 <tcp_bind+0x52>
 800e552:	4b36      	ldr	r3, [pc, #216]	; (800e62c <tcp_bind+0x118>)
 800e554:	f240 22ab 	movw	r2, #683	; 0x2ab
 800e558:	4937      	ldr	r1, [pc, #220]	; (800e638 <tcp_bind+0x124>)
 800e55a:	4836      	ldr	r0, [pc, #216]	; (800e634 <tcp_bind+0x120>)
 800e55c:	f008 fc9c 	bl	8016e98 <iprintf>
 800e560:	f06f 0305 	mvn.w	r3, #5
 800e564:	e05c      	b.n	800e620 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800e566:	88fb      	ldrh	r3, [r7, #6]
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d109      	bne.n	800e580 <tcp_bind+0x6c>
    port = tcp_new_port();
 800e56c:	f000 f9f0 	bl	800e950 <tcp_new_port>
 800e570:	4603      	mov	r3, r0
 800e572:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800e574:	88fb      	ldrh	r3, [r7, #6]
 800e576:	2b00      	cmp	r3, #0
 800e578:	d135      	bne.n	800e5e6 <tcp_bind+0xd2>
      return ERR_BUF;
 800e57a:	f06f 0301 	mvn.w	r3, #1
 800e57e:	e04f      	b.n	800e620 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800e580:	2300      	movs	r3, #0
 800e582:	61fb      	str	r3, [r7, #28]
 800e584:	e02b      	b.n	800e5de <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800e586:	4a2d      	ldr	r2, [pc, #180]	; (800e63c <tcp_bind+0x128>)
 800e588:	69fb      	ldr	r3, [r7, #28]
 800e58a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	61bb      	str	r3, [r7, #24]
 800e592:	e01e      	b.n	800e5d2 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800e594:	69bb      	ldr	r3, [r7, #24]
 800e596:	8adb      	ldrh	r3, [r3, #22]
 800e598:	88fa      	ldrh	r2, [r7, #6]
 800e59a:	429a      	cmp	r2, r3
 800e59c:	d116      	bne.n	800e5cc <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800e59e:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d010      	beq.n	800e5c6 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800e5a4:	69bb      	ldr	r3, [r7, #24]
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d00c      	beq.n	800e5c6 <tcp_bind+0xb2>
 800e5ac:	68bb      	ldr	r3, [r7, #8]
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d009      	beq.n	800e5c6 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800e5b2:	68bb      	ldr	r3, [r7, #8]
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d005      	beq.n	800e5c6 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800e5ba:	69bb      	ldr	r3, [r7, #24]
 800e5bc:	681a      	ldr	r2, [r3, #0]
 800e5be:	68bb      	ldr	r3, [r7, #8]
 800e5c0:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800e5c2:	429a      	cmp	r2, r3
 800e5c4:	d102      	bne.n	800e5cc <tcp_bind+0xb8>
              return ERR_USE;
 800e5c6:	f06f 0307 	mvn.w	r3, #7
 800e5ca:	e029      	b.n	800e620 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800e5cc:	69bb      	ldr	r3, [r7, #24]
 800e5ce:	68db      	ldr	r3, [r3, #12]
 800e5d0:	61bb      	str	r3, [r7, #24]
 800e5d2:	69bb      	ldr	r3, [r7, #24]
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d1dd      	bne.n	800e594 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800e5d8:	69fb      	ldr	r3, [r7, #28]
 800e5da:	3301      	adds	r3, #1
 800e5dc:	61fb      	str	r3, [r7, #28]
 800e5de:	69fa      	ldr	r2, [r7, #28]
 800e5e0:	697b      	ldr	r3, [r7, #20]
 800e5e2:	429a      	cmp	r2, r3
 800e5e4:	dbcf      	blt.n	800e586 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800e5e6:	68bb      	ldr	r3, [r7, #8]
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d00c      	beq.n	800e606 <tcp_bind+0xf2>
 800e5ec:	68bb      	ldr	r3, [r7, #8]
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d008      	beq.n	800e606 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800e5f4:	68bb      	ldr	r3, [r7, #8]
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d002      	beq.n	800e600 <tcp_bind+0xec>
 800e5fa:	68bb      	ldr	r3, [r7, #8]
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	e000      	b.n	800e602 <tcp_bind+0xee>
 800e600:	2300      	movs	r3, #0
 800e602:	68fa      	ldr	r2, [r7, #12]
 800e604:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	88fa      	ldrh	r2, [r7, #6]
 800e60a:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800e60c:	4b0c      	ldr	r3, [pc, #48]	; (800e640 <tcp_bind+0x12c>)
 800e60e:	681a      	ldr	r2, [r3, #0]
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	60da      	str	r2, [r3, #12]
 800e614:	4a0a      	ldr	r2, [pc, #40]	; (800e640 <tcp_bind+0x12c>)
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	6013      	str	r3, [r2, #0]
 800e61a:	f005 fcc5 	bl	8013fa8 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800e61e:	2300      	movs	r3, #0
}
 800e620:	4618      	mov	r0, r3
 800e622:	3720      	adds	r7, #32
 800e624:	46bd      	mov	sp, r7
 800e626:	bd80      	pop	{r7, pc}
 800e628:	0801abe0 	.word	0x0801abe0
 800e62c:	08018b78 	.word	0x08018b78
 800e630:	08018d0c 	.word	0x08018d0c
 800e634:	08018bbc 	.word	0x08018bbc
 800e638:	08018d24 	.word	0x08018d24
 800e63c:	0801abb8 	.word	0x0801abb8
 800e640:	240079b4 	.word	0x240079b4

0800e644 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800e644:	b580      	push	{r7, lr}
 800e646:	b084      	sub	sp, #16
 800e648:	af00      	add	r7, sp, #0
 800e64a:	60f8      	str	r0, [r7, #12]
 800e64c:	60b9      	str	r1, [r7, #8]
 800e64e:	4613      	mov	r3, r2
 800e650:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800e652:	68bb      	ldr	r3, [r7, #8]
 800e654:	2b00      	cmp	r3, #0
 800e656:	d106      	bne.n	800e666 <tcp_accept_null+0x22>
 800e658:	4b07      	ldr	r3, [pc, #28]	; (800e678 <tcp_accept_null+0x34>)
 800e65a:	f240 320f 	movw	r2, #783	; 0x30f
 800e65e:	4907      	ldr	r1, [pc, #28]	; (800e67c <tcp_accept_null+0x38>)
 800e660:	4807      	ldr	r0, [pc, #28]	; (800e680 <tcp_accept_null+0x3c>)
 800e662:	f008 fc19 	bl	8016e98 <iprintf>

  tcp_abort(pcb);
 800e666:	68b8      	ldr	r0, [r7, #8]
 800e668:	f7ff ff48 	bl	800e4fc <tcp_abort>

  return ERR_ABRT;
 800e66c:	f06f 030c 	mvn.w	r3, #12
}
 800e670:	4618      	mov	r0, r3
 800e672:	3710      	adds	r7, #16
 800e674:	46bd      	mov	sp, r7
 800e676:	bd80      	pop	{r7, pc}
 800e678:	08018b78 	.word	0x08018b78
 800e67c:	08018d4c 	.word	0x08018d4c
 800e680:	08018bbc 	.word	0x08018bbc

0800e684 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 800e684:	b580      	push	{r7, lr}
 800e686:	b082      	sub	sp, #8
 800e688:	af00      	add	r7, sp, #0
 800e68a:	6078      	str	r0, [r7, #4]
 800e68c:	460b      	mov	r3, r1
 800e68e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 800e690:	78fb      	ldrb	r3, [r7, #3]
 800e692:	2200      	movs	r2, #0
 800e694:	4619      	mov	r1, r3
 800e696:	6878      	ldr	r0, [r7, #4]
 800e698:	f000 f806 	bl	800e6a8 <tcp_listen_with_backlog_and_err>
 800e69c:	4603      	mov	r3, r0
}
 800e69e:	4618      	mov	r0, r3
 800e6a0:	3708      	adds	r7, #8
 800e6a2:	46bd      	mov	sp, r7
 800e6a4:	bd80      	pop	{r7, pc}
	...

0800e6a8 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800e6a8:	b580      	push	{r7, lr}
 800e6aa:	b088      	sub	sp, #32
 800e6ac:	af00      	add	r7, sp, #0
 800e6ae:	60f8      	str	r0, [r7, #12]
 800e6b0:	460b      	mov	r3, r1
 800e6b2:	607a      	str	r2, [r7, #4]
 800e6b4:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800e6b6:	2300      	movs	r3, #0
 800e6b8:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d109      	bne.n	800e6d4 <tcp_listen_with_backlog_and_err+0x2c>
 800e6c0:	4b47      	ldr	r3, [pc, #284]	; (800e7e0 <tcp_listen_with_backlog_and_err+0x138>)
 800e6c2:	f240 3259 	movw	r2, #857	; 0x359
 800e6c6:	4947      	ldr	r1, [pc, #284]	; (800e7e4 <tcp_listen_with_backlog_and_err+0x13c>)
 800e6c8:	4847      	ldr	r0, [pc, #284]	; (800e7e8 <tcp_listen_with_backlog_and_err+0x140>)
 800e6ca:	f008 fbe5 	bl	8016e98 <iprintf>
 800e6ce:	23f0      	movs	r3, #240	; 0xf0
 800e6d0:	76fb      	strb	r3, [r7, #27]
 800e6d2:	e079      	b.n	800e7c8 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	7d1b      	ldrb	r3, [r3, #20]
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d009      	beq.n	800e6f0 <tcp_listen_with_backlog_and_err+0x48>
 800e6dc:	4b40      	ldr	r3, [pc, #256]	; (800e7e0 <tcp_listen_with_backlog_and_err+0x138>)
 800e6de:	f240 325a 	movw	r2, #858	; 0x35a
 800e6e2:	4942      	ldr	r1, [pc, #264]	; (800e7ec <tcp_listen_with_backlog_and_err+0x144>)
 800e6e4:	4840      	ldr	r0, [pc, #256]	; (800e7e8 <tcp_listen_with_backlog_and_err+0x140>)
 800e6e6:	f008 fbd7 	bl	8016e98 <iprintf>
 800e6ea:	23f1      	movs	r3, #241	; 0xf1
 800e6ec:	76fb      	strb	r3, [r7, #27]
 800e6ee:	e06b      	b.n	800e7c8 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	7d1b      	ldrb	r3, [r3, #20]
 800e6f4:	2b01      	cmp	r3, #1
 800e6f6:	d104      	bne.n	800e702 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800e6fc:	23f7      	movs	r3, #247	; 0xf7
 800e6fe:	76fb      	strb	r3, [r7, #27]
    goto done;
 800e700:	e062      	b.n	800e7c8 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800e702:	2002      	movs	r0, #2
 800e704:	f7fe fa3c 	bl	800cb80 <memp_malloc>
 800e708:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800e70a:	69fb      	ldr	r3, [r7, #28]
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d102      	bne.n	800e716 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800e710:	23ff      	movs	r3, #255	; 0xff
 800e712:	76fb      	strb	r3, [r7, #27]
    goto done;
 800e714:	e058      	b.n	800e7c8 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800e716:	68fb      	ldr	r3, [r7, #12]
 800e718:	691a      	ldr	r2, [r3, #16]
 800e71a:	69fb      	ldr	r3, [r7, #28]
 800e71c:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	8ada      	ldrh	r2, [r3, #22]
 800e722:	69fb      	ldr	r3, [r7, #28]
 800e724:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800e726:	69fb      	ldr	r3, [r7, #28]
 800e728:	2201      	movs	r2, #1
 800e72a:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	7d5a      	ldrb	r2, [r3, #21]
 800e730:	69fb      	ldr	r3, [r7, #28]
 800e732:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800e734:	68fb      	ldr	r3, [r7, #12]
 800e736:	7a5a      	ldrb	r2, [r3, #9]
 800e738:	69fb      	ldr	r3, [r7, #28]
 800e73a:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800e73c:	69fb      	ldr	r3, [r7, #28]
 800e73e:	2200      	movs	r2, #0
 800e740:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800e742:	68fb      	ldr	r3, [r7, #12]
 800e744:	7ada      	ldrb	r2, [r3, #11]
 800e746:	69fb      	ldr	r3, [r7, #28]
 800e748:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	7a9a      	ldrb	r2, [r3, #10]
 800e74e:	69fb      	ldr	r3, [r7, #28]
 800e750:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	681a      	ldr	r2, [r3, #0]
 800e756:	69fb      	ldr	r3, [r7, #28]
 800e758:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800e75a:	68fb      	ldr	r3, [r7, #12]
 800e75c:	8adb      	ldrh	r3, [r3, #22]
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d021      	beq.n	800e7a6 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800e762:	4b23      	ldr	r3, [pc, #140]	; (800e7f0 <tcp_listen_with_backlog_and_err+0x148>)
 800e764:	681b      	ldr	r3, [r3, #0]
 800e766:	68fa      	ldr	r2, [r7, #12]
 800e768:	429a      	cmp	r2, r3
 800e76a:	d105      	bne.n	800e778 <tcp_listen_with_backlog_and_err+0xd0>
 800e76c:	4b20      	ldr	r3, [pc, #128]	; (800e7f0 <tcp_listen_with_backlog_and_err+0x148>)
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	68db      	ldr	r3, [r3, #12]
 800e772:	4a1f      	ldr	r2, [pc, #124]	; (800e7f0 <tcp_listen_with_backlog_and_err+0x148>)
 800e774:	6013      	str	r3, [r2, #0]
 800e776:	e013      	b.n	800e7a0 <tcp_listen_with_backlog_and_err+0xf8>
 800e778:	4b1d      	ldr	r3, [pc, #116]	; (800e7f0 <tcp_listen_with_backlog_and_err+0x148>)
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	617b      	str	r3, [r7, #20]
 800e77e:	e00c      	b.n	800e79a <tcp_listen_with_backlog_and_err+0xf2>
 800e780:	697b      	ldr	r3, [r7, #20]
 800e782:	68db      	ldr	r3, [r3, #12]
 800e784:	68fa      	ldr	r2, [r7, #12]
 800e786:	429a      	cmp	r2, r3
 800e788:	d104      	bne.n	800e794 <tcp_listen_with_backlog_and_err+0xec>
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	68da      	ldr	r2, [r3, #12]
 800e78e:	697b      	ldr	r3, [r7, #20]
 800e790:	60da      	str	r2, [r3, #12]
 800e792:	e005      	b.n	800e7a0 <tcp_listen_with_backlog_and_err+0xf8>
 800e794:	697b      	ldr	r3, [r7, #20]
 800e796:	68db      	ldr	r3, [r3, #12]
 800e798:	617b      	str	r3, [r7, #20]
 800e79a:	697b      	ldr	r3, [r7, #20]
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d1ef      	bne.n	800e780 <tcp_listen_with_backlog_and_err+0xd8>
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	2200      	movs	r2, #0
 800e7a4:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800e7a6:	68f8      	ldr	r0, [r7, #12]
 800e7a8:	f7ff fbc0 	bl	800df2c <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800e7ac:	69fb      	ldr	r3, [r7, #28]
 800e7ae:	4a11      	ldr	r2, [pc, #68]	; (800e7f4 <tcp_listen_with_backlog_and_err+0x14c>)
 800e7b0:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800e7b2:	4b11      	ldr	r3, [pc, #68]	; (800e7f8 <tcp_listen_with_backlog_and_err+0x150>)
 800e7b4:	681a      	ldr	r2, [r3, #0]
 800e7b6:	69fb      	ldr	r3, [r7, #28]
 800e7b8:	60da      	str	r2, [r3, #12]
 800e7ba:	4a0f      	ldr	r2, [pc, #60]	; (800e7f8 <tcp_listen_with_backlog_and_err+0x150>)
 800e7bc:	69fb      	ldr	r3, [r7, #28]
 800e7be:	6013      	str	r3, [r2, #0]
 800e7c0:	f005 fbf2 	bl	8013fa8 <tcp_timer_needed>
  res = ERR_OK;
 800e7c4:	2300      	movs	r3, #0
 800e7c6:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d002      	beq.n	800e7d4 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	7efa      	ldrb	r2, [r7, #27]
 800e7d2:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800e7d4:	69fb      	ldr	r3, [r7, #28]
}
 800e7d6:	4618      	mov	r0, r3
 800e7d8:	3720      	adds	r7, #32
 800e7da:	46bd      	mov	sp, r7
 800e7dc:	bd80      	pop	{r7, pc}
 800e7de:	bf00      	nop
 800e7e0:	08018b78 	.word	0x08018b78
 800e7e4:	08018d6c 	.word	0x08018d6c
 800e7e8:	08018bbc 	.word	0x08018bbc
 800e7ec:	08018d9c 	.word	0x08018d9c
 800e7f0:	240079b4 	.word	0x240079b4
 800e7f4:	0800e645 	.word	0x0800e645
 800e7f8:	240079b0 	.word	0x240079b0

0800e7fc <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800e7fc:	b580      	push	{r7, lr}
 800e7fe:	b084      	sub	sp, #16
 800e800:	af00      	add	r7, sp, #0
 800e802:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	2b00      	cmp	r3, #0
 800e808:	d106      	bne.n	800e818 <tcp_update_rcv_ann_wnd+0x1c>
 800e80a:	4b25      	ldr	r3, [pc, #148]	; (800e8a0 <tcp_update_rcv_ann_wnd+0xa4>)
 800e80c:	f240 32a6 	movw	r2, #934	; 0x3a6
 800e810:	4924      	ldr	r1, [pc, #144]	; (800e8a4 <tcp_update_rcv_ann_wnd+0xa8>)
 800e812:	4825      	ldr	r0, [pc, #148]	; (800e8a8 <tcp_update_rcv_ann_wnd+0xac>)
 800e814:	f008 fb40 	bl	8016e98 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e81c:	687a      	ldr	r2, [r7, #4]
 800e81e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800e820:	4413      	add	r3, r2
 800e822:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e828:	687a      	ldr	r2, [r7, #4]
 800e82a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800e82c:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800e830:	bf28      	it	cs
 800e832:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800e836:	b292      	uxth	r2, r2
 800e838:	4413      	add	r3, r2
 800e83a:	68fa      	ldr	r2, [r7, #12]
 800e83c:	1ad3      	subs	r3, r2, r3
 800e83e:	2b00      	cmp	r3, #0
 800e840:	db08      	blt.n	800e854 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e84e:	68fa      	ldr	r2, [r7, #12]
 800e850:	1ad3      	subs	r3, r2, r3
 800e852:	e020      	b.n	800e896 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e85c:	1ad3      	subs	r3, r2, r3
 800e85e:	2b00      	cmp	r3, #0
 800e860:	dd03      	ble.n	800e86a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	2200      	movs	r2, #0
 800e866:	855a      	strh	r2, [r3, #42]	; 0x2a
 800e868:	e014      	b.n	800e894 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e872:	1ad3      	subs	r3, r2, r3
 800e874:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800e876:	68bb      	ldr	r3, [r7, #8]
 800e878:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e87c:	d306      	bcc.n	800e88c <tcp_update_rcv_ann_wnd+0x90>
 800e87e:	4b08      	ldr	r3, [pc, #32]	; (800e8a0 <tcp_update_rcv_ann_wnd+0xa4>)
 800e880:	f240 32b6 	movw	r2, #950	; 0x3b6
 800e884:	4909      	ldr	r1, [pc, #36]	; (800e8ac <tcp_update_rcv_ann_wnd+0xb0>)
 800e886:	4808      	ldr	r0, [pc, #32]	; (800e8a8 <tcp_update_rcv_ann_wnd+0xac>)
 800e888:	f008 fb06 	bl	8016e98 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800e88c:	68bb      	ldr	r3, [r7, #8]
 800e88e:	b29a      	uxth	r2, r3
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800e894:	2300      	movs	r3, #0
  }
}
 800e896:	4618      	mov	r0, r3
 800e898:	3710      	adds	r7, #16
 800e89a:	46bd      	mov	sp, r7
 800e89c:	bd80      	pop	{r7, pc}
 800e89e:	bf00      	nop
 800e8a0:	08018b78 	.word	0x08018b78
 800e8a4:	08018dd4 	.word	0x08018dd4
 800e8a8:	08018bbc 	.word	0x08018bbc
 800e8ac:	08018df8 	.word	0x08018df8

0800e8b0 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800e8b0:	b580      	push	{r7, lr}
 800e8b2:	b084      	sub	sp, #16
 800e8b4:	af00      	add	r7, sp, #0
 800e8b6:	6078      	str	r0, [r7, #4]
 800e8b8:	460b      	mov	r3, r1
 800e8ba:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d107      	bne.n	800e8d2 <tcp_recved+0x22>
 800e8c2:	4b1f      	ldr	r3, [pc, #124]	; (800e940 <tcp_recved+0x90>)
 800e8c4:	f240 32cf 	movw	r2, #975	; 0x3cf
 800e8c8:	491e      	ldr	r1, [pc, #120]	; (800e944 <tcp_recved+0x94>)
 800e8ca:	481f      	ldr	r0, [pc, #124]	; (800e948 <tcp_recved+0x98>)
 800e8cc:	f008 fae4 	bl	8016e98 <iprintf>
 800e8d0:	e032      	b.n	800e938 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	7d1b      	ldrb	r3, [r3, #20]
 800e8d6:	2b01      	cmp	r3, #1
 800e8d8:	d106      	bne.n	800e8e8 <tcp_recved+0x38>
 800e8da:	4b19      	ldr	r3, [pc, #100]	; (800e940 <tcp_recved+0x90>)
 800e8dc:	f240 32d2 	movw	r2, #978	; 0x3d2
 800e8e0:	491a      	ldr	r1, [pc, #104]	; (800e94c <tcp_recved+0x9c>)
 800e8e2:	4819      	ldr	r0, [pc, #100]	; (800e948 <tcp_recved+0x98>)
 800e8e4:	f008 fad8 	bl	8016e98 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e8ec:	887b      	ldrh	r3, [r7, #2]
 800e8ee:	4413      	add	r3, r2
 800e8f0:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800e8f2:	89fb      	ldrh	r3, [r7, #14]
 800e8f4:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e8f8:	d804      	bhi.n	800e904 <tcp_recved+0x54>
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e8fe:	89fa      	ldrh	r2, [r7, #14]
 800e900:	429a      	cmp	r2, r3
 800e902:	d204      	bcs.n	800e90e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800e90a:	851a      	strh	r2, [r3, #40]	; 0x28
 800e90c:	e002      	b.n	800e914 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	89fa      	ldrh	r2, [r7, #14]
 800e912:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800e914:	6878      	ldr	r0, [r7, #4]
 800e916:	f7ff ff71 	bl	800e7fc <tcp_update_rcv_ann_wnd>
 800e91a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800e91c:	68bb      	ldr	r3, [r7, #8]
 800e91e:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800e922:	d309      	bcc.n	800e938 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	8b5b      	ldrh	r3, [r3, #26]
 800e928:	f043 0302 	orr.w	r3, r3, #2
 800e92c:	b29a      	uxth	r2, r3
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e932:	6878      	ldr	r0, [r7, #4]
 800e934:	f004 fbc2 	bl	80130bc <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800e938:	3710      	adds	r7, #16
 800e93a:	46bd      	mov	sp, r7
 800e93c:	bd80      	pop	{r7, pc}
 800e93e:	bf00      	nop
 800e940:	08018b78 	.word	0x08018b78
 800e944:	08018e14 	.word	0x08018e14
 800e948:	08018bbc 	.word	0x08018bbc
 800e94c:	08018e2c 	.word	0x08018e2c

0800e950 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800e950:	b480      	push	{r7}
 800e952:	b083      	sub	sp, #12
 800e954:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800e956:	2300      	movs	r3, #0
 800e958:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800e95a:	4b1e      	ldr	r3, [pc, #120]	; (800e9d4 <tcp_new_port+0x84>)
 800e95c:	881b      	ldrh	r3, [r3, #0]
 800e95e:	3301      	adds	r3, #1
 800e960:	b29a      	uxth	r2, r3
 800e962:	4b1c      	ldr	r3, [pc, #112]	; (800e9d4 <tcp_new_port+0x84>)
 800e964:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800e966:	4b1b      	ldr	r3, [pc, #108]	; (800e9d4 <tcp_new_port+0x84>)
 800e968:	881b      	ldrh	r3, [r3, #0]
 800e96a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e96e:	4293      	cmp	r3, r2
 800e970:	d103      	bne.n	800e97a <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800e972:	4b18      	ldr	r3, [pc, #96]	; (800e9d4 <tcp_new_port+0x84>)
 800e974:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800e978:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800e97a:	2300      	movs	r3, #0
 800e97c:	71fb      	strb	r3, [r7, #7]
 800e97e:	e01e      	b.n	800e9be <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800e980:	79fb      	ldrb	r3, [r7, #7]
 800e982:	4a15      	ldr	r2, [pc, #84]	; (800e9d8 <tcp_new_port+0x88>)
 800e984:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e988:	681b      	ldr	r3, [r3, #0]
 800e98a:	603b      	str	r3, [r7, #0]
 800e98c:	e011      	b.n	800e9b2 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800e98e:	683b      	ldr	r3, [r7, #0]
 800e990:	8ada      	ldrh	r2, [r3, #22]
 800e992:	4b10      	ldr	r3, [pc, #64]	; (800e9d4 <tcp_new_port+0x84>)
 800e994:	881b      	ldrh	r3, [r3, #0]
 800e996:	429a      	cmp	r2, r3
 800e998:	d108      	bne.n	800e9ac <tcp_new_port+0x5c>
        n++;
 800e99a:	88bb      	ldrh	r3, [r7, #4]
 800e99c:	3301      	adds	r3, #1
 800e99e:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800e9a0:	88bb      	ldrh	r3, [r7, #4]
 800e9a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e9a6:	d3d8      	bcc.n	800e95a <tcp_new_port+0xa>
          return 0;
 800e9a8:	2300      	movs	r3, #0
 800e9aa:	e00d      	b.n	800e9c8 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800e9ac:	683b      	ldr	r3, [r7, #0]
 800e9ae:	68db      	ldr	r3, [r3, #12]
 800e9b0:	603b      	str	r3, [r7, #0]
 800e9b2:	683b      	ldr	r3, [r7, #0]
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d1ea      	bne.n	800e98e <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800e9b8:	79fb      	ldrb	r3, [r7, #7]
 800e9ba:	3301      	adds	r3, #1
 800e9bc:	71fb      	strb	r3, [r7, #7]
 800e9be:	79fb      	ldrb	r3, [r7, #7]
 800e9c0:	2b03      	cmp	r3, #3
 800e9c2:	d9dd      	bls.n	800e980 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800e9c4:	4b03      	ldr	r3, [pc, #12]	; (800e9d4 <tcp_new_port+0x84>)
 800e9c6:	881b      	ldrh	r3, [r3, #0]
}
 800e9c8:	4618      	mov	r0, r3
 800e9ca:	370c      	adds	r7, #12
 800e9cc:	46bd      	mov	sp, r7
 800e9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9d2:	4770      	bx	lr
 800e9d4:	24000028 	.word	0x24000028
 800e9d8:	0801abb8 	.word	0x0801abb8

0800e9dc <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800e9dc:	b5b0      	push	{r4, r5, r7, lr}
 800e9de:	b090      	sub	sp, #64	; 0x40
 800e9e0:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800e9e2:	2300      	movs	r3, #0
 800e9e4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800e9e8:	4b94      	ldr	r3, [pc, #592]	; (800ec3c <tcp_slowtmr+0x260>)
 800e9ea:	681b      	ldr	r3, [r3, #0]
 800e9ec:	3301      	adds	r3, #1
 800e9ee:	4a93      	ldr	r2, [pc, #588]	; (800ec3c <tcp_slowtmr+0x260>)
 800e9f0:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800e9f2:	4b93      	ldr	r3, [pc, #588]	; (800ec40 <tcp_slowtmr+0x264>)
 800e9f4:	781b      	ldrb	r3, [r3, #0]
 800e9f6:	3301      	adds	r3, #1
 800e9f8:	b2da      	uxtb	r2, r3
 800e9fa:	4b91      	ldr	r3, [pc, #580]	; (800ec40 <tcp_slowtmr+0x264>)
 800e9fc:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800e9fe:	2300      	movs	r3, #0
 800ea00:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800ea02:	4b90      	ldr	r3, [pc, #576]	; (800ec44 <tcp_slowtmr+0x268>)
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800ea08:	e29d      	b.n	800ef46 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800ea0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea0c:	7d1b      	ldrb	r3, [r3, #20]
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d106      	bne.n	800ea20 <tcp_slowtmr+0x44>
 800ea12:	4b8d      	ldr	r3, [pc, #564]	; (800ec48 <tcp_slowtmr+0x26c>)
 800ea14:	f240 42be 	movw	r2, #1214	; 0x4be
 800ea18:	498c      	ldr	r1, [pc, #560]	; (800ec4c <tcp_slowtmr+0x270>)
 800ea1a:	488d      	ldr	r0, [pc, #564]	; (800ec50 <tcp_slowtmr+0x274>)
 800ea1c:	f008 fa3c 	bl	8016e98 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800ea20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea22:	7d1b      	ldrb	r3, [r3, #20]
 800ea24:	2b01      	cmp	r3, #1
 800ea26:	d106      	bne.n	800ea36 <tcp_slowtmr+0x5a>
 800ea28:	4b87      	ldr	r3, [pc, #540]	; (800ec48 <tcp_slowtmr+0x26c>)
 800ea2a:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800ea2e:	4989      	ldr	r1, [pc, #548]	; (800ec54 <tcp_slowtmr+0x278>)
 800ea30:	4887      	ldr	r0, [pc, #540]	; (800ec50 <tcp_slowtmr+0x274>)
 800ea32:	f008 fa31 	bl	8016e98 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800ea36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea38:	7d1b      	ldrb	r3, [r3, #20]
 800ea3a:	2b0a      	cmp	r3, #10
 800ea3c:	d106      	bne.n	800ea4c <tcp_slowtmr+0x70>
 800ea3e:	4b82      	ldr	r3, [pc, #520]	; (800ec48 <tcp_slowtmr+0x26c>)
 800ea40:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800ea44:	4984      	ldr	r1, [pc, #528]	; (800ec58 <tcp_slowtmr+0x27c>)
 800ea46:	4882      	ldr	r0, [pc, #520]	; (800ec50 <tcp_slowtmr+0x274>)
 800ea48:	f008 fa26 	bl	8016e98 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800ea4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea4e:	7f9a      	ldrb	r2, [r3, #30]
 800ea50:	4b7b      	ldr	r3, [pc, #492]	; (800ec40 <tcp_slowtmr+0x264>)
 800ea52:	781b      	ldrb	r3, [r3, #0]
 800ea54:	429a      	cmp	r2, r3
 800ea56:	d105      	bne.n	800ea64 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800ea58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea5a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800ea5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea5e:	68db      	ldr	r3, [r3, #12]
 800ea60:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800ea62:	e270      	b.n	800ef46 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800ea64:	4b76      	ldr	r3, [pc, #472]	; (800ec40 <tcp_slowtmr+0x264>)
 800ea66:	781a      	ldrb	r2, [r3, #0]
 800ea68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea6a:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800ea6c:	2300      	movs	r3, #0
 800ea6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800ea72:	2300      	movs	r3, #0
 800ea74:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800ea78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea7a:	7d1b      	ldrb	r3, [r3, #20]
 800ea7c:	2b02      	cmp	r3, #2
 800ea7e:	d10a      	bne.n	800ea96 <tcp_slowtmr+0xba>
 800ea80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea82:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ea86:	2b05      	cmp	r3, #5
 800ea88:	d905      	bls.n	800ea96 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800ea8a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ea8e:	3301      	adds	r3, #1
 800ea90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ea94:	e11e      	b.n	800ecd4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800ea96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea98:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ea9c:	2b0b      	cmp	r3, #11
 800ea9e:	d905      	bls.n	800eaac <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800eaa0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eaa4:	3301      	adds	r3, #1
 800eaa6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800eaaa:	e113      	b.n	800ecd4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800eaac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eaae:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d075      	beq.n	800eba2 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800eab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d006      	beq.n	800eacc <tcp_slowtmr+0xf0>
 800eabe:	4b62      	ldr	r3, [pc, #392]	; (800ec48 <tcp_slowtmr+0x26c>)
 800eac0:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800eac4:	4965      	ldr	r1, [pc, #404]	; (800ec5c <tcp_slowtmr+0x280>)
 800eac6:	4862      	ldr	r0, [pc, #392]	; (800ec50 <tcp_slowtmr+0x274>)
 800eac8:	f008 f9e6 	bl	8016e98 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800eacc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eace:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d106      	bne.n	800eae2 <tcp_slowtmr+0x106>
 800ead4:	4b5c      	ldr	r3, [pc, #368]	; (800ec48 <tcp_slowtmr+0x26c>)
 800ead6:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800eada:	4961      	ldr	r1, [pc, #388]	; (800ec60 <tcp_slowtmr+0x284>)
 800eadc:	485c      	ldr	r0, [pc, #368]	; (800ec50 <tcp_slowtmr+0x274>)
 800eade:	f008 f9db 	bl	8016e98 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800eae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eae4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800eae8:	2b0b      	cmp	r3, #11
 800eaea:	d905      	bls.n	800eaf8 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800eaec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eaf0:	3301      	adds	r3, #1
 800eaf2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800eaf6:	e0ed      	b.n	800ecd4 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800eaf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eafa:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800eafe:	3b01      	subs	r3, #1
 800eb00:	4a58      	ldr	r2, [pc, #352]	; (800ec64 <tcp_slowtmr+0x288>)
 800eb02:	5cd3      	ldrb	r3, [r2, r3]
 800eb04:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800eb06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb08:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800eb0c:	7c7a      	ldrb	r2, [r7, #17]
 800eb0e:	429a      	cmp	r2, r3
 800eb10:	d907      	bls.n	800eb22 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800eb12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb14:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800eb18:	3301      	adds	r3, #1
 800eb1a:	b2da      	uxtb	r2, r3
 800eb1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb1e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800eb22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb24:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800eb28:	7c7a      	ldrb	r2, [r7, #17]
 800eb2a:	429a      	cmp	r2, r3
 800eb2c:	f200 80d2 	bhi.w	800ecd4 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800eb30:	2301      	movs	r3, #1
 800eb32:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800eb34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb36:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d108      	bne.n	800eb50 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800eb3e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800eb40:	f005 f964 	bl	8013e0c <tcp_zero_window_probe>
 800eb44:	4603      	mov	r3, r0
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d014      	beq.n	800eb74 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800eb4a:	2300      	movs	r3, #0
 800eb4c:	623b      	str	r3, [r7, #32]
 800eb4e:	e011      	b.n	800eb74 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800eb50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb52:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800eb56:	4619      	mov	r1, r3
 800eb58:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800eb5a:	f004 f829 	bl	8012bb0 <tcp_split_unsent_seg>
 800eb5e:	4603      	mov	r3, r0
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d107      	bne.n	800eb74 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800eb64:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800eb66:	f004 faa9 	bl	80130bc <tcp_output>
 800eb6a:	4603      	mov	r3, r0
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d101      	bne.n	800eb74 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800eb70:	2300      	movs	r3, #0
 800eb72:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800eb74:	6a3b      	ldr	r3, [r7, #32]
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	f000 80ac 	beq.w	800ecd4 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800eb7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb7e:	2200      	movs	r2, #0
 800eb80:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800eb84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb86:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800eb8a:	2b06      	cmp	r3, #6
 800eb8c:	f200 80a2 	bhi.w	800ecd4 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800eb90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb92:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800eb96:	3301      	adds	r3, #1
 800eb98:	b2da      	uxtb	r2, r3
 800eb9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb9c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800eba0:	e098      	b.n	800ecd4 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800eba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eba4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	db0f      	blt.n	800ebcc <tcp_slowtmr+0x1f0>
 800ebac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebae:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ebb2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800ebb6:	4293      	cmp	r3, r2
 800ebb8:	d008      	beq.n	800ebcc <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800ebba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebbc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ebc0:	b29b      	uxth	r3, r3
 800ebc2:	3301      	adds	r3, #1
 800ebc4:	b29b      	uxth	r3, r3
 800ebc6:	b21a      	sxth	r2, r3
 800ebc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebca:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800ebcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebce:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800ebd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebd4:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800ebd8:	429a      	cmp	r2, r3
 800ebda:	db7b      	blt.n	800ecd4 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800ebdc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ebde:	f004 fd5f 	bl	80136a0 <tcp_rexmit_rto_prepare>
 800ebe2:	4603      	mov	r3, r0
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d007      	beq.n	800ebf8 <tcp_slowtmr+0x21c>
 800ebe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d171      	bne.n	800ecd4 <tcp_slowtmr+0x2f8>
 800ebf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebf2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d06d      	beq.n	800ecd4 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800ebf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebfa:	7d1b      	ldrb	r3, [r3, #20]
 800ebfc:	2b02      	cmp	r3, #2
 800ebfe:	d03a      	beq.n	800ec76 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800ec00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec02:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ec06:	2b0c      	cmp	r3, #12
 800ec08:	bf28      	it	cs
 800ec0a:	230c      	movcs	r3, #12
 800ec0c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800ec0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec10:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ec14:	10db      	asrs	r3, r3, #3
 800ec16:	b21b      	sxth	r3, r3
 800ec18:	461a      	mov	r2, r3
 800ec1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec1c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ec20:	4413      	add	r3, r2
 800ec22:	7efa      	ldrb	r2, [r7, #27]
 800ec24:	4910      	ldr	r1, [pc, #64]	; (800ec68 <tcp_slowtmr+0x28c>)
 800ec26:	5c8a      	ldrb	r2, [r1, r2]
 800ec28:	4093      	lsls	r3, r2
 800ec2a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800ec2c:	697b      	ldr	r3, [r7, #20]
 800ec2e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800ec32:	4293      	cmp	r3, r2
 800ec34:	dc1a      	bgt.n	800ec6c <tcp_slowtmr+0x290>
 800ec36:	697b      	ldr	r3, [r7, #20]
 800ec38:	b21a      	sxth	r2, r3
 800ec3a:	e019      	b.n	800ec70 <tcp_slowtmr+0x294>
 800ec3c:	240079ac 	.word	0x240079ac
 800ec40:	240040be 	.word	0x240040be
 800ec44:	240079a8 	.word	0x240079a8
 800ec48:	08018b78 	.word	0x08018b78
 800ec4c:	08018ebc 	.word	0x08018ebc
 800ec50:	08018bbc 	.word	0x08018bbc
 800ec54:	08018ee8 	.word	0x08018ee8
 800ec58:	08018f14 	.word	0x08018f14
 800ec5c:	08018f44 	.word	0x08018f44
 800ec60:	08018f78 	.word	0x08018f78
 800ec64:	0801abb0 	.word	0x0801abb0
 800ec68:	0801aba0 	.word	0x0801aba0
 800ec6c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800ec70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec72:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800ec76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec78:	2200      	movs	r2, #0
 800ec7a:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800ec7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec7e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ec82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec84:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ec88:	4293      	cmp	r3, r2
 800ec8a:	bf28      	it	cs
 800ec8c:	4613      	movcs	r3, r2
 800ec8e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800ec90:	8a7b      	ldrh	r3, [r7, #18]
 800ec92:	085b      	lsrs	r3, r3, #1
 800ec94:	b29a      	uxth	r2, r3
 800ec96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec98:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800ec9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec9e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800eca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eca4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eca6:	005b      	lsls	r3, r3, #1
 800eca8:	b29b      	uxth	r3, r3
 800ecaa:	429a      	cmp	r2, r3
 800ecac:	d206      	bcs.n	800ecbc <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800ecae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecb0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ecb2:	005b      	lsls	r3, r3, #1
 800ecb4:	b29a      	uxth	r2, r3
 800ecb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecb8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800ecbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecbe:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800ecc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecc2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800ecc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecc8:	2200      	movs	r2, #0
 800ecca:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800ecce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ecd0:	f004 fd56 	bl	8013780 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800ecd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecd6:	7d1b      	ldrb	r3, [r3, #20]
 800ecd8:	2b06      	cmp	r3, #6
 800ecda:	d111      	bne.n	800ed00 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800ecdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecde:	8b5b      	ldrh	r3, [r3, #26]
 800ece0:	f003 0310 	and.w	r3, r3, #16
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	d00b      	beq.n	800ed00 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ece8:	4b9c      	ldr	r3, [pc, #624]	; (800ef5c <tcp_slowtmr+0x580>)
 800ecea:	681a      	ldr	r2, [r3, #0]
 800ecec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecee:	6a1b      	ldr	r3, [r3, #32]
 800ecf0:	1ad3      	subs	r3, r2, r3
 800ecf2:	2b28      	cmp	r3, #40	; 0x28
 800ecf4:	d904      	bls.n	800ed00 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800ecf6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ecfa:	3301      	adds	r3, #1
 800ecfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800ed00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed02:	7a5b      	ldrb	r3, [r3, #9]
 800ed04:	f003 0308 	and.w	r3, r3, #8
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d04a      	beq.n	800eda2 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800ed0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed0e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800ed10:	2b04      	cmp	r3, #4
 800ed12:	d003      	beq.n	800ed1c <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800ed14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed16:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800ed18:	2b07      	cmp	r3, #7
 800ed1a:	d142      	bne.n	800eda2 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ed1c:	4b8f      	ldr	r3, [pc, #572]	; (800ef5c <tcp_slowtmr+0x580>)
 800ed1e:	681a      	ldr	r2, [r3, #0]
 800ed20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed22:	6a1b      	ldr	r3, [r3, #32]
 800ed24:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800ed26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed28:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800ed2c:	4b8c      	ldr	r3, [pc, #560]	; (800ef60 <tcp_slowtmr+0x584>)
 800ed2e:	440b      	add	r3, r1
 800ed30:	498c      	ldr	r1, [pc, #560]	; (800ef64 <tcp_slowtmr+0x588>)
 800ed32:	fba1 1303 	umull	r1, r3, r1, r3
 800ed36:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ed38:	429a      	cmp	r2, r3
 800ed3a:	d90a      	bls.n	800ed52 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800ed3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ed40:	3301      	adds	r3, #1
 800ed42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800ed46:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ed4a:	3301      	adds	r3, #1
 800ed4c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ed50:	e027      	b.n	800eda2 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ed52:	4b82      	ldr	r3, [pc, #520]	; (800ef5c <tcp_slowtmr+0x580>)
 800ed54:	681a      	ldr	r2, [r3, #0]
 800ed56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed58:	6a1b      	ldr	r3, [r3, #32]
 800ed5a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800ed5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed5e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800ed62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed64:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800ed68:	4618      	mov	r0, r3
 800ed6a:	4b7f      	ldr	r3, [pc, #508]	; (800ef68 <tcp_slowtmr+0x58c>)
 800ed6c:	fb03 f300 	mul.w	r3, r3, r0
 800ed70:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800ed72:	497c      	ldr	r1, [pc, #496]	; (800ef64 <tcp_slowtmr+0x588>)
 800ed74:	fba1 1303 	umull	r1, r3, r1, r3
 800ed78:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ed7a:	429a      	cmp	r2, r3
 800ed7c:	d911      	bls.n	800eda2 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800ed7e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ed80:	f005 f804 	bl	8013d8c <tcp_keepalive>
 800ed84:	4603      	mov	r3, r0
 800ed86:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800ed8a:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	d107      	bne.n	800eda2 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800ed92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed94:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800ed98:	3301      	adds	r3, #1
 800ed9a:	b2da      	uxtb	r2, r3
 800ed9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed9e:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800eda2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eda4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d011      	beq.n	800edce <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800edaa:	4b6c      	ldr	r3, [pc, #432]	; (800ef5c <tcp_slowtmr+0x580>)
 800edac:	681a      	ldr	r2, [r3, #0]
 800edae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edb0:	6a1b      	ldr	r3, [r3, #32]
 800edb2:	1ad2      	subs	r2, r2, r3
 800edb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edb6:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800edba:	4619      	mov	r1, r3
 800edbc:	460b      	mov	r3, r1
 800edbe:	005b      	lsls	r3, r3, #1
 800edc0:	440b      	add	r3, r1
 800edc2:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800edc4:	429a      	cmp	r2, r3
 800edc6:	d302      	bcc.n	800edce <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800edc8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800edca:	f000 fec3 	bl	800fb54 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800edce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edd0:	7d1b      	ldrb	r3, [r3, #20]
 800edd2:	2b03      	cmp	r3, #3
 800edd4:	d10b      	bne.n	800edee <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800edd6:	4b61      	ldr	r3, [pc, #388]	; (800ef5c <tcp_slowtmr+0x580>)
 800edd8:	681a      	ldr	r2, [r3, #0]
 800edda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eddc:	6a1b      	ldr	r3, [r3, #32]
 800edde:	1ad3      	subs	r3, r2, r3
 800ede0:	2b28      	cmp	r3, #40	; 0x28
 800ede2:	d904      	bls.n	800edee <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800ede4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ede8:	3301      	adds	r3, #1
 800edea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800edee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edf0:	7d1b      	ldrb	r3, [r3, #20]
 800edf2:	2b09      	cmp	r3, #9
 800edf4:	d10b      	bne.n	800ee0e <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800edf6:	4b59      	ldr	r3, [pc, #356]	; (800ef5c <tcp_slowtmr+0x580>)
 800edf8:	681a      	ldr	r2, [r3, #0]
 800edfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edfc:	6a1b      	ldr	r3, [r3, #32]
 800edfe:	1ad3      	subs	r3, r2, r3
 800ee00:	2bf0      	cmp	r3, #240	; 0xf0
 800ee02:	d904      	bls.n	800ee0e <tcp_slowtmr+0x432>
        ++pcb_remove;
 800ee04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ee08:	3301      	adds	r3, #1
 800ee0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800ee0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	d060      	beq.n	800eed8 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800ee16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ee1c:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800ee1e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ee20:	f000 fce4 	bl	800f7ec <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800ee24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d010      	beq.n	800ee4c <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800ee2a:	4b50      	ldr	r3, [pc, #320]	; (800ef6c <tcp_slowtmr+0x590>)
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ee30:	429a      	cmp	r2, r3
 800ee32:	d106      	bne.n	800ee42 <tcp_slowtmr+0x466>
 800ee34:	4b4e      	ldr	r3, [pc, #312]	; (800ef70 <tcp_slowtmr+0x594>)
 800ee36:	f240 526d 	movw	r2, #1389	; 0x56d
 800ee3a:	494e      	ldr	r1, [pc, #312]	; (800ef74 <tcp_slowtmr+0x598>)
 800ee3c:	484e      	ldr	r0, [pc, #312]	; (800ef78 <tcp_slowtmr+0x59c>)
 800ee3e:	f008 f82b 	bl	8016e98 <iprintf>
        prev->next = pcb->next;
 800ee42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee44:	68da      	ldr	r2, [r3, #12]
 800ee46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee48:	60da      	str	r2, [r3, #12]
 800ee4a:	e00f      	b.n	800ee6c <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800ee4c:	4b47      	ldr	r3, [pc, #284]	; (800ef6c <tcp_slowtmr+0x590>)
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ee52:	429a      	cmp	r2, r3
 800ee54:	d006      	beq.n	800ee64 <tcp_slowtmr+0x488>
 800ee56:	4b46      	ldr	r3, [pc, #280]	; (800ef70 <tcp_slowtmr+0x594>)
 800ee58:	f240 5271 	movw	r2, #1393	; 0x571
 800ee5c:	4947      	ldr	r1, [pc, #284]	; (800ef7c <tcp_slowtmr+0x5a0>)
 800ee5e:	4846      	ldr	r0, [pc, #280]	; (800ef78 <tcp_slowtmr+0x59c>)
 800ee60:	f008 f81a 	bl	8016e98 <iprintf>
        tcp_active_pcbs = pcb->next;
 800ee64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee66:	68db      	ldr	r3, [r3, #12]
 800ee68:	4a40      	ldr	r2, [pc, #256]	; (800ef6c <tcp_slowtmr+0x590>)
 800ee6a:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800ee6c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	d013      	beq.n	800ee9c <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800ee74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee76:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800ee78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee7a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800ee7c:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800ee7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee80:	3304      	adds	r3, #4
 800ee82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ee84:	8ad2      	ldrh	r2, [r2, #22]
 800ee86:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ee88:	8b09      	ldrh	r1, [r1, #24]
 800ee8a:	9102      	str	r1, [sp, #8]
 800ee8c:	9201      	str	r2, [sp, #4]
 800ee8e:	9300      	str	r3, [sp, #0]
 800ee90:	462b      	mov	r3, r5
 800ee92:	4622      	mov	r2, r4
 800ee94:	4601      	mov	r1, r0
 800ee96:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ee98:	f004 fec4 	bl	8013c24 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800ee9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee9e:	691b      	ldr	r3, [r3, #16]
 800eea0:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800eea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eea4:	7d1b      	ldrb	r3, [r3, #20]
 800eea6:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800eea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eeaa:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800eeac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eeae:	68db      	ldr	r3, [r3, #12]
 800eeb0:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800eeb2:	6838      	ldr	r0, [r7, #0]
 800eeb4:	f7ff f83a 	bl	800df2c <tcp_free>

      tcp_active_pcbs_changed = 0;
 800eeb8:	4b31      	ldr	r3, [pc, #196]	; (800ef80 <tcp_slowtmr+0x5a4>)
 800eeba:	2200      	movs	r2, #0
 800eebc:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800eebe:	68fb      	ldr	r3, [r7, #12]
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	d004      	beq.n	800eece <tcp_slowtmr+0x4f2>
 800eec4:	68fb      	ldr	r3, [r7, #12]
 800eec6:	f06f 010c 	mvn.w	r1, #12
 800eeca:	68b8      	ldr	r0, [r7, #8]
 800eecc:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800eece:	4b2c      	ldr	r3, [pc, #176]	; (800ef80 <tcp_slowtmr+0x5a4>)
 800eed0:	781b      	ldrb	r3, [r3, #0]
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d037      	beq.n	800ef46 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800eed6:	e592      	b.n	800e9fe <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800eed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eeda:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800eedc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eede:	68db      	ldr	r3, [r3, #12]
 800eee0:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800eee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eee4:	7f1b      	ldrb	r3, [r3, #28]
 800eee6:	3301      	adds	r3, #1
 800eee8:	b2da      	uxtb	r2, r3
 800eeea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eeec:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800eeee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eef0:	7f1a      	ldrb	r2, [r3, #28]
 800eef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eef4:	7f5b      	ldrb	r3, [r3, #29]
 800eef6:	429a      	cmp	r2, r3
 800eef8:	d325      	bcc.n	800ef46 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800eefa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eefc:	2200      	movs	r2, #0
 800eefe:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800ef00:	4b1f      	ldr	r3, [pc, #124]	; (800ef80 <tcp_slowtmr+0x5a4>)
 800ef02:	2200      	movs	r2, #0
 800ef04:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800ef06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d00b      	beq.n	800ef28 <tcp_slowtmr+0x54c>
 800ef10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ef16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ef18:	6912      	ldr	r2, [r2, #16]
 800ef1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ef1c:	4610      	mov	r0, r2
 800ef1e:	4798      	blx	r3
 800ef20:	4603      	mov	r3, r0
 800ef22:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800ef26:	e002      	b.n	800ef2e <tcp_slowtmr+0x552>
 800ef28:	2300      	movs	r3, #0
 800ef2a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800ef2e:	4b14      	ldr	r3, [pc, #80]	; (800ef80 <tcp_slowtmr+0x5a4>)
 800ef30:	781b      	ldrb	r3, [r3, #0]
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d000      	beq.n	800ef38 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800ef36:	e562      	b.n	800e9fe <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800ef38:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	d102      	bne.n	800ef46 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800ef40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ef42:	f004 f8bb 	bl	80130bc <tcp_output>
  while (pcb != NULL) {
 800ef46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	f47f ad5e 	bne.w	800ea0a <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800ef4e:	2300      	movs	r3, #0
 800ef50:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800ef52:	4b0c      	ldr	r3, [pc, #48]	; (800ef84 <tcp_slowtmr+0x5a8>)
 800ef54:	681b      	ldr	r3, [r3, #0]
 800ef56:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800ef58:	e069      	b.n	800f02e <tcp_slowtmr+0x652>
 800ef5a:	bf00      	nop
 800ef5c:	240079ac 	.word	0x240079ac
 800ef60:	000a4cb8 	.word	0x000a4cb8
 800ef64:	10624dd3 	.word	0x10624dd3
 800ef68:	000124f8 	.word	0x000124f8
 800ef6c:	240079a8 	.word	0x240079a8
 800ef70:	08018b78 	.word	0x08018b78
 800ef74:	08018fb0 	.word	0x08018fb0
 800ef78:	08018bbc 	.word	0x08018bbc
 800ef7c:	08018fdc 	.word	0x08018fdc
 800ef80:	240079a4 	.word	0x240079a4
 800ef84:	240079b8 	.word	0x240079b8
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800ef88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef8a:	7d1b      	ldrb	r3, [r3, #20]
 800ef8c:	2b0a      	cmp	r3, #10
 800ef8e:	d006      	beq.n	800ef9e <tcp_slowtmr+0x5c2>
 800ef90:	4b2b      	ldr	r3, [pc, #172]	; (800f040 <tcp_slowtmr+0x664>)
 800ef92:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800ef96:	492b      	ldr	r1, [pc, #172]	; (800f044 <tcp_slowtmr+0x668>)
 800ef98:	482b      	ldr	r0, [pc, #172]	; (800f048 <tcp_slowtmr+0x66c>)
 800ef9a:	f007 ff7d 	bl	8016e98 <iprintf>
    pcb_remove = 0;
 800ef9e:	2300      	movs	r3, #0
 800efa0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800efa4:	4b29      	ldr	r3, [pc, #164]	; (800f04c <tcp_slowtmr+0x670>)
 800efa6:	681a      	ldr	r2, [r3, #0]
 800efa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efaa:	6a1b      	ldr	r3, [r3, #32]
 800efac:	1ad3      	subs	r3, r2, r3
 800efae:	2bf0      	cmp	r3, #240	; 0xf0
 800efb0:	d904      	bls.n	800efbc <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800efb2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800efb6:	3301      	adds	r3, #1
 800efb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800efbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	d02f      	beq.n	800f024 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800efc4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800efc6:	f000 fc11 	bl	800f7ec <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800efca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d010      	beq.n	800eff2 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800efd0:	4b1f      	ldr	r3, [pc, #124]	; (800f050 <tcp_slowtmr+0x674>)
 800efd2:	681b      	ldr	r3, [r3, #0]
 800efd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800efd6:	429a      	cmp	r2, r3
 800efd8:	d106      	bne.n	800efe8 <tcp_slowtmr+0x60c>
 800efda:	4b19      	ldr	r3, [pc, #100]	; (800f040 <tcp_slowtmr+0x664>)
 800efdc:	f240 52af 	movw	r2, #1455	; 0x5af
 800efe0:	491c      	ldr	r1, [pc, #112]	; (800f054 <tcp_slowtmr+0x678>)
 800efe2:	4819      	ldr	r0, [pc, #100]	; (800f048 <tcp_slowtmr+0x66c>)
 800efe4:	f007 ff58 	bl	8016e98 <iprintf>
        prev->next = pcb->next;
 800efe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efea:	68da      	ldr	r2, [r3, #12]
 800efec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efee:	60da      	str	r2, [r3, #12]
 800eff0:	e00f      	b.n	800f012 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800eff2:	4b17      	ldr	r3, [pc, #92]	; (800f050 <tcp_slowtmr+0x674>)
 800eff4:	681b      	ldr	r3, [r3, #0]
 800eff6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eff8:	429a      	cmp	r2, r3
 800effa:	d006      	beq.n	800f00a <tcp_slowtmr+0x62e>
 800effc:	4b10      	ldr	r3, [pc, #64]	; (800f040 <tcp_slowtmr+0x664>)
 800effe:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800f002:	4915      	ldr	r1, [pc, #84]	; (800f058 <tcp_slowtmr+0x67c>)
 800f004:	4810      	ldr	r0, [pc, #64]	; (800f048 <tcp_slowtmr+0x66c>)
 800f006:	f007 ff47 	bl	8016e98 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800f00a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f00c:	68db      	ldr	r3, [r3, #12]
 800f00e:	4a10      	ldr	r2, [pc, #64]	; (800f050 <tcp_slowtmr+0x674>)
 800f010:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800f012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f014:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800f016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f018:	68db      	ldr	r3, [r3, #12]
 800f01a:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800f01c:	69f8      	ldr	r0, [r7, #28]
 800f01e:	f7fe ff85 	bl	800df2c <tcp_free>
 800f022:	e004      	b.n	800f02e <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800f024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f026:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800f028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f02a:	68db      	ldr	r3, [r3, #12]
 800f02c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800f02e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f030:	2b00      	cmp	r3, #0
 800f032:	d1a9      	bne.n	800ef88 <tcp_slowtmr+0x5ac>
    }
  }
}
 800f034:	bf00      	nop
 800f036:	bf00      	nop
 800f038:	3730      	adds	r7, #48	; 0x30
 800f03a:	46bd      	mov	sp, r7
 800f03c:	bdb0      	pop	{r4, r5, r7, pc}
 800f03e:	bf00      	nop
 800f040:	08018b78 	.word	0x08018b78
 800f044:	08019008 	.word	0x08019008
 800f048:	08018bbc 	.word	0x08018bbc
 800f04c:	240079ac 	.word	0x240079ac
 800f050:	240079b8 	.word	0x240079b8
 800f054:	08019038 	.word	0x08019038
 800f058:	08019060 	.word	0x08019060

0800f05c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800f05c:	b580      	push	{r7, lr}
 800f05e:	b082      	sub	sp, #8
 800f060:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800f062:	4b2d      	ldr	r3, [pc, #180]	; (800f118 <tcp_fasttmr+0xbc>)
 800f064:	781b      	ldrb	r3, [r3, #0]
 800f066:	3301      	adds	r3, #1
 800f068:	b2da      	uxtb	r2, r3
 800f06a:	4b2b      	ldr	r3, [pc, #172]	; (800f118 <tcp_fasttmr+0xbc>)
 800f06c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800f06e:	4b2b      	ldr	r3, [pc, #172]	; (800f11c <tcp_fasttmr+0xc0>)
 800f070:	681b      	ldr	r3, [r3, #0]
 800f072:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800f074:	e048      	b.n	800f108 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	7f9a      	ldrb	r2, [r3, #30]
 800f07a:	4b27      	ldr	r3, [pc, #156]	; (800f118 <tcp_fasttmr+0xbc>)
 800f07c:	781b      	ldrb	r3, [r3, #0]
 800f07e:	429a      	cmp	r2, r3
 800f080:	d03f      	beq.n	800f102 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800f082:	4b25      	ldr	r3, [pc, #148]	; (800f118 <tcp_fasttmr+0xbc>)
 800f084:	781a      	ldrb	r2, [r3, #0]
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	8b5b      	ldrh	r3, [r3, #26]
 800f08e:	f003 0301 	and.w	r3, r3, #1
 800f092:	2b00      	cmp	r3, #0
 800f094:	d010      	beq.n	800f0b8 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	8b5b      	ldrh	r3, [r3, #26]
 800f09a:	f043 0302 	orr.w	r3, r3, #2
 800f09e:	b29a      	uxth	r2, r3
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800f0a4:	6878      	ldr	r0, [r7, #4]
 800f0a6:	f004 f809 	bl	80130bc <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	8b5b      	ldrh	r3, [r3, #26]
 800f0ae:	f023 0303 	bic.w	r3, r3, #3
 800f0b2:	b29a      	uxth	r2, r3
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	8b5b      	ldrh	r3, [r3, #26]
 800f0bc:	f003 0308 	and.w	r3, r3, #8
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d009      	beq.n	800f0d8 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	8b5b      	ldrh	r3, [r3, #26]
 800f0c8:	f023 0308 	bic.w	r3, r3, #8
 800f0cc:	b29a      	uxth	r2, r3
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800f0d2:	6878      	ldr	r0, [r7, #4]
 800f0d4:	f7ff f8be 	bl	800e254 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	68db      	ldr	r3, [r3, #12]
 800f0dc:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	d00a      	beq.n	800f0fc <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800f0e6:	4b0e      	ldr	r3, [pc, #56]	; (800f120 <tcp_fasttmr+0xc4>)
 800f0e8:	2200      	movs	r2, #0
 800f0ea:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800f0ec:	6878      	ldr	r0, [r7, #4]
 800f0ee:	f000 f819 	bl	800f124 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800f0f2:	4b0b      	ldr	r3, [pc, #44]	; (800f120 <tcp_fasttmr+0xc4>)
 800f0f4:	781b      	ldrb	r3, [r3, #0]
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d000      	beq.n	800f0fc <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800f0fa:	e7b8      	b.n	800f06e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800f0fc:	683b      	ldr	r3, [r7, #0]
 800f0fe:	607b      	str	r3, [r7, #4]
 800f100:	e002      	b.n	800f108 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	68db      	ldr	r3, [r3, #12]
 800f106:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d1b3      	bne.n	800f076 <tcp_fasttmr+0x1a>
    }
  }
}
 800f10e:	bf00      	nop
 800f110:	bf00      	nop
 800f112:	3708      	adds	r7, #8
 800f114:	46bd      	mov	sp, r7
 800f116:	bd80      	pop	{r7, pc}
 800f118:	240040be 	.word	0x240040be
 800f11c:	240079a8 	.word	0x240079a8
 800f120:	240079a4 	.word	0x240079a4

0800f124 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800f124:	b590      	push	{r4, r7, lr}
 800f126:	b085      	sub	sp, #20
 800f128:	af00      	add	r7, sp, #0
 800f12a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d109      	bne.n	800f146 <tcp_process_refused_data+0x22>
 800f132:	4b37      	ldr	r3, [pc, #220]	; (800f210 <tcp_process_refused_data+0xec>)
 800f134:	f240 6209 	movw	r2, #1545	; 0x609
 800f138:	4936      	ldr	r1, [pc, #216]	; (800f214 <tcp_process_refused_data+0xf0>)
 800f13a:	4837      	ldr	r0, [pc, #220]	; (800f218 <tcp_process_refused_data+0xf4>)
 800f13c:	f007 feac 	bl	8016e98 <iprintf>
 800f140:	f06f 030f 	mvn.w	r3, #15
 800f144:	e060      	b.n	800f208 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f14a:	7b5b      	ldrb	r3, [r3, #13]
 800f14c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f152:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	2200      	movs	r2, #0
 800f158:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f160:	2b00      	cmp	r3, #0
 800f162:	d00b      	beq.n	800f17c <tcp_process_refused_data+0x58>
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	6918      	ldr	r0, [r3, #16]
 800f16e:	2300      	movs	r3, #0
 800f170:	68ba      	ldr	r2, [r7, #8]
 800f172:	6879      	ldr	r1, [r7, #4]
 800f174:	47a0      	blx	r4
 800f176:	4603      	mov	r3, r0
 800f178:	73fb      	strb	r3, [r7, #15]
 800f17a:	e007      	b.n	800f18c <tcp_process_refused_data+0x68>
 800f17c:	2300      	movs	r3, #0
 800f17e:	68ba      	ldr	r2, [r7, #8]
 800f180:	6879      	ldr	r1, [r7, #4]
 800f182:	2000      	movs	r0, #0
 800f184:	f000 f8c2 	bl	800f30c <tcp_recv_null>
 800f188:	4603      	mov	r3, r0
 800f18a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800f18c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f190:	2b00      	cmp	r3, #0
 800f192:	d12a      	bne.n	800f1ea <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800f194:	7bbb      	ldrb	r3, [r7, #14]
 800f196:	f003 0320 	and.w	r3, r3, #32
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	d033      	beq.n	800f206 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f1a2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800f1a6:	d005      	beq.n	800f1b4 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f1ac:	3301      	adds	r3, #1
 800f1ae:	b29a      	uxth	r2, r3
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d00b      	beq.n	800f1d6 <tcp_process_refused_data+0xb2>
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	6918      	ldr	r0, [r3, #16]
 800f1c8:	2300      	movs	r3, #0
 800f1ca:	2200      	movs	r2, #0
 800f1cc:	6879      	ldr	r1, [r7, #4]
 800f1ce:	47a0      	blx	r4
 800f1d0:	4603      	mov	r3, r0
 800f1d2:	73fb      	strb	r3, [r7, #15]
 800f1d4:	e001      	b.n	800f1da <tcp_process_refused_data+0xb6>
 800f1d6:	2300      	movs	r3, #0
 800f1d8:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800f1da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f1de:	f113 0f0d 	cmn.w	r3, #13
 800f1e2:	d110      	bne.n	800f206 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800f1e4:	f06f 030c 	mvn.w	r3, #12
 800f1e8:	e00e      	b.n	800f208 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800f1ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f1ee:	f113 0f0d 	cmn.w	r3, #13
 800f1f2:	d102      	bne.n	800f1fa <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800f1f4:	f06f 030c 	mvn.w	r3, #12
 800f1f8:	e006      	b.n	800f208 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	68ba      	ldr	r2, [r7, #8]
 800f1fe:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800f200:	f06f 0304 	mvn.w	r3, #4
 800f204:	e000      	b.n	800f208 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800f206:	2300      	movs	r3, #0
}
 800f208:	4618      	mov	r0, r3
 800f20a:	3714      	adds	r7, #20
 800f20c:	46bd      	mov	sp, r7
 800f20e:	bd90      	pop	{r4, r7, pc}
 800f210:	08018b78 	.word	0x08018b78
 800f214:	08019088 	.word	0x08019088
 800f218:	08018bbc 	.word	0x08018bbc

0800f21c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800f21c:	b580      	push	{r7, lr}
 800f21e:	b084      	sub	sp, #16
 800f220:	af00      	add	r7, sp, #0
 800f222:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800f224:	e007      	b.n	800f236 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	681b      	ldr	r3, [r3, #0]
 800f22a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800f22c:	6878      	ldr	r0, [r7, #4]
 800f22e:	f000 f80a 	bl	800f246 <tcp_seg_free>
    seg = next;
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d1f4      	bne.n	800f226 <tcp_segs_free+0xa>
  }
}
 800f23c:	bf00      	nop
 800f23e:	bf00      	nop
 800f240:	3710      	adds	r7, #16
 800f242:	46bd      	mov	sp, r7
 800f244:	bd80      	pop	{r7, pc}

0800f246 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800f246:	b580      	push	{r7, lr}
 800f248:	b082      	sub	sp, #8
 800f24a:	af00      	add	r7, sp, #0
 800f24c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	2b00      	cmp	r3, #0
 800f252:	d00c      	beq.n	800f26e <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	685b      	ldr	r3, [r3, #4]
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d004      	beq.n	800f266 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	685b      	ldr	r3, [r3, #4]
 800f260:	4618      	mov	r0, r3
 800f262:	f7fe fba7 	bl	800d9b4 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800f266:	6879      	ldr	r1, [r7, #4]
 800f268:	2003      	movs	r0, #3
 800f26a:	f7fd fcff 	bl	800cc6c <memp_free>
  }
}
 800f26e:	bf00      	nop
 800f270:	3708      	adds	r7, #8
 800f272:	46bd      	mov	sp, r7
 800f274:	bd80      	pop	{r7, pc}
	...

0800f278 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 800f278:	b580      	push	{r7, lr}
 800f27a:	b082      	sub	sp, #8
 800f27c:	af00      	add	r7, sp, #0
 800f27e:	6078      	str	r0, [r7, #4]
 800f280:	460b      	mov	r3, r1
 800f282:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	2b00      	cmp	r3, #0
 800f288:	d107      	bne.n	800f29a <tcp_setprio+0x22>
 800f28a:	4b07      	ldr	r3, [pc, #28]	; (800f2a8 <tcp_setprio+0x30>)
 800f28c:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 800f290:	4906      	ldr	r1, [pc, #24]	; (800f2ac <tcp_setprio+0x34>)
 800f292:	4807      	ldr	r0, [pc, #28]	; (800f2b0 <tcp_setprio+0x38>)
 800f294:	f007 fe00 	bl	8016e98 <iprintf>
 800f298:	e002      	b.n	800f2a0 <tcp_setprio+0x28>

  pcb->prio = prio;
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	78fa      	ldrb	r2, [r7, #3]
 800f29e:	755a      	strb	r2, [r3, #21]
}
 800f2a0:	3708      	adds	r7, #8
 800f2a2:	46bd      	mov	sp, r7
 800f2a4:	bd80      	pop	{r7, pc}
 800f2a6:	bf00      	nop
 800f2a8:	08018b78 	.word	0x08018b78
 800f2ac:	080190b0 	.word	0x080190b0
 800f2b0:	08018bbc 	.word	0x08018bbc

0800f2b4 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800f2b4:	b580      	push	{r7, lr}
 800f2b6:	b084      	sub	sp, #16
 800f2b8:	af00      	add	r7, sp, #0
 800f2ba:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d106      	bne.n	800f2d0 <tcp_seg_copy+0x1c>
 800f2c2:	4b0f      	ldr	r3, [pc, #60]	; (800f300 <tcp_seg_copy+0x4c>)
 800f2c4:	f240 6282 	movw	r2, #1666	; 0x682
 800f2c8:	490e      	ldr	r1, [pc, #56]	; (800f304 <tcp_seg_copy+0x50>)
 800f2ca:	480f      	ldr	r0, [pc, #60]	; (800f308 <tcp_seg_copy+0x54>)
 800f2cc:	f007 fde4 	bl	8016e98 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800f2d0:	2003      	movs	r0, #3
 800f2d2:	f7fd fc55 	bl	800cb80 <memp_malloc>
 800f2d6:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800f2d8:	68fb      	ldr	r3, [r7, #12]
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d101      	bne.n	800f2e2 <tcp_seg_copy+0x2e>
    return NULL;
 800f2de:	2300      	movs	r3, #0
 800f2e0:	e00a      	b.n	800f2f8 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800f2e2:	2210      	movs	r2, #16
 800f2e4:	6879      	ldr	r1, [r7, #4]
 800f2e6:	68f8      	ldr	r0, [r7, #12]
 800f2e8:	f007 fdc0 	bl	8016e6c <memcpy>
  pbuf_ref(cseg->p);
 800f2ec:	68fb      	ldr	r3, [r7, #12]
 800f2ee:	685b      	ldr	r3, [r3, #4]
 800f2f0:	4618      	mov	r0, r3
 800f2f2:	f7fe fc05 	bl	800db00 <pbuf_ref>
  return cseg;
 800f2f6:	68fb      	ldr	r3, [r7, #12]
}
 800f2f8:	4618      	mov	r0, r3
 800f2fa:	3710      	adds	r7, #16
 800f2fc:	46bd      	mov	sp, r7
 800f2fe:	bd80      	pop	{r7, pc}
 800f300:	08018b78 	.word	0x08018b78
 800f304:	080190cc 	.word	0x080190cc
 800f308:	08018bbc 	.word	0x08018bbc

0800f30c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800f30c:	b580      	push	{r7, lr}
 800f30e:	b084      	sub	sp, #16
 800f310:	af00      	add	r7, sp, #0
 800f312:	60f8      	str	r0, [r7, #12]
 800f314:	60b9      	str	r1, [r7, #8]
 800f316:	607a      	str	r2, [r7, #4]
 800f318:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800f31a:	68bb      	ldr	r3, [r7, #8]
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d109      	bne.n	800f334 <tcp_recv_null+0x28>
 800f320:	4b12      	ldr	r3, [pc, #72]	; (800f36c <tcp_recv_null+0x60>)
 800f322:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800f326:	4912      	ldr	r1, [pc, #72]	; (800f370 <tcp_recv_null+0x64>)
 800f328:	4812      	ldr	r0, [pc, #72]	; (800f374 <tcp_recv_null+0x68>)
 800f32a:	f007 fdb5 	bl	8016e98 <iprintf>
 800f32e:	f06f 030f 	mvn.w	r3, #15
 800f332:	e016      	b.n	800f362 <tcp_recv_null+0x56>

  if (p != NULL) {
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	2b00      	cmp	r3, #0
 800f338:	d009      	beq.n	800f34e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	891b      	ldrh	r3, [r3, #8]
 800f33e:	4619      	mov	r1, r3
 800f340:	68b8      	ldr	r0, [r7, #8]
 800f342:	f7ff fab5 	bl	800e8b0 <tcp_recved>
    pbuf_free(p);
 800f346:	6878      	ldr	r0, [r7, #4]
 800f348:	f7fe fb34 	bl	800d9b4 <pbuf_free>
 800f34c:	e008      	b.n	800f360 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800f34e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f352:	2b00      	cmp	r3, #0
 800f354:	d104      	bne.n	800f360 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800f356:	68b8      	ldr	r0, [r7, #8]
 800f358:	f7fe ffe6 	bl	800e328 <tcp_close>
 800f35c:	4603      	mov	r3, r0
 800f35e:	e000      	b.n	800f362 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800f360:	2300      	movs	r3, #0
}
 800f362:	4618      	mov	r0, r3
 800f364:	3710      	adds	r7, #16
 800f366:	46bd      	mov	sp, r7
 800f368:	bd80      	pop	{r7, pc}
 800f36a:	bf00      	nop
 800f36c:	08018b78 	.word	0x08018b78
 800f370:	080190e8 	.word	0x080190e8
 800f374:	08018bbc 	.word	0x08018bbc

0800f378 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800f378:	b580      	push	{r7, lr}
 800f37a:	b086      	sub	sp, #24
 800f37c:	af00      	add	r7, sp, #0
 800f37e:	4603      	mov	r3, r0
 800f380:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800f382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f386:	2b00      	cmp	r3, #0
 800f388:	db01      	blt.n	800f38e <tcp_kill_prio+0x16>
 800f38a:	79fb      	ldrb	r3, [r7, #7]
 800f38c:	e000      	b.n	800f390 <tcp_kill_prio+0x18>
 800f38e:	237f      	movs	r3, #127	; 0x7f
 800f390:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800f392:	7afb      	ldrb	r3, [r7, #11]
 800f394:	2b00      	cmp	r3, #0
 800f396:	d034      	beq.n	800f402 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800f398:	7afb      	ldrb	r3, [r7, #11]
 800f39a:	3b01      	subs	r3, #1
 800f39c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800f39e:	2300      	movs	r3, #0
 800f3a0:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800f3a2:	2300      	movs	r3, #0
 800f3a4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f3a6:	4b19      	ldr	r3, [pc, #100]	; (800f40c <tcp_kill_prio+0x94>)
 800f3a8:	681b      	ldr	r3, [r3, #0]
 800f3aa:	617b      	str	r3, [r7, #20]
 800f3ac:	e01f      	b.n	800f3ee <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800f3ae:	697b      	ldr	r3, [r7, #20]
 800f3b0:	7d5b      	ldrb	r3, [r3, #21]
 800f3b2:	7afa      	ldrb	r2, [r7, #11]
 800f3b4:	429a      	cmp	r2, r3
 800f3b6:	d80c      	bhi.n	800f3d2 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800f3b8:	697b      	ldr	r3, [r7, #20]
 800f3ba:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800f3bc:	7afa      	ldrb	r2, [r7, #11]
 800f3be:	429a      	cmp	r2, r3
 800f3c0:	d112      	bne.n	800f3e8 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800f3c2:	4b13      	ldr	r3, [pc, #76]	; (800f410 <tcp_kill_prio+0x98>)
 800f3c4:	681a      	ldr	r2, [r3, #0]
 800f3c6:	697b      	ldr	r3, [r7, #20]
 800f3c8:	6a1b      	ldr	r3, [r3, #32]
 800f3ca:	1ad3      	subs	r3, r2, r3
 800f3cc:	68fa      	ldr	r2, [r7, #12]
 800f3ce:	429a      	cmp	r2, r3
 800f3d0:	d80a      	bhi.n	800f3e8 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800f3d2:	4b0f      	ldr	r3, [pc, #60]	; (800f410 <tcp_kill_prio+0x98>)
 800f3d4:	681a      	ldr	r2, [r3, #0]
 800f3d6:	697b      	ldr	r3, [r7, #20]
 800f3d8:	6a1b      	ldr	r3, [r3, #32]
 800f3da:	1ad3      	subs	r3, r2, r3
 800f3dc:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800f3de:	697b      	ldr	r3, [r7, #20]
 800f3e0:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800f3e2:	697b      	ldr	r3, [r7, #20]
 800f3e4:	7d5b      	ldrb	r3, [r3, #21]
 800f3e6:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f3e8:	697b      	ldr	r3, [r7, #20]
 800f3ea:	68db      	ldr	r3, [r3, #12]
 800f3ec:	617b      	str	r3, [r7, #20]
 800f3ee:	697b      	ldr	r3, [r7, #20]
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d1dc      	bne.n	800f3ae <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800f3f4:	693b      	ldr	r3, [r7, #16]
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d004      	beq.n	800f404 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800f3fa:	6938      	ldr	r0, [r7, #16]
 800f3fc:	f7ff f87e 	bl	800e4fc <tcp_abort>
 800f400:	e000      	b.n	800f404 <tcp_kill_prio+0x8c>
    return;
 800f402:	bf00      	nop
  }
}
 800f404:	3718      	adds	r7, #24
 800f406:	46bd      	mov	sp, r7
 800f408:	bd80      	pop	{r7, pc}
 800f40a:	bf00      	nop
 800f40c:	240079a8 	.word	0x240079a8
 800f410:	240079ac 	.word	0x240079ac

0800f414 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800f414:	b580      	push	{r7, lr}
 800f416:	b086      	sub	sp, #24
 800f418:	af00      	add	r7, sp, #0
 800f41a:	4603      	mov	r3, r0
 800f41c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800f41e:	79fb      	ldrb	r3, [r7, #7]
 800f420:	2b08      	cmp	r3, #8
 800f422:	d009      	beq.n	800f438 <tcp_kill_state+0x24>
 800f424:	79fb      	ldrb	r3, [r7, #7]
 800f426:	2b09      	cmp	r3, #9
 800f428:	d006      	beq.n	800f438 <tcp_kill_state+0x24>
 800f42a:	4b1a      	ldr	r3, [pc, #104]	; (800f494 <tcp_kill_state+0x80>)
 800f42c:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800f430:	4919      	ldr	r1, [pc, #100]	; (800f498 <tcp_kill_state+0x84>)
 800f432:	481a      	ldr	r0, [pc, #104]	; (800f49c <tcp_kill_state+0x88>)
 800f434:	f007 fd30 	bl	8016e98 <iprintf>

  inactivity = 0;
 800f438:	2300      	movs	r3, #0
 800f43a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800f43c:	2300      	movs	r3, #0
 800f43e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f440:	4b17      	ldr	r3, [pc, #92]	; (800f4a0 <tcp_kill_state+0x8c>)
 800f442:	681b      	ldr	r3, [r3, #0]
 800f444:	617b      	str	r3, [r7, #20]
 800f446:	e017      	b.n	800f478 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800f448:	697b      	ldr	r3, [r7, #20]
 800f44a:	7d1b      	ldrb	r3, [r3, #20]
 800f44c:	79fa      	ldrb	r2, [r7, #7]
 800f44e:	429a      	cmp	r2, r3
 800f450:	d10f      	bne.n	800f472 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800f452:	4b14      	ldr	r3, [pc, #80]	; (800f4a4 <tcp_kill_state+0x90>)
 800f454:	681a      	ldr	r2, [r3, #0]
 800f456:	697b      	ldr	r3, [r7, #20]
 800f458:	6a1b      	ldr	r3, [r3, #32]
 800f45a:	1ad3      	subs	r3, r2, r3
 800f45c:	68fa      	ldr	r2, [r7, #12]
 800f45e:	429a      	cmp	r2, r3
 800f460:	d807      	bhi.n	800f472 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800f462:	4b10      	ldr	r3, [pc, #64]	; (800f4a4 <tcp_kill_state+0x90>)
 800f464:	681a      	ldr	r2, [r3, #0]
 800f466:	697b      	ldr	r3, [r7, #20]
 800f468:	6a1b      	ldr	r3, [r3, #32]
 800f46a:	1ad3      	subs	r3, r2, r3
 800f46c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800f46e:	697b      	ldr	r3, [r7, #20]
 800f470:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f472:	697b      	ldr	r3, [r7, #20]
 800f474:	68db      	ldr	r3, [r3, #12]
 800f476:	617b      	str	r3, [r7, #20]
 800f478:	697b      	ldr	r3, [r7, #20]
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	d1e4      	bne.n	800f448 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800f47e:	693b      	ldr	r3, [r7, #16]
 800f480:	2b00      	cmp	r3, #0
 800f482:	d003      	beq.n	800f48c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800f484:	2100      	movs	r1, #0
 800f486:	6938      	ldr	r0, [r7, #16]
 800f488:	f7fe ff7a 	bl	800e380 <tcp_abandon>
  }
}
 800f48c:	bf00      	nop
 800f48e:	3718      	adds	r7, #24
 800f490:	46bd      	mov	sp, r7
 800f492:	bd80      	pop	{r7, pc}
 800f494:	08018b78 	.word	0x08018b78
 800f498:	08019104 	.word	0x08019104
 800f49c:	08018bbc 	.word	0x08018bbc
 800f4a0:	240079a8 	.word	0x240079a8
 800f4a4:	240079ac 	.word	0x240079ac

0800f4a8 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800f4a8:	b580      	push	{r7, lr}
 800f4aa:	b084      	sub	sp, #16
 800f4ac:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800f4ae:	2300      	movs	r3, #0
 800f4b0:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800f4b2:	2300      	movs	r3, #0
 800f4b4:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f4b6:	4b12      	ldr	r3, [pc, #72]	; (800f500 <tcp_kill_timewait+0x58>)
 800f4b8:	681b      	ldr	r3, [r3, #0]
 800f4ba:	60fb      	str	r3, [r7, #12]
 800f4bc:	e012      	b.n	800f4e4 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800f4be:	4b11      	ldr	r3, [pc, #68]	; (800f504 <tcp_kill_timewait+0x5c>)
 800f4c0:	681a      	ldr	r2, [r3, #0]
 800f4c2:	68fb      	ldr	r3, [r7, #12]
 800f4c4:	6a1b      	ldr	r3, [r3, #32]
 800f4c6:	1ad3      	subs	r3, r2, r3
 800f4c8:	687a      	ldr	r2, [r7, #4]
 800f4ca:	429a      	cmp	r2, r3
 800f4cc:	d807      	bhi.n	800f4de <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800f4ce:	4b0d      	ldr	r3, [pc, #52]	; (800f504 <tcp_kill_timewait+0x5c>)
 800f4d0:	681a      	ldr	r2, [r3, #0]
 800f4d2:	68fb      	ldr	r3, [r7, #12]
 800f4d4:	6a1b      	ldr	r3, [r3, #32]
 800f4d6:	1ad3      	subs	r3, r2, r3
 800f4d8:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800f4da:	68fb      	ldr	r3, [r7, #12]
 800f4dc:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f4de:	68fb      	ldr	r3, [r7, #12]
 800f4e0:	68db      	ldr	r3, [r3, #12]
 800f4e2:	60fb      	str	r3, [r7, #12]
 800f4e4:	68fb      	ldr	r3, [r7, #12]
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	d1e9      	bne.n	800f4be <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800f4ea:	68bb      	ldr	r3, [r7, #8]
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	d002      	beq.n	800f4f6 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800f4f0:	68b8      	ldr	r0, [r7, #8]
 800f4f2:	f7ff f803 	bl	800e4fc <tcp_abort>
  }
}
 800f4f6:	bf00      	nop
 800f4f8:	3710      	adds	r7, #16
 800f4fa:	46bd      	mov	sp, r7
 800f4fc:	bd80      	pop	{r7, pc}
 800f4fe:	bf00      	nop
 800f500:	240079b8 	.word	0x240079b8
 800f504:	240079ac 	.word	0x240079ac

0800f508 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800f508:	b580      	push	{r7, lr}
 800f50a:	b082      	sub	sp, #8
 800f50c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800f50e:	4b10      	ldr	r3, [pc, #64]	; (800f550 <tcp_handle_closepend+0x48>)
 800f510:	681b      	ldr	r3, [r3, #0]
 800f512:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800f514:	e014      	b.n	800f540 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	68db      	ldr	r3, [r3, #12]
 800f51a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	8b5b      	ldrh	r3, [r3, #26]
 800f520:	f003 0308 	and.w	r3, r3, #8
 800f524:	2b00      	cmp	r3, #0
 800f526:	d009      	beq.n	800f53c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	8b5b      	ldrh	r3, [r3, #26]
 800f52c:	f023 0308 	bic.w	r3, r3, #8
 800f530:	b29a      	uxth	r2, r3
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800f536:	6878      	ldr	r0, [r7, #4]
 800f538:	f7fe fe8c 	bl	800e254 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800f53c:	683b      	ldr	r3, [r7, #0]
 800f53e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	2b00      	cmp	r3, #0
 800f544:	d1e7      	bne.n	800f516 <tcp_handle_closepend+0xe>
  }
}
 800f546:	bf00      	nop
 800f548:	bf00      	nop
 800f54a:	3708      	adds	r7, #8
 800f54c:	46bd      	mov	sp, r7
 800f54e:	bd80      	pop	{r7, pc}
 800f550:	240079a8 	.word	0x240079a8

0800f554 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800f554:	b580      	push	{r7, lr}
 800f556:	b084      	sub	sp, #16
 800f558:	af00      	add	r7, sp, #0
 800f55a:	4603      	mov	r3, r0
 800f55c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f55e:	2001      	movs	r0, #1
 800f560:	f7fd fb0e 	bl	800cb80 <memp_malloc>
 800f564:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800f566:	68fb      	ldr	r3, [r7, #12]
 800f568:	2b00      	cmp	r3, #0
 800f56a:	d126      	bne.n	800f5ba <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800f56c:	f7ff ffcc 	bl	800f508 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800f570:	f7ff ff9a 	bl	800f4a8 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f574:	2001      	movs	r0, #1
 800f576:	f7fd fb03 	bl	800cb80 <memp_malloc>
 800f57a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800f57c:	68fb      	ldr	r3, [r7, #12]
 800f57e:	2b00      	cmp	r3, #0
 800f580:	d11b      	bne.n	800f5ba <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800f582:	2009      	movs	r0, #9
 800f584:	f7ff ff46 	bl	800f414 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f588:	2001      	movs	r0, #1
 800f58a:	f7fd faf9 	bl	800cb80 <memp_malloc>
 800f58e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800f590:	68fb      	ldr	r3, [r7, #12]
 800f592:	2b00      	cmp	r3, #0
 800f594:	d111      	bne.n	800f5ba <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800f596:	2008      	movs	r0, #8
 800f598:	f7ff ff3c 	bl	800f414 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f59c:	2001      	movs	r0, #1
 800f59e:	f7fd faef 	bl	800cb80 <memp_malloc>
 800f5a2:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800f5a4:	68fb      	ldr	r3, [r7, #12]
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	d107      	bne.n	800f5ba <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800f5aa:	79fb      	ldrb	r3, [r7, #7]
 800f5ac:	4618      	mov	r0, r3
 800f5ae:	f7ff fee3 	bl	800f378 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f5b2:	2001      	movs	r0, #1
 800f5b4:	f7fd fae4 	bl	800cb80 <memp_malloc>
 800f5b8:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800f5ba:	68fb      	ldr	r3, [r7, #12]
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d03f      	beq.n	800f640 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800f5c0:	229c      	movs	r2, #156	; 0x9c
 800f5c2:	2100      	movs	r1, #0
 800f5c4:	68f8      	ldr	r0, [r7, #12]
 800f5c6:	f007 fc5f 	bl	8016e88 <memset>
    pcb->prio = prio;
 800f5ca:	68fb      	ldr	r3, [r7, #12]
 800f5cc:	79fa      	ldrb	r2, [r7, #7]
 800f5ce:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800f5d0:	68fb      	ldr	r3, [r7, #12]
 800f5d2:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800f5d6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800f5da:	68fb      	ldr	r3, [r7, #12]
 800f5dc:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800f5e0:	855a      	strh	r2, [r3, #42]	; 0x2a
 800f5e2:	68fb      	ldr	r3, [r7, #12]
 800f5e4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800f5e6:	68fb      	ldr	r3, [r7, #12]
 800f5e8:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800f5ea:	68fb      	ldr	r3, [r7, #12]
 800f5ec:	22ff      	movs	r2, #255	; 0xff
 800f5ee:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800f5f0:	68fb      	ldr	r3, [r7, #12]
 800f5f2:	f44f 7206 	mov.w	r2, #536	; 0x218
 800f5f6:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800f5f8:	68fb      	ldr	r3, [r7, #12]
 800f5fa:	2206      	movs	r2, #6
 800f5fc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800f600:	68fb      	ldr	r3, [r7, #12]
 800f602:	2206      	movs	r2, #6
 800f604:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800f606:	68fb      	ldr	r3, [r7, #12]
 800f608:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f60c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800f60e:	68fb      	ldr	r3, [r7, #12]
 800f610:	2201      	movs	r2, #1
 800f612:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800f616:	4b0d      	ldr	r3, [pc, #52]	; (800f64c <tcp_alloc+0xf8>)
 800f618:	681a      	ldr	r2, [r3, #0]
 800f61a:	68fb      	ldr	r3, [r7, #12]
 800f61c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800f61e:	4b0c      	ldr	r3, [pc, #48]	; (800f650 <tcp_alloc+0xfc>)
 800f620:	781a      	ldrb	r2, [r3, #0]
 800f622:	68fb      	ldr	r3, [r7, #12]
 800f624:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800f626:	68fb      	ldr	r3, [r7, #12]
 800f628:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800f62c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800f630:	68fb      	ldr	r3, [r7, #12]
 800f632:	4a08      	ldr	r2, [pc, #32]	; (800f654 <tcp_alloc+0x100>)
 800f634:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800f638:	68fb      	ldr	r3, [r7, #12]
 800f63a:	4a07      	ldr	r2, [pc, #28]	; (800f658 <tcp_alloc+0x104>)
 800f63c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800f640:	68fb      	ldr	r3, [r7, #12]
}
 800f642:	4618      	mov	r0, r3
 800f644:	3710      	adds	r7, #16
 800f646:	46bd      	mov	sp, r7
 800f648:	bd80      	pop	{r7, pc}
 800f64a:	bf00      	nop
 800f64c:	240079ac 	.word	0x240079ac
 800f650:	240040be 	.word	0x240040be
 800f654:	0800f30d 	.word	0x0800f30d
 800f658:	006ddd00 	.word	0x006ddd00

0800f65c <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 800f65c:	b580      	push	{r7, lr}
 800f65e:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 800f660:	2040      	movs	r0, #64	; 0x40
 800f662:	f7ff ff77 	bl	800f554 <tcp_alloc>
 800f666:	4603      	mov	r3, r0
}
 800f668:	4618      	mov	r0, r3
 800f66a:	bd80      	pop	{r7, pc}

0800f66c <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800f66c:	b480      	push	{r7}
 800f66e:	b083      	sub	sp, #12
 800f670:	af00      	add	r7, sp, #0
 800f672:	6078      	str	r0, [r7, #4]
 800f674:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	2b00      	cmp	r3, #0
 800f67a:	d002      	beq.n	800f682 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	683a      	ldr	r2, [r7, #0]
 800f680:	611a      	str	r2, [r3, #16]
  }
}
 800f682:	bf00      	nop
 800f684:	370c      	adds	r7, #12
 800f686:	46bd      	mov	sp, r7
 800f688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f68c:	4770      	bx	lr
	...

0800f690 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800f690:	b580      	push	{r7, lr}
 800f692:	b082      	sub	sp, #8
 800f694:	af00      	add	r7, sp, #0
 800f696:	6078      	str	r0, [r7, #4]
 800f698:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	d00e      	beq.n	800f6be <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	7d1b      	ldrb	r3, [r3, #20]
 800f6a4:	2b01      	cmp	r3, #1
 800f6a6:	d106      	bne.n	800f6b6 <tcp_recv+0x26>
 800f6a8:	4b07      	ldr	r3, [pc, #28]	; (800f6c8 <tcp_recv+0x38>)
 800f6aa:	f240 72df 	movw	r2, #2015	; 0x7df
 800f6ae:	4907      	ldr	r1, [pc, #28]	; (800f6cc <tcp_recv+0x3c>)
 800f6b0:	4807      	ldr	r0, [pc, #28]	; (800f6d0 <tcp_recv+0x40>)
 800f6b2:	f007 fbf1 	bl	8016e98 <iprintf>
    pcb->recv = recv;
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	683a      	ldr	r2, [r7, #0]
 800f6ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800f6be:	bf00      	nop
 800f6c0:	3708      	adds	r7, #8
 800f6c2:	46bd      	mov	sp, r7
 800f6c4:	bd80      	pop	{r7, pc}
 800f6c6:	bf00      	nop
 800f6c8:	08018b78 	.word	0x08018b78
 800f6cc:	08019114 	.word	0x08019114
 800f6d0:	08018bbc 	.word	0x08018bbc

0800f6d4 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800f6d4:	b580      	push	{r7, lr}
 800f6d6:	b082      	sub	sp, #8
 800f6d8:	af00      	add	r7, sp, #0
 800f6da:	6078      	str	r0, [r7, #4]
 800f6dc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	2b00      	cmp	r3, #0
 800f6e2:	d00e      	beq.n	800f702 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	7d1b      	ldrb	r3, [r3, #20]
 800f6e8:	2b01      	cmp	r3, #1
 800f6ea:	d106      	bne.n	800f6fa <tcp_sent+0x26>
 800f6ec:	4b07      	ldr	r3, [pc, #28]	; (800f70c <tcp_sent+0x38>)
 800f6ee:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800f6f2:	4907      	ldr	r1, [pc, #28]	; (800f710 <tcp_sent+0x3c>)
 800f6f4:	4807      	ldr	r0, [pc, #28]	; (800f714 <tcp_sent+0x40>)
 800f6f6:	f007 fbcf 	bl	8016e98 <iprintf>
    pcb->sent = sent;
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	683a      	ldr	r2, [r7, #0]
 800f6fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800f702:	bf00      	nop
 800f704:	3708      	adds	r7, #8
 800f706:	46bd      	mov	sp, r7
 800f708:	bd80      	pop	{r7, pc}
 800f70a:	bf00      	nop
 800f70c:	08018b78 	.word	0x08018b78
 800f710:	0801913c 	.word	0x0801913c
 800f714:	08018bbc 	.word	0x08018bbc

0800f718 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800f718:	b580      	push	{r7, lr}
 800f71a:	b082      	sub	sp, #8
 800f71c:	af00      	add	r7, sp, #0
 800f71e:	6078      	str	r0, [r7, #4]
 800f720:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	2b00      	cmp	r3, #0
 800f726:	d00e      	beq.n	800f746 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	7d1b      	ldrb	r3, [r3, #20]
 800f72c:	2b01      	cmp	r3, #1
 800f72e:	d106      	bne.n	800f73e <tcp_err+0x26>
 800f730:	4b07      	ldr	r3, [pc, #28]	; (800f750 <tcp_err+0x38>)
 800f732:	f640 020d 	movw	r2, #2061	; 0x80d
 800f736:	4907      	ldr	r1, [pc, #28]	; (800f754 <tcp_err+0x3c>)
 800f738:	4807      	ldr	r0, [pc, #28]	; (800f758 <tcp_err+0x40>)
 800f73a:	f007 fbad 	bl	8016e98 <iprintf>
    pcb->errf = err;
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	683a      	ldr	r2, [r7, #0]
 800f742:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800f746:	bf00      	nop
 800f748:	3708      	adds	r7, #8
 800f74a:	46bd      	mov	sp, r7
 800f74c:	bd80      	pop	{r7, pc}
 800f74e:	bf00      	nop
 800f750:	08018b78 	.word	0x08018b78
 800f754:	08019164 	.word	0x08019164
 800f758:	08018bbc 	.word	0x08018bbc

0800f75c <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800f75c:	b480      	push	{r7}
 800f75e:	b085      	sub	sp, #20
 800f760:	af00      	add	r7, sp, #0
 800f762:	6078      	str	r0, [r7, #4]
 800f764:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d008      	beq.n	800f77e <tcp_accept+0x22>
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	7d1b      	ldrb	r3, [r3, #20]
 800f770:	2b01      	cmp	r3, #1
 800f772:	d104      	bne.n	800f77e <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800f778:	68fb      	ldr	r3, [r7, #12]
 800f77a:	683a      	ldr	r2, [r7, #0]
 800f77c:	619a      	str	r2, [r3, #24]
  }
}
 800f77e:	bf00      	nop
 800f780:	3714      	adds	r7, #20
 800f782:	46bd      	mov	sp, r7
 800f784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f788:	4770      	bx	lr
	...

0800f78c <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800f78c:	b580      	push	{r7, lr}
 800f78e:	b084      	sub	sp, #16
 800f790:	af00      	add	r7, sp, #0
 800f792:	60f8      	str	r0, [r7, #12]
 800f794:	60b9      	str	r1, [r7, #8]
 800f796:	4613      	mov	r3, r2
 800f798:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800f79a:	68fb      	ldr	r3, [r7, #12]
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	d107      	bne.n	800f7b0 <tcp_poll+0x24>
 800f7a0:	4b0e      	ldr	r3, [pc, #56]	; (800f7dc <tcp_poll+0x50>)
 800f7a2:	f640 023d 	movw	r2, #2109	; 0x83d
 800f7a6:	490e      	ldr	r1, [pc, #56]	; (800f7e0 <tcp_poll+0x54>)
 800f7a8:	480e      	ldr	r0, [pc, #56]	; (800f7e4 <tcp_poll+0x58>)
 800f7aa:	f007 fb75 	bl	8016e98 <iprintf>
 800f7ae:	e011      	b.n	800f7d4 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800f7b0:	68fb      	ldr	r3, [r7, #12]
 800f7b2:	7d1b      	ldrb	r3, [r3, #20]
 800f7b4:	2b01      	cmp	r3, #1
 800f7b6:	d106      	bne.n	800f7c6 <tcp_poll+0x3a>
 800f7b8:	4b08      	ldr	r3, [pc, #32]	; (800f7dc <tcp_poll+0x50>)
 800f7ba:	f640 023e 	movw	r2, #2110	; 0x83e
 800f7be:	490a      	ldr	r1, [pc, #40]	; (800f7e8 <tcp_poll+0x5c>)
 800f7c0:	4808      	ldr	r0, [pc, #32]	; (800f7e4 <tcp_poll+0x58>)
 800f7c2:	f007 fb69 	bl	8016e98 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800f7c6:	68fb      	ldr	r3, [r7, #12]
 800f7c8:	68ba      	ldr	r2, [r7, #8]
 800f7ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800f7ce:	68fb      	ldr	r3, [r7, #12]
 800f7d0:	79fa      	ldrb	r2, [r7, #7]
 800f7d2:	775a      	strb	r2, [r3, #29]
}
 800f7d4:	3710      	adds	r7, #16
 800f7d6:	46bd      	mov	sp, r7
 800f7d8:	bd80      	pop	{r7, pc}
 800f7da:	bf00      	nop
 800f7dc:	08018b78 	.word	0x08018b78
 800f7e0:	0801918c 	.word	0x0801918c
 800f7e4:	08018bbc 	.word	0x08018bbc
 800f7e8:	080191a4 	.word	0x080191a4

0800f7ec <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800f7ec:	b580      	push	{r7, lr}
 800f7ee:	b082      	sub	sp, #8
 800f7f0:	af00      	add	r7, sp, #0
 800f7f2:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d107      	bne.n	800f80a <tcp_pcb_purge+0x1e>
 800f7fa:	4b21      	ldr	r3, [pc, #132]	; (800f880 <tcp_pcb_purge+0x94>)
 800f7fc:	f640 0251 	movw	r2, #2129	; 0x851
 800f800:	4920      	ldr	r1, [pc, #128]	; (800f884 <tcp_pcb_purge+0x98>)
 800f802:	4821      	ldr	r0, [pc, #132]	; (800f888 <tcp_pcb_purge+0x9c>)
 800f804:	f007 fb48 	bl	8016e98 <iprintf>
 800f808:	e037      	b.n	800f87a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	7d1b      	ldrb	r3, [r3, #20]
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d033      	beq.n	800f87a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800f816:	2b0a      	cmp	r3, #10
 800f818:	d02f      	beq.n	800f87a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800f81e:	2b01      	cmp	r3, #1
 800f820:	d02b      	beq.n	800f87a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f826:	2b00      	cmp	r3, #0
 800f828:	d007      	beq.n	800f83a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f82e:	4618      	mov	r0, r3
 800f830:	f7fe f8c0 	bl	800d9b4 <pbuf_free>
      pcb->refused_data = NULL;
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	2200      	movs	r2, #0
 800f838:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f83e:	2b00      	cmp	r3, #0
 800f840:	d002      	beq.n	800f848 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800f842:	6878      	ldr	r0, [r7, #4]
 800f844:	f000 f986 	bl	800fb54 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f84e:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f854:	4618      	mov	r0, r3
 800f856:	f7ff fce1 	bl	800f21c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f85e:	4618      	mov	r0, r3
 800f860:	f7ff fcdc 	bl	800f21c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	2200      	movs	r2, #0
 800f868:	66da      	str	r2, [r3, #108]	; 0x6c
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	2200      	movs	r2, #0
 800f876:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800f87a:	3708      	adds	r7, #8
 800f87c:	46bd      	mov	sp, r7
 800f87e:	bd80      	pop	{r7, pc}
 800f880:	08018b78 	.word	0x08018b78
 800f884:	080191c4 	.word	0x080191c4
 800f888:	08018bbc 	.word	0x08018bbc

0800f88c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800f88c:	b580      	push	{r7, lr}
 800f88e:	b084      	sub	sp, #16
 800f890:	af00      	add	r7, sp, #0
 800f892:	6078      	str	r0, [r7, #4]
 800f894:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800f896:	683b      	ldr	r3, [r7, #0]
 800f898:	2b00      	cmp	r3, #0
 800f89a:	d106      	bne.n	800f8aa <tcp_pcb_remove+0x1e>
 800f89c:	4b3e      	ldr	r3, [pc, #248]	; (800f998 <tcp_pcb_remove+0x10c>)
 800f89e:	f640 0283 	movw	r2, #2179	; 0x883
 800f8a2:	493e      	ldr	r1, [pc, #248]	; (800f99c <tcp_pcb_remove+0x110>)
 800f8a4:	483e      	ldr	r0, [pc, #248]	; (800f9a0 <tcp_pcb_remove+0x114>)
 800f8a6:	f007 faf7 	bl	8016e98 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	d106      	bne.n	800f8be <tcp_pcb_remove+0x32>
 800f8b0:	4b39      	ldr	r3, [pc, #228]	; (800f998 <tcp_pcb_remove+0x10c>)
 800f8b2:	f640 0284 	movw	r2, #2180	; 0x884
 800f8b6:	493b      	ldr	r1, [pc, #236]	; (800f9a4 <tcp_pcb_remove+0x118>)
 800f8b8:	4839      	ldr	r0, [pc, #228]	; (800f9a0 <tcp_pcb_remove+0x114>)
 800f8ba:	f007 faed 	bl	8016e98 <iprintf>

  TCP_RMV(pcblist, pcb);
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	681b      	ldr	r3, [r3, #0]
 800f8c2:	683a      	ldr	r2, [r7, #0]
 800f8c4:	429a      	cmp	r2, r3
 800f8c6:	d105      	bne.n	800f8d4 <tcp_pcb_remove+0x48>
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	681b      	ldr	r3, [r3, #0]
 800f8cc:	68da      	ldr	r2, [r3, #12]
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	601a      	str	r2, [r3, #0]
 800f8d2:	e013      	b.n	800f8fc <tcp_pcb_remove+0x70>
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	681b      	ldr	r3, [r3, #0]
 800f8d8:	60fb      	str	r3, [r7, #12]
 800f8da:	e00c      	b.n	800f8f6 <tcp_pcb_remove+0x6a>
 800f8dc:	68fb      	ldr	r3, [r7, #12]
 800f8de:	68db      	ldr	r3, [r3, #12]
 800f8e0:	683a      	ldr	r2, [r7, #0]
 800f8e2:	429a      	cmp	r2, r3
 800f8e4:	d104      	bne.n	800f8f0 <tcp_pcb_remove+0x64>
 800f8e6:	683b      	ldr	r3, [r7, #0]
 800f8e8:	68da      	ldr	r2, [r3, #12]
 800f8ea:	68fb      	ldr	r3, [r7, #12]
 800f8ec:	60da      	str	r2, [r3, #12]
 800f8ee:	e005      	b.n	800f8fc <tcp_pcb_remove+0x70>
 800f8f0:	68fb      	ldr	r3, [r7, #12]
 800f8f2:	68db      	ldr	r3, [r3, #12]
 800f8f4:	60fb      	str	r3, [r7, #12]
 800f8f6:	68fb      	ldr	r3, [r7, #12]
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d1ef      	bne.n	800f8dc <tcp_pcb_remove+0x50>
 800f8fc:	683b      	ldr	r3, [r7, #0]
 800f8fe:	2200      	movs	r2, #0
 800f900:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800f902:	6838      	ldr	r0, [r7, #0]
 800f904:	f7ff ff72 	bl	800f7ec <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800f908:	683b      	ldr	r3, [r7, #0]
 800f90a:	7d1b      	ldrb	r3, [r3, #20]
 800f90c:	2b0a      	cmp	r3, #10
 800f90e:	d013      	beq.n	800f938 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800f910:	683b      	ldr	r3, [r7, #0]
 800f912:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800f914:	2b01      	cmp	r3, #1
 800f916:	d00f      	beq.n	800f938 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800f918:	683b      	ldr	r3, [r7, #0]
 800f91a:	8b5b      	ldrh	r3, [r3, #26]
 800f91c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800f920:	2b00      	cmp	r3, #0
 800f922:	d009      	beq.n	800f938 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800f924:	683b      	ldr	r3, [r7, #0]
 800f926:	8b5b      	ldrh	r3, [r3, #26]
 800f928:	f043 0302 	orr.w	r3, r3, #2
 800f92c:	b29a      	uxth	r2, r3
 800f92e:	683b      	ldr	r3, [r7, #0]
 800f930:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f932:	6838      	ldr	r0, [r7, #0]
 800f934:	f003 fbc2 	bl	80130bc <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800f938:	683b      	ldr	r3, [r7, #0]
 800f93a:	7d1b      	ldrb	r3, [r3, #20]
 800f93c:	2b01      	cmp	r3, #1
 800f93e:	d020      	beq.n	800f982 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800f940:	683b      	ldr	r3, [r7, #0]
 800f942:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f944:	2b00      	cmp	r3, #0
 800f946:	d006      	beq.n	800f956 <tcp_pcb_remove+0xca>
 800f948:	4b13      	ldr	r3, [pc, #76]	; (800f998 <tcp_pcb_remove+0x10c>)
 800f94a:	f640 0293 	movw	r2, #2195	; 0x893
 800f94e:	4916      	ldr	r1, [pc, #88]	; (800f9a8 <tcp_pcb_remove+0x11c>)
 800f950:	4813      	ldr	r0, [pc, #76]	; (800f9a0 <tcp_pcb_remove+0x114>)
 800f952:	f007 faa1 	bl	8016e98 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800f956:	683b      	ldr	r3, [r7, #0]
 800f958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	d006      	beq.n	800f96c <tcp_pcb_remove+0xe0>
 800f95e:	4b0e      	ldr	r3, [pc, #56]	; (800f998 <tcp_pcb_remove+0x10c>)
 800f960:	f640 0294 	movw	r2, #2196	; 0x894
 800f964:	4911      	ldr	r1, [pc, #68]	; (800f9ac <tcp_pcb_remove+0x120>)
 800f966:	480e      	ldr	r0, [pc, #56]	; (800f9a0 <tcp_pcb_remove+0x114>)
 800f968:	f007 fa96 	bl	8016e98 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800f96c:	683b      	ldr	r3, [r7, #0]
 800f96e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f970:	2b00      	cmp	r3, #0
 800f972:	d006      	beq.n	800f982 <tcp_pcb_remove+0xf6>
 800f974:	4b08      	ldr	r3, [pc, #32]	; (800f998 <tcp_pcb_remove+0x10c>)
 800f976:	f640 0296 	movw	r2, #2198	; 0x896
 800f97a:	490d      	ldr	r1, [pc, #52]	; (800f9b0 <tcp_pcb_remove+0x124>)
 800f97c:	4808      	ldr	r0, [pc, #32]	; (800f9a0 <tcp_pcb_remove+0x114>)
 800f97e:	f007 fa8b 	bl	8016e98 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800f982:	683b      	ldr	r3, [r7, #0]
 800f984:	2200      	movs	r2, #0
 800f986:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800f988:	683b      	ldr	r3, [r7, #0]
 800f98a:	2200      	movs	r2, #0
 800f98c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800f98e:	bf00      	nop
 800f990:	3710      	adds	r7, #16
 800f992:	46bd      	mov	sp, r7
 800f994:	bd80      	pop	{r7, pc}
 800f996:	bf00      	nop
 800f998:	08018b78 	.word	0x08018b78
 800f99c:	080191e0 	.word	0x080191e0
 800f9a0:	08018bbc 	.word	0x08018bbc
 800f9a4:	080191fc 	.word	0x080191fc
 800f9a8:	0801921c 	.word	0x0801921c
 800f9ac:	08019234 	.word	0x08019234
 800f9b0:	08019250 	.word	0x08019250

0800f9b4 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800f9b4:	b580      	push	{r7, lr}
 800f9b6:	b082      	sub	sp, #8
 800f9b8:	af00      	add	r7, sp, #0
 800f9ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	2b00      	cmp	r3, #0
 800f9c0:	d106      	bne.n	800f9d0 <tcp_next_iss+0x1c>
 800f9c2:	4b0a      	ldr	r3, [pc, #40]	; (800f9ec <tcp_next_iss+0x38>)
 800f9c4:	f640 02af 	movw	r2, #2223	; 0x8af
 800f9c8:	4909      	ldr	r1, [pc, #36]	; (800f9f0 <tcp_next_iss+0x3c>)
 800f9ca:	480a      	ldr	r0, [pc, #40]	; (800f9f4 <tcp_next_iss+0x40>)
 800f9cc:	f007 fa64 	bl	8016e98 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800f9d0:	4b09      	ldr	r3, [pc, #36]	; (800f9f8 <tcp_next_iss+0x44>)
 800f9d2:	681a      	ldr	r2, [r3, #0]
 800f9d4:	4b09      	ldr	r3, [pc, #36]	; (800f9fc <tcp_next_iss+0x48>)
 800f9d6:	681b      	ldr	r3, [r3, #0]
 800f9d8:	4413      	add	r3, r2
 800f9da:	4a07      	ldr	r2, [pc, #28]	; (800f9f8 <tcp_next_iss+0x44>)
 800f9dc:	6013      	str	r3, [r2, #0]
  return iss;
 800f9de:	4b06      	ldr	r3, [pc, #24]	; (800f9f8 <tcp_next_iss+0x44>)
 800f9e0:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800f9e2:	4618      	mov	r0, r3
 800f9e4:	3708      	adds	r7, #8
 800f9e6:	46bd      	mov	sp, r7
 800f9e8:	bd80      	pop	{r7, pc}
 800f9ea:	bf00      	nop
 800f9ec:	08018b78 	.word	0x08018b78
 800f9f0:	08019268 	.word	0x08019268
 800f9f4:	08018bbc 	.word	0x08018bbc
 800f9f8:	2400002c 	.word	0x2400002c
 800f9fc:	240079ac 	.word	0x240079ac

0800fa00 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800fa00:	b580      	push	{r7, lr}
 800fa02:	b086      	sub	sp, #24
 800fa04:	af00      	add	r7, sp, #0
 800fa06:	4603      	mov	r3, r0
 800fa08:	60b9      	str	r1, [r7, #8]
 800fa0a:	607a      	str	r2, [r7, #4]
 800fa0c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	d106      	bne.n	800fa22 <tcp_eff_send_mss_netif+0x22>
 800fa14:	4b14      	ldr	r3, [pc, #80]	; (800fa68 <tcp_eff_send_mss_netif+0x68>)
 800fa16:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800fa1a:	4914      	ldr	r1, [pc, #80]	; (800fa6c <tcp_eff_send_mss_netif+0x6c>)
 800fa1c:	4814      	ldr	r0, [pc, #80]	; (800fa70 <tcp_eff_send_mss_netif+0x70>)
 800fa1e:	f007 fa3b 	bl	8016e98 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800fa22:	68bb      	ldr	r3, [r7, #8]
 800fa24:	2b00      	cmp	r3, #0
 800fa26:	d101      	bne.n	800fa2c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800fa28:	89fb      	ldrh	r3, [r7, #14]
 800fa2a:	e019      	b.n	800fa60 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800fa2c:	68bb      	ldr	r3, [r7, #8]
 800fa2e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800fa30:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800fa32:	8afb      	ldrh	r3, [r7, #22]
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	d012      	beq.n	800fa5e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800fa38:	2328      	movs	r3, #40	; 0x28
 800fa3a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800fa3c:	8afa      	ldrh	r2, [r7, #22]
 800fa3e:	8abb      	ldrh	r3, [r7, #20]
 800fa40:	429a      	cmp	r2, r3
 800fa42:	d904      	bls.n	800fa4e <tcp_eff_send_mss_netif+0x4e>
 800fa44:	8afa      	ldrh	r2, [r7, #22]
 800fa46:	8abb      	ldrh	r3, [r7, #20]
 800fa48:	1ad3      	subs	r3, r2, r3
 800fa4a:	b29b      	uxth	r3, r3
 800fa4c:	e000      	b.n	800fa50 <tcp_eff_send_mss_netif+0x50>
 800fa4e:	2300      	movs	r3, #0
 800fa50:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800fa52:	8a7a      	ldrh	r2, [r7, #18]
 800fa54:	89fb      	ldrh	r3, [r7, #14]
 800fa56:	4293      	cmp	r3, r2
 800fa58:	bf28      	it	cs
 800fa5a:	4613      	movcs	r3, r2
 800fa5c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800fa5e:	89fb      	ldrh	r3, [r7, #14]
}
 800fa60:	4618      	mov	r0, r3
 800fa62:	3718      	adds	r7, #24
 800fa64:	46bd      	mov	sp, r7
 800fa66:	bd80      	pop	{r7, pc}
 800fa68:	08018b78 	.word	0x08018b78
 800fa6c:	08019284 	.word	0x08019284
 800fa70:	08018bbc 	.word	0x08018bbc

0800fa74 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800fa74:	b580      	push	{r7, lr}
 800fa76:	b084      	sub	sp, #16
 800fa78:	af00      	add	r7, sp, #0
 800fa7a:	6078      	str	r0, [r7, #4]
 800fa7c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800fa7e:	683b      	ldr	r3, [r7, #0]
 800fa80:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	d119      	bne.n	800fabc <tcp_netif_ip_addr_changed_pcblist+0x48>
 800fa88:	4b10      	ldr	r3, [pc, #64]	; (800facc <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800fa8a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800fa8e:	4910      	ldr	r1, [pc, #64]	; (800fad0 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800fa90:	4810      	ldr	r0, [pc, #64]	; (800fad4 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800fa92:	f007 fa01 	bl	8016e98 <iprintf>

  while (pcb != NULL) {
 800fa96:	e011      	b.n	800fabc <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800fa98:	68fb      	ldr	r3, [r7, #12]
 800fa9a:	681a      	ldr	r2, [r3, #0]
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	681b      	ldr	r3, [r3, #0]
 800faa0:	429a      	cmp	r2, r3
 800faa2:	d108      	bne.n	800fab6 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800faa4:	68fb      	ldr	r3, [r7, #12]
 800faa6:	68db      	ldr	r3, [r3, #12]
 800faa8:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800faaa:	68f8      	ldr	r0, [r7, #12]
 800faac:	f7fe fd26 	bl	800e4fc <tcp_abort>
      pcb = next;
 800fab0:	68bb      	ldr	r3, [r7, #8]
 800fab2:	60fb      	str	r3, [r7, #12]
 800fab4:	e002      	b.n	800fabc <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800fab6:	68fb      	ldr	r3, [r7, #12]
 800fab8:	68db      	ldr	r3, [r3, #12]
 800faba:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800fabc:	68fb      	ldr	r3, [r7, #12]
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	d1ea      	bne.n	800fa98 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800fac2:	bf00      	nop
 800fac4:	bf00      	nop
 800fac6:	3710      	adds	r7, #16
 800fac8:	46bd      	mov	sp, r7
 800faca:	bd80      	pop	{r7, pc}
 800facc:	08018b78 	.word	0x08018b78
 800fad0:	080192ac 	.word	0x080192ac
 800fad4:	08018bbc 	.word	0x08018bbc

0800fad8 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800fad8:	b580      	push	{r7, lr}
 800fada:	b084      	sub	sp, #16
 800fadc:	af00      	add	r7, sp, #0
 800fade:	6078      	str	r0, [r7, #4]
 800fae0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	d02a      	beq.n	800fb3e <tcp_netif_ip_addr_changed+0x66>
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	681b      	ldr	r3, [r3, #0]
 800faec:	2b00      	cmp	r3, #0
 800faee:	d026      	beq.n	800fb3e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800faf0:	4b15      	ldr	r3, [pc, #84]	; (800fb48 <tcp_netif_ip_addr_changed+0x70>)
 800faf2:	681b      	ldr	r3, [r3, #0]
 800faf4:	4619      	mov	r1, r3
 800faf6:	6878      	ldr	r0, [r7, #4]
 800faf8:	f7ff ffbc 	bl	800fa74 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800fafc:	4b13      	ldr	r3, [pc, #76]	; (800fb4c <tcp_netif_ip_addr_changed+0x74>)
 800fafe:	681b      	ldr	r3, [r3, #0]
 800fb00:	4619      	mov	r1, r3
 800fb02:	6878      	ldr	r0, [r7, #4]
 800fb04:	f7ff ffb6 	bl	800fa74 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800fb08:	683b      	ldr	r3, [r7, #0]
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d017      	beq.n	800fb3e <tcp_netif_ip_addr_changed+0x66>
 800fb0e:	683b      	ldr	r3, [r7, #0]
 800fb10:	681b      	ldr	r3, [r3, #0]
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	d013      	beq.n	800fb3e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800fb16:	4b0e      	ldr	r3, [pc, #56]	; (800fb50 <tcp_netif_ip_addr_changed+0x78>)
 800fb18:	681b      	ldr	r3, [r3, #0]
 800fb1a:	60fb      	str	r3, [r7, #12]
 800fb1c:	e00c      	b.n	800fb38 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800fb1e:	68fb      	ldr	r3, [r7, #12]
 800fb20:	681a      	ldr	r2, [r3, #0]
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	681b      	ldr	r3, [r3, #0]
 800fb26:	429a      	cmp	r2, r3
 800fb28:	d103      	bne.n	800fb32 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800fb2a:	683b      	ldr	r3, [r7, #0]
 800fb2c:	681a      	ldr	r2, [r3, #0]
 800fb2e:	68fb      	ldr	r3, [r7, #12]
 800fb30:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800fb32:	68fb      	ldr	r3, [r7, #12]
 800fb34:	68db      	ldr	r3, [r3, #12]
 800fb36:	60fb      	str	r3, [r7, #12]
 800fb38:	68fb      	ldr	r3, [r7, #12]
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d1ef      	bne.n	800fb1e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800fb3e:	bf00      	nop
 800fb40:	3710      	adds	r7, #16
 800fb42:	46bd      	mov	sp, r7
 800fb44:	bd80      	pop	{r7, pc}
 800fb46:	bf00      	nop
 800fb48:	240079a8 	.word	0x240079a8
 800fb4c:	240079b4 	.word	0x240079b4
 800fb50:	240079b0 	.word	0x240079b0

0800fb54 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800fb54:	b580      	push	{r7, lr}
 800fb56:	b082      	sub	sp, #8
 800fb58:	af00      	add	r7, sp, #0
 800fb5a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	d007      	beq.n	800fb74 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fb68:	4618      	mov	r0, r3
 800fb6a:	f7ff fb57 	bl	800f21c <tcp_segs_free>
    pcb->ooseq = NULL;
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	2200      	movs	r2, #0
 800fb72:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800fb74:	bf00      	nop
 800fb76:	3708      	adds	r7, #8
 800fb78:	46bd      	mov	sp, r7
 800fb7a:	bd80      	pop	{r7, pc}

0800fb7c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800fb7c:	b590      	push	{r4, r7, lr}
 800fb7e:	b08d      	sub	sp, #52	; 0x34
 800fb80:	af04      	add	r7, sp, #16
 800fb82:	6078      	str	r0, [r7, #4]
 800fb84:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	d105      	bne.n	800fb98 <tcp_input+0x1c>
 800fb8c:	4b9b      	ldr	r3, [pc, #620]	; (800fdfc <tcp_input+0x280>)
 800fb8e:	2283      	movs	r2, #131	; 0x83
 800fb90:	499b      	ldr	r1, [pc, #620]	; (800fe00 <tcp_input+0x284>)
 800fb92:	489c      	ldr	r0, [pc, #624]	; (800fe04 <tcp_input+0x288>)
 800fb94:	f007 f980 	bl	8016e98 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	685b      	ldr	r3, [r3, #4]
 800fb9c:	4a9a      	ldr	r2, [pc, #616]	; (800fe08 <tcp_input+0x28c>)
 800fb9e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	895b      	ldrh	r3, [r3, #10]
 800fba4:	2b13      	cmp	r3, #19
 800fba6:	f240 83c4 	bls.w	8010332 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800fbaa:	4b98      	ldr	r3, [pc, #608]	; (800fe0c <tcp_input+0x290>)
 800fbac:	695b      	ldr	r3, [r3, #20]
 800fbae:	4a97      	ldr	r2, [pc, #604]	; (800fe0c <tcp_input+0x290>)
 800fbb0:	6812      	ldr	r2, [r2, #0]
 800fbb2:	4611      	mov	r1, r2
 800fbb4:	4618      	mov	r0, r3
 800fbb6:	f006 f8c1 	bl	8015d3c <ip4_addr_isbroadcast_u32>
 800fbba:	4603      	mov	r3, r0
 800fbbc:	2b00      	cmp	r3, #0
 800fbbe:	f040 83ba 	bne.w	8010336 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800fbc2:	4b92      	ldr	r3, [pc, #584]	; (800fe0c <tcp_input+0x290>)
 800fbc4:	695b      	ldr	r3, [r3, #20]
 800fbc6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800fbca:	2be0      	cmp	r3, #224	; 0xe0
 800fbcc:	f000 83b3 	beq.w	8010336 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800fbd0:	4b8d      	ldr	r3, [pc, #564]	; (800fe08 <tcp_input+0x28c>)
 800fbd2:	681b      	ldr	r3, [r3, #0]
 800fbd4:	899b      	ldrh	r3, [r3, #12]
 800fbd6:	b29b      	uxth	r3, r3
 800fbd8:	4618      	mov	r0, r3
 800fbda:	f7fc fa31 	bl	800c040 <lwip_htons>
 800fbde:	4603      	mov	r3, r0
 800fbe0:	0b1b      	lsrs	r3, r3, #12
 800fbe2:	b29b      	uxth	r3, r3
 800fbe4:	b2db      	uxtb	r3, r3
 800fbe6:	009b      	lsls	r3, r3, #2
 800fbe8:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800fbea:	7cbb      	ldrb	r3, [r7, #18]
 800fbec:	2b13      	cmp	r3, #19
 800fbee:	f240 83a4 	bls.w	801033a <tcp_input+0x7be>
 800fbf2:	7cbb      	ldrb	r3, [r7, #18]
 800fbf4:	b29a      	uxth	r2, r3
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	891b      	ldrh	r3, [r3, #8]
 800fbfa:	429a      	cmp	r2, r3
 800fbfc:	f200 839d 	bhi.w	801033a <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800fc00:	7cbb      	ldrb	r3, [r7, #18]
 800fc02:	b29b      	uxth	r3, r3
 800fc04:	3b14      	subs	r3, #20
 800fc06:	b29a      	uxth	r2, r3
 800fc08:	4b81      	ldr	r3, [pc, #516]	; (800fe10 <tcp_input+0x294>)
 800fc0a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800fc0c:	4b81      	ldr	r3, [pc, #516]	; (800fe14 <tcp_input+0x298>)
 800fc0e:	2200      	movs	r2, #0
 800fc10:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	895a      	ldrh	r2, [r3, #10]
 800fc16:	7cbb      	ldrb	r3, [r7, #18]
 800fc18:	b29b      	uxth	r3, r3
 800fc1a:	429a      	cmp	r2, r3
 800fc1c:	d309      	bcc.n	800fc32 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800fc1e:	4b7c      	ldr	r3, [pc, #496]	; (800fe10 <tcp_input+0x294>)
 800fc20:	881a      	ldrh	r2, [r3, #0]
 800fc22:	4b7d      	ldr	r3, [pc, #500]	; (800fe18 <tcp_input+0x29c>)
 800fc24:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800fc26:	7cbb      	ldrb	r3, [r7, #18]
 800fc28:	4619      	mov	r1, r3
 800fc2a:	6878      	ldr	r0, [r7, #4]
 800fc2c:	f7fd fe3c 	bl	800d8a8 <pbuf_remove_header>
 800fc30:	e04e      	b.n	800fcd0 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	681b      	ldr	r3, [r3, #0]
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d105      	bne.n	800fc46 <tcp_input+0xca>
 800fc3a:	4b70      	ldr	r3, [pc, #448]	; (800fdfc <tcp_input+0x280>)
 800fc3c:	22c2      	movs	r2, #194	; 0xc2
 800fc3e:	4977      	ldr	r1, [pc, #476]	; (800fe1c <tcp_input+0x2a0>)
 800fc40:	4870      	ldr	r0, [pc, #448]	; (800fe04 <tcp_input+0x288>)
 800fc42:	f007 f929 	bl	8016e98 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800fc46:	2114      	movs	r1, #20
 800fc48:	6878      	ldr	r0, [r7, #4]
 800fc4a:	f7fd fe2d 	bl	800d8a8 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	895a      	ldrh	r2, [r3, #10]
 800fc52:	4b71      	ldr	r3, [pc, #452]	; (800fe18 <tcp_input+0x29c>)
 800fc54:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800fc56:	4b6e      	ldr	r3, [pc, #440]	; (800fe10 <tcp_input+0x294>)
 800fc58:	881a      	ldrh	r2, [r3, #0]
 800fc5a:	4b6f      	ldr	r3, [pc, #444]	; (800fe18 <tcp_input+0x29c>)
 800fc5c:	881b      	ldrh	r3, [r3, #0]
 800fc5e:	1ad3      	subs	r3, r2, r3
 800fc60:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800fc62:	4b6d      	ldr	r3, [pc, #436]	; (800fe18 <tcp_input+0x29c>)
 800fc64:	881b      	ldrh	r3, [r3, #0]
 800fc66:	4619      	mov	r1, r3
 800fc68:	6878      	ldr	r0, [r7, #4]
 800fc6a:	f7fd fe1d 	bl	800d8a8 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	681b      	ldr	r3, [r3, #0]
 800fc72:	895b      	ldrh	r3, [r3, #10]
 800fc74:	8a3a      	ldrh	r2, [r7, #16]
 800fc76:	429a      	cmp	r2, r3
 800fc78:	f200 8361 	bhi.w	801033e <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	681b      	ldr	r3, [r3, #0]
 800fc80:	685b      	ldr	r3, [r3, #4]
 800fc82:	4a64      	ldr	r2, [pc, #400]	; (800fe14 <tcp_input+0x298>)
 800fc84:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	681b      	ldr	r3, [r3, #0]
 800fc8a:	8a3a      	ldrh	r2, [r7, #16]
 800fc8c:	4611      	mov	r1, r2
 800fc8e:	4618      	mov	r0, r3
 800fc90:	f7fd fe0a 	bl	800d8a8 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	891a      	ldrh	r2, [r3, #8]
 800fc98:	8a3b      	ldrh	r3, [r7, #16]
 800fc9a:	1ad3      	subs	r3, r2, r3
 800fc9c:	b29a      	uxth	r2, r3
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	895b      	ldrh	r3, [r3, #10]
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	d005      	beq.n	800fcb6 <tcp_input+0x13a>
 800fcaa:	4b54      	ldr	r3, [pc, #336]	; (800fdfc <tcp_input+0x280>)
 800fcac:	22df      	movs	r2, #223	; 0xdf
 800fcae:	495c      	ldr	r1, [pc, #368]	; (800fe20 <tcp_input+0x2a4>)
 800fcb0:	4854      	ldr	r0, [pc, #336]	; (800fe04 <tcp_input+0x288>)
 800fcb2:	f007 f8f1 	bl	8016e98 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	891a      	ldrh	r2, [r3, #8]
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	681b      	ldr	r3, [r3, #0]
 800fcbe:	891b      	ldrh	r3, [r3, #8]
 800fcc0:	429a      	cmp	r2, r3
 800fcc2:	d005      	beq.n	800fcd0 <tcp_input+0x154>
 800fcc4:	4b4d      	ldr	r3, [pc, #308]	; (800fdfc <tcp_input+0x280>)
 800fcc6:	22e0      	movs	r2, #224	; 0xe0
 800fcc8:	4956      	ldr	r1, [pc, #344]	; (800fe24 <tcp_input+0x2a8>)
 800fcca:	484e      	ldr	r0, [pc, #312]	; (800fe04 <tcp_input+0x288>)
 800fccc:	f007 f8e4 	bl	8016e98 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800fcd0:	4b4d      	ldr	r3, [pc, #308]	; (800fe08 <tcp_input+0x28c>)
 800fcd2:	681b      	ldr	r3, [r3, #0]
 800fcd4:	881b      	ldrh	r3, [r3, #0]
 800fcd6:	b29b      	uxth	r3, r3
 800fcd8:	4a4b      	ldr	r2, [pc, #300]	; (800fe08 <tcp_input+0x28c>)
 800fcda:	6814      	ldr	r4, [r2, #0]
 800fcdc:	4618      	mov	r0, r3
 800fcde:	f7fc f9af 	bl	800c040 <lwip_htons>
 800fce2:	4603      	mov	r3, r0
 800fce4:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800fce6:	4b48      	ldr	r3, [pc, #288]	; (800fe08 <tcp_input+0x28c>)
 800fce8:	681b      	ldr	r3, [r3, #0]
 800fcea:	885b      	ldrh	r3, [r3, #2]
 800fcec:	b29b      	uxth	r3, r3
 800fcee:	4a46      	ldr	r2, [pc, #280]	; (800fe08 <tcp_input+0x28c>)
 800fcf0:	6814      	ldr	r4, [r2, #0]
 800fcf2:	4618      	mov	r0, r3
 800fcf4:	f7fc f9a4 	bl	800c040 <lwip_htons>
 800fcf8:	4603      	mov	r3, r0
 800fcfa:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800fcfc:	4b42      	ldr	r3, [pc, #264]	; (800fe08 <tcp_input+0x28c>)
 800fcfe:	681b      	ldr	r3, [r3, #0]
 800fd00:	685b      	ldr	r3, [r3, #4]
 800fd02:	4a41      	ldr	r2, [pc, #260]	; (800fe08 <tcp_input+0x28c>)
 800fd04:	6814      	ldr	r4, [r2, #0]
 800fd06:	4618      	mov	r0, r3
 800fd08:	f7fc f9af 	bl	800c06a <lwip_htonl>
 800fd0c:	4603      	mov	r3, r0
 800fd0e:	6063      	str	r3, [r4, #4]
 800fd10:	6863      	ldr	r3, [r4, #4]
 800fd12:	4a45      	ldr	r2, [pc, #276]	; (800fe28 <tcp_input+0x2ac>)
 800fd14:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800fd16:	4b3c      	ldr	r3, [pc, #240]	; (800fe08 <tcp_input+0x28c>)
 800fd18:	681b      	ldr	r3, [r3, #0]
 800fd1a:	689b      	ldr	r3, [r3, #8]
 800fd1c:	4a3a      	ldr	r2, [pc, #232]	; (800fe08 <tcp_input+0x28c>)
 800fd1e:	6814      	ldr	r4, [r2, #0]
 800fd20:	4618      	mov	r0, r3
 800fd22:	f7fc f9a2 	bl	800c06a <lwip_htonl>
 800fd26:	4603      	mov	r3, r0
 800fd28:	60a3      	str	r3, [r4, #8]
 800fd2a:	68a3      	ldr	r3, [r4, #8]
 800fd2c:	4a3f      	ldr	r2, [pc, #252]	; (800fe2c <tcp_input+0x2b0>)
 800fd2e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800fd30:	4b35      	ldr	r3, [pc, #212]	; (800fe08 <tcp_input+0x28c>)
 800fd32:	681b      	ldr	r3, [r3, #0]
 800fd34:	89db      	ldrh	r3, [r3, #14]
 800fd36:	b29b      	uxth	r3, r3
 800fd38:	4a33      	ldr	r2, [pc, #204]	; (800fe08 <tcp_input+0x28c>)
 800fd3a:	6814      	ldr	r4, [r2, #0]
 800fd3c:	4618      	mov	r0, r3
 800fd3e:	f7fc f97f 	bl	800c040 <lwip_htons>
 800fd42:	4603      	mov	r3, r0
 800fd44:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800fd46:	4b30      	ldr	r3, [pc, #192]	; (800fe08 <tcp_input+0x28c>)
 800fd48:	681b      	ldr	r3, [r3, #0]
 800fd4a:	899b      	ldrh	r3, [r3, #12]
 800fd4c:	b29b      	uxth	r3, r3
 800fd4e:	4618      	mov	r0, r3
 800fd50:	f7fc f976 	bl	800c040 <lwip_htons>
 800fd54:	4603      	mov	r3, r0
 800fd56:	b2db      	uxtb	r3, r3
 800fd58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fd5c:	b2da      	uxtb	r2, r3
 800fd5e:	4b34      	ldr	r3, [pc, #208]	; (800fe30 <tcp_input+0x2b4>)
 800fd60:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	891a      	ldrh	r2, [r3, #8]
 800fd66:	4b33      	ldr	r3, [pc, #204]	; (800fe34 <tcp_input+0x2b8>)
 800fd68:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800fd6a:	4b31      	ldr	r3, [pc, #196]	; (800fe30 <tcp_input+0x2b4>)
 800fd6c:	781b      	ldrb	r3, [r3, #0]
 800fd6e:	f003 0303 	and.w	r3, r3, #3
 800fd72:	2b00      	cmp	r3, #0
 800fd74:	d00c      	beq.n	800fd90 <tcp_input+0x214>
    tcplen++;
 800fd76:	4b2f      	ldr	r3, [pc, #188]	; (800fe34 <tcp_input+0x2b8>)
 800fd78:	881b      	ldrh	r3, [r3, #0]
 800fd7a:	3301      	adds	r3, #1
 800fd7c:	b29a      	uxth	r2, r3
 800fd7e:	4b2d      	ldr	r3, [pc, #180]	; (800fe34 <tcp_input+0x2b8>)
 800fd80:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	891a      	ldrh	r2, [r3, #8]
 800fd86:	4b2b      	ldr	r3, [pc, #172]	; (800fe34 <tcp_input+0x2b8>)
 800fd88:	881b      	ldrh	r3, [r3, #0]
 800fd8a:	429a      	cmp	r2, r3
 800fd8c:	f200 82d9 	bhi.w	8010342 <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800fd90:	2300      	movs	r3, #0
 800fd92:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800fd94:	4b28      	ldr	r3, [pc, #160]	; (800fe38 <tcp_input+0x2bc>)
 800fd96:	681b      	ldr	r3, [r3, #0]
 800fd98:	61fb      	str	r3, [r7, #28]
 800fd9a:	e09d      	b.n	800fed8 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800fd9c:	69fb      	ldr	r3, [r7, #28]
 800fd9e:	7d1b      	ldrb	r3, [r3, #20]
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	d105      	bne.n	800fdb0 <tcp_input+0x234>
 800fda4:	4b15      	ldr	r3, [pc, #84]	; (800fdfc <tcp_input+0x280>)
 800fda6:	22fb      	movs	r2, #251	; 0xfb
 800fda8:	4924      	ldr	r1, [pc, #144]	; (800fe3c <tcp_input+0x2c0>)
 800fdaa:	4816      	ldr	r0, [pc, #88]	; (800fe04 <tcp_input+0x288>)
 800fdac:	f007 f874 	bl	8016e98 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800fdb0:	69fb      	ldr	r3, [r7, #28]
 800fdb2:	7d1b      	ldrb	r3, [r3, #20]
 800fdb4:	2b0a      	cmp	r3, #10
 800fdb6:	d105      	bne.n	800fdc4 <tcp_input+0x248>
 800fdb8:	4b10      	ldr	r3, [pc, #64]	; (800fdfc <tcp_input+0x280>)
 800fdba:	22fc      	movs	r2, #252	; 0xfc
 800fdbc:	4920      	ldr	r1, [pc, #128]	; (800fe40 <tcp_input+0x2c4>)
 800fdbe:	4811      	ldr	r0, [pc, #68]	; (800fe04 <tcp_input+0x288>)
 800fdc0:	f007 f86a 	bl	8016e98 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800fdc4:	69fb      	ldr	r3, [r7, #28]
 800fdc6:	7d1b      	ldrb	r3, [r3, #20]
 800fdc8:	2b01      	cmp	r3, #1
 800fdca:	d105      	bne.n	800fdd8 <tcp_input+0x25c>
 800fdcc:	4b0b      	ldr	r3, [pc, #44]	; (800fdfc <tcp_input+0x280>)
 800fdce:	22fd      	movs	r2, #253	; 0xfd
 800fdd0:	491c      	ldr	r1, [pc, #112]	; (800fe44 <tcp_input+0x2c8>)
 800fdd2:	480c      	ldr	r0, [pc, #48]	; (800fe04 <tcp_input+0x288>)
 800fdd4:	f007 f860 	bl	8016e98 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800fdd8:	69fb      	ldr	r3, [r7, #28]
 800fdda:	7a1b      	ldrb	r3, [r3, #8]
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	d033      	beq.n	800fe48 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800fde0:	69fb      	ldr	r3, [r7, #28]
 800fde2:	7a1a      	ldrb	r2, [r3, #8]
 800fde4:	4b09      	ldr	r3, [pc, #36]	; (800fe0c <tcp_input+0x290>)
 800fde6:	685b      	ldr	r3, [r3, #4]
 800fde8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fdec:	3301      	adds	r3, #1
 800fdee:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800fdf0:	429a      	cmp	r2, r3
 800fdf2:	d029      	beq.n	800fe48 <tcp_input+0x2cc>
      prev = pcb;
 800fdf4:	69fb      	ldr	r3, [r7, #28]
 800fdf6:	61bb      	str	r3, [r7, #24]
      continue;
 800fdf8:	e06b      	b.n	800fed2 <tcp_input+0x356>
 800fdfa:	bf00      	nop
 800fdfc:	080192e0 	.word	0x080192e0
 800fe00:	08019314 	.word	0x08019314
 800fe04:	0801932c 	.word	0x0801932c
 800fe08:	240040d0 	.word	0x240040d0
 800fe0c:	240048e8 	.word	0x240048e8
 800fe10:	240040d4 	.word	0x240040d4
 800fe14:	240040d8 	.word	0x240040d8
 800fe18:	240040d6 	.word	0x240040d6
 800fe1c:	08019354 	.word	0x08019354
 800fe20:	08019364 	.word	0x08019364
 800fe24:	08019370 	.word	0x08019370
 800fe28:	240040e0 	.word	0x240040e0
 800fe2c:	240040e4 	.word	0x240040e4
 800fe30:	240040ec 	.word	0x240040ec
 800fe34:	240040ea 	.word	0x240040ea
 800fe38:	240079a8 	.word	0x240079a8
 800fe3c:	08019390 	.word	0x08019390
 800fe40:	080193b8 	.word	0x080193b8
 800fe44:	080193e4 	.word	0x080193e4
    }

    if (pcb->remote_port == tcphdr->src &&
 800fe48:	69fb      	ldr	r3, [r7, #28]
 800fe4a:	8b1a      	ldrh	r2, [r3, #24]
 800fe4c:	4b94      	ldr	r3, [pc, #592]	; (80100a0 <tcp_input+0x524>)
 800fe4e:	681b      	ldr	r3, [r3, #0]
 800fe50:	881b      	ldrh	r3, [r3, #0]
 800fe52:	b29b      	uxth	r3, r3
 800fe54:	429a      	cmp	r2, r3
 800fe56:	d13a      	bne.n	800fece <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800fe58:	69fb      	ldr	r3, [r7, #28]
 800fe5a:	8ada      	ldrh	r2, [r3, #22]
 800fe5c:	4b90      	ldr	r3, [pc, #576]	; (80100a0 <tcp_input+0x524>)
 800fe5e:	681b      	ldr	r3, [r3, #0]
 800fe60:	885b      	ldrh	r3, [r3, #2]
 800fe62:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800fe64:	429a      	cmp	r2, r3
 800fe66:	d132      	bne.n	800fece <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800fe68:	69fb      	ldr	r3, [r7, #28]
 800fe6a:	685a      	ldr	r2, [r3, #4]
 800fe6c:	4b8d      	ldr	r3, [pc, #564]	; (80100a4 <tcp_input+0x528>)
 800fe6e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800fe70:	429a      	cmp	r2, r3
 800fe72:	d12c      	bne.n	800fece <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800fe74:	69fb      	ldr	r3, [r7, #28]
 800fe76:	681a      	ldr	r2, [r3, #0]
 800fe78:	4b8a      	ldr	r3, [pc, #552]	; (80100a4 <tcp_input+0x528>)
 800fe7a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800fe7c:	429a      	cmp	r2, r3
 800fe7e:	d126      	bne.n	800fece <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800fe80:	69fb      	ldr	r3, [r7, #28]
 800fe82:	68db      	ldr	r3, [r3, #12]
 800fe84:	69fa      	ldr	r2, [r7, #28]
 800fe86:	429a      	cmp	r2, r3
 800fe88:	d106      	bne.n	800fe98 <tcp_input+0x31c>
 800fe8a:	4b87      	ldr	r3, [pc, #540]	; (80100a8 <tcp_input+0x52c>)
 800fe8c:	f240 120d 	movw	r2, #269	; 0x10d
 800fe90:	4986      	ldr	r1, [pc, #536]	; (80100ac <tcp_input+0x530>)
 800fe92:	4887      	ldr	r0, [pc, #540]	; (80100b0 <tcp_input+0x534>)
 800fe94:	f007 f800 	bl	8016e98 <iprintf>
      if (prev != NULL) {
 800fe98:	69bb      	ldr	r3, [r7, #24]
 800fe9a:	2b00      	cmp	r3, #0
 800fe9c:	d00a      	beq.n	800feb4 <tcp_input+0x338>
        prev->next = pcb->next;
 800fe9e:	69fb      	ldr	r3, [r7, #28]
 800fea0:	68da      	ldr	r2, [r3, #12]
 800fea2:	69bb      	ldr	r3, [r7, #24]
 800fea4:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800fea6:	4b83      	ldr	r3, [pc, #524]	; (80100b4 <tcp_input+0x538>)
 800fea8:	681a      	ldr	r2, [r3, #0]
 800feaa:	69fb      	ldr	r3, [r7, #28]
 800feac:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800feae:	4a81      	ldr	r2, [pc, #516]	; (80100b4 <tcp_input+0x538>)
 800feb0:	69fb      	ldr	r3, [r7, #28]
 800feb2:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800feb4:	69fb      	ldr	r3, [r7, #28]
 800feb6:	68db      	ldr	r3, [r3, #12]
 800feb8:	69fa      	ldr	r2, [r7, #28]
 800feba:	429a      	cmp	r2, r3
 800febc:	d111      	bne.n	800fee2 <tcp_input+0x366>
 800febe:	4b7a      	ldr	r3, [pc, #488]	; (80100a8 <tcp_input+0x52c>)
 800fec0:	f240 1215 	movw	r2, #277	; 0x115
 800fec4:	497c      	ldr	r1, [pc, #496]	; (80100b8 <tcp_input+0x53c>)
 800fec6:	487a      	ldr	r0, [pc, #488]	; (80100b0 <tcp_input+0x534>)
 800fec8:	f006 ffe6 	bl	8016e98 <iprintf>
      break;
 800fecc:	e009      	b.n	800fee2 <tcp_input+0x366>
    }
    prev = pcb;
 800fece:	69fb      	ldr	r3, [r7, #28]
 800fed0:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800fed2:	69fb      	ldr	r3, [r7, #28]
 800fed4:	68db      	ldr	r3, [r3, #12]
 800fed6:	61fb      	str	r3, [r7, #28]
 800fed8:	69fb      	ldr	r3, [r7, #28]
 800feda:	2b00      	cmp	r3, #0
 800fedc:	f47f af5e 	bne.w	800fd9c <tcp_input+0x220>
 800fee0:	e000      	b.n	800fee4 <tcp_input+0x368>
      break;
 800fee2:	bf00      	nop
  }

  if (pcb == NULL) {
 800fee4:	69fb      	ldr	r3, [r7, #28]
 800fee6:	2b00      	cmp	r3, #0
 800fee8:	f040 8095 	bne.w	8010016 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800feec:	4b73      	ldr	r3, [pc, #460]	; (80100bc <tcp_input+0x540>)
 800feee:	681b      	ldr	r3, [r3, #0]
 800fef0:	61fb      	str	r3, [r7, #28]
 800fef2:	e03f      	b.n	800ff74 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800fef4:	69fb      	ldr	r3, [r7, #28]
 800fef6:	7d1b      	ldrb	r3, [r3, #20]
 800fef8:	2b0a      	cmp	r3, #10
 800fefa:	d006      	beq.n	800ff0a <tcp_input+0x38e>
 800fefc:	4b6a      	ldr	r3, [pc, #424]	; (80100a8 <tcp_input+0x52c>)
 800fefe:	f240 121f 	movw	r2, #287	; 0x11f
 800ff02:	496f      	ldr	r1, [pc, #444]	; (80100c0 <tcp_input+0x544>)
 800ff04:	486a      	ldr	r0, [pc, #424]	; (80100b0 <tcp_input+0x534>)
 800ff06:	f006 ffc7 	bl	8016e98 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ff0a:	69fb      	ldr	r3, [r7, #28]
 800ff0c:	7a1b      	ldrb	r3, [r3, #8]
 800ff0e:	2b00      	cmp	r3, #0
 800ff10:	d009      	beq.n	800ff26 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ff12:	69fb      	ldr	r3, [r7, #28]
 800ff14:	7a1a      	ldrb	r2, [r3, #8]
 800ff16:	4b63      	ldr	r3, [pc, #396]	; (80100a4 <tcp_input+0x528>)
 800ff18:	685b      	ldr	r3, [r3, #4]
 800ff1a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ff1e:	3301      	adds	r3, #1
 800ff20:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ff22:	429a      	cmp	r2, r3
 800ff24:	d122      	bne.n	800ff6c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800ff26:	69fb      	ldr	r3, [r7, #28]
 800ff28:	8b1a      	ldrh	r2, [r3, #24]
 800ff2a:	4b5d      	ldr	r3, [pc, #372]	; (80100a0 <tcp_input+0x524>)
 800ff2c:	681b      	ldr	r3, [r3, #0]
 800ff2e:	881b      	ldrh	r3, [r3, #0]
 800ff30:	b29b      	uxth	r3, r3
 800ff32:	429a      	cmp	r2, r3
 800ff34:	d11b      	bne.n	800ff6e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800ff36:	69fb      	ldr	r3, [r7, #28]
 800ff38:	8ada      	ldrh	r2, [r3, #22]
 800ff3a:	4b59      	ldr	r3, [pc, #356]	; (80100a0 <tcp_input+0x524>)
 800ff3c:	681b      	ldr	r3, [r3, #0]
 800ff3e:	885b      	ldrh	r3, [r3, #2]
 800ff40:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800ff42:	429a      	cmp	r2, r3
 800ff44:	d113      	bne.n	800ff6e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ff46:	69fb      	ldr	r3, [r7, #28]
 800ff48:	685a      	ldr	r2, [r3, #4]
 800ff4a:	4b56      	ldr	r3, [pc, #344]	; (80100a4 <tcp_input+0x528>)
 800ff4c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800ff4e:	429a      	cmp	r2, r3
 800ff50:	d10d      	bne.n	800ff6e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800ff52:	69fb      	ldr	r3, [r7, #28]
 800ff54:	681a      	ldr	r2, [r3, #0]
 800ff56:	4b53      	ldr	r3, [pc, #332]	; (80100a4 <tcp_input+0x528>)
 800ff58:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ff5a:	429a      	cmp	r2, r3
 800ff5c:	d107      	bne.n	800ff6e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800ff5e:	69f8      	ldr	r0, [r7, #28]
 800ff60:	f000 fb54 	bl	801060c <tcp_timewait_input>
        }
        pbuf_free(p);
 800ff64:	6878      	ldr	r0, [r7, #4]
 800ff66:	f7fd fd25 	bl	800d9b4 <pbuf_free>
        return;
 800ff6a:	e1f0      	b.n	801034e <tcp_input+0x7d2>
        continue;
 800ff6c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ff6e:	69fb      	ldr	r3, [r7, #28]
 800ff70:	68db      	ldr	r3, [r3, #12]
 800ff72:	61fb      	str	r3, [r7, #28]
 800ff74:	69fb      	ldr	r3, [r7, #28]
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	d1bc      	bne.n	800fef4 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800ff7a:	2300      	movs	r3, #0
 800ff7c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ff7e:	4b51      	ldr	r3, [pc, #324]	; (80100c4 <tcp_input+0x548>)
 800ff80:	681b      	ldr	r3, [r3, #0]
 800ff82:	617b      	str	r3, [r7, #20]
 800ff84:	e02a      	b.n	800ffdc <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800ff86:	697b      	ldr	r3, [r7, #20]
 800ff88:	7a1b      	ldrb	r3, [r3, #8]
 800ff8a:	2b00      	cmp	r3, #0
 800ff8c:	d00c      	beq.n	800ffa8 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ff8e:	697b      	ldr	r3, [r7, #20]
 800ff90:	7a1a      	ldrb	r2, [r3, #8]
 800ff92:	4b44      	ldr	r3, [pc, #272]	; (80100a4 <tcp_input+0x528>)
 800ff94:	685b      	ldr	r3, [r3, #4]
 800ff96:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ff9a:	3301      	adds	r3, #1
 800ff9c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800ff9e:	429a      	cmp	r2, r3
 800ffa0:	d002      	beq.n	800ffa8 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800ffa2:	697b      	ldr	r3, [r7, #20]
 800ffa4:	61bb      	str	r3, [r7, #24]
        continue;
 800ffa6:	e016      	b.n	800ffd6 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800ffa8:	697b      	ldr	r3, [r7, #20]
 800ffaa:	8ada      	ldrh	r2, [r3, #22]
 800ffac:	4b3c      	ldr	r3, [pc, #240]	; (80100a0 <tcp_input+0x524>)
 800ffae:	681b      	ldr	r3, [r3, #0]
 800ffb0:	885b      	ldrh	r3, [r3, #2]
 800ffb2:	b29b      	uxth	r3, r3
 800ffb4:	429a      	cmp	r2, r3
 800ffb6:	d10c      	bne.n	800ffd2 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800ffb8:	697b      	ldr	r3, [r7, #20]
 800ffba:	681a      	ldr	r2, [r3, #0]
 800ffbc:	4b39      	ldr	r3, [pc, #228]	; (80100a4 <tcp_input+0x528>)
 800ffbe:	695b      	ldr	r3, [r3, #20]
 800ffc0:	429a      	cmp	r2, r3
 800ffc2:	d00f      	beq.n	800ffe4 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800ffc4:	697b      	ldr	r3, [r7, #20]
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	d00d      	beq.n	800ffe6 <tcp_input+0x46a>
 800ffca:	697b      	ldr	r3, [r7, #20]
 800ffcc:	681b      	ldr	r3, [r3, #0]
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	d009      	beq.n	800ffe6 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800ffd2:	697b      	ldr	r3, [r7, #20]
 800ffd4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ffd6:	697b      	ldr	r3, [r7, #20]
 800ffd8:	68db      	ldr	r3, [r3, #12]
 800ffda:	617b      	str	r3, [r7, #20]
 800ffdc:	697b      	ldr	r3, [r7, #20]
 800ffde:	2b00      	cmp	r3, #0
 800ffe0:	d1d1      	bne.n	800ff86 <tcp_input+0x40a>
 800ffe2:	e000      	b.n	800ffe6 <tcp_input+0x46a>
            break;
 800ffe4:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800ffe6:	697b      	ldr	r3, [r7, #20]
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	d014      	beq.n	8010016 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800ffec:	69bb      	ldr	r3, [r7, #24]
 800ffee:	2b00      	cmp	r3, #0
 800fff0:	d00a      	beq.n	8010008 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800fff2:	697b      	ldr	r3, [r7, #20]
 800fff4:	68da      	ldr	r2, [r3, #12]
 800fff6:	69bb      	ldr	r3, [r7, #24]
 800fff8:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800fffa:	4b32      	ldr	r3, [pc, #200]	; (80100c4 <tcp_input+0x548>)
 800fffc:	681a      	ldr	r2, [r3, #0]
 800fffe:	697b      	ldr	r3, [r7, #20]
 8010000:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8010002:	4a30      	ldr	r2, [pc, #192]	; (80100c4 <tcp_input+0x548>)
 8010004:	697b      	ldr	r3, [r7, #20]
 8010006:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8010008:	6978      	ldr	r0, [r7, #20]
 801000a:	f000 fa01 	bl	8010410 <tcp_listen_input>
      }
      pbuf_free(p);
 801000e:	6878      	ldr	r0, [r7, #4]
 8010010:	f7fd fcd0 	bl	800d9b4 <pbuf_free>
      return;
 8010014:	e19b      	b.n	801034e <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8010016:	69fb      	ldr	r3, [r7, #28]
 8010018:	2b00      	cmp	r3, #0
 801001a:	f000 8160 	beq.w	80102de <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 801001e:	4b2a      	ldr	r3, [pc, #168]	; (80100c8 <tcp_input+0x54c>)
 8010020:	2200      	movs	r2, #0
 8010022:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	891a      	ldrh	r2, [r3, #8]
 8010028:	4b27      	ldr	r3, [pc, #156]	; (80100c8 <tcp_input+0x54c>)
 801002a:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 801002c:	4a26      	ldr	r2, [pc, #152]	; (80100c8 <tcp_input+0x54c>)
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8010032:	4b1b      	ldr	r3, [pc, #108]	; (80100a0 <tcp_input+0x524>)
 8010034:	681b      	ldr	r3, [r3, #0]
 8010036:	4a24      	ldr	r2, [pc, #144]	; (80100c8 <tcp_input+0x54c>)
 8010038:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 801003a:	4b24      	ldr	r3, [pc, #144]	; (80100cc <tcp_input+0x550>)
 801003c:	2200      	movs	r2, #0
 801003e:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8010040:	4b23      	ldr	r3, [pc, #140]	; (80100d0 <tcp_input+0x554>)
 8010042:	2200      	movs	r2, #0
 8010044:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8010046:	4b23      	ldr	r3, [pc, #140]	; (80100d4 <tcp_input+0x558>)
 8010048:	2200      	movs	r2, #0
 801004a:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 801004c:	4b22      	ldr	r3, [pc, #136]	; (80100d8 <tcp_input+0x55c>)
 801004e:	781b      	ldrb	r3, [r3, #0]
 8010050:	f003 0308 	and.w	r3, r3, #8
 8010054:	2b00      	cmp	r3, #0
 8010056:	d006      	beq.n	8010066 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	7b5b      	ldrb	r3, [r3, #13]
 801005c:	f043 0301 	orr.w	r3, r3, #1
 8010060:	b2da      	uxtb	r2, r3
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8010066:	69fb      	ldr	r3, [r7, #28]
 8010068:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801006a:	2b00      	cmp	r3, #0
 801006c:	d038      	beq.n	80100e0 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801006e:	69f8      	ldr	r0, [r7, #28]
 8010070:	f7ff f858 	bl	800f124 <tcp_process_refused_data>
 8010074:	4603      	mov	r3, r0
 8010076:	f113 0f0d 	cmn.w	r3, #13
 801007a:	d007      	beq.n	801008c <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801007c:	69fb      	ldr	r3, [r7, #28]
 801007e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8010080:	2b00      	cmp	r3, #0
 8010082:	d02d      	beq.n	80100e0 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8010084:	4b15      	ldr	r3, [pc, #84]	; (80100dc <tcp_input+0x560>)
 8010086:	881b      	ldrh	r3, [r3, #0]
 8010088:	2b00      	cmp	r3, #0
 801008a:	d029      	beq.n	80100e0 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 801008c:	69fb      	ldr	r3, [r7, #28]
 801008e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010090:	2b00      	cmp	r3, #0
 8010092:	f040 8104 	bne.w	801029e <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8010096:	69f8      	ldr	r0, [r7, #28]
 8010098:	f003 fe16 	bl	8013cc8 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 801009c:	e0ff      	b.n	801029e <tcp_input+0x722>
 801009e:	bf00      	nop
 80100a0:	240040d0 	.word	0x240040d0
 80100a4:	240048e8 	.word	0x240048e8
 80100a8:	080192e0 	.word	0x080192e0
 80100ac:	0801940c 	.word	0x0801940c
 80100b0:	0801932c 	.word	0x0801932c
 80100b4:	240079a8 	.word	0x240079a8
 80100b8:	08019438 	.word	0x08019438
 80100bc:	240079b8 	.word	0x240079b8
 80100c0:	08019464 	.word	0x08019464
 80100c4:	240079b0 	.word	0x240079b0
 80100c8:	240040c0 	.word	0x240040c0
 80100cc:	240040f0 	.word	0x240040f0
 80100d0:	240040ed 	.word	0x240040ed
 80100d4:	240040e8 	.word	0x240040e8
 80100d8:	240040ec 	.word	0x240040ec
 80100dc:	240040ea 	.word	0x240040ea
      }
    }
    tcp_input_pcb = pcb;
 80100e0:	4a9c      	ldr	r2, [pc, #624]	; (8010354 <tcp_input+0x7d8>)
 80100e2:	69fb      	ldr	r3, [r7, #28]
 80100e4:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80100e6:	69f8      	ldr	r0, [r7, #28]
 80100e8:	f000 fb0a 	bl	8010700 <tcp_process>
 80100ec:	4603      	mov	r3, r0
 80100ee:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80100f0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80100f4:	f113 0f0d 	cmn.w	r3, #13
 80100f8:	f000 80d3 	beq.w	80102a2 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 80100fc:	4b96      	ldr	r3, [pc, #600]	; (8010358 <tcp_input+0x7dc>)
 80100fe:	781b      	ldrb	r3, [r3, #0]
 8010100:	f003 0308 	and.w	r3, r3, #8
 8010104:	2b00      	cmp	r3, #0
 8010106:	d015      	beq.n	8010134 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8010108:	69fb      	ldr	r3, [r7, #28]
 801010a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801010e:	2b00      	cmp	r3, #0
 8010110:	d008      	beq.n	8010124 <tcp_input+0x5a8>
 8010112:	69fb      	ldr	r3, [r7, #28]
 8010114:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010118:	69fa      	ldr	r2, [r7, #28]
 801011a:	6912      	ldr	r2, [r2, #16]
 801011c:	f06f 010d 	mvn.w	r1, #13
 8010120:	4610      	mov	r0, r2
 8010122:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8010124:	69f9      	ldr	r1, [r7, #28]
 8010126:	488d      	ldr	r0, [pc, #564]	; (801035c <tcp_input+0x7e0>)
 8010128:	f7ff fbb0 	bl	800f88c <tcp_pcb_remove>
        tcp_free(pcb);
 801012c:	69f8      	ldr	r0, [r7, #28]
 801012e:	f7fd fefd 	bl	800df2c <tcp_free>
 8010132:	e0c1      	b.n	80102b8 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 8010134:	2300      	movs	r3, #0
 8010136:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8010138:	4b89      	ldr	r3, [pc, #548]	; (8010360 <tcp_input+0x7e4>)
 801013a:	881b      	ldrh	r3, [r3, #0]
 801013c:	2b00      	cmp	r3, #0
 801013e:	d01d      	beq.n	801017c <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8010140:	4b87      	ldr	r3, [pc, #540]	; (8010360 <tcp_input+0x7e4>)
 8010142:	881b      	ldrh	r3, [r3, #0]
 8010144:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8010146:	69fb      	ldr	r3, [r7, #28]
 8010148:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801014c:	2b00      	cmp	r3, #0
 801014e:	d00a      	beq.n	8010166 <tcp_input+0x5ea>
 8010150:	69fb      	ldr	r3, [r7, #28]
 8010152:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010156:	69fa      	ldr	r2, [r7, #28]
 8010158:	6910      	ldr	r0, [r2, #16]
 801015a:	89fa      	ldrh	r2, [r7, #14]
 801015c:	69f9      	ldr	r1, [r7, #28]
 801015e:	4798      	blx	r3
 8010160:	4603      	mov	r3, r0
 8010162:	74fb      	strb	r3, [r7, #19]
 8010164:	e001      	b.n	801016a <tcp_input+0x5ee>
 8010166:	2300      	movs	r3, #0
 8010168:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801016a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801016e:	f113 0f0d 	cmn.w	r3, #13
 8010172:	f000 8098 	beq.w	80102a6 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 8010176:	4b7a      	ldr	r3, [pc, #488]	; (8010360 <tcp_input+0x7e4>)
 8010178:	2200      	movs	r2, #0
 801017a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 801017c:	69f8      	ldr	r0, [r7, #28]
 801017e:	f000 f907 	bl	8010390 <tcp_input_delayed_close>
 8010182:	4603      	mov	r3, r0
 8010184:	2b00      	cmp	r3, #0
 8010186:	f040 8090 	bne.w	80102aa <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 801018a:	4b76      	ldr	r3, [pc, #472]	; (8010364 <tcp_input+0x7e8>)
 801018c:	681b      	ldr	r3, [r3, #0]
 801018e:	2b00      	cmp	r3, #0
 8010190:	d041      	beq.n	8010216 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8010192:	69fb      	ldr	r3, [r7, #28]
 8010194:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010196:	2b00      	cmp	r3, #0
 8010198:	d006      	beq.n	80101a8 <tcp_input+0x62c>
 801019a:	4b73      	ldr	r3, [pc, #460]	; (8010368 <tcp_input+0x7ec>)
 801019c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80101a0:	4972      	ldr	r1, [pc, #456]	; (801036c <tcp_input+0x7f0>)
 80101a2:	4873      	ldr	r0, [pc, #460]	; (8010370 <tcp_input+0x7f4>)
 80101a4:	f006 fe78 	bl	8016e98 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80101a8:	69fb      	ldr	r3, [r7, #28]
 80101aa:	8b5b      	ldrh	r3, [r3, #26]
 80101ac:	f003 0310 	and.w	r3, r3, #16
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	d008      	beq.n	80101c6 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 80101b4:	4b6b      	ldr	r3, [pc, #428]	; (8010364 <tcp_input+0x7e8>)
 80101b6:	681b      	ldr	r3, [r3, #0]
 80101b8:	4618      	mov	r0, r3
 80101ba:	f7fd fbfb 	bl	800d9b4 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 80101be:	69f8      	ldr	r0, [r7, #28]
 80101c0:	f7fe f99c 	bl	800e4fc <tcp_abort>
            goto aborted;
 80101c4:	e078      	b.n	80102b8 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80101c6:	69fb      	ldr	r3, [r7, #28]
 80101c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	d00c      	beq.n	80101ea <tcp_input+0x66e>
 80101d0:	69fb      	ldr	r3, [r7, #28]
 80101d2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80101d6:	69fb      	ldr	r3, [r7, #28]
 80101d8:	6918      	ldr	r0, [r3, #16]
 80101da:	4b62      	ldr	r3, [pc, #392]	; (8010364 <tcp_input+0x7e8>)
 80101dc:	681a      	ldr	r2, [r3, #0]
 80101de:	2300      	movs	r3, #0
 80101e0:	69f9      	ldr	r1, [r7, #28]
 80101e2:	47a0      	blx	r4
 80101e4:	4603      	mov	r3, r0
 80101e6:	74fb      	strb	r3, [r7, #19]
 80101e8:	e008      	b.n	80101fc <tcp_input+0x680>
 80101ea:	4b5e      	ldr	r3, [pc, #376]	; (8010364 <tcp_input+0x7e8>)
 80101ec:	681a      	ldr	r2, [r3, #0]
 80101ee:	2300      	movs	r3, #0
 80101f0:	69f9      	ldr	r1, [r7, #28]
 80101f2:	2000      	movs	r0, #0
 80101f4:	f7ff f88a 	bl	800f30c <tcp_recv_null>
 80101f8:	4603      	mov	r3, r0
 80101fa:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80101fc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010200:	f113 0f0d 	cmn.w	r3, #13
 8010204:	d053      	beq.n	80102ae <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8010206:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801020a:	2b00      	cmp	r3, #0
 801020c:	d003      	beq.n	8010216 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 801020e:	4b55      	ldr	r3, [pc, #340]	; (8010364 <tcp_input+0x7e8>)
 8010210:	681a      	ldr	r2, [r3, #0]
 8010212:	69fb      	ldr	r3, [r7, #28]
 8010214:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8010216:	4b50      	ldr	r3, [pc, #320]	; (8010358 <tcp_input+0x7dc>)
 8010218:	781b      	ldrb	r3, [r3, #0]
 801021a:	f003 0320 	and.w	r3, r3, #32
 801021e:	2b00      	cmp	r3, #0
 8010220:	d030      	beq.n	8010284 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 8010222:	69fb      	ldr	r3, [r7, #28]
 8010224:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010226:	2b00      	cmp	r3, #0
 8010228:	d009      	beq.n	801023e <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801022a:	69fb      	ldr	r3, [r7, #28]
 801022c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801022e:	7b5a      	ldrb	r2, [r3, #13]
 8010230:	69fb      	ldr	r3, [r7, #28]
 8010232:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010234:	f042 0220 	orr.w	r2, r2, #32
 8010238:	b2d2      	uxtb	r2, r2
 801023a:	735a      	strb	r2, [r3, #13]
 801023c:	e022      	b.n	8010284 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801023e:	69fb      	ldr	r3, [r7, #28]
 8010240:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010242:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8010246:	d005      	beq.n	8010254 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 8010248:	69fb      	ldr	r3, [r7, #28]
 801024a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801024c:	3301      	adds	r3, #1
 801024e:	b29a      	uxth	r2, r3
 8010250:	69fb      	ldr	r3, [r7, #28]
 8010252:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8010254:	69fb      	ldr	r3, [r7, #28]
 8010256:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801025a:	2b00      	cmp	r3, #0
 801025c:	d00b      	beq.n	8010276 <tcp_input+0x6fa>
 801025e:	69fb      	ldr	r3, [r7, #28]
 8010260:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8010264:	69fb      	ldr	r3, [r7, #28]
 8010266:	6918      	ldr	r0, [r3, #16]
 8010268:	2300      	movs	r3, #0
 801026a:	2200      	movs	r2, #0
 801026c:	69f9      	ldr	r1, [r7, #28]
 801026e:	47a0      	blx	r4
 8010270:	4603      	mov	r3, r0
 8010272:	74fb      	strb	r3, [r7, #19]
 8010274:	e001      	b.n	801027a <tcp_input+0x6fe>
 8010276:	2300      	movs	r3, #0
 8010278:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801027a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801027e:	f113 0f0d 	cmn.w	r3, #13
 8010282:	d016      	beq.n	80102b2 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8010284:	4b33      	ldr	r3, [pc, #204]	; (8010354 <tcp_input+0x7d8>)
 8010286:	2200      	movs	r2, #0
 8010288:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801028a:	69f8      	ldr	r0, [r7, #28]
 801028c:	f000 f880 	bl	8010390 <tcp_input_delayed_close>
 8010290:	4603      	mov	r3, r0
 8010292:	2b00      	cmp	r3, #0
 8010294:	d10f      	bne.n	80102b6 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8010296:	69f8      	ldr	r0, [r7, #28]
 8010298:	f002 ff10 	bl	80130bc <tcp_output>
 801029c:	e00c      	b.n	80102b8 <tcp_input+0x73c>
        goto aborted;
 801029e:	bf00      	nop
 80102a0:	e00a      	b.n	80102b8 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80102a2:	bf00      	nop
 80102a4:	e008      	b.n	80102b8 <tcp_input+0x73c>
              goto aborted;
 80102a6:	bf00      	nop
 80102a8:	e006      	b.n	80102b8 <tcp_input+0x73c>
          goto aborted;
 80102aa:	bf00      	nop
 80102ac:	e004      	b.n	80102b8 <tcp_input+0x73c>
            goto aborted;
 80102ae:	bf00      	nop
 80102b0:	e002      	b.n	80102b8 <tcp_input+0x73c>
              goto aborted;
 80102b2:	bf00      	nop
 80102b4:	e000      	b.n	80102b8 <tcp_input+0x73c>
          goto aborted;
 80102b6:	bf00      	nop
    tcp_input_pcb = NULL;
 80102b8:	4b26      	ldr	r3, [pc, #152]	; (8010354 <tcp_input+0x7d8>)
 80102ba:	2200      	movs	r2, #0
 80102bc:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80102be:	4b29      	ldr	r3, [pc, #164]	; (8010364 <tcp_input+0x7e8>)
 80102c0:	2200      	movs	r2, #0
 80102c2:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 80102c4:	4b2b      	ldr	r3, [pc, #172]	; (8010374 <tcp_input+0x7f8>)
 80102c6:	685b      	ldr	r3, [r3, #4]
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	d03f      	beq.n	801034c <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 80102cc:	4b29      	ldr	r3, [pc, #164]	; (8010374 <tcp_input+0x7f8>)
 80102ce:	685b      	ldr	r3, [r3, #4]
 80102d0:	4618      	mov	r0, r3
 80102d2:	f7fd fb6f 	bl	800d9b4 <pbuf_free>
      inseg.p = NULL;
 80102d6:	4b27      	ldr	r3, [pc, #156]	; (8010374 <tcp_input+0x7f8>)
 80102d8:	2200      	movs	r2, #0
 80102da:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80102dc:	e036      	b.n	801034c <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80102de:	4b26      	ldr	r3, [pc, #152]	; (8010378 <tcp_input+0x7fc>)
 80102e0:	681b      	ldr	r3, [r3, #0]
 80102e2:	899b      	ldrh	r3, [r3, #12]
 80102e4:	b29b      	uxth	r3, r3
 80102e6:	4618      	mov	r0, r3
 80102e8:	f7fb feaa 	bl	800c040 <lwip_htons>
 80102ec:	4603      	mov	r3, r0
 80102ee:	b2db      	uxtb	r3, r3
 80102f0:	f003 0304 	and.w	r3, r3, #4
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d118      	bne.n	801032a <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80102f8:	4b20      	ldr	r3, [pc, #128]	; (801037c <tcp_input+0x800>)
 80102fa:	6819      	ldr	r1, [r3, #0]
 80102fc:	4b20      	ldr	r3, [pc, #128]	; (8010380 <tcp_input+0x804>)
 80102fe:	881b      	ldrh	r3, [r3, #0]
 8010300:	461a      	mov	r2, r3
 8010302:	4b20      	ldr	r3, [pc, #128]	; (8010384 <tcp_input+0x808>)
 8010304:	681b      	ldr	r3, [r3, #0]
 8010306:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010308:	4b1b      	ldr	r3, [pc, #108]	; (8010378 <tcp_input+0x7fc>)
 801030a:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801030c:	885b      	ldrh	r3, [r3, #2]
 801030e:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010310:	4a19      	ldr	r2, [pc, #100]	; (8010378 <tcp_input+0x7fc>)
 8010312:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010314:	8812      	ldrh	r2, [r2, #0]
 8010316:	b292      	uxth	r2, r2
 8010318:	9202      	str	r2, [sp, #8]
 801031a:	9301      	str	r3, [sp, #4]
 801031c:	4b1a      	ldr	r3, [pc, #104]	; (8010388 <tcp_input+0x80c>)
 801031e:	9300      	str	r3, [sp, #0]
 8010320:	4b1a      	ldr	r3, [pc, #104]	; (801038c <tcp_input+0x810>)
 8010322:	4602      	mov	r2, r0
 8010324:	2000      	movs	r0, #0
 8010326:	f003 fc7d 	bl	8013c24 <tcp_rst>
    pbuf_free(p);
 801032a:	6878      	ldr	r0, [r7, #4]
 801032c:	f7fd fb42 	bl	800d9b4 <pbuf_free>
  return;
 8010330:	e00c      	b.n	801034c <tcp_input+0x7d0>
    goto dropped;
 8010332:	bf00      	nop
 8010334:	e006      	b.n	8010344 <tcp_input+0x7c8>
    goto dropped;
 8010336:	bf00      	nop
 8010338:	e004      	b.n	8010344 <tcp_input+0x7c8>
    goto dropped;
 801033a:	bf00      	nop
 801033c:	e002      	b.n	8010344 <tcp_input+0x7c8>
      goto dropped;
 801033e:	bf00      	nop
 8010340:	e000      	b.n	8010344 <tcp_input+0x7c8>
      goto dropped;
 8010342:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8010344:	6878      	ldr	r0, [r7, #4]
 8010346:	f7fd fb35 	bl	800d9b4 <pbuf_free>
 801034a:	e000      	b.n	801034e <tcp_input+0x7d2>
  return;
 801034c:	bf00      	nop
}
 801034e:	3724      	adds	r7, #36	; 0x24
 8010350:	46bd      	mov	sp, r7
 8010352:	bd90      	pop	{r4, r7, pc}
 8010354:	240079bc 	.word	0x240079bc
 8010358:	240040ed 	.word	0x240040ed
 801035c:	240079a8 	.word	0x240079a8
 8010360:	240040e8 	.word	0x240040e8
 8010364:	240040f0 	.word	0x240040f0
 8010368:	080192e0 	.word	0x080192e0
 801036c:	08019494 	.word	0x08019494
 8010370:	0801932c 	.word	0x0801932c
 8010374:	240040c0 	.word	0x240040c0
 8010378:	240040d0 	.word	0x240040d0
 801037c:	240040e4 	.word	0x240040e4
 8010380:	240040ea 	.word	0x240040ea
 8010384:	240040e0 	.word	0x240040e0
 8010388:	240048f8 	.word	0x240048f8
 801038c:	240048fc 	.word	0x240048fc

08010390 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8010390:	b580      	push	{r7, lr}
 8010392:	b082      	sub	sp, #8
 8010394:	af00      	add	r7, sp, #0
 8010396:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	2b00      	cmp	r3, #0
 801039c:	d106      	bne.n	80103ac <tcp_input_delayed_close+0x1c>
 801039e:	4b17      	ldr	r3, [pc, #92]	; (80103fc <tcp_input_delayed_close+0x6c>)
 80103a0:	f240 225a 	movw	r2, #602	; 0x25a
 80103a4:	4916      	ldr	r1, [pc, #88]	; (8010400 <tcp_input_delayed_close+0x70>)
 80103a6:	4817      	ldr	r0, [pc, #92]	; (8010404 <tcp_input_delayed_close+0x74>)
 80103a8:	f006 fd76 	bl	8016e98 <iprintf>

  if (recv_flags & TF_CLOSED) {
 80103ac:	4b16      	ldr	r3, [pc, #88]	; (8010408 <tcp_input_delayed_close+0x78>)
 80103ae:	781b      	ldrb	r3, [r3, #0]
 80103b0:	f003 0310 	and.w	r3, r3, #16
 80103b4:	2b00      	cmp	r3, #0
 80103b6:	d01c      	beq.n	80103f2 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	8b5b      	ldrh	r3, [r3, #26]
 80103bc:	f003 0310 	and.w	r3, r3, #16
 80103c0:	2b00      	cmp	r3, #0
 80103c2:	d10d      	bne.n	80103e0 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	d008      	beq.n	80103e0 <tcp_input_delayed_close+0x50>
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80103d4:	687a      	ldr	r2, [r7, #4]
 80103d6:	6912      	ldr	r2, [r2, #16]
 80103d8:	f06f 010e 	mvn.w	r1, #14
 80103dc:	4610      	mov	r0, r2
 80103de:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80103e0:	6879      	ldr	r1, [r7, #4]
 80103e2:	480a      	ldr	r0, [pc, #40]	; (801040c <tcp_input_delayed_close+0x7c>)
 80103e4:	f7ff fa52 	bl	800f88c <tcp_pcb_remove>
    tcp_free(pcb);
 80103e8:	6878      	ldr	r0, [r7, #4]
 80103ea:	f7fd fd9f 	bl	800df2c <tcp_free>
    return 1;
 80103ee:	2301      	movs	r3, #1
 80103f0:	e000      	b.n	80103f4 <tcp_input_delayed_close+0x64>
  }
  return 0;
 80103f2:	2300      	movs	r3, #0
}
 80103f4:	4618      	mov	r0, r3
 80103f6:	3708      	adds	r7, #8
 80103f8:	46bd      	mov	sp, r7
 80103fa:	bd80      	pop	{r7, pc}
 80103fc:	080192e0 	.word	0x080192e0
 8010400:	080194b0 	.word	0x080194b0
 8010404:	0801932c 	.word	0x0801932c
 8010408:	240040ed 	.word	0x240040ed
 801040c:	240079a8 	.word	0x240079a8

08010410 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8010410:	b590      	push	{r4, r7, lr}
 8010412:	b08b      	sub	sp, #44	; 0x2c
 8010414:	af04      	add	r7, sp, #16
 8010416:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8010418:	4b6f      	ldr	r3, [pc, #444]	; (80105d8 <tcp_listen_input+0x1c8>)
 801041a:	781b      	ldrb	r3, [r3, #0]
 801041c:	f003 0304 	and.w	r3, r3, #4
 8010420:	2b00      	cmp	r3, #0
 8010422:	f040 80d2 	bne.w	80105ca <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	2b00      	cmp	r3, #0
 801042a:	d106      	bne.n	801043a <tcp_listen_input+0x2a>
 801042c:	4b6b      	ldr	r3, [pc, #428]	; (80105dc <tcp_listen_input+0x1cc>)
 801042e:	f240 2281 	movw	r2, #641	; 0x281
 8010432:	496b      	ldr	r1, [pc, #428]	; (80105e0 <tcp_listen_input+0x1d0>)
 8010434:	486b      	ldr	r0, [pc, #428]	; (80105e4 <tcp_listen_input+0x1d4>)
 8010436:	f006 fd2f 	bl	8016e98 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 801043a:	4b67      	ldr	r3, [pc, #412]	; (80105d8 <tcp_listen_input+0x1c8>)
 801043c:	781b      	ldrb	r3, [r3, #0]
 801043e:	f003 0310 	and.w	r3, r3, #16
 8010442:	2b00      	cmp	r3, #0
 8010444:	d019      	beq.n	801047a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010446:	4b68      	ldr	r3, [pc, #416]	; (80105e8 <tcp_listen_input+0x1d8>)
 8010448:	6819      	ldr	r1, [r3, #0]
 801044a:	4b68      	ldr	r3, [pc, #416]	; (80105ec <tcp_listen_input+0x1dc>)
 801044c:	881b      	ldrh	r3, [r3, #0]
 801044e:	461a      	mov	r2, r3
 8010450:	4b67      	ldr	r3, [pc, #412]	; (80105f0 <tcp_listen_input+0x1e0>)
 8010452:	681b      	ldr	r3, [r3, #0]
 8010454:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010456:	4b67      	ldr	r3, [pc, #412]	; (80105f4 <tcp_listen_input+0x1e4>)
 8010458:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801045a:	885b      	ldrh	r3, [r3, #2]
 801045c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801045e:	4a65      	ldr	r2, [pc, #404]	; (80105f4 <tcp_listen_input+0x1e4>)
 8010460:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010462:	8812      	ldrh	r2, [r2, #0]
 8010464:	b292      	uxth	r2, r2
 8010466:	9202      	str	r2, [sp, #8]
 8010468:	9301      	str	r3, [sp, #4]
 801046a:	4b63      	ldr	r3, [pc, #396]	; (80105f8 <tcp_listen_input+0x1e8>)
 801046c:	9300      	str	r3, [sp, #0]
 801046e:	4b63      	ldr	r3, [pc, #396]	; (80105fc <tcp_listen_input+0x1ec>)
 8010470:	4602      	mov	r2, r0
 8010472:	6878      	ldr	r0, [r7, #4]
 8010474:	f003 fbd6 	bl	8013c24 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8010478:	e0a9      	b.n	80105ce <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 801047a:	4b57      	ldr	r3, [pc, #348]	; (80105d8 <tcp_listen_input+0x1c8>)
 801047c:	781b      	ldrb	r3, [r3, #0]
 801047e:	f003 0302 	and.w	r3, r3, #2
 8010482:	2b00      	cmp	r3, #0
 8010484:	f000 80a3 	beq.w	80105ce <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	7d5b      	ldrb	r3, [r3, #21]
 801048c:	4618      	mov	r0, r3
 801048e:	f7ff f861 	bl	800f554 <tcp_alloc>
 8010492:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8010494:	697b      	ldr	r3, [r7, #20]
 8010496:	2b00      	cmp	r3, #0
 8010498:	d111      	bne.n	80104be <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	699b      	ldr	r3, [r3, #24]
 801049e:	2b00      	cmp	r3, #0
 80104a0:	d00a      	beq.n	80104b8 <tcp_listen_input+0xa8>
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	699b      	ldr	r3, [r3, #24]
 80104a6:	687a      	ldr	r2, [r7, #4]
 80104a8:	6910      	ldr	r0, [r2, #16]
 80104aa:	f04f 32ff 	mov.w	r2, #4294967295
 80104ae:	2100      	movs	r1, #0
 80104b0:	4798      	blx	r3
 80104b2:	4603      	mov	r3, r0
 80104b4:	73bb      	strb	r3, [r7, #14]
      return;
 80104b6:	e08b      	b.n	80105d0 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80104b8:	23f0      	movs	r3, #240	; 0xf0
 80104ba:	73bb      	strb	r3, [r7, #14]
      return;
 80104bc:	e088      	b.n	80105d0 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80104be:	4b50      	ldr	r3, [pc, #320]	; (8010600 <tcp_listen_input+0x1f0>)
 80104c0:	695a      	ldr	r2, [r3, #20]
 80104c2:	697b      	ldr	r3, [r7, #20]
 80104c4:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80104c6:	4b4e      	ldr	r3, [pc, #312]	; (8010600 <tcp_listen_input+0x1f0>)
 80104c8:	691a      	ldr	r2, [r3, #16]
 80104ca:	697b      	ldr	r3, [r7, #20]
 80104cc:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	8ada      	ldrh	r2, [r3, #22]
 80104d2:	697b      	ldr	r3, [r7, #20]
 80104d4:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80104d6:	4b47      	ldr	r3, [pc, #284]	; (80105f4 <tcp_listen_input+0x1e4>)
 80104d8:	681b      	ldr	r3, [r3, #0]
 80104da:	881b      	ldrh	r3, [r3, #0]
 80104dc:	b29a      	uxth	r2, r3
 80104de:	697b      	ldr	r3, [r7, #20]
 80104e0:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80104e2:	697b      	ldr	r3, [r7, #20]
 80104e4:	2203      	movs	r2, #3
 80104e6:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80104e8:	4b41      	ldr	r3, [pc, #260]	; (80105f0 <tcp_listen_input+0x1e0>)
 80104ea:	681b      	ldr	r3, [r3, #0]
 80104ec:	1c5a      	adds	r2, r3, #1
 80104ee:	697b      	ldr	r3, [r7, #20]
 80104f0:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80104f2:	697b      	ldr	r3, [r7, #20]
 80104f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80104f6:	697b      	ldr	r3, [r7, #20]
 80104f8:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 80104fa:	6978      	ldr	r0, [r7, #20]
 80104fc:	f7ff fa5a 	bl	800f9b4 <tcp_next_iss>
 8010500:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8010502:	697b      	ldr	r3, [r7, #20]
 8010504:	693a      	ldr	r2, [r7, #16]
 8010506:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8010508:	697b      	ldr	r3, [r7, #20]
 801050a:	693a      	ldr	r2, [r7, #16]
 801050c:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 801050e:	697b      	ldr	r3, [r7, #20]
 8010510:	693a      	ldr	r2, [r7, #16]
 8010512:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8010514:	697b      	ldr	r3, [r7, #20]
 8010516:	693a      	ldr	r2, [r7, #16]
 8010518:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801051a:	4b35      	ldr	r3, [pc, #212]	; (80105f0 <tcp_listen_input+0x1e0>)
 801051c:	681b      	ldr	r3, [r3, #0]
 801051e:	1e5a      	subs	r2, r3, #1
 8010520:	697b      	ldr	r3, [r7, #20]
 8010522:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	691a      	ldr	r2, [r3, #16]
 8010528:	697b      	ldr	r3, [r7, #20]
 801052a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 801052c:	697b      	ldr	r3, [r7, #20]
 801052e:	687a      	ldr	r2, [r7, #4]
 8010530:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	7a5b      	ldrb	r3, [r3, #9]
 8010536:	f003 030c 	and.w	r3, r3, #12
 801053a:	b2da      	uxtb	r2, r3
 801053c:	697b      	ldr	r3, [r7, #20]
 801053e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	7a1a      	ldrb	r2, [r3, #8]
 8010544:	697b      	ldr	r3, [r7, #20]
 8010546:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8010548:	4b2e      	ldr	r3, [pc, #184]	; (8010604 <tcp_listen_input+0x1f4>)
 801054a:	681a      	ldr	r2, [r3, #0]
 801054c:	697b      	ldr	r3, [r7, #20]
 801054e:	60da      	str	r2, [r3, #12]
 8010550:	4a2c      	ldr	r2, [pc, #176]	; (8010604 <tcp_listen_input+0x1f4>)
 8010552:	697b      	ldr	r3, [r7, #20]
 8010554:	6013      	str	r3, [r2, #0]
 8010556:	f003 fd27 	bl	8013fa8 <tcp_timer_needed>
 801055a:	4b2b      	ldr	r3, [pc, #172]	; (8010608 <tcp_listen_input+0x1f8>)
 801055c:	2201      	movs	r2, #1
 801055e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8010560:	6978      	ldr	r0, [r7, #20]
 8010562:	f001 fd8d 	bl	8012080 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8010566:	4b23      	ldr	r3, [pc, #140]	; (80105f4 <tcp_listen_input+0x1e4>)
 8010568:	681b      	ldr	r3, [r3, #0]
 801056a:	89db      	ldrh	r3, [r3, #14]
 801056c:	b29a      	uxth	r2, r3
 801056e:	697b      	ldr	r3, [r7, #20]
 8010570:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8010574:	697b      	ldr	r3, [r7, #20]
 8010576:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801057a:	697b      	ldr	r3, [r7, #20]
 801057c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8010580:	697b      	ldr	r3, [r7, #20]
 8010582:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8010584:	697b      	ldr	r3, [r7, #20]
 8010586:	3304      	adds	r3, #4
 8010588:	4618      	mov	r0, r3
 801058a:	f005 f941 	bl	8015810 <ip4_route>
 801058e:	4601      	mov	r1, r0
 8010590:	697b      	ldr	r3, [r7, #20]
 8010592:	3304      	adds	r3, #4
 8010594:	461a      	mov	r2, r3
 8010596:	4620      	mov	r0, r4
 8010598:	f7ff fa32 	bl	800fa00 <tcp_eff_send_mss_netif>
 801059c:	4603      	mov	r3, r0
 801059e:	461a      	mov	r2, r3
 80105a0:	697b      	ldr	r3, [r7, #20]
 80105a2:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80105a4:	2112      	movs	r1, #18
 80105a6:	6978      	ldr	r0, [r7, #20]
 80105a8:	f002 fc9a 	bl	8012ee0 <tcp_enqueue_flags>
 80105ac:	4603      	mov	r3, r0
 80105ae:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80105b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80105b4:	2b00      	cmp	r3, #0
 80105b6:	d004      	beq.n	80105c2 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 80105b8:	2100      	movs	r1, #0
 80105ba:	6978      	ldr	r0, [r7, #20]
 80105bc:	f7fd fee0 	bl	800e380 <tcp_abandon>
      return;
 80105c0:	e006      	b.n	80105d0 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 80105c2:	6978      	ldr	r0, [r7, #20]
 80105c4:	f002 fd7a 	bl	80130bc <tcp_output>
  return;
 80105c8:	e001      	b.n	80105ce <tcp_listen_input+0x1be>
    return;
 80105ca:	bf00      	nop
 80105cc:	e000      	b.n	80105d0 <tcp_listen_input+0x1c0>
  return;
 80105ce:	bf00      	nop
}
 80105d0:	371c      	adds	r7, #28
 80105d2:	46bd      	mov	sp, r7
 80105d4:	bd90      	pop	{r4, r7, pc}
 80105d6:	bf00      	nop
 80105d8:	240040ec 	.word	0x240040ec
 80105dc:	080192e0 	.word	0x080192e0
 80105e0:	080194d8 	.word	0x080194d8
 80105e4:	0801932c 	.word	0x0801932c
 80105e8:	240040e4 	.word	0x240040e4
 80105ec:	240040ea 	.word	0x240040ea
 80105f0:	240040e0 	.word	0x240040e0
 80105f4:	240040d0 	.word	0x240040d0
 80105f8:	240048f8 	.word	0x240048f8
 80105fc:	240048fc 	.word	0x240048fc
 8010600:	240048e8 	.word	0x240048e8
 8010604:	240079a8 	.word	0x240079a8
 8010608:	240079a4 	.word	0x240079a4

0801060c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 801060c:	b580      	push	{r7, lr}
 801060e:	b086      	sub	sp, #24
 8010610:	af04      	add	r7, sp, #16
 8010612:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8010614:	4b2f      	ldr	r3, [pc, #188]	; (80106d4 <tcp_timewait_input+0xc8>)
 8010616:	781b      	ldrb	r3, [r3, #0]
 8010618:	f003 0304 	and.w	r3, r3, #4
 801061c:	2b00      	cmp	r3, #0
 801061e:	d153      	bne.n	80106c8 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	2b00      	cmp	r3, #0
 8010624:	d106      	bne.n	8010634 <tcp_timewait_input+0x28>
 8010626:	4b2c      	ldr	r3, [pc, #176]	; (80106d8 <tcp_timewait_input+0xcc>)
 8010628:	f240 22ee 	movw	r2, #750	; 0x2ee
 801062c:	492b      	ldr	r1, [pc, #172]	; (80106dc <tcp_timewait_input+0xd0>)
 801062e:	482c      	ldr	r0, [pc, #176]	; (80106e0 <tcp_timewait_input+0xd4>)
 8010630:	f006 fc32 	bl	8016e98 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8010634:	4b27      	ldr	r3, [pc, #156]	; (80106d4 <tcp_timewait_input+0xc8>)
 8010636:	781b      	ldrb	r3, [r3, #0]
 8010638:	f003 0302 	and.w	r3, r3, #2
 801063c:	2b00      	cmp	r3, #0
 801063e:	d02a      	beq.n	8010696 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8010640:	4b28      	ldr	r3, [pc, #160]	; (80106e4 <tcp_timewait_input+0xd8>)
 8010642:	681a      	ldr	r2, [r3, #0]
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010648:	1ad3      	subs	r3, r2, r3
 801064a:	2b00      	cmp	r3, #0
 801064c:	db2d      	blt.n	80106aa <tcp_timewait_input+0x9e>
 801064e:	4b25      	ldr	r3, [pc, #148]	; (80106e4 <tcp_timewait_input+0xd8>)
 8010650:	681a      	ldr	r2, [r3, #0]
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010656:	6879      	ldr	r1, [r7, #4]
 8010658:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801065a:	440b      	add	r3, r1
 801065c:	1ad3      	subs	r3, r2, r3
 801065e:	2b00      	cmp	r3, #0
 8010660:	dc23      	bgt.n	80106aa <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010662:	4b21      	ldr	r3, [pc, #132]	; (80106e8 <tcp_timewait_input+0xdc>)
 8010664:	6819      	ldr	r1, [r3, #0]
 8010666:	4b21      	ldr	r3, [pc, #132]	; (80106ec <tcp_timewait_input+0xe0>)
 8010668:	881b      	ldrh	r3, [r3, #0]
 801066a:	461a      	mov	r2, r3
 801066c:	4b1d      	ldr	r3, [pc, #116]	; (80106e4 <tcp_timewait_input+0xd8>)
 801066e:	681b      	ldr	r3, [r3, #0]
 8010670:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010672:	4b1f      	ldr	r3, [pc, #124]	; (80106f0 <tcp_timewait_input+0xe4>)
 8010674:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010676:	885b      	ldrh	r3, [r3, #2]
 8010678:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801067a:	4a1d      	ldr	r2, [pc, #116]	; (80106f0 <tcp_timewait_input+0xe4>)
 801067c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801067e:	8812      	ldrh	r2, [r2, #0]
 8010680:	b292      	uxth	r2, r2
 8010682:	9202      	str	r2, [sp, #8]
 8010684:	9301      	str	r3, [sp, #4]
 8010686:	4b1b      	ldr	r3, [pc, #108]	; (80106f4 <tcp_timewait_input+0xe8>)
 8010688:	9300      	str	r3, [sp, #0]
 801068a:	4b1b      	ldr	r3, [pc, #108]	; (80106f8 <tcp_timewait_input+0xec>)
 801068c:	4602      	mov	r2, r0
 801068e:	6878      	ldr	r0, [r7, #4]
 8010690:	f003 fac8 	bl	8013c24 <tcp_rst>
      return;
 8010694:	e01b      	b.n	80106ce <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8010696:	4b0f      	ldr	r3, [pc, #60]	; (80106d4 <tcp_timewait_input+0xc8>)
 8010698:	781b      	ldrb	r3, [r3, #0]
 801069a:	f003 0301 	and.w	r3, r3, #1
 801069e:	2b00      	cmp	r3, #0
 80106a0:	d003      	beq.n	80106aa <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80106a2:	4b16      	ldr	r3, [pc, #88]	; (80106fc <tcp_timewait_input+0xf0>)
 80106a4:	681a      	ldr	r2, [r3, #0]
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80106aa:	4b10      	ldr	r3, [pc, #64]	; (80106ec <tcp_timewait_input+0xe0>)
 80106ac:	881b      	ldrh	r3, [r3, #0]
 80106ae:	2b00      	cmp	r3, #0
 80106b0:	d00c      	beq.n	80106cc <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	8b5b      	ldrh	r3, [r3, #26]
 80106b6:	f043 0302 	orr.w	r3, r3, #2
 80106ba:	b29a      	uxth	r2, r3
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80106c0:	6878      	ldr	r0, [r7, #4]
 80106c2:	f002 fcfb 	bl	80130bc <tcp_output>
  }
  return;
 80106c6:	e001      	b.n	80106cc <tcp_timewait_input+0xc0>
    return;
 80106c8:	bf00      	nop
 80106ca:	e000      	b.n	80106ce <tcp_timewait_input+0xc2>
  return;
 80106cc:	bf00      	nop
}
 80106ce:	3708      	adds	r7, #8
 80106d0:	46bd      	mov	sp, r7
 80106d2:	bd80      	pop	{r7, pc}
 80106d4:	240040ec 	.word	0x240040ec
 80106d8:	080192e0 	.word	0x080192e0
 80106dc:	080194f8 	.word	0x080194f8
 80106e0:	0801932c 	.word	0x0801932c
 80106e4:	240040e0 	.word	0x240040e0
 80106e8:	240040e4 	.word	0x240040e4
 80106ec:	240040ea 	.word	0x240040ea
 80106f0:	240040d0 	.word	0x240040d0
 80106f4:	240048f8 	.word	0x240048f8
 80106f8:	240048fc 	.word	0x240048fc
 80106fc:	240079ac 	.word	0x240079ac

08010700 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8010700:	b590      	push	{r4, r7, lr}
 8010702:	b08d      	sub	sp, #52	; 0x34
 8010704:	af04      	add	r7, sp, #16
 8010706:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8010708:	2300      	movs	r3, #0
 801070a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 801070c:	2300      	movs	r3, #0
 801070e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	2b00      	cmp	r3, #0
 8010714:	d106      	bne.n	8010724 <tcp_process+0x24>
 8010716:	4ba5      	ldr	r3, [pc, #660]	; (80109ac <tcp_process+0x2ac>)
 8010718:	f44f 7247 	mov.w	r2, #796	; 0x31c
 801071c:	49a4      	ldr	r1, [pc, #656]	; (80109b0 <tcp_process+0x2b0>)
 801071e:	48a5      	ldr	r0, [pc, #660]	; (80109b4 <tcp_process+0x2b4>)
 8010720:	f006 fbba 	bl	8016e98 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8010724:	4ba4      	ldr	r3, [pc, #656]	; (80109b8 <tcp_process+0x2b8>)
 8010726:	781b      	ldrb	r3, [r3, #0]
 8010728:	f003 0304 	and.w	r3, r3, #4
 801072c:	2b00      	cmp	r3, #0
 801072e:	d04e      	beq.n	80107ce <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	7d1b      	ldrb	r3, [r3, #20]
 8010734:	2b02      	cmp	r3, #2
 8010736:	d108      	bne.n	801074a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801073c:	4b9f      	ldr	r3, [pc, #636]	; (80109bc <tcp_process+0x2bc>)
 801073e:	681b      	ldr	r3, [r3, #0]
 8010740:	429a      	cmp	r2, r3
 8010742:	d123      	bne.n	801078c <tcp_process+0x8c>
        acceptable = 1;
 8010744:	2301      	movs	r3, #1
 8010746:	76fb      	strb	r3, [r7, #27]
 8010748:	e020      	b.n	801078c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801074e:	4b9c      	ldr	r3, [pc, #624]	; (80109c0 <tcp_process+0x2c0>)
 8010750:	681b      	ldr	r3, [r3, #0]
 8010752:	429a      	cmp	r2, r3
 8010754:	d102      	bne.n	801075c <tcp_process+0x5c>
        acceptable = 1;
 8010756:	2301      	movs	r3, #1
 8010758:	76fb      	strb	r3, [r7, #27]
 801075a:	e017      	b.n	801078c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801075c:	4b98      	ldr	r3, [pc, #608]	; (80109c0 <tcp_process+0x2c0>)
 801075e:	681a      	ldr	r2, [r3, #0]
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010764:	1ad3      	subs	r3, r2, r3
 8010766:	2b00      	cmp	r3, #0
 8010768:	db10      	blt.n	801078c <tcp_process+0x8c>
 801076a:	4b95      	ldr	r3, [pc, #596]	; (80109c0 <tcp_process+0x2c0>)
 801076c:	681a      	ldr	r2, [r3, #0]
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010772:	6879      	ldr	r1, [r7, #4]
 8010774:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010776:	440b      	add	r3, r1
 8010778:	1ad3      	subs	r3, r2, r3
 801077a:	2b00      	cmp	r3, #0
 801077c:	dc06      	bgt.n	801078c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	8b5b      	ldrh	r3, [r3, #26]
 8010782:	f043 0302 	orr.w	r3, r3, #2
 8010786:	b29a      	uxth	r2, r3
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 801078c:	7efb      	ldrb	r3, [r7, #27]
 801078e:	2b00      	cmp	r3, #0
 8010790:	d01b      	beq.n	80107ca <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	7d1b      	ldrb	r3, [r3, #20]
 8010796:	2b00      	cmp	r3, #0
 8010798:	d106      	bne.n	80107a8 <tcp_process+0xa8>
 801079a:	4b84      	ldr	r3, [pc, #528]	; (80109ac <tcp_process+0x2ac>)
 801079c:	f44f 724e 	mov.w	r2, #824	; 0x338
 80107a0:	4988      	ldr	r1, [pc, #544]	; (80109c4 <tcp_process+0x2c4>)
 80107a2:	4884      	ldr	r0, [pc, #528]	; (80109b4 <tcp_process+0x2b4>)
 80107a4:	f006 fb78 	bl	8016e98 <iprintf>
      recv_flags |= TF_RESET;
 80107a8:	4b87      	ldr	r3, [pc, #540]	; (80109c8 <tcp_process+0x2c8>)
 80107aa:	781b      	ldrb	r3, [r3, #0]
 80107ac:	f043 0308 	orr.w	r3, r3, #8
 80107b0:	b2da      	uxtb	r2, r3
 80107b2:	4b85      	ldr	r3, [pc, #532]	; (80109c8 <tcp_process+0x2c8>)
 80107b4:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	8b5b      	ldrh	r3, [r3, #26]
 80107ba:	f023 0301 	bic.w	r3, r3, #1
 80107be:	b29a      	uxth	r2, r3
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 80107c4:	f06f 030d 	mvn.w	r3, #13
 80107c8:	e37a      	b.n	8010ec0 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 80107ca:	2300      	movs	r3, #0
 80107cc:	e378      	b.n	8010ec0 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80107ce:	4b7a      	ldr	r3, [pc, #488]	; (80109b8 <tcp_process+0x2b8>)
 80107d0:	781b      	ldrb	r3, [r3, #0]
 80107d2:	f003 0302 	and.w	r3, r3, #2
 80107d6:	2b00      	cmp	r3, #0
 80107d8:	d010      	beq.n	80107fc <tcp_process+0xfc>
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	7d1b      	ldrb	r3, [r3, #20]
 80107de:	2b02      	cmp	r3, #2
 80107e0:	d00c      	beq.n	80107fc <tcp_process+0xfc>
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	7d1b      	ldrb	r3, [r3, #20]
 80107e6:	2b03      	cmp	r3, #3
 80107e8:	d008      	beq.n	80107fc <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	8b5b      	ldrh	r3, [r3, #26]
 80107ee:	f043 0302 	orr.w	r3, r3, #2
 80107f2:	b29a      	uxth	r2, r3
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80107f8:	2300      	movs	r3, #0
 80107fa:	e361      	b.n	8010ec0 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	8b5b      	ldrh	r3, [r3, #26]
 8010800:	f003 0310 	and.w	r3, r3, #16
 8010804:	2b00      	cmp	r3, #0
 8010806:	d103      	bne.n	8010810 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8010808:	4b70      	ldr	r3, [pc, #448]	; (80109cc <tcp_process+0x2cc>)
 801080a:	681a      	ldr	r2, [r3, #0]
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	2200      	movs	r2, #0
 8010814:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	2200      	movs	r2, #0
 801081c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8010820:	6878      	ldr	r0, [r7, #4]
 8010822:	f001 fc2d 	bl	8012080 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	7d1b      	ldrb	r3, [r3, #20]
 801082a:	3b02      	subs	r3, #2
 801082c:	2b07      	cmp	r3, #7
 801082e:	f200 8337 	bhi.w	8010ea0 <tcp_process+0x7a0>
 8010832:	a201      	add	r2, pc, #4	; (adr r2, 8010838 <tcp_process+0x138>)
 8010834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010838:	08010859 	.word	0x08010859
 801083c:	08010a89 	.word	0x08010a89
 8010840:	08010c01 	.word	0x08010c01
 8010844:	08010c2b 	.word	0x08010c2b
 8010848:	08010d4f 	.word	0x08010d4f
 801084c:	08010c01 	.word	0x08010c01
 8010850:	08010ddb 	.word	0x08010ddb
 8010854:	08010e6b 	.word	0x08010e6b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8010858:	4b57      	ldr	r3, [pc, #348]	; (80109b8 <tcp_process+0x2b8>)
 801085a:	781b      	ldrb	r3, [r3, #0]
 801085c:	f003 0310 	and.w	r3, r3, #16
 8010860:	2b00      	cmp	r3, #0
 8010862:	f000 80e4 	beq.w	8010a2e <tcp_process+0x32e>
 8010866:	4b54      	ldr	r3, [pc, #336]	; (80109b8 <tcp_process+0x2b8>)
 8010868:	781b      	ldrb	r3, [r3, #0]
 801086a:	f003 0302 	and.w	r3, r3, #2
 801086e:	2b00      	cmp	r3, #0
 8010870:	f000 80dd 	beq.w	8010a2e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010878:	1c5a      	adds	r2, r3, #1
 801087a:	4b50      	ldr	r3, [pc, #320]	; (80109bc <tcp_process+0x2bc>)
 801087c:	681b      	ldr	r3, [r3, #0]
 801087e:	429a      	cmp	r2, r3
 8010880:	f040 80d5 	bne.w	8010a2e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8010884:	4b4e      	ldr	r3, [pc, #312]	; (80109c0 <tcp_process+0x2c0>)
 8010886:	681b      	ldr	r3, [r3, #0]
 8010888:	1c5a      	adds	r2, r3, #1
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8010896:	4b49      	ldr	r3, [pc, #292]	; (80109bc <tcp_process+0x2bc>)
 8010898:	681a      	ldr	r2, [r3, #0]
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801089e:	4b4c      	ldr	r3, [pc, #304]	; (80109d0 <tcp_process+0x2d0>)
 80108a0:	681b      	ldr	r3, [r3, #0]
 80108a2:	89db      	ldrh	r3, [r3, #14]
 80108a4:	b29a      	uxth	r2, r3
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80108b8:	4b41      	ldr	r3, [pc, #260]	; (80109c0 <tcp_process+0x2c0>)
 80108ba:	681b      	ldr	r3, [r3, #0]
 80108bc:	1e5a      	subs	r2, r3, #1
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	2204      	movs	r2, #4
 80108c6:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	3304      	adds	r3, #4
 80108d0:	4618      	mov	r0, r3
 80108d2:	f004 ff9d 	bl	8015810 <ip4_route>
 80108d6:	4601      	mov	r1, r0
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	3304      	adds	r3, #4
 80108dc:	461a      	mov	r2, r3
 80108de:	4620      	mov	r0, r4
 80108e0:	f7ff f88e 	bl	800fa00 <tcp_eff_send_mss_netif>
 80108e4:	4603      	mov	r3, r0
 80108e6:	461a      	mov	r2, r3
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80108f0:	009a      	lsls	r2, r3, #2
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80108f6:	005b      	lsls	r3, r3, #1
 80108f8:	f241 111c 	movw	r1, #4380	; 0x111c
 80108fc:	428b      	cmp	r3, r1
 80108fe:	bf38      	it	cc
 8010900:	460b      	movcc	r3, r1
 8010902:	429a      	cmp	r2, r3
 8010904:	d204      	bcs.n	8010910 <tcp_process+0x210>
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801090a:	009b      	lsls	r3, r3, #2
 801090c:	b29b      	uxth	r3, r3
 801090e:	e00d      	b.n	801092c <tcp_process+0x22c>
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010914:	005b      	lsls	r3, r3, #1
 8010916:	f241 121c 	movw	r2, #4380	; 0x111c
 801091a:	4293      	cmp	r3, r2
 801091c:	d904      	bls.n	8010928 <tcp_process+0x228>
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010922:	005b      	lsls	r3, r3, #1
 8010924:	b29b      	uxth	r3, r3
 8010926:	e001      	b.n	801092c <tcp_process+0x22c>
 8010928:	f241 131c 	movw	r3, #4380	; 0x111c
 801092c:	687a      	ldr	r2, [r7, #4]
 801092e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010938:	2b00      	cmp	r3, #0
 801093a:	d106      	bne.n	801094a <tcp_process+0x24a>
 801093c:	4b1b      	ldr	r3, [pc, #108]	; (80109ac <tcp_process+0x2ac>)
 801093e:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8010942:	4924      	ldr	r1, [pc, #144]	; (80109d4 <tcp_process+0x2d4>)
 8010944:	481b      	ldr	r0, [pc, #108]	; (80109b4 <tcp_process+0x2b4>)
 8010946:	f006 faa7 	bl	8016e98 <iprintf>
        --pcb->snd_queuelen;
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010950:	3b01      	subs	r3, #1
 8010952:	b29a      	uxth	r2, r3
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801095e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8010960:	69fb      	ldr	r3, [r7, #28]
 8010962:	2b00      	cmp	r3, #0
 8010964:	d111      	bne.n	801098a <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801096a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 801096c:	69fb      	ldr	r3, [r7, #28]
 801096e:	2b00      	cmp	r3, #0
 8010970:	d106      	bne.n	8010980 <tcp_process+0x280>
 8010972:	4b0e      	ldr	r3, [pc, #56]	; (80109ac <tcp_process+0x2ac>)
 8010974:	f44f 725d 	mov.w	r2, #884	; 0x374
 8010978:	4917      	ldr	r1, [pc, #92]	; (80109d8 <tcp_process+0x2d8>)
 801097a:	480e      	ldr	r0, [pc, #56]	; (80109b4 <tcp_process+0x2b4>)
 801097c:	f006 fa8c 	bl	8016e98 <iprintf>
          pcb->unsent = rseg->next;
 8010980:	69fb      	ldr	r3, [r7, #28]
 8010982:	681a      	ldr	r2, [r3, #0]
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	66da      	str	r2, [r3, #108]	; 0x6c
 8010988:	e003      	b.n	8010992 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 801098a:	69fb      	ldr	r3, [r7, #28]
 801098c:	681a      	ldr	r2, [r3, #0]
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8010992:	69f8      	ldr	r0, [r7, #28]
 8010994:	f7fe fc57 	bl	800f246 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801099c:	2b00      	cmp	r3, #0
 801099e:	d11d      	bne.n	80109dc <tcp_process+0x2dc>
          pcb->rtime = -1;
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80109a6:	861a      	strh	r2, [r3, #48]	; 0x30
 80109a8:	e01f      	b.n	80109ea <tcp_process+0x2ea>
 80109aa:	bf00      	nop
 80109ac:	080192e0 	.word	0x080192e0
 80109b0:	08019518 	.word	0x08019518
 80109b4:	0801932c 	.word	0x0801932c
 80109b8:	240040ec 	.word	0x240040ec
 80109bc:	240040e4 	.word	0x240040e4
 80109c0:	240040e0 	.word	0x240040e0
 80109c4:	08019534 	.word	0x08019534
 80109c8:	240040ed 	.word	0x240040ed
 80109cc:	240079ac 	.word	0x240079ac
 80109d0:	240040d0 	.word	0x240040d0
 80109d4:	08019554 	.word	0x08019554
 80109d8:	0801956c 	.word	0x0801956c
        } else {
          pcb->rtime = 0;
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	2200      	movs	r2, #0
 80109e0:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	2200      	movs	r2, #0
 80109e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80109f0:	2b00      	cmp	r3, #0
 80109f2:	d00a      	beq.n	8010a0a <tcp_process+0x30a>
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80109fa:	687a      	ldr	r2, [r7, #4]
 80109fc:	6910      	ldr	r0, [r2, #16]
 80109fe:	2200      	movs	r2, #0
 8010a00:	6879      	ldr	r1, [r7, #4]
 8010a02:	4798      	blx	r3
 8010a04:	4603      	mov	r3, r0
 8010a06:	76bb      	strb	r3, [r7, #26]
 8010a08:	e001      	b.n	8010a0e <tcp_process+0x30e>
 8010a0a:	2300      	movs	r3, #0
 8010a0c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8010a0e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010a12:	f113 0f0d 	cmn.w	r3, #13
 8010a16:	d102      	bne.n	8010a1e <tcp_process+0x31e>
          return ERR_ABRT;
 8010a18:	f06f 030c 	mvn.w	r3, #12
 8010a1c:	e250      	b.n	8010ec0 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	8b5b      	ldrh	r3, [r3, #26]
 8010a22:	f043 0302 	orr.w	r3, r3, #2
 8010a26:	b29a      	uxth	r2, r3
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8010a2c:	e23a      	b.n	8010ea4 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8010a2e:	4b9d      	ldr	r3, [pc, #628]	; (8010ca4 <tcp_process+0x5a4>)
 8010a30:	781b      	ldrb	r3, [r3, #0]
 8010a32:	f003 0310 	and.w	r3, r3, #16
 8010a36:	2b00      	cmp	r3, #0
 8010a38:	f000 8234 	beq.w	8010ea4 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010a3c:	4b9a      	ldr	r3, [pc, #616]	; (8010ca8 <tcp_process+0x5a8>)
 8010a3e:	6819      	ldr	r1, [r3, #0]
 8010a40:	4b9a      	ldr	r3, [pc, #616]	; (8010cac <tcp_process+0x5ac>)
 8010a42:	881b      	ldrh	r3, [r3, #0]
 8010a44:	461a      	mov	r2, r3
 8010a46:	4b9a      	ldr	r3, [pc, #616]	; (8010cb0 <tcp_process+0x5b0>)
 8010a48:	681b      	ldr	r3, [r3, #0]
 8010a4a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010a4c:	4b99      	ldr	r3, [pc, #612]	; (8010cb4 <tcp_process+0x5b4>)
 8010a4e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010a50:	885b      	ldrh	r3, [r3, #2]
 8010a52:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010a54:	4a97      	ldr	r2, [pc, #604]	; (8010cb4 <tcp_process+0x5b4>)
 8010a56:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010a58:	8812      	ldrh	r2, [r2, #0]
 8010a5a:	b292      	uxth	r2, r2
 8010a5c:	9202      	str	r2, [sp, #8]
 8010a5e:	9301      	str	r3, [sp, #4]
 8010a60:	4b95      	ldr	r3, [pc, #596]	; (8010cb8 <tcp_process+0x5b8>)
 8010a62:	9300      	str	r3, [sp, #0]
 8010a64:	4b95      	ldr	r3, [pc, #596]	; (8010cbc <tcp_process+0x5bc>)
 8010a66:	4602      	mov	r2, r0
 8010a68:	6878      	ldr	r0, [r7, #4]
 8010a6a:	f003 f8db 	bl	8013c24 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010a74:	2b05      	cmp	r3, #5
 8010a76:	f200 8215 	bhi.w	8010ea4 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	2200      	movs	r2, #0
 8010a7e:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8010a80:	6878      	ldr	r0, [r7, #4]
 8010a82:	f002 fea5 	bl	80137d0 <tcp_rexmit_rto>
      break;
 8010a86:	e20d      	b.n	8010ea4 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8010a88:	4b86      	ldr	r3, [pc, #536]	; (8010ca4 <tcp_process+0x5a4>)
 8010a8a:	781b      	ldrb	r3, [r3, #0]
 8010a8c:	f003 0310 	and.w	r3, r3, #16
 8010a90:	2b00      	cmp	r3, #0
 8010a92:	f000 80a1 	beq.w	8010bd8 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010a96:	4b84      	ldr	r3, [pc, #528]	; (8010ca8 <tcp_process+0x5a8>)
 8010a98:	681a      	ldr	r2, [r3, #0]
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010a9e:	1ad3      	subs	r3, r2, r3
 8010aa0:	3b01      	subs	r3, #1
 8010aa2:	2b00      	cmp	r3, #0
 8010aa4:	db7e      	blt.n	8010ba4 <tcp_process+0x4a4>
 8010aa6:	4b80      	ldr	r3, [pc, #512]	; (8010ca8 <tcp_process+0x5a8>)
 8010aa8:	681a      	ldr	r2, [r3, #0]
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010aae:	1ad3      	subs	r3, r2, r3
 8010ab0:	2b00      	cmp	r3, #0
 8010ab2:	dc77      	bgt.n	8010ba4 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	2204      	movs	r2, #4
 8010ab8:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010abe:	2b00      	cmp	r3, #0
 8010ac0:	d102      	bne.n	8010ac8 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8010ac2:	23fa      	movs	r3, #250	; 0xfa
 8010ac4:	76bb      	strb	r3, [r7, #26]
 8010ac6:	e01d      	b.n	8010b04 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010acc:	699b      	ldr	r3, [r3, #24]
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	d106      	bne.n	8010ae0 <tcp_process+0x3e0>
 8010ad2:	4b7b      	ldr	r3, [pc, #492]	; (8010cc0 <tcp_process+0x5c0>)
 8010ad4:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8010ad8:	497a      	ldr	r1, [pc, #488]	; (8010cc4 <tcp_process+0x5c4>)
 8010ada:	487b      	ldr	r0, [pc, #492]	; (8010cc8 <tcp_process+0x5c8>)
 8010adc:	f006 f9dc 	bl	8016e98 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010ae4:	699b      	ldr	r3, [r3, #24]
 8010ae6:	2b00      	cmp	r3, #0
 8010ae8:	d00a      	beq.n	8010b00 <tcp_process+0x400>
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010aee:	699b      	ldr	r3, [r3, #24]
 8010af0:	687a      	ldr	r2, [r7, #4]
 8010af2:	6910      	ldr	r0, [r2, #16]
 8010af4:	2200      	movs	r2, #0
 8010af6:	6879      	ldr	r1, [r7, #4]
 8010af8:	4798      	blx	r3
 8010afa:	4603      	mov	r3, r0
 8010afc:	76bb      	strb	r3, [r7, #26]
 8010afe:	e001      	b.n	8010b04 <tcp_process+0x404>
 8010b00:	23f0      	movs	r3, #240	; 0xf0
 8010b02:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8010b04:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010b08:	2b00      	cmp	r3, #0
 8010b0a:	d00a      	beq.n	8010b22 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8010b0c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010b10:	f113 0f0d 	cmn.w	r3, #13
 8010b14:	d002      	beq.n	8010b1c <tcp_process+0x41c>
              tcp_abort(pcb);
 8010b16:	6878      	ldr	r0, [r7, #4]
 8010b18:	f7fd fcf0 	bl	800e4fc <tcp_abort>
            }
            return ERR_ABRT;
 8010b1c:	f06f 030c 	mvn.w	r3, #12
 8010b20:	e1ce      	b.n	8010ec0 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8010b22:	6878      	ldr	r0, [r7, #4]
 8010b24:	f000 fae0 	bl	80110e8 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8010b28:	4b68      	ldr	r3, [pc, #416]	; (8010ccc <tcp_process+0x5cc>)
 8010b2a:	881b      	ldrh	r3, [r3, #0]
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	d005      	beq.n	8010b3c <tcp_process+0x43c>
            recv_acked--;
 8010b30:	4b66      	ldr	r3, [pc, #408]	; (8010ccc <tcp_process+0x5cc>)
 8010b32:	881b      	ldrh	r3, [r3, #0]
 8010b34:	3b01      	subs	r3, #1
 8010b36:	b29a      	uxth	r2, r3
 8010b38:	4b64      	ldr	r3, [pc, #400]	; (8010ccc <tcp_process+0x5cc>)
 8010b3a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010b40:	009a      	lsls	r2, r3, #2
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010b46:	005b      	lsls	r3, r3, #1
 8010b48:	f241 111c 	movw	r1, #4380	; 0x111c
 8010b4c:	428b      	cmp	r3, r1
 8010b4e:	bf38      	it	cc
 8010b50:	460b      	movcc	r3, r1
 8010b52:	429a      	cmp	r2, r3
 8010b54:	d204      	bcs.n	8010b60 <tcp_process+0x460>
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010b5a:	009b      	lsls	r3, r3, #2
 8010b5c:	b29b      	uxth	r3, r3
 8010b5e:	e00d      	b.n	8010b7c <tcp_process+0x47c>
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010b64:	005b      	lsls	r3, r3, #1
 8010b66:	f241 121c 	movw	r2, #4380	; 0x111c
 8010b6a:	4293      	cmp	r3, r2
 8010b6c:	d904      	bls.n	8010b78 <tcp_process+0x478>
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010b72:	005b      	lsls	r3, r3, #1
 8010b74:	b29b      	uxth	r3, r3
 8010b76:	e001      	b.n	8010b7c <tcp_process+0x47c>
 8010b78:	f241 131c 	movw	r3, #4380	; 0x111c
 8010b7c:	687a      	ldr	r2, [r7, #4]
 8010b7e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8010b82:	4b53      	ldr	r3, [pc, #332]	; (8010cd0 <tcp_process+0x5d0>)
 8010b84:	781b      	ldrb	r3, [r3, #0]
 8010b86:	f003 0320 	and.w	r3, r3, #32
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	d037      	beq.n	8010bfe <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	8b5b      	ldrh	r3, [r3, #26]
 8010b92:	f043 0302 	orr.w	r3, r3, #2
 8010b96:	b29a      	uxth	r2, r3
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	2207      	movs	r2, #7
 8010ba0:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8010ba2:	e02c      	b.n	8010bfe <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010ba4:	4b40      	ldr	r3, [pc, #256]	; (8010ca8 <tcp_process+0x5a8>)
 8010ba6:	6819      	ldr	r1, [r3, #0]
 8010ba8:	4b40      	ldr	r3, [pc, #256]	; (8010cac <tcp_process+0x5ac>)
 8010baa:	881b      	ldrh	r3, [r3, #0]
 8010bac:	461a      	mov	r2, r3
 8010bae:	4b40      	ldr	r3, [pc, #256]	; (8010cb0 <tcp_process+0x5b0>)
 8010bb0:	681b      	ldr	r3, [r3, #0]
 8010bb2:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010bb4:	4b3f      	ldr	r3, [pc, #252]	; (8010cb4 <tcp_process+0x5b4>)
 8010bb6:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010bb8:	885b      	ldrh	r3, [r3, #2]
 8010bba:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010bbc:	4a3d      	ldr	r2, [pc, #244]	; (8010cb4 <tcp_process+0x5b4>)
 8010bbe:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010bc0:	8812      	ldrh	r2, [r2, #0]
 8010bc2:	b292      	uxth	r2, r2
 8010bc4:	9202      	str	r2, [sp, #8]
 8010bc6:	9301      	str	r3, [sp, #4]
 8010bc8:	4b3b      	ldr	r3, [pc, #236]	; (8010cb8 <tcp_process+0x5b8>)
 8010bca:	9300      	str	r3, [sp, #0]
 8010bcc:	4b3b      	ldr	r3, [pc, #236]	; (8010cbc <tcp_process+0x5bc>)
 8010bce:	4602      	mov	r2, r0
 8010bd0:	6878      	ldr	r0, [r7, #4]
 8010bd2:	f003 f827 	bl	8013c24 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8010bd6:	e167      	b.n	8010ea8 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8010bd8:	4b32      	ldr	r3, [pc, #200]	; (8010ca4 <tcp_process+0x5a4>)
 8010bda:	781b      	ldrb	r3, [r3, #0]
 8010bdc:	f003 0302 	and.w	r3, r3, #2
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	f000 8161 	beq.w	8010ea8 <tcp_process+0x7a8>
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010bea:	1e5a      	subs	r2, r3, #1
 8010bec:	4b30      	ldr	r3, [pc, #192]	; (8010cb0 <tcp_process+0x5b0>)
 8010bee:	681b      	ldr	r3, [r3, #0]
 8010bf0:	429a      	cmp	r2, r3
 8010bf2:	f040 8159 	bne.w	8010ea8 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8010bf6:	6878      	ldr	r0, [r7, #4]
 8010bf8:	f002 fe0c 	bl	8013814 <tcp_rexmit>
      break;
 8010bfc:	e154      	b.n	8010ea8 <tcp_process+0x7a8>
 8010bfe:	e153      	b.n	8010ea8 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8010c00:	6878      	ldr	r0, [r7, #4]
 8010c02:	f000 fa71 	bl	80110e8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8010c06:	4b32      	ldr	r3, [pc, #200]	; (8010cd0 <tcp_process+0x5d0>)
 8010c08:	781b      	ldrb	r3, [r3, #0]
 8010c0a:	f003 0320 	and.w	r3, r3, #32
 8010c0e:	2b00      	cmp	r3, #0
 8010c10:	f000 814c 	beq.w	8010eac <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	8b5b      	ldrh	r3, [r3, #26]
 8010c18:	f043 0302 	orr.w	r3, r3, #2
 8010c1c:	b29a      	uxth	r2, r3
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	2207      	movs	r2, #7
 8010c26:	751a      	strb	r2, [r3, #20]
      }
      break;
 8010c28:	e140      	b.n	8010eac <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8010c2a:	6878      	ldr	r0, [r7, #4]
 8010c2c:	f000 fa5c 	bl	80110e8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8010c30:	4b27      	ldr	r3, [pc, #156]	; (8010cd0 <tcp_process+0x5d0>)
 8010c32:	781b      	ldrb	r3, [r3, #0]
 8010c34:	f003 0320 	and.w	r3, r3, #32
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	d071      	beq.n	8010d20 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010c3c:	4b19      	ldr	r3, [pc, #100]	; (8010ca4 <tcp_process+0x5a4>)
 8010c3e:	781b      	ldrb	r3, [r3, #0]
 8010c40:	f003 0310 	and.w	r3, r3, #16
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	d060      	beq.n	8010d0a <tcp_process+0x60a>
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010c4c:	4b16      	ldr	r3, [pc, #88]	; (8010ca8 <tcp_process+0x5a8>)
 8010c4e:	681b      	ldr	r3, [r3, #0]
 8010c50:	429a      	cmp	r2, r3
 8010c52:	d15a      	bne.n	8010d0a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010c58:	2b00      	cmp	r3, #0
 8010c5a:	d156      	bne.n	8010d0a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	8b5b      	ldrh	r3, [r3, #26]
 8010c60:	f043 0302 	orr.w	r3, r3, #2
 8010c64:	b29a      	uxth	r2, r3
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8010c6a:	6878      	ldr	r0, [r7, #4]
 8010c6c:	f7fe fdbe 	bl	800f7ec <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8010c70:	4b18      	ldr	r3, [pc, #96]	; (8010cd4 <tcp_process+0x5d4>)
 8010c72:	681b      	ldr	r3, [r3, #0]
 8010c74:	687a      	ldr	r2, [r7, #4]
 8010c76:	429a      	cmp	r2, r3
 8010c78:	d105      	bne.n	8010c86 <tcp_process+0x586>
 8010c7a:	4b16      	ldr	r3, [pc, #88]	; (8010cd4 <tcp_process+0x5d4>)
 8010c7c:	681b      	ldr	r3, [r3, #0]
 8010c7e:	68db      	ldr	r3, [r3, #12]
 8010c80:	4a14      	ldr	r2, [pc, #80]	; (8010cd4 <tcp_process+0x5d4>)
 8010c82:	6013      	str	r3, [r2, #0]
 8010c84:	e02e      	b.n	8010ce4 <tcp_process+0x5e4>
 8010c86:	4b13      	ldr	r3, [pc, #76]	; (8010cd4 <tcp_process+0x5d4>)
 8010c88:	681b      	ldr	r3, [r3, #0]
 8010c8a:	617b      	str	r3, [r7, #20]
 8010c8c:	e027      	b.n	8010cde <tcp_process+0x5de>
 8010c8e:	697b      	ldr	r3, [r7, #20]
 8010c90:	68db      	ldr	r3, [r3, #12]
 8010c92:	687a      	ldr	r2, [r7, #4]
 8010c94:	429a      	cmp	r2, r3
 8010c96:	d11f      	bne.n	8010cd8 <tcp_process+0x5d8>
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	68da      	ldr	r2, [r3, #12]
 8010c9c:	697b      	ldr	r3, [r7, #20]
 8010c9e:	60da      	str	r2, [r3, #12]
 8010ca0:	e020      	b.n	8010ce4 <tcp_process+0x5e4>
 8010ca2:	bf00      	nop
 8010ca4:	240040ec 	.word	0x240040ec
 8010ca8:	240040e4 	.word	0x240040e4
 8010cac:	240040ea 	.word	0x240040ea
 8010cb0:	240040e0 	.word	0x240040e0
 8010cb4:	240040d0 	.word	0x240040d0
 8010cb8:	240048f8 	.word	0x240048f8
 8010cbc:	240048fc 	.word	0x240048fc
 8010cc0:	080192e0 	.word	0x080192e0
 8010cc4:	08019580 	.word	0x08019580
 8010cc8:	0801932c 	.word	0x0801932c
 8010ccc:	240040e8 	.word	0x240040e8
 8010cd0:	240040ed 	.word	0x240040ed
 8010cd4:	240079a8 	.word	0x240079a8
 8010cd8:	697b      	ldr	r3, [r7, #20]
 8010cda:	68db      	ldr	r3, [r3, #12]
 8010cdc:	617b      	str	r3, [r7, #20]
 8010cde:	697b      	ldr	r3, [r7, #20]
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	d1d4      	bne.n	8010c8e <tcp_process+0x58e>
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	2200      	movs	r2, #0
 8010ce8:	60da      	str	r2, [r3, #12]
 8010cea:	4b77      	ldr	r3, [pc, #476]	; (8010ec8 <tcp_process+0x7c8>)
 8010cec:	2201      	movs	r2, #1
 8010cee:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	220a      	movs	r2, #10
 8010cf4:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8010cf6:	4b75      	ldr	r3, [pc, #468]	; (8010ecc <tcp_process+0x7cc>)
 8010cf8:	681a      	ldr	r2, [r3, #0]
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	60da      	str	r2, [r3, #12]
 8010cfe:	4a73      	ldr	r2, [pc, #460]	; (8010ecc <tcp_process+0x7cc>)
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	6013      	str	r3, [r2, #0]
 8010d04:	f003 f950 	bl	8013fa8 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8010d08:	e0d2      	b.n	8010eb0 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	8b5b      	ldrh	r3, [r3, #26]
 8010d0e:	f043 0302 	orr.w	r3, r3, #2
 8010d12:	b29a      	uxth	r2, r3
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	2208      	movs	r2, #8
 8010d1c:	751a      	strb	r2, [r3, #20]
      break;
 8010d1e:	e0c7      	b.n	8010eb0 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010d20:	4b6b      	ldr	r3, [pc, #428]	; (8010ed0 <tcp_process+0x7d0>)
 8010d22:	781b      	ldrb	r3, [r3, #0]
 8010d24:	f003 0310 	and.w	r3, r3, #16
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	f000 80c1 	beq.w	8010eb0 <tcp_process+0x7b0>
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010d32:	4b68      	ldr	r3, [pc, #416]	; (8010ed4 <tcp_process+0x7d4>)
 8010d34:	681b      	ldr	r3, [r3, #0]
 8010d36:	429a      	cmp	r2, r3
 8010d38:	f040 80ba 	bne.w	8010eb0 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010d40:	2b00      	cmp	r3, #0
 8010d42:	f040 80b5 	bne.w	8010eb0 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	2206      	movs	r2, #6
 8010d4a:	751a      	strb	r2, [r3, #20]
      break;
 8010d4c:	e0b0      	b.n	8010eb0 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8010d4e:	6878      	ldr	r0, [r7, #4]
 8010d50:	f000 f9ca 	bl	80110e8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8010d54:	4b60      	ldr	r3, [pc, #384]	; (8010ed8 <tcp_process+0x7d8>)
 8010d56:	781b      	ldrb	r3, [r3, #0]
 8010d58:	f003 0320 	and.w	r3, r3, #32
 8010d5c:	2b00      	cmp	r3, #0
 8010d5e:	f000 80a9 	beq.w	8010eb4 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	8b5b      	ldrh	r3, [r3, #26]
 8010d66:	f043 0302 	orr.w	r3, r3, #2
 8010d6a:	b29a      	uxth	r2, r3
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8010d70:	6878      	ldr	r0, [r7, #4]
 8010d72:	f7fe fd3b 	bl	800f7ec <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8010d76:	4b59      	ldr	r3, [pc, #356]	; (8010edc <tcp_process+0x7dc>)
 8010d78:	681b      	ldr	r3, [r3, #0]
 8010d7a:	687a      	ldr	r2, [r7, #4]
 8010d7c:	429a      	cmp	r2, r3
 8010d7e:	d105      	bne.n	8010d8c <tcp_process+0x68c>
 8010d80:	4b56      	ldr	r3, [pc, #344]	; (8010edc <tcp_process+0x7dc>)
 8010d82:	681b      	ldr	r3, [r3, #0]
 8010d84:	68db      	ldr	r3, [r3, #12]
 8010d86:	4a55      	ldr	r2, [pc, #340]	; (8010edc <tcp_process+0x7dc>)
 8010d88:	6013      	str	r3, [r2, #0]
 8010d8a:	e013      	b.n	8010db4 <tcp_process+0x6b4>
 8010d8c:	4b53      	ldr	r3, [pc, #332]	; (8010edc <tcp_process+0x7dc>)
 8010d8e:	681b      	ldr	r3, [r3, #0]
 8010d90:	613b      	str	r3, [r7, #16]
 8010d92:	e00c      	b.n	8010dae <tcp_process+0x6ae>
 8010d94:	693b      	ldr	r3, [r7, #16]
 8010d96:	68db      	ldr	r3, [r3, #12]
 8010d98:	687a      	ldr	r2, [r7, #4]
 8010d9a:	429a      	cmp	r2, r3
 8010d9c:	d104      	bne.n	8010da8 <tcp_process+0x6a8>
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	68da      	ldr	r2, [r3, #12]
 8010da2:	693b      	ldr	r3, [r7, #16]
 8010da4:	60da      	str	r2, [r3, #12]
 8010da6:	e005      	b.n	8010db4 <tcp_process+0x6b4>
 8010da8:	693b      	ldr	r3, [r7, #16]
 8010daa:	68db      	ldr	r3, [r3, #12]
 8010dac:	613b      	str	r3, [r7, #16]
 8010dae:	693b      	ldr	r3, [r7, #16]
 8010db0:	2b00      	cmp	r3, #0
 8010db2:	d1ef      	bne.n	8010d94 <tcp_process+0x694>
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	2200      	movs	r2, #0
 8010db8:	60da      	str	r2, [r3, #12]
 8010dba:	4b43      	ldr	r3, [pc, #268]	; (8010ec8 <tcp_process+0x7c8>)
 8010dbc:	2201      	movs	r2, #1
 8010dbe:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	220a      	movs	r2, #10
 8010dc4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8010dc6:	4b41      	ldr	r3, [pc, #260]	; (8010ecc <tcp_process+0x7cc>)
 8010dc8:	681a      	ldr	r2, [r3, #0]
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	60da      	str	r2, [r3, #12]
 8010dce:	4a3f      	ldr	r2, [pc, #252]	; (8010ecc <tcp_process+0x7cc>)
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	6013      	str	r3, [r2, #0]
 8010dd4:	f003 f8e8 	bl	8013fa8 <tcp_timer_needed>
      }
      break;
 8010dd8:	e06c      	b.n	8010eb4 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8010dda:	6878      	ldr	r0, [r7, #4]
 8010ddc:	f000 f984 	bl	80110e8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8010de0:	4b3b      	ldr	r3, [pc, #236]	; (8010ed0 <tcp_process+0x7d0>)
 8010de2:	781b      	ldrb	r3, [r3, #0]
 8010de4:	f003 0310 	and.w	r3, r3, #16
 8010de8:	2b00      	cmp	r3, #0
 8010dea:	d065      	beq.n	8010eb8 <tcp_process+0x7b8>
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010df0:	4b38      	ldr	r3, [pc, #224]	; (8010ed4 <tcp_process+0x7d4>)
 8010df2:	681b      	ldr	r3, [r3, #0]
 8010df4:	429a      	cmp	r2, r3
 8010df6:	d15f      	bne.n	8010eb8 <tcp_process+0x7b8>
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010dfc:	2b00      	cmp	r3, #0
 8010dfe:	d15b      	bne.n	8010eb8 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8010e00:	6878      	ldr	r0, [r7, #4]
 8010e02:	f7fe fcf3 	bl	800f7ec <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8010e06:	4b35      	ldr	r3, [pc, #212]	; (8010edc <tcp_process+0x7dc>)
 8010e08:	681b      	ldr	r3, [r3, #0]
 8010e0a:	687a      	ldr	r2, [r7, #4]
 8010e0c:	429a      	cmp	r2, r3
 8010e0e:	d105      	bne.n	8010e1c <tcp_process+0x71c>
 8010e10:	4b32      	ldr	r3, [pc, #200]	; (8010edc <tcp_process+0x7dc>)
 8010e12:	681b      	ldr	r3, [r3, #0]
 8010e14:	68db      	ldr	r3, [r3, #12]
 8010e16:	4a31      	ldr	r2, [pc, #196]	; (8010edc <tcp_process+0x7dc>)
 8010e18:	6013      	str	r3, [r2, #0]
 8010e1a:	e013      	b.n	8010e44 <tcp_process+0x744>
 8010e1c:	4b2f      	ldr	r3, [pc, #188]	; (8010edc <tcp_process+0x7dc>)
 8010e1e:	681b      	ldr	r3, [r3, #0]
 8010e20:	60fb      	str	r3, [r7, #12]
 8010e22:	e00c      	b.n	8010e3e <tcp_process+0x73e>
 8010e24:	68fb      	ldr	r3, [r7, #12]
 8010e26:	68db      	ldr	r3, [r3, #12]
 8010e28:	687a      	ldr	r2, [r7, #4]
 8010e2a:	429a      	cmp	r2, r3
 8010e2c:	d104      	bne.n	8010e38 <tcp_process+0x738>
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	68da      	ldr	r2, [r3, #12]
 8010e32:	68fb      	ldr	r3, [r7, #12]
 8010e34:	60da      	str	r2, [r3, #12]
 8010e36:	e005      	b.n	8010e44 <tcp_process+0x744>
 8010e38:	68fb      	ldr	r3, [r7, #12]
 8010e3a:	68db      	ldr	r3, [r3, #12]
 8010e3c:	60fb      	str	r3, [r7, #12]
 8010e3e:	68fb      	ldr	r3, [r7, #12]
 8010e40:	2b00      	cmp	r3, #0
 8010e42:	d1ef      	bne.n	8010e24 <tcp_process+0x724>
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	2200      	movs	r2, #0
 8010e48:	60da      	str	r2, [r3, #12]
 8010e4a:	4b1f      	ldr	r3, [pc, #124]	; (8010ec8 <tcp_process+0x7c8>)
 8010e4c:	2201      	movs	r2, #1
 8010e4e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	220a      	movs	r2, #10
 8010e54:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8010e56:	4b1d      	ldr	r3, [pc, #116]	; (8010ecc <tcp_process+0x7cc>)
 8010e58:	681a      	ldr	r2, [r3, #0]
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	60da      	str	r2, [r3, #12]
 8010e5e:	4a1b      	ldr	r2, [pc, #108]	; (8010ecc <tcp_process+0x7cc>)
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	6013      	str	r3, [r2, #0]
 8010e64:	f003 f8a0 	bl	8013fa8 <tcp_timer_needed>
      }
      break;
 8010e68:	e026      	b.n	8010eb8 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8010e6a:	6878      	ldr	r0, [r7, #4]
 8010e6c:	f000 f93c 	bl	80110e8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8010e70:	4b17      	ldr	r3, [pc, #92]	; (8010ed0 <tcp_process+0x7d0>)
 8010e72:	781b      	ldrb	r3, [r3, #0]
 8010e74:	f003 0310 	and.w	r3, r3, #16
 8010e78:	2b00      	cmp	r3, #0
 8010e7a:	d01f      	beq.n	8010ebc <tcp_process+0x7bc>
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010e80:	4b14      	ldr	r3, [pc, #80]	; (8010ed4 <tcp_process+0x7d4>)
 8010e82:	681b      	ldr	r3, [r3, #0]
 8010e84:	429a      	cmp	r2, r3
 8010e86:	d119      	bne.n	8010ebc <tcp_process+0x7bc>
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010e8c:	2b00      	cmp	r3, #0
 8010e8e:	d115      	bne.n	8010ebc <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8010e90:	4b11      	ldr	r3, [pc, #68]	; (8010ed8 <tcp_process+0x7d8>)
 8010e92:	781b      	ldrb	r3, [r3, #0]
 8010e94:	f043 0310 	orr.w	r3, r3, #16
 8010e98:	b2da      	uxtb	r2, r3
 8010e9a:	4b0f      	ldr	r3, [pc, #60]	; (8010ed8 <tcp_process+0x7d8>)
 8010e9c:	701a      	strb	r2, [r3, #0]
      }
      break;
 8010e9e:	e00d      	b.n	8010ebc <tcp_process+0x7bc>
    default:
      break;
 8010ea0:	bf00      	nop
 8010ea2:	e00c      	b.n	8010ebe <tcp_process+0x7be>
      break;
 8010ea4:	bf00      	nop
 8010ea6:	e00a      	b.n	8010ebe <tcp_process+0x7be>
      break;
 8010ea8:	bf00      	nop
 8010eaa:	e008      	b.n	8010ebe <tcp_process+0x7be>
      break;
 8010eac:	bf00      	nop
 8010eae:	e006      	b.n	8010ebe <tcp_process+0x7be>
      break;
 8010eb0:	bf00      	nop
 8010eb2:	e004      	b.n	8010ebe <tcp_process+0x7be>
      break;
 8010eb4:	bf00      	nop
 8010eb6:	e002      	b.n	8010ebe <tcp_process+0x7be>
      break;
 8010eb8:	bf00      	nop
 8010eba:	e000      	b.n	8010ebe <tcp_process+0x7be>
      break;
 8010ebc:	bf00      	nop
  }
  return ERR_OK;
 8010ebe:	2300      	movs	r3, #0
}
 8010ec0:	4618      	mov	r0, r3
 8010ec2:	3724      	adds	r7, #36	; 0x24
 8010ec4:	46bd      	mov	sp, r7
 8010ec6:	bd90      	pop	{r4, r7, pc}
 8010ec8:	240079a4 	.word	0x240079a4
 8010ecc:	240079b8 	.word	0x240079b8
 8010ed0:	240040ec 	.word	0x240040ec
 8010ed4:	240040e4 	.word	0x240040e4
 8010ed8:	240040ed 	.word	0x240040ed
 8010edc:	240079a8 	.word	0x240079a8

08010ee0 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8010ee0:	b590      	push	{r4, r7, lr}
 8010ee2:	b085      	sub	sp, #20
 8010ee4:	af00      	add	r7, sp, #0
 8010ee6:	6078      	str	r0, [r7, #4]
 8010ee8:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	2b00      	cmp	r3, #0
 8010eee:	d106      	bne.n	8010efe <tcp_oos_insert_segment+0x1e>
 8010ef0:	4b3b      	ldr	r3, [pc, #236]	; (8010fe0 <tcp_oos_insert_segment+0x100>)
 8010ef2:	f240 421f 	movw	r2, #1055	; 0x41f
 8010ef6:	493b      	ldr	r1, [pc, #236]	; (8010fe4 <tcp_oos_insert_segment+0x104>)
 8010ef8:	483b      	ldr	r0, [pc, #236]	; (8010fe8 <tcp_oos_insert_segment+0x108>)
 8010efa:	f005 ffcd 	bl	8016e98 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	68db      	ldr	r3, [r3, #12]
 8010f02:	899b      	ldrh	r3, [r3, #12]
 8010f04:	b29b      	uxth	r3, r3
 8010f06:	4618      	mov	r0, r3
 8010f08:	f7fb f89a 	bl	800c040 <lwip_htons>
 8010f0c:	4603      	mov	r3, r0
 8010f0e:	b2db      	uxtb	r3, r3
 8010f10:	f003 0301 	and.w	r3, r3, #1
 8010f14:	2b00      	cmp	r3, #0
 8010f16:	d028      	beq.n	8010f6a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8010f18:	6838      	ldr	r0, [r7, #0]
 8010f1a:	f7fe f97f 	bl	800f21c <tcp_segs_free>
    next = NULL;
 8010f1e:	2300      	movs	r3, #0
 8010f20:	603b      	str	r3, [r7, #0]
 8010f22:	e056      	b.n	8010fd2 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8010f24:	683b      	ldr	r3, [r7, #0]
 8010f26:	68db      	ldr	r3, [r3, #12]
 8010f28:	899b      	ldrh	r3, [r3, #12]
 8010f2a:	b29b      	uxth	r3, r3
 8010f2c:	4618      	mov	r0, r3
 8010f2e:	f7fb f887 	bl	800c040 <lwip_htons>
 8010f32:	4603      	mov	r3, r0
 8010f34:	b2db      	uxtb	r3, r3
 8010f36:	f003 0301 	and.w	r3, r3, #1
 8010f3a:	2b00      	cmp	r3, #0
 8010f3c:	d00d      	beq.n	8010f5a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	68db      	ldr	r3, [r3, #12]
 8010f42:	899b      	ldrh	r3, [r3, #12]
 8010f44:	b29c      	uxth	r4, r3
 8010f46:	2001      	movs	r0, #1
 8010f48:	f7fb f87a 	bl	800c040 <lwip_htons>
 8010f4c:	4603      	mov	r3, r0
 8010f4e:	461a      	mov	r2, r3
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	68db      	ldr	r3, [r3, #12]
 8010f54:	4322      	orrs	r2, r4
 8010f56:	b292      	uxth	r2, r2
 8010f58:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8010f5a:	683b      	ldr	r3, [r7, #0]
 8010f5c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8010f5e:	683b      	ldr	r3, [r7, #0]
 8010f60:	681b      	ldr	r3, [r3, #0]
 8010f62:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8010f64:	68f8      	ldr	r0, [r7, #12]
 8010f66:	f7fe f96e 	bl	800f246 <tcp_seg_free>
    while (next &&
 8010f6a:	683b      	ldr	r3, [r7, #0]
 8010f6c:	2b00      	cmp	r3, #0
 8010f6e:	d00e      	beq.n	8010f8e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	891b      	ldrh	r3, [r3, #8]
 8010f74:	461a      	mov	r2, r3
 8010f76:	4b1d      	ldr	r3, [pc, #116]	; (8010fec <tcp_oos_insert_segment+0x10c>)
 8010f78:	681b      	ldr	r3, [r3, #0]
 8010f7a:	441a      	add	r2, r3
 8010f7c:	683b      	ldr	r3, [r7, #0]
 8010f7e:	68db      	ldr	r3, [r3, #12]
 8010f80:	685b      	ldr	r3, [r3, #4]
 8010f82:	6839      	ldr	r1, [r7, #0]
 8010f84:	8909      	ldrh	r1, [r1, #8]
 8010f86:	440b      	add	r3, r1
 8010f88:	1ad3      	subs	r3, r2, r3
    while (next &&
 8010f8a:	2b00      	cmp	r3, #0
 8010f8c:	daca      	bge.n	8010f24 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8010f8e:	683b      	ldr	r3, [r7, #0]
 8010f90:	2b00      	cmp	r3, #0
 8010f92:	d01e      	beq.n	8010fd2 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	891b      	ldrh	r3, [r3, #8]
 8010f98:	461a      	mov	r2, r3
 8010f9a:	4b14      	ldr	r3, [pc, #80]	; (8010fec <tcp_oos_insert_segment+0x10c>)
 8010f9c:	681b      	ldr	r3, [r3, #0]
 8010f9e:	441a      	add	r2, r3
 8010fa0:	683b      	ldr	r3, [r7, #0]
 8010fa2:	68db      	ldr	r3, [r3, #12]
 8010fa4:	685b      	ldr	r3, [r3, #4]
 8010fa6:	1ad3      	subs	r3, r2, r3
    if (next &&
 8010fa8:	2b00      	cmp	r3, #0
 8010faa:	dd12      	ble.n	8010fd2 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8010fac:	683b      	ldr	r3, [r7, #0]
 8010fae:	68db      	ldr	r3, [r3, #12]
 8010fb0:	685b      	ldr	r3, [r3, #4]
 8010fb2:	b29a      	uxth	r2, r3
 8010fb4:	4b0d      	ldr	r3, [pc, #52]	; (8010fec <tcp_oos_insert_segment+0x10c>)
 8010fb6:	681b      	ldr	r3, [r3, #0]
 8010fb8:	b29b      	uxth	r3, r3
 8010fba:	1ad3      	subs	r3, r2, r3
 8010fbc:	b29a      	uxth	r2, r3
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	685a      	ldr	r2, [r3, #4]
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	891b      	ldrh	r3, [r3, #8]
 8010fca:	4619      	mov	r1, r3
 8010fcc:	4610      	mov	r0, r2
 8010fce:	f7fc fb6b 	bl	800d6a8 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	683a      	ldr	r2, [r7, #0]
 8010fd6:	601a      	str	r2, [r3, #0]
}
 8010fd8:	bf00      	nop
 8010fda:	3714      	adds	r7, #20
 8010fdc:	46bd      	mov	sp, r7
 8010fde:	bd90      	pop	{r4, r7, pc}
 8010fe0:	080192e0 	.word	0x080192e0
 8010fe4:	080195a0 	.word	0x080195a0
 8010fe8:	0801932c 	.word	0x0801932c
 8010fec:	240040e0 	.word	0x240040e0

08010ff0 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8010ff0:	b5b0      	push	{r4, r5, r7, lr}
 8010ff2:	b086      	sub	sp, #24
 8010ff4:	af00      	add	r7, sp, #0
 8010ff6:	60f8      	str	r0, [r7, #12]
 8010ff8:	60b9      	str	r1, [r7, #8]
 8010ffa:	607a      	str	r2, [r7, #4]
 8010ffc:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8010ffe:	e03e      	b.n	801107e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8011000:	68bb      	ldr	r3, [r7, #8]
 8011002:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8011004:	68bb      	ldr	r3, [r7, #8]
 8011006:	681b      	ldr	r3, [r3, #0]
 8011008:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 801100a:	697b      	ldr	r3, [r7, #20]
 801100c:	685b      	ldr	r3, [r3, #4]
 801100e:	4618      	mov	r0, r3
 8011010:	f7fc fd5e 	bl	800dad0 <pbuf_clen>
 8011014:	4603      	mov	r3, r0
 8011016:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8011018:	68fb      	ldr	r3, [r7, #12]
 801101a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801101e:	8a7a      	ldrh	r2, [r7, #18]
 8011020:	429a      	cmp	r2, r3
 8011022:	d906      	bls.n	8011032 <tcp_free_acked_segments+0x42>
 8011024:	4b2a      	ldr	r3, [pc, #168]	; (80110d0 <tcp_free_acked_segments+0xe0>)
 8011026:	f240 4257 	movw	r2, #1111	; 0x457
 801102a:	492a      	ldr	r1, [pc, #168]	; (80110d4 <tcp_free_acked_segments+0xe4>)
 801102c:	482a      	ldr	r0, [pc, #168]	; (80110d8 <tcp_free_acked_segments+0xe8>)
 801102e:	f005 ff33 	bl	8016e98 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8011032:	68fb      	ldr	r3, [r7, #12]
 8011034:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8011038:	8a7b      	ldrh	r3, [r7, #18]
 801103a:	1ad3      	subs	r3, r2, r3
 801103c:	b29a      	uxth	r2, r3
 801103e:	68fb      	ldr	r3, [r7, #12]
 8011040:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8011044:	697b      	ldr	r3, [r7, #20]
 8011046:	891a      	ldrh	r2, [r3, #8]
 8011048:	4b24      	ldr	r3, [pc, #144]	; (80110dc <tcp_free_acked_segments+0xec>)
 801104a:	881b      	ldrh	r3, [r3, #0]
 801104c:	4413      	add	r3, r2
 801104e:	b29a      	uxth	r2, r3
 8011050:	4b22      	ldr	r3, [pc, #136]	; (80110dc <tcp_free_acked_segments+0xec>)
 8011052:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8011054:	6978      	ldr	r0, [r7, #20]
 8011056:	f7fe f8f6 	bl	800f246 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801105a:	68fb      	ldr	r3, [r7, #12]
 801105c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011060:	2b00      	cmp	r3, #0
 8011062:	d00c      	beq.n	801107e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8011064:	68bb      	ldr	r3, [r7, #8]
 8011066:	2b00      	cmp	r3, #0
 8011068:	d109      	bne.n	801107e <tcp_free_acked_segments+0x8e>
 801106a:	683b      	ldr	r3, [r7, #0]
 801106c:	2b00      	cmp	r3, #0
 801106e:	d106      	bne.n	801107e <tcp_free_acked_segments+0x8e>
 8011070:	4b17      	ldr	r3, [pc, #92]	; (80110d0 <tcp_free_acked_segments+0xe0>)
 8011072:	f240 4261 	movw	r2, #1121	; 0x461
 8011076:	491a      	ldr	r1, [pc, #104]	; (80110e0 <tcp_free_acked_segments+0xf0>)
 8011078:	4817      	ldr	r0, [pc, #92]	; (80110d8 <tcp_free_acked_segments+0xe8>)
 801107a:	f005 ff0d 	bl	8016e98 <iprintf>
  while (seg_list != NULL &&
 801107e:	68bb      	ldr	r3, [r7, #8]
 8011080:	2b00      	cmp	r3, #0
 8011082:	d020      	beq.n	80110c6 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8011084:	68bb      	ldr	r3, [r7, #8]
 8011086:	68db      	ldr	r3, [r3, #12]
 8011088:	685b      	ldr	r3, [r3, #4]
 801108a:	4618      	mov	r0, r3
 801108c:	f7fa ffed 	bl	800c06a <lwip_htonl>
 8011090:	4604      	mov	r4, r0
 8011092:	68bb      	ldr	r3, [r7, #8]
 8011094:	891b      	ldrh	r3, [r3, #8]
 8011096:	461d      	mov	r5, r3
 8011098:	68bb      	ldr	r3, [r7, #8]
 801109a:	68db      	ldr	r3, [r3, #12]
 801109c:	899b      	ldrh	r3, [r3, #12]
 801109e:	b29b      	uxth	r3, r3
 80110a0:	4618      	mov	r0, r3
 80110a2:	f7fa ffcd 	bl	800c040 <lwip_htons>
 80110a6:	4603      	mov	r3, r0
 80110a8:	b2db      	uxtb	r3, r3
 80110aa:	f003 0303 	and.w	r3, r3, #3
 80110ae:	2b00      	cmp	r3, #0
 80110b0:	d001      	beq.n	80110b6 <tcp_free_acked_segments+0xc6>
 80110b2:	2301      	movs	r3, #1
 80110b4:	e000      	b.n	80110b8 <tcp_free_acked_segments+0xc8>
 80110b6:	2300      	movs	r3, #0
 80110b8:	442b      	add	r3, r5
 80110ba:	18e2      	adds	r2, r4, r3
 80110bc:	4b09      	ldr	r3, [pc, #36]	; (80110e4 <tcp_free_acked_segments+0xf4>)
 80110be:	681b      	ldr	r3, [r3, #0]
 80110c0:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 80110c2:	2b00      	cmp	r3, #0
 80110c4:	dd9c      	ble.n	8011000 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80110c6:	68bb      	ldr	r3, [r7, #8]
}
 80110c8:	4618      	mov	r0, r3
 80110ca:	3718      	adds	r7, #24
 80110cc:	46bd      	mov	sp, r7
 80110ce:	bdb0      	pop	{r4, r5, r7, pc}
 80110d0:	080192e0 	.word	0x080192e0
 80110d4:	080195c8 	.word	0x080195c8
 80110d8:	0801932c 	.word	0x0801932c
 80110dc:	240040e8 	.word	0x240040e8
 80110e0:	080195f0 	.word	0x080195f0
 80110e4:	240040e4 	.word	0x240040e4

080110e8 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80110e8:	b5b0      	push	{r4, r5, r7, lr}
 80110ea:	b094      	sub	sp, #80	; 0x50
 80110ec:	af00      	add	r7, sp, #0
 80110ee:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80110f0:	2300      	movs	r3, #0
 80110f2:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	2b00      	cmp	r3, #0
 80110f8:	d106      	bne.n	8011108 <tcp_receive+0x20>
 80110fa:	4ba6      	ldr	r3, [pc, #664]	; (8011394 <tcp_receive+0x2ac>)
 80110fc:	f240 427b 	movw	r2, #1147	; 0x47b
 8011100:	49a5      	ldr	r1, [pc, #660]	; (8011398 <tcp_receive+0x2b0>)
 8011102:	48a6      	ldr	r0, [pc, #664]	; (801139c <tcp_receive+0x2b4>)
 8011104:	f005 fec8 	bl	8016e98 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	7d1b      	ldrb	r3, [r3, #20]
 801110c:	2b03      	cmp	r3, #3
 801110e:	d806      	bhi.n	801111e <tcp_receive+0x36>
 8011110:	4ba0      	ldr	r3, [pc, #640]	; (8011394 <tcp_receive+0x2ac>)
 8011112:	f240 427c 	movw	r2, #1148	; 0x47c
 8011116:	49a2      	ldr	r1, [pc, #648]	; (80113a0 <tcp_receive+0x2b8>)
 8011118:	48a0      	ldr	r0, [pc, #640]	; (801139c <tcp_receive+0x2b4>)
 801111a:	f005 febd 	bl	8016e98 <iprintf>

  if (flags & TCP_ACK) {
 801111e:	4ba1      	ldr	r3, [pc, #644]	; (80113a4 <tcp_receive+0x2bc>)
 8011120:	781b      	ldrb	r3, [r3, #0]
 8011122:	f003 0310 	and.w	r3, r3, #16
 8011126:	2b00      	cmp	r3, #0
 8011128:	f000 8263 	beq.w	80115f2 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011132:	461a      	mov	r2, r3
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011138:	4413      	add	r3, r2
 801113a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011140:	4b99      	ldr	r3, [pc, #612]	; (80113a8 <tcp_receive+0x2c0>)
 8011142:	681b      	ldr	r3, [r3, #0]
 8011144:	1ad3      	subs	r3, r2, r3
 8011146:	2b00      	cmp	r3, #0
 8011148:	db1b      	blt.n	8011182 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801114e:	4b96      	ldr	r3, [pc, #600]	; (80113a8 <tcp_receive+0x2c0>)
 8011150:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8011152:	429a      	cmp	r2, r3
 8011154:	d106      	bne.n	8011164 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801115a:	4b94      	ldr	r3, [pc, #592]	; (80113ac <tcp_receive+0x2c4>)
 801115c:	681b      	ldr	r3, [r3, #0]
 801115e:	1ad3      	subs	r3, r2, r3
 8011160:	2b00      	cmp	r3, #0
 8011162:	db0e      	blt.n	8011182 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011168:	4b90      	ldr	r3, [pc, #576]	; (80113ac <tcp_receive+0x2c4>)
 801116a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801116c:	429a      	cmp	r2, r3
 801116e:	d125      	bne.n	80111bc <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8011170:	4b8f      	ldr	r3, [pc, #572]	; (80113b0 <tcp_receive+0x2c8>)
 8011172:	681b      	ldr	r3, [r3, #0]
 8011174:	89db      	ldrh	r3, [r3, #14]
 8011176:	b29a      	uxth	r2, r3
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801117e:	429a      	cmp	r2, r3
 8011180:	d91c      	bls.n	80111bc <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8011182:	4b8b      	ldr	r3, [pc, #556]	; (80113b0 <tcp_receive+0x2c8>)
 8011184:	681b      	ldr	r3, [r3, #0]
 8011186:	89db      	ldrh	r3, [r3, #14]
 8011188:	b29a      	uxth	r2, r3
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801119c:	429a      	cmp	r2, r3
 801119e:	d205      	bcs.n	80111ac <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 80111ac:	4b7e      	ldr	r3, [pc, #504]	; (80113a8 <tcp_receive+0x2c0>)
 80111ae:	681a      	ldr	r2, [r3, #0]
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 80111b4:	4b7d      	ldr	r3, [pc, #500]	; (80113ac <tcp_receive+0x2c4>)
 80111b6:	681a      	ldr	r2, [r3, #0]
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80111bc:	4b7b      	ldr	r3, [pc, #492]	; (80113ac <tcp_receive+0x2c4>)
 80111be:	681a      	ldr	r2, [r3, #0]
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80111c4:	1ad3      	subs	r3, r2, r3
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	dc58      	bgt.n	801127c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80111ca:	4b7a      	ldr	r3, [pc, #488]	; (80113b4 <tcp_receive+0x2cc>)
 80111cc:	881b      	ldrh	r3, [r3, #0]
 80111ce:	2b00      	cmp	r3, #0
 80111d0:	d14b      	bne.n	801126a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80111d6:	687a      	ldr	r2, [r7, #4]
 80111d8:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 80111dc:	4413      	add	r3, r2
 80111de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80111e0:	429a      	cmp	r2, r3
 80111e2:	d142      	bne.n	801126a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80111ea:	2b00      	cmp	r3, #0
 80111ec:	db3d      	blt.n	801126a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80111f2:	4b6e      	ldr	r3, [pc, #440]	; (80113ac <tcp_receive+0x2c4>)
 80111f4:	681b      	ldr	r3, [r3, #0]
 80111f6:	429a      	cmp	r2, r3
 80111f8:	d137      	bne.n	801126a <tcp_receive+0x182>
              found_dupack = 1;
 80111fa:	2301      	movs	r3, #1
 80111fc:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011204:	2bff      	cmp	r3, #255	; 0xff
 8011206:	d007      	beq.n	8011218 <tcp_receive+0x130>
                ++pcb->dupacks;
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801120e:	3301      	adds	r3, #1
 8011210:	b2da      	uxtb	r2, r3
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801121e:	2b03      	cmp	r3, #3
 8011220:	d91b      	bls.n	801125a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801122c:	4413      	add	r3, r2
 801122e:	b29a      	uxth	r2, r3
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011236:	429a      	cmp	r2, r3
 8011238:	d30a      	bcc.n	8011250 <tcp_receive+0x168>
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011244:	4413      	add	r3, r2
 8011246:	b29a      	uxth	r2, r3
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801124e:	e004      	b.n	801125a <tcp_receive+0x172>
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011256:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011260:	2b02      	cmp	r3, #2
 8011262:	d902      	bls.n	801126a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8011264:	6878      	ldr	r0, [r7, #4]
 8011266:	f002 fb41 	bl	80138ec <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801126a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801126c:	2b00      	cmp	r3, #0
 801126e:	f040 8160 	bne.w	8011532 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	2200      	movs	r2, #0
 8011276:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801127a:	e15a      	b.n	8011532 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801127c:	4b4b      	ldr	r3, [pc, #300]	; (80113ac <tcp_receive+0x2c4>)
 801127e:	681a      	ldr	r2, [r3, #0]
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011284:	1ad3      	subs	r3, r2, r3
 8011286:	3b01      	subs	r3, #1
 8011288:	2b00      	cmp	r3, #0
 801128a:	f2c0 814d 	blt.w	8011528 <tcp_receive+0x440>
 801128e:	4b47      	ldr	r3, [pc, #284]	; (80113ac <tcp_receive+0x2c4>)
 8011290:	681a      	ldr	r2, [r3, #0]
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011296:	1ad3      	subs	r3, r2, r3
 8011298:	2b00      	cmp	r3, #0
 801129a:	f300 8145 	bgt.w	8011528 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	8b5b      	ldrh	r3, [r3, #26]
 80112a2:	f003 0304 	and.w	r3, r3, #4
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	d010      	beq.n	80112cc <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	8b5b      	ldrh	r3, [r3, #26]
 80112ae:	f023 0304 	bic.w	r3, r3, #4
 80112b2:	b29a      	uxth	r2, r3
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	2200      	movs	r2, #0
 80112c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	2200      	movs	r2, #0
 80112d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80112da:	10db      	asrs	r3, r3, #3
 80112dc:	b21b      	sxth	r3, r3
 80112de:	b29a      	uxth	r2, r3
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80112e6:	b29b      	uxth	r3, r3
 80112e8:	4413      	add	r3, r2
 80112ea:	b29b      	uxth	r3, r3
 80112ec:	b21a      	sxth	r2, r3
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80112f4:	4b2d      	ldr	r3, [pc, #180]	; (80113ac <tcp_receive+0x2c4>)
 80112f6:	681b      	ldr	r3, [r3, #0]
 80112f8:	b29a      	uxth	r2, r3
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80112fe:	b29b      	uxth	r3, r3
 8011300:	1ad3      	subs	r3, r2, r3
 8011302:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	2200      	movs	r2, #0
 8011308:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 801130c:	4b27      	ldr	r3, [pc, #156]	; (80113ac <tcp_receive+0x2c4>)
 801130e:	681a      	ldr	r2, [r3, #0]
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	7d1b      	ldrb	r3, [r3, #20]
 8011318:	2b03      	cmp	r3, #3
 801131a:	f240 8096 	bls.w	801144a <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801132a:	429a      	cmp	r2, r3
 801132c:	d244      	bcs.n	80113b8 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	8b5b      	ldrh	r3, [r3, #26]
 8011332:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011336:	2b00      	cmp	r3, #0
 8011338:	d001      	beq.n	801133e <tcp_receive+0x256>
 801133a:	2301      	movs	r3, #1
 801133c:	e000      	b.n	8011340 <tcp_receive+0x258>
 801133e:	2302      	movs	r3, #2
 8011340:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8011344:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8011348:	b29a      	uxth	r2, r3
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801134e:	fb12 f303 	smulbb	r3, r2, r3
 8011352:	b29b      	uxth	r3, r3
 8011354:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011356:	4293      	cmp	r3, r2
 8011358:	bf28      	it	cs
 801135a:	4613      	movcs	r3, r2
 801135c:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011364:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011366:	4413      	add	r3, r2
 8011368:	b29a      	uxth	r2, r3
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011370:	429a      	cmp	r2, r3
 8011372:	d309      	bcc.n	8011388 <tcp_receive+0x2a0>
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801137a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801137c:	4413      	add	r3, r2
 801137e:	b29a      	uxth	r2, r3
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8011386:	e060      	b.n	801144a <tcp_receive+0x362>
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801138e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8011392:	e05a      	b.n	801144a <tcp_receive+0x362>
 8011394:	080192e0 	.word	0x080192e0
 8011398:	08019610 	.word	0x08019610
 801139c:	0801932c 	.word	0x0801932c
 80113a0:	0801962c 	.word	0x0801962c
 80113a4:	240040ec 	.word	0x240040ec
 80113a8:	240040e0 	.word	0x240040e0
 80113ac:	240040e4 	.word	0x240040e4
 80113b0:	240040d0 	.word	0x240040d0
 80113b4:	240040ea 	.word	0x240040ea
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80113be:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80113c0:	4413      	add	r3, r2
 80113c2:	b29a      	uxth	r2, r3
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80113ca:	429a      	cmp	r2, r3
 80113cc:	d309      	bcc.n	80113e2 <tcp_receive+0x2fa>
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80113d4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80113d6:	4413      	add	r3, r2
 80113d8:	b29a      	uxth	r2, r3
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80113e0:	e004      	b.n	80113ec <tcp_receive+0x304>
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80113e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80113f8:	429a      	cmp	r2, r3
 80113fa:	d326      	bcc.n	801144a <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011408:	1ad3      	subs	r3, r2, r3
 801140a:	b29a      	uxth	r2, r3
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801141c:	4413      	add	r3, r2
 801141e:	b29a      	uxth	r2, r3
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011426:	429a      	cmp	r2, r3
 8011428:	d30a      	bcc.n	8011440 <tcp_receive+0x358>
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011434:	4413      	add	r3, r2
 8011436:	b29a      	uxth	r2, r3
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801143e:	e004      	b.n	801144a <tcp_receive+0x362>
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011446:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011452:	4a98      	ldr	r2, [pc, #608]	; (80116b4 <tcp_receive+0x5cc>)
 8011454:	6878      	ldr	r0, [r7, #4]
 8011456:	f7ff fdcb 	bl	8010ff0 <tcp_free_acked_segments>
 801145a:	4602      	mov	r2, r0
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011468:	4a93      	ldr	r2, [pc, #588]	; (80116b8 <tcp_receive+0x5d0>)
 801146a:	6878      	ldr	r0, [r7, #4]
 801146c:	f7ff fdc0 	bl	8010ff0 <tcp_free_acked_segments>
 8011470:	4602      	mov	r2, r0
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801147a:	2b00      	cmp	r3, #0
 801147c:	d104      	bne.n	8011488 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011484:	861a      	strh	r2, [r3, #48]	; 0x30
 8011486:	e002      	b.n	801148e <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	2200      	movs	r2, #0
 801148c:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	2200      	movs	r2, #0
 8011492:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011498:	2b00      	cmp	r3, #0
 801149a:	d103      	bne.n	80114a4 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	2200      	movs	r2, #0
 80114a0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80114aa:	4b84      	ldr	r3, [pc, #528]	; (80116bc <tcp_receive+0x5d4>)
 80114ac:	881b      	ldrh	r3, [r3, #0]
 80114ae:	4413      	add	r3, r2
 80114b0:	b29a      	uxth	r2, r3
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	8b5b      	ldrh	r3, [r3, #26]
 80114bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80114c0:	2b00      	cmp	r3, #0
 80114c2:	d035      	beq.n	8011530 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80114c8:	2b00      	cmp	r3, #0
 80114ca:	d118      	bne.n	80114fe <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80114d0:	2b00      	cmp	r3, #0
 80114d2:	d00c      	beq.n	80114ee <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80114dc:	68db      	ldr	r3, [r3, #12]
 80114de:	685b      	ldr	r3, [r3, #4]
 80114e0:	4618      	mov	r0, r3
 80114e2:	f7fa fdc2 	bl	800c06a <lwip_htonl>
 80114e6:	4603      	mov	r3, r0
 80114e8:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80114ea:	2b00      	cmp	r3, #0
 80114ec:	dc20      	bgt.n	8011530 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	8b5b      	ldrh	r3, [r3, #26]
 80114f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80114f6:	b29a      	uxth	r2, r3
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80114fc:	e018      	b.n	8011530 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80114fe:	687b      	ldr	r3, [r7, #4]
 8011500:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011506:	68db      	ldr	r3, [r3, #12]
 8011508:	685b      	ldr	r3, [r3, #4]
 801150a:	4618      	mov	r0, r3
 801150c:	f7fa fdad 	bl	800c06a <lwip_htonl>
 8011510:	4603      	mov	r3, r0
 8011512:	1ae3      	subs	r3, r4, r3
 8011514:	2b00      	cmp	r3, #0
 8011516:	dc0b      	bgt.n	8011530 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	8b5b      	ldrh	r3, [r3, #26]
 801151c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011520:	b29a      	uxth	r2, r3
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011526:	e003      	b.n	8011530 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8011528:	6878      	ldr	r0, [r7, #4]
 801152a:	f002 fbcd 	bl	8013cc8 <tcp_send_empty_ack>
 801152e:	e000      	b.n	8011532 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011530:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011536:	2b00      	cmp	r3, #0
 8011538:	d05b      	beq.n	80115f2 <tcp_receive+0x50a>
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801153e:	4b60      	ldr	r3, [pc, #384]	; (80116c0 <tcp_receive+0x5d8>)
 8011540:	681b      	ldr	r3, [r3, #0]
 8011542:	1ad3      	subs	r3, r2, r3
 8011544:	2b00      	cmp	r3, #0
 8011546:	da54      	bge.n	80115f2 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8011548:	4b5e      	ldr	r3, [pc, #376]	; (80116c4 <tcp_receive+0x5dc>)
 801154a:	681b      	ldr	r3, [r3, #0]
 801154c:	b29a      	uxth	r2, r3
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011552:	b29b      	uxth	r3, r3
 8011554:	1ad3      	subs	r3, r2, r3
 8011556:	b29b      	uxth	r3, r3
 8011558:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 801155c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011566:	10db      	asrs	r3, r3, #3
 8011568:	b21b      	sxth	r3, r3
 801156a:	b29b      	uxth	r3, r3
 801156c:	1ad3      	subs	r3, r2, r3
 801156e:	b29b      	uxth	r3, r3
 8011570:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801157a:	b29a      	uxth	r2, r3
 801157c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8011580:	4413      	add	r3, r2
 8011582:	b29b      	uxth	r3, r3
 8011584:	b21a      	sxth	r2, r3
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 801158a:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801158e:	2b00      	cmp	r3, #0
 8011590:	da05      	bge.n	801159e <tcp_receive+0x4b6>
        m = (s16_t) - m;
 8011592:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8011596:	425b      	negs	r3, r3
 8011598:	b29b      	uxth	r3, r3
 801159a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 801159e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80115a8:	109b      	asrs	r3, r3, #2
 80115aa:	b21b      	sxth	r3, r3
 80115ac:	b29b      	uxth	r3, r3
 80115ae:	1ad3      	subs	r3, r2, r3
 80115b0:	b29b      	uxth	r3, r3
 80115b2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80115bc:	b29a      	uxth	r2, r3
 80115be:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80115c2:	4413      	add	r3, r2
 80115c4:	b29b      	uxth	r3, r3
 80115c6:	b21a      	sxth	r2, r3
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80115d2:	10db      	asrs	r3, r3, #3
 80115d4:	b21b      	sxth	r3, r3
 80115d6:	b29a      	uxth	r2, r3
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80115de:	b29b      	uxth	r3, r3
 80115e0:	4413      	add	r3, r2
 80115e2:	b29b      	uxth	r3, r3
 80115e4:	b21a      	sxth	r2, r3
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	2200      	movs	r2, #0
 80115f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80115f2:	4b35      	ldr	r3, [pc, #212]	; (80116c8 <tcp_receive+0x5e0>)
 80115f4:	881b      	ldrh	r3, [r3, #0]
 80115f6:	2b00      	cmp	r3, #0
 80115f8:	f000 84e1 	beq.w	8011fbe <tcp_receive+0xed6>
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	7d1b      	ldrb	r3, [r3, #20]
 8011600:	2b06      	cmp	r3, #6
 8011602:	f200 84dc 	bhi.w	8011fbe <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801160a:	4b30      	ldr	r3, [pc, #192]	; (80116cc <tcp_receive+0x5e4>)
 801160c:	681b      	ldr	r3, [r3, #0]
 801160e:	1ad3      	subs	r3, r2, r3
 8011610:	3b01      	subs	r3, #1
 8011612:	2b00      	cmp	r3, #0
 8011614:	f2c0 808e 	blt.w	8011734 <tcp_receive+0x64c>
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801161c:	4b2a      	ldr	r3, [pc, #168]	; (80116c8 <tcp_receive+0x5e0>)
 801161e:	881b      	ldrh	r3, [r3, #0]
 8011620:	4619      	mov	r1, r3
 8011622:	4b2a      	ldr	r3, [pc, #168]	; (80116cc <tcp_receive+0x5e4>)
 8011624:	681b      	ldr	r3, [r3, #0]
 8011626:	440b      	add	r3, r1
 8011628:	1ad3      	subs	r3, r2, r3
 801162a:	3301      	adds	r3, #1
 801162c:	2b00      	cmp	r3, #0
 801162e:	f300 8081 	bgt.w	8011734 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8011632:	4b27      	ldr	r3, [pc, #156]	; (80116d0 <tcp_receive+0x5e8>)
 8011634:	685b      	ldr	r3, [r3, #4]
 8011636:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801163c:	4b23      	ldr	r3, [pc, #140]	; (80116cc <tcp_receive+0x5e4>)
 801163e:	681b      	ldr	r3, [r3, #0]
 8011640:	1ad3      	subs	r3, r2, r3
 8011642:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8011644:	4b22      	ldr	r3, [pc, #136]	; (80116d0 <tcp_receive+0x5e8>)
 8011646:	685b      	ldr	r3, [r3, #4]
 8011648:	2b00      	cmp	r3, #0
 801164a:	d106      	bne.n	801165a <tcp_receive+0x572>
 801164c:	4b21      	ldr	r3, [pc, #132]	; (80116d4 <tcp_receive+0x5ec>)
 801164e:	f240 5294 	movw	r2, #1428	; 0x594
 8011652:	4921      	ldr	r1, [pc, #132]	; (80116d8 <tcp_receive+0x5f0>)
 8011654:	4821      	ldr	r0, [pc, #132]	; (80116dc <tcp_receive+0x5f4>)
 8011656:	f005 fc1f 	bl	8016e98 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801165a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801165c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8011660:	4293      	cmp	r3, r2
 8011662:	d906      	bls.n	8011672 <tcp_receive+0x58a>
 8011664:	4b1b      	ldr	r3, [pc, #108]	; (80116d4 <tcp_receive+0x5ec>)
 8011666:	f240 5295 	movw	r2, #1429	; 0x595
 801166a:	491d      	ldr	r1, [pc, #116]	; (80116e0 <tcp_receive+0x5f8>)
 801166c:	481b      	ldr	r0, [pc, #108]	; (80116dc <tcp_receive+0x5f4>)
 801166e:	f005 fc13 	bl	8016e98 <iprintf>
      off = (u16_t)off32;
 8011672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011674:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8011678:	4b15      	ldr	r3, [pc, #84]	; (80116d0 <tcp_receive+0x5e8>)
 801167a:	685b      	ldr	r3, [r3, #4]
 801167c:	891b      	ldrh	r3, [r3, #8]
 801167e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011682:	429a      	cmp	r2, r3
 8011684:	d906      	bls.n	8011694 <tcp_receive+0x5ac>
 8011686:	4b13      	ldr	r3, [pc, #76]	; (80116d4 <tcp_receive+0x5ec>)
 8011688:	f240 5297 	movw	r2, #1431	; 0x597
 801168c:	4915      	ldr	r1, [pc, #84]	; (80116e4 <tcp_receive+0x5fc>)
 801168e:	4813      	ldr	r0, [pc, #76]	; (80116dc <tcp_receive+0x5f4>)
 8011690:	f005 fc02 	bl	8016e98 <iprintf>
      inseg.len -= off;
 8011694:	4b0e      	ldr	r3, [pc, #56]	; (80116d0 <tcp_receive+0x5e8>)
 8011696:	891a      	ldrh	r2, [r3, #8]
 8011698:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801169c:	1ad3      	subs	r3, r2, r3
 801169e:	b29a      	uxth	r2, r3
 80116a0:	4b0b      	ldr	r3, [pc, #44]	; (80116d0 <tcp_receive+0x5e8>)
 80116a2:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80116a4:	4b0a      	ldr	r3, [pc, #40]	; (80116d0 <tcp_receive+0x5e8>)
 80116a6:	685b      	ldr	r3, [r3, #4]
 80116a8:	891a      	ldrh	r2, [r3, #8]
 80116aa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80116ae:	1ad3      	subs	r3, r2, r3
 80116b0:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 80116b2:	e029      	b.n	8011708 <tcp_receive+0x620>
 80116b4:	08019648 	.word	0x08019648
 80116b8:	08019650 	.word	0x08019650
 80116bc:	240040e8 	.word	0x240040e8
 80116c0:	240040e4 	.word	0x240040e4
 80116c4:	240079ac 	.word	0x240079ac
 80116c8:	240040ea 	.word	0x240040ea
 80116cc:	240040e0 	.word	0x240040e0
 80116d0:	240040c0 	.word	0x240040c0
 80116d4:	080192e0 	.word	0x080192e0
 80116d8:	08019658 	.word	0x08019658
 80116dc:	0801932c 	.word	0x0801932c
 80116e0:	08019668 	.word	0x08019668
 80116e4:	08019678 	.word	0x08019678
        off -= p->len;
 80116e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80116ea:	895b      	ldrh	r3, [r3, #10]
 80116ec:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80116f0:	1ad3      	subs	r3, r2, r3
 80116f2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80116f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80116f8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80116fa:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80116fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80116fe:	2200      	movs	r2, #0
 8011700:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8011702:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011704:	681b      	ldr	r3, [r3, #0]
 8011706:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8011708:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801170a:	895b      	ldrh	r3, [r3, #10]
 801170c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011710:	429a      	cmp	r2, r3
 8011712:	d8e9      	bhi.n	80116e8 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8011714:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011718:	4619      	mov	r1, r3
 801171a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801171c:	f7fc f8c4 	bl	800d8a8 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011724:	4a91      	ldr	r2, [pc, #580]	; (801196c <tcp_receive+0x884>)
 8011726:	6013      	str	r3, [r2, #0]
 8011728:	4b91      	ldr	r3, [pc, #580]	; (8011970 <tcp_receive+0x888>)
 801172a:	68db      	ldr	r3, [r3, #12]
 801172c:	4a8f      	ldr	r2, [pc, #572]	; (801196c <tcp_receive+0x884>)
 801172e:	6812      	ldr	r2, [r2, #0]
 8011730:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8011732:	e00d      	b.n	8011750 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8011734:	4b8d      	ldr	r3, [pc, #564]	; (801196c <tcp_receive+0x884>)
 8011736:	681a      	ldr	r2, [r3, #0]
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801173c:	1ad3      	subs	r3, r2, r3
 801173e:	2b00      	cmp	r3, #0
 8011740:	da06      	bge.n	8011750 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	8b5b      	ldrh	r3, [r3, #26]
 8011746:	f043 0302 	orr.w	r3, r3, #2
 801174a:	b29a      	uxth	r2, r3
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011750:	4b86      	ldr	r3, [pc, #536]	; (801196c <tcp_receive+0x884>)
 8011752:	681a      	ldr	r2, [r3, #0]
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011758:	1ad3      	subs	r3, r2, r3
 801175a:	2b00      	cmp	r3, #0
 801175c:	f2c0 842a 	blt.w	8011fb4 <tcp_receive+0xecc>
 8011760:	4b82      	ldr	r3, [pc, #520]	; (801196c <tcp_receive+0x884>)
 8011762:	681a      	ldr	r2, [r3, #0]
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011768:	6879      	ldr	r1, [r7, #4]
 801176a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801176c:	440b      	add	r3, r1
 801176e:	1ad3      	subs	r3, r2, r3
 8011770:	3301      	adds	r3, #1
 8011772:	2b00      	cmp	r3, #0
 8011774:	f300 841e 	bgt.w	8011fb4 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801177c:	4b7b      	ldr	r3, [pc, #492]	; (801196c <tcp_receive+0x884>)
 801177e:	681b      	ldr	r3, [r3, #0]
 8011780:	429a      	cmp	r2, r3
 8011782:	f040 829a 	bne.w	8011cba <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8011786:	4b7a      	ldr	r3, [pc, #488]	; (8011970 <tcp_receive+0x888>)
 8011788:	891c      	ldrh	r4, [r3, #8]
 801178a:	4b79      	ldr	r3, [pc, #484]	; (8011970 <tcp_receive+0x888>)
 801178c:	68db      	ldr	r3, [r3, #12]
 801178e:	899b      	ldrh	r3, [r3, #12]
 8011790:	b29b      	uxth	r3, r3
 8011792:	4618      	mov	r0, r3
 8011794:	f7fa fc54 	bl	800c040 <lwip_htons>
 8011798:	4603      	mov	r3, r0
 801179a:	b2db      	uxtb	r3, r3
 801179c:	f003 0303 	and.w	r3, r3, #3
 80117a0:	2b00      	cmp	r3, #0
 80117a2:	d001      	beq.n	80117a8 <tcp_receive+0x6c0>
 80117a4:	2301      	movs	r3, #1
 80117a6:	e000      	b.n	80117aa <tcp_receive+0x6c2>
 80117a8:	2300      	movs	r3, #0
 80117aa:	4423      	add	r3, r4
 80117ac:	b29a      	uxth	r2, r3
 80117ae:	4b71      	ldr	r3, [pc, #452]	; (8011974 <tcp_receive+0x88c>)
 80117b0:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80117b6:	4b6f      	ldr	r3, [pc, #444]	; (8011974 <tcp_receive+0x88c>)
 80117b8:	881b      	ldrh	r3, [r3, #0]
 80117ba:	429a      	cmp	r2, r3
 80117bc:	d275      	bcs.n	80118aa <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80117be:	4b6c      	ldr	r3, [pc, #432]	; (8011970 <tcp_receive+0x888>)
 80117c0:	68db      	ldr	r3, [r3, #12]
 80117c2:	899b      	ldrh	r3, [r3, #12]
 80117c4:	b29b      	uxth	r3, r3
 80117c6:	4618      	mov	r0, r3
 80117c8:	f7fa fc3a 	bl	800c040 <lwip_htons>
 80117cc:	4603      	mov	r3, r0
 80117ce:	b2db      	uxtb	r3, r3
 80117d0:	f003 0301 	and.w	r3, r3, #1
 80117d4:	2b00      	cmp	r3, #0
 80117d6:	d01f      	beq.n	8011818 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80117d8:	4b65      	ldr	r3, [pc, #404]	; (8011970 <tcp_receive+0x888>)
 80117da:	68db      	ldr	r3, [r3, #12]
 80117dc:	899b      	ldrh	r3, [r3, #12]
 80117de:	b29b      	uxth	r3, r3
 80117e0:	b21b      	sxth	r3, r3
 80117e2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80117e6:	b21c      	sxth	r4, r3
 80117e8:	4b61      	ldr	r3, [pc, #388]	; (8011970 <tcp_receive+0x888>)
 80117ea:	68db      	ldr	r3, [r3, #12]
 80117ec:	899b      	ldrh	r3, [r3, #12]
 80117ee:	b29b      	uxth	r3, r3
 80117f0:	4618      	mov	r0, r3
 80117f2:	f7fa fc25 	bl	800c040 <lwip_htons>
 80117f6:	4603      	mov	r3, r0
 80117f8:	b2db      	uxtb	r3, r3
 80117fa:	b29b      	uxth	r3, r3
 80117fc:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8011800:	b29b      	uxth	r3, r3
 8011802:	4618      	mov	r0, r3
 8011804:	f7fa fc1c 	bl	800c040 <lwip_htons>
 8011808:	4603      	mov	r3, r0
 801180a:	b21b      	sxth	r3, r3
 801180c:	4323      	orrs	r3, r4
 801180e:	b21a      	sxth	r2, r3
 8011810:	4b57      	ldr	r3, [pc, #348]	; (8011970 <tcp_receive+0x888>)
 8011812:	68db      	ldr	r3, [r3, #12]
 8011814:	b292      	uxth	r2, r2
 8011816:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8011818:	687b      	ldr	r3, [r7, #4]
 801181a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801181c:	4b54      	ldr	r3, [pc, #336]	; (8011970 <tcp_receive+0x888>)
 801181e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8011820:	4b53      	ldr	r3, [pc, #332]	; (8011970 <tcp_receive+0x888>)
 8011822:	68db      	ldr	r3, [r3, #12]
 8011824:	899b      	ldrh	r3, [r3, #12]
 8011826:	b29b      	uxth	r3, r3
 8011828:	4618      	mov	r0, r3
 801182a:	f7fa fc09 	bl	800c040 <lwip_htons>
 801182e:	4603      	mov	r3, r0
 8011830:	b2db      	uxtb	r3, r3
 8011832:	f003 0302 	and.w	r3, r3, #2
 8011836:	2b00      	cmp	r3, #0
 8011838:	d005      	beq.n	8011846 <tcp_receive+0x75e>
            inseg.len -= 1;
 801183a:	4b4d      	ldr	r3, [pc, #308]	; (8011970 <tcp_receive+0x888>)
 801183c:	891b      	ldrh	r3, [r3, #8]
 801183e:	3b01      	subs	r3, #1
 8011840:	b29a      	uxth	r2, r3
 8011842:	4b4b      	ldr	r3, [pc, #300]	; (8011970 <tcp_receive+0x888>)
 8011844:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8011846:	4b4a      	ldr	r3, [pc, #296]	; (8011970 <tcp_receive+0x888>)
 8011848:	685b      	ldr	r3, [r3, #4]
 801184a:	4a49      	ldr	r2, [pc, #292]	; (8011970 <tcp_receive+0x888>)
 801184c:	8912      	ldrh	r2, [r2, #8]
 801184e:	4611      	mov	r1, r2
 8011850:	4618      	mov	r0, r3
 8011852:	f7fb ff29 	bl	800d6a8 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8011856:	4b46      	ldr	r3, [pc, #280]	; (8011970 <tcp_receive+0x888>)
 8011858:	891c      	ldrh	r4, [r3, #8]
 801185a:	4b45      	ldr	r3, [pc, #276]	; (8011970 <tcp_receive+0x888>)
 801185c:	68db      	ldr	r3, [r3, #12]
 801185e:	899b      	ldrh	r3, [r3, #12]
 8011860:	b29b      	uxth	r3, r3
 8011862:	4618      	mov	r0, r3
 8011864:	f7fa fbec 	bl	800c040 <lwip_htons>
 8011868:	4603      	mov	r3, r0
 801186a:	b2db      	uxtb	r3, r3
 801186c:	f003 0303 	and.w	r3, r3, #3
 8011870:	2b00      	cmp	r3, #0
 8011872:	d001      	beq.n	8011878 <tcp_receive+0x790>
 8011874:	2301      	movs	r3, #1
 8011876:	e000      	b.n	801187a <tcp_receive+0x792>
 8011878:	2300      	movs	r3, #0
 801187a:	4423      	add	r3, r4
 801187c:	b29a      	uxth	r2, r3
 801187e:	4b3d      	ldr	r3, [pc, #244]	; (8011974 <tcp_receive+0x88c>)
 8011880:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8011882:	4b3c      	ldr	r3, [pc, #240]	; (8011974 <tcp_receive+0x88c>)
 8011884:	881b      	ldrh	r3, [r3, #0]
 8011886:	461a      	mov	r2, r3
 8011888:	4b38      	ldr	r3, [pc, #224]	; (801196c <tcp_receive+0x884>)
 801188a:	681b      	ldr	r3, [r3, #0]
 801188c:	441a      	add	r2, r3
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011892:	6879      	ldr	r1, [r7, #4]
 8011894:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011896:	440b      	add	r3, r1
 8011898:	429a      	cmp	r2, r3
 801189a:	d006      	beq.n	80118aa <tcp_receive+0x7c2>
 801189c:	4b36      	ldr	r3, [pc, #216]	; (8011978 <tcp_receive+0x890>)
 801189e:	f240 52cb 	movw	r2, #1483	; 0x5cb
 80118a2:	4936      	ldr	r1, [pc, #216]	; (801197c <tcp_receive+0x894>)
 80118a4:	4836      	ldr	r0, [pc, #216]	; (8011980 <tcp_receive+0x898>)
 80118a6:	f005 faf7 	bl	8016e98 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80118ae:	2b00      	cmp	r3, #0
 80118b0:	f000 80e7 	beq.w	8011a82 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80118b4:	4b2e      	ldr	r3, [pc, #184]	; (8011970 <tcp_receive+0x888>)
 80118b6:	68db      	ldr	r3, [r3, #12]
 80118b8:	899b      	ldrh	r3, [r3, #12]
 80118ba:	b29b      	uxth	r3, r3
 80118bc:	4618      	mov	r0, r3
 80118be:	f7fa fbbf 	bl	800c040 <lwip_htons>
 80118c2:	4603      	mov	r3, r0
 80118c4:	b2db      	uxtb	r3, r3
 80118c6:	f003 0301 	and.w	r3, r3, #1
 80118ca:	2b00      	cmp	r3, #0
 80118cc:	d010      	beq.n	80118f0 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80118ce:	e00a      	b.n	80118e6 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80118d4:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80118da:	681a      	ldr	r2, [r3, #0]
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 80118e0:	68f8      	ldr	r0, [r7, #12]
 80118e2:	f7fd fcb0 	bl	800f246 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80118ea:	2b00      	cmp	r3, #0
 80118ec:	d1f0      	bne.n	80118d0 <tcp_receive+0x7e8>
 80118ee:	e0c8      	b.n	8011a82 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80118f4:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80118f6:	e052      	b.n	801199e <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80118f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80118fa:	68db      	ldr	r3, [r3, #12]
 80118fc:	899b      	ldrh	r3, [r3, #12]
 80118fe:	b29b      	uxth	r3, r3
 8011900:	4618      	mov	r0, r3
 8011902:	f7fa fb9d 	bl	800c040 <lwip_htons>
 8011906:	4603      	mov	r3, r0
 8011908:	b2db      	uxtb	r3, r3
 801190a:	f003 0301 	and.w	r3, r3, #1
 801190e:	2b00      	cmp	r3, #0
 8011910:	d03d      	beq.n	801198e <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8011912:	4b17      	ldr	r3, [pc, #92]	; (8011970 <tcp_receive+0x888>)
 8011914:	68db      	ldr	r3, [r3, #12]
 8011916:	899b      	ldrh	r3, [r3, #12]
 8011918:	b29b      	uxth	r3, r3
 801191a:	4618      	mov	r0, r3
 801191c:	f7fa fb90 	bl	800c040 <lwip_htons>
 8011920:	4603      	mov	r3, r0
 8011922:	b2db      	uxtb	r3, r3
 8011924:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8011928:	2b00      	cmp	r3, #0
 801192a:	d130      	bne.n	801198e <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801192c:	4b10      	ldr	r3, [pc, #64]	; (8011970 <tcp_receive+0x888>)
 801192e:	68db      	ldr	r3, [r3, #12]
 8011930:	899b      	ldrh	r3, [r3, #12]
 8011932:	b29c      	uxth	r4, r3
 8011934:	2001      	movs	r0, #1
 8011936:	f7fa fb83 	bl	800c040 <lwip_htons>
 801193a:	4603      	mov	r3, r0
 801193c:	461a      	mov	r2, r3
 801193e:	4b0c      	ldr	r3, [pc, #48]	; (8011970 <tcp_receive+0x888>)
 8011940:	68db      	ldr	r3, [r3, #12]
 8011942:	4322      	orrs	r2, r4
 8011944:	b292      	uxth	r2, r2
 8011946:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8011948:	4b09      	ldr	r3, [pc, #36]	; (8011970 <tcp_receive+0x888>)
 801194a:	891c      	ldrh	r4, [r3, #8]
 801194c:	4b08      	ldr	r3, [pc, #32]	; (8011970 <tcp_receive+0x888>)
 801194e:	68db      	ldr	r3, [r3, #12]
 8011950:	899b      	ldrh	r3, [r3, #12]
 8011952:	b29b      	uxth	r3, r3
 8011954:	4618      	mov	r0, r3
 8011956:	f7fa fb73 	bl	800c040 <lwip_htons>
 801195a:	4603      	mov	r3, r0
 801195c:	b2db      	uxtb	r3, r3
 801195e:	f003 0303 	and.w	r3, r3, #3
 8011962:	2b00      	cmp	r3, #0
 8011964:	d00e      	beq.n	8011984 <tcp_receive+0x89c>
 8011966:	2301      	movs	r3, #1
 8011968:	e00d      	b.n	8011986 <tcp_receive+0x89e>
 801196a:	bf00      	nop
 801196c:	240040e0 	.word	0x240040e0
 8011970:	240040c0 	.word	0x240040c0
 8011974:	240040ea 	.word	0x240040ea
 8011978:	080192e0 	.word	0x080192e0
 801197c:	08019688 	.word	0x08019688
 8011980:	0801932c 	.word	0x0801932c
 8011984:	2300      	movs	r3, #0
 8011986:	4423      	add	r3, r4
 8011988:	b29a      	uxth	r2, r3
 801198a:	4b98      	ldr	r3, [pc, #608]	; (8011bec <tcp_receive+0xb04>)
 801198c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801198e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011990:	613b      	str	r3, [r7, #16]
              next = next->next;
 8011992:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011994:	681b      	ldr	r3, [r3, #0]
 8011996:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8011998:	6938      	ldr	r0, [r7, #16]
 801199a:	f7fd fc54 	bl	800f246 <tcp_seg_free>
            while (next &&
 801199e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80119a0:	2b00      	cmp	r3, #0
 80119a2:	d00e      	beq.n	80119c2 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80119a4:	4b91      	ldr	r3, [pc, #580]	; (8011bec <tcp_receive+0xb04>)
 80119a6:	881b      	ldrh	r3, [r3, #0]
 80119a8:	461a      	mov	r2, r3
 80119aa:	4b91      	ldr	r3, [pc, #580]	; (8011bf0 <tcp_receive+0xb08>)
 80119ac:	681b      	ldr	r3, [r3, #0]
 80119ae:	441a      	add	r2, r3
 80119b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80119b2:	68db      	ldr	r3, [r3, #12]
 80119b4:	685b      	ldr	r3, [r3, #4]
 80119b6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80119b8:	8909      	ldrh	r1, [r1, #8]
 80119ba:	440b      	add	r3, r1
 80119bc:	1ad3      	subs	r3, r2, r3
            while (next &&
 80119be:	2b00      	cmp	r3, #0
 80119c0:	da9a      	bge.n	80118f8 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80119c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80119c4:	2b00      	cmp	r3, #0
 80119c6:	d059      	beq.n	8011a7c <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 80119c8:	4b88      	ldr	r3, [pc, #544]	; (8011bec <tcp_receive+0xb04>)
 80119ca:	881b      	ldrh	r3, [r3, #0]
 80119cc:	461a      	mov	r2, r3
 80119ce:	4b88      	ldr	r3, [pc, #544]	; (8011bf0 <tcp_receive+0xb08>)
 80119d0:	681b      	ldr	r3, [r3, #0]
 80119d2:	441a      	add	r2, r3
 80119d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80119d6:	68db      	ldr	r3, [r3, #12]
 80119d8:	685b      	ldr	r3, [r3, #4]
 80119da:	1ad3      	subs	r3, r2, r3
            if (next &&
 80119dc:	2b00      	cmp	r3, #0
 80119de:	dd4d      	ble.n	8011a7c <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80119e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80119e2:	68db      	ldr	r3, [r3, #12]
 80119e4:	685b      	ldr	r3, [r3, #4]
 80119e6:	b29a      	uxth	r2, r3
 80119e8:	4b81      	ldr	r3, [pc, #516]	; (8011bf0 <tcp_receive+0xb08>)
 80119ea:	681b      	ldr	r3, [r3, #0]
 80119ec:	b29b      	uxth	r3, r3
 80119ee:	1ad3      	subs	r3, r2, r3
 80119f0:	b29a      	uxth	r2, r3
 80119f2:	4b80      	ldr	r3, [pc, #512]	; (8011bf4 <tcp_receive+0xb0c>)
 80119f4:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80119f6:	4b7f      	ldr	r3, [pc, #508]	; (8011bf4 <tcp_receive+0xb0c>)
 80119f8:	68db      	ldr	r3, [r3, #12]
 80119fa:	899b      	ldrh	r3, [r3, #12]
 80119fc:	b29b      	uxth	r3, r3
 80119fe:	4618      	mov	r0, r3
 8011a00:	f7fa fb1e 	bl	800c040 <lwip_htons>
 8011a04:	4603      	mov	r3, r0
 8011a06:	b2db      	uxtb	r3, r3
 8011a08:	f003 0302 	and.w	r3, r3, #2
 8011a0c:	2b00      	cmp	r3, #0
 8011a0e:	d005      	beq.n	8011a1c <tcp_receive+0x934>
                inseg.len -= 1;
 8011a10:	4b78      	ldr	r3, [pc, #480]	; (8011bf4 <tcp_receive+0xb0c>)
 8011a12:	891b      	ldrh	r3, [r3, #8]
 8011a14:	3b01      	subs	r3, #1
 8011a16:	b29a      	uxth	r2, r3
 8011a18:	4b76      	ldr	r3, [pc, #472]	; (8011bf4 <tcp_receive+0xb0c>)
 8011a1a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8011a1c:	4b75      	ldr	r3, [pc, #468]	; (8011bf4 <tcp_receive+0xb0c>)
 8011a1e:	685b      	ldr	r3, [r3, #4]
 8011a20:	4a74      	ldr	r2, [pc, #464]	; (8011bf4 <tcp_receive+0xb0c>)
 8011a22:	8912      	ldrh	r2, [r2, #8]
 8011a24:	4611      	mov	r1, r2
 8011a26:	4618      	mov	r0, r3
 8011a28:	f7fb fe3e 	bl	800d6a8 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8011a2c:	4b71      	ldr	r3, [pc, #452]	; (8011bf4 <tcp_receive+0xb0c>)
 8011a2e:	891c      	ldrh	r4, [r3, #8]
 8011a30:	4b70      	ldr	r3, [pc, #448]	; (8011bf4 <tcp_receive+0xb0c>)
 8011a32:	68db      	ldr	r3, [r3, #12]
 8011a34:	899b      	ldrh	r3, [r3, #12]
 8011a36:	b29b      	uxth	r3, r3
 8011a38:	4618      	mov	r0, r3
 8011a3a:	f7fa fb01 	bl	800c040 <lwip_htons>
 8011a3e:	4603      	mov	r3, r0
 8011a40:	b2db      	uxtb	r3, r3
 8011a42:	f003 0303 	and.w	r3, r3, #3
 8011a46:	2b00      	cmp	r3, #0
 8011a48:	d001      	beq.n	8011a4e <tcp_receive+0x966>
 8011a4a:	2301      	movs	r3, #1
 8011a4c:	e000      	b.n	8011a50 <tcp_receive+0x968>
 8011a4e:	2300      	movs	r3, #0
 8011a50:	4423      	add	r3, r4
 8011a52:	b29a      	uxth	r2, r3
 8011a54:	4b65      	ldr	r3, [pc, #404]	; (8011bec <tcp_receive+0xb04>)
 8011a56:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8011a58:	4b64      	ldr	r3, [pc, #400]	; (8011bec <tcp_receive+0xb04>)
 8011a5a:	881b      	ldrh	r3, [r3, #0]
 8011a5c:	461a      	mov	r2, r3
 8011a5e:	4b64      	ldr	r3, [pc, #400]	; (8011bf0 <tcp_receive+0xb08>)
 8011a60:	681b      	ldr	r3, [r3, #0]
 8011a62:	441a      	add	r2, r3
 8011a64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011a66:	68db      	ldr	r3, [r3, #12]
 8011a68:	685b      	ldr	r3, [r3, #4]
 8011a6a:	429a      	cmp	r2, r3
 8011a6c:	d006      	beq.n	8011a7c <tcp_receive+0x994>
 8011a6e:	4b62      	ldr	r3, [pc, #392]	; (8011bf8 <tcp_receive+0xb10>)
 8011a70:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8011a74:	4961      	ldr	r1, [pc, #388]	; (8011bfc <tcp_receive+0xb14>)
 8011a76:	4862      	ldr	r0, [pc, #392]	; (8011c00 <tcp_receive+0xb18>)
 8011a78:	f005 fa0e 	bl	8016e98 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011a80:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8011a82:	4b5a      	ldr	r3, [pc, #360]	; (8011bec <tcp_receive+0xb04>)
 8011a84:	881b      	ldrh	r3, [r3, #0]
 8011a86:	461a      	mov	r2, r3
 8011a88:	4b59      	ldr	r3, [pc, #356]	; (8011bf0 <tcp_receive+0xb08>)
 8011a8a:	681b      	ldr	r3, [r3, #0]
 8011a8c:	441a      	add	r2, r3
 8011a8e:	687b      	ldr	r3, [r7, #4]
 8011a90:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8011a92:	687b      	ldr	r3, [r7, #4]
 8011a94:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011a96:	4b55      	ldr	r3, [pc, #340]	; (8011bec <tcp_receive+0xb04>)
 8011a98:	881b      	ldrh	r3, [r3, #0]
 8011a9a:	429a      	cmp	r2, r3
 8011a9c:	d206      	bcs.n	8011aac <tcp_receive+0x9c4>
 8011a9e:	4b56      	ldr	r3, [pc, #344]	; (8011bf8 <tcp_receive+0xb10>)
 8011aa0:	f240 6207 	movw	r2, #1543	; 0x607
 8011aa4:	4957      	ldr	r1, [pc, #348]	; (8011c04 <tcp_receive+0xb1c>)
 8011aa6:	4856      	ldr	r0, [pc, #344]	; (8011c00 <tcp_receive+0xb18>)
 8011aa8:	f005 f9f6 	bl	8016e98 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011ab0:	4b4e      	ldr	r3, [pc, #312]	; (8011bec <tcp_receive+0xb04>)
 8011ab2:	881b      	ldrh	r3, [r3, #0]
 8011ab4:	1ad3      	subs	r3, r2, r3
 8011ab6:	b29a      	uxth	r2, r3
 8011ab8:	687b      	ldr	r3, [r7, #4]
 8011aba:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8011abc:	6878      	ldr	r0, [r7, #4]
 8011abe:	f7fc fe9d 	bl	800e7fc <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8011ac2:	4b4c      	ldr	r3, [pc, #304]	; (8011bf4 <tcp_receive+0xb0c>)
 8011ac4:	685b      	ldr	r3, [r3, #4]
 8011ac6:	891b      	ldrh	r3, [r3, #8]
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	d006      	beq.n	8011ada <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8011acc:	4b49      	ldr	r3, [pc, #292]	; (8011bf4 <tcp_receive+0xb0c>)
 8011ace:	685b      	ldr	r3, [r3, #4]
 8011ad0:	4a4d      	ldr	r2, [pc, #308]	; (8011c08 <tcp_receive+0xb20>)
 8011ad2:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8011ad4:	4b47      	ldr	r3, [pc, #284]	; (8011bf4 <tcp_receive+0xb0c>)
 8011ad6:	2200      	movs	r2, #0
 8011ad8:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011ada:	4b46      	ldr	r3, [pc, #280]	; (8011bf4 <tcp_receive+0xb0c>)
 8011adc:	68db      	ldr	r3, [r3, #12]
 8011ade:	899b      	ldrh	r3, [r3, #12]
 8011ae0:	b29b      	uxth	r3, r3
 8011ae2:	4618      	mov	r0, r3
 8011ae4:	f7fa faac 	bl	800c040 <lwip_htons>
 8011ae8:	4603      	mov	r3, r0
 8011aea:	b2db      	uxtb	r3, r3
 8011aec:	f003 0301 	and.w	r3, r3, #1
 8011af0:	2b00      	cmp	r3, #0
 8011af2:	f000 80b8 	beq.w	8011c66 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8011af6:	4b45      	ldr	r3, [pc, #276]	; (8011c0c <tcp_receive+0xb24>)
 8011af8:	781b      	ldrb	r3, [r3, #0]
 8011afa:	f043 0320 	orr.w	r3, r3, #32
 8011afe:	b2da      	uxtb	r2, r3
 8011b00:	4b42      	ldr	r3, [pc, #264]	; (8011c0c <tcp_receive+0xb24>)
 8011b02:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8011b04:	e0af      	b.n	8011c66 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011b0a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011b10:	68db      	ldr	r3, [r3, #12]
 8011b12:	685b      	ldr	r3, [r3, #4]
 8011b14:	4a36      	ldr	r2, [pc, #216]	; (8011bf0 <tcp_receive+0xb08>)
 8011b16:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8011b18:	68bb      	ldr	r3, [r7, #8]
 8011b1a:	891b      	ldrh	r3, [r3, #8]
 8011b1c:	461c      	mov	r4, r3
 8011b1e:	68bb      	ldr	r3, [r7, #8]
 8011b20:	68db      	ldr	r3, [r3, #12]
 8011b22:	899b      	ldrh	r3, [r3, #12]
 8011b24:	b29b      	uxth	r3, r3
 8011b26:	4618      	mov	r0, r3
 8011b28:	f7fa fa8a 	bl	800c040 <lwip_htons>
 8011b2c:	4603      	mov	r3, r0
 8011b2e:	b2db      	uxtb	r3, r3
 8011b30:	f003 0303 	and.w	r3, r3, #3
 8011b34:	2b00      	cmp	r3, #0
 8011b36:	d001      	beq.n	8011b3c <tcp_receive+0xa54>
 8011b38:	2301      	movs	r3, #1
 8011b3a:	e000      	b.n	8011b3e <tcp_receive+0xa56>
 8011b3c:	2300      	movs	r3, #0
 8011b3e:	191a      	adds	r2, r3, r4
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b44:	441a      	add	r2, r3
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011b4e:	461c      	mov	r4, r3
 8011b50:	68bb      	ldr	r3, [r7, #8]
 8011b52:	891b      	ldrh	r3, [r3, #8]
 8011b54:	461d      	mov	r5, r3
 8011b56:	68bb      	ldr	r3, [r7, #8]
 8011b58:	68db      	ldr	r3, [r3, #12]
 8011b5a:	899b      	ldrh	r3, [r3, #12]
 8011b5c:	b29b      	uxth	r3, r3
 8011b5e:	4618      	mov	r0, r3
 8011b60:	f7fa fa6e 	bl	800c040 <lwip_htons>
 8011b64:	4603      	mov	r3, r0
 8011b66:	b2db      	uxtb	r3, r3
 8011b68:	f003 0303 	and.w	r3, r3, #3
 8011b6c:	2b00      	cmp	r3, #0
 8011b6e:	d001      	beq.n	8011b74 <tcp_receive+0xa8c>
 8011b70:	2301      	movs	r3, #1
 8011b72:	e000      	b.n	8011b76 <tcp_receive+0xa8e>
 8011b74:	2300      	movs	r3, #0
 8011b76:	442b      	add	r3, r5
 8011b78:	429c      	cmp	r4, r3
 8011b7a:	d206      	bcs.n	8011b8a <tcp_receive+0xaa2>
 8011b7c:	4b1e      	ldr	r3, [pc, #120]	; (8011bf8 <tcp_receive+0xb10>)
 8011b7e:	f240 622b 	movw	r2, #1579	; 0x62b
 8011b82:	4923      	ldr	r1, [pc, #140]	; (8011c10 <tcp_receive+0xb28>)
 8011b84:	481e      	ldr	r0, [pc, #120]	; (8011c00 <tcp_receive+0xb18>)
 8011b86:	f005 f987 	bl	8016e98 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8011b8a:	68bb      	ldr	r3, [r7, #8]
 8011b8c:	891b      	ldrh	r3, [r3, #8]
 8011b8e:	461c      	mov	r4, r3
 8011b90:	68bb      	ldr	r3, [r7, #8]
 8011b92:	68db      	ldr	r3, [r3, #12]
 8011b94:	899b      	ldrh	r3, [r3, #12]
 8011b96:	b29b      	uxth	r3, r3
 8011b98:	4618      	mov	r0, r3
 8011b9a:	f7fa fa51 	bl	800c040 <lwip_htons>
 8011b9e:	4603      	mov	r3, r0
 8011ba0:	b2db      	uxtb	r3, r3
 8011ba2:	f003 0303 	and.w	r3, r3, #3
 8011ba6:	2b00      	cmp	r3, #0
 8011ba8:	d001      	beq.n	8011bae <tcp_receive+0xac6>
 8011baa:	2301      	movs	r3, #1
 8011bac:	e000      	b.n	8011bb0 <tcp_receive+0xac8>
 8011bae:	2300      	movs	r3, #0
 8011bb0:	1919      	adds	r1, r3, r4
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011bb6:	b28b      	uxth	r3, r1
 8011bb8:	1ad3      	subs	r3, r2, r3
 8011bba:	b29a      	uxth	r2, r3
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8011bc0:	6878      	ldr	r0, [r7, #4]
 8011bc2:	f7fc fe1b 	bl	800e7fc <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8011bc6:	68bb      	ldr	r3, [r7, #8]
 8011bc8:	685b      	ldr	r3, [r3, #4]
 8011bca:	891b      	ldrh	r3, [r3, #8]
 8011bcc:	2b00      	cmp	r3, #0
 8011bce:	d028      	beq.n	8011c22 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8011bd0:	4b0d      	ldr	r3, [pc, #52]	; (8011c08 <tcp_receive+0xb20>)
 8011bd2:	681b      	ldr	r3, [r3, #0]
 8011bd4:	2b00      	cmp	r3, #0
 8011bd6:	d01d      	beq.n	8011c14 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8011bd8:	4b0b      	ldr	r3, [pc, #44]	; (8011c08 <tcp_receive+0xb20>)
 8011bda:	681a      	ldr	r2, [r3, #0]
 8011bdc:	68bb      	ldr	r3, [r7, #8]
 8011bde:	685b      	ldr	r3, [r3, #4]
 8011be0:	4619      	mov	r1, r3
 8011be2:	4610      	mov	r0, r2
 8011be4:	f7fb ffb4 	bl	800db50 <pbuf_cat>
 8011be8:	e018      	b.n	8011c1c <tcp_receive+0xb34>
 8011bea:	bf00      	nop
 8011bec:	240040ea 	.word	0x240040ea
 8011bf0:	240040e0 	.word	0x240040e0
 8011bf4:	240040c0 	.word	0x240040c0
 8011bf8:	080192e0 	.word	0x080192e0
 8011bfc:	080196c0 	.word	0x080196c0
 8011c00:	0801932c 	.word	0x0801932c
 8011c04:	080196fc 	.word	0x080196fc
 8011c08:	240040f0 	.word	0x240040f0
 8011c0c:	240040ed 	.word	0x240040ed
 8011c10:	0801971c 	.word	0x0801971c
            } else {
              recv_data = cseg->p;
 8011c14:	68bb      	ldr	r3, [r7, #8]
 8011c16:	685b      	ldr	r3, [r3, #4]
 8011c18:	4a70      	ldr	r2, [pc, #448]	; (8011ddc <tcp_receive+0xcf4>)
 8011c1a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8011c1c:	68bb      	ldr	r3, [r7, #8]
 8011c1e:	2200      	movs	r2, #0
 8011c20:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8011c22:	68bb      	ldr	r3, [r7, #8]
 8011c24:	68db      	ldr	r3, [r3, #12]
 8011c26:	899b      	ldrh	r3, [r3, #12]
 8011c28:	b29b      	uxth	r3, r3
 8011c2a:	4618      	mov	r0, r3
 8011c2c:	f7fa fa08 	bl	800c040 <lwip_htons>
 8011c30:	4603      	mov	r3, r0
 8011c32:	b2db      	uxtb	r3, r3
 8011c34:	f003 0301 	and.w	r3, r3, #1
 8011c38:	2b00      	cmp	r3, #0
 8011c3a:	d00d      	beq.n	8011c58 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8011c3c:	4b68      	ldr	r3, [pc, #416]	; (8011de0 <tcp_receive+0xcf8>)
 8011c3e:	781b      	ldrb	r3, [r3, #0]
 8011c40:	f043 0320 	orr.w	r3, r3, #32
 8011c44:	b2da      	uxtb	r2, r3
 8011c46:	4b66      	ldr	r3, [pc, #408]	; (8011de0 <tcp_receive+0xcf8>)
 8011c48:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8011c4a:	687b      	ldr	r3, [r7, #4]
 8011c4c:	7d1b      	ldrb	r3, [r3, #20]
 8011c4e:	2b04      	cmp	r3, #4
 8011c50:	d102      	bne.n	8011c58 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8011c52:	687b      	ldr	r3, [r7, #4]
 8011c54:	2207      	movs	r2, #7
 8011c56:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8011c58:	68bb      	ldr	r3, [r7, #8]
 8011c5a:	681a      	ldr	r2, [r3, #0]
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8011c60:	68b8      	ldr	r0, [r7, #8]
 8011c62:	f7fd faf0 	bl	800f246 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011c6a:	2b00      	cmp	r3, #0
 8011c6c:	d008      	beq.n	8011c80 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8011c6e:	687b      	ldr	r3, [r7, #4]
 8011c70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011c72:	68db      	ldr	r3, [r3, #12]
 8011c74:	685a      	ldr	r2, [r3, #4]
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8011c7a:	429a      	cmp	r2, r3
 8011c7c:	f43f af43 	beq.w	8011b06 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	8b5b      	ldrh	r3, [r3, #26]
 8011c84:	f003 0301 	and.w	r3, r3, #1
 8011c88:	2b00      	cmp	r3, #0
 8011c8a:	d00e      	beq.n	8011caa <tcp_receive+0xbc2>
 8011c8c:	687b      	ldr	r3, [r7, #4]
 8011c8e:	8b5b      	ldrh	r3, [r3, #26]
 8011c90:	f023 0301 	bic.w	r3, r3, #1
 8011c94:	b29a      	uxth	r2, r3
 8011c96:	687b      	ldr	r3, [r7, #4]
 8011c98:	835a      	strh	r2, [r3, #26]
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	8b5b      	ldrh	r3, [r3, #26]
 8011c9e:	f043 0302 	orr.w	r3, r3, #2
 8011ca2:	b29a      	uxth	r2, r3
 8011ca4:	687b      	ldr	r3, [r7, #4]
 8011ca6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8011ca8:	e188      	b.n	8011fbc <tcp_receive+0xed4>
        tcp_ack(pcb);
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	8b5b      	ldrh	r3, [r3, #26]
 8011cae:	f043 0301 	orr.w	r3, r3, #1
 8011cb2:	b29a      	uxth	r2, r3
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8011cb8:	e180      	b.n	8011fbc <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8011cba:	687b      	ldr	r3, [r7, #4]
 8011cbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011cbe:	2b00      	cmp	r3, #0
 8011cc0:	d106      	bne.n	8011cd0 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8011cc2:	4848      	ldr	r0, [pc, #288]	; (8011de4 <tcp_receive+0xcfc>)
 8011cc4:	f7fd faf6 	bl	800f2b4 <tcp_seg_copy>
 8011cc8:	4602      	mov	r2, r0
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	675a      	str	r2, [r3, #116]	; 0x74
 8011cce:	e16d      	b.n	8011fac <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8011cd0:	2300      	movs	r3, #0
 8011cd2:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011cd8:	63bb      	str	r3, [r7, #56]	; 0x38
 8011cda:	e157      	b.n	8011f8c <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 8011cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cde:	68db      	ldr	r3, [r3, #12]
 8011ce0:	685a      	ldr	r2, [r3, #4]
 8011ce2:	4b41      	ldr	r3, [pc, #260]	; (8011de8 <tcp_receive+0xd00>)
 8011ce4:	681b      	ldr	r3, [r3, #0]
 8011ce6:	429a      	cmp	r2, r3
 8011ce8:	d11d      	bne.n	8011d26 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8011cea:	4b3e      	ldr	r3, [pc, #248]	; (8011de4 <tcp_receive+0xcfc>)
 8011cec:	891a      	ldrh	r2, [r3, #8]
 8011cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cf0:	891b      	ldrh	r3, [r3, #8]
 8011cf2:	429a      	cmp	r2, r3
 8011cf4:	f240 814f 	bls.w	8011f96 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011cf8:	483a      	ldr	r0, [pc, #232]	; (8011de4 <tcp_receive+0xcfc>)
 8011cfa:	f7fd fadb 	bl	800f2b4 <tcp_seg_copy>
 8011cfe:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8011d00:	697b      	ldr	r3, [r7, #20]
 8011d02:	2b00      	cmp	r3, #0
 8011d04:	f000 8149 	beq.w	8011f9a <tcp_receive+0xeb2>
                  if (prev != NULL) {
 8011d08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d0a:	2b00      	cmp	r3, #0
 8011d0c:	d003      	beq.n	8011d16 <tcp_receive+0xc2e>
                    prev->next = cseg;
 8011d0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d10:	697a      	ldr	r2, [r7, #20]
 8011d12:	601a      	str	r2, [r3, #0]
 8011d14:	e002      	b.n	8011d1c <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8011d16:	687b      	ldr	r3, [r7, #4]
 8011d18:	697a      	ldr	r2, [r7, #20]
 8011d1a:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8011d1c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011d1e:	6978      	ldr	r0, [r7, #20]
 8011d20:	f7ff f8de 	bl	8010ee0 <tcp_oos_insert_segment>
                }
                break;
 8011d24:	e139      	b.n	8011f9a <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8011d26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d28:	2b00      	cmp	r3, #0
 8011d2a:	d117      	bne.n	8011d5c <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8011d2c:	4b2e      	ldr	r3, [pc, #184]	; (8011de8 <tcp_receive+0xd00>)
 8011d2e:	681a      	ldr	r2, [r3, #0]
 8011d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d32:	68db      	ldr	r3, [r3, #12]
 8011d34:	685b      	ldr	r3, [r3, #4]
 8011d36:	1ad3      	subs	r3, r2, r3
 8011d38:	2b00      	cmp	r3, #0
 8011d3a:	da57      	bge.n	8011dec <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011d3c:	4829      	ldr	r0, [pc, #164]	; (8011de4 <tcp_receive+0xcfc>)
 8011d3e:	f7fd fab9 	bl	800f2b4 <tcp_seg_copy>
 8011d42:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8011d44:	69bb      	ldr	r3, [r7, #24]
 8011d46:	2b00      	cmp	r3, #0
 8011d48:	f000 8129 	beq.w	8011f9e <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	69ba      	ldr	r2, [r7, #24]
 8011d50:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8011d52:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011d54:	69b8      	ldr	r0, [r7, #24]
 8011d56:	f7ff f8c3 	bl	8010ee0 <tcp_oos_insert_segment>
                  }
                  break;
 8011d5a:	e120      	b.n	8011f9e <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8011d5c:	4b22      	ldr	r3, [pc, #136]	; (8011de8 <tcp_receive+0xd00>)
 8011d5e:	681a      	ldr	r2, [r3, #0]
 8011d60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d62:	68db      	ldr	r3, [r3, #12]
 8011d64:	685b      	ldr	r3, [r3, #4]
 8011d66:	1ad3      	subs	r3, r2, r3
 8011d68:	3b01      	subs	r3, #1
 8011d6a:	2b00      	cmp	r3, #0
 8011d6c:	db3e      	blt.n	8011dec <tcp_receive+0xd04>
 8011d6e:	4b1e      	ldr	r3, [pc, #120]	; (8011de8 <tcp_receive+0xd00>)
 8011d70:	681a      	ldr	r2, [r3, #0]
 8011d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d74:	68db      	ldr	r3, [r3, #12]
 8011d76:	685b      	ldr	r3, [r3, #4]
 8011d78:	1ad3      	subs	r3, r2, r3
 8011d7a:	3301      	adds	r3, #1
 8011d7c:	2b00      	cmp	r3, #0
 8011d7e:	dc35      	bgt.n	8011dec <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011d80:	4818      	ldr	r0, [pc, #96]	; (8011de4 <tcp_receive+0xcfc>)
 8011d82:	f7fd fa97 	bl	800f2b4 <tcp_seg_copy>
 8011d86:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8011d88:	69fb      	ldr	r3, [r7, #28]
 8011d8a:	2b00      	cmp	r3, #0
 8011d8c:	f000 8109 	beq.w	8011fa2 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8011d90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d92:	68db      	ldr	r3, [r3, #12]
 8011d94:	685b      	ldr	r3, [r3, #4]
 8011d96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011d98:	8912      	ldrh	r2, [r2, #8]
 8011d9a:	441a      	add	r2, r3
 8011d9c:	4b12      	ldr	r3, [pc, #72]	; (8011de8 <tcp_receive+0xd00>)
 8011d9e:	681b      	ldr	r3, [r3, #0]
 8011da0:	1ad3      	subs	r3, r2, r3
 8011da2:	2b00      	cmp	r3, #0
 8011da4:	dd12      	ble.n	8011dcc <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8011da6:	4b10      	ldr	r3, [pc, #64]	; (8011de8 <tcp_receive+0xd00>)
 8011da8:	681b      	ldr	r3, [r3, #0]
 8011daa:	b29a      	uxth	r2, r3
 8011dac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011dae:	68db      	ldr	r3, [r3, #12]
 8011db0:	685b      	ldr	r3, [r3, #4]
 8011db2:	b29b      	uxth	r3, r3
 8011db4:	1ad3      	subs	r3, r2, r3
 8011db6:	b29a      	uxth	r2, r3
 8011db8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011dba:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8011dbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011dbe:	685a      	ldr	r2, [r3, #4]
 8011dc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011dc2:	891b      	ldrh	r3, [r3, #8]
 8011dc4:	4619      	mov	r1, r3
 8011dc6:	4610      	mov	r0, r2
 8011dc8:	f7fb fc6e 	bl	800d6a8 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8011dcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011dce:	69fa      	ldr	r2, [r7, #28]
 8011dd0:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8011dd2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011dd4:	69f8      	ldr	r0, [r7, #28]
 8011dd6:	f7ff f883 	bl	8010ee0 <tcp_oos_insert_segment>
                  }
                  break;
 8011dda:	e0e2      	b.n	8011fa2 <tcp_receive+0xeba>
 8011ddc:	240040f0 	.word	0x240040f0
 8011de0:	240040ed 	.word	0x240040ed
 8011de4:	240040c0 	.word	0x240040c0
 8011de8:	240040e0 	.word	0x240040e0
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8011dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011dee:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8011df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011df2:	681b      	ldr	r3, [r3, #0]
 8011df4:	2b00      	cmp	r3, #0
 8011df6:	f040 80c6 	bne.w	8011f86 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8011dfa:	4b80      	ldr	r3, [pc, #512]	; (8011ffc <tcp_receive+0xf14>)
 8011dfc:	681a      	ldr	r2, [r3, #0]
 8011dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e00:	68db      	ldr	r3, [r3, #12]
 8011e02:	685b      	ldr	r3, [r3, #4]
 8011e04:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8011e06:	2b00      	cmp	r3, #0
 8011e08:	f340 80bd 	ble.w	8011f86 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8011e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e0e:	68db      	ldr	r3, [r3, #12]
 8011e10:	899b      	ldrh	r3, [r3, #12]
 8011e12:	b29b      	uxth	r3, r3
 8011e14:	4618      	mov	r0, r3
 8011e16:	f7fa f913 	bl	800c040 <lwip_htons>
 8011e1a:	4603      	mov	r3, r0
 8011e1c:	b2db      	uxtb	r3, r3
 8011e1e:	f003 0301 	and.w	r3, r3, #1
 8011e22:	2b00      	cmp	r3, #0
 8011e24:	f040 80bf 	bne.w	8011fa6 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8011e28:	4875      	ldr	r0, [pc, #468]	; (8012000 <tcp_receive+0xf18>)
 8011e2a:	f7fd fa43 	bl	800f2b4 <tcp_seg_copy>
 8011e2e:	4602      	mov	r2, r0
 8011e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e32:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8011e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e36:	681b      	ldr	r3, [r3, #0]
 8011e38:	2b00      	cmp	r3, #0
 8011e3a:	f000 80b6 	beq.w	8011faa <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8011e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e40:	68db      	ldr	r3, [r3, #12]
 8011e42:	685b      	ldr	r3, [r3, #4]
 8011e44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011e46:	8912      	ldrh	r2, [r2, #8]
 8011e48:	441a      	add	r2, r3
 8011e4a:	4b6c      	ldr	r3, [pc, #432]	; (8011ffc <tcp_receive+0xf14>)
 8011e4c:	681b      	ldr	r3, [r3, #0]
 8011e4e:	1ad3      	subs	r3, r2, r3
 8011e50:	2b00      	cmp	r3, #0
 8011e52:	dd12      	ble.n	8011e7a <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8011e54:	4b69      	ldr	r3, [pc, #420]	; (8011ffc <tcp_receive+0xf14>)
 8011e56:	681b      	ldr	r3, [r3, #0]
 8011e58:	b29a      	uxth	r2, r3
 8011e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e5c:	68db      	ldr	r3, [r3, #12]
 8011e5e:	685b      	ldr	r3, [r3, #4]
 8011e60:	b29b      	uxth	r3, r3
 8011e62:	1ad3      	subs	r3, r2, r3
 8011e64:	b29a      	uxth	r2, r3
 8011e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e68:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8011e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e6c:	685a      	ldr	r2, [r3, #4]
 8011e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e70:	891b      	ldrh	r3, [r3, #8]
 8011e72:	4619      	mov	r1, r3
 8011e74:	4610      	mov	r0, r2
 8011e76:	f7fb fc17 	bl	800d6a8 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8011e7a:	4b62      	ldr	r3, [pc, #392]	; (8012004 <tcp_receive+0xf1c>)
 8011e7c:	881b      	ldrh	r3, [r3, #0]
 8011e7e:	461a      	mov	r2, r3
 8011e80:	4b5e      	ldr	r3, [pc, #376]	; (8011ffc <tcp_receive+0xf14>)
 8011e82:	681b      	ldr	r3, [r3, #0]
 8011e84:	441a      	add	r2, r3
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e8a:	6879      	ldr	r1, [r7, #4]
 8011e8c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011e8e:	440b      	add	r3, r1
 8011e90:	1ad3      	subs	r3, r2, r3
 8011e92:	2b00      	cmp	r3, #0
 8011e94:	f340 8089 	ble.w	8011faa <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8011e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e9a:	681b      	ldr	r3, [r3, #0]
 8011e9c:	68db      	ldr	r3, [r3, #12]
 8011e9e:	899b      	ldrh	r3, [r3, #12]
 8011ea0:	b29b      	uxth	r3, r3
 8011ea2:	4618      	mov	r0, r3
 8011ea4:	f7fa f8cc 	bl	800c040 <lwip_htons>
 8011ea8:	4603      	mov	r3, r0
 8011eaa:	b2db      	uxtb	r3, r3
 8011eac:	f003 0301 	and.w	r3, r3, #1
 8011eb0:	2b00      	cmp	r3, #0
 8011eb2:	d022      	beq.n	8011efa <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8011eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011eb6:	681b      	ldr	r3, [r3, #0]
 8011eb8:	68db      	ldr	r3, [r3, #12]
 8011eba:	899b      	ldrh	r3, [r3, #12]
 8011ebc:	b29b      	uxth	r3, r3
 8011ebe:	b21b      	sxth	r3, r3
 8011ec0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8011ec4:	b21c      	sxth	r4, r3
 8011ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ec8:	681b      	ldr	r3, [r3, #0]
 8011eca:	68db      	ldr	r3, [r3, #12]
 8011ecc:	899b      	ldrh	r3, [r3, #12]
 8011ece:	b29b      	uxth	r3, r3
 8011ed0:	4618      	mov	r0, r3
 8011ed2:	f7fa f8b5 	bl	800c040 <lwip_htons>
 8011ed6:	4603      	mov	r3, r0
 8011ed8:	b2db      	uxtb	r3, r3
 8011eda:	b29b      	uxth	r3, r3
 8011edc:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8011ee0:	b29b      	uxth	r3, r3
 8011ee2:	4618      	mov	r0, r3
 8011ee4:	f7fa f8ac 	bl	800c040 <lwip_htons>
 8011ee8:	4603      	mov	r3, r0
 8011eea:	b21b      	sxth	r3, r3
 8011eec:	4323      	orrs	r3, r4
 8011eee:	b21a      	sxth	r2, r3
 8011ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ef2:	681b      	ldr	r3, [r3, #0]
 8011ef4:	68db      	ldr	r3, [r3, #12]
 8011ef6:	b292      	uxth	r2, r2
 8011ef8:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8011efa:	687b      	ldr	r3, [r7, #4]
 8011efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011efe:	b29a      	uxth	r2, r3
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011f04:	4413      	add	r3, r2
 8011f06:	b299      	uxth	r1, r3
 8011f08:	4b3c      	ldr	r3, [pc, #240]	; (8011ffc <tcp_receive+0xf14>)
 8011f0a:	681b      	ldr	r3, [r3, #0]
 8011f0c:	b29a      	uxth	r2, r3
 8011f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f10:	681b      	ldr	r3, [r3, #0]
 8011f12:	1a8a      	subs	r2, r1, r2
 8011f14:	b292      	uxth	r2, r2
 8011f16:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8011f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f1a:	681b      	ldr	r3, [r3, #0]
 8011f1c:	685a      	ldr	r2, [r3, #4]
 8011f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f20:	681b      	ldr	r3, [r3, #0]
 8011f22:	891b      	ldrh	r3, [r3, #8]
 8011f24:	4619      	mov	r1, r3
 8011f26:	4610      	mov	r0, r2
 8011f28:	f7fb fbbe 	bl	800d6a8 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8011f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f2e:	681b      	ldr	r3, [r3, #0]
 8011f30:	891c      	ldrh	r4, [r3, #8]
 8011f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f34:	681b      	ldr	r3, [r3, #0]
 8011f36:	68db      	ldr	r3, [r3, #12]
 8011f38:	899b      	ldrh	r3, [r3, #12]
 8011f3a:	b29b      	uxth	r3, r3
 8011f3c:	4618      	mov	r0, r3
 8011f3e:	f7fa f87f 	bl	800c040 <lwip_htons>
 8011f42:	4603      	mov	r3, r0
 8011f44:	b2db      	uxtb	r3, r3
 8011f46:	f003 0303 	and.w	r3, r3, #3
 8011f4a:	2b00      	cmp	r3, #0
 8011f4c:	d001      	beq.n	8011f52 <tcp_receive+0xe6a>
 8011f4e:	2301      	movs	r3, #1
 8011f50:	e000      	b.n	8011f54 <tcp_receive+0xe6c>
 8011f52:	2300      	movs	r3, #0
 8011f54:	4423      	add	r3, r4
 8011f56:	b29a      	uxth	r2, r3
 8011f58:	4b2a      	ldr	r3, [pc, #168]	; (8012004 <tcp_receive+0xf1c>)
 8011f5a:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8011f5c:	4b29      	ldr	r3, [pc, #164]	; (8012004 <tcp_receive+0xf1c>)
 8011f5e:	881b      	ldrh	r3, [r3, #0]
 8011f60:	461a      	mov	r2, r3
 8011f62:	4b26      	ldr	r3, [pc, #152]	; (8011ffc <tcp_receive+0xf14>)
 8011f64:	681b      	ldr	r3, [r3, #0]
 8011f66:	441a      	add	r2, r3
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f6c:	6879      	ldr	r1, [r7, #4]
 8011f6e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011f70:	440b      	add	r3, r1
 8011f72:	429a      	cmp	r2, r3
 8011f74:	d019      	beq.n	8011faa <tcp_receive+0xec2>
 8011f76:	4b24      	ldr	r3, [pc, #144]	; (8012008 <tcp_receive+0xf20>)
 8011f78:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8011f7c:	4923      	ldr	r1, [pc, #140]	; (801200c <tcp_receive+0xf24>)
 8011f7e:	4824      	ldr	r0, [pc, #144]	; (8012010 <tcp_receive+0xf28>)
 8011f80:	f004 ff8a 	bl	8016e98 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8011f84:	e011      	b.n	8011faa <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8011f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f88:	681b      	ldr	r3, [r3, #0]
 8011f8a:	63bb      	str	r3, [r7, #56]	; 0x38
 8011f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f8e:	2b00      	cmp	r3, #0
 8011f90:	f47f aea4 	bne.w	8011cdc <tcp_receive+0xbf4>
 8011f94:	e00a      	b.n	8011fac <tcp_receive+0xec4>
                break;
 8011f96:	bf00      	nop
 8011f98:	e008      	b.n	8011fac <tcp_receive+0xec4>
                break;
 8011f9a:	bf00      	nop
 8011f9c:	e006      	b.n	8011fac <tcp_receive+0xec4>
                  break;
 8011f9e:	bf00      	nop
 8011fa0:	e004      	b.n	8011fac <tcp_receive+0xec4>
                  break;
 8011fa2:	bf00      	nop
 8011fa4:	e002      	b.n	8011fac <tcp_receive+0xec4>
                  break;
 8011fa6:	bf00      	nop
 8011fa8:	e000      	b.n	8011fac <tcp_receive+0xec4>
                break;
 8011faa:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8011fac:	6878      	ldr	r0, [r7, #4]
 8011fae:	f001 fe8b 	bl	8013cc8 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8011fb2:	e003      	b.n	8011fbc <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8011fb4:	6878      	ldr	r0, [r7, #4]
 8011fb6:	f001 fe87 	bl	8013cc8 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011fba:	e01a      	b.n	8011ff2 <tcp_receive+0xf0a>
 8011fbc:	e019      	b.n	8011ff2 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8011fbe:	4b0f      	ldr	r3, [pc, #60]	; (8011ffc <tcp_receive+0xf14>)
 8011fc0:	681a      	ldr	r2, [r3, #0]
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011fc6:	1ad3      	subs	r3, r2, r3
 8011fc8:	2b00      	cmp	r3, #0
 8011fca:	db0a      	blt.n	8011fe2 <tcp_receive+0xefa>
 8011fcc:	4b0b      	ldr	r3, [pc, #44]	; (8011ffc <tcp_receive+0xf14>)
 8011fce:	681a      	ldr	r2, [r3, #0]
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011fd4:	6879      	ldr	r1, [r7, #4]
 8011fd6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011fd8:	440b      	add	r3, r1
 8011fda:	1ad3      	subs	r3, r2, r3
 8011fdc:	3301      	adds	r3, #1
 8011fde:	2b00      	cmp	r3, #0
 8011fe0:	dd07      	ble.n	8011ff2 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	8b5b      	ldrh	r3, [r3, #26]
 8011fe6:	f043 0302 	orr.w	r3, r3, #2
 8011fea:	b29a      	uxth	r2, r3
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8011ff0:	e7ff      	b.n	8011ff2 <tcp_receive+0xf0a>
 8011ff2:	bf00      	nop
 8011ff4:	3750      	adds	r7, #80	; 0x50
 8011ff6:	46bd      	mov	sp, r7
 8011ff8:	bdb0      	pop	{r4, r5, r7, pc}
 8011ffa:	bf00      	nop
 8011ffc:	240040e0 	.word	0x240040e0
 8012000:	240040c0 	.word	0x240040c0
 8012004:	240040ea 	.word	0x240040ea
 8012008:	080192e0 	.word	0x080192e0
 801200c:	08019688 	.word	0x08019688
 8012010:	0801932c 	.word	0x0801932c

08012014 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8012014:	b480      	push	{r7}
 8012016:	b083      	sub	sp, #12
 8012018:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801201a:	4b15      	ldr	r3, [pc, #84]	; (8012070 <tcp_get_next_optbyte+0x5c>)
 801201c:	881b      	ldrh	r3, [r3, #0]
 801201e:	1c5a      	adds	r2, r3, #1
 8012020:	b291      	uxth	r1, r2
 8012022:	4a13      	ldr	r2, [pc, #76]	; (8012070 <tcp_get_next_optbyte+0x5c>)
 8012024:	8011      	strh	r1, [r2, #0]
 8012026:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8012028:	4b12      	ldr	r3, [pc, #72]	; (8012074 <tcp_get_next_optbyte+0x60>)
 801202a:	681b      	ldr	r3, [r3, #0]
 801202c:	2b00      	cmp	r3, #0
 801202e:	d004      	beq.n	801203a <tcp_get_next_optbyte+0x26>
 8012030:	4b11      	ldr	r3, [pc, #68]	; (8012078 <tcp_get_next_optbyte+0x64>)
 8012032:	881b      	ldrh	r3, [r3, #0]
 8012034:	88fa      	ldrh	r2, [r7, #6]
 8012036:	429a      	cmp	r2, r3
 8012038:	d208      	bcs.n	801204c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801203a:	4b10      	ldr	r3, [pc, #64]	; (801207c <tcp_get_next_optbyte+0x68>)
 801203c:	681b      	ldr	r3, [r3, #0]
 801203e:	3314      	adds	r3, #20
 8012040:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8012042:	88fb      	ldrh	r3, [r7, #6]
 8012044:	683a      	ldr	r2, [r7, #0]
 8012046:	4413      	add	r3, r2
 8012048:	781b      	ldrb	r3, [r3, #0]
 801204a:	e00b      	b.n	8012064 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801204c:	88fb      	ldrh	r3, [r7, #6]
 801204e:	b2da      	uxtb	r2, r3
 8012050:	4b09      	ldr	r3, [pc, #36]	; (8012078 <tcp_get_next_optbyte+0x64>)
 8012052:	881b      	ldrh	r3, [r3, #0]
 8012054:	b2db      	uxtb	r3, r3
 8012056:	1ad3      	subs	r3, r2, r3
 8012058:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801205a:	4b06      	ldr	r3, [pc, #24]	; (8012074 <tcp_get_next_optbyte+0x60>)
 801205c:	681a      	ldr	r2, [r3, #0]
 801205e:	797b      	ldrb	r3, [r7, #5]
 8012060:	4413      	add	r3, r2
 8012062:	781b      	ldrb	r3, [r3, #0]
  }
}
 8012064:	4618      	mov	r0, r3
 8012066:	370c      	adds	r7, #12
 8012068:	46bd      	mov	sp, r7
 801206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801206e:	4770      	bx	lr
 8012070:	240040dc 	.word	0x240040dc
 8012074:	240040d8 	.word	0x240040d8
 8012078:	240040d6 	.word	0x240040d6
 801207c:	240040d0 	.word	0x240040d0

08012080 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8012080:	b580      	push	{r7, lr}
 8012082:	b084      	sub	sp, #16
 8012084:	af00      	add	r7, sp, #0
 8012086:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	2b00      	cmp	r3, #0
 801208c:	d106      	bne.n	801209c <tcp_parseopt+0x1c>
 801208e:	4b32      	ldr	r3, [pc, #200]	; (8012158 <tcp_parseopt+0xd8>)
 8012090:	f240 727d 	movw	r2, #1917	; 0x77d
 8012094:	4931      	ldr	r1, [pc, #196]	; (801215c <tcp_parseopt+0xdc>)
 8012096:	4832      	ldr	r0, [pc, #200]	; (8012160 <tcp_parseopt+0xe0>)
 8012098:	f004 fefe 	bl	8016e98 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 801209c:	4b31      	ldr	r3, [pc, #196]	; (8012164 <tcp_parseopt+0xe4>)
 801209e:	881b      	ldrh	r3, [r3, #0]
 80120a0:	2b00      	cmp	r3, #0
 80120a2:	d055      	beq.n	8012150 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80120a4:	4b30      	ldr	r3, [pc, #192]	; (8012168 <tcp_parseopt+0xe8>)
 80120a6:	2200      	movs	r2, #0
 80120a8:	801a      	strh	r2, [r3, #0]
 80120aa:	e045      	b.n	8012138 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 80120ac:	f7ff ffb2 	bl	8012014 <tcp_get_next_optbyte>
 80120b0:	4603      	mov	r3, r0
 80120b2:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80120b4:	7bfb      	ldrb	r3, [r7, #15]
 80120b6:	2b02      	cmp	r3, #2
 80120b8:	d006      	beq.n	80120c8 <tcp_parseopt+0x48>
 80120ba:	2b02      	cmp	r3, #2
 80120bc:	dc2b      	bgt.n	8012116 <tcp_parseopt+0x96>
 80120be:	2b00      	cmp	r3, #0
 80120c0:	d041      	beq.n	8012146 <tcp_parseopt+0xc6>
 80120c2:	2b01      	cmp	r3, #1
 80120c4:	d127      	bne.n	8012116 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 80120c6:	e037      	b.n	8012138 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80120c8:	f7ff ffa4 	bl	8012014 <tcp_get_next_optbyte>
 80120cc:	4603      	mov	r3, r0
 80120ce:	2b04      	cmp	r3, #4
 80120d0:	d13b      	bne.n	801214a <tcp_parseopt+0xca>
 80120d2:	4b25      	ldr	r3, [pc, #148]	; (8012168 <tcp_parseopt+0xe8>)
 80120d4:	881b      	ldrh	r3, [r3, #0]
 80120d6:	3301      	adds	r3, #1
 80120d8:	4a22      	ldr	r2, [pc, #136]	; (8012164 <tcp_parseopt+0xe4>)
 80120da:	8812      	ldrh	r2, [r2, #0]
 80120dc:	4293      	cmp	r3, r2
 80120de:	da34      	bge.n	801214a <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80120e0:	f7ff ff98 	bl	8012014 <tcp_get_next_optbyte>
 80120e4:	4603      	mov	r3, r0
 80120e6:	b29b      	uxth	r3, r3
 80120e8:	021b      	lsls	r3, r3, #8
 80120ea:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80120ec:	f7ff ff92 	bl	8012014 <tcp_get_next_optbyte>
 80120f0:	4603      	mov	r3, r0
 80120f2:	b29a      	uxth	r2, r3
 80120f4:	89bb      	ldrh	r3, [r7, #12]
 80120f6:	4313      	orrs	r3, r2
 80120f8:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80120fa:	89bb      	ldrh	r3, [r7, #12]
 80120fc:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8012100:	d804      	bhi.n	801210c <tcp_parseopt+0x8c>
 8012102:	89bb      	ldrh	r3, [r7, #12]
 8012104:	2b00      	cmp	r3, #0
 8012106:	d001      	beq.n	801210c <tcp_parseopt+0x8c>
 8012108:	89ba      	ldrh	r2, [r7, #12]
 801210a:	e001      	b.n	8012110 <tcp_parseopt+0x90>
 801210c:	f44f 7206 	mov.w	r2, #536	; 0x218
 8012110:	687b      	ldr	r3, [r7, #4]
 8012112:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8012114:	e010      	b.n	8012138 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8012116:	f7ff ff7d 	bl	8012014 <tcp_get_next_optbyte>
 801211a:	4603      	mov	r3, r0
 801211c:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801211e:	7afb      	ldrb	r3, [r7, #11]
 8012120:	2b01      	cmp	r3, #1
 8012122:	d914      	bls.n	801214e <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8012124:	7afb      	ldrb	r3, [r7, #11]
 8012126:	b29a      	uxth	r2, r3
 8012128:	4b0f      	ldr	r3, [pc, #60]	; (8012168 <tcp_parseopt+0xe8>)
 801212a:	881b      	ldrh	r3, [r3, #0]
 801212c:	4413      	add	r3, r2
 801212e:	b29b      	uxth	r3, r3
 8012130:	3b02      	subs	r3, #2
 8012132:	b29a      	uxth	r2, r3
 8012134:	4b0c      	ldr	r3, [pc, #48]	; (8012168 <tcp_parseopt+0xe8>)
 8012136:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8012138:	4b0b      	ldr	r3, [pc, #44]	; (8012168 <tcp_parseopt+0xe8>)
 801213a:	881a      	ldrh	r2, [r3, #0]
 801213c:	4b09      	ldr	r3, [pc, #36]	; (8012164 <tcp_parseopt+0xe4>)
 801213e:	881b      	ldrh	r3, [r3, #0]
 8012140:	429a      	cmp	r2, r3
 8012142:	d3b3      	bcc.n	80120ac <tcp_parseopt+0x2c>
 8012144:	e004      	b.n	8012150 <tcp_parseopt+0xd0>
          return;
 8012146:	bf00      	nop
 8012148:	e002      	b.n	8012150 <tcp_parseopt+0xd0>
            return;
 801214a:	bf00      	nop
 801214c:	e000      	b.n	8012150 <tcp_parseopt+0xd0>
            return;
 801214e:	bf00      	nop
      }
    }
  }
}
 8012150:	3710      	adds	r7, #16
 8012152:	46bd      	mov	sp, r7
 8012154:	bd80      	pop	{r7, pc}
 8012156:	bf00      	nop
 8012158:	080192e0 	.word	0x080192e0
 801215c:	08019744 	.word	0x08019744
 8012160:	0801932c 	.word	0x0801932c
 8012164:	240040d4 	.word	0x240040d4
 8012168:	240040dc 	.word	0x240040dc

0801216c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 801216c:	b480      	push	{r7}
 801216e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8012170:	4b05      	ldr	r3, [pc, #20]	; (8012188 <tcp_trigger_input_pcb_close+0x1c>)
 8012172:	781b      	ldrb	r3, [r3, #0]
 8012174:	f043 0310 	orr.w	r3, r3, #16
 8012178:	b2da      	uxtb	r2, r3
 801217a:	4b03      	ldr	r3, [pc, #12]	; (8012188 <tcp_trigger_input_pcb_close+0x1c>)
 801217c:	701a      	strb	r2, [r3, #0]
}
 801217e:	bf00      	nop
 8012180:	46bd      	mov	sp, r7
 8012182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012186:	4770      	bx	lr
 8012188:	240040ed 	.word	0x240040ed

0801218c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 801218c:	b580      	push	{r7, lr}
 801218e:	b084      	sub	sp, #16
 8012190:	af00      	add	r7, sp, #0
 8012192:	60f8      	str	r0, [r7, #12]
 8012194:	60b9      	str	r1, [r7, #8]
 8012196:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8012198:	68fb      	ldr	r3, [r7, #12]
 801219a:	2b00      	cmp	r3, #0
 801219c:	d00a      	beq.n	80121b4 <tcp_route+0x28>
 801219e:	68fb      	ldr	r3, [r7, #12]
 80121a0:	7a1b      	ldrb	r3, [r3, #8]
 80121a2:	2b00      	cmp	r3, #0
 80121a4:	d006      	beq.n	80121b4 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 80121a6:	68fb      	ldr	r3, [r7, #12]
 80121a8:	7a1b      	ldrb	r3, [r3, #8]
 80121aa:	4618      	mov	r0, r3
 80121ac:	f7fb f874 	bl	800d298 <netif_get_by_index>
 80121b0:	4603      	mov	r3, r0
 80121b2:	e003      	b.n	80121bc <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80121b4:	6878      	ldr	r0, [r7, #4]
 80121b6:	f003 fb2b 	bl	8015810 <ip4_route>
 80121ba:	4603      	mov	r3, r0
  }
}
 80121bc:	4618      	mov	r0, r3
 80121be:	3710      	adds	r7, #16
 80121c0:	46bd      	mov	sp, r7
 80121c2:	bd80      	pop	{r7, pc}

080121c4 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80121c4:	b590      	push	{r4, r7, lr}
 80121c6:	b087      	sub	sp, #28
 80121c8:	af00      	add	r7, sp, #0
 80121ca:	60f8      	str	r0, [r7, #12]
 80121cc:	60b9      	str	r1, [r7, #8]
 80121ce:	603b      	str	r3, [r7, #0]
 80121d0:	4613      	mov	r3, r2
 80121d2:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80121d4:	68fb      	ldr	r3, [r7, #12]
 80121d6:	2b00      	cmp	r3, #0
 80121d8:	d105      	bne.n	80121e6 <tcp_create_segment+0x22>
 80121da:	4b44      	ldr	r3, [pc, #272]	; (80122ec <tcp_create_segment+0x128>)
 80121dc:	22a3      	movs	r2, #163	; 0xa3
 80121de:	4944      	ldr	r1, [pc, #272]	; (80122f0 <tcp_create_segment+0x12c>)
 80121e0:	4844      	ldr	r0, [pc, #272]	; (80122f4 <tcp_create_segment+0x130>)
 80121e2:	f004 fe59 	bl	8016e98 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80121e6:	68bb      	ldr	r3, [r7, #8]
 80121e8:	2b00      	cmp	r3, #0
 80121ea:	d105      	bne.n	80121f8 <tcp_create_segment+0x34>
 80121ec:	4b3f      	ldr	r3, [pc, #252]	; (80122ec <tcp_create_segment+0x128>)
 80121ee:	22a4      	movs	r2, #164	; 0xa4
 80121f0:	4941      	ldr	r1, [pc, #260]	; (80122f8 <tcp_create_segment+0x134>)
 80121f2:	4840      	ldr	r0, [pc, #256]	; (80122f4 <tcp_create_segment+0x130>)
 80121f4:	f004 fe50 	bl	8016e98 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80121f8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80121fc:	009b      	lsls	r3, r3, #2
 80121fe:	b2db      	uxtb	r3, r3
 8012200:	f003 0304 	and.w	r3, r3, #4
 8012204:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8012206:	2003      	movs	r0, #3
 8012208:	f7fa fcba 	bl	800cb80 <memp_malloc>
 801220c:	6138      	str	r0, [r7, #16]
 801220e:	693b      	ldr	r3, [r7, #16]
 8012210:	2b00      	cmp	r3, #0
 8012212:	d104      	bne.n	801221e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8012214:	68b8      	ldr	r0, [r7, #8]
 8012216:	f7fb fbcd 	bl	800d9b4 <pbuf_free>
    return NULL;
 801221a:	2300      	movs	r3, #0
 801221c:	e061      	b.n	80122e2 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 801221e:	693b      	ldr	r3, [r7, #16]
 8012220:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8012224:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8012226:	693b      	ldr	r3, [r7, #16]
 8012228:	2200      	movs	r2, #0
 801222a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 801222c:	693b      	ldr	r3, [r7, #16]
 801222e:	68ba      	ldr	r2, [r7, #8]
 8012230:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8012232:	68bb      	ldr	r3, [r7, #8]
 8012234:	891a      	ldrh	r2, [r3, #8]
 8012236:	7dfb      	ldrb	r3, [r7, #23]
 8012238:	b29b      	uxth	r3, r3
 801223a:	429a      	cmp	r2, r3
 801223c:	d205      	bcs.n	801224a <tcp_create_segment+0x86>
 801223e:	4b2b      	ldr	r3, [pc, #172]	; (80122ec <tcp_create_segment+0x128>)
 8012240:	22b0      	movs	r2, #176	; 0xb0
 8012242:	492e      	ldr	r1, [pc, #184]	; (80122fc <tcp_create_segment+0x138>)
 8012244:	482b      	ldr	r0, [pc, #172]	; (80122f4 <tcp_create_segment+0x130>)
 8012246:	f004 fe27 	bl	8016e98 <iprintf>
  seg->len = p->tot_len - optlen;
 801224a:	68bb      	ldr	r3, [r7, #8]
 801224c:	891a      	ldrh	r2, [r3, #8]
 801224e:	7dfb      	ldrb	r3, [r7, #23]
 8012250:	b29b      	uxth	r3, r3
 8012252:	1ad3      	subs	r3, r2, r3
 8012254:	b29a      	uxth	r2, r3
 8012256:	693b      	ldr	r3, [r7, #16]
 8012258:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801225a:	2114      	movs	r1, #20
 801225c:	68b8      	ldr	r0, [r7, #8]
 801225e:	f7fb fb13 	bl	800d888 <pbuf_add_header>
 8012262:	4603      	mov	r3, r0
 8012264:	2b00      	cmp	r3, #0
 8012266:	d004      	beq.n	8012272 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8012268:	6938      	ldr	r0, [r7, #16]
 801226a:	f7fc ffec 	bl	800f246 <tcp_seg_free>
    return NULL;
 801226e:	2300      	movs	r3, #0
 8012270:	e037      	b.n	80122e2 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8012272:	693b      	ldr	r3, [r7, #16]
 8012274:	685b      	ldr	r3, [r3, #4]
 8012276:	685a      	ldr	r2, [r3, #4]
 8012278:	693b      	ldr	r3, [r7, #16]
 801227a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801227c:	68fb      	ldr	r3, [r7, #12]
 801227e:	8ada      	ldrh	r2, [r3, #22]
 8012280:	693b      	ldr	r3, [r7, #16]
 8012282:	68dc      	ldr	r4, [r3, #12]
 8012284:	4610      	mov	r0, r2
 8012286:	f7f9 fedb 	bl	800c040 <lwip_htons>
 801228a:	4603      	mov	r3, r0
 801228c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801228e:	68fb      	ldr	r3, [r7, #12]
 8012290:	8b1a      	ldrh	r2, [r3, #24]
 8012292:	693b      	ldr	r3, [r7, #16]
 8012294:	68dc      	ldr	r4, [r3, #12]
 8012296:	4610      	mov	r0, r2
 8012298:	f7f9 fed2 	bl	800c040 <lwip_htons>
 801229c:	4603      	mov	r3, r0
 801229e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80122a0:	693b      	ldr	r3, [r7, #16]
 80122a2:	68dc      	ldr	r4, [r3, #12]
 80122a4:	6838      	ldr	r0, [r7, #0]
 80122a6:	f7f9 fee0 	bl	800c06a <lwip_htonl>
 80122aa:	4603      	mov	r3, r0
 80122ac:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80122ae:	7dfb      	ldrb	r3, [r7, #23]
 80122b0:	089b      	lsrs	r3, r3, #2
 80122b2:	b2db      	uxtb	r3, r3
 80122b4:	b29b      	uxth	r3, r3
 80122b6:	3305      	adds	r3, #5
 80122b8:	b29b      	uxth	r3, r3
 80122ba:	031b      	lsls	r3, r3, #12
 80122bc:	b29a      	uxth	r2, r3
 80122be:	79fb      	ldrb	r3, [r7, #7]
 80122c0:	b29b      	uxth	r3, r3
 80122c2:	4313      	orrs	r3, r2
 80122c4:	b29a      	uxth	r2, r3
 80122c6:	693b      	ldr	r3, [r7, #16]
 80122c8:	68dc      	ldr	r4, [r3, #12]
 80122ca:	4610      	mov	r0, r2
 80122cc:	f7f9 feb8 	bl	800c040 <lwip_htons>
 80122d0:	4603      	mov	r3, r0
 80122d2:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80122d4:	693b      	ldr	r3, [r7, #16]
 80122d6:	68db      	ldr	r3, [r3, #12]
 80122d8:	2200      	movs	r2, #0
 80122da:	749a      	strb	r2, [r3, #18]
 80122dc:	2200      	movs	r2, #0
 80122de:	74da      	strb	r2, [r3, #19]
  return seg;
 80122e0:	693b      	ldr	r3, [r7, #16]
}
 80122e2:	4618      	mov	r0, r3
 80122e4:	371c      	adds	r7, #28
 80122e6:	46bd      	mov	sp, r7
 80122e8:	bd90      	pop	{r4, r7, pc}
 80122ea:	bf00      	nop
 80122ec:	08019760 	.word	0x08019760
 80122f0:	08019794 	.word	0x08019794
 80122f4:	080197b4 	.word	0x080197b4
 80122f8:	080197dc 	.word	0x080197dc
 80122fc:	08019800 	.word	0x08019800

08012300 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8012300:	b580      	push	{r7, lr}
 8012302:	b086      	sub	sp, #24
 8012304:	af00      	add	r7, sp, #0
 8012306:	607b      	str	r3, [r7, #4]
 8012308:	4603      	mov	r3, r0
 801230a:	73fb      	strb	r3, [r7, #15]
 801230c:	460b      	mov	r3, r1
 801230e:	81bb      	strh	r3, [r7, #12]
 8012310:	4613      	mov	r3, r2
 8012312:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8012314:	89bb      	ldrh	r3, [r7, #12]
 8012316:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	2b00      	cmp	r3, #0
 801231c:	d105      	bne.n	801232a <tcp_pbuf_prealloc+0x2a>
 801231e:	4b30      	ldr	r3, [pc, #192]	; (80123e0 <tcp_pbuf_prealloc+0xe0>)
 8012320:	22e8      	movs	r2, #232	; 0xe8
 8012322:	4930      	ldr	r1, [pc, #192]	; (80123e4 <tcp_pbuf_prealloc+0xe4>)
 8012324:	4830      	ldr	r0, [pc, #192]	; (80123e8 <tcp_pbuf_prealloc+0xe8>)
 8012326:	f004 fdb7 	bl	8016e98 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801232a:	6a3b      	ldr	r3, [r7, #32]
 801232c:	2b00      	cmp	r3, #0
 801232e:	d105      	bne.n	801233c <tcp_pbuf_prealloc+0x3c>
 8012330:	4b2b      	ldr	r3, [pc, #172]	; (80123e0 <tcp_pbuf_prealloc+0xe0>)
 8012332:	22e9      	movs	r2, #233	; 0xe9
 8012334:	492d      	ldr	r1, [pc, #180]	; (80123ec <tcp_pbuf_prealloc+0xec>)
 8012336:	482c      	ldr	r0, [pc, #176]	; (80123e8 <tcp_pbuf_prealloc+0xe8>)
 8012338:	f004 fdae 	bl	8016e98 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 801233c:	89ba      	ldrh	r2, [r7, #12]
 801233e:	897b      	ldrh	r3, [r7, #10]
 8012340:	429a      	cmp	r2, r3
 8012342:	d221      	bcs.n	8012388 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8012344:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8012348:	f003 0302 	and.w	r3, r3, #2
 801234c:	2b00      	cmp	r3, #0
 801234e:	d111      	bne.n	8012374 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8012350:	6a3b      	ldr	r3, [r7, #32]
 8012352:	8b5b      	ldrh	r3, [r3, #26]
 8012354:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8012358:	2b00      	cmp	r3, #0
 801235a:	d115      	bne.n	8012388 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 801235c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012360:	2b00      	cmp	r3, #0
 8012362:	d007      	beq.n	8012374 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8012364:	6a3b      	ldr	r3, [r7, #32]
 8012366:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8012368:	2b00      	cmp	r3, #0
 801236a:	d103      	bne.n	8012374 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 801236c:	6a3b      	ldr	r3, [r7, #32]
 801236e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8012370:	2b00      	cmp	r3, #0
 8012372:	d009      	beq.n	8012388 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8012374:	89bb      	ldrh	r3, [r7, #12]
 8012376:	f203 231b 	addw	r3, r3, #539	; 0x21b
 801237a:	f023 0203 	bic.w	r2, r3, #3
 801237e:	897b      	ldrh	r3, [r7, #10]
 8012380:	4293      	cmp	r3, r2
 8012382:	bf28      	it	cs
 8012384:	4613      	movcs	r3, r2
 8012386:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8012388:	8af9      	ldrh	r1, [r7, #22]
 801238a:	7bfb      	ldrb	r3, [r7, #15]
 801238c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012390:	4618      	mov	r0, r3
 8012392:	f7fb f82b 	bl	800d3ec <pbuf_alloc>
 8012396:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012398:	693b      	ldr	r3, [r7, #16]
 801239a:	2b00      	cmp	r3, #0
 801239c:	d101      	bne.n	80123a2 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 801239e:	2300      	movs	r3, #0
 80123a0:	e019      	b.n	80123d6 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 80123a2:	693b      	ldr	r3, [r7, #16]
 80123a4:	681b      	ldr	r3, [r3, #0]
 80123a6:	2b00      	cmp	r3, #0
 80123a8:	d006      	beq.n	80123b8 <tcp_pbuf_prealloc+0xb8>
 80123aa:	4b0d      	ldr	r3, [pc, #52]	; (80123e0 <tcp_pbuf_prealloc+0xe0>)
 80123ac:	f240 120b 	movw	r2, #267	; 0x10b
 80123b0:	490f      	ldr	r1, [pc, #60]	; (80123f0 <tcp_pbuf_prealloc+0xf0>)
 80123b2:	480d      	ldr	r0, [pc, #52]	; (80123e8 <tcp_pbuf_prealloc+0xe8>)
 80123b4:	f004 fd70 	bl	8016e98 <iprintf>
  *oversize = p->len - length;
 80123b8:	693b      	ldr	r3, [r7, #16]
 80123ba:	895a      	ldrh	r2, [r3, #10]
 80123bc:	89bb      	ldrh	r3, [r7, #12]
 80123be:	1ad3      	subs	r3, r2, r3
 80123c0:	b29a      	uxth	r2, r3
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 80123c6:	693b      	ldr	r3, [r7, #16]
 80123c8:	89ba      	ldrh	r2, [r7, #12]
 80123ca:	811a      	strh	r2, [r3, #8]
 80123cc:	693b      	ldr	r3, [r7, #16]
 80123ce:	891a      	ldrh	r2, [r3, #8]
 80123d0:	693b      	ldr	r3, [r7, #16]
 80123d2:	815a      	strh	r2, [r3, #10]
  return p;
 80123d4:	693b      	ldr	r3, [r7, #16]
}
 80123d6:	4618      	mov	r0, r3
 80123d8:	3718      	adds	r7, #24
 80123da:	46bd      	mov	sp, r7
 80123dc:	bd80      	pop	{r7, pc}
 80123de:	bf00      	nop
 80123e0:	08019760 	.word	0x08019760
 80123e4:	08019818 	.word	0x08019818
 80123e8:	080197b4 	.word	0x080197b4
 80123ec:	0801983c 	.word	0x0801983c
 80123f0:	0801985c 	.word	0x0801985c

080123f4 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 80123f4:	b580      	push	{r7, lr}
 80123f6:	b082      	sub	sp, #8
 80123f8:	af00      	add	r7, sp, #0
 80123fa:	6078      	str	r0, [r7, #4]
 80123fc:	460b      	mov	r3, r1
 80123fe:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	2b00      	cmp	r3, #0
 8012404:	d106      	bne.n	8012414 <tcp_write_checks+0x20>
 8012406:	4b33      	ldr	r3, [pc, #204]	; (80124d4 <tcp_write_checks+0xe0>)
 8012408:	f240 1233 	movw	r2, #307	; 0x133
 801240c:	4932      	ldr	r1, [pc, #200]	; (80124d8 <tcp_write_checks+0xe4>)
 801240e:	4833      	ldr	r0, [pc, #204]	; (80124dc <tcp_write_checks+0xe8>)
 8012410:	f004 fd42 	bl	8016e98 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8012414:	687b      	ldr	r3, [r7, #4]
 8012416:	7d1b      	ldrb	r3, [r3, #20]
 8012418:	2b04      	cmp	r3, #4
 801241a:	d00e      	beq.n	801243a <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8012420:	2b07      	cmp	r3, #7
 8012422:	d00a      	beq.n	801243a <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8012428:	2b02      	cmp	r3, #2
 801242a:	d006      	beq.n	801243a <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8012430:	2b03      	cmp	r3, #3
 8012432:	d002      	beq.n	801243a <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8012434:	f06f 030a 	mvn.w	r3, #10
 8012438:	e048      	b.n	80124cc <tcp_write_checks+0xd8>
  } else if (len == 0) {
 801243a:	887b      	ldrh	r3, [r7, #2]
 801243c:	2b00      	cmp	r3, #0
 801243e:	d101      	bne.n	8012444 <tcp_write_checks+0x50>
    return ERR_OK;
 8012440:	2300      	movs	r3, #0
 8012442:	e043      	b.n	80124cc <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8012444:	687b      	ldr	r3, [r7, #4]
 8012446:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801244a:	887a      	ldrh	r2, [r7, #2]
 801244c:	429a      	cmp	r2, r3
 801244e:	d909      	bls.n	8012464 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012450:	687b      	ldr	r3, [r7, #4]
 8012452:	8b5b      	ldrh	r3, [r3, #26]
 8012454:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012458:	b29a      	uxth	r2, r3
 801245a:	687b      	ldr	r3, [r7, #4]
 801245c:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801245e:	f04f 33ff 	mov.w	r3, #4294967295
 8012462:	e033      	b.n	80124cc <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801246a:	2b08      	cmp	r3, #8
 801246c:	d909      	bls.n	8012482 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801246e:	687b      	ldr	r3, [r7, #4]
 8012470:	8b5b      	ldrh	r3, [r3, #26]
 8012472:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012476:	b29a      	uxth	r2, r3
 8012478:	687b      	ldr	r3, [r7, #4]
 801247a:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801247c:	f04f 33ff 	mov.w	r3, #4294967295
 8012480:	e024      	b.n	80124cc <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8012482:	687b      	ldr	r3, [r7, #4]
 8012484:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012488:	2b00      	cmp	r3, #0
 801248a:	d00f      	beq.n	80124ac <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012490:	2b00      	cmp	r3, #0
 8012492:	d11a      	bne.n	80124ca <tcp_write_checks+0xd6>
 8012494:	687b      	ldr	r3, [r7, #4]
 8012496:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012498:	2b00      	cmp	r3, #0
 801249a:	d116      	bne.n	80124ca <tcp_write_checks+0xd6>
 801249c:	4b0d      	ldr	r3, [pc, #52]	; (80124d4 <tcp_write_checks+0xe0>)
 801249e:	f240 1255 	movw	r2, #341	; 0x155
 80124a2:	490f      	ldr	r1, [pc, #60]	; (80124e0 <tcp_write_checks+0xec>)
 80124a4:	480d      	ldr	r0, [pc, #52]	; (80124dc <tcp_write_checks+0xe8>)
 80124a6:	f004 fcf7 	bl	8016e98 <iprintf>
 80124aa:	e00e      	b.n	80124ca <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 80124ac:	687b      	ldr	r3, [r7, #4]
 80124ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80124b0:	2b00      	cmp	r3, #0
 80124b2:	d103      	bne.n	80124bc <tcp_write_checks+0xc8>
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80124b8:	2b00      	cmp	r3, #0
 80124ba:	d006      	beq.n	80124ca <tcp_write_checks+0xd6>
 80124bc:	4b05      	ldr	r3, [pc, #20]	; (80124d4 <tcp_write_checks+0xe0>)
 80124be:	f44f 72ac 	mov.w	r2, #344	; 0x158
 80124c2:	4908      	ldr	r1, [pc, #32]	; (80124e4 <tcp_write_checks+0xf0>)
 80124c4:	4805      	ldr	r0, [pc, #20]	; (80124dc <tcp_write_checks+0xe8>)
 80124c6:	f004 fce7 	bl	8016e98 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 80124ca:	2300      	movs	r3, #0
}
 80124cc:	4618      	mov	r0, r3
 80124ce:	3708      	adds	r7, #8
 80124d0:	46bd      	mov	sp, r7
 80124d2:	bd80      	pop	{r7, pc}
 80124d4:	08019760 	.word	0x08019760
 80124d8:	08019870 	.word	0x08019870
 80124dc:	080197b4 	.word	0x080197b4
 80124e0:	08019890 	.word	0x08019890
 80124e4:	080198cc 	.word	0x080198cc

080124e8 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 80124e8:	b590      	push	{r4, r7, lr}
 80124ea:	b09b      	sub	sp, #108	; 0x6c
 80124ec:	af04      	add	r7, sp, #16
 80124ee:	60f8      	str	r0, [r7, #12]
 80124f0:	60b9      	str	r1, [r7, #8]
 80124f2:	4611      	mov	r1, r2
 80124f4:	461a      	mov	r2, r3
 80124f6:	460b      	mov	r3, r1
 80124f8:	80fb      	strh	r3, [r7, #6]
 80124fa:	4613      	mov	r3, r2
 80124fc:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 80124fe:	2300      	movs	r3, #0
 8012500:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8012502:	2300      	movs	r3, #0
 8012504:	653b      	str	r3, [r7, #80]	; 0x50
 8012506:	2300      	movs	r3, #0
 8012508:	64fb      	str	r3, [r7, #76]	; 0x4c
 801250a:	2300      	movs	r3, #0
 801250c:	64bb      	str	r3, [r7, #72]	; 0x48
 801250e:	2300      	movs	r3, #0
 8012510:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8012512:	2300      	movs	r3, #0
 8012514:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8012518:	2300      	movs	r3, #0
 801251a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801251e:	2300      	movs	r3, #0
 8012520:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8012522:	2300      	movs	r3, #0
 8012524:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8012526:	2300      	movs	r3, #0
 8012528:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801252a:	68fb      	ldr	r3, [r7, #12]
 801252c:	2b00      	cmp	r3, #0
 801252e:	d109      	bne.n	8012544 <tcp_write+0x5c>
 8012530:	4ba4      	ldr	r3, [pc, #656]	; (80127c4 <tcp_write+0x2dc>)
 8012532:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8012536:	49a4      	ldr	r1, [pc, #656]	; (80127c8 <tcp_write+0x2e0>)
 8012538:	48a4      	ldr	r0, [pc, #656]	; (80127cc <tcp_write+0x2e4>)
 801253a:	f004 fcad 	bl	8016e98 <iprintf>
 801253e:	f06f 030f 	mvn.w	r3, #15
 8012542:	e32a      	b.n	8012b9a <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8012544:	68fb      	ldr	r3, [r7, #12]
 8012546:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801254a:	085b      	lsrs	r3, r3, #1
 801254c:	b29a      	uxth	r2, r3
 801254e:	68fb      	ldr	r3, [r7, #12]
 8012550:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012552:	4293      	cmp	r3, r2
 8012554:	bf28      	it	cs
 8012556:	4613      	movcs	r3, r2
 8012558:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 801255a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801255c:	2b00      	cmp	r3, #0
 801255e:	d102      	bne.n	8012566 <tcp_write+0x7e>
 8012560:	68fb      	ldr	r3, [r7, #12]
 8012562:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012564:	e000      	b.n	8012568 <tcp_write+0x80>
 8012566:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012568:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801256a:	68bb      	ldr	r3, [r7, #8]
 801256c:	2b00      	cmp	r3, #0
 801256e:	d109      	bne.n	8012584 <tcp_write+0x9c>
 8012570:	4b94      	ldr	r3, [pc, #592]	; (80127c4 <tcp_write+0x2dc>)
 8012572:	f240 12ad 	movw	r2, #429	; 0x1ad
 8012576:	4996      	ldr	r1, [pc, #600]	; (80127d0 <tcp_write+0x2e8>)
 8012578:	4894      	ldr	r0, [pc, #592]	; (80127cc <tcp_write+0x2e4>)
 801257a:	f004 fc8d 	bl	8016e98 <iprintf>
 801257e:	f06f 030f 	mvn.w	r3, #15
 8012582:	e30a      	b.n	8012b9a <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8012584:	88fb      	ldrh	r3, [r7, #6]
 8012586:	4619      	mov	r1, r3
 8012588:	68f8      	ldr	r0, [r7, #12]
 801258a:	f7ff ff33 	bl	80123f4 <tcp_write_checks>
 801258e:	4603      	mov	r3, r0
 8012590:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8012594:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8012598:	2b00      	cmp	r3, #0
 801259a:	d002      	beq.n	80125a2 <tcp_write+0xba>
    return err;
 801259c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80125a0:	e2fb      	b.n	8012b9a <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 80125a2:	68fb      	ldr	r3, [r7, #12]
 80125a4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80125a8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80125ac:	2300      	movs	r3, #0
 80125ae:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 80125b2:	68fb      	ldr	r3, [r7, #12]
 80125b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80125b6:	2b00      	cmp	r3, #0
 80125b8:	f000 80f6 	beq.w	80127a8 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80125bc:	68fb      	ldr	r3, [r7, #12]
 80125be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80125c0:	653b      	str	r3, [r7, #80]	; 0x50
 80125c2:	e002      	b.n	80125ca <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 80125c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80125c6:	681b      	ldr	r3, [r3, #0]
 80125c8:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80125ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80125cc:	681b      	ldr	r3, [r3, #0]
 80125ce:	2b00      	cmp	r3, #0
 80125d0:	d1f8      	bne.n	80125c4 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 80125d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80125d4:	7a9b      	ldrb	r3, [r3, #10]
 80125d6:	009b      	lsls	r3, r3, #2
 80125d8:	b29b      	uxth	r3, r3
 80125da:	f003 0304 	and.w	r3, r3, #4
 80125de:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 80125e0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80125e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80125e4:	891b      	ldrh	r3, [r3, #8]
 80125e6:	4619      	mov	r1, r3
 80125e8:	8c3b      	ldrh	r3, [r7, #32]
 80125ea:	440b      	add	r3, r1
 80125ec:	429a      	cmp	r2, r3
 80125ee:	da06      	bge.n	80125fe <tcp_write+0x116>
 80125f0:	4b74      	ldr	r3, [pc, #464]	; (80127c4 <tcp_write+0x2dc>)
 80125f2:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80125f6:	4977      	ldr	r1, [pc, #476]	; (80127d4 <tcp_write+0x2ec>)
 80125f8:	4874      	ldr	r0, [pc, #464]	; (80127cc <tcp_write+0x2e4>)
 80125fa:	f004 fc4d 	bl	8016e98 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 80125fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012600:	891a      	ldrh	r2, [r3, #8]
 8012602:	8c3b      	ldrh	r3, [r7, #32]
 8012604:	4413      	add	r3, r2
 8012606:	b29b      	uxth	r3, r3
 8012608:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801260a:	1ad3      	subs	r3, r2, r3
 801260c:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801260e:	68fb      	ldr	r3, [r7, #12]
 8012610:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012614:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8012616:	8a7b      	ldrh	r3, [r7, #18]
 8012618:	2b00      	cmp	r3, #0
 801261a:	d026      	beq.n	801266a <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801261c:	8a7b      	ldrh	r3, [r7, #18]
 801261e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012620:	429a      	cmp	r2, r3
 8012622:	d206      	bcs.n	8012632 <tcp_write+0x14a>
 8012624:	4b67      	ldr	r3, [pc, #412]	; (80127c4 <tcp_write+0x2dc>)
 8012626:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 801262a:	496b      	ldr	r1, [pc, #428]	; (80127d8 <tcp_write+0x2f0>)
 801262c:	4867      	ldr	r0, [pc, #412]	; (80127cc <tcp_write+0x2e4>)
 801262e:	f004 fc33 	bl	8016e98 <iprintf>
      seg = last_unsent;
 8012632:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012634:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8012636:	8a7b      	ldrh	r3, [r7, #18]
 8012638:	88fa      	ldrh	r2, [r7, #6]
 801263a:	4293      	cmp	r3, r2
 801263c:	bf28      	it	cs
 801263e:	4613      	movcs	r3, r2
 8012640:	b29b      	uxth	r3, r3
 8012642:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012644:	4293      	cmp	r3, r2
 8012646:	bf28      	it	cs
 8012648:	4613      	movcs	r3, r2
 801264a:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 801264c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012650:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012652:	4413      	add	r3, r2
 8012654:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8012658:	8a7a      	ldrh	r2, [r7, #18]
 801265a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801265c:	1ad3      	subs	r3, r2, r3
 801265e:	b29b      	uxth	r3, r3
 8012660:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8012662:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012664:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012666:	1ad3      	subs	r3, r2, r3
 8012668:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801266a:	8a7b      	ldrh	r3, [r7, #18]
 801266c:	2b00      	cmp	r3, #0
 801266e:	d00b      	beq.n	8012688 <tcp_write+0x1a0>
 8012670:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012674:	88fb      	ldrh	r3, [r7, #6]
 8012676:	429a      	cmp	r2, r3
 8012678:	d006      	beq.n	8012688 <tcp_write+0x1a0>
 801267a:	4b52      	ldr	r3, [pc, #328]	; (80127c4 <tcp_write+0x2dc>)
 801267c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012680:	4956      	ldr	r1, [pc, #344]	; (80127dc <tcp_write+0x2f4>)
 8012682:	4852      	ldr	r0, [pc, #328]	; (80127cc <tcp_write+0x2e4>)
 8012684:	f004 fc08 	bl	8016e98 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8012688:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801268c:	88fb      	ldrh	r3, [r7, #6]
 801268e:	429a      	cmp	r2, r3
 8012690:	f080 8167 	bcs.w	8012962 <tcp_write+0x47a>
 8012694:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012696:	2b00      	cmp	r3, #0
 8012698:	f000 8163 	beq.w	8012962 <tcp_write+0x47a>
 801269c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801269e:	891b      	ldrh	r3, [r3, #8]
 80126a0:	2b00      	cmp	r3, #0
 80126a2:	f000 815e 	beq.w	8012962 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 80126a6:	88fa      	ldrh	r2, [r7, #6]
 80126a8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80126ac:	1ad2      	subs	r2, r2, r3
 80126ae:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80126b0:	4293      	cmp	r3, r2
 80126b2:	bfa8      	it	ge
 80126b4:	4613      	movge	r3, r2
 80126b6:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 80126b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80126ba:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 80126bc:	797b      	ldrb	r3, [r7, #5]
 80126be:	f003 0301 	and.w	r3, r3, #1
 80126c2:	2b00      	cmp	r3, #0
 80126c4:	d027      	beq.n	8012716 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 80126c6:	f107 0012 	add.w	r0, r7, #18
 80126ca:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80126cc:	8bf9      	ldrh	r1, [r7, #30]
 80126ce:	2301      	movs	r3, #1
 80126d0:	9302      	str	r3, [sp, #8]
 80126d2:	797b      	ldrb	r3, [r7, #5]
 80126d4:	9301      	str	r3, [sp, #4]
 80126d6:	68fb      	ldr	r3, [r7, #12]
 80126d8:	9300      	str	r3, [sp, #0]
 80126da:	4603      	mov	r3, r0
 80126dc:	2000      	movs	r0, #0
 80126de:	f7ff fe0f 	bl	8012300 <tcp_pbuf_prealloc>
 80126e2:	6578      	str	r0, [r7, #84]	; 0x54
 80126e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80126e6:	2b00      	cmp	r3, #0
 80126e8:	f000 8225 	beq.w	8012b36 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 80126ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80126ee:	6858      	ldr	r0, [r3, #4]
 80126f0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80126f4:	68ba      	ldr	r2, [r7, #8]
 80126f6:	4413      	add	r3, r2
 80126f8:	8bfa      	ldrh	r2, [r7, #30]
 80126fa:	4619      	mov	r1, r3
 80126fc:	f004 fbb6 	bl	8016e6c <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8012700:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8012702:	f7fb f9e5 	bl	800dad0 <pbuf_clen>
 8012706:	4603      	mov	r3, r0
 8012708:	461a      	mov	r2, r3
 801270a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801270e:	4413      	add	r3, r2
 8012710:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8012714:	e041      	b.n	801279a <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8012716:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012718:	685b      	ldr	r3, [r3, #4]
 801271a:	637b      	str	r3, [r7, #52]	; 0x34
 801271c:	e002      	b.n	8012724 <tcp_write+0x23c>
 801271e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012720:	681b      	ldr	r3, [r3, #0]
 8012722:	637b      	str	r3, [r7, #52]	; 0x34
 8012724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012726:	681b      	ldr	r3, [r3, #0]
 8012728:	2b00      	cmp	r3, #0
 801272a:	d1f8      	bne.n	801271e <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801272c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801272e:	7b1b      	ldrb	r3, [r3, #12]
 8012730:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8012734:	2b00      	cmp	r3, #0
 8012736:	d115      	bne.n	8012764 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8012738:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801273a:	685b      	ldr	r3, [r3, #4]
 801273c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801273e:	8952      	ldrh	r2, [r2, #10]
 8012740:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8012742:	68ba      	ldr	r2, [r7, #8]
 8012744:	429a      	cmp	r2, r3
 8012746:	d10d      	bne.n	8012764 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8012748:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801274c:	2b00      	cmp	r3, #0
 801274e:	d006      	beq.n	801275e <tcp_write+0x276>
 8012750:	4b1c      	ldr	r3, [pc, #112]	; (80127c4 <tcp_write+0x2dc>)
 8012752:	f240 2231 	movw	r2, #561	; 0x231
 8012756:	4922      	ldr	r1, [pc, #136]	; (80127e0 <tcp_write+0x2f8>)
 8012758:	481c      	ldr	r0, [pc, #112]	; (80127cc <tcp_write+0x2e4>)
 801275a:	f004 fb9d 	bl	8016e98 <iprintf>
          extendlen = seglen;
 801275e:	8bfb      	ldrh	r3, [r7, #30]
 8012760:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8012762:	e01a      	b.n	801279a <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8012764:	8bfb      	ldrh	r3, [r7, #30]
 8012766:	2201      	movs	r2, #1
 8012768:	4619      	mov	r1, r3
 801276a:	2000      	movs	r0, #0
 801276c:	f7fa fe3e 	bl	800d3ec <pbuf_alloc>
 8012770:	6578      	str	r0, [r7, #84]	; 0x54
 8012772:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012774:	2b00      	cmp	r3, #0
 8012776:	f000 81e0 	beq.w	8012b3a <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801277a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801277e:	68ba      	ldr	r2, [r7, #8]
 8012780:	441a      	add	r2, r3
 8012782:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012784:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8012786:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8012788:	f7fb f9a2 	bl	800dad0 <pbuf_clen>
 801278c:	4603      	mov	r3, r0
 801278e:	461a      	mov	r2, r3
 8012790:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012794:	4413      	add	r3, r2
 8012796:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801279a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801279e:	8bfb      	ldrh	r3, [r7, #30]
 80127a0:	4413      	add	r3, r2
 80127a2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80127a6:	e0dc      	b.n	8012962 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 80127a8:	68fb      	ldr	r3, [r7, #12]
 80127aa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80127ae:	2b00      	cmp	r3, #0
 80127b0:	f000 80d7 	beq.w	8012962 <tcp_write+0x47a>
 80127b4:	4b03      	ldr	r3, [pc, #12]	; (80127c4 <tcp_write+0x2dc>)
 80127b6:	f240 224a 	movw	r2, #586	; 0x24a
 80127ba:	490a      	ldr	r1, [pc, #40]	; (80127e4 <tcp_write+0x2fc>)
 80127bc:	4803      	ldr	r0, [pc, #12]	; (80127cc <tcp_write+0x2e4>)
 80127be:	f004 fb6b 	bl	8016e98 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 80127c2:	e0ce      	b.n	8012962 <tcp_write+0x47a>
 80127c4:	08019760 	.word	0x08019760
 80127c8:	08019900 	.word	0x08019900
 80127cc:	080197b4 	.word	0x080197b4
 80127d0:	08019918 	.word	0x08019918
 80127d4:	0801994c 	.word	0x0801994c
 80127d8:	08019964 	.word	0x08019964
 80127dc:	08019984 	.word	0x08019984
 80127e0:	080199a4 	.word	0x080199a4
 80127e4:	080199d0 	.word	0x080199d0
    struct pbuf *p;
    u16_t left = len - pos;
 80127e8:	88fa      	ldrh	r2, [r7, #6]
 80127ea:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80127ee:	1ad3      	subs	r3, r2, r3
 80127f0:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 80127f2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80127f6:	b29b      	uxth	r3, r3
 80127f8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80127fa:	1ad3      	subs	r3, r2, r3
 80127fc:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 80127fe:	8b7a      	ldrh	r2, [r7, #26]
 8012800:	8bbb      	ldrh	r3, [r7, #28]
 8012802:	4293      	cmp	r3, r2
 8012804:	bf28      	it	cs
 8012806:	4613      	movcs	r3, r2
 8012808:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801280a:	797b      	ldrb	r3, [r7, #5]
 801280c:	f003 0301 	and.w	r3, r3, #1
 8012810:	2b00      	cmp	r3, #0
 8012812:	d036      	beq.n	8012882 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8012814:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012818:	b29a      	uxth	r2, r3
 801281a:	8b3b      	ldrh	r3, [r7, #24]
 801281c:	4413      	add	r3, r2
 801281e:	b299      	uxth	r1, r3
 8012820:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012822:	2b00      	cmp	r3, #0
 8012824:	bf0c      	ite	eq
 8012826:	2301      	moveq	r3, #1
 8012828:	2300      	movne	r3, #0
 801282a:	b2db      	uxtb	r3, r3
 801282c:	f107 0012 	add.w	r0, r7, #18
 8012830:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012832:	9302      	str	r3, [sp, #8]
 8012834:	797b      	ldrb	r3, [r7, #5]
 8012836:	9301      	str	r3, [sp, #4]
 8012838:	68fb      	ldr	r3, [r7, #12]
 801283a:	9300      	str	r3, [sp, #0]
 801283c:	4603      	mov	r3, r0
 801283e:	2036      	movs	r0, #54	; 0x36
 8012840:	f7ff fd5e 	bl	8012300 <tcp_pbuf_prealloc>
 8012844:	6338      	str	r0, [r7, #48]	; 0x30
 8012846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012848:	2b00      	cmp	r3, #0
 801284a:	f000 8178 	beq.w	8012b3e <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801284e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012850:	895b      	ldrh	r3, [r3, #10]
 8012852:	8b3a      	ldrh	r2, [r7, #24]
 8012854:	429a      	cmp	r2, r3
 8012856:	d906      	bls.n	8012866 <tcp_write+0x37e>
 8012858:	4b8c      	ldr	r3, [pc, #560]	; (8012a8c <tcp_write+0x5a4>)
 801285a:	f240 2266 	movw	r2, #614	; 0x266
 801285e:	498c      	ldr	r1, [pc, #560]	; (8012a90 <tcp_write+0x5a8>)
 8012860:	488c      	ldr	r0, [pc, #560]	; (8012a94 <tcp_write+0x5ac>)
 8012862:	f004 fb19 	bl	8016e98 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8012866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012868:	685a      	ldr	r2, [r3, #4]
 801286a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801286e:	18d0      	adds	r0, r2, r3
 8012870:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012874:	68ba      	ldr	r2, [r7, #8]
 8012876:	4413      	add	r3, r2
 8012878:	8b3a      	ldrh	r2, [r7, #24]
 801287a:	4619      	mov	r1, r3
 801287c:	f004 faf6 	bl	8016e6c <memcpy>
 8012880:	e02f      	b.n	80128e2 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8012882:	8a7b      	ldrh	r3, [r7, #18]
 8012884:	2b00      	cmp	r3, #0
 8012886:	d006      	beq.n	8012896 <tcp_write+0x3ae>
 8012888:	4b80      	ldr	r3, [pc, #512]	; (8012a8c <tcp_write+0x5a4>)
 801288a:	f240 2271 	movw	r2, #625	; 0x271
 801288e:	4982      	ldr	r1, [pc, #520]	; (8012a98 <tcp_write+0x5b0>)
 8012890:	4880      	ldr	r0, [pc, #512]	; (8012a94 <tcp_write+0x5ac>)
 8012892:	f004 fb01 	bl	8016e98 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8012896:	8b3b      	ldrh	r3, [r7, #24]
 8012898:	2201      	movs	r2, #1
 801289a:	4619      	mov	r1, r3
 801289c:	2036      	movs	r0, #54	; 0x36
 801289e:	f7fa fda5 	bl	800d3ec <pbuf_alloc>
 80128a2:	6178      	str	r0, [r7, #20]
 80128a4:	697b      	ldr	r3, [r7, #20]
 80128a6:	2b00      	cmp	r3, #0
 80128a8:	f000 814b 	beq.w	8012b42 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 80128ac:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80128b0:	68ba      	ldr	r2, [r7, #8]
 80128b2:	441a      	add	r2, r3
 80128b4:	697b      	ldr	r3, [r7, #20]
 80128b6:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80128b8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80128bc:	b29b      	uxth	r3, r3
 80128be:	f44f 7220 	mov.w	r2, #640	; 0x280
 80128c2:	4619      	mov	r1, r3
 80128c4:	2036      	movs	r0, #54	; 0x36
 80128c6:	f7fa fd91 	bl	800d3ec <pbuf_alloc>
 80128ca:	6338      	str	r0, [r7, #48]	; 0x30
 80128cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128ce:	2b00      	cmp	r3, #0
 80128d0:	d103      	bne.n	80128da <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 80128d2:	6978      	ldr	r0, [r7, #20]
 80128d4:	f7fb f86e 	bl	800d9b4 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 80128d8:	e136      	b.n	8012b48 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 80128da:	6979      	ldr	r1, [r7, #20]
 80128dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80128de:	f7fb f937 	bl	800db50 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 80128e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80128e4:	f7fb f8f4 	bl	800dad0 <pbuf_clen>
 80128e8:	4603      	mov	r3, r0
 80128ea:	461a      	mov	r2, r3
 80128ec:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80128f0:	4413      	add	r3, r2
 80128f2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 80128f6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80128fa:	2b09      	cmp	r3, #9
 80128fc:	d903      	bls.n	8012906 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 80128fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012900:	f7fb f858 	bl	800d9b4 <pbuf_free>
      goto memerr;
 8012904:	e120      	b.n	8012b48 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8012906:	68fb      	ldr	r3, [r7, #12]
 8012908:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801290a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801290e:	441a      	add	r2, r3
 8012910:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012914:	9300      	str	r3, [sp, #0]
 8012916:	4613      	mov	r3, r2
 8012918:	2200      	movs	r2, #0
 801291a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801291c:	68f8      	ldr	r0, [r7, #12]
 801291e:	f7ff fc51 	bl	80121c4 <tcp_create_segment>
 8012922:	64f8      	str	r0, [r7, #76]	; 0x4c
 8012924:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012926:	2b00      	cmp	r3, #0
 8012928:	f000 810d 	beq.w	8012b46 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 801292c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801292e:	2b00      	cmp	r3, #0
 8012930:	d102      	bne.n	8012938 <tcp_write+0x450>
      queue = seg;
 8012932:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012934:	647b      	str	r3, [r7, #68]	; 0x44
 8012936:	e00c      	b.n	8012952 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8012938:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801293a:	2b00      	cmp	r3, #0
 801293c:	d106      	bne.n	801294c <tcp_write+0x464>
 801293e:	4b53      	ldr	r3, [pc, #332]	; (8012a8c <tcp_write+0x5a4>)
 8012940:	f240 22ab 	movw	r2, #683	; 0x2ab
 8012944:	4955      	ldr	r1, [pc, #340]	; (8012a9c <tcp_write+0x5b4>)
 8012946:	4853      	ldr	r0, [pc, #332]	; (8012a94 <tcp_write+0x5ac>)
 8012948:	f004 faa6 	bl	8016e98 <iprintf>
      prev_seg->next = seg;
 801294c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801294e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012950:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8012952:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012954:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8012956:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801295a:	8b3b      	ldrh	r3, [r7, #24]
 801295c:	4413      	add	r3, r2
 801295e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8012962:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012966:	88fb      	ldrh	r3, [r7, #6]
 8012968:	429a      	cmp	r2, r3
 801296a:	f4ff af3d 	bcc.w	80127e8 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801296e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012970:	2b00      	cmp	r3, #0
 8012972:	d02c      	beq.n	80129ce <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8012974:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012976:	685b      	ldr	r3, [r3, #4]
 8012978:	62fb      	str	r3, [r7, #44]	; 0x2c
 801297a:	e01e      	b.n	80129ba <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 801297c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801297e:	891a      	ldrh	r2, [r3, #8]
 8012980:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012982:	4413      	add	r3, r2
 8012984:	b29a      	uxth	r2, r3
 8012986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012988:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801298a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801298c:	681b      	ldr	r3, [r3, #0]
 801298e:	2b00      	cmp	r3, #0
 8012990:	d110      	bne.n	80129b4 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8012992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012994:	685b      	ldr	r3, [r3, #4]
 8012996:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012998:	8952      	ldrh	r2, [r2, #10]
 801299a:	4413      	add	r3, r2
 801299c:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801299e:	68b9      	ldr	r1, [r7, #8]
 80129a0:	4618      	mov	r0, r3
 80129a2:	f004 fa63 	bl	8016e6c <memcpy>
        p->len += oversize_used;
 80129a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129a8:	895a      	ldrh	r2, [r3, #10]
 80129aa:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80129ac:	4413      	add	r3, r2
 80129ae:	b29a      	uxth	r2, r3
 80129b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129b2:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 80129b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129b6:	681b      	ldr	r3, [r3, #0]
 80129b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80129ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129bc:	2b00      	cmp	r3, #0
 80129be:	d1dd      	bne.n	801297c <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 80129c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80129c2:	891a      	ldrh	r2, [r3, #8]
 80129c4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80129c6:	4413      	add	r3, r2
 80129c8:	b29a      	uxth	r2, r3
 80129ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80129cc:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 80129ce:	8a7a      	ldrh	r2, [r7, #18]
 80129d0:	68fb      	ldr	r3, [r7, #12]
 80129d2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 80129d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80129d8:	2b00      	cmp	r3, #0
 80129da:	d018      	beq.n	8012a0e <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 80129dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80129de:	2b00      	cmp	r3, #0
 80129e0:	d106      	bne.n	80129f0 <tcp_write+0x508>
 80129e2:	4b2a      	ldr	r3, [pc, #168]	; (8012a8c <tcp_write+0x5a4>)
 80129e4:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 80129e8:	492d      	ldr	r1, [pc, #180]	; (8012aa0 <tcp_write+0x5b8>)
 80129ea:	482a      	ldr	r0, [pc, #168]	; (8012a94 <tcp_write+0x5ac>)
 80129ec:	f004 fa54 	bl	8016e98 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 80129f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80129f2:	685b      	ldr	r3, [r3, #4]
 80129f4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80129f6:	4618      	mov	r0, r3
 80129f8:	f7fb f8aa 	bl	800db50 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 80129fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80129fe:	891a      	ldrh	r2, [r3, #8]
 8012a00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012a02:	891b      	ldrh	r3, [r3, #8]
 8012a04:	4413      	add	r3, r2
 8012a06:	b29a      	uxth	r2, r3
 8012a08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012a0a:	811a      	strh	r2, [r3, #8]
 8012a0c:	e037      	b.n	8012a7e <tcp_write+0x596>
  } else if (extendlen > 0) {
 8012a0e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012a10:	2b00      	cmp	r3, #0
 8012a12:	d034      	beq.n	8012a7e <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8012a14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012a16:	2b00      	cmp	r3, #0
 8012a18:	d003      	beq.n	8012a22 <tcp_write+0x53a>
 8012a1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012a1c:	685b      	ldr	r3, [r3, #4]
 8012a1e:	2b00      	cmp	r3, #0
 8012a20:	d106      	bne.n	8012a30 <tcp_write+0x548>
 8012a22:	4b1a      	ldr	r3, [pc, #104]	; (8012a8c <tcp_write+0x5a4>)
 8012a24:	f240 22e6 	movw	r2, #742	; 0x2e6
 8012a28:	491e      	ldr	r1, [pc, #120]	; (8012aa4 <tcp_write+0x5bc>)
 8012a2a:	481a      	ldr	r0, [pc, #104]	; (8012a94 <tcp_write+0x5ac>)
 8012a2c:	f004 fa34 	bl	8016e98 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8012a30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012a32:	685b      	ldr	r3, [r3, #4]
 8012a34:	62bb      	str	r3, [r7, #40]	; 0x28
 8012a36:	e009      	b.n	8012a4c <tcp_write+0x564>
      p->tot_len += extendlen;
 8012a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a3a:	891a      	ldrh	r2, [r3, #8]
 8012a3c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012a3e:	4413      	add	r3, r2
 8012a40:	b29a      	uxth	r2, r3
 8012a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a44:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8012a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a48:	681b      	ldr	r3, [r3, #0]
 8012a4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8012a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a4e:	681b      	ldr	r3, [r3, #0]
 8012a50:	2b00      	cmp	r3, #0
 8012a52:	d1f1      	bne.n	8012a38 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8012a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a56:	891a      	ldrh	r2, [r3, #8]
 8012a58:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012a5a:	4413      	add	r3, r2
 8012a5c:	b29a      	uxth	r2, r3
 8012a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a60:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8012a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a64:	895a      	ldrh	r2, [r3, #10]
 8012a66:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012a68:	4413      	add	r3, r2
 8012a6a:	b29a      	uxth	r2, r3
 8012a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a6e:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8012a70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012a72:	891a      	ldrh	r2, [r3, #8]
 8012a74:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012a76:	4413      	add	r3, r2
 8012a78:	b29a      	uxth	r2, r3
 8012a7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012a7c:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8012a7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012a80:	2b00      	cmp	r3, #0
 8012a82:	d111      	bne.n	8012aa8 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8012a84:	68fb      	ldr	r3, [r7, #12]
 8012a86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012a88:	66da      	str	r2, [r3, #108]	; 0x6c
 8012a8a:	e010      	b.n	8012aae <tcp_write+0x5c6>
 8012a8c:	08019760 	.word	0x08019760
 8012a90:	08019a00 	.word	0x08019a00
 8012a94:	080197b4 	.word	0x080197b4
 8012a98:	08019a40 	.word	0x08019a40
 8012a9c:	08019a50 	.word	0x08019a50
 8012aa0:	08019a64 	.word	0x08019a64
 8012aa4:	08019a9c 	.word	0x08019a9c
  } else {
    last_unsent->next = queue;
 8012aa8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012aaa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012aac:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8012aae:	68fb      	ldr	r3, [r7, #12]
 8012ab0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8012ab2:	88fb      	ldrh	r3, [r7, #6]
 8012ab4:	441a      	add	r2, r3
 8012ab6:	68fb      	ldr	r3, [r7, #12]
 8012ab8:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8012aba:	68fb      	ldr	r3, [r7, #12]
 8012abc:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8012ac0:	88fb      	ldrh	r3, [r7, #6]
 8012ac2:	1ad3      	subs	r3, r2, r3
 8012ac4:	b29a      	uxth	r2, r3
 8012ac6:	68fb      	ldr	r3, [r7, #12]
 8012ac8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8012acc:	68fb      	ldr	r3, [r7, #12]
 8012ace:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8012ad2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8012ad6:	68fb      	ldr	r3, [r7, #12]
 8012ad8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012adc:	2b00      	cmp	r3, #0
 8012ade:	d00e      	beq.n	8012afe <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8012ae0:	68fb      	ldr	r3, [r7, #12]
 8012ae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012ae4:	2b00      	cmp	r3, #0
 8012ae6:	d10a      	bne.n	8012afe <tcp_write+0x616>
 8012ae8:	68fb      	ldr	r3, [r7, #12]
 8012aea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012aec:	2b00      	cmp	r3, #0
 8012aee:	d106      	bne.n	8012afe <tcp_write+0x616>
 8012af0:	4b2c      	ldr	r3, [pc, #176]	; (8012ba4 <tcp_write+0x6bc>)
 8012af2:	f240 3212 	movw	r2, #786	; 0x312
 8012af6:	492c      	ldr	r1, [pc, #176]	; (8012ba8 <tcp_write+0x6c0>)
 8012af8:	482c      	ldr	r0, [pc, #176]	; (8012bac <tcp_write+0x6c4>)
 8012afa:	f004 f9cd 	bl	8016e98 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8012afe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012b00:	2b00      	cmp	r3, #0
 8012b02:	d016      	beq.n	8012b32 <tcp_write+0x64a>
 8012b04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012b06:	68db      	ldr	r3, [r3, #12]
 8012b08:	2b00      	cmp	r3, #0
 8012b0a:	d012      	beq.n	8012b32 <tcp_write+0x64a>
 8012b0c:	797b      	ldrb	r3, [r7, #5]
 8012b0e:	f003 0302 	and.w	r3, r3, #2
 8012b12:	2b00      	cmp	r3, #0
 8012b14:	d10d      	bne.n	8012b32 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8012b16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012b18:	68db      	ldr	r3, [r3, #12]
 8012b1a:	899b      	ldrh	r3, [r3, #12]
 8012b1c:	b29c      	uxth	r4, r3
 8012b1e:	2008      	movs	r0, #8
 8012b20:	f7f9 fa8e 	bl	800c040 <lwip_htons>
 8012b24:	4603      	mov	r3, r0
 8012b26:	461a      	mov	r2, r3
 8012b28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012b2a:	68db      	ldr	r3, [r3, #12]
 8012b2c:	4322      	orrs	r2, r4
 8012b2e:	b292      	uxth	r2, r2
 8012b30:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8012b32:	2300      	movs	r3, #0
 8012b34:	e031      	b.n	8012b9a <tcp_write+0x6b2>
          goto memerr;
 8012b36:	bf00      	nop
 8012b38:	e006      	b.n	8012b48 <tcp_write+0x660>
            goto memerr;
 8012b3a:	bf00      	nop
 8012b3c:	e004      	b.n	8012b48 <tcp_write+0x660>
        goto memerr;
 8012b3e:	bf00      	nop
 8012b40:	e002      	b.n	8012b48 <tcp_write+0x660>
        goto memerr;
 8012b42:	bf00      	nop
 8012b44:	e000      	b.n	8012b48 <tcp_write+0x660>
      goto memerr;
 8012b46:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012b48:	68fb      	ldr	r3, [r7, #12]
 8012b4a:	8b5b      	ldrh	r3, [r3, #26]
 8012b4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012b50:	b29a      	uxth	r2, r3
 8012b52:	68fb      	ldr	r3, [r7, #12]
 8012b54:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8012b56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012b58:	2b00      	cmp	r3, #0
 8012b5a:	d002      	beq.n	8012b62 <tcp_write+0x67a>
    pbuf_free(concat_p);
 8012b5c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8012b5e:	f7fa ff29 	bl	800d9b4 <pbuf_free>
  }
  if (queue != NULL) {
 8012b62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012b64:	2b00      	cmp	r3, #0
 8012b66:	d002      	beq.n	8012b6e <tcp_write+0x686>
    tcp_segs_free(queue);
 8012b68:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8012b6a:	f7fc fb57 	bl	800f21c <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8012b6e:	68fb      	ldr	r3, [r7, #12]
 8012b70:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012b74:	2b00      	cmp	r3, #0
 8012b76:	d00e      	beq.n	8012b96 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8012b78:	68fb      	ldr	r3, [r7, #12]
 8012b7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012b7c:	2b00      	cmp	r3, #0
 8012b7e:	d10a      	bne.n	8012b96 <tcp_write+0x6ae>
 8012b80:	68fb      	ldr	r3, [r7, #12]
 8012b82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012b84:	2b00      	cmp	r3, #0
 8012b86:	d106      	bne.n	8012b96 <tcp_write+0x6ae>
 8012b88:	4b06      	ldr	r3, [pc, #24]	; (8012ba4 <tcp_write+0x6bc>)
 8012b8a:	f240 3227 	movw	r2, #807	; 0x327
 8012b8e:	4906      	ldr	r1, [pc, #24]	; (8012ba8 <tcp_write+0x6c0>)
 8012b90:	4806      	ldr	r0, [pc, #24]	; (8012bac <tcp_write+0x6c4>)
 8012b92:	f004 f981 	bl	8016e98 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8012b96:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012b9a:	4618      	mov	r0, r3
 8012b9c:	375c      	adds	r7, #92	; 0x5c
 8012b9e:	46bd      	mov	sp, r7
 8012ba0:	bd90      	pop	{r4, r7, pc}
 8012ba2:	bf00      	nop
 8012ba4:	08019760 	.word	0x08019760
 8012ba8:	08019ad4 	.word	0x08019ad4
 8012bac:	080197b4 	.word	0x080197b4

08012bb0 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8012bb0:	b590      	push	{r4, r7, lr}
 8012bb2:	b08b      	sub	sp, #44	; 0x2c
 8012bb4:	af02      	add	r7, sp, #8
 8012bb6:	6078      	str	r0, [r7, #4]
 8012bb8:	460b      	mov	r3, r1
 8012bba:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8012bbc:	2300      	movs	r3, #0
 8012bbe:	61fb      	str	r3, [r7, #28]
 8012bc0:	2300      	movs	r3, #0
 8012bc2:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8012bc4:	2300      	movs	r3, #0
 8012bc6:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8012bc8:	687b      	ldr	r3, [r7, #4]
 8012bca:	2b00      	cmp	r3, #0
 8012bcc:	d106      	bne.n	8012bdc <tcp_split_unsent_seg+0x2c>
 8012bce:	4b95      	ldr	r3, [pc, #596]	; (8012e24 <tcp_split_unsent_seg+0x274>)
 8012bd0:	f240 324b 	movw	r2, #843	; 0x34b
 8012bd4:	4994      	ldr	r1, [pc, #592]	; (8012e28 <tcp_split_unsent_seg+0x278>)
 8012bd6:	4895      	ldr	r0, [pc, #596]	; (8012e2c <tcp_split_unsent_seg+0x27c>)
 8012bd8:	f004 f95e 	bl	8016e98 <iprintf>

  useg = pcb->unsent;
 8012bdc:	687b      	ldr	r3, [r7, #4]
 8012bde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012be0:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8012be2:	697b      	ldr	r3, [r7, #20]
 8012be4:	2b00      	cmp	r3, #0
 8012be6:	d102      	bne.n	8012bee <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8012be8:	f04f 33ff 	mov.w	r3, #4294967295
 8012bec:	e116      	b.n	8012e1c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8012bee:	887b      	ldrh	r3, [r7, #2]
 8012bf0:	2b00      	cmp	r3, #0
 8012bf2:	d109      	bne.n	8012c08 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8012bf4:	4b8b      	ldr	r3, [pc, #556]	; (8012e24 <tcp_split_unsent_seg+0x274>)
 8012bf6:	f240 3253 	movw	r2, #851	; 0x353
 8012bfa:	498d      	ldr	r1, [pc, #564]	; (8012e30 <tcp_split_unsent_seg+0x280>)
 8012bfc:	488b      	ldr	r0, [pc, #556]	; (8012e2c <tcp_split_unsent_seg+0x27c>)
 8012bfe:	f004 f94b 	bl	8016e98 <iprintf>
    return ERR_VAL;
 8012c02:	f06f 0305 	mvn.w	r3, #5
 8012c06:	e109      	b.n	8012e1c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8012c08:	697b      	ldr	r3, [r7, #20]
 8012c0a:	891b      	ldrh	r3, [r3, #8]
 8012c0c:	887a      	ldrh	r2, [r7, #2]
 8012c0e:	429a      	cmp	r2, r3
 8012c10:	d301      	bcc.n	8012c16 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8012c12:	2300      	movs	r3, #0
 8012c14:	e102      	b.n	8012e1c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8012c16:	687b      	ldr	r3, [r7, #4]
 8012c18:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012c1a:	887a      	ldrh	r2, [r7, #2]
 8012c1c:	429a      	cmp	r2, r3
 8012c1e:	d906      	bls.n	8012c2e <tcp_split_unsent_seg+0x7e>
 8012c20:	4b80      	ldr	r3, [pc, #512]	; (8012e24 <tcp_split_unsent_seg+0x274>)
 8012c22:	f240 325b 	movw	r2, #859	; 0x35b
 8012c26:	4983      	ldr	r1, [pc, #524]	; (8012e34 <tcp_split_unsent_seg+0x284>)
 8012c28:	4880      	ldr	r0, [pc, #512]	; (8012e2c <tcp_split_unsent_seg+0x27c>)
 8012c2a:	f004 f935 	bl	8016e98 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8012c2e:	697b      	ldr	r3, [r7, #20]
 8012c30:	891b      	ldrh	r3, [r3, #8]
 8012c32:	2b00      	cmp	r3, #0
 8012c34:	d106      	bne.n	8012c44 <tcp_split_unsent_seg+0x94>
 8012c36:	4b7b      	ldr	r3, [pc, #492]	; (8012e24 <tcp_split_unsent_seg+0x274>)
 8012c38:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8012c3c:	497e      	ldr	r1, [pc, #504]	; (8012e38 <tcp_split_unsent_seg+0x288>)
 8012c3e:	487b      	ldr	r0, [pc, #492]	; (8012e2c <tcp_split_unsent_seg+0x27c>)
 8012c40:	f004 f92a 	bl	8016e98 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8012c44:	697b      	ldr	r3, [r7, #20]
 8012c46:	7a9b      	ldrb	r3, [r3, #10]
 8012c48:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8012c4a:	7bfb      	ldrb	r3, [r7, #15]
 8012c4c:	009b      	lsls	r3, r3, #2
 8012c4e:	b2db      	uxtb	r3, r3
 8012c50:	f003 0304 	and.w	r3, r3, #4
 8012c54:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8012c56:	697b      	ldr	r3, [r7, #20]
 8012c58:	891a      	ldrh	r2, [r3, #8]
 8012c5a:	887b      	ldrh	r3, [r7, #2]
 8012c5c:	1ad3      	subs	r3, r2, r3
 8012c5e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8012c60:	7bbb      	ldrb	r3, [r7, #14]
 8012c62:	b29a      	uxth	r2, r3
 8012c64:	89bb      	ldrh	r3, [r7, #12]
 8012c66:	4413      	add	r3, r2
 8012c68:	b29b      	uxth	r3, r3
 8012c6a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012c6e:	4619      	mov	r1, r3
 8012c70:	2036      	movs	r0, #54	; 0x36
 8012c72:	f7fa fbbb 	bl	800d3ec <pbuf_alloc>
 8012c76:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012c78:	693b      	ldr	r3, [r7, #16]
 8012c7a:	2b00      	cmp	r3, #0
 8012c7c:	f000 80b7 	beq.w	8012dee <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8012c80:	697b      	ldr	r3, [r7, #20]
 8012c82:	685b      	ldr	r3, [r3, #4]
 8012c84:	891a      	ldrh	r2, [r3, #8]
 8012c86:	697b      	ldr	r3, [r7, #20]
 8012c88:	891b      	ldrh	r3, [r3, #8]
 8012c8a:	1ad3      	subs	r3, r2, r3
 8012c8c:	b29a      	uxth	r2, r3
 8012c8e:	887b      	ldrh	r3, [r7, #2]
 8012c90:	4413      	add	r3, r2
 8012c92:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8012c94:	697b      	ldr	r3, [r7, #20]
 8012c96:	6858      	ldr	r0, [r3, #4]
 8012c98:	693b      	ldr	r3, [r7, #16]
 8012c9a:	685a      	ldr	r2, [r3, #4]
 8012c9c:	7bbb      	ldrb	r3, [r7, #14]
 8012c9e:	18d1      	adds	r1, r2, r3
 8012ca0:	897b      	ldrh	r3, [r7, #10]
 8012ca2:	89ba      	ldrh	r2, [r7, #12]
 8012ca4:	f7fb f88c 	bl	800ddc0 <pbuf_copy_partial>
 8012ca8:	4603      	mov	r3, r0
 8012caa:	461a      	mov	r2, r3
 8012cac:	89bb      	ldrh	r3, [r7, #12]
 8012cae:	4293      	cmp	r3, r2
 8012cb0:	f040 809f 	bne.w	8012df2 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8012cb4:	697b      	ldr	r3, [r7, #20]
 8012cb6:	68db      	ldr	r3, [r3, #12]
 8012cb8:	899b      	ldrh	r3, [r3, #12]
 8012cba:	b29b      	uxth	r3, r3
 8012cbc:	4618      	mov	r0, r3
 8012cbe:	f7f9 f9bf 	bl	800c040 <lwip_htons>
 8012cc2:	4603      	mov	r3, r0
 8012cc4:	b2db      	uxtb	r3, r3
 8012cc6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012cca:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8012ccc:	2300      	movs	r3, #0
 8012cce:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8012cd0:	7efb      	ldrb	r3, [r7, #27]
 8012cd2:	f003 0308 	and.w	r3, r3, #8
 8012cd6:	2b00      	cmp	r3, #0
 8012cd8:	d007      	beq.n	8012cea <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8012cda:	7efb      	ldrb	r3, [r7, #27]
 8012cdc:	f023 0308 	bic.w	r3, r3, #8
 8012ce0:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8012ce2:	7ebb      	ldrb	r3, [r7, #26]
 8012ce4:	f043 0308 	orr.w	r3, r3, #8
 8012ce8:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8012cea:	7efb      	ldrb	r3, [r7, #27]
 8012cec:	f003 0301 	and.w	r3, r3, #1
 8012cf0:	2b00      	cmp	r3, #0
 8012cf2:	d007      	beq.n	8012d04 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8012cf4:	7efb      	ldrb	r3, [r7, #27]
 8012cf6:	f023 0301 	bic.w	r3, r3, #1
 8012cfa:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8012cfc:	7ebb      	ldrb	r3, [r7, #26]
 8012cfe:	f043 0301 	orr.w	r3, r3, #1
 8012d02:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8012d04:	697b      	ldr	r3, [r7, #20]
 8012d06:	68db      	ldr	r3, [r3, #12]
 8012d08:	685b      	ldr	r3, [r3, #4]
 8012d0a:	4618      	mov	r0, r3
 8012d0c:	f7f9 f9ad 	bl	800c06a <lwip_htonl>
 8012d10:	4602      	mov	r2, r0
 8012d12:	887b      	ldrh	r3, [r7, #2]
 8012d14:	18d1      	adds	r1, r2, r3
 8012d16:	7eba      	ldrb	r2, [r7, #26]
 8012d18:	7bfb      	ldrb	r3, [r7, #15]
 8012d1a:	9300      	str	r3, [sp, #0]
 8012d1c:	460b      	mov	r3, r1
 8012d1e:	6939      	ldr	r1, [r7, #16]
 8012d20:	6878      	ldr	r0, [r7, #4]
 8012d22:	f7ff fa4f 	bl	80121c4 <tcp_create_segment>
 8012d26:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8012d28:	69fb      	ldr	r3, [r7, #28]
 8012d2a:	2b00      	cmp	r3, #0
 8012d2c:	d063      	beq.n	8012df6 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8012d2e:	697b      	ldr	r3, [r7, #20]
 8012d30:	685b      	ldr	r3, [r3, #4]
 8012d32:	4618      	mov	r0, r3
 8012d34:	f7fa fecc 	bl	800dad0 <pbuf_clen>
 8012d38:	4603      	mov	r3, r0
 8012d3a:	461a      	mov	r2, r3
 8012d3c:	687b      	ldr	r3, [r7, #4]
 8012d3e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012d42:	1a9b      	subs	r3, r3, r2
 8012d44:	b29a      	uxth	r2, r3
 8012d46:	687b      	ldr	r3, [r7, #4]
 8012d48:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8012d4c:	697b      	ldr	r3, [r7, #20]
 8012d4e:	6858      	ldr	r0, [r3, #4]
 8012d50:	697b      	ldr	r3, [r7, #20]
 8012d52:	685b      	ldr	r3, [r3, #4]
 8012d54:	891a      	ldrh	r2, [r3, #8]
 8012d56:	89bb      	ldrh	r3, [r7, #12]
 8012d58:	1ad3      	subs	r3, r2, r3
 8012d5a:	b29b      	uxth	r3, r3
 8012d5c:	4619      	mov	r1, r3
 8012d5e:	f7fa fca3 	bl	800d6a8 <pbuf_realloc>
  useg->len -= remainder;
 8012d62:	697b      	ldr	r3, [r7, #20]
 8012d64:	891a      	ldrh	r2, [r3, #8]
 8012d66:	89bb      	ldrh	r3, [r7, #12]
 8012d68:	1ad3      	subs	r3, r2, r3
 8012d6a:	b29a      	uxth	r2, r3
 8012d6c:	697b      	ldr	r3, [r7, #20]
 8012d6e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8012d70:	697b      	ldr	r3, [r7, #20]
 8012d72:	68db      	ldr	r3, [r3, #12]
 8012d74:	899b      	ldrh	r3, [r3, #12]
 8012d76:	b29c      	uxth	r4, r3
 8012d78:	7efb      	ldrb	r3, [r7, #27]
 8012d7a:	b29b      	uxth	r3, r3
 8012d7c:	4618      	mov	r0, r3
 8012d7e:	f7f9 f95f 	bl	800c040 <lwip_htons>
 8012d82:	4603      	mov	r3, r0
 8012d84:	461a      	mov	r2, r3
 8012d86:	697b      	ldr	r3, [r7, #20]
 8012d88:	68db      	ldr	r3, [r3, #12]
 8012d8a:	4322      	orrs	r2, r4
 8012d8c:	b292      	uxth	r2, r2
 8012d8e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8012d90:	697b      	ldr	r3, [r7, #20]
 8012d92:	685b      	ldr	r3, [r3, #4]
 8012d94:	4618      	mov	r0, r3
 8012d96:	f7fa fe9b 	bl	800dad0 <pbuf_clen>
 8012d9a:	4603      	mov	r3, r0
 8012d9c:	461a      	mov	r2, r3
 8012d9e:	687b      	ldr	r3, [r7, #4]
 8012da0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012da4:	4413      	add	r3, r2
 8012da6:	b29a      	uxth	r2, r3
 8012da8:	687b      	ldr	r3, [r7, #4]
 8012daa:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8012dae:	69fb      	ldr	r3, [r7, #28]
 8012db0:	685b      	ldr	r3, [r3, #4]
 8012db2:	4618      	mov	r0, r3
 8012db4:	f7fa fe8c 	bl	800dad0 <pbuf_clen>
 8012db8:	4603      	mov	r3, r0
 8012dba:	461a      	mov	r2, r3
 8012dbc:	687b      	ldr	r3, [r7, #4]
 8012dbe:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012dc2:	4413      	add	r3, r2
 8012dc4:	b29a      	uxth	r2, r3
 8012dc6:	687b      	ldr	r3, [r7, #4]
 8012dc8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8012dcc:	697b      	ldr	r3, [r7, #20]
 8012dce:	681a      	ldr	r2, [r3, #0]
 8012dd0:	69fb      	ldr	r3, [r7, #28]
 8012dd2:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8012dd4:	697b      	ldr	r3, [r7, #20]
 8012dd6:	69fa      	ldr	r2, [r7, #28]
 8012dd8:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8012dda:	69fb      	ldr	r3, [r7, #28]
 8012ddc:	681b      	ldr	r3, [r3, #0]
 8012dde:	2b00      	cmp	r3, #0
 8012de0:	d103      	bne.n	8012dea <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8012de2:	687b      	ldr	r3, [r7, #4]
 8012de4:	2200      	movs	r2, #0
 8012de6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8012dea:	2300      	movs	r3, #0
 8012dec:	e016      	b.n	8012e1c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8012dee:	bf00      	nop
 8012df0:	e002      	b.n	8012df8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8012df2:	bf00      	nop
 8012df4:	e000      	b.n	8012df8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8012df6:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8012df8:	69fb      	ldr	r3, [r7, #28]
 8012dfa:	2b00      	cmp	r3, #0
 8012dfc:	d006      	beq.n	8012e0c <tcp_split_unsent_seg+0x25c>
 8012dfe:	4b09      	ldr	r3, [pc, #36]	; (8012e24 <tcp_split_unsent_seg+0x274>)
 8012e00:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8012e04:	490d      	ldr	r1, [pc, #52]	; (8012e3c <tcp_split_unsent_seg+0x28c>)
 8012e06:	4809      	ldr	r0, [pc, #36]	; (8012e2c <tcp_split_unsent_seg+0x27c>)
 8012e08:	f004 f846 	bl	8016e98 <iprintf>
  if (p != NULL) {
 8012e0c:	693b      	ldr	r3, [r7, #16]
 8012e0e:	2b00      	cmp	r3, #0
 8012e10:	d002      	beq.n	8012e18 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8012e12:	6938      	ldr	r0, [r7, #16]
 8012e14:	f7fa fdce 	bl	800d9b4 <pbuf_free>
  }

  return ERR_MEM;
 8012e18:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012e1c:	4618      	mov	r0, r3
 8012e1e:	3724      	adds	r7, #36	; 0x24
 8012e20:	46bd      	mov	sp, r7
 8012e22:	bd90      	pop	{r4, r7, pc}
 8012e24:	08019760 	.word	0x08019760
 8012e28:	08019af4 	.word	0x08019af4
 8012e2c:	080197b4 	.word	0x080197b4
 8012e30:	08019b18 	.word	0x08019b18
 8012e34:	08019b3c 	.word	0x08019b3c
 8012e38:	08019b4c 	.word	0x08019b4c
 8012e3c:	08019b5c 	.word	0x08019b5c

08012e40 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8012e40:	b590      	push	{r4, r7, lr}
 8012e42:	b085      	sub	sp, #20
 8012e44:	af00      	add	r7, sp, #0
 8012e46:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8012e48:	687b      	ldr	r3, [r7, #4]
 8012e4a:	2b00      	cmp	r3, #0
 8012e4c:	d106      	bne.n	8012e5c <tcp_send_fin+0x1c>
 8012e4e:	4b21      	ldr	r3, [pc, #132]	; (8012ed4 <tcp_send_fin+0x94>)
 8012e50:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8012e54:	4920      	ldr	r1, [pc, #128]	; (8012ed8 <tcp_send_fin+0x98>)
 8012e56:	4821      	ldr	r0, [pc, #132]	; (8012edc <tcp_send_fin+0x9c>)
 8012e58:	f004 f81e 	bl	8016e98 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8012e5c:	687b      	ldr	r3, [r7, #4]
 8012e5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012e60:	2b00      	cmp	r3, #0
 8012e62:	d02e      	beq.n	8012ec2 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012e64:	687b      	ldr	r3, [r7, #4]
 8012e66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012e68:	60fb      	str	r3, [r7, #12]
 8012e6a:	e002      	b.n	8012e72 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8012e6c:	68fb      	ldr	r3, [r7, #12]
 8012e6e:	681b      	ldr	r3, [r3, #0]
 8012e70:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012e72:	68fb      	ldr	r3, [r7, #12]
 8012e74:	681b      	ldr	r3, [r3, #0]
 8012e76:	2b00      	cmp	r3, #0
 8012e78:	d1f8      	bne.n	8012e6c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8012e7a:	68fb      	ldr	r3, [r7, #12]
 8012e7c:	68db      	ldr	r3, [r3, #12]
 8012e7e:	899b      	ldrh	r3, [r3, #12]
 8012e80:	b29b      	uxth	r3, r3
 8012e82:	4618      	mov	r0, r3
 8012e84:	f7f9 f8dc 	bl	800c040 <lwip_htons>
 8012e88:	4603      	mov	r3, r0
 8012e8a:	b2db      	uxtb	r3, r3
 8012e8c:	f003 0307 	and.w	r3, r3, #7
 8012e90:	2b00      	cmp	r3, #0
 8012e92:	d116      	bne.n	8012ec2 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8012e94:	68fb      	ldr	r3, [r7, #12]
 8012e96:	68db      	ldr	r3, [r3, #12]
 8012e98:	899b      	ldrh	r3, [r3, #12]
 8012e9a:	b29c      	uxth	r4, r3
 8012e9c:	2001      	movs	r0, #1
 8012e9e:	f7f9 f8cf 	bl	800c040 <lwip_htons>
 8012ea2:	4603      	mov	r3, r0
 8012ea4:	461a      	mov	r2, r3
 8012ea6:	68fb      	ldr	r3, [r7, #12]
 8012ea8:	68db      	ldr	r3, [r3, #12]
 8012eaa:	4322      	orrs	r2, r4
 8012eac:	b292      	uxth	r2, r2
 8012eae:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8012eb0:	687b      	ldr	r3, [r7, #4]
 8012eb2:	8b5b      	ldrh	r3, [r3, #26]
 8012eb4:	f043 0320 	orr.w	r3, r3, #32
 8012eb8:	b29a      	uxth	r2, r3
 8012eba:	687b      	ldr	r3, [r7, #4]
 8012ebc:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8012ebe:	2300      	movs	r3, #0
 8012ec0:	e004      	b.n	8012ecc <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8012ec2:	2101      	movs	r1, #1
 8012ec4:	6878      	ldr	r0, [r7, #4]
 8012ec6:	f000 f80b 	bl	8012ee0 <tcp_enqueue_flags>
 8012eca:	4603      	mov	r3, r0
}
 8012ecc:	4618      	mov	r0, r3
 8012ece:	3714      	adds	r7, #20
 8012ed0:	46bd      	mov	sp, r7
 8012ed2:	bd90      	pop	{r4, r7, pc}
 8012ed4:	08019760 	.word	0x08019760
 8012ed8:	08019b68 	.word	0x08019b68
 8012edc:	080197b4 	.word	0x080197b4

08012ee0 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8012ee0:	b580      	push	{r7, lr}
 8012ee2:	b08a      	sub	sp, #40	; 0x28
 8012ee4:	af02      	add	r7, sp, #8
 8012ee6:	6078      	str	r0, [r7, #4]
 8012ee8:	460b      	mov	r3, r1
 8012eea:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8012eec:	2300      	movs	r3, #0
 8012eee:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8012ef0:	2300      	movs	r3, #0
 8012ef2:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8012ef4:	78fb      	ldrb	r3, [r7, #3]
 8012ef6:	f003 0303 	and.w	r3, r3, #3
 8012efa:	2b00      	cmp	r3, #0
 8012efc:	d106      	bne.n	8012f0c <tcp_enqueue_flags+0x2c>
 8012efe:	4b67      	ldr	r3, [pc, #412]	; (801309c <tcp_enqueue_flags+0x1bc>)
 8012f00:	f240 4211 	movw	r2, #1041	; 0x411
 8012f04:	4966      	ldr	r1, [pc, #408]	; (80130a0 <tcp_enqueue_flags+0x1c0>)
 8012f06:	4867      	ldr	r0, [pc, #412]	; (80130a4 <tcp_enqueue_flags+0x1c4>)
 8012f08:	f003 ffc6 	bl	8016e98 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8012f0c:	687b      	ldr	r3, [r7, #4]
 8012f0e:	2b00      	cmp	r3, #0
 8012f10:	d106      	bne.n	8012f20 <tcp_enqueue_flags+0x40>
 8012f12:	4b62      	ldr	r3, [pc, #392]	; (801309c <tcp_enqueue_flags+0x1bc>)
 8012f14:	f240 4213 	movw	r2, #1043	; 0x413
 8012f18:	4963      	ldr	r1, [pc, #396]	; (80130a8 <tcp_enqueue_flags+0x1c8>)
 8012f1a:	4862      	ldr	r0, [pc, #392]	; (80130a4 <tcp_enqueue_flags+0x1c4>)
 8012f1c:	f003 ffbc 	bl	8016e98 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8012f20:	78fb      	ldrb	r3, [r7, #3]
 8012f22:	f003 0302 	and.w	r3, r3, #2
 8012f26:	2b00      	cmp	r3, #0
 8012f28:	d001      	beq.n	8012f2e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8012f2a:	2301      	movs	r3, #1
 8012f2c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012f2e:	7ffb      	ldrb	r3, [r7, #31]
 8012f30:	009b      	lsls	r3, r3, #2
 8012f32:	b2db      	uxtb	r3, r3
 8012f34:	f003 0304 	and.w	r3, r3, #4
 8012f38:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8012f3a:	7dfb      	ldrb	r3, [r7, #23]
 8012f3c:	b29b      	uxth	r3, r3
 8012f3e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012f42:	4619      	mov	r1, r3
 8012f44:	2036      	movs	r0, #54	; 0x36
 8012f46:	f7fa fa51 	bl	800d3ec <pbuf_alloc>
 8012f4a:	6138      	str	r0, [r7, #16]
 8012f4c:	693b      	ldr	r3, [r7, #16]
 8012f4e:	2b00      	cmp	r3, #0
 8012f50:	d109      	bne.n	8012f66 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012f52:	687b      	ldr	r3, [r7, #4]
 8012f54:	8b5b      	ldrh	r3, [r3, #26]
 8012f56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012f5a:	b29a      	uxth	r2, r3
 8012f5c:	687b      	ldr	r3, [r7, #4]
 8012f5e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8012f60:	f04f 33ff 	mov.w	r3, #4294967295
 8012f64:	e095      	b.n	8013092 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8012f66:	693b      	ldr	r3, [r7, #16]
 8012f68:	895a      	ldrh	r2, [r3, #10]
 8012f6a:	7dfb      	ldrb	r3, [r7, #23]
 8012f6c:	b29b      	uxth	r3, r3
 8012f6e:	429a      	cmp	r2, r3
 8012f70:	d206      	bcs.n	8012f80 <tcp_enqueue_flags+0xa0>
 8012f72:	4b4a      	ldr	r3, [pc, #296]	; (801309c <tcp_enqueue_flags+0x1bc>)
 8012f74:	f240 4239 	movw	r2, #1081	; 0x439
 8012f78:	494c      	ldr	r1, [pc, #304]	; (80130ac <tcp_enqueue_flags+0x1cc>)
 8012f7a:	484a      	ldr	r0, [pc, #296]	; (80130a4 <tcp_enqueue_flags+0x1c4>)
 8012f7c:	f003 ff8c 	bl	8016e98 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8012f80:	687b      	ldr	r3, [r7, #4]
 8012f82:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8012f84:	78fa      	ldrb	r2, [r7, #3]
 8012f86:	7ffb      	ldrb	r3, [r7, #31]
 8012f88:	9300      	str	r3, [sp, #0]
 8012f8a:	460b      	mov	r3, r1
 8012f8c:	6939      	ldr	r1, [r7, #16]
 8012f8e:	6878      	ldr	r0, [r7, #4]
 8012f90:	f7ff f918 	bl	80121c4 <tcp_create_segment>
 8012f94:	60f8      	str	r0, [r7, #12]
 8012f96:	68fb      	ldr	r3, [r7, #12]
 8012f98:	2b00      	cmp	r3, #0
 8012f9a:	d109      	bne.n	8012fb0 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012f9c:	687b      	ldr	r3, [r7, #4]
 8012f9e:	8b5b      	ldrh	r3, [r3, #26]
 8012fa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012fa4:	b29a      	uxth	r2, r3
 8012fa6:	687b      	ldr	r3, [r7, #4]
 8012fa8:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8012faa:	f04f 33ff 	mov.w	r3, #4294967295
 8012fae:	e070      	b.n	8013092 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8012fb0:	68fb      	ldr	r3, [r7, #12]
 8012fb2:	68db      	ldr	r3, [r3, #12]
 8012fb4:	f003 0303 	and.w	r3, r3, #3
 8012fb8:	2b00      	cmp	r3, #0
 8012fba:	d006      	beq.n	8012fca <tcp_enqueue_flags+0xea>
 8012fbc:	4b37      	ldr	r3, [pc, #220]	; (801309c <tcp_enqueue_flags+0x1bc>)
 8012fbe:	f240 4242 	movw	r2, #1090	; 0x442
 8012fc2:	493b      	ldr	r1, [pc, #236]	; (80130b0 <tcp_enqueue_flags+0x1d0>)
 8012fc4:	4837      	ldr	r0, [pc, #220]	; (80130a4 <tcp_enqueue_flags+0x1c4>)
 8012fc6:	f003 ff67 	bl	8016e98 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8012fca:	68fb      	ldr	r3, [r7, #12]
 8012fcc:	891b      	ldrh	r3, [r3, #8]
 8012fce:	2b00      	cmp	r3, #0
 8012fd0:	d006      	beq.n	8012fe0 <tcp_enqueue_flags+0x100>
 8012fd2:	4b32      	ldr	r3, [pc, #200]	; (801309c <tcp_enqueue_flags+0x1bc>)
 8012fd4:	f240 4243 	movw	r2, #1091	; 0x443
 8012fd8:	4936      	ldr	r1, [pc, #216]	; (80130b4 <tcp_enqueue_flags+0x1d4>)
 8012fda:	4832      	ldr	r0, [pc, #200]	; (80130a4 <tcp_enqueue_flags+0x1c4>)
 8012fdc:	f003 ff5c 	bl	8016e98 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8012fe0:	687b      	ldr	r3, [r7, #4]
 8012fe2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012fe4:	2b00      	cmp	r3, #0
 8012fe6:	d103      	bne.n	8012ff0 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8012fe8:	687b      	ldr	r3, [r7, #4]
 8012fea:	68fa      	ldr	r2, [r7, #12]
 8012fec:	66da      	str	r2, [r3, #108]	; 0x6c
 8012fee:	e00d      	b.n	801300c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8012ff0:	687b      	ldr	r3, [r7, #4]
 8012ff2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012ff4:	61bb      	str	r3, [r7, #24]
 8012ff6:	e002      	b.n	8012ffe <tcp_enqueue_flags+0x11e>
 8012ff8:	69bb      	ldr	r3, [r7, #24]
 8012ffa:	681b      	ldr	r3, [r3, #0]
 8012ffc:	61bb      	str	r3, [r7, #24]
 8012ffe:	69bb      	ldr	r3, [r7, #24]
 8013000:	681b      	ldr	r3, [r3, #0]
 8013002:	2b00      	cmp	r3, #0
 8013004:	d1f8      	bne.n	8012ff8 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8013006:	69bb      	ldr	r3, [r7, #24]
 8013008:	68fa      	ldr	r2, [r7, #12]
 801300a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801300c:	687b      	ldr	r3, [r7, #4]
 801300e:	2200      	movs	r2, #0
 8013010:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8013014:	78fb      	ldrb	r3, [r7, #3]
 8013016:	f003 0302 	and.w	r3, r3, #2
 801301a:	2b00      	cmp	r3, #0
 801301c:	d104      	bne.n	8013028 <tcp_enqueue_flags+0x148>
 801301e:	78fb      	ldrb	r3, [r7, #3]
 8013020:	f003 0301 	and.w	r3, r3, #1
 8013024:	2b00      	cmp	r3, #0
 8013026:	d004      	beq.n	8013032 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8013028:	687b      	ldr	r3, [r7, #4]
 801302a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801302c:	1c5a      	adds	r2, r3, #1
 801302e:	687b      	ldr	r3, [r7, #4]
 8013030:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8013032:	78fb      	ldrb	r3, [r7, #3]
 8013034:	f003 0301 	and.w	r3, r3, #1
 8013038:	2b00      	cmp	r3, #0
 801303a:	d006      	beq.n	801304a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 801303c:	687b      	ldr	r3, [r7, #4]
 801303e:	8b5b      	ldrh	r3, [r3, #26]
 8013040:	f043 0320 	orr.w	r3, r3, #32
 8013044:	b29a      	uxth	r2, r3
 8013046:	687b      	ldr	r3, [r7, #4]
 8013048:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801304a:	68fb      	ldr	r3, [r7, #12]
 801304c:	685b      	ldr	r3, [r3, #4]
 801304e:	4618      	mov	r0, r3
 8013050:	f7fa fd3e 	bl	800dad0 <pbuf_clen>
 8013054:	4603      	mov	r3, r0
 8013056:	461a      	mov	r2, r3
 8013058:	687b      	ldr	r3, [r7, #4]
 801305a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801305e:	4413      	add	r3, r2
 8013060:	b29a      	uxth	r2, r3
 8013062:	687b      	ldr	r3, [r7, #4]
 8013064:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8013068:	687b      	ldr	r3, [r7, #4]
 801306a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801306e:	2b00      	cmp	r3, #0
 8013070:	d00e      	beq.n	8013090 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8013072:	687b      	ldr	r3, [r7, #4]
 8013074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013076:	2b00      	cmp	r3, #0
 8013078:	d10a      	bne.n	8013090 <tcp_enqueue_flags+0x1b0>
 801307a:	687b      	ldr	r3, [r7, #4]
 801307c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801307e:	2b00      	cmp	r3, #0
 8013080:	d106      	bne.n	8013090 <tcp_enqueue_flags+0x1b0>
 8013082:	4b06      	ldr	r3, [pc, #24]	; (801309c <tcp_enqueue_flags+0x1bc>)
 8013084:	f240 4265 	movw	r2, #1125	; 0x465
 8013088:	490b      	ldr	r1, [pc, #44]	; (80130b8 <tcp_enqueue_flags+0x1d8>)
 801308a:	4806      	ldr	r0, [pc, #24]	; (80130a4 <tcp_enqueue_flags+0x1c4>)
 801308c:	f003 ff04 	bl	8016e98 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8013090:	2300      	movs	r3, #0
}
 8013092:	4618      	mov	r0, r3
 8013094:	3720      	adds	r7, #32
 8013096:	46bd      	mov	sp, r7
 8013098:	bd80      	pop	{r7, pc}
 801309a:	bf00      	nop
 801309c:	08019760 	.word	0x08019760
 80130a0:	08019b84 	.word	0x08019b84
 80130a4:	080197b4 	.word	0x080197b4
 80130a8:	08019bdc 	.word	0x08019bdc
 80130ac:	08019bfc 	.word	0x08019bfc
 80130b0:	08019c38 	.word	0x08019c38
 80130b4:	08019c50 	.word	0x08019c50
 80130b8:	08019c7c 	.word	0x08019c7c

080130bc <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 80130bc:	b5b0      	push	{r4, r5, r7, lr}
 80130be:	b08a      	sub	sp, #40	; 0x28
 80130c0:	af00      	add	r7, sp, #0
 80130c2:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 80130c4:	687b      	ldr	r3, [r7, #4]
 80130c6:	2b00      	cmp	r3, #0
 80130c8:	d106      	bne.n	80130d8 <tcp_output+0x1c>
 80130ca:	4b9e      	ldr	r3, [pc, #632]	; (8013344 <tcp_output+0x288>)
 80130cc:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80130d0:	499d      	ldr	r1, [pc, #628]	; (8013348 <tcp_output+0x28c>)
 80130d2:	489e      	ldr	r0, [pc, #632]	; (801334c <tcp_output+0x290>)
 80130d4:	f003 fee0 	bl	8016e98 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80130d8:	687b      	ldr	r3, [r7, #4]
 80130da:	7d1b      	ldrb	r3, [r3, #20]
 80130dc:	2b01      	cmp	r3, #1
 80130de:	d106      	bne.n	80130ee <tcp_output+0x32>
 80130e0:	4b98      	ldr	r3, [pc, #608]	; (8013344 <tcp_output+0x288>)
 80130e2:	f240 42e3 	movw	r2, #1251	; 0x4e3
 80130e6:	499a      	ldr	r1, [pc, #616]	; (8013350 <tcp_output+0x294>)
 80130e8:	4898      	ldr	r0, [pc, #608]	; (801334c <tcp_output+0x290>)
 80130ea:	f003 fed5 	bl	8016e98 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80130ee:	4b99      	ldr	r3, [pc, #612]	; (8013354 <tcp_output+0x298>)
 80130f0:	681b      	ldr	r3, [r3, #0]
 80130f2:	687a      	ldr	r2, [r7, #4]
 80130f4:	429a      	cmp	r2, r3
 80130f6:	d101      	bne.n	80130fc <tcp_output+0x40>
    return ERR_OK;
 80130f8:	2300      	movs	r3, #0
 80130fa:	e1ce      	b.n	801349a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80130fc:	687b      	ldr	r3, [r7, #4]
 80130fe:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013102:	687b      	ldr	r3, [r7, #4]
 8013104:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013108:	4293      	cmp	r3, r2
 801310a:	bf28      	it	cs
 801310c:	4613      	movcs	r3, r2
 801310e:	b29b      	uxth	r3, r3
 8013110:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8013112:	687b      	ldr	r3, [r7, #4]
 8013114:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013116:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8013118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801311a:	2b00      	cmp	r3, #0
 801311c:	d10b      	bne.n	8013136 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801311e:	687b      	ldr	r3, [r7, #4]
 8013120:	8b5b      	ldrh	r3, [r3, #26]
 8013122:	f003 0302 	and.w	r3, r3, #2
 8013126:	2b00      	cmp	r3, #0
 8013128:	f000 81aa 	beq.w	8013480 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 801312c:	6878      	ldr	r0, [r7, #4]
 801312e:	f000 fdcb 	bl	8013cc8 <tcp_send_empty_ack>
 8013132:	4603      	mov	r3, r0
 8013134:	e1b1      	b.n	801349a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8013136:	6879      	ldr	r1, [r7, #4]
 8013138:	687b      	ldr	r3, [r7, #4]
 801313a:	3304      	adds	r3, #4
 801313c:	461a      	mov	r2, r3
 801313e:	6878      	ldr	r0, [r7, #4]
 8013140:	f7ff f824 	bl	801218c <tcp_route>
 8013144:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8013146:	697b      	ldr	r3, [r7, #20]
 8013148:	2b00      	cmp	r3, #0
 801314a:	d102      	bne.n	8013152 <tcp_output+0x96>
    return ERR_RTE;
 801314c:	f06f 0303 	mvn.w	r3, #3
 8013150:	e1a3      	b.n	801349a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8013152:	687b      	ldr	r3, [r7, #4]
 8013154:	2b00      	cmp	r3, #0
 8013156:	d003      	beq.n	8013160 <tcp_output+0xa4>
 8013158:	687b      	ldr	r3, [r7, #4]
 801315a:	681b      	ldr	r3, [r3, #0]
 801315c:	2b00      	cmp	r3, #0
 801315e:	d111      	bne.n	8013184 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8013160:	697b      	ldr	r3, [r7, #20]
 8013162:	2b00      	cmp	r3, #0
 8013164:	d002      	beq.n	801316c <tcp_output+0xb0>
 8013166:	697b      	ldr	r3, [r7, #20]
 8013168:	3304      	adds	r3, #4
 801316a:	e000      	b.n	801316e <tcp_output+0xb2>
 801316c:	2300      	movs	r3, #0
 801316e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8013170:	693b      	ldr	r3, [r7, #16]
 8013172:	2b00      	cmp	r3, #0
 8013174:	d102      	bne.n	801317c <tcp_output+0xc0>
      return ERR_RTE;
 8013176:	f06f 0303 	mvn.w	r3, #3
 801317a:	e18e      	b.n	801349a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801317c:	693b      	ldr	r3, [r7, #16]
 801317e:	681a      	ldr	r2, [r3, #0]
 8013180:	687b      	ldr	r3, [r7, #4]
 8013182:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8013184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013186:	68db      	ldr	r3, [r3, #12]
 8013188:	685b      	ldr	r3, [r3, #4]
 801318a:	4618      	mov	r0, r3
 801318c:	f7f8 ff6d 	bl	800c06a <lwip_htonl>
 8013190:	4602      	mov	r2, r0
 8013192:	687b      	ldr	r3, [r7, #4]
 8013194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013196:	1ad3      	subs	r3, r2, r3
 8013198:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801319a:	8912      	ldrh	r2, [r2, #8]
 801319c:	4413      	add	r3, r2
 801319e:	69ba      	ldr	r2, [r7, #24]
 80131a0:	429a      	cmp	r2, r3
 80131a2:	d227      	bcs.n	80131f4 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80131a4:	687b      	ldr	r3, [r7, #4]
 80131a6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80131aa:	461a      	mov	r2, r3
 80131ac:	69bb      	ldr	r3, [r7, #24]
 80131ae:	4293      	cmp	r3, r2
 80131b0:	d114      	bne.n	80131dc <tcp_output+0x120>
 80131b2:	687b      	ldr	r3, [r7, #4]
 80131b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80131b6:	2b00      	cmp	r3, #0
 80131b8:	d110      	bne.n	80131dc <tcp_output+0x120>
 80131ba:	687b      	ldr	r3, [r7, #4]
 80131bc:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80131c0:	2b00      	cmp	r3, #0
 80131c2:	d10b      	bne.n	80131dc <tcp_output+0x120>
      pcb->persist_cnt = 0;
 80131c4:	687b      	ldr	r3, [r7, #4]
 80131c6:	2200      	movs	r2, #0
 80131c8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 80131cc:	687b      	ldr	r3, [r7, #4]
 80131ce:	2201      	movs	r2, #1
 80131d0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 80131d4:	687b      	ldr	r3, [r7, #4]
 80131d6:	2200      	movs	r2, #0
 80131d8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 80131dc:	687b      	ldr	r3, [r7, #4]
 80131de:	8b5b      	ldrh	r3, [r3, #26]
 80131e0:	f003 0302 	and.w	r3, r3, #2
 80131e4:	2b00      	cmp	r3, #0
 80131e6:	f000 814d 	beq.w	8013484 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 80131ea:	6878      	ldr	r0, [r7, #4]
 80131ec:	f000 fd6c 	bl	8013cc8 <tcp_send_empty_ack>
 80131f0:	4603      	mov	r3, r0
 80131f2:	e152      	b.n	801349a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 80131f4:	687b      	ldr	r3, [r7, #4]
 80131f6:	2200      	movs	r2, #0
 80131f8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 80131fc:	687b      	ldr	r3, [r7, #4]
 80131fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013200:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8013202:	6a3b      	ldr	r3, [r7, #32]
 8013204:	2b00      	cmp	r3, #0
 8013206:	f000 811c 	beq.w	8013442 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801320a:	e002      	b.n	8013212 <tcp_output+0x156>
 801320c:	6a3b      	ldr	r3, [r7, #32]
 801320e:	681b      	ldr	r3, [r3, #0]
 8013210:	623b      	str	r3, [r7, #32]
 8013212:	6a3b      	ldr	r3, [r7, #32]
 8013214:	681b      	ldr	r3, [r3, #0]
 8013216:	2b00      	cmp	r3, #0
 8013218:	d1f8      	bne.n	801320c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801321a:	e112      	b.n	8013442 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801321c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801321e:	68db      	ldr	r3, [r3, #12]
 8013220:	899b      	ldrh	r3, [r3, #12]
 8013222:	b29b      	uxth	r3, r3
 8013224:	4618      	mov	r0, r3
 8013226:	f7f8 ff0b 	bl	800c040 <lwip_htons>
 801322a:	4603      	mov	r3, r0
 801322c:	b2db      	uxtb	r3, r3
 801322e:	f003 0304 	and.w	r3, r3, #4
 8013232:	2b00      	cmp	r3, #0
 8013234:	d006      	beq.n	8013244 <tcp_output+0x188>
 8013236:	4b43      	ldr	r3, [pc, #268]	; (8013344 <tcp_output+0x288>)
 8013238:	f240 5236 	movw	r2, #1334	; 0x536
 801323c:	4946      	ldr	r1, [pc, #280]	; (8013358 <tcp_output+0x29c>)
 801323e:	4843      	ldr	r0, [pc, #268]	; (801334c <tcp_output+0x290>)
 8013240:	f003 fe2a 	bl	8016e98 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8013244:	687b      	ldr	r3, [r7, #4]
 8013246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013248:	2b00      	cmp	r3, #0
 801324a:	d01f      	beq.n	801328c <tcp_output+0x1d0>
 801324c:	687b      	ldr	r3, [r7, #4]
 801324e:	8b5b      	ldrh	r3, [r3, #26]
 8013250:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8013254:	2b00      	cmp	r3, #0
 8013256:	d119      	bne.n	801328c <tcp_output+0x1d0>
 8013258:	687b      	ldr	r3, [r7, #4]
 801325a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801325c:	2b00      	cmp	r3, #0
 801325e:	d00b      	beq.n	8013278 <tcp_output+0x1bc>
 8013260:	687b      	ldr	r3, [r7, #4]
 8013262:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013264:	681b      	ldr	r3, [r3, #0]
 8013266:	2b00      	cmp	r3, #0
 8013268:	d110      	bne.n	801328c <tcp_output+0x1d0>
 801326a:	687b      	ldr	r3, [r7, #4]
 801326c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801326e:	891a      	ldrh	r2, [r3, #8]
 8013270:	687b      	ldr	r3, [r7, #4]
 8013272:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013274:	429a      	cmp	r2, r3
 8013276:	d209      	bcs.n	801328c <tcp_output+0x1d0>
 8013278:	687b      	ldr	r3, [r7, #4]
 801327a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801327e:	2b00      	cmp	r3, #0
 8013280:	d004      	beq.n	801328c <tcp_output+0x1d0>
 8013282:	687b      	ldr	r3, [r7, #4]
 8013284:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013288:	2b08      	cmp	r3, #8
 801328a:	d901      	bls.n	8013290 <tcp_output+0x1d4>
 801328c:	2301      	movs	r3, #1
 801328e:	e000      	b.n	8013292 <tcp_output+0x1d6>
 8013290:	2300      	movs	r3, #0
 8013292:	2b00      	cmp	r3, #0
 8013294:	d106      	bne.n	80132a4 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8013296:	687b      	ldr	r3, [r7, #4]
 8013298:	8b5b      	ldrh	r3, [r3, #26]
 801329a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801329e:	2b00      	cmp	r3, #0
 80132a0:	f000 80e4 	beq.w	801346c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80132a4:	687b      	ldr	r3, [r7, #4]
 80132a6:	7d1b      	ldrb	r3, [r3, #20]
 80132a8:	2b02      	cmp	r3, #2
 80132aa:	d00d      	beq.n	80132c8 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80132ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132ae:	68db      	ldr	r3, [r3, #12]
 80132b0:	899b      	ldrh	r3, [r3, #12]
 80132b2:	b29c      	uxth	r4, r3
 80132b4:	2010      	movs	r0, #16
 80132b6:	f7f8 fec3 	bl	800c040 <lwip_htons>
 80132ba:	4603      	mov	r3, r0
 80132bc:	461a      	mov	r2, r3
 80132be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132c0:	68db      	ldr	r3, [r3, #12]
 80132c2:	4322      	orrs	r2, r4
 80132c4:	b292      	uxth	r2, r2
 80132c6:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 80132c8:	697a      	ldr	r2, [r7, #20]
 80132ca:	6879      	ldr	r1, [r7, #4]
 80132cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80132ce:	f000 f909 	bl	80134e4 <tcp_output_segment>
 80132d2:	4603      	mov	r3, r0
 80132d4:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80132d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80132da:	2b00      	cmp	r3, #0
 80132dc:	d009      	beq.n	80132f2 <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80132de:	687b      	ldr	r3, [r7, #4]
 80132e0:	8b5b      	ldrh	r3, [r3, #26]
 80132e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80132e6:	b29a      	uxth	r2, r3
 80132e8:	687b      	ldr	r3, [r7, #4]
 80132ea:	835a      	strh	r2, [r3, #26]
      return err;
 80132ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80132f0:	e0d3      	b.n	801349a <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 80132f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132f4:	681a      	ldr	r2, [r3, #0]
 80132f6:	687b      	ldr	r3, [r7, #4]
 80132f8:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 80132fa:	687b      	ldr	r3, [r7, #4]
 80132fc:	7d1b      	ldrb	r3, [r3, #20]
 80132fe:	2b02      	cmp	r3, #2
 8013300:	d006      	beq.n	8013310 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013302:	687b      	ldr	r3, [r7, #4]
 8013304:	8b5b      	ldrh	r3, [r3, #26]
 8013306:	f023 0303 	bic.w	r3, r3, #3
 801330a:	b29a      	uxth	r2, r3
 801330c:	687b      	ldr	r3, [r7, #4]
 801330e:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8013310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013312:	68db      	ldr	r3, [r3, #12]
 8013314:	685b      	ldr	r3, [r3, #4]
 8013316:	4618      	mov	r0, r3
 8013318:	f7f8 fea7 	bl	800c06a <lwip_htonl>
 801331c:	4604      	mov	r4, r0
 801331e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013320:	891b      	ldrh	r3, [r3, #8]
 8013322:	461d      	mov	r5, r3
 8013324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013326:	68db      	ldr	r3, [r3, #12]
 8013328:	899b      	ldrh	r3, [r3, #12]
 801332a:	b29b      	uxth	r3, r3
 801332c:	4618      	mov	r0, r3
 801332e:	f7f8 fe87 	bl	800c040 <lwip_htons>
 8013332:	4603      	mov	r3, r0
 8013334:	b2db      	uxtb	r3, r3
 8013336:	f003 0303 	and.w	r3, r3, #3
 801333a:	2b00      	cmp	r3, #0
 801333c:	d00e      	beq.n	801335c <tcp_output+0x2a0>
 801333e:	2301      	movs	r3, #1
 8013340:	e00d      	b.n	801335e <tcp_output+0x2a2>
 8013342:	bf00      	nop
 8013344:	08019760 	.word	0x08019760
 8013348:	08019ca4 	.word	0x08019ca4
 801334c:	080197b4 	.word	0x080197b4
 8013350:	08019cbc 	.word	0x08019cbc
 8013354:	240079bc 	.word	0x240079bc
 8013358:	08019ce4 	.word	0x08019ce4
 801335c:	2300      	movs	r3, #0
 801335e:	442b      	add	r3, r5
 8013360:	4423      	add	r3, r4
 8013362:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8013364:	687b      	ldr	r3, [r7, #4]
 8013366:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013368:	68bb      	ldr	r3, [r7, #8]
 801336a:	1ad3      	subs	r3, r2, r3
 801336c:	2b00      	cmp	r3, #0
 801336e:	da02      	bge.n	8013376 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8013370:	687b      	ldr	r3, [r7, #4]
 8013372:	68ba      	ldr	r2, [r7, #8]
 8013374:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8013376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013378:	891b      	ldrh	r3, [r3, #8]
 801337a:	461c      	mov	r4, r3
 801337c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801337e:	68db      	ldr	r3, [r3, #12]
 8013380:	899b      	ldrh	r3, [r3, #12]
 8013382:	b29b      	uxth	r3, r3
 8013384:	4618      	mov	r0, r3
 8013386:	f7f8 fe5b 	bl	800c040 <lwip_htons>
 801338a:	4603      	mov	r3, r0
 801338c:	b2db      	uxtb	r3, r3
 801338e:	f003 0303 	and.w	r3, r3, #3
 8013392:	2b00      	cmp	r3, #0
 8013394:	d001      	beq.n	801339a <tcp_output+0x2de>
 8013396:	2301      	movs	r3, #1
 8013398:	e000      	b.n	801339c <tcp_output+0x2e0>
 801339a:	2300      	movs	r3, #0
 801339c:	4423      	add	r3, r4
 801339e:	2b00      	cmp	r3, #0
 80133a0:	d049      	beq.n	8013436 <tcp_output+0x37a>
      seg->next = NULL;
 80133a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133a4:	2200      	movs	r2, #0
 80133a6:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80133a8:	687b      	ldr	r3, [r7, #4]
 80133aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80133ac:	2b00      	cmp	r3, #0
 80133ae:	d105      	bne.n	80133bc <tcp_output+0x300>
        pcb->unacked = seg;
 80133b0:	687b      	ldr	r3, [r7, #4]
 80133b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80133b4:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 80133b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133b8:	623b      	str	r3, [r7, #32]
 80133ba:	e03f      	b.n	801343c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80133bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133be:	68db      	ldr	r3, [r3, #12]
 80133c0:	685b      	ldr	r3, [r3, #4]
 80133c2:	4618      	mov	r0, r3
 80133c4:	f7f8 fe51 	bl	800c06a <lwip_htonl>
 80133c8:	4604      	mov	r4, r0
 80133ca:	6a3b      	ldr	r3, [r7, #32]
 80133cc:	68db      	ldr	r3, [r3, #12]
 80133ce:	685b      	ldr	r3, [r3, #4]
 80133d0:	4618      	mov	r0, r3
 80133d2:	f7f8 fe4a 	bl	800c06a <lwip_htonl>
 80133d6:	4603      	mov	r3, r0
 80133d8:	1ae3      	subs	r3, r4, r3
 80133da:	2b00      	cmp	r3, #0
 80133dc:	da24      	bge.n	8013428 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80133de:	687b      	ldr	r3, [r7, #4]
 80133e0:	3370      	adds	r3, #112	; 0x70
 80133e2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80133e4:	e002      	b.n	80133ec <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 80133e6:	69fb      	ldr	r3, [r7, #28]
 80133e8:	681b      	ldr	r3, [r3, #0]
 80133ea:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80133ec:	69fb      	ldr	r3, [r7, #28]
 80133ee:	681b      	ldr	r3, [r3, #0]
 80133f0:	2b00      	cmp	r3, #0
 80133f2:	d011      	beq.n	8013418 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80133f4:	69fb      	ldr	r3, [r7, #28]
 80133f6:	681b      	ldr	r3, [r3, #0]
 80133f8:	68db      	ldr	r3, [r3, #12]
 80133fa:	685b      	ldr	r3, [r3, #4]
 80133fc:	4618      	mov	r0, r3
 80133fe:	f7f8 fe34 	bl	800c06a <lwip_htonl>
 8013402:	4604      	mov	r4, r0
 8013404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013406:	68db      	ldr	r3, [r3, #12]
 8013408:	685b      	ldr	r3, [r3, #4]
 801340a:	4618      	mov	r0, r3
 801340c:	f7f8 fe2d 	bl	800c06a <lwip_htonl>
 8013410:	4603      	mov	r3, r0
 8013412:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8013414:	2b00      	cmp	r3, #0
 8013416:	dbe6      	blt.n	80133e6 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8013418:	69fb      	ldr	r3, [r7, #28]
 801341a:	681a      	ldr	r2, [r3, #0]
 801341c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801341e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8013420:	69fb      	ldr	r3, [r7, #28]
 8013422:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013424:	601a      	str	r2, [r3, #0]
 8013426:	e009      	b.n	801343c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8013428:	6a3b      	ldr	r3, [r7, #32]
 801342a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801342c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801342e:	6a3b      	ldr	r3, [r7, #32]
 8013430:	681b      	ldr	r3, [r3, #0]
 8013432:	623b      	str	r3, [r7, #32]
 8013434:	e002      	b.n	801343c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8013436:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013438:	f7fb ff05 	bl	800f246 <tcp_seg_free>
    }
    seg = pcb->unsent;
 801343c:	687b      	ldr	r3, [r7, #4]
 801343e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013440:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8013442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013444:	2b00      	cmp	r3, #0
 8013446:	d012      	beq.n	801346e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8013448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801344a:	68db      	ldr	r3, [r3, #12]
 801344c:	685b      	ldr	r3, [r3, #4]
 801344e:	4618      	mov	r0, r3
 8013450:	f7f8 fe0b 	bl	800c06a <lwip_htonl>
 8013454:	4602      	mov	r2, r0
 8013456:	687b      	ldr	r3, [r7, #4]
 8013458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801345a:	1ad3      	subs	r3, r2, r3
 801345c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801345e:	8912      	ldrh	r2, [r2, #8]
 8013460:	4413      	add	r3, r2
  while (seg != NULL &&
 8013462:	69ba      	ldr	r2, [r7, #24]
 8013464:	429a      	cmp	r2, r3
 8013466:	f4bf aed9 	bcs.w	801321c <tcp_output+0x160>
 801346a:	e000      	b.n	801346e <tcp_output+0x3b2>
      break;
 801346c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801346e:	687b      	ldr	r3, [r7, #4]
 8013470:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013472:	2b00      	cmp	r3, #0
 8013474:	d108      	bne.n	8013488 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8013476:	687b      	ldr	r3, [r7, #4]
 8013478:	2200      	movs	r2, #0
 801347a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801347e:	e004      	b.n	801348a <tcp_output+0x3ce>
    goto output_done;
 8013480:	bf00      	nop
 8013482:	e002      	b.n	801348a <tcp_output+0x3ce>
    goto output_done;
 8013484:	bf00      	nop
 8013486:	e000      	b.n	801348a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8013488:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801348a:	687b      	ldr	r3, [r7, #4]
 801348c:	8b5b      	ldrh	r3, [r3, #26]
 801348e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013492:	b29a      	uxth	r2, r3
 8013494:	687b      	ldr	r3, [r7, #4]
 8013496:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8013498:	2300      	movs	r3, #0
}
 801349a:	4618      	mov	r0, r3
 801349c:	3728      	adds	r7, #40	; 0x28
 801349e:	46bd      	mov	sp, r7
 80134a0:	bdb0      	pop	{r4, r5, r7, pc}
 80134a2:	bf00      	nop

080134a4 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80134a4:	b580      	push	{r7, lr}
 80134a6:	b082      	sub	sp, #8
 80134a8:	af00      	add	r7, sp, #0
 80134aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80134ac:	687b      	ldr	r3, [r7, #4]
 80134ae:	2b00      	cmp	r3, #0
 80134b0:	d106      	bne.n	80134c0 <tcp_output_segment_busy+0x1c>
 80134b2:	4b09      	ldr	r3, [pc, #36]	; (80134d8 <tcp_output_segment_busy+0x34>)
 80134b4:	f240 529a 	movw	r2, #1434	; 0x59a
 80134b8:	4908      	ldr	r1, [pc, #32]	; (80134dc <tcp_output_segment_busy+0x38>)
 80134ba:	4809      	ldr	r0, [pc, #36]	; (80134e0 <tcp_output_segment_busy+0x3c>)
 80134bc:	f003 fcec 	bl	8016e98 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80134c0:	687b      	ldr	r3, [r7, #4]
 80134c2:	685b      	ldr	r3, [r3, #4]
 80134c4:	7b9b      	ldrb	r3, [r3, #14]
 80134c6:	2b01      	cmp	r3, #1
 80134c8:	d001      	beq.n	80134ce <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80134ca:	2301      	movs	r3, #1
 80134cc:	e000      	b.n	80134d0 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80134ce:	2300      	movs	r3, #0
}
 80134d0:	4618      	mov	r0, r3
 80134d2:	3708      	adds	r7, #8
 80134d4:	46bd      	mov	sp, r7
 80134d6:	bd80      	pop	{r7, pc}
 80134d8:	08019760 	.word	0x08019760
 80134dc:	08019cfc 	.word	0x08019cfc
 80134e0:	080197b4 	.word	0x080197b4

080134e4 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80134e4:	b5b0      	push	{r4, r5, r7, lr}
 80134e6:	b08c      	sub	sp, #48	; 0x30
 80134e8:	af04      	add	r7, sp, #16
 80134ea:	60f8      	str	r0, [r7, #12]
 80134ec:	60b9      	str	r1, [r7, #8]
 80134ee:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 80134f0:	68fb      	ldr	r3, [r7, #12]
 80134f2:	2b00      	cmp	r3, #0
 80134f4:	d106      	bne.n	8013504 <tcp_output_segment+0x20>
 80134f6:	4b63      	ldr	r3, [pc, #396]	; (8013684 <tcp_output_segment+0x1a0>)
 80134f8:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 80134fc:	4962      	ldr	r1, [pc, #392]	; (8013688 <tcp_output_segment+0x1a4>)
 80134fe:	4863      	ldr	r0, [pc, #396]	; (801368c <tcp_output_segment+0x1a8>)
 8013500:	f003 fcca 	bl	8016e98 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8013504:	68bb      	ldr	r3, [r7, #8]
 8013506:	2b00      	cmp	r3, #0
 8013508:	d106      	bne.n	8013518 <tcp_output_segment+0x34>
 801350a:	4b5e      	ldr	r3, [pc, #376]	; (8013684 <tcp_output_segment+0x1a0>)
 801350c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8013510:	495f      	ldr	r1, [pc, #380]	; (8013690 <tcp_output_segment+0x1ac>)
 8013512:	485e      	ldr	r0, [pc, #376]	; (801368c <tcp_output_segment+0x1a8>)
 8013514:	f003 fcc0 	bl	8016e98 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8013518:	687b      	ldr	r3, [r7, #4]
 801351a:	2b00      	cmp	r3, #0
 801351c:	d106      	bne.n	801352c <tcp_output_segment+0x48>
 801351e:	4b59      	ldr	r3, [pc, #356]	; (8013684 <tcp_output_segment+0x1a0>)
 8013520:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8013524:	495b      	ldr	r1, [pc, #364]	; (8013694 <tcp_output_segment+0x1b0>)
 8013526:	4859      	ldr	r0, [pc, #356]	; (801368c <tcp_output_segment+0x1a8>)
 8013528:	f003 fcb6 	bl	8016e98 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801352c:	68f8      	ldr	r0, [r7, #12]
 801352e:	f7ff ffb9 	bl	80134a4 <tcp_output_segment_busy>
 8013532:	4603      	mov	r3, r0
 8013534:	2b00      	cmp	r3, #0
 8013536:	d001      	beq.n	801353c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8013538:	2300      	movs	r3, #0
 801353a:	e09f      	b.n	801367c <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801353c:	68bb      	ldr	r3, [r7, #8]
 801353e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013540:	68fb      	ldr	r3, [r7, #12]
 8013542:	68dc      	ldr	r4, [r3, #12]
 8013544:	4610      	mov	r0, r2
 8013546:	f7f8 fd90 	bl	800c06a <lwip_htonl>
 801354a:	4603      	mov	r3, r0
 801354c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801354e:	68bb      	ldr	r3, [r7, #8]
 8013550:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8013552:	68fb      	ldr	r3, [r7, #12]
 8013554:	68dc      	ldr	r4, [r3, #12]
 8013556:	4610      	mov	r0, r2
 8013558:	f7f8 fd72 	bl	800c040 <lwip_htons>
 801355c:	4603      	mov	r3, r0
 801355e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8013560:	68bb      	ldr	r3, [r7, #8]
 8013562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013564:	68ba      	ldr	r2, [r7, #8]
 8013566:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8013568:	441a      	add	r2, r3
 801356a:	68bb      	ldr	r3, [r7, #8]
 801356c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801356e:	68fb      	ldr	r3, [r7, #12]
 8013570:	68db      	ldr	r3, [r3, #12]
 8013572:	3314      	adds	r3, #20
 8013574:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8013576:	68fb      	ldr	r3, [r7, #12]
 8013578:	7a9b      	ldrb	r3, [r3, #10]
 801357a:	f003 0301 	and.w	r3, r3, #1
 801357e:	2b00      	cmp	r3, #0
 8013580:	d015      	beq.n	80135ae <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8013582:	68bb      	ldr	r3, [r7, #8]
 8013584:	3304      	adds	r3, #4
 8013586:	461a      	mov	r2, r3
 8013588:	6879      	ldr	r1, [r7, #4]
 801358a:	f44f 7006 	mov.w	r0, #536	; 0x218
 801358e:	f7fc fa37 	bl	800fa00 <tcp_eff_send_mss_netif>
 8013592:	4603      	mov	r3, r0
 8013594:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8013596:	8b7b      	ldrh	r3, [r7, #26]
 8013598:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 801359c:	4618      	mov	r0, r3
 801359e:	f7f8 fd64 	bl	800c06a <lwip_htonl>
 80135a2:	4602      	mov	r2, r0
 80135a4:	69fb      	ldr	r3, [r7, #28]
 80135a6:	601a      	str	r2, [r3, #0]
    opts += 1;
 80135a8:	69fb      	ldr	r3, [r7, #28]
 80135aa:	3304      	adds	r3, #4
 80135ac:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80135ae:	68bb      	ldr	r3, [r7, #8]
 80135b0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80135b4:	2b00      	cmp	r3, #0
 80135b6:	da02      	bge.n	80135be <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80135b8:	68bb      	ldr	r3, [r7, #8]
 80135ba:	2200      	movs	r2, #0
 80135bc:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 80135be:	68bb      	ldr	r3, [r7, #8]
 80135c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80135c2:	2b00      	cmp	r3, #0
 80135c4:	d10c      	bne.n	80135e0 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80135c6:	4b34      	ldr	r3, [pc, #208]	; (8013698 <tcp_output_segment+0x1b4>)
 80135c8:	681a      	ldr	r2, [r3, #0]
 80135ca:	68bb      	ldr	r3, [r7, #8]
 80135cc:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80135ce:	68fb      	ldr	r3, [r7, #12]
 80135d0:	68db      	ldr	r3, [r3, #12]
 80135d2:	685b      	ldr	r3, [r3, #4]
 80135d4:	4618      	mov	r0, r3
 80135d6:	f7f8 fd48 	bl	800c06a <lwip_htonl>
 80135da:	4602      	mov	r2, r0
 80135dc:	68bb      	ldr	r3, [r7, #8]
 80135de:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80135e0:	68fb      	ldr	r3, [r7, #12]
 80135e2:	68da      	ldr	r2, [r3, #12]
 80135e4:	68fb      	ldr	r3, [r7, #12]
 80135e6:	685b      	ldr	r3, [r3, #4]
 80135e8:	685b      	ldr	r3, [r3, #4]
 80135ea:	1ad3      	subs	r3, r2, r3
 80135ec:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80135ee:	68fb      	ldr	r3, [r7, #12]
 80135f0:	685b      	ldr	r3, [r3, #4]
 80135f2:	8959      	ldrh	r1, [r3, #10]
 80135f4:	68fb      	ldr	r3, [r7, #12]
 80135f6:	685b      	ldr	r3, [r3, #4]
 80135f8:	8b3a      	ldrh	r2, [r7, #24]
 80135fa:	1a8a      	subs	r2, r1, r2
 80135fc:	b292      	uxth	r2, r2
 80135fe:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8013600:	68fb      	ldr	r3, [r7, #12]
 8013602:	685b      	ldr	r3, [r3, #4]
 8013604:	8919      	ldrh	r1, [r3, #8]
 8013606:	68fb      	ldr	r3, [r7, #12]
 8013608:	685b      	ldr	r3, [r3, #4]
 801360a:	8b3a      	ldrh	r2, [r7, #24]
 801360c:	1a8a      	subs	r2, r1, r2
 801360e:	b292      	uxth	r2, r2
 8013610:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8013612:	68fb      	ldr	r3, [r7, #12]
 8013614:	685b      	ldr	r3, [r3, #4]
 8013616:	68fa      	ldr	r2, [r7, #12]
 8013618:	68d2      	ldr	r2, [r2, #12]
 801361a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801361c:	68fb      	ldr	r3, [r7, #12]
 801361e:	68db      	ldr	r3, [r3, #12]
 8013620:	2200      	movs	r2, #0
 8013622:	741a      	strb	r2, [r3, #16]
 8013624:	2200      	movs	r2, #0
 8013626:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8013628:	68fb      	ldr	r3, [r7, #12]
 801362a:	68db      	ldr	r3, [r3, #12]
 801362c:	f103 0214 	add.w	r2, r3, #20
 8013630:	68fb      	ldr	r3, [r7, #12]
 8013632:	7a9b      	ldrb	r3, [r3, #10]
 8013634:	009b      	lsls	r3, r3, #2
 8013636:	f003 0304 	and.w	r3, r3, #4
 801363a:	4413      	add	r3, r2
 801363c:	69fa      	ldr	r2, [r7, #28]
 801363e:	429a      	cmp	r2, r3
 8013640:	d006      	beq.n	8013650 <tcp_output_segment+0x16c>
 8013642:	4b10      	ldr	r3, [pc, #64]	; (8013684 <tcp_output_segment+0x1a0>)
 8013644:	f240 621c 	movw	r2, #1564	; 0x61c
 8013648:	4914      	ldr	r1, [pc, #80]	; (801369c <tcp_output_segment+0x1b8>)
 801364a:	4810      	ldr	r0, [pc, #64]	; (801368c <tcp_output_segment+0x1a8>)
 801364c:	f003 fc24 	bl	8016e98 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8013650:	68fb      	ldr	r3, [r7, #12]
 8013652:	6858      	ldr	r0, [r3, #4]
 8013654:	68b9      	ldr	r1, [r7, #8]
 8013656:	68bb      	ldr	r3, [r7, #8]
 8013658:	1d1c      	adds	r4, r3, #4
 801365a:	68bb      	ldr	r3, [r7, #8]
 801365c:	7add      	ldrb	r5, [r3, #11]
 801365e:	68bb      	ldr	r3, [r7, #8]
 8013660:	7a9b      	ldrb	r3, [r3, #10]
 8013662:	687a      	ldr	r2, [r7, #4]
 8013664:	9202      	str	r2, [sp, #8]
 8013666:	2206      	movs	r2, #6
 8013668:	9201      	str	r2, [sp, #4]
 801366a:	9300      	str	r3, [sp, #0]
 801366c:	462b      	mov	r3, r5
 801366e:	4622      	mov	r2, r4
 8013670:	f002 fa8c 	bl	8015b8c <ip4_output_if>
 8013674:	4603      	mov	r3, r0
 8013676:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8013678:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801367c:	4618      	mov	r0, r3
 801367e:	3720      	adds	r7, #32
 8013680:	46bd      	mov	sp, r7
 8013682:	bdb0      	pop	{r4, r5, r7, pc}
 8013684:	08019760 	.word	0x08019760
 8013688:	08019d24 	.word	0x08019d24
 801368c:	080197b4 	.word	0x080197b4
 8013690:	08019d44 	.word	0x08019d44
 8013694:	08019d64 	.word	0x08019d64
 8013698:	240079ac 	.word	0x240079ac
 801369c:	08019d88 	.word	0x08019d88

080136a0 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80136a0:	b5b0      	push	{r4, r5, r7, lr}
 80136a2:	b084      	sub	sp, #16
 80136a4:	af00      	add	r7, sp, #0
 80136a6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80136a8:	687b      	ldr	r3, [r7, #4]
 80136aa:	2b00      	cmp	r3, #0
 80136ac:	d106      	bne.n	80136bc <tcp_rexmit_rto_prepare+0x1c>
 80136ae:	4b31      	ldr	r3, [pc, #196]	; (8013774 <tcp_rexmit_rto_prepare+0xd4>)
 80136b0:	f240 6263 	movw	r2, #1635	; 0x663
 80136b4:	4930      	ldr	r1, [pc, #192]	; (8013778 <tcp_rexmit_rto_prepare+0xd8>)
 80136b6:	4831      	ldr	r0, [pc, #196]	; (801377c <tcp_rexmit_rto_prepare+0xdc>)
 80136b8:	f003 fbee 	bl	8016e98 <iprintf>

  if (pcb->unacked == NULL) {
 80136bc:	687b      	ldr	r3, [r7, #4]
 80136be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80136c0:	2b00      	cmp	r3, #0
 80136c2:	d102      	bne.n	80136ca <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80136c4:	f06f 0305 	mvn.w	r3, #5
 80136c8:	e050      	b.n	801376c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80136ca:	687b      	ldr	r3, [r7, #4]
 80136cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80136ce:	60fb      	str	r3, [r7, #12]
 80136d0:	e00b      	b.n	80136ea <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80136d2:	68f8      	ldr	r0, [r7, #12]
 80136d4:	f7ff fee6 	bl	80134a4 <tcp_output_segment_busy>
 80136d8:	4603      	mov	r3, r0
 80136da:	2b00      	cmp	r3, #0
 80136dc:	d002      	beq.n	80136e4 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80136de:	f06f 0305 	mvn.w	r3, #5
 80136e2:	e043      	b.n	801376c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80136e4:	68fb      	ldr	r3, [r7, #12]
 80136e6:	681b      	ldr	r3, [r3, #0]
 80136e8:	60fb      	str	r3, [r7, #12]
 80136ea:	68fb      	ldr	r3, [r7, #12]
 80136ec:	681b      	ldr	r3, [r3, #0]
 80136ee:	2b00      	cmp	r3, #0
 80136f0:	d1ef      	bne.n	80136d2 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80136f2:	68f8      	ldr	r0, [r7, #12]
 80136f4:	f7ff fed6 	bl	80134a4 <tcp_output_segment_busy>
 80136f8:	4603      	mov	r3, r0
 80136fa:	2b00      	cmp	r3, #0
 80136fc:	d002      	beq.n	8013704 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80136fe:	f06f 0305 	mvn.w	r3, #5
 8013702:	e033      	b.n	801376c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8013704:	687b      	ldr	r3, [r7, #4]
 8013706:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8013708:	68fb      	ldr	r3, [r7, #12]
 801370a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801370c:	687b      	ldr	r3, [r7, #4]
 801370e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8013710:	687b      	ldr	r3, [r7, #4]
 8013712:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8013714:	687b      	ldr	r3, [r7, #4]
 8013716:	2200      	movs	r2, #0
 8013718:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801371a:	687b      	ldr	r3, [r7, #4]
 801371c:	8b5b      	ldrh	r3, [r3, #26]
 801371e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8013722:	b29a      	uxth	r2, r3
 8013724:	687b      	ldr	r3, [r7, #4]
 8013726:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8013728:	68fb      	ldr	r3, [r7, #12]
 801372a:	68db      	ldr	r3, [r3, #12]
 801372c:	685b      	ldr	r3, [r3, #4]
 801372e:	4618      	mov	r0, r3
 8013730:	f7f8 fc9b 	bl	800c06a <lwip_htonl>
 8013734:	4604      	mov	r4, r0
 8013736:	68fb      	ldr	r3, [r7, #12]
 8013738:	891b      	ldrh	r3, [r3, #8]
 801373a:	461d      	mov	r5, r3
 801373c:	68fb      	ldr	r3, [r7, #12]
 801373e:	68db      	ldr	r3, [r3, #12]
 8013740:	899b      	ldrh	r3, [r3, #12]
 8013742:	b29b      	uxth	r3, r3
 8013744:	4618      	mov	r0, r3
 8013746:	f7f8 fc7b 	bl	800c040 <lwip_htons>
 801374a:	4603      	mov	r3, r0
 801374c:	b2db      	uxtb	r3, r3
 801374e:	f003 0303 	and.w	r3, r3, #3
 8013752:	2b00      	cmp	r3, #0
 8013754:	d001      	beq.n	801375a <tcp_rexmit_rto_prepare+0xba>
 8013756:	2301      	movs	r3, #1
 8013758:	e000      	b.n	801375c <tcp_rexmit_rto_prepare+0xbc>
 801375a:	2300      	movs	r3, #0
 801375c:	442b      	add	r3, r5
 801375e:	18e2      	adds	r2, r4, r3
 8013760:	687b      	ldr	r3, [r7, #4]
 8013762:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8013764:	687b      	ldr	r3, [r7, #4]
 8013766:	2200      	movs	r2, #0
 8013768:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801376a:	2300      	movs	r3, #0
}
 801376c:	4618      	mov	r0, r3
 801376e:	3710      	adds	r7, #16
 8013770:	46bd      	mov	sp, r7
 8013772:	bdb0      	pop	{r4, r5, r7, pc}
 8013774:	08019760 	.word	0x08019760
 8013778:	08019d9c 	.word	0x08019d9c
 801377c:	080197b4 	.word	0x080197b4

08013780 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8013780:	b580      	push	{r7, lr}
 8013782:	b082      	sub	sp, #8
 8013784:	af00      	add	r7, sp, #0
 8013786:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8013788:	687b      	ldr	r3, [r7, #4]
 801378a:	2b00      	cmp	r3, #0
 801378c:	d106      	bne.n	801379c <tcp_rexmit_rto_commit+0x1c>
 801378e:	4b0d      	ldr	r3, [pc, #52]	; (80137c4 <tcp_rexmit_rto_commit+0x44>)
 8013790:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8013794:	490c      	ldr	r1, [pc, #48]	; (80137c8 <tcp_rexmit_rto_commit+0x48>)
 8013796:	480d      	ldr	r0, [pc, #52]	; (80137cc <tcp_rexmit_rto_commit+0x4c>)
 8013798:	f003 fb7e 	bl	8016e98 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801379c:	687b      	ldr	r3, [r7, #4]
 801379e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80137a2:	2bff      	cmp	r3, #255	; 0xff
 80137a4:	d007      	beq.n	80137b6 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80137a6:	687b      	ldr	r3, [r7, #4]
 80137a8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80137ac:	3301      	adds	r3, #1
 80137ae:	b2da      	uxtb	r2, r3
 80137b0:	687b      	ldr	r3, [r7, #4]
 80137b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80137b6:	6878      	ldr	r0, [r7, #4]
 80137b8:	f7ff fc80 	bl	80130bc <tcp_output>
}
 80137bc:	bf00      	nop
 80137be:	3708      	adds	r7, #8
 80137c0:	46bd      	mov	sp, r7
 80137c2:	bd80      	pop	{r7, pc}
 80137c4:	08019760 	.word	0x08019760
 80137c8:	08019dc0 	.word	0x08019dc0
 80137cc:	080197b4 	.word	0x080197b4

080137d0 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80137d0:	b580      	push	{r7, lr}
 80137d2:	b082      	sub	sp, #8
 80137d4:	af00      	add	r7, sp, #0
 80137d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80137d8:	687b      	ldr	r3, [r7, #4]
 80137da:	2b00      	cmp	r3, #0
 80137dc:	d106      	bne.n	80137ec <tcp_rexmit_rto+0x1c>
 80137de:	4b0a      	ldr	r3, [pc, #40]	; (8013808 <tcp_rexmit_rto+0x38>)
 80137e0:	f240 62ad 	movw	r2, #1709	; 0x6ad
 80137e4:	4909      	ldr	r1, [pc, #36]	; (801380c <tcp_rexmit_rto+0x3c>)
 80137e6:	480a      	ldr	r0, [pc, #40]	; (8013810 <tcp_rexmit_rto+0x40>)
 80137e8:	f003 fb56 	bl	8016e98 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80137ec:	6878      	ldr	r0, [r7, #4]
 80137ee:	f7ff ff57 	bl	80136a0 <tcp_rexmit_rto_prepare>
 80137f2:	4603      	mov	r3, r0
 80137f4:	2b00      	cmp	r3, #0
 80137f6:	d102      	bne.n	80137fe <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 80137f8:	6878      	ldr	r0, [r7, #4]
 80137fa:	f7ff ffc1 	bl	8013780 <tcp_rexmit_rto_commit>
  }
}
 80137fe:	bf00      	nop
 8013800:	3708      	adds	r7, #8
 8013802:	46bd      	mov	sp, r7
 8013804:	bd80      	pop	{r7, pc}
 8013806:	bf00      	nop
 8013808:	08019760 	.word	0x08019760
 801380c:	08019de4 	.word	0x08019de4
 8013810:	080197b4 	.word	0x080197b4

08013814 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8013814:	b590      	push	{r4, r7, lr}
 8013816:	b085      	sub	sp, #20
 8013818:	af00      	add	r7, sp, #0
 801381a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801381c:	687b      	ldr	r3, [r7, #4]
 801381e:	2b00      	cmp	r3, #0
 8013820:	d106      	bne.n	8013830 <tcp_rexmit+0x1c>
 8013822:	4b2f      	ldr	r3, [pc, #188]	; (80138e0 <tcp_rexmit+0xcc>)
 8013824:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8013828:	492e      	ldr	r1, [pc, #184]	; (80138e4 <tcp_rexmit+0xd0>)
 801382a:	482f      	ldr	r0, [pc, #188]	; (80138e8 <tcp_rexmit+0xd4>)
 801382c:	f003 fb34 	bl	8016e98 <iprintf>

  if (pcb->unacked == NULL) {
 8013830:	687b      	ldr	r3, [r7, #4]
 8013832:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013834:	2b00      	cmp	r3, #0
 8013836:	d102      	bne.n	801383e <tcp_rexmit+0x2a>
    return ERR_VAL;
 8013838:	f06f 0305 	mvn.w	r3, #5
 801383c:	e04c      	b.n	80138d8 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801383e:	687b      	ldr	r3, [r7, #4]
 8013840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013842:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8013844:	68b8      	ldr	r0, [r7, #8]
 8013846:	f7ff fe2d 	bl	80134a4 <tcp_output_segment_busy>
 801384a:	4603      	mov	r3, r0
 801384c:	2b00      	cmp	r3, #0
 801384e:	d002      	beq.n	8013856 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8013850:	f06f 0305 	mvn.w	r3, #5
 8013854:	e040      	b.n	80138d8 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8013856:	68bb      	ldr	r3, [r7, #8]
 8013858:	681a      	ldr	r2, [r3, #0]
 801385a:	687b      	ldr	r3, [r7, #4]
 801385c:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801385e:	687b      	ldr	r3, [r7, #4]
 8013860:	336c      	adds	r3, #108	; 0x6c
 8013862:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8013864:	e002      	b.n	801386c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8013866:	68fb      	ldr	r3, [r7, #12]
 8013868:	681b      	ldr	r3, [r3, #0]
 801386a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801386c:	68fb      	ldr	r3, [r7, #12]
 801386e:	681b      	ldr	r3, [r3, #0]
 8013870:	2b00      	cmp	r3, #0
 8013872:	d011      	beq.n	8013898 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8013874:	68fb      	ldr	r3, [r7, #12]
 8013876:	681b      	ldr	r3, [r3, #0]
 8013878:	68db      	ldr	r3, [r3, #12]
 801387a:	685b      	ldr	r3, [r3, #4]
 801387c:	4618      	mov	r0, r3
 801387e:	f7f8 fbf4 	bl	800c06a <lwip_htonl>
 8013882:	4604      	mov	r4, r0
 8013884:	68bb      	ldr	r3, [r7, #8]
 8013886:	68db      	ldr	r3, [r3, #12]
 8013888:	685b      	ldr	r3, [r3, #4]
 801388a:	4618      	mov	r0, r3
 801388c:	f7f8 fbed 	bl	800c06a <lwip_htonl>
 8013890:	4603      	mov	r3, r0
 8013892:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8013894:	2b00      	cmp	r3, #0
 8013896:	dbe6      	blt.n	8013866 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8013898:	68fb      	ldr	r3, [r7, #12]
 801389a:	681a      	ldr	r2, [r3, #0]
 801389c:	68bb      	ldr	r3, [r7, #8]
 801389e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80138a0:	68fb      	ldr	r3, [r7, #12]
 80138a2:	68ba      	ldr	r2, [r7, #8]
 80138a4:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80138a6:	68bb      	ldr	r3, [r7, #8]
 80138a8:	681b      	ldr	r3, [r3, #0]
 80138aa:	2b00      	cmp	r3, #0
 80138ac:	d103      	bne.n	80138b6 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80138ae:	687b      	ldr	r3, [r7, #4]
 80138b0:	2200      	movs	r2, #0
 80138b2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80138b6:	687b      	ldr	r3, [r7, #4]
 80138b8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80138bc:	2bff      	cmp	r3, #255	; 0xff
 80138be:	d007      	beq.n	80138d0 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80138c0:	687b      	ldr	r3, [r7, #4]
 80138c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80138c6:	3301      	adds	r3, #1
 80138c8:	b2da      	uxtb	r2, r3
 80138ca:	687b      	ldr	r3, [r7, #4]
 80138cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80138d0:	687b      	ldr	r3, [r7, #4]
 80138d2:	2200      	movs	r2, #0
 80138d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 80138d6:	2300      	movs	r3, #0
}
 80138d8:	4618      	mov	r0, r3
 80138da:	3714      	adds	r7, #20
 80138dc:	46bd      	mov	sp, r7
 80138de:	bd90      	pop	{r4, r7, pc}
 80138e0:	08019760 	.word	0x08019760
 80138e4:	08019e00 	.word	0x08019e00
 80138e8:	080197b4 	.word	0x080197b4

080138ec <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80138ec:	b580      	push	{r7, lr}
 80138ee:	b082      	sub	sp, #8
 80138f0:	af00      	add	r7, sp, #0
 80138f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80138f4:	687b      	ldr	r3, [r7, #4]
 80138f6:	2b00      	cmp	r3, #0
 80138f8:	d106      	bne.n	8013908 <tcp_rexmit_fast+0x1c>
 80138fa:	4b2a      	ldr	r3, [pc, #168]	; (80139a4 <tcp_rexmit_fast+0xb8>)
 80138fc:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8013900:	4929      	ldr	r1, [pc, #164]	; (80139a8 <tcp_rexmit_fast+0xbc>)
 8013902:	482a      	ldr	r0, [pc, #168]	; (80139ac <tcp_rexmit_fast+0xc0>)
 8013904:	f003 fac8 	bl	8016e98 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8013908:	687b      	ldr	r3, [r7, #4]
 801390a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801390c:	2b00      	cmp	r3, #0
 801390e:	d045      	beq.n	801399c <tcp_rexmit_fast+0xb0>
 8013910:	687b      	ldr	r3, [r7, #4]
 8013912:	8b5b      	ldrh	r3, [r3, #26]
 8013914:	f003 0304 	and.w	r3, r3, #4
 8013918:	2b00      	cmp	r3, #0
 801391a:	d13f      	bne.n	801399c <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801391c:	6878      	ldr	r0, [r7, #4]
 801391e:	f7ff ff79 	bl	8013814 <tcp_rexmit>
 8013922:	4603      	mov	r3, r0
 8013924:	2b00      	cmp	r3, #0
 8013926:	d139      	bne.n	801399c <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8013928:	687b      	ldr	r3, [r7, #4]
 801392a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801392e:	687b      	ldr	r3, [r7, #4]
 8013930:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013934:	4293      	cmp	r3, r2
 8013936:	bf28      	it	cs
 8013938:	4613      	movcs	r3, r2
 801393a:	b29b      	uxth	r3, r3
 801393c:	2b00      	cmp	r3, #0
 801393e:	da00      	bge.n	8013942 <tcp_rexmit_fast+0x56>
 8013940:	3301      	adds	r3, #1
 8013942:	105b      	asrs	r3, r3, #1
 8013944:	b29a      	uxth	r2, r3
 8013946:	687b      	ldr	r3, [r7, #4]
 8013948:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801394c:	687b      	ldr	r3, [r7, #4]
 801394e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8013952:	461a      	mov	r2, r3
 8013954:	687b      	ldr	r3, [r7, #4]
 8013956:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013958:	005b      	lsls	r3, r3, #1
 801395a:	429a      	cmp	r2, r3
 801395c:	d206      	bcs.n	801396c <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801395e:	687b      	ldr	r3, [r7, #4]
 8013960:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013962:	005b      	lsls	r3, r3, #1
 8013964:	b29a      	uxth	r2, r3
 8013966:	687b      	ldr	r3, [r7, #4]
 8013968:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801396c:	687b      	ldr	r3, [r7, #4]
 801396e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8013972:	687b      	ldr	r3, [r7, #4]
 8013974:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013976:	4619      	mov	r1, r3
 8013978:	0049      	lsls	r1, r1, #1
 801397a:	440b      	add	r3, r1
 801397c:	b29b      	uxth	r3, r3
 801397e:	4413      	add	r3, r2
 8013980:	b29a      	uxth	r2, r3
 8013982:	687b      	ldr	r3, [r7, #4]
 8013984:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8013988:	687b      	ldr	r3, [r7, #4]
 801398a:	8b5b      	ldrh	r3, [r3, #26]
 801398c:	f043 0304 	orr.w	r3, r3, #4
 8013990:	b29a      	uxth	r2, r3
 8013992:	687b      	ldr	r3, [r7, #4]
 8013994:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8013996:	687b      	ldr	r3, [r7, #4]
 8013998:	2200      	movs	r2, #0
 801399a:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 801399c:	bf00      	nop
 801399e:	3708      	adds	r7, #8
 80139a0:	46bd      	mov	sp, r7
 80139a2:	bd80      	pop	{r7, pc}
 80139a4:	08019760 	.word	0x08019760
 80139a8:	08019e18 	.word	0x08019e18
 80139ac:	080197b4 	.word	0x080197b4

080139b0 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 80139b0:	b580      	push	{r7, lr}
 80139b2:	b086      	sub	sp, #24
 80139b4:	af00      	add	r7, sp, #0
 80139b6:	60f8      	str	r0, [r7, #12]
 80139b8:	607b      	str	r3, [r7, #4]
 80139ba:	460b      	mov	r3, r1
 80139bc:	817b      	strh	r3, [r7, #10]
 80139be:	4613      	mov	r3, r2
 80139c0:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80139c2:	897a      	ldrh	r2, [r7, #10]
 80139c4:	893b      	ldrh	r3, [r7, #8]
 80139c6:	4413      	add	r3, r2
 80139c8:	b29b      	uxth	r3, r3
 80139ca:	3314      	adds	r3, #20
 80139cc:	b29b      	uxth	r3, r3
 80139ce:	f44f 7220 	mov.w	r2, #640	; 0x280
 80139d2:	4619      	mov	r1, r3
 80139d4:	2022      	movs	r0, #34	; 0x22
 80139d6:	f7f9 fd09 	bl	800d3ec <pbuf_alloc>
 80139da:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80139dc:	697b      	ldr	r3, [r7, #20]
 80139de:	2b00      	cmp	r3, #0
 80139e0:	d04d      	beq.n	8013a7e <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80139e2:	897b      	ldrh	r3, [r7, #10]
 80139e4:	3313      	adds	r3, #19
 80139e6:	697a      	ldr	r2, [r7, #20]
 80139e8:	8952      	ldrh	r2, [r2, #10]
 80139ea:	4293      	cmp	r3, r2
 80139ec:	db06      	blt.n	80139fc <tcp_output_alloc_header_common+0x4c>
 80139ee:	4b26      	ldr	r3, [pc, #152]	; (8013a88 <tcp_output_alloc_header_common+0xd8>)
 80139f0:	f240 7223 	movw	r2, #1827	; 0x723
 80139f4:	4925      	ldr	r1, [pc, #148]	; (8013a8c <tcp_output_alloc_header_common+0xdc>)
 80139f6:	4826      	ldr	r0, [pc, #152]	; (8013a90 <tcp_output_alloc_header_common+0xe0>)
 80139f8:	f003 fa4e 	bl	8016e98 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80139fc:	697b      	ldr	r3, [r7, #20]
 80139fe:	685b      	ldr	r3, [r3, #4]
 8013a00:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8013a02:	8c3b      	ldrh	r3, [r7, #32]
 8013a04:	4618      	mov	r0, r3
 8013a06:	f7f8 fb1b 	bl	800c040 <lwip_htons>
 8013a0a:	4603      	mov	r3, r0
 8013a0c:	461a      	mov	r2, r3
 8013a0e:	693b      	ldr	r3, [r7, #16]
 8013a10:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8013a12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013a14:	4618      	mov	r0, r3
 8013a16:	f7f8 fb13 	bl	800c040 <lwip_htons>
 8013a1a:	4603      	mov	r3, r0
 8013a1c:	461a      	mov	r2, r3
 8013a1e:	693b      	ldr	r3, [r7, #16]
 8013a20:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8013a22:	693b      	ldr	r3, [r7, #16]
 8013a24:	687a      	ldr	r2, [r7, #4]
 8013a26:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8013a28:	68f8      	ldr	r0, [r7, #12]
 8013a2a:	f7f8 fb1e 	bl	800c06a <lwip_htonl>
 8013a2e:	4602      	mov	r2, r0
 8013a30:	693b      	ldr	r3, [r7, #16]
 8013a32:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8013a34:	897b      	ldrh	r3, [r7, #10]
 8013a36:	089b      	lsrs	r3, r3, #2
 8013a38:	b29b      	uxth	r3, r3
 8013a3a:	3305      	adds	r3, #5
 8013a3c:	b29b      	uxth	r3, r3
 8013a3e:	031b      	lsls	r3, r3, #12
 8013a40:	b29a      	uxth	r2, r3
 8013a42:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013a46:	b29b      	uxth	r3, r3
 8013a48:	4313      	orrs	r3, r2
 8013a4a:	b29b      	uxth	r3, r3
 8013a4c:	4618      	mov	r0, r3
 8013a4e:	f7f8 faf7 	bl	800c040 <lwip_htons>
 8013a52:	4603      	mov	r3, r0
 8013a54:	461a      	mov	r2, r3
 8013a56:	693b      	ldr	r3, [r7, #16]
 8013a58:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8013a5a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8013a5c:	4618      	mov	r0, r3
 8013a5e:	f7f8 faef 	bl	800c040 <lwip_htons>
 8013a62:	4603      	mov	r3, r0
 8013a64:	461a      	mov	r2, r3
 8013a66:	693b      	ldr	r3, [r7, #16]
 8013a68:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8013a6a:	693b      	ldr	r3, [r7, #16]
 8013a6c:	2200      	movs	r2, #0
 8013a6e:	741a      	strb	r2, [r3, #16]
 8013a70:	2200      	movs	r2, #0
 8013a72:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8013a74:	693b      	ldr	r3, [r7, #16]
 8013a76:	2200      	movs	r2, #0
 8013a78:	749a      	strb	r2, [r3, #18]
 8013a7a:	2200      	movs	r2, #0
 8013a7c:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8013a7e:	697b      	ldr	r3, [r7, #20]
}
 8013a80:	4618      	mov	r0, r3
 8013a82:	3718      	adds	r7, #24
 8013a84:	46bd      	mov	sp, r7
 8013a86:	bd80      	pop	{r7, pc}
 8013a88:	08019760 	.word	0x08019760
 8013a8c:	08019e38 	.word	0x08019e38
 8013a90:	080197b4 	.word	0x080197b4

08013a94 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8013a94:	b5b0      	push	{r4, r5, r7, lr}
 8013a96:	b08a      	sub	sp, #40	; 0x28
 8013a98:	af04      	add	r7, sp, #16
 8013a9a:	60f8      	str	r0, [r7, #12]
 8013a9c:	607b      	str	r3, [r7, #4]
 8013a9e:	460b      	mov	r3, r1
 8013aa0:	817b      	strh	r3, [r7, #10]
 8013aa2:	4613      	mov	r3, r2
 8013aa4:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8013aa6:	68fb      	ldr	r3, [r7, #12]
 8013aa8:	2b00      	cmp	r3, #0
 8013aaa:	d106      	bne.n	8013aba <tcp_output_alloc_header+0x26>
 8013aac:	4b15      	ldr	r3, [pc, #84]	; (8013b04 <tcp_output_alloc_header+0x70>)
 8013aae:	f240 7242 	movw	r2, #1858	; 0x742
 8013ab2:	4915      	ldr	r1, [pc, #84]	; (8013b08 <tcp_output_alloc_header+0x74>)
 8013ab4:	4815      	ldr	r0, [pc, #84]	; (8013b0c <tcp_output_alloc_header+0x78>)
 8013ab6:	f003 f9ef 	bl	8016e98 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8013aba:	68fb      	ldr	r3, [r7, #12]
 8013abc:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8013abe:	68fb      	ldr	r3, [r7, #12]
 8013ac0:	8adb      	ldrh	r3, [r3, #22]
 8013ac2:	68fa      	ldr	r2, [r7, #12]
 8013ac4:	8b12      	ldrh	r2, [r2, #24]
 8013ac6:	68f9      	ldr	r1, [r7, #12]
 8013ac8:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8013aca:	893d      	ldrh	r5, [r7, #8]
 8013acc:	897c      	ldrh	r4, [r7, #10]
 8013ace:	9103      	str	r1, [sp, #12]
 8013ad0:	2110      	movs	r1, #16
 8013ad2:	9102      	str	r1, [sp, #8]
 8013ad4:	9201      	str	r2, [sp, #4]
 8013ad6:	9300      	str	r3, [sp, #0]
 8013ad8:	687b      	ldr	r3, [r7, #4]
 8013ada:	462a      	mov	r2, r5
 8013adc:	4621      	mov	r1, r4
 8013ade:	f7ff ff67 	bl	80139b0 <tcp_output_alloc_header_common>
 8013ae2:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8013ae4:	697b      	ldr	r3, [r7, #20]
 8013ae6:	2b00      	cmp	r3, #0
 8013ae8:	d006      	beq.n	8013af8 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8013aea:	68fb      	ldr	r3, [r7, #12]
 8013aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013aee:	68fa      	ldr	r2, [r7, #12]
 8013af0:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8013af2:	441a      	add	r2, r3
 8013af4:	68fb      	ldr	r3, [r7, #12]
 8013af6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8013af8:	697b      	ldr	r3, [r7, #20]
}
 8013afa:	4618      	mov	r0, r3
 8013afc:	3718      	adds	r7, #24
 8013afe:	46bd      	mov	sp, r7
 8013b00:	bdb0      	pop	{r4, r5, r7, pc}
 8013b02:	bf00      	nop
 8013b04:	08019760 	.word	0x08019760
 8013b08:	08019e68 	.word	0x08019e68
 8013b0c:	080197b4 	.word	0x080197b4

08013b10 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8013b10:	b580      	push	{r7, lr}
 8013b12:	b088      	sub	sp, #32
 8013b14:	af00      	add	r7, sp, #0
 8013b16:	60f8      	str	r0, [r7, #12]
 8013b18:	60b9      	str	r1, [r7, #8]
 8013b1a:	4611      	mov	r1, r2
 8013b1c:	461a      	mov	r2, r3
 8013b1e:	460b      	mov	r3, r1
 8013b20:	71fb      	strb	r3, [r7, #7]
 8013b22:	4613      	mov	r3, r2
 8013b24:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8013b26:	2300      	movs	r3, #0
 8013b28:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8013b2a:	68bb      	ldr	r3, [r7, #8]
 8013b2c:	2b00      	cmp	r3, #0
 8013b2e:	d106      	bne.n	8013b3e <tcp_output_fill_options+0x2e>
 8013b30:	4b13      	ldr	r3, [pc, #76]	; (8013b80 <tcp_output_fill_options+0x70>)
 8013b32:	f240 7256 	movw	r2, #1878	; 0x756
 8013b36:	4913      	ldr	r1, [pc, #76]	; (8013b84 <tcp_output_fill_options+0x74>)
 8013b38:	4813      	ldr	r0, [pc, #76]	; (8013b88 <tcp_output_fill_options+0x78>)
 8013b3a:	f003 f9ad 	bl	8016e98 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8013b3e:	68bb      	ldr	r3, [r7, #8]
 8013b40:	685b      	ldr	r3, [r3, #4]
 8013b42:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8013b44:	69bb      	ldr	r3, [r7, #24]
 8013b46:	3314      	adds	r3, #20
 8013b48:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8013b4a:	69bb      	ldr	r3, [r7, #24]
 8013b4c:	f103 0214 	add.w	r2, r3, #20
 8013b50:	8bfb      	ldrh	r3, [r7, #30]
 8013b52:	009b      	lsls	r3, r3, #2
 8013b54:	4619      	mov	r1, r3
 8013b56:	79fb      	ldrb	r3, [r7, #7]
 8013b58:	009b      	lsls	r3, r3, #2
 8013b5a:	f003 0304 	and.w	r3, r3, #4
 8013b5e:	440b      	add	r3, r1
 8013b60:	4413      	add	r3, r2
 8013b62:	697a      	ldr	r2, [r7, #20]
 8013b64:	429a      	cmp	r2, r3
 8013b66:	d006      	beq.n	8013b76 <tcp_output_fill_options+0x66>
 8013b68:	4b05      	ldr	r3, [pc, #20]	; (8013b80 <tcp_output_fill_options+0x70>)
 8013b6a:	f240 7275 	movw	r2, #1909	; 0x775
 8013b6e:	4907      	ldr	r1, [pc, #28]	; (8013b8c <tcp_output_fill_options+0x7c>)
 8013b70:	4805      	ldr	r0, [pc, #20]	; (8013b88 <tcp_output_fill_options+0x78>)
 8013b72:	f003 f991 	bl	8016e98 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8013b76:	bf00      	nop
 8013b78:	3720      	adds	r7, #32
 8013b7a:	46bd      	mov	sp, r7
 8013b7c:	bd80      	pop	{r7, pc}
 8013b7e:	bf00      	nop
 8013b80:	08019760 	.word	0x08019760
 8013b84:	08019e90 	.word	0x08019e90
 8013b88:	080197b4 	.word	0x080197b4
 8013b8c:	08019d88 	.word	0x08019d88

08013b90 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8013b90:	b580      	push	{r7, lr}
 8013b92:	b08a      	sub	sp, #40	; 0x28
 8013b94:	af04      	add	r7, sp, #16
 8013b96:	60f8      	str	r0, [r7, #12]
 8013b98:	60b9      	str	r1, [r7, #8]
 8013b9a:	607a      	str	r2, [r7, #4]
 8013b9c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8013b9e:	68bb      	ldr	r3, [r7, #8]
 8013ba0:	2b00      	cmp	r3, #0
 8013ba2:	d106      	bne.n	8013bb2 <tcp_output_control_segment+0x22>
 8013ba4:	4b1c      	ldr	r3, [pc, #112]	; (8013c18 <tcp_output_control_segment+0x88>)
 8013ba6:	f240 7287 	movw	r2, #1927	; 0x787
 8013baa:	491c      	ldr	r1, [pc, #112]	; (8013c1c <tcp_output_control_segment+0x8c>)
 8013bac:	481c      	ldr	r0, [pc, #112]	; (8013c20 <tcp_output_control_segment+0x90>)
 8013bae:	f003 f973 	bl	8016e98 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8013bb2:	683a      	ldr	r2, [r7, #0]
 8013bb4:	6879      	ldr	r1, [r7, #4]
 8013bb6:	68f8      	ldr	r0, [r7, #12]
 8013bb8:	f7fe fae8 	bl	801218c <tcp_route>
 8013bbc:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8013bbe:	693b      	ldr	r3, [r7, #16]
 8013bc0:	2b00      	cmp	r3, #0
 8013bc2:	d102      	bne.n	8013bca <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8013bc4:	23fc      	movs	r3, #252	; 0xfc
 8013bc6:	75fb      	strb	r3, [r7, #23]
 8013bc8:	e01c      	b.n	8013c04 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8013bca:	68fb      	ldr	r3, [r7, #12]
 8013bcc:	2b00      	cmp	r3, #0
 8013bce:	d006      	beq.n	8013bde <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8013bd0:	68fb      	ldr	r3, [r7, #12]
 8013bd2:	7adb      	ldrb	r3, [r3, #11]
 8013bd4:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8013bd6:	68fb      	ldr	r3, [r7, #12]
 8013bd8:	7a9b      	ldrb	r3, [r3, #10]
 8013bda:	757b      	strb	r3, [r7, #21]
 8013bdc:	e003      	b.n	8013be6 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8013bde:	23ff      	movs	r3, #255	; 0xff
 8013be0:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8013be2:	2300      	movs	r3, #0
 8013be4:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8013be6:	7dba      	ldrb	r2, [r7, #22]
 8013be8:	693b      	ldr	r3, [r7, #16]
 8013bea:	9302      	str	r3, [sp, #8]
 8013bec:	2306      	movs	r3, #6
 8013bee:	9301      	str	r3, [sp, #4]
 8013bf0:	7d7b      	ldrb	r3, [r7, #21]
 8013bf2:	9300      	str	r3, [sp, #0]
 8013bf4:	4613      	mov	r3, r2
 8013bf6:	683a      	ldr	r2, [r7, #0]
 8013bf8:	6879      	ldr	r1, [r7, #4]
 8013bfa:	68b8      	ldr	r0, [r7, #8]
 8013bfc:	f001 ffc6 	bl	8015b8c <ip4_output_if>
 8013c00:	4603      	mov	r3, r0
 8013c02:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8013c04:	68b8      	ldr	r0, [r7, #8]
 8013c06:	f7f9 fed5 	bl	800d9b4 <pbuf_free>
  return err;
 8013c0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013c0e:	4618      	mov	r0, r3
 8013c10:	3718      	adds	r7, #24
 8013c12:	46bd      	mov	sp, r7
 8013c14:	bd80      	pop	{r7, pc}
 8013c16:	bf00      	nop
 8013c18:	08019760 	.word	0x08019760
 8013c1c:	08019eb8 	.word	0x08019eb8
 8013c20:	080197b4 	.word	0x080197b4

08013c24 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8013c24:	b590      	push	{r4, r7, lr}
 8013c26:	b08b      	sub	sp, #44	; 0x2c
 8013c28:	af04      	add	r7, sp, #16
 8013c2a:	60f8      	str	r0, [r7, #12]
 8013c2c:	60b9      	str	r1, [r7, #8]
 8013c2e:	607a      	str	r2, [r7, #4]
 8013c30:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8013c32:	683b      	ldr	r3, [r7, #0]
 8013c34:	2b00      	cmp	r3, #0
 8013c36:	d106      	bne.n	8013c46 <tcp_rst+0x22>
 8013c38:	4b1f      	ldr	r3, [pc, #124]	; (8013cb8 <tcp_rst+0x94>)
 8013c3a:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8013c3e:	491f      	ldr	r1, [pc, #124]	; (8013cbc <tcp_rst+0x98>)
 8013c40:	481f      	ldr	r0, [pc, #124]	; (8013cc0 <tcp_rst+0x9c>)
 8013c42:	f003 f929 	bl	8016e98 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8013c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c48:	2b00      	cmp	r3, #0
 8013c4a:	d106      	bne.n	8013c5a <tcp_rst+0x36>
 8013c4c:	4b1a      	ldr	r3, [pc, #104]	; (8013cb8 <tcp_rst+0x94>)
 8013c4e:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8013c52:	491c      	ldr	r1, [pc, #112]	; (8013cc4 <tcp_rst+0xa0>)
 8013c54:	481a      	ldr	r0, [pc, #104]	; (8013cc0 <tcp_rst+0x9c>)
 8013c56:	f003 f91f 	bl	8016e98 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013c5a:	2300      	movs	r3, #0
 8013c5c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8013c5e:	f246 0308 	movw	r3, #24584	; 0x6008
 8013c62:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8013c64:	7dfb      	ldrb	r3, [r7, #23]
 8013c66:	b29c      	uxth	r4, r3
 8013c68:	68b8      	ldr	r0, [r7, #8]
 8013c6a:	f7f8 f9fe 	bl	800c06a <lwip_htonl>
 8013c6e:	4602      	mov	r2, r0
 8013c70:	8abb      	ldrh	r3, [r7, #20]
 8013c72:	9303      	str	r3, [sp, #12]
 8013c74:	2314      	movs	r3, #20
 8013c76:	9302      	str	r3, [sp, #8]
 8013c78:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8013c7a:	9301      	str	r3, [sp, #4]
 8013c7c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8013c7e:	9300      	str	r3, [sp, #0]
 8013c80:	4613      	mov	r3, r2
 8013c82:	2200      	movs	r2, #0
 8013c84:	4621      	mov	r1, r4
 8013c86:	6878      	ldr	r0, [r7, #4]
 8013c88:	f7ff fe92 	bl	80139b0 <tcp_output_alloc_header_common>
 8013c8c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8013c8e:	693b      	ldr	r3, [r7, #16]
 8013c90:	2b00      	cmp	r3, #0
 8013c92:	d00c      	beq.n	8013cae <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013c94:	7dfb      	ldrb	r3, [r7, #23]
 8013c96:	2200      	movs	r2, #0
 8013c98:	6939      	ldr	r1, [r7, #16]
 8013c9a:	68f8      	ldr	r0, [r7, #12]
 8013c9c:	f7ff ff38 	bl	8013b10 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8013ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ca2:	683a      	ldr	r2, [r7, #0]
 8013ca4:	6939      	ldr	r1, [r7, #16]
 8013ca6:	68f8      	ldr	r0, [r7, #12]
 8013ca8:	f7ff ff72 	bl	8013b90 <tcp_output_control_segment>
 8013cac:	e000      	b.n	8013cb0 <tcp_rst+0x8c>
    return;
 8013cae:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8013cb0:	371c      	adds	r7, #28
 8013cb2:	46bd      	mov	sp, r7
 8013cb4:	bd90      	pop	{r4, r7, pc}
 8013cb6:	bf00      	nop
 8013cb8:	08019760 	.word	0x08019760
 8013cbc:	08019ee4 	.word	0x08019ee4
 8013cc0:	080197b4 	.word	0x080197b4
 8013cc4:	08019f00 	.word	0x08019f00

08013cc8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8013cc8:	b590      	push	{r4, r7, lr}
 8013cca:	b087      	sub	sp, #28
 8013ccc:	af00      	add	r7, sp, #0
 8013cce:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8013cd0:	2300      	movs	r3, #0
 8013cd2:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8013cd4:	2300      	movs	r3, #0
 8013cd6:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8013cd8:	687b      	ldr	r3, [r7, #4]
 8013cda:	2b00      	cmp	r3, #0
 8013cdc:	d106      	bne.n	8013cec <tcp_send_empty_ack+0x24>
 8013cde:	4b28      	ldr	r3, [pc, #160]	; (8013d80 <tcp_send_empty_ack+0xb8>)
 8013ce0:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8013ce4:	4927      	ldr	r1, [pc, #156]	; (8013d84 <tcp_send_empty_ack+0xbc>)
 8013ce6:	4828      	ldr	r0, [pc, #160]	; (8013d88 <tcp_send_empty_ack+0xc0>)
 8013ce8:	f003 f8d6 	bl	8016e98 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8013cec:	7dfb      	ldrb	r3, [r7, #23]
 8013cee:	009b      	lsls	r3, r3, #2
 8013cf0:	b2db      	uxtb	r3, r3
 8013cf2:	f003 0304 	and.w	r3, r3, #4
 8013cf6:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8013cf8:	7d7b      	ldrb	r3, [r7, #21]
 8013cfa:	b29c      	uxth	r4, r3
 8013cfc:	687b      	ldr	r3, [r7, #4]
 8013cfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013d00:	4618      	mov	r0, r3
 8013d02:	f7f8 f9b2 	bl	800c06a <lwip_htonl>
 8013d06:	4603      	mov	r3, r0
 8013d08:	2200      	movs	r2, #0
 8013d0a:	4621      	mov	r1, r4
 8013d0c:	6878      	ldr	r0, [r7, #4]
 8013d0e:	f7ff fec1 	bl	8013a94 <tcp_output_alloc_header>
 8013d12:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013d14:	693b      	ldr	r3, [r7, #16]
 8013d16:	2b00      	cmp	r3, #0
 8013d18:	d109      	bne.n	8013d2e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013d1a:	687b      	ldr	r3, [r7, #4]
 8013d1c:	8b5b      	ldrh	r3, [r3, #26]
 8013d1e:	f043 0303 	orr.w	r3, r3, #3
 8013d22:	b29a      	uxth	r2, r3
 8013d24:	687b      	ldr	r3, [r7, #4]
 8013d26:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8013d28:	f06f 0301 	mvn.w	r3, #1
 8013d2c:	e023      	b.n	8013d76 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8013d2e:	7dbb      	ldrb	r3, [r7, #22]
 8013d30:	7dfa      	ldrb	r2, [r7, #23]
 8013d32:	6939      	ldr	r1, [r7, #16]
 8013d34:	6878      	ldr	r0, [r7, #4]
 8013d36:	f7ff feeb 	bl	8013b10 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013d3a:	687a      	ldr	r2, [r7, #4]
 8013d3c:	687b      	ldr	r3, [r7, #4]
 8013d3e:	3304      	adds	r3, #4
 8013d40:	6939      	ldr	r1, [r7, #16]
 8013d42:	6878      	ldr	r0, [r7, #4]
 8013d44:	f7ff ff24 	bl	8013b90 <tcp_output_control_segment>
 8013d48:	4603      	mov	r3, r0
 8013d4a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8013d4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013d50:	2b00      	cmp	r3, #0
 8013d52:	d007      	beq.n	8013d64 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013d54:	687b      	ldr	r3, [r7, #4]
 8013d56:	8b5b      	ldrh	r3, [r3, #26]
 8013d58:	f043 0303 	orr.w	r3, r3, #3
 8013d5c:	b29a      	uxth	r2, r3
 8013d5e:	687b      	ldr	r3, [r7, #4]
 8013d60:	835a      	strh	r2, [r3, #26]
 8013d62:	e006      	b.n	8013d72 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013d64:	687b      	ldr	r3, [r7, #4]
 8013d66:	8b5b      	ldrh	r3, [r3, #26]
 8013d68:	f023 0303 	bic.w	r3, r3, #3
 8013d6c:	b29a      	uxth	r2, r3
 8013d6e:	687b      	ldr	r3, [r7, #4]
 8013d70:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8013d72:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013d76:	4618      	mov	r0, r3
 8013d78:	371c      	adds	r7, #28
 8013d7a:	46bd      	mov	sp, r7
 8013d7c:	bd90      	pop	{r4, r7, pc}
 8013d7e:	bf00      	nop
 8013d80:	08019760 	.word	0x08019760
 8013d84:	08019f1c 	.word	0x08019f1c
 8013d88:	080197b4 	.word	0x080197b4

08013d8c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8013d8c:	b590      	push	{r4, r7, lr}
 8013d8e:	b087      	sub	sp, #28
 8013d90:	af00      	add	r7, sp, #0
 8013d92:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013d94:	2300      	movs	r3, #0
 8013d96:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8013d98:	687b      	ldr	r3, [r7, #4]
 8013d9a:	2b00      	cmp	r3, #0
 8013d9c:	d106      	bne.n	8013dac <tcp_keepalive+0x20>
 8013d9e:	4b18      	ldr	r3, [pc, #96]	; (8013e00 <tcp_keepalive+0x74>)
 8013da0:	f640 0224 	movw	r2, #2084	; 0x824
 8013da4:	4917      	ldr	r1, [pc, #92]	; (8013e04 <tcp_keepalive+0x78>)
 8013da6:	4818      	ldr	r0, [pc, #96]	; (8013e08 <tcp_keepalive+0x7c>)
 8013da8:	f003 f876 	bl	8016e98 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8013dac:	7dfb      	ldrb	r3, [r7, #23]
 8013dae:	b29c      	uxth	r4, r3
 8013db0:	687b      	ldr	r3, [r7, #4]
 8013db2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013db4:	3b01      	subs	r3, #1
 8013db6:	4618      	mov	r0, r3
 8013db8:	f7f8 f957 	bl	800c06a <lwip_htonl>
 8013dbc:	4603      	mov	r3, r0
 8013dbe:	2200      	movs	r2, #0
 8013dc0:	4621      	mov	r1, r4
 8013dc2:	6878      	ldr	r0, [r7, #4]
 8013dc4:	f7ff fe66 	bl	8013a94 <tcp_output_alloc_header>
 8013dc8:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013dca:	693b      	ldr	r3, [r7, #16]
 8013dcc:	2b00      	cmp	r3, #0
 8013dce:	d102      	bne.n	8013dd6 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8013dd0:	f04f 33ff 	mov.w	r3, #4294967295
 8013dd4:	e010      	b.n	8013df8 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013dd6:	7dfb      	ldrb	r3, [r7, #23]
 8013dd8:	2200      	movs	r2, #0
 8013dda:	6939      	ldr	r1, [r7, #16]
 8013ddc:	6878      	ldr	r0, [r7, #4]
 8013dde:	f7ff fe97 	bl	8013b10 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013de2:	687a      	ldr	r2, [r7, #4]
 8013de4:	687b      	ldr	r3, [r7, #4]
 8013de6:	3304      	adds	r3, #4
 8013de8:	6939      	ldr	r1, [r7, #16]
 8013dea:	6878      	ldr	r0, [r7, #4]
 8013dec:	f7ff fed0 	bl	8013b90 <tcp_output_control_segment>
 8013df0:	4603      	mov	r3, r0
 8013df2:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8013df4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013df8:	4618      	mov	r0, r3
 8013dfa:	371c      	adds	r7, #28
 8013dfc:	46bd      	mov	sp, r7
 8013dfe:	bd90      	pop	{r4, r7, pc}
 8013e00:	08019760 	.word	0x08019760
 8013e04:	08019f3c 	.word	0x08019f3c
 8013e08:	080197b4 	.word	0x080197b4

08013e0c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8013e0c:	b590      	push	{r4, r7, lr}
 8013e0e:	b08b      	sub	sp, #44	; 0x2c
 8013e10:	af00      	add	r7, sp, #0
 8013e12:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013e14:	2300      	movs	r3, #0
 8013e16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8013e1a:	687b      	ldr	r3, [r7, #4]
 8013e1c:	2b00      	cmp	r3, #0
 8013e1e:	d106      	bne.n	8013e2e <tcp_zero_window_probe+0x22>
 8013e20:	4b4c      	ldr	r3, [pc, #304]	; (8013f54 <tcp_zero_window_probe+0x148>)
 8013e22:	f640 024f 	movw	r2, #2127	; 0x84f
 8013e26:	494c      	ldr	r1, [pc, #304]	; (8013f58 <tcp_zero_window_probe+0x14c>)
 8013e28:	484c      	ldr	r0, [pc, #304]	; (8013f5c <tcp_zero_window_probe+0x150>)
 8013e2a:	f003 f835 	bl	8016e98 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8013e2e:	687b      	ldr	r3, [r7, #4]
 8013e30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013e32:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8013e34:	6a3b      	ldr	r3, [r7, #32]
 8013e36:	2b00      	cmp	r3, #0
 8013e38:	d101      	bne.n	8013e3e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8013e3a:	2300      	movs	r3, #0
 8013e3c:	e086      	b.n	8013f4c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8013e3e:	687b      	ldr	r3, [r7, #4]
 8013e40:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8013e44:	2bff      	cmp	r3, #255	; 0xff
 8013e46:	d007      	beq.n	8013e58 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8013e48:	687b      	ldr	r3, [r7, #4]
 8013e4a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8013e4e:	3301      	adds	r3, #1
 8013e50:	b2da      	uxtb	r2, r3
 8013e52:	687b      	ldr	r3, [r7, #4]
 8013e54:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8013e58:	6a3b      	ldr	r3, [r7, #32]
 8013e5a:	68db      	ldr	r3, [r3, #12]
 8013e5c:	899b      	ldrh	r3, [r3, #12]
 8013e5e:	b29b      	uxth	r3, r3
 8013e60:	4618      	mov	r0, r3
 8013e62:	f7f8 f8ed 	bl	800c040 <lwip_htons>
 8013e66:	4603      	mov	r3, r0
 8013e68:	b2db      	uxtb	r3, r3
 8013e6a:	f003 0301 	and.w	r3, r3, #1
 8013e6e:	2b00      	cmp	r3, #0
 8013e70:	d005      	beq.n	8013e7e <tcp_zero_window_probe+0x72>
 8013e72:	6a3b      	ldr	r3, [r7, #32]
 8013e74:	891b      	ldrh	r3, [r3, #8]
 8013e76:	2b00      	cmp	r3, #0
 8013e78:	d101      	bne.n	8013e7e <tcp_zero_window_probe+0x72>
 8013e7a:	2301      	movs	r3, #1
 8013e7c:	e000      	b.n	8013e80 <tcp_zero_window_probe+0x74>
 8013e7e:	2300      	movs	r3, #0
 8013e80:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8013e82:	7ffb      	ldrb	r3, [r7, #31]
 8013e84:	2b00      	cmp	r3, #0
 8013e86:	bf0c      	ite	eq
 8013e88:	2301      	moveq	r3, #1
 8013e8a:	2300      	movne	r3, #0
 8013e8c:	b2db      	uxtb	r3, r3
 8013e8e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8013e90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013e94:	b299      	uxth	r1, r3
 8013e96:	6a3b      	ldr	r3, [r7, #32]
 8013e98:	68db      	ldr	r3, [r3, #12]
 8013e9a:	685b      	ldr	r3, [r3, #4]
 8013e9c:	8bba      	ldrh	r2, [r7, #28]
 8013e9e:	6878      	ldr	r0, [r7, #4]
 8013ea0:	f7ff fdf8 	bl	8013a94 <tcp_output_alloc_header>
 8013ea4:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8013ea6:	69bb      	ldr	r3, [r7, #24]
 8013ea8:	2b00      	cmp	r3, #0
 8013eaa:	d102      	bne.n	8013eb2 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8013eac:	f04f 33ff 	mov.w	r3, #4294967295
 8013eb0:	e04c      	b.n	8013f4c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8013eb2:	69bb      	ldr	r3, [r7, #24]
 8013eb4:	685b      	ldr	r3, [r3, #4]
 8013eb6:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8013eb8:	7ffb      	ldrb	r3, [r7, #31]
 8013eba:	2b00      	cmp	r3, #0
 8013ebc:	d011      	beq.n	8013ee2 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8013ebe:	697b      	ldr	r3, [r7, #20]
 8013ec0:	899b      	ldrh	r3, [r3, #12]
 8013ec2:	b29b      	uxth	r3, r3
 8013ec4:	b21b      	sxth	r3, r3
 8013ec6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8013eca:	b21c      	sxth	r4, r3
 8013ecc:	2011      	movs	r0, #17
 8013ece:	f7f8 f8b7 	bl	800c040 <lwip_htons>
 8013ed2:	4603      	mov	r3, r0
 8013ed4:	b21b      	sxth	r3, r3
 8013ed6:	4323      	orrs	r3, r4
 8013ed8:	b21b      	sxth	r3, r3
 8013eda:	b29a      	uxth	r2, r3
 8013edc:	697b      	ldr	r3, [r7, #20]
 8013ede:	819a      	strh	r2, [r3, #12]
 8013ee0:	e010      	b.n	8013f04 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8013ee2:	69bb      	ldr	r3, [r7, #24]
 8013ee4:	685b      	ldr	r3, [r3, #4]
 8013ee6:	3314      	adds	r3, #20
 8013ee8:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8013eea:	6a3b      	ldr	r3, [r7, #32]
 8013eec:	6858      	ldr	r0, [r3, #4]
 8013eee:	6a3b      	ldr	r3, [r7, #32]
 8013ef0:	685b      	ldr	r3, [r3, #4]
 8013ef2:	891a      	ldrh	r2, [r3, #8]
 8013ef4:	6a3b      	ldr	r3, [r7, #32]
 8013ef6:	891b      	ldrh	r3, [r3, #8]
 8013ef8:	1ad3      	subs	r3, r2, r3
 8013efa:	b29b      	uxth	r3, r3
 8013efc:	2201      	movs	r2, #1
 8013efe:	6939      	ldr	r1, [r7, #16]
 8013f00:	f7f9 ff5e 	bl	800ddc0 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8013f04:	6a3b      	ldr	r3, [r7, #32]
 8013f06:	68db      	ldr	r3, [r3, #12]
 8013f08:	685b      	ldr	r3, [r3, #4]
 8013f0a:	4618      	mov	r0, r3
 8013f0c:	f7f8 f8ad 	bl	800c06a <lwip_htonl>
 8013f10:	4603      	mov	r3, r0
 8013f12:	3301      	adds	r3, #1
 8013f14:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8013f16:	687b      	ldr	r3, [r7, #4]
 8013f18:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013f1a:	68fb      	ldr	r3, [r7, #12]
 8013f1c:	1ad3      	subs	r3, r2, r3
 8013f1e:	2b00      	cmp	r3, #0
 8013f20:	da02      	bge.n	8013f28 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8013f22:	687b      	ldr	r3, [r7, #4]
 8013f24:	68fa      	ldr	r2, [r7, #12]
 8013f26:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013f28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013f2c:	2200      	movs	r2, #0
 8013f2e:	69b9      	ldr	r1, [r7, #24]
 8013f30:	6878      	ldr	r0, [r7, #4]
 8013f32:	f7ff fded 	bl	8013b10 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013f36:	687a      	ldr	r2, [r7, #4]
 8013f38:	687b      	ldr	r3, [r7, #4]
 8013f3a:	3304      	adds	r3, #4
 8013f3c:	69b9      	ldr	r1, [r7, #24]
 8013f3e:	6878      	ldr	r0, [r7, #4]
 8013f40:	f7ff fe26 	bl	8013b90 <tcp_output_control_segment>
 8013f44:	4603      	mov	r3, r0
 8013f46:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8013f48:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8013f4c:	4618      	mov	r0, r3
 8013f4e:	372c      	adds	r7, #44	; 0x2c
 8013f50:	46bd      	mov	sp, r7
 8013f52:	bd90      	pop	{r4, r7, pc}
 8013f54:	08019760 	.word	0x08019760
 8013f58:	08019f58 	.word	0x08019f58
 8013f5c:	080197b4 	.word	0x080197b4

08013f60 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8013f60:	b580      	push	{r7, lr}
 8013f62:	b082      	sub	sp, #8
 8013f64:	af00      	add	r7, sp, #0
 8013f66:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8013f68:	f7fa f818 	bl	800df9c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8013f6c:	4b0a      	ldr	r3, [pc, #40]	; (8013f98 <tcpip_tcp_timer+0x38>)
 8013f6e:	681b      	ldr	r3, [r3, #0]
 8013f70:	2b00      	cmp	r3, #0
 8013f72:	d103      	bne.n	8013f7c <tcpip_tcp_timer+0x1c>
 8013f74:	4b09      	ldr	r3, [pc, #36]	; (8013f9c <tcpip_tcp_timer+0x3c>)
 8013f76:	681b      	ldr	r3, [r3, #0]
 8013f78:	2b00      	cmp	r3, #0
 8013f7a:	d005      	beq.n	8013f88 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8013f7c:	2200      	movs	r2, #0
 8013f7e:	4908      	ldr	r1, [pc, #32]	; (8013fa0 <tcpip_tcp_timer+0x40>)
 8013f80:	20fa      	movs	r0, #250	; 0xfa
 8013f82:	f000 f8f3 	bl	801416c <sys_timeout>
 8013f86:	e003      	b.n	8013f90 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8013f88:	4b06      	ldr	r3, [pc, #24]	; (8013fa4 <tcpip_tcp_timer+0x44>)
 8013f8a:	2200      	movs	r2, #0
 8013f8c:	601a      	str	r2, [r3, #0]
  }
}
 8013f8e:	bf00      	nop
 8013f90:	bf00      	nop
 8013f92:	3708      	adds	r7, #8
 8013f94:	46bd      	mov	sp, r7
 8013f96:	bd80      	pop	{r7, pc}
 8013f98:	240079a8 	.word	0x240079a8
 8013f9c:	240079b8 	.word	0x240079b8
 8013fa0:	08013f61 	.word	0x08013f61
 8013fa4:	240040fc 	.word	0x240040fc

08013fa8 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8013fa8:	b580      	push	{r7, lr}
 8013faa:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8013fac:	4b0a      	ldr	r3, [pc, #40]	; (8013fd8 <tcp_timer_needed+0x30>)
 8013fae:	681b      	ldr	r3, [r3, #0]
 8013fb0:	2b00      	cmp	r3, #0
 8013fb2:	d10f      	bne.n	8013fd4 <tcp_timer_needed+0x2c>
 8013fb4:	4b09      	ldr	r3, [pc, #36]	; (8013fdc <tcp_timer_needed+0x34>)
 8013fb6:	681b      	ldr	r3, [r3, #0]
 8013fb8:	2b00      	cmp	r3, #0
 8013fba:	d103      	bne.n	8013fc4 <tcp_timer_needed+0x1c>
 8013fbc:	4b08      	ldr	r3, [pc, #32]	; (8013fe0 <tcp_timer_needed+0x38>)
 8013fbe:	681b      	ldr	r3, [r3, #0]
 8013fc0:	2b00      	cmp	r3, #0
 8013fc2:	d007      	beq.n	8013fd4 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8013fc4:	4b04      	ldr	r3, [pc, #16]	; (8013fd8 <tcp_timer_needed+0x30>)
 8013fc6:	2201      	movs	r2, #1
 8013fc8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8013fca:	2200      	movs	r2, #0
 8013fcc:	4905      	ldr	r1, [pc, #20]	; (8013fe4 <tcp_timer_needed+0x3c>)
 8013fce:	20fa      	movs	r0, #250	; 0xfa
 8013fd0:	f000 f8cc 	bl	801416c <sys_timeout>
  }
}
 8013fd4:	bf00      	nop
 8013fd6:	bd80      	pop	{r7, pc}
 8013fd8:	240040fc 	.word	0x240040fc
 8013fdc:	240079a8 	.word	0x240079a8
 8013fe0:	240079b8 	.word	0x240079b8
 8013fe4:	08013f61 	.word	0x08013f61

08013fe8 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8013fe8:	b580      	push	{r7, lr}
 8013fea:	b086      	sub	sp, #24
 8013fec:	af00      	add	r7, sp, #0
 8013fee:	60f8      	str	r0, [r7, #12]
 8013ff0:	60b9      	str	r1, [r7, #8]
 8013ff2:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8013ff4:	200a      	movs	r0, #10
 8013ff6:	f7f8 fdc3 	bl	800cb80 <memp_malloc>
 8013ffa:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8013ffc:	693b      	ldr	r3, [r7, #16]
 8013ffe:	2b00      	cmp	r3, #0
 8014000:	d109      	bne.n	8014016 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8014002:	693b      	ldr	r3, [r7, #16]
 8014004:	2b00      	cmp	r3, #0
 8014006:	d151      	bne.n	80140ac <sys_timeout_abs+0xc4>
 8014008:	4b2a      	ldr	r3, [pc, #168]	; (80140b4 <sys_timeout_abs+0xcc>)
 801400a:	22be      	movs	r2, #190	; 0xbe
 801400c:	492a      	ldr	r1, [pc, #168]	; (80140b8 <sys_timeout_abs+0xd0>)
 801400e:	482b      	ldr	r0, [pc, #172]	; (80140bc <sys_timeout_abs+0xd4>)
 8014010:	f002 ff42 	bl	8016e98 <iprintf>
    return;
 8014014:	e04a      	b.n	80140ac <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8014016:	693b      	ldr	r3, [r7, #16]
 8014018:	2200      	movs	r2, #0
 801401a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801401c:	693b      	ldr	r3, [r7, #16]
 801401e:	68ba      	ldr	r2, [r7, #8]
 8014020:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8014022:	693b      	ldr	r3, [r7, #16]
 8014024:	687a      	ldr	r2, [r7, #4]
 8014026:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8014028:	693b      	ldr	r3, [r7, #16]
 801402a:	68fa      	ldr	r2, [r7, #12]
 801402c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801402e:	4b24      	ldr	r3, [pc, #144]	; (80140c0 <sys_timeout_abs+0xd8>)
 8014030:	681b      	ldr	r3, [r3, #0]
 8014032:	2b00      	cmp	r3, #0
 8014034:	d103      	bne.n	801403e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8014036:	4a22      	ldr	r2, [pc, #136]	; (80140c0 <sys_timeout_abs+0xd8>)
 8014038:	693b      	ldr	r3, [r7, #16]
 801403a:	6013      	str	r3, [r2, #0]
    return;
 801403c:	e037      	b.n	80140ae <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801403e:	693b      	ldr	r3, [r7, #16]
 8014040:	685a      	ldr	r2, [r3, #4]
 8014042:	4b1f      	ldr	r3, [pc, #124]	; (80140c0 <sys_timeout_abs+0xd8>)
 8014044:	681b      	ldr	r3, [r3, #0]
 8014046:	685b      	ldr	r3, [r3, #4]
 8014048:	1ad3      	subs	r3, r2, r3
 801404a:	0fdb      	lsrs	r3, r3, #31
 801404c:	f003 0301 	and.w	r3, r3, #1
 8014050:	b2db      	uxtb	r3, r3
 8014052:	2b00      	cmp	r3, #0
 8014054:	d007      	beq.n	8014066 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8014056:	4b1a      	ldr	r3, [pc, #104]	; (80140c0 <sys_timeout_abs+0xd8>)
 8014058:	681a      	ldr	r2, [r3, #0]
 801405a:	693b      	ldr	r3, [r7, #16]
 801405c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801405e:	4a18      	ldr	r2, [pc, #96]	; (80140c0 <sys_timeout_abs+0xd8>)
 8014060:	693b      	ldr	r3, [r7, #16]
 8014062:	6013      	str	r3, [r2, #0]
 8014064:	e023      	b.n	80140ae <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8014066:	4b16      	ldr	r3, [pc, #88]	; (80140c0 <sys_timeout_abs+0xd8>)
 8014068:	681b      	ldr	r3, [r3, #0]
 801406a:	617b      	str	r3, [r7, #20]
 801406c:	e01a      	b.n	80140a4 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801406e:	697b      	ldr	r3, [r7, #20]
 8014070:	681b      	ldr	r3, [r3, #0]
 8014072:	2b00      	cmp	r3, #0
 8014074:	d00b      	beq.n	801408e <sys_timeout_abs+0xa6>
 8014076:	693b      	ldr	r3, [r7, #16]
 8014078:	685a      	ldr	r2, [r3, #4]
 801407a:	697b      	ldr	r3, [r7, #20]
 801407c:	681b      	ldr	r3, [r3, #0]
 801407e:	685b      	ldr	r3, [r3, #4]
 8014080:	1ad3      	subs	r3, r2, r3
 8014082:	0fdb      	lsrs	r3, r3, #31
 8014084:	f003 0301 	and.w	r3, r3, #1
 8014088:	b2db      	uxtb	r3, r3
 801408a:	2b00      	cmp	r3, #0
 801408c:	d007      	beq.n	801409e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801408e:	697b      	ldr	r3, [r7, #20]
 8014090:	681a      	ldr	r2, [r3, #0]
 8014092:	693b      	ldr	r3, [r7, #16]
 8014094:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8014096:	697b      	ldr	r3, [r7, #20]
 8014098:	693a      	ldr	r2, [r7, #16]
 801409a:	601a      	str	r2, [r3, #0]
        break;
 801409c:	e007      	b.n	80140ae <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801409e:	697b      	ldr	r3, [r7, #20]
 80140a0:	681b      	ldr	r3, [r3, #0]
 80140a2:	617b      	str	r3, [r7, #20]
 80140a4:	697b      	ldr	r3, [r7, #20]
 80140a6:	2b00      	cmp	r3, #0
 80140a8:	d1e1      	bne.n	801406e <sys_timeout_abs+0x86>
 80140aa:	e000      	b.n	80140ae <sys_timeout_abs+0xc6>
    return;
 80140ac:	bf00      	nop
      }
    }
  }
}
 80140ae:	3718      	adds	r7, #24
 80140b0:	46bd      	mov	sp, r7
 80140b2:	bd80      	pop	{r7, pc}
 80140b4:	08019f7c 	.word	0x08019f7c
 80140b8:	08019fb0 	.word	0x08019fb0
 80140bc:	08019ff0 	.word	0x08019ff0
 80140c0:	240040f4 	.word	0x240040f4

080140c4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80140c4:	b580      	push	{r7, lr}
 80140c6:	b086      	sub	sp, #24
 80140c8:	af00      	add	r7, sp, #0
 80140ca:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80140cc:	687b      	ldr	r3, [r7, #4]
 80140ce:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80140d0:	697b      	ldr	r3, [r7, #20]
 80140d2:	685b      	ldr	r3, [r3, #4]
 80140d4:	4798      	blx	r3

  now = sys_now();
 80140d6:	f7f4 fe2f 	bl	8008d38 <sys_now>
 80140da:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80140dc:	697b      	ldr	r3, [r7, #20]
 80140de:	681a      	ldr	r2, [r3, #0]
 80140e0:	4b0f      	ldr	r3, [pc, #60]	; (8014120 <lwip_cyclic_timer+0x5c>)
 80140e2:	681b      	ldr	r3, [r3, #0]
 80140e4:	4413      	add	r3, r2
 80140e6:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80140e8:	68fa      	ldr	r2, [r7, #12]
 80140ea:	693b      	ldr	r3, [r7, #16]
 80140ec:	1ad3      	subs	r3, r2, r3
 80140ee:	0fdb      	lsrs	r3, r3, #31
 80140f0:	f003 0301 	and.w	r3, r3, #1
 80140f4:	b2db      	uxtb	r3, r3
 80140f6:	2b00      	cmp	r3, #0
 80140f8:	d009      	beq.n	801410e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 80140fa:	697b      	ldr	r3, [r7, #20]
 80140fc:	681a      	ldr	r2, [r3, #0]
 80140fe:	693b      	ldr	r3, [r7, #16]
 8014100:	4413      	add	r3, r2
 8014102:	687a      	ldr	r2, [r7, #4]
 8014104:	4907      	ldr	r1, [pc, #28]	; (8014124 <lwip_cyclic_timer+0x60>)
 8014106:	4618      	mov	r0, r3
 8014108:	f7ff ff6e 	bl	8013fe8 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801410c:	e004      	b.n	8014118 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801410e:	687a      	ldr	r2, [r7, #4]
 8014110:	4904      	ldr	r1, [pc, #16]	; (8014124 <lwip_cyclic_timer+0x60>)
 8014112:	68f8      	ldr	r0, [r7, #12]
 8014114:	f7ff ff68 	bl	8013fe8 <sys_timeout_abs>
}
 8014118:	bf00      	nop
 801411a:	3718      	adds	r7, #24
 801411c:	46bd      	mov	sp, r7
 801411e:	bd80      	pop	{r7, pc}
 8014120:	240040f8 	.word	0x240040f8
 8014124:	080140c5 	.word	0x080140c5

08014128 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8014128:	b580      	push	{r7, lr}
 801412a:	b082      	sub	sp, #8
 801412c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801412e:	2301      	movs	r3, #1
 8014130:	607b      	str	r3, [r7, #4]
 8014132:	e00e      	b.n	8014152 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8014134:	4a0b      	ldr	r2, [pc, #44]	; (8014164 <sys_timeouts_init+0x3c>)
 8014136:	687b      	ldr	r3, [r7, #4]
 8014138:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801413c:	687b      	ldr	r3, [r7, #4]
 801413e:	00db      	lsls	r3, r3, #3
 8014140:	4a08      	ldr	r2, [pc, #32]	; (8014164 <sys_timeouts_init+0x3c>)
 8014142:	4413      	add	r3, r2
 8014144:	461a      	mov	r2, r3
 8014146:	4908      	ldr	r1, [pc, #32]	; (8014168 <sys_timeouts_init+0x40>)
 8014148:	f000 f810 	bl	801416c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801414c:	687b      	ldr	r3, [r7, #4]
 801414e:	3301      	adds	r3, #1
 8014150:	607b      	str	r3, [r7, #4]
 8014152:	687b      	ldr	r3, [r7, #4]
 8014154:	2b02      	cmp	r3, #2
 8014156:	d9ed      	bls.n	8014134 <sys_timeouts_init+0xc>
  }
}
 8014158:	bf00      	nop
 801415a:	bf00      	nop
 801415c:	3708      	adds	r7, #8
 801415e:	46bd      	mov	sp, r7
 8014160:	bd80      	pop	{r7, pc}
 8014162:	bf00      	nop
 8014164:	0801abc8 	.word	0x0801abc8
 8014168:	080140c5 	.word	0x080140c5

0801416c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801416c:	b580      	push	{r7, lr}
 801416e:	b086      	sub	sp, #24
 8014170:	af00      	add	r7, sp, #0
 8014172:	60f8      	str	r0, [r7, #12]
 8014174:	60b9      	str	r1, [r7, #8]
 8014176:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8014178:	68fb      	ldr	r3, [r7, #12]
 801417a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801417e:	d306      	bcc.n	801418e <sys_timeout+0x22>
 8014180:	4b0a      	ldr	r3, [pc, #40]	; (80141ac <sys_timeout+0x40>)
 8014182:	f240 1229 	movw	r2, #297	; 0x129
 8014186:	490a      	ldr	r1, [pc, #40]	; (80141b0 <sys_timeout+0x44>)
 8014188:	480a      	ldr	r0, [pc, #40]	; (80141b4 <sys_timeout+0x48>)
 801418a:	f002 fe85 	bl	8016e98 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801418e:	f7f4 fdd3 	bl	8008d38 <sys_now>
 8014192:	4602      	mov	r2, r0
 8014194:	68fb      	ldr	r3, [r7, #12]
 8014196:	4413      	add	r3, r2
 8014198:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801419a:	687a      	ldr	r2, [r7, #4]
 801419c:	68b9      	ldr	r1, [r7, #8]
 801419e:	6978      	ldr	r0, [r7, #20]
 80141a0:	f7ff ff22 	bl	8013fe8 <sys_timeout_abs>
#endif
}
 80141a4:	bf00      	nop
 80141a6:	3718      	adds	r7, #24
 80141a8:	46bd      	mov	sp, r7
 80141aa:	bd80      	pop	{r7, pc}
 80141ac:	08019f7c 	.word	0x08019f7c
 80141b0:	0801a018 	.word	0x0801a018
 80141b4:	08019ff0 	.word	0x08019ff0

080141b8 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 80141b8:	b580      	push	{r7, lr}
 80141ba:	b084      	sub	sp, #16
 80141bc:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 80141be:	f7f4 fdbb 	bl	8008d38 <sys_now>
 80141c2:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 80141c4:	4b17      	ldr	r3, [pc, #92]	; (8014224 <sys_check_timeouts+0x6c>)
 80141c6:	681b      	ldr	r3, [r3, #0]
 80141c8:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 80141ca:	68bb      	ldr	r3, [r7, #8]
 80141cc:	2b00      	cmp	r3, #0
 80141ce:	d022      	beq.n	8014216 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80141d0:	68bb      	ldr	r3, [r7, #8]
 80141d2:	685b      	ldr	r3, [r3, #4]
 80141d4:	68fa      	ldr	r2, [r7, #12]
 80141d6:	1ad3      	subs	r3, r2, r3
 80141d8:	0fdb      	lsrs	r3, r3, #31
 80141da:	f003 0301 	and.w	r3, r3, #1
 80141de:	b2db      	uxtb	r3, r3
 80141e0:	2b00      	cmp	r3, #0
 80141e2:	d11a      	bne.n	801421a <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 80141e4:	68bb      	ldr	r3, [r7, #8]
 80141e6:	681b      	ldr	r3, [r3, #0]
 80141e8:	4a0e      	ldr	r2, [pc, #56]	; (8014224 <sys_check_timeouts+0x6c>)
 80141ea:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 80141ec:	68bb      	ldr	r3, [r7, #8]
 80141ee:	689b      	ldr	r3, [r3, #8]
 80141f0:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 80141f2:	68bb      	ldr	r3, [r7, #8]
 80141f4:	68db      	ldr	r3, [r3, #12]
 80141f6:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 80141f8:	68bb      	ldr	r3, [r7, #8]
 80141fa:	685b      	ldr	r3, [r3, #4]
 80141fc:	4a0a      	ldr	r2, [pc, #40]	; (8014228 <sys_check_timeouts+0x70>)
 80141fe:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8014200:	68b9      	ldr	r1, [r7, #8]
 8014202:	200a      	movs	r0, #10
 8014204:	f7f8 fd32 	bl	800cc6c <memp_free>
    if (handler != NULL) {
 8014208:	687b      	ldr	r3, [r7, #4]
 801420a:	2b00      	cmp	r3, #0
 801420c:	d0da      	beq.n	80141c4 <sys_check_timeouts+0xc>
      handler(arg);
 801420e:	687b      	ldr	r3, [r7, #4]
 8014210:	6838      	ldr	r0, [r7, #0]
 8014212:	4798      	blx	r3
  do {
 8014214:	e7d6      	b.n	80141c4 <sys_check_timeouts+0xc>
      return;
 8014216:	bf00      	nop
 8014218:	e000      	b.n	801421c <sys_check_timeouts+0x64>
      return;
 801421a:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801421c:	3710      	adds	r7, #16
 801421e:	46bd      	mov	sp, r7
 8014220:	bd80      	pop	{r7, pc}
 8014222:	bf00      	nop
 8014224:	240040f4 	.word	0x240040f4
 8014228:	240040f8 	.word	0x240040f8

0801422c <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801422c:	b580      	push	{r7, lr}
 801422e:	b082      	sub	sp, #8
 8014230:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8014232:	4b16      	ldr	r3, [pc, #88]	; (801428c <sys_timeouts_sleeptime+0x60>)
 8014234:	681b      	ldr	r3, [r3, #0]
 8014236:	2b00      	cmp	r3, #0
 8014238:	d102      	bne.n	8014240 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801423a:	f04f 33ff 	mov.w	r3, #4294967295
 801423e:	e020      	b.n	8014282 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8014240:	f7f4 fd7a 	bl	8008d38 <sys_now>
 8014244:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8014246:	4b11      	ldr	r3, [pc, #68]	; (801428c <sys_timeouts_sleeptime+0x60>)
 8014248:	681b      	ldr	r3, [r3, #0]
 801424a:	685a      	ldr	r2, [r3, #4]
 801424c:	687b      	ldr	r3, [r7, #4]
 801424e:	1ad3      	subs	r3, r2, r3
 8014250:	0fdb      	lsrs	r3, r3, #31
 8014252:	f003 0301 	and.w	r3, r3, #1
 8014256:	b2db      	uxtb	r3, r3
 8014258:	2b00      	cmp	r3, #0
 801425a:	d001      	beq.n	8014260 <sys_timeouts_sleeptime+0x34>
    return 0;
 801425c:	2300      	movs	r3, #0
 801425e:	e010      	b.n	8014282 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8014260:	4b0a      	ldr	r3, [pc, #40]	; (801428c <sys_timeouts_sleeptime+0x60>)
 8014262:	681b      	ldr	r3, [r3, #0]
 8014264:	685a      	ldr	r2, [r3, #4]
 8014266:	687b      	ldr	r3, [r7, #4]
 8014268:	1ad3      	subs	r3, r2, r3
 801426a:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 801426c:	683b      	ldr	r3, [r7, #0]
 801426e:	2b00      	cmp	r3, #0
 8014270:	da06      	bge.n	8014280 <sys_timeouts_sleeptime+0x54>
 8014272:	4b07      	ldr	r3, [pc, #28]	; (8014290 <sys_timeouts_sleeptime+0x64>)
 8014274:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8014278:	4906      	ldr	r1, [pc, #24]	; (8014294 <sys_timeouts_sleeptime+0x68>)
 801427a:	4807      	ldr	r0, [pc, #28]	; (8014298 <sys_timeouts_sleeptime+0x6c>)
 801427c:	f002 fe0c 	bl	8016e98 <iprintf>
    return ret;
 8014280:	683b      	ldr	r3, [r7, #0]
  }
}
 8014282:	4618      	mov	r0, r3
 8014284:	3708      	adds	r7, #8
 8014286:	46bd      	mov	sp, r7
 8014288:	bd80      	pop	{r7, pc}
 801428a:	bf00      	nop
 801428c:	240040f4 	.word	0x240040f4
 8014290:	08019f7c 	.word	0x08019f7c
 8014294:	0801a050 	.word	0x0801a050
 8014298:	08019ff0 	.word	0x08019ff0

0801429c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801429c:	b580      	push	{r7, lr}
 801429e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80142a0:	f002 fe12 	bl	8016ec8 <rand>
 80142a4:	4603      	mov	r3, r0
 80142a6:	b29b      	uxth	r3, r3
 80142a8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80142ac:	b29b      	uxth	r3, r3
 80142ae:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80142b2:	b29a      	uxth	r2, r3
 80142b4:	4b01      	ldr	r3, [pc, #4]	; (80142bc <udp_init+0x20>)
 80142b6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80142b8:	bf00      	nop
 80142ba:	bd80      	pop	{r7, pc}
 80142bc:	24000030 	.word	0x24000030

080142c0 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80142c0:	b580      	push	{r7, lr}
 80142c2:	b084      	sub	sp, #16
 80142c4:	af00      	add	r7, sp, #0
 80142c6:	60f8      	str	r0, [r7, #12]
 80142c8:	60b9      	str	r1, [r7, #8]
 80142ca:	4613      	mov	r3, r2
 80142cc:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 80142ce:	68fb      	ldr	r3, [r7, #12]
 80142d0:	2b00      	cmp	r3, #0
 80142d2:	d105      	bne.n	80142e0 <udp_input_local_match+0x20>
 80142d4:	4b27      	ldr	r3, [pc, #156]	; (8014374 <udp_input_local_match+0xb4>)
 80142d6:	2287      	movs	r2, #135	; 0x87
 80142d8:	4927      	ldr	r1, [pc, #156]	; (8014378 <udp_input_local_match+0xb8>)
 80142da:	4828      	ldr	r0, [pc, #160]	; (801437c <udp_input_local_match+0xbc>)
 80142dc:	f002 fddc 	bl	8016e98 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80142e0:	68bb      	ldr	r3, [r7, #8]
 80142e2:	2b00      	cmp	r3, #0
 80142e4:	d105      	bne.n	80142f2 <udp_input_local_match+0x32>
 80142e6:	4b23      	ldr	r3, [pc, #140]	; (8014374 <udp_input_local_match+0xb4>)
 80142e8:	2288      	movs	r2, #136	; 0x88
 80142ea:	4925      	ldr	r1, [pc, #148]	; (8014380 <udp_input_local_match+0xc0>)
 80142ec:	4823      	ldr	r0, [pc, #140]	; (801437c <udp_input_local_match+0xbc>)
 80142ee:	f002 fdd3 	bl	8016e98 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80142f2:	68fb      	ldr	r3, [r7, #12]
 80142f4:	7a1b      	ldrb	r3, [r3, #8]
 80142f6:	2b00      	cmp	r3, #0
 80142f8:	d00b      	beq.n	8014312 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80142fa:	68fb      	ldr	r3, [r7, #12]
 80142fc:	7a1a      	ldrb	r2, [r3, #8]
 80142fe:	4b21      	ldr	r3, [pc, #132]	; (8014384 <udp_input_local_match+0xc4>)
 8014300:	685b      	ldr	r3, [r3, #4]
 8014302:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014306:	3301      	adds	r3, #1
 8014308:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801430a:	429a      	cmp	r2, r3
 801430c:	d001      	beq.n	8014312 <udp_input_local_match+0x52>
    return 0;
 801430e:	2300      	movs	r3, #0
 8014310:	e02b      	b.n	801436a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8014312:	79fb      	ldrb	r3, [r7, #7]
 8014314:	2b00      	cmp	r3, #0
 8014316:	d018      	beq.n	801434a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8014318:	68fb      	ldr	r3, [r7, #12]
 801431a:	2b00      	cmp	r3, #0
 801431c:	d013      	beq.n	8014346 <udp_input_local_match+0x86>
 801431e:	68fb      	ldr	r3, [r7, #12]
 8014320:	681b      	ldr	r3, [r3, #0]
 8014322:	2b00      	cmp	r3, #0
 8014324:	d00f      	beq.n	8014346 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8014326:	4b17      	ldr	r3, [pc, #92]	; (8014384 <udp_input_local_match+0xc4>)
 8014328:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801432a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801432e:	d00a      	beq.n	8014346 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8014330:	68fb      	ldr	r3, [r7, #12]
 8014332:	681a      	ldr	r2, [r3, #0]
 8014334:	4b13      	ldr	r3, [pc, #76]	; (8014384 <udp_input_local_match+0xc4>)
 8014336:	695b      	ldr	r3, [r3, #20]
 8014338:	405a      	eors	r2, r3
 801433a:	68bb      	ldr	r3, [r7, #8]
 801433c:	3308      	adds	r3, #8
 801433e:	681b      	ldr	r3, [r3, #0]
 8014340:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8014342:	2b00      	cmp	r3, #0
 8014344:	d110      	bne.n	8014368 <udp_input_local_match+0xa8>
          return 1;
 8014346:	2301      	movs	r3, #1
 8014348:	e00f      	b.n	801436a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801434a:	68fb      	ldr	r3, [r7, #12]
 801434c:	2b00      	cmp	r3, #0
 801434e:	d009      	beq.n	8014364 <udp_input_local_match+0xa4>
 8014350:	68fb      	ldr	r3, [r7, #12]
 8014352:	681b      	ldr	r3, [r3, #0]
 8014354:	2b00      	cmp	r3, #0
 8014356:	d005      	beq.n	8014364 <udp_input_local_match+0xa4>
 8014358:	68fb      	ldr	r3, [r7, #12]
 801435a:	681a      	ldr	r2, [r3, #0]
 801435c:	4b09      	ldr	r3, [pc, #36]	; (8014384 <udp_input_local_match+0xc4>)
 801435e:	695b      	ldr	r3, [r3, #20]
 8014360:	429a      	cmp	r2, r3
 8014362:	d101      	bne.n	8014368 <udp_input_local_match+0xa8>
        return 1;
 8014364:	2301      	movs	r3, #1
 8014366:	e000      	b.n	801436a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8014368:	2300      	movs	r3, #0
}
 801436a:	4618      	mov	r0, r3
 801436c:	3710      	adds	r7, #16
 801436e:	46bd      	mov	sp, r7
 8014370:	bd80      	pop	{r7, pc}
 8014372:	bf00      	nop
 8014374:	0801a064 	.word	0x0801a064
 8014378:	0801a094 	.word	0x0801a094
 801437c:	0801a0b8 	.word	0x0801a0b8
 8014380:	0801a0e0 	.word	0x0801a0e0
 8014384:	240048e8 	.word	0x240048e8

08014388 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8014388:	b590      	push	{r4, r7, lr}
 801438a:	b08d      	sub	sp, #52	; 0x34
 801438c:	af02      	add	r7, sp, #8
 801438e:	6078      	str	r0, [r7, #4]
 8014390:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8014392:	2300      	movs	r3, #0
 8014394:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8014396:	687b      	ldr	r3, [r7, #4]
 8014398:	2b00      	cmp	r3, #0
 801439a:	d105      	bne.n	80143a8 <udp_input+0x20>
 801439c:	4b7c      	ldr	r3, [pc, #496]	; (8014590 <udp_input+0x208>)
 801439e:	22cf      	movs	r2, #207	; 0xcf
 80143a0:	497c      	ldr	r1, [pc, #496]	; (8014594 <udp_input+0x20c>)
 80143a2:	487d      	ldr	r0, [pc, #500]	; (8014598 <udp_input+0x210>)
 80143a4:	f002 fd78 	bl	8016e98 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80143a8:	683b      	ldr	r3, [r7, #0]
 80143aa:	2b00      	cmp	r3, #0
 80143ac:	d105      	bne.n	80143ba <udp_input+0x32>
 80143ae:	4b78      	ldr	r3, [pc, #480]	; (8014590 <udp_input+0x208>)
 80143b0:	22d0      	movs	r2, #208	; 0xd0
 80143b2:	497a      	ldr	r1, [pc, #488]	; (801459c <udp_input+0x214>)
 80143b4:	4878      	ldr	r0, [pc, #480]	; (8014598 <udp_input+0x210>)
 80143b6:	f002 fd6f 	bl	8016e98 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80143ba:	687b      	ldr	r3, [r7, #4]
 80143bc:	895b      	ldrh	r3, [r3, #10]
 80143be:	2b07      	cmp	r3, #7
 80143c0:	d803      	bhi.n	80143ca <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80143c2:	6878      	ldr	r0, [r7, #4]
 80143c4:	f7f9 faf6 	bl	800d9b4 <pbuf_free>
    goto end;
 80143c8:	e0de      	b.n	8014588 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80143ca:	687b      	ldr	r3, [r7, #4]
 80143cc:	685b      	ldr	r3, [r3, #4]
 80143ce:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80143d0:	4b73      	ldr	r3, [pc, #460]	; (80145a0 <udp_input+0x218>)
 80143d2:	695b      	ldr	r3, [r3, #20]
 80143d4:	4a72      	ldr	r2, [pc, #456]	; (80145a0 <udp_input+0x218>)
 80143d6:	6812      	ldr	r2, [r2, #0]
 80143d8:	4611      	mov	r1, r2
 80143da:	4618      	mov	r0, r3
 80143dc:	f001 fcae 	bl	8015d3c <ip4_addr_isbroadcast_u32>
 80143e0:	4603      	mov	r3, r0
 80143e2:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80143e4:	697b      	ldr	r3, [r7, #20]
 80143e6:	881b      	ldrh	r3, [r3, #0]
 80143e8:	b29b      	uxth	r3, r3
 80143ea:	4618      	mov	r0, r3
 80143ec:	f7f7 fe28 	bl	800c040 <lwip_htons>
 80143f0:	4603      	mov	r3, r0
 80143f2:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80143f4:	697b      	ldr	r3, [r7, #20]
 80143f6:	885b      	ldrh	r3, [r3, #2]
 80143f8:	b29b      	uxth	r3, r3
 80143fa:	4618      	mov	r0, r3
 80143fc:	f7f7 fe20 	bl	800c040 <lwip_htons>
 8014400:	4603      	mov	r3, r0
 8014402:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8014404:	2300      	movs	r3, #0
 8014406:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8014408:	2300      	movs	r3, #0
 801440a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801440c:	2300      	movs	r3, #0
 801440e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014410:	4b64      	ldr	r3, [pc, #400]	; (80145a4 <udp_input+0x21c>)
 8014412:	681b      	ldr	r3, [r3, #0]
 8014414:	627b      	str	r3, [r7, #36]	; 0x24
 8014416:	e054      	b.n	80144c2 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8014418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801441a:	8a5b      	ldrh	r3, [r3, #18]
 801441c:	89fa      	ldrh	r2, [r7, #14]
 801441e:	429a      	cmp	r2, r3
 8014420:	d14a      	bne.n	80144b8 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8014422:	7cfb      	ldrb	r3, [r7, #19]
 8014424:	461a      	mov	r2, r3
 8014426:	6839      	ldr	r1, [r7, #0]
 8014428:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801442a:	f7ff ff49 	bl	80142c0 <udp_input_local_match>
 801442e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8014430:	2b00      	cmp	r3, #0
 8014432:	d041      	beq.n	80144b8 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8014434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014436:	7c1b      	ldrb	r3, [r3, #16]
 8014438:	f003 0304 	and.w	r3, r3, #4
 801443c:	2b00      	cmp	r3, #0
 801443e:	d11d      	bne.n	801447c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8014440:	69fb      	ldr	r3, [r7, #28]
 8014442:	2b00      	cmp	r3, #0
 8014444:	d102      	bne.n	801444c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8014446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014448:	61fb      	str	r3, [r7, #28]
 801444a:	e017      	b.n	801447c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801444c:	7cfb      	ldrb	r3, [r7, #19]
 801444e:	2b00      	cmp	r3, #0
 8014450:	d014      	beq.n	801447c <udp_input+0xf4>
 8014452:	4b53      	ldr	r3, [pc, #332]	; (80145a0 <udp_input+0x218>)
 8014454:	695b      	ldr	r3, [r3, #20]
 8014456:	f1b3 3fff 	cmp.w	r3, #4294967295
 801445a:	d10f      	bne.n	801447c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801445c:	69fb      	ldr	r3, [r7, #28]
 801445e:	681a      	ldr	r2, [r3, #0]
 8014460:	683b      	ldr	r3, [r7, #0]
 8014462:	3304      	adds	r3, #4
 8014464:	681b      	ldr	r3, [r3, #0]
 8014466:	429a      	cmp	r2, r3
 8014468:	d008      	beq.n	801447c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801446a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801446c:	681a      	ldr	r2, [r3, #0]
 801446e:	683b      	ldr	r3, [r7, #0]
 8014470:	3304      	adds	r3, #4
 8014472:	681b      	ldr	r3, [r3, #0]
 8014474:	429a      	cmp	r2, r3
 8014476:	d101      	bne.n	801447c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8014478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801447a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801447c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801447e:	8a9b      	ldrh	r3, [r3, #20]
 8014480:	8a3a      	ldrh	r2, [r7, #16]
 8014482:	429a      	cmp	r2, r3
 8014484:	d118      	bne.n	80144b8 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8014486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014488:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801448a:	2b00      	cmp	r3, #0
 801448c:	d005      	beq.n	801449a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801448e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014490:	685a      	ldr	r2, [r3, #4]
 8014492:	4b43      	ldr	r3, [pc, #268]	; (80145a0 <udp_input+0x218>)
 8014494:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8014496:	429a      	cmp	r2, r3
 8014498:	d10e      	bne.n	80144b8 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801449a:	6a3b      	ldr	r3, [r7, #32]
 801449c:	2b00      	cmp	r3, #0
 801449e:	d014      	beq.n	80144ca <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80144a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144a2:	68da      	ldr	r2, [r3, #12]
 80144a4:	6a3b      	ldr	r3, [r7, #32]
 80144a6:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80144a8:	4b3e      	ldr	r3, [pc, #248]	; (80145a4 <udp_input+0x21c>)
 80144aa:	681a      	ldr	r2, [r3, #0]
 80144ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144ae:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80144b0:	4a3c      	ldr	r2, [pc, #240]	; (80145a4 <udp_input+0x21c>)
 80144b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144b4:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80144b6:	e008      	b.n	80144ca <udp_input+0x142>
      }
    }

    prev = pcb;
 80144b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144ba:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80144bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144be:	68db      	ldr	r3, [r3, #12]
 80144c0:	627b      	str	r3, [r7, #36]	; 0x24
 80144c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144c4:	2b00      	cmp	r3, #0
 80144c6:	d1a7      	bne.n	8014418 <udp_input+0x90>
 80144c8:	e000      	b.n	80144cc <udp_input+0x144>
        break;
 80144ca:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80144cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144ce:	2b00      	cmp	r3, #0
 80144d0:	d101      	bne.n	80144d6 <udp_input+0x14e>
    pcb = uncon_pcb;
 80144d2:	69fb      	ldr	r3, [r7, #28]
 80144d4:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80144d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144d8:	2b00      	cmp	r3, #0
 80144da:	d002      	beq.n	80144e2 <udp_input+0x15a>
    for_us = 1;
 80144dc:	2301      	movs	r3, #1
 80144de:	76fb      	strb	r3, [r7, #27]
 80144e0:	e00a      	b.n	80144f8 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 80144e2:	683b      	ldr	r3, [r7, #0]
 80144e4:	3304      	adds	r3, #4
 80144e6:	681a      	ldr	r2, [r3, #0]
 80144e8:	4b2d      	ldr	r3, [pc, #180]	; (80145a0 <udp_input+0x218>)
 80144ea:	695b      	ldr	r3, [r3, #20]
 80144ec:	429a      	cmp	r2, r3
 80144ee:	bf0c      	ite	eq
 80144f0:	2301      	moveq	r3, #1
 80144f2:	2300      	movne	r3, #0
 80144f4:	b2db      	uxtb	r3, r3
 80144f6:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80144f8:	7efb      	ldrb	r3, [r7, #27]
 80144fa:	2b00      	cmp	r3, #0
 80144fc:	d041      	beq.n	8014582 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80144fe:	2108      	movs	r1, #8
 8014500:	6878      	ldr	r0, [r7, #4]
 8014502:	f7f9 f9d1 	bl	800d8a8 <pbuf_remove_header>
 8014506:	4603      	mov	r3, r0
 8014508:	2b00      	cmp	r3, #0
 801450a:	d00a      	beq.n	8014522 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801450c:	4b20      	ldr	r3, [pc, #128]	; (8014590 <udp_input+0x208>)
 801450e:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8014512:	4925      	ldr	r1, [pc, #148]	; (80145a8 <udp_input+0x220>)
 8014514:	4820      	ldr	r0, [pc, #128]	; (8014598 <udp_input+0x210>)
 8014516:	f002 fcbf 	bl	8016e98 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801451a:	6878      	ldr	r0, [r7, #4]
 801451c:	f7f9 fa4a 	bl	800d9b4 <pbuf_free>
      goto end;
 8014520:	e032      	b.n	8014588 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8014522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014524:	2b00      	cmp	r3, #0
 8014526:	d012      	beq.n	801454e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8014528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801452a:	699b      	ldr	r3, [r3, #24]
 801452c:	2b00      	cmp	r3, #0
 801452e:	d00a      	beq.n	8014546 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8014530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014532:	699c      	ldr	r4, [r3, #24]
 8014534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014536:	69d8      	ldr	r0, [r3, #28]
 8014538:	8a3b      	ldrh	r3, [r7, #16]
 801453a:	9300      	str	r3, [sp, #0]
 801453c:	4b1b      	ldr	r3, [pc, #108]	; (80145ac <udp_input+0x224>)
 801453e:	687a      	ldr	r2, [r7, #4]
 8014540:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014542:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8014544:	e021      	b.n	801458a <udp_input+0x202>
        pbuf_free(p);
 8014546:	6878      	ldr	r0, [r7, #4]
 8014548:	f7f9 fa34 	bl	800d9b4 <pbuf_free>
        goto end;
 801454c:	e01c      	b.n	8014588 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801454e:	7cfb      	ldrb	r3, [r7, #19]
 8014550:	2b00      	cmp	r3, #0
 8014552:	d112      	bne.n	801457a <udp_input+0x1f2>
 8014554:	4b12      	ldr	r3, [pc, #72]	; (80145a0 <udp_input+0x218>)
 8014556:	695b      	ldr	r3, [r3, #20]
 8014558:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801455c:	2be0      	cmp	r3, #224	; 0xe0
 801455e:	d00c      	beq.n	801457a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8014560:	4b0f      	ldr	r3, [pc, #60]	; (80145a0 <udp_input+0x218>)
 8014562:	899b      	ldrh	r3, [r3, #12]
 8014564:	3308      	adds	r3, #8
 8014566:	b29b      	uxth	r3, r3
 8014568:	b21b      	sxth	r3, r3
 801456a:	4619      	mov	r1, r3
 801456c:	6878      	ldr	r0, [r7, #4]
 801456e:	f7f9 fa0e 	bl	800d98e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8014572:	2103      	movs	r1, #3
 8014574:	6878      	ldr	r0, [r7, #4]
 8014576:	f001 f8b7 	bl	80156e8 <icmp_dest_unreach>
      pbuf_free(p);
 801457a:	6878      	ldr	r0, [r7, #4]
 801457c:	f7f9 fa1a 	bl	800d9b4 <pbuf_free>
  return;
 8014580:	e003      	b.n	801458a <udp_input+0x202>
    pbuf_free(p);
 8014582:	6878      	ldr	r0, [r7, #4]
 8014584:	f7f9 fa16 	bl	800d9b4 <pbuf_free>
  return;
 8014588:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801458a:	372c      	adds	r7, #44	; 0x2c
 801458c:	46bd      	mov	sp, r7
 801458e:	bd90      	pop	{r4, r7, pc}
 8014590:	0801a064 	.word	0x0801a064
 8014594:	0801a108 	.word	0x0801a108
 8014598:	0801a0b8 	.word	0x0801a0b8
 801459c:	0801a120 	.word	0x0801a120
 80145a0:	240048e8 	.word	0x240048e8
 80145a4:	240079c0 	.word	0x240079c0
 80145a8:	0801a13c 	.word	0x0801a13c
 80145ac:	240048f8 	.word	0x240048f8

080145b0 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80145b0:	b480      	push	{r7}
 80145b2:	b085      	sub	sp, #20
 80145b4:	af00      	add	r7, sp, #0
 80145b6:	6078      	str	r0, [r7, #4]
 80145b8:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80145ba:	687b      	ldr	r3, [r7, #4]
 80145bc:	2b00      	cmp	r3, #0
 80145be:	d01e      	beq.n	80145fe <udp_netif_ip_addr_changed+0x4e>
 80145c0:	687b      	ldr	r3, [r7, #4]
 80145c2:	681b      	ldr	r3, [r3, #0]
 80145c4:	2b00      	cmp	r3, #0
 80145c6:	d01a      	beq.n	80145fe <udp_netif_ip_addr_changed+0x4e>
 80145c8:	683b      	ldr	r3, [r7, #0]
 80145ca:	2b00      	cmp	r3, #0
 80145cc:	d017      	beq.n	80145fe <udp_netif_ip_addr_changed+0x4e>
 80145ce:	683b      	ldr	r3, [r7, #0]
 80145d0:	681b      	ldr	r3, [r3, #0]
 80145d2:	2b00      	cmp	r3, #0
 80145d4:	d013      	beq.n	80145fe <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80145d6:	4b0d      	ldr	r3, [pc, #52]	; (801460c <udp_netif_ip_addr_changed+0x5c>)
 80145d8:	681b      	ldr	r3, [r3, #0]
 80145da:	60fb      	str	r3, [r7, #12]
 80145dc:	e00c      	b.n	80145f8 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80145de:	68fb      	ldr	r3, [r7, #12]
 80145e0:	681a      	ldr	r2, [r3, #0]
 80145e2:	687b      	ldr	r3, [r7, #4]
 80145e4:	681b      	ldr	r3, [r3, #0]
 80145e6:	429a      	cmp	r2, r3
 80145e8:	d103      	bne.n	80145f2 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80145ea:	683b      	ldr	r3, [r7, #0]
 80145ec:	681a      	ldr	r2, [r3, #0]
 80145ee:	68fb      	ldr	r3, [r7, #12]
 80145f0:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80145f2:	68fb      	ldr	r3, [r7, #12]
 80145f4:	68db      	ldr	r3, [r3, #12]
 80145f6:	60fb      	str	r3, [r7, #12]
 80145f8:	68fb      	ldr	r3, [r7, #12]
 80145fa:	2b00      	cmp	r3, #0
 80145fc:	d1ef      	bne.n	80145de <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80145fe:	bf00      	nop
 8014600:	3714      	adds	r7, #20
 8014602:	46bd      	mov	sp, r7
 8014604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014608:	4770      	bx	lr
 801460a:	bf00      	nop
 801460c:	240079c0 	.word	0x240079c0

08014610 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8014610:	b580      	push	{r7, lr}
 8014612:	b082      	sub	sp, #8
 8014614:	af00      	add	r7, sp, #0
 8014616:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8014618:	4915      	ldr	r1, [pc, #84]	; (8014670 <etharp_free_entry+0x60>)
 801461a:	687a      	ldr	r2, [r7, #4]
 801461c:	4613      	mov	r3, r2
 801461e:	005b      	lsls	r3, r3, #1
 8014620:	4413      	add	r3, r2
 8014622:	00db      	lsls	r3, r3, #3
 8014624:	440b      	add	r3, r1
 8014626:	681b      	ldr	r3, [r3, #0]
 8014628:	2b00      	cmp	r3, #0
 801462a:	d013      	beq.n	8014654 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801462c:	4910      	ldr	r1, [pc, #64]	; (8014670 <etharp_free_entry+0x60>)
 801462e:	687a      	ldr	r2, [r7, #4]
 8014630:	4613      	mov	r3, r2
 8014632:	005b      	lsls	r3, r3, #1
 8014634:	4413      	add	r3, r2
 8014636:	00db      	lsls	r3, r3, #3
 8014638:	440b      	add	r3, r1
 801463a:	681b      	ldr	r3, [r3, #0]
 801463c:	4618      	mov	r0, r3
 801463e:	f7f9 f9b9 	bl	800d9b4 <pbuf_free>
    arp_table[i].q = NULL;
 8014642:	490b      	ldr	r1, [pc, #44]	; (8014670 <etharp_free_entry+0x60>)
 8014644:	687a      	ldr	r2, [r7, #4]
 8014646:	4613      	mov	r3, r2
 8014648:	005b      	lsls	r3, r3, #1
 801464a:	4413      	add	r3, r2
 801464c:	00db      	lsls	r3, r3, #3
 801464e:	440b      	add	r3, r1
 8014650:	2200      	movs	r2, #0
 8014652:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8014654:	4906      	ldr	r1, [pc, #24]	; (8014670 <etharp_free_entry+0x60>)
 8014656:	687a      	ldr	r2, [r7, #4]
 8014658:	4613      	mov	r3, r2
 801465a:	005b      	lsls	r3, r3, #1
 801465c:	4413      	add	r3, r2
 801465e:	00db      	lsls	r3, r3, #3
 8014660:	440b      	add	r3, r1
 8014662:	3314      	adds	r3, #20
 8014664:	2200      	movs	r2, #0
 8014666:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8014668:	bf00      	nop
 801466a:	3708      	adds	r7, #8
 801466c:	46bd      	mov	sp, r7
 801466e:	bd80      	pop	{r7, pc}
 8014670:	24004100 	.word	0x24004100

08014674 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8014674:	b580      	push	{r7, lr}
 8014676:	b082      	sub	sp, #8
 8014678:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801467a:	2300      	movs	r3, #0
 801467c:	607b      	str	r3, [r7, #4]
 801467e:	e096      	b.n	80147ae <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8014680:	494f      	ldr	r1, [pc, #316]	; (80147c0 <etharp_tmr+0x14c>)
 8014682:	687a      	ldr	r2, [r7, #4]
 8014684:	4613      	mov	r3, r2
 8014686:	005b      	lsls	r3, r3, #1
 8014688:	4413      	add	r3, r2
 801468a:	00db      	lsls	r3, r3, #3
 801468c:	440b      	add	r3, r1
 801468e:	3314      	adds	r3, #20
 8014690:	781b      	ldrb	r3, [r3, #0]
 8014692:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8014694:	78fb      	ldrb	r3, [r7, #3]
 8014696:	2b00      	cmp	r3, #0
 8014698:	f000 8086 	beq.w	80147a8 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801469c:	4948      	ldr	r1, [pc, #288]	; (80147c0 <etharp_tmr+0x14c>)
 801469e:	687a      	ldr	r2, [r7, #4]
 80146a0:	4613      	mov	r3, r2
 80146a2:	005b      	lsls	r3, r3, #1
 80146a4:	4413      	add	r3, r2
 80146a6:	00db      	lsls	r3, r3, #3
 80146a8:	440b      	add	r3, r1
 80146aa:	3312      	adds	r3, #18
 80146ac:	881b      	ldrh	r3, [r3, #0]
 80146ae:	3301      	adds	r3, #1
 80146b0:	b298      	uxth	r0, r3
 80146b2:	4943      	ldr	r1, [pc, #268]	; (80147c0 <etharp_tmr+0x14c>)
 80146b4:	687a      	ldr	r2, [r7, #4]
 80146b6:	4613      	mov	r3, r2
 80146b8:	005b      	lsls	r3, r3, #1
 80146ba:	4413      	add	r3, r2
 80146bc:	00db      	lsls	r3, r3, #3
 80146be:	440b      	add	r3, r1
 80146c0:	3312      	adds	r3, #18
 80146c2:	4602      	mov	r2, r0
 80146c4:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80146c6:	493e      	ldr	r1, [pc, #248]	; (80147c0 <etharp_tmr+0x14c>)
 80146c8:	687a      	ldr	r2, [r7, #4]
 80146ca:	4613      	mov	r3, r2
 80146cc:	005b      	lsls	r3, r3, #1
 80146ce:	4413      	add	r3, r2
 80146d0:	00db      	lsls	r3, r3, #3
 80146d2:	440b      	add	r3, r1
 80146d4:	3312      	adds	r3, #18
 80146d6:	881b      	ldrh	r3, [r3, #0]
 80146d8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80146dc:	d215      	bcs.n	801470a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80146de:	4938      	ldr	r1, [pc, #224]	; (80147c0 <etharp_tmr+0x14c>)
 80146e0:	687a      	ldr	r2, [r7, #4]
 80146e2:	4613      	mov	r3, r2
 80146e4:	005b      	lsls	r3, r3, #1
 80146e6:	4413      	add	r3, r2
 80146e8:	00db      	lsls	r3, r3, #3
 80146ea:	440b      	add	r3, r1
 80146ec:	3314      	adds	r3, #20
 80146ee:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80146f0:	2b01      	cmp	r3, #1
 80146f2:	d10e      	bne.n	8014712 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80146f4:	4932      	ldr	r1, [pc, #200]	; (80147c0 <etharp_tmr+0x14c>)
 80146f6:	687a      	ldr	r2, [r7, #4]
 80146f8:	4613      	mov	r3, r2
 80146fa:	005b      	lsls	r3, r3, #1
 80146fc:	4413      	add	r3, r2
 80146fe:	00db      	lsls	r3, r3, #3
 8014700:	440b      	add	r3, r1
 8014702:	3312      	adds	r3, #18
 8014704:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8014706:	2b04      	cmp	r3, #4
 8014708:	d903      	bls.n	8014712 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801470a:	6878      	ldr	r0, [r7, #4]
 801470c:	f7ff ff80 	bl	8014610 <etharp_free_entry>
 8014710:	e04a      	b.n	80147a8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8014712:	492b      	ldr	r1, [pc, #172]	; (80147c0 <etharp_tmr+0x14c>)
 8014714:	687a      	ldr	r2, [r7, #4]
 8014716:	4613      	mov	r3, r2
 8014718:	005b      	lsls	r3, r3, #1
 801471a:	4413      	add	r3, r2
 801471c:	00db      	lsls	r3, r3, #3
 801471e:	440b      	add	r3, r1
 8014720:	3314      	adds	r3, #20
 8014722:	781b      	ldrb	r3, [r3, #0]
 8014724:	2b03      	cmp	r3, #3
 8014726:	d10a      	bne.n	801473e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8014728:	4925      	ldr	r1, [pc, #148]	; (80147c0 <etharp_tmr+0x14c>)
 801472a:	687a      	ldr	r2, [r7, #4]
 801472c:	4613      	mov	r3, r2
 801472e:	005b      	lsls	r3, r3, #1
 8014730:	4413      	add	r3, r2
 8014732:	00db      	lsls	r3, r3, #3
 8014734:	440b      	add	r3, r1
 8014736:	3314      	adds	r3, #20
 8014738:	2204      	movs	r2, #4
 801473a:	701a      	strb	r2, [r3, #0]
 801473c:	e034      	b.n	80147a8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801473e:	4920      	ldr	r1, [pc, #128]	; (80147c0 <etharp_tmr+0x14c>)
 8014740:	687a      	ldr	r2, [r7, #4]
 8014742:	4613      	mov	r3, r2
 8014744:	005b      	lsls	r3, r3, #1
 8014746:	4413      	add	r3, r2
 8014748:	00db      	lsls	r3, r3, #3
 801474a:	440b      	add	r3, r1
 801474c:	3314      	adds	r3, #20
 801474e:	781b      	ldrb	r3, [r3, #0]
 8014750:	2b04      	cmp	r3, #4
 8014752:	d10a      	bne.n	801476a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8014754:	491a      	ldr	r1, [pc, #104]	; (80147c0 <etharp_tmr+0x14c>)
 8014756:	687a      	ldr	r2, [r7, #4]
 8014758:	4613      	mov	r3, r2
 801475a:	005b      	lsls	r3, r3, #1
 801475c:	4413      	add	r3, r2
 801475e:	00db      	lsls	r3, r3, #3
 8014760:	440b      	add	r3, r1
 8014762:	3314      	adds	r3, #20
 8014764:	2202      	movs	r2, #2
 8014766:	701a      	strb	r2, [r3, #0]
 8014768:	e01e      	b.n	80147a8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801476a:	4915      	ldr	r1, [pc, #84]	; (80147c0 <etharp_tmr+0x14c>)
 801476c:	687a      	ldr	r2, [r7, #4]
 801476e:	4613      	mov	r3, r2
 8014770:	005b      	lsls	r3, r3, #1
 8014772:	4413      	add	r3, r2
 8014774:	00db      	lsls	r3, r3, #3
 8014776:	440b      	add	r3, r1
 8014778:	3314      	adds	r3, #20
 801477a:	781b      	ldrb	r3, [r3, #0]
 801477c:	2b01      	cmp	r3, #1
 801477e:	d113      	bne.n	80147a8 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8014780:	490f      	ldr	r1, [pc, #60]	; (80147c0 <etharp_tmr+0x14c>)
 8014782:	687a      	ldr	r2, [r7, #4]
 8014784:	4613      	mov	r3, r2
 8014786:	005b      	lsls	r3, r3, #1
 8014788:	4413      	add	r3, r2
 801478a:	00db      	lsls	r3, r3, #3
 801478c:	440b      	add	r3, r1
 801478e:	3308      	adds	r3, #8
 8014790:	6818      	ldr	r0, [r3, #0]
 8014792:	687a      	ldr	r2, [r7, #4]
 8014794:	4613      	mov	r3, r2
 8014796:	005b      	lsls	r3, r3, #1
 8014798:	4413      	add	r3, r2
 801479a:	00db      	lsls	r3, r3, #3
 801479c:	4a08      	ldr	r2, [pc, #32]	; (80147c0 <etharp_tmr+0x14c>)
 801479e:	4413      	add	r3, r2
 80147a0:	3304      	adds	r3, #4
 80147a2:	4619      	mov	r1, r3
 80147a4:	f000 fe6e 	bl	8015484 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80147a8:	687b      	ldr	r3, [r7, #4]
 80147aa:	3301      	adds	r3, #1
 80147ac:	607b      	str	r3, [r7, #4]
 80147ae:	687b      	ldr	r3, [r7, #4]
 80147b0:	2b09      	cmp	r3, #9
 80147b2:	f77f af65 	ble.w	8014680 <etharp_tmr+0xc>
      }
    }
  }
}
 80147b6:	bf00      	nop
 80147b8:	bf00      	nop
 80147ba:	3708      	adds	r7, #8
 80147bc:	46bd      	mov	sp, r7
 80147be:	bd80      	pop	{r7, pc}
 80147c0:	24004100 	.word	0x24004100

080147c4 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80147c4:	b580      	push	{r7, lr}
 80147c6:	b08a      	sub	sp, #40	; 0x28
 80147c8:	af00      	add	r7, sp, #0
 80147ca:	60f8      	str	r0, [r7, #12]
 80147cc:	460b      	mov	r3, r1
 80147ce:	607a      	str	r2, [r7, #4]
 80147d0:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80147d2:	230a      	movs	r3, #10
 80147d4:	84fb      	strh	r3, [r7, #38]	; 0x26
 80147d6:	230a      	movs	r3, #10
 80147d8:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80147da:	230a      	movs	r3, #10
 80147dc:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 80147de:	2300      	movs	r3, #0
 80147e0:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80147e2:	230a      	movs	r3, #10
 80147e4:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80147e6:	2300      	movs	r3, #0
 80147e8:	83bb      	strh	r3, [r7, #28]
 80147ea:	2300      	movs	r3, #0
 80147ec:	837b      	strh	r3, [r7, #26]
 80147ee:	2300      	movs	r3, #0
 80147f0:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80147f2:	2300      	movs	r3, #0
 80147f4:	843b      	strh	r3, [r7, #32]
 80147f6:	e0ae      	b.n	8014956 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80147f8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80147fc:	49a6      	ldr	r1, [pc, #664]	; (8014a98 <etharp_find_entry+0x2d4>)
 80147fe:	4613      	mov	r3, r2
 8014800:	005b      	lsls	r3, r3, #1
 8014802:	4413      	add	r3, r2
 8014804:	00db      	lsls	r3, r3, #3
 8014806:	440b      	add	r3, r1
 8014808:	3314      	adds	r3, #20
 801480a:	781b      	ldrb	r3, [r3, #0]
 801480c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801480e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8014812:	2b0a      	cmp	r3, #10
 8014814:	d105      	bne.n	8014822 <etharp_find_entry+0x5e>
 8014816:	7dfb      	ldrb	r3, [r7, #23]
 8014818:	2b00      	cmp	r3, #0
 801481a:	d102      	bne.n	8014822 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801481c:	8c3b      	ldrh	r3, [r7, #32]
 801481e:	847b      	strh	r3, [r7, #34]	; 0x22
 8014820:	e095      	b.n	801494e <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8014822:	7dfb      	ldrb	r3, [r7, #23]
 8014824:	2b00      	cmp	r3, #0
 8014826:	f000 8092 	beq.w	801494e <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801482a:	7dfb      	ldrb	r3, [r7, #23]
 801482c:	2b01      	cmp	r3, #1
 801482e:	d009      	beq.n	8014844 <etharp_find_entry+0x80>
 8014830:	7dfb      	ldrb	r3, [r7, #23]
 8014832:	2b01      	cmp	r3, #1
 8014834:	d806      	bhi.n	8014844 <etharp_find_entry+0x80>
 8014836:	4b99      	ldr	r3, [pc, #612]	; (8014a9c <etharp_find_entry+0x2d8>)
 8014838:	f240 1223 	movw	r2, #291	; 0x123
 801483c:	4998      	ldr	r1, [pc, #608]	; (8014aa0 <etharp_find_entry+0x2dc>)
 801483e:	4899      	ldr	r0, [pc, #612]	; (8014aa4 <etharp_find_entry+0x2e0>)
 8014840:	f002 fb2a 	bl	8016e98 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8014844:	68fb      	ldr	r3, [r7, #12]
 8014846:	2b00      	cmp	r3, #0
 8014848:	d020      	beq.n	801488c <etharp_find_entry+0xc8>
 801484a:	68fb      	ldr	r3, [r7, #12]
 801484c:	6819      	ldr	r1, [r3, #0]
 801484e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014852:	4891      	ldr	r0, [pc, #580]	; (8014a98 <etharp_find_entry+0x2d4>)
 8014854:	4613      	mov	r3, r2
 8014856:	005b      	lsls	r3, r3, #1
 8014858:	4413      	add	r3, r2
 801485a:	00db      	lsls	r3, r3, #3
 801485c:	4403      	add	r3, r0
 801485e:	3304      	adds	r3, #4
 8014860:	681b      	ldr	r3, [r3, #0]
 8014862:	4299      	cmp	r1, r3
 8014864:	d112      	bne.n	801488c <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8014866:	687b      	ldr	r3, [r7, #4]
 8014868:	2b00      	cmp	r3, #0
 801486a:	d00c      	beq.n	8014886 <etharp_find_entry+0xc2>
 801486c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014870:	4989      	ldr	r1, [pc, #548]	; (8014a98 <etharp_find_entry+0x2d4>)
 8014872:	4613      	mov	r3, r2
 8014874:	005b      	lsls	r3, r3, #1
 8014876:	4413      	add	r3, r2
 8014878:	00db      	lsls	r3, r3, #3
 801487a:	440b      	add	r3, r1
 801487c:	3308      	adds	r3, #8
 801487e:	681b      	ldr	r3, [r3, #0]
 8014880:	687a      	ldr	r2, [r7, #4]
 8014882:	429a      	cmp	r2, r3
 8014884:	d102      	bne.n	801488c <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8014886:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801488a:	e100      	b.n	8014a8e <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801488c:	7dfb      	ldrb	r3, [r7, #23]
 801488e:	2b01      	cmp	r3, #1
 8014890:	d140      	bne.n	8014914 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8014892:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014896:	4980      	ldr	r1, [pc, #512]	; (8014a98 <etharp_find_entry+0x2d4>)
 8014898:	4613      	mov	r3, r2
 801489a:	005b      	lsls	r3, r3, #1
 801489c:	4413      	add	r3, r2
 801489e:	00db      	lsls	r3, r3, #3
 80148a0:	440b      	add	r3, r1
 80148a2:	681b      	ldr	r3, [r3, #0]
 80148a4:	2b00      	cmp	r3, #0
 80148a6:	d01a      	beq.n	80148de <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80148a8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80148ac:	497a      	ldr	r1, [pc, #488]	; (8014a98 <etharp_find_entry+0x2d4>)
 80148ae:	4613      	mov	r3, r2
 80148b0:	005b      	lsls	r3, r3, #1
 80148b2:	4413      	add	r3, r2
 80148b4:	00db      	lsls	r3, r3, #3
 80148b6:	440b      	add	r3, r1
 80148b8:	3312      	adds	r3, #18
 80148ba:	881b      	ldrh	r3, [r3, #0]
 80148bc:	8bba      	ldrh	r2, [r7, #28]
 80148be:	429a      	cmp	r2, r3
 80148c0:	d845      	bhi.n	801494e <etharp_find_entry+0x18a>
            old_queue = i;
 80148c2:	8c3b      	ldrh	r3, [r7, #32]
 80148c4:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80148c6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80148ca:	4973      	ldr	r1, [pc, #460]	; (8014a98 <etharp_find_entry+0x2d4>)
 80148cc:	4613      	mov	r3, r2
 80148ce:	005b      	lsls	r3, r3, #1
 80148d0:	4413      	add	r3, r2
 80148d2:	00db      	lsls	r3, r3, #3
 80148d4:	440b      	add	r3, r1
 80148d6:	3312      	adds	r3, #18
 80148d8:	881b      	ldrh	r3, [r3, #0]
 80148da:	83bb      	strh	r3, [r7, #28]
 80148dc:	e037      	b.n	801494e <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80148de:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80148e2:	496d      	ldr	r1, [pc, #436]	; (8014a98 <etharp_find_entry+0x2d4>)
 80148e4:	4613      	mov	r3, r2
 80148e6:	005b      	lsls	r3, r3, #1
 80148e8:	4413      	add	r3, r2
 80148ea:	00db      	lsls	r3, r3, #3
 80148ec:	440b      	add	r3, r1
 80148ee:	3312      	adds	r3, #18
 80148f0:	881b      	ldrh	r3, [r3, #0]
 80148f2:	8b7a      	ldrh	r2, [r7, #26]
 80148f4:	429a      	cmp	r2, r3
 80148f6:	d82a      	bhi.n	801494e <etharp_find_entry+0x18a>
            old_pending = i;
 80148f8:	8c3b      	ldrh	r3, [r7, #32]
 80148fa:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 80148fc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014900:	4965      	ldr	r1, [pc, #404]	; (8014a98 <etharp_find_entry+0x2d4>)
 8014902:	4613      	mov	r3, r2
 8014904:	005b      	lsls	r3, r3, #1
 8014906:	4413      	add	r3, r2
 8014908:	00db      	lsls	r3, r3, #3
 801490a:	440b      	add	r3, r1
 801490c:	3312      	adds	r3, #18
 801490e:	881b      	ldrh	r3, [r3, #0]
 8014910:	837b      	strh	r3, [r7, #26]
 8014912:	e01c      	b.n	801494e <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8014914:	7dfb      	ldrb	r3, [r7, #23]
 8014916:	2b01      	cmp	r3, #1
 8014918:	d919      	bls.n	801494e <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801491a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801491e:	495e      	ldr	r1, [pc, #376]	; (8014a98 <etharp_find_entry+0x2d4>)
 8014920:	4613      	mov	r3, r2
 8014922:	005b      	lsls	r3, r3, #1
 8014924:	4413      	add	r3, r2
 8014926:	00db      	lsls	r3, r3, #3
 8014928:	440b      	add	r3, r1
 801492a:	3312      	adds	r3, #18
 801492c:	881b      	ldrh	r3, [r3, #0]
 801492e:	8b3a      	ldrh	r2, [r7, #24]
 8014930:	429a      	cmp	r2, r3
 8014932:	d80c      	bhi.n	801494e <etharp_find_entry+0x18a>
            old_stable = i;
 8014934:	8c3b      	ldrh	r3, [r7, #32]
 8014936:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8014938:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801493c:	4956      	ldr	r1, [pc, #344]	; (8014a98 <etharp_find_entry+0x2d4>)
 801493e:	4613      	mov	r3, r2
 8014940:	005b      	lsls	r3, r3, #1
 8014942:	4413      	add	r3, r2
 8014944:	00db      	lsls	r3, r3, #3
 8014946:	440b      	add	r3, r1
 8014948:	3312      	adds	r3, #18
 801494a:	881b      	ldrh	r3, [r3, #0]
 801494c:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801494e:	8c3b      	ldrh	r3, [r7, #32]
 8014950:	3301      	adds	r3, #1
 8014952:	b29b      	uxth	r3, r3
 8014954:	843b      	strh	r3, [r7, #32]
 8014956:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801495a:	2b09      	cmp	r3, #9
 801495c:	f77f af4c 	ble.w	80147f8 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8014960:	7afb      	ldrb	r3, [r7, #11]
 8014962:	f003 0302 	and.w	r3, r3, #2
 8014966:	2b00      	cmp	r3, #0
 8014968:	d108      	bne.n	801497c <etharp_find_entry+0x1b8>
 801496a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801496e:	2b0a      	cmp	r3, #10
 8014970:	d107      	bne.n	8014982 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8014972:	7afb      	ldrb	r3, [r7, #11]
 8014974:	f003 0301 	and.w	r3, r3, #1
 8014978:	2b00      	cmp	r3, #0
 801497a:	d102      	bne.n	8014982 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801497c:	f04f 33ff 	mov.w	r3, #4294967295
 8014980:	e085      	b.n	8014a8e <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8014982:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8014986:	2b09      	cmp	r3, #9
 8014988:	dc02      	bgt.n	8014990 <etharp_find_entry+0x1cc>
    i = empty;
 801498a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801498c:	843b      	strh	r3, [r7, #32]
 801498e:	e039      	b.n	8014a04 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8014990:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8014994:	2b09      	cmp	r3, #9
 8014996:	dc14      	bgt.n	80149c2 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8014998:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801499a:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801499c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80149a0:	493d      	ldr	r1, [pc, #244]	; (8014a98 <etharp_find_entry+0x2d4>)
 80149a2:	4613      	mov	r3, r2
 80149a4:	005b      	lsls	r3, r3, #1
 80149a6:	4413      	add	r3, r2
 80149a8:	00db      	lsls	r3, r3, #3
 80149aa:	440b      	add	r3, r1
 80149ac:	681b      	ldr	r3, [r3, #0]
 80149ae:	2b00      	cmp	r3, #0
 80149b0:	d018      	beq.n	80149e4 <etharp_find_entry+0x220>
 80149b2:	4b3a      	ldr	r3, [pc, #232]	; (8014a9c <etharp_find_entry+0x2d8>)
 80149b4:	f240 126d 	movw	r2, #365	; 0x16d
 80149b8:	493b      	ldr	r1, [pc, #236]	; (8014aa8 <etharp_find_entry+0x2e4>)
 80149ba:	483a      	ldr	r0, [pc, #232]	; (8014aa4 <etharp_find_entry+0x2e0>)
 80149bc:	f002 fa6c 	bl	8016e98 <iprintf>
 80149c0:	e010      	b.n	80149e4 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80149c2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80149c6:	2b09      	cmp	r3, #9
 80149c8:	dc02      	bgt.n	80149d0 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80149ca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80149cc:	843b      	strh	r3, [r7, #32]
 80149ce:	e009      	b.n	80149e4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80149d0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80149d4:	2b09      	cmp	r3, #9
 80149d6:	dc02      	bgt.n	80149de <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80149d8:	8bfb      	ldrh	r3, [r7, #30]
 80149da:	843b      	strh	r3, [r7, #32]
 80149dc:	e002      	b.n	80149e4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80149de:	f04f 33ff 	mov.w	r3, #4294967295
 80149e2:	e054      	b.n	8014a8e <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80149e4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80149e8:	2b09      	cmp	r3, #9
 80149ea:	dd06      	ble.n	80149fa <etharp_find_entry+0x236>
 80149ec:	4b2b      	ldr	r3, [pc, #172]	; (8014a9c <etharp_find_entry+0x2d8>)
 80149ee:	f240 127f 	movw	r2, #383	; 0x17f
 80149f2:	492e      	ldr	r1, [pc, #184]	; (8014aac <etharp_find_entry+0x2e8>)
 80149f4:	482b      	ldr	r0, [pc, #172]	; (8014aa4 <etharp_find_entry+0x2e0>)
 80149f6:	f002 fa4f 	bl	8016e98 <iprintf>
    etharp_free_entry(i);
 80149fa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80149fe:	4618      	mov	r0, r3
 8014a00:	f7ff fe06 	bl	8014610 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8014a04:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014a08:	2b09      	cmp	r3, #9
 8014a0a:	dd06      	ble.n	8014a1a <etharp_find_entry+0x256>
 8014a0c:	4b23      	ldr	r3, [pc, #140]	; (8014a9c <etharp_find_entry+0x2d8>)
 8014a0e:	f240 1283 	movw	r2, #387	; 0x183
 8014a12:	4926      	ldr	r1, [pc, #152]	; (8014aac <etharp_find_entry+0x2e8>)
 8014a14:	4823      	ldr	r0, [pc, #140]	; (8014aa4 <etharp_find_entry+0x2e0>)
 8014a16:	f002 fa3f 	bl	8016e98 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8014a1a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014a1e:	491e      	ldr	r1, [pc, #120]	; (8014a98 <etharp_find_entry+0x2d4>)
 8014a20:	4613      	mov	r3, r2
 8014a22:	005b      	lsls	r3, r3, #1
 8014a24:	4413      	add	r3, r2
 8014a26:	00db      	lsls	r3, r3, #3
 8014a28:	440b      	add	r3, r1
 8014a2a:	3314      	adds	r3, #20
 8014a2c:	781b      	ldrb	r3, [r3, #0]
 8014a2e:	2b00      	cmp	r3, #0
 8014a30:	d006      	beq.n	8014a40 <etharp_find_entry+0x27c>
 8014a32:	4b1a      	ldr	r3, [pc, #104]	; (8014a9c <etharp_find_entry+0x2d8>)
 8014a34:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8014a38:	491d      	ldr	r1, [pc, #116]	; (8014ab0 <etharp_find_entry+0x2ec>)
 8014a3a:	481a      	ldr	r0, [pc, #104]	; (8014aa4 <etharp_find_entry+0x2e0>)
 8014a3c:	f002 fa2c 	bl	8016e98 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8014a40:	68fb      	ldr	r3, [r7, #12]
 8014a42:	2b00      	cmp	r3, #0
 8014a44:	d00b      	beq.n	8014a5e <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8014a46:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014a4a:	68fb      	ldr	r3, [r7, #12]
 8014a4c:	6819      	ldr	r1, [r3, #0]
 8014a4e:	4812      	ldr	r0, [pc, #72]	; (8014a98 <etharp_find_entry+0x2d4>)
 8014a50:	4613      	mov	r3, r2
 8014a52:	005b      	lsls	r3, r3, #1
 8014a54:	4413      	add	r3, r2
 8014a56:	00db      	lsls	r3, r3, #3
 8014a58:	4403      	add	r3, r0
 8014a5a:	3304      	adds	r3, #4
 8014a5c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8014a5e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014a62:	490d      	ldr	r1, [pc, #52]	; (8014a98 <etharp_find_entry+0x2d4>)
 8014a64:	4613      	mov	r3, r2
 8014a66:	005b      	lsls	r3, r3, #1
 8014a68:	4413      	add	r3, r2
 8014a6a:	00db      	lsls	r3, r3, #3
 8014a6c:	440b      	add	r3, r1
 8014a6e:	3312      	adds	r3, #18
 8014a70:	2200      	movs	r2, #0
 8014a72:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8014a74:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014a78:	4907      	ldr	r1, [pc, #28]	; (8014a98 <etharp_find_entry+0x2d4>)
 8014a7a:	4613      	mov	r3, r2
 8014a7c:	005b      	lsls	r3, r3, #1
 8014a7e:	4413      	add	r3, r2
 8014a80:	00db      	lsls	r3, r3, #3
 8014a82:	440b      	add	r3, r1
 8014a84:	3308      	adds	r3, #8
 8014a86:	687a      	ldr	r2, [r7, #4]
 8014a88:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8014a8a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8014a8e:	4618      	mov	r0, r3
 8014a90:	3728      	adds	r7, #40	; 0x28
 8014a92:	46bd      	mov	sp, r7
 8014a94:	bd80      	pop	{r7, pc}
 8014a96:	bf00      	nop
 8014a98:	24004100 	.word	0x24004100
 8014a9c:	0801a3c8 	.word	0x0801a3c8
 8014aa0:	0801a400 	.word	0x0801a400
 8014aa4:	0801a440 	.word	0x0801a440
 8014aa8:	0801a468 	.word	0x0801a468
 8014aac:	0801a480 	.word	0x0801a480
 8014ab0:	0801a494 	.word	0x0801a494

08014ab4 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8014ab4:	b580      	push	{r7, lr}
 8014ab6:	b088      	sub	sp, #32
 8014ab8:	af02      	add	r7, sp, #8
 8014aba:	60f8      	str	r0, [r7, #12]
 8014abc:	60b9      	str	r1, [r7, #8]
 8014abe:	607a      	str	r2, [r7, #4]
 8014ac0:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8014ac2:	68fb      	ldr	r3, [r7, #12]
 8014ac4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8014ac8:	2b06      	cmp	r3, #6
 8014aca:	d006      	beq.n	8014ada <etharp_update_arp_entry+0x26>
 8014acc:	4b48      	ldr	r3, [pc, #288]	; (8014bf0 <etharp_update_arp_entry+0x13c>)
 8014ace:	f240 12a9 	movw	r2, #425	; 0x1a9
 8014ad2:	4948      	ldr	r1, [pc, #288]	; (8014bf4 <etharp_update_arp_entry+0x140>)
 8014ad4:	4848      	ldr	r0, [pc, #288]	; (8014bf8 <etharp_update_arp_entry+0x144>)
 8014ad6:	f002 f9df 	bl	8016e98 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8014ada:	68bb      	ldr	r3, [r7, #8]
 8014adc:	2b00      	cmp	r3, #0
 8014ade:	d012      	beq.n	8014b06 <etharp_update_arp_entry+0x52>
 8014ae0:	68bb      	ldr	r3, [r7, #8]
 8014ae2:	681b      	ldr	r3, [r3, #0]
 8014ae4:	2b00      	cmp	r3, #0
 8014ae6:	d00e      	beq.n	8014b06 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8014ae8:	68bb      	ldr	r3, [r7, #8]
 8014aea:	681b      	ldr	r3, [r3, #0]
 8014aec:	68f9      	ldr	r1, [r7, #12]
 8014aee:	4618      	mov	r0, r3
 8014af0:	f001 f924 	bl	8015d3c <ip4_addr_isbroadcast_u32>
 8014af4:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8014af6:	2b00      	cmp	r3, #0
 8014af8:	d105      	bne.n	8014b06 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8014afa:	68bb      	ldr	r3, [r7, #8]
 8014afc:	681b      	ldr	r3, [r3, #0]
 8014afe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8014b02:	2be0      	cmp	r3, #224	; 0xe0
 8014b04:	d102      	bne.n	8014b0c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8014b06:	f06f 030f 	mvn.w	r3, #15
 8014b0a:	e06c      	b.n	8014be6 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8014b0c:	78fb      	ldrb	r3, [r7, #3]
 8014b0e:	68fa      	ldr	r2, [r7, #12]
 8014b10:	4619      	mov	r1, r3
 8014b12:	68b8      	ldr	r0, [r7, #8]
 8014b14:	f7ff fe56 	bl	80147c4 <etharp_find_entry>
 8014b18:	4603      	mov	r3, r0
 8014b1a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8014b1c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8014b20:	2b00      	cmp	r3, #0
 8014b22:	da02      	bge.n	8014b2a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8014b24:	8afb      	ldrh	r3, [r7, #22]
 8014b26:	b25b      	sxtb	r3, r3
 8014b28:	e05d      	b.n	8014be6 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8014b2a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014b2e:	4933      	ldr	r1, [pc, #204]	; (8014bfc <etharp_update_arp_entry+0x148>)
 8014b30:	4613      	mov	r3, r2
 8014b32:	005b      	lsls	r3, r3, #1
 8014b34:	4413      	add	r3, r2
 8014b36:	00db      	lsls	r3, r3, #3
 8014b38:	440b      	add	r3, r1
 8014b3a:	3314      	adds	r3, #20
 8014b3c:	2202      	movs	r2, #2
 8014b3e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8014b40:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014b44:	492d      	ldr	r1, [pc, #180]	; (8014bfc <etharp_update_arp_entry+0x148>)
 8014b46:	4613      	mov	r3, r2
 8014b48:	005b      	lsls	r3, r3, #1
 8014b4a:	4413      	add	r3, r2
 8014b4c:	00db      	lsls	r3, r3, #3
 8014b4e:	440b      	add	r3, r1
 8014b50:	3308      	adds	r3, #8
 8014b52:	68fa      	ldr	r2, [r7, #12]
 8014b54:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8014b56:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014b5a:	4613      	mov	r3, r2
 8014b5c:	005b      	lsls	r3, r3, #1
 8014b5e:	4413      	add	r3, r2
 8014b60:	00db      	lsls	r3, r3, #3
 8014b62:	3308      	adds	r3, #8
 8014b64:	4a25      	ldr	r2, [pc, #148]	; (8014bfc <etharp_update_arp_entry+0x148>)
 8014b66:	4413      	add	r3, r2
 8014b68:	3304      	adds	r3, #4
 8014b6a:	2206      	movs	r2, #6
 8014b6c:	6879      	ldr	r1, [r7, #4]
 8014b6e:	4618      	mov	r0, r3
 8014b70:	f002 f97c 	bl	8016e6c <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8014b74:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014b78:	4920      	ldr	r1, [pc, #128]	; (8014bfc <etharp_update_arp_entry+0x148>)
 8014b7a:	4613      	mov	r3, r2
 8014b7c:	005b      	lsls	r3, r3, #1
 8014b7e:	4413      	add	r3, r2
 8014b80:	00db      	lsls	r3, r3, #3
 8014b82:	440b      	add	r3, r1
 8014b84:	3312      	adds	r3, #18
 8014b86:	2200      	movs	r2, #0
 8014b88:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8014b8a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014b8e:	491b      	ldr	r1, [pc, #108]	; (8014bfc <etharp_update_arp_entry+0x148>)
 8014b90:	4613      	mov	r3, r2
 8014b92:	005b      	lsls	r3, r3, #1
 8014b94:	4413      	add	r3, r2
 8014b96:	00db      	lsls	r3, r3, #3
 8014b98:	440b      	add	r3, r1
 8014b9a:	681b      	ldr	r3, [r3, #0]
 8014b9c:	2b00      	cmp	r3, #0
 8014b9e:	d021      	beq.n	8014be4 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8014ba0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014ba4:	4915      	ldr	r1, [pc, #84]	; (8014bfc <etharp_update_arp_entry+0x148>)
 8014ba6:	4613      	mov	r3, r2
 8014ba8:	005b      	lsls	r3, r3, #1
 8014baa:	4413      	add	r3, r2
 8014bac:	00db      	lsls	r3, r3, #3
 8014bae:	440b      	add	r3, r1
 8014bb0:	681b      	ldr	r3, [r3, #0]
 8014bb2:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8014bb4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014bb8:	4910      	ldr	r1, [pc, #64]	; (8014bfc <etharp_update_arp_entry+0x148>)
 8014bba:	4613      	mov	r3, r2
 8014bbc:	005b      	lsls	r3, r3, #1
 8014bbe:	4413      	add	r3, r2
 8014bc0:	00db      	lsls	r3, r3, #3
 8014bc2:	440b      	add	r3, r1
 8014bc4:	2200      	movs	r2, #0
 8014bc6:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8014bc8:	68fb      	ldr	r3, [r7, #12]
 8014bca:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8014bce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014bd2:	9300      	str	r3, [sp, #0]
 8014bd4:	687b      	ldr	r3, [r7, #4]
 8014bd6:	6939      	ldr	r1, [r7, #16]
 8014bd8:	68f8      	ldr	r0, [r7, #12]
 8014bda:	f001 ffb7 	bl	8016b4c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8014bde:	6938      	ldr	r0, [r7, #16]
 8014be0:	f7f8 fee8 	bl	800d9b4 <pbuf_free>
  }
  return ERR_OK;
 8014be4:	2300      	movs	r3, #0
}
 8014be6:	4618      	mov	r0, r3
 8014be8:	3718      	adds	r7, #24
 8014bea:	46bd      	mov	sp, r7
 8014bec:	bd80      	pop	{r7, pc}
 8014bee:	bf00      	nop
 8014bf0:	0801a3c8 	.word	0x0801a3c8
 8014bf4:	0801a4c0 	.word	0x0801a4c0
 8014bf8:	0801a440 	.word	0x0801a440
 8014bfc:	24004100 	.word	0x24004100

08014c00 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8014c00:	b580      	push	{r7, lr}
 8014c02:	b084      	sub	sp, #16
 8014c04:	af00      	add	r7, sp, #0
 8014c06:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014c08:	2300      	movs	r3, #0
 8014c0a:	60fb      	str	r3, [r7, #12]
 8014c0c:	e01e      	b.n	8014c4c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8014c0e:	4913      	ldr	r1, [pc, #76]	; (8014c5c <etharp_cleanup_netif+0x5c>)
 8014c10:	68fa      	ldr	r2, [r7, #12]
 8014c12:	4613      	mov	r3, r2
 8014c14:	005b      	lsls	r3, r3, #1
 8014c16:	4413      	add	r3, r2
 8014c18:	00db      	lsls	r3, r3, #3
 8014c1a:	440b      	add	r3, r1
 8014c1c:	3314      	adds	r3, #20
 8014c1e:	781b      	ldrb	r3, [r3, #0]
 8014c20:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8014c22:	7afb      	ldrb	r3, [r7, #11]
 8014c24:	2b00      	cmp	r3, #0
 8014c26:	d00e      	beq.n	8014c46 <etharp_cleanup_netif+0x46>
 8014c28:	490c      	ldr	r1, [pc, #48]	; (8014c5c <etharp_cleanup_netif+0x5c>)
 8014c2a:	68fa      	ldr	r2, [r7, #12]
 8014c2c:	4613      	mov	r3, r2
 8014c2e:	005b      	lsls	r3, r3, #1
 8014c30:	4413      	add	r3, r2
 8014c32:	00db      	lsls	r3, r3, #3
 8014c34:	440b      	add	r3, r1
 8014c36:	3308      	adds	r3, #8
 8014c38:	681b      	ldr	r3, [r3, #0]
 8014c3a:	687a      	ldr	r2, [r7, #4]
 8014c3c:	429a      	cmp	r2, r3
 8014c3e:	d102      	bne.n	8014c46 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8014c40:	68f8      	ldr	r0, [r7, #12]
 8014c42:	f7ff fce5 	bl	8014610 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014c46:	68fb      	ldr	r3, [r7, #12]
 8014c48:	3301      	adds	r3, #1
 8014c4a:	60fb      	str	r3, [r7, #12]
 8014c4c:	68fb      	ldr	r3, [r7, #12]
 8014c4e:	2b09      	cmp	r3, #9
 8014c50:	dddd      	ble.n	8014c0e <etharp_cleanup_netif+0xe>
    }
  }
}
 8014c52:	bf00      	nop
 8014c54:	bf00      	nop
 8014c56:	3710      	adds	r7, #16
 8014c58:	46bd      	mov	sp, r7
 8014c5a:	bd80      	pop	{r7, pc}
 8014c5c:	24004100 	.word	0x24004100

08014c60 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8014c60:	b5b0      	push	{r4, r5, r7, lr}
 8014c62:	b08a      	sub	sp, #40	; 0x28
 8014c64:	af04      	add	r7, sp, #16
 8014c66:	6078      	str	r0, [r7, #4]
 8014c68:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8014c6a:	683b      	ldr	r3, [r7, #0]
 8014c6c:	2b00      	cmp	r3, #0
 8014c6e:	d107      	bne.n	8014c80 <etharp_input+0x20>
 8014c70:	4b3d      	ldr	r3, [pc, #244]	; (8014d68 <etharp_input+0x108>)
 8014c72:	f240 228a 	movw	r2, #650	; 0x28a
 8014c76:	493d      	ldr	r1, [pc, #244]	; (8014d6c <etharp_input+0x10c>)
 8014c78:	483d      	ldr	r0, [pc, #244]	; (8014d70 <etharp_input+0x110>)
 8014c7a:	f002 f90d 	bl	8016e98 <iprintf>
 8014c7e:	e06f      	b.n	8014d60 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8014c80:	687b      	ldr	r3, [r7, #4]
 8014c82:	685b      	ldr	r3, [r3, #4]
 8014c84:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8014c86:	693b      	ldr	r3, [r7, #16]
 8014c88:	881b      	ldrh	r3, [r3, #0]
 8014c8a:	b29b      	uxth	r3, r3
 8014c8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014c90:	d10c      	bne.n	8014cac <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8014c92:	693b      	ldr	r3, [r7, #16]
 8014c94:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8014c96:	2b06      	cmp	r3, #6
 8014c98:	d108      	bne.n	8014cac <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8014c9a:	693b      	ldr	r3, [r7, #16]
 8014c9c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8014c9e:	2b04      	cmp	r3, #4
 8014ca0:	d104      	bne.n	8014cac <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8014ca2:	693b      	ldr	r3, [r7, #16]
 8014ca4:	885b      	ldrh	r3, [r3, #2]
 8014ca6:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8014ca8:	2b08      	cmp	r3, #8
 8014caa:	d003      	beq.n	8014cb4 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8014cac:	6878      	ldr	r0, [r7, #4]
 8014cae:	f7f8 fe81 	bl	800d9b4 <pbuf_free>
    return;
 8014cb2:	e055      	b.n	8014d60 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8014cb4:	693b      	ldr	r3, [r7, #16]
 8014cb6:	330e      	adds	r3, #14
 8014cb8:	681b      	ldr	r3, [r3, #0]
 8014cba:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8014cbc:	693b      	ldr	r3, [r7, #16]
 8014cbe:	3318      	adds	r3, #24
 8014cc0:	681b      	ldr	r3, [r3, #0]
 8014cc2:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8014cc4:	683b      	ldr	r3, [r7, #0]
 8014cc6:	3304      	adds	r3, #4
 8014cc8:	681b      	ldr	r3, [r3, #0]
 8014cca:	2b00      	cmp	r3, #0
 8014ccc:	d102      	bne.n	8014cd4 <etharp_input+0x74>
    for_us = 0;
 8014cce:	2300      	movs	r3, #0
 8014cd0:	75fb      	strb	r3, [r7, #23]
 8014cd2:	e009      	b.n	8014ce8 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8014cd4:	68ba      	ldr	r2, [r7, #8]
 8014cd6:	683b      	ldr	r3, [r7, #0]
 8014cd8:	3304      	adds	r3, #4
 8014cda:	681b      	ldr	r3, [r3, #0]
 8014cdc:	429a      	cmp	r2, r3
 8014cde:	bf0c      	ite	eq
 8014ce0:	2301      	moveq	r3, #1
 8014ce2:	2300      	movne	r3, #0
 8014ce4:	b2db      	uxtb	r3, r3
 8014ce6:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8014ce8:	693b      	ldr	r3, [r7, #16]
 8014cea:	f103 0208 	add.w	r2, r3, #8
 8014cee:	7dfb      	ldrb	r3, [r7, #23]
 8014cf0:	2b00      	cmp	r3, #0
 8014cf2:	d001      	beq.n	8014cf8 <etharp_input+0x98>
 8014cf4:	2301      	movs	r3, #1
 8014cf6:	e000      	b.n	8014cfa <etharp_input+0x9a>
 8014cf8:	2302      	movs	r3, #2
 8014cfa:	f107 010c 	add.w	r1, r7, #12
 8014cfe:	6838      	ldr	r0, [r7, #0]
 8014d00:	f7ff fed8 	bl	8014ab4 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8014d04:	693b      	ldr	r3, [r7, #16]
 8014d06:	88db      	ldrh	r3, [r3, #6]
 8014d08:	b29b      	uxth	r3, r3
 8014d0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014d0e:	d003      	beq.n	8014d18 <etharp_input+0xb8>
 8014d10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014d14:	d01e      	beq.n	8014d54 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8014d16:	e020      	b.n	8014d5a <etharp_input+0xfa>
      if (for_us) {
 8014d18:	7dfb      	ldrb	r3, [r7, #23]
 8014d1a:	2b00      	cmp	r3, #0
 8014d1c:	d01c      	beq.n	8014d58 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8014d1e:	683b      	ldr	r3, [r7, #0]
 8014d20:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8014d24:	693b      	ldr	r3, [r7, #16]
 8014d26:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8014d2a:	683b      	ldr	r3, [r7, #0]
 8014d2c:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8014d30:	683b      	ldr	r3, [r7, #0]
 8014d32:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8014d34:	693a      	ldr	r2, [r7, #16]
 8014d36:	3208      	adds	r2, #8
        etharp_raw(netif,
 8014d38:	2102      	movs	r1, #2
 8014d3a:	9103      	str	r1, [sp, #12]
 8014d3c:	f107 010c 	add.w	r1, r7, #12
 8014d40:	9102      	str	r1, [sp, #8]
 8014d42:	9201      	str	r2, [sp, #4]
 8014d44:	9300      	str	r3, [sp, #0]
 8014d46:	462b      	mov	r3, r5
 8014d48:	4622      	mov	r2, r4
 8014d4a:	4601      	mov	r1, r0
 8014d4c:	6838      	ldr	r0, [r7, #0]
 8014d4e:	f000 faeb 	bl	8015328 <etharp_raw>
      break;
 8014d52:	e001      	b.n	8014d58 <etharp_input+0xf8>
      break;
 8014d54:	bf00      	nop
 8014d56:	e000      	b.n	8014d5a <etharp_input+0xfa>
      break;
 8014d58:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8014d5a:	6878      	ldr	r0, [r7, #4]
 8014d5c:	f7f8 fe2a 	bl	800d9b4 <pbuf_free>
}
 8014d60:	3718      	adds	r7, #24
 8014d62:	46bd      	mov	sp, r7
 8014d64:	bdb0      	pop	{r4, r5, r7, pc}
 8014d66:	bf00      	nop
 8014d68:	0801a3c8 	.word	0x0801a3c8
 8014d6c:	0801a518 	.word	0x0801a518
 8014d70:	0801a440 	.word	0x0801a440

08014d74 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8014d74:	b580      	push	{r7, lr}
 8014d76:	b086      	sub	sp, #24
 8014d78:	af02      	add	r7, sp, #8
 8014d7a:	60f8      	str	r0, [r7, #12]
 8014d7c:	60b9      	str	r1, [r7, #8]
 8014d7e:	4613      	mov	r3, r2
 8014d80:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8014d82:	79fa      	ldrb	r2, [r7, #7]
 8014d84:	4944      	ldr	r1, [pc, #272]	; (8014e98 <etharp_output_to_arp_index+0x124>)
 8014d86:	4613      	mov	r3, r2
 8014d88:	005b      	lsls	r3, r3, #1
 8014d8a:	4413      	add	r3, r2
 8014d8c:	00db      	lsls	r3, r3, #3
 8014d8e:	440b      	add	r3, r1
 8014d90:	3314      	adds	r3, #20
 8014d92:	781b      	ldrb	r3, [r3, #0]
 8014d94:	2b01      	cmp	r3, #1
 8014d96:	d806      	bhi.n	8014da6 <etharp_output_to_arp_index+0x32>
 8014d98:	4b40      	ldr	r3, [pc, #256]	; (8014e9c <etharp_output_to_arp_index+0x128>)
 8014d9a:	f240 22ee 	movw	r2, #750	; 0x2ee
 8014d9e:	4940      	ldr	r1, [pc, #256]	; (8014ea0 <etharp_output_to_arp_index+0x12c>)
 8014da0:	4840      	ldr	r0, [pc, #256]	; (8014ea4 <etharp_output_to_arp_index+0x130>)
 8014da2:	f002 f879 	bl	8016e98 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8014da6:	79fa      	ldrb	r2, [r7, #7]
 8014da8:	493b      	ldr	r1, [pc, #236]	; (8014e98 <etharp_output_to_arp_index+0x124>)
 8014daa:	4613      	mov	r3, r2
 8014dac:	005b      	lsls	r3, r3, #1
 8014dae:	4413      	add	r3, r2
 8014db0:	00db      	lsls	r3, r3, #3
 8014db2:	440b      	add	r3, r1
 8014db4:	3314      	adds	r3, #20
 8014db6:	781b      	ldrb	r3, [r3, #0]
 8014db8:	2b02      	cmp	r3, #2
 8014dba:	d153      	bne.n	8014e64 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8014dbc:	79fa      	ldrb	r2, [r7, #7]
 8014dbe:	4936      	ldr	r1, [pc, #216]	; (8014e98 <etharp_output_to_arp_index+0x124>)
 8014dc0:	4613      	mov	r3, r2
 8014dc2:	005b      	lsls	r3, r3, #1
 8014dc4:	4413      	add	r3, r2
 8014dc6:	00db      	lsls	r3, r3, #3
 8014dc8:	440b      	add	r3, r1
 8014dca:	3312      	adds	r3, #18
 8014dcc:	881b      	ldrh	r3, [r3, #0]
 8014dce:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8014dd2:	d919      	bls.n	8014e08 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8014dd4:	79fa      	ldrb	r2, [r7, #7]
 8014dd6:	4613      	mov	r3, r2
 8014dd8:	005b      	lsls	r3, r3, #1
 8014dda:	4413      	add	r3, r2
 8014ddc:	00db      	lsls	r3, r3, #3
 8014dde:	4a2e      	ldr	r2, [pc, #184]	; (8014e98 <etharp_output_to_arp_index+0x124>)
 8014de0:	4413      	add	r3, r2
 8014de2:	3304      	adds	r3, #4
 8014de4:	4619      	mov	r1, r3
 8014de6:	68f8      	ldr	r0, [r7, #12]
 8014de8:	f000 fb4c 	bl	8015484 <etharp_request>
 8014dec:	4603      	mov	r3, r0
 8014dee:	2b00      	cmp	r3, #0
 8014df0:	d138      	bne.n	8014e64 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8014df2:	79fa      	ldrb	r2, [r7, #7]
 8014df4:	4928      	ldr	r1, [pc, #160]	; (8014e98 <etharp_output_to_arp_index+0x124>)
 8014df6:	4613      	mov	r3, r2
 8014df8:	005b      	lsls	r3, r3, #1
 8014dfa:	4413      	add	r3, r2
 8014dfc:	00db      	lsls	r3, r3, #3
 8014dfe:	440b      	add	r3, r1
 8014e00:	3314      	adds	r3, #20
 8014e02:	2203      	movs	r2, #3
 8014e04:	701a      	strb	r2, [r3, #0]
 8014e06:	e02d      	b.n	8014e64 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8014e08:	79fa      	ldrb	r2, [r7, #7]
 8014e0a:	4923      	ldr	r1, [pc, #140]	; (8014e98 <etharp_output_to_arp_index+0x124>)
 8014e0c:	4613      	mov	r3, r2
 8014e0e:	005b      	lsls	r3, r3, #1
 8014e10:	4413      	add	r3, r2
 8014e12:	00db      	lsls	r3, r3, #3
 8014e14:	440b      	add	r3, r1
 8014e16:	3312      	adds	r3, #18
 8014e18:	881b      	ldrh	r3, [r3, #0]
 8014e1a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8014e1e:	d321      	bcc.n	8014e64 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8014e20:	79fa      	ldrb	r2, [r7, #7]
 8014e22:	4613      	mov	r3, r2
 8014e24:	005b      	lsls	r3, r3, #1
 8014e26:	4413      	add	r3, r2
 8014e28:	00db      	lsls	r3, r3, #3
 8014e2a:	4a1b      	ldr	r2, [pc, #108]	; (8014e98 <etharp_output_to_arp_index+0x124>)
 8014e2c:	4413      	add	r3, r2
 8014e2e:	1d19      	adds	r1, r3, #4
 8014e30:	79fa      	ldrb	r2, [r7, #7]
 8014e32:	4613      	mov	r3, r2
 8014e34:	005b      	lsls	r3, r3, #1
 8014e36:	4413      	add	r3, r2
 8014e38:	00db      	lsls	r3, r3, #3
 8014e3a:	3308      	adds	r3, #8
 8014e3c:	4a16      	ldr	r2, [pc, #88]	; (8014e98 <etharp_output_to_arp_index+0x124>)
 8014e3e:	4413      	add	r3, r2
 8014e40:	3304      	adds	r3, #4
 8014e42:	461a      	mov	r2, r3
 8014e44:	68f8      	ldr	r0, [r7, #12]
 8014e46:	f000 fafb 	bl	8015440 <etharp_request_dst>
 8014e4a:	4603      	mov	r3, r0
 8014e4c:	2b00      	cmp	r3, #0
 8014e4e:	d109      	bne.n	8014e64 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8014e50:	79fa      	ldrb	r2, [r7, #7]
 8014e52:	4911      	ldr	r1, [pc, #68]	; (8014e98 <etharp_output_to_arp_index+0x124>)
 8014e54:	4613      	mov	r3, r2
 8014e56:	005b      	lsls	r3, r3, #1
 8014e58:	4413      	add	r3, r2
 8014e5a:	00db      	lsls	r3, r3, #3
 8014e5c:	440b      	add	r3, r1
 8014e5e:	3314      	adds	r3, #20
 8014e60:	2203      	movs	r2, #3
 8014e62:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8014e64:	68fb      	ldr	r3, [r7, #12]
 8014e66:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8014e6a:	79fa      	ldrb	r2, [r7, #7]
 8014e6c:	4613      	mov	r3, r2
 8014e6e:	005b      	lsls	r3, r3, #1
 8014e70:	4413      	add	r3, r2
 8014e72:	00db      	lsls	r3, r3, #3
 8014e74:	3308      	adds	r3, #8
 8014e76:	4a08      	ldr	r2, [pc, #32]	; (8014e98 <etharp_output_to_arp_index+0x124>)
 8014e78:	4413      	add	r3, r2
 8014e7a:	3304      	adds	r3, #4
 8014e7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014e80:	9200      	str	r2, [sp, #0]
 8014e82:	460a      	mov	r2, r1
 8014e84:	68b9      	ldr	r1, [r7, #8]
 8014e86:	68f8      	ldr	r0, [r7, #12]
 8014e88:	f001 fe60 	bl	8016b4c <ethernet_output>
 8014e8c:	4603      	mov	r3, r0
}
 8014e8e:	4618      	mov	r0, r3
 8014e90:	3710      	adds	r7, #16
 8014e92:	46bd      	mov	sp, r7
 8014e94:	bd80      	pop	{r7, pc}
 8014e96:	bf00      	nop
 8014e98:	24004100 	.word	0x24004100
 8014e9c:	0801a3c8 	.word	0x0801a3c8
 8014ea0:	0801a538 	.word	0x0801a538
 8014ea4:	0801a440 	.word	0x0801a440

08014ea8 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8014ea8:	b580      	push	{r7, lr}
 8014eaa:	b08a      	sub	sp, #40	; 0x28
 8014eac:	af02      	add	r7, sp, #8
 8014eae:	60f8      	str	r0, [r7, #12]
 8014eb0:	60b9      	str	r1, [r7, #8]
 8014eb2:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8014eb4:	687b      	ldr	r3, [r7, #4]
 8014eb6:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8014eb8:	68fb      	ldr	r3, [r7, #12]
 8014eba:	2b00      	cmp	r3, #0
 8014ebc:	d106      	bne.n	8014ecc <etharp_output+0x24>
 8014ebe:	4b73      	ldr	r3, [pc, #460]	; (801508c <etharp_output+0x1e4>)
 8014ec0:	f240 321e 	movw	r2, #798	; 0x31e
 8014ec4:	4972      	ldr	r1, [pc, #456]	; (8015090 <etharp_output+0x1e8>)
 8014ec6:	4873      	ldr	r0, [pc, #460]	; (8015094 <etharp_output+0x1ec>)
 8014ec8:	f001 ffe6 	bl	8016e98 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8014ecc:	68bb      	ldr	r3, [r7, #8]
 8014ece:	2b00      	cmp	r3, #0
 8014ed0:	d106      	bne.n	8014ee0 <etharp_output+0x38>
 8014ed2:	4b6e      	ldr	r3, [pc, #440]	; (801508c <etharp_output+0x1e4>)
 8014ed4:	f240 321f 	movw	r2, #799	; 0x31f
 8014ed8:	496f      	ldr	r1, [pc, #444]	; (8015098 <etharp_output+0x1f0>)
 8014eda:	486e      	ldr	r0, [pc, #440]	; (8015094 <etharp_output+0x1ec>)
 8014edc:	f001 ffdc 	bl	8016e98 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8014ee0:	687b      	ldr	r3, [r7, #4]
 8014ee2:	2b00      	cmp	r3, #0
 8014ee4:	d106      	bne.n	8014ef4 <etharp_output+0x4c>
 8014ee6:	4b69      	ldr	r3, [pc, #420]	; (801508c <etharp_output+0x1e4>)
 8014ee8:	f44f 7248 	mov.w	r2, #800	; 0x320
 8014eec:	496b      	ldr	r1, [pc, #428]	; (801509c <etharp_output+0x1f4>)
 8014eee:	4869      	ldr	r0, [pc, #420]	; (8015094 <etharp_output+0x1ec>)
 8014ef0:	f001 ffd2 	bl	8016e98 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8014ef4:	687b      	ldr	r3, [r7, #4]
 8014ef6:	681b      	ldr	r3, [r3, #0]
 8014ef8:	68f9      	ldr	r1, [r7, #12]
 8014efa:	4618      	mov	r0, r3
 8014efc:	f000 ff1e 	bl	8015d3c <ip4_addr_isbroadcast_u32>
 8014f00:	4603      	mov	r3, r0
 8014f02:	2b00      	cmp	r3, #0
 8014f04:	d002      	beq.n	8014f0c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8014f06:	4b66      	ldr	r3, [pc, #408]	; (80150a0 <etharp_output+0x1f8>)
 8014f08:	61fb      	str	r3, [r7, #28]
 8014f0a:	e0af      	b.n	801506c <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8014f0c:	687b      	ldr	r3, [r7, #4]
 8014f0e:	681b      	ldr	r3, [r3, #0]
 8014f10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014f14:	2be0      	cmp	r3, #224	; 0xe0
 8014f16:	d118      	bne.n	8014f4a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8014f18:	2301      	movs	r3, #1
 8014f1a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8014f1c:	2300      	movs	r3, #0
 8014f1e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8014f20:	235e      	movs	r3, #94	; 0x5e
 8014f22:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8014f24:	687b      	ldr	r3, [r7, #4]
 8014f26:	3301      	adds	r3, #1
 8014f28:	781b      	ldrb	r3, [r3, #0]
 8014f2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014f2e:	b2db      	uxtb	r3, r3
 8014f30:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8014f32:	687b      	ldr	r3, [r7, #4]
 8014f34:	3302      	adds	r3, #2
 8014f36:	781b      	ldrb	r3, [r3, #0]
 8014f38:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8014f3a:	687b      	ldr	r3, [r7, #4]
 8014f3c:	3303      	adds	r3, #3
 8014f3e:	781b      	ldrb	r3, [r3, #0]
 8014f40:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8014f42:	f107 0310 	add.w	r3, r7, #16
 8014f46:	61fb      	str	r3, [r7, #28]
 8014f48:	e090      	b.n	801506c <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8014f4a:	687b      	ldr	r3, [r7, #4]
 8014f4c:	681a      	ldr	r2, [r3, #0]
 8014f4e:	68fb      	ldr	r3, [r7, #12]
 8014f50:	3304      	adds	r3, #4
 8014f52:	681b      	ldr	r3, [r3, #0]
 8014f54:	405a      	eors	r2, r3
 8014f56:	68fb      	ldr	r3, [r7, #12]
 8014f58:	3308      	adds	r3, #8
 8014f5a:	681b      	ldr	r3, [r3, #0]
 8014f5c:	4013      	ands	r3, r2
 8014f5e:	2b00      	cmp	r3, #0
 8014f60:	d012      	beq.n	8014f88 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8014f62:	687b      	ldr	r3, [r7, #4]
 8014f64:	681b      	ldr	r3, [r3, #0]
 8014f66:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8014f68:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8014f6c:	4293      	cmp	r3, r2
 8014f6e:	d00b      	beq.n	8014f88 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8014f70:	68fb      	ldr	r3, [r7, #12]
 8014f72:	330c      	adds	r3, #12
 8014f74:	681b      	ldr	r3, [r3, #0]
 8014f76:	2b00      	cmp	r3, #0
 8014f78:	d003      	beq.n	8014f82 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8014f7a:	68fb      	ldr	r3, [r7, #12]
 8014f7c:	330c      	adds	r3, #12
 8014f7e:	61bb      	str	r3, [r7, #24]
 8014f80:	e002      	b.n	8014f88 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8014f82:	f06f 0303 	mvn.w	r3, #3
 8014f86:	e07d      	b.n	8015084 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8014f88:	4b46      	ldr	r3, [pc, #280]	; (80150a4 <etharp_output+0x1fc>)
 8014f8a:	781b      	ldrb	r3, [r3, #0]
 8014f8c:	4619      	mov	r1, r3
 8014f8e:	4a46      	ldr	r2, [pc, #280]	; (80150a8 <etharp_output+0x200>)
 8014f90:	460b      	mov	r3, r1
 8014f92:	005b      	lsls	r3, r3, #1
 8014f94:	440b      	add	r3, r1
 8014f96:	00db      	lsls	r3, r3, #3
 8014f98:	4413      	add	r3, r2
 8014f9a:	3314      	adds	r3, #20
 8014f9c:	781b      	ldrb	r3, [r3, #0]
 8014f9e:	2b01      	cmp	r3, #1
 8014fa0:	d925      	bls.n	8014fee <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8014fa2:	4b40      	ldr	r3, [pc, #256]	; (80150a4 <etharp_output+0x1fc>)
 8014fa4:	781b      	ldrb	r3, [r3, #0]
 8014fa6:	4619      	mov	r1, r3
 8014fa8:	4a3f      	ldr	r2, [pc, #252]	; (80150a8 <etharp_output+0x200>)
 8014faa:	460b      	mov	r3, r1
 8014fac:	005b      	lsls	r3, r3, #1
 8014fae:	440b      	add	r3, r1
 8014fb0:	00db      	lsls	r3, r3, #3
 8014fb2:	4413      	add	r3, r2
 8014fb4:	3308      	adds	r3, #8
 8014fb6:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8014fb8:	68fa      	ldr	r2, [r7, #12]
 8014fba:	429a      	cmp	r2, r3
 8014fbc:	d117      	bne.n	8014fee <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8014fbe:	69bb      	ldr	r3, [r7, #24]
 8014fc0:	681a      	ldr	r2, [r3, #0]
 8014fc2:	4b38      	ldr	r3, [pc, #224]	; (80150a4 <etharp_output+0x1fc>)
 8014fc4:	781b      	ldrb	r3, [r3, #0]
 8014fc6:	4618      	mov	r0, r3
 8014fc8:	4937      	ldr	r1, [pc, #220]	; (80150a8 <etharp_output+0x200>)
 8014fca:	4603      	mov	r3, r0
 8014fcc:	005b      	lsls	r3, r3, #1
 8014fce:	4403      	add	r3, r0
 8014fd0:	00db      	lsls	r3, r3, #3
 8014fd2:	440b      	add	r3, r1
 8014fd4:	3304      	adds	r3, #4
 8014fd6:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8014fd8:	429a      	cmp	r2, r3
 8014fda:	d108      	bne.n	8014fee <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8014fdc:	4b31      	ldr	r3, [pc, #196]	; (80150a4 <etharp_output+0x1fc>)
 8014fde:	781b      	ldrb	r3, [r3, #0]
 8014fe0:	461a      	mov	r2, r3
 8014fe2:	68b9      	ldr	r1, [r7, #8]
 8014fe4:	68f8      	ldr	r0, [r7, #12]
 8014fe6:	f7ff fec5 	bl	8014d74 <etharp_output_to_arp_index>
 8014fea:	4603      	mov	r3, r0
 8014fec:	e04a      	b.n	8015084 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8014fee:	2300      	movs	r3, #0
 8014ff0:	75fb      	strb	r3, [r7, #23]
 8014ff2:	e031      	b.n	8015058 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8014ff4:	7dfa      	ldrb	r2, [r7, #23]
 8014ff6:	492c      	ldr	r1, [pc, #176]	; (80150a8 <etharp_output+0x200>)
 8014ff8:	4613      	mov	r3, r2
 8014ffa:	005b      	lsls	r3, r3, #1
 8014ffc:	4413      	add	r3, r2
 8014ffe:	00db      	lsls	r3, r3, #3
 8015000:	440b      	add	r3, r1
 8015002:	3314      	adds	r3, #20
 8015004:	781b      	ldrb	r3, [r3, #0]
 8015006:	2b01      	cmp	r3, #1
 8015008:	d923      	bls.n	8015052 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801500a:	7dfa      	ldrb	r2, [r7, #23]
 801500c:	4926      	ldr	r1, [pc, #152]	; (80150a8 <etharp_output+0x200>)
 801500e:	4613      	mov	r3, r2
 8015010:	005b      	lsls	r3, r3, #1
 8015012:	4413      	add	r3, r2
 8015014:	00db      	lsls	r3, r3, #3
 8015016:	440b      	add	r3, r1
 8015018:	3308      	adds	r3, #8
 801501a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801501c:	68fa      	ldr	r2, [r7, #12]
 801501e:	429a      	cmp	r2, r3
 8015020:	d117      	bne.n	8015052 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8015022:	69bb      	ldr	r3, [r7, #24]
 8015024:	6819      	ldr	r1, [r3, #0]
 8015026:	7dfa      	ldrb	r2, [r7, #23]
 8015028:	481f      	ldr	r0, [pc, #124]	; (80150a8 <etharp_output+0x200>)
 801502a:	4613      	mov	r3, r2
 801502c:	005b      	lsls	r3, r3, #1
 801502e:	4413      	add	r3, r2
 8015030:	00db      	lsls	r3, r3, #3
 8015032:	4403      	add	r3, r0
 8015034:	3304      	adds	r3, #4
 8015036:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8015038:	4299      	cmp	r1, r3
 801503a:	d10a      	bne.n	8015052 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801503c:	4a19      	ldr	r2, [pc, #100]	; (80150a4 <etharp_output+0x1fc>)
 801503e:	7dfb      	ldrb	r3, [r7, #23]
 8015040:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8015042:	7dfb      	ldrb	r3, [r7, #23]
 8015044:	461a      	mov	r2, r3
 8015046:	68b9      	ldr	r1, [r7, #8]
 8015048:	68f8      	ldr	r0, [r7, #12]
 801504a:	f7ff fe93 	bl	8014d74 <etharp_output_to_arp_index>
 801504e:	4603      	mov	r3, r0
 8015050:	e018      	b.n	8015084 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8015052:	7dfb      	ldrb	r3, [r7, #23]
 8015054:	3301      	adds	r3, #1
 8015056:	75fb      	strb	r3, [r7, #23]
 8015058:	7dfb      	ldrb	r3, [r7, #23]
 801505a:	2b09      	cmp	r3, #9
 801505c:	d9ca      	bls.n	8014ff4 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801505e:	68ba      	ldr	r2, [r7, #8]
 8015060:	69b9      	ldr	r1, [r7, #24]
 8015062:	68f8      	ldr	r0, [r7, #12]
 8015064:	f000 f822 	bl	80150ac <etharp_query>
 8015068:	4603      	mov	r3, r0
 801506a:	e00b      	b.n	8015084 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801506c:	68fb      	ldr	r3, [r7, #12]
 801506e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8015072:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015076:	9300      	str	r3, [sp, #0]
 8015078:	69fb      	ldr	r3, [r7, #28]
 801507a:	68b9      	ldr	r1, [r7, #8]
 801507c:	68f8      	ldr	r0, [r7, #12]
 801507e:	f001 fd65 	bl	8016b4c <ethernet_output>
 8015082:	4603      	mov	r3, r0
}
 8015084:	4618      	mov	r0, r3
 8015086:	3720      	adds	r7, #32
 8015088:	46bd      	mov	sp, r7
 801508a:	bd80      	pop	{r7, pc}
 801508c:	0801a3c8 	.word	0x0801a3c8
 8015090:	0801a518 	.word	0x0801a518
 8015094:	0801a440 	.word	0x0801a440
 8015098:	0801a568 	.word	0x0801a568
 801509c:	0801a508 	.word	0x0801a508
 80150a0:	0801abe4 	.word	0x0801abe4
 80150a4:	240041f0 	.word	0x240041f0
 80150a8:	24004100 	.word	0x24004100

080150ac <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80150ac:	b580      	push	{r7, lr}
 80150ae:	b08c      	sub	sp, #48	; 0x30
 80150b0:	af02      	add	r7, sp, #8
 80150b2:	60f8      	str	r0, [r7, #12]
 80150b4:	60b9      	str	r1, [r7, #8]
 80150b6:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80150b8:	68fb      	ldr	r3, [r7, #12]
 80150ba:	3326      	adds	r3, #38	; 0x26
 80150bc:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80150be:	23ff      	movs	r3, #255	; 0xff
 80150c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 80150c4:	2300      	movs	r3, #0
 80150c6:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80150c8:	68bb      	ldr	r3, [r7, #8]
 80150ca:	681b      	ldr	r3, [r3, #0]
 80150cc:	68f9      	ldr	r1, [r7, #12]
 80150ce:	4618      	mov	r0, r3
 80150d0:	f000 fe34 	bl	8015d3c <ip4_addr_isbroadcast_u32>
 80150d4:	4603      	mov	r3, r0
 80150d6:	2b00      	cmp	r3, #0
 80150d8:	d10c      	bne.n	80150f4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80150da:	68bb      	ldr	r3, [r7, #8]
 80150dc:	681b      	ldr	r3, [r3, #0]
 80150de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80150e2:	2be0      	cmp	r3, #224	; 0xe0
 80150e4:	d006      	beq.n	80150f4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80150e6:	68bb      	ldr	r3, [r7, #8]
 80150e8:	2b00      	cmp	r3, #0
 80150ea:	d003      	beq.n	80150f4 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80150ec:	68bb      	ldr	r3, [r7, #8]
 80150ee:	681b      	ldr	r3, [r3, #0]
 80150f0:	2b00      	cmp	r3, #0
 80150f2:	d102      	bne.n	80150fa <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80150f4:	f06f 030f 	mvn.w	r3, #15
 80150f8:	e101      	b.n	80152fe <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80150fa:	68fa      	ldr	r2, [r7, #12]
 80150fc:	2101      	movs	r1, #1
 80150fe:	68b8      	ldr	r0, [r7, #8]
 8015100:	f7ff fb60 	bl	80147c4 <etharp_find_entry>
 8015104:	4603      	mov	r3, r0
 8015106:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8015108:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801510c:	2b00      	cmp	r3, #0
 801510e:	da02      	bge.n	8015116 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8015110:	8a7b      	ldrh	r3, [r7, #18]
 8015112:	b25b      	sxtb	r3, r3
 8015114:	e0f3      	b.n	80152fe <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8015116:	8a7b      	ldrh	r3, [r7, #18]
 8015118:	2b7e      	cmp	r3, #126	; 0x7e
 801511a:	d906      	bls.n	801512a <etharp_query+0x7e>
 801511c:	4b7a      	ldr	r3, [pc, #488]	; (8015308 <etharp_query+0x25c>)
 801511e:	f240 32c1 	movw	r2, #961	; 0x3c1
 8015122:	497a      	ldr	r1, [pc, #488]	; (801530c <etharp_query+0x260>)
 8015124:	487a      	ldr	r0, [pc, #488]	; (8015310 <etharp_query+0x264>)
 8015126:	f001 feb7 	bl	8016e98 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801512a:	8a7b      	ldrh	r3, [r7, #18]
 801512c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801512e:	7c7a      	ldrb	r2, [r7, #17]
 8015130:	4978      	ldr	r1, [pc, #480]	; (8015314 <etharp_query+0x268>)
 8015132:	4613      	mov	r3, r2
 8015134:	005b      	lsls	r3, r3, #1
 8015136:	4413      	add	r3, r2
 8015138:	00db      	lsls	r3, r3, #3
 801513a:	440b      	add	r3, r1
 801513c:	3314      	adds	r3, #20
 801513e:	781b      	ldrb	r3, [r3, #0]
 8015140:	2b00      	cmp	r3, #0
 8015142:	d115      	bne.n	8015170 <etharp_query+0xc4>
    is_new_entry = 1;
 8015144:	2301      	movs	r3, #1
 8015146:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8015148:	7c7a      	ldrb	r2, [r7, #17]
 801514a:	4972      	ldr	r1, [pc, #456]	; (8015314 <etharp_query+0x268>)
 801514c:	4613      	mov	r3, r2
 801514e:	005b      	lsls	r3, r3, #1
 8015150:	4413      	add	r3, r2
 8015152:	00db      	lsls	r3, r3, #3
 8015154:	440b      	add	r3, r1
 8015156:	3314      	adds	r3, #20
 8015158:	2201      	movs	r2, #1
 801515a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801515c:	7c7a      	ldrb	r2, [r7, #17]
 801515e:	496d      	ldr	r1, [pc, #436]	; (8015314 <etharp_query+0x268>)
 8015160:	4613      	mov	r3, r2
 8015162:	005b      	lsls	r3, r3, #1
 8015164:	4413      	add	r3, r2
 8015166:	00db      	lsls	r3, r3, #3
 8015168:	440b      	add	r3, r1
 801516a:	3308      	adds	r3, #8
 801516c:	68fa      	ldr	r2, [r7, #12]
 801516e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8015170:	7c7a      	ldrb	r2, [r7, #17]
 8015172:	4968      	ldr	r1, [pc, #416]	; (8015314 <etharp_query+0x268>)
 8015174:	4613      	mov	r3, r2
 8015176:	005b      	lsls	r3, r3, #1
 8015178:	4413      	add	r3, r2
 801517a:	00db      	lsls	r3, r3, #3
 801517c:	440b      	add	r3, r1
 801517e:	3314      	adds	r3, #20
 8015180:	781b      	ldrb	r3, [r3, #0]
 8015182:	2b01      	cmp	r3, #1
 8015184:	d011      	beq.n	80151aa <etharp_query+0xfe>
 8015186:	7c7a      	ldrb	r2, [r7, #17]
 8015188:	4962      	ldr	r1, [pc, #392]	; (8015314 <etharp_query+0x268>)
 801518a:	4613      	mov	r3, r2
 801518c:	005b      	lsls	r3, r3, #1
 801518e:	4413      	add	r3, r2
 8015190:	00db      	lsls	r3, r3, #3
 8015192:	440b      	add	r3, r1
 8015194:	3314      	adds	r3, #20
 8015196:	781b      	ldrb	r3, [r3, #0]
 8015198:	2b01      	cmp	r3, #1
 801519a:	d806      	bhi.n	80151aa <etharp_query+0xfe>
 801519c:	4b5a      	ldr	r3, [pc, #360]	; (8015308 <etharp_query+0x25c>)
 801519e:	f240 32cd 	movw	r2, #973	; 0x3cd
 80151a2:	495d      	ldr	r1, [pc, #372]	; (8015318 <etharp_query+0x26c>)
 80151a4:	485a      	ldr	r0, [pc, #360]	; (8015310 <etharp_query+0x264>)
 80151a6:	f001 fe77 	bl	8016e98 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80151aa:	6a3b      	ldr	r3, [r7, #32]
 80151ac:	2b00      	cmp	r3, #0
 80151ae:	d102      	bne.n	80151b6 <etharp_query+0x10a>
 80151b0:	687b      	ldr	r3, [r7, #4]
 80151b2:	2b00      	cmp	r3, #0
 80151b4:	d10c      	bne.n	80151d0 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80151b6:	68b9      	ldr	r1, [r7, #8]
 80151b8:	68f8      	ldr	r0, [r7, #12]
 80151ba:	f000 f963 	bl	8015484 <etharp_request>
 80151be:	4603      	mov	r3, r0
 80151c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80151c4:	687b      	ldr	r3, [r7, #4]
 80151c6:	2b00      	cmp	r3, #0
 80151c8:	d102      	bne.n	80151d0 <etharp_query+0x124>
      return result;
 80151ca:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80151ce:	e096      	b.n	80152fe <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80151d0:	687b      	ldr	r3, [r7, #4]
 80151d2:	2b00      	cmp	r3, #0
 80151d4:	d106      	bne.n	80151e4 <etharp_query+0x138>
 80151d6:	4b4c      	ldr	r3, [pc, #304]	; (8015308 <etharp_query+0x25c>)
 80151d8:	f240 32e1 	movw	r2, #993	; 0x3e1
 80151dc:	494f      	ldr	r1, [pc, #316]	; (801531c <etharp_query+0x270>)
 80151de:	484c      	ldr	r0, [pc, #304]	; (8015310 <etharp_query+0x264>)
 80151e0:	f001 fe5a 	bl	8016e98 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80151e4:	7c7a      	ldrb	r2, [r7, #17]
 80151e6:	494b      	ldr	r1, [pc, #300]	; (8015314 <etharp_query+0x268>)
 80151e8:	4613      	mov	r3, r2
 80151ea:	005b      	lsls	r3, r3, #1
 80151ec:	4413      	add	r3, r2
 80151ee:	00db      	lsls	r3, r3, #3
 80151f0:	440b      	add	r3, r1
 80151f2:	3314      	adds	r3, #20
 80151f4:	781b      	ldrb	r3, [r3, #0]
 80151f6:	2b01      	cmp	r3, #1
 80151f8:	d917      	bls.n	801522a <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80151fa:	4a49      	ldr	r2, [pc, #292]	; (8015320 <etharp_query+0x274>)
 80151fc:	7c7b      	ldrb	r3, [r7, #17]
 80151fe:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8015200:	7c7a      	ldrb	r2, [r7, #17]
 8015202:	4613      	mov	r3, r2
 8015204:	005b      	lsls	r3, r3, #1
 8015206:	4413      	add	r3, r2
 8015208:	00db      	lsls	r3, r3, #3
 801520a:	3308      	adds	r3, #8
 801520c:	4a41      	ldr	r2, [pc, #260]	; (8015314 <etharp_query+0x268>)
 801520e:	4413      	add	r3, r2
 8015210:	3304      	adds	r3, #4
 8015212:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8015216:	9200      	str	r2, [sp, #0]
 8015218:	697a      	ldr	r2, [r7, #20]
 801521a:	6879      	ldr	r1, [r7, #4]
 801521c:	68f8      	ldr	r0, [r7, #12]
 801521e:	f001 fc95 	bl	8016b4c <ethernet_output>
 8015222:	4603      	mov	r3, r0
 8015224:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015228:	e067      	b.n	80152fa <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801522a:	7c7a      	ldrb	r2, [r7, #17]
 801522c:	4939      	ldr	r1, [pc, #228]	; (8015314 <etharp_query+0x268>)
 801522e:	4613      	mov	r3, r2
 8015230:	005b      	lsls	r3, r3, #1
 8015232:	4413      	add	r3, r2
 8015234:	00db      	lsls	r3, r3, #3
 8015236:	440b      	add	r3, r1
 8015238:	3314      	adds	r3, #20
 801523a:	781b      	ldrb	r3, [r3, #0]
 801523c:	2b01      	cmp	r3, #1
 801523e:	d15c      	bne.n	80152fa <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8015240:	2300      	movs	r3, #0
 8015242:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8015244:	687b      	ldr	r3, [r7, #4]
 8015246:	61fb      	str	r3, [r7, #28]
    while (p) {
 8015248:	e01c      	b.n	8015284 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801524a:	69fb      	ldr	r3, [r7, #28]
 801524c:	895a      	ldrh	r2, [r3, #10]
 801524e:	69fb      	ldr	r3, [r7, #28]
 8015250:	891b      	ldrh	r3, [r3, #8]
 8015252:	429a      	cmp	r2, r3
 8015254:	d10a      	bne.n	801526c <etharp_query+0x1c0>
 8015256:	69fb      	ldr	r3, [r7, #28]
 8015258:	681b      	ldr	r3, [r3, #0]
 801525a:	2b00      	cmp	r3, #0
 801525c:	d006      	beq.n	801526c <etharp_query+0x1c0>
 801525e:	4b2a      	ldr	r3, [pc, #168]	; (8015308 <etharp_query+0x25c>)
 8015260:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8015264:	492f      	ldr	r1, [pc, #188]	; (8015324 <etharp_query+0x278>)
 8015266:	482a      	ldr	r0, [pc, #168]	; (8015310 <etharp_query+0x264>)
 8015268:	f001 fe16 	bl	8016e98 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801526c:	69fb      	ldr	r3, [r7, #28]
 801526e:	7b1b      	ldrb	r3, [r3, #12]
 8015270:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015274:	2b00      	cmp	r3, #0
 8015276:	d002      	beq.n	801527e <etharp_query+0x1d2>
        copy_needed = 1;
 8015278:	2301      	movs	r3, #1
 801527a:	61bb      	str	r3, [r7, #24]
        break;
 801527c:	e005      	b.n	801528a <etharp_query+0x1de>
      }
      p = p->next;
 801527e:	69fb      	ldr	r3, [r7, #28]
 8015280:	681b      	ldr	r3, [r3, #0]
 8015282:	61fb      	str	r3, [r7, #28]
    while (p) {
 8015284:	69fb      	ldr	r3, [r7, #28]
 8015286:	2b00      	cmp	r3, #0
 8015288:	d1df      	bne.n	801524a <etharp_query+0x19e>
    }
    if (copy_needed) {
 801528a:	69bb      	ldr	r3, [r7, #24]
 801528c:	2b00      	cmp	r3, #0
 801528e:	d007      	beq.n	80152a0 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8015290:	687a      	ldr	r2, [r7, #4]
 8015292:	f44f 7120 	mov.w	r1, #640	; 0x280
 8015296:	200e      	movs	r0, #14
 8015298:	f7f8 fe04 	bl	800dea4 <pbuf_clone>
 801529c:	61f8      	str	r0, [r7, #28]
 801529e:	e004      	b.n	80152aa <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80152a0:	687b      	ldr	r3, [r7, #4]
 80152a2:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80152a4:	69f8      	ldr	r0, [r7, #28]
 80152a6:	f7f8 fc2b 	bl	800db00 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80152aa:	69fb      	ldr	r3, [r7, #28]
 80152ac:	2b00      	cmp	r3, #0
 80152ae:	d021      	beq.n	80152f4 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80152b0:	7c7a      	ldrb	r2, [r7, #17]
 80152b2:	4918      	ldr	r1, [pc, #96]	; (8015314 <etharp_query+0x268>)
 80152b4:	4613      	mov	r3, r2
 80152b6:	005b      	lsls	r3, r3, #1
 80152b8:	4413      	add	r3, r2
 80152ba:	00db      	lsls	r3, r3, #3
 80152bc:	440b      	add	r3, r1
 80152be:	681b      	ldr	r3, [r3, #0]
 80152c0:	2b00      	cmp	r3, #0
 80152c2:	d00a      	beq.n	80152da <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80152c4:	7c7a      	ldrb	r2, [r7, #17]
 80152c6:	4913      	ldr	r1, [pc, #76]	; (8015314 <etharp_query+0x268>)
 80152c8:	4613      	mov	r3, r2
 80152ca:	005b      	lsls	r3, r3, #1
 80152cc:	4413      	add	r3, r2
 80152ce:	00db      	lsls	r3, r3, #3
 80152d0:	440b      	add	r3, r1
 80152d2:	681b      	ldr	r3, [r3, #0]
 80152d4:	4618      	mov	r0, r3
 80152d6:	f7f8 fb6d 	bl	800d9b4 <pbuf_free>
      }
      arp_table[i].q = p;
 80152da:	7c7a      	ldrb	r2, [r7, #17]
 80152dc:	490d      	ldr	r1, [pc, #52]	; (8015314 <etharp_query+0x268>)
 80152de:	4613      	mov	r3, r2
 80152e0:	005b      	lsls	r3, r3, #1
 80152e2:	4413      	add	r3, r2
 80152e4:	00db      	lsls	r3, r3, #3
 80152e6:	440b      	add	r3, r1
 80152e8:	69fa      	ldr	r2, [r7, #28]
 80152ea:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80152ec:	2300      	movs	r3, #0
 80152ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80152f2:	e002      	b.n	80152fa <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80152f4:	23ff      	movs	r3, #255	; 0xff
 80152f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 80152fa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80152fe:	4618      	mov	r0, r3
 8015300:	3728      	adds	r7, #40	; 0x28
 8015302:	46bd      	mov	sp, r7
 8015304:	bd80      	pop	{r7, pc}
 8015306:	bf00      	nop
 8015308:	0801a3c8 	.word	0x0801a3c8
 801530c:	0801a574 	.word	0x0801a574
 8015310:	0801a440 	.word	0x0801a440
 8015314:	24004100 	.word	0x24004100
 8015318:	0801a584 	.word	0x0801a584
 801531c:	0801a568 	.word	0x0801a568
 8015320:	240041f0 	.word	0x240041f0
 8015324:	0801a5ac 	.word	0x0801a5ac

08015328 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8015328:	b580      	push	{r7, lr}
 801532a:	b08a      	sub	sp, #40	; 0x28
 801532c:	af02      	add	r7, sp, #8
 801532e:	60f8      	str	r0, [r7, #12]
 8015330:	60b9      	str	r1, [r7, #8]
 8015332:	607a      	str	r2, [r7, #4]
 8015334:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8015336:	2300      	movs	r3, #0
 8015338:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801533a:	68fb      	ldr	r3, [r7, #12]
 801533c:	2b00      	cmp	r3, #0
 801533e:	d106      	bne.n	801534e <etharp_raw+0x26>
 8015340:	4b3a      	ldr	r3, [pc, #232]	; (801542c <etharp_raw+0x104>)
 8015342:	f240 4257 	movw	r2, #1111	; 0x457
 8015346:	493a      	ldr	r1, [pc, #232]	; (8015430 <etharp_raw+0x108>)
 8015348:	483a      	ldr	r0, [pc, #232]	; (8015434 <etharp_raw+0x10c>)
 801534a:	f001 fda5 	bl	8016e98 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801534e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015352:	211c      	movs	r1, #28
 8015354:	200e      	movs	r0, #14
 8015356:	f7f8 f849 	bl	800d3ec <pbuf_alloc>
 801535a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801535c:	69bb      	ldr	r3, [r7, #24]
 801535e:	2b00      	cmp	r3, #0
 8015360:	d102      	bne.n	8015368 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8015362:	f04f 33ff 	mov.w	r3, #4294967295
 8015366:	e05d      	b.n	8015424 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8015368:	69bb      	ldr	r3, [r7, #24]
 801536a:	895b      	ldrh	r3, [r3, #10]
 801536c:	2b1b      	cmp	r3, #27
 801536e:	d806      	bhi.n	801537e <etharp_raw+0x56>
 8015370:	4b2e      	ldr	r3, [pc, #184]	; (801542c <etharp_raw+0x104>)
 8015372:	f240 4262 	movw	r2, #1122	; 0x462
 8015376:	4930      	ldr	r1, [pc, #192]	; (8015438 <etharp_raw+0x110>)
 8015378:	482e      	ldr	r0, [pc, #184]	; (8015434 <etharp_raw+0x10c>)
 801537a:	f001 fd8d 	bl	8016e98 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801537e:	69bb      	ldr	r3, [r7, #24]
 8015380:	685b      	ldr	r3, [r3, #4]
 8015382:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8015384:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8015386:	4618      	mov	r0, r3
 8015388:	f7f6 fe5a 	bl	800c040 <lwip_htons>
 801538c:	4603      	mov	r3, r0
 801538e:	461a      	mov	r2, r3
 8015390:	697b      	ldr	r3, [r7, #20]
 8015392:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8015394:	68fb      	ldr	r3, [r7, #12]
 8015396:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801539a:	2b06      	cmp	r3, #6
 801539c:	d006      	beq.n	80153ac <etharp_raw+0x84>
 801539e:	4b23      	ldr	r3, [pc, #140]	; (801542c <etharp_raw+0x104>)
 80153a0:	f240 4269 	movw	r2, #1129	; 0x469
 80153a4:	4925      	ldr	r1, [pc, #148]	; (801543c <etharp_raw+0x114>)
 80153a6:	4823      	ldr	r0, [pc, #140]	; (8015434 <etharp_raw+0x10c>)
 80153a8:	f001 fd76 	bl	8016e98 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80153ac:	697b      	ldr	r3, [r7, #20]
 80153ae:	3308      	adds	r3, #8
 80153b0:	2206      	movs	r2, #6
 80153b2:	6839      	ldr	r1, [r7, #0]
 80153b4:	4618      	mov	r0, r3
 80153b6:	f001 fd59 	bl	8016e6c <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80153ba:	697b      	ldr	r3, [r7, #20]
 80153bc:	3312      	adds	r3, #18
 80153be:	2206      	movs	r2, #6
 80153c0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80153c2:	4618      	mov	r0, r3
 80153c4:	f001 fd52 	bl	8016e6c <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80153c8:	697b      	ldr	r3, [r7, #20]
 80153ca:	330e      	adds	r3, #14
 80153cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80153ce:	6812      	ldr	r2, [r2, #0]
 80153d0:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80153d2:	697b      	ldr	r3, [r7, #20]
 80153d4:	3318      	adds	r3, #24
 80153d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80153d8:	6812      	ldr	r2, [r2, #0]
 80153da:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80153dc:	697b      	ldr	r3, [r7, #20]
 80153de:	2200      	movs	r2, #0
 80153e0:	701a      	strb	r2, [r3, #0]
 80153e2:	2200      	movs	r2, #0
 80153e4:	f042 0201 	orr.w	r2, r2, #1
 80153e8:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80153ea:	697b      	ldr	r3, [r7, #20]
 80153ec:	2200      	movs	r2, #0
 80153ee:	f042 0208 	orr.w	r2, r2, #8
 80153f2:	709a      	strb	r2, [r3, #2]
 80153f4:	2200      	movs	r2, #0
 80153f6:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80153f8:	697b      	ldr	r3, [r7, #20]
 80153fa:	2206      	movs	r2, #6
 80153fc:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80153fe:	697b      	ldr	r3, [r7, #20]
 8015400:	2204      	movs	r2, #4
 8015402:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8015404:	f640 0306 	movw	r3, #2054	; 0x806
 8015408:	9300      	str	r3, [sp, #0]
 801540a:	687b      	ldr	r3, [r7, #4]
 801540c:	68ba      	ldr	r2, [r7, #8]
 801540e:	69b9      	ldr	r1, [r7, #24]
 8015410:	68f8      	ldr	r0, [r7, #12]
 8015412:	f001 fb9b 	bl	8016b4c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8015416:	69b8      	ldr	r0, [r7, #24]
 8015418:	f7f8 facc 	bl	800d9b4 <pbuf_free>
  p = NULL;
 801541c:	2300      	movs	r3, #0
 801541e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8015420:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015424:	4618      	mov	r0, r3
 8015426:	3720      	adds	r7, #32
 8015428:	46bd      	mov	sp, r7
 801542a:	bd80      	pop	{r7, pc}
 801542c:	0801a3c8 	.word	0x0801a3c8
 8015430:	0801a518 	.word	0x0801a518
 8015434:	0801a440 	.word	0x0801a440
 8015438:	0801a5c8 	.word	0x0801a5c8
 801543c:	0801a5fc 	.word	0x0801a5fc

08015440 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8015440:	b580      	push	{r7, lr}
 8015442:	b088      	sub	sp, #32
 8015444:	af04      	add	r7, sp, #16
 8015446:	60f8      	str	r0, [r7, #12]
 8015448:	60b9      	str	r1, [r7, #8]
 801544a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801544c:	68fb      	ldr	r3, [r7, #12]
 801544e:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8015452:	68fb      	ldr	r3, [r7, #12]
 8015454:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8015458:	68fb      	ldr	r3, [r7, #12]
 801545a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801545c:	2201      	movs	r2, #1
 801545e:	9203      	str	r2, [sp, #12]
 8015460:	68ba      	ldr	r2, [r7, #8]
 8015462:	9202      	str	r2, [sp, #8]
 8015464:	4a06      	ldr	r2, [pc, #24]	; (8015480 <etharp_request_dst+0x40>)
 8015466:	9201      	str	r2, [sp, #4]
 8015468:	9300      	str	r3, [sp, #0]
 801546a:	4603      	mov	r3, r0
 801546c:	687a      	ldr	r2, [r7, #4]
 801546e:	68f8      	ldr	r0, [r7, #12]
 8015470:	f7ff ff5a 	bl	8015328 <etharp_raw>
 8015474:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8015476:	4618      	mov	r0, r3
 8015478:	3710      	adds	r7, #16
 801547a:	46bd      	mov	sp, r7
 801547c:	bd80      	pop	{r7, pc}
 801547e:	bf00      	nop
 8015480:	0801abec 	.word	0x0801abec

08015484 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8015484:	b580      	push	{r7, lr}
 8015486:	b082      	sub	sp, #8
 8015488:	af00      	add	r7, sp, #0
 801548a:	6078      	str	r0, [r7, #4]
 801548c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801548e:	4a05      	ldr	r2, [pc, #20]	; (80154a4 <etharp_request+0x20>)
 8015490:	6839      	ldr	r1, [r7, #0]
 8015492:	6878      	ldr	r0, [r7, #4]
 8015494:	f7ff ffd4 	bl	8015440 <etharp_request_dst>
 8015498:	4603      	mov	r3, r0
}
 801549a:	4618      	mov	r0, r3
 801549c:	3708      	adds	r7, #8
 801549e:	46bd      	mov	sp, r7
 80154a0:	bd80      	pop	{r7, pc}
 80154a2:	bf00      	nop
 80154a4:	0801abe4 	.word	0x0801abe4

080154a8 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80154a8:	b580      	push	{r7, lr}
 80154aa:	b08e      	sub	sp, #56	; 0x38
 80154ac:	af04      	add	r7, sp, #16
 80154ae:	6078      	str	r0, [r7, #4]
 80154b0:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80154b2:	4b87      	ldr	r3, [pc, #540]	; (80156d0 <icmp_input+0x228>)
 80154b4:	689b      	ldr	r3, [r3, #8]
 80154b6:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80154b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154ba:	781b      	ldrb	r3, [r3, #0]
 80154bc:	f003 030f 	and.w	r3, r3, #15
 80154c0:	b2db      	uxtb	r3, r3
 80154c2:	009b      	lsls	r3, r3, #2
 80154c4:	b2db      	uxtb	r3, r3
 80154c6:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80154c8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80154ca:	2b13      	cmp	r3, #19
 80154cc:	f240 80e8 	bls.w	80156a0 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80154d0:	687b      	ldr	r3, [r7, #4]
 80154d2:	895b      	ldrh	r3, [r3, #10]
 80154d4:	2b03      	cmp	r3, #3
 80154d6:	f240 80e5 	bls.w	80156a4 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80154da:	687b      	ldr	r3, [r7, #4]
 80154dc:	685b      	ldr	r3, [r3, #4]
 80154de:	781b      	ldrb	r3, [r3, #0]
 80154e0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80154e4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80154e8:	2b00      	cmp	r3, #0
 80154ea:	f000 80d2 	beq.w	8015692 <icmp_input+0x1ea>
 80154ee:	2b08      	cmp	r3, #8
 80154f0:	f040 80d2 	bne.w	8015698 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80154f4:	4b77      	ldr	r3, [pc, #476]	; (80156d4 <icmp_input+0x22c>)
 80154f6:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80154f8:	4b75      	ldr	r3, [pc, #468]	; (80156d0 <icmp_input+0x228>)
 80154fa:	695b      	ldr	r3, [r3, #20]
 80154fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015500:	2be0      	cmp	r3, #224	; 0xe0
 8015502:	f000 80d6 	beq.w	80156b2 <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8015506:	4b72      	ldr	r3, [pc, #456]	; (80156d0 <icmp_input+0x228>)
 8015508:	695b      	ldr	r3, [r3, #20]
 801550a:	4a71      	ldr	r2, [pc, #452]	; (80156d0 <icmp_input+0x228>)
 801550c:	6812      	ldr	r2, [r2, #0]
 801550e:	4611      	mov	r1, r2
 8015510:	4618      	mov	r0, r3
 8015512:	f000 fc13 	bl	8015d3c <ip4_addr_isbroadcast_u32>
 8015516:	4603      	mov	r3, r0
 8015518:	2b00      	cmp	r3, #0
 801551a:	f040 80cc 	bne.w	80156b6 <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801551e:	687b      	ldr	r3, [r7, #4]
 8015520:	891b      	ldrh	r3, [r3, #8]
 8015522:	2b07      	cmp	r3, #7
 8015524:	f240 80c0 	bls.w	80156a8 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 8015528:	6878      	ldr	r0, [r7, #4]
 801552a:	f7f6 fe26 	bl	800c17a <inet_chksum_pbuf>
 801552e:	4603      	mov	r3, r0
 8015530:	2b00      	cmp	r3, #0
 8015532:	d003      	beq.n	801553c <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 8015534:	6878      	ldr	r0, [r7, #4]
 8015536:	f7f8 fa3d 	bl	800d9b4 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 801553a:	e0c5      	b.n	80156c8 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801553c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801553e:	330e      	adds	r3, #14
 8015540:	4619      	mov	r1, r3
 8015542:	6878      	ldr	r0, [r7, #4]
 8015544:	f7f8 f9a0 	bl	800d888 <pbuf_add_header>
 8015548:	4603      	mov	r3, r0
 801554a:	2b00      	cmp	r3, #0
 801554c:	d04b      	beq.n	80155e6 <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801554e:	687b      	ldr	r3, [r7, #4]
 8015550:	891a      	ldrh	r2, [r3, #8]
 8015552:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015554:	4413      	add	r3, r2
 8015556:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8015558:	687b      	ldr	r3, [r7, #4]
 801555a:	891b      	ldrh	r3, [r3, #8]
 801555c:	8b7a      	ldrh	r2, [r7, #26]
 801555e:	429a      	cmp	r2, r3
 8015560:	f0c0 80ab 	bcc.w	80156ba <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8015564:	8b7b      	ldrh	r3, [r7, #26]
 8015566:	f44f 7220 	mov.w	r2, #640	; 0x280
 801556a:	4619      	mov	r1, r3
 801556c:	200e      	movs	r0, #14
 801556e:	f7f7 ff3d 	bl	800d3ec <pbuf_alloc>
 8015572:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8015574:	697b      	ldr	r3, [r7, #20]
 8015576:	2b00      	cmp	r3, #0
 8015578:	f000 80a1 	beq.w	80156be <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801557c:	697b      	ldr	r3, [r7, #20]
 801557e:	895b      	ldrh	r3, [r3, #10]
 8015580:	461a      	mov	r2, r3
 8015582:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015584:	3308      	adds	r3, #8
 8015586:	429a      	cmp	r2, r3
 8015588:	d203      	bcs.n	8015592 <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801558a:	6978      	ldr	r0, [r7, #20]
 801558c:	f7f8 fa12 	bl	800d9b4 <pbuf_free>
          goto icmperr;
 8015590:	e096      	b.n	80156c0 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8015592:	697b      	ldr	r3, [r7, #20]
 8015594:	685b      	ldr	r3, [r3, #4]
 8015596:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8015598:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801559a:	4618      	mov	r0, r3
 801559c:	f001 fc66 	bl	8016e6c <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80155a0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80155a2:	4619      	mov	r1, r3
 80155a4:	6978      	ldr	r0, [r7, #20]
 80155a6:	f7f8 f97f 	bl	800d8a8 <pbuf_remove_header>
 80155aa:	4603      	mov	r3, r0
 80155ac:	2b00      	cmp	r3, #0
 80155ae:	d009      	beq.n	80155c4 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80155b0:	4b49      	ldr	r3, [pc, #292]	; (80156d8 <icmp_input+0x230>)
 80155b2:	22b6      	movs	r2, #182	; 0xb6
 80155b4:	4949      	ldr	r1, [pc, #292]	; (80156dc <icmp_input+0x234>)
 80155b6:	484a      	ldr	r0, [pc, #296]	; (80156e0 <icmp_input+0x238>)
 80155b8:	f001 fc6e 	bl	8016e98 <iprintf>
          pbuf_free(r);
 80155bc:	6978      	ldr	r0, [r7, #20]
 80155be:	f7f8 f9f9 	bl	800d9b4 <pbuf_free>
          goto icmperr;
 80155c2:	e07d      	b.n	80156c0 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80155c4:	6879      	ldr	r1, [r7, #4]
 80155c6:	6978      	ldr	r0, [r7, #20]
 80155c8:	f7f8 fb28 	bl	800dc1c <pbuf_copy>
 80155cc:	4603      	mov	r3, r0
 80155ce:	2b00      	cmp	r3, #0
 80155d0:	d003      	beq.n	80155da <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80155d2:	6978      	ldr	r0, [r7, #20]
 80155d4:	f7f8 f9ee 	bl	800d9b4 <pbuf_free>
          goto icmperr;
 80155d8:	e072      	b.n	80156c0 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 80155da:	6878      	ldr	r0, [r7, #4]
 80155dc:	f7f8 f9ea 	bl	800d9b4 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80155e0:	697b      	ldr	r3, [r7, #20]
 80155e2:	607b      	str	r3, [r7, #4]
 80155e4:	e00f      	b.n	8015606 <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80155e6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80155e8:	330e      	adds	r3, #14
 80155ea:	4619      	mov	r1, r3
 80155ec:	6878      	ldr	r0, [r7, #4]
 80155ee:	f7f8 f95b 	bl	800d8a8 <pbuf_remove_header>
 80155f2:	4603      	mov	r3, r0
 80155f4:	2b00      	cmp	r3, #0
 80155f6:	d006      	beq.n	8015606 <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80155f8:	4b37      	ldr	r3, [pc, #220]	; (80156d8 <icmp_input+0x230>)
 80155fa:	22c7      	movs	r2, #199	; 0xc7
 80155fc:	4939      	ldr	r1, [pc, #228]	; (80156e4 <icmp_input+0x23c>)
 80155fe:	4838      	ldr	r0, [pc, #224]	; (80156e0 <icmp_input+0x238>)
 8015600:	f001 fc4a 	bl	8016e98 <iprintf>
          goto icmperr;
 8015604:	e05c      	b.n	80156c0 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8015606:	687b      	ldr	r3, [r7, #4]
 8015608:	685b      	ldr	r3, [r3, #4]
 801560a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801560c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801560e:	4619      	mov	r1, r3
 8015610:	6878      	ldr	r0, [r7, #4]
 8015612:	f7f8 f939 	bl	800d888 <pbuf_add_header>
 8015616:	4603      	mov	r3, r0
 8015618:	2b00      	cmp	r3, #0
 801561a:	d13c      	bne.n	8015696 <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801561c:	687b      	ldr	r3, [r7, #4]
 801561e:	685b      	ldr	r3, [r3, #4]
 8015620:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8015622:	69fb      	ldr	r3, [r7, #28]
 8015624:	681a      	ldr	r2, [r3, #0]
 8015626:	68fb      	ldr	r3, [r7, #12]
 8015628:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801562a:	4b29      	ldr	r3, [pc, #164]	; (80156d0 <icmp_input+0x228>)
 801562c:	691a      	ldr	r2, [r3, #16]
 801562e:	68fb      	ldr	r3, [r7, #12]
 8015630:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8015632:	693b      	ldr	r3, [r7, #16]
 8015634:	2200      	movs	r2, #0
 8015636:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8015638:	693b      	ldr	r3, [r7, #16]
 801563a:	885b      	ldrh	r3, [r3, #2]
 801563c:	b29b      	uxth	r3, r3
 801563e:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8015642:	4293      	cmp	r3, r2
 8015644:	d907      	bls.n	8015656 <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 8015646:	693b      	ldr	r3, [r7, #16]
 8015648:	885b      	ldrh	r3, [r3, #2]
 801564a:	b29b      	uxth	r3, r3
 801564c:	3309      	adds	r3, #9
 801564e:	b29a      	uxth	r2, r3
 8015650:	693b      	ldr	r3, [r7, #16]
 8015652:	805a      	strh	r2, [r3, #2]
 8015654:	e006      	b.n	8015664 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 8015656:	693b      	ldr	r3, [r7, #16]
 8015658:	885b      	ldrh	r3, [r3, #2]
 801565a:	b29b      	uxth	r3, r3
 801565c:	3308      	adds	r3, #8
 801565e:	b29a      	uxth	r2, r3
 8015660:	693b      	ldr	r3, [r7, #16]
 8015662:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8015664:	68fb      	ldr	r3, [r7, #12]
 8015666:	22ff      	movs	r2, #255	; 0xff
 8015668:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801566a:	68fb      	ldr	r3, [r7, #12]
 801566c:	2200      	movs	r2, #0
 801566e:	729a      	strb	r2, [r3, #10]
 8015670:	2200      	movs	r2, #0
 8015672:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8015674:	683b      	ldr	r3, [r7, #0]
 8015676:	9302      	str	r3, [sp, #8]
 8015678:	2301      	movs	r3, #1
 801567a:	9301      	str	r3, [sp, #4]
 801567c:	2300      	movs	r3, #0
 801567e:	9300      	str	r3, [sp, #0]
 8015680:	23ff      	movs	r3, #255	; 0xff
 8015682:	2200      	movs	r2, #0
 8015684:	69f9      	ldr	r1, [r7, #28]
 8015686:	6878      	ldr	r0, [r7, #4]
 8015688:	f000 fa80 	bl	8015b8c <ip4_output_if>
 801568c:	4603      	mov	r3, r0
 801568e:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8015690:	e001      	b.n	8015696 <icmp_input+0x1ee>
      break;
 8015692:	bf00      	nop
 8015694:	e000      	b.n	8015698 <icmp_input+0x1f0>
      break;
 8015696:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8015698:	6878      	ldr	r0, [r7, #4]
 801569a:	f7f8 f98b 	bl	800d9b4 <pbuf_free>
  return;
 801569e:	e013      	b.n	80156c8 <icmp_input+0x220>
    goto lenerr;
 80156a0:	bf00      	nop
 80156a2:	e002      	b.n	80156aa <icmp_input+0x202>
    goto lenerr;
 80156a4:	bf00      	nop
 80156a6:	e000      	b.n	80156aa <icmp_input+0x202>
        goto lenerr;
 80156a8:	bf00      	nop
lenerr:
  pbuf_free(p);
 80156aa:	6878      	ldr	r0, [r7, #4]
 80156ac:	f7f8 f982 	bl	800d9b4 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80156b0:	e00a      	b.n	80156c8 <icmp_input+0x220>
        goto icmperr;
 80156b2:	bf00      	nop
 80156b4:	e004      	b.n	80156c0 <icmp_input+0x218>
        goto icmperr;
 80156b6:	bf00      	nop
 80156b8:	e002      	b.n	80156c0 <icmp_input+0x218>
          goto icmperr;
 80156ba:	bf00      	nop
 80156bc:	e000      	b.n	80156c0 <icmp_input+0x218>
          goto icmperr;
 80156be:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80156c0:	6878      	ldr	r0, [r7, #4]
 80156c2:	f7f8 f977 	bl	800d9b4 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80156c6:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80156c8:	3728      	adds	r7, #40	; 0x28
 80156ca:	46bd      	mov	sp, r7
 80156cc:	bd80      	pop	{r7, pc}
 80156ce:	bf00      	nop
 80156d0:	240048e8 	.word	0x240048e8
 80156d4:	240048fc 	.word	0x240048fc
 80156d8:	0801a640 	.word	0x0801a640
 80156dc:	0801a678 	.word	0x0801a678
 80156e0:	0801a6b0 	.word	0x0801a6b0
 80156e4:	0801a6d8 	.word	0x0801a6d8

080156e8 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80156e8:	b580      	push	{r7, lr}
 80156ea:	b082      	sub	sp, #8
 80156ec:	af00      	add	r7, sp, #0
 80156ee:	6078      	str	r0, [r7, #4]
 80156f0:	460b      	mov	r3, r1
 80156f2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80156f4:	78fb      	ldrb	r3, [r7, #3]
 80156f6:	461a      	mov	r2, r3
 80156f8:	2103      	movs	r1, #3
 80156fa:	6878      	ldr	r0, [r7, #4]
 80156fc:	f000 f814 	bl	8015728 <icmp_send_response>
}
 8015700:	bf00      	nop
 8015702:	3708      	adds	r7, #8
 8015704:	46bd      	mov	sp, r7
 8015706:	bd80      	pop	{r7, pc}

08015708 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8015708:	b580      	push	{r7, lr}
 801570a:	b082      	sub	sp, #8
 801570c:	af00      	add	r7, sp, #0
 801570e:	6078      	str	r0, [r7, #4]
 8015710:	460b      	mov	r3, r1
 8015712:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8015714:	78fb      	ldrb	r3, [r7, #3]
 8015716:	461a      	mov	r2, r3
 8015718:	210b      	movs	r1, #11
 801571a:	6878      	ldr	r0, [r7, #4]
 801571c:	f000 f804 	bl	8015728 <icmp_send_response>
}
 8015720:	bf00      	nop
 8015722:	3708      	adds	r7, #8
 8015724:	46bd      	mov	sp, r7
 8015726:	bd80      	pop	{r7, pc}

08015728 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8015728:	b580      	push	{r7, lr}
 801572a:	b08c      	sub	sp, #48	; 0x30
 801572c:	af04      	add	r7, sp, #16
 801572e:	6078      	str	r0, [r7, #4]
 8015730:	460b      	mov	r3, r1
 8015732:	70fb      	strb	r3, [r7, #3]
 8015734:	4613      	mov	r3, r2
 8015736:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8015738:	f44f 7220 	mov.w	r2, #640	; 0x280
 801573c:	2124      	movs	r1, #36	; 0x24
 801573e:	2022      	movs	r0, #34	; 0x22
 8015740:	f7f7 fe54 	bl	800d3ec <pbuf_alloc>
 8015744:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8015746:	69fb      	ldr	r3, [r7, #28]
 8015748:	2b00      	cmp	r3, #0
 801574a:	d056      	beq.n	80157fa <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801574c:	69fb      	ldr	r3, [r7, #28]
 801574e:	895b      	ldrh	r3, [r3, #10]
 8015750:	2b23      	cmp	r3, #35	; 0x23
 8015752:	d806      	bhi.n	8015762 <icmp_send_response+0x3a>
 8015754:	4b2b      	ldr	r3, [pc, #172]	; (8015804 <icmp_send_response+0xdc>)
 8015756:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801575a:	492b      	ldr	r1, [pc, #172]	; (8015808 <icmp_send_response+0xe0>)
 801575c:	482b      	ldr	r0, [pc, #172]	; (801580c <icmp_send_response+0xe4>)
 801575e:	f001 fb9b 	bl	8016e98 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8015762:	687b      	ldr	r3, [r7, #4]
 8015764:	685b      	ldr	r3, [r3, #4]
 8015766:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8015768:	69fb      	ldr	r3, [r7, #28]
 801576a:	685b      	ldr	r3, [r3, #4]
 801576c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801576e:	697b      	ldr	r3, [r7, #20]
 8015770:	78fa      	ldrb	r2, [r7, #3]
 8015772:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8015774:	697b      	ldr	r3, [r7, #20]
 8015776:	78ba      	ldrb	r2, [r7, #2]
 8015778:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801577a:	697b      	ldr	r3, [r7, #20]
 801577c:	2200      	movs	r2, #0
 801577e:	711a      	strb	r2, [r3, #4]
 8015780:	2200      	movs	r2, #0
 8015782:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8015784:	697b      	ldr	r3, [r7, #20]
 8015786:	2200      	movs	r2, #0
 8015788:	719a      	strb	r2, [r3, #6]
 801578a:	2200      	movs	r2, #0
 801578c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801578e:	69fb      	ldr	r3, [r7, #28]
 8015790:	685b      	ldr	r3, [r3, #4]
 8015792:	f103 0008 	add.w	r0, r3, #8
 8015796:	687b      	ldr	r3, [r7, #4]
 8015798:	685b      	ldr	r3, [r3, #4]
 801579a:	221c      	movs	r2, #28
 801579c:	4619      	mov	r1, r3
 801579e:	f001 fb65 	bl	8016e6c <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80157a2:	69bb      	ldr	r3, [r7, #24]
 80157a4:	68db      	ldr	r3, [r3, #12]
 80157a6:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80157a8:	f107 030c 	add.w	r3, r7, #12
 80157ac:	4618      	mov	r0, r3
 80157ae:	f000 f82f 	bl	8015810 <ip4_route>
 80157b2:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80157b4:	693b      	ldr	r3, [r7, #16]
 80157b6:	2b00      	cmp	r3, #0
 80157b8:	d01b      	beq.n	80157f2 <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80157ba:	697b      	ldr	r3, [r7, #20]
 80157bc:	2200      	movs	r2, #0
 80157be:	709a      	strb	r2, [r3, #2]
 80157c0:	2200      	movs	r2, #0
 80157c2:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 80157c4:	69fb      	ldr	r3, [r7, #28]
 80157c6:	895b      	ldrh	r3, [r3, #10]
 80157c8:	4619      	mov	r1, r3
 80157ca:	6978      	ldr	r0, [r7, #20]
 80157cc:	f7f6 fcc3 	bl	800c156 <inet_chksum>
 80157d0:	4603      	mov	r3, r0
 80157d2:	461a      	mov	r2, r3
 80157d4:	697b      	ldr	r3, [r7, #20]
 80157d6:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80157d8:	f107 020c 	add.w	r2, r7, #12
 80157dc:	693b      	ldr	r3, [r7, #16]
 80157de:	9302      	str	r3, [sp, #8]
 80157e0:	2301      	movs	r3, #1
 80157e2:	9301      	str	r3, [sp, #4]
 80157e4:	2300      	movs	r3, #0
 80157e6:	9300      	str	r3, [sp, #0]
 80157e8:	23ff      	movs	r3, #255	; 0xff
 80157ea:	2100      	movs	r1, #0
 80157ec:	69f8      	ldr	r0, [r7, #28]
 80157ee:	f000 f9cd 	bl	8015b8c <ip4_output_if>
  }
  pbuf_free(q);
 80157f2:	69f8      	ldr	r0, [r7, #28]
 80157f4:	f7f8 f8de 	bl	800d9b4 <pbuf_free>
 80157f8:	e000      	b.n	80157fc <icmp_send_response+0xd4>
    return;
 80157fa:	bf00      	nop
}
 80157fc:	3720      	adds	r7, #32
 80157fe:	46bd      	mov	sp, r7
 8015800:	bd80      	pop	{r7, pc}
 8015802:	bf00      	nop
 8015804:	0801a640 	.word	0x0801a640
 8015808:	0801a70c 	.word	0x0801a70c
 801580c:	0801a6b0 	.word	0x0801a6b0

08015810 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8015810:	b480      	push	{r7}
 8015812:	b085      	sub	sp, #20
 8015814:	af00      	add	r7, sp, #0
 8015816:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8015818:	4b33      	ldr	r3, [pc, #204]	; (80158e8 <ip4_route+0xd8>)
 801581a:	681b      	ldr	r3, [r3, #0]
 801581c:	60fb      	str	r3, [r7, #12]
 801581e:	e036      	b.n	801588e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8015820:	68fb      	ldr	r3, [r7, #12]
 8015822:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015826:	f003 0301 	and.w	r3, r3, #1
 801582a:	b2db      	uxtb	r3, r3
 801582c:	2b00      	cmp	r3, #0
 801582e:	d02b      	beq.n	8015888 <ip4_route+0x78>
 8015830:	68fb      	ldr	r3, [r7, #12]
 8015832:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015836:	089b      	lsrs	r3, r3, #2
 8015838:	f003 0301 	and.w	r3, r3, #1
 801583c:	b2db      	uxtb	r3, r3
 801583e:	2b00      	cmp	r3, #0
 8015840:	d022      	beq.n	8015888 <ip4_route+0x78>
 8015842:	68fb      	ldr	r3, [r7, #12]
 8015844:	3304      	adds	r3, #4
 8015846:	681b      	ldr	r3, [r3, #0]
 8015848:	2b00      	cmp	r3, #0
 801584a:	d01d      	beq.n	8015888 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801584c:	687b      	ldr	r3, [r7, #4]
 801584e:	681a      	ldr	r2, [r3, #0]
 8015850:	68fb      	ldr	r3, [r7, #12]
 8015852:	3304      	adds	r3, #4
 8015854:	681b      	ldr	r3, [r3, #0]
 8015856:	405a      	eors	r2, r3
 8015858:	68fb      	ldr	r3, [r7, #12]
 801585a:	3308      	adds	r3, #8
 801585c:	681b      	ldr	r3, [r3, #0]
 801585e:	4013      	ands	r3, r2
 8015860:	2b00      	cmp	r3, #0
 8015862:	d101      	bne.n	8015868 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8015864:	68fb      	ldr	r3, [r7, #12]
 8015866:	e038      	b.n	80158da <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8015868:	68fb      	ldr	r3, [r7, #12]
 801586a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801586e:	f003 0302 	and.w	r3, r3, #2
 8015872:	2b00      	cmp	r3, #0
 8015874:	d108      	bne.n	8015888 <ip4_route+0x78>
 8015876:	687b      	ldr	r3, [r7, #4]
 8015878:	681a      	ldr	r2, [r3, #0]
 801587a:	68fb      	ldr	r3, [r7, #12]
 801587c:	330c      	adds	r3, #12
 801587e:	681b      	ldr	r3, [r3, #0]
 8015880:	429a      	cmp	r2, r3
 8015882:	d101      	bne.n	8015888 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8015884:	68fb      	ldr	r3, [r7, #12]
 8015886:	e028      	b.n	80158da <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8015888:	68fb      	ldr	r3, [r7, #12]
 801588a:	681b      	ldr	r3, [r3, #0]
 801588c:	60fb      	str	r3, [r7, #12]
 801588e:	68fb      	ldr	r3, [r7, #12]
 8015890:	2b00      	cmp	r3, #0
 8015892:	d1c5      	bne.n	8015820 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8015894:	4b15      	ldr	r3, [pc, #84]	; (80158ec <ip4_route+0xdc>)
 8015896:	681b      	ldr	r3, [r3, #0]
 8015898:	2b00      	cmp	r3, #0
 801589a:	d01a      	beq.n	80158d2 <ip4_route+0xc2>
 801589c:	4b13      	ldr	r3, [pc, #76]	; (80158ec <ip4_route+0xdc>)
 801589e:	681b      	ldr	r3, [r3, #0]
 80158a0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80158a4:	f003 0301 	and.w	r3, r3, #1
 80158a8:	2b00      	cmp	r3, #0
 80158aa:	d012      	beq.n	80158d2 <ip4_route+0xc2>
 80158ac:	4b0f      	ldr	r3, [pc, #60]	; (80158ec <ip4_route+0xdc>)
 80158ae:	681b      	ldr	r3, [r3, #0]
 80158b0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80158b4:	f003 0304 	and.w	r3, r3, #4
 80158b8:	2b00      	cmp	r3, #0
 80158ba:	d00a      	beq.n	80158d2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80158bc:	4b0b      	ldr	r3, [pc, #44]	; (80158ec <ip4_route+0xdc>)
 80158be:	681b      	ldr	r3, [r3, #0]
 80158c0:	3304      	adds	r3, #4
 80158c2:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80158c4:	2b00      	cmp	r3, #0
 80158c6:	d004      	beq.n	80158d2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80158c8:	687b      	ldr	r3, [r7, #4]
 80158ca:	681b      	ldr	r3, [r3, #0]
 80158cc:	b2db      	uxtb	r3, r3
 80158ce:	2b7f      	cmp	r3, #127	; 0x7f
 80158d0:	d101      	bne.n	80158d6 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80158d2:	2300      	movs	r3, #0
 80158d4:	e001      	b.n	80158da <ip4_route+0xca>
  }

  return netif_default;
 80158d6:	4b05      	ldr	r3, [pc, #20]	; (80158ec <ip4_route+0xdc>)
 80158d8:	681b      	ldr	r3, [r3, #0]
}
 80158da:	4618      	mov	r0, r3
 80158dc:	3714      	adds	r7, #20
 80158de:	46bd      	mov	sp, r7
 80158e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158e4:	4770      	bx	lr
 80158e6:	bf00      	nop
 80158e8:	24007998 	.word	0x24007998
 80158ec:	2400799c 	.word	0x2400799c

080158f0 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80158f0:	b580      	push	{r7, lr}
 80158f2:	b082      	sub	sp, #8
 80158f4:	af00      	add	r7, sp, #0
 80158f6:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80158f8:	687b      	ldr	r3, [r7, #4]
 80158fa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80158fe:	f003 0301 	and.w	r3, r3, #1
 8015902:	b2db      	uxtb	r3, r3
 8015904:	2b00      	cmp	r3, #0
 8015906:	d016      	beq.n	8015936 <ip4_input_accept+0x46>
 8015908:	687b      	ldr	r3, [r7, #4]
 801590a:	3304      	adds	r3, #4
 801590c:	681b      	ldr	r3, [r3, #0]
 801590e:	2b00      	cmp	r3, #0
 8015910:	d011      	beq.n	8015936 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8015912:	4b0b      	ldr	r3, [pc, #44]	; (8015940 <ip4_input_accept+0x50>)
 8015914:	695a      	ldr	r2, [r3, #20]
 8015916:	687b      	ldr	r3, [r7, #4]
 8015918:	3304      	adds	r3, #4
 801591a:	681b      	ldr	r3, [r3, #0]
 801591c:	429a      	cmp	r2, r3
 801591e:	d008      	beq.n	8015932 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8015920:	4b07      	ldr	r3, [pc, #28]	; (8015940 <ip4_input_accept+0x50>)
 8015922:	695b      	ldr	r3, [r3, #20]
 8015924:	6879      	ldr	r1, [r7, #4]
 8015926:	4618      	mov	r0, r3
 8015928:	f000 fa08 	bl	8015d3c <ip4_addr_isbroadcast_u32>
 801592c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801592e:	2b00      	cmp	r3, #0
 8015930:	d001      	beq.n	8015936 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8015932:	2301      	movs	r3, #1
 8015934:	e000      	b.n	8015938 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8015936:	2300      	movs	r3, #0
}
 8015938:	4618      	mov	r0, r3
 801593a:	3708      	adds	r7, #8
 801593c:	46bd      	mov	sp, r7
 801593e:	bd80      	pop	{r7, pc}
 8015940:	240048e8 	.word	0x240048e8

08015944 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8015944:	b580      	push	{r7, lr}
 8015946:	b086      	sub	sp, #24
 8015948:	af00      	add	r7, sp, #0
 801594a:	6078      	str	r0, [r7, #4]
 801594c:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801594e:	687b      	ldr	r3, [r7, #4]
 8015950:	685b      	ldr	r3, [r3, #4]
 8015952:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8015954:	697b      	ldr	r3, [r7, #20]
 8015956:	781b      	ldrb	r3, [r3, #0]
 8015958:	091b      	lsrs	r3, r3, #4
 801595a:	b2db      	uxtb	r3, r3
 801595c:	2b04      	cmp	r3, #4
 801595e:	d004      	beq.n	801596a <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8015960:	6878      	ldr	r0, [r7, #4]
 8015962:	f7f8 f827 	bl	800d9b4 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8015966:	2300      	movs	r3, #0
 8015968:	e107      	b.n	8015b7a <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801596a:	697b      	ldr	r3, [r7, #20]
 801596c:	781b      	ldrb	r3, [r3, #0]
 801596e:	f003 030f 	and.w	r3, r3, #15
 8015972:	b2db      	uxtb	r3, r3
 8015974:	009b      	lsls	r3, r3, #2
 8015976:	b2db      	uxtb	r3, r3
 8015978:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801597a:	697b      	ldr	r3, [r7, #20]
 801597c:	885b      	ldrh	r3, [r3, #2]
 801597e:	b29b      	uxth	r3, r3
 8015980:	4618      	mov	r0, r3
 8015982:	f7f6 fb5d 	bl	800c040 <lwip_htons>
 8015986:	4603      	mov	r3, r0
 8015988:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801598a:	687b      	ldr	r3, [r7, #4]
 801598c:	891b      	ldrh	r3, [r3, #8]
 801598e:	89ba      	ldrh	r2, [r7, #12]
 8015990:	429a      	cmp	r2, r3
 8015992:	d204      	bcs.n	801599e <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8015994:	89bb      	ldrh	r3, [r7, #12]
 8015996:	4619      	mov	r1, r3
 8015998:	6878      	ldr	r0, [r7, #4]
 801599a:	f7f7 fe85 	bl	800d6a8 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801599e:	687b      	ldr	r3, [r7, #4]
 80159a0:	895b      	ldrh	r3, [r3, #10]
 80159a2:	89fa      	ldrh	r2, [r7, #14]
 80159a4:	429a      	cmp	r2, r3
 80159a6:	d807      	bhi.n	80159b8 <ip4_input+0x74>
 80159a8:	687b      	ldr	r3, [r7, #4]
 80159aa:	891b      	ldrh	r3, [r3, #8]
 80159ac:	89ba      	ldrh	r2, [r7, #12]
 80159ae:	429a      	cmp	r2, r3
 80159b0:	d802      	bhi.n	80159b8 <ip4_input+0x74>
 80159b2:	89fb      	ldrh	r3, [r7, #14]
 80159b4:	2b13      	cmp	r3, #19
 80159b6:	d804      	bhi.n	80159c2 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80159b8:	6878      	ldr	r0, [r7, #4]
 80159ba:	f7f7 fffb 	bl	800d9b4 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80159be:	2300      	movs	r3, #0
 80159c0:	e0db      	b.n	8015b7a <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80159c2:	697b      	ldr	r3, [r7, #20]
 80159c4:	691b      	ldr	r3, [r3, #16]
 80159c6:	4a6f      	ldr	r2, [pc, #444]	; (8015b84 <ip4_input+0x240>)
 80159c8:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80159ca:	697b      	ldr	r3, [r7, #20]
 80159cc:	68db      	ldr	r3, [r3, #12]
 80159ce:	4a6d      	ldr	r2, [pc, #436]	; (8015b84 <ip4_input+0x240>)
 80159d0:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80159d2:	4b6c      	ldr	r3, [pc, #432]	; (8015b84 <ip4_input+0x240>)
 80159d4:	695b      	ldr	r3, [r3, #20]
 80159d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80159da:	2be0      	cmp	r3, #224	; 0xe0
 80159dc:	d112      	bne.n	8015a04 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80159de:	683b      	ldr	r3, [r7, #0]
 80159e0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80159e4:	f003 0301 	and.w	r3, r3, #1
 80159e8:	b2db      	uxtb	r3, r3
 80159ea:	2b00      	cmp	r3, #0
 80159ec:	d007      	beq.n	80159fe <ip4_input+0xba>
 80159ee:	683b      	ldr	r3, [r7, #0]
 80159f0:	3304      	adds	r3, #4
 80159f2:	681b      	ldr	r3, [r3, #0]
 80159f4:	2b00      	cmp	r3, #0
 80159f6:	d002      	beq.n	80159fe <ip4_input+0xba>
      netif = inp;
 80159f8:	683b      	ldr	r3, [r7, #0]
 80159fa:	613b      	str	r3, [r7, #16]
 80159fc:	e02a      	b.n	8015a54 <ip4_input+0x110>
    } else {
      netif = NULL;
 80159fe:	2300      	movs	r3, #0
 8015a00:	613b      	str	r3, [r7, #16]
 8015a02:	e027      	b.n	8015a54 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8015a04:	6838      	ldr	r0, [r7, #0]
 8015a06:	f7ff ff73 	bl	80158f0 <ip4_input_accept>
 8015a0a:	4603      	mov	r3, r0
 8015a0c:	2b00      	cmp	r3, #0
 8015a0e:	d002      	beq.n	8015a16 <ip4_input+0xd2>
      netif = inp;
 8015a10:	683b      	ldr	r3, [r7, #0]
 8015a12:	613b      	str	r3, [r7, #16]
 8015a14:	e01e      	b.n	8015a54 <ip4_input+0x110>
    } else {
      netif = NULL;
 8015a16:	2300      	movs	r3, #0
 8015a18:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8015a1a:	4b5a      	ldr	r3, [pc, #360]	; (8015b84 <ip4_input+0x240>)
 8015a1c:	695b      	ldr	r3, [r3, #20]
 8015a1e:	b2db      	uxtb	r3, r3
 8015a20:	2b7f      	cmp	r3, #127	; 0x7f
 8015a22:	d017      	beq.n	8015a54 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8015a24:	4b58      	ldr	r3, [pc, #352]	; (8015b88 <ip4_input+0x244>)
 8015a26:	681b      	ldr	r3, [r3, #0]
 8015a28:	613b      	str	r3, [r7, #16]
 8015a2a:	e00e      	b.n	8015a4a <ip4_input+0x106>
          if (netif == inp) {
 8015a2c:	693a      	ldr	r2, [r7, #16]
 8015a2e:	683b      	ldr	r3, [r7, #0]
 8015a30:	429a      	cmp	r2, r3
 8015a32:	d006      	beq.n	8015a42 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8015a34:	6938      	ldr	r0, [r7, #16]
 8015a36:	f7ff ff5b 	bl	80158f0 <ip4_input_accept>
 8015a3a:	4603      	mov	r3, r0
 8015a3c:	2b00      	cmp	r3, #0
 8015a3e:	d108      	bne.n	8015a52 <ip4_input+0x10e>
 8015a40:	e000      	b.n	8015a44 <ip4_input+0x100>
            continue;
 8015a42:	bf00      	nop
        NETIF_FOREACH(netif) {
 8015a44:	693b      	ldr	r3, [r7, #16]
 8015a46:	681b      	ldr	r3, [r3, #0]
 8015a48:	613b      	str	r3, [r7, #16]
 8015a4a:	693b      	ldr	r3, [r7, #16]
 8015a4c:	2b00      	cmp	r3, #0
 8015a4e:	d1ed      	bne.n	8015a2c <ip4_input+0xe8>
 8015a50:	e000      	b.n	8015a54 <ip4_input+0x110>
            break;
 8015a52:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8015a54:	4b4b      	ldr	r3, [pc, #300]	; (8015b84 <ip4_input+0x240>)
 8015a56:	691b      	ldr	r3, [r3, #16]
 8015a58:	6839      	ldr	r1, [r7, #0]
 8015a5a:	4618      	mov	r0, r3
 8015a5c:	f000 f96e 	bl	8015d3c <ip4_addr_isbroadcast_u32>
 8015a60:	4603      	mov	r3, r0
 8015a62:	2b00      	cmp	r3, #0
 8015a64:	d105      	bne.n	8015a72 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8015a66:	4b47      	ldr	r3, [pc, #284]	; (8015b84 <ip4_input+0x240>)
 8015a68:	691b      	ldr	r3, [r3, #16]
 8015a6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8015a6e:	2be0      	cmp	r3, #224	; 0xe0
 8015a70:	d104      	bne.n	8015a7c <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8015a72:	6878      	ldr	r0, [r7, #4]
 8015a74:	f7f7 ff9e 	bl	800d9b4 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8015a78:	2300      	movs	r3, #0
 8015a7a:	e07e      	b.n	8015b7a <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8015a7c:	693b      	ldr	r3, [r7, #16]
 8015a7e:	2b00      	cmp	r3, #0
 8015a80:	d104      	bne.n	8015a8c <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8015a82:	6878      	ldr	r0, [r7, #4]
 8015a84:	f7f7 ff96 	bl	800d9b4 <pbuf_free>
    return ERR_OK;
 8015a88:	2300      	movs	r3, #0
 8015a8a:	e076      	b.n	8015b7a <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8015a8c:	697b      	ldr	r3, [r7, #20]
 8015a8e:	88db      	ldrh	r3, [r3, #6]
 8015a90:	b29b      	uxth	r3, r3
 8015a92:	461a      	mov	r2, r3
 8015a94:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8015a98:	4013      	ands	r3, r2
 8015a9a:	2b00      	cmp	r3, #0
 8015a9c:	d00b      	beq.n	8015ab6 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8015a9e:	6878      	ldr	r0, [r7, #4]
 8015aa0:	f000 fc92 	bl	80163c8 <ip4_reass>
 8015aa4:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8015aa6:	687b      	ldr	r3, [r7, #4]
 8015aa8:	2b00      	cmp	r3, #0
 8015aaa:	d101      	bne.n	8015ab0 <ip4_input+0x16c>
      return ERR_OK;
 8015aac:	2300      	movs	r3, #0
 8015aae:	e064      	b.n	8015b7a <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8015ab0:	687b      	ldr	r3, [r7, #4]
 8015ab2:	685b      	ldr	r3, [r3, #4]
 8015ab4:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8015ab6:	4a33      	ldr	r2, [pc, #204]	; (8015b84 <ip4_input+0x240>)
 8015ab8:	693b      	ldr	r3, [r7, #16]
 8015aba:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8015abc:	4a31      	ldr	r2, [pc, #196]	; (8015b84 <ip4_input+0x240>)
 8015abe:	683b      	ldr	r3, [r7, #0]
 8015ac0:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8015ac2:	4a30      	ldr	r2, [pc, #192]	; (8015b84 <ip4_input+0x240>)
 8015ac4:	697b      	ldr	r3, [r7, #20]
 8015ac6:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8015ac8:	697b      	ldr	r3, [r7, #20]
 8015aca:	781b      	ldrb	r3, [r3, #0]
 8015acc:	f003 030f 	and.w	r3, r3, #15
 8015ad0:	b2db      	uxtb	r3, r3
 8015ad2:	009b      	lsls	r3, r3, #2
 8015ad4:	b2db      	uxtb	r3, r3
 8015ad6:	b29a      	uxth	r2, r3
 8015ad8:	4b2a      	ldr	r3, [pc, #168]	; (8015b84 <ip4_input+0x240>)
 8015ada:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8015adc:	89fb      	ldrh	r3, [r7, #14]
 8015ade:	4619      	mov	r1, r3
 8015ae0:	6878      	ldr	r0, [r7, #4]
 8015ae2:	f7f7 fee1 	bl	800d8a8 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8015ae6:	697b      	ldr	r3, [r7, #20]
 8015ae8:	7a5b      	ldrb	r3, [r3, #9]
 8015aea:	2b11      	cmp	r3, #17
 8015aec:	d006      	beq.n	8015afc <ip4_input+0x1b8>
 8015aee:	2b11      	cmp	r3, #17
 8015af0:	dc13      	bgt.n	8015b1a <ip4_input+0x1d6>
 8015af2:	2b01      	cmp	r3, #1
 8015af4:	d00c      	beq.n	8015b10 <ip4_input+0x1cc>
 8015af6:	2b06      	cmp	r3, #6
 8015af8:	d005      	beq.n	8015b06 <ip4_input+0x1c2>
 8015afa:	e00e      	b.n	8015b1a <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8015afc:	6839      	ldr	r1, [r7, #0]
 8015afe:	6878      	ldr	r0, [r7, #4]
 8015b00:	f7fe fc42 	bl	8014388 <udp_input>
        break;
 8015b04:	e026      	b.n	8015b54 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8015b06:	6839      	ldr	r1, [r7, #0]
 8015b08:	6878      	ldr	r0, [r7, #4]
 8015b0a:	f7fa f837 	bl	800fb7c <tcp_input>
        break;
 8015b0e:	e021      	b.n	8015b54 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8015b10:	6839      	ldr	r1, [r7, #0]
 8015b12:	6878      	ldr	r0, [r7, #4]
 8015b14:	f7ff fcc8 	bl	80154a8 <icmp_input>
        break;
 8015b18:	e01c      	b.n	8015b54 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8015b1a:	4b1a      	ldr	r3, [pc, #104]	; (8015b84 <ip4_input+0x240>)
 8015b1c:	695b      	ldr	r3, [r3, #20]
 8015b1e:	6939      	ldr	r1, [r7, #16]
 8015b20:	4618      	mov	r0, r3
 8015b22:	f000 f90b 	bl	8015d3c <ip4_addr_isbroadcast_u32>
 8015b26:	4603      	mov	r3, r0
 8015b28:	2b00      	cmp	r3, #0
 8015b2a:	d10f      	bne.n	8015b4c <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015b2c:	4b15      	ldr	r3, [pc, #84]	; (8015b84 <ip4_input+0x240>)
 8015b2e:	695b      	ldr	r3, [r3, #20]
 8015b30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8015b34:	2be0      	cmp	r3, #224	; 0xe0
 8015b36:	d009      	beq.n	8015b4c <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8015b38:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8015b3c:	4619      	mov	r1, r3
 8015b3e:	6878      	ldr	r0, [r7, #4]
 8015b40:	f7f7 ff25 	bl	800d98e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8015b44:	2102      	movs	r1, #2
 8015b46:	6878      	ldr	r0, [r7, #4]
 8015b48:	f7ff fdce 	bl	80156e8 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8015b4c:	6878      	ldr	r0, [r7, #4]
 8015b4e:	f7f7 ff31 	bl	800d9b4 <pbuf_free>
        break;
 8015b52:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8015b54:	4b0b      	ldr	r3, [pc, #44]	; (8015b84 <ip4_input+0x240>)
 8015b56:	2200      	movs	r2, #0
 8015b58:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8015b5a:	4b0a      	ldr	r3, [pc, #40]	; (8015b84 <ip4_input+0x240>)
 8015b5c:	2200      	movs	r2, #0
 8015b5e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8015b60:	4b08      	ldr	r3, [pc, #32]	; (8015b84 <ip4_input+0x240>)
 8015b62:	2200      	movs	r2, #0
 8015b64:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8015b66:	4b07      	ldr	r3, [pc, #28]	; (8015b84 <ip4_input+0x240>)
 8015b68:	2200      	movs	r2, #0
 8015b6a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8015b6c:	4b05      	ldr	r3, [pc, #20]	; (8015b84 <ip4_input+0x240>)
 8015b6e:	2200      	movs	r2, #0
 8015b70:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8015b72:	4b04      	ldr	r3, [pc, #16]	; (8015b84 <ip4_input+0x240>)
 8015b74:	2200      	movs	r2, #0
 8015b76:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8015b78:	2300      	movs	r3, #0
}
 8015b7a:	4618      	mov	r0, r3
 8015b7c:	3718      	adds	r7, #24
 8015b7e:	46bd      	mov	sp, r7
 8015b80:	bd80      	pop	{r7, pc}
 8015b82:	bf00      	nop
 8015b84:	240048e8 	.word	0x240048e8
 8015b88:	24007998 	.word	0x24007998

08015b8c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8015b8c:	b580      	push	{r7, lr}
 8015b8e:	b08a      	sub	sp, #40	; 0x28
 8015b90:	af04      	add	r7, sp, #16
 8015b92:	60f8      	str	r0, [r7, #12]
 8015b94:	60b9      	str	r1, [r7, #8]
 8015b96:	607a      	str	r2, [r7, #4]
 8015b98:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8015b9a:	68bb      	ldr	r3, [r7, #8]
 8015b9c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8015b9e:	687b      	ldr	r3, [r7, #4]
 8015ba0:	2b00      	cmp	r3, #0
 8015ba2:	d009      	beq.n	8015bb8 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8015ba4:	68bb      	ldr	r3, [r7, #8]
 8015ba6:	2b00      	cmp	r3, #0
 8015ba8:	d003      	beq.n	8015bb2 <ip4_output_if+0x26>
 8015baa:	68bb      	ldr	r3, [r7, #8]
 8015bac:	681b      	ldr	r3, [r3, #0]
 8015bae:	2b00      	cmp	r3, #0
 8015bb0:	d102      	bne.n	8015bb8 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8015bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015bb4:	3304      	adds	r3, #4
 8015bb6:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8015bb8:	78fa      	ldrb	r2, [r7, #3]
 8015bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015bbc:	9302      	str	r3, [sp, #8]
 8015bbe:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8015bc2:	9301      	str	r3, [sp, #4]
 8015bc4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015bc8:	9300      	str	r3, [sp, #0]
 8015bca:	4613      	mov	r3, r2
 8015bcc:	687a      	ldr	r2, [r7, #4]
 8015bce:	6979      	ldr	r1, [r7, #20]
 8015bd0:	68f8      	ldr	r0, [r7, #12]
 8015bd2:	f000 f805 	bl	8015be0 <ip4_output_if_src>
 8015bd6:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8015bd8:	4618      	mov	r0, r3
 8015bda:	3718      	adds	r7, #24
 8015bdc:	46bd      	mov	sp, r7
 8015bde:	bd80      	pop	{r7, pc}

08015be0 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8015be0:	b580      	push	{r7, lr}
 8015be2:	b088      	sub	sp, #32
 8015be4:	af00      	add	r7, sp, #0
 8015be6:	60f8      	str	r0, [r7, #12]
 8015be8:	60b9      	str	r1, [r7, #8]
 8015bea:	607a      	str	r2, [r7, #4]
 8015bec:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8015bee:	68fb      	ldr	r3, [r7, #12]
 8015bf0:	7b9b      	ldrb	r3, [r3, #14]
 8015bf2:	2b01      	cmp	r3, #1
 8015bf4:	d006      	beq.n	8015c04 <ip4_output_if_src+0x24>
 8015bf6:	4b4b      	ldr	r3, [pc, #300]	; (8015d24 <ip4_output_if_src+0x144>)
 8015bf8:	f44f 7255 	mov.w	r2, #852	; 0x354
 8015bfc:	494a      	ldr	r1, [pc, #296]	; (8015d28 <ip4_output_if_src+0x148>)
 8015bfe:	484b      	ldr	r0, [pc, #300]	; (8015d2c <ip4_output_if_src+0x14c>)
 8015c00:	f001 f94a 	bl	8016e98 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8015c04:	687b      	ldr	r3, [r7, #4]
 8015c06:	2b00      	cmp	r3, #0
 8015c08:	d060      	beq.n	8015ccc <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8015c0a:	2314      	movs	r3, #20
 8015c0c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8015c0e:	2114      	movs	r1, #20
 8015c10:	68f8      	ldr	r0, [r7, #12]
 8015c12:	f7f7 fe39 	bl	800d888 <pbuf_add_header>
 8015c16:	4603      	mov	r3, r0
 8015c18:	2b00      	cmp	r3, #0
 8015c1a:	d002      	beq.n	8015c22 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8015c1c:	f06f 0301 	mvn.w	r3, #1
 8015c20:	e07c      	b.n	8015d1c <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8015c22:	68fb      	ldr	r3, [r7, #12]
 8015c24:	685b      	ldr	r3, [r3, #4]
 8015c26:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8015c28:	68fb      	ldr	r3, [r7, #12]
 8015c2a:	895b      	ldrh	r3, [r3, #10]
 8015c2c:	2b13      	cmp	r3, #19
 8015c2e:	d806      	bhi.n	8015c3e <ip4_output_if_src+0x5e>
 8015c30:	4b3c      	ldr	r3, [pc, #240]	; (8015d24 <ip4_output_if_src+0x144>)
 8015c32:	f44f 7262 	mov.w	r2, #904	; 0x388
 8015c36:	493e      	ldr	r1, [pc, #248]	; (8015d30 <ip4_output_if_src+0x150>)
 8015c38:	483c      	ldr	r0, [pc, #240]	; (8015d2c <ip4_output_if_src+0x14c>)
 8015c3a:	f001 f92d 	bl	8016e98 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8015c3e:	69fb      	ldr	r3, [r7, #28]
 8015c40:	78fa      	ldrb	r2, [r7, #3]
 8015c42:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8015c44:	69fb      	ldr	r3, [r7, #28]
 8015c46:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8015c4a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8015c4c:	687b      	ldr	r3, [r7, #4]
 8015c4e:	681a      	ldr	r2, [r3, #0]
 8015c50:	69fb      	ldr	r3, [r7, #28]
 8015c52:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8015c54:	8b7b      	ldrh	r3, [r7, #26]
 8015c56:	089b      	lsrs	r3, r3, #2
 8015c58:	b29b      	uxth	r3, r3
 8015c5a:	b2db      	uxtb	r3, r3
 8015c5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015c60:	b2da      	uxtb	r2, r3
 8015c62:	69fb      	ldr	r3, [r7, #28]
 8015c64:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8015c66:	69fb      	ldr	r3, [r7, #28]
 8015c68:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8015c6c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8015c6e:	68fb      	ldr	r3, [r7, #12]
 8015c70:	891b      	ldrh	r3, [r3, #8]
 8015c72:	4618      	mov	r0, r3
 8015c74:	f7f6 f9e4 	bl	800c040 <lwip_htons>
 8015c78:	4603      	mov	r3, r0
 8015c7a:	461a      	mov	r2, r3
 8015c7c:	69fb      	ldr	r3, [r7, #28]
 8015c7e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8015c80:	69fb      	ldr	r3, [r7, #28]
 8015c82:	2200      	movs	r2, #0
 8015c84:	719a      	strb	r2, [r3, #6]
 8015c86:	2200      	movs	r2, #0
 8015c88:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8015c8a:	4b2a      	ldr	r3, [pc, #168]	; (8015d34 <ip4_output_if_src+0x154>)
 8015c8c:	881b      	ldrh	r3, [r3, #0]
 8015c8e:	4618      	mov	r0, r3
 8015c90:	f7f6 f9d6 	bl	800c040 <lwip_htons>
 8015c94:	4603      	mov	r3, r0
 8015c96:	461a      	mov	r2, r3
 8015c98:	69fb      	ldr	r3, [r7, #28]
 8015c9a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8015c9c:	4b25      	ldr	r3, [pc, #148]	; (8015d34 <ip4_output_if_src+0x154>)
 8015c9e:	881b      	ldrh	r3, [r3, #0]
 8015ca0:	3301      	adds	r3, #1
 8015ca2:	b29a      	uxth	r2, r3
 8015ca4:	4b23      	ldr	r3, [pc, #140]	; (8015d34 <ip4_output_if_src+0x154>)
 8015ca6:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8015ca8:	68bb      	ldr	r3, [r7, #8]
 8015caa:	2b00      	cmp	r3, #0
 8015cac:	d104      	bne.n	8015cb8 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8015cae:	4b22      	ldr	r3, [pc, #136]	; (8015d38 <ip4_output_if_src+0x158>)
 8015cb0:	681a      	ldr	r2, [r3, #0]
 8015cb2:	69fb      	ldr	r3, [r7, #28]
 8015cb4:	60da      	str	r2, [r3, #12]
 8015cb6:	e003      	b.n	8015cc0 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8015cb8:	68bb      	ldr	r3, [r7, #8]
 8015cba:	681a      	ldr	r2, [r3, #0]
 8015cbc:	69fb      	ldr	r3, [r7, #28]
 8015cbe:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8015cc0:	69fb      	ldr	r3, [r7, #28]
 8015cc2:	2200      	movs	r2, #0
 8015cc4:	729a      	strb	r2, [r3, #10]
 8015cc6:	2200      	movs	r2, #0
 8015cc8:	72da      	strb	r2, [r3, #11]
 8015cca:	e00f      	b.n	8015cec <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8015ccc:	68fb      	ldr	r3, [r7, #12]
 8015cce:	895b      	ldrh	r3, [r3, #10]
 8015cd0:	2b13      	cmp	r3, #19
 8015cd2:	d802      	bhi.n	8015cda <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8015cd4:	f06f 0301 	mvn.w	r3, #1
 8015cd8:	e020      	b.n	8015d1c <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8015cda:	68fb      	ldr	r3, [r7, #12]
 8015cdc:	685b      	ldr	r3, [r3, #4]
 8015cde:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8015ce0:	69fb      	ldr	r3, [r7, #28]
 8015ce2:	691b      	ldr	r3, [r3, #16]
 8015ce4:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8015ce6:	f107 0314 	add.w	r3, r7, #20
 8015cea:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8015cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015cee:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8015cf0:	2b00      	cmp	r3, #0
 8015cf2:	d00c      	beq.n	8015d0e <ip4_output_if_src+0x12e>
 8015cf4:	68fb      	ldr	r3, [r7, #12]
 8015cf6:	891a      	ldrh	r2, [r3, #8]
 8015cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015cfa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8015cfc:	429a      	cmp	r2, r3
 8015cfe:	d906      	bls.n	8015d0e <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8015d00:	687a      	ldr	r2, [r7, #4]
 8015d02:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015d04:	68f8      	ldr	r0, [r7, #12]
 8015d06:	f000 fd4d 	bl	80167a4 <ip4_frag>
 8015d0a:	4603      	mov	r3, r0
 8015d0c:	e006      	b.n	8015d1c <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8015d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d10:	695b      	ldr	r3, [r3, #20]
 8015d12:	687a      	ldr	r2, [r7, #4]
 8015d14:	68f9      	ldr	r1, [r7, #12]
 8015d16:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015d18:	4798      	blx	r3
 8015d1a:	4603      	mov	r3, r0
}
 8015d1c:	4618      	mov	r0, r3
 8015d1e:	3720      	adds	r7, #32
 8015d20:	46bd      	mov	sp, r7
 8015d22:	bd80      	pop	{r7, pc}
 8015d24:	0801a738 	.word	0x0801a738
 8015d28:	0801a76c 	.word	0x0801a76c
 8015d2c:	0801a778 	.word	0x0801a778
 8015d30:	0801a7a0 	.word	0x0801a7a0
 8015d34:	240041f2 	.word	0x240041f2
 8015d38:	0801abe0 	.word	0x0801abe0

08015d3c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8015d3c:	b480      	push	{r7}
 8015d3e:	b085      	sub	sp, #20
 8015d40:	af00      	add	r7, sp, #0
 8015d42:	6078      	str	r0, [r7, #4]
 8015d44:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8015d46:	687b      	ldr	r3, [r7, #4]
 8015d48:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8015d4a:	687b      	ldr	r3, [r7, #4]
 8015d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015d50:	d002      	beq.n	8015d58 <ip4_addr_isbroadcast_u32+0x1c>
 8015d52:	687b      	ldr	r3, [r7, #4]
 8015d54:	2b00      	cmp	r3, #0
 8015d56:	d101      	bne.n	8015d5c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8015d58:	2301      	movs	r3, #1
 8015d5a:	e02a      	b.n	8015db2 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8015d5c:	683b      	ldr	r3, [r7, #0]
 8015d5e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015d62:	f003 0302 	and.w	r3, r3, #2
 8015d66:	2b00      	cmp	r3, #0
 8015d68:	d101      	bne.n	8015d6e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8015d6a:	2300      	movs	r3, #0
 8015d6c:	e021      	b.n	8015db2 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8015d6e:	683b      	ldr	r3, [r7, #0]
 8015d70:	3304      	adds	r3, #4
 8015d72:	681b      	ldr	r3, [r3, #0]
 8015d74:	687a      	ldr	r2, [r7, #4]
 8015d76:	429a      	cmp	r2, r3
 8015d78:	d101      	bne.n	8015d7e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8015d7a:	2300      	movs	r3, #0
 8015d7c:	e019      	b.n	8015db2 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8015d7e:	68fa      	ldr	r2, [r7, #12]
 8015d80:	683b      	ldr	r3, [r7, #0]
 8015d82:	3304      	adds	r3, #4
 8015d84:	681b      	ldr	r3, [r3, #0]
 8015d86:	405a      	eors	r2, r3
 8015d88:	683b      	ldr	r3, [r7, #0]
 8015d8a:	3308      	adds	r3, #8
 8015d8c:	681b      	ldr	r3, [r3, #0]
 8015d8e:	4013      	ands	r3, r2
 8015d90:	2b00      	cmp	r3, #0
 8015d92:	d10d      	bne.n	8015db0 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8015d94:	683b      	ldr	r3, [r7, #0]
 8015d96:	3308      	adds	r3, #8
 8015d98:	681b      	ldr	r3, [r3, #0]
 8015d9a:	43da      	mvns	r2, r3
 8015d9c:	687b      	ldr	r3, [r7, #4]
 8015d9e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8015da0:	683b      	ldr	r3, [r7, #0]
 8015da2:	3308      	adds	r3, #8
 8015da4:	681b      	ldr	r3, [r3, #0]
 8015da6:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8015da8:	429a      	cmp	r2, r3
 8015daa:	d101      	bne.n	8015db0 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8015dac:	2301      	movs	r3, #1
 8015dae:	e000      	b.n	8015db2 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8015db0:	2300      	movs	r3, #0
  }
}
 8015db2:	4618      	mov	r0, r3
 8015db4:	3714      	adds	r7, #20
 8015db6:	46bd      	mov	sp, r7
 8015db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015dbc:	4770      	bx	lr
	...

08015dc0 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8015dc0:	b580      	push	{r7, lr}
 8015dc2:	b084      	sub	sp, #16
 8015dc4:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8015dc6:	2300      	movs	r3, #0
 8015dc8:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8015dca:	4b12      	ldr	r3, [pc, #72]	; (8015e14 <ip_reass_tmr+0x54>)
 8015dcc:	681b      	ldr	r3, [r3, #0]
 8015dce:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8015dd0:	e018      	b.n	8015e04 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8015dd2:	68fb      	ldr	r3, [r7, #12]
 8015dd4:	7fdb      	ldrb	r3, [r3, #31]
 8015dd6:	2b00      	cmp	r3, #0
 8015dd8:	d00b      	beq.n	8015df2 <ip_reass_tmr+0x32>
      r->timer--;
 8015dda:	68fb      	ldr	r3, [r7, #12]
 8015ddc:	7fdb      	ldrb	r3, [r3, #31]
 8015dde:	3b01      	subs	r3, #1
 8015de0:	b2da      	uxtb	r2, r3
 8015de2:	68fb      	ldr	r3, [r7, #12]
 8015de4:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8015de6:	68fb      	ldr	r3, [r7, #12]
 8015de8:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8015dea:	68fb      	ldr	r3, [r7, #12]
 8015dec:	681b      	ldr	r3, [r3, #0]
 8015dee:	60fb      	str	r3, [r7, #12]
 8015df0:	e008      	b.n	8015e04 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8015df2:	68fb      	ldr	r3, [r7, #12]
 8015df4:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8015df6:	68fb      	ldr	r3, [r7, #12]
 8015df8:	681b      	ldr	r3, [r3, #0]
 8015dfa:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8015dfc:	68b9      	ldr	r1, [r7, #8]
 8015dfe:	6878      	ldr	r0, [r7, #4]
 8015e00:	f000 f80a 	bl	8015e18 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8015e04:	68fb      	ldr	r3, [r7, #12]
 8015e06:	2b00      	cmp	r3, #0
 8015e08:	d1e3      	bne.n	8015dd2 <ip_reass_tmr+0x12>
    }
  }
}
 8015e0a:	bf00      	nop
 8015e0c:	bf00      	nop
 8015e0e:	3710      	adds	r7, #16
 8015e10:	46bd      	mov	sp, r7
 8015e12:	bd80      	pop	{r7, pc}
 8015e14:	240041f4 	.word	0x240041f4

08015e18 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8015e18:	b580      	push	{r7, lr}
 8015e1a:	b088      	sub	sp, #32
 8015e1c:	af00      	add	r7, sp, #0
 8015e1e:	6078      	str	r0, [r7, #4]
 8015e20:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8015e22:	2300      	movs	r3, #0
 8015e24:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8015e26:	683a      	ldr	r2, [r7, #0]
 8015e28:	687b      	ldr	r3, [r7, #4]
 8015e2a:	429a      	cmp	r2, r3
 8015e2c:	d105      	bne.n	8015e3a <ip_reass_free_complete_datagram+0x22>
 8015e2e:	4b45      	ldr	r3, [pc, #276]	; (8015f44 <ip_reass_free_complete_datagram+0x12c>)
 8015e30:	22ab      	movs	r2, #171	; 0xab
 8015e32:	4945      	ldr	r1, [pc, #276]	; (8015f48 <ip_reass_free_complete_datagram+0x130>)
 8015e34:	4845      	ldr	r0, [pc, #276]	; (8015f4c <ip_reass_free_complete_datagram+0x134>)
 8015e36:	f001 f82f 	bl	8016e98 <iprintf>
  if (prev != NULL) {
 8015e3a:	683b      	ldr	r3, [r7, #0]
 8015e3c:	2b00      	cmp	r3, #0
 8015e3e:	d00a      	beq.n	8015e56 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8015e40:	683b      	ldr	r3, [r7, #0]
 8015e42:	681b      	ldr	r3, [r3, #0]
 8015e44:	687a      	ldr	r2, [r7, #4]
 8015e46:	429a      	cmp	r2, r3
 8015e48:	d005      	beq.n	8015e56 <ip_reass_free_complete_datagram+0x3e>
 8015e4a:	4b3e      	ldr	r3, [pc, #248]	; (8015f44 <ip_reass_free_complete_datagram+0x12c>)
 8015e4c:	22ad      	movs	r2, #173	; 0xad
 8015e4e:	4940      	ldr	r1, [pc, #256]	; (8015f50 <ip_reass_free_complete_datagram+0x138>)
 8015e50:	483e      	ldr	r0, [pc, #248]	; (8015f4c <ip_reass_free_complete_datagram+0x134>)
 8015e52:	f001 f821 	bl	8016e98 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8015e56:	687b      	ldr	r3, [r7, #4]
 8015e58:	685b      	ldr	r3, [r3, #4]
 8015e5a:	685b      	ldr	r3, [r3, #4]
 8015e5c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8015e5e:	697b      	ldr	r3, [r7, #20]
 8015e60:	889b      	ldrh	r3, [r3, #4]
 8015e62:	b29b      	uxth	r3, r3
 8015e64:	2b00      	cmp	r3, #0
 8015e66:	d12a      	bne.n	8015ebe <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8015e68:	687b      	ldr	r3, [r7, #4]
 8015e6a:	685b      	ldr	r3, [r3, #4]
 8015e6c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8015e6e:	697b      	ldr	r3, [r7, #20]
 8015e70:	681a      	ldr	r2, [r3, #0]
 8015e72:	687b      	ldr	r3, [r7, #4]
 8015e74:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8015e76:	69bb      	ldr	r3, [r7, #24]
 8015e78:	6858      	ldr	r0, [r3, #4]
 8015e7a:	687b      	ldr	r3, [r7, #4]
 8015e7c:	3308      	adds	r3, #8
 8015e7e:	2214      	movs	r2, #20
 8015e80:	4619      	mov	r1, r3
 8015e82:	f000 fff3 	bl	8016e6c <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8015e86:	2101      	movs	r1, #1
 8015e88:	69b8      	ldr	r0, [r7, #24]
 8015e8a:	f7ff fc3d 	bl	8015708 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8015e8e:	69b8      	ldr	r0, [r7, #24]
 8015e90:	f7f7 fe1e 	bl	800dad0 <pbuf_clen>
 8015e94:	4603      	mov	r3, r0
 8015e96:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8015e98:	8bfa      	ldrh	r2, [r7, #30]
 8015e9a:	8a7b      	ldrh	r3, [r7, #18]
 8015e9c:	4413      	add	r3, r2
 8015e9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015ea2:	db05      	blt.n	8015eb0 <ip_reass_free_complete_datagram+0x98>
 8015ea4:	4b27      	ldr	r3, [pc, #156]	; (8015f44 <ip_reass_free_complete_datagram+0x12c>)
 8015ea6:	22bc      	movs	r2, #188	; 0xbc
 8015ea8:	492a      	ldr	r1, [pc, #168]	; (8015f54 <ip_reass_free_complete_datagram+0x13c>)
 8015eaa:	4828      	ldr	r0, [pc, #160]	; (8015f4c <ip_reass_free_complete_datagram+0x134>)
 8015eac:	f000 fff4 	bl	8016e98 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8015eb0:	8bfa      	ldrh	r2, [r7, #30]
 8015eb2:	8a7b      	ldrh	r3, [r7, #18]
 8015eb4:	4413      	add	r3, r2
 8015eb6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8015eb8:	69b8      	ldr	r0, [r7, #24]
 8015eba:	f7f7 fd7b 	bl	800d9b4 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8015ebe:	687b      	ldr	r3, [r7, #4]
 8015ec0:	685b      	ldr	r3, [r3, #4]
 8015ec2:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8015ec4:	e01f      	b.n	8015f06 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8015ec6:	69bb      	ldr	r3, [r7, #24]
 8015ec8:	685b      	ldr	r3, [r3, #4]
 8015eca:	617b      	str	r3, [r7, #20]
    pcur = p;
 8015ecc:	69bb      	ldr	r3, [r7, #24]
 8015ece:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8015ed0:	697b      	ldr	r3, [r7, #20]
 8015ed2:	681b      	ldr	r3, [r3, #0]
 8015ed4:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8015ed6:	68f8      	ldr	r0, [r7, #12]
 8015ed8:	f7f7 fdfa 	bl	800dad0 <pbuf_clen>
 8015edc:	4603      	mov	r3, r0
 8015ede:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8015ee0:	8bfa      	ldrh	r2, [r7, #30]
 8015ee2:	8a7b      	ldrh	r3, [r7, #18]
 8015ee4:	4413      	add	r3, r2
 8015ee6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015eea:	db05      	blt.n	8015ef8 <ip_reass_free_complete_datagram+0xe0>
 8015eec:	4b15      	ldr	r3, [pc, #84]	; (8015f44 <ip_reass_free_complete_datagram+0x12c>)
 8015eee:	22cc      	movs	r2, #204	; 0xcc
 8015ef0:	4918      	ldr	r1, [pc, #96]	; (8015f54 <ip_reass_free_complete_datagram+0x13c>)
 8015ef2:	4816      	ldr	r0, [pc, #88]	; (8015f4c <ip_reass_free_complete_datagram+0x134>)
 8015ef4:	f000 ffd0 	bl	8016e98 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8015ef8:	8bfa      	ldrh	r2, [r7, #30]
 8015efa:	8a7b      	ldrh	r3, [r7, #18]
 8015efc:	4413      	add	r3, r2
 8015efe:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8015f00:	68f8      	ldr	r0, [r7, #12]
 8015f02:	f7f7 fd57 	bl	800d9b4 <pbuf_free>
  while (p != NULL) {
 8015f06:	69bb      	ldr	r3, [r7, #24]
 8015f08:	2b00      	cmp	r3, #0
 8015f0a:	d1dc      	bne.n	8015ec6 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8015f0c:	6839      	ldr	r1, [r7, #0]
 8015f0e:	6878      	ldr	r0, [r7, #4]
 8015f10:	f000 f8c2 	bl	8016098 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8015f14:	4b10      	ldr	r3, [pc, #64]	; (8015f58 <ip_reass_free_complete_datagram+0x140>)
 8015f16:	881b      	ldrh	r3, [r3, #0]
 8015f18:	8bfa      	ldrh	r2, [r7, #30]
 8015f1a:	429a      	cmp	r2, r3
 8015f1c:	d905      	bls.n	8015f2a <ip_reass_free_complete_datagram+0x112>
 8015f1e:	4b09      	ldr	r3, [pc, #36]	; (8015f44 <ip_reass_free_complete_datagram+0x12c>)
 8015f20:	22d2      	movs	r2, #210	; 0xd2
 8015f22:	490e      	ldr	r1, [pc, #56]	; (8015f5c <ip_reass_free_complete_datagram+0x144>)
 8015f24:	4809      	ldr	r0, [pc, #36]	; (8015f4c <ip_reass_free_complete_datagram+0x134>)
 8015f26:	f000 ffb7 	bl	8016e98 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8015f2a:	4b0b      	ldr	r3, [pc, #44]	; (8015f58 <ip_reass_free_complete_datagram+0x140>)
 8015f2c:	881a      	ldrh	r2, [r3, #0]
 8015f2e:	8bfb      	ldrh	r3, [r7, #30]
 8015f30:	1ad3      	subs	r3, r2, r3
 8015f32:	b29a      	uxth	r2, r3
 8015f34:	4b08      	ldr	r3, [pc, #32]	; (8015f58 <ip_reass_free_complete_datagram+0x140>)
 8015f36:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8015f38:	8bfb      	ldrh	r3, [r7, #30]
}
 8015f3a:	4618      	mov	r0, r3
 8015f3c:	3720      	adds	r7, #32
 8015f3e:	46bd      	mov	sp, r7
 8015f40:	bd80      	pop	{r7, pc}
 8015f42:	bf00      	nop
 8015f44:	0801a7d0 	.word	0x0801a7d0
 8015f48:	0801a80c 	.word	0x0801a80c
 8015f4c:	0801a818 	.word	0x0801a818
 8015f50:	0801a840 	.word	0x0801a840
 8015f54:	0801a854 	.word	0x0801a854
 8015f58:	240041f8 	.word	0x240041f8
 8015f5c:	0801a874 	.word	0x0801a874

08015f60 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8015f60:	b580      	push	{r7, lr}
 8015f62:	b08a      	sub	sp, #40	; 0x28
 8015f64:	af00      	add	r7, sp, #0
 8015f66:	6078      	str	r0, [r7, #4]
 8015f68:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8015f6a:	2300      	movs	r3, #0
 8015f6c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8015f6e:	2300      	movs	r3, #0
 8015f70:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8015f72:	2300      	movs	r3, #0
 8015f74:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8015f76:	2300      	movs	r3, #0
 8015f78:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8015f7a:	2300      	movs	r3, #0
 8015f7c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8015f7e:	4b28      	ldr	r3, [pc, #160]	; (8016020 <ip_reass_remove_oldest_datagram+0xc0>)
 8015f80:	681b      	ldr	r3, [r3, #0]
 8015f82:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8015f84:	e030      	b.n	8015fe8 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8015f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f88:	695a      	ldr	r2, [r3, #20]
 8015f8a:	687b      	ldr	r3, [r7, #4]
 8015f8c:	68db      	ldr	r3, [r3, #12]
 8015f8e:	429a      	cmp	r2, r3
 8015f90:	d10c      	bne.n	8015fac <ip_reass_remove_oldest_datagram+0x4c>
 8015f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f94:	699a      	ldr	r2, [r3, #24]
 8015f96:	687b      	ldr	r3, [r7, #4]
 8015f98:	691b      	ldr	r3, [r3, #16]
 8015f9a:	429a      	cmp	r2, r3
 8015f9c:	d106      	bne.n	8015fac <ip_reass_remove_oldest_datagram+0x4c>
 8015f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015fa0:	899a      	ldrh	r2, [r3, #12]
 8015fa2:	687b      	ldr	r3, [r7, #4]
 8015fa4:	889b      	ldrh	r3, [r3, #4]
 8015fa6:	b29b      	uxth	r3, r3
 8015fa8:	429a      	cmp	r2, r3
 8015faa:	d014      	beq.n	8015fd6 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8015fac:	693b      	ldr	r3, [r7, #16]
 8015fae:	3301      	adds	r3, #1
 8015fb0:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8015fb2:	6a3b      	ldr	r3, [r7, #32]
 8015fb4:	2b00      	cmp	r3, #0
 8015fb6:	d104      	bne.n	8015fc2 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8015fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015fba:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8015fbc:	69fb      	ldr	r3, [r7, #28]
 8015fbe:	61bb      	str	r3, [r7, #24]
 8015fc0:	e009      	b.n	8015fd6 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8015fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015fc4:	7fda      	ldrb	r2, [r3, #31]
 8015fc6:	6a3b      	ldr	r3, [r7, #32]
 8015fc8:	7fdb      	ldrb	r3, [r3, #31]
 8015fca:	429a      	cmp	r2, r3
 8015fcc:	d803      	bhi.n	8015fd6 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8015fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015fd0:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8015fd2:	69fb      	ldr	r3, [r7, #28]
 8015fd4:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8015fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015fd8:	681b      	ldr	r3, [r3, #0]
 8015fda:	2b00      	cmp	r3, #0
 8015fdc:	d001      	beq.n	8015fe2 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8015fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015fe0:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8015fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015fe4:	681b      	ldr	r3, [r3, #0]
 8015fe6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8015fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015fea:	2b00      	cmp	r3, #0
 8015fec:	d1cb      	bne.n	8015f86 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8015fee:	6a3b      	ldr	r3, [r7, #32]
 8015ff0:	2b00      	cmp	r3, #0
 8015ff2:	d008      	beq.n	8016006 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8015ff4:	69b9      	ldr	r1, [r7, #24]
 8015ff6:	6a38      	ldr	r0, [r7, #32]
 8015ff8:	f7ff ff0e 	bl	8015e18 <ip_reass_free_complete_datagram>
 8015ffc:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8015ffe:	697a      	ldr	r2, [r7, #20]
 8016000:	68fb      	ldr	r3, [r7, #12]
 8016002:	4413      	add	r3, r2
 8016004:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8016006:	697a      	ldr	r2, [r7, #20]
 8016008:	683b      	ldr	r3, [r7, #0]
 801600a:	429a      	cmp	r2, r3
 801600c:	da02      	bge.n	8016014 <ip_reass_remove_oldest_datagram+0xb4>
 801600e:	693b      	ldr	r3, [r7, #16]
 8016010:	2b01      	cmp	r3, #1
 8016012:	dcac      	bgt.n	8015f6e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8016014:	697b      	ldr	r3, [r7, #20]
}
 8016016:	4618      	mov	r0, r3
 8016018:	3728      	adds	r7, #40	; 0x28
 801601a:	46bd      	mov	sp, r7
 801601c:	bd80      	pop	{r7, pc}
 801601e:	bf00      	nop
 8016020:	240041f4 	.word	0x240041f4

08016024 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8016024:	b580      	push	{r7, lr}
 8016026:	b084      	sub	sp, #16
 8016028:	af00      	add	r7, sp, #0
 801602a:	6078      	str	r0, [r7, #4]
 801602c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801602e:	2004      	movs	r0, #4
 8016030:	f7f6 fda6 	bl	800cb80 <memp_malloc>
 8016034:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8016036:	68fb      	ldr	r3, [r7, #12]
 8016038:	2b00      	cmp	r3, #0
 801603a:	d110      	bne.n	801605e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801603c:	6839      	ldr	r1, [r7, #0]
 801603e:	6878      	ldr	r0, [r7, #4]
 8016040:	f7ff ff8e 	bl	8015f60 <ip_reass_remove_oldest_datagram>
 8016044:	4602      	mov	r2, r0
 8016046:	683b      	ldr	r3, [r7, #0]
 8016048:	4293      	cmp	r3, r2
 801604a:	dc03      	bgt.n	8016054 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801604c:	2004      	movs	r0, #4
 801604e:	f7f6 fd97 	bl	800cb80 <memp_malloc>
 8016052:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8016054:	68fb      	ldr	r3, [r7, #12]
 8016056:	2b00      	cmp	r3, #0
 8016058:	d101      	bne.n	801605e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801605a:	2300      	movs	r3, #0
 801605c:	e016      	b.n	801608c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801605e:	2220      	movs	r2, #32
 8016060:	2100      	movs	r1, #0
 8016062:	68f8      	ldr	r0, [r7, #12]
 8016064:	f000 ff10 	bl	8016e88 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8016068:	68fb      	ldr	r3, [r7, #12]
 801606a:	220f      	movs	r2, #15
 801606c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801606e:	4b09      	ldr	r3, [pc, #36]	; (8016094 <ip_reass_enqueue_new_datagram+0x70>)
 8016070:	681a      	ldr	r2, [r3, #0]
 8016072:	68fb      	ldr	r3, [r7, #12]
 8016074:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8016076:	4a07      	ldr	r2, [pc, #28]	; (8016094 <ip_reass_enqueue_new_datagram+0x70>)
 8016078:	68fb      	ldr	r3, [r7, #12]
 801607a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801607c:	68fb      	ldr	r3, [r7, #12]
 801607e:	3308      	adds	r3, #8
 8016080:	2214      	movs	r2, #20
 8016082:	6879      	ldr	r1, [r7, #4]
 8016084:	4618      	mov	r0, r3
 8016086:	f000 fef1 	bl	8016e6c <memcpy>
  return ipr;
 801608a:	68fb      	ldr	r3, [r7, #12]
}
 801608c:	4618      	mov	r0, r3
 801608e:	3710      	adds	r7, #16
 8016090:	46bd      	mov	sp, r7
 8016092:	bd80      	pop	{r7, pc}
 8016094:	240041f4 	.word	0x240041f4

08016098 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8016098:	b580      	push	{r7, lr}
 801609a:	b082      	sub	sp, #8
 801609c:	af00      	add	r7, sp, #0
 801609e:	6078      	str	r0, [r7, #4]
 80160a0:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80160a2:	4b10      	ldr	r3, [pc, #64]	; (80160e4 <ip_reass_dequeue_datagram+0x4c>)
 80160a4:	681b      	ldr	r3, [r3, #0]
 80160a6:	687a      	ldr	r2, [r7, #4]
 80160a8:	429a      	cmp	r2, r3
 80160aa:	d104      	bne.n	80160b6 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80160ac:	687b      	ldr	r3, [r7, #4]
 80160ae:	681b      	ldr	r3, [r3, #0]
 80160b0:	4a0c      	ldr	r2, [pc, #48]	; (80160e4 <ip_reass_dequeue_datagram+0x4c>)
 80160b2:	6013      	str	r3, [r2, #0]
 80160b4:	e00d      	b.n	80160d2 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80160b6:	683b      	ldr	r3, [r7, #0]
 80160b8:	2b00      	cmp	r3, #0
 80160ba:	d106      	bne.n	80160ca <ip_reass_dequeue_datagram+0x32>
 80160bc:	4b0a      	ldr	r3, [pc, #40]	; (80160e8 <ip_reass_dequeue_datagram+0x50>)
 80160be:	f240 1245 	movw	r2, #325	; 0x145
 80160c2:	490a      	ldr	r1, [pc, #40]	; (80160ec <ip_reass_dequeue_datagram+0x54>)
 80160c4:	480a      	ldr	r0, [pc, #40]	; (80160f0 <ip_reass_dequeue_datagram+0x58>)
 80160c6:	f000 fee7 	bl	8016e98 <iprintf>
    prev->next = ipr->next;
 80160ca:	687b      	ldr	r3, [r7, #4]
 80160cc:	681a      	ldr	r2, [r3, #0]
 80160ce:	683b      	ldr	r3, [r7, #0]
 80160d0:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80160d2:	6879      	ldr	r1, [r7, #4]
 80160d4:	2004      	movs	r0, #4
 80160d6:	f7f6 fdc9 	bl	800cc6c <memp_free>
}
 80160da:	bf00      	nop
 80160dc:	3708      	adds	r7, #8
 80160de:	46bd      	mov	sp, r7
 80160e0:	bd80      	pop	{r7, pc}
 80160e2:	bf00      	nop
 80160e4:	240041f4 	.word	0x240041f4
 80160e8:	0801a7d0 	.word	0x0801a7d0
 80160ec:	0801a898 	.word	0x0801a898
 80160f0:	0801a818 	.word	0x0801a818

080160f4 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80160f4:	b580      	push	{r7, lr}
 80160f6:	b08c      	sub	sp, #48	; 0x30
 80160f8:	af00      	add	r7, sp, #0
 80160fa:	60f8      	str	r0, [r7, #12]
 80160fc:	60b9      	str	r1, [r7, #8]
 80160fe:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8016100:	2300      	movs	r3, #0
 8016102:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8016104:	2301      	movs	r3, #1
 8016106:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8016108:	68bb      	ldr	r3, [r7, #8]
 801610a:	685b      	ldr	r3, [r3, #4]
 801610c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801610e:	69fb      	ldr	r3, [r7, #28]
 8016110:	885b      	ldrh	r3, [r3, #2]
 8016112:	b29b      	uxth	r3, r3
 8016114:	4618      	mov	r0, r3
 8016116:	f7f5 ff93 	bl	800c040 <lwip_htons>
 801611a:	4603      	mov	r3, r0
 801611c:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801611e:	69fb      	ldr	r3, [r7, #28]
 8016120:	781b      	ldrb	r3, [r3, #0]
 8016122:	f003 030f 	and.w	r3, r3, #15
 8016126:	b2db      	uxtb	r3, r3
 8016128:	009b      	lsls	r3, r3, #2
 801612a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801612c:	7e7b      	ldrb	r3, [r7, #25]
 801612e:	b29b      	uxth	r3, r3
 8016130:	8b7a      	ldrh	r2, [r7, #26]
 8016132:	429a      	cmp	r2, r3
 8016134:	d202      	bcs.n	801613c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016136:	f04f 33ff 	mov.w	r3, #4294967295
 801613a:	e135      	b.n	80163a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801613c:	7e7b      	ldrb	r3, [r7, #25]
 801613e:	b29b      	uxth	r3, r3
 8016140:	8b7a      	ldrh	r2, [r7, #26]
 8016142:	1ad3      	subs	r3, r2, r3
 8016144:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8016146:	69fb      	ldr	r3, [r7, #28]
 8016148:	88db      	ldrh	r3, [r3, #6]
 801614a:	b29b      	uxth	r3, r3
 801614c:	4618      	mov	r0, r3
 801614e:	f7f5 ff77 	bl	800c040 <lwip_htons>
 8016152:	4603      	mov	r3, r0
 8016154:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016158:	b29b      	uxth	r3, r3
 801615a:	00db      	lsls	r3, r3, #3
 801615c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801615e:	68bb      	ldr	r3, [r7, #8]
 8016160:	685b      	ldr	r3, [r3, #4]
 8016162:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8016164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016166:	2200      	movs	r2, #0
 8016168:	701a      	strb	r2, [r3, #0]
 801616a:	2200      	movs	r2, #0
 801616c:	705a      	strb	r2, [r3, #1]
 801616e:	2200      	movs	r2, #0
 8016170:	709a      	strb	r2, [r3, #2]
 8016172:	2200      	movs	r2, #0
 8016174:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8016176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016178:	8afa      	ldrh	r2, [r7, #22]
 801617a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801617c:	8afa      	ldrh	r2, [r7, #22]
 801617e:	8b7b      	ldrh	r3, [r7, #26]
 8016180:	4413      	add	r3, r2
 8016182:	b29a      	uxth	r2, r3
 8016184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016186:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8016188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801618a:	88db      	ldrh	r3, [r3, #6]
 801618c:	b29b      	uxth	r3, r3
 801618e:	8afa      	ldrh	r2, [r7, #22]
 8016190:	429a      	cmp	r2, r3
 8016192:	d902      	bls.n	801619a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016194:	f04f 33ff 	mov.w	r3, #4294967295
 8016198:	e106      	b.n	80163a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801619a:	68fb      	ldr	r3, [r7, #12]
 801619c:	685b      	ldr	r3, [r3, #4]
 801619e:	627b      	str	r3, [r7, #36]	; 0x24
 80161a0:	e068      	b.n	8016274 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80161a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80161a4:	685b      	ldr	r3, [r3, #4]
 80161a6:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80161a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161aa:	889b      	ldrh	r3, [r3, #4]
 80161ac:	b29a      	uxth	r2, r3
 80161ae:	693b      	ldr	r3, [r7, #16]
 80161b0:	889b      	ldrh	r3, [r3, #4]
 80161b2:	b29b      	uxth	r3, r3
 80161b4:	429a      	cmp	r2, r3
 80161b6:	d235      	bcs.n	8016224 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80161b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80161bc:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80161be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161c0:	2b00      	cmp	r3, #0
 80161c2:	d020      	beq.n	8016206 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80161c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161c6:	889b      	ldrh	r3, [r3, #4]
 80161c8:	b29a      	uxth	r2, r3
 80161ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161cc:	88db      	ldrh	r3, [r3, #6]
 80161ce:	b29b      	uxth	r3, r3
 80161d0:	429a      	cmp	r2, r3
 80161d2:	d307      	bcc.n	80161e4 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80161d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161d6:	88db      	ldrh	r3, [r3, #6]
 80161d8:	b29a      	uxth	r2, r3
 80161da:	693b      	ldr	r3, [r7, #16]
 80161dc:	889b      	ldrh	r3, [r3, #4]
 80161de:	b29b      	uxth	r3, r3
 80161e0:	429a      	cmp	r2, r3
 80161e2:	d902      	bls.n	80161ea <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80161e4:	f04f 33ff 	mov.w	r3, #4294967295
 80161e8:	e0de      	b.n	80163a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80161ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161ec:	68ba      	ldr	r2, [r7, #8]
 80161ee:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80161f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161f2:	88db      	ldrh	r3, [r3, #6]
 80161f4:	b29a      	uxth	r2, r3
 80161f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161f8:	889b      	ldrh	r3, [r3, #4]
 80161fa:	b29b      	uxth	r3, r3
 80161fc:	429a      	cmp	r2, r3
 80161fe:	d03d      	beq.n	801627c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8016200:	2300      	movs	r3, #0
 8016202:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8016204:	e03a      	b.n	801627c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8016206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016208:	88db      	ldrh	r3, [r3, #6]
 801620a:	b29a      	uxth	r2, r3
 801620c:	693b      	ldr	r3, [r7, #16]
 801620e:	889b      	ldrh	r3, [r3, #4]
 8016210:	b29b      	uxth	r3, r3
 8016212:	429a      	cmp	r2, r3
 8016214:	d902      	bls.n	801621c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016216:	f04f 33ff 	mov.w	r3, #4294967295
 801621a:	e0c5      	b.n	80163a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801621c:	68fb      	ldr	r3, [r7, #12]
 801621e:	68ba      	ldr	r2, [r7, #8]
 8016220:	605a      	str	r2, [r3, #4]
      break;
 8016222:	e02b      	b.n	801627c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8016224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016226:	889b      	ldrh	r3, [r3, #4]
 8016228:	b29a      	uxth	r2, r3
 801622a:	693b      	ldr	r3, [r7, #16]
 801622c:	889b      	ldrh	r3, [r3, #4]
 801622e:	b29b      	uxth	r3, r3
 8016230:	429a      	cmp	r2, r3
 8016232:	d102      	bne.n	801623a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016234:	f04f 33ff 	mov.w	r3, #4294967295
 8016238:	e0b6      	b.n	80163a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801623a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801623c:	889b      	ldrh	r3, [r3, #4]
 801623e:	b29a      	uxth	r2, r3
 8016240:	693b      	ldr	r3, [r7, #16]
 8016242:	88db      	ldrh	r3, [r3, #6]
 8016244:	b29b      	uxth	r3, r3
 8016246:	429a      	cmp	r2, r3
 8016248:	d202      	bcs.n	8016250 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801624a:	f04f 33ff 	mov.w	r3, #4294967295
 801624e:	e0ab      	b.n	80163a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8016250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016252:	2b00      	cmp	r3, #0
 8016254:	d009      	beq.n	801626a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8016256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016258:	88db      	ldrh	r3, [r3, #6]
 801625a:	b29a      	uxth	r2, r3
 801625c:	693b      	ldr	r3, [r7, #16]
 801625e:	889b      	ldrh	r3, [r3, #4]
 8016260:	b29b      	uxth	r3, r3
 8016262:	429a      	cmp	r2, r3
 8016264:	d001      	beq.n	801626a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8016266:	2300      	movs	r3, #0
 8016268:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801626a:	693b      	ldr	r3, [r7, #16]
 801626c:	681b      	ldr	r3, [r3, #0]
 801626e:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8016270:	693b      	ldr	r3, [r7, #16]
 8016272:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8016274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016276:	2b00      	cmp	r3, #0
 8016278:	d193      	bne.n	80161a2 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801627a:	e000      	b.n	801627e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801627c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801627e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016280:	2b00      	cmp	r3, #0
 8016282:	d12d      	bne.n	80162e0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8016284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016286:	2b00      	cmp	r3, #0
 8016288:	d01c      	beq.n	80162c4 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801628a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801628c:	88db      	ldrh	r3, [r3, #6]
 801628e:	b29a      	uxth	r2, r3
 8016290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016292:	889b      	ldrh	r3, [r3, #4]
 8016294:	b29b      	uxth	r3, r3
 8016296:	429a      	cmp	r2, r3
 8016298:	d906      	bls.n	80162a8 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801629a:	4b45      	ldr	r3, [pc, #276]	; (80163b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801629c:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 80162a0:	4944      	ldr	r1, [pc, #272]	; (80163b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80162a2:	4845      	ldr	r0, [pc, #276]	; (80163b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80162a4:	f000 fdf8 	bl	8016e98 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80162a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80162aa:	68ba      	ldr	r2, [r7, #8]
 80162ac:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80162ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80162b0:	88db      	ldrh	r3, [r3, #6]
 80162b2:	b29a      	uxth	r2, r3
 80162b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162b6:	889b      	ldrh	r3, [r3, #4]
 80162b8:	b29b      	uxth	r3, r3
 80162ba:	429a      	cmp	r2, r3
 80162bc:	d010      	beq.n	80162e0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80162be:	2300      	movs	r3, #0
 80162c0:	623b      	str	r3, [r7, #32]
 80162c2:	e00d      	b.n	80162e0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80162c4:	68fb      	ldr	r3, [r7, #12]
 80162c6:	685b      	ldr	r3, [r3, #4]
 80162c8:	2b00      	cmp	r3, #0
 80162ca:	d006      	beq.n	80162da <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80162cc:	4b38      	ldr	r3, [pc, #224]	; (80163b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80162ce:	f44f 72df 	mov.w	r2, #446	; 0x1be
 80162d2:	493a      	ldr	r1, [pc, #232]	; (80163bc <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80162d4:	4838      	ldr	r0, [pc, #224]	; (80163b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80162d6:	f000 fddf 	bl	8016e98 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80162da:	68fb      	ldr	r3, [r7, #12]
 80162dc:	68ba      	ldr	r2, [r7, #8]
 80162de:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80162e0:	687b      	ldr	r3, [r7, #4]
 80162e2:	2b00      	cmp	r3, #0
 80162e4:	d105      	bne.n	80162f2 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80162e6:	68fb      	ldr	r3, [r7, #12]
 80162e8:	7f9b      	ldrb	r3, [r3, #30]
 80162ea:	f003 0301 	and.w	r3, r3, #1
 80162ee:	2b00      	cmp	r3, #0
 80162f0:	d059      	beq.n	80163a6 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80162f2:	6a3b      	ldr	r3, [r7, #32]
 80162f4:	2b00      	cmp	r3, #0
 80162f6:	d04f      	beq.n	8016398 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80162f8:	68fb      	ldr	r3, [r7, #12]
 80162fa:	685b      	ldr	r3, [r3, #4]
 80162fc:	2b00      	cmp	r3, #0
 80162fe:	d006      	beq.n	801630e <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8016300:	68fb      	ldr	r3, [r7, #12]
 8016302:	685b      	ldr	r3, [r3, #4]
 8016304:	685b      	ldr	r3, [r3, #4]
 8016306:	889b      	ldrh	r3, [r3, #4]
 8016308:	b29b      	uxth	r3, r3
 801630a:	2b00      	cmp	r3, #0
 801630c:	d002      	beq.n	8016314 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801630e:	2300      	movs	r3, #0
 8016310:	623b      	str	r3, [r7, #32]
 8016312:	e041      	b.n	8016398 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8016314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016316:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8016318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801631a:	681b      	ldr	r3, [r3, #0]
 801631c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801631e:	e012      	b.n	8016346 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8016320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016322:	685b      	ldr	r3, [r3, #4]
 8016324:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8016326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016328:	88db      	ldrh	r3, [r3, #6]
 801632a:	b29a      	uxth	r2, r3
 801632c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801632e:	889b      	ldrh	r3, [r3, #4]
 8016330:	b29b      	uxth	r3, r3
 8016332:	429a      	cmp	r2, r3
 8016334:	d002      	beq.n	801633c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8016336:	2300      	movs	r3, #0
 8016338:	623b      	str	r3, [r7, #32]
            break;
 801633a:	e007      	b.n	801634c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801633c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801633e:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8016340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016342:	681b      	ldr	r3, [r3, #0]
 8016344:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8016346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016348:	2b00      	cmp	r3, #0
 801634a:	d1e9      	bne.n	8016320 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801634c:	6a3b      	ldr	r3, [r7, #32]
 801634e:	2b00      	cmp	r3, #0
 8016350:	d022      	beq.n	8016398 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8016352:	68fb      	ldr	r3, [r7, #12]
 8016354:	685b      	ldr	r3, [r3, #4]
 8016356:	2b00      	cmp	r3, #0
 8016358:	d106      	bne.n	8016368 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801635a:	4b15      	ldr	r3, [pc, #84]	; (80163b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801635c:	f240 12df 	movw	r2, #479	; 0x1df
 8016360:	4917      	ldr	r1, [pc, #92]	; (80163c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8016362:	4815      	ldr	r0, [pc, #84]	; (80163b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016364:	f000 fd98 	bl	8016e98 <iprintf>
          LWIP_ASSERT("sanity check",
 8016368:	68fb      	ldr	r3, [r7, #12]
 801636a:	685b      	ldr	r3, [r3, #4]
 801636c:	685b      	ldr	r3, [r3, #4]
 801636e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016370:	429a      	cmp	r2, r3
 8016372:	d106      	bne.n	8016382 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8016374:	4b0e      	ldr	r3, [pc, #56]	; (80163b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016376:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801637a:	4911      	ldr	r1, [pc, #68]	; (80163c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801637c:	480e      	ldr	r0, [pc, #56]	; (80163b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801637e:	f000 fd8b 	bl	8016e98 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8016382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016384:	681b      	ldr	r3, [r3, #0]
 8016386:	2b00      	cmp	r3, #0
 8016388:	d006      	beq.n	8016398 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801638a:	4b09      	ldr	r3, [pc, #36]	; (80163b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801638c:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8016390:	490c      	ldr	r1, [pc, #48]	; (80163c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8016392:	4809      	ldr	r0, [pc, #36]	; (80163b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016394:	f000 fd80 	bl	8016e98 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8016398:	6a3b      	ldr	r3, [r7, #32]
 801639a:	2b00      	cmp	r3, #0
 801639c:	bf14      	ite	ne
 801639e:	2301      	movne	r3, #1
 80163a0:	2300      	moveq	r3, #0
 80163a2:	b2db      	uxtb	r3, r3
 80163a4:	e000      	b.n	80163a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80163a6:	2300      	movs	r3, #0
}
 80163a8:	4618      	mov	r0, r3
 80163aa:	3730      	adds	r7, #48	; 0x30
 80163ac:	46bd      	mov	sp, r7
 80163ae:	bd80      	pop	{r7, pc}
 80163b0:	0801a7d0 	.word	0x0801a7d0
 80163b4:	0801a8b4 	.word	0x0801a8b4
 80163b8:	0801a818 	.word	0x0801a818
 80163bc:	0801a8d4 	.word	0x0801a8d4
 80163c0:	0801a90c 	.word	0x0801a90c
 80163c4:	0801a91c 	.word	0x0801a91c

080163c8 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80163c8:	b580      	push	{r7, lr}
 80163ca:	b08e      	sub	sp, #56	; 0x38
 80163cc:	af00      	add	r7, sp, #0
 80163ce:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80163d0:	687b      	ldr	r3, [r7, #4]
 80163d2:	685b      	ldr	r3, [r3, #4]
 80163d4:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80163d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80163d8:	781b      	ldrb	r3, [r3, #0]
 80163da:	f003 030f 	and.w	r3, r3, #15
 80163de:	b2db      	uxtb	r3, r3
 80163e0:	009b      	lsls	r3, r3, #2
 80163e2:	b2db      	uxtb	r3, r3
 80163e4:	2b14      	cmp	r3, #20
 80163e6:	f040 8167 	bne.w	80166b8 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80163ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80163ec:	88db      	ldrh	r3, [r3, #6]
 80163ee:	b29b      	uxth	r3, r3
 80163f0:	4618      	mov	r0, r3
 80163f2:	f7f5 fe25 	bl	800c040 <lwip_htons>
 80163f6:	4603      	mov	r3, r0
 80163f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80163fc:	b29b      	uxth	r3, r3
 80163fe:	00db      	lsls	r3, r3, #3
 8016400:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8016402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016404:	885b      	ldrh	r3, [r3, #2]
 8016406:	b29b      	uxth	r3, r3
 8016408:	4618      	mov	r0, r3
 801640a:	f7f5 fe19 	bl	800c040 <lwip_htons>
 801640e:	4603      	mov	r3, r0
 8016410:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8016412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016414:	781b      	ldrb	r3, [r3, #0]
 8016416:	f003 030f 	and.w	r3, r3, #15
 801641a:	b2db      	uxtb	r3, r3
 801641c:	009b      	lsls	r3, r3, #2
 801641e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8016422:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016426:	b29b      	uxth	r3, r3
 8016428:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801642a:	429a      	cmp	r2, r3
 801642c:	f0c0 8146 	bcc.w	80166bc <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8016430:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016434:	b29b      	uxth	r3, r3
 8016436:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8016438:	1ad3      	subs	r3, r2, r3
 801643a:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801643c:	6878      	ldr	r0, [r7, #4]
 801643e:	f7f7 fb47 	bl	800dad0 <pbuf_clen>
 8016442:	4603      	mov	r3, r0
 8016444:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8016446:	4b9f      	ldr	r3, [pc, #636]	; (80166c4 <ip4_reass+0x2fc>)
 8016448:	881b      	ldrh	r3, [r3, #0]
 801644a:	461a      	mov	r2, r3
 801644c:	8c3b      	ldrh	r3, [r7, #32]
 801644e:	4413      	add	r3, r2
 8016450:	2b0a      	cmp	r3, #10
 8016452:	dd10      	ble.n	8016476 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8016454:	8c3b      	ldrh	r3, [r7, #32]
 8016456:	4619      	mov	r1, r3
 8016458:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801645a:	f7ff fd81 	bl	8015f60 <ip_reass_remove_oldest_datagram>
 801645e:	4603      	mov	r3, r0
 8016460:	2b00      	cmp	r3, #0
 8016462:	f000 812d 	beq.w	80166c0 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8016466:	4b97      	ldr	r3, [pc, #604]	; (80166c4 <ip4_reass+0x2fc>)
 8016468:	881b      	ldrh	r3, [r3, #0]
 801646a:	461a      	mov	r2, r3
 801646c:	8c3b      	ldrh	r3, [r7, #32]
 801646e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8016470:	2b0a      	cmp	r3, #10
 8016472:	f300 8125 	bgt.w	80166c0 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8016476:	4b94      	ldr	r3, [pc, #592]	; (80166c8 <ip4_reass+0x300>)
 8016478:	681b      	ldr	r3, [r3, #0]
 801647a:	633b      	str	r3, [r7, #48]	; 0x30
 801647c:	e015      	b.n	80164aa <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801647e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016480:	695a      	ldr	r2, [r3, #20]
 8016482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016484:	68db      	ldr	r3, [r3, #12]
 8016486:	429a      	cmp	r2, r3
 8016488:	d10c      	bne.n	80164a4 <ip4_reass+0xdc>
 801648a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801648c:	699a      	ldr	r2, [r3, #24]
 801648e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016490:	691b      	ldr	r3, [r3, #16]
 8016492:	429a      	cmp	r2, r3
 8016494:	d106      	bne.n	80164a4 <ip4_reass+0xdc>
 8016496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016498:	899a      	ldrh	r2, [r3, #12]
 801649a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801649c:	889b      	ldrh	r3, [r3, #4]
 801649e:	b29b      	uxth	r3, r3
 80164a0:	429a      	cmp	r2, r3
 80164a2:	d006      	beq.n	80164b2 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80164a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80164a6:	681b      	ldr	r3, [r3, #0]
 80164a8:	633b      	str	r3, [r7, #48]	; 0x30
 80164aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80164ac:	2b00      	cmp	r3, #0
 80164ae:	d1e6      	bne.n	801647e <ip4_reass+0xb6>
 80164b0:	e000      	b.n	80164b4 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80164b2:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80164b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80164b6:	2b00      	cmp	r3, #0
 80164b8:	d109      	bne.n	80164ce <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80164ba:	8c3b      	ldrh	r3, [r7, #32]
 80164bc:	4619      	mov	r1, r3
 80164be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80164c0:	f7ff fdb0 	bl	8016024 <ip_reass_enqueue_new_datagram>
 80164c4:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80164c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80164c8:	2b00      	cmp	r3, #0
 80164ca:	d11c      	bne.n	8016506 <ip4_reass+0x13e>
      goto nullreturn;
 80164cc:	e109      	b.n	80166e2 <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80164ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80164d0:	88db      	ldrh	r3, [r3, #6]
 80164d2:	b29b      	uxth	r3, r3
 80164d4:	4618      	mov	r0, r3
 80164d6:	f7f5 fdb3 	bl	800c040 <lwip_htons>
 80164da:	4603      	mov	r3, r0
 80164dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80164e0:	2b00      	cmp	r3, #0
 80164e2:	d110      	bne.n	8016506 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80164e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80164e6:	89db      	ldrh	r3, [r3, #14]
 80164e8:	4618      	mov	r0, r3
 80164ea:	f7f5 fda9 	bl	800c040 <lwip_htons>
 80164ee:	4603      	mov	r3, r0
 80164f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80164f4:	2b00      	cmp	r3, #0
 80164f6:	d006      	beq.n	8016506 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80164f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80164fa:	3308      	adds	r3, #8
 80164fc:	2214      	movs	r2, #20
 80164fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016500:	4618      	mov	r0, r3
 8016502:	f000 fcb3 	bl	8016e6c <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8016506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016508:	88db      	ldrh	r3, [r3, #6]
 801650a:	b29b      	uxth	r3, r3
 801650c:	f003 0320 	and.w	r3, r3, #32
 8016510:	2b00      	cmp	r3, #0
 8016512:	bf0c      	ite	eq
 8016514:	2301      	moveq	r3, #1
 8016516:	2300      	movne	r3, #0
 8016518:	b2db      	uxtb	r3, r3
 801651a:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801651c:	69fb      	ldr	r3, [r7, #28]
 801651e:	2b00      	cmp	r3, #0
 8016520:	d00e      	beq.n	8016540 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8016522:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8016524:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016526:	4413      	add	r3, r2
 8016528:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801652a:	8b7a      	ldrh	r2, [r7, #26]
 801652c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801652e:	429a      	cmp	r2, r3
 8016530:	f0c0 80a0 	bcc.w	8016674 <ip4_reass+0x2ac>
 8016534:	8b7b      	ldrh	r3, [r7, #26]
 8016536:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801653a:	4293      	cmp	r3, r2
 801653c:	f200 809a 	bhi.w	8016674 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8016540:	69fa      	ldr	r2, [r7, #28]
 8016542:	6879      	ldr	r1, [r7, #4]
 8016544:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016546:	f7ff fdd5 	bl	80160f4 <ip_reass_chain_frag_into_datagram_and_validate>
 801654a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801654c:	697b      	ldr	r3, [r7, #20]
 801654e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016552:	f000 8091 	beq.w	8016678 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8016556:	4b5b      	ldr	r3, [pc, #364]	; (80166c4 <ip4_reass+0x2fc>)
 8016558:	881a      	ldrh	r2, [r3, #0]
 801655a:	8c3b      	ldrh	r3, [r7, #32]
 801655c:	4413      	add	r3, r2
 801655e:	b29a      	uxth	r2, r3
 8016560:	4b58      	ldr	r3, [pc, #352]	; (80166c4 <ip4_reass+0x2fc>)
 8016562:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8016564:	69fb      	ldr	r3, [r7, #28]
 8016566:	2b00      	cmp	r3, #0
 8016568:	d00d      	beq.n	8016586 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801656a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801656c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801656e:	4413      	add	r3, r2
 8016570:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8016572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016574:	8a7a      	ldrh	r2, [r7, #18]
 8016576:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8016578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801657a:	7f9b      	ldrb	r3, [r3, #30]
 801657c:	f043 0301 	orr.w	r3, r3, #1
 8016580:	b2da      	uxtb	r2, r3
 8016582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016584:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8016586:	697b      	ldr	r3, [r7, #20]
 8016588:	2b01      	cmp	r3, #1
 801658a:	d171      	bne.n	8016670 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801658c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801658e:	8b9b      	ldrh	r3, [r3, #28]
 8016590:	3314      	adds	r3, #20
 8016592:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8016594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016596:	685b      	ldr	r3, [r3, #4]
 8016598:	685b      	ldr	r3, [r3, #4]
 801659a:	681b      	ldr	r3, [r3, #0]
 801659c:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801659e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80165a0:	685b      	ldr	r3, [r3, #4]
 80165a2:	685b      	ldr	r3, [r3, #4]
 80165a4:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80165a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80165a8:	3308      	adds	r3, #8
 80165aa:	2214      	movs	r2, #20
 80165ac:	4619      	mov	r1, r3
 80165ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80165b0:	f000 fc5c 	bl	8016e6c <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80165b4:	8a3b      	ldrh	r3, [r7, #16]
 80165b6:	4618      	mov	r0, r3
 80165b8:	f7f5 fd42 	bl	800c040 <lwip_htons>
 80165bc:	4603      	mov	r3, r0
 80165be:	461a      	mov	r2, r3
 80165c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80165c2:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80165c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80165c6:	2200      	movs	r2, #0
 80165c8:	719a      	strb	r2, [r3, #6]
 80165ca:	2200      	movs	r2, #0
 80165cc:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80165ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80165d0:	2200      	movs	r2, #0
 80165d2:	729a      	strb	r2, [r3, #10]
 80165d4:	2200      	movs	r2, #0
 80165d6:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80165d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80165da:	685b      	ldr	r3, [r3, #4]
 80165dc:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80165de:	e00d      	b.n	80165fc <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80165e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80165e2:	685b      	ldr	r3, [r3, #4]
 80165e4:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80165e6:	2114      	movs	r1, #20
 80165e8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80165ea:	f7f7 f95d 	bl	800d8a8 <pbuf_remove_header>
      pbuf_cat(p, r);
 80165ee:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80165f0:	6878      	ldr	r0, [r7, #4]
 80165f2:	f7f7 faad 	bl	800db50 <pbuf_cat>
      r = iprh->next_pbuf;
 80165f6:	68fb      	ldr	r3, [r7, #12]
 80165f8:	681b      	ldr	r3, [r3, #0]
 80165fa:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 80165fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80165fe:	2b00      	cmp	r3, #0
 8016600:	d1ee      	bne.n	80165e0 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8016602:	4b31      	ldr	r3, [pc, #196]	; (80166c8 <ip4_reass+0x300>)
 8016604:	681b      	ldr	r3, [r3, #0]
 8016606:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016608:	429a      	cmp	r2, r3
 801660a:	d102      	bne.n	8016612 <ip4_reass+0x24a>
      ipr_prev = NULL;
 801660c:	2300      	movs	r3, #0
 801660e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016610:	e010      	b.n	8016634 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8016612:	4b2d      	ldr	r3, [pc, #180]	; (80166c8 <ip4_reass+0x300>)
 8016614:	681b      	ldr	r3, [r3, #0]
 8016616:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016618:	e007      	b.n	801662a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801661a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801661c:	681b      	ldr	r3, [r3, #0]
 801661e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016620:	429a      	cmp	r2, r3
 8016622:	d006      	beq.n	8016632 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8016624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016626:	681b      	ldr	r3, [r3, #0]
 8016628:	62fb      	str	r3, [r7, #44]	; 0x2c
 801662a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801662c:	2b00      	cmp	r3, #0
 801662e:	d1f4      	bne.n	801661a <ip4_reass+0x252>
 8016630:	e000      	b.n	8016634 <ip4_reass+0x26c>
          break;
 8016632:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8016634:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016636:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016638:	f7ff fd2e 	bl	8016098 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801663c:	6878      	ldr	r0, [r7, #4]
 801663e:	f7f7 fa47 	bl	800dad0 <pbuf_clen>
 8016642:	4603      	mov	r3, r0
 8016644:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8016646:	4b1f      	ldr	r3, [pc, #124]	; (80166c4 <ip4_reass+0x2fc>)
 8016648:	881b      	ldrh	r3, [r3, #0]
 801664a:	8c3a      	ldrh	r2, [r7, #32]
 801664c:	429a      	cmp	r2, r3
 801664e:	d906      	bls.n	801665e <ip4_reass+0x296>
 8016650:	4b1e      	ldr	r3, [pc, #120]	; (80166cc <ip4_reass+0x304>)
 8016652:	f240 229b 	movw	r2, #667	; 0x29b
 8016656:	491e      	ldr	r1, [pc, #120]	; (80166d0 <ip4_reass+0x308>)
 8016658:	481e      	ldr	r0, [pc, #120]	; (80166d4 <ip4_reass+0x30c>)
 801665a:	f000 fc1d 	bl	8016e98 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801665e:	4b19      	ldr	r3, [pc, #100]	; (80166c4 <ip4_reass+0x2fc>)
 8016660:	881a      	ldrh	r2, [r3, #0]
 8016662:	8c3b      	ldrh	r3, [r7, #32]
 8016664:	1ad3      	subs	r3, r2, r3
 8016666:	b29a      	uxth	r2, r3
 8016668:	4b16      	ldr	r3, [pc, #88]	; (80166c4 <ip4_reass+0x2fc>)
 801666a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801666c:	687b      	ldr	r3, [r7, #4]
 801666e:	e03c      	b.n	80166ea <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8016670:	2300      	movs	r3, #0
 8016672:	e03a      	b.n	80166ea <ip4_reass+0x322>
      goto nullreturn_ipr;
 8016674:	bf00      	nop
 8016676:	e000      	b.n	801667a <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8016678:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801667a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801667c:	2b00      	cmp	r3, #0
 801667e:	d106      	bne.n	801668e <ip4_reass+0x2c6>
 8016680:	4b12      	ldr	r3, [pc, #72]	; (80166cc <ip4_reass+0x304>)
 8016682:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8016686:	4914      	ldr	r1, [pc, #80]	; (80166d8 <ip4_reass+0x310>)
 8016688:	4812      	ldr	r0, [pc, #72]	; (80166d4 <ip4_reass+0x30c>)
 801668a:	f000 fc05 	bl	8016e98 <iprintf>
  if (ipr->p == NULL) {
 801668e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016690:	685b      	ldr	r3, [r3, #4]
 8016692:	2b00      	cmp	r3, #0
 8016694:	d124      	bne.n	80166e0 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8016696:	4b0c      	ldr	r3, [pc, #48]	; (80166c8 <ip4_reass+0x300>)
 8016698:	681b      	ldr	r3, [r3, #0]
 801669a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801669c:	429a      	cmp	r2, r3
 801669e:	d006      	beq.n	80166ae <ip4_reass+0x2e6>
 80166a0:	4b0a      	ldr	r3, [pc, #40]	; (80166cc <ip4_reass+0x304>)
 80166a2:	f240 22ab 	movw	r2, #683	; 0x2ab
 80166a6:	490d      	ldr	r1, [pc, #52]	; (80166dc <ip4_reass+0x314>)
 80166a8:	480a      	ldr	r0, [pc, #40]	; (80166d4 <ip4_reass+0x30c>)
 80166aa:	f000 fbf5 	bl	8016e98 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80166ae:	2100      	movs	r1, #0
 80166b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80166b2:	f7ff fcf1 	bl	8016098 <ip_reass_dequeue_datagram>
 80166b6:	e014      	b.n	80166e2 <ip4_reass+0x31a>
    goto nullreturn;
 80166b8:	bf00      	nop
 80166ba:	e012      	b.n	80166e2 <ip4_reass+0x31a>
    goto nullreturn;
 80166bc:	bf00      	nop
 80166be:	e010      	b.n	80166e2 <ip4_reass+0x31a>
      goto nullreturn;
 80166c0:	bf00      	nop
 80166c2:	e00e      	b.n	80166e2 <ip4_reass+0x31a>
 80166c4:	240041f8 	.word	0x240041f8
 80166c8:	240041f4 	.word	0x240041f4
 80166cc:	0801a7d0 	.word	0x0801a7d0
 80166d0:	0801a940 	.word	0x0801a940
 80166d4:	0801a818 	.word	0x0801a818
 80166d8:	0801a95c 	.word	0x0801a95c
 80166dc:	0801a968 	.word	0x0801a968
  }

nullreturn:
 80166e0:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80166e2:	6878      	ldr	r0, [r7, #4]
 80166e4:	f7f7 f966 	bl	800d9b4 <pbuf_free>
  return NULL;
 80166e8:	2300      	movs	r3, #0
}
 80166ea:	4618      	mov	r0, r3
 80166ec:	3738      	adds	r7, #56	; 0x38
 80166ee:	46bd      	mov	sp, r7
 80166f0:	bd80      	pop	{r7, pc}
 80166f2:	bf00      	nop

080166f4 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80166f4:	b580      	push	{r7, lr}
 80166f6:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80166f8:	2005      	movs	r0, #5
 80166fa:	f7f6 fa41 	bl	800cb80 <memp_malloc>
 80166fe:	4603      	mov	r3, r0
}
 8016700:	4618      	mov	r0, r3
 8016702:	bd80      	pop	{r7, pc}

08016704 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8016704:	b580      	push	{r7, lr}
 8016706:	b082      	sub	sp, #8
 8016708:	af00      	add	r7, sp, #0
 801670a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801670c:	687b      	ldr	r3, [r7, #4]
 801670e:	2b00      	cmp	r3, #0
 8016710:	d106      	bne.n	8016720 <ip_frag_free_pbuf_custom_ref+0x1c>
 8016712:	4b07      	ldr	r3, [pc, #28]	; (8016730 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8016714:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8016718:	4906      	ldr	r1, [pc, #24]	; (8016734 <ip_frag_free_pbuf_custom_ref+0x30>)
 801671a:	4807      	ldr	r0, [pc, #28]	; (8016738 <ip_frag_free_pbuf_custom_ref+0x34>)
 801671c:	f000 fbbc 	bl	8016e98 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8016720:	6879      	ldr	r1, [r7, #4]
 8016722:	2005      	movs	r0, #5
 8016724:	f7f6 faa2 	bl	800cc6c <memp_free>
}
 8016728:	bf00      	nop
 801672a:	3708      	adds	r7, #8
 801672c:	46bd      	mov	sp, r7
 801672e:	bd80      	pop	{r7, pc}
 8016730:	0801a7d0 	.word	0x0801a7d0
 8016734:	0801a988 	.word	0x0801a988
 8016738:	0801a818 	.word	0x0801a818

0801673c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801673c:	b580      	push	{r7, lr}
 801673e:	b084      	sub	sp, #16
 8016740:	af00      	add	r7, sp, #0
 8016742:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8016744:	687b      	ldr	r3, [r7, #4]
 8016746:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8016748:	68fb      	ldr	r3, [r7, #12]
 801674a:	2b00      	cmp	r3, #0
 801674c:	d106      	bne.n	801675c <ipfrag_free_pbuf_custom+0x20>
 801674e:	4b11      	ldr	r3, [pc, #68]	; (8016794 <ipfrag_free_pbuf_custom+0x58>)
 8016750:	f240 22ce 	movw	r2, #718	; 0x2ce
 8016754:	4910      	ldr	r1, [pc, #64]	; (8016798 <ipfrag_free_pbuf_custom+0x5c>)
 8016756:	4811      	ldr	r0, [pc, #68]	; (801679c <ipfrag_free_pbuf_custom+0x60>)
 8016758:	f000 fb9e 	bl	8016e98 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801675c:	68fa      	ldr	r2, [r7, #12]
 801675e:	687b      	ldr	r3, [r7, #4]
 8016760:	429a      	cmp	r2, r3
 8016762:	d006      	beq.n	8016772 <ipfrag_free_pbuf_custom+0x36>
 8016764:	4b0b      	ldr	r3, [pc, #44]	; (8016794 <ipfrag_free_pbuf_custom+0x58>)
 8016766:	f240 22cf 	movw	r2, #719	; 0x2cf
 801676a:	490d      	ldr	r1, [pc, #52]	; (80167a0 <ipfrag_free_pbuf_custom+0x64>)
 801676c:	480b      	ldr	r0, [pc, #44]	; (801679c <ipfrag_free_pbuf_custom+0x60>)
 801676e:	f000 fb93 	bl	8016e98 <iprintf>
  if (pcr->original != NULL) {
 8016772:	68fb      	ldr	r3, [r7, #12]
 8016774:	695b      	ldr	r3, [r3, #20]
 8016776:	2b00      	cmp	r3, #0
 8016778:	d004      	beq.n	8016784 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801677a:	68fb      	ldr	r3, [r7, #12]
 801677c:	695b      	ldr	r3, [r3, #20]
 801677e:	4618      	mov	r0, r3
 8016780:	f7f7 f918 	bl	800d9b4 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8016784:	68f8      	ldr	r0, [r7, #12]
 8016786:	f7ff ffbd 	bl	8016704 <ip_frag_free_pbuf_custom_ref>
}
 801678a:	bf00      	nop
 801678c:	3710      	adds	r7, #16
 801678e:	46bd      	mov	sp, r7
 8016790:	bd80      	pop	{r7, pc}
 8016792:	bf00      	nop
 8016794:	0801a7d0 	.word	0x0801a7d0
 8016798:	0801a994 	.word	0x0801a994
 801679c:	0801a818 	.word	0x0801a818
 80167a0:	0801a9a0 	.word	0x0801a9a0

080167a4 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80167a4:	b580      	push	{r7, lr}
 80167a6:	b094      	sub	sp, #80	; 0x50
 80167a8:	af02      	add	r7, sp, #8
 80167aa:	60f8      	str	r0, [r7, #12]
 80167ac:	60b9      	str	r1, [r7, #8]
 80167ae:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80167b0:	2300      	movs	r3, #0
 80167b2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80167b6:	68bb      	ldr	r3, [r7, #8]
 80167b8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80167ba:	3b14      	subs	r3, #20
 80167bc:	2b00      	cmp	r3, #0
 80167be:	da00      	bge.n	80167c2 <ip4_frag+0x1e>
 80167c0:	3307      	adds	r3, #7
 80167c2:	10db      	asrs	r3, r3, #3
 80167c4:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80167c6:	2314      	movs	r3, #20
 80167c8:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80167ca:	68fb      	ldr	r3, [r7, #12]
 80167cc:	685b      	ldr	r3, [r3, #4]
 80167ce:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 80167d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80167d2:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80167d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80167d6:	781b      	ldrb	r3, [r3, #0]
 80167d8:	f003 030f 	and.w	r3, r3, #15
 80167dc:	b2db      	uxtb	r3, r3
 80167de:	009b      	lsls	r3, r3, #2
 80167e0:	b2db      	uxtb	r3, r3
 80167e2:	2b14      	cmp	r3, #20
 80167e4:	d002      	beq.n	80167ec <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80167e6:	f06f 0305 	mvn.w	r3, #5
 80167ea:	e110      	b.n	8016a0e <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80167ec:	68fb      	ldr	r3, [r7, #12]
 80167ee:	895b      	ldrh	r3, [r3, #10]
 80167f0:	2b13      	cmp	r3, #19
 80167f2:	d809      	bhi.n	8016808 <ip4_frag+0x64>
 80167f4:	4b88      	ldr	r3, [pc, #544]	; (8016a18 <ip4_frag+0x274>)
 80167f6:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80167fa:	4988      	ldr	r1, [pc, #544]	; (8016a1c <ip4_frag+0x278>)
 80167fc:	4888      	ldr	r0, [pc, #544]	; (8016a20 <ip4_frag+0x27c>)
 80167fe:	f000 fb4b 	bl	8016e98 <iprintf>
 8016802:	f06f 0305 	mvn.w	r3, #5
 8016806:	e102      	b.n	8016a0e <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8016808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801680a:	88db      	ldrh	r3, [r3, #6]
 801680c:	b29b      	uxth	r3, r3
 801680e:	4618      	mov	r0, r3
 8016810:	f7f5 fc16 	bl	800c040 <lwip_htons>
 8016814:	4603      	mov	r3, r0
 8016816:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8016818:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801681a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801681e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8016822:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016824:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8016828:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801682a:	68fb      	ldr	r3, [r7, #12]
 801682c:	891b      	ldrh	r3, [r3, #8]
 801682e:	3b14      	subs	r3, #20
 8016830:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8016834:	e0e1      	b.n	80169fa <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8016836:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016838:	00db      	lsls	r3, r3, #3
 801683a:	b29b      	uxth	r3, r3
 801683c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016840:	4293      	cmp	r3, r2
 8016842:	bf28      	it	cs
 8016844:	4613      	movcs	r3, r2
 8016846:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8016848:	f44f 7220 	mov.w	r2, #640	; 0x280
 801684c:	2114      	movs	r1, #20
 801684e:	200e      	movs	r0, #14
 8016850:	f7f6 fdcc 	bl	800d3ec <pbuf_alloc>
 8016854:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8016856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016858:	2b00      	cmp	r3, #0
 801685a:	f000 80d5 	beq.w	8016a08 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801685e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016860:	895b      	ldrh	r3, [r3, #10]
 8016862:	2b13      	cmp	r3, #19
 8016864:	d806      	bhi.n	8016874 <ip4_frag+0xd0>
 8016866:	4b6c      	ldr	r3, [pc, #432]	; (8016a18 <ip4_frag+0x274>)
 8016868:	f44f 7249 	mov.w	r2, #804	; 0x324
 801686c:	496d      	ldr	r1, [pc, #436]	; (8016a24 <ip4_frag+0x280>)
 801686e:	486c      	ldr	r0, [pc, #432]	; (8016a20 <ip4_frag+0x27c>)
 8016870:	f000 fb12 	bl	8016e98 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8016874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016876:	685b      	ldr	r3, [r3, #4]
 8016878:	2214      	movs	r2, #20
 801687a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801687c:	4618      	mov	r0, r3
 801687e:	f000 faf5 	bl	8016e6c <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8016882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016884:	685b      	ldr	r3, [r3, #4]
 8016886:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8016888:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801688a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801688e:	e064      	b.n	801695a <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8016890:	68fb      	ldr	r3, [r7, #12]
 8016892:	895a      	ldrh	r2, [r3, #10]
 8016894:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016896:	1ad3      	subs	r3, r2, r3
 8016898:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801689a:	68fb      	ldr	r3, [r7, #12]
 801689c:	895b      	ldrh	r3, [r3, #10]
 801689e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80168a0:	429a      	cmp	r2, r3
 80168a2:	d906      	bls.n	80168b2 <ip4_frag+0x10e>
 80168a4:	4b5c      	ldr	r3, [pc, #368]	; (8016a18 <ip4_frag+0x274>)
 80168a6:	f240 322d 	movw	r2, #813	; 0x32d
 80168aa:	495f      	ldr	r1, [pc, #380]	; (8016a28 <ip4_frag+0x284>)
 80168ac:	485c      	ldr	r0, [pc, #368]	; (8016a20 <ip4_frag+0x27c>)
 80168ae:	f000 faf3 	bl	8016e98 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80168b2:	8bfa      	ldrh	r2, [r7, #30]
 80168b4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80168b8:	4293      	cmp	r3, r2
 80168ba:	bf28      	it	cs
 80168bc:	4613      	movcs	r3, r2
 80168be:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80168c2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80168c6:	2b00      	cmp	r3, #0
 80168c8:	d105      	bne.n	80168d6 <ip4_frag+0x132>
        poff = 0;
 80168ca:	2300      	movs	r3, #0
 80168cc:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80168ce:	68fb      	ldr	r3, [r7, #12]
 80168d0:	681b      	ldr	r3, [r3, #0]
 80168d2:	60fb      	str	r3, [r7, #12]
        continue;
 80168d4:	e041      	b.n	801695a <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80168d6:	f7ff ff0d 	bl	80166f4 <ip_frag_alloc_pbuf_custom_ref>
 80168da:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80168dc:	69bb      	ldr	r3, [r7, #24]
 80168de:	2b00      	cmp	r3, #0
 80168e0:	d103      	bne.n	80168ea <ip4_frag+0x146>
        pbuf_free(rambuf);
 80168e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80168e4:	f7f7 f866 	bl	800d9b4 <pbuf_free>
        goto memerr;
 80168e8:	e08f      	b.n	8016a0a <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80168ea:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80168ec:	68fb      	ldr	r3, [r7, #12]
 80168ee:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80168f0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80168f2:	4413      	add	r3, r2
 80168f4:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80168f8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80168fc:	9201      	str	r2, [sp, #4]
 80168fe:	9300      	str	r3, [sp, #0]
 8016900:	4603      	mov	r3, r0
 8016902:	2241      	movs	r2, #65	; 0x41
 8016904:	2000      	movs	r0, #0
 8016906:	f7f6 fe9b 	bl	800d640 <pbuf_alloced_custom>
 801690a:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801690c:	697b      	ldr	r3, [r7, #20]
 801690e:	2b00      	cmp	r3, #0
 8016910:	d106      	bne.n	8016920 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8016912:	69b8      	ldr	r0, [r7, #24]
 8016914:	f7ff fef6 	bl	8016704 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8016918:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801691a:	f7f7 f84b 	bl	800d9b4 <pbuf_free>
        goto memerr;
 801691e:	e074      	b.n	8016a0a <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8016920:	68f8      	ldr	r0, [r7, #12]
 8016922:	f7f7 f8ed 	bl	800db00 <pbuf_ref>
      pcr->original = p;
 8016926:	69bb      	ldr	r3, [r7, #24]
 8016928:	68fa      	ldr	r2, [r7, #12]
 801692a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801692c:	69bb      	ldr	r3, [r7, #24]
 801692e:	4a3f      	ldr	r2, [pc, #252]	; (8016a2c <ip4_frag+0x288>)
 8016930:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8016932:	6979      	ldr	r1, [r7, #20]
 8016934:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016936:	f7f7 f90b 	bl	800db50 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801693a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801693e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016942:	1ad3      	subs	r3, r2, r3
 8016944:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8016948:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801694c:	2b00      	cmp	r3, #0
 801694e:	d004      	beq.n	801695a <ip4_frag+0x1b6>
        poff = 0;
 8016950:	2300      	movs	r3, #0
 8016952:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8016954:	68fb      	ldr	r3, [r7, #12]
 8016956:	681b      	ldr	r3, [r3, #0]
 8016958:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801695a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801695e:	2b00      	cmp	r3, #0
 8016960:	d196      	bne.n	8016890 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8016962:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8016964:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016968:	4413      	add	r3, r2
 801696a:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801696c:	68bb      	ldr	r3, [r7, #8]
 801696e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8016970:	f1a3 0213 	sub.w	r2, r3, #19
 8016974:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016978:	429a      	cmp	r2, r3
 801697a:	bfcc      	ite	gt
 801697c:	2301      	movgt	r3, #1
 801697e:	2300      	movle	r3, #0
 8016980:	b2db      	uxtb	r3, r3
 8016982:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8016984:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8016988:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801698c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801698e:	6a3b      	ldr	r3, [r7, #32]
 8016990:	2b00      	cmp	r3, #0
 8016992:	d002      	beq.n	801699a <ip4_frag+0x1f6>
 8016994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016996:	2b00      	cmp	r3, #0
 8016998:	d003      	beq.n	80169a2 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801699a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801699c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80169a0:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80169a2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80169a4:	4618      	mov	r0, r3
 80169a6:	f7f5 fb4b 	bl	800c040 <lwip_htons>
 80169aa:	4603      	mov	r3, r0
 80169ac:	461a      	mov	r2, r3
 80169ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80169b0:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80169b2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80169b4:	3314      	adds	r3, #20
 80169b6:	b29b      	uxth	r3, r3
 80169b8:	4618      	mov	r0, r3
 80169ba:	f7f5 fb41 	bl	800c040 <lwip_htons>
 80169be:	4603      	mov	r3, r0
 80169c0:	461a      	mov	r2, r3
 80169c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80169c4:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80169c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80169c8:	2200      	movs	r2, #0
 80169ca:	729a      	strb	r2, [r3, #10]
 80169cc:	2200      	movs	r2, #0
 80169ce:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80169d0:	68bb      	ldr	r3, [r7, #8]
 80169d2:	695b      	ldr	r3, [r3, #20]
 80169d4:	687a      	ldr	r2, [r7, #4]
 80169d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80169d8:	68b8      	ldr	r0, [r7, #8]
 80169da:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80169dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80169de:	f7f6 ffe9 	bl	800d9b4 <pbuf_free>
    left = (u16_t)(left - fragsize);
 80169e2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80169e6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80169e8:	1ad3      	subs	r3, r2, r3
 80169ea:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 80169ee:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80169f2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80169f4:	4413      	add	r3, r2
 80169f6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80169fa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80169fe:	2b00      	cmp	r3, #0
 8016a00:	f47f af19 	bne.w	8016836 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8016a04:	2300      	movs	r3, #0
 8016a06:	e002      	b.n	8016a0e <ip4_frag+0x26a>
      goto memerr;
 8016a08:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8016a0a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8016a0e:	4618      	mov	r0, r3
 8016a10:	3748      	adds	r7, #72	; 0x48
 8016a12:	46bd      	mov	sp, r7
 8016a14:	bd80      	pop	{r7, pc}
 8016a16:	bf00      	nop
 8016a18:	0801a7d0 	.word	0x0801a7d0
 8016a1c:	0801a9ac 	.word	0x0801a9ac
 8016a20:	0801a818 	.word	0x0801a818
 8016a24:	0801a9c8 	.word	0x0801a9c8
 8016a28:	0801a9e8 	.word	0x0801a9e8
 8016a2c:	0801673d 	.word	0x0801673d

08016a30 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8016a30:	b580      	push	{r7, lr}
 8016a32:	b086      	sub	sp, #24
 8016a34:	af00      	add	r7, sp, #0
 8016a36:	6078      	str	r0, [r7, #4]
 8016a38:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8016a3a:	230e      	movs	r3, #14
 8016a3c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8016a3e:	687b      	ldr	r3, [r7, #4]
 8016a40:	895b      	ldrh	r3, [r3, #10]
 8016a42:	2b0e      	cmp	r3, #14
 8016a44:	d96e      	bls.n	8016b24 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8016a46:	687b      	ldr	r3, [r7, #4]
 8016a48:	7bdb      	ldrb	r3, [r3, #15]
 8016a4a:	2b00      	cmp	r3, #0
 8016a4c:	d106      	bne.n	8016a5c <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8016a4e:	683b      	ldr	r3, [r7, #0]
 8016a50:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016a54:	3301      	adds	r3, #1
 8016a56:	b2da      	uxtb	r2, r3
 8016a58:	687b      	ldr	r3, [r7, #4]
 8016a5a:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8016a5c:	687b      	ldr	r3, [r7, #4]
 8016a5e:	685b      	ldr	r3, [r3, #4]
 8016a60:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8016a62:	693b      	ldr	r3, [r7, #16]
 8016a64:	7b1a      	ldrb	r2, [r3, #12]
 8016a66:	7b5b      	ldrb	r3, [r3, #13]
 8016a68:	021b      	lsls	r3, r3, #8
 8016a6a:	4313      	orrs	r3, r2
 8016a6c:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8016a6e:	693b      	ldr	r3, [r7, #16]
 8016a70:	781b      	ldrb	r3, [r3, #0]
 8016a72:	f003 0301 	and.w	r3, r3, #1
 8016a76:	2b00      	cmp	r3, #0
 8016a78:	d023      	beq.n	8016ac2 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8016a7a:	693b      	ldr	r3, [r7, #16]
 8016a7c:	781b      	ldrb	r3, [r3, #0]
 8016a7e:	2b01      	cmp	r3, #1
 8016a80:	d10f      	bne.n	8016aa2 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8016a82:	693b      	ldr	r3, [r7, #16]
 8016a84:	785b      	ldrb	r3, [r3, #1]
 8016a86:	2b00      	cmp	r3, #0
 8016a88:	d11b      	bne.n	8016ac2 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8016a8a:	693b      	ldr	r3, [r7, #16]
 8016a8c:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8016a8e:	2b5e      	cmp	r3, #94	; 0x5e
 8016a90:	d117      	bne.n	8016ac2 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8016a92:	687b      	ldr	r3, [r7, #4]
 8016a94:	7b5b      	ldrb	r3, [r3, #13]
 8016a96:	f043 0310 	orr.w	r3, r3, #16
 8016a9a:	b2da      	uxtb	r2, r3
 8016a9c:	687b      	ldr	r3, [r7, #4]
 8016a9e:	735a      	strb	r2, [r3, #13]
 8016aa0:	e00f      	b.n	8016ac2 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8016aa2:	693b      	ldr	r3, [r7, #16]
 8016aa4:	2206      	movs	r2, #6
 8016aa6:	4928      	ldr	r1, [pc, #160]	; (8016b48 <ethernet_input+0x118>)
 8016aa8:	4618      	mov	r0, r3
 8016aaa:	f000 f9d1 	bl	8016e50 <memcmp>
 8016aae:	4603      	mov	r3, r0
 8016ab0:	2b00      	cmp	r3, #0
 8016ab2:	d106      	bne.n	8016ac2 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8016ab4:	687b      	ldr	r3, [r7, #4]
 8016ab6:	7b5b      	ldrb	r3, [r3, #13]
 8016ab8:	f043 0308 	orr.w	r3, r3, #8
 8016abc:	b2da      	uxtb	r2, r3
 8016abe:	687b      	ldr	r3, [r7, #4]
 8016ac0:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8016ac2:	89fb      	ldrh	r3, [r7, #14]
 8016ac4:	2b08      	cmp	r3, #8
 8016ac6:	d003      	beq.n	8016ad0 <ethernet_input+0xa0>
 8016ac8:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8016acc:	d014      	beq.n	8016af8 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8016ace:	e032      	b.n	8016b36 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8016ad0:	683b      	ldr	r3, [r7, #0]
 8016ad2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016ad6:	f003 0308 	and.w	r3, r3, #8
 8016ada:	2b00      	cmp	r3, #0
 8016adc:	d024      	beq.n	8016b28 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8016ade:	8afb      	ldrh	r3, [r7, #22]
 8016ae0:	4619      	mov	r1, r3
 8016ae2:	6878      	ldr	r0, [r7, #4]
 8016ae4:	f7f6 fee0 	bl	800d8a8 <pbuf_remove_header>
 8016ae8:	4603      	mov	r3, r0
 8016aea:	2b00      	cmp	r3, #0
 8016aec:	d11e      	bne.n	8016b2c <ethernet_input+0xfc>
        ip4_input(p, netif);
 8016aee:	6839      	ldr	r1, [r7, #0]
 8016af0:	6878      	ldr	r0, [r7, #4]
 8016af2:	f7fe ff27 	bl	8015944 <ip4_input>
      break;
 8016af6:	e013      	b.n	8016b20 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8016af8:	683b      	ldr	r3, [r7, #0]
 8016afa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016afe:	f003 0308 	and.w	r3, r3, #8
 8016b02:	2b00      	cmp	r3, #0
 8016b04:	d014      	beq.n	8016b30 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8016b06:	8afb      	ldrh	r3, [r7, #22]
 8016b08:	4619      	mov	r1, r3
 8016b0a:	6878      	ldr	r0, [r7, #4]
 8016b0c:	f7f6 fecc 	bl	800d8a8 <pbuf_remove_header>
 8016b10:	4603      	mov	r3, r0
 8016b12:	2b00      	cmp	r3, #0
 8016b14:	d10e      	bne.n	8016b34 <ethernet_input+0x104>
        etharp_input(p, netif);
 8016b16:	6839      	ldr	r1, [r7, #0]
 8016b18:	6878      	ldr	r0, [r7, #4]
 8016b1a:	f7fe f8a1 	bl	8014c60 <etharp_input>
      break;
 8016b1e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8016b20:	2300      	movs	r3, #0
 8016b22:	e00c      	b.n	8016b3e <ethernet_input+0x10e>
    goto free_and_return;
 8016b24:	bf00      	nop
 8016b26:	e006      	b.n	8016b36 <ethernet_input+0x106>
        goto free_and_return;
 8016b28:	bf00      	nop
 8016b2a:	e004      	b.n	8016b36 <ethernet_input+0x106>
        goto free_and_return;
 8016b2c:	bf00      	nop
 8016b2e:	e002      	b.n	8016b36 <ethernet_input+0x106>
        goto free_and_return;
 8016b30:	bf00      	nop
 8016b32:	e000      	b.n	8016b36 <ethernet_input+0x106>
        goto free_and_return;
 8016b34:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8016b36:	6878      	ldr	r0, [r7, #4]
 8016b38:	f7f6 ff3c 	bl	800d9b4 <pbuf_free>
  return ERR_OK;
 8016b3c:	2300      	movs	r3, #0
}
 8016b3e:	4618      	mov	r0, r3
 8016b40:	3718      	adds	r7, #24
 8016b42:	46bd      	mov	sp, r7
 8016b44:	bd80      	pop	{r7, pc}
 8016b46:	bf00      	nop
 8016b48:	0801abe4 	.word	0x0801abe4

08016b4c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8016b4c:	b580      	push	{r7, lr}
 8016b4e:	b086      	sub	sp, #24
 8016b50:	af00      	add	r7, sp, #0
 8016b52:	60f8      	str	r0, [r7, #12]
 8016b54:	60b9      	str	r1, [r7, #8]
 8016b56:	607a      	str	r2, [r7, #4]
 8016b58:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8016b5a:	8c3b      	ldrh	r3, [r7, #32]
 8016b5c:	4618      	mov	r0, r3
 8016b5e:	f7f5 fa6f 	bl	800c040 <lwip_htons>
 8016b62:	4603      	mov	r3, r0
 8016b64:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8016b66:	210e      	movs	r1, #14
 8016b68:	68b8      	ldr	r0, [r7, #8]
 8016b6a:	f7f6 fe8d 	bl	800d888 <pbuf_add_header>
 8016b6e:	4603      	mov	r3, r0
 8016b70:	2b00      	cmp	r3, #0
 8016b72:	d125      	bne.n	8016bc0 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8016b74:	68bb      	ldr	r3, [r7, #8]
 8016b76:	685b      	ldr	r3, [r3, #4]
 8016b78:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8016b7a:	693b      	ldr	r3, [r7, #16]
 8016b7c:	8afa      	ldrh	r2, [r7, #22]
 8016b7e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8016b80:	693b      	ldr	r3, [r7, #16]
 8016b82:	2206      	movs	r2, #6
 8016b84:	6839      	ldr	r1, [r7, #0]
 8016b86:	4618      	mov	r0, r3
 8016b88:	f000 f970 	bl	8016e6c <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8016b8c:	693b      	ldr	r3, [r7, #16]
 8016b8e:	3306      	adds	r3, #6
 8016b90:	2206      	movs	r2, #6
 8016b92:	6879      	ldr	r1, [r7, #4]
 8016b94:	4618      	mov	r0, r3
 8016b96:	f000 f969 	bl	8016e6c <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8016b9a:	68fb      	ldr	r3, [r7, #12]
 8016b9c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8016ba0:	2b06      	cmp	r3, #6
 8016ba2:	d006      	beq.n	8016bb2 <ethernet_output+0x66>
 8016ba4:	4b0a      	ldr	r3, [pc, #40]	; (8016bd0 <ethernet_output+0x84>)
 8016ba6:	f44f 7299 	mov.w	r2, #306	; 0x132
 8016baa:	490a      	ldr	r1, [pc, #40]	; (8016bd4 <ethernet_output+0x88>)
 8016bac:	480a      	ldr	r0, [pc, #40]	; (8016bd8 <ethernet_output+0x8c>)
 8016bae:	f000 f973 	bl	8016e98 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8016bb2:	68fb      	ldr	r3, [r7, #12]
 8016bb4:	699b      	ldr	r3, [r3, #24]
 8016bb6:	68b9      	ldr	r1, [r7, #8]
 8016bb8:	68f8      	ldr	r0, [r7, #12]
 8016bba:	4798      	blx	r3
 8016bbc:	4603      	mov	r3, r0
 8016bbe:	e002      	b.n	8016bc6 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8016bc0:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8016bc2:	f06f 0301 	mvn.w	r3, #1
}
 8016bc6:	4618      	mov	r0, r3
 8016bc8:	3718      	adds	r7, #24
 8016bca:	46bd      	mov	sp, r7
 8016bcc:	bd80      	pop	{r7, pc}
 8016bce:	bf00      	nop
 8016bd0:	0801a9f8 	.word	0x0801a9f8
 8016bd4:	0801aa30 	.word	0x0801aa30
 8016bd8:	0801aa64 	.word	0x0801aa64

08016bdc <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8016bdc:	b580      	push	{r7, lr}
 8016bde:	b086      	sub	sp, #24
 8016be0:	af00      	add	r7, sp, #0
 8016be2:	6078      	str	r0, [r7, #4]
 8016be4:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8016be6:	683b      	ldr	r3, [r7, #0]
 8016be8:	60bb      	str	r3, [r7, #8]
 8016bea:	2304      	movs	r3, #4
 8016bec:	60fb      	str	r3, [r7, #12]
 8016bee:	2300      	movs	r3, #0
 8016bf0:	613b      	str	r3, [r7, #16]
 8016bf2:	2300      	movs	r3, #0
 8016bf4:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8016bf6:	f107 0308 	add.w	r3, r7, #8
 8016bfa:	2100      	movs	r1, #0
 8016bfc:	4618      	mov	r0, r3
 8016bfe:	f7f2 fb6b 	bl	80092d8 <osMessageCreate>
 8016c02:	4602      	mov	r2, r0
 8016c04:	687b      	ldr	r3, [r7, #4]
 8016c06:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8016c08:	687b      	ldr	r3, [r7, #4]
 8016c0a:	681b      	ldr	r3, [r3, #0]
 8016c0c:	2b00      	cmp	r3, #0
 8016c0e:	d102      	bne.n	8016c16 <sys_mbox_new+0x3a>
    return ERR_MEM;
 8016c10:	f04f 33ff 	mov.w	r3, #4294967295
 8016c14:	e000      	b.n	8016c18 <sys_mbox_new+0x3c>

  return ERR_OK;
 8016c16:	2300      	movs	r3, #0
}
 8016c18:	4618      	mov	r0, r3
 8016c1a:	3718      	adds	r7, #24
 8016c1c:	46bd      	mov	sp, r7
 8016c1e:	bd80      	pop	{r7, pc}

08016c20 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8016c20:	b580      	push	{r7, lr}
 8016c22:	b084      	sub	sp, #16
 8016c24:	af00      	add	r7, sp, #0
 8016c26:	6078      	str	r0, [r7, #4]
 8016c28:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8016c2a:	687b      	ldr	r3, [r7, #4]
 8016c2c:	681b      	ldr	r3, [r3, #0]
 8016c2e:	6839      	ldr	r1, [r7, #0]
 8016c30:	2200      	movs	r2, #0
 8016c32:	4618      	mov	r0, r3
 8016c34:	f7f2 fb78 	bl	8009328 <osMessagePut>
 8016c38:	4603      	mov	r3, r0
 8016c3a:	2b00      	cmp	r3, #0
 8016c3c:	d102      	bne.n	8016c44 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8016c3e:	2300      	movs	r3, #0
 8016c40:	73fb      	strb	r3, [r7, #15]
 8016c42:	e001      	b.n	8016c48 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8016c44:	23ff      	movs	r3, #255	; 0xff
 8016c46:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8016c48:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016c4c:	4618      	mov	r0, r3
 8016c4e:	3710      	adds	r7, #16
 8016c50:	46bd      	mov	sp, r7
 8016c52:	bd80      	pop	{r7, pc}

08016c54 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8016c54:	b580      	push	{r7, lr}
 8016c56:	b08c      	sub	sp, #48	; 0x30
 8016c58:	af00      	add	r7, sp, #0
 8016c5a:	61f8      	str	r0, [r7, #28]
 8016c5c:	61b9      	str	r1, [r7, #24]
 8016c5e:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8016c60:	f7f2 f977 	bl	8008f52 <osKernelSysTick>
 8016c64:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8016c66:	697b      	ldr	r3, [r7, #20]
 8016c68:	2b00      	cmp	r3, #0
 8016c6a:	d017      	beq.n	8016c9c <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8016c6c:	69fb      	ldr	r3, [r7, #28]
 8016c6e:	6819      	ldr	r1, [r3, #0]
 8016c70:	f107 0320 	add.w	r3, r7, #32
 8016c74:	697a      	ldr	r2, [r7, #20]
 8016c76:	4618      	mov	r0, r3
 8016c78:	f7f2 fb96 	bl	80093a8 <osMessageGet>

    if(event.status == osEventMessage)
 8016c7c:	6a3b      	ldr	r3, [r7, #32]
 8016c7e:	2b10      	cmp	r3, #16
 8016c80:	d109      	bne.n	8016c96 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8016c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c84:	461a      	mov	r2, r3
 8016c86:	69bb      	ldr	r3, [r7, #24]
 8016c88:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8016c8a:	f7f2 f962 	bl	8008f52 <osKernelSysTick>
 8016c8e:	4602      	mov	r2, r0
 8016c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c92:	1ad3      	subs	r3, r2, r3
 8016c94:	e019      	b.n	8016cca <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8016c96:	f04f 33ff 	mov.w	r3, #4294967295
 8016c9a:	e016      	b.n	8016cca <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8016c9c:	69fb      	ldr	r3, [r7, #28]
 8016c9e:	6819      	ldr	r1, [r3, #0]
 8016ca0:	463b      	mov	r3, r7
 8016ca2:	f04f 32ff 	mov.w	r2, #4294967295
 8016ca6:	4618      	mov	r0, r3
 8016ca8:	f7f2 fb7e 	bl	80093a8 <osMessageGet>
 8016cac:	f107 0320 	add.w	r3, r7, #32
 8016cb0:	463a      	mov	r2, r7
 8016cb2:	ca07      	ldmia	r2, {r0, r1, r2}
 8016cb4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8016cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016cba:	461a      	mov	r2, r3
 8016cbc:	69bb      	ldr	r3, [r7, #24]
 8016cbe:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8016cc0:	f7f2 f947 	bl	8008f52 <osKernelSysTick>
 8016cc4:	4602      	mov	r2, r0
 8016cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016cc8:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8016cca:	4618      	mov	r0, r3
 8016ccc:	3730      	adds	r7, #48	; 0x30
 8016cce:	46bd      	mov	sp, r7
 8016cd0:	bd80      	pop	{r7, pc}

08016cd2 <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8016cd2:	b480      	push	{r7}
 8016cd4:	b083      	sub	sp, #12
 8016cd6:	af00      	add	r7, sp, #0
 8016cd8:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8016cda:	687b      	ldr	r3, [r7, #4]
 8016cdc:	681b      	ldr	r3, [r3, #0]
 8016cde:	2b00      	cmp	r3, #0
 8016ce0:	d101      	bne.n	8016ce6 <sys_mbox_valid+0x14>
    return 0;
 8016ce2:	2300      	movs	r3, #0
 8016ce4:	e000      	b.n	8016ce8 <sys_mbox_valid+0x16>
  else
    return 1;
 8016ce6:	2301      	movs	r3, #1
}
 8016ce8:	4618      	mov	r0, r3
 8016cea:	370c      	adds	r7, #12
 8016cec:	46bd      	mov	sp, r7
 8016cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cf2:	4770      	bx	lr

08016cf4 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8016cf4:	b580      	push	{r7, lr}
 8016cf6:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8016cf8:	4803      	ldr	r0, [pc, #12]	; (8016d08 <sys_init+0x14>)
 8016cfa:	f7f2 f99a 	bl	8009032 <osMutexCreate>
 8016cfe:	4603      	mov	r3, r0
 8016d00:	4a02      	ldr	r2, [pc, #8]	; (8016d0c <sys_init+0x18>)
 8016d02:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8016d04:	bf00      	nop
 8016d06:	bd80      	pop	{r7, pc}
 8016d08:	0801abf4 	.word	0x0801abf4
 8016d0c:	240079c8 	.word	0x240079c8

08016d10 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8016d10:	b580      	push	{r7, lr}
 8016d12:	b084      	sub	sp, #16
 8016d14:	af00      	add	r7, sp, #0
 8016d16:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8016d18:	2300      	movs	r3, #0
 8016d1a:	60bb      	str	r3, [r7, #8]
 8016d1c:	2300      	movs	r3, #0
 8016d1e:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8016d20:	f107 0308 	add.w	r3, r7, #8
 8016d24:	4618      	mov	r0, r3
 8016d26:	f7f2 f984 	bl	8009032 <osMutexCreate>
 8016d2a:	4602      	mov	r2, r0
 8016d2c:	687b      	ldr	r3, [r7, #4]
 8016d2e:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8016d30:	687b      	ldr	r3, [r7, #4]
 8016d32:	681b      	ldr	r3, [r3, #0]
 8016d34:	2b00      	cmp	r3, #0
 8016d36:	d102      	bne.n	8016d3e <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8016d38:	f04f 33ff 	mov.w	r3, #4294967295
 8016d3c:	e000      	b.n	8016d40 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8016d3e:	2300      	movs	r3, #0
}
 8016d40:	4618      	mov	r0, r3
 8016d42:	3710      	adds	r7, #16
 8016d44:	46bd      	mov	sp, r7
 8016d46:	bd80      	pop	{r7, pc}

08016d48 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8016d48:	b580      	push	{r7, lr}
 8016d4a:	b082      	sub	sp, #8
 8016d4c:	af00      	add	r7, sp, #0
 8016d4e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8016d50:	687b      	ldr	r3, [r7, #4]
 8016d52:	681b      	ldr	r3, [r3, #0]
 8016d54:	f04f 31ff 	mov.w	r1, #4294967295
 8016d58:	4618      	mov	r0, r3
 8016d5a:	f7f2 f983 	bl	8009064 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8016d5e:	bf00      	nop
 8016d60:	3708      	adds	r7, #8
 8016d62:	46bd      	mov	sp, r7
 8016d64:	bd80      	pop	{r7, pc}

08016d66 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8016d66:	b580      	push	{r7, lr}
 8016d68:	b082      	sub	sp, #8
 8016d6a:	af00      	add	r7, sp, #0
 8016d6c:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8016d6e:	687b      	ldr	r3, [r7, #4]
 8016d70:	681b      	ldr	r3, [r3, #0]
 8016d72:	4618      	mov	r0, r3
 8016d74:	f7f2 f9c4 	bl	8009100 <osMutexRelease>
}
 8016d78:	bf00      	nop
 8016d7a:	3708      	adds	r7, #8
 8016d7c:	46bd      	mov	sp, r7
 8016d7e:	bd80      	pop	{r7, pc}

08016d80 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8016d80:	b580      	push	{r7, lr}
 8016d82:	b08c      	sub	sp, #48	; 0x30
 8016d84:	af00      	add	r7, sp, #0
 8016d86:	60f8      	str	r0, [r7, #12]
 8016d88:	60b9      	str	r1, [r7, #8]
 8016d8a:	607a      	str	r2, [r7, #4]
 8016d8c:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8016d8e:	f107 0314 	add.w	r3, r7, #20
 8016d92:	2200      	movs	r2, #0
 8016d94:	601a      	str	r2, [r3, #0]
 8016d96:	605a      	str	r2, [r3, #4]
 8016d98:	609a      	str	r2, [r3, #8]
 8016d9a:	60da      	str	r2, [r3, #12]
 8016d9c:	611a      	str	r2, [r3, #16]
 8016d9e:	615a      	str	r2, [r3, #20]
 8016da0:	619a      	str	r2, [r3, #24]
 8016da2:	68fb      	ldr	r3, [r7, #12]
 8016da4:	617b      	str	r3, [r7, #20]
 8016da6:	68bb      	ldr	r3, [r7, #8]
 8016da8:	61bb      	str	r3, [r7, #24]
 8016daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016dac:	b21b      	sxth	r3, r3
 8016dae:	83bb      	strh	r3, [r7, #28]
 8016db0:	683b      	ldr	r3, [r7, #0]
 8016db2:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8016db4:	f107 0314 	add.w	r3, r7, #20
 8016db8:	6879      	ldr	r1, [r7, #4]
 8016dba:	4618      	mov	r0, r3
 8016dbc:	f7f2 f8d9 	bl	8008f72 <osThreadCreate>
 8016dc0:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8016dc2:	4618      	mov	r0, r3
 8016dc4:	3730      	adds	r7, #48	; 0x30
 8016dc6:	46bd      	mov	sp, r7
 8016dc8:	bd80      	pop	{r7, pc}
	...

08016dcc <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8016dcc:	b580      	push	{r7, lr}
 8016dce:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8016dd0:	4b04      	ldr	r3, [pc, #16]	; (8016de4 <sys_arch_protect+0x18>)
 8016dd2:	681b      	ldr	r3, [r3, #0]
 8016dd4:	f04f 31ff 	mov.w	r1, #4294967295
 8016dd8:	4618      	mov	r0, r3
 8016dda:	f7f2 f943 	bl	8009064 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8016dde:	2301      	movs	r3, #1
}
 8016de0:	4618      	mov	r0, r3
 8016de2:	bd80      	pop	{r7, pc}
 8016de4:	240079c8 	.word	0x240079c8

08016de8 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8016de8:	b580      	push	{r7, lr}
 8016dea:	b082      	sub	sp, #8
 8016dec:	af00      	add	r7, sp, #0
 8016dee:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8016df0:	4b04      	ldr	r3, [pc, #16]	; (8016e04 <sys_arch_unprotect+0x1c>)
 8016df2:	681b      	ldr	r3, [r3, #0]
 8016df4:	4618      	mov	r0, r3
 8016df6:	f7f2 f983 	bl	8009100 <osMutexRelease>
}
 8016dfa:	bf00      	nop
 8016dfc:	3708      	adds	r7, #8
 8016dfe:	46bd      	mov	sp, r7
 8016e00:	bd80      	pop	{r7, pc}
 8016e02:	bf00      	nop
 8016e04:	240079c8 	.word	0x240079c8

08016e08 <__libc_init_array>:
 8016e08:	b570      	push	{r4, r5, r6, lr}
 8016e0a:	4d0d      	ldr	r5, [pc, #52]	; (8016e40 <__libc_init_array+0x38>)
 8016e0c:	4c0d      	ldr	r4, [pc, #52]	; (8016e44 <__libc_init_array+0x3c>)
 8016e0e:	1b64      	subs	r4, r4, r5
 8016e10:	10a4      	asrs	r4, r4, #2
 8016e12:	2600      	movs	r6, #0
 8016e14:	42a6      	cmp	r6, r4
 8016e16:	d109      	bne.n	8016e2c <__libc_init_array+0x24>
 8016e18:	4d0b      	ldr	r5, [pc, #44]	; (8016e48 <__libc_init_array+0x40>)
 8016e1a:	4c0c      	ldr	r4, [pc, #48]	; (8016e4c <__libc_init_array+0x44>)
 8016e1c:	f001 f856 	bl	8017ecc <_init>
 8016e20:	1b64      	subs	r4, r4, r5
 8016e22:	10a4      	asrs	r4, r4, #2
 8016e24:	2600      	movs	r6, #0
 8016e26:	42a6      	cmp	r6, r4
 8016e28:	d105      	bne.n	8016e36 <__libc_init_array+0x2e>
 8016e2a:	bd70      	pop	{r4, r5, r6, pc}
 8016e2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8016e30:	4798      	blx	r3
 8016e32:	3601      	adds	r6, #1
 8016e34:	e7ee      	b.n	8016e14 <__libc_init_array+0xc>
 8016e36:	f855 3b04 	ldr.w	r3, [r5], #4
 8016e3a:	4798      	blx	r3
 8016e3c:	3601      	adds	r6, #1
 8016e3e:	e7f2      	b.n	8016e26 <__libc_init_array+0x1e>
 8016e40:	0801ad50 	.word	0x0801ad50
 8016e44:	0801ad50 	.word	0x0801ad50
 8016e48:	0801ad50 	.word	0x0801ad50
 8016e4c:	0801ad54 	.word	0x0801ad54

08016e50 <memcmp>:
 8016e50:	b530      	push	{r4, r5, lr}
 8016e52:	3901      	subs	r1, #1
 8016e54:	2400      	movs	r4, #0
 8016e56:	42a2      	cmp	r2, r4
 8016e58:	d101      	bne.n	8016e5e <memcmp+0xe>
 8016e5a:	2000      	movs	r0, #0
 8016e5c:	e005      	b.n	8016e6a <memcmp+0x1a>
 8016e5e:	5d03      	ldrb	r3, [r0, r4]
 8016e60:	3401      	adds	r4, #1
 8016e62:	5d0d      	ldrb	r5, [r1, r4]
 8016e64:	42ab      	cmp	r3, r5
 8016e66:	d0f6      	beq.n	8016e56 <memcmp+0x6>
 8016e68:	1b58      	subs	r0, r3, r5
 8016e6a:	bd30      	pop	{r4, r5, pc}

08016e6c <memcpy>:
 8016e6c:	440a      	add	r2, r1
 8016e6e:	4291      	cmp	r1, r2
 8016e70:	f100 33ff 	add.w	r3, r0, #4294967295
 8016e74:	d100      	bne.n	8016e78 <memcpy+0xc>
 8016e76:	4770      	bx	lr
 8016e78:	b510      	push	{r4, lr}
 8016e7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016e7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016e82:	4291      	cmp	r1, r2
 8016e84:	d1f9      	bne.n	8016e7a <memcpy+0xe>
 8016e86:	bd10      	pop	{r4, pc}

08016e88 <memset>:
 8016e88:	4402      	add	r2, r0
 8016e8a:	4603      	mov	r3, r0
 8016e8c:	4293      	cmp	r3, r2
 8016e8e:	d100      	bne.n	8016e92 <memset+0xa>
 8016e90:	4770      	bx	lr
 8016e92:	f803 1b01 	strb.w	r1, [r3], #1
 8016e96:	e7f9      	b.n	8016e8c <memset+0x4>

08016e98 <iprintf>:
 8016e98:	b40f      	push	{r0, r1, r2, r3}
 8016e9a:	4b0a      	ldr	r3, [pc, #40]	; (8016ec4 <iprintf+0x2c>)
 8016e9c:	b513      	push	{r0, r1, r4, lr}
 8016e9e:	681c      	ldr	r4, [r3, #0]
 8016ea0:	b124      	cbz	r4, 8016eac <iprintf+0x14>
 8016ea2:	69a3      	ldr	r3, [r4, #24]
 8016ea4:	b913      	cbnz	r3, 8016eac <iprintf+0x14>
 8016ea6:	4620      	mov	r0, r4
 8016ea8:	f000 f8c4 	bl	8017034 <__sinit>
 8016eac:	ab05      	add	r3, sp, #20
 8016eae:	9a04      	ldr	r2, [sp, #16]
 8016eb0:	68a1      	ldr	r1, [r4, #8]
 8016eb2:	9301      	str	r3, [sp, #4]
 8016eb4:	4620      	mov	r0, r4
 8016eb6:	f000 fa4b 	bl	8017350 <_vfiprintf_r>
 8016eba:	b002      	add	sp, #8
 8016ebc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016ec0:	b004      	add	sp, #16
 8016ec2:	4770      	bx	lr
 8016ec4:	24000034 	.word	0x24000034

08016ec8 <rand>:
 8016ec8:	4b17      	ldr	r3, [pc, #92]	; (8016f28 <rand+0x60>)
 8016eca:	b510      	push	{r4, lr}
 8016ecc:	681c      	ldr	r4, [r3, #0]
 8016ece:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8016ed0:	b9b3      	cbnz	r3, 8016f00 <rand+0x38>
 8016ed2:	2018      	movs	r0, #24
 8016ed4:	f000 f960 	bl	8017198 <malloc>
 8016ed8:	63a0      	str	r0, [r4, #56]	; 0x38
 8016eda:	b928      	cbnz	r0, 8016ee8 <rand+0x20>
 8016edc:	4602      	mov	r2, r0
 8016ede:	4b13      	ldr	r3, [pc, #76]	; (8016f2c <rand+0x64>)
 8016ee0:	4813      	ldr	r0, [pc, #76]	; (8016f30 <rand+0x68>)
 8016ee2:	214e      	movs	r1, #78	; 0x4e
 8016ee4:	f000 f830 	bl	8016f48 <__assert_func>
 8016ee8:	4a12      	ldr	r2, [pc, #72]	; (8016f34 <rand+0x6c>)
 8016eea:	4b13      	ldr	r3, [pc, #76]	; (8016f38 <rand+0x70>)
 8016eec:	e9c0 2300 	strd	r2, r3, [r0]
 8016ef0:	4b12      	ldr	r3, [pc, #72]	; (8016f3c <rand+0x74>)
 8016ef2:	6083      	str	r3, [r0, #8]
 8016ef4:	230b      	movs	r3, #11
 8016ef6:	8183      	strh	r3, [r0, #12]
 8016ef8:	2201      	movs	r2, #1
 8016efa:	2300      	movs	r3, #0
 8016efc:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8016f00:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8016f02:	480f      	ldr	r0, [pc, #60]	; (8016f40 <rand+0x78>)
 8016f04:	690a      	ldr	r2, [r1, #16]
 8016f06:	694b      	ldr	r3, [r1, #20]
 8016f08:	4c0e      	ldr	r4, [pc, #56]	; (8016f44 <rand+0x7c>)
 8016f0a:	4350      	muls	r0, r2
 8016f0c:	fb04 0003 	mla	r0, r4, r3, r0
 8016f10:	fba2 3404 	umull	r3, r4, r2, r4
 8016f14:	1c5a      	adds	r2, r3, #1
 8016f16:	4404      	add	r4, r0
 8016f18:	f144 0000 	adc.w	r0, r4, #0
 8016f1c:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8016f20:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8016f24:	bd10      	pop	{r4, pc}
 8016f26:	bf00      	nop
 8016f28:	24000034 	.word	0x24000034
 8016f2c:	0801ac00 	.word	0x0801ac00
 8016f30:	0801ac17 	.word	0x0801ac17
 8016f34:	abcd330e 	.word	0xabcd330e
 8016f38:	e66d1234 	.word	0xe66d1234
 8016f3c:	0005deec 	.word	0x0005deec
 8016f40:	5851f42d 	.word	0x5851f42d
 8016f44:	4c957f2d 	.word	0x4c957f2d

08016f48 <__assert_func>:
 8016f48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016f4a:	4614      	mov	r4, r2
 8016f4c:	461a      	mov	r2, r3
 8016f4e:	4b09      	ldr	r3, [pc, #36]	; (8016f74 <__assert_func+0x2c>)
 8016f50:	681b      	ldr	r3, [r3, #0]
 8016f52:	4605      	mov	r5, r0
 8016f54:	68d8      	ldr	r0, [r3, #12]
 8016f56:	b14c      	cbz	r4, 8016f6c <__assert_func+0x24>
 8016f58:	4b07      	ldr	r3, [pc, #28]	; (8016f78 <__assert_func+0x30>)
 8016f5a:	9100      	str	r1, [sp, #0]
 8016f5c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016f60:	4906      	ldr	r1, [pc, #24]	; (8016f7c <__assert_func+0x34>)
 8016f62:	462b      	mov	r3, r5
 8016f64:	f000 f8e4 	bl	8017130 <fiprintf>
 8016f68:	f000 fddc 	bl	8017b24 <abort>
 8016f6c:	4b04      	ldr	r3, [pc, #16]	; (8016f80 <__assert_func+0x38>)
 8016f6e:	461c      	mov	r4, r3
 8016f70:	e7f3      	b.n	8016f5a <__assert_func+0x12>
 8016f72:	bf00      	nop
 8016f74:	24000034 	.word	0x24000034
 8016f78:	0801ac76 	.word	0x0801ac76
 8016f7c:	0801ac83 	.word	0x0801ac83
 8016f80:	0801acb1 	.word	0x0801acb1

08016f84 <std>:
 8016f84:	2300      	movs	r3, #0
 8016f86:	b510      	push	{r4, lr}
 8016f88:	4604      	mov	r4, r0
 8016f8a:	e9c0 3300 	strd	r3, r3, [r0]
 8016f8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016f92:	6083      	str	r3, [r0, #8]
 8016f94:	8181      	strh	r1, [r0, #12]
 8016f96:	6643      	str	r3, [r0, #100]	; 0x64
 8016f98:	81c2      	strh	r2, [r0, #14]
 8016f9a:	6183      	str	r3, [r0, #24]
 8016f9c:	4619      	mov	r1, r3
 8016f9e:	2208      	movs	r2, #8
 8016fa0:	305c      	adds	r0, #92	; 0x5c
 8016fa2:	f7ff ff71 	bl	8016e88 <memset>
 8016fa6:	4b05      	ldr	r3, [pc, #20]	; (8016fbc <std+0x38>)
 8016fa8:	6263      	str	r3, [r4, #36]	; 0x24
 8016faa:	4b05      	ldr	r3, [pc, #20]	; (8016fc0 <std+0x3c>)
 8016fac:	62a3      	str	r3, [r4, #40]	; 0x28
 8016fae:	4b05      	ldr	r3, [pc, #20]	; (8016fc4 <std+0x40>)
 8016fb0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8016fb2:	4b05      	ldr	r3, [pc, #20]	; (8016fc8 <std+0x44>)
 8016fb4:	6224      	str	r4, [r4, #32]
 8016fb6:	6323      	str	r3, [r4, #48]	; 0x30
 8016fb8:	bd10      	pop	{r4, pc}
 8016fba:	bf00      	nop
 8016fbc:	080178f9 	.word	0x080178f9
 8016fc0:	0801791b 	.word	0x0801791b
 8016fc4:	08017953 	.word	0x08017953
 8016fc8:	08017977 	.word	0x08017977

08016fcc <_cleanup_r>:
 8016fcc:	4901      	ldr	r1, [pc, #4]	; (8016fd4 <_cleanup_r+0x8>)
 8016fce:	f000 b8c1 	b.w	8017154 <_fwalk_reent>
 8016fd2:	bf00      	nop
 8016fd4:	08017c61 	.word	0x08017c61

08016fd8 <__sfmoreglue>:
 8016fd8:	b570      	push	{r4, r5, r6, lr}
 8016fda:	1e4a      	subs	r2, r1, #1
 8016fdc:	2568      	movs	r5, #104	; 0x68
 8016fde:	4355      	muls	r5, r2
 8016fe0:	460e      	mov	r6, r1
 8016fe2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8016fe6:	f000 f92f 	bl	8017248 <_malloc_r>
 8016fea:	4604      	mov	r4, r0
 8016fec:	b140      	cbz	r0, 8017000 <__sfmoreglue+0x28>
 8016fee:	2100      	movs	r1, #0
 8016ff0:	e9c0 1600 	strd	r1, r6, [r0]
 8016ff4:	300c      	adds	r0, #12
 8016ff6:	60a0      	str	r0, [r4, #8]
 8016ff8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8016ffc:	f7ff ff44 	bl	8016e88 <memset>
 8017000:	4620      	mov	r0, r4
 8017002:	bd70      	pop	{r4, r5, r6, pc}

08017004 <__sfp_lock_acquire>:
 8017004:	4801      	ldr	r0, [pc, #4]	; (801700c <__sfp_lock_acquire+0x8>)
 8017006:	f000 b8c5 	b.w	8017194 <__retarget_lock_acquire_recursive>
 801700a:	bf00      	nop
 801700c:	240079d4 	.word	0x240079d4

08017010 <__sfp_lock_release>:
 8017010:	4801      	ldr	r0, [pc, #4]	; (8017018 <__sfp_lock_release+0x8>)
 8017012:	f000 b8c0 	b.w	8017196 <__retarget_lock_release_recursive>
 8017016:	bf00      	nop
 8017018:	240079d4 	.word	0x240079d4

0801701c <__sinit_lock_acquire>:
 801701c:	4801      	ldr	r0, [pc, #4]	; (8017024 <__sinit_lock_acquire+0x8>)
 801701e:	f000 b8b9 	b.w	8017194 <__retarget_lock_acquire_recursive>
 8017022:	bf00      	nop
 8017024:	240079cf 	.word	0x240079cf

08017028 <__sinit_lock_release>:
 8017028:	4801      	ldr	r0, [pc, #4]	; (8017030 <__sinit_lock_release+0x8>)
 801702a:	f000 b8b4 	b.w	8017196 <__retarget_lock_release_recursive>
 801702e:	bf00      	nop
 8017030:	240079cf 	.word	0x240079cf

08017034 <__sinit>:
 8017034:	b510      	push	{r4, lr}
 8017036:	4604      	mov	r4, r0
 8017038:	f7ff fff0 	bl	801701c <__sinit_lock_acquire>
 801703c:	69a3      	ldr	r3, [r4, #24]
 801703e:	b11b      	cbz	r3, 8017048 <__sinit+0x14>
 8017040:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017044:	f7ff bff0 	b.w	8017028 <__sinit_lock_release>
 8017048:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801704c:	6523      	str	r3, [r4, #80]	; 0x50
 801704e:	4b13      	ldr	r3, [pc, #76]	; (801709c <__sinit+0x68>)
 8017050:	4a13      	ldr	r2, [pc, #76]	; (80170a0 <__sinit+0x6c>)
 8017052:	681b      	ldr	r3, [r3, #0]
 8017054:	62a2      	str	r2, [r4, #40]	; 0x28
 8017056:	42a3      	cmp	r3, r4
 8017058:	bf04      	itt	eq
 801705a:	2301      	moveq	r3, #1
 801705c:	61a3      	streq	r3, [r4, #24]
 801705e:	4620      	mov	r0, r4
 8017060:	f000 f820 	bl	80170a4 <__sfp>
 8017064:	6060      	str	r0, [r4, #4]
 8017066:	4620      	mov	r0, r4
 8017068:	f000 f81c 	bl	80170a4 <__sfp>
 801706c:	60a0      	str	r0, [r4, #8]
 801706e:	4620      	mov	r0, r4
 8017070:	f000 f818 	bl	80170a4 <__sfp>
 8017074:	2200      	movs	r2, #0
 8017076:	60e0      	str	r0, [r4, #12]
 8017078:	2104      	movs	r1, #4
 801707a:	6860      	ldr	r0, [r4, #4]
 801707c:	f7ff ff82 	bl	8016f84 <std>
 8017080:	68a0      	ldr	r0, [r4, #8]
 8017082:	2201      	movs	r2, #1
 8017084:	2109      	movs	r1, #9
 8017086:	f7ff ff7d 	bl	8016f84 <std>
 801708a:	68e0      	ldr	r0, [r4, #12]
 801708c:	2202      	movs	r2, #2
 801708e:	2112      	movs	r1, #18
 8017090:	f7ff ff78 	bl	8016f84 <std>
 8017094:	2301      	movs	r3, #1
 8017096:	61a3      	str	r3, [r4, #24]
 8017098:	e7d2      	b.n	8017040 <__sinit+0xc>
 801709a:	bf00      	nop
 801709c:	0801abfc 	.word	0x0801abfc
 80170a0:	08016fcd 	.word	0x08016fcd

080170a4 <__sfp>:
 80170a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80170a6:	4607      	mov	r7, r0
 80170a8:	f7ff ffac 	bl	8017004 <__sfp_lock_acquire>
 80170ac:	4b1e      	ldr	r3, [pc, #120]	; (8017128 <__sfp+0x84>)
 80170ae:	681e      	ldr	r6, [r3, #0]
 80170b0:	69b3      	ldr	r3, [r6, #24]
 80170b2:	b913      	cbnz	r3, 80170ba <__sfp+0x16>
 80170b4:	4630      	mov	r0, r6
 80170b6:	f7ff ffbd 	bl	8017034 <__sinit>
 80170ba:	3648      	adds	r6, #72	; 0x48
 80170bc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80170c0:	3b01      	subs	r3, #1
 80170c2:	d503      	bpl.n	80170cc <__sfp+0x28>
 80170c4:	6833      	ldr	r3, [r6, #0]
 80170c6:	b30b      	cbz	r3, 801710c <__sfp+0x68>
 80170c8:	6836      	ldr	r6, [r6, #0]
 80170ca:	e7f7      	b.n	80170bc <__sfp+0x18>
 80170cc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80170d0:	b9d5      	cbnz	r5, 8017108 <__sfp+0x64>
 80170d2:	4b16      	ldr	r3, [pc, #88]	; (801712c <__sfp+0x88>)
 80170d4:	60e3      	str	r3, [r4, #12]
 80170d6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80170da:	6665      	str	r5, [r4, #100]	; 0x64
 80170dc:	f000 f859 	bl	8017192 <__retarget_lock_init_recursive>
 80170e0:	f7ff ff96 	bl	8017010 <__sfp_lock_release>
 80170e4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80170e8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80170ec:	6025      	str	r5, [r4, #0]
 80170ee:	61a5      	str	r5, [r4, #24]
 80170f0:	2208      	movs	r2, #8
 80170f2:	4629      	mov	r1, r5
 80170f4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80170f8:	f7ff fec6 	bl	8016e88 <memset>
 80170fc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8017100:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8017104:	4620      	mov	r0, r4
 8017106:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017108:	3468      	adds	r4, #104	; 0x68
 801710a:	e7d9      	b.n	80170c0 <__sfp+0x1c>
 801710c:	2104      	movs	r1, #4
 801710e:	4638      	mov	r0, r7
 8017110:	f7ff ff62 	bl	8016fd8 <__sfmoreglue>
 8017114:	4604      	mov	r4, r0
 8017116:	6030      	str	r0, [r6, #0]
 8017118:	2800      	cmp	r0, #0
 801711a:	d1d5      	bne.n	80170c8 <__sfp+0x24>
 801711c:	f7ff ff78 	bl	8017010 <__sfp_lock_release>
 8017120:	230c      	movs	r3, #12
 8017122:	603b      	str	r3, [r7, #0]
 8017124:	e7ee      	b.n	8017104 <__sfp+0x60>
 8017126:	bf00      	nop
 8017128:	0801abfc 	.word	0x0801abfc
 801712c:	ffff0001 	.word	0xffff0001

08017130 <fiprintf>:
 8017130:	b40e      	push	{r1, r2, r3}
 8017132:	b503      	push	{r0, r1, lr}
 8017134:	4601      	mov	r1, r0
 8017136:	ab03      	add	r3, sp, #12
 8017138:	4805      	ldr	r0, [pc, #20]	; (8017150 <fiprintf+0x20>)
 801713a:	f853 2b04 	ldr.w	r2, [r3], #4
 801713e:	6800      	ldr	r0, [r0, #0]
 8017140:	9301      	str	r3, [sp, #4]
 8017142:	f000 f905 	bl	8017350 <_vfiprintf_r>
 8017146:	b002      	add	sp, #8
 8017148:	f85d eb04 	ldr.w	lr, [sp], #4
 801714c:	b003      	add	sp, #12
 801714e:	4770      	bx	lr
 8017150:	24000034 	.word	0x24000034

08017154 <_fwalk_reent>:
 8017154:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017158:	4606      	mov	r6, r0
 801715a:	4688      	mov	r8, r1
 801715c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8017160:	2700      	movs	r7, #0
 8017162:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8017166:	f1b9 0901 	subs.w	r9, r9, #1
 801716a:	d505      	bpl.n	8017178 <_fwalk_reent+0x24>
 801716c:	6824      	ldr	r4, [r4, #0]
 801716e:	2c00      	cmp	r4, #0
 8017170:	d1f7      	bne.n	8017162 <_fwalk_reent+0xe>
 8017172:	4638      	mov	r0, r7
 8017174:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017178:	89ab      	ldrh	r3, [r5, #12]
 801717a:	2b01      	cmp	r3, #1
 801717c:	d907      	bls.n	801718e <_fwalk_reent+0x3a>
 801717e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017182:	3301      	adds	r3, #1
 8017184:	d003      	beq.n	801718e <_fwalk_reent+0x3a>
 8017186:	4629      	mov	r1, r5
 8017188:	4630      	mov	r0, r6
 801718a:	47c0      	blx	r8
 801718c:	4307      	orrs	r7, r0
 801718e:	3568      	adds	r5, #104	; 0x68
 8017190:	e7e9      	b.n	8017166 <_fwalk_reent+0x12>

08017192 <__retarget_lock_init_recursive>:
 8017192:	4770      	bx	lr

08017194 <__retarget_lock_acquire_recursive>:
 8017194:	4770      	bx	lr

08017196 <__retarget_lock_release_recursive>:
 8017196:	4770      	bx	lr

08017198 <malloc>:
 8017198:	4b02      	ldr	r3, [pc, #8]	; (80171a4 <malloc+0xc>)
 801719a:	4601      	mov	r1, r0
 801719c:	6818      	ldr	r0, [r3, #0]
 801719e:	f000 b853 	b.w	8017248 <_malloc_r>
 80171a2:	bf00      	nop
 80171a4:	24000034 	.word	0x24000034

080171a8 <_free_r>:
 80171a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80171aa:	2900      	cmp	r1, #0
 80171ac:	d048      	beq.n	8017240 <_free_r+0x98>
 80171ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80171b2:	9001      	str	r0, [sp, #4]
 80171b4:	2b00      	cmp	r3, #0
 80171b6:	f1a1 0404 	sub.w	r4, r1, #4
 80171ba:	bfb8      	it	lt
 80171bc:	18e4      	addlt	r4, r4, r3
 80171be:	f000 fe01 	bl	8017dc4 <__malloc_lock>
 80171c2:	4a20      	ldr	r2, [pc, #128]	; (8017244 <_free_r+0x9c>)
 80171c4:	9801      	ldr	r0, [sp, #4]
 80171c6:	6813      	ldr	r3, [r2, #0]
 80171c8:	4615      	mov	r5, r2
 80171ca:	b933      	cbnz	r3, 80171da <_free_r+0x32>
 80171cc:	6063      	str	r3, [r4, #4]
 80171ce:	6014      	str	r4, [r2, #0]
 80171d0:	b003      	add	sp, #12
 80171d2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80171d6:	f000 bdfb 	b.w	8017dd0 <__malloc_unlock>
 80171da:	42a3      	cmp	r3, r4
 80171dc:	d90b      	bls.n	80171f6 <_free_r+0x4e>
 80171de:	6821      	ldr	r1, [r4, #0]
 80171e0:	1862      	adds	r2, r4, r1
 80171e2:	4293      	cmp	r3, r2
 80171e4:	bf04      	itt	eq
 80171e6:	681a      	ldreq	r2, [r3, #0]
 80171e8:	685b      	ldreq	r3, [r3, #4]
 80171ea:	6063      	str	r3, [r4, #4]
 80171ec:	bf04      	itt	eq
 80171ee:	1852      	addeq	r2, r2, r1
 80171f0:	6022      	streq	r2, [r4, #0]
 80171f2:	602c      	str	r4, [r5, #0]
 80171f4:	e7ec      	b.n	80171d0 <_free_r+0x28>
 80171f6:	461a      	mov	r2, r3
 80171f8:	685b      	ldr	r3, [r3, #4]
 80171fa:	b10b      	cbz	r3, 8017200 <_free_r+0x58>
 80171fc:	42a3      	cmp	r3, r4
 80171fe:	d9fa      	bls.n	80171f6 <_free_r+0x4e>
 8017200:	6811      	ldr	r1, [r2, #0]
 8017202:	1855      	adds	r5, r2, r1
 8017204:	42a5      	cmp	r5, r4
 8017206:	d10b      	bne.n	8017220 <_free_r+0x78>
 8017208:	6824      	ldr	r4, [r4, #0]
 801720a:	4421      	add	r1, r4
 801720c:	1854      	adds	r4, r2, r1
 801720e:	42a3      	cmp	r3, r4
 8017210:	6011      	str	r1, [r2, #0]
 8017212:	d1dd      	bne.n	80171d0 <_free_r+0x28>
 8017214:	681c      	ldr	r4, [r3, #0]
 8017216:	685b      	ldr	r3, [r3, #4]
 8017218:	6053      	str	r3, [r2, #4]
 801721a:	4421      	add	r1, r4
 801721c:	6011      	str	r1, [r2, #0]
 801721e:	e7d7      	b.n	80171d0 <_free_r+0x28>
 8017220:	d902      	bls.n	8017228 <_free_r+0x80>
 8017222:	230c      	movs	r3, #12
 8017224:	6003      	str	r3, [r0, #0]
 8017226:	e7d3      	b.n	80171d0 <_free_r+0x28>
 8017228:	6825      	ldr	r5, [r4, #0]
 801722a:	1961      	adds	r1, r4, r5
 801722c:	428b      	cmp	r3, r1
 801722e:	bf04      	itt	eq
 8017230:	6819      	ldreq	r1, [r3, #0]
 8017232:	685b      	ldreq	r3, [r3, #4]
 8017234:	6063      	str	r3, [r4, #4]
 8017236:	bf04      	itt	eq
 8017238:	1949      	addeq	r1, r1, r5
 801723a:	6021      	streq	r1, [r4, #0]
 801723c:	6054      	str	r4, [r2, #4]
 801723e:	e7c7      	b.n	80171d0 <_free_r+0x28>
 8017240:	b003      	add	sp, #12
 8017242:	bd30      	pop	{r4, r5, pc}
 8017244:	240041fc 	.word	0x240041fc

08017248 <_malloc_r>:
 8017248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801724a:	1ccd      	adds	r5, r1, #3
 801724c:	f025 0503 	bic.w	r5, r5, #3
 8017250:	3508      	adds	r5, #8
 8017252:	2d0c      	cmp	r5, #12
 8017254:	bf38      	it	cc
 8017256:	250c      	movcc	r5, #12
 8017258:	2d00      	cmp	r5, #0
 801725a:	4606      	mov	r6, r0
 801725c:	db01      	blt.n	8017262 <_malloc_r+0x1a>
 801725e:	42a9      	cmp	r1, r5
 8017260:	d903      	bls.n	801726a <_malloc_r+0x22>
 8017262:	230c      	movs	r3, #12
 8017264:	6033      	str	r3, [r6, #0]
 8017266:	2000      	movs	r0, #0
 8017268:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801726a:	f000 fdab 	bl	8017dc4 <__malloc_lock>
 801726e:	4921      	ldr	r1, [pc, #132]	; (80172f4 <_malloc_r+0xac>)
 8017270:	680a      	ldr	r2, [r1, #0]
 8017272:	4614      	mov	r4, r2
 8017274:	b99c      	cbnz	r4, 801729e <_malloc_r+0x56>
 8017276:	4f20      	ldr	r7, [pc, #128]	; (80172f8 <_malloc_r+0xb0>)
 8017278:	683b      	ldr	r3, [r7, #0]
 801727a:	b923      	cbnz	r3, 8017286 <_malloc_r+0x3e>
 801727c:	4621      	mov	r1, r4
 801727e:	4630      	mov	r0, r6
 8017280:	f000 fb2a 	bl	80178d8 <_sbrk_r>
 8017284:	6038      	str	r0, [r7, #0]
 8017286:	4629      	mov	r1, r5
 8017288:	4630      	mov	r0, r6
 801728a:	f000 fb25 	bl	80178d8 <_sbrk_r>
 801728e:	1c43      	adds	r3, r0, #1
 8017290:	d123      	bne.n	80172da <_malloc_r+0x92>
 8017292:	230c      	movs	r3, #12
 8017294:	6033      	str	r3, [r6, #0]
 8017296:	4630      	mov	r0, r6
 8017298:	f000 fd9a 	bl	8017dd0 <__malloc_unlock>
 801729c:	e7e3      	b.n	8017266 <_malloc_r+0x1e>
 801729e:	6823      	ldr	r3, [r4, #0]
 80172a0:	1b5b      	subs	r3, r3, r5
 80172a2:	d417      	bmi.n	80172d4 <_malloc_r+0x8c>
 80172a4:	2b0b      	cmp	r3, #11
 80172a6:	d903      	bls.n	80172b0 <_malloc_r+0x68>
 80172a8:	6023      	str	r3, [r4, #0]
 80172aa:	441c      	add	r4, r3
 80172ac:	6025      	str	r5, [r4, #0]
 80172ae:	e004      	b.n	80172ba <_malloc_r+0x72>
 80172b0:	6863      	ldr	r3, [r4, #4]
 80172b2:	42a2      	cmp	r2, r4
 80172b4:	bf0c      	ite	eq
 80172b6:	600b      	streq	r3, [r1, #0]
 80172b8:	6053      	strne	r3, [r2, #4]
 80172ba:	4630      	mov	r0, r6
 80172bc:	f000 fd88 	bl	8017dd0 <__malloc_unlock>
 80172c0:	f104 000b 	add.w	r0, r4, #11
 80172c4:	1d23      	adds	r3, r4, #4
 80172c6:	f020 0007 	bic.w	r0, r0, #7
 80172ca:	1ac2      	subs	r2, r0, r3
 80172cc:	d0cc      	beq.n	8017268 <_malloc_r+0x20>
 80172ce:	1a1b      	subs	r3, r3, r0
 80172d0:	50a3      	str	r3, [r4, r2]
 80172d2:	e7c9      	b.n	8017268 <_malloc_r+0x20>
 80172d4:	4622      	mov	r2, r4
 80172d6:	6864      	ldr	r4, [r4, #4]
 80172d8:	e7cc      	b.n	8017274 <_malloc_r+0x2c>
 80172da:	1cc4      	adds	r4, r0, #3
 80172dc:	f024 0403 	bic.w	r4, r4, #3
 80172e0:	42a0      	cmp	r0, r4
 80172e2:	d0e3      	beq.n	80172ac <_malloc_r+0x64>
 80172e4:	1a21      	subs	r1, r4, r0
 80172e6:	4630      	mov	r0, r6
 80172e8:	f000 faf6 	bl	80178d8 <_sbrk_r>
 80172ec:	3001      	adds	r0, #1
 80172ee:	d1dd      	bne.n	80172ac <_malloc_r+0x64>
 80172f0:	e7cf      	b.n	8017292 <_malloc_r+0x4a>
 80172f2:	bf00      	nop
 80172f4:	240041fc 	.word	0x240041fc
 80172f8:	24004200 	.word	0x24004200

080172fc <__sfputc_r>:
 80172fc:	6893      	ldr	r3, [r2, #8]
 80172fe:	3b01      	subs	r3, #1
 8017300:	2b00      	cmp	r3, #0
 8017302:	b410      	push	{r4}
 8017304:	6093      	str	r3, [r2, #8]
 8017306:	da08      	bge.n	801731a <__sfputc_r+0x1e>
 8017308:	6994      	ldr	r4, [r2, #24]
 801730a:	42a3      	cmp	r3, r4
 801730c:	db01      	blt.n	8017312 <__sfputc_r+0x16>
 801730e:	290a      	cmp	r1, #10
 8017310:	d103      	bne.n	801731a <__sfputc_r+0x1e>
 8017312:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017316:	f000 bb33 	b.w	8017980 <__swbuf_r>
 801731a:	6813      	ldr	r3, [r2, #0]
 801731c:	1c58      	adds	r0, r3, #1
 801731e:	6010      	str	r0, [r2, #0]
 8017320:	7019      	strb	r1, [r3, #0]
 8017322:	4608      	mov	r0, r1
 8017324:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017328:	4770      	bx	lr

0801732a <__sfputs_r>:
 801732a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801732c:	4606      	mov	r6, r0
 801732e:	460f      	mov	r7, r1
 8017330:	4614      	mov	r4, r2
 8017332:	18d5      	adds	r5, r2, r3
 8017334:	42ac      	cmp	r4, r5
 8017336:	d101      	bne.n	801733c <__sfputs_r+0x12>
 8017338:	2000      	movs	r0, #0
 801733a:	e007      	b.n	801734c <__sfputs_r+0x22>
 801733c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017340:	463a      	mov	r2, r7
 8017342:	4630      	mov	r0, r6
 8017344:	f7ff ffda 	bl	80172fc <__sfputc_r>
 8017348:	1c43      	adds	r3, r0, #1
 801734a:	d1f3      	bne.n	8017334 <__sfputs_r+0xa>
 801734c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017350 <_vfiprintf_r>:
 8017350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017354:	460d      	mov	r5, r1
 8017356:	b09d      	sub	sp, #116	; 0x74
 8017358:	4614      	mov	r4, r2
 801735a:	4698      	mov	r8, r3
 801735c:	4606      	mov	r6, r0
 801735e:	b118      	cbz	r0, 8017368 <_vfiprintf_r+0x18>
 8017360:	6983      	ldr	r3, [r0, #24]
 8017362:	b90b      	cbnz	r3, 8017368 <_vfiprintf_r+0x18>
 8017364:	f7ff fe66 	bl	8017034 <__sinit>
 8017368:	4b89      	ldr	r3, [pc, #548]	; (8017590 <_vfiprintf_r+0x240>)
 801736a:	429d      	cmp	r5, r3
 801736c:	d11b      	bne.n	80173a6 <_vfiprintf_r+0x56>
 801736e:	6875      	ldr	r5, [r6, #4]
 8017370:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017372:	07d9      	lsls	r1, r3, #31
 8017374:	d405      	bmi.n	8017382 <_vfiprintf_r+0x32>
 8017376:	89ab      	ldrh	r3, [r5, #12]
 8017378:	059a      	lsls	r2, r3, #22
 801737a:	d402      	bmi.n	8017382 <_vfiprintf_r+0x32>
 801737c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801737e:	f7ff ff09 	bl	8017194 <__retarget_lock_acquire_recursive>
 8017382:	89ab      	ldrh	r3, [r5, #12]
 8017384:	071b      	lsls	r3, r3, #28
 8017386:	d501      	bpl.n	801738c <_vfiprintf_r+0x3c>
 8017388:	692b      	ldr	r3, [r5, #16]
 801738a:	b9eb      	cbnz	r3, 80173c8 <_vfiprintf_r+0x78>
 801738c:	4629      	mov	r1, r5
 801738e:	4630      	mov	r0, r6
 8017390:	f000 fb5a 	bl	8017a48 <__swsetup_r>
 8017394:	b1c0      	cbz	r0, 80173c8 <_vfiprintf_r+0x78>
 8017396:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017398:	07dc      	lsls	r4, r3, #31
 801739a:	d50e      	bpl.n	80173ba <_vfiprintf_r+0x6a>
 801739c:	f04f 30ff 	mov.w	r0, #4294967295
 80173a0:	b01d      	add	sp, #116	; 0x74
 80173a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80173a6:	4b7b      	ldr	r3, [pc, #492]	; (8017594 <_vfiprintf_r+0x244>)
 80173a8:	429d      	cmp	r5, r3
 80173aa:	d101      	bne.n	80173b0 <_vfiprintf_r+0x60>
 80173ac:	68b5      	ldr	r5, [r6, #8]
 80173ae:	e7df      	b.n	8017370 <_vfiprintf_r+0x20>
 80173b0:	4b79      	ldr	r3, [pc, #484]	; (8017598 <_vfiprintf_r+0x248>)
 80173b2:	429d      	cmp	r5, r3
 80173b4:	bf08      	it	eq
 80173b6:	68f5      	ldreq	r5, [r6, #12]
 80173b8:	e7da      	b.n	8017370 <_vfiprintf_r+0x20>
 80173ba:	89ab      	ldrh	r3, [r5, #12]
 80173bc:	0598      	lsls	r0, r3, #22
 80173be:	d4ed      	bmi.n	801739c <_vfiprintf_r+0x4c>
 80173c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80173c2:	f7ff fee8 	bl	8017196 <__retarget_lock_release_recursive>
 80173c6:	e7e9      	b.n	801739c <_vfiprintf_r+0x4c>
 80173c8:	2300      	movs	r3, #0
 80173ca:	9309      	str	r3, [sp, #36]	; 0x24
 80173cc:	2320      	movs	r3, #32
 80173ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80173d2:	f8cd 800c 	str.w	r8, [sp, #12]
 80173d6:	2330      	movs	r3, #48	; 0x30
 80173d8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801759c <_vfiprintf_r+0x24c>
 80173dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80173e0:	f04f 0901 	mov.w	r9, #1
 80173e4:	4623      	mov	r3, r4
 80173e6:	469a      	mov	sl, r3
 80173e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80173ec:	b10a      	cbz	r2, 80173f2 <_vfiprintf_r+0xa2>
 80173ee:	2a25      	cmp	r2, #37	; 0x25
 80173f0:	d1f9      	bne.n	80173e6 <_vfiprintf_r+0x96>
 80173f2:	ebba 0b04 	subs.w	fp, sl, r4
 80173f6:	d00b      	beq.n	8017410 <_vfiprintf_r+0xc0>
 80173f8:	465b      	mov	r3, fp
 80173fa:	4622      	mov	r2, r4
 80173fc:	4629      	mov	r1, r5
 80173fe:	4630      	mov	r0, r6
 8017400:	f7ff ff93 	bl	801732a <__sfputs_r>
 8017404:	3001      	adds	r0, #1
 8017406:	f000 80aa 	beq.w	801755e <_vfiprintf_r+0x20e>
 801740a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801740c:	445a      	add	r2, fp
 801740e:	9209      	str	r2, [sp, #36]	; 0x24
 8017410:	f89a 3000 	ldrb.w	r3, [sl]
 8017414:	2b00      	cmp	r3, #0
 8017416:	f000 80a2 	beq.w	801755e <_vfiprintf_r+0x20e>
 801741a:	2300      	movs	r3, #0
 801741c:	f04f 32ff 	mov.w	r2, #4294967295
 8017420:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017424:	f10a 0a01 	add.w	sl, sl, #1
 8017428:	9304      	str	r3, [sp, #16]
 801742a:	9307      	str	r3, [sp, #28]
 801742c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017430:	931a      	str	r3, [sp, #104]	; 0x68
 8017432:	4654      	mov	r4, sl
 8017434:	2205      	movs	r2, #5
 8017436:	f814 1b01 	ldrb.w	r1, [r4], #1
 801743a:	4858      	ldr	r0, [pc, #352]	; (801759c <_vfiprintf_r+0x24c>)
 801743c:	f7e8 ff50 	bl	80002e0 <memchr>
 8017440:	9a04      	ldr	r2, [sp, #16]
 8017442:	b9d8      	cbnz	r0, 801747c <_vfiprintf_r+0x12c>
 8017444:	06d1      	lsls	r1, r2, #27
 8017446:	bf44      	itt	mi
 8017448:	2320      	movmi	r3, #32
 801744a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801744e:	0713      	lsls	r3, r2, #28
 8017450:	bf44      	itt	mi
 8017452:	232b      	movmi	r3, #43	; 0x2b
 8017454:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017458:	f89a 3000 	ldrb.w	r3, [sl]
 801745c:	2b2a      	cmp	r3, #42	; 0x2a
 801745e:	d015      	beq.n	801748c <_vfiprintf_r+0x13c>
 8017460:	9a07      	ldr	r2, [sp, #28]
 8017462:	4654      	mov	r4, sl
 8017464:	2000      	movs	r0, #0
 8017466:	f04f 0c0a 	mov.w	ip, #10
 801746a:	4621      	mov	r1, r4
 801746c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017470:	3b30      	subs	r3, #48	; 0x30
 8017472:	2b09      	cmp	r3, #9
 8017474:	d94e      	bls.n	8017514 <_vfiprintf_r+0x1c4>
 8017476:	b1b0      	cbz	r0, 80174a6 <_vfiprintf_r+0x156>
 8017478:	9207      	str	r2, [sp, #28]
 801747a:	e014      	b.n	80174a6 <_vfiprintf_r+0x156>
 801747c:	eba0 0308 	sub.w	r3, r0, r8
 8017480:	fa09 f303 	lsl.w	r3, r9, r3
 8017484:	4313      	orrs	r3, r2
 8017486:	9304      	str	r3, [sp, #16]
 8017488:	46a2      	mov	sl, r4
 801748a:	e7d2      	b.n	8017432 <_vfiprintf_r+0xe2>
 801748c:	9b03      	ldr	r3, [sp, #12]
 801748e:	1d19      	adds	r1, r3, #4
 8017490:	681b      	ldr	r3, [r3, #0]
 8017492:	9103      	str	r1, [sp, #12]
 8017494:	2b00      	cmp	r3, #0
 8017496:	bfbb      	ittet	lt
 8017498:	425b      	neglt	r3, r3
 801749a:	f042 0202 	orrlt.w	r2, r2, #2
 801749e:	9307      	strge	r3, [sp, #28]
 80174a0:	9307      	strlt	r3, [sp, #28]
 80174a2:	bfb8      	it	lt
 80174a4:	9204      	strlt	r2, [sp, #16]
 80174a6:	7823      	ldrb	r3, [r4, #0]
 80174a8:	2b2e      	cmp	r3, #46	; 0x2e
 80174aa:	d10c      	bne.n	80174c6 <_vfiprintf_r+0x176>
 80174ac:	7863      	ldrb	r3, [r4, #1]
 80174ae:	2b2a      	cmp	r3, #42	; 0x2a
 80174b0:	d135      	bne.n	801751e <_vfiprintf_r+0x1ce>
 80174b2:	9b03      	ldr	r3, [sp, #12]
 80174b4:	1d1a      	adds	r2, r3, #4
 80174b6:	681b      	ldr	r3, [r3, #0]
 80174b8:	9203      	str	r2, [sp, #12]
 80174ba:	2b00      	cmp	r3, #0
 80174bc:	bfb8      	it	lt
 80174be:	f04f 33ff 	movlt.w	r3, #4294967295
 80174c2:	3402      	adds	r4, #2
 80174c4:	9305      	str	r3, [sp, #20]
 80174c6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80175ac <_vfiprintf_r+0x25c>
 80174ca:	7821      	ldrb	r1, [r4, #0]
 80174cc:	2203      	movs	r2, #3
 80174ce:	4650      	mov	r0, sl
 80174d0:	f7e8 ff06 	bl	80002e0 <memchr>
 80174d4:	b140      	cbz	r0, 80174e8 <_vfiprintf_r+0x198>
 80174d6:	2340      	movs	r3, #64	; 0x40
 80174d8:	eba0 000a 	sub.w	r0, r0, sl
 80174dc:	fa03 f000 	lsl.w	r0, r3, r0
 80174e0:	9b04      	ldr	r3, [sp, #16]
 80174e2:	4303      	orrs	r3, r0
 80174e4:	3401      	adds	r4, #1
 80174e6:	9304      	str	r3, [sp, #16]
 80174e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80174ec:	482c      	ldr	r0, [pc, #176]	; (80175a0 <_vfiprintf_r+0x250>)
 80174ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80174f2:	2206      	movs	r2, #6
 80174f4:	f7e8 fef4 	bl	80002e0 <memchr>
 80174f8:	2800      	cmp	r0, #0
 80174fa:	d03f      	beq.n	801757c <_vfiprintf_r+0x22c>
 80174fc:	4b29      	ldr	r3, [pc, #164]	; (80175a4 <_vfiprintf_r+0x254>)
 80174fe:	bb1b      	cbnz	r3, 8017548 <_vfiprintf_r+0x1f8>
 8017500:	9b03      	ldr	r3, [sp, #12]
 8017502:	3307      	adds	r3, #7
 8017504:	f023 0307 	bic.w	r3, r3, #7
 8017508:	3308      	adds	r3, #8
 801750a:	9303      	str	r3, [sp, #12]
 801750c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801750e:	443b      	add	r3, r7
 8017510:	9309      	str	r3, [sp, #36]	; 0x24
 8017512:	e767      	b.n	80173e4 <_vfiprintf_r+0x94>
 8017514:	fb0c 3202 	mla	r2, ip, r2, r3
 8017518:	460c      	mov	r4, r1
 801751a:	2001      	movs	r0, #1
 801751c:	e7a5      	b.n	801746a <_vfiprintf_r+0x11a>
 801751e:	2300      	movs	r3, #0
 8017520:	3401      	adds	r4, #1
 8017522:	9305      	str	r3, [sp, #20]
 8017524:	4619      	mov	r1, r3
 8017526:	f04f 0c0a 	mov.w	ip, #10
 801752a:	4620      	mov	r0, r4
 801752c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017530:	3a30      	subs	r2, #48	; 0x30
 8017532:	2a09      	cmp	r2, #9
 8017534:	d903      	bls.n	801753e <_vfiprintf_r+0x1ee>
 8017536:	2b00      	cmp	r3, #0
 8017538:	d0c5      	beq.n	80174c6 <_vfiprintf_r+0x176>
 801753a:	9105      	str	r1, [sp, #20]
 801753c:	e7c3      	b.n	80174c6 <_vfiprintf_r+0x176>
 801753e:	fb0c 2101 	mla	r1, ip, r1, r2
 8017542:	4604      	mov	r4, r0
 8017544:	2301      	movs	r3, #1
 8017546:	e7f0      	b.n	801752a <_vfiprintf_r+0x1da>
 8017548:	ab03      	add	r3, sp, #12
 801754a:	9300      	str	r3, [sp, #0]
 801754c:	462a      	mov	r2, r5
 801754e:	4b16      	ldr	r3, [pc, #88]	; (80175a8 <_vfiprintf_r+0x258>)
 8017550:	a904      	add	r1, sp, #16
 8017552:	4630      	mov	r0, r6
 8017554:	f3af 8000 	nop.w
 8017558:	4607      	mov	r7, r0
 801755a:	1c78      	adds	r0, r7, #1
 801755c:	d1d6      	bne.n	801750c <_vfiprintf_r+0x1bc>
 801755e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017560:	07d9      	lsls	r1, r3, #31
 8017562:	d405      	bmi.n	8017570 <_vfiprintf_r+0x220>
 8017564:	89ab      	ldrh	r3, [r5, #12]
 8017566:	059a      	lsls	r2, r3, #22
 8017568:	d402      	bmi.n	8017570 <_vfiprintf_r+0x220>
 801756a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801756c:	f7ff fe13 	bl	8017196 <__retarget_lock_release_recursive>
 8017570:	89ab      	ldrh	r3, [r5, #12]
 8017572:	065b      	lsls	r3, r3, #25
 8017574:	f53f af12 	bmi.w	801739c <_vfiprintf_r+0x4c>
 8017578:	9809      	ldr	r0, [sp, #36]	; 0x24
 801757a:	e711      	b.n	80173a0 <_vfiprintf_r+0x50>
 801757c:	ab03      	add	r3, sp, #12
 801757e:	9300      	str	r3, [sp, #0]
 8017580:	462a      	mov	r2, r5
 8017582:	4b09      	ldr	r3, [pc, #36]	; (80175a8 <_vfiprintf_r+0x258>)
 8017584:	a904      	add	r1, sp, #16
 8017586:	4630      	mov	r0, r6
 8017588:	f000 f880 	bl	801768c <_printf_i>
 801758c:	e7e4      	b.n	8017558 <_vfiprintf_r+0x208>
 801758e:	bf00      	nop
 8017590:	0801acd4 	.word	0x0801acd4
 8017594:	0801acf4 	.word	0x0801acf4
 8017598:	0801acb4 	.word	0x0801acb4
 801759c:	0801ad14 	.word	0x0801ad14
 80175a0:	0801ad1e 	.word	0x0801ad1e
 80175a4:	00000000 	.word	0x00000000
 80175a8:	0801732b 	.word	0x0801732b
 80175ac:	0801ad1a 	.word	0x0801ad1a

080175b0 <_printf_common>:
 80175b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80175b4:	4616      	mov	r6, r2
 80175b6:	4699      	mov	r9, r3
 80175b8:	688a      	ldr	r2, [r1, #8]
 80175ba:	690b      	ldr	r3, [r1, #16]
 80175bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80175c0:	4293      	cmp	r3, r2
 80175c2:	bfb8      	it	lt
 80175c4:	4613      	movlt	r3, r2
 80175c6:	6033      	str	r3, [r6, #0]
 80175c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80175cc:	4607      	mov	r7, r0
 80175ce:	460c      	mov	r4, r1
 80175d0:	b10a      	cbz	r2, 80175d6 <_printf_common+0x26>
 80175d2:	3301      	adds	r3, #1
 80175d4:	6033      	str	r3, [r6, #0]
 80175d6:	6823      	ldr	r3, [r4, #0]
 80175d8:	0699      	lsls	r1, r3, #26
 80175da:	bf42      	ittt	mi
 80175dc:	6833      	ldrmi	r3, [r6, #0]
 80175de:	3302      	addmi	r3, #2
 80175e0:	6033      	strmi	r3, [r6, #0]
 80175e2:	6825      	ldr	r5, [r4, #0]
 80175e4:	f015 0506 	ands.w	r5, r5, #6
 80175e8:	d106      	bne.n	80175f8 <_printf_common+0x48>
 80175ea:	f104 0a19 	add.w	sl, r4, #25
 80175ee:	68e3      	ldr	r3, [r4, #12]
 80175f0:	6832      	ldr	r2, [r6, #0]
 80175f2:	1a9b      	subs	r3, r3, r2
 80175f4:	42ab      	cmp	r3, r5
 80175f6:	dc26      	bgt.n	8017646 <_printf_common+0x96>
 80175f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80175fc:	1e13      	subs	r3, r2, #0
 80175fe:	6822      	ldr	r2, [r4, #0]
 8017600:	bf18      	it	ne
 8017602:	2301      	movne	r3, #1
 8017604:	0692      	lsls	r2, r2, #26
 8017606:	d42b      	bmi.n	8017660 <_printf_common+0xb0>
 8017608:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801760c:	4649      	mov	r1, r9
 801760e:	4638      	mov	r0, r7
 8017610:	47c0      	blx	r8
 8017612:	3001      	adds	r0, #1
 8017614:	d01e      	beq.n	8017654 <_printf_common+0xa4>
 8017616:	6823      	ldr	r3, [r4, #0]
 8017618:	68e5      	ldr	r5, [r4, #12]
 801761a:	6832      	ldr	r2, [r6, #0]
 801761c:	f003 0306 	and.w	r3, r3, #6
 8017620:	2b04      	cmp	r3, #4
 8017622:	bf08      	it	eq
 8017624:	1aad      	subeq	r5, r5, r2
 8017626:	68a3      	ldr	r3, [r4, #8]
 8017628:	6922      	ldr	r2, [r4, #16]
 801762a:	bf0c      	ite	eq
 801762c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017630:	2500      	movne	r5, #0
 8017632:	4293      	cmp	r3, r2
 8017634:	bfc4      	itt	gt
 8017636:	1a9b      	subgt	r3, r3, r2
 8017638:	18ed      	addgt	r5, r5, r3
 801763a:	2600      	movs	r6, #0
 801763c:	341a      	adds	r4, #26
 801763e:	42b5      	cmp	r5, r6
 8017640:	d11a      	bne.n	8017678 <_printf_common+0xc8>
 8017642:	2000      	movs	r0, #0
 8017644:	e008      	b.n	8017658 <_printf_common+0xa8>
 8017646:	2301      	movs	r3, #1
 8017648:	4652      	mov	r2, sl
 801764a:	4649      	mov	r1, r9
 801764c:	4638      	mov	r0, r7
 801764e:	47c0      	blx	r8
 8017650:	3001      	adds	r0, #1
 8017652:	d103      	bne.n	801765c <_printf_common+0xac>
 8017654:	f04f 30ff 	mov.w	r0, #4294967295
 8017658:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801765c:	3501      	adds	r5, #1
 801765e:	e7c6      	b.n	80175ee <_printf_common+0x3e>
 8017660:	18e1      	adds	r1, r4, r3
 8017662:	1c5a      	adds	r2, r3, #1
 8017664:	2030      	movs	r0, #48	; 0x30
 8017666:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801766a:	4422      	add	r2, r4
 801766c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8017670:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017674:	3302      	adds	r3, #2
 8017676:	e7c7      	b.n	8017608 <_printf_common+0x58>
 8017678:	2301      	movs	r3, #1
 801767a:	4622      	mov	r2, r4
 801767c:	4649      	mov	r1, r9
 801767e:	4638      	mov	r0, r7
 8017680:	47c0      	blx	r8
 8017682:	3001      	adds	r0, #1
 8017684:	d0e6      	beq.n	8017654 <_printf_common+0xa4>
 8017686:	3601      	adds	r6, #1
 8017688:	e7d9      	b.n	801763e <_printf_common+0x8e>
	...

0801768c <_printf_i>:
 801768c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017690:	460c      	mov	r4, r1
 8017692:	4691      	mov	r9, r2
 8017694:	7e27      	ldrb	r7, [r4, #24]
 8017696:	990c      	ldr	r1, [sp, #48]	; 0x30
 8017698:	2f78      	cmp	r7, #120	; 0x78
 801769a:	4680      	mov	r8, r0
 801769c:	469a      	mov	sl, r3
 801769e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80176a2:	d807      	bhi.n	80176b4 <_printf_i+0x28>
 80176a4:	2f62      	cmp	r7, #98	; 0x62
 80176a6:	d80a      	bhi.n	80176be <_printf_i+0x32>
 80176a8:	2f00      	cmp	r7, #0
 80176aa:	f000 80d8 	beq.w	801785e <_printf_i+0x1d2>
 80176ae:	2f58      	cmp	r7, #88	; 0x58
 80176b0:	f000 80a3 	beq.w	80177fa <_printf_i+0x16e>
 80176b4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80176b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80176bc:	e03a      	b.n	8017734 <_printf_i+0xa8>
 80176be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80176c2:	2b15      	cmp	r3, #21
 80176c4:	d8f6      	bhi.n	80176b4 <_printf_i+0x28>
 80176c6:	a001      	add	r0, pc, #4	; (adr r0, 80176cc <_printf_i+0x40>)
 80176c8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80176cc:	08017725 	.word	0x08017725
 80176d0:	08017739 	.word	0x08017739
 80176d4:	080176b5 	.word	0x080176b5
 80176d8:	080176b5 	.word	0x080176b5
 80176dc:	080176b5 	.word	0x080176b5
 80176e0:	080176b5 	.word	0x080176b5
 80176e4:	08017739 	.word	0x08017739
 80176e8:	080176b5 	.word	0x080176b5
 80176ec:	080176b5 	.word	0x080176b5
 80176f0:	080176b5 	.word	0x080176b5
 80176f4:	080176b5 	.word	0x080176b5
 80176f8:	08017845 	.word	0x08017845
 80176fc:	08017769 	.word	0x08017769
 8017700:	08017827 	.word	0x08017827
 8017704:	080176b5 	.word	0x080176b5
 8017708:	080176b5 	.word	0x080176b5
 801770c:	08017867 	.word	0x08017867
 8017710:	080176b5 	.word	0x080176b5
 8017714:	08017769 	.word	0x08017769
 8017718:	080176b5 	.word	0x080176b5
 801771c:	080176b5 	.word	0x080176b5
 8017720:	0801782f 	.word	0x0801782f
 8017724:	680b      	ldr	r3, [r1, #0]
 8017726:	1d1a      	adds	r2, r3, #4
 8017728:	681b      	ldr	r3, [r3, #0]
 801772a:	600a      	str	r2, [r1, #0]
 801772c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8017730:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017734:	2301      	movs	r3, #1
 8017736:	e0a3      	b.n	8017880 <_printf_i+0x1f4>
 8017738:	6825      	ldr	r5, [r4, #0]
 801773a:	6808      	ldr	r0, [r1, #0]
 801773c:	062e      	lsls	r6, r5, #24
 801773e:	f100 0304 	add.w	r3, r0, #4
 8017742:	d50a      	bpl.n	801775a <_printf_i+0xce>
 8017744:	6805      	ldr	r5, [r0, #0]
 8017746:	600b      	str	r3, [r1, #0]
 8017748:	2d00      	cmp	r5, #0
 801774a:	da03      	bge.n	8017754 <_printf_i+0xc8>
 801774c:	232d      	movs	r3, #45	; 0x2d
 801774e:	426d      	negs	r5, r5
 8017750:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017754:	485e      	ldr	r0, [pc, #376]	; (80178d0 <_printf_i+0x244>)
 8017756:	230a      	movs	r3, #10
 8017758:	e019      	b.n	801778e <_printf_i+0x102>
 801775a:	f015 0f40 	tst.w	r5, #64	; 0x40
 801775e:	6805      	ldr	r5, [r0, #0]
 8017760:	600b      	str	r3, [r1, #0]
 8017762:	bf18      	it	ne
 8017764:	b22d      	sxthne	r5, r5
 8017766:	e7ef      	b.n	8017748 <_printf_i+0xbc>
 8017768:	680b      	ldr	r3, [r1, #0]
 801776a:	6825      	ldr	r5, [r4, #0]
 801776c:	1d18      	adds	r0, r3, #4
 801776e:	6008      	str	r0, [r1, #0]
 8017770:	0628      	lsls	r0, r5, #24
 8017772:	d501      	bpl.n	8017778 <_printf_i+0xec>
 8017774:	681d      	ldr	r5, [r3, #0]
 8017776:	e002      	b.n	801777e <_printf_i+0xf2>
 8017778:	0669      	lsls	r1, r5, #25
 801777a:	d5fb      	bpl.n	8017774 <_printf_i+0xe8>
 801777c:	881d      	ldrh	r5, [r3, #0]
 801777e:	4854      	ldr	r0, [pc, #336]	; (80178d0 <_printf_i+0x244>)
 8017780:	2f6f      	cmp	r7, #111	; 0x6f
 8017782:	bf0c      	ite	eq
 8017784:	2308      	moveq	r3, #8
 8017786:	230a      	movne	r3, #10
 8017788:	2100      	movs	r1, #0
 801778a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801778e:	6866      	ldr	r6, [r4, #4]
 8017790:	60a6      	str	r6, [r4, #8]
 8017792:	2e00      	cmp	r6, #0
 8017794:	bfa2      	ittt	ge
 8017796:	6821      	ldrge	r1, [r4, #0]
 8017798:	f021 0104 	bicge.w	r1, r1, #4
 801779c:	6021      	strge	r1, [r4, #0]
 801779e:	b90d      	cbnz	r5, 80177a4 <_printf_i+0x118>
 80177a0:	2e00      	cmp	r6, #0
 80177a2:	d04d      	beq.n	8017840 <_printf_i+0x1b4>
 80177a4:	4616      	mov	r6, r2
 80177a6:	fbb5 f1f3 	udiv	r1, r5, r3
 80177aa:	fb03 5711 	mls	r7, r3, r1, r5
 80177ae:	5dc7      	ldrb	r7, [r0, r7]
 80177b0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80177b4:	462f      	mov	r7, r5
 80177b6:	42bb      	cmp	r3, r7
 80177b8:	460d      	mov	r5, r1
 80177ba:	d9f4      	bls.n	80177a6 <_printf_i+0x11a>
 80177bc:	2b08      	cmp	r3, #8
 80177be:	d10b      	bne.n	80177d8 <_printf_i+0x14c>
 80177c0:	6823      	ldr	r3, [r4, #0]
 80177c2:	07df      	lsls	r7, r3, #31
 80177c4:	d508      	bpl.n	80177d8 <_printf_i+0x14c>
 80177c6:	6923      	ldr	r3, [r4, #16]
 80177c8:	6861      	ldr	r1, [r4, #4]
 80177ca:	4299      	cmp	r1, r3
 80177cc:	bfde      	ittt	le
 80177ce:	2330      	movle	r3, #48	; 0x30
 80177d0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80177d4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80177d8:	1b92      	subs	r2, r2, r6
 80177da:	6122      	str	r2, [r4, #16]
 80177dc:	f8cd a000 	str.w	sl, [sp]
 80177e0:	464b      	mov	r3, r9
 80177e2:	aa03      	add	r2, sp, #12
 80177e4:	4621      	mov	r1, r4
 80177e6:	4640      	mov	r0, r8
 80177e8:	f7ff fee2 	bl	80175b0 <_printf_common>
 80177ec:	3001      	adds	r0, #1
 80177ee:	d14c      	bne.n	801788a <_printf_i+0x1fe>
 80177f0:	f04f 30ff 	mov.w	r0, #4294967295
 80177f4:	b004      	add	sp, #16
 80177f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80177fa:	4835      	ldr	r0, [pc, #212]	; (80178d0 <_printf_i+0x244>)
 80177fc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8017800:	6823      	ldr	r3, [r4, #0]
 8017802:	680e      	ldr	r6, [r1, #0]
 8017804:	061f      	lsls	r7, r3, #24
 8017806:	f856 5b04 	ldr.w	r5, [r6], #4
 801780a:	600e      	str	r6, [r1, #0]
 801780c:	d514      	bpl.n	8017838 <_printf_i+0x1ac>
 801780e:	07d9      	lsls	r1, r3, #31
 8017810:	bf44      	itt	mi
 8017812:	f043 0320 	orrmi.w	r3, r3, #32
 8017816:	6023      	strmi	r3, [r4, #0]
 8017818:	b91d      	cbnz	r5, 8017822 <_printf_i+0x196>
 801781a:	6823      	ldr	r3, [r4, #0]
 801781c:	f023 0320 	bic.w	r3, r3, #32
 8017820:	6023      	str	r3, [r4, #0]
 8017822:	2310      	movs	r3, #16
 8017824:	e7b0      	b.n	8017788 <_printf_i+0xfc>
 8017826:	6823      	ldr	r3, [r4, #0]
 8017828:	f043 0320 	orr.w	r3, r3, #32
 801782c:	6023      	str	r3, [r4, #0]
 801782e:	2378      	movs	r3, #120	; 0x78
 8017830:	4828      	ldr	r0, [pc, #160]	; (80178d4 <_printf_i+0x248>)
 8017832:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8017836:	e7e3      	b.n	8017800 <_printf_i+0x174>
 8017838:	065e      	lsls	r6, r3, #25
 801783a:	bf48      	it	mi
 801783c:	b2ad      	uxthmi	r5, r5
 801783e:	e7e6      	b.n	801780e <_printf_i+0x182>
 8017840:	4616      	mov	r6, r2
 8017842:	e7bb      	b.n	80177bc <_printf_i+0x130>
 8017844:	680b      	ldr	r3, [r1, #0]
 8017846:	6826      	ldr	r6, [r4, #0]
 8017848:	6960      	ldr	r0, [r4, #20]
 801784a:	1d1d      	adds	r5, r3, #4
 801784c:	600d      	str	r5, [r1, #0]
 801784e:	0635      	lsls	r5, r6, #24
 8017850:	681b      	ldr	r3, [r3, #0]
 8017852:	d501      	bpl.n	8017858 <_printf_i+0x1cc>
 8017854:	6018      	str	r0, [r3, #0]
 8017856:	e002      	b.n	801785e <_printf_i+0x1d2>
 8017858:	0671      	lsls	r1, r6, #25
 801785a:	d5fb      	bpl.n	8017854 <_printf_i+0x1c8>
 801785c:	8018      	strh	r0, [r3, #0]
 801785e:	2300      	movs	r3, #0
 8017860:	6123      	str	r3, [r4, #16]
 8017862:	4616      	mov	r6, r2
 8017864:	e7ba      	b.n	80177dc <_printf_i+0x150>
 8017866:	680b      	ldr	r3, [r1, #0]
 8017868:	1d1a      	adds	r2, r3, #4
 801786a:	600a      	str	r2, [r1, #0]
 801786c:	681e      	ldr	r6, [r3, #0]
 801786e:	6862      	ldr	r2, [r4, #4]
 8017870:	2100      	movs	r1, #0
 8017872:	4630      	mov	r0, r6
 8017874:	f7e8 fd34 	bl	80002e0 <memchr>
 8017878:	b108      	cbz	r0, 801787e <_printf_i+0x1f2>
 801787a:	1b80      	subs	r0, r0, r6
 801787c:	6060      	str	r0, [r4, #4]
 801787e:	6863      	ldr	r3, [r4, #4]
 8017880:	6123      	str	r3, [r4, #16]
 8017882:	2300      	movs	r3, #0
 8017884:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017888:	e7a8      	b.n	80177dc <_printf_i+0x150>
 801788a:	6923      	ldr	r3, [r4, #16]
 801788c:	4632      	mov	r2, r6
 801788e:	4649      	mov	r1, r9
 8017890:	4640      	mov	r0, r8
 8017892:	47d0      	blx	sl
 8017894:	3001      	adds	r0, #1
 8017896:	d0ab      	beq.n	80177f0 <_printf_i+0x164>
 8017898:	6823      	ldr	r3, [r4, #0]
 801789a:	079b      	lsls	r3, r3, #30
 801789c:	d413      	bmi.n	80178c6 <_printf_i+0x23a>
 801789e:	68e0      	ldr	r0, [r4, #12]
 80178a0:	9b03      	ldr	r3, [sp, #12]
 80178a2:	4298      	cmp	r0, r3
 80178a4:	bfb8      	it	lt
 80178a6:	4618      	movlt	r0, r3
 80178a8:	e7a4      	b.n	80177f4 <_printf_i+0x168>
 80178aa:	2301      	movs	r3, #1
 80178ac:	4632      	mov	r2, r6
 80178ae:	4649      	mov	r1, r9
 80178b0:	4640      	mov	r0, r8
 80178b2:	47d0      	blx	sl
 80178b4:	3001      	adds	r0, #1
 80178b6:	d09b      	beq.n	80177f0 <_printf_i+0x164>
 80178b8:	3501      	adds	r5, #1
 80178ba:	68e3      	ldr	r3, [r4, #12]
 80178bc:	9903      	ldr	r1, [sp, #12]
 80178be:	1a5b      	subs	r3, r3, r1
 80178c0:	42ab      	cmp	r3, r5
 80178c2:	dcf2      	bgt.n	80178aa <_printf_i+0x21e>
 80178c4:	e7eb      	b.n	801789e <_printf_i+0x212>
 80178c6:	2500      	movs	r5, #0
 80178c8:	f104 0619 	add.w	r6, r4, #25
 80178cc:	e7f5      	b.n	80178ba <_printf_i+0x22e>
 80178ce:	bf00      	nop
 80178d0:	0801ad25 	.word	0x0801ad25
 80178d4:	0801ad36 	.word	0x0801ad36

080178d8 <_sbrk_r>:
 80178d8:	b538      	push	{r3, r4, r5, lr}
 80178da:	4d06      	ldr	r5, [pc, #24]	; (80178f4 <_sbrk_r+0x1c>)
 80178dc:	2300      	movs	r3, #0
 80178de:	4604      	mov	r4, r0
 80178e0:	4608      	mov	r0, r1
 80178e2:	602b      	str	r3, [r5, #0]
 80178e4:	f7e9 fbda 	bl	800109c <_sbrk>
 80178e8:	1c43      	adds	r3, r0, #1
 80178ea:	d102      	bne.n	80178f2 <_sbrk_r+0x1a>
 80178ec:	682b      	ldr	r3, [r5, #0]
 80178ee:	b103      	cbz	r3, 80178f2 <_sbrk_r+0x1a>
 80178f0:	6023      	str	r3, [r4, #0]
 80178f2:	bd38      	pop	{r3, r4, r5, pc}
 80178f4:	240079c4 	.word	0x240079c4

080178f8 <__sread>:
 80178f8:	b510      	push	{r4, lr}
 80178fa:	460c      	mov	r4, r1
 80178fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017900:	f000 fa6c 	bl	8017ddc <_read_r>
 8017904:	2800      	cmp	r0, #0
 8017906:	bfab      	itete	ge
 8017908:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801790a:	89a3      	ldrhlt	r3, [r4, #12]
 801790c:	181b      	addge	r3, r3, r0
 801790e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8017912:	bfac      	ite	ge
 8017914:	6563      	strge	r3, [r4, #84]	; 0x54
 8017916:	81a3      	strhlt	r3, [r4, #12]
 8017918:	bd10      	pop	{r4, pc}

0801791a <__swrite>:
 801791a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801791e:	461f      	mov	r7, r3
 8017920:	898b      	ldrh	r3, [r1, #12]
 8017922:	05db      	lsls	r3, r3, #23
 8017924:	4605      	mov	r5, r0
 8017926:	460c      	mov	r4, r1
 8017928:	4616      	mov	r6, r2
 801792a:	d505      	bpl.n	8017938 <__swrite+0x1e>
 801792c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017930:	2302      	movs	r3, #2
 8017932:	2200      	movs	r2, #0
 8017934:	f000 f9d0 	bl	8017cd8 <_lseek_r>
 8017938:	89a3      	ldrh	r3, [r4, #12]
 801793a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801793e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8017942:	81a3      	strh	r3, [r4, #12]
 8017944:	4632      	mov	r2, r6
 8017946:	463b      	mov	r3, r7
 8017948:	4628      	mov	r0, r5
 801794a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801794e:	f000 b869 	b.w	8017a24 <_write_r>

08017952 <__sseek>:
 8017952:	b510      	push	{r4, lr}
 8017954:	460c      	mov	r4, r1
 8017956:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801795a:	f000 f9bd 	bl	8017cd8 <_lseek_r>
 801795e:	1c43      	adds	r3, r0, #1
 8017960:	89a3      	ldrh	r3, [r4, #12]
 8017962:	bf15      	itete	ne
 8017964:	6560      	strne	r0, [r4, #84]	; 0x54
 8017966:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801796a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801796e:	81a3      	strheq	r3, [r4, #12]
 8017970:	bf18      	it	ne
 8017972:	81a3      	strhne	r3, [r4, #12]
 8017974:	bd10      	pop	{r4, pc}

08017976 <__sclose>:
 8017976:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801797a:	f000 b8db 	b.w	8017b34 <_close_r>
	...

08017980 <__swbuf_r>:
 8017980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017982:	460e      	mov	r6, r1
 8017984:	4614      	mov	r4, r2
 8017986:	4605      	mov	r5, r0
 8017988:	b118      	cbz	r0, 8017992 <__swbuf_r+0x12>
 801798a:	6983      	ldr	r3, [r0, #24]
 801798c:	b90b      	cbnz	r3, 8017992 <__swbuf_r+0x12>
 801798e:	f7ff fb51 	bl	8017034 <__sinit>
 8017992:	4b21      	ldr	r3, [pc, #132]	; (8017a18 <__swbuf_r+0x98>)
 8017994:	429c      	cmp	r4, r3
 8017996:	d12b      	bne.n	80179f0 <__swbuf_r+0x70>
 8017998:	686c      	ldr	r4, [r5, #4]
 801799a:	69a3      	ldr	r3, [r4, #24]
 801799c:	60a3      	str	r3, [r4, #8]
 801799e:	89a3      	ldrh	r3, [r4, #12]
 80179a0:	071a      	lsls	r2, r3, #28
 80179a2:	d52f      	bpl.n	8017a04 <__swbuf_r+0x84>
 80179a4:	6923      	ldr	r3, [r4, #16]
 80179a6:	b36b      	cbz	r3, 8017a04 <__swbuf_r+0x84>
 80179a8:	6923      	ldr	r3, [r4, #16]
 80179aa:	6820      	ldr	r0, [r4, #0]
 80179ac:	1ac0      	subs	r0, r0, r3
 80179ae:	6963      	ldr	r3, [r4, #20]
 80179b0:	b2f6      	uxtb	r6, r6
 80179b2:	4283      	cmp	r3, r0
 80179b4:	4637      	mov	r7, r6
 80179b6:	dc04      	bgt.n	80179c2 <__swbuf_r+0x42>
 80179b8:	4621      	mov	r1, r4
 80179ba:	4628      	mov	r0, r5
 80179bc:	f000 f950 	bl	8017c60 <_fflush_r>
 80179c0:	bb30      	cbnz	r0, 8017a10 <__swbuf_r+0x90>
 80179c2:	68a3      	ldr	r3, [r4, #8]
 80179c4:	3b01      	subs	r3, #1
 80179c6:	60a3      	str	r3, [r4, #8]
 80179c8:	6823      	ldr	r3, [r4, #0]
 80179ca:	1c5a      	adds	r2, r3, #1
 80179cc:	6022      	str	r2, [r4, #0]
 80179ce:	701e      	strb	r6, [r3, #0]
 80179d0:	6963      	ldr	r3, [r4, #20]
 80179d2:	3001      	adds	r0, #1
 80179d4:	4283      	cmp	r3, r0
 80179d6:	d004      	beq.n	80179e2 <__swbuf_r+0x62>
 80179d8:	89a3      	ldrh	r3, [r4, #12]
 80179da:	07db      	lsls	r3, r3, #31
 80179dc:	d506      	bpl.n	80179ec <__swbuf_r+0x6c>
 80179de:	2e0a      	cmp	r6, #10
 80179e0:	d104      	bne.n	80179ec <__swbuf_r+0x6c>
 80179e2:	4621      	mov	r1, r4
 80179e4:	4628      	mov	r0, r5
 80179e6:	f000 f93b 	bl	8017c60 <_fflush_r>
 80179ea:	b988      	cbnz	r0, 8017a10 <__swbuf_r+0x90>
 80179ec:	4638      	mov	r0, r7
 80179ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80179f0:	4b0a      	ldr	r3, [pc, #40]	; (8017a1c <__swbuf_r+0x9c>)
 80179f2:	429c      	cmp	r4, r3
 80179f4:	d101      	bne.n	80179fa <__swbuf_r+0x7a>
 80179f6:	68ac      	ldr	r4, [r5, #8]
 80179f8:	e7cf      	b.n	801799a <__swbuf_r+0x1a>
 80179fa:	4b09      	ldr	r3, [pc, #36]	; (8017a20 <__swbuf_r+0xa0>)
 80179fc:	429c      	cmp	r4, r3
 80179fe:	bf08      	it	eq
 8017a00:	68ec      	ldreq	r4, [r5, #12]
 8017a02:	e7ca      	b.n	801799a <__swbuf_r+0x1a>
 8017a04:	4621      	mov	r1, r4
 8017a06:	4628      	mov	r0, r5
 8017a08:	f000 f81e 	bl	8017a48 <__swsetup_r>
 8017a0c:	2800      	cmp	r0, #0
 8017a0e:	d0cb      	beq.n	80179a8 <__swbuf_r+0x28>
 8017a10:	f04f 37ff 	mov.w	r7, #4294967295
 8017a14:	e7ea      	b.n	80179ec <__swbuf_r+0x6c>
 8017a16:	bf00      	nop
 8017a18:	0801acd4 	.word	0x0801acd4
 8017a1c:	0801acf4 	.word	0x0801acf4
 8017a20:	0801acb4 	.word	0x0801acb4

08017a24 <_write_r>:
 8017a24:	b538      	push	{r3, r4, r5, lr}
 8017a26:	4d07      	ldr	r5, [pc, #28]	; (8017a44 <_write_r+0x20>)
 8017a28:	4604      	mov	r4, r0
 8017a2a:	4608      	mov	r0, r1
 8017a2c:	4611      	mov	r1, r2
 8017a2e:	2200      	movs	r2, #0
 8017a30:	602a      	str	r2, [r5, #0]
 8017a32:	461a      	mov	r2, r3
 8017a34:	f7e9 fae1 	bl	8000ffa <_write>
 8017a38:	1c43      	adds	r3, r0, #1
 8017a3a:	d102      	bne.n	8017a42 <_write_r+0x1e>
 8017a3c:	682b      	ldr	r3, [r5, #0]
 8017a3e:	b103      	cbz	r3, 8017a42 <_write_r+0x1e>
 8017a40:	6023      	str	r3, [r4, #0]
 8017a42:	bd38      	pop	{r3, r4, r5, pc}
 8017a44:	240079c4 	.word	0x240079c4

08017a48 <__swsetup_r>:
 8017a48:	4b32      	ldr	r3, [pc, #200]	; (8017b14 <__swsetup_r+0xcc>)
 8017a4a:	b570      	push	{r4, r5, r6, lr}
 8017a4c:	681d      	ldr	r5, [r3, #0]
 8017a4e:	4606      	mov	r6, r0
 8017a50:	460c      	mov	r4, r1
 8017a52:	b125      	cbz	r5, 8017a5e <__swsetup_r+0x16>
 8017a54:	69ab      	ldr	r3, [r5, #24]
 8017a56:	b913      	cbnz	r3, 8017a5e <__swsetup_r+0x16>
 8017a58:	4628      	mov	r0, r5
 8017a5a:	f7ff faeb 	bl	8017034 <__sinit>
 8017a5e:	4b2e      	ldr	r3, [pc, #184]	; (8017b18 <__swsetup_r+0xd0>)
 8017a60:	429c      	cmp	r4, r3
 8017a62:	d10f      	bne.n	8017a84 <__swsetup_r+0x3c>
 8017a64:	686c      	ldr	r4, [r5, #4]
 8017a66:	89a3      	ldrh	r3, [r4, #12]
 8017a68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017a6c:	0719      	lsls	r1, r3, #28
 8017a6e:	d42c      	bmi.n	8017aca <__swsetup_r+0x82>
 8017a70:	06dd      	lsls	r5, r3, #27
 8017a72:	d411      	bmi.n	8017a98 <__swsetup_r+0x50>
 8017a74:	2309      	movs	r3, #9
 8017a76:	6033      	str	r3, [r6, #0]
 8017a78:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8017a7c:	81a3      	strh	r3, [r4, #12]
 8017a7e:	f04f 30ff 	mov.w	r0, #4294967295
 8017a82:	e03e      	b.n	8017b02 <__swsetup_r+0xba>
 8017a84:	4b25      	ldr	r3, [pc, #148]	; (8017b1c <__swsetup_r+0xd4>)
 8017a86:	429c      	cmp	r4, r3
 8017a88:	d101      	bne.n	8017a8e <__swsetup_r+0x46>
 8017a8a:	68ac      	ldr	r4, [r5, #8]
 8017a8c:	e7eb      	b.n	8017a66 <__swsetup_r+0x1e>
 8017a8e:	4b24      	ldr	r3, [pc, #144]	; (8017b20 <__swsetup_r+0xd8>)
 8017a90:	429c      	cmp	r4, r3
 8017a92:	bf08      	it	eq
 8017a94:	68ec      	ldreq	r4, [r5, #12]
 8017a96:	e7e6      	b.n	8017a66 <__swsetup_r+0x1e>
 8017a98:	0758      	lsls	r0, r3, #29
 8017a9a:	d512      	bpl.n	8017ac2 <__swsetup_r+0x7a>
 8017a9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017a9e:	b141      	cbz	r1, 8017ab2 <__swsetup_r+0x6a>
 8017aa0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017aa4:	4299      	cmp	r1, r3
 8017aa6:	d002      	beq.n	8017aae <__swsetup_r+0x66>
 8017aa8:	4630      	mov	r0, r6
 8017aaa:	f7ff fb7d 	bl	80171a8 <_free_r>
 8017aae:	2300      	movs	r3, #0
 8017ab0:	6363      	str	r3, [r4, #52]	; 0x34
 8017ab2:	89a3      	ldrh	r3, [r4, #12]
 8017ab4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8017ab8:	81a3      	strh	r3, [r4, #12]
 8017aba:	2300      	movs	r3, #0
 8017abc:	6063      	str	r3, [r4, #4]
 8017abe:	6923      	ldr	r3, [r4, #16]
 8017ac0:	6023      	str	r3, [r4, #0]
 8017ac2:	89a3      	ldrh	r3, [r4, #12]
 8017ac4:	f043 0308 	orr.w	r3, r3, #8
 8017ac8:	81a3      	strh	r3, [r4, #12]
 8017aca:	6923      	ldr	r3, [r4, #16]
 8017acc:	b94b      	cbnz	r3, 8017ae2 <__swsetup_r+0x9a>
 8017ace:	89a3      	ldrh	r3, [r4, #12]
 8017ad0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8017ad4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017ad8:	d003      	beq.n	8017ae2 <__swsetup_r+0x9a>
 8017ada:	4621      	mov	r1, r4
 8017adc:	4630      	mov	r0, r6
 8017ade:	f000 f931 	bl	8017d44 <__smakebuf_r>
 8017ae2:	89a0      	ldrh	r0, [r4, #12]
 8017ae4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017ae8:	f010 0301 	ands.w	r3, r0, #1
 8017aec:	d00a      	beq.n	8017b04 <__swsetup_r+0xbc>
 8017aee:	2300      	movs	r3, #0
 8017af0:	60a3      	str	r3, [r4, #8]
 8017af2:	6963      	ldr	r3, [r4, #20]
 8017af4:	425b      	negs	r3, r3
 8017af6:	61a3      	str	r3, [r4, #24]
 8017af8:	6923      	ldr	r3, [r4, #16]
 8017afa:	b943      	cbnz	r3, 8017b0e <__swsetup_r+0xc6>
 8017afc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8017b00:	d1ba      	bne.n	8017a78 <__swsetup_r+0x30>
 8017b02:	bd70      	pop	{r4, r5, r6, pc}
 8017b04:	0781      	lsls	r1, r0, #30
 8017b06:	bf58      	it	pl
 8017b08:	6963      	ldrpl	r3, [r4, #20]
 8017b0a:	60a3      	str	r3, [r4, #8]
 8017b0c:	e7f4      	b.n	8017af8 <__swsetup_r+0xb0>
 8017b0e:	2000      	movs	r0, #0
 8017b10:	e7f7      	b.n	8017b02 <__swsetup_r+0xba>
 8017b12:	bf00      	nop
 8017b14:	24000034 	.word	0x24000034
 8017b18:	0801acd4 	.word	0x0801acd4
 8017b1c:	0801acf4 	.word	0x0801acf4
 8017b20:	0801acb4 	.word	0x0801acb4

08017b24 <abort>:
 8017b24:	b508      	push	{r3, lr}
 8017b26:	2006      	movs	r0, #6
 8017b28:	f000 f992 	bl	8017e50 <raise>
 8017b2c:	2001      	movs	r0, #1
 8017b2e:	f7e9 fa3d 	bl	8000fac <_exit>
	...

08017b34 <_close_r>:
 8017b34:	b538      	push	{r3, r4, r5, lr}
 8017b36:	4d06      	ldr	r5, [pc, #24]	; (8017b50 <_close_r+0x1c>)
 8017b38:	2300      	movs	r3, #0
 8017b3a:	4604      	mov	r4, r0
 8017b3c:	4608      	mov	r0, r1
 8017b3e:	602b      	str	r3, [r5, #0]
 8017b40:	f7e9 fa77 	bl	8001032 <_close>
 8017b44:	1c43      	adds	r3, r0, #1
 8017b46:	d102      	bne.n	8017b4e <_close_r+0x1a>
 8017b48:	682b      	ldr	r3, [r5, #0]
 8017b4a:	b103      	cbz	r3, 8017b4e <_close_r+0x1a>
 8017b4c:	6023      	str	r3, [r4, #0]
 8017b4e:	bd38      	pop	{r3, r4, r5, pc}
 8017b50:	240079c4 	.word	0x240079c4

08017b54 <__sflush_r>:
 8017b54:	898a      	ldrh	r2, [r1, #12]
 8017b56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017b5a:	4605      	mov	r5, r0
 8017b5c:	0710      	lsls	r0, r2, #28
 8017b5e:	460c      	mov	r4, r1
 8017b60:	d458      	bmi.n	8017c14 <__sflush_r+0xc0>
 8017b62:	684b      	ldr	r3, [r1, #4]
 8017b64:	2b00      	cmp	r3, #0
 8017b66:	dc05      	bgt.n	8017b74 <__sflush_r+0x20>
 8017b68:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8017b6a:	2b00      	cmp	r3, #0
 8017b6c:	dc02      	bgt.n	8017b74 <__sflush_r+0x20>
 8017b6e:	2000      	movs	r0, #0
 8017b70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017b74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017b76:	2e00      	cmp	r6, #0
 8017b78:	d0f9      	beq.n	8017b6e <__sflush_r+0x1a>
 8017b7a:	2300      	movs	r3, #0
 8017b7c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8017b80:	682f      	ldr	r7, [r5, #0]
 8017b82:	602b      	str	r3, [r5, #0]
 8017b84:	d032      	beq.n	8017bec <__sflush_r+0x98>
 8017b86:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8017b88:	89a3      	ldrh	r3, [r4, #12]
 8017b8a:	075a      	lsls	r2, r3, #29
 8017b8c:	d505      	bpl.n	8017b9a <__sflush_r+0x46>
 8017b8e:	6863      	ldr	r3, [r4, #4]
 8017b90:	1ac0      	subs	r0, r0, r3
 8017b92:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017b94:	b10b      	cbz	r3, 8017b9a <__sflush_r+0x46>
 8017b96:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017b98:	1ac0      	subs	r0, r0, r3
 8017b9a:	2300      	movs	r3, #0
 8017b9c:	4602      	mov	r2, r0
 8017b9e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017ba0:	6a21      	ldr	r1, [r4, #32]
 8017ba2:	4628      	mov	r0, r5
 8017ba4:	47b0      	blx	r6
 8017ba6:	1c43      	adds	r3, r0, #1
 8017ba8:	89a3      	ldrh	r3, [r4, #12]
 8017baa:	d106      	bne.n	8017bba <__sflush_r+0x66>
 8017bac:	6829      	ldr	r1, [r5, #0]
 8017bae:	291d      	cmp	r1, #29
 8017bb0:	d82c      	bhi.n	8017c0c <__sflush_r+0xb8>
 8017bb2:	4a2a      	ldr	r2, [pc, #168]	; (8017c5c <__sflush_r+0x108>)
 8017bb4:	40ca      	lsrs	r2, r1
 8017bb6:	07d6      	lsls	r6, r2, #31
 8017bb8:	d528      	bpl.n	8017c0c <__sflush_r+0xb8>
 8017bba:	2200      	movs	r2, #0
 8017bbc:	6062      	str	r2, [r4, #4]
 8017bbe:	04d9      	lsls	r1, r3, #19
 8017bc0:	6922      	ldr	r2, [r4, #16]
 8017bc2:	6022      	str	r2, [r4, #0]
 8017bc4:	d504      	bpl.n	8017bd0 <__sflush_r+0x7c>
 8017bc6:	1c42      	adds	r2, r0, #1
 8017bc8:	d101      	bne.n	8017bce <__sflush_r+0x7a>
 8017bca:	682b      	ldr	r3, [r5, #0]
 8017bcc:	b903      	cbnz	r3, 8017bd0 <__sflush_r+0x7c>
 8017bce:	6560      	str	r0, [r4, #84]	; 0x54
 8017bd0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017bd2:	602f      	str	r7, [r5, #0]
 8017bd4:	2900      	cmp	r1, #0
 8017bd6:	d0ca      	beq.n	8017b6e <__sflush_r+0x1a>
 8017bd8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017bdc:	4299      	cmp	r1, r3
 8017bde:	d002      	beq.n	8017be6 <__sflush_r+0x92>
 8017be0:	4628      	mov	r0, r5
 8017be2:	f7ff fae1 	bl	80171a8 <_free_r>
 8017be6:	2000      	movs	r0, #0
 8017be8:	6360      	str	r0, [r4, #52]	; 0x34
 8017bea:	e7c1      	b.n	8017b70 <__sflush_r+0x1c>
 8017bec:	6a21      	ldr	r1, [r4, #32]
 8017bee:	2301      	movs	r3, #1
 8017bf0:	4628      	mov	r0, r5
 8017bf2:	47b0      	blx	r6
 8017bf4:	1c41      	adds	r1, r0, #1
 8017bf6:	d1c7      	bne.n	8017b88 <__sflush_r+0x34>
 8017bf8:	682b      	ldr	r3, [r5, #0]
 8017bfa:	2b00      	cmp	r3, #0
 8017bfc:	d0c4      	beq.n	8017b88 <__sflush_r+0x34>
 8017bfe:	2b1d      	cmp	r3, #29
 8017c00:	d001      	beq.n	8017c06 <__sflush_r+0xb2>
 8017c02:	2b16      	cmp	r3, #22
 8017c04:	d101      	bne.n	8017c0a <__sflush_r+0xb6>
 8017c06:	602f      	str	r7, [r5, #0]
 8017c08:	e7b1      	b.n	8017b6e <__sflush_r+0x1a>
 8017c0a:	89a3      	ldrh	r3, [r4, #12]
 8017c0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017c10:	81a3      	strh	r3, [r4, #12]
 8017c12:	e7ad      	b.n	8017b70 <__sflush_r+0x1c>
 8017c14:	690f      	ldr	r7, [r1, #16]
 8017c16:	2f00      	cmp	r7, #0
 8017c18:	d0a9      	beq.n	8017b6e <__sflush_r+0x1a>
 8017c1a:	0793      	lsls	r3, r2, #30
 8017c1c:	680e      	ldr	r6, [r1, #0]
 8017c1e:	bf08      	it	eq
 8017c20:	694b      	ldreq	r3, [r1, #20]
 8017c22:	600f      	str	r7, [r1, #0]
 8017c24:	bf18      	it	ne
 8017c26:	2300      	movne	r3, #0
 8017c28:	eba6 0807 	sub.w	r8, r6, r7
 8017c2c:	608b      	str	r3, [r1, #8]
 8017c2e:	f1b8 0f00 	cmp.w	r8, #0
 8017c32:	dd9c      	ble.n	8017b6e <__sflush_r+0x1a>
 8017c34:	6a21      	ldr	r1, [r4, #32]
 8017c36:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8017c38:	4643      	mov	r3, r8
 8017c3a:	463a      	mov	r2, r7
 8017c3c:	4628      	mov	r0, r5
 8017c3e:	47b0      	blx	r6
 8017c40:	2800      	cmp	r0, #0
 8017c42:	dc06      	bgt.n	8017c52 <__sflush_r+0xfe>
 8017c44:	89a3      	ldrh	r3, [r4, #12]
 8017c46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017c4a:	81a3      	strh	r3, [r4, #12]
 8017c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8017c50:	e78e      	b.n	8017b70 <__sflush_r+0x1c>
 8017c52:	4407      	add	r7, r0
 8017c54:	eba8 0800 	sub.w	r8, r8, r0
 8017c58:	e7e9      	b.n	8017c2e <__sflush_r+0xda>
 8017c5a:	bf00      	nop
 8017c5c:	20400001 	.word	0x20400001

08017c60 <_fflush_r>:
 8017c60:	b538      	push	{r3, r4, r5, lr}
 8017c62:	690b      	ldr	r3, [r1, #16]
 8017c64:	4605      	mov	r5, r0
 8017c66:	460c      	mov	r4, r1
 8017c68:	b913      	cbnz	r3, 8017c70 <_fflush_r+0x10>
 8017c6a:	2500      	movs	r5, #0
 8017c6c:	4628      	mov	r0, r5
 8017c6e:	bd38      	pop	{r3, r4, r5, pc}
 8017c70:	b118      	cbz	r0, 8017c7a <_fflush_r+0x1a>
 8017c72:	6983      	ldr	r3, [r0, #24]
 8017c74:	b90b      	cbnz	r3, 8017c7a <_fflush_r+0x1a>
 8017c76:	f7ff f9dd 	bl	8017034 <__sinit>
 8017c7a:	4b14      	ldr	r3, [pc, #80]	; (8017ccc <_fflush_r+0x6c>)
 8017c7c:	429c      	cmp	r4, r3
 8017c7e:	d11b      	bne.n	8017cb8 <_fflush_r+0x58>
 8017c80:	686c      	ldr	r4, [r5, #4]
 8017c82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017c86:	2b00      	cmp	r3, #0
 8017c88:	d0ef      	beq.n	8017c6a <_fflush_r+0xa>
 8017c8a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8017c8c:	07d0      	lsls	r0, r2, #31
 8017c8e:	d404      	bmi.n	8017c9a <_fflush_r+0x3a>
 8017c90:	0599      	lsls	r1, r3, #22
 8017c92:	d402      	bmi.n	8017c9a <_fflush_r+0x3a>
 8017c94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017c96:	f7ff fa7d 	bl	8017194 <__retarget_lock_acquire_recursive>
 8017c9a:	4628      	mov	r0, r5
 8017c9c:	4621      	mov	r1, r4
 8017c9e:	f7ff ff59 	bl	8017b54 <__sflush_r>
 8017ca2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017ca4:	07da      	lsls	r2, r3, #31
 8017ca6:	4605      	mov	r5, r0
 8017ca8:	d4e0      	bmi.n	8017c6c <_fflush_r+0xc>
 8017caa:	89a3      	ldrh	r3, [r4, #12]
 8017cac:	059b      	lsls	r3, r3, #22
 8017cae:	d4dd      	bmi.n	8017c6c <_fflush_r+0xc>
 8017cb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017cb2:	f7ff fa70 	bl	8017196 <__retarget_lock_release_recursive>
 8017cb6:	e7d9      	b.n	8017c6c <_fflush_r+0xc>
 8017cb8:	4b05      	ldr	r3, [pc, #20]	; (8017cd0 <_fflush_r+0x70>)
 8017cba:	429c      	cmp	r4, r3
 8017cbc:	d101      	bne.n	8017cc2 <_fflush_r+0x62>
 8017cbe:	68ac      	ldr	r4, [r5, #8]
 8017cc0:	e7df      	b.n	8017c82 <_fflush_r+0x22>
 8017cc2:	4b04      	ldr	r3, [pc, #16]	; (8017cd4 <_fflush_r+0x74>)
 8017cc4:	429c      	cmp	r4, r3
 8017cc6:	bf08      	it	eq
 8017cc8:	68ec      	ldreq	r4, [r5, #12]
 8017cca:	e7da      	b.n	8017c82 <_fflush_r+0x22>
 8017ccc:	0801acd4 	.word	0x0801acd4
 8017cd0:	0801acf4 	.word	0x0801acf4
 8017cd4:	0801acb4 	.word	0x0801acb4

08017cd8 <_lseek_r>:
 8017cd8:	b538      	push	{r3, r4, r5, lr}
 8017cda:	4d07      	ldr	r5, [pc, #28]	; (8017cf8 <_lseek_r+0x20>)
 8017cdc:	4604      	mov	r4, r0
 8017cde:	4608      	mov	r0, r1
 8017ce0:	4611      	mov	r1, r2
 8017ce2:	2200      	movs	r2, #0
 8017ce4:	602a      	str	r2, [r5, #0]
 8017ce6:	461a      	mov	r2, r3
 8017ce8:	f7e9 f9ca 	bl	8001080 <_lseek>
 8017cec:	1c43      	adds	r3, r0, #1
 8017cee:	d102      	bne.n	8017cf6 <_lseek_r+0x1e>
 8017cf0:	682b      	ldr	r3, [r5, #0]
 8017cf2:	b103      	cbz	r3, 8017cf6 <_lseek_r+0x1e>
 8017cf4:	6023      	str	r3, [r4, #0]
 8017cf6:	bd38      	pop	{r3, r4, r5, pc}
 8017cf8:	240079c4 	.word	0x240079c4

08017cfc <__swhatbuf_r>:
 8017cfc:	b570      	push	{r4, r5, r6, lr}
 8017cfe:	460e      	mov	r6, r1
 8017d00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017d04:	2900      	cmp	r1, #0
 8017d06:	b096      	sub	sp, #88	; 0x58
 8017d08:	4614      	mov	r4, r2
 8017d0a:	461d      	mov	r5, r3
 8017d0c:	da07      	bge.n	8017d1e <__swhatbuf_r+0x22>
 8017d0e:	2300      	movs	r3, #0
 8017d10:	602b      	str	r3, [r5, #0]
 8017d12:	89b3      	ldrh	r3, [r6, #12]
 8017d14:	061a      	lsls	r2, r3, #24
 8017d16:	d410      	bmi.n	8017d3a <__swhatbuf_r+0x3e>
 8017d18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017d1c:	e00e      	b.n	8017d3c <__swhatbuf_r+0x40>
 8017d1e:	466a      	mov	r2, sp
 8017d20:	f000 f8b2 	bl	8017e88 <_fstat_r>
 8017d24:	2800      	cmp	r0, #0
 8017d26:	dbf2      	blt.n	8017d0e <__swhatbuf_r+0x12>
 8017d28:	9a01      	ldr	r2, [sp, #4]
 8017d2a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8017d2e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8017d32:	425a      	negs	r2, r3
 8017d34:	415a      	adcs	r2, r3
 8017d36:	602a      	str	r2, [r5, #0]
 8017d38:	e7ee      	b.n	8017d18 <__swhatbuf_r+0x1c>
 8017d3a:	2340      	movs	r3, #64	; 0x40
 8017d3c:	2000      	movs	r0, #0
 8017d3e:	6023      	str	r3, [r4, #0]
 8017d40:	b016      	add	sp, #88	; 0x58
 8017d42:	bd70      	pop	{r4, r5, r6, pc}

08017d44 <__smakebuf_r>:
 8017d44:	898b      	ldrh	r3, [r1, #12]
 8017d46:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017d48:	079d      	lsls	r5, r3, #30
 8017d4a:	4606      	mov	r6, r0
 8017d4c:	460c      	mov	r4, r1
 8017d4e:	d507      	bpl.n	8017d60 <__smakebuf_r+0x1c>
 8017d50:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8017d54:	6023      	str	r3, [r4, #0]
 8017d56:	6123      	str	r3, [r4, #16]
 8017d58:	2301      	movs	r3, #1
 8017d5a:	6163      	str	r3, [r4, #20]
 8017d5c:	b002      	add	sp, #8
 8017d5e:	bd70      	pop	{r4, r5, r6, pc}
 8017d60:	ab01      	add	r3, sp, #4
 8017d62:	466a      	mov	r2, sp
 8017d64:	f7ff ffca 	bl	8017cfc <__swhatbuf_r>
 8017d68:	9900      	ldr	r1, [sp, #0]
 8017d6a:	4605      	mov	r5, r0
 8017d6c:	4630      	mov	r0, r6
 8017d6e:	f7ff fa6b 	bl	8017248 <_malloc_r>
 8017d72:	b948      	cbnz	r0, 8017d88 <__smakebuf_r+0x44>
 8017d74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017d78:	059a      	lsls	r2, r3, #22
 8017d7a:	d4ef      	bmi.n	8017d5c <__smakebuf_r+0x18>
 8017d7c:	f023 0303 	bic.w	r3, r3, #3
 8017d80:	f043 0302 	orr.w	r3, r3, #2
 8017d84:	81a3      	strh	r3, [r4, #12]
 8017d86:	e7e3      	b.n	8017d50 <__smakebuf_r+0xc>
 8017d88:	4b0d      	ldr	r3, [pc, #52]	; (8017dc0 <__smakebuf_r+0x7c>)
 8017d8a:	62b3      	str	r3, [r6, #40]	; 0x28
 8017d8c:	89a3      	ldrh	r3, [r4, #12]
 8017d8e:	6020      	str	r0, [r4, #0]
 8017d90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017d94:	81a3      	strh	r3, [r4, #12]
 8017d96:	9b00      	ldr	r3, [sp, #0]
 8017d98:	6163      	str	r3, [r4, #20]
 8017d9a:	9b01      	ldr	r3, [sp, #4]
 8017d9c:	6120      	str	r0, [r4, #16]
 8017d9e:	b15b      	cbz	r3, 8017db8 <__smakebuf_r+0x74>
 8017da0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017da4:	4630      	mov	r0, r6
 8017da6:	f000 f881 	bl	8017eac <_isatty_r>
 8017daa:	b128      	cbz	r0, 8017db8 <__smakebuf_r+0x74>
 8017dac:	89a3      	ldrh	r3, [r4, #12]
 8017dae:	f023 0303 	bic.w	r3, r3, #3
 8017db2:	f043 0301 	orr.w	r3, r3, #1
 8017db6:	81a3      	strh	r3, [r4, #12]
 8017db8:	89a0      	ldrh	r0, [r4, #12]
 8017dba:	4305      	orrs	r5, r0
 8017dbc:	81a5      	strh	r5, [r4, #12]
 8017dbe:	e7cd      	b.n	8017d5c <__smakebuf_r+0x18>
 8017dc0:	08016fcd 	.word	0x08016fcd

08017dc4 <__malloc_lock>:
 8017dc4:	4801      	ldr	r0, [pc, #4]	; (8017dcc <__malloc_lock+0x8>)
 8017dc6:	f7ff b9e5 	b.w	8017194 <__retarget_lock_acquire_recursive>
 8017dca:	bf00      	nop
 8017dcc:	240079d0 	.word	0x240079d0

08017dd0 <__malloc_unlock>:
 8017dd0:	4801      	ldr	r0, [pc, #4]	; (8017dd8 <__malloc_unlock+0x8>)
 8017dd2:	f7ff b9e0 	b.w	8017196 <__retarget_lock_release_recursive>
 8017dd6:	bf00      	nop
 8017dd8:	240079d0 	.word	0x240079d0

08017ddc <_read_r>:
 8017ddc:	b538      	push	{r3, r4, r5, lr}
 8017dde:	4d07      	ldr	r5, [pc, #28]	; (8017dfc <_read_r+0x20>)
 8017de0:	4604      	mov	r4, r0
 8017de2:	4608      	mov	r0, r1
 8017de4:	4611      	mov	r1, r2
 8017de6:	2200      	movs	r2, #0
 8017de8:	602a      	str	r2, [r5, #0]
 8017dea:	461a      	mov	r2, r3
 8017dec:	f7e9 f8e8 	bl	8000fc0 <_read>
 8017df0:	1c43      	adds	r3, r0, #1
 8017df2:	d102      	bne.n	8017dfa <_read_r+0x1e>
 8017df4:	682b      	ldr	r3, [r5, #0]
 8017df6:	b103      	cbz	r3, 8017dfa <_read_r+0x1e>
 8017df8:	6023      	str	r3, [r4, #0]
 8017dfa:	bd38      	pop	{r3, r4, r5, pc}
 8017dfc:	240079c4 	.word	0x240079c4

08017e00 <_raise_r>:
 8017e00:	291f      	cmp	r1, #31
 8017e02:	b538      	push	{r3, r4, r5, lr}
 8017e04:	4604      	mov	r4, r0
 8017e06:	460d      	mov	r5, r1
 8017e08:	d904      	bls.n	8017e14 <_raise_r+0x14>
 8017e0a:	2316      	movs	r3, #22
 8017e0c:	6003      	str	r3, [r0, #0]
 8017e0e:	f04f 30ff 	mov.w	r0, #4294967295
 8017e12:	bd38      	pop	{r3, r4, r5, pc}
 8017e14:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8017e16:	b112      	cbz	r2, 8017e1e <_raise_r+0x1e>
 8017e18:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017e1c:	b94b      	cbnz	r3, 8017e32 <_raise_r+0x32>
 8017e1e:	4620      	mov	r0, r4
 8017e20:	f000 f830 	bl	8017e84 <_getpid_r>
 8017e24:	462a      	mov	r2, r5
 8017e26:	4601      	mov	r1, r0
 8017e28:	4620      	mov	r0, r4
 8017e2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017e2e:	f000 b817 	b.w	8017e60 <_kill_r>
 8017e32:	2b01      	cmp	r3, #1
 8017e34:	d00a      	beq.n	8017e4c <_raise_r+0x4c>
 8017e36:	1c59      	adds	r1, r3, #1
 8017e38:	d103      	bne.n	8017e42 <_raise_r+0x42>
 8017e3a:	2316      	movs	r3, #22
 8017e3c:	6003      	str	r3, [r0, #0]
 8017e3e:	2001      	movs	r0, #1
 8017e40:	e7e7      	b.n	8017e12 <_raise_r+0x12>
 8017e42:	2400      	movs	r4, #0
 8017e44:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8017e48:	4628      	mov	r0, r5
 8017e4a:	4798      	blx	r3
 8017e4c:	2000      	movs	r0, #0
 8017e4e:	e7e0      	b.n	8017e12 <_raise_r+0x12>

08017e50 <raise>:
 8017e50:	4b02      	ldr	r3, [pc, #8]	; (8017e5c <raise+0xc>)
 8017e52:	4601      	mov	r1, r0
 8017e54:	6818      	ldr	r0, [r3, #0]
 8017e56:	f7ff bfd3 	b.w	8017e00 <_raise_r>
 8017e5a:	bf00      	nop
 8017e5c:	24000034 	.word	0x24000034

08017e60 <_kill_r>:
 8017e60:	b538      	push	{r3, r4, r5, lr}
 8017e62:	4d07      	ldr	r5, [pc, #28]	; (8017e80 <_kill_r+0x20>)
 8017e64:	2300      	movs	r3, #0
 8017e66:	4604      	mov	r4, r0
 8017e68:	4608      	mov	r0, r1
 8017e6a:	4611      	mov	r1, r2
 8017e6c:	602b      	str	r3, [r5, #0]
 8017e6e:	f7e9 f88b 	bl	8000f88 <_kill>
 8017e72:	1c43      	adds	r3, r0, #1
 8017e74:	d102      	bne.n	8017e7c <_kill_r+0x1c>
 8017e76:	682b      	ldr	r3, [r5, #0]
 8017e78:	b103      	cbz	r3, 8017e7c <_kill_r+0x1c>
 8017e7a:	6023      	str	r3, [r4, #0]
 8017e7c:	bd38      	pop	{r3, r4, r5, pc}
 8017e7e:	bf00      	nop
 8017e80:	240079c4 	.word	0x240079c4

08017e84 <_getpid_r>:
 8017e84:	f7e9 b878 	b.w	8000f78 <_getpid>

08017e88 <_fstat_r>:
 8017e88:	b538      	push	{r3, r4, r5, lr}
 8017e8a:	4d07      	ldr	r5, [pc, #28]	; (8017ea8 <_fstat_r+0x20>)
 8017e8c:	2300      	movs	r3, #0
 8017e8e:	4604      	mov	r4, r0
 8017e90:	4608      	mov	r0, r1
 8017e92:	4611      	mov	r1, r2
 8017e94:	602b      	str	r3, [r5, #0]
 8017e96:	f7e9 f8d8 	bl	800104a <_fstat>
 8017e9a:	1c43      	adds	r3, r0, #1
 8017e9c:	d102      	bne.n	8017ea4 <_fstat_r+0x1c>
 8017e9e:	682b      	ldr	r3, [r5, #0]
 8017ea0:	b103      	cbz	r3, 8017ea4 <_fstat_r+0x1c>
 8017ea2:	6023      	str	r3, [r4, #0]
 8017ea4:	bd38      	pop	{r3, r4, r5, pc}
 8017ea6:	bf00      	nop
 8017ea8:	240079c4 	.word	0x240079c4

08017eac <_isatty_r>:
 8017eac:	b538      	push	{r3, r4, r5, lr}
 8017eae:	4d06      	ldr	r5, [pc, #24]	; (8017ec8 <_isatty_r+0x1c>)
 8017eb0:	2300      	movs	r3, #0
 8017eb2:	4604      	mov	r4, r0
 8017eb4:	4608      	mov	r0, r1
 8017eb6:	602b      	str	r3, [r5, #0]
 8017eb8:	f7e9 f8d7 	bl	800106a <_isatty>
 8017ebc:	1c43      	adds	r3, r0, #1
 8017ebe:	d102      	bne.n	8017ec6 <_isatty_r+0x1a>
 8017ec0:	682b      	ldr	r3, [r5, #0]
 8017ec2:	b103      	cbz	r3, 8017ec6 <_isatty_r+0x1a>
 8017ec4:	6023      	str	r3, [r4, #0]
 8017ec6:	bd38      	pop	{r3, r4, r5, pc}
 8017ec8:	240079c4 	.word	0x240079c4

08017ecc <_init>:
 8017ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017ece:	bf00      	nop
 8017ed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017ed2:	bc08      	pop	{r3}
 8017ed4:	469e      	mov	lr, r3
 8017ed6:	4770      	bx	lr

08017ed8 <_fini>:
 8017ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017eda:	bf00      	nop
 8017edc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017ede:	bc08      	pop	{r3}
 8017ee0:	469e      	mov	lr, r3
 8017ee2:	4770      	bx	lr
