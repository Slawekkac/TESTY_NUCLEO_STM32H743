
Test1_CAN2_NUCLEO-H743ZI2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000605c  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  080062f4  080062f4  000162f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006388  08006388  00016388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006390  08006390  00016390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08006394  08006394  00016394  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  20000000  08006398  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000023c  20000010  080063a8  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2000024c  080063a8  0002024c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001974f  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000026a4  00000000  00000000  0003978d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000d58  00000000  00000000  0003be38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000cb0  00000000  00000000  0003cb90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00035f57  00000000  00000000  0003d840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000e71d  00000000  00000000  00073797  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015dac5  00000000  00000000  00081eb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001df979  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000038ec  00000000  00000000  001df9cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	20000010 	.word	0x20000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080062dc 	.word	0x080062dc

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	20000014 	.word	0x20000014
 80002d4:	080062dc 	.word	0x080062dc

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d4:	f000 fd3c 	bl	8001050 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d8:	f000 f85c 	bl	8000694 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005dc:	f000 f9e4 	bl	80009a8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005e0:	f000 f996 	bl	8000910 <MX_USART3_UART_Init>
  MX_FDCAN2_Init();
 80005e4:	f000 f8dc 	bl	80007a0 <MX_FDCAN2_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (Timer_sys[1] == 0)
 80005e8:	4b21      	ldr	r3, [pc, #132]	; (8000670 <main+0xa0>)
 80005ea:	885b      	ldrh	r3, [r3, #2]
 80005ec:	b29b      	uxth	r3, r3
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d1fa      	bne.n	80005e8 <main+0x18>
	  {
		 Timer_sys[1] = 100;
 80005f2:	4b1f      	ldr	r3, [pc, #124]	; (8000670 <main+0xa0>)
 80005f4:	2264      	movs	r2, #100	; 0x64
 80005f6:	805a      	strh	r2, [r3, #2]
		 HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 80005f8:	2102      	movs	r1, #2
 80005fa:	481e      	ldr	r0, [pc, #120]	; (8000674 <main+0xa4>)
 80005fc:	f002 fac1 	bl	8002b82 <HAL_GPIO_TogglePin>
		  my_Data_Can++;
 8000600:	4b1d      	ldr	r3, [pc, #116]	; (8000678 <main+0xa8>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	3301      	adds	r3, #1
 8000606:	4a1c      	ldr	r2, [pc, #112]	; (8000678 <main+0xa8>)
 8000608:	6013      	str	r3, [r2, #0]
		  myTxData[0] = my_Data_Can;
 800060a:	4b1b      	ldr	r3, [pc, #108]	; (8000678 <main+0xa8>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	b2da      	uxtb	r2, r3
 8000610:	4b1a      	ldr	r3, [pc, #104]	; (800067c <main+0xac>)
 8000612:	701a      	strb	r2, [r3, #0]
		  myTxData[1] = my_Data_Can >> 8;
 8000614:	4b18      	ldr	r3, [pc, #96]	; (8000678 <main+0xa8>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	0a1b      	lsrs	r3, r3, #8
 800061a:	b2da      	uxtb	r2, r3
 800061c:	4b17      	ldr	r3, [pc, #92]	; (800067c <main+0xac>)
 800061e:	705a      	strb	r2, [r3, #1]
		  myTxData[2] = my_Data_Can >> 16;
 8000620:	4b15      	ldr	r3, [pc, #84]	; (8000678 <main+0xa8>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	0c1b      	lsrs	r3, r3, #16
 8000626:	b2da      	uxtb	r2, r3
 8000628:	4b14      	ldr	r3, [pc, #80]	; (800067c <main+0xac>)
 800062a:	709a      	strb	r2, [r3, #2]
		  myTxData[3] = my_Data_Can >> 24;
 800062c:	4b12      	ldr	r3, [pc, #72]	; (8000678 <main+0xa8>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	0e1b      	lsrs	r3, r3, #24
 8000632:	b2da      	uxtb	r2, r3
 8000634:	4b11      	ldr	r3, [pc, #68]	; (800067c <main+0xac>)
 8000636:	70da      	strb	r2, [r3, #3]
		  //HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, myTxData);
		  //g_CAN_Error = HAL_FDCAN_GetError(&hfdcan1);
		  //g_CAN_State = HAL_FDCAN_GetState(&hfdcan1);

		  HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader, myTxData);
 8000638:	4a10      	ldr	r2, [pc, #64]	; (800067c <main+0xac>)
 800063a:	4911      	ldr	r1, [pc, #68]	; (8000680 <main+0xb0>)
 800063c:	4811      	ldr	r0, [pc, #68]	; (8000684 <main+0xb4>)
 800063e:	f001 f96b 	bl	8001918 <HAL_FDCAN_AddMessageToTxFifoQ>
		  g_CAN_Error = HAL_FDCAN_GetError(&hfdcan2);
 8000642:	4810      	ldr	r0, [pc, #64]	; (8000684 <main+0xb4>)
 8000644:	f001 fec3 	bl	80023ce <HAL_FDCAN_GetError>
 8000648:	4603      	mov	r3, r0
 800064a:	4a0f      	ldr	r2, [pc, #60]	; (8000688 <main+0xb8>)
 800064c:	6013      	str	r3, [r2, #0]
		  g_CAN_State = HAL_FDCAN_GetState(&hfdcan2);
 800064e:	480d      	ldr	r0, [pc, #52]	; (8000684 <main+0xb4>)
 8000650:	f001 feaf 	bl	80023b2 <HAL_FDCAN_GetState>
 8000654:	4603      	mov	r3, r0
 8000656:	461a      	mov	r2, r3
 8000658:	4b0c      	ldr	r3, [pc, #48]	; (800068c <main+0xbc>)
 800065a:	701a      	strb	r2, [r3, #0]
		  if (g_CAN_Error != 0) HAL_GPIO_TogglePin(LD3_GPIO_Port,LD3_Pin);
 800065c:	4b0a      	ldr	r3, [pc, #40]	; (8000688 <main+0xb8>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d0c1      	beq.n	80005e8 <main+0x18>
 8000664:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000668:	4809      	ldr	r0, [pc, #36]	; (8000690 <main+0xc0>)
 800066a:	f002 fa8a 	bl	8002b82 <HAL_GPIO_TogglePin>
	  if (Timer_sys[1] == 0)
 800066e:	e7bb      	b.n	80005e8 <main+0x18>
 8000670:	2000012c 	.word	0x2000012c
 8000674:	58021000 	.word	0x58021000
 8000678:	20000240 	.word	0x20000240
 800067c:	200000f4 	.word	0x200000f4
 8000680:	20000154 	.word	0x20000154
 8000684:	200001a0 	.word	0x200001a0
 8000688:	20000100 	.word	0x20000100
 800068c:	200000f0 	.word	0x200000f0
 8000690:	58020400 	.word	0x58020400

08000694 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b09c      	sub	sp, #112	; 0x70
 8000698:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800069e:	224c      	movs	r2, #76	; 0x4c
 80006a0:	2100      	movs	r1, #0
 80006a2:	4618      	mov	r0, r3
 80006a4:	f005 fe12 	bl	80062cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a8:	1d3b      	adds	r3, r7, #4
 80006aa:	2220      	movs	r2, #32
 80006ac:	2100      	movs	r1, #0
 80006ae:	4618      	mov	r0, r3
 80006b0:	f005 fe0c 	bl	80062cc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80006b4:	2002      	movs	r0, #2
 80006b6:	f002 fa7f 	bl	8002bb8 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80006ba:	2300      	movs	r3, #0
 80006bc:	603b      	str	r3, [r7, #0]
 80006be:	4b35      	ldr	r3, [pc, #212]	; (8000794 <SystemClock_Config+0x100>)
 80006c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006c2:	4a34      	ldr	r2, [pc, #208]	; (8000794 <SystemClock_Config+0x100>)
 80006c4:	f023 0301 	bic.w	r3, r3, #1
 80006c8:	62d3      	str	r3, [r2, #44]	; 0x2c
 80006ca:	4b32      	ldr	r3, [pc, #200]	; (8000794 <SystemClock_Config+0x100>)
 80006cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006ce:	f003 0301 	and.w	r3, r3, #1
 80006d2:	603b      	str	r3, [r7, #0]
 80006d4:	4b30      	ldr	r3, [pc, #192]	; (8000798 <SystemClock_Config+0x104>)
 80006d6:	699b      	ldr	r3, [r3, #24]
 80006d8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006dc:	4a2e      	ldr	r2, [pc, #184]	; (8000798 <SystemClock_Config+0x104>)
 80006de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006e2:	6193      	str	r3, [r2, #24]
 80006e4:	4b2c      	ldr	r3, [pc, #176]	; (8000798 <SystemClock_Config+0x104>)
 80006e6:	699b      	ldr	r3, [r3, #24]
 80006e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006ec:	603b      	str	r3, [r7, #0]
 80006ee:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006f0:	bf00      	nop
 80006f2:	4b29      	ldr	r3, [pc, #164]	; (8000798 <SystemClock_Config+0x104>)
 80006f4:	699b      	ldr	r3, [r3, #24]
 80006f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80006fe:	d1f8      	bne.n	80006f2 <SystemClock_Config+0x5e>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000700:	4b26      	ldr	r3, [pc, #152]	; (800079c <SystemClock_Config+0x108>)
 8000702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000704:	f023 0303 	bic.w	r3, r3, #3
 8000708:	4a24      	ldr	r2, [pc, #144]	; (800079c <SystemClock_Config+0x108>)
 800070a:	f043 0302 	orr.w	r3, r3, #2
 800070e:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000710:	2301      	movs	r3, #1
 8000712:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000714:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000718:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800071a:	2302      	movs	r3, #2
 800071c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800071e:	2302      	movs	r3, #2
 8000720:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000722:	2301      	movs	r3, #1
 8000724:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000726:	233c      	movs	r3, #60	; 0x3c
 8000728:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800072a:	2302      	movs	r3, #2
 800072c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 12;
 800072e:	230c      	movs	r3, #12
 8000730:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000732:	2302      	movs	r3, #2
 8000734:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000736:	230c      	movs	r3, #12
 8000738:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800073a:	2300      	movs	r3, #0
 800073c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800073e:	2300      	movs	r3, #0
 8000740:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000742:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000746:	4618      	mov	r0, r3
 8000748:	f002 fa70 	bl	8002c2c <HAL_RCC_OscConfig>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000752:	f000 fa8d 	bl	8000c70 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000756:	233f      	movs	r3, #63	; 0x3f
 8000758:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800075a:	2303      	movs	r3, #3
 800075c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800075e:	2300      	movs	r3, #0
 8000760:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000762:	2308      	movs	r3, #8
 8000764:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000766:	2300      	movs	r3, #0
 8000768:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800076a:	2340      	movs	r3, #64	; 0x40
 800076c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800076e:	2300      	movs	r3, #0
 8000770:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000772:	2300      	movs	r3, #0
 8000774:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000776:	1d3b      	adds	r3, r7, #4
 8000778:	2102      	movs	r1, #2
 800077a:	4618      	mov	r0, r3
 800077c:	f002 fe66 	bl	800344c <HAL_RCC_ClockConfig>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8000786:	f000 fa73 	bl	8000c70 <Error_Handler>
  }
}
 800078a:	bf00      	nop
 800078c:	3770      	adds	r7, #112	; 0x70
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	58000400 	.word	0x58000400
 8000798:	58024800 	.word	0x58024800
 800079c:	58024400 	.word	0x58024400

080007a0 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b08a      	sub	sp, #40	; 0x28
 80007a4:	af02      	add	r7, sp, #8
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 80007a6:	4b57      	ldr	r3, [pc, #348]	; (8000904 <MX_FDCAN2_Init+0x164>)
 80007a8:	4a57      	ldr	r2, [pc, #348]	; (8000908 <MX_FDCAN2_Init+0x168>)
 80007aa:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80007ac:	4b55      	ldr	r3, [pc, #340]	; (8000904 <MX_FDCAN2_Init+0x164>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 80007b2:	4b54      	ldr	r3, [pc, #336]	; (8000904 <MX_FDCAN2_Init+0x164>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = ENABLE;
 80007b8:	4b52      	ldr	r3, [pc, #328]	; (8000904 <MX_FDCAN2_Init+0x164>)
 80007ba:	2201      	movs	r2, #1
 80007bc:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 80007be:	4b51      	ldr	r3, [pc, #324]	; (8000904 <MX_FDCAN2_Init+0x164>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = ENABLE;
 80007c4:	4b4f      	ldr	r3, [pc, #316]	; (8000904 <MX_FDCAN2_Init+0x164>)
 80007c6:	2201      	movs	r2, #1
 80007c8:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 80007ca:	4b4e      	ldr	r3, [pc, #312]	; (8000904 <MX_FDCAN2_Init+0x164>)
 80007cc:	2201      	movs	r2, #1
 80007ce:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 8;
 80007d0:	4b4c      	ldr	r3, [pc, #304]	; (8000904 <MX_FDCAN2_Init+0x164>)
 80007d2:	2208      	movs	r2, #8
 80007d4:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 31;
 80007d6:	4b4b      	ldr	r3, [pc, #300]	; (8000904 <MX_FDCAN2_Init+0x164>)
 80007d8:	221f      	movs	r2, #31
 80007da:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 8;
 80007dc:	4b49      	ldr	r3, [pc, #292]	; (8000904 <MX_FDCAN2_Init+0x164>)
 80007de:	2208      	movs	r2, #8
 80007e0:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 80007e2:	4b48      	ldr	r3, [pc, #288]	; (8000904 <MX_FDCAN2_Init+0x164>)
 80007e4:	2201      	movs	r2, #1
 80007e6:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 80007e8:	4b46      	ldr	r3, [pc, #280]	; (8000904 <MX_FDCAN2_Init+0x164>)
 80007ea:	2201      	movs	r2, #1
 80007ec:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 80007ee:	4b45      	ldr	r3, [pc, #276]	; (8000904 <MX_FDCAN2_Init+0x164>)
 80007f0:	2201      	movs	r2, #1
 80007f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 80007f4:	4b43      	ldr	r3, [pc, #268]	; (8000904 <MX_FDCAN2_Init+0x164>)
 80007f6:	2201      	movs	r2, #1
 80007f8:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 80007fa:	4b42      	ldr	r3, [pc, #264]	; (8000904 <MX_FDCAN2_Init+0x164>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 1;
 8000800:	4b40      	ldr	r3, [pc, #256]	; (8000904 <MX_FDCAN2_Init+0x164>)
 8000802:	2201      	movs	r2, #1
 8000804:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000806:	4b3f      	ldr	r3, [pc, #252]	; (8000904 <MX_FDCAN2_Init+0x164>)
 8000808:	2200      	movs	r2, #0
 800080a:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 1;
 800080c:	4b3d      	ldr	r3, [pc, #244]	; (8000904 <MX_FDCAN2_Init+0x164>)
 800080e:	2201      	movs	r2, #1
 8000810:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000812:	4b3c      	ldr	r3, [pc, #240]	; (8000904 <MX_FDCAN2_Init+0x164>)
 8000814:	2204      	movs	r2, #4
 8000816:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 8000818:	4b3a      	ldr	r3, [pc, #232]	; (8000904 <MX_FDCAN2_Init+0x164>)
 800081a:	2200      	movs	r2, #0
 800081c:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 800081e:	4b39      	ldr	r3, [pc, #228]	; (8000904 <MX_FDCAN2_Init+0x164>)
 8000820:	2204      	movs	r2, #4
 8000822:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8000824:	4b37      	ldr	r3, [pc, #220]	; (8000904 <MX_FDCAN2_Init+0x164>)
 8000826:	2200      	movs	r2, #0
 8000828:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 800082a:	4b36      	ldr	r3, [pc, #216]	; (8000904 <MX_FDCAN2_Init+0x164>)
 800082c:	2204      	movs	r2, #4
 800082e:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8000830:	4b34      	ldr	r3, [pc, #208]	; (8000904 <MX_FDCAN2_Init+0x164>)
 8000832:	2200      	movs	r2, #0
 8000834:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8000836:	4b33      	ldr	r3, [pc, #204]	; (8000904 <MX_FDCAN2_Init+0x164>)
 8000838:	2200      	movs	r2, #0
 800083a:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 1;
 800083c:	4b31      	ldr	r3, [pc, #196]	; (8000904 <MX_FDCAN2_Init+0x164>)
 800083e:	2201      	movs	r2, #1
 8000840:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000842:	4b30      	ldr	r3, [pc, #192]	; (8000904 <MX_FDCAN2_Init+0x164>)
 8000844:	2200      	movs	r2, #0
 8000846:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000848:	4b2e      	ldr	r3, [pc, #184]	; (8000904 <MX_FDCAN2_Init+0x164>)
 800084a:	2204      	movs	r2, #4
 800084c:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 800084e:	482d      	ldr	r0, [pc, #180]	; (8000904 <MX_FDCAN2_Init+0x164>)
 8000850:	f000 fdb2 	bl	80013b8 <HAL_FDCAN_Init>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_FDCAN2_Init+0xbe>
  {
    Error_Handler();
 800085a:	f000 fa09 	bl	8000c70 <Error_Handler>
  /* USER CODE BEGIN FDCAN2_Init 2 */

  FDCAN_FilterTypeDef sFilterConfig;

  /* Configure Rx filter */
  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 800085e:	2300      	movs	r3, #0
 8000860:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIndex = 0;
 8000862:	2300      	movs	r3, #0
 8000864:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8000866:	2302      	movs	r3, #2
 8000868:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 800086a:	2301      	movs	r3, #1
 800086c:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterID1 = 0x321;
 800086e:	f240 3321 	movw	r3, #801	; 0x321
 8000872:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterID2 = 0x7FF;
 8000874:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000878:	617b      	str	r3, [r7, #20]
  if (HAL_FDCAN_ConfigFilter(&hfdcan2, &sFilterConfig) != HAL_OK)
 800087a:	463b      	mov	r3, r7
 800087c:	4619      	mov	r1, r3
 800087e:	4821      	ldr	r0, [pc, #132]	; (8000904 <MX_FDCAN2_Init+0x164>)
 8000880:	f000 ff7c 	bl	800177c <HAL_FDCAN_ConfigFilter>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_FDCAN2_Init+0xee>
  {
    /* Filter configuration Error */
    Error_Handler();
 800088a:	f000 f9f1 	bl	8000c70 <Error_Handler>
  }

  /* Configure global filter to reject all non-matching frames */
  HAL_FDCAN_ConfigGlobalFilter(&hfdcan2, FDCAN_REJECT, FDCAN_REJECT, FDCAN_REJECT_REMOTE, FDCAN_REJECT_REMOTE);
 800088e:	2301      	movs	r3, #1
 8000890:	9300      	str	r3, [sp, #0]
 8000892:	2301      	movs	r3, #1
 8000894:	2202      	movs	r2, #2
 8000896:	2102      	movs	r1, #2
 8000898:	481a      	ldr	r0, [pc, #104]	; (8000904 <MX_FDCAN2_Init+0x164>)
 800089a:	f000 ffe5 	bl	8001868 <HAL_FDCAN_ConfigGlobalFilter>

  /* Start the FDCAN module */
  if (HAL_FDCAN_Start(&hfdcan2) != HAL_OK)
 800089e:	4819      	ldr	r0, [pc, #100]	; (8000904 <MX_FDCAN2_Init+0x164>)
 80008a0:	f001 f80f 	bl	80018c2 <HAL_FDCAN_Start>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_FDCAN2_Init+0x10e>
  {
    /* Start Error */
    Error_Handler();
 80008aa:	f000 f9e1 	bl	8000c70 <Error_Handler>
  }

  if (HAL_FDCAN_ActivateNotification(&hfdcan2, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 80008ae:	2200      	movs	r2, #0
 80008b0:	2101      	movs	r1, #1
 80008b2:	4814      	ldr	r0, [pc, #80]	; (8000904 <MX_FDCAN2_Init+0x164>)
 80008b4:	f001 f9fa 	bl	8001cac <HAL_FDCAN_ActivateNotification>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_FDCAN2_Init+0x122>
  {
    /* Notification Error */
    Error_Handler();
 80008be:	f000 f9d7 	bl	8000c70 <Error_Handler>
  }

  /* Prepare Tx Header */
  TxHeader.Identifier = 0x321;
 80008c2:	4b12      	ldr	r3, [pc, #72]	; (800090c <MX_FDCAN2_Init+0x16c>)
 80008c4:	f240 3221 	movw	r2, #801	; 0x321
 80008c8:	601a      	str	r2, [r3, #0]
  TxHeader.IdType = FDCAN_STANDARD_ID;
 80008ca:	4b10      	ldr	r3, [pc, #64]	; (800090c <MX_FDCAN2_Init+0x16c>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	605a      	str	r2, [r3, #4]
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 80008d0:	4b0e      	ldr	r3, [pc, #56]	; (800090c <MX_FDCAN2_Init+0x16c>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	609a      	str	r2, [r3, #8]
  TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 80008d6:	4b0d      	ldr	r3, [pc, #52]	; (800090c <MX_FDCAN2_Init+0x16c>)
 80008d8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80008dc:	60da      	str	r2, [r3, #12]
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80008de:	4b0b      	ldr	r3, [pc, #44]	; (800090c <MX_FDCAN2_Init+0x16c>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	611a      	str	r2, [r3, #16]
  TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 80008e4:	4b09      	ldr	r3, [pc, #36]	; (800090c <MX_FDCAN2_Init+0x16c>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	615a      	str	r2, [r3, #20]
  TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 80008ea:	4b08      	ldr	r3, [pc, #32]	; (800090c <MX_FDCAN2_Init+0x16c>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	619a      	str	r2, [r3, #24]
  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80008f0:	4b06      	ldr	r3, [pc, #24]	; (800090c <MX_FDCAN2_Init+0x16c>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	61da      	str	r2, [r3, #28]
  TxHeader.MessageMarker = 0;
 80008f6:	4b05      	ldr	r3, [pc, #20]	; (800090c <MX_FDCAN2_Init+0x16c>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	621a      	str	r2, [r3, #32]

  /* USER CODE END FDCAN2_Init 2 */

}
 80008fc:	bf00      	nop
 80008fe:	3720      	adds	r7, #32
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	200001a0 	.word	0x200001a0
 8000908:	4000a400 	.word	0x4000a400
 800090c:	20000154 	.word	0x20000154

08000910 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000914:	4b22      	ldr	r3, [pc, #136]	; (80009a0 <MX_USART3_UART_Init+0x90>)
 8000916:	4a23      	ldr	r2, [pc, #140]	; (80009a4 <MX_USART3_UART_Init+0x94>)
 8000918:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800091a:	4b21      	ldr	r3, [pc, #132]	; (80009a0 <MX_USART3_UART_Init+0x90>)
 800091c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000920:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000922:	4b1f      	ldr	r3, [pc, #124]	; (80009a0 <MX_USART3_UART_Init+0x90>)
 8000924:	2200      	movs	r2, #0
 8000926:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000928:	4b1d      	ldr	r3, [pc, #116]	; (80009a0 <MX_USART3_UART_Init+0x90>)
 800092a:	2200      	movs	r2, #0
 800092c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800092e:	4b1c      	ldr	r3, [pc, #112]	; (80009a0 <MX_USART3_UART_Init+0x90>)
 8000930:	2200      	movs	r2, #0
 8000932:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000934:	4b1a      	ldr	r3, [pc, #104]	; (80009a0 <MX_USART3_UART_Init+0x90>)
 8000936:	220c      	movs	r2, #12
 8000938:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800093a:	4b19      	ldr	r3, [pc, #100]	; (80009a0 <MX_USART3_UART_Init+0x90>)
 800093c:	2200      	movs	r2, #0
 800093e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000940:	4b17      	ldr	r3, [pc, #92]	; (80009a0 <MX_USART3_UART_Init+0x90>)
 8000942:	2200      	movs	r2, #0
 8000944:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000946:	4b16      	ldr	r3, [pc, #88]	; (80009a0 <MX_USART3_UART_Init+0x90>)
 8000948:	2200      	movs	r2, #0
 800094a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800094c:	4b14      	ldr	r3, [pc, #80]	; (80009a0 <MX_USART3_UART_Init+0x90>)
 800094e:	2200      	movs	r2, #0
 8000950:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000952:	4b13      	ldr	r3, [pc, #76]	; (80009a0 <MX_USART3_UART_Init+0x90>)
 8000954:	2200      	movs	r2, #0
 8000956:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000958:	4811      	ldr	r0, [pc, #68]	; (80009a0 <MX_USART3_UART_Init+0x90>)
 800095a:	f004 fc65 	bl	8005228 <HAL_UART_Init>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000964:	f000 f984 	bl	8000c70 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000968:	2100      	movs	r1, #0
 800096a:	480d      	ldr	r0, [pc, #52]	; (80009a0 <MX_USART3_UART_Init+0x90>)
 800096c:	f005 fbb2 	bl	80060d4 <HAL_UARTEx_SetTxFifoThreshold>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000976:	f000 f97b 	bl	8000c70 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800097a:	2100      	movs	r1, #0
 800097c:	4808      	ldr	r0, [pc, #32]	; (80009a0 <MX_USART3_UART_Init+0x90>)
 800097e:	f005 fbe7 	bl	8006150 <HAL_UARTEx_SetRxFifoThreshold>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000988:	f000 f972 	bl	8000c70 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800098c:	4804      	ldr	r0, [pc, #16]	; (80009a0 <MX_USART3_UART_Init+0x90>)
 800098e:	f005 fb68 	bl	8006062 <HAL_UARTEx_DisableFifoMode>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000998:	f000 f96a 	bl	8000c70 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800099c:	bf00      	nop
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	20000058 	.word	0x20000058
 80009a4:	40004800 	.word	0x40004800

080009a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b08c      	sub	sp, #48	; 0x30
 80009ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ae:	f107 031c 	add.w	r3, r7, #28
 80009b2:	2200      	movs	r2, #0
 80009b4:	601a      	str	r2, [r3, #0]
 80009b6:	605a      	str	r2, [r3, #4]
 80009b8:	609a      	str	r2, [r3, #8]
 80009ba:	60da      	str	r2, [r3, #12]
 80009bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009be:	4b62      	ldr	r3, [pc, #392]	; (8000b48 <MX_GPIO_Init+0x1a0>)
 80009c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c4:	4a60      	ldr	r2, [pc, #384]	; (8000b48 <MX_GPIO_Init+0x1a0>)
 80009c6:	f043 0304 	orr.w	r3, r3, #4
 80009ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009ce:	4b5e      	ldr	r3, [pc, #376]	; (8000b48 <MX_GPIO_Init+0x1a0>)
 80009d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d4:	f003 0304 	and.w	r3, r3, #4
 80009d8:	61bb      	str	r3, [r7, #24]
 80009da:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009dc:	4b5a      	ldr	r3, [pc, #360]	; (8000b48 <MX_GPIO_Init+0x1a0>)
 80009de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e2:	4a59      	ldr	r2, [pc, #356]	; (8000b48 <MX_GPIO_Init+0x1a0>)
 80009e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009ec:	4b56      	ldr	r3, [pc, #344]	; (8000b48 <MX_GPIO_Init+0x1a0>)
 80009ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009f6:	617b      	str	r3, [r7, #20]
 80009f8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009fa:	4b53      	ldr	r3, [pc, #332]	; (8000b48 <MX_GPIO_Init+0x1a0>)
 80009fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a00:	4a51      	ldr	r2, [pc, #324]	; (8000b48 <MX_GPIO_Init+0x1a0>)
 8000a02:	f043 0302 	orr.w	r3, r3, #2
 8000a06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a0a:	4b4f      	ldr	r3, [pc, #316]	; (8000b48 <MX_GPIO_Init+0x1a0>)
 8000a0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a10:	f003 0302 	and.w	r3, r3, #2
 8000a14:	613b      	str	r3, [r7, #16]
 8000a16:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a18:	4b4b      	ldr	r3, [pc, #300]	; (8000b48 <MX_GPIO_Init+0x1a0>)
 8000a1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a1e:	4a4a      	ldr	r2, [pc, #296]	; (8000b48 <MX_GPIO_Init+0x1a0>)
 8000a20:	f043 0308 	orr.w	r3, r3, #8
 8000a24:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a28:	4b47      	ldr	r3, [pc, #284]	; (8000b48 <MX_GPIO_Init+0x1a0>)
 8000a2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a2e:	f003 0308 	and.w	r3, r3, #8
 8000a32:	60fb      	str	r3, [r7, #12]
 8000a34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a36:	4b44      	ldr	r3, [pc, #272]	; (8000b48 <MX_GPIO_Init+0x1a0>)
 8000a38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a3c:	4a42      	ldr	r2, [pc, #264]	; (8000b48 <MX_GPIO_Init+0x1a0>)
 8000a3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a42:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a46:	4b40      	ldr	r3, [pc, #256]	; (8000b48 <MX_GPIO_Init+0x1a0>)
 8000a48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a50:	60bb      	str	r3, [r7, #8]
 8000a52:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a54:	4b3c      	ldr	r3, [pc, #240]	; (8000b48 <MX_GPIO_Init+0x1a0>)
 8000a56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a5a:	4a3b      	ldr	r2, [pc, #236]	; (8000b48 <MX_GPIO_Init+0x1a0>)
 8000a5c:	f043 0310 	orr.w	r3, r3, #16
 8000a60:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a64:	4b38      	ldr	r3, [pc, #224]	; (8000b48 <MX_GPIO_Init+0x1a0>)
 8000a66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a6a:	f003 0310 	and.w	r3, r3, #16
 8000a6e:	607b      	str	r3, [r7, #4]
 8000a70:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000a72:	2200      	movs	r2, #0
 8000a74:	f244 0101 	movw	r1, #16385	; 0x4001
 8000a78:	4834      	ldr	r0, [pc, #208]	; (8000b4c <MX_GPIO_Init+0x1a4>)
 8000a7a:	f002 f869 	bl	8002b50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000a7e:	2200      	movs	r2, #0
 8000a80:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a84:	4832      	ldr	r0, [pc, #200]	; (8000b50 <MX_GPIO_Init+0x1a8>)
 8000a86:	f002 f863 	bl	8002b50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	2102      	movs	r1, #2
 8000a8e:	4831      	ldr	r0, [pc, #196]	; (8000b54 <MX_GPIO_Init+0x1ac>)
 8000a90:	f002 f85e 	bl	8002b50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000aa2:	f107 031c 	add.w	r3, r7, #28
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	482b      	ldr	r0, [pc, #172]	; (8000b58 <MX_GPIO_Init+0x1b0>)
 8000aaa:	f001 fea1 	bl	80027f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000aae:	f244 0301 	movw	r3, #16385	; 0x4001
 8000ab2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000abc:	2300      	movs	r3, #0
 8000abe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac0:	f107 031c 	add.w	r3, r7, #28
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4821      	ldr	r0, [pc, #132]	; (8000b4c <MX_GPIO_Init+0x1a4>)
 8000ac8:	f001 fe92 	bl	80027f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000acc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ad0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ada:	2300      	movs	r3, #0
 8000adc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000ade:	f107 031c 	add.w	r3, r7, #28
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	481a      	ldr	r0, [pc, #104]	; (8000b50 <MX_GPIO_Init+0x1a8>)
 8000ae6:	f001 fe83 	bl	80027f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000aea:	2380      	movs	r3, #128	; 0x80
 8000aec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000aee:	4b1b      	ldr	r3, [pc, #108]	; (8000b5c <MX_GPIO_Init+0x1b4>)
 8000af0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af2:	2300      	movs	r3, #0
 8000af4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000af6:	f107 031c 	add.w	r3, r7, #28
 8000afa:	4619      	mov	r1, r3
 8000afc:	4818      	ldr	r0, [pc, #96]	; (8000b60 <MX_GPIO_Init+0x1b8>)
 8000afe:	f001 fe77 	bl	80027f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b02:	2303      	movs	r3, #3
 8000b04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b06:	2302      	movs	r3, #2
 8000b08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b0e:	2303      	movs	r3, #3
 8000b10:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000b12:	2309      	movs	r3, #9
 8000b14:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b16:	f107 031c 	add.w	r3, r7, #28
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	480c      	ldr	r0, [pc, #48]	; (8000b50 <MX_GPIO_Init+0x1a8>)
 8000b1e:	f001 fe67 	bl	80027f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b22:	2302      	movs	r3, #2
 8000b24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b26:	2301      	movs	r3, #1
 8000b28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b32:	f107 031c 	add.w	r3, r7, #28
 8000b36:	4619      	mov	r1, r3
 8000b38:	4806      	ldr	r0, [pc, #24]	; (8000b54 <MX_GPIO_Init+0x1ac>)
 8000b3a:	f001 fe59 	bl	80027f0 <HAL_GPIO_Init>

}
 8000b3e:	bf00      	nop
 8000b40:	3730      	adds	r7, #48	; 0x30
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	58024400 	.word	0x58024400
 8000b4c:	58020400 	.word	0x58020400
 8000b50:	58020c00 	.word	0x58020c00
 8000b54:	58021000 	.word	0x58021000
 8000b58:	58020800 	.word	0x58020800
 8000b5c:	11110000 	.word	0x11110000
 8000b60:	58021800 	.word	0x58021800

08000b64 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs: indicates which Rx FIFO 0 interrupts are signalled.
  *                     This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
 8000b6c:	6039      	str	r1, [r7, #0]
  if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	f003 0301 	and.w	r3, r3, #1
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d027      	beq.n	8000bc8 <HAL_FDCAN_RxFifo0Callback+0x64>
  {
    /* Retrieve Rx messages from RX FIFO0 */
    if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8000b78:	4b15      	ldr	r3, [pc, #84]	; (8000bd0 <HAL_FDCAN_RxFifo0Callback+0x6c>)
 8000b7a:	4a16      	ldr	r2, [pc, #88]	; (8000bd4 <HAL_FDCAN_RxFifo0Callback+0x70>)
 8000b7c:	2140      	movs	r1, #64	; 0x40
 8000b7e:	6878      	ldr	r0, [r7, #4]
 8000b80:	f000 ff26 	bl	80019d0 <HAL_FDCAN_GetRxMessage>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <HAL_FDCAN_RxFifo0Callback+0x2a>
    {
    /* Reception Error */
    Error_Handler();
 8000b8a:	f000 f871 	bl	8000c70 <Error_Handler>
    }

    //HAL_GPIO_TogglePin(LD3_GPIO_Port,LD3_Pin);

    /* Display LEDx */
    if ((RxHeader.Identifier == 0x321) && (RxHeader.IdType == FDCAN_STANDARD_ID) && (RxHeader.DataLength == FDCAN_DLC_BYTES_8))
 8000b8e:	4b11      	ldr	r3, [pc, #68]	; (8000bd4 <HAL_FDCAN_RxFifo0Callback+0x70>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	f240 3221 	movw	r2, #801	; 0x321
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d10c      	bne.n	8000bb4 <HAL_FDCAN_RxFifo0Callback+0x50>
 8000b9a:	4b0e      	ldr	r3, [pc, #56]	; (8000bd4 <HAL_FDCAN_RxFifo0Callback+0x70>)
 8000b9c:	685b      	ldr	r3, [r3, #4]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d108      	bne.n	8000bb4 <HAL_FDCAN_RxFifo0Callback+0x50>
 8000ba2:	4b0c      	ldr	r3, [pc, #48]	; (8000bd4 <HAL_FDCAN_RxFifo0Callback+0x70>)
 8000ba4:	68db      	ldr	r3, [r3, #12]
 8000ba6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8000baa:	d103      	bne.n	8000bb4 <HAL_FDCAN_RxFifo0Callback+0x50>
    {
      //LED_Display(RxData[0]);
      //ubKeyNumber = RxData[0];
    	HAL_GPIO_TogglePin(LD1_GPIO_Port,LD1_Pin);
 8000bac:	2101      	movs	r1, #1
 8000bae:	480a      	ldr	r0, [pc, #40]	; (8000bd8 <HAL_FDCAN_RxFifo0Callback+0x74>)
 8000bb0:	f001 ffe7 	bl	8002b82 <HAL_GPIO_TogglePin>
    }

    if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	2101      	movs	r1, #1
 8000bb8:	6878      	ldr	r0, [r7, #4]
 8000bba:	f001 f877 	bl	8001cac <HAL_FDCAN_ActivateNotification>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <HAL_FDCAN_RxFifo0Callback+0x64>
    {
      /* Notification Error */
      Error_Handler();
 8000bc4:	f000 f854 	bl	8000c70 <Error_Handler>
    }
  }
}
 8000bc8:	bf00      	nop
 8000bca:	3708      	adds	r7, #8
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	20000148 	.word	0x20000148
 8000bd4:	20000178 	.word	0x20000178
 8000bd8:	58020400 	.word	0x58020400

08000bdc <HAL_SYSTICK_Callback>:

void HAL_SYSTICK_Callback(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
	uint16_t t_timer;
	uint8_t i;

	Licznikms++;                        /* increment counter necessary in Delay() */
 8000be2:	4b1e      	ldr	r3, [pc, #120]	; (8000c5c <HAL_SYSTICK_Callback+0x80>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	3301      	adds	r3, #1
 8000be8:	4a1c      	ldr	r2, [pc, #112]	; (8000c5c <HAL_SYSTICK_Callback+0x80>)
 8000bea:	6013      	str	r3, [r2, #0]
	uwTickms++;
 8000bec:	4b1c      	ldr	r3, [pc, #112]	; (8000c60 <HAL_SYSTICK_Callback+0x84>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	3301      	adds	r3, #1
 8000bf2:	4a1b      	ldr	r2, [pc, #108]	; (8000c60 <HAL_SYSTICK_Callback+0x84>)
 8000bf4:	6013      	str	r3, [r2, #0]
	Tickms++;
 8000bf6:	4b1b      	ldr	r3, [pc, #108]	; (8000c64 <HAL_SYSTICK_Callback+0x88>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	3301      	adds	r3, #1
 8000bfc:	4a19      	ldr	r2, [pc, #100]	; (8000c64 <HAL_SYSTICK_Callback+0x88>)
 8000bfe:	6013      	str	r3, [r2, #0]

	if (Tickms >= 1000)
 8000c00:	4b18      	ldr	r3, [pc, #96]	; (8000c64 <HAL_SYSTICK_Callback+0x88>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000c08:	d307      	bcc.n	8000c1a <HAL_SYSTICK_Callback+0x3e>
	{
		Tickms = 0;
 8000c0a:	4b16      	ldr	r3, [pc, #88]	; (8000c64 <HAL_SYSTICK_Callback+0x88>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	601a      	str	r2, [r3, #0]
		//Ticks++;
		g_COUNT_SEC++;
 8000c10:	4b15      	ldr	r3, [pc, #84]	; (8000c68 <HAL_SYSTICK_Callback+0x8c>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	3301      	adds	r3, #1
 8000c16:	4a14      	ldr	r2, [pc, #80]	; (8000c68 <HAL_SYSTICK_Callback+0x8c>)
 8000c18:	6013      	str	r3, [r2, #0]
	}

	// obsluga timerow systemowych
	for (i = 0; i< ELEMS(Timer_sys); i++)
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	71fb      	strb	r3, [r7, #7]
 8000c1e:	e012      	b.n	8000c46 <HAL_SYSTICK_Callback+0x6a>
	{
		t_timer = Timer_sys[i];
 8000c20:	79fb      	ldrb	r3, [r7, #7]
 8000c22:	4a12      	ldr	r2, [pc, #72]	; (8000c6c <HAL_SYSTICK_Callback+0x90>)
 8000c24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c28:	80bb      	strh	r3, [r7, #4]
		if (t_timer) Timer_sys[i] = --t_timer;
 8000c2a:	88bb      	ldrh	r3, [r7, #4]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d007      	beq.n	8000c40 <HAL_SYSTICK_Callback+0x64>
 8000c30:	88bb      	ldrh	r3, [r7, #4]
 8000c32:	3b01      	subs	r3, #1
 8000c34:	80bb      	strh	r3, [r7, #4]
 8000c36:	79fb      	ldrb	r3, [r7, #7]
 8000c38:	490c      	ldr	r1, [pc, #48]	; (8000c6c <HAL_SYSTICK_Callback+0x90>)
 8000c3a:	88ba      	ldrh	r2, [r7, #4]
 8000c3c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for (i = 0; i< ELEMS(Timer_sys); i++)
 8000c40:	79fb      	ldrb	r3, [r7, #7]
 8000c42:	3301      	adds	r3, #1
 8000c44:	71fb      	strb	r3, [r7, #7]
 8000c46:	79fb      	ldrb	r3, [r7, #7]
 8000c48:	2b05      	cmp	r3, #5
 8000c4a:	d9e9      	bls.n	8000c20 <HAL_SYSTICK_Callback+0x44>

	}
}
 8000c4c:	bf00      	nop
 8000c4e:	bf00      	nop
 8000c50:	370c      	adds	r7, #12
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop
 8000c5c:	20000150 	.word	0x20000150
 8000c60:	200000fc 	.word	0x200000fc
 8000c64:	200000ec 	.word	0x200000ec
 8000c68:	20000244 	.word	0x20000244
 8000c6c:	2000012c 	.word	0x2000012c

08000c70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c74:	b672      	cpsid	i
}
 8000c76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c78:	e7fe      	b.n	8000c78 <Error_Handler+0x8>
	...

08000c7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c82:	4b0a      	ldr	r3, [pc, #40]	; (8000cac <HAL_MspInit+0x30>)
 8000c84:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c88:	4a08      	ldr	r2, [pc, #32]	; (8000cac <HAL_MspInit+0x30>)
 8000c8a:	f043 0302 	orr.w	r3, r3, #2
 8000c8e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000c92:	4b06      	ldr	r3, [pc, #24]	; (8000cac <HAL_MspInit+0x30>)
 8000c94:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c98:	f003 0302 	and.w	r3, r3, #2
 8000c9c:	607b      	str	r3, [r7, #4]
 8000c9e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ca0:	bf00      	nop
 8000ca2:	370c      	adds	r7, #12
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr
 8000cac:	58024400 	.word	0x58024400

08000cb0 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b0b8      	sub	sp, #224	; 0xe0
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	601a      	str	r2, [r3, #0]
 8000cc0:	605a      	str	r2, [r3, #4]
 8000cc2:	609a      	str	r2, [r3, #8]
 8000cc4:	60da      	str	r2, [r3, #12]
 8000cc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cc8:	f107 0310 	add.w	r3, r7, #16
 8000ccc:	22bc      	movs	r2, #188	; 0xbc
 8000cce:	2100      	movs	r1, #0
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f005 fafb 	bl	80062cc <memset>
  if(hfdcan->Instance==FDCAN2)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	4a31      	ldr	r2, [pc, #196]	; (8000da0 <HAL_FDCAN_MspInit+0xf0>)
 8000cdc:	4293      	cmp	r3, r2
 8000cde:	d15b      	bne.n	8000d98 <HAL_FDCAN_MspInit+0xe8>
  /* USER CODE BEGIN FDCAN2_MspInit 0 */

  /* USER CODE END FDCAN2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000ce0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ce4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2N = 140;
 8000cea:	238c      	movs	r3, #140	; 0x8c
 8000cec:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000cee:	2302      	movs	r3, #2
 8000cf0:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2Q = 14;
 8000cf2:	230e      	movs	r3, #14
 8000cf4:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000cf6:	2302      	movs	r3, #2
 8000cf8:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 8000cfa:	2380      	movs	r3, #128	; 0x80
 8000cfc:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000d02:	2300      	movs	r3, #0
 8000d04:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2;
 8000d06:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000d0a:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d0c:	f107 0310 	add.w	r3, r7, #16
 8000d10:	4618      	mov	r0, r3
 8000d12:	f002 ff27 	bl	8003b64 <HAL_RCCEx_PeriphCLKConfig>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <HAL_FDCAN_MspInit+0x70>
    {
      Error_Handler();
 8000d1c:	f7ff ffa8 	bl	8000c70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000d20:	4b20      	ldr	r3, [pc, #128]	; (8000da4 <HAL_FDCAN_MspInit+0xf4>)
 8000d22:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000d26:	4a1f      	ldr	r2, [pc, #124]	; (8000da4 <HAL_FDCAN_MspInit+0xf4>)
 8000d28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d2c:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8000d30:	4b1c      	ldr	r3, [pc, #112]	; (8000da4 <HAL_FDCAN_MspInit+0xf4>)
 8000d32:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000d36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d3a:	60fb      	str	r3, [r7, #12]
 8000d3c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d3e:	4b19      	ldr	r3, [pc, #100]	; (8000da4 <HAL_FDCAN_MspInit+0xf4>)
 8000d40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d44:	4a17      	ldr	r2, [pc, #92]	; (8000da4 <HAL_FDCAN_MspInit+0xf4>)
 8000d46:	f043 0302 	orr.w	r3, r3, #2
 8000d4a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d4e:	4b15      	ldr	r3, [pc, #84]	; (8000da4 <HAL_FDCAN_MspInit+0xf4>)
 8000d50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d54:	f003 0302 	and.w	r3, r3, #2
 8000d58:	60bb      	str	r3, [r7, #8]
 8000d5a:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN2 GPIO Configuration
    PB12     ------> FDCAN2_RX
    PB13     ------> FDCAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000d5c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000d60:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d64:	2302      	movs	r3, #2
 8000d66:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d70:	2300      	movs	r3, #0
 8000d72:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8000d76:	2309      	movs	r3, #9
 8000d78:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d7c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000d80:	4619      	mov	r1, r3
 8000d82:	4809      	ldr	r0, [pc, #36]	; (8000da8 <HAL_FDCAN_MspInit+0xf8>)
 8000d84:	f001 fd34 	bl	80027f0 <HAL_GPIO_Init>

    /* FDCAN2 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 0, 0);
 8000d88:	2200      	movs	r2, #0
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	2014      	movs	r0, #20
 8000d8e:	f000 fad8 	bl	8001342 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 8000d92:	2014      	movs	r0, #20
 8000d94:	f000 faef 	bl	8001376 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8000d98:	bf00      	nop
 8000d9a:	37e0      	adds	r7, #224	; 0xe0
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	4000a400 	.word	0x4000a400
 8000da4:	58024400 	.word	0x58024400
 8000da8:	58020400 	.word	0x58020400

08000dac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b0b8      	sub	sp, #224	; 0xe0
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000db8:	2200      	movs	r2, #0
 8000dba:	601a      	str	r2, [r3, #0]
 8000dbc:	605a      	str	r2, [r3, #4]
 8000dbe:	609a      	str	r2, [r3, #8]
 8000dc0:	60da      	str	r2, [r3, #12]
 8000dc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dc4:	f107 0310 	add.w	r3, r7, #16
 8000dc8:	22bc      	movs	r2, #188	; 0xbc
 8000dca:	2100      	movs	r1, #0
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f005 fa7d 	bl	80062cc <memset>
  if(huart->Instance==USART3)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4a25      	ldr	r2, [pc, #148]	; (8000e6c <HAL_UART_MspInit+0xc0>)
 8000dd8:	4293      	cmp	r3, r2
 8000dda:	d142      	bne.n	8000e62 <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000ddc:	2302      	movs	r3, #2
 8000dde:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000de0:	2300      	movs	r3, #0
 8000de2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000de6:	f107 0310 	add.w	r3, r7, #16
 8000dea:	4618      	mov	r0, r3
 8000dec:	f002 feba 	bl	8003b64 <HAL_RCCEx_PeriphCLKConfig>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000df6:	f7ff ff3b 	bl	8000c70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000dfa:	4b1d      	ldr	r3, [pc, #116]	; (8000e70 <HAL_UART_MspInit+0xc4>)
 8000dfc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e00:	4a1b      	ldr	r2, [pc, #108]	; (8000e70 <HAL_UART_MspInit+0xc4>)
 8000e02:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e06:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000e0a:	4b19      	ldr	r3, [pc, #100]	; (8000e70 <HAL_UART_MspInit+0xc4>)
 8000e0c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e14:	60fb      	str	r3, [r7, #12]
 8000e16:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e18:	4b15      	ldr	r3, [pc, #84]	; (8000e70 <HAL_UART_MspInit+0xc4>)
 8000e1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e1e:	4a14      	ldr	r2, [pc, #80]	; (8000e70 <HAL_UART_MspInit+0xc4>)
 8000e20:	f043 0308 	orr.w	r3, r3, #8
 8000e24:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e28:	4b11      	ldr	r3, [pc, #68]	; (8000e70 <HAL_UART_MspInit+0xc4>)
 8000e2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e2e:	f003 0308 	and.w	r3, r3, #8
 8000e32:	60bb      	str	r3, [r7, #8]
 8000e34:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000e36:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e3a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3e:	2302      	movs	r3, #2
 8000e40:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e44:	2300      	movs	r3, #0
 8000e46:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e50:	2307      	movs	r3, #7
 8000e52:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e56:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	4805      	ldr	r0, [pc, #20]	; (8000e74 <HAL_UART_MspInit+0xc8>)
 8000e5e:	f001 fcc7 	bl	80027f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e62:	bf00      	nop
 8000e64:	37e0      	adds	r7, #224	; 0xe0
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	40004800 	.word	0x40004800
 8000e70:	58024400 	.word	0x58024400
 8000e74:	58020c00 	.word	0x58020c00

08000e78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e7c:	e7fe      	b.n	8000e7c <NMI_Handler+0x4>

08000e7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e7e:	b480      	push	{r7}
 8000e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e82:	e7fe      	b.n	8000e82 <HardFault_Handler+0x4>

08000e84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e88:	e7fe      	b.n	8000e88 <MemManage_Handler+0x4>

08000e8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e8a:	b480      	push	{r7}
 8000e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e8e:	e7fe      	b.n	8000e8e <BusFault_Handler+0x4>

08000e90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e94:	e7fe      	b.n	8000e94 <UsageFault_Handler+0x4>

08000e96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e96:	b480      	push	{r7}
 8000e98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e9a:	bf00      	nop
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr

08000ea4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ea8:	bf00      	nop
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr

08000eb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eb6:	bf00      	nop
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr

08000ec0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ec4:	f000 f936 	bl	8001134 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 8000ec8:	f000 fa6f 	bl	80013aa <HAL_SYSTICK_IRQHandler>

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ecc:	bf00      	nop
 8000ece:	bd80      	pop	{r7, pc}

08000ed0 <FDCAN2_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 0.
  */
void FDCAN2_IT0_IRQHandler(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 0 */

  /* USER CODE END FDCAN2_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 8000ed4:	4802      	ldr	r0, [pc, #8]	; (8000ee0 <FDCAN2_IT0_IRQHandler+0x10>)
 8000ed6:	f000 ff63 	bl	8001da0 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 1 */

  /* USER CODE END FDCAN2_IT0_IRQn 1 */
}
 8000eda:	bf00      	nop
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	200001a0 	.word	0x200001a0

08000ee4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000ee8:	4b39      	ldr	r3, [pc, #228]	; (8000fd0 <SystemInit+0xec>)
 8000eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000eee:	4a38      	ldr	r2, [pc, #224]	; (8000fd0 <SystemInit+0xec>)
 8000ef0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ef4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ef8:	4b36      	ldr	r3, [pc, #216]	; (8000fd4 <SystemInit+0xf0>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f003 030f 	and.w	r3, r3, #15
 8000f00:	2b06      	cmp	r3, #6
 8000f02:	d807      	bhi.n	8000f14 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000f04:	4b33      	ldr	r3, [pc, #204]	; (8000fd4 <SystemInit+0xf0>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f023 030f 	bic.w	r3, r3, #15
 8000f0c:	4a31      	ldr	r2, [pc, #196]	; (8000fd4 <SystemInit+0xf0>)
 8000f0e:	f043 0307 	orr.w	r3, r3, #7
 8000f12:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000f14:	4b30      	ldr	r3, [pc, #192]	; (8000fd8 <SystemInit+0xf4>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a2f      	ldr	r2, [pc, #188]	; (8000fd8 <SystemInit+0xf4>)
 8000f1a:	f043 0301 	orr.w	r3, r3, #1
 8000f1e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000f20:	4b2d      	ldr	r3, [pc, #180]	; (8000fd8 <SystemInit+0xf4>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000f26:	4b2c      	ldr	r3, [pc, #176]	; (8000fd8 <SystemInit+0xf4>)
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	492b      	ldr	r1, [pc, #172]	; (8000fd8 <SystemInit+0xf4>)
 8000f2c:	4b2b      	ldr	r3, [pc, #172]	; (8000fdc <SystemInit+0xf8>)
 8000f2e:	4013      	ands	r3, r2
 8000f30:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000f32:	4b28      	ldr	r3, [pc, #160]	; (8000fd4 <SystemInit+0xf0>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f003 0308 	and.w	r3, r3, #8
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d007      	beq.n	8000f4e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000f3e:	4b25      	ldr	r3, [pc, #148]	; (8000fd4 <SystemInit+0xf0>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f023 030f 	bic.w	r3, r3, #15
 8000f46:	4a23      	ldr	r2, [pc, #140]	; (8000fd4 <SystemInit+0xf0>)
 8000f48:	f043 0307 	orr.w	r3, r3, #7
 8000f4c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000f4e:	4b22      	ldr	r3, [pc, #136]	; (8000fd8 <SystemInit+0xf4>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000f54:	4b20      	ldr	r3, [pc, #128]	; (8000fd8 <SystemInit+0xf4>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000f5a:	4b1f      	ldr	r3, [pc, #124]	; (8000fd8 <SystemInit+0xf4>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000f60:	4b1d      	ldr	r3, [pc, #116]	; (8000fd8 <SystemInit+0xf4>)
 8000f62:	4a1f      	ldr	r2, [pc, #124]	; (8000fe0 <SystemInit+0xfc>)
 8000f64:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000f66:	4b1c      	ldr	r3, [pc, #112]	; (8000fd8 <SystemInit+0xf4>)
 8000f68:	4a1e      	ldr	r2, [pc, #120]	; (8000fe4 <SystemInit+0x100>)
 8000f6a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000f6c:	4b1a      	ldr	r3, [pc, #104]	; (8000fd8 <SystemInit+0xf4>)
 8000f6e:	4a1e      	ldr	r2, [pc, #120]	; (8000fe8 <SystemInit+0x104>)
 8000f70:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000f72:	4b19      	ldr	r3, [pc, #100]	; (8000fd8 <SystemInit+0xf4>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000f78:	4b17      	ldr	r3, [pc, #92]	; (8000fd8 <SystemInit+0xf4>)
 8000f7a:	4a1b      	ldr	r2, [pc, #108]	; (8000fe8 <SystemInit+0x104>)
 8000f7c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000f7e:	4b16      	ldr	r3, [pc, #88]	; (8000fd8 <SystemInit+0xf4>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000f84:	4b14      	ldr	r3, [pc, #80]	; (8000fd8 <SystemInit+0xf4>)
 8000f86:	4a18      	ldr	r2, [pc, #96]	; (8000fe8 <SystemInit+0x104>)
 8000f88:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000f8a:	4b13      	ldr	r3, [pc, #76]	; (8000fd8 <SystemInit+0xf4>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f90:	4b11      	ldr	r3, [pc, #68]	; (8000fd8 <SystemInit+0xf4>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a10      	ldr	r2, [pc, #64]	; (8000fd8 <SystemInit+0xf4>)
 8000f96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f9a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000f9c:	4b0e      	ldr	r3, [pc, #56]	; (8000fd8 <SystemInit+0xf4>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000fa2:	4b12      	ldr	r3, [pc, #72]	; (8000fec <SystemInit+0x108>)
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	4b12      	ldr	r3, [pc, #72]	; (8000ff0 <SystemInit+0x10c>)
 8000fa8:	4013      	ands	r3, r2
 8000faa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000fae:	d202      	bcs.n	8000fb6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000fb0:	4b10      	ldr	r3, [pc, #64]	; (8000ff4 <SystemInit+0x110>)
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000fb6:	4b10      	ldr	r3, [pc, #64]	; (8000ff8 <SystemInit+0x114>)
 8000fb8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000fbc:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000fbe:	4b04      	ldr	r3, [pc, #16]	; (8000fd0 <SystemInit+0xec>)
 8000fc0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000fc4:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8000fc6:	bf00      	nop
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr
 8000fd0:	e000ed00 	.word	0xe000ed00
 8000fd4:	52002000 	.word	0x52002000
 8000fd8:	58024400 	.word	0x58024400
 8000fdc:	eaf6ed7f 	.word	0xeaf6ed7f
 8000fe0:	02020200 	.word	0x02020200
 8000fe4:	01ff0000 	.word	0x01ff0000
 8000fe8:	01010280 	.word	0x01010280
 8000fec:	5c001000 	.word	0x5c001000
 8000ff0:	ffff0000 	.word	0xffff0000
 8000ff4:	51008108 	.word	0x51008108
 8000ff8:	52004000 	.word	0x52004000

08000ffc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000ffc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001034 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001000:	f7ff ff70 	bl	8000ee4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001004:	480c      	ldr	r0, [pc, #48]	; (8001038 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001006:	490d      	ldr	r1, [pc, #52]	; (800103c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001008:	4a0d      	ldr	r2, [pc, #52]	; (8001040 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800100a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800100c:	e002      	b.n	8001014 <LoopCopyDataInit>

0800100e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800100e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001010:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001012:	3304      	adds	r3, #4

08001014 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001014:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001016:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001018:	d3f9      	bcc.n	800100e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800101a:	4a0a      	ldr	r2, [pc, #40]	; (8001044 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800101c:	4c0a      	ldr	r4, [pc, #40]	; (8001048 <LoopFillZerobss+0x22>)
  movs r3, #0
 800101e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001020:	e001      	b.n	8001026 <LoopFillZerobss>

08001022 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001022:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001024:	3204      	adds	r2, #4

08001026 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001026:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001028:	d3fb      	bcc.n	8001022 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800102a:	f005 f91d 	bl	8006268 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800102e:	f7ff facf 	bl	80005d0 <main>
  bx  lr
 8001032:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001034:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001038:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800103c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001040:	08006398 	.word	0x08006398
  ldr r2, =_sbss
 8001044:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001048:	2000024c 	.word	0x2000024c

0800104c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800104c:	e7fe      	b.n	800104c <ADC3_IRQHandler>
	...

08001050 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001056:	2003      	movs	r0, #3
 8001058:	f000 f968 	bl	800132c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800105c:	f002 fbac 	bl	80037b8 <HAL_RCC_GetSysClockFreq>
 8001060:	4602      	mov	r2, r0
 8001062:	4b15      	ldr	r3, [pc, #84]	; (80010b8 <HAL_Init+0x68>)
 8001064:	699b      	ldr	r3, [r3, #24]
 8001066:	0a1b      	lsrs	r3, r3, #8
 8001068:	f003 030f 	and.w	r3, r3, #15
 800106c:	4913      	ldr	r1, [pc, #76]	; (80010bc <HAL_Init+0x6c>)
 800106e:	5ccb      	ldrb	r3, [r1, r3]
 8001070:	f003 031f 	and.w	r3, r3, #31
 8001074:	fa22 f303 	lsr.w	r3, r2, r3
 8001078:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800107a:	4b0f      	ldr	r3, [pc, #60]	; (80010b8 <HAL_Init+0x68>)
 800107c:	699b      	ldr	r3, [r3, #24]
 800107e:	f003 030f 	and.w	r3, r3, #15
 8001082:	4a0e      	ldr	r2, [pc, #56]	; (80010bc <HAL_Init+0x6c>)
 8001084:	5cd3      	ldrb	r3, [r2, r3]
 8001086:	f003 031f 	and.w	r3, r3, #31
 800108a:	687a      	ldr	r2, [r7, #4]
 800108c:	fa22 f303 	lsr.w	r3, r2, r3
 8001090:	4a0b      	ldr	r2, [pc, #44]	; (80010c0 <HAL_Init+0x70>)
 8001092:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001094:	4a0b      	ldr	r2, [pc, #44]	; (80010c4 <HAL_Init+0x74>)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800109a:	2000      	movs	r0, #0
 800109c:	f000 f814 	bl	80010c8 <HAL_InitTick>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
 80010a8:	e002      	b.n	80010b0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80010aa:	f7ff fde7 	bl	8000c7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010ae:	2300      	movs	r3, #0
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3708      	adds	r7, #8
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	58024400 	.word	0x58024400
 80010bc:	08006340 	.word	0x08006340
 80010c0:	20000004 	.word	0x20000004
 80010c4:	20000000 	.word	0x20000000

080010c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80010d0:	4b15      	ldr	r3, [pc, #84]	; (8001128 <HAL_InitTick+0x60>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d101      	bne.n	80010dc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80010d8:	2301      	movs	r3, #1
 80010da:	e021      	b.n	8001120 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80010dc:	4b13      	ldr	r3, [pc, #76]	; (800112c <HAL_InitTick+0x64>)
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	4b11      	ldr	r3, [pc, #68]	; (8001128 <HAL_InitTick+0x60>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	4619      	mov	r1, r3
 80010e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80010ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80010f2:	4618      	mov	r0, r3
 80010f4:	f000 f94d 	bl	8001392 <HAL_SYSTICK_Config>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
 8001100:	e00e      	b.n	8001120 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2b0f      	cmp	r3, #15
 8001106:	d80a      	bhi.n	800111e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001108:	2200      	movs	r2, #0
 800110a:	6879      	ldr	r1, [r7, #4]
 800110c:	f04f 30ff 	mov.w	r0, #4294967295
 8001110:	f000 f917 	bl	8001342 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001114:	4a06      	ldr	r2, [pc, #24]	; (8001130 <HAL_InitTick+0x68>)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800111a:	2300      	movs	r3, #0
 800111c:	e000      	b.n	8001120 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800111e:	2301      	movs	r3, #1
}
 8001120:	4618      	mov	r0, r3
 8001122:	3708      	adds	r7, #8
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	2000000c 	.word	0x2000000c
 800112c:	20000000 	.word	0x20000000
 8001130:	20000008 	.word	0x20000008

08001134 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001138:	4b06      	ldr	r3, [pc, #24]	; (8001154 <HAL_IncTick+0x20>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	461a      	mov	r2, r3
 800113e:	4b06      	ldr	r3, [pc, #24]	; (8001158 <HAL_IncTick+0x24>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4413      	add	r3, r2
 8001144:	4a04      	ldr	r2, [pc, #16]	; (8001158 <HAL_IncTick+0x24>)
 8001146:	6013      	str	r3, [r2, #0]
}
 8001148:	bf00      	nop
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	2000000c 	.word	0x2000000c
 8001158:	20000248 	.word	0x20000248

0800115c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  return uwTick;
 8001160:	4b03      	ldr	r3, [pc, #12]	; (8001170 <HAL_GetTick+0x14>)
 8001162:	681b      	ldr	r3, [r3, #0]
}
 8001164:	4618      	mov	r0, r3
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	20000248 	.word	0x20000248

08001174 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001178:	4b03      	ldr	r3, [pc, #12]	; (8001188 <HAL_GetREVID+0x14>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	0c1b      	lsrs	r3, r3, #16
}
 800117e:	4618      	mov	r0, r3
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr
 8001188:	5c001000 	.word	0x5c001000

0800118c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800118c:	b480      	push	{r7}
 800118e:	b085      	sub	sp, #20
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	f003 0307 	and.w	r3, r3, #7
 800119a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800119c:	4b0b      	ldr	r3, [pc, #44]	; (80011cc <__NVIC_SetPriorityGrouping+0x40>)
 800119e:	68db      	ldr	r3, [r3, #12]
 80011a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011a2:	68ba      	ldr	r2, [r7, #8]
 80011a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011a8:	4013      	ands	r3, r2
 80011aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80011b4:	4b06      	ldr	r3, [pc, #24]	; (80011d0 <__NVIC_SetPriorityGrouping+0x44>)
 80011b6:	4313      	orrs	r3, r2
 80011b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011ba:	4a04      	ldr	r2, [pc, #16]	; (80011cc <__NVIC_SetPriorityGrouping+0x40>)
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	60d3      	str	r3, [r2, #12]
}
 80011c0:	bf00      	nop
 80011c2:	3714      	adds	r7, #20
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr
 80011cc:	e000ed00 	.word	0xe000ed00
 80011d0:	05fa0000 	.word	0x05fa0000

080011d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011d8:	4b04      	ldr	r3, [pc, #16]	; (80011ec <__NVIC_GetPriorityGrouping+0x18>)
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	0a1b      	lsrs	r3, r3, #8
 80011de:	f003 0307 	and.w	r3, r3, #7
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr
 80011ec:	e000ed00 	.word	0xe000ed00

080011f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	4603      	mov	r3, r0
 80011f8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80011fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	db0b      	blt.n	800121a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001202:	88fb      	ldrh	r3, [r7, #6]
 8001204:	f003 021f 	and.w	r2, r3, #31
 8001208:	4907      	ldr	r1, [pc, #28]	; (8001228 <__NVIC_EnableIRQ+0x38>)
 800120a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800120e:	095b      	lsrs	r3, r3, #5
 8001210:	2001      	movs	r0, #1
 8001212:	fa00 f202 	lsl.w	r2, r0, r2
 8001216:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800121a:	bf00      	nop
 800121c:	370c      	adds	r7, #12
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	e000e100 	.word	0xe000e100

0800122c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	4603      	mov	r3, r0
 8001234:	6039      	str	r1, [r7, #0]
 8001236:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001238:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800123c:	2b00      	cmp	r3, #0
 800123e:	db0a      	blt.n	8001256 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	b2da      	uxtb	r2, r3
 8001244:	490c      	ldr	r1, [pc, #48]	; (8001278 <__NVIC_SetPriority+0x4c>)
 8001246:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800124a:	0112      	lsls	r2, r2, #4
 800124c:	b2d2      	uxtb	r2, r2
 800124e:	440b      	add	r3, r1
 8001250:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001254:	e00a      	b.n	800126c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	b2da      	uxtb	r2, r3
 800125a:	4908      	ldr	r1, [pc, #32]	; (800127c <__NVIC_SetPriority+0x50>)
 800125c:	88fb      	ldrh	r3, [r7, #6]
 800125e:	f003 030f 	and.w	r3, r3, #15
 8001262:	3b04      	subs	r3, #4
 8001264:	0112      	lsls	r2, r2, #4
 8001266:	b2d2      	uxtb	r2, r2
 8001268:	440b      	add	r3, r1
 800126a:	761a      	strb	r2, [r3, #24]
}
 800126c:	bf00      	nop
 800126e:	370c      	adds	r7, #12
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr
 8001278:	e000e100 	.word	0xe000e100
 800127c:	e000ed00 	.word	0xe000ed00

08001280 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001280:	b480      	push	{r7}
 8001282:	b089      	sub	sp, #36	; 0x24
 8001284:	af00      	add	r7, sp, #0
 8001286:	60f8      	str	r0, [r7, #12]
 8001288:	60b9      	str	r1, [r7, #8]
 800128a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	f003 0307 	and.w	r3, r3, #7
 8001292:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001294:	69fb      	ldr	r3, [r7, #28]
 8001296:	f1c3 0307 	rsb	r3, r3, #7
 800129a:	2b04      	cmp	r3, #4
 800129c:	bf28      	it	cs
 800129e:	2304      	movcs	r3, #4
 80012a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	3304      	adds	r3, #4
 80012a6:	2b06      	cmp	r3, #6
 80012a8:	d902      	bls.n	80012b0 <NVIC_EncodePriority+0x30>
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	3b03      	subs	r3, #3
 80012ae:	e000      	b.n	80012b2 <NVIC_EncodePriority+0x32>
 80012b0:	2300      	movs	r3, #0
 80012b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b4:	f04f 32ff 	mov.w	r2, #4294967295
 80012b8:	69bb      	ldr	r3, [r7, #24]
 80012ba:	fa02 f303 	lsl.w	r3, r2, r3
 80012be:	43da      	mvns	r2, r3
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	401a      	ands	r2, r3
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012c8:	f04f 31ff 	mov.w	r1, #4294967295
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	fa01 f303 	lsl.w	r3, r1, r3
 80012d2:	43d9      	mvns	r1, r3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d8:	4313      	orrs	r3, r2
         );
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3724      	adds	r7, #36	; 0x24
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
	...

080012e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	3b01      	subs	r3, #1
 80012f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012f8:	d301      	bcc.n	80012fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012fa:	2301      	movs	r3, #1
 80012fc:	e00f      	b.n	800131e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012fe:	4a0a      	ldr	r2, [pc, #40]	; (8001328 <SysTick_Config+0x40>)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	3b01      	subs	r3, #1
 8001304:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001306:	210f      	movs	r1, #15
 8001308:	f04f 30ff 	mov.w	r0, #4294967295
 800130c:	f7ff ff8e 	bl	800122c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001310:	4b05      	ldr	r3, [pc, #20]	; (8001328 <SysTick_Config+0x40>)
 8001312:	2200      	movs	r2, #0
 8001314:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001316:	4b04      	ldr	r3, [pc, #16]	; (8001328 <SysTick_Config+0x40>)
 8001318:	2207      	movs	r2, #7
 800131a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800131c:	2300      	movs	r3, #0
}
 800131e:	4618      	mov	r0, r3
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	e000e010 	.word	0xe000e010

0800132c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001334:	6878      	ldr	r0, [r7, #4]
 8001336:	f7ff ff29 	bl	800118c <__NVIC_SetPriorityGrouping>
}
 800133a:	bf00      	nop
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001342:	b580      	push	{r7, lr}
 8001344:	b086      	sub	sp, #24
 8001346:	af00      	add	r7, sp, #0
 8001348:	4603      	mov	r3, r0
 800134a:	60b9      	str	r1, [r7, #8]
 800134c:	607a      	str	r2, [r7, #4]
 800134e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001350:	f7ff ff40 	bl	80011d4 <__NVIC_GetPriorityGrouping>
 8001354:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001356:	687a      	ldr	r2, [r7, #4]
 8001358:	68b9      	ldr	r1, [r7, #8]
 800135a:	6978      	ldr	r0, [r7, #20]
 800135c:	f7ff ff90 	bl	8001280 <NVIC_EncodePriority>
 8001360:	4602      	mov	r2, r0
 8001362:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001366:	4611      	mov	r1, r2
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff ff5f 	bl	800122c <__NVIC_SetPriority>
}
 800136e:	bf00      	nop
 8001370:	3718      	adds	r7, #24
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}

08001376 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001376:	b580      	push	{r7, lr}
 8001378:	b082      	sub	sp, #8
 800137a:	af00      	add	r7, sp, #0
 800137c:	4603      	mov	r3, r0
 800137e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001380:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001384:	4618      	mov	r0, r3
 8001386:	f7ff ff33 	bl	80011f0 <__NVIC_EnableIRQ>
}
 800138a:	bf00      	nop
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}

08001392 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001392:	b580      	push	{r7, lr}
 8001394:	b082      	sub	sp, #8
 8001396:	af00      	add	r7, sp, #0
 8001398:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f7ff ffa4 	bl	80012e8 <SysTick_Config>
 80013a0:	4603      	mov	r3, r0
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}

080013aa <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80013aa:	b580      	push	{r7, lr}
 80013ac:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80013ae:	f7ff fc15 	bl	8000bdc <HAL_SYSTICK_Callback>
}
 80013b2:	bf00      	nop
 80013b4:	bd80      	pop	{r7, pc}
	...

080013b8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b098      	sub	sp, #96	; 0x60
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80013c0:	4a84      	ldr	r2, [pc, #528]	; (80015d4 <HAL_FDCAN_Init+0x21c>)
 80013c2:	f107 030c 	add.w	r3, r7, #12
 80013c6:	4611      	mov	r1, r2
 80013c8:	224c      	movs	r2, #76	; 0x4c
 80013ca:	4618      	mov	r0, r3
 80013cc:	f004 ff70 	bl	80062b0 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d101      	bne.n	80013da <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e1ca      	b.n	8001770 <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a7e      	ldr	r2, [pc, #504]	; (80015d8 <HAL_FDCAN_Init+0x220>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d106      	bne.n	80013f2 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80013ec:	461a      	mov	r2, r3
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d106      	bne.n	800140c <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2200      	movs	r2, #0
 8001402:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f7ff fc52 	bl	8000cb0 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	699a      	ldr	r2, [r3, #24]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f022 0210 	bic.w	r2, r2, #16
 800141a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800141c:	f7ff fe9e 	bl	800115c <HAL_GetTick>
 8001420:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001422:	e014      	b.n	800144e <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001424:	f7ff fe9a 	bl	800115c <HAL_GetTick>
 8001428:	4602      	mov	r2, r0
 800142a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	2b0a      	cmp	r3, #10
 8001430:	d90d      	bls.n	800144e <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001438:	f043 0201 	orr.w	r2, r3, #1
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2203      	movs	r2, #3
 8001446:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	e190      	b.n	8001770 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	699b      	ldr	r3, [r3, #24]
 8001454:	f003 0308 	and.w	r3, r3, #8
 8001458:	2b08      	cmp	r3, #8
 800145a:	d0e3      	beq.n	8001424 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	699a      	ldr	r2, [r3, #24]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f042 0201 	orr.w	r2, r2, #1
 800146a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800146c:	f7ff fe76 	bl	800115c <HAL_GetTick>
 8001470:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001472:	e014      	b.n	800149e <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001474:	f7ff fe72 	bl	800115c <HAL_GetTick>
 8001478:	4602      	mov	r2, r0
 800147a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	2b0a      	cmp	r3, #10
 8001480:	d90d      	bls.n	800149e <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001488:	f043 0201 	orr.w	r2, r3, #1
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2203      	movs	r2, #3
 8001496:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	e168      	b.n	8001770 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	699b      	ldr	r3, [r3, #24]
 80014a4:	f003 0301 	and.w	r3, r3, #1
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d0e3      	beq.n	8001474 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	699a      	ldr	r2, [r3, #24]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f042 0202 	orr.w	r2, r2, #2
 80014ba:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	7c1b      	ldrb	r3, [r3, #16]
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d108      	bne.n	80014d6 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	699a      	ldr	r2, [r3, #24]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80014d2:	619a      	str	r2, [r3, #24]
 80014d4:	e007      	b.n	80014e6 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	699a      	ldr	r2, [r3, #24]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80014e4:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	7c5b      	ldrb	r3, [r3, #17]
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d108      	bne.n	8001500 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	699a      	ldr	r2, [r3, #24]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80014fc:	619a      	str	r2, [r3, #24]
 80014fe:	e007      	b.n	8001510 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	699a      	ldr	r2, [r3, #24]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800150e:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	7c9b      	ldrb	r3, [r3, #18]
 8001514:	2b01      	cmp	r3, #1
 8001516:	d108      	bne.n	800152a <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	699a      	ldr	r2, [r3, #24]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001526:	619a      	str	r2, [r3, #24]
 8001528:	e007      	b.n	800153a <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	699a      	ldr	r2, [r3, #24]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001538:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	699b      	ldr	r3, [r3, #24]
 8001540:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	689a      	ldr	r2, [r3, #8]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	430a      	orrs	r2, r1
 800154e:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	699a      	ldr	r2, [r3, #24]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 800155e:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	691a      	ldr	r2, [r3, #16]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f022 0210 	bic.w	r2, r2, #16
 800156e:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	2b01      	cmp	r3, #1
 8001576:	d108      	bne.n	800158a <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	699a      	ldr	r2, [r3, #24]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f042 0204 	orr.w	r2, r2, #4
 8001586:	619a      	str	r2, [r3, #24]
 8001588:	e030      	b.n	80015ec <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	68db      	ldr	r3, [r3, #12]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d02c      	beq.n	80015ec <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	68db      	ldr	r3, [r3, #12]
 8001596:	2b02      	cmp	r3, #2
 8001598:	d020      	beq.n	80015dc <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	699a      	ldr	r2, [r3, #24]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80015a8:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	691a      	ldr	r2, [r3, #16]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f042 0210 	orr.w	r2, r2, #16
 80015b8:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	68db      	ldr	r3, [r3, #12]
 80015be:	2b03      	cmp	r3, #3
 80015c0:	d114      	bne.n	80015ec <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	699a      	ldr	r2, [r3, #24]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f042 0220 	orr.w	r2, r2, #32
 80015d0:	619a      	str	r2, [r3, #24]
 80015d2:	e00b      	b.n	80015ec <HAL_FDCAN_Init+0x234>
 80015d4:	080062f4 	.word	0x080062f4
 80015d8:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	699a      	ldr	r2, [r3, #24]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f042 0220 	orr.w	r2, r2, #32
 80015ea:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	699b      	ldr	r3, [r3, #24]
 80015f0:	3b01      	subs	r3, #1
 80015f2:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	69db      	ldr	r3, [r3, #28]
 80015f8:	3b01      	subs	r3, #1
 80015fa:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80015fc:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6a1b      	ldr	r3, [r3, #32]
 8001602:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001604:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	695b      	ldr	r3, [r3, #20]
 800160c:	3b01      	subs	r3, #1
 800160e:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001614:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001616:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001620:	d115      	bne.n	800164e <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001626:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800162c:	3b01      	subs	r3, #1
 800162e:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001630:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001636:	3b01      	subs	r3, #1
 8001638:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800163a:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001642:	3b01      	subs	r3, #1
 8001644:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800164a:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800164c:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001652:	2b00      	cmp	r3, #0
 8001654:	d00a      	beq.n	800166c <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	430a      	orrs	r2, r1
 8001668:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001674:	4413      	add	r3, r2
 8001676:	2b00      	cmp	r3, #0
 8001678:	d012      	beq.n	80016a0 <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8001682:	f023 0107 	bic.w	r1, r3, #7
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001690:	4413      	add	r3, r2
 8001692:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	430a      	orrs	r2, r1
 800169c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d012      	beq.n	80016ce <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80016b0:	f023 0107 	bic.w	r1, r3, #7
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80016be:	4413      	add	r3, r2
 80016c0:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	430a      	orrs	r2, r1
 80016ca:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d013      	beq.n	80016fe <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80016de:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80016ec:	4413      	add	r3, r2
 80016ee:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80016f2:	011a      	lsls	r2, r3, #4
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	430a      	orrs	r2, r1
 80016fa:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001702:	2b00      	cmp	r3, #0
 8001704:	d013      	beq.n	800172e <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800170e:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800171c:	4413      	add	r3, r2
 800171e:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8001722:	021a      	lsls	r2, r3, #8
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	430a      	orrs	r2, r1
 800172a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a11      	ldr	r2, [pc, #68]	; (8001778 <HAL_FDCAN_Init+0x3c0>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d107      	bne.n	8001748 <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	689a      	ldr	r2, [r3, #8]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	f022 0203 	bic.w	r2, r2, #3
 8001746:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2200      	movs	r2, #0
 800174c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2200      	movs	r2, #0
 8001754:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2201      	movs	r2, #1
 800175c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001760:	6878      	ldr	r0, [r7, #4]
 8001762:	f000 fe41 	bl	80023e8 <FDCAN_CalcultateRamBlockAddresses>
 8001766:	4603      	mov	r3, r0
 8001768:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 800176c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8001770:	4618      	mov	r0, r3
 8001772:	3760      	adds	r7, #96	; 0x60
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	4000a000 	.word	0x4000a000

0800177c <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 800177c:	b480      	push	{r7}
 800177e:	b087      	sub	sp, #28
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800178c:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800178e:	7bfb      	ldrb	r3, [r7, #15]
 8001790:	2b01      	cmp	r3, #1
 8001792:	d002      	beq.n	800179a <HAL_FDCAN_ConfigFilter+0x1e>
 8001794:	7bfb      	ldrb	r3, [r7, #15]
 8001796:	2b02      	cmp	r3, #2
 8001798:	d157      	bne.n	800184a <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d12b      	bne.n	80017fa <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	68db      	ldr	r3, [r3, #12]
 80017a6:	2b07      	cmp	r3, #7
 80017a8:	d10d      	bne.n	80017c6 <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	691b      	ldr	r3, [r3, #16]
 80017ae:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	69db      	ldr	r3, [r3, #28]
 80017b4:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 80017b6:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 80017bc:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 80017be:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 80017c2:	617b      	str	r3, [r7, #20]
 80017c4:	e00e      	b.n	80017e4 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80017d2:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	691b      	ldr	r3, [r3, #16]
 80017d8:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 80017da:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80017e0:	4313      	orrs	r3, r2
 80017e2:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	4413      	add	r3, r2
 80017f0:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	697a      	ldr	r2, [r7, #20]
 80017f6:	601a      	str	r2, [r3, #0]
 80017f8:	e025      	b.n	8001846 <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	68db      	ldr	r3, [r3, #12]
 80017fe:	075a      	lsls	r2, r3, #29
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	691b      	ldr	r3, [r3, #16]
 8001804:	4313      	orrs	r3, r2
 8001806:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	2b07      	cmp	r3, #7
 800180e:	d103      	bne.n	8001818 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	699b      	ldr	r3, [r3, #24]
 8001814:	613b      	str	r3, [r7, #16]
 8001816:	e006      	b.n	8001826 <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	079a      	lsls	r2, r3, #30
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	695b      	ldr	r3, [r3, #20]
 8001822:	4313      	orrs	r3, r2
 8001824:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	00db      	lsls	r3, r3, #3
 8001830:	4413      	add	r3, r2
 8001832:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	697a      	ldr	r2, [r7, #20]
 8001838:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	3304      	adds	r3, #4
 800183e:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	693a      	ldr	r2, [r7, #16]
 8001844:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8001846:	2300      	movs	r3, #0
 8001848:	e008      	b.n	800185c <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001850:	f043 0202 	orr.w	r2, r3, #2
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
  }
}
 800185c:	4618      	mov	r0, r3
 800185e:	371c      	adds	r7, #28
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr

08001868 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8001868:	b480      	push	{r7}
 800186a:	b085      	sub	sp, #20
 800186c:	af00      	add	r7, sp, #0
 800186e:	60f8      	str	r0, [r7, #12]
 8001870:	60b9      	str	r1, [r7, #8]
 8001872:	607a      	str	r2, [r7, #4]
 8001874:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800187c:	b2db      	uxtb	r3, r3
 800187e:	2b01      	cmp	r3, #1
 8001880:	d110      	bne.n	80018a4 <HAL_FDCAN_ConfigGlobalFilter+0x3c>
  {
    /* Configure global filter */
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	011a      	lsls	r2, r3, #4
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	009b      	lsls	r3, r3, #2
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 800188a:	431a      	orrs	r2, r3
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	005b      	lsls	r3, r3, #1
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8001890:	ea42 0103 	orr.w	r1, r2, r3
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	681b      	ldr	r3, [r3, #0]
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8001898:	69ba      	ldr	r2, [r7, #24]
 800189a:	430a      	orrs	r2, r1
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 800189c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                             (RejectRemoteExt << FDCAN_GFC_RRFE_Pos));

    /* Return function status */
    return HAL_OK;
 80018a0:	2300      	movs	r3, #0
 80018a2:	e008      	b.n	80018b6 <HAL_FDCAN_ConfigGlobalFilter+0x4e>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80018aa:	f043 0204 	orr.w	r2, r3, #4
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
  }
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3714      	adds	r7, #20
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr

080018c2 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80018c2:	b480      	push	{r7}
 80018c4:	b083      	sub	sp, #12
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	d111      	bne.n	80018fa <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2202      	movs	r2, #2
 80018da:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	699a      	ldr	r2, [r3, #24]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f022 0201 	bic.w	r2, r2, #1
 80018ec:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2200      	movs	r2, #0
 80018f2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 80018f6:	2300      	movs	r3, #0
 80018f8:	e008      	b.n	800190c <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001900:	f043 0204 	orr.w	r2, r3, #4
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
  }
}
 800190c:	4618      	mov	r0, r3
 800190e:	370c      	adds	r7, #12
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr

08001918 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b086      	sub	sp, #24
 800191c:	af00      	add	r7, sp, #0
 800191e:	60f8      	str	r0, [r7, #12]
 8001920:	60b9      	str	r1, [r7, #8]
 8001922:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800192a:	b2db      	uxtb	r3, r3
 800192c:	2b02      	cmp	r3, #2
 800192e:	d141      	bne.n	80019b4 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001938:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 800193c:	2b00      	cmp	r3, #0
 800193e:	d109      	bne.n	8001954 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001946:	f043 0220 	orr.w	r2, r3, #32
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	e038      	b.n	80019c6 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800195c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001960:	2b00      	cmp	r3, #0
 8001962:	d009      	beq.n	8001978 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800196a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	e026      	b.n	80019c6 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001980:	0c1b      	lsrs	r3, r3, #16
 8001982:	f003 031f 	and.w	r3, r3, #31
 8001986:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	687a      	ldr	r2, [r7, #4]
 800198c:	68b9      	ldr	r1, [r7, #8]
 800198e:	68f8      	ldr	r0, [r7, #12]
 8001990:	f000 feb0 	bl	80026f4 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	2101      	movs	r1, #1
 800199a:	697a      	ldr	r2, [r7, #20]
 800199c:	fa01 f202 	lsl.w	r2, r1, r2
 80019a0:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80019a4:	2201      	movs	r2, #1
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	409a      	lsls	r2, r3
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }

    /* Return function status */
    return HAL_OK;
 80019b0:	2300      	movs	r3, #0
 80019b2:	e008      	b.n	80019c6 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80019ba:	f043 0208 	orr.w	r2, r3, #8
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
  }
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3718      	adds	r7, #24
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
	...

080019d0 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b08b      	sub	sp, #44	; 0x2c
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	60f8      	str	r0, [r7, #12]
 80019d8:	60b9      	str	r1, [r7, #8]
 80019da:	607a      	str	r2, [r7, #4]
 80019dc:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80019de:	2300      	movs	r3, #0
 80019e0:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80019e8:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 80019ea:	7efb      	ldrb	r3, [r7, #27]
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	f040 814b 	bne.w	8001c88 <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	2b40      	cmp	r3, #64	; 0x40
 80019f6:	d14d      	bne.n	8001a94 <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001a00:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d109      	bne.n	8001a1c <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001a0e:	f043 0220 	orr.w	r2, r3, #32
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e13e      	b.n	8001c9a <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001a24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d109      	bne.n	8001a40 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001a32:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e12c      	b.n	8001c9a <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001a48:	0e1b      	lsrs	r3, r3, #24
 8001a4a:	f003 0301 	and.w	r3, r3, #1
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d10b      	bne.n	8001a6a <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001a5a:	0fdb      	lsrs	r3, r3, #31
 8001a5c:	f003 0301 	and.w	r3, r3, #1
 8001a60:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001a64:	d101      	bne.n	8001a6a <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001a66:	2301      	movs	r3, #1
 8001a68:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001a72:	0a1b      	lsrs	r3, r3, #8
 8001a74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a78:	69fa      	ldr	r2, [r7, #28]
 8001a7a:	4413      	add	r3, r2
 8001a7c:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a86:	69f9      	ldr	r1, [r7, #28]
 8001a88:	fb01 f303 	mul.w	r3, r1, r3
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	4413      	add	r3, r2
 8001a90:	627b      	str	r3, [r7, #36]	; 0x24
 8001a92:	e069      	b.n	8001b68 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	2b41      	cmp	r3, #65	; 0x41
 8001a98:	d14d      	bne.n	8001b36 <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001aa2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d109      	bne.n	8001abe <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001ab0:	f043 0220 	orr.w	r2, r3, #32
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e0ed      	b.n	8001c9a <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001ac6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d109      	bne.n	8001ae2 <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001ad4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e0db      	b.n	8001c9a <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001aea:	0e1b      	lsrs	r3, r3, #24
 8001aec:	f003 0301 	and.w	r3, r3, #1
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d10b      	bne.n	8001b0c <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001afc:	0fdb      	lsrs	r3, r3, #31
 8001afe:	f003 0301 	and.w	r3, r3, #1
 8001b02:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001b06:	d101      	bne.n	8001b0c <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001b14:	0a1b      	lsrs	r3, r3, #8
 8001b16:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b1a:	69fa      	ldr	r2, [r7, #28]
 8001b1c:	4413      	add	r3, r2
 8001b1e:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b28:	69f9      	ldr	r1, [r7, #28]
 8001b2a:	fb01 f303 	mul.w	r3, r1, r3
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	4413      	add	r3, r2
 8001b32:	627b      	str	r3, [r7, #36]	; 0x24
 8001b34:	e018      	b.n	8001b68 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b3a:	68ba      	ldr	r2, [r7, #8]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d309      	bcc.n	8001b54 <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001b46:	f043 0220 	orr.w	r2, r3, #32
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	e0a2      	b.n	8001c9a <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b5c:	68b9      	ldr	r1, [r7, #8]
 8001b5e:	fb01 f303 	mul.w	r3, r1, r3
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	4413      	add	r3, r2
 8001b66:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8001b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d107      	bne.n	8001b8c <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 8001b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	0c9b      	lsrs	r3, r3, #18
 8001b82:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	601a      	str	r2, [r3, #0]
 8001b8a:	e005      	b.n	8001b98 <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8001b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8001b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8001ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8001bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb2:	3304      	adds	r3, #4
 8001bb4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8001bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	b29a      	uxth	r2, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8001bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8001bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8001bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 8001be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	0e1b      	lsrs	r3, r3, #24
 8001bea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 8001bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	0fda      	lsrs	r2, r3, #31
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8001bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bfe:	3304      	adds	r3, #4
 8001c00:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8001c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c04:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8001c06:	2300      	movs	r3, #0
 8001c08:	623b      	str	r3, [r7, #32]
 8001c0a:	e00a      	b.n	8001c22 <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8001c0c:	697a      	ldr	r2, [r7, #20]
 8001c0e:	6a3b      	ldr	r3, [r7, #32]
 8001c10:	441a      	add	r2, r3
 8001c12:	6839      	ldr	r1, [r7, #0]
 8001c14:	6a3b      	ldr	r3, [r7, #32]
 8001c16:	440b      	add	r3, r1
 8001c18:	7812      	ldrb	r2, [r2, #0]
 8001c1a:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8001c1c:	6a3b      	ldr	r3, [r7, #32]
 8001c1e:	3301      	adds	r3, #1
 8001c20:	623b      	str	r3, [r7, #32]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	68db      	ldr	r3, [r3, #12]
 8001c26:	0c1b      	lsrs	r3, r3, #16
 8001c28:	4a1f      	ldr	r2, [pc, #124]	; (8001ca8 <HAL_FDCAN_GetRxMessage+0x2d8>)
 8001c2a:	5cd3      	ldrb	r3, [r2, r3]
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	6a3b      	ldr	r3, [r7, #32]
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d3eb      	bcc.n	8001c0c <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	2b40      	cmp	r3, #64	; 0x40
 8001c38:	d105      	bne.n	8001c46 <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	69fa      	ldr	r2, [r7, #28]
 8001c40:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8001c44:	e01e      	b.n	8001c84 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	2b41      	cmp	r3, #65	; 0x41
 8001c4a:	d105      	bne.n	8001c58 <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	69fa      	ldr	r2, [r7, #28]
 8001c52:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8001c56:	e015      	b.n	8001c84 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	2b1f      	cmp	r3, #31
 8001c5c:	d808      	bhi.n	8001c70 <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	2101      	movs	r1, #1
 8001c64:	68ba      	ldr	r2, [r7, #8]
 8001c66:	fa01 f202 	lsl.w	r2, r1, r2
 8001c6a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8001c6e:	e009      	b.n	8001c84 <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	f003 021f 	and.w	r2, r3, #31
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	2101      	movs	r1, #1
 8001c7c:	fa01 f202 	lsl.w	r2, r1, r2
 8001c80:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8001c84:	2300      	movs	r3, #0
 8001c86:	e008      	b.n	8001c9a <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001c8e:	f043 0208 	orr.w	r2, r3, #8
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
  }
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	372c      	adds	r7, #44	; 0x2c
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	08006350 	.word	0x08006350

08001cac <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b087      	sub	sp, #28
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	60f8      	str	r0, [r7, #12]
 8001cb4:	60b9      	str	r1, [r7, #8]
 8001cb6:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001cbe:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001cc0:	7dfb      	ldrb	r3, [r7, #23]
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d002      	beq.n	8001ccc <HAL_FDCAN_ActivateNotification+0x20>
 8001cc6:	7dfb      	ldrb	r3, [r7, #23]
 8001cc8:	2b02      	cmp	r3, #2
 8001cca:	d155      	bne.n	8001d78 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d108      	bne.n	8001cec <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f042 0201 	orr.w	r2, r2, #1
 8001ce8:	65da      	str	r2, [r3, #92]	; 0x5c
 8001cea:	e014      	b.n	8001d16 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	68ba      	ldr	r2, [r7, #8]
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d108      	bne.n	8001d0e <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f042 0202 	orr.w	r2, r2, #2
 8001d0a:	65da      	str	r2, [r3, #92]	; 0x5c
 8001d0c:	e003      	b.n	8001d16 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	2203      	movs	r2, #3
 8001d14:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d009      	beq.n	8001d34 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	687a      	ldr	r2, [r7, #4]
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d009      	beq.n	8001d52 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	687a      	ldr	r2, [r7, #4]
 8001d4c:	430a      	orrs	r2, r1
 8001d4e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001d58:	68ba      	ldr	r2, [r7, #8]
 8001d5a:	4b0f      	ldr	r3, [pc, #60]	; (8001d98 <HAL_FDCAN_ActivateNotification+0xec>)
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	68fa      	ldr	r2, [r7, #12]
 8001d60:	6812      	ldr	r2, [r2, #0]
 8001d62:	430b      	orrs	r3, r1
 8001d64:	6553      	str	r3, [r2, #84]	; 0x54
 8001d66:	4b0d      	ldr	r3, [pc, #52]	; (8001d9c <HAL_FDCAN_ActivateNotification+0xf0>)
 8001d68:	695a      	ldr	r2, [r3, #20]
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	0f9b      	lsrs	r3, r3, #30
 8001d6e:	490b      	ldr	r1, [pc, #44]	; (8001d9c <HAL_FDCAN_ActivateNotification+0xf0>)
 8001d70:	4313      	orrs	r3, r2
 8001d72:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8001d74:	2300      	movs	r3, #0
 8001d76:	e008      	b.n	8001d8a <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001d7e:	f043 0202 	orr.w	r2, r3, #2
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
  }
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	371c      	adds	r7, #28
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	3fcfffff 	.word	0x3fcfffff
 8001d9c:	4000a800 	.word	0x4000a800

08001da0 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b092      	sub	sp, #72	; 0x48
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  uint32_t TTDistErrors;
  uint32_t TTFatalErrors;
  uint32_t SWTime;
  uint32_t SWCycleCount;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8001da8:	4b90      	ldr	r3, [pc, #576]	; (8001fec <HAL_FDCAN_IRQHandler+0x24c>)
 8001daa:	691b      	ldr	r3, [r3, #16]
 8001dac:	079b      	lsls	r3, r3, #30
 8001dae:	647b      	str	r3, [r7, #68]	; 0x44
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8001db0:	4b8e      	ldr	r3, [pc, #568]	; (8001fec <HAL_FDCAN_IRQHandler+0x24c>)
 8001db2:	695b      	ldr	r3, [r3, #20]
 8001db4:	079b      	lsls	r3, r3, #30
 8001db6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001db8:	4013      	ands	r3, r2
 8001dba:	647b      	str	r3, [r7, #68]	; 0x44
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dc2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8001dc6:	643b      	str	r3, [r7, #64]	; 0x40
  TxEventFifoITs &= hfdcan->Instance->IE;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	643b      	str	r3, [r7, #64]	; 0x40
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dda:	f003 030f 	and.w	r3, r3, #15
 8001dde:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001de6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001de8:	4013      	ands	r3, r2
 8001dea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001df2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001df6:	63bb      	str	r3, [r7, #56]	; 0x38
  RxFifo1ITs &= hfdcan->Instance->IE;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dfe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001e00:	4013      	ands	r3, r2
 8001e02:	63bb      	str	r3, [r7, #56]	; 0x38
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e0a:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 8001e0e:	637b      	str	r3, [r7, #52]	; 0x34
  Errors &= hfdcan->Instance->IE;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e18:	4013      	ands	r3, r2
 8001e1a:	637b      	str	r3, [r7, #52]	; 0x34
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e22:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 8001e26:	633b      	str	r3, [r7, #48]	; 0x30
  ErrorStatusITs &= hfdcan->Instance->IE;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e30:	4013      	ands	r3, r2
 8001e32:	633b      	str	r3, [r7, #48]	; 0x30

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d011      	beq.n	8001e66 <HAL_FDCAN_IRQHandler+0xc6>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d00a      	beq.n	8001e66 <HAL_FDCAN_IRQHandler+0xc6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e58:	651a      	str	r2, [r3, #80]	; 0x50
 8001e5a:	4b64      	ldr	r3, [pc, #400]	; (8001fec <HAL_FDCAN_IRQHandler+0x24c>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	f000 fa5a 	bl	800231a <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d01e      	beq.n	8001eb2 <HAL_FDCAN_IRQHandler+0x112>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d017      	beq.n	8001eb2 <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8001e94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e96:	4013      	ands	r3, r2
 8001e98:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ea2:	651a      	str	r2, [r3, #80]	; 0x50
 8001ea4:	4b51      	ldr	r3, [pc, #324]	; (8001fec <HAL_FDCAN_IRQHandler+0x24c>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8001eaa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f000 fa0b 	bl	80022c8 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8001eb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d00d      	beq.n	8001ed4 <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001ebe:	4b4c      	ldr	r3, [pc, #304]	; (8001ff0 <HAL_FDCAN_IRQHandler+0x250>)
 8001ec0:	400b      	ands	r3, r1
 8001ec2:	6513      	str	r3, [r2, #80]	; 0x50
 8001ec4:	4a49      	ldr	r2, [pc, #292]	; (8001fec <HAL_FDCAN_IRQHandler+0x24c>)
 8001ec6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ec8:	0f9b      	lsrs	r3, r3, #30
 8001eca:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8001ecc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f000 f9c4 	bl	800225c <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8001ed4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d00d      	beq.n	8001ef6 <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001ee0:	4b43      	ldr	r3, [pc, #268]	; (8001ff0 <HAL_FDCAN_IRQHandler+0x250>)
 8001ee2:	400b      	ands	r3, r1
 8001ee4:	6513      	str	r3, [r2, #80]	; 0x50
 8001ee6:	4a41      	ldr	r2, [pc, #260]	; (8001fec <HAL_FDCAN_IRQHandler+0x24c>)
 8001ee8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001eea:	0f9b      	lsrs	r3, r3, #30
 8001eec:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8001eee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	f000 f9be 	bl	8002272 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8001ef6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d00d      	beq.n	8001f18 <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001f02:	4b3b      	ldr	r3, [pc, #236]	; (8001ff0 <HAL_FDCAN_IRQHandler+0x250>)
 8001f04:	400b      	ands	r3, r1
 8001f06:	6513      	str	r3, [r2, #80]	; 0x50
 8001f08:	4a38      	ldr	r2, [pc, #224]	; (8001fec <HAL_FDCAN_IRQHandler+0x24c>)
 8001f0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f0c:	0f9b      	lsrs	r3, r3, #30
 8001f0e:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8001f10:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f7fe fe26 	bl	8000b64 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8001f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d00d      	beq.n	8001f3a <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001f24:	4b32      	ldr	r3, [pc, #200]	; (8001ff0 <HAL_FDCAN_IRQHandler+0x250>)
 8001f26:	400b      	ands	r3, r1
 8001f28:	6513      	str	r3, [r2, #80]	; 0x50
 8001f2a:	4a30      	ldr	r2, [pc, #192]	; (8001fec <HAL_FDCAN_IRQHandler+0x24c>)
 8001f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f2e:	0f9b      	lsrs	r3, r3, #30
 8001f30:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8001f32:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f000 f9a7 	bl	8002288 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d011      	beq.n	8001f6c <HAL_FDCAN_IRQHandler+0x1cc>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d00a      	beq.n	8001f6c <HAL_FDCAN_IRQHandler+0x1cc>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f5e:	651a      	str	r2, [r3, #80]	; 0x50
 8001f60:	4b22      	ldr	r3, [pc, #136]	; (8001fec <HAL_FDCAN_IRQHandler+0x24c>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f000 f999 	bl	800229e <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d01e      	beq.n	8001fb8 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d017      	beq.n	8001fb8 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001f90:	62bb      	str	r3, [r7, #40]	; 0x28
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fa8:	651a      	str	r2, [r3, #80]	; 0x50
 8001faa:	4b10      	ldr	r3, [pc, #64]	; (8001fec <HAL_FDCAN_IRQHandler+0x24c>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8001fb0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f000 f97d 	bl	80022b2 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != 0U)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fbe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d016      	beq.n	8001ff4 <HAL_FDCAN_IRQHandler+0x254>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != 0U)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fcc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d00f      	beq.n	8001ff4 <HAL_FDCAN_IRQHandler+0x254>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001fdc:	651a      	str	r2, [r3, #80]	; 0x50
 8001fde:	4b03      	ldr	r3, [pc, #12]	; (8001fec <HAL_FDCAN_IRQHandler+0x24c>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f000 f97a 	bl	80022de <HAL_FDCAN_RxBufferNewMessageCallback>
 8001fea:	e003      	b.n	8001ff4 <HAL_FDCAN_IRQHandler+0x254>
 8001fec:	4000a800 	.word	0x4000a800
 8001ff0:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ffa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d011      	beq.n	8002026 <HAL_FDCAN_IRQHandler+0x286>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002008:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800200c:	2b00      	cmp	r3, #0
 800200e:	d00a      	beq.n	8002026 <HAL_FDCAN_IRQHandler+0x286>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002018:	651a      	str	r2, [r3, #80]	; 0x50
 800201a:	4b8d      	ldr	r3, [pc, #564]	; (8002250 <HAL_FDCAN_IRQHandler+0x4b0>)
 800201c:	2200      	movs	r2, #0
 800201e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f000 f966 	bl	80022f2 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800202c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002030:	2b00      	cmp	r3, #0
 8002032:	d011      	beq.n	8002058 <HAL_FDCAN_IRQHandler+0x2b8>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800203a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d00a      	beq.n	8002058 <HAL_FDCAN_IRQHandler+0x2b8>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800204a:	651a      	str	r2, [r3, #80]	; 0x50
 800204c:	4b80      	ldr	r3, [pc, #512]	; (8002250 <HAL_FDCAN_IRQHandler+0x4b0>)
 800204e:	2200      	movs	r2, #0
 8002050:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f000 f957 	bl	8002306 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800205e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d016      	beq.n	8002094 <HAL_FDCAN_IRQHandler+0x2f4>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800206c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002070:	2b00      	cmp	r3, #0
 8002072:	d00f      	beq.n	8002094 <HAL_FDCAN_IRQHandler+0x2f4>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800207c:	651a      	str	r2, [r3, #80]	; 0x50
 800207e:	4b74      	ldr	r3, [pc, #464]	; (8002250 <HAL_FDCAN_IRQHandler+0x4b0>)
 8002080:	2200      	movs	r2, #0
 8002082:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800208a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8002094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002096:	2b00      	cmp	r3, #0
 8002098:	d00d      	beq.n	80020b6 <HAL_FDCAN_IRQHandler+0x316>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80020a0:	4b6c      	ldr	r3, [pc, #432]	; (8002254 <HAL_FDCAN_IRQHandler+0x4b4>)
 80020a2:	400b      	ands	r3, r1
 80020a4:	6513      	str	r3, [r2, #80]	; 0x50
 80020a6:	4a6a      	ldr	r2, [pc, #424]	; (8002250 <HAL_FDCAN_IRQHandler+0x4b0>)
 80020a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020aa:	0f9b      	lsrs	r3, r3, #30
 80020ac:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80020ae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	f000 f946 	bl	8002342 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80020b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d011      	beq.n	80020e0 <HAL_FDCAN_IRQHandler+0x340>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80020c2:	4b64      	ldr	r3, [pc, #400]	; (8002254 <HAL_FDCAN_IRQHandler+0x4b4>)
 80020c4:	400b      	ands	r3, r1
 80020c6:	6513      	str	r3, [r2, #80]	; 0x50
 80020c8:	4a61      	ldr	r2, [pc, #388]	; (8002250 <HAL_FDCAN_IRQHandler+0x4b0>)
 80020ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020cc:	0f9b      	lsrs	r3, r3, #30
 80020ce:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80020d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020d8:	431a      	orrs	r2, r3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a5c      	ldr	r2, [pc, #368]	; (8002258 <HAL_FDCAN_IRQHandler+0x4b8>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	f040 80a6 	bne.w	8002238 <HAL_FDCAN_IRQHandler+0x498>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	f003 0303 	and.w	r3, r3, #3
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	f000 809e 	beq.w	8002238 <HAL_FDCAN_IRQHandler+0x498>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	6a1b      	ldr	r3, [r3, #32]
 8002102:	f003 030f 	and.w	r3, r3, #15
 8002106:	627b      	str	r3, [r7, #36]	; 0x24
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800210e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002110:	4013      	ands	r3, r2
 8002112:	627b      	str	r3, [r7, #36]	; 0x24
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	6a1b      	ldr	r3, [r3, #32]
 800211a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800211e:	623b      	str	r3, [r7, #32]
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002126:	6a3a      	ldr	r2, [r7, #32]
 8002128:	4013      	ands	r3, r2
 800212a:	623b      	str	r3, [r7, #32]
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	6a1b      	ldr	r3, [r3, #32]
 8002132:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8002136:	61fb      	str	r3, [r7, #28]
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800213e:	69fa      	ldr	r2, [r7, #28]
 8002140:	4013      	ands	r3, r2
 8002142:	61fb      	str	r3, [r7, #28]
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	6a1b      	ldr	r3, [r3, #32]
 800214a:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 800214e:	61bb      	str	r3, [r7, #24]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002156:	69ba      	ldr	r2, [r7, #24]
 8002158:	4013      	ands	r3, r2
 800215a:	61bb      	str	r3, [r7, #24]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	6a1b      	ldr	r3, [r3, #32]
 8002162:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 8002166:	617b      	str	r3, [r7, #20]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800216e:	697a      	ldr	r2, [r7, #20]
 8002170:	4013      	ands	r3, r2
 8002172:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8002174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002176:	2b00      	cmp	r3, #0
 8002178:	d007      	beq.n	800218a <HAL_FDCAN_IRQHandler+0x3ea>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002180:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8002182:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	f000 f8e7 	bl	8002358 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 800218a:	6a3b      	ldr	r3, [r7, #32]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d007      	beq.n	80021a0 <HAL_FDCAN_IRQHandler+0x400>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	6a3a      	ldr	r2, [r7, #32]
 8002196:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8002198:	6a39      	ldr	r1, [r7, #32]
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f000 f8e7 	bl	800236e <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (__HAL_FDCAN_TT_GET_IT_SOURCE(hfdcan, FDCAN_TT_IT_STOP_WATCH) != 0U)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d01b      	beq.n	80021e6 <HAL_FDCAN_IRQHandler+0x446>
      {
        if (__HAL_FDCAN_TT_GET_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH) != 0U)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	6a1b      	ldr	r3, [r3, #32]
 80021b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d014      	beq.n	80021e6 <HAL_FDCAN_IRQHandler+0x446>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021c2:	0c1b      	lsrs	r3, r3, #16
 80021c4:	b29b      	uxth	r3, r3
 80021c6:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80021d2:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	2240      	movs	r2, #64	; 0x40
 80021da:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 80021dc:	68fa      	ldr	r2, [r7, #12]
 80021de:	6939      	ldr	r1, [r7, #16]
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	f000 f8cf 	bl	8002384 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d007      	beq.n	80021fc <HAL_FDCAN_IRQHandler+0x45c>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	69fa      	ldr	r2, [r7, #28]
 80021f2:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 80021f4:	69f9      	ldr	r1, [r7, #28]
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f000 f8d0 	bl	800239c <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 80021fc:	69bb      	ldr	r3, [r7, #24]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d00b      	beq.n	800221a <HAL_FDCAN_IRQHandler+0x47a>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	69ba      	ldr	r2, [r7, #24]
 8002208:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8002210:	69bb      	ldr	r3, [r7, #24]
 8002212:	431a      	orrs	r2, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d00b      	beq.n	8002238 <HAL_FDCAN_IRQHandler+0x498>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	697a      	ldr	r2, [r7, #20]
 8002226:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	431a      	orrs	r2, r3
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800223e:	2b00      	cmp	r3, #0
 8002240:	d002      	beq.n	8002248 <HAL_FDCAN_IRQHandler+0x4a8>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f000 f873 	bl	800232e <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8002248:	bf00      	nop
 800224a:	3748      	adds	r7, #72	; 0x48
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	4000a800 	.word	0x4000a800
 8002254:	3fcfffff 	.word	0x3fcfffff
 8002258:	4000a000 	.word	0x4000a000

0800225c <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8002266:	bf00      	nop
 8002268:	370c      	adds	r7, #12
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr

08002272 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8002272:	b480      	push	{r7}
 8002274:	b083      	sub	sp, #12
 8002276:	af00      	add	r7, sp, #0
 8002278:	6078      	str	r0, [r7, #4]
 800227a:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 800227c:	bf00      	nop
 800227e:	370c      	adds	r7, #12
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr

08002288 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8002292:	bf00      	nop
 8002294:	370c      	adds	r7, #12
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr

0800229e <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800229e:	b480      	push	{r7}
 80022a0:	b083      	sub	sp, #12
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80022a6:	bf00      	nop
 80022a8:	370c      	adds	r7, #12
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr

080022b2 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80022b2:	b480      	push	{r7}
 80022b4:	b083      	sub	sp, #12
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	6078      	str	r0, [r7, #4]
 80022ba:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80022bc:	bf00      	nop
 80022be:	370c      	adds	r7, #12
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr

080022c8 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80022d2:	bf00      	nop
 80022d4:	370c      	adds	r7, #12
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr

080022de <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80022de:	b480      	push	{r7}
 80022e0:	b083      	sub	sp, #12
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 80022e6:	bf00      	nop
 80022e8:	370c      	adds	r7, #12
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr

080022f2 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80022f2:	b480      	push	{r7}
 80022f4:	b083      	sub	sp, #12
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80022fa:	bf00      	nop
 80022fc:	370c      	adds	r7, #12
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr

08002306 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002306:	b480      	push	{r7}
 8002308:	b083      	sub	sp, #12
 800230a:	af00      	add	r7, sp, #0
 800230c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 800230e:	bf00      	nop
 8002310:	370c      	adds	r7, #12
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr

0800231a <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800231a:	b480      	push	{r7}
 800231c:	b083      	sub	sp, #12
 800231e:	af00      	add	r7, sp, #0
 8002320:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8002322:	bf00      	nop
 8002324:	370c      	adds	r7, #12
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr

0800232e <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800232e:	b480      	push	{r7}
 8002330:	b083      	sub	sp, #12
 8002332:	af00      	add	r7, sp, #0
 8002334:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8002336:	bf00      	nop
 8002338:	370c      	adds	r7, #12
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr

08002342 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8002342:	b480      	push	{r7}
 8002344:	b083      	sub	sp, #12
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
 800234a:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 800234c:	bf00      	nop
 800234e:	370c      	adds	r7, #12
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr

08002358 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8002362:	bf00      	nop
 8002364:	370c      	adds	r7, #12
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr

0800236e <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 800236e:	b480      	push	{r7}
 8002370:	b083      	sub	sp, #12
 8002372:	af00      	add	r7, sp, #0
 8002374:	6078      	str	r0, [r7, #4]
 8002376:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8002378:	bf00      	nop
 800237a:	370c      	adds	r7, #12
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr

08002384 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8002384:	b480      	push	{r7}
 8002386:	b085      	sub	sp, #20
 8002388:	af00      	add	r7, sp, #0
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	60b9      	str	r1, [r7, #8]
 800238e:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8002390:	bf00      	nop
 8002392:	3714      	adds	r7, #20
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr

0800239c <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 80023a6:	bf00      	nop
 80023a8:	370c      	adds	r7, #12
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr

080023b2 <HAL_FDCAN_GetState>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL state
  */
HAL_FDCAN_StateTypeDef HAL_FDCAN_GetState(FDCAN_HandleTypeDef *hfdcan)
{
 80023b2:	b480      	push	{r7}
 80023b4:	b083      	sub	sp, #12
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	6078      	str	r0, [r7, #4]
  /* Return FDCAN state */
  return hfdcan->State;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80023c0:	b2db      	uxtb	r3, r3
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	370c      	adds	r7, #12
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr

080023ce <HAL_FDCAN_GetError>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval FDCAN Error Code
  */
uint32_t HAL_FDCAN_GetError(FDCAN_HandleTypeDef *hfdcan)
{
 80023ce:	b480      	push	{r7}
 80023d0:	b083      	sub	sp, #12
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	6078      	str	r0, [r7, #4]
  /* Return FDCAN error code */
  return hfdcan->ErrorCode;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
}
 80023dc:	4618      	mov	r0, r3
 80023de:	370c      	adds	r7, #12
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr

080023e8 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b085      	sub	sp, #20
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023f4:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80023fe:	4ba7      	ldr	r3, [pc, #668]	; (800269c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002400:	4013      	ands	r3, r2
 8002402:	68ba      	ldr	r2, [r7, #8]
 8002404:	0091      	lsls	r1, r2, #2
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	6812      	ldr	r2, [r2, #0]
 800240a:	430b      	orrs	r3, r1
 800240c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002418:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002420:	041a      	lsls	r2, r3, #16
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	430a      	orrs	r2, r1
 8002428:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002430:	68ba      	ldr	r2, [r7, #8]
 8002432:	4413      	add	r3, r2
 8002434:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800243e:	4b97      	ldr	r3, [pc, #604]	; (800269c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002440:	4013      	ands	r3, r2
 8002442:	68ba      	ldr	r2, [r7, #8]
 8002444:	0091      	lsls	r1, r2, #2
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	6812      	ldr	r2, [r2, #0]
 800244a:	430b      	orrs	r3, r1
 800244c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002458:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002460:	041a      	lsls	r2, r3, #16
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	430a      	orrs	r2, r1
 8002468:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002470:	005b      	lsls	r3, r3, #1
 8002472:	68ba      	ldr	r2, [r7, #8]
 8002474:	4413      	add	r3, r2
 8002476:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8002480:	4b86      	ldr	r3, [pc, #536]	; (800269c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002482:	4013      	ands	r3, r2
 8002484:	68ba      	ldr	r2, [r7, #8]
 8002486:	0091      	lsls	r1, r2, #2
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	6812      	ldr	r2, [r2, #0]
 800248c:	430b      	orrs	r3, r1
 800248e:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800249a:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a2:	041a      	lsls	r2, r3, #16
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	430a      	orrs	r2, r1
 80024aa:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80024b6:	fb02 f303 	mul.w	r3, r2, r3
 80024ba:	68ba      	ldr	r2, [r7, #8]
 80024bc:	4413      	add	r3, r2
 80024be:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80024c8:	4b74      	ldr	r3, [pc, #464]	; (800269c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80024ca:	4013      	ands	r3, r2
 80024cc:	68ba      	ldr	r2, [r7, #8]
 80024ce:	0091      	lsls	r1, r2, #2
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	6812      	ldr	r2, [r2, #0]
 80024d4:	430b      	orrs	r3, r1
 80024d6:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80024e2:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024ea:	041a      	lsls	r2, r3, #16
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	430a      	orrs	r2, r1
 80024f2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80024fe:	fb02 f303 	mul.w	r3, r2, r3
 8002502:	68ba      	ldr	r2, [r7, #8]
 8002504:	4413      	add	r3, r2
 8002506:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8002510:	4b62      	ldr	r3, [pc, #392]	; (800269c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002512:	4013      	ands	r3, r2
 8002514:	68ba      	ldr	r2, [r7, #8]
 8002516:	0091      	lsls	r1, r2, #2
 8002518:	687a      	ldr	r2, [r7, #4]
 800251a:	6812      	ldr	r2, [r2, #0]
 800251c:	430b      	orrs	r3, r1
 800251e:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002526:	687a      	ldr	r2, [r7, #4]
 8002528:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800252a:	fb02 f303 	mul.w	r3, r2, r3
 800252e:	68ba      	ldr	r2, [r7, #8]
 8002530:	4413      	add	r3, r2
 8002532:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800253c:	4b57      	ldr	r3, [pc, #348]	; (800269c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800253e:	4013      	ands	r3, r2
 8002540:	68ba      	ldr	r2, [r7, #8]
 8002542:	0091      	lsls	r1, r2, #2
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	6812      	ldr	r2, [r2, #0]
 8002548:	430b      	orrs	r3, r1
 800254a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002556:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800255e:	041a      	lsls	r2, r3, #16
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	430a      	orrs	r2, r1
 8002566:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800256e:	005b      	lsls	r3, r3, #1
 8002570:	68ba      	ldr	r2, [r7, #8]
 8002572:	4413      	add	r3, r2
 8002574:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800257e:	4b47      	ldr	r3, [pc, #284]	; (800269c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002580:	4013      	ands	r3, r2
 8002582:	68ba      	ldr	r2, [r7, #8]
 8002584:	0091      	lsls	r1, r2, #2
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	6812      	ldr	r2, [r2, #0]
 800258a:	430b      	orrs	r3, r1
 800258c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002598:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025a0:	041a      	lsls	r2, r3, #16
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	430a      	orrs	r2, r1
 80025a8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80025b4:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025bc:	061a      	lsls	r2, r3, #24
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	430a      	orrs	r2, r1
 80025c4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025cc:	4b34      	ldr	r3, [pc, #208]	; (80026a0 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80025ce:	4413      	add	r3, r2
 80025d0:	009a      	lsls	r2, r3, #2
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	441a      	add	r2, r3
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025ee:	00db      	lsls	r3, r3, #3
 80025f0:	441a      	add	r2, r3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fe:	6879      	ldr	r1, [r7, #4]
 8002600:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8002602:	fb01 f303 	mul.w	r3, r1, r3
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	441a      	add	r2, r3
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002616:	6879      	ldr	r1, [r7, #4]
 8002618:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 800261a:	fb01 f303 	mul.w	r3, r1, r3
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	441a      	add	r2, r3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800262e:	6879      	ldr	r1, [r7, #4]
 8002630:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8002632:	fb01 f303 	mul.w	r3, r1, r3
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	441a      	add	r2, r3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800264a:	00db      	lsls	r3, r3, #3
 800264c:	441a      	add	r2, r3
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800265e:	6879      	ldr	r1, [r7, #4]
 8002660:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8002662:	fb01 f303 	mul.w	r3, r1, r3
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	441a      	add	r2, r3
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800267a:	6879      	ldr	r1, [r7, #4]
 800267c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800267e:	fb01 f303 	mul.w	r3, r1, r3
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	441a      	add	r2, r3
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002692:	4a04      	ldr	r2, [pc, #16]	; (80026a4 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d915      	bls.n	80026c4 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8002698:	e006      	b.n	80026a8 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 800269a:	bf00      	nop
 800269c:	ffff0003 	.word	0xffff0003
 80026a0:	10002b00 	.word	0x10002b00
 80026a4:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80026ae:	f043 0220 	orr.w	r2, r3, #32
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2203      	movs	r2, #3
 80026bc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e010      	b.n	80026e6 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026c8:	60fb      	str	r3, [r7, #12]
 80026ca:	e005      	b.n	80026d8 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2200      	movs	r2, #0
 80026d0:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	3304      	adds	r3, #4
 80026d6:	60fb      	str	r3, [r7, #12]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026de:	68fa      	ldr	r2, [r7, #12]
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d3f3      	bcc.n	80026cc <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80026e4:	2300      	movs	r3, #0
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3714      	adds	r7, #20
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr
 80026f2:	bf00      	nop

080026f4 <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b089      	sub	sp, #36	; 0x24
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	60f8      	str	r0, [r7, #12]
 80026fc:	60b9      	str	r1, [r7, #8]
 80026fe:	607a      	str	r2, [r7, #4]
 8002700:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d10a      	bne.n	8002720 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8002712:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18));
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800271a:	4313      	orrs	r3, r2
 800271c:	61fb      	str	r3, [r7, #28]
 800271e:	e00a      	b.n	8002736 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8002728:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800272e:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002730:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002734:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	6a1b      	ldr	r3, [r3, #32]
 800273a:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8002740:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8002746:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 800274c:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8002752:	4313      	orrs	r3, r2
 8002754:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002760:	6839      	ldr	r1, [r7, #0]
 8002762:	fb01 f303 	mul.w	r3, r1, r3
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	4413      	add	r3, r2
 800276a:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 800276c:	69bb      	ldr	r3, [r7, #24]
 800276e:	69fa      	ldr	r2, [r7, #28]
 8002770:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8002772:	69bb      	ldr	r3, [r7, #24]
 8002774:	3304      	adds	r3, #4
 8002776:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8002778:	69bb      	ldr	r3, [r7, #24]
 800277a:	693a      	ldr	r2, [r7, #16]
 800277c:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800277e:	69bb      	ldr	r3, [r7, #24]
 8002780:	3304      	adds	r3, #4
 8002782:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8002784:	2300      	movs	r3, #0
 8002786:	617b      	str	r3, [r7, #20]
 8002788:	e020      	b.n	80027cc <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	3303      	adds	r3, #3
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	4413      	add	r3, r2
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	3302      	adds	r3, #2
 800279a:	6879      	ldr	r1, [r7, #4]
 800279c:	440b      	add	r3, r1
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 80027a2:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	3301      	adds	r3, #1
 80027a8:	6879      	ldr	r1, [r7, #4]
 80027aa:	440b      	add	r3, r1
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 80027b0:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80027b2:	6879      	ldr	r1, [r7, #4]
 80027b4:	697a      	ldr	r2, [r7, #20]
 80027b6:	440a      	add	r2, r1
 80027b8:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 80027ba:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 80027bc:	69bb      	ldr	r3, [r7, #24]
 80027be:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80027c0:	69bb      	ldr	r3, [r7, #24]
 80027c2:	3304      	adds	r3, #4
 80027c4:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	3304      	adds	r3, #4
 80027ca:	617b      	str	r3, [r7, #20]
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	0c1b      	lsrs	r3, r3, #16
 80027d2:	4a06      	ldr	r2, [pc, #24]	; (80027ec <FDCAN_CopyMessageToRAM+0xf8>)
 80027d4:	5cd3      	ldrb	r3, [r2, r3]
 80027d6:	461a      	mov	r2, r3
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	4293      	cmp	r3, r2
 80027dc:	d3d5      	bcc.n	800278a <FDCAN_CopyMessageToRAM+0x96>
  }
}
 80027de:	bf00      	nop
 80027e0:	bf00      	nop
 80027e2:	3724      	adds	r7, #36	; 0x24
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr
 80027ec:	08006350 	.word	0x08006350

080027f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b089      	sub	sp, #36	; 0x24
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80027fa:	2300      	movs	r3, #0
 80027fc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80027fe:	4b89      	ldr	r3, [pc, #548]	; (8002a24 <HAL_GPIO_Init+0x234>)
 8002800:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002802:	e194      	b.n	8002b2e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	2101      	movs	r1, #1
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	fa01 f303 	lsl.w	r3, r1, r3
 8002810:	4013      	ands	r3, r2
 8002812:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	2b00      	cmp	r3, #0
 8002818:	f000 8186 	beq.w	8002b28 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	2b01      	cmp	r3, #1
 8002822:	d00b      	beq.n	800283c <HAL_GPIO_Init+0x4c>
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	2b02      	cmp	r3, #2
 800282a:	d007      	beq.n	800283c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002830:	2b11      	cmp	r3, #17
 8002832:	d003      	beq.n	800283c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	2b12      	cmp	r3, #18
 800283a:	d130      	bne.n	800289e <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	005b      	lsls	r3, r3, #1
 8002846:	2203      	movs	r2, #3
 8002848:	fa02 f303 	lsl.w	r3, r2, r3
 800284c:	43db      	mvns	r3, r3
 800284e:	69ba      	ldr	r2, [r7, #24]
 8002850:	4013      	ands	r3, r2
 8002852:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	68da      	ldr	r2, [r3, #12]
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	005b      	lsls	r3, r3, #1
 800285c:	fa02 f303 	lsl.w	r3, r2, r3
 8002860:	69ba      	ldr	r2, [r7, #24]
 8002862:	4313      	orrs	r3, r2
 8002864:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	69ba      	ldr	r2, [r7, #24]
 800286a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002872:	2201      	movs	r2, #1
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	fa02 f303 	lsl.w	r3, r2, r3
 800287a:	43db      	mvns	r3, r3
 800287c:	69ba      	ldr	r2, [r7, #24]
 800287e:	4013      	ands	r3, r2
 8002880:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	091b      	lsrs	r3, r3, #4
 8002888:	f003 0201 	and.w	r2, r3, #1
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	fa02 f303 	lsl.w	r3, r2, r3
 8002892:	69ba      	ldr	r2, [r7, #24]
 8002894:	4313      	orrs	r3, r2
 8002896:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	69ba      	ldr	r2, [r7, #24]
 800289c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	68db      	ldr	r3, [r3, #12]
 80028a2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	005b      	lsls	r3, r3, #1
 80028a8:	2203      	movs	r2, #3
 80028aa:	fa02 f303 	lsl.w	r3, r2, r3
 80028ae:	43db      	mvns	r3, r3
 80028b0:	69ba      	ldr	r2, [r7, #24]
 80028b2:	4013      	ands	r3, r2
 80028b4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	689a      	ldr	r2, [r3, #8]
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	005b      	lsls	r3, r3, #1
 80028be:	fa02 f303 	lsl.w	r3, r2, r3
 80028c2:	69ba      	ldr	r2, [r7, #24]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	69ba      	ldr	r2, [r7, #24]
 80028cc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d003      	beq.n	80028de <HAL_GPIO_Init+0xee>
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	2b12      	cmp	r3, #18
 80028dc:	d123      	bne.n	8002926 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	08da      	lsrs	r2, r3, #3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	3208      	adds	r2, #8
 80028e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	f003 0307 	and.w	r3, r3, #7
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	220f      	movs	r2, #15
 80028f6:	fa02 f303 	lsl.w	r3, r2, r3
 80028fa:	43db      	mvns	r3, r3
 80028fc:	69ba      	ldr	r2, [r7, #24]
 80028fe:	4013      	ands	r3, r2
 8002900:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	691a      	ldr	r2, [r3, #16]
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	f003 0307 	and.w	r3, r3, #7
 800290c:	009b      	lsls	r3, r3, #2
 800290e:	fa02 f303 	lsl.w	r3, r2, r3
 8002912:	69ba      	ldr	r2, [r7, #24]
 8002914:	4313      	orrs	r3, r2
 8002916:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	08da      	lsrs	r2, r3, #3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	3208      	adds	r2, #8
 8002920:	69b9      	ldr	r1, [r7, #24]
 8002922:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800292c:	69fb      	ldr	r3, [r7, #28]
 800292e:	005b      	lsls	r3, r3, #1
 8002930:	2203      	movs	r2, #3
 8002932:	fa02 f303 	lsl.w	r3, r2, r3
 8002936:	43db      	mvns	r3, r3
 8002938:	69ba      	ldr	r2, [r7, #24]
 800293a:	4013      	ands	r3, r2
 800293c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f003 0203 	and.w	r2, r3, #3
 8002946:	69fb      	ldr	r3, [r7, #28]
 8002948:	005b      	lsls	r3, r3, #1
 800294a:	fa02 f303 	lsl.w	r3, r2, r3
 800294e:	69ba      	ldr	r2, [r7, #24]
 8002950:	4313      	orrs	r3, r2
 8002952:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	69ba      	ldr	r2, [r7, #24]
 8002958:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002962:	2b00      	cmp	r3, #0
 8002964:	f000 80e0 	beq.w	8002b28 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002968:	4b2f      	ldr	r3, [pc, #188]	; (8002a28 <HAL_GPIO_Init+0x238>)
 800296a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800296e:	4a2e      	ldr	r2, [pc, #184]	; (8002a28 <HAL_GPIO_Init+0x238>)
 8002970:	f043 0302 	orr.w	r3, r3, #2
 8002974:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002978:	4b2b      	ldr	r3, [pc, #172]	; (8002a28 <HAL_GPIO_Init+0x238>)
 800297a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800297e:	f003 0302 	and.w	r3, r3, #2
 8002982:	60fb      	str	r3, [r7, #12]
 8002984:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002986:	4a29      	ldr	r2, [pc, #164]	; (8002a2c <HAL_GPIO_Init+0x23c>)
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	089b      	lsrs	r3, r3, #2
 800298c:	3302      	adds	r3, #2
 800298e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002992:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002994:	69fb      	ldr	r3, [r7, #28]
 8002996:	f003 0303 	and.w	r3, r3, #3
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	220f      	movs	r2, #15
 800299e:	fa02 f303 	lsl.w	r3, r2, r3
 80029a2:	43db      	mvns	r3, r3
 80029a4:	69ba      	ldr	r2, [r7, #24]
 80029a6:	4013      	ands	r3, r2
 80029a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4a20      	ldr	r2, [pc, #128]	; (8002a30 <HAL_GPIO_Init+0x240>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d052      	beq.n	8002a58 <HAL_GPIO_Init+0x268>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	4a1f      	ldr	r2, [pc, #124]	; (8002a34 <HAL_GPIO_Init+0x244>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d031      	beq.n	8002a1e <HAL_GPIO_Init+0x22e>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4a1e      	ldr	r2, [pc, #120]	; (8002a38 <HAL_GPIO_Init+0x248>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d02b      	beq.n	8002a1a <HAL_GPIO_Init+0x22a>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4a1d      	ldr	r2, [pc, #116]	; (8002a3c <HAL_GPIO_Init+0x24c>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d025      	beq.n	8002a16 <HAL_GPIO_Init+0x226>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	4a1c      	ldr	r2, [pc, #112]	; (8002a40 <HAL_GPIO_Init+0x250>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d01f      	beq.n	8002a12 <HAL_GPIO_Init+0x222>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4a1b      	ldr	r2, [pc, #108]	; (8002a44 <HAL_GPIO_Init+0x254>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d019      	beq.n	8002a0e <HAL_GPIO_Init+0x21e>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4a1a      	ldr	r2, [pc, #104]	; (8002a48 <HAL_GPIO_Init+0x258>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d013      	beq.n	8002a0a <HAL_GPIO_Init+0x21a>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4a19      	ldr	r2, [pc, #100]	; (8002a4c <HAL_GPIO_Init+0x25c>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d00d      	beq.n	8002a06 <HAL_GPIO_Init+0x216>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4a18      	ldr	r2, [pc, #96]	; (8002a50 <HAL_GPIO_Init+0x260>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d007      	beq.n	8002a02 <HAL_GPIO_Init+0x212>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4a17      	ldr	r2, [pc, #92]	; (8002a54 <HAL_GPIO_Init+0x264>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d101      	bne.n	80029fe <HAL_GPIO_Init+0x20e>
 80029fa:	2309      	movs	r3, #9
 80029fc:	e02d      	b.n	8002a5a <HAL_GPIO_Init+0x26a>
 80029fe:	230a      	movs	r3, #10
 8002a00:	e02b      	b.n	8002a5a <HAL_GPIO_Init+0x26a>
 8002a02:	2308      	movs	r3, #8
 8002a04:	e029      	b.n	8002a5a <HAL_GPIO_Init+0x26a>
 8002a06:	2307      	movs	r3, #7
 8002a08:	e027      	b.n	8002a5a <HAL_GPIO_Init+0x26a>
 8002a0a:	2306      	movs	r3, #6
 8002a0c:	e025      	b.n	8002a5a <HAL_GPIO_Init+0x26a>
 8002a0e:	2305      	movs	r3, #5
 8002a10:	e023      	b.n	8002a5a <HAL_GPIO_Init+0x26a>
 8002a12:	2304      	movs	r3, #4
 8002a14:	e021      	b.n	8002a5a <HAL_GPIO_Init+0x26a>
 8002a16:	2303      	movs	r3, #3
 8002a18:	e01f      	b.n	8002a5a <HAL_GPIO_Init+0x26a>
 8002a1a:	2302      	movs	r3, #2
 8002a1c:	e01d      	b.n	8002a5a <HAL_GPIO_Init+0x26a>
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e01b      	b.n	8002a5a <HAL_GPIO_Init+0x26a>
 8002a22:	bf00      	nop
 8002a24:	58000080 	.word	0x58000080
 8002a28:	58024400 	.word	0x58024400
 8002a2c:	58000400 	.word	0x58000400
 8002a30:	58020000 	.word	0x58020000
 8002a34:	58020400 	.word	0x58020400
 8002a38:	58020800 	.word	0x58020800
 8002a3c:	58020c00 	.word	0x58020c00
 8002a40:	58021000 	.word	0x58021000
 8002a44:	58021400 	.word	0x58021400
 8002a48:	58021800 	.word	0x58021800
 8002a4c:	58021c00 	.word	0x58021c00
 8002a50:	58022000 	.word	0x58022000
 8002a54:	58022400 	.word	0x58022400
 8002a58:	2300      	movs	r3, #0
 8002a5a:	69fa      	ldr	r2, [r7, #28]
 8002a5c:	f002 0203 	and.w	r2, r2, #3
 8002a60:	0092      	lsls	r2, r2, #2
 8002a62:	4093      	lsls	r3, r2
 8002a64:	69ba      	ldr	r2, [r7, #24]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a6a:	4938      	ldr	r1, [pc, #224]	; (8002b4c <HAL_GPIO_Init+0x35c>)
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	089b      	lsrs	r3, r3, #2
 8002a70:	3302      	adds	r3, #2
 8002a72:	69ba      	ldr	r2, [r7, #24]
 8002a74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	43db      	mvns	r3, r3
 8002a82:	69ba      	ldr	r2, [r7, #24]
 8002a84:	4013      	ands	r3, r2
 8002a86:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d003      	beq.n	8002a9c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002a94:	69ba      	ldr	r2, [r7, #24]
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	69ba      	ldr	r2, [r7, #24]
 8002aa0:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	43db      	mvns	r3, r3
 8002aac:	69ba      	ldr	r2, [r7, #24]
 8002aae:	4013      	ands	r3, r2
 8002ab0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d003      	beq.n	8002ac6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002abe:	69ba      	ldr	r2, [r7, #24]
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	69ba      	ldr	r2, [r7, #24]
 8002aca:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002acc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	43db      	mvns	r3, r3
 8002ad8:	69ba      	ldr	r2, [r7, #24]
 8002ada:	4013      	ands	r3, r2
 8002adc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d003      	beq.n	8002af2 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8002aea:	69ba      	ldr	r2, [r7, #24]
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002af2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002af6:	69bb      	ldr	r3, [r7, #24]
 8002af8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002afa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	43db      	mvns	r3, r3
 8002b06:	69ba      	ldr	r2, [r7, #24]
 8002b08:	4013      	ands	r3, r2
 8002b0a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d003      	beq.n	8002b20 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8002b18:	69ba      	ldr	r2, [r7, #24]
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002b20:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b24:	69bb      	ldr	r3, [r7, #24]
 8002b26:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	fa22 f303 	lsr.w	r3, r2, r3
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	f47f ae63 	bne.w	8002804 <HAL_GPIO_Init+0x14>
  }
}
 8002b3e:	bf00      	nop
 8002b40:	bf00      	nop
 8002b42:	3724      	adds	r7, #36	; 0x24
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr
 8002b4c:	58000400 	.word	0x58000400

08002b50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	460b      	mov	r3, r1
 8002b5a:	807b      	strh	r3, [r7, #2]
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b60:	787b      	ldrb	r3, [r7, #1]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d003      	beq.n	8002b6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b66:	887a      	ldrh	r2, [r7, #2]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002b6c:	e003      	b.n	8002b76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002b6e:	887b      	ldrh	r3, [r7, #2]
 8002b70:	041a      	lsls	r2, r3, #16
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	619a      	str	r2, [r3, #24]
}
 8002b76:	bf00      	nop
 8002b78:	370c      	adds	r7, #12
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr

08002b82 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002b82:	b480      	push	{r7}
 8002b84:	b085      	sub	sp, #20
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	6078      	str	r0, [r7, #4]
 8002b8a:	460b      	mov	r3, r1
 8002b8c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	695b      	ldr	r3, [r3, #20]
 8002b92:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b94:	887a      	ldrh	r2, [r7, #2]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	4013      	ands	r3, r2
 8002b9a:	041a      	lsls	r2, r3, #16
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	43d9      	mvns	r1, r3
 8002ba0:	887b      	ldrh	r3, [r7, #2]
 8002ba2:	400b      	ands	r3, r1
 8002ba4:	431a      	orrs	r2, r3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	619a      	str	r2, [r3, #24]
}
 8002baa:	bf00      	nop
 8002bac:	3714      	adds	r7, #20
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr
	...

08002bb8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b084      	sub	sp, #16
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002bc0:	4b19      	ldr	r3, [pc, #100]	; (8002c28 <HAL_PWREx_ConfigSupply+0x70>)
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	f003 0304 	and.w	r3, r3, #4
 8002bc8:	2b04      	cmp	r3, #4
 8002bca:	d00a      	beq.n	8002be2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002bcc:	4b16      	ldr	r3, [pc, #88]	; (8002c28 <HAL_PWREx_ConfigSupply+0x70>)
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	f003 0307 	and.w	r3, r3, #7
 8002bd4:	687a      	ldr	r2, [r7, #4]
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d001      	beq.n	8002bde <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e01f      	b.n	8002c1e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002bde:	2300      	movs	r3, #0
 8002be0:	e01d      	b.n	8002c1e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002be2:	4b11      	ldr	r3, [pc, #68]	; (8002c28 <HAL_PWREx_ConfigSupply+0x70>)
 8002be4:	68db      	ldr	r3, [r3, #12]
 8002be6:	f023 0207 	bic.w	r2, r3, #7
 8002bea:	490f      	ldr	r1, [pc, #60]	; (8002c28 <HAL_PWREx_ConfigSupply+0x70>)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002bf2:	f7fe fab3 	bl	800115c <HAL_GetTick>
 8002bf6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002bf8:	e009      	b.n	8002c0e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002bfa:	f7fe faaf 	bl	800115c <HAL_GetTick>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	1ad3      	subs	r3, r2, r3
 8002c04:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c08:	d901      	bls.n	8002c0e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e007      	b.n	8002c1e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002c0e:	4b06      	ldr	r3, [pc, #24]	; (8002c28 <HAL_PWREx_ConfigSupply+0x70>)
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c1a:	d1ee      	bne.n	8002bfa <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002c1c:	2300      	movs	r3, #0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3710      	adds	r7, #16
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	58024800 	.word	0x58024800

08002c2c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b08c      	sub	sp, #48	; 0x30
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d101      	bne.n	8002c3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e3ff      	b.n	800343e <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 0301 	and.w	r3, r3, #1
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	f000 8087 	beq.w	8002d5a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c4c:	4b99      	ldr	r3, [pc, #612]	; (8002eb4 <HAL_RCC_OscConfig+0x288>)
 8002c4e:	691b      	ldr	r3, [r3, #16]
 8002c50:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002c54:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002c56:	4b97      	ldr	r3, [pc, #604]	; (8002eb4 <HAL_RCC_OscConfig+0x288>)
 8002c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c5a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c5e:	2b10      	cmp	r3, #16
 8002c60:	d007      	beq.n	8002c72 <HAL_RCC_OscConfig+0x46>
 8002c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c64:	2b18      	cmp	r3, #24
 8002c66:	d110      	bne.n	8002c8a <HAL_RCC_OscConfig+0x5e>
 8002c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c6a:	f003 0303 	and.w	r3, r3, #3
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d10b      	bne.n	8002c8a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c72:	4b90      	ldr	r3, [pc, #576]	; (8002eb4 <HAL_RCC_OscConfig+0x288>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d06c      	beq.n	8002d58 <HAL_RCC_OscConfig+0x12c>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d168      	bne.n	8002d58 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e3d9      	b.n	800343e <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c92:	d106      	bne.n	8002ca2 <HAL_RCC_OscConfig+0x76>
 8002c94:	4b87      	ldr	r3, [pc, #540]	; (8002eb4 <HAL_RCC_OscConfig+0x288>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a86      	ldr	r2, [pc, #536]	; (8002eb4 <HAL_RCC_OscConfig+0x288>)
 8002c9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c9e:	6013      	str	r3, [r2, #0]
 8002ca0:	e02e      	b.n	8002d00 <HAL_RCC_OscConfig+0xd4>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d10c      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x98>
 8002caa:	4b82      	ldr	r3, [pc, #520]	; (8002eb4 <HAL_RCC_OscConfig+0x288>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a81      	ldr	r2, [pc, #516]	; (8002eb4 <HAL_RCC_OscConfig+0x288>)
 8002cb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cb4:	6013      	str	r3, [r2, #0]
 8002cb6:	4b7f      	ldr	r3, [pc, #508]	; (8002eb4 <HAL_RCC_OscConfig+0x288>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a7e      	ldr	r2, [pc, #504]	; (8002eb4 <HAL_RCC_OscConfig+0x288>)
 8002cbc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cc0:	6013      	str	r3, [r2, #0]
 8002cc2:	e01d      	b.n	8002d00 <HAL_RCC_OscConfig+0xd4>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ccc:	d10c      	bne.n	8002ce8 <HAL_RCC_OscConfig+0xbc>
 8002cce:	4b79      	ldr	r3, [pc, #484]	; (8002eb4 <HAL_RCC_OscConfig+0x288>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a78      	ldr	r2, [pc, #480]	; (8002eb4 <HAL_RCC_OscConfig+0x288>)
 8002cd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cd8:	6013      	str	r3, [r2, #0]
 8002cda:	4b76      	ldr	r3, [pc, #472]	; (8002eb4 <HAL_RCC_OscConfig+0x288>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a75      	ldr	r2, [pc, #468]	; (8002eb4 <HAL_RCC_OscConfig+0x288>)
 8002ce0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ce4:	6013      	str	r3, [r2, #0]
 8002ce6:	e00b      	b.n	8002d00 <HAL_RCC_OscConfig+0xd4>
 8002ce8:	4b72      	ldr	r3, [pc, #456]	; (8002eb4 <HAL_RCC_OscConfig+0x288>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a71      	ldr	r2, [pc, #452]	; (8002eb4 <HAL_RCC_OscConfig+0x288>)
 8002cee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cf2:	6013      	str	r3, [r2, #0]
 8002cf4:	4b6f      	ldr	r3, [pc, #444]	; (8002eb4 <HAL_RCC_OscConfig+0x288>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a6e      	ldr	r2, [pc, #440]	; (8002eb4 <HAL_RCC_OscConfig+0x288>)
 8002cfa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cfe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d013      	beq.n	8002d30 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d08:	f7fe fa28 	bl	800115c <HAL_GetTick>
 8002d0c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d0e:	e008      	b.n	8002d22 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d10:	f7fe fa24 	bl	800115c <HAL_GetTick>
 8002d14:	4602      	mov	r2, r0
 8002d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	2b64      	cmp	r3, #100	; 0x64
 8002d1c:	d901      	bls.n	8002d22 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	e38d      	b.n	800343e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d22:	4b64      	ldr	r3, [pc, #400]	; (8002eb4 <HAL_RCC_OscConfig+0x288>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d0f0      	beq.n	8002d10 <HAL_RCC_OscConfig+0xe4>
 8002d2e:	e014      	b.n	8002d5a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d30:	f7fe fa14 	bl	800115c <HAL_GetTick>
 8002d34:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002d36:	e008      	b.n	8002d4a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d38:	f7fe fa10 	bl	800115c <HAL_GetTick>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	2b64      	cmp	r3, #100	; 0x64
 8002d44:	d901      	bls.n	8002d4a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	e379      	b.n	800343e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002d4a:	4b5a      	ldr	r3, [pc, #360]	; (8002eb4 <HAL_RCC_OscConfig+0x288>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d1f0      	bne.n	8002d38 <HAL_RCC_OscConfig+0x10c>
 8002d56:	e000      	b.n	8002d5a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0302 	and.w	r3, r3, #2
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	f000 80ae 	beq.w	8002ec4 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d68:	4b52      	ldr	r3, [pc, #328]	; (8002eb4 <HAL_RCC_OscConfig+0x288>)
 8002d6a:	691b      	ldr	r3, [r3, #16]
 8002d6c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d70:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002d72:	4b50      	ldr	r3, [pc, #320]	; (8002eb4 <HAL_RCC_OscConfig+0x288>)
 8002d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d76:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002d78:	6a3b      	ldr	r3, [r7, #32]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d007      	beq.n	8002d8e <HAL_RCC_OscConfig+0x162>
 8002d7e:	6a3b      	ldr	r3, [r7, #32]
 8002d80:	2b18      	cmp	r3, #24
 8002d82:	d13a      	bne.n	8002dfa <HAL_RCC_OscConfig+0x1ce>
 8002d84:	69fb      	ldr	r3, [r7, #28]
 8002d86:	f003 0303 	and.w	r3, r3, #3
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d135      	bne.n	8002dfa <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d8e:	4b49      	ldr	r3, [pc, #292]	; (8002eb4 <HAL_RCC_OscConfig+0x288>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0304 	and.w	r3, r3, #4
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d005      	beq.n	8002da6 <HAL_RCC_OscConfig+0x17a>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d101      	bne.n	8002da6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e34b      	b.n	800343e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002da6:	f7fe f9e5 	bl	8001174 <HAL_GetREVID>
 8002daa:	4603      	mov	r3, r0
 8002dac:	f241 0203 	movw	r2, #4099	; 0x1003
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d817      	bhi.n	8002de4 <HAL_RCC_OscConfig+0x1b8>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	691b      	ldr	r3, [r3, #16]
 8002db8:	2b40      	cmp	r3, #64	; 0x40
 8002dba:	d108      	bne.n	8002dce <HAL_RCC_OscConfig+0x1a2>
 8002dbc:	4b3d      	ldr	r3, [pc, #244]	; (8002eb4 <HAL_RCC_OscConfig+0x288>)
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002dc4:	4a3b      	ldr	r2, [pc, #236]	; (8002eb4 <HAL_RCC_OscConfig+0x288>)
 8002dc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dca:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002dcc:	e07a      	b.n	8002ec4 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dce:	4b39      	ldr	r3, [pc, #228]	; (8002eb4 <HAL_RCC_OscConfig+0x288>)
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	691b      	ldr	r3, [r3, #16]
 8002dda:	031b      	lsls	r3, r3, #12
 8002ddc:	4935      	ldr	r1, [pc, #212]	; (8002eb4 <HAL_RCC_OscConfig+0x288>)
 8002dde:	4313      	orrs	r3, r2
 8002de0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002de2:	e06f      	b.n	8002ec4 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002de4:	4b33      	ldr	r3, [pc, #204]	; (8002eb4 <HAL_RCC_OscConfig+0x288>)
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	691b      	ldr	r3, [r3, #16]
 8002df0:	061b      	lsls	r3, r3, #24
 8002df2:	4930      	ldr	r1, [pc, #192]	; (8002eb4 <HAL_RCC_OscConfig+0x288>)
 8002df4:	4313      	orrs	r3, r2
 8002df6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002df8:	e064      	b.n	8002ec4 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	68db      	ldr	r3, [r3, #12]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d045      	beq.n	8002e8e <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002e02:	4b2c      	ldr	r3, [pc, #176]	; (8002eb4 <HAL_RCC_OscConfig+0x288>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f023 0219 	bic.w	r2, r3, #25
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	68db      	ldr	r3, [r3, #12]
 8002e0e:	4929      	ldr	r1, [pc, #164]	; (8002eb4 <HAL_RCC_OscConfig+0x288>)
 8002e10:	4313      	orrs	r3, r2
 8002e12:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e14:	f7fe f9a2 	bl	800115c <HAL_GetTick>
 8002e18:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e1a:	e008      	b.n	8002e2e <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e1c:	f7fe f99e 	bl	800115c <HAL_GetTick>
 8002e20:	4602      	mov	r2, r0
 8002e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	2b02      	cmp	r3, #2
 8002e28:	d901      	bls.n	8002e2e <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	e307      	b.n	800343e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e2e:	4b21      	ldr	r3, [pc, #132]	; (8002eb4 <HAL_RCC_OscConfig+0x288>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 0304 	and.w	r3, r3, #4
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d0f0      	beq.n	8002e1c <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e3a:	f7fe f99b 	bl	8001174 <HAL_GetREVID>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	f241 0203 	movw	r2, #4099	; 0x1003
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d817      	bhi.n	8002e78 <HAL_RCC_OscConfig+0x24c>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	691b      	ldr	r3, [r3, #16]
 8002e4c:	2b40      	cmp	r3, #64	; 0x40
 8002e4e:	d108      	bne.n	8002e62 <HAL_RCC_OscConfig+0x236>
 8002e50:	4b18      	ldr	r3, [pc, #96]	; (8002eb4 <HAL_RCC_OscConfig+0x288>)
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002e58:	4a16      	ldr	r2, [pc, #88]	; (8002eb4 <HAL_RCC_OscConfig+0x288>)
 8002e5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e5e:	6053      	str	r3, [r2, #4]
 8002e60:	e030      	b.n	8002ec4 <HAL_RCC_OscConfig+0x298>
 8002e62:	4b14      	ldr	r3, [pc, #80]	; (8002eb4 <HAL_RCC_OscConfig+0x288>)
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	691b      	ldr	r3, [r3, #16]
 8002e6e:	031b      	lsls	r3, r3, #12
 8002e70:	4910      	ldr	r1, [pc, #64]	; (8002eb4 <HAL_RCC_OscConfig+0x288>)
 8002e72:	4313      	orrs	r3, r2
 8002e74:	604b      	str	r3, [r1, #4]
 8002e76:	e025      	b.n	8002ec4 <HAL_RCC_OscConfig+0x298>
 8002e78:	4b0e      	ldr	r3, [pc, #56]	; (8002eb4 <HAL_RCC_OscConfig+0x288>)
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	691b      	ldr	r3, [r3, #16]
 8002e84:	061b      	lsls	r3, r3, #24
 8002e86:	490b      	ldr	r1, [pc, #44]	; (8002eb4 <HAL_RCC_OscConfig+0x288>)
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	604b      	str	r3, [r1, #4]
 8002e8c:	e01a      	b.n	8002ec4 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e8e:	4b09      	ldr	r3, [pc, #36]	; (8002eb4 <HAL_RCC_OscConfig+0x288>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a08      	ldr	r2, [pc, #32]	; (8002eb4 <HAL_RCC_OscConfig+0x288>)
 8002e94:	f023 0301 	bic.w	r3, r3, #1
 8002e98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e9a:	f7fe f95f 	bl	800115c <HAL_GetTick>
 8002e9e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002ea0:	e00a      	b.n	8002eb8 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ea2:	f7fe f95b 	bl	800115c <HAL_GetTick>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eaa:	1ad3      	subs	r3, r2, r3
 8002eac:	2b02      	cmp	r3, #2
 8002eae:	d903      	bls.n	8002eb8 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8002eb0:	2303      	movs	r3, #3
 8002eb2:	e2c4      	b.n	800343e <HAL_RCC_OscConfig+0x812>
 8002eb4:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002eb8:	4ba4      	ldr	r3, [pc, #656]	; (800314c <HAL_RCC_OscConfig+0x520>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0304 	and.w	r3, r3, #4
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d1ee      	bne.n	8002ea2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 0310 	and.w	r3, r3, #16
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	f000 80a9 	beq.w	8003024 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ed2:	4b9e      	ldr	r3, [pc, #632]	; (800314c <HAL_RCC_OscConfig+0x520>)
 8002ed4:	691b      	ldr	r3, [r3, #16]
 8002ed6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002eda:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002edc:	4b9b      	ldr	r3, [pc, #620]	; (800314c <HAL_RCC_OscConfig+0x520>)
 8002ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ee0:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002ee2:	69bb      	ldr	r3, [r7, #24]
 8002ee4:	2b08      	cmp	r3, #8
 8002ee6:	d007      	beq.n	8002ef8 <HAL_RCC_OscConfig+0x2cc>
 8002ee8:	69bb      	ldr	r3, [r7, #24]
 8002eea:	2b18      	cmp	r3, #24
 8002eec:	d13a      	bne.n	8002f64 <HAL_RCC_OscConfig+0x338>
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	f003 0303 	and.w	r3, r3, #3
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d135      	bne.n	8002f64 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002ef8:	4b94      	ldr	r3, [pc, #592]	; (800314c <HAL_RCC_OscConfig+0x520>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d005      	beq.n	8002f10 <HAL_RCC_OscConfig+0x2e4>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	69db      	ldr	r3, [r3, #28]
 8002f08:	2b80      	cmp	r3, #128	; 0x80
 8002f0a:	d001      	beq.n	8002f10 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e296      	b.n	800343e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002f10:	f7fe f930 	bl	8001174 <HAL_GetREVID>
 8002f14:	4603      	mov	r3, r0
 8002f16:	f241 0203 	movw	r2, #4099	; 0x1003
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d817      	bhi.n	8002f4e <HAL_RCC_OscConfig+0x322>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6a1b      	ldr	r3, [r3, #32]
 8002f22:	2b20      	cmp	r3, #32
 8002f24:	d108      	bne.n	8002f38 <HAL_RCC_OscConfig+0x30c>
 8002f26:	4b89      	ldr	r3, [pc, #548]	; (800314c <HAL_RCC_OscConfig+0x520>)
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002f2e:	4a87      	ldr	r2, [pc, #540]	; (800314c <HAL_RCC_OscConfig+0x520>)
 8002f30:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002f34:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002f36:	e075      	b.n	8003024 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002f38:	4b84      	ldr	r3, [pc, #528]	; (800314c <HAL_RCC_OscConfig+0x520>)
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6a1b      	ldr	r3, [r3, #32]
 8002f44:	069b      	lsls	r3, r3, #26
 8002f46:	4981      	ldr	r1, [pc, #516]	; (800314c <HAL_RCC_OscConfig+0x520>)
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002f4c:	e06a      	b.n	8003024 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002f4e:	4b7f      	ldr	r3, [pc, #508]	; (800314c <HAL_RCC_OscConfig+0x520>)
 8002f50:	68db      	ldr	r3, [r3, #12]
 8002f52:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6a1b      	ldr	r3, [r3, #32]
 8002f5a:	061b      	lsls	r3, r3, #24
 8002f5c:	497b      	ldr	r1, [pc, #492]	; (800314c <HAL_RCC_OscConfig+0x520>)
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002f62:	e05f      	b.n	8003024 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	69db      	ldr	r3, [r3, #28]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d042      	beq.n	8002ff2 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002f6c:	4b77      	ldr	r3, [pc, #476]	; (800314c <HAL_RCC_OscConfig+0x520>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a76      	ldr	r2, [pc, #472]	; (800314c <HAL_RCC_OscConfig+0x520>)
 8002f72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f78:	f7fe f8f0 	bl	800115c <HAL_GetTick>
 8002f7c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002f7e:	e008      	b.n	8002f92 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002f80:	f7fe f8ec 	bl	800115c <HAL_GetTick>
 8002f84:	4602      	mov	r2, r0
 8002f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	2b02      	cmp	r3, #2
 8002f8c:	d901      	bls.n	8002f92 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	e255      	b.n	800343e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002f92:	4b6e      	ldr	r3, [pc, #440]	; (800314c <HAL_RCC_OscConfig+0x520>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d0f0      	beq.n	8002f80 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002f9e:	f7fe f8e9 	bl	8001174 <HAL_GetREVID>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	f241 0203 	movw	r2, #4099	; 0x1003
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d817      	bhi.n	8002fdc <HAL_RCC_OscConfig+0x3b0>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6a1b      	ldr	r3, [r3, #32]
 8002fb0:	2b20      	cmp	r3, #32
 8002fb2:	d108      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x39a>
 8002fb4:	4b65      	ldr	r3, [pc, #404]	; (800314c <HAL_RCC_OscConfig+0x520>)
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002fbc:	4a63      	ldr	r2, [pc, #396]	; (800314c <HAL_RCC_OscConfig+0x520>)
 8002fbe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002fc2:	6053      	str	r3, [r2, #4]
 8002fc4:	e02e      	b.n	8003024 <HAL_RCC_OscConfig+0x3f8>
 8002fc6:	4b61      	ldr	r3, [pc, #388]	; (800314c <HAL_RCC_OscConfig+0x520>)
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6a1b      	ldr	r3, [r3, #32]
 8002fd2:	069b      	lsls	r3, r3, #26
 8002fd4:	495d      	ldr	r1, [pc, #372]	; (800314c <HAL_RCC_OscConfig+0x520>)
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	604b      	str	r3, [r1, #4]
 8002fda:	e023      	b.n	8003024 <HAL_RCC_OscConfig+0x3f8>
 8002fdc:	4b5b      	ldr	r3, [pc, #364]	; (800314c <HAL_RCC_OscConfig+0x520>)
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6a1b      	ldr	r3, [r3, #32]
 8002fe8:	061b      	lsls	r3, r3, #24
 8002fea:	4958      	ldr	r1, [pc, #352]	; (800314c <HAL_RCC_OscConfig+0x520>)
 8002fec:	4313      	orrs	r3, r2
 8002fee:	60cb      	str	r3, [r1, #12]
 8002ff0:	e018      	b.n	8003024 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002ff2:	4b56      	ldr	r3, [pc, #344]	; (800314c <HAL_RCC_OscConfig+0x520>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a55      	ldr	r2, [pc, #340]	; (800314c <HAL_RCC_OscConfig+0x520>)
 8002ff8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ffc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ffe:	f7fe f8ad 	bl	800115c <HAL_GetTick>
 8003002:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003004:	e008      	b.n	8003018 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003006:	f7fe f8a9 	bl	800115c <HAL_GetTick>
 800300a:	4602      	mov	r2, r0
 800300c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	2b02      	cmp	r3, #2
 8003012:	d901      	bls.n	8003018 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8003014:	2303      	movs	r3, #3
 8003016:	e212      	b.n	800343e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003018:	4b4c      	ldr	r3, [pc, #304]	; (800314c <HAL_RCC_OscConfig+0x520>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003020:	2b00      	cmp	r3, #0
 8003022:	d1f0      	bne.n	8003006 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 0308 	and.w	r3, r3, #8
 800302c:	2b00      	cmp	r3, #0
 800302e:	d036      	beq.n	800309e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	695b      	ldr	r3, [r3, #20]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d019      	beq.n	800306c <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003038:	4b44      	ldr	r3, [pc, #272]	; (800314c <HAL_RCC_OscConfig+0x520>)
 800303a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800303c:	4a43      	ldr	r2, [pc, #268]	; (800314c <HAL_RCC_OscConfig+0x520>)
 800303e:	f043 0301 	orr.w	r3, r3, #1
 8003042:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003044:	f7fe f88a 	bl	800115c <HAL_GetTick>
 8003048:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800304a:	e008      	b.n	800305e <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800304c:	f7fe f886 	bl	800115c <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	2b02      	cmp	r3, #2
 8003058:	d901      	bls.n	800305e <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e1ef      	b.n	800343e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800305e:	4b3b      	ldr	r3, [pc, #236]	; (800314c <HAL_RCC_OscConfig+0x520>)
 8003060:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003062:	f003 0302 	and.w	r3, r3, #2
 8003066:	2b00      	cmp	r3, #0
 8003068:	d0f0      	beq.n	800304c <HAL_RCC_OscConfig+0x420>
 800306a:	e018      	b.n	800309e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800306c:	4b37      	ldr	r3, [pc, #220]	; (800314c <HAL_RCC_OscConfig+0x520>)
 800306e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003070:	4a36      	ldr	r2, [pc, #216]	; (800314c <HAL_RCC_OscConfig+0x520>)
 8003072:	f023 0301 	bic.w	r3, r3, #1
 8003076:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003078:	f7fe f870 	bl	800115c <HAL_GetTick>
 800307c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800307e:	e008      	b.n	8003092 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003080:	f7fe f86c 	bl	800115c <HAL_GetTick>
 8003084:	4602      	mov	r2, r0
 8003086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	2b02      	cmp	r3, #2
 800308c:	d901      	bls.n	8003092 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800308e:	2303      	movs	r3, #3
 8003090:	e1d5      	b.n	800343e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003092:	4b2e      	ldr	r3, [pc, #184]	; (800314c <HAL_RCC_OscConfig+0x520>)
 8003094:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003096:	f003 0302 	and.w	r3, r3, #2
 800309a:	2b00      	cmp	r3, #0
 800309c:	d1f0      	bne.n	8003080 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0320 	and.w	r3, r3, #32
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d036      	beq.n	8003118 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	699b      	ldr	r3, [r3, #24]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d019      	beq.n	80030e6 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80030b2:	4b26      	ldr	r3, [pc, #152]	; (800314c <HAL_RCC_OscConfig+0x520>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a25      	ldr	r2, [pc, #148]	; (800314c <HAL_RCC_OscConfig+0x520>)
 80030b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80030bc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80030be:	f7fe f84d 	bl	800115c <HAL_GetTick>
 80030c2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80030c4:	e008      	b.n	80030d8 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80030c6:	f7fe f849 	bl	800115c <HAL_GetTick>
 80030ca:	4602      	mov	r2, r0
 80030cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ce:	1ad3      	subs	r3, r2, r3
 80030d0:	2b02      	cmp	r3, #2
 80030d2:	d901      	bls.n	80030d8 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80030d4:	2303      	movs	r3, #3
 80030d6:	e1b2      	b.n	800343e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80030d8:	4b1c      	ldr	r3, [pc, #112]	; (800314c <HAL_RCC_OscConfig+0x520>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d0f0      	beq.n	80030c6 <HAL_RCC_OscConfig+0x49a>
 80030e4:	e018      	b.n	8003118 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80030e6:	4b19      	ldr	r3, [pc, #100]	; (800314c <HAL_RCC_OscConfig+0x520>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a18      	ldr	r2, [pc, #96]	; (800314c <HAL_RCC_OscConfig+0x520>)
 80030ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80030f0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80030f2:	f7fe f833 	bl	800115c <HAL_GetTick>
 80030f6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80030f8:	e008      	b.n	800310c <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80030fa:	f7fe f82f 	bl	800115c <HAL_GetTick>
 80030fe:	4602      	mov	r2, r0
 8003100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	2b02      	cmp	r3, #2
 8003106:	d901      	bls.n	800310c <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8003108:	2303      	movs	r3, #3
 800310a:	e198      	b.n	800343e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800310c:	4b0f      	ldr	r3, [pc, #60]	; (800314c <HAL_RCC_OscConfig+0x520>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003114:	2b00      	cmp	r3, #0
 8003116:	d1f0      	bne.n	80030fa <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0304 	and.w	r3, r3, #4
 8003120:	2b00      	cmp	r3, #0
 8003122:	f000 8085 	beq.w	8003230 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003126:	4b0a      	ldr	r3, [pc, #40]	; (8003150 <HAL_RCC_OscConfig+0x524>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a09      	ldr	r2, [pc, #36]	; (8003150 <HAL_RCC_OscConfig+0x524>)
 800312c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003130:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003132:	f7fe f813 	bl	800115c <HAL_GetTick>
 8003136:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003138:	e00c      	b.n	8003154 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800313a:	f7fe f80f 	bl	800115c <HAL_GetTick>
 800313e:	4602      	mov	r2, r0
 8003140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003142:	1ad3      	subs	r3, r2, r3
 8003144:	2b64      	cmp	r3, #100	; 0x64
 8003146:	d905      	bls.n	8003154 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8003148:	2303      	movs	r3, #3
 800314a:	e178      	b.n	800343e <HAL_RCC_OscConfig+0x812>
 800314c:	58024400 	.word	0x58024400
 8003150:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003154:	4b96      	ldr	r3, [pc, #600]	; (80033b0 <HAL_RCC_OscConfig+0x784>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800315c:	2b00      	cmp	r3, #0
 800315e:	d0ec      	beq.n	800313a <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	2b01      	cmp	r3, #1
 8003166:	d106      	bne.n	8003176 <HAL_RCC_OscConfig+0x54a>
 8003168:	4b92      	ldr	r3, [pc, #584]	; (80033b4 <HAL_RCC_OscConfig+0x788>)
 800316a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800316c:	4a91      	ldr	r2, [pc, #580]	; (80033b4 <HAL_RCC_OscConfig+0x788>)
 800316e:	f043 0301 	orr.w	r3, r3, #1
 8003172:	6713      	str	r3, [r2, #112]	; 0x70
 8003174:	e02d      	b.n	80031d2 <HAL_RCC_OscConfig+0x5a6>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d10c      	bne.n	8003198 <HAL_RCC_OscConfig+0x56c>
 800317e:	4b8d      	ldr	r3, [pc, #564]	; (80033b4 <HAL_RCC_OscConfig+0x788>)
 8003180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003182:	4a8c      	ldr	r2, [pc, #560]	; (80033b4 <HAL_RCC_OscConfig+0x788>)
 8003184:	f023 0301 	bic.w	r3, r3, #1
 8003188:	6713      	str	r3, [r2, #112]	; 0x70
 800318a:	4b8a      	ldr	r3, [pc, #552]	; (80033b4 <HAL_RCC_OscConfig+0x788>)
 800318c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800318e:	4a89      	ldr	r2, [pc, #548]	; (80033b4 <HAL_RCC_OscConfig+0x788>)
 8003190:	f023 0304 	bic.w	r3, r3, #4
 8003194:	6713      	str	r3, [r2, #112]	; 0x70
 8003196:	e01c      	b.n	80031d2 <HAL_RCC_OscConfig+0x5a6>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	2b05      	cmp	r3, #5
 800319e:	d10c      	bne.n	80031ba <HAL_RCC_OscConfig+0x58e>
 80031a0:	4b84      	ldr	r3, [pc, #528]	; (80033b4 <HAL_RCC_OscConfig+0x788>)
 80031a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031a4:	4a83      	ldr	r2, [pc, #524]	; (80033b4 <HAL_RCC_OscConfig+0x788>)
 80031a6:	f043 0304 	orr.w	r3, r3, #4
 80031aa:	6713      	str	r3, [r2, #112]	; 0x70
 80031ac:	4b81      	ldr	r3, [pc, #516]	; (80033b4 <HAL_RCC_OscConfig+0x788>)
 80031ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031b0:	4a80      	ldr	r2, [pc, #512]	; (80033b4 <HAL_RCC_OscConfig+0x788>)
 80031b2:	f043 0301 	orr.w	r3, r3, #1
 80031b6:	6713      	str	r3, [r2, #112]	; 0x70
 80031b8:	e00b      	b.n	80031d2 <HAL_RCC_OscConfig+0x5a6>
 80031ba:	4b7e      	ldr	r3, [pc, #504]	; (80033b4 <HAL_RCC_OscConfig+0x788>)
 80031bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031be:	4a7d      	ldr	r2, [pc, #500]	; (80033b4 <HAL_RCC_OscConfig+0x788>)
 80031c0:	f023 0301 	bic.w	r3, r3, #1
 80031c4:	6713      	str	r3, [r2, #112]	; 0x70
 80031c6:	4b7b      	ldr	r3, [pc, #492]	; (80033b4 <HAL_RCC_OscConfig+0x788>)
 80031c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ca:	4a7a      	ldr	r2, [pc, #488]	; (80033b4 <HAL_RCC_OscConfig+0x788>)
 80031cc:	f023 0304 	bic.w	r3, r3, #4
 80031d0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d015      	beq.n	8003206 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031da:	f7fd ffbf 	bl	800115c <HAL_GetTick>
 80031de:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80031e0:	e00a      	b.n	80031f8 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031e2:	f7fd ffbb 	bl	800115c <HAL_GetTick>
 80031e6:	4602      	mov	r2, r0
 80031e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ea:	1ad3      	subs	r3, r2, r3
 80031ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d901      	bls.n	80031f8 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 80031f4:	2303      	movs	r3, #3
 80031f6:	e122      	b.n	800343e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80031f8:	4b6e      	ldr	r3, [pc, #440]	; (80033b4 <HAL_RCC_OscConfig+0x788>)
 80031fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031fc:	f003 0302 	and.w	r3, r3, #2
 8003200:	2b00      	cmp	r3, #0
 8003202:	d0ee      	beq.n	80031e2 <HAL_RCC_OscConfig+0x5b6>
 8003204:	e014      	b.n	8003230 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003206:	f7fd ffa9 	bl	800115c <HAL_GetTick>
 800320a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800320c:	e00a      	b.n	8003224 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800320e:	f7fd ffa5 	bl	800115c <HAL_GetTick>
 8003212:	4602      	mov	r2, r0
 8003214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003216:	1ad3      	subs	r3, r2, r3
 8003218:	f241 3288 	movw	r2, #5000	; 0x1388
 800321c:	4293      	cmp	r3, r2
 800321e:	d901      	bls.n	8003224 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8003220:	2303      	movs	r3, #3
 8003222:	e10c      	b.n	800343e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003224:	4b63      	ldr	r3, [pc, #396]	; (80033b4 <HAL_RCC_OscConfig+0x788>)
 8003226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003228:	f003 0302 	and.w	r3, r3, #2
 800322c:	2b00      	cmp	r3, #0
 800322e:	d1ee      	bne.n	800320e <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003234:	2b00      	cmp	r3, #0
 8003236:	f000 8101 	beq.w	800343c <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800323a:	4b5e      	ldr	r3, [pc, #376]	; (80033b4 <HAL_RCC_OscConfig+0x788>)
 800323c:	691b      	ldr	r3, [r3, #16]
 800323e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003242:	2b18      	cmp	r3, #24
 8003244:	f000 80bc 	beq.w	80033c0 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324c:	2b02      	cmp	r3, #2
 800324e:	f040 8095 	bne.w	800337c <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003252:	4b58      	ldr	r3, [pc, #352]	; (80033b4 <HAL_RCC_OscConfig+0x788>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a57      	ldr	r2, [pc, #348]	; (80033b4 <HAL_RCC_OscConfig+0x788>)
 8003258:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800325c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800325e:	f7fd ff7d 	bl	800115c <HAL_GetTick>
 8003262:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003264:	e008      	b.n	8003278 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003266:	f7fd ff79 	bl	800115c <HAL_GetTick>
 800326a:	4602      	mov	r2, r0
 800326c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326e:	1ad3      	subs	r3, r2, r3
 8003270:	2b02      	cmp	r3, #2
 8003272:	d901      	bls.n	8003278 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8003274:	2303      	movs	r3, #3
 8003276:	e0e2      	b.n	800343e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003278:	4b4e      	ldr	r3, [pc, #312]	; (80033b4 <HAL_RCC_OscConfig+0x788>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003280:	2b00      	cmp	r3, #0
 8003282:	d1f0      	bne.n	8003266 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003284:	4b4b      	ldr	r3, [pc, #300]	; (80033b4 <HAL_RCC_OscConfig+0x788>)
 8003286:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003288:	4b4b      	ldr	r3, [pc, #300]	; (80033b8 <HAL_RCC_OscConfig+0x78c>)
 800328a:	4013      	ands	r3, r2
 800328c:	687a      	ldr	r2, [r7, #4]
 800328e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003294:	0112      	lsls	r2, r2, #4
 8003296:	430a      	orrs	r2, r1
 8003298:	4946      	ldr	r1, [pc, #280]	; (80033b4 <HAL_RCC_OscConfig+0x788>)
 800329a:	4313      	orrs	r3, r2
 800329c:	628b      	str	r3, [r1, #40]	; 0x28
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a2:	3b01      	subs	r3, #1
 80032a4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032ac:	3b01      	subs	r3, #1
 80032ae:	025b      	lsls	r3, r3, #9
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	431a      	orrs	r2, r3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032b8:	3b01      	subs	r3, #1
 80032ba:	041b      	lsls	r3, r3, #16
 80032bc:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80032c0:	431a      	orrs	r2, r3
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032c6:	3b01      	subs	r3, #1
 80032c8:	061b      	lsls	r3, r3, #24
 80032ca:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80032ce:	4939      	ldr	r1, [pc, #228]	; (80033b4 <HAL_RCC_OscConfig+0x788>)
 80032d0:	4313      	orrs	r3, r2
 80032d2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80032d4:	4b37      	ldr	r3, [pc, #220]	; (80033b4 <HAL_RCC_OscConfig+0x788>)
 80032d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d8:	4a36      	ldr	r2, [pc, #216]	; (80033b4 <HAL_RCC_OscConfig+0x788>)
 80032da:	f023 0301 	bic.w	r3, r3, #1
 80032de:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80032e0:	4b34      	ldr	r3, [pc, #208]	; (80033b4 <HAL_RCC_OscConfig+0x788>)
 80032e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032e4:	4b35      	ldr	r3, [pc, #212]	; (80033bc <HAL_RCC_OscConfig+0x790>)
 80032e6:	4013      	ands	r3, r2
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80032ec:	00d2      	lsls	r2, r2, #3
 80032ee:	4931      	ldr	r1, [pc, #196]	; (80033b4 <HAL_RCC_OscConfig+0x788>)
 80032f0:	4313      	orrs	r3, r2
 80032f2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80032f4:	4b2f      	ldr	r3, [pc, #188]	; (80033b4 <HAL_RCC_OscConfig+0x788>)
 80032f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f8:	f023 020c 	bic.w	r2, r3, #12
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003300:	492c      	ldr	r1, [pc, #176]	; (80033b4 <HAL_RCC_OscConfig+0x788>)
 8003302:	4313      	orrs	r3, r2
 8003304:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003306:	4b2b      	ldr	r3, [pc, #172]	; (80033b4 <HAL_RCC_OscConfig+0x788>)
 8003308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800330a:	f023 0202 	bic.w	r2, r3, #2
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003312:	4928      	ldr	r1, [pc, #160]	; (80033b4 <HAL_RCC_OscConfig+0x788>)
 8003314:	4313      	orrs	r3, r2
 8003316:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003318:	4b26      	ldr	r3, [pc, #152]	; (80033b4 <HAL_RCC_OscConfig+0x788>)
 800331a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800331c:	4a25      	ldr	r2, [pc, #148]	; (80033b4 <HAL_RCC_OscConfig+0x788>)
 800331e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003322:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003324:	4b23      	ldr	r3, [pc, #140]	; (80033b4 <HAL_RCC_OscConfig+0x788>)
 8003326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003328:	4a22      	ldr	r2, [pc, #136]	; (80033b4 <HAL_RCC_OscConfig+0x788>)
 800332a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800332e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003330:	4b20      	ldr	r3, [pc, #128]	; (80033b4 <HAL_RCC_OscConfig+0x788>)
 8003332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003334:	4a1f      	ldr	r2, [pc, #124]	; (80033b4 <HAL_RCC_OscConfig+0x788>)
 8003336:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800333a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800333c:	4b1d      	ldr	r3, [pc, #116]	; (80033b4 <HAL_RCC_OscConfig+0x788>)
 800333e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003340:	4a1c      	ldr	r2, [pc, #112]	; (80033b4 <HAL_RCC_OscConfig+0x788>)
 8003342:	f043 0301 	orr.w	r3, r3, #1
 8003346:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003348:	4b1a      	ldr	r3, [pc, #104]	; (80033b4 <HAL_RCC_OscConfig+0x788>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a19      	ldr	r2, [pc, #100]	; (80033b4 <HAL_RCC_OscConfig+0x788>)
 800334e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003352:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003354:	f7fd ff02 	bl	800115c <HAL_GetTick>
 8003358:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800335a:	e008      	b.n	800336e <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800335c:	f7fd fefe 	bl	800115c <HAL_GetTick>
 8003360:	4602      	mov	r2, r0
 8003362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	2b02      	cmp	r3, #2
 8003368:	d901      	bls.n	800336e <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	e067      	b.n	800343e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800336e:	4b11      	ldr	r3, [pc, #68]	; (80033b4 <HAL_RCC_OscConfig+0x788>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d0f0      	beq.n	800335c <HAL_RCC_OscConfig+0x730>
 800337a:	e05f      	b.n	800343c <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800337c:	4b0d      	ldr	r3, [pc, #52]	; (80033b4 <HAL_RCC_OscConfig+0x788>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a0c      	ldr	r2, [pc, #48]	; (80033b4 <HAL_RCC_OscConfig+0x788>)
 8003382:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003386:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003388:	f7fd fee8 	bl	800115c <HAL_GetTick>
 800338c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800338e:	e008      	b.n	80033a2 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003390:	f7fd fee4 	bl	800115c <HAL_GetTick>
 8003394:	4602      	mov	r2, r0
 8003396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	2b02      	cmp	r3, #2
 800339c:	d901      	bls.n	80033a2 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 800339e:	2303      	movs	r3, #3
 80033a0:	e04d      	b.n	800343e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80033a2:	4b04      	ldr	r3, [pc, #16]	; (80033b4 <HAL_RCC_OscConfig+0x788>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d1f0      	bne.n	8003390 <HAL_RCC_OscConfig+0x764>
 80033ae:	e045      	b.n	800343c <HAL_RCC_OscConfig+0x810>
 80033b0:	58024800 	.word	0x58024800
 80033b4:	58024400 	.word	0x58024400
 80033b8:	fffffc0c 	.word	0xfffffc0c
 80033bc:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80033c0:	4b21      	ldr	r3, [pc, #132]	; (8003448 <HAL_RCC_OscConfig+0x81c>)
 80033c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033c4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80033c6:	4b20      	ldr	r3, [pc, #128]	; (8003448 <HAL_RCC_OscConfig+0x81c>)
 80033c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ca:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d031      	beq.n	8003438 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	f003 0203 	and.w	r2, r3, #3
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033de:	429a      	cmp	r2, r3
 80033e0:	d12a      	bne.n	8003438 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	091b      	lsrs	r3, r3, #4
 80033e6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d122      	bne.n	8003438 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fc:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80033fe:	429a      	cmp	r2, r3
 8003400:	d11a      	bne.n	8003438 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	0a5b      	lsrs	r3, r3, #9
 8003406:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800340e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003410:	429a      	cmp	r2, r3
 8003412:	d111      	bne.n	8003438 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	0c1b      	lsrs	r3, r3, #16
 8003418:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003420:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003422:	429a      	cmp	r2, r3
 8003424:	d108      	bne.n	8003438 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	0e1b      	lsrs	r3, r3, #24
 800342a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003432:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003434:	429a      	cmp	r2, r3
 8003436:	d001      	beq.n	800343c <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	e000      	b.n	800343e <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 800343c:	2300      	movs	r3, #0
}
 800343e:	4618      	mov	r0, r3
 8003440:	3730      	adds	r7, #48	; 0x30
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	58024400 	.word	0x58024400

0800344c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b086      	sub	sp, #24
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d101      	bne.n	8003460 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e19c      	b.n	800379a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003460:	4b8a      	ldr	r3, [pc, #552]	; (800368c <HAL_RCC_ClockConfig+0x240>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 030f 	and.w	r3, r3, #15
 8003468:	683a      	ldr	r2, [r7, #0]
 800346a:	429a      	cmp	r2, r3
 800346c:	d910      	bls.n	8003490 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800346e:	4b87      	ldr	r3, [pc, #540]	; (800368c <HAL_RCC_ClockConfig+0x240>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f023 020f 	bic.w	r2, r3, #15
 8003476:	4985      	ldr	r1, [pc, #532]	; (800368c <HAL_RCC_ClockConfig+0x240>)
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	4313      	orrs	r3, r2
 800347c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800347e:	4b83      	ldr	r3, [pc, #524]	; (800368c <HAL_RCC_ClockConfig+0x240>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 030f 	and.w	r3, r3, #15
 8003486:	683a      	ldr	r2, [r7, #0]
 8003488:	429a      	cmp	r2, r3
 800348a:	d001      	beq.n	8003490 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e184      	b.n	800379a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 0304 	and.w	r3, r3, #4
 8003498:	2b00      	cmp	r3, #0
 800349a:	d010      	beq.n	80034be <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	691a      	ldr	r2, [r3, #16]
 80034a0:	4b7b      	ldr	r3, [pc, #492]	; (8003690 <HAL_RCC_ClockConfig+0x244>)
 80034a2:	699b      	ldr	r3, [r3, #24]
 80034a4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d908      	bls.n	80034be <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80034ac:	4b78      	ldr	r3, [pc, #480]	; (8003690 <HAL_RCC_ClockConfig+0x244>)
 80034ae:	699b      	ldr	r3, [r3, #24]
 80034b0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	691b      	ldr	r3, [r3, #16]
 80034b8:	4975      	ldr	r1, [pc, #468]	; (8003690 <HAL_RCC_ClockConfig+0x244>)
 80034ba:	4313      	orrs	r3, r2
 80034bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0308 	and.w	r3, r3, #8
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d010      	beq.n	80034ec <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	695a      	ldr	r2, [r3, #20]
 80034ce:	4b70      	ldr	r3, [pc, #448]	; (8003690 <HAL_RCC_ClockConfig+0x244>)
 80034d0:	69db      	ldr	r3, [r3, #28]
 80034d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80034d6:	429a      	cmp	r2, r3
 80034d8:	d908      	bls.n	80034ec <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80034da:	4b6d      	ldr	r3, [pc, #436]	; (8003690 <HAL_RCC_ClockConfig+0x244>)
 80034dc:	69db      	ldr	r3, [r3, #28]
 80034de:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	695b      	ldr	r3, [r3, #20]
 80034e6:	496a      	ldr	r1, [pc, #424]	; (8003690 <HAL_RCC_ClockConfig+0x244>)
 80034e8:	4313      	orrs	r3, r2
 80034ea:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 0310 	and.w	r3, r3, #16
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d010      	beq.n	800351a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	699a      	ldr	r2, [r3, #24]
 80034fc:	4b64      	ldr	r3, [pc, #400]	; (8003690 <HAL_RCC_ClockConfig+0x244>)
 80034fe:	69db      	ldr	r3, [r3, #28]
 8003500:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003504:	429a      	cmp	r2, r3
 8003506:	d908      	bls.n	800351a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003508:	4b61      	ldr	r3, [pc, #388]	; (8003690 <HAL_RCC_ClockConfig+0x244>)
 800350a:	69db      	ldr	r3, [r3, #28]
 800350c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	699b      	ldr	r3, [r3, #24]
 8003514:	495e      	ldr	r1, [pc, #376]	; (8003690 <HAL_RCC_ClockConfig+0x244>)
 8003516:	4313      	orrs	r3, r2
 8003518:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 0320 	and.w	r3, r3, #32
 8003522:	2b00      	cmp	r3, #0
 8003524:	d010      	beq.n	8003548 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	69da      	ldr	r2, [r3, #28]
 800352a:	4b59      	ldr	r3, [pc, #356]	; (8003690 <HAL_RCC_ClockConfig+0x244>)
 800352c:	6a1b      	ldr	r3, [r3, #32]
 800352e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003532:	429a      	cmp	r2, r3
 8003534:	d908      	bls.n	8003548 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003536:	4b56      	ldr	r3, [pc, #344]	; (8003690 <HAL_RCC_ClockConfig+0x244>)
 8003538:	6a1b      	ldr	r3, [r3, #32]
 800353a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	69db      	ldr	r3, [r3, #28]
 8003542:	4953      	ldr	r1, [pc, #332]	; (8003690 <HAL_RCC_ClockConfig+0x244>)
 8003544:	4313      	orrs	r3, r2
 8003546:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 0302 	and.w	r3, r3, #2
 8003550:	2b00      	cmp	r3, #0
 8003552:	d010      	beq.n	8003576 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	68da      	ldr	r2, [r3, #12]
 8003558:	4b4d      	ldr	r3, [pc, #308]	; (8003690 <HAL_RCC_ClockConfig+0x244>)
 800355a:	699b      	ldr	r3, [r3, #24]
 800355c:	f003 030f 	and.w	r3, r3, #15
 8003560:	429a      	cmp	r2, r3
 8003562:	d908      	bls.n	8003576 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003564:	4b4a      	ldr	r3, [pc, #296]	; (8003690 <HAL_RCC_ClockConfig+0x244>)
 8003566:	699b      	ldr	r3, [r3, #24]
 8003568:	f023 020f 	bic.w	r2, r3, #15
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	4947      	ldr	r1, [pc, #284]	; (8003690 <HAL_RCC_ClockConfig+0x244>)
 8003572:	4313      	orrs	r3, r2
 8003574:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 0301 	and.w	r3, r3, #1
 800357e:	2b00      	cmp	r3, #0
 8003580:	d055      	beq.n	800362e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003582:	4b43      	ldr	r3, [pc, #268]	; (8003690 <HAL_RCC_ClockConfig+0x244>)
 8003584:	699b      	ldr	r3, [r3, #24]
 8003586:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	4940      	ldr	r1, [pc, #256]	; (8003690 <HAL_RCC_ClockConfig+0x244>)
 8003590:	4313      	orrs	r3, r2
 8003592:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	2b02      	cmp	r3, #2
 800359a:	d107      	bne.n	80035ac <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800359c:	4b3c      	ldr	r3, [pc, #240]	; (8003690 <HAL_RCC_ClockConfig+0x244>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d121      	bne.n	80035ec <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	e0f6      	b.n	800379a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	2b03      	cmp	r3, #3
 80035b2:	d107      	bne.n	80035c4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80035b4:	4b36      	ldr	r3, [pc, #216]	; (8003690 <HAL_RCC_ClockConfig+0x244>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d115      	bne.n	80035ec <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e0ea      	b.n	800379a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d107      	bne.n	80035dc <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80035cc:	4b30      	ldr	r3, [pc, #192]	; (8003690 <HAL_RCC_ClockConfig+0x244>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d109      	bne.n	80035ec <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e0de      	b.n	800379a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80035dc:	4b2c      	ldr	r3, [pc, #176]	; (8003690 <HAL_RCC_ClockConfig+0x244>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 0304 	and.w	r3, r3, #4
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d101      	bne.n	80035ec <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e0d6      	b.n	800379a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80035ec:	4b28      	ldr	r3, [pc, #160]	; (8003690 <HAL_RCC_ClockConfig+0x244>)
 80035ee:	691b      	ldr	r3, [r3, #16]
 80035f0:	f023 0207 	bic.w	r2, r3, #7
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	4925      	ldr	r1, [pc, #148]	; (8003690 <HAL_RCC_ClockConfig+0x244>)
 80035fa:	4313      	orrs	r3, r2
 80035fc:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035fe:	f7fd fdad 	bl	800115c <HAL_GetTick>
 8003602:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003604:	e00a      	b.n	800361c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003606:	f7fd fda9 	bl	800115c <HAL_GetTick>
 800360a:	4602      	mov	r2, r0
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	1ad3      	subs	r3, r2, r3
 8003610:	f241 3288 	movw	r2, #5000	; 0x1388
 8003614:	4293      	cmp	r3, r2
 8003616:	d901      	bls.n	800361c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003618:	2303      	movs	r3, #3
 800361a:	e0be      	b.n	800379a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800361c:	4b1c      	ldr	r3, [pc, #112]	; (8003690 <HAL_RCC_ClockConfig+0x244>)
 800361e:	691b      	ldr	r3, [r3, #16]
 8003620:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	00db      	lsls	r3, r3, #3
 800362a:	429a      	cmp	r2, r3
 800362c:	d1eb      	bne.n	8003606 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 0302 	and.w	r3, r3, #2
 8003636:	2b00      	cmp	r3, #0
 8003638:	d010      	beq.n	800365c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	68da      	ldr	r2, [r3, #12]
 800363e:	4b14      	ldr	r3, [pc, #80]	; (8003690 <HAL_RCC_ClockConfig+0x244>)
 8003640:	699b      	ldr	r3, [r3, #24]
 8003642:	f003 030f 	and.w	r3, r3, #15
 8003646:	429a      	cmp	r2, r3
 8003648:	d208      	bcs.n	800365c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800364a:	4b11      	ldr	r3, [pc, #68]	; (8003690 <HAL_RCC_ClockConfig+0x244>)
 800364c:	699b      	ldr	r3, [r3, #24]
 800364e:	f023 020f 	bic.w	r2, r3, #15
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	68db      	ldr	r3, [r3, #12]
 8003656:	490e      	ldr	r1, [pc, #56]	; (8003690 <HAL_RCC_ClockConfig+0x244>)
 8003658:	4313      	orrs	r3, r2
 800365a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800365c:	4b0b      	ldr	r3, [pc, #44]	; (800368c <HAL_RCC_ClockConfig+0x240>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 030f 	and.w	r3, r3, #15
 8003664:	683a      	ldr	r2, [r7, #0]
 8003666:	429a      	cmp	r2, r3
 8003668:	d214      	bcs.n	8003694 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800366a:	4b08      	ldr	r3, [pc, #32]	; (800368c <HAL_RCC_ClockConfig+0x240>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f023 020f 	bic.w	r2, r3, #15
 8003672:	4906      	ldr	r1, [pc, #24]	; (800368c <HAL_RCC_ClockConfig+0x240>)
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	4313      	orrs	r3, r2
 8003678:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800367a:	4b04      	ldr	r3, [pc, #16]	; (800368c <HAL_RCC_ClockConfig+0x240>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 030f 	and.w	r3, r3, #15
 8003682:	683a      	ldr	r2, [r7, #0]
 8003684:	429a      	cmp	r2, r3
 8003686:	d005      	beq.n	8003694 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	e086      	b.n	800379a <HAL_RCC_ClockConfig+0x34e>
 800368c:	52002000 	.word	0x52002000
 8003690:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0304 	and.w	r3, r3, #4
 800369c:	2b00      	cmp	r3, #0
 800369e:	d010      	beq.n	80036c2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	691a      	ldr	r2, [r3, #16]
 80036a4:	4b3f      	ldr	r3, [pc, #252]	; (80037a4 <HAL_RCC_ClockConfig+0x358>)
 80036a6:	699b      	ldr	r3, [r3, #24]
 80036a8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d208      	bcs.n	80036c2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80036b0:	4b3c      	ldr	r3, [pc, #240]	; (80037a4 <HAL_RCC_ClockConfig+0x358>)
 80036b2:	699b      	ldr	r3, [r3, #24]
 80036b4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	691b      	ldr	r3, [r3, #16]
 80036bc:	4939      	ldr	r1, [pc, #228]	; (80037a4 <HAL_RCC_ClockConfig+0x358>)
 80036be:	4313      	orrs	r3, r2
 80036c0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0308 	and.w	r3, r3, #8
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d010      	beq.n	80036f0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	695a      	ldr	r2, [r3, #20]
 80036d2:	4b34      	ldr	r3, [pc, #208]	; (80037a4 <HAL_RCC_ClockConfig+0x358>)
 80036d4:	69db      	ldr	r3, [r3, #28]
 80036d6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80036da:	429a      	cmp	r2, r3
 80036dc:	d208      	bcs.n	80036f0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80036de:	4b31      	ldr	r3, [pc, #196]	; (80037a4 <HAL_RCC_ClockConfig+0x358>)
 80036e0:	69db      	ldr	r3, [r3, #28]
 80036e2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	695b      	ldr	r3, [r3, #20]
 80036ea:	492e      	ldr	r1, [pc, #184]	; (80037a4 <HAL_RCC_ClockConfig+0x358>)
 80036ec:	4313      	orrs	r3, r2
 80036ee:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0310 	and.w	r3, r3, #16
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d010      	beq.n	800371e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	699a      	ldr	r2, [r3, #24]
 8003700:	4b28      	ldr	r3, [pc, #160]	; (80037a4 <HAL_RCC_ClockConfig+0x358>)
 8003702:	69db      	ldr	r3, [r3, #28]
 8003704:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003708:	429a      	cmp	r2, r3
 800370a:	d208      	bcs.n	800371e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800370c:	4b25      	ldr	r3, [pc, #148]	; (80037a4 <HAL_RCC_ClockConfig+0x358>)
 800370e:	69db      	ldr	r3, [r3, #28]
 8003710:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	699b      	ldr	r3, [r3, #24]
 8003718:	4922      	ldr	r1, [pc, #136]	; (80037a4 <HAL_RCC_ClockConfig+0x358>)
 800371a:	4313      	orrs	r3, r2
 800371c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 0320 	and.w	r3, r3, #32
 8003726:	2b00      	cmp	r3, #0
 8003728:	d010      	beq.n	800374c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	69da      	ldr	r2, [r3, #28]
 800372e:	4b1d      	ldr	r3, [pc, #116]	; (80037a4 <HAL_RCC_ClockConfig+0x358>)
 8003730:	6a1b      	ldr	r3, [r3, #32]
 8003732:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003736:	429a      	cmp	r2, r3
 8003738:	d208      	bcs.n	800374c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800373a:	4b1a      	ldr	r3, [pc, #104]	; (80037a4 <HAL_RCC_ClockConfig+0x358>)
 800373c:	6a1b      	ldr	r3, [r3, #32]
 800373e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	69db      	ldr	r3, [r3, #28]
 8003746:	4917      	ldr	r1, [pc, #92]	; (80037a4 <HAL_RCC_ClockConfig+0x358>)
 8003748:	4313      	orrs	r3, r2
 800374a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800374c:	f000 f834 	bl	80037b8 <HAL_RCC_GetSysClockFreq>
 8003750:	4602      	mov	r2, r0
 8003752:	4b14      	ldr	r3, [pc, #80]	; (80037a4 <HAL_RCC_ClockConfig+0x358>)
 8003754:	699b      	ldr	r3, [r3, #24]
 8003756:	0a1b      	lsrs	r3, r3, #8
 8003758:	f003 030f 	and.w	r3, r3, #15
 800375c:	4912      	ldr	r1, [pc, #72]	; (80037a8 <HAL_RCC_ClockConfig+0x35c>)
 800375e:	5ccb      	ldrb	r3, [r1, r3]
 8003760:	f003 031f 	and.w	r3, r3, #31
 8003764:	fa22 f303 	lsr.w	r3, r2, r3
 8003768:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800376a:	4b0e      	ldr	r3, [pc, #56]	; (80037a4 <HAL_RCC_ClockConfig+0x358>)
 800376c:	699b      	ldr	r3, [r3, #24]
 800376e:	f003 030f 	and.w	r3, r3, #15
 8003772:	4a0d      	ldr	r2, [pc, #52]	; (80037a8 <HAL_RCC_ClockConfig+0x35c>)
 8003774:	5cd3      	ldrb	r3, [r2, r3]
 8003776:	f003 031f 	and.w	r3, r3, #31
 800377a:	693a      	ldr	r2, [r7, #16]
 800377c:	fa22 f303 	lsr.w	r3, r2, r3
 8003780:	4a0a      	ldr	r2, [pc, #40]	; (80037ac <HAL_RCC_ClockConfig+0x360>)
 8003782:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003784:	4a0a      	ldr	r2, [pc, #40]	; (80037b0 <HAL_RCC_ClockConfig+0x364>)
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800378a:	4b0a      	ldr	r3, [pc, #40]	; (80037b4 <HAL_RCC_ClockConfig+0x368>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4618      	mov	r0, r3
 8003790:	f7fd fc9a 	bl	80010c8 <HAL_InitTick>
 8003794:	4603      	mov	r3, r0
 8003796:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003798:	7bfb      	ldrb	r3, [r7, #15]
}
 800379a:	4618      	mov	r0, r3
 800379c:	3718      	adds	r7, #24
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	58024400 	.word	0x58024400
 80037a8:	08006340 	.word	0x08006340
 80037ac:	20000004 	.word	0x20000004
 80037b0:	20000000 	.word	0x20000000
 80037b4:	20000008 	.word	0x20000008

080037b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b089      	sub	sp, #36	; 0x24
 80037bc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80037be:	4bb3      	ldr	r3, [pc, #716]	; (8003a8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037c0:	691b      	ldr	r3, [r3, #16]
 80037c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80037c6:	2b18      	cmp	r3, #24
 80037c8:	f200 8155 	bhi.w	8003a76 <HAL_RCC_GetSysClockFreq+0x2be>
 80037cc:	a201      	add	r2, pc, #4	; (adr r2, 80037d4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80037ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037d2:	bf00      	nop
 80037d4:	08003839 	.word	0x08003839
 80037d8:	08003a77 	.word	0x08003a77
 80037dc:	08003a77 	.word	0x08003a77
 80037e0:	08003a77 	.word	0x08003a77
 80037e4:	08003a77 	.word	0x08003a77
 80037e8:	08003a77 	.word	0x08003a77
 80037ec:	08003a77 	.word	0x08003a77
 80037f0:	08003a77 	.word	0x08003a77
 80037f4:	0800385f 	.word	0x0800385f
 80037f8:	08003a77 	.word	0x08003a77
 80037fc:	08003a77 	.word	0x08003a77
 8003800:	08003a77 	.word	0x08003a77
 8003804:	08003a77 	.word	0x08003a77
 8003808:	08003a77 	.word	0x08003a77
 800380c:	08003a77 	.word	0x08003a77
 8003810:	08003a77 	.word	0x08003a77
 8003814:	08003865 	.word	0x08003865
 8003818:	08003a77 	.word	0x08003a77
 800381c:	08003a77 	.word	0x08003a77
 8003820:	08003a77 	.word	0x08003a77
 8003824:	08003a77 	.word	0x08003a77
 8003828:	08003a77 	.word	0x08003a77
 800382c:	08003a77 	.word	0x08003a77
 8003830:	08003a77 	.word	0x08003a77
 8003834:	0800386b 	.word	0x0800386b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003838:	4b94      	ldr	r3, [pc, #592]	; (8003a8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 0320 	and.w	r3, r3, #32
 8003840:	2b00      	cmp	r3, #0
 8003842:	d009      	beq.n	8003858 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003844:	4b91      	ldr	r3, [pc, #580]	; (8003a8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	08db      	lsrs	r3, r3, #3
 800384a:	f003 0303 	and.w	r3, r3, #3
 800384e:	4a90      	ldr	r2, [pc, #576]	; (8003a90 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003850:	fa22 f303 	lsr.w	r3, r2, r3
 8003854:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003856:	e111      	b.n	8003a7c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003858:	4b8d      	ldr	r3, [pc, #564]	; (8003a90 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800385a:	61bb      	str	r3, [r7, #24]
    break;
 800385c:	e10e      	b.n	8003a7c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800385e:	4b8d      	ldr	r3, [pc, #564]	; (8003a94 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003860:	61bb      	str	r3, [r7, #24]
    break;
 8003862:	e10b      	b.n	8003a7c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003864:	4b8c      	ldr	r3, [pc, #560]	; (8003a98 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003866:	61bb      	str	r3, [r7, #24]
    break;
 8003868:	e108      	b.n	8003a7c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800386a:	4b88      	ldr	r3, [pc, #544]	; (8003a8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800386c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800386e:	f003 0303 	and.w	r3, r3, #3
 8003872:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003874:	4b85      	ldr	r3, [pc, #532]	; (8003a8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003878:	091b      	lsrs	r3, r3, #4
 800387a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800387e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003880:	4b82      	ldr	r3, [pc, #520]	; (8003a8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003884:	f003 0301 	and.w	r3, r3, #1
 8003888:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800388a:	4b80      	ldr	r3, [pc, #512]	; (8003a8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800388c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800388e:	08db      	lsrs	r3, r3, #3
 8003890:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003894:	68fa      	ldr	r2, [r7, #12]
 8003896:	fb02 f303 	mul.w	r3, r2, r3
 800389a:	ee07 3a90 	vmov	s15, r3
 800389e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038a2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	f000 80e1 	beq.w	8003a70 <HAL_RCC_GetSysClockFreq+0x2b8>
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	2b02      	cmp	r3, #2
 80038b2:	f000 8083 	beq.w	80039bc <HAL_RCC_GetSysClockFreq+0x204>
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	2b02      	cmp	r3, #2
 80038ba:	f200 80a1 	bhi.w	8003a00 <HAL_RCC_GetSysClockFreq+0x248>
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d003      	beq.n	80038cc <HAL_RCC_GetSysClockFreq+0x114>
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d056      	beq.n	8003978 <HAL_RCC_GetSysClockFreq+0x1c0>
 80038ca:	e099      	b.n	8003a00 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80038cc:	4b6f      	ldr	r3, [pc, #444]	; (8003a8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 0320 	and.w	r3, r3, #32
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d02d      	beq.n	8003934 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80038d8:	4b6c      	ldr	r3, [pc, #432]	; (8003a8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	08db      	lsrs	r3, r3, #3
 80038de:	f003 0303 	and.w	r3, r3, #3
 80038e2:	4a6b      	ldr	r2, [pc, #428]	; (8003a90 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80038e4:	fa22 f303 	lsr.w	r3, r2, r3
 80038e8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	ee07 3a90 	vmov	s15, r3
 80038f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	ee07 3a90 	vmov	s15, r3
 80038fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003902:	4b62      	ldr	r3, [pc, #392]	; (8003a8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003906:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800390a:	ee07 3a90 	vmov	s15, r3
 800390e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003912:	ed97 6a02 	vldr	s12, [r7, #8]
 8003916:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003a9c <HAL_RCC_GetSysClockFreq+0x2e4>
 800391a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800391e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003922:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003926:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800392a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800392e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003932:	e087      	b.n	8003a44 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	ee07 3a90 	vmov	s15, r3
 800393a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800393e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003aa0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003942:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003946:	4b51      	ldr	r3, [pc, #324]	; (8003a8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800394a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800394e:	ee07 3a90 	vmov	s15, r3
 8003952:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003956:	ed97 6a02 	vldr	s12, [r7, #8]
 800395a:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003a9c <HAL_RCC_GetSysClockFreq+0x2e4>
 800395e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003962:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003966:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800396a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800396e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003972:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003976:	e065      	b.n	8003a44 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	ee07 3a90 	vmov	s15, r3
 800397e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003982:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003aa4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003986:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800398a:	4b40      	ldr	r3, [pc, #256]	; (8003a8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800398c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800398e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003992:	ee07 3a90 	vmov	s15, r3
 8003996:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800399a:	ed97 6a02 	vldr	s12, [r7, #8]
 800399e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003a9c <HAL_RCC_GetSysClockFreq+0x2e4>
 80039a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80039ba:	e043      	b.n	8003a44 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	ee07 3a90 	vmov	s15, r3
 80039c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039c6:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003aa8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80039ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039ce:	4b2f      	ldr	r3, [pc, #188]	; (8003a8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039d6:	ee07 3a90 	vmov	s15, r3
 80039da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039de:	ed97 6a02 	vldr	s12, [r7, #8]
 80039e2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003a9c <HAL_RCC_GetSysClockFreq+0x2e4>
 80039e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80039fe:	e021      	b.n	8003a44 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	ee07 3a90 	vmov	s15, r3
 8003a06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a0a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003aa4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003a0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a12:	4b1e      	ldr	r3, [pc, #120]	; (8003a8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a1a:	ee07 3a90 	vmov	s15, r3
 8003a1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a22:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a26:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003a9c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003a2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003a42:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003a44:	4b11      	ldr	r3, [pc, #68]	; (8003a8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a48:	0a5b      	lsrs	r3, r3, #9
 8003a4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a4e:	3301      	adds	r3, #1
 8003a50:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	ee07 3a90 	vmov	s15, r3
 8003a58:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003a5c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003a60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a68:	ee17 3a90 	vmov	r3, s15
 8003a6c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003a6e:	e005      	b.n	8003a7c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003a70:	2300      	movs	r3, #0
 8003a72:	61bb      	str	r3, [r7, #24]
    break;
 8003a74:	e002      	b.n	8003a7c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8003a76:	4b07      	ldr	r3, [pc, #28]	; (8003a94 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003a78:	61bb      	str	r3, [r7, #24]
    break;
 8003a7a:	bf00      	nop
  }

  return sysclockfreq;
 8003a7c:	69bb      	ldr	r3, [r7, #24]
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3724      	adds	r7, #36	; 0x24
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr
 8003a8a:	bf00      	nop
 8003a8c:	58024400 	.word	0x58024400
 8003a90:	03d09000 	.word	0x03d09000
 8003a94:	003d0900 	.word	0x003d0900
 8003a98:	007a1200 	.word	0x007a1200
 8003a9c:	46000000 	.word	0x46000000
 8003aa0:	4c742400 	.word	0x4c742400
 8003aa4:	4a742400 	.word	0x4a742400
 8003aa8:	4af42400 	.word	0x4af42400

08003aac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b082      	sub	sp, #8
 8003ab0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003ab2:	f7ff fe81 	bl	80037b8 <HAL_RCC_GetSysClockFreq>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	4b10      	ldr	r3, [pc, #64]	; (8003afc <HAL_RCC_GetHCLKFreq+0x50>)
 8003aba:	699b      	ldr	r3, [r3, #24]
 8003abc:	0a1b      	lsrs	r3, r3, #8
 8003abe:	f003 030f 	and.w	r3, r3, #15
 8003ac2:	490f      	ldr	r1, [pc, #60]	; (8003b00 <HAL_RCC_GetHCLKFreq+0x54>)
 8003ac4:	5ccb      	ldrb	r3, [r1, r3]
 8003ac6:	f003 031f 	and.w	r3, r3, #31
 8003aca:	fa22 f303 	lsr.w	r3, r2, r3
 8003ace:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003ad0:	4b0a      	ldr	r3, [pc, #40]	; (8003afc <HAL_RCC_GetHCLKFreq+0x50>)
 8003ad2:	699b      	ldr	r3, [r3, #24]
 8003ad4:	f003 030f 	and.w	r3, r3, #15
 8003ad8:	4a09      	ldr	r2, [pc, #36]	; (8003b00 <HAL_RCC_GetHCLKFreq+0x54>)
 8003ada:	5cd3      	ldrb	r3, [r2, r3]
 8003adc:	f003 031f 	and.w	r3, r3, #31
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ae6:	4a07      	ldr	r2, [pc, #28]	; (8003b04 <HAL_RCC_GetHCLKFreq+0x58>)
 8003ae8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003aea:	4a07      	ldr	r2, [pc, #28]	; (8003b08 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003af0:	4b04      	ldr	r3, [pc, #16]	; (8003b04 <HAL_RCC_GetHCLKFreq+0x58>)
 8003af2:	681b      	ldr	r3, [r3, #0]
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3708      	adds	r7, #8
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}
 8003afc:	58024400 	.word	0x58024400
 8003b00:	08006340 	.word	0x08006340
 8003b04:	20000004 	.word	0x20000004
 8003b08:	20000000 	.word	0x20000000

08003b0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003b10:	f7ff ffcc 	bl	8003aac <HAL_RCC_GetHCLKFreq>
 8003b14:	4602      	mov	r2, r0
 8003b16:	4b06      	ldr	r3, [pc, #24]	; (8003b30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b18:	69db      	ldr	r3, [r3, #28]
 8003b1a:	091b      	lsrs	r3, r3, #4
 8003b1c:	f003 0307 	and.w	r3, r3, #7
 8003b20:	4904      	ldr	r1, [pc, #16]	; (8003b34 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003b22:	5ccb      	ldrb	r3, [r1, r3]
 8003b24:	f003 031f 	and.w	r3, r3, #31
 8003b28:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	58024400 	.word	0x58024400
 8003b34:	08006340 	.word	0x08006340

08003b38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003b3c:	f7ff ffb6 	bl	8003aac <HAL_RCC_GetHCLKFreq>
 8003b40:	4602      	mov	r2, r0
 8003b42:	4b06      	ldr	r3, [pc, #24]	; (8003b5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b44:	69db      	ldr	r3, [r3, #28]
 8003b46:	0a1b      	lsrs	r3, r3, #8
 8003b48:	f003 0307 	and.w	r3, r3, #7
 8003b4c:	4904      	ldr	r1, [pc, #16]	; (8003b60 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003b4e:	5ccb      	ldrb	r3, [r1, r3]
 8003b50:	f003 031f 	and.w	r3, r3, #31
 8003b54:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	bd80      	pop	{r7, pc}
 8003b5c:	58024400 	.word	0x58024400
 8003b60:	08006340 	.word	0x08006340

08003b64 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b086      	sub	sp, #24
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003b70:	2300      	movs	r3, #0
 8003b72:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d03f      	beq.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b84:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003b88:	d02a      	beq.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003b8a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003b8e:	d824      	bhi.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003b90:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b94:	d018      	beq.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003b96:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b9a:	d81e      	bhi.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d003      	beq.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003ba0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ba4:	d007      	beq.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003ba6:	e018      	b.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ba8:	4bab      	ldr	r3, [pc, #684]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bac:	4aaa      	ldr	r2, [pc, #680]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003bae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bb2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003bb4:	e015      	b.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	3304      	adds	r3, #4
 8003bba:	2102      	movs	r1, #2
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f001 f9cf 	bl	8004f60 <RCCEx_PLL2_Config>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003bc6:	e00c      	b.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	3324      	adds	r3, #36	; 0x24
 8003bcc:	2102      	movs	r1, #2
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f001 fa78 	bl	80050c4 <RCCEx_PLL3_Config>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003bd8:	e003      	b.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	75fb      	strb	r3, [r7, #23]
      break;
 8003bde:	e000      	b.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003be0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003be2:	7dfb      	ldrb	r3, [r7, #23]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d109      	bne.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003be8:	4b9b      	ldr	r3, [pc, #620]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003bea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003bf4:	4998      	ldr	r1, [pc, #608]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	650b      	str	r3, [r1, #80]	; 0x50
 8003bfa:	e001      	b.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bfc:	7dfb      	ldrb	r3, [r7, #23]
 8003bfe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d03d      	beq.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c10:	2b04      	cmp	r3, #4
 8003c12:	d826      	bhi.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003c14:	a201      	add	r2, pc, #4	; (adr r2, 8003c1c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8003c16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c1a:	bf00      	nop
 8003c1c:	08003c31 	.word	0x08003c31
 8003c20:	08003c3f 	.word	0x08003c3f
 8003c24:	08003c51 	.word	0x08003c51
 8003c28:	08003c69 	.word	0x08003c69
 8003c2c:	08003c69 	.word	0x08003c69
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c30:	4b89      	ldr	r3, [pc, #548]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c34:	4a88      	ldr	r2, [pc, #544]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c3a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003c3c:	e015      	b.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	3304      	adds	r3, #4
 8003c42:	2100      	movs	r1, #0
 8003c44:	4618      	mov	r0, r3
 8003c46:	f001 f98b 	bl	8004f60 <RCCEx_PLL2_Config>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003c4e:	e00c      	b.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	3324      	adds	r3, #36	; 0x24
 8003c54:	2100      	movs	r1, #0
 8003c56:	4618      	mov	r0, r3
 8003c58:	f001 fa34 	bl	80050c4 <RCCEx_PLL3_Config>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003c60:	e003      	b.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	75fb      	strb	r3, [r7, #23]
      break;
 8003c66:	e000      	b.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003c68:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c6a:	7dfb      	ldrb	r3, [r7, #23]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d109      	bne.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c70:	4b79      	ldr	r3, [pc, #484]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c74:	f023 0207 	bic.w	r2, r3, #7
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c7c:	4976      	ldr	r1, [pc, #472]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	650b      	str	r3, [r1, #80]	; 0x50
 8003c82:	e001      	b.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c84:	7dfb      	ldrb	r3, [r7, #23]
 8003c86:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d042      	beq.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c9c:	d02b      	beq.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8003c9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ca2:	d825      	bhi.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003ca4:	2bc0      	cmp	r3, #192	; 0xc0
 8003ca6:	d028      	beq.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003ca8:	2bc0      	cmp	r3, #192	; 0xc0
 8003caa:	d821      	bhi.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003cac:	2b80      	cmp	r3, #128	; 0x80
 8003cae:	d016      	beq.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8003cb0:	2b80      	cmp	r3, #128	; 0x80
 8003cb2:	d81d      	bhi.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d002      	beq.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8003cb8:	2b40      	cmp	r3, #64	; 0x40
 8003cba:	d007      	beq.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x168>
 8003cbc:	e018      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cbe:	4b66      	ldr	r3, [pc, #408]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc2:	4a65      	ldr	r2, [pc, #404]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003cc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cc8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003cca:	e017      	b.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	3304      	adds	r3, #4
 8003cd0:	2100      	movs	r1, #0
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f001 f944 	bl	8004f60 <RCCEx_PLL2_Config>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003cdc:	e00e      	b.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	3324      	adds	r3, #36	; 0x24
 8003ce2:	2100      	movs	r1, #0
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f001 f9ed 	bl	80050c4 <RCCEx_PLL3_Config>
 8003cea:	4603      	mov	r3, r0
 8003cec:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003cee:	e005      	b.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	75fb      	strb	r3, [r7, #23]
      break;
 8003cf4:	e002      	b.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003cf6:	bf00      	nop
 8003cf8:	e000      	b.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003cfa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cfc:	7dfb      	ldrb	r3, [r7, #23]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d109      	bne.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003d02:	4b55      	ldr	r3, [pc, #340]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003d04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d06:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d0e:	4952      	ldr	r1, [pc, #328]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003d10:	4313      	orrs	r3, r2
 8003d12:	650b      	str	r3, [r1, #80]	; 0x50
 8003d14:	e001      	b.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d16:	7dfb      	ldrb	r3, [r7, #23]
 8003d18:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d049      	beq.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003d2c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003d30:	d030      	beq.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8003d32:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003d36:	d82a      	bhi.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003d38:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003d3c:	d02c      	beq.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8003d3e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003d42:	d824      	bhi.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003d44:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d48:	d018      	beq.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x218>
 8003d4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d4e:	d81e      	bhi.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d003      	beq.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003d54:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d58:	d007      	beq.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x206>
 8003d5a:	e018      	b.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d5c:	4b3e      	ldr	r3, [pc, #248]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d60:	4a3d      	ldr	r2, [pc, #244]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003d62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d66:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003d68:	e017      	b.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	3304      	adds	r3, #4
 8003d6e:	2100      	movs	r1, #0
 8003d70:	4618      	mov	r0, r3
 8003d72:	f001 f8f5 	bl	8004f60 <RCCEx_PLL2_Config>
 8003d76:	4603      	mov	r3, r0
 8003d78:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003d7a:	e00e      	b.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	3324      	adds	r3, #36	; 0x24
 8003d80:	2100      	movs	r1, #0
 8003d82:	4618      	mov	r0, r3
 8003d84:	f001 f99e 	bl	80050c4 <RCCEx_PLL3_Config>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003d8c:	e005      	b.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	75fb      	strb	r3, [r7, #23]
      break;
 8003d92:	e002      	b.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003d94:	bf00      	nop
 8003d96:	e000      	b.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003d98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d9a:	7dfb      	ldrb	r3, [r7, #23]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d10a      	bne.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003da0:	4b2d      	ldr	r3, [pc, #180]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003da2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003da4:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003dae:	492a      	ldr	r1, [pc, #168]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003db0:	4313      	orrs	r3, r2
 8003db2:	658b      	str	r3, [r1, #88]	; 0x58
 8003db4:	e001      	b.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003db6:	7dfb      	ldrb	r3, [r7, #23]
 8003db8:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d04c      	beq.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003dcc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003dd0:	d030      	beq.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8003dd2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003dd6:	d82a      	bhi.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003dd8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003ddc:	d02c      	beq.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8003dde:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003de2:	d824      	bhi.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003de4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003de8:	d018      	beq.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8003dea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003dee:	d81e      	bhi.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d003      	beq.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003df4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003df8:	d007      	beq.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8003dfa:	e018      	b.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003dfc:	4b16      	ldr	r3, [pc, #88]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e00:	4a15      	ldr	r2, [pc, #84]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003e02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e06:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003e08:	e017      	b.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	3304      	adds	r3, #4
 8003e0e:	2100      	movs	r1, #0
 8003e10:	4618      	mov	r0, r3
 8003e12:	f001 f8a5 	bl	8004f60 <RCCEx_PLL2_Config>
 8003e16:	4603      	mov	r3, r0
 8003e18:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003e1a:	e00e      	b.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	3324      	adds	r3, #36	; 0x24
 8003e20:	2100      	movs	r1, #0
 8003e22:	4618      	mov	r0, r3
 8003e24:	f001 f94e 	bl	80050c4 <RCCEx_PLL3_Config>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003e2c:	e005      	b.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	75fb      	strb	r3, [r7, #23]
      break;
 8003e32:	e002      	b.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8003e34:	bf00      	nop
 8003e36:	e000      	b.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8003e38:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e3a:	7dfb      	ldrb	r3, [r7, #23]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d10d      	bne.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003e40:	4b05      	ldr	r3, [pc, #20]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003e42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e44:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003e4e:	4902      	ldr	r1, [pc, #8]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003e50:	4313      	orrs	r3, r2
 8003e52:	658b      	str	r3, [r1, #88]	; 0x58
 8003e54:	e004      	b.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8003e56:	bf00      	nop
 8003e58:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e5c:	7dfb      	ldrb	r3, [r7, #23]
 8003e5e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d032      	beq.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e70:	2b30      	cmp	r3, #48	; 0x30
 8003e72:	d01c      	beq.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003e74:	2b30      	cmp	r3, #48	; 0x30
 8003e76:	d817      	bhi.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8003e78:	2b20      	cmp	r3, #32
 8003e7a:	d00c      	beq.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8003e7c:	2b20      	cmp	r3, #32
 8003e7e:	d813      	bhi.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d016      	beq.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003e84:	2b10      	cmp	r3, #16
 8003e86:	d10f      	bne.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e88:	4baf      	ldr	r3, [pc, #700]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e8c:	4aae      	ldr	r2, [pc, #696]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003e8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e92:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003e94:	e00e      	b.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	3304      	adds	r3, #4
 8003e9a:	2102      	movs	r1, #2
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f001 f85f 	bl	8004f60 <RCCEx_PLL2_Config>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003ea6:	e005      	b.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	75fb      	strb	r3, [r7, #23]
      break;
 8003eac:	e002      	b.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8003eae:	bf00      	nop
 8003eb0:	e000      	b.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8003eb2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003eb4:	7dfb      	ldrb	r3, [r7, #23]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d109      	bne.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003eba:	4ba3      	ldr	r3, [pc, #652]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ebe:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ec6:	49a0      	ldr	r1, [pc, #640]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003ecc:	e001      	b.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ece:	7dfb      	ldrb	r3, [r7, #23]
 8003ed0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d047      	beq.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ee2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ee6:	d030      	beq.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8003ee8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003eec:	d82a      	bhi.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003eee:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003ef2:	d02c      	beq.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8003ef4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003ef8:	d824      	bhi.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003efa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003efe:	d018      	beq.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8003f00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f04:	d81e      	bhi.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d003      	beq.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8003f0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f0e:	d007      	beq.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8003f10:	e018      	b.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f12:	4b8d      	ldr	r3, [pc, #564]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f16:	4a8c      	ldr	r2, [pc, #560]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003f18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f1c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003f1e:	e017      	b.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	3304      	adds	r3, #4
 8003f24:	2100      	movs	r1, #0
 8003f26:	4618      	mov	r0, r3
 8003f28:	f001 f81a 	bl	8004f60 <RCCEx_PLL2_Config>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003f30:	e00e      	b.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	3324      	adds	r3, #36	; 0x24
 8003f36:	2100      	movs	r1, #0
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f001 f8c3 	bl	80050c4 <RCCEx_PLL3_Config>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003f42:	e005      	b.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	75fb      	strb	r3, [r7, #23]
      break;
 8003f48:	e002      	b.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8003f4a:	bf00      	nop
 8003f4c:	e000      	b.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8003f4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f50:	7dfb      	ldrb	r3, [r7, #23]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d109      	bne.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003f56:	4b7c      	ldr	r3, [pc, #496]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003f58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f5a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f62:	4979      	ldr	r1, [pc, #484]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003f64:	4313      	orrs	r3, r2
 8003f66:	650b      	str	r3, [r1, #80]	; 0x50
 8003f68:	e001      	b.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f6a:	7dfb      	ldrb	r3, [r7, #23]
 8003f6c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d049      	beq.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f7e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f82:	d02e      	beq.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8003f84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f88:	d828      	bhi.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003f8a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003f8e:	d02a      	beq.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8003f90:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003f94:	d822      	bhi.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003f96:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003f9a:	d026      	beq.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003f9c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003fa0:	d81c      	bhi.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003fa2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003fa6:	d010      	beq.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x466>
 8003fa8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003fac:	d816      	bhi.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d01d      	beq.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8003fb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fb6:	d111      	bne.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	3304      	adds	r3, #4
 8003fbc:	2101      	movs	r1, #1
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f000 ffce 	bl	8004f60 <RCCEx_PLL2_Config>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003fc8:	e012      	b.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	3324      	adds	r3, #36	; 0x24
 8003fce:	2101      	movs	r1, #1
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f001 f877 	bl	80050c4 <RCCEx_PLL3_Config>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003fda:	e009      	b.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	75fb      	strb	r3, [r7, #23]
      break;
 8003fe0:	e006      	b.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003fe2:	bf00      	nop
 8003fe4:	e004      	b.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003fe6:	bf00      	nop
 8003fe8:	e002      	b.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003fea:	bf00      	nop
 8003fec:	e000      	b.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003fee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ff0:	7dfb      	ldrb	r3, [r7, #23]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d109      	bne.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003ff6:	4b54      	ldr	r3, [pc, #336]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003ff8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ffa:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004002:	4951      	ldr	r1, [pc, #324]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004004:	4313      	orrs	r3, r2
 8004006:	650b      	str	r3, [r1, #80]	; 0x50
 8004008:	e001      	b.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800400a:	7dfb      	ldrb	r3, [r7, #23]
 800400c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004016:	2b00      	cmp	r3, #0
 8004018:	d04b      	beq.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004020:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004024:	d02e      	beq.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8004026:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800402a:	d828      	bhi.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800402c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004030:	d02a      	beq.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004032:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004036:	d822      	bhi.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004038:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800403c:	d026      	beq.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x528>
 800403e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004042:	d81c      	bhi.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004044:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004048:	d010      	beq.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x508>
 800404a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800404e:	d816      	bhi.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004050:	2b00      	cmp	r3, #0
 8004052:	d01d      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8004054:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004058:	d111      	bne.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	3304      	adds	r3, #4
 800405e:	2101      	movs	r1, #1
 8004060:	4618      	mov	r0, r3
 8004062:	f000 ff7d 	bl	8004f60 <RCCEx_PLL2_Config>
 8004066:	4603      	mov	r3, r0
 8004068:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800406a:	e012      	b.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	3324      	adds	r3, #36	; 0x24
 8004070:	2101      	movs	r1, #1
 8004072:	4618      	mov	r0, r3
 8004074:	f001 f826 	bl	80050c4 <RCCEx_PLL3_Config>
 8004078:	4603      	mov	r3, r0
 800407a:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800407c:	e009      	b.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	75fb      	strb	r3, [r7, #23]
      break;
 8004082:	e006      	b.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004084:	bf00      	nop
 8004086:	e004      	b.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004088:	bf00      	nop
 800408a:	e002      	b.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800408c:	bf00      	nop
 800408e:	e000      	b.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004090:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004092:	7dfb      	ldrb	r3, [r7, #23]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d10a      	bne.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004098:	4b2b      	ldr	r3, [pc, #172]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800409a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800409c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80040a6:	4928      	ldr	r1, [pc, #160]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80040a8:	4313      	orrs	r3, r2
 80040aa:	658b      	str	r3, [r1, #88]	; 0x58
 80040ac:	e001      	b.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040ae:	7dfb      	ldrb	r3, [r7, #23]
 80040b0:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d02f      	beq.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040c6:	d00e      	beq.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x582>
 80040c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040cc:	d814      	bhi.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x594>
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d015      	beq.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80040d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80040d6:	d10f      	bne.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040d8:	4b1b      	ldr	r3, [pc, #108]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80040da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040dc:	4a1a      	ldr	r2, [pc, #104]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80040de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040e2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80040e4:	e00c      	b.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	3304      	adds	r3, #4
 80040ea:	2101      	movs	r1, #1
 80040ec:	4618      	mov	r0, r3
 80040ee:	f000 ff37 	bl	8004f60 <RCCEx_PLL2_Config>
 80040f2:	4603      	mov	r3, r0
 80040f4:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80040f6:	e003      	b.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	75fb      	strb	r3, [r7, #23]
      break;
 80040fc:	e000      	b.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 80040fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004100:	7dfb      	ldrb	r3, [r7, #23]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d109      	bne.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004106:	4b10      	ldr	r3, [pc, #64]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004108:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800410a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004112:	490d      	ldr	r1, [pc, #52]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004114:	4313      	orrs	r3, r2
 8004116:	650b      	str	r3, [r1, #80]	; 0x50
 8004118:	e001      	b.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800411a:	7dfb      	ldrb	r3, [r7, #23]
 800411c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004126:	2b00      	cmp	r3, #0
 8004128:	d033      	beq.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800412e:	2b03      	cmp	r3, #3
 8004130:	d81c      	bhi.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8004132:	a201      	add	r2, pc, #4	; (adr r2, 8004138 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8004134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004138:	08004173 	.word	0x08004173
 800413c:	0800414d 	.word	0x0800414d
 8004140:	0800415b 	.word	0x0800415b
 8004144:	08004173 	.word	0x08004173
 8004148:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800414c:	4bb8      	ldr	r3, [pc, #736]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800414e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004150:	4ab7      	ldr	r2, [pc, #732]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004152:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004156:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004158:	e00c      	b.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	3304      	adds	r3, #4
 800415e:	2102      	movs	r1, #2
 8004160:	4618      	mov	r0, r3
 8004162:	f000 fefd 	bl	8004f60 <RCCEx_PLL2_Config>
 8004166:	4603      	mov	r3, r0
 8004168:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800416a:	e003      	b.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	75fb      	strb	r3, [r7, #23]
      break;
 8004170:	e000      	b.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8004172:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004174:	7dfb      	ldrb	r3, [r7, #23]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d109      	bne.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800417a:	4bad      	ldr	r3, [pc, #692]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800417c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800417e:	f023 0203 	bic.w	r2, r3, #3
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004186:	49aa      	ldr	r1, [pc, #680]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004188:	4313      	orrs	r3, r2
 800418a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800418c:	e001      	b.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800418e:	7dfb      	ldrb	r3, [r7, #23]
 8004190:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800419a:	2b00      	cmp	r3, #0
 800419c:	f000 8086 	beq.w	80042ac <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80041a0:	4ba4      	ldr	r3, [pc, #656]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4aa3      	ldr	r2, [pc, #652]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80041a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041aa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80041ac:	f7fc ffd6 	bl	800115c <HAL_GetTick>
 80041b0:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80041b2:	e009      	b.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041b4:	f7fc ffd2 	bl	800115c <HAL_GetTick>
 80041b8:	4602      	mov	r2, r0
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	1ad3      	subs	r3, r2, r3
 80041be:	2b64      	cmp	r3, #100	; 0x64
 80041c0:	d902      	bls.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80041c2:	2303      	movs	r3, #3
 80041c4:	75fb      	strb	r3, [r7, #23]
        break;
 80041c6:	e005      	b.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80041c8:	4b9a      	ldr	r3, [pc, #616]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d0ef      	beq.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80041d4:	7dfb      	ldrb	r3, [r7, #23]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d166      	bne.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80041da:	4b95      	ldr	r3, [pc, #596]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80041dc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80041e4:	4053      	eors	r3, r2
 80041e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d013      	beq.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80041ee:	4b90      	ldr	r3, [pc, #576]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80041f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041f6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80041f8:	4b8d      	ldr	r3, [pc, #564]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80041fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041fc:	4a8c      	ldr	r2, [pc, #560]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80041fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004202:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004204:	4b8a      	ldr	r3, [pc, #552]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004206:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004208:	4a89      	ldr	r2, [pc, #548]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800420a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800420e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004210:	4a87      	ldr	r2, [pc, #540]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800421c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004220:	d115      	bne.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004222:	f7fc ff9b 	bl	800115c <HAL_GetTick>
 8004226:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004228:	e00b      	b.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800422a:	f7fc ff97 	bl	800115c <HAL_GetTick>
 800422e:	4602      	mov	r2, r0
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	1ad3      	subs	r3, r2, r3
 8004234:	f241 3288 	movw	r2, #5000	; 0x1388
 8004238:	4293      	cmp	r3, r2
 800423a:	d902      	bls.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800423c:	2303      	movs	r3, #3
 800423e:	75fb      	strb	r3, [r7, #23]
            break;
 8004240:	e005      	b.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004242:	4b7b      	ldr	r3, [pc, #492]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004246:	f003 0302 	and.w	r3, r3, #2
 800424a:	2b00      	cmp	r3, #0
 800424c:	d0ed      	beq.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800424e:	7dfb      	ldrb	r3, [r7, #23]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d126      	bne.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800425a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800425e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004262:	d10d      	bne.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8004264:	4b72      	ldr	r3, [pc, #456]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004266:	691b      	ldr	r3, [r3, #16]
 8004268:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004272:	0919      	lsrs	r1, r3, #4
 8004274:	4b70      	ldr	r3, [pc, #448]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8004276:	400b      	ands	r3, r1
 8004278:	496d      	ldr	r1, [pc, #436]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800427a:	4313      	orrs	r3, r2
 800427c:	610b      	str	r3, [r1, #16]
 800427e:	e005      	b.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8004280:	4b6b      	ldr	r3, [pc, #428]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004282:	691b      	ldr	r3, [r3, #16]
 8004284:	4a6a      	ldr	r2, [pc, #424]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004286:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800428a:	6113      	str	r3, [r2, #16]
 800428c:	4b68      	ldr	r3, [pc, #416]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800428e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004296:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800429a:	4965      	ldr	r1, [pc, #404]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800429c:	4313      	orrs	r3, r2
 800429e:	670b      	str	r3, [r1, #112]	; 0x70
 80042a0:	e004      	b.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80042a2:	7dfb      	ldrb	r3, [r7, #23]
 80042a4:	75bb      	strb	r3, [r7, #22]
 80042a6:	e001      	b.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042a8:	7dfb      	ldrb	r3, [r7, #23]
 80042aa:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 0301 	and.w	r3, r3, #1
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d07e      	beq.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042bc:	2b28      	cmp	r3, #40	; 0x28
 80042be:	d867      	bhi.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80042c0:	a201      	add	r2, pc, #4	; (adr r2, 80042c8 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80042c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042c6:	bf00      	nop
 80042c8:	08004397 	.word	0x08004397
 80042cc:	08004391 	.word	0x08004391
 80042d0:	08004391 	.word	0x08004391
 80042d4:	08004391 	.word	0x08004391
 80042d8:	08004391 	.word	0x08004391
 80042dc:	08004391 	.word	0x08004391
 80042e0:	08004391 	.word	0x08004391
 80042e4:	08004391 	.word	0x08004391
 80042e8:	0800436d 	.word	0x0800436d
 80042ec:	08004391 	.word	0x08004391
 80042f0:	08004391 	.word	0x08004391
 80042f4:	08004391 	.word	0x08004391
 80042f8:	08004391 	.word	0x08004391
 80042fc:	08004391 	.word	0x08004391
 8004300:	08004391 	.word	0x08004391
 8004304:	08004391 	.word	0x08004391
 8004308:	0800437f 	.word	0x0800437f
 800430c:	08004391 	.word	0x08004391
 8004310:	08004391 	.word	0x08004391
 8004314:	08004391 	.word	0x08004391
 8004318:	08004391 	.word	0x08004391
 800431c:	08004391 	.word	0x08004391
 8004320:	08004391 	.word	0x08004391
 8004324:	08004391 	.word	0x08004391
 8004328:	08004397 	.word	0x08004397
 800432c:	08004391 	.word	0x08004391
 8004330:	08004391 	.word	0x08004391
 8004334:	08004391 	.word	0x08004391
 8004338:	08004391 	.word	0x08004391
 800433c:	08004391 	.word	0x08004391
 8004340:	08004391 	.word	0x08004391
 8004344:	08004391 	.word	0x08004391
 8004348:	08004397 	.word	0x08004397
 800434c:	08004391 	.word	0x08004391
 8004350:	08004391 	.word	0x08004391
 8004354:	08004391 	.word	0x08004391
 8004358:	08004391 	.word	0x08004391
 800435c:	08004391 	.word	0x08004391
 8004360:	08004391 	.word	0x08004391
 8004364:	08004391 	.word	0x08004391
 8004368:	08004397 	.word	0x08004397
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	3304      	adds	r3, #4
 8004370:	2101      	movs	r1, #1
 8004372:	4618      	mov	r0, r3
 8004374:	f000 fdf4 	bl	8004f60 <RCCEx_PLL2_Config>
 8004378:	4603      	mov	r3, r0
 800437a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800437c:	e00c      	b.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	3324      	adds	r3, #36	; 0x24
 8004382:	2101      	movs	r1, #1
 8004384:	4618      	mov	r0, r3
 8004386:	f000 fe9d 	bl	80050c4 <RCCEx_PLL3_Config>
 800438a:	4603      	mov	r3, r0
 800438c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800438e:	e003      	b.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	75fb      	strb	r3, [r7, #23]
      break;
 8004394:	e000      	b.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8004396:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004398:	7dfb      	ldrb	r3, [r7, #23]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d109      	bne.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800439e:	4b24      	ldr	r3, [pc, #144]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80043a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043a2:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043aa:	4921      	ldr	r1, [pc, #132]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80043ac:	4313      	orrs	r3, r2
 80043ae:	654b      	str	r3, [r1, #84]	; 0x54
 80043b0:	e001      	b.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043b2:	7dfb      	ldrb	r3, [r7, #23]
 80043b4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 0302 	and.w	r3, r3, #2
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d03e      	beq.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043c6:	2b05      	cmp	r3, #5
 80043c8:	d820      	bhi.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 80043ca:	a201      	add	r2, pc, #4	; (adr r2, 80043d0 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 80043cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043d0:	08004413 	.word	0x08004413
 80043d4:	080043e9 	.word	0x080043e9
 80043d8:	080043fb 	.word	0x080043fb
 80043dc:	08004413 	.word	0x08004413
 80043e0:	08004413 	.word	0x08004413
 80043e4:	08004413 	.word	0x08004413
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	3304      	adds	r3, #4
 80043ec:	2101      	movs	r1, #1
 80043ee:	4618      	mov	r0, r3
 80043f0:	f000 fdb6 	bl	8004f60 <RCCEx_PLL2_Config>
 80043f4:	4603      	mov	r3, r0
 80043f6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80043f8:	e00c      	b.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	3324      	adds	r3, #36	; 0x24
 80043fe:	2101      	movs	r1, #1
 8004400:	4618      	mov	r0, r3
 8004402:	f000 fe5f 	bl	80050c4 <RCCEx_PLL3_Config>
 8004406:	4603      	mov	r3, r0
 8004408:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800440a:	e003      	b.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	75fb      	strb	r3, [r7, #23]
      break;
 8004410:	e000      	b.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8004412:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004414:	7dfb      	ldrb	r3, [r7, #23]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d110      	bne.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800441a:	4b05      	ldr	r3, [pc, #20]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800441c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800441e:	f023 0207 	bic.w	r2, r3, #7
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004426:	4902      	ldr	r1, [pc, #8]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004428:	4313      	orrs	r3, r2
 800442a:	654b      	str	r3, [r1, #84]	; 0x54
 800442c:	e008      	b.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 800442e:	bf00      	nop
 8004430:	58024400 	.word	0x58024400
 8004434:	58024800 	.word	0x58024800
 8004438:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800443c:	7dfb      	ldrb	r3, [r7, #23]
 800443e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 0304 	and.w	r3, r3, #4
 8004448:	2b00      	cmp	r3, #0
 800444a:	d039      	beq.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004452:	2b05      	cmp	r3, #5
 8004454:	d820      	bhi.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8004456:	a201      	add	r2, pc, #4	; (adr r2, 800445c <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8004458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800445c:	0800449f 	.word	0x0800449f
 8004460:	08004475 	.word	0x08004475
 8004464:	08004487 	.word	0x08004487
 8004468:	0800449f 	.word	0x0800449f
 800446c:	0800449f 	.word	0x0800449f
 8004470:	0800449f 	.word	0x0800449f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	3304      	adds	r3, #4
 8004478:	2101      	movs	r1, #1
 800447a:	4618      	mov	r0, r3
 800447c:	f000 fd70 	bl	8004f60 <RCCEx_PLL2_Config>
 8004480:	4603      	mov	r3, r0
 8004482:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004484:	e00c      	b.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	3324      	adds	r3, #36	; 0x24
 800448a:	2101      	movs	r1, #1
 800448c:	4618      	mov	r0, r3
 800448e:	f000 fe19 	bl	80050c4 <RCCEx_PLL3_Config>
 8004492:	4603      	mov	r3, r0
 8004494:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004496:	e003      	b.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	75fb      	strb	r3, [r7, #23]
      break;
 800449c:	e000      	b.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 800449e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044a0:	7dfb      	ldrb	r3, [r7, #23]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d10a      	bne.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80044a6:	4bb7      	ldr	r3, [pc, #732]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80044a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044aa:	f023 0207 	bic.w	r2, r3, #7
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044b4:	49b3      	ldr	r1, [pc, #716]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80044b6:	4313      	orrs	r3, r2
 80044b8:	658b      	str	r3, [r1, #88]	; 0x58
 80044ba:	e001      	b.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044bc:	7dfb      	ldrb	r3, [r7, #23]
 80044be:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 0320 	and.w	r3, r3, #32
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d04b      	beq.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80044d6:	d02e      	beq.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 80044d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80044dc:	d828      	bhi.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80044de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044e2:	d02a      	beq.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80044e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044e8:	d822      	bhi.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80044ea:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80044ee:	d026      	beq.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80044f0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80044f4:	d81c      	bhi.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80044f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80044fa:	d010      	beq.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 80044fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004500:	d816      	bhi.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8004502:	2b00      	cmp	r3, #0
 8004504:	d01d      	beq.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8004506:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800450a:	d111      	bne.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	3304      	adds	r3, #4
 8004510:	2100      	movs	r1, #0
 8004512:	4618      	mov	r0, r3
 8004514:	f000 fd24 	bl	8004f60 <RCCEx_PLL2_Config>
 8004518:	4603      	mov	r3, r0
 800451a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800451c:	e012      	b.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	3324      	adds	r3, #36	; 0x24
 8004522:	2102      	movs	r1, #2
 8004524:	4618      	mov	r0, r3
 8004526:	f000 fdcd 	bl	80050c4 <RCCEx_PLL3_Config>
 800452a:	4603      	mov	r3, r0
 800452c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800452e:	e009      	b.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	75fb      	strb	r3, [r7, #23]
      break;
 8004534:	e006      	b.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8004536:	bf00      	nop
 8004538:	e004      	b.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800453a:	bf00      	nop
 800453c:	e002      	b.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800453e:	bf00      	nop
 8004540:	e000      	b.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8004542:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004544:	7dfb      	ldrb	r3, [r7, #23]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d10a      	bne.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800454a:	4b8e      	ldr	r3, [pc, #568]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800454c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800454e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004558:	498a      	ldr	r1, [pc, #552]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800455a:	4313      	orrs	r3, r2
 800455c:	654b      	str	r3, [r1, #84]	; 0x54
 800455e:	e001      	b.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004560:	7dfb      	ldrb	r3, [r7, #23]
 8004562:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800456c:	2b00      	cmp	r3, #0
 800456e:	d04b      	beq.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004576:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800457a:	d02e      	beq.n	80045da <HAL_RCCEx_PeriphCLKConfig+0xa76>
 800457c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004580:	d828      	bhi.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004582:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004586:	d02a      	beq.n	80045de <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8004588:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800458c:	d822      	bhi.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800458e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004592:	d026      	beq.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8004594:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004598:	d81c      	bhi.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800459a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800459e:	d010      	beq.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 80045a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045a4:	d816      	bhi.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d01d      	beq.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80045aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045ae:	d111      	bne.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	3304      	adds	r3, #4
 80045b4:	2100      	movs	r1, #0
 80045b6:	4618      	mov	r0, r3
 80045b8:	f000 fcd2 	bl	8004f60 <RCCEx_PLL2_Config>
 80045bc:	4603      	mov	r3, r0
 80045be:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80045c0:	e012      	b.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	3324      	adds	r3, #36	; 0x24
 80045c6:	2102      	movs	r1, #2
 80045c8:	4618      	mov	r0, r3
 80045ca:	f000 fd7b 	bl	80050c4 <RCCEx_PLL3_Config>
 80045ce:	4603      	mov	r3, r0
 80045d0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80045d2:	e009      	b.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045d4:	2301      	movs	r3, #1
 80045d6:	75fb      	strb	r3, [r7, #23]
      break;
 80045d8:	e006      	b.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80045da:	bf00      	nop
 80045dc:	e004      	b.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80045de:	bf00      	nop
 80045e0:	e002      	b.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80045e2:	bf00      	nop
 80045e4:	e000      	b.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80045e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045e8:	7dfb      	ldrb	r3, [r7, #23]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d10a      	bne.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80045ee:	4b65      	ldr	r3, [pc, #404]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80045f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045f2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80045fc:	4961      	ldr	r1, [pc, #388]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80045fe:	4313      	orrs	r3, r2
 8004600:	658b      	str	r3, [r1, #88]	; 0x58
 8004602:	e001      	b.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004604:	7dfb      	ldrb	r3, [r7, #23]
 8004606:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004610:	2b00      	cmp	r3, #0
 8004612:	d04b      	beq.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800461a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800461e:	d02e      	beq.n	800467e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8004620:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004624:	d828      	bhi.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8004626:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800462a:	d02a      	beq.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 800462c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004630:	d822      	bhi.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8004632:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004636:	d026      	beq.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8004638:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800463c:	d81c      	bhi.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800463e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004642:	d010      	beq.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8004644:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004648:	d816      	bhi.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800464a:	2b00      	cmp	r3, #0
 800464c:	d01d      	beq.n	800468a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800464e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004652:	d111      	bne.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	3304      	adds	r3, #4
 8004658:	2100      	movs	r1, #0
 800465a:	4618      	mov	r0, r3
 800465c:	f000 fc80 	bl	8004f60 <RCCEx_PLL2_Config>
 8004660:	4603      	mov	r3, r0
 8004662:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004664:	e012      	b.n	800468c <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	3324      	adds	r3, #36	; 0x24
 800466a:	2102      	movs	r1, #2
 800466c:	4618      	mov	r0, r3
 800466e:	f000 fd29 	bl	80050c4 <RCCEx_PLL3_Config>
 8004672:	4603      	mov	r3, r0
 8004674:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004676:	e009      	b.n	800468c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	75fb      	strb	r3, [r7, #23]
      break;
 800467c:	e006      	b.n	800468c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800467e:	bf00      	nop
 8004680:	e004      	b.n	800468c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8004682:	bf00      	nop
 8004684:	e002      	b.n	800468c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8004686:	bf00      	nop
 8004688:	e000      	b.n	800468c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800468a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800468c:	7dfb      	ldrb	r3, [r7, #23]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d10a      	bne.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004692:	4b3c      	ldr	r3, [pc, #240]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004694:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004696:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80046a0:	4938      	ldr	r1, [pc, #224]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80046a2:	4313      	orrs	r3, r2
 80046a4:	658b      	str	r3, [r1, #88]	; 0x58
 80046a6:	e001      	b.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046a8:	7dfb      	ldrb	r3, [r7, #23]
 80046aa:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 0308 	and.w	r3, r3, #8
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d01a      	beq.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046c2:	d10a      	bne.n	80046da <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	3324      	adds	r3, #36	; 0x24
 80046c8:	2102      	movs	r1, #2
 80046ca:	4618      	mov	r0, r3
 80046cc:	f000 fcfa 	bl	80050c4 <RCCEx_PLL3_Config>
 80046d0:	4603      	mov	r3, r0
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d001      	beq.n	80046da <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80046da:	4b2a      	ldr	r3, [pc, #168]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80046dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046de:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046e8:	4926      	ldr	r1, [pc, #152]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80046ea:	4313      	orrs	r3, r2
 80046ec:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f003 0310 	and.w	r3, r3, #16
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d01a      	beq.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004700:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004704:	d10a      	bne.n	800471c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	3324      	adds	r3, #36	; 0x24
 800470a:	2102      	movs	r1, #2
 800470c:	4618      	mov	r0, r3
 800470e:	f000 fcd9 	bl	80050c4 <RCCEx_PLL3_Config>
 8004712:	4603      	mov	r3, r0
 8004714:	2b00      	cmp	r3, #0
 8004716:	d001      	beq.n	800471c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800471c:	4b19      	ldr	r3, [pc, #100]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800471e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004720:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800472a:	4916      	ldr	r1, [pc, #88]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800472c:	4313      	orrs	r3, r2
 800472e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004738:	2b00      	cmp	r3, #0
 800473a:	d036      	beq.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004742:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004746:	d01f      	beq.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8004748:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800474c:	d817      	bhi.n	800477e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 800474e:	2b00      	cmp	r3, #0
 8004750:	d003      	beq.n	800475a <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8004752:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004756:	d009      	beq.n	800476c <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8004758:	e011      	b.n	800477e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	3304      	adds	r3, #4
 800475e:	2100      	movs	r1, #0
 8004760:	4618      	mov	r0, r3
 8004762:	f000 fbfd 	bl	8004f60 <RCCEx_PLL2_Config>
 8004766:	4603      	mov	r3, r0
 8004768:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800476a:	e00e      	b.n	800478a <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	3324      	adds	r3, #36	; 0x24
 8004770:	2102      	movs	r1, #2
 8004772:	4618      	mov	r0, r3
 8004774:	f000 fca6 	bl	80050c4 <RCCEx_PLL3_Config>
 8004778:	4603      	mov	r3, r0
 800477a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800477c:	e005      	b.n	800478a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	75fb      	strb	r3, [r7, #23]
      break;
 8004782:	e002      	b.n	800478a <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8004784:	58024400 	.word	0x58024400
      break;
 8004788:	bf00      	nop
    }

    if(ret == HAL_OK)
 800478a:	7dfb      	ldrb	r3, [r7, #23]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d10a      	bne.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004790:	4b93      	ldr	r3, [pc, #588]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004792:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004794:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800479e:	4990      	ldr	r1, [pc, #576]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80047a0:	4313      	orrs	r3, r2
 80047a2:	658b      	str	r3, [r1, #88]	; 0x58
 80047a4:	e001      	b.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047a6:	7dfb      	ldrb	r3, [r7, #23]
 80047a8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d033      	beq.n	800481e <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047bc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80047c0:	d01c      	beq.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0xc98>
 80047c2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80047c6:	d816      	bhi.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 80047c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047cc:	d003      	beq.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 80047ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80047d2:	d007      	beq.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 80047d4:	e00f      	b.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047d6:	4b82      	ldr	r3, [pc, #520]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80047d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047da:	4a81      	ldr	r2, [pc, #516]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80047dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047e0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80047e2:	e00c      	b.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	3324      	adds	r3, #36	; 0x24
 80047e8:	2101      	movs	r1, #1
 80047ea:	4618      	mov	r0, r3
 80047ec:	f000 fc6a 	bl	80050c4 <RCCEx_PLL3_Config>
 80047f0:	4603      	mov	r3, r0
 80047f2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80047f4:	e003      	b.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	75fb      	strb	r3, [r7, #23]
      break;
 80047fa:	e000      	b.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 80047fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047fe:	7dfb      	ldrb	r3, [r7, #23]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d10a      	bne.n	800481a <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004804:	4b76      	ldr	r3, [pc, #472]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004806:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004808:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004812:	4973      	ldr	r1, [pc, #460]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004814:	4313      	orrs	r3, r2
 8004816:	654b      	str	r3, [r1, #84]	; 0x54
 8004818:	e001      	b.n	800481e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800481a:	7dfb      	ldrb	r3, [r7, #23]
 800481c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004826:	2b00      	cmp	r3, #0
 8004828:	d029      	beq.n	800487e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800482e:	2b00      	cmp	r3, #0
 8004830:	d003      	beq.n	800483a <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8004832:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004836:	d007      	beq.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8004838:	e00f      	b.n	800485a <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800483a:	4b69      	ldr	r3, [pc, #420]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800483c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800483e:	4a68      	ldr	r2, [pc, #416]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004840:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004844:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004846:	e00b      	b.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	3304      	adds	r3, #4
 800484c:	2102      	movs	r1, #2
 800484e:	4618      	mov	r0, r3
 8004850:	f000 fb86 	bl	8004f60 <RCCEx_PLL2_Config>
 8004854:	4603      	mov	r3, r0
 8004856:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004858:	e002      	b.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	75fb      	strb	r3, [r7, #23]
      break;
 800485e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004860:	7dfb      	ldrb	r3, [r7, #23]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d109      	bne.n	800487a <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004866:	4b5e      	ldr	r3, [pc, #376]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800486a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004872:	495b      	ldr	r1, [pc, #364]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004874:	4313      	orrs	r3, r2
 8004876:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004878:	e001      	b.n	800487e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800487a:	7dfb      	ldrb	r3, [r7, #23]
 800487c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004886:	2b00      	cmp	r3, #0
 8004888:	d00a      	beq.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	3324      	adds	r3, #36	; 0x24
 800488e:	2102      	movs	r1, #2
 8004890:	4618      	mov	r0, r3
 8004892:	f000 fc17 	bl	80050c4 <RCCEx_PLL3_Config>
 8004896:	4603      	mov	r3, r0
 8004898:	2b00      	cmp	r3, #0
 800489a:	d001      	beq.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d030      	beq.n	800490e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048b4:	d017      	beq.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 80048b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048ba:	d811      	bhi.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80048bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048c0:	d013      	beq.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80048c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048c6:	d80b      	bhi.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d010      	beq.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80048cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048d0:	d106      	bne.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048d2:	4b43      	ldr	r3, [pc, #268]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80048d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d6:	4a42      	ldr	r2, [pc, #264]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80048d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048dc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80048de:	e007      	b.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80048e0:	2301      	movs	r3, #1
 80048e2:	75fb      	strb	r3, [r7, #23]
      break;
 80048e4:	e004      	b.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80048e6:	bf00      	nop
 80048e8:	e002      	b.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80048ea:	bf00      	nop
 80048ec:	e000      	b.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80048ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048f0:	7dfb      	ldrb	r3, [r7, #23]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d109      	bne.n	800490a <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80048f6:	4b3a      	ldr	r3, [pc, #232]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80048f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048fa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004902:	4937      	ldr	r1, [pc, #220]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004904:	4313      	orrs	r3, r2
 8004906:	654b      	str	r3, [r1, #84]	; 0x54
 8004908:	e001      	b.n	800490e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800490a:	7dfb      	ldrb	r3, [r7, #23]
 800490c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004916:	2b00      	cmp	r3, #0
 8004918:	d008      	beq.n	800492c <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800491a:	4b31      	ldr	r3, [pc, #196]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800491c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800491e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004926:	492e      	ldr	r1, [pc, #184]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004928:	4313      	orrs	r3, r2
 800492a:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004934:	2b00      	cmp	r3, #0
 8004936:	d009      	beq.n	800494c <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004938:	4b29      	ldr	r3, [pc, #164]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800493a:	691b      	ldr	r3, [r3, #16]
 800493c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004946:	4926      	ldr	r1, [pc, #152]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004948:	4313      	orrs	r3, r2
 800494a:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004954:	2b00      	cmp	r3, #0
 8004956:	d008      	beq.n	800496a <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004958:	4b21      	ldr	r3, [pc, #132]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800495a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800495c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004964:	491e      	ldr	r1, [pc, #120]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004966:	4313      	orrs	r3, r2
 8004968:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004972:	2b00      	cmp	r3, #0
 8004974:	d00d      	beq.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004976:	4b1a      	ldr	r3, [pc, #104]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004978:	691b      	ldr	r3, [r3, #16]
 800497a:	4a19      	ldr	r2, [pc, #100]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800497c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004980:	6113      	str	r3, [r2, #16]
 8004982:	4b17      	ldr	r3, [pc, #92]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004984:	691a      	ldr	r2, [r3, #16]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800498c:	4914      	ldr	r1, [pc, #80]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800498e:	4313      	orrs	r3, r2
 8004990:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	2b00      	cmp	r3, #0
 8004998:	da08      	bge.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800499a:	4b11      	ldr	r3, [pc, #68]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800499c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800499e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049a6:	490e      	ldr	r1, [pc, #56]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80049a8:	4313      	orrs	r3, r2
 80049aa:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d009      	beq.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80049b8:	4b09      	ldr	r3, [pc, #36]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80049ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049bc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049c6:	4906      	ldr	r1, [pc, #24]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80049c8:	4313      	orrs	r3, r2
 80049ca:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80049cc:	7dbb      	ldrb	r3, [r7, #22]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d101      	bne.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 80049d2:	2300      	movs	r3, #0
 80049d4:	e000      	b.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
}
 80049d8:	4618      	mov	r0, r3
 80049da:	3718      	adds	r7, #24
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}
 80049e0:	58024400 	.word	0x58024400

080049e4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80049e8:	f7ff f860 	bl	8003aac <HAL_RCC_GetHCLKFreq>
 80049ec:	4602      	mov	r2, r0
 80049ee:	4b06      	ldr	r3, [pc, #24]	; (8004a08 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80049f0:	6a1b      	ldr	r3, [r3, #32]
 80049f2:	091b      	lsrs	r3, r3, #4
 80049f4:	f003 0307 	and.w	r3, r3, #7
 80049f8:	4904      	ldr	r1, [pc, #16]	; (8004a0c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80049fa:	5ccb      	ldrb	r3, [r1, r3]
 80049fc:	f003 031f 	and.w	r3, r3, #31
 8004a00:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	bd80      	pop	{r7, pc}
 8004a08:	58024400 	.word	0x58024400
 8004a0c:	08006340 	.word	0x08006340

08004a10 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b089      	sub	sp, #36	; 0x24
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004a18:	4ba1      	ldr	r3, [pc, #644]	; (8004ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a1c:	f003 0303 	and.w	r3, r3, #3
 8004a20:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8004a22:	4b9f      	ldr	r3, [pc, #636]	; (8004ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a26:	0b1b      	lsrs	r3, r3, #12
 8004a28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a2c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004a2e:	4b9c      	ldr	r3, [pc, #624]	; (8004ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a32:	091b      	lsrs	r3, r3, #4
 8004a34:	f003 0301 	and.w	r3, r3, #1
 8004a38:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004a3a:	4b99      	ldr	r3, [pc, #612]	; (8004ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a3e:	08db      	lsrs	r3, r3, #3
 8004a40:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004a44:	693a      	ldr	r2, [r7, #16]
 8004a46:	fb02 f303 	mul.w	r3, r2, r3
 8004a4a:	ee07 3a90 	vmov	s15, r3
 8004a4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a52:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	f000 8111 	beq.w	8004c80 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004a5e:	69bb      	ldr	r3, [r7, #24]
 8004a60:	2b02      	cmp	r3, #2
 8004a62:	f000 8083 	beq.w	8004b6c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004a66:	69bb      	ldr	r3, [r7, #24]
 8004a68:	2b02      	cmp	r3, #2
 8004a6a:	f200 80a1 	bhi.w	8004bb0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004a6e:	69bb      	ldr	r3, [r7, #24]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d003      	beq.n	8004a7c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004a74:	69bb      	ldr	r3, [r7, #24]
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	d056      	beq.n	8004b28 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004a7a:	e099      	b.n	8004bb0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a7c:	4b88      	ldr	r3, [pc, #544]	; (8004ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f003 0320 	and.w	r3, r3, #32
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d02d      	beq.n	8004ae4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004a88:	4b85      	ldr	r3, [pc, #532]	; (8004ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	08db      	lsrs	r3, r3, #3
 8004a8e:	f003 0303 	and.w	r3, r3, #3
 8004a92:	4a84      	ldr	r2, [pc, #528]	; (8004ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004a94:	fa22 f303 	lsr.w	r3, r2, r3
 8004a98:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	ee07 3a90 	vmov	s15, r3
 8004aa0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	ee07 3a90 	vmov	s15, r3
 8004aaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004aae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ab2:	4b7b      	ldr	r3, [pc, #492]	; (8004ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004aba:	ee07 3a90 	vmov	s15, r3
 8004abe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ac2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ac6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004ca8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004aca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ace:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ad2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ad6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ada:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ade:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004ae2:	e087      	b.n	8004bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	ee07 3a90 	vmov	s15, r3
 8004aea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004aee:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004cac <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004af2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004af6:	4b6a      	ldr	r3, [pc, #424]	; (8004ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004afa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004afe:	ee07 3a90 	vmov	s15, r3
 8004b02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b06:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b0a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004ca8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004b0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b22:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004b26:	e065      	b.n	8004bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	ee07 3a90 	vmov	s15, r3
 8004b2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b32:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004cb0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004b36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b3a:	4b59      	ldr	r3, [pc, #356]	; (8004ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b42:	ee07 3a90 	vmov	s15, r3
 8004b46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b4e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004ca8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004b52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b66:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004b6a:	e043      	b.n	8004bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	ee07 3a90 	vmov	s15, r3
 8004b72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b76:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004cb4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004b7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b7e:	4b48      	ldr	r3, [pc, #288]	; (8004ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b86:	ee07 3a90 	vmov	s15, r3
 8004b8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b92:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004ca8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004b96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ba2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ba6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004baa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004bae:	e021      	b.n	8004bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	ee07 3a90 	vmov	s15, r3
 8004bb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bba:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004cb0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004bbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bc2:	4b37      	ldr	r3, [pc, #220]	; (8004ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bca:	ee07 3a90 	vmov	s15, r3
 8004bce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bd2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004bd6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004ca8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004bda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004be2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004be6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004bf2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004bf4:	4b2a      	ldr	r3, [pc, #168]	; (8004ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bf8:	0a5b      	lsrs	r3, r3, #9
 8004bfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bfe:	ee07 3a90 	vmov	s15, r3
 8004c02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c06:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004c0a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c0e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c1a:	ee17 2a90 	vmov	r2, s15
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8004c22:	4b1f      	ldr	r3, [pc, #124]	; (8004ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c26:	0c1b      	lsrs	r3, r3, #16
 8004c28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c2c:	ee07 3a90 	vmov	s15, r3
 8004c30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c34:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004c38:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c3c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c48:	ee17 2a90 	vmov	r2, s15
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004c50:	4b13      	ldr	r3, [pc, #76]	; (8004ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c54:	0e1b      	lsrs	r3, r3, #24
 8004c56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c5a:	ee07 3a90 	vmov	s15, r3
 8004c5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c62:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004c66:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c6a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c76:	ee17 2a90 	vmov	r2, s15
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004c7e:	e008      	b.n	8004c92 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2200      	movs	r2, #0
 8004c84:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	609a      	str	r2, [r3, #8]
}
 8004c92:	bf00      	nop
 8004c94:	3724      	adds	r7, #36	; 0x24
 8004c96:	46bd      	mov	sp, r7
 8004c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9c:	4770      	bx	lr
 8004c9e:	bf00      	nop
 8004ca0:	58024400 	.word	0x58024400
 8004ca4:	03d09000 	.word	0x03d09000
 8004ca8:	46000000 	.word	0x46000000
 8004cac:	4c742400 	.word	0x4c742400
 8004cb0:	4a742400 	.word	0x4a742400
 8004cb4:	4af42400 	.word	0x4af42400

08004cb8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b089      	sub	sp, #36	; 0x24
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004cc0:	4ba1      	ldr	r3, [pc, #644]	; (8004f48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cc4:	f003 0303 	and.w	r3, r3, #3
 8004cc8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004cca:	4b9f      	ldr	r3, [pc, #636]	; (8004f48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cce:	0d1b      	lsrs	r3, r3, #20
 8004cd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004cd4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004cd6:	4b9c      	ldr	r3, [pc, #624]	; (8004f48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cda:	0a1b      	lsrs	r3, r3, #8
 8004cdc:	f003 0301 	and.w	r3, r3, #1
 8004ce0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004ce2:	4b99      	ldr	r3, [pc, #612]	; (8004f48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ce6:	08db      	lsrs	r3, r3, #3
 8004ce8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004cec:	693a      	ldr	r2, [r7, #16]
 8004cee:	fb02 f303 	mul.w	r3, r2, r3
 8004cf2:	ee07 3a90 	vmov	s15, r3
 8004cf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cfa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	f000 8111 	beq.w	8004f28 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004d06:	69bb      	ldr	r3, [r7, #24]
 8004d08:	2b02      	cmp	r3, #2
 8004d0a:	f000 8083 	beq.w	8004e14 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004d0e:	69bb      	ldr	r3, [r7, #24]
 8004d10:	2b02      	cmp	r3, #2
 8004d12:	f200 80a1 	bhi.w	8004e58 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004d16:	69bb      	ldr	r3, [r7, #24]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d003      	beq.n	8004d24 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004d1c:	69bb      	ldr	r3, [r7, #24]
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d056      	beq.n	8004dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004d22:	e099      	b.n	8004e58 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d24:	4b88      	ldr	r3, [pc, #544]	; (8004f48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f003 0320 	and.w	r3, r3, #32
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d02d      	beq.n	8004d8c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004d30:	4b85      	ldr	r3, [pc, #532]	; (8004f48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	08db      	lsrs	r3, r3, #3
 8004d36:	f003 0303 	and.w	r3, r3, #3
 8004d3a:	4a84      	ldr	r2, [pc, #528]	; (8004f4c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004d3c:	fa22 f303 	lsr.w	r3, r2, r3
 8004d40:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	ee07 3a90 	vmov	s15, r3
 8004d48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	ee07 3a90 	vmov	s15, r3
 8004d52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d5a:	4b7b      	ldr	r3, [pc, #492]	; (8004f48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d62:	ee07 3a90 	vmov	s15, r3
 8004d66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d6e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004f50 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004d72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d86:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004d8a:	e087      	b.n	8004e9c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	ee07 3a90 	vmov	s15, r3
 8004d92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d96:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004f54 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004d9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d9e:	4b6a      	ldr	r3, [pc, #424]	; (8004f48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004da6:	ee07 3a90 	vmov	s15, r3
 8004daa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dae:	ed97 6a03 	vldr	s12, [r7, #12]
 8004db2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004f50 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004db6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004dba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004dbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004dc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004dc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004dce:	e065      	b.n	8004e9c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	ee07 3a90 	vmov	s15, r3
 8004dd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dda:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004f58 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004dde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004de2:	4b59      	ldr	r3, [pc, #356]	; (8004f48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dea:	ee07 3a90 	vmov	s15, r3
 8004dee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004df2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004df6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004f50 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004dfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004dfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e0e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004e12:	e043      	b.n	8004e9c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	ee07 3a90 	vmov	s15, r3
 8004e1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e1e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004f5c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004e22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e26:	4b48      	ldr	r3, [pc, #288]	; (8004f48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e2e:	ee07 3a90 	vmov	s15, r3
 8004e32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e36:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e3a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004f50 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004e3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e52:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004e56:	e021      	b.n	8004e9c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	ee07 3a90 	vmov	s15, r3
 8004e5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e62:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004f58 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004e66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e6a:	4b37      	ldr	r3, [pc, #220]	; (8004f48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e72:	ee07 3a90 	vmov	s15, r3
 8004e76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e7e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004f50 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004e82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e96:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004e9a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004e9c:	4b2a      	ldr	r3, [pc, #168]	; (8004f48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea0:	0a5b      	lsrs	r3, r3, #9
 8004ea2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ea6:	ee07 3a90 	vmov	s15, r3
 8004eaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004eae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004eb2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004eb6:	edd7 6a07 	vldr	s13, [r7, #28]
 8004eba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ebe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ec2:	ee17 2a90 	vmov	r2, s15
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8004eca:	4b1f      	ldr	r3, [pc, #124]	; (8004f48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ece:	0c1b      	lsrs	r3, r3, #16
 8004ed0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ed4:	ee07 3a90 	vmov	s15, r3
 8004ed8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004edc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004ee0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004ee4:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ee8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004eec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ef0:	ee17 2a90 	vmov	r2, s15
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004ef8:	4b13      	ldr	r3, [pc, #76]	; (8004f48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004efc:	0e1b      	lsrs	r3, r3, #24
 8004efe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f02:	ee07 3a90 	vmov	s15, r3
 8004f06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f0a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004f0e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f12:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f1e:	ee17 2a90 	vmov	r2, s15
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004f26:	e008      	b.n	8004f3a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2200      	movs	r2, #0
 8004f32:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2200      	movs	r2, #0
 8004f38:	609a      	str	r2, [r3, #8]
}
 8004f3a:	bf00      	nop
 8004f3c:	3724      	adds	r7, #36	; 0x24
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f44:	4770      	bx	lr
 8004f46:	bf00      	nop
 8004f48:	58024400 	.word	0x58024400
 8004f4c:	03d09000 	.word	0x03d09000
 8004f50:	46000000 	.word	0x46000000
 8004f54:	4c742400 	.word	0x4c742400
 8004f58:	4a742400 	.word	0x4a742400
 8004f5c:	4af42400 	.word	0x4af42400

08004f60 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b084      	sub	sp, #16
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
 8004f68:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004f6e:	4b53      	ldr	r3, [pc, #332]	; (80050bc <RCCEx_PLL2_Config+0x15c>)
 8004f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f72:	f003 0303 	and.w	r3, r3, #3
 8004f76:	2b03      	cmp	r3, #3
 8004f78:	d101      	bne.n	8004f7e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e099      	b.n	80050b2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004f7e:	4b4f      	ldr	r3, [pc, #316]	; (80050bc <RCCEx_PLL2_Config+0x15c>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a4e      	ldr	r2, [pc, #312]	; (80050bc <RCCEx_PLL2_Config+0x15c>)
 8004f84:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004f88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f8a:	f7fc f8e7 	bl	800115c <HAL_GetTick>
 8004f8e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004f90:	e008      	b.n	8004fa4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004f92:	f7fc f8e3 	bl	800115c <HAL_GetTick>
 8004f96:	4602      	mov	r2, r0
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	1ad3      	subs	r3, r2, r3
 8004f9c:	2b02      	cmp	r3, #2
 8004f9e:	d901      	bls.n	8004fa4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004fa0:	2303      	movs	r3, #3
 8004fa2:	e086      	b.n	80050b2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004fa4:	4b45      	ldr	r3, [pc, #276]	; (80050bc <RCCEx_PLL2_Config+0x15c>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d1f0      	bne.n	8004f92 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004fb0:	4b42      	ldr	r3, [pc, #264]	; (80050bc <RCCEx_PLL2_Config+0x15c>)
 8004fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fb4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	031b      	lsls	r3, r3, #12
 8004fbe:	493f      	ldr	r1, [pc, #252]	; (80050bc <RCCEx_PLL2_Config+0x15c>)
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	628b      	str	r3, [r1, #40]	; 0x28
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	3b01      	subs	r3, #1
 8004fca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	3b01      	subs	r3, #1
 8004fd4:	025b      	lsls	r3, r3, #9
 8004fd6:	b29b      	uxth	r3, r3
 8004fd8:	431a      	orrs	r2, r3
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	68db      	ldr	r3, [r3, #12]
 8004fde:	3b01      	subs	r3, #1
 8004fe0:	041b      	lsls	r3, r3, #16
 8004fe2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004fe6:	431a      	orrs	r2, r3
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	691b      	ldr	r3, [r3, #16]
 8004fec:	3b01      	subs	r3, #1
 8004fee:	061b      	lsls	r3, r3, #24
 8004ff0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004ff4:	4931      	ldr	r1, [pc, #196]	; (80050bc <RCCEx_PLL2_Config+0x15c>)
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004ffa:	4b30      	ldr	r3, [pc, #192]	; (80050bc <RCCEx_PLL2_Config+0x15c>)
 8004ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ffe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	695b      	ldr	r3, [r3, #20]
 8005006:	492d      	ldr	r1, [pc, #180]	; (80050bc <RCCEx_PLL2_Config+0x15c>)
 8005008:	4313      	orrs	r3, r2
 800500a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800500c:	4b2b      	ldr	r3, [pc, #172]	; (80050bc <RCCEx_PLL2_Config+0x15c>)
 800500e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005010:	f023 0220 	bic.w	r2, r3, #32
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	699b      	ldr	r3, [r3, #24]
 8005018:	4928      	ldr	r1, [pc, #160]	; (80050bc <RCCEx_PLL2_Config+0x15c>)
 800501a:	4313      	orrs	r3, r2
 800501c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800501e:	4b27      	ldr	r3, [pc, #156]	; (80050bc <RCCEx_PLL2_Config+0x15c>)
 8005020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005022:	4a26      	ldr	r2, [pc, #152]	; (80050bc <RCCEx_PLL2_Config+0x15c>)
 8005024:	f023 0310 	bic.w	r3, r3, #16
 8005028:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800502a:	4b24      	ldr	r3, [pc, #144]	; (80050bc <RCCEx_PLL2_Config+0x15c>)
 800502c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800502e:	4b24      	ldr	r3, [pc, #144]	; (80050c0 <RCCEx_PLL2_Config+0x160>)
 8005030:	4013      	ands	r3, r2
 8005032:	687a      	ldr	r2, [r7, #4]
 8005034:	69d2      	ldr	r2, [r2, #28]
 8005036:	00d2      	lsls	r2, r2, #3
 8005038:	4920      	ldr	r1, [pc, #128]	; (80050bc <RCCEx_PLL2_Config+0x15c>)
 800503a:	4313      	orrs	r3, r2
 800503c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800503e:	4b1f      	ldr	r3, [pc, #124]	; (80050bc <RCCEx_PLL2_Config+0x15c>)
 8005040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005042:	4a1e      	ldr	r2, [pc, #120]	; (80050bc <RCCEx_PLL2_Config+0x15c>)
 8005044:	f043 0310 	orr.w	r3, r3, #16
 8005048:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d106      	bne.n	800505e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005050:	4b1a      	ldr	r3, [pc, #104]	; (80050bc <RCCEx_PLL2_Config+0x15c>)
 8005052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005054:	4a19      	ldr	r2, [pc, #100]	; (80050bc <RCCEx_PLL2_Config+0x15c>)
 8005056:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800505a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800505c:	e00f      	b.n	800507e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	2b01      	cmp	r3, #1
 8005062:	d106      	bne.n	8005072 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005064:	4b15      	ldr	r3, [pc, #84]	; (80050bc <RCCEx_PLL2_Config+0x15c>)
 8005066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005068:	4a14      	ldr	r2, [pc, #80]	; (80050bc <RCCEx_PLL2_Config+0x15c>)
 800506a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800506e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005070:	e005      	b.n	800507e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005072:	4b12      	ldr	r3, [pc, #72]	; (80050bc <RCCEx_PLL2_Config+0x15c>)
 8005074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005076:	4a11      	ldr	r2, [pc, #68]	; (80050bc <RCCEx_PLL2_Config+0x15c>)
 8005078:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800507c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800507e:	4b0f      	ldr	r3, [pc, #60]	; (80050bc <RCCEx_PLL2_Config+0x15c>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a0e      	ldr	r2, [pc, #56]	; (80050bc <RCCEx_PLL2_Config+0x15c>)
 8005084:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005088:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800508a:	f7fc f867 	bl	800115c <HAL_GetTick>
 800508e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005090:	e008      	b.n	80050a4 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005092:	f7fc f863 	bl	800115c <HAL_GetTick>
 8005096:	4602      	mov	r2, r0
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	1ad3      	subs	r3, r2, r3
 800509c:	2b02      	cmp	r3, #2
 800509e:	d901      	bls.n	80050a4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80050a0:	2303      	movs	r3, #3
 80050a2:	e006      	b.n	80050b2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80050a4:	4b05      	ldr	r3, [pc, #20]	; (80050bc <RCCEx_PLL2_Config+0x15c>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d0f0      	beq.n	8005092 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80050b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3710      	adds	r7, #16
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}
 80050ba:	bf00      	nop
 80050bc:	58024400 	.word	0x58024400
 80050c0:	ffff0007 	.word	0xffff0007

080050c4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b084      	sub	sp, #16
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
 80050cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80050ce:	2300      	movs	r3, #0
 80050d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80050d2:	4b53      	ldr	r3, [pc, #332]	; (8005220 <RCCEx_PLL3_Config+0x15c>)
 80050d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050d6:	f003 0303 	and.w	r3, r3, #3
 80050da:	2b03      	cmp	r3, #3
 80050dc:	d101      	bne.n	80050e2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	e099      	b.n	8005216 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80050e2:	4b4f      	ldr	r3, [pc, #316]	; (8005220 <RCCEx_PLL3_Config+0x15c>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a4e      	ldr	r2, [pc, #312]	; (8005220 <RCCEx_PLL3_Config+0x15c>)
 80050e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050ee:	f7fc f835 	bl	800115c <HAL_GetTick>
 80050f2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80050f4:	e008      	b.n	8005108 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80050f6:	f7fc f831 	bl	800115c <HAL_GetTick>
 80050fa:	4602      	mov	r2, r0
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	1ad3      	subs	r3, r2, r3
 8005100:	2b02      	cmp	r3, #2
 8005102:	d901      	bls.n	8005108 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005104:	2303      	movs	r3, #3
 8005106:	e086      	b.n	8005216 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005108:	4b45      	ldr	r3, [pc, #276]	; (8005220 <RCCEx_PLL3_Config+0x15c>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005110:	2b00      	cmp	r3, #0
 8005112:	d1f0      	bne.n	80050f6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005114:	4b42      	ldr	r3, [pc, #264]	; (8005220 <RCCEx_PLL3_Config+0x15c>)
 8005116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005118:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	051b      	lsls	r3, r3, #20
 8005122:	493f      	ldr	r1, [pc, #252]	; (8005220 <RCCEx_PLL3_Config+0x15c>)
 8005124:	4313      	orrs	r3, r2
 8005126:	628b      	str	r3, [r1, #40]	; 0x28
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	3b01      	subs	r3, #1
 800512e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	3b01      	subs	r3, #1
 8005138:	025b      	lsls	r3, r3, #9
 800513a:	b29b      	uxth	r3, r3
 800513c:	431a      	orrs	r2, r3
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	68db      	ldr	r3, [r3, #12]
 8005142:	3b01      	subs	r3, #1
 8005144:	041b      	lsls	r3, r3, #16
 8005146:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800514a:	431a      	orrs	r2, r3
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	691b      	ldr	r3, [r3, #16]
 8005150:	3b01      	subs	r3, #1
 8005152:	061b      	lsls	r3, r3, #24
 8005154:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005158:	4931      	ldr	r1, [pc, #196]	; (8005220 <RCCEx_PLL3_Config+0x15c>)
 800515a:	4313      	orrs	r3, r2
 800515c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800515e:	4b30      	ldr	r3, [pc, #192]	; (8005220 <RCCEx_PLL3_Config+0x15c>)
 8005160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005162:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	695b      	ldr	r3, [r3, #20]
 800516a:	492d      	ldr	r1, [pc, #180]	; (8005220 <RCCEx_PLL3_Config+0x15c>)
 800516c:	4313      	orrs	r3, r2
 800516e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005170:	4b2b      	ldr	r3, [pc, #172]	; (8005220 <RCCEx_PLL3_Config+0x15c>)
 8005172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005174:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	699b      	ldr	r3, [r3, #24]
 800517c:	4928      	ldr	r1, [pc, #160]	; (8005220 <RCCEx_PLL3_Config+0x15c>)
 800517e:	4313      	orrs	r3, r2
 8005180:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005182:	4b27      	ldr	r3, [pc, #156]	; (8005220 <RCCEx_PLL3_Config+0x15c>)
 8005184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005186:	4a26      	ldr	r2, [pc, #152]	; (8005220 <RCCEx_PLL3_Config+0x15c>)
 8005188:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800518c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800518e:	4b24      	ldr	r3, [pc, #144]	; (8005220 <RCCEx_PLL3_Config+0x15c>)
 8005190:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005192:	4b24      	ldr	r3, [pc, #144]	; (8005224 <RCCEx_PLL3_Config+0x160>)
 8005194:	4013      	ands	r3, r2
 8005196:	687a      	ldr	r2, [r7, #4]
 8005198:	69d2      	ldr	r2, [r2, #28]
 800519a:	00d2      	lsls	r2, r2, #3
 800519c:	4920      	ldr	r1, [pc, #128]	; (8005220 <RCCEx_PLL3_Config+0x15c>)
 800519e:	4313      	orrs	r3, r2
 80051a0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80051a2:	4b1f      	ldr	r3, [pc, #124]	; (8005220 <RCCEx_PLL3_Config+0x15c>)
 80051a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051a6:	4a1e      	ldr	r2, [pc, #120]	; (8005220 <RCCEx_PLL3_Config+0x15c>)
 80051a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051ac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d106      	bne.n	80051c2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80051b4:	4b1a      	ldr	r3, [pc, #104]	; (8005220 <RCCEx_PLL3_Config+0x15c>)
 80051b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051b8:	4a19      	ldr	r2, [pc, #100]	; (8005220 <RCCEx_PLL3_Config+0x15c>)
 80051ba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80051be:	62d3      	str	r3, [r2, #44]	; 0x2c
 80051c0:	e00f      	b.n	80051e2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d106      	bne.n	80051d6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80051c8:	4b15      	ldr	r3, [pc, #84]	; (8005220 <RCCEx_PLL3_Config+0x15c>)
 80051ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051cc:	4a14      	ldr	r2, [pc, #80]	; (8005220 <RCCEx_PLL3_Config+0x15c>)
 80051ce:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80051d2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80051d4:	e005      	b.n	80051e2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80051d6:	4b12      	ldr	r3, [pc, #72]	; (8005220 <RCCEx_PLL3_Config+0x15c>)
 80051d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051da:	4a11      	ldr	r2, [pc, #68]	; (8005220 <RCCEx_PLL3_Config+0x15c>)
 80051dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80051e0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80051e2:	4b0f      	ldr	r3, [pc, #60]	; (8005220 <RCCEx_PLL3_Config+0x15c>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a0e      	ldr	r2, [pc, #56]	; (8005220 <RCCEx_PLL3_Config+0x15c>)
 80051e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051ee:	f7fb ffb5 	bl	800115c <HAL_GetTick>
 80051f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80051f4:	e008      	b.n	8005208 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80051f6:	f7fb ffb1 	bl	800115c <HAL_GetTick>
 80051fa:	4602      	mov	r2, r0
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	1ad3      	subs	r3, r2, r3
 8005200:	2b02      	cmp	r3, #2
 8005202:	d901      	bls.n	8005208 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005204:	2303      	movs	r3, #3
 8005206:	e006      	b.n	8005216 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005208:	4b05      	ldr	r3, [pc, #20]	; (8005220 <RCCEx_PLL3_Config+0x15c>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005210:	2b00      	cmp	r3, #0
 8005212:	d0f0      	beq.n	80051f6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005214:	7bfb      	ldrb	r3, [r7, #15]
}
 8005216:	4618      	mov	r0, r3
 8005218:	3710      	adds	r7, #16
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}
 800521e:	bf00      	nop
 8005220:	58024400 	.word	0x58024400
 8005224:	ffff0007 	.word	0xffff0007

08005228 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b082      	sub	sp, #8
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d101      	bne.n	800523a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005236:	2301      	movs	r3, #1
 8005238:	e042      	b.n	80052c0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005240:	2b00      	cmp	r3, #0
 8005242:	d106      	bne.n	8005252 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2200      	movs	r2, #0
 8005248:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f7fb fdad 	bl	8000dac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2224      	movs	r2, #36	; 0x24
 8005256:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	681a      	ldr	r2, [r3, #0]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f022 0201 	bic.w	r2, r2, #1
 8005268:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f000 f82c 	bl	80052c8 <UART_SetConfig>
 8005270:	4603      	mov	r3, r0
 8005272:	2b01      	cmp	r3, #1
 8005274:	d101      	bne.n	800527a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	e022      	b.n	80052c0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800527e:	2b00      	cmp	r3, #0
 8005280:	d002      	beq.n	8005288 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f000 fd80 	bl	8005d88 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	685a      	ldr	r2, [r3, #4]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005296:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	689a      	ldr	r2, [r3, #8]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80052a6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	681a      	ldr	r2, [r3, #0]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f042 0201 	orr.w	r2, r2, #1
 80052b6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	f000 fe07 	bl	8005ecc <UART_CheckIdleState>
 80052be:	4603      	mov	r3, r0
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	3708      	adds	r7, #8
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}

080052c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052c8:	b5b0      	push	{r4, r5, r7, lr}
 80052ca:	b08e      	sub	sp, #56	; 0x38
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80052d0:	2300      	movs	r3, #0
 80052d2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	689a      	ldr	r2, [r3, #8]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	691b      	ldr	r3, [r3, #16]
 80052de:	431a      	orrs	r2, r3
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	695b      	ldr	r3, [r3, #20]
 80052e4:	431a      	orrs	r2, r3
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	69db      	ldr	r3, [r3, #28]
 80052ea:	4313      	orrs	r3, r2
 80052ec:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	4bbf      	ldr	r3, [pc, #764]	; (80055f4 <UART_SetConfig+0x32c>)
 80052f6:	4013      	ands	r3, r2
 80052f8:	687a      	ldr	r2, [r7, #4]
 80052fa:	6812      	ldr	r2, [r2, #0]
 80052fc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80052fe:	430b      	orrs	r3, r1
 8005300:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	68da      	ldr	r2, [r3, #12]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	430a      	orrs	r2, r1
 8005316:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	699b      	ldr	r3, [r3, #24]
 800531c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4ab5      	ldr	r2, [pc, #724]	; (80055f8 <UART_SetConfig+0x330>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d004      	beq.n	8005332 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6a1b      	ldr	r3, [r3, #32]
 800532c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800532e:	4313      	orrs	r3, r2
 8005330:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	689a      	ldr	r2, [r3, #8]
 8005338:	4bb0      	ldr	r3, [pc, #704]	; (80055fc <UART_SetConfig+0x334>)
 800533a:	4013      	ands	r3, r2
 800533c:	687a      	ldr	r2, [r7, #4]
 800533e:	6812      	ldr	r2, [r2, #0]
 8005340:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005342:	430b      	orrs	r3, r1
 8005344:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800534c:	f023 010f 	bic.w	r1, r3, #15
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	430a      	orrs	r2, r1
 800535a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4aa7      	ldr	r2, [pc, #668]	; (8005600 <UART_SetConfig+0x338>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d176      	bne.n	8005454 <UART_SetConfig+0x18c>
 8005366:	4ba7      	ldr	r3, [pc, #668]	; (8005604 <UART_SetConfig+0x33c>)
 8005368:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800536a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800536e:	2b28      	cmp	r3, #40	; 0x28
 8005370:	d86c      	bhi.n	800544c <UART_SetConfig+0x184>
 8005372:	a201      	add	r2, pc, #4	; (adr r2, 8005378 <UART_SetConfig+0xb0>)
 8005374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005378:	0800541d 	.word	0x0800541d
 800537c:	0800544d 	.word	0x0800544d
 8005380:	0800544d 	.word	0x0800544d
 8005384:	0800544d 	.word	0x0800544d
 8005388:	0800544d 	.word	0x0800544d
 800538c:	0800544d 	.word	0x0800544d
 8005390:	0800544d 	.word	0x0800544d
 8005394:	0800544d 	.word	0x0800544d
 8005398:	08005425 	.word	0x08005425
 800539c:	0800544d 	.word	0x0800544d
 80053a0:	0800544d 	.word	0x0800544d
 80053a4:	0800544d 	.word	0x0800544d
 80053a8:	0800544d 	.word	0x0800544d
 80053ac:	0800544d 	.word	0x0800544d
 80053b0:	0800544d 	.word	0x0800544d
 80053b4:	0800544d 	.word	0x0800544d
 80053b8:	0800542d 	.word	0x0800542d
 80053bc:	0800544d 	.word	0x0800544d
 80053c0:	0800544d 	.word	0x0800544d
 80053c4:	0800544d 	.word	0x0800544d
 80053c8:	0800544d 	.word	0x0800544d
 80053cc:	0800544d 	.word	0x0800544d
 80053d0:	0800544d 	.word	0x0800544d
 80053d4:	0800544d 	.word	0x0800544d
 80053d8:	08005435 	.word	0x08005435
 80053dc:	0800544d 	.word	0x0800544d
 80053e0:	0800544d 	.word	0x0800544d
 80053e4:	0800544d 	.word	0x0800544d
 80053e8:	0800544d 	.word	0x0800544d
 80053ec:	0800544d 	.word	0x0800544d
 80053f0:	0800544d 	.word	0x0800544d
 80053f4:	0800544d 	.word	0x0800544d
 80053f8:	0800543d 	.word	0x0800543d
 80053fc:	0800544d 	.word	0x0800544d
 8005400:	0800544d 	.word	0x0800544d
 8005404:	0800544d 	.word	0x0800544d
 8005408:	0800544d 	.word	0x0800544d
 800540c:	0800544d 	.word	0x0800544d
 8005410:	0800544d 	.word	0x0800544d
 8005414:	0800544d 	.word	0x0800544d
 8005418:	08005445 	.word	0x08005445
 800541c:	2301      	movs	r3, #1
 800541e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005422:	e222      	b.n	800586a <UART_SetConfig+0x5a2>
 8005424:	2304      	movs	r3, #4
 8005426:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800542a:	e21e      	b.n	800586a <UART_SetConfig+0x5a2>
 800542c:	2308      	movs	r3, #8
 800542e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005432:	e21a      	b.n	800586a <UART_SetConfig+0x5a2>
 8005434:	2310      	movs	r3, #16
 8005436:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800543a:	e216      	b.n	800586a <UART_SetConfig+0x5a2>
 800543c:	2320      	movs	r3, #32
 800543e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005442:	e212      	b.n	800586a <UART_SetConfig+0x5a2>
 8005444:	2340      	movs	r3, #64	; 0x40
 8005446:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800544a:	e20e      	b.n	800586a <UART_SetConfig+0x5a2>
 800544c:	2380      	movs	r3, #128	; 0x80
 800544e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005452:	e20a      	b.n	800586a <UART_SetConfig+0x5a2>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a6b      	ldr	r2, [pc, #428]	; (8005608 <UART_SetConfig+0x340>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d130      	bne.n	80054c0 <UART_SetConfig+0x1f8>
 800545e:	4b69      	ldr	r3, [pc, #420]	; (8005604 <UART_SetConfig+0x33c>)
 8005460:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005462:	f003 0307 	and.w	r3, r3, #7
 8005466:	2b05      	cmp	r3, #5
 8005468:	d826      	bhi.n	80054b8 <UART_SetConfig+0x1f0>
 800546a:	a201      	add	r2, pc, #4	; (adr r2, 8005470 <UART_SetConfig+0x1a8>)
 800546c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005470:	08005489 	.word	0x08005489
 8005474:	08005491 	.word	0x08005491
 8005478:	08005499 	.word	0x08005499
 800547c:	080054a1 	.word	0x080054a1
 8005480:	080054a9 	.word	0x080054a9
 8005484:	080054b1 	.word	0x080054b1
 8005488:	2300      	movs	r3, #0
 800548a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800548e:	e1ec      	b.n	800586a <UART_SetConfig+0x5a2>
 8005490:	2304      	movs	r3, #4
 8005492:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005496:	e1e8      	b.n	800586a <UART_SetConfig+0x5a2>
 8005498:	2308      	movs	r3, #8
 800549a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800549e:	e1e4      	b.n	800586a <UART_SetConfig+0x5a2>
 80054a0:	2310      	movs	r3, #16
 80054a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80054a6:	e1e0      	b.n	800586a <UART_SetConfig+0x5a2>
 80054a8:	2320      	movs	r3, #32
 80054aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80054ae:	e1dc      	b.n	800586a <UART_SetConfig+0x5a2>
 80054b0:	2340      	movs	r3, #64	; 0x40
 80054b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80054b6:	e1d8      	b.n	800586a <UART_SetConfig+0x5a2>
 80054b8:	2380      	movs	r3, #128	; 0x80
 80054ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80054be:	e1d4      	b.n	800586a <UART_SetConfig+0x5a2>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a51      	ldr	r2, [pc, #324]	; (800560c <UART_SetConfig+0x344>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d130      	bne.n	800552c <UART_SetConfig+0x264>
 80054ca:	4b4e      	ldr	r3, [pc, #312]	; (8005604 <UART_SetConfig+0x33c>)
 80054cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054ce:	f003 0307 	and.w	r3, r3, #7
 80054d2:	2b05      	cmp	r3, #5
 80054d4:	d826      	bhi.n	8005524 <UART_SetConfig+0x25c>
 80054d6:	a201      	add	r2, pc, #4	; (adr r2, 80054dc <UART_SetConfig+0x214>)
 80054d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054dc:	080054f5 	.word	0x080054f5
 80054e0:	080054fd 	.word	0x080054fd
 80054e4:	08005505 	.word	0x08005505
 80054e8:	0800550d 	.word	0x0800550d
 80054ec:	08005515 	.word	0x08005515
 80054f0:	0800551d 	.word	0x0800551d
 80054f4:	2300      	movs	r3, #0
 80054f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80054fa:	e1b6      	b.n	800586a <UART_SetConfig+0x5a2>
 80054fc:	2304      	movs	r3, #4
 80054fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005502:	e1b2      	b.n	800586a <UART_SetConfig+0x5a2>
 8005504:	2308      	movs	r3, #8
 8005506:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800550a:	e1ae      	b.n	800586a <UART_SetConfig+0x5a2>
 800550c:	2310      	movs	r3, #16
 800550e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005512:	e1aa      	b.n	800586a <UART_SetConfig+0x5a2>
 8005514:	2320      	movs	r3, #32
 8005516:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800551a:	e1a6      	b.n	800586a <UART_SetConfig+0x5a2>
 800551c:	2340      	movs	r3, #64	; 0x40
 800551e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005522:	e1a2      	b.n	800586a <UART_SetConfig+0x5a2>
 8005524:	2380      	movs	r3, #128	; 0x80
 8005526:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800552a:	e19e      	b.n	800586a <UART_SetConfig+0x5a2>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a37      	ldr	r2, [pc, #220]	; (8005610 <UART_SetConfig+0x348>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d130      	bne.n	8005598 <UART_SetConfig+0x2d0>
 8005536:	4b33      	ldr	r3, [pc, #204]	; (8005604 <UART_SetConfig+0x33c>)
 8005538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800553a:	f003 0307 	and.w	r3, r3, #7
 800553e:	2b05      	cmp	r3, #5
 8005540:	d826      	bhi.n	8005590 <UART_SetConfig+0x2c8>
 8005542:	a201      	add	r2, pc, #4	; (adr r2, 8005548 <UART_SetConfig+0x280>)
 8005544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005548:	08005561 	.word	0x08005561
 800554c:	08005569 	.word	0x08005569
 8005550:	08005571 	.word	0x08005571
 8005554:	08005579 	.word	0x08005579
 8005558:	08005581 	.word	0x08005581
 800555c:	08005589 	.word	0x08005589
 8005560:	2300      	movs	r3, #0
 8005562:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005566:	e180      	b.n	800586a <UART_SetConfig+0x5a2>
 8005568:	2304      	movs	r3, #4
 800556a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800556e:	e17c      	b.n	800586a <UART_SetConfig+0x5a2>
 8005570:	2308      	movs	r3, #8
 8005572:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005576:	e178      	b.n	800586a <UART_SetConfig+0x5a2>
 8005578:	2310      	movs	r3, #16
 800557a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800557e:	e174      	b.n	800586a <UART_SetConfig+0x5a2>
 8005580:	2320      	movs	r3, #32
 8005582:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005586:	e170      	b.n	800586a <UART_SetConfig+0x5a2>
 8005588:	2340      	movs	r3, #64	; 0x40
 800558a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800558e:	e16c      	b.n	800586a <UART_SetConfig+0x5a2>
 8005590:	2380      	movs	r3, #128	; 0x80
 8005592:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005596:	e168      	b.n	800586a <UART_SetConfig+0x5a2>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a1d      	ldr	r2, [pc, #116]	; (8005614 <UART_SetConfig+0x34c>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d142      	bne.n	8005628 <UART_SetConfig+0x360>
 80055a2:	4b18      	ldr	r3, [pc, #96]	; (8005604 <UART_SetConfig+0x33c>)
 80055a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055a6:	f003 0307 	and.w	r3, r3, #7
 80055aa:	2b05      	cmp	r3, #5
 80055ac:	d838      	bhi.n	8005620 <UART_SetConfig+0x358>
 80055ae:	a201      	add	r2, pc, #4	; (adr r2, 80055b4 <UART_SetConfig+0x2ec>)
 80055b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055b4:	080055cd 	.word	0x080055cd
 80055b8:	080055d5 	.word	0x080055d5
 80055bc:	080055dd 	.word	0x080055dd
 80055c0:	080055e5 	.word	0x080055e5
 80055c4:	080055ed 	.word	0x080055ed
 80055c8:	08005619 	.word	0x08005619
 80055cc:	2300      	movs	r3, #0
 80055ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055d2:	e14a      	b.n	800586a <UART_SetConfig+0x5a2>
 80055d4:	2304      	movs	r3, #4
 80055d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055da:	e146      	b.n	800586a <UART_SetConfig+0x5a2>
 80055dc:	2308      	movs	r3, #8
 80055de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055e2:	e142      	b.n	800586a <UART_SetConfig+0x5a2>
 80055e4:	2310      	movs	r3, #16
 80055e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055ea:	e13e      	b.n	800586a <UART_SetConfig+0x5a2>
 80055ec:	2320      	movs	r3, #32
 80055ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055f2:	e13a      	b.n	800586a <UART_SetConfig+0x5a2>
 80055f4:	cfff69f3 	.word	0xcfff69f3
 80055f8:	58000c00 	.word	0x58000c00
 80055fc:	11fff4ff 	.word	0x11fff4ff
 8005600:	40011000 	.word	0x40011000
 8005604:	58024400 	.word	0x58024400
 8005608:	40004400 	.word	0x40004400
 800560c:	40004800 	.word	0x40004800
 8005610:	40004c00 	.word	0x40004c00
 8005614:	40005000 	.word	0x40005000
 8005618:	2340      	movs	r3, #64	; 0x40
 800561a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800561e:	e124      	b.n	800586a <UART_SetConfig+0x5a2>
 8005620:	2380      	movs	r3, #128	; 0x80
 8005622:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005626:	e120      	b.n	800586a <UART_SetConfig+0x5a2>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4acc      	ldr	r2, [pc, #816]	; (8005960 <UART_SetConfig+0x698>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d176      	bne.n	8005720 <UART_SetConfig+0x458>
 8005632:	4bcc      	ldr	r3, [pc, #816]	; (8005964 <UART_SetConfig+0x69c>)
 8005634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005636:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800563a:	2b28      	cmp	r3, #40	; 0x28
 800563c:	d86c      	bhi.n	8005718 <UART_SetConfig+0x450>
 800563e:	a201      	add	r2, pc, #4	; (adr r2, 8005644 <UART_SetConfig+0x37c>)
 8005640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005644:	080056e9 	.word	0x080056e9
 8005648:	08005719 	.word	0x08005719
 800564c:	08005719 	.word	0x08005719
 8005650:	08005719 	.word	0x08005719
 8005654:	08005719 	.word	0x08005719
 8005658:	08005719 	.word	0x08005719
 800565c:	08005719 	.word	0x08005719
 8005660:	08005719 	.word	0x08005719
 8005664:	080056f1 	.word	0x080056f1
 8005668:	08005719 	.word	0x08005719
 800566c:	08005719 	.word	0x08005719
 8005670:	08005719 	.word	0x08005719
 8005674:	08005719 	.word	0x08005719
 8005678:	08005719 	.word	0x08005719
 800567c:	08005719 	.word	0x08005719
 8005680:	08005719 	.word	0x08005719
 8005684:	080056f9 	.word	0x080056f9
 8005688:	08005719 	.word	0x08005719
 800568c:	08005719 	.word	0x08005719
 8005690:	08005719 	.word	0x08005719
 8005694:	08005719 	.word	0x08005719
 8005698:	08005719 	.word	0x08005719
 800569c:	08005719 	.word	0x08005719
 80056a0:	08005719 	.word	0x08005719
 80056a4:	08005701 	.word	0x08005701
 80056a8:	08005719 	.word	0x08005719
 80056ac:	08005719 	.word	0x08005719
 80056b0:	08005719 	.word	0x08005719
 80056b4:	08005719 	.word	0x08005719
 80056b8:	08005719 	.word	0x08005719
 80056bc:	08005719 	.word	0x08005719
 80056c0:	08005719 	.word	0x08005719
 80056c4:	08005709 	.word	0x08005709
 80056c8:	08005719 	.word	0x08005719
 80056cc:	08005719 	.word	0x08005719
 80056d0:	08005719 	.word	0x08005719
 80056d4:	08005719 	.word	0x08005719
 80056d8:	08005719 	.word	0x08005719
 80056dc:	08005719 	.word	0x08005719
 80056e0:	08005719 	.word	0x08005719
 80056e4:	08005711 	.word	0x08005711
 80056e8:	2301      	movs	r3, #1
 80056ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056ee:	e0bc      	b.n	800586a <UART_SetConfig+0x5a2>
 80056f0:	2304      	movs	r3, #4
 80056f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056f6:	e0b8      	b.n	800586a <UART_SetConfig+0x5a2>
 80056f8:	2308      	movs	r3, #8
 80056fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056fe:	e0b4      	b.n	800586a <UART_SetConfig+0x5a2>
 8005700:	2310      	movs	r3, #16
 8005702:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005706:	e0b0      	b.n	800586a <UART_SetConfig+0x5a2>
 8005708:	2320      	movs	r3, #32
 800570a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800570e:	e0ac      	b.n	800586a <UART_SetConfig+0x5a2>
 8005710:	2340      	movs	r3, #64	; 0x40
 8005712:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005716:	e0a8      	b.n	800586a <UART_SetConfig+0x5a2>
 8005718:	2380      	movs	r3, #128	; 0x80
 800571a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800571e:	e0a4      	b.n	800586a <UART_SetConfig+0x5a2>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a90      	ldr	r2, [pc, #576]	; (8005968 <UART_SetConfig+0x6a0>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d130      	bne.n	800578c <UART_SetConfig+0x4c4>
 800572a:	4b8e      	ldr	r3, [pc, #568]	; (8005964 <UART_SetConfig+0x69c>)
 800572c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800572e:	f003 0307 	and.w	r3, r3, #7
 8005732:	2b05      	cmp	r3, #5
 8005734:	d826      	bhi.n	8005784 <UART_SetConfig+0x4bc>
 8005736:	a201      	add	r2, pc, #4	; (adr r2, 800573c <UART_SetConfig+0x474>)
 8005738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800573c:	08005755 	.word	0x08005755
 8005740:	0800575d 	.word	0x0800575d
 8005744:	08005765 	.word	0x08005765
 8005748:	0800576d 	.word	0x0800576d
 800574c:	08005775 	.word	0x08005775
 8005750:	0800577d 	.word	0x0800577d
 8005754:	2300      	movs	r3, #0
 8005756:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800575a:	e086      	b.n	800586a <UART_SetConfig+0x5a2>
 800575c:	2304      	movs	r3, #4
 800575e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005762:	e082      	b.n	800586a <UART_SetConfig+0x5a2>
 8005764:	2308      	movs	r3, #8
 8005766:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800576a:	e07e      	b.n	800586a <UART_SetConfig+0x5a2>
 800576c:	2310      	movs	r3, #16
 800576e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005772:	e07a      	b.n	800586a <UART_SetConfig+0x5a2>
 8005774:	2320      	movs	r3, #32
 8005776:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800577a:	e076      	b.n	800586a <UART_SetConfig+0x5a2>
 800577c:	2340      	movs	r3, #64	; 0x40
 800577e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005782:	e072      	b.n	800586a <UART_SetConfig+0x5a2>
 8005784:	2380      	movs	r3, #128	; 0x80
 8005786:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800578a:	e06e      	b.n	800586a <UART_SetConfig+0x5a2>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a76      	ldr	r2, [pc, #472]	; (800596c <UART_SetConfig+0x6a4>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d130      	bne.n	80057f8 <UART_SetConfig+0x530>
 8005796:	4b73      	ldr	r3, [pc, #460]	; (8005964 <UART_SetConfig+0x69c>)
 8005798:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800579a:	f003 0307 	and.w	r3, r3, #7
 800579e:	2b05      	cmp	r3, #5
 80057a0:	d826      	bhi.n	80057f0 <UART_SetConfig+0x528>
 80057a2:	a201      	add	r2, pc, #4	; (adr r2, 80057a8 <UART_SetConfig+0x4e0>)
 80057a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057a8:	080057c1 	.word	0x080057c1
 80057ac:	080057c9 	.word	0x080057c9
 80057b0:	080057d1 	.word	0x080057d1
 80057b4:	080057d9 	.word	0x080057d9
 80057b8:	080057e1 	.word	0x080057e1
 80057bc:	080057e9 	.word	0x080057e9
 80057c0:	2300      	movs	r3, #0
 80057c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057c6:	e050      	b.n	800586a <UART_SetConfig+0x5a2>
 80057c8:	2304      	movs	r3, #4
 80057ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057ce:	e04c      	b.n	800586a <UART_SetConfig+0x5a2>
 80057d0:	2308      	movs	r3, #8
 80057d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057d6:	e048      	b.n	800586a <UART_SetConfig+0x5a2>
 80057d8:	2310      	movs	r3, #16
 80057da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057de:	e044      	b.n	800586a <UART_SetConfig+0x5a2>
 80057e0:	2320      	movs	r3, #32
 80057e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057e6:	e040      	b.n	800586a <UART_SetConfig+0x5a2>
 80057e8:	2340      	movs	r3, #64	; 0x40
 80057ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057ee:	e03c      	b.n	800586a <UART_SetConfig+0x5a2>
 80057f0:	2380      	movs	r3, #128	; 0x80
 80057f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057f6:	e038      	b.n	800586a <UART_SetConfig+0x5a2>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a5c      	ldr	r2, [pc, #368]	; (8005970 <UART_SetConfig+0x6a8>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d130      	bne.n	8005864 <UART_SetConfig+0x59c>
 8005802:	4b58      	ldr	r3, [pc, #352]	; (8005964 <UART_SetConfig+0x69c>)
 8005804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005806:	f003 0307 	and.w	r3, r3, #7
 800580a:	2b05      	cmp	r3, #5
 800580c:	d826      	bhi.n	800585c <UART_SetConfig+0x594>
 800580e:	a201      	add	r2, pc, #4	; (adr r2, 8005814 <UART_SetConfig+0x54c>)
 8005810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005814:	0800582d 	.word	0x0800582d
 8005818:	08005835 	.word	0x08005835
 800581c:	0800583d 	.word	0x0800583d
 8005820:	08005845 	.word	0x08005845
 8005824:	0800584d 	.word	0x0800584d
 8005828:	08005855 	.word	0x08005855
 800582c:	2302      	movs	r3, #2
 800582e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005832:	e01a      	b.n	800586a <UART_SetConfig+0x5a2>
 8005834:	2304      	movs	r3, #4
 8005836:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800583a:	e016      	b.n	800586a <UART_SetConfig+0x5a2>
 800583c:	2308      	movs	r3, #8
 800583e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005842:	e012      	b.n	800586a <UART_SetConfig+0x5a2>
 8005844:	2310      	movs	r3, #16
 8005846:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800584a:	e00e      	b.n	800586a <UART_SetConfig+0x5a2>
 800584c:	2320      	movs	r3, #32
 800584e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005852:	e00a      	b.n	800586a <UART_SetConfig+0x5a2>
 8005854:	2340      	movs	r3, #64	; 0x40
 8005856:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800585a:	e006      	b.n	800586a <UART_SetConfig+0x5a2>
 800585c:	2380      	movs	r3, #128	; 0x80
 800585e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005862:	e002      	b.n	800586a <UART_SetConfig+0x5a2>
 8005864:	2380      	movs	r3, #128	; 0x80
 8005866:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a40      	ldr	r2, [pc, #256]	; (8005970 <UART_SetConfig+0x6a8>)
 8005870:	4293      	cmp	r3, r2
 8005872:	f040 80ef 	bne.w	8005a54 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005876:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800587a:	2b20      	cmp	r3, #32
 800587c:	dc46      	bgt.n	800590c <UART_SetConfig+0x644>
 800587e:	2b02      	cmp	r3, #2
 8005880:	f2c0 8081 	blt.w	8005986 <UART_SetConfig+0x6be>
 8005884:	3b02      	subs	r3, #2
 8005886:	2b1e      	cmp	r3, #30
 8005888:	d87d      	bhi.n	8005986 <UART_SetConfig+0x6be>
 800588a:	a201      	add	r2, pc, #4	; (adr r2, 8005890 <UART_SetConfig+0x5c8>)
 800588c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005890:	08005913 	.word	0x08005913
 8005894:	08005987 	.word	0x08005987
 8005898:	0800591b 	.word	0x0800591b
 800589c:	08005987 	.word	0x08005987
 80058a0:	08005987 	.word	0x08005987
 80058a4:	08005987 	.word	0x08005987
 80058a8:	0800592b 	.word	0x0800592b
 80058ac:	08005987 	.word	0x08005987
 80058b0:	08005987 	.word	0x08005987
 80058b4:	08005987 	.word	0x08005987
 80058b8:	08005987 	.word	0x08005987
 80058bc:	08005987 	.word	0x08005987
 80058c0:	08005987 	.word	0x08005987
 80058c4:	08005987 	.word	0x08005987
 80058c8:	0800593b 	.word	0x0800593b
 80058cc:	08005987 	.word	0x08005987
 80058d0:	08005987 	.word	0x08005987
 80058d4:	08005987 	.word	0x08005987
 80058d8:	08005987 	.word	0x08005987
 80058dc:	08005987 	.word	0x08005987
 80058e0:	08005987 	.word	0x08005987
 80058e4:	08005987 	.word	0x08005987
 80058e8:	08005987 	.word	0x08005987
 80058ec:	08005987 	.word	0x08005987
 80058f0:	08005987 	.word	0x08005987
 80058f4:	08005987 	.word	0x08005987
 80058f8:	08005987 	.word	0x08005987
 80058fc:	08005987 	.word	0x08005987
 8005900:	08005987 	.word	0x08005987
 8005904:	08005987 	.word	0x08005987
 8005908:	08005979 	.word	0x08005979
 800590c:	2b40      	cmp	r3, #64	; 0x40
 800590e:	d036      	beq.n	800597e <UART_SetConfig+0x6b6>
 8005910:	e039      	b.n	8005986 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005912:	f7ff f867 	bl	80049e4 <HAL_RCCEx_GetD3PCLK1Freq>
 8005916:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005918:	e03b      	b.n	8005992 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800591a:	f107 0314 	add.w	r3, r7, #20
 800591e:	4618      	mov	r0, r3
 8005920:	f7ff f876 	bl	8004a10 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005924:	69bb      	ldr	r3, [r7, #24]
 8005926:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005928:	e033      	b.n	8005992 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800592a:	f107 0308 	add.w	r3, r7, #8
 800592e:	4618      	mov	r0, r3
 8005930:	f7ff f9c2 	bl	8004cb8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005938:	e02b      	b.n	8005992 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800593a:	4b0a      	ldr	r3, [pc, #40]	; (8005964 <UART_SetConfig+0x69c>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f003 0320 	and.w	r3, r3, #32
 8005942:	2b00      	cmp	r3, #0
 8005944:	d009      	beq.n	800595a <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005946:	4b07      	ldr	r3, [pc, #28]	; (8005964 <UART_SetConfig+0x69c>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	08db      	lsrs	r3, r3, #3
 800594c:	f003 0303 	and.w	r3, r3, #3
 8005950:	4a08      	ldr	r2, [pc, #32]	; (8005974 <UART_SetConfig+0x6ac>)
 8005952:	fa22 f303 	lsr.w	r3, r2, r3
 8005956:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005958:	e01b      	b.n	8005992 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800595a:	4b06      	ldr	r3, [pc, #24]	; (8005974 <UART_SetConfig+0x6ac>)
 800595c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800595e:	e018      	b.n	8005992 <UART_SetConfig+0x6ca>
 8005960:	40011400 	.word	0x40011400
 8005964:	58024400 	.word	0x58024400
 8005968:	40007800 	.word	0x40007800
 800596c:	40007c00 	.word	0x40007c00
 8005970:	58000c00 	.word	0x58000c00
 8005974:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005978:	4bc4      	ldr	r3, [pc, #784]	; (8005c8c <UART_SetConfig+0x9c4>)
 800597a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800597c:	e009      	b.n	8005992 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800597e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005982:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005984:	e005      	b.n	8005992 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8005986:	2300      	movs	r3, #0
 8005988:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800598a:	2301      	movs	r3, #1
 800598c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005990:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005994:	2b00      	cmp	r3, #0
 8005996:	f000 81da 	beq.w	8005d4e <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800599e:	4abc      	ldr	r2, [pc, #752]	; (8005c90 <UART_SetConfig+0x9c8>)
 80059a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80059a4:	461a      	mov	r2, r3
 80059a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80059ac:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	685a      	ldr	r2, [r3, #4]
 80059b2:	4613      	mov	r3, r2
 80059b4:	005b      	lsls	r3, r3, #1
 80059b6:	4413      	add	r3, r2
 80059b8:	6a3a      	ldr	r2, [r7, #32]
 80059ba:	429a      	cmp	r2, r3
 80059bc:	d305      	bcc.n	80059ca <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80059c4:	6a3a      	ldr	r2, [r7, #32]
 80059c6:	429a      	cmp	r2, r3
 80059c8:	d903      	bls.n	80059d2 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 80059ca:	2301      	movs	r3, #1
 80059cc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80059d0:	e1bd      	b.n	8005d4e <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80059d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059d4:	4618      	mov	r0, r3
 80059d6:	f04f 0100 	mov.w	r1, #0
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059de:	4aac      	ldr	r2, [pc, #688]	; (8005c90 <UART_SetConfig+0x9c8>)
 80059e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80059e4:	b29a      	uxth	r2, r3
 80059e6:	f04f 0300 	mov.w	r3, #0
 80059ea:	f7fa fc75 	bl	80002d8 <__aeabi_uldivmod>
 80059ee:	4602      	mov	r2, r0
 80059f0:	460b      	mov	r3, r1
 80059f2:	4610      	mov	r0, r2
 80059f4:	4619      	mov	r1, r3
 80059f6:	f04f 0200 	mov.w	r2, #0
 80059fa:	f04f 0300 	mov.w	r3, #0
 80059fe:	020b      	lsls	r3, r1, #8
 8005a00:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005a04:	0202      	lsls	r2, r0, #8
 8005a06:	6879      	ldr	r1, [r7, #4]
 8005a08:	6849      	ldr	r1, [r1, #4]
 8005a0a:	0849      	lsrs	r1, r1, #1
 8005a0c:	4608      	mov	r0, r1
 8005a0e:	f04f 0100 	mov.w	r1, #0
 8005a12:	1814      	adds	r4, r2, r0
 8005a14:	eb43 0501 	adc.w	r5, r3, r1
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	461a      	mov	r2, r3
 8005a1e:	f04f 0300 	mov.w	r3, #0
 8005a22:	4620      	mov	r0, r4
 8005a24:	4629      	mov	r1, r5
 8005a26:	f7fa fc57 	bl	80002d8 <__aeabi_uldivmod>
 8005a2a:	4602      	mov	r2, r0
 8005a2c:	460b      	mov	r3, r1
 8005a2e:	4613      	mov	r3, r2
 8005a30:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a34:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a38:	d308      	bcc.n	8005a4c <UART_SetConfig+0x784>
 8005a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a3c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a40:	d204      	bcs.n	8005a4c <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a48:	60da      	str	r2, [r3, #12]
 8005a4a:	e180      	b.n	8005d4e <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005a52:	e17c      	b.n	8005d4e <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	69db      	ldr	r3, [r3, #28]
 8005a58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a5c:	f040 80bf 	bne.w	8005bde <UART_SetConfig+0x916>
  {
    switch (clocksource)
 8005a60:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005a64:	2b20      	cmp	r3, #32
 8005a66:	dc49      	bgt.n	8005afc <UART_SetConfig+0x834>
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	db7c      	blt.n	8005b66 <UART_SetConfig+0x89e>
 8005a6c:	2b20      	cmp	r3, #32
 8005a6e:	d87a      	bhi.n	8005b66 <UART_SetConfig+0x89e>
 8005a70:	a201      	add	r2, pc, #4	; (adr r2, 8005a78 <UART_SetConfig+0x7b0>)
 8005a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a76:	bf00      	nop
 8005a78:	08005b03 	.word	0x08005b03
 8005a7c:	08005b0b 	.word	0x08005b0b
 8005a80:	08005b67 	.word	0x08005b67
 8005a84:	08005b67 	.word	0x08005b67
 8005a88:	08005b13 	.word	0x08005b13
 8005a8c:	08005b67 	.word	0x08005b67
 8005a90:	08005b67 	.word	0x08005b67
 8005a94:	08005b67 	.word	0x08005b67
 8005a98:	08005b23 	.word	0x08005b23
 8005a9c:	08005b67 	.word	0x08005b67
 8005aa0:	08005b67 	.word	0x08005b67
 8005aa4:	08005b67 	.word	0x08005b67
 8005aa8:	08005b67 	.word	0x08005b67
 8005aac:	08005b67 	.word	0x08005b67
 8005ab0:	08005b67 	.word	0x08005b67
 8005ab4:	08005b67 	.word	0x08005b67
 8005ab8:	08005b33 	.word	0x08005b33
 8005abc:	08005b67 	.word	0x08005b67
 8005ac0:	08005b67 	.word	0x08005b67
 8005ac4:	08005b67 	.word	0x08005b67
 8005ac8:	08005b67 	.word	0x08005b67
 8005acc:	08005b67 	.word	0x08005b67
 8005ad0:	08005b67 	.word	0x08005b67
 8005ad4:	08005b67 	.word	0x08005b67
 8005ad8:	08005b67 	.word	0x08005b67
 8005adc:	08005b67 	.word	0x08005b67
 8005ae0:	08005b67 	.word	0x08005b67
 8005ae4:	08005b67 	.word	0x08005b67
 8005ae8:	08005b67 	.word	0x08005b67
 8005aec:	08005b67 	.word	0x08005b67
 8005af0:	08005b67 	.word	0x08005b67
 8005af4:	08005b67 	.word	0x08005b67
 8005af8:	08005b59 	.word	0x08005b59
 8005afc:	2b40      	cmp	r3, #64	; 0x40
 8005afe:	d02e      	beq.n	8005b5e <UART_SetConfig+0x896>
 8005b00:	e031      	b.n	8005b66 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b02:	f7fe f803 	bl	8003b0c <HAL_RCC_GetPCLK1Freq>
 8005b06:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005b08:	e033      	b.n	8005b72 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b0a:	f7fe f815 	bl	8003b38 <HAL_RCC_GetPCLK2Freq>
 8005b0e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005b10:	e02f      	b.n	8005b72 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b12:	f107 0314 	add.w	r3, r7, #20
 8005b16:	4618      	mov	r0, r3
 8005b18:	f7fe ff7a 	bl	8004a10 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005b1c:	69bb      	ldr	r3, [r7, #24]
 8005b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005b20:	e027      	b.n	8005b72 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005b22:	f107 0308 	add.w	r3, r7, #8
 8005b26:	4618      	mov	r0, r3
 8005b28:	f7ff f8c6 	bl	8004cb8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005b30:	e01f      	b.n	8005b72 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b32:	4b58      	ldr	r3, [pc, #352]	; (8005c94 <UART_SetConfig+0x9cc>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f003 0320 	and.w	r3, r3, #32
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d009      	beq.n	8005b52 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005b3e:	4b55      	ldr	r3, [pc, #340]	; (8005c94 <UART_SetConfig+0x9cc>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	08db      	lsrs	r3, r3, #3
 8005b44:	f003 0303 	and.w	r3, r3, #3
 8005b48:	4a53      	ldr	r2, [pc, #332]	; (8005c98 <UART_SetConfig+0x9d0>)
 8005b4a:	fa22 f303 	lsr.w	r3, r2, r3
 8005b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005b50:	e00f      	b.n	8005b72 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8005b52:	4b51      	ldr	r3, [pc, #324]	; (8005c98 <UART_SetConfig+0x9d0>)
 8005b54:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005b56:	e00c      	b.n	8005b72 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005b58:	4b4c      	ldr	r3, [pc, #304]	; (8005c8c <UART_SetConfig+0x9c4>)
 8005b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005b5c:	e009      	b.n	8005b72 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b62:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005b64:	e005      	b.n	8005b72 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8005b66:	2300      	movs	r3, #0
 8005b68:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005b70:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	f000 80ea 	beq.w	8005d4e <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b7e:	4a44      	ldr	r2, [pc, #272]	; (8005c90 <UART_SetConfig+0x9c8>)
 8005b80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b84:	461a      	mov	r2, r3
 8005b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b88:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b8c:	005a      	lsls	r2, r3, #1
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	085b      	lsrs	r3, r3, #1
 8005b94:	441a      	add	r2, r3
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b9e:	b29b      	uxth	r3, r3
 8005ba0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ba4:	2b0f      	cmp	r3, #15
 8005ba6:	d916      	bls.n	8005bd6 <UART_SetConfig+0x90e>
 8005ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005baa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bae:	d212      	bcs.n	8005bd6 <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bb2:	b29b      	uxth	r3, r3
 8005bb4:	f023 030f 	bic.w	r3, r3, #15
 8005bb8:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bbc:	085b      	lsrs	r3, r3, #1
 8005bbe:	b29b      	uxth	r3, r3
 8005bc0:	f003 0307 	and.w	r3, r3, #7
 8005bc4:	b29a      	uxth	r2, r3
 8005bc6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005bd2:	60da      	str	r2, [r3, #12]
 8005bd4:	e0bb      	b.n	8005d4e <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005bdc:	e0b7      	b.n	8005d4e <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005bde:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005be2:	2b20      	cmp	r3, #32
 8005be4:	dc4a      	bgt.n	8005c7c <UART_SetConfig+0x9b4>
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	f2c0 8086 	blt.w	8005cf8 <UART_SetConfig+0xa30>
 8005bec:	2b20      	cmp	r3, #32
 8005bee:	f200 8083 	bhi.w	8005cf8 <UART_SetConfig+0xa30>
 8005bf2:	a201      	add	r2, pc, #4	; (adr r2, 8005bf8 <UART_SetConfig+0x930>)
 8005bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bf8:	08005c83 	.word	0x08005c83
 8005bfc:	08005c9d 	.word	0x08005c9d
 8005c00:	08005cf9 	.word	0x08005cf9
 8005c04:	08005cf9 	.word	0x08005cf9
 8005c08:	08005ca5 	.word	0x08005ca5
 8005c0c:	08005cf9 	.word	0x08005cf9
 8005c10:	08005cf9 	.word	0x08005cf9
 8005c14:	08005cf9 	.word	0x08005cf9
 8005c18:	08005cb5 	.word	0x08005cb5
 8005c1c:	08005cf9 	.word	0x08005cf9
 8005c20:	08005cf9 	.word	0x08005cf9
 8005c24:	08005cf9 	.word	0x08005cf9
 8005c28:	08005cf9 	.word	0x08005cf9
 8005c2c:	08005cf9 	.word	0x08005cf9
 8005c30:	08005cf9 	.word	0x08005cf9
 8005c34:	08005cf9 	.word	0x08005cf9
 8005c38:	08005cc5 	.word	0x08005cc5
 8005c3c:	08005cf9 	.word	0x08005cf9
 8005c40:	08005cf9 	.word	0x08005cf9
 8005c44:	08005cf9 	.word	0x08005cf9
 8005c48:	08005cf9 	.word	0x08005cf9
 8005c4c:	08005cf9 	.word	0x08005cf9
 8005c50:	08005cf9 	.word	0x08005cf9
 8005c54:	08005cf9 	.word	0x08005cf9
 8005c58:	08005cf9 	.word	0x08005cf9
 8005c5c:	08005cf9 	.word	0x08005cf9
 8005c60:	08005cf9 	.word	0x08005cf9
 8005c64:	08005cf9 	.word	0x08005cf9
 8005c68:	08005cf9 	.word	0x08005cf9
 8005c6c:	08005cf9 	.word	0x08005cf9
 8005c70:	08005cf9 	.word	0x08005cf9
 8005c74:	08005cf9 	.word	0x08005cf9
 8005c78:	08005ceb 	.word	0x08005ceb
 8005c7c:	2b40      	cmp	r3, #64	; 0x40
 8005c7e:	d037      	beq.n	8005cf0 <UART_SetConfig+0xa28>
 8005c80:	e03a      	b.n	8005cf8 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c82:	f7fd ff43 	bl	8003b0c <HAL_RCC_GetPCLK1Freq>
 8005c86:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005c88:	e03c      	b.n	8005d04 <UART_SetConfig+0xa3c>
 8005c8a:	bf00      	nop
 8005c8c:	003d0900 	.word	0x003d0900
 8005c90:	08006360 	.word	0x08006360
 8005c94:	58024400 	.word	0x58024400
 8005c98:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c9c:	f7fd ff4c 	bl	8003b38 <HAL_RCC_GetPCLK2Freq>
 8005ca0:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005ca2:	e02f      	b.n	8005d04 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005ca4:	f107 0314 	add.w	r3, r7, #20
 8005ca8:	4618      	mov	r0, r3
 8005caa:	f7fe feb1 	bl	8004a10 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005cae:	69bb      	ldr	r3, [r7, #24]
 8005cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005cb2:	e027      	b.n	8005d04 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005cb4:	f107 0308 	add.w	r3, r7, #8
 8005cb8:	4618      	mov	r0, r3
 8005cba:	f7fe fffd 	bl	8004cb8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005cc2:	e01f      	b.n	8005d04 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005cc4:	4b2c      	ldr	r3, [pc, #176]	; (8005d78 <UART_SetConfig+0xab0>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f003 0320 	and.w	r3, r3, #32
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d009      	beq.n	8005ce4 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005cd0:	4b29      	ldr	r3, [pc, #164]	; (8005d78 <UART_SetConfig+0xab0>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	08db      	lsrs	r3, r3, #3
 8005cd6:	f003 0303 	and.w	r3, r3, #3
 8005cda:	4a28      	ldr	r2, [pc, #160]	; (8005d7c <UART_SetConfig+0xab4>)
 8005cdc:	fa22 f303 	lsr.w	r3, r2, r3
 8005ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005ce2:	e00f      	b.n	8005d04 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8005ce4:	4b25      	ldr	r3, [pc, #148]	; (8005d7c <UART_SetConfig+0xab4>)
 8005ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005ce8:	e00c      	b.n	8005d04 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005cea:	4b25      	ldr	r3, [pc, #148]	; (8005d80 <UART_SetConfig+0xab8>)
 8005cec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005cee:	e009      	b.n	8005d04 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005cf0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005cf6:	e005      	b.n	8005d04 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005d02:	bf00      	nop
    }

    if (pclk != 0U)
 8005d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d021      	beq.n	8005d4e <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d0e:	4a1d      	ldr	r2, [pc, #116]	; (8005d84 <UART_SetConfig+0xabc>)
 8005d10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d14:	461a      	mov	r2, r3
 8005d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d18:	fbb3 f2f2 	udiv	r2, r3, r2
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	085b      	lsrs	r3, r3, #1
 8005d22:	441a      	add	r2, r3
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d2c:	b29b      	uxth	r3, r3
 8005d2e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d32:	2b0f      	cmp	r3, #15
 8005d34:	d908      	bls.n	8005d48 <UART_SetConfig+0xa80>
 8005d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d3c:	d204      	bcs.n	8005d48 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d44:	60da      	str	r2, [r3, #12]
 8005d46:	e002      	b.n	8005d4e <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8005d48:	2301      	movs	r3, #1
 8005d4a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2201      	movs	r2, #1
 8005d52:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2201      	movs	r2, #1
 8005d5a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2200      	movs	r2, #0
 8005d62:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2200      	movs	r2, #0
 8005d68:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005d6a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	3738      	adds	r7, #56	; 0x38
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bdb0      	pop	{r4, r5, r7, pc}
 8005d76:	bf00      	nop
 8005d78:	58024400 	.word	0x58024400
 8005d7c:	03d09000 	.word	0x03d09000
 8005d80:	003d0900 	.word	0x003d0900
 8005d84:	08006360 	.word	0x08006360

08005d88 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b083      	sub	sp, #12
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d94:	f003 0301 	and.w	r3, r3, #1
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d00a      	beq.n	8005db2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	430a      	orrs	r2, r1
 8005db0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005db6:	f003 0302 	and.w	r3, r3, #2
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d00a      	beq.n	8005dd4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	430a      	orrs	r2, r1
 8005dd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dd8:	f003 0304 	and.w	r3, r3, #4
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d00a      	beq.n	8005df6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	430a      	orrs	r2, r1
 8005df4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dfa:	f003 0308 	and.w	r3, r3, #8
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d00a      	beq.n	8005e18 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	430a      	orrs	r2, r1
 8005e16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e1c:	f003 0310 	and.w	r3, r3, #16
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d00a      	beq.n	8005e3a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	430a      	orrs	r2, r1
 8005e38:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e3e:	f003 0320 	and.w	r3, r3, #32
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d00a      	beq.n	8005e5c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	689b      	ldr	r3, [r3, #8]
 8005e4c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	430a      	orrs	r2, r1
 8005e5a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d01a      	beq.n	8005e9e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	430a      	orrs	r2, r1
 8005e7c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e86:	d10a      	bne.n	8005e9e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	430a      	orrs	r2, r1
 8005e9c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ea2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d00a      	beq.n	8005ec0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	430a      	orrs	r2, r1
 8005ebe:	605a      	str	r2, [r3, #4]
  }
}
 8005ec0:	bf00      	nop
 8005ec2:	370c      	adds	r7, #12
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr

08005ecc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b086      	sub	sp, #24
 8005ed0:	af02      	add	r7, sp, #8
 8005ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005edc:	f7fb f93e 	bl	800115c <HAL_GetTick>
 8005ee0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f003 0308 	and.w	r3, r3, #8
 8005eec:	2b08      	cmp	r3, #8
 8005eee:	d10e      	bne.n	8005f0e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ef0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005ef4:	9300      	str	r3, [sp, #0]
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f000 f82f 	bl	8005f62 <UART_WaitOnFlagUntilTimeout>
 8005f04:	4603      	mov	r3, r0
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d001      	beq.n	8005f0e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f0a:	2303      	movs	r3, #3
 8005f0c:	e025      	b.n	8005f5a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f003 0304 	and.w	r3, r3, #4
 8005f18:	2b04      	cmp	r3, #4
 8005f1a:	d10e      	bne.n	8005f3a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f1c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f20:	9300      	str	r3, [sp, #0]
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2200      	movs	r2, #0
 8005f26:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f000 f819 	bl	8005f62 <UART_WaitOnFlagUntilTimeout>
 8005f30:	4603      	mov	r3, r0
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d001      	beq.n	8005f3a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f36:	2303      	movs	r3, #3
 8005f38:	e00f      	b.n	8005f5a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2220      	movs	r2, #32
 8005f3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2220      	movs	r2, #32
 8005f46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2200      	movs	r2, #0
 8005f54:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005f58:	2300      	movs	r3, #0
}
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	3710      	adds	r7, #16
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd80      	pop	{r7, pc}

08005f62 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005f62:	b580      	push	{r7, lr}
 8005f64:	b084      	sub	sp, #16
 8005f66:	af00      	add	r7, sp, #0
 8005f68:	60f8      	str	r0, [r7, #12]
 8005f6a:	60b9      	str	r1, [r7, #8]
 8005f6c:	603b      	str	r3, [r7, #0]
 8005f6e:	4613      	mov	r3, r2
 8005f70:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f72:	e062      	b.n	800603a <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f74:	69bb      	ldr	r3, [r7, #24]
 8005f76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f7a:	d05e      	beq.n	800603a <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f7c:	f7fb f8ee 	bl	800115c <HAL_GetTick>
 8005f80:	4602      	mov	r2, r0
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	1ad3      	subs	r3, r2, r3
 8005f86:	69ba      	ldr	r2, [r7, #24]
 8005f88:	429a      	cmp	r2, r3
 8005f8a:	d302      	bcc.n	8005f92 <UART_WaitOnFlagUntilTimeout+0x30>
 8005f8c:	69bb      	ldr	r3, [r7, #24]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d11d      	bne.n	8005fce <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	681a      	ldr	r2, [r3, #0]
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005fa0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	689a      	ldr	r2, [r3, #8]
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f022 0201 	bic.w	r2, r2, #1
 8005fb0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2220      	movs	r2, #32
 8005fb6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2220      	movs	r2, #32
 8005fbe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005fca:	2303      	movs	r3, #3
 8005fcc:	e045      	b.n	800605a <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f003 0304 	and.w	r3, r3, #4
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d02e      	beq.n	800603a <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	69db      	ldr	r3, [r3, #28]
 8005fe2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005fe6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005fea:	d126      	bne.n	800603a <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ff4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	681a      	ldr	r2, [r3, #0]
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006004:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	689a      	ldr	r2, [r3, #8]
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f022 0201 	bic.w	r2, r2, #1
 8006014:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2220      	movs	r2, #32
 800601a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2220      	movs	r2, #32
 8006022:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	2220      	movs	r2, #32
 800602a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	2200      	movs	r2, #0
 8006032:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006036:	2303      	movs	r3, #3
 8006038:	e00f      	b.n	800605a <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	69da      	ldr	r2, [r3, #28]
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	4013      	ands	r3, r2
 8006044:	68ba      	ldr	r2, [r7, #8]
 8006046:	429a      	cmp	r2, r3
 8006048:	bf0c      	ite	eq
 800604a:	2301      	moveq	r3, #1
 800604c:	2300      	movne	r3, #0
 800604e:	b2db      	uxtb	r3, r3
 8006050:	461a      	mov	r2, r3
 8006052:	79fb      	ldrb	r3, [r7, #7]
 8006054:	429a      	cmp	r2, r3
 8006056:	d08d      	beq.n	8005f74 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006058:	2300      	movs	r3, #0
}
 800605a:	4618      	mov	r0, r3
 800605c:	3710      	adds	r7, #16
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}

08006062 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006062:	b480      	push	{r7}
 8006064:	b085      	sub	sp, #20
 8006066:	af00      	add	r7, sp, #0
 8006068:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006070:	2b01      	cmp	r3, #1
 8006072:	d101      	bne.n	8006078 <HAL_UARTEx_DisableFifoMode+0x16>
 8006074:	2302      	movs	r3, #2
 8006076:	e027      	b.n	80060c8 <HAL_UARTEx_DisableFifoMode+0x66>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2201      	movs	r2, #1
 800607c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2224      	movs	r2, #36	; 0x24
 8006084:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	681a      	ldr	r2, [r3, #0]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f022 0201 	bic.w	r2, r2, #1
 800609e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80060a6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2200      	movs	r2, #0
 80060ac:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	68fa      	ldr	r2, [r7, #12]
 80060b4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2220      	movs	r2, #32
 80060ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2200      	movs	r2, #0
 80060c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80060c6:	2300      	movs	r3, #0
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	3714      	adds	r7, #20
 80060cc:	46bd      	mov	sp, r7
 80060ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d2:	4770      	bx	lr

080060d4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b084      	sub	sp, #16
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
 80060dc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	d101      	bne.n	80060ec <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80060e8:	2302      	movs	r3, #2
 80060ea:	e02d      	b.n	8006148 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2201      	movs	r2, #1
 80060f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2224      	movs	r2, #36	; 0x24
 80060f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	681a      	ldr	r2, [r3, #0]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f022 0201 	bic.w	r2, r2, #1
 8006112:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	689b      	ldr	r3, [r3, #8]
 800611a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	683a      	ldr	r2, [r7, #0]
 8006124:	430a      	orrs	r2, r1
 8006126:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	f000 f84f 	bl	80061cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	68fa      	ldr	r2, [r7, #12]
 8006134:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2220      	movs	r2, #32
 800613a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2200      	movs	r2, #0
 8006142:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006146:	2300      	movs	r3, #0
}
 8006148:	4618      	mov	r0, r3
 800614a:	3710      	adds	r7, #16
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}

08006150 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b084      	sub	sp, #16
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
 8006158:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006160:	2b01      	cmp	r3, #1
 8006162:	d101      	bne.n	8006168 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006164:	2302      	movs	r3, #2
 8006166:	e02d      	b.n	80061c4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2201      	movs	r2, #1
 800616c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2224      	movs	r2, #36	; 0x24
 8006174:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	681a      	ldr	r2, [r3, #0]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f022 0201 	bic.w	r2, r2, #1
 800618e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	689b      	ldr	r3, [r3, #8]
 8006196:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	683a      	ldr	r2, [r7, #0]
 80061a0:	430a      	orrs	r2, r1
 80061a2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f000 f811 	bl	80061cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	68fa      	ldr	r2, [r7, #12]
 80061b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2220      	movs	r2, #32
 80061b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2200      	movs	r2, #0
 80061be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80061c2:	2300      	movs	r3, #0
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	3710      	adds	r7, #16
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bd80      	pop	{r7, pc}

080061cc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b085      	sub	sp, #20
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d108      	bne.n	80061ee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2201      	movs	r2, #1
 80061e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2201      	movs	r2, #1
 80061e8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80061ec:	e031      	b.n	8006252 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80061ee:	2310      	movs	r3, #16
 80061f0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80061f2:	2310      	movs	r3, #16
 80061f4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	689b      	ldr	r3, [r3, #8]
 80061fc:	0e5b      	lsrs	r3, r3, #25
 80061fe:	b2db      	uxtb	r3, r3
 8006200:	f003 0307 	and.w	r3, r3, #7
 8006204:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	689b      	ldr	r3, [r3, #8]
 800620c:	0f5b      	lsrs	r3, r3, #29
 800620e:	b2db      	uxtb	r3, r3
 8006210:	f003 0307 	and.w	r3, r3, #7
 8006214:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006216:	7bbb      	ldrb	r3, [r7, #14]
 8006218:	7b3a      	ldrb	r2, [r7, #12]
 800621a:	4911      	ldr	r1, [pc, #68]	; (8006260 <UARTEx_SetNbDataToProcess+0x94>)
 800621c:	5c8a      	ldrb	r2, [r1, r2]
 800621e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006222:	7b3a      	ldrb	r2, [r7, #12]
 8006224:	490f      	ldr	r1, [pc, #60]	; (8006264 <UARTEx_SetNbDataToProcess+0x98>)
 8006226:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006228:	fb93 f3f2 	sdiv	r3, r3, r2
 800622c:	b29a      	uxth	r2, r3
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006234:	7bfb      	ldrb	r3, [r7, #15]
 8006236:	7b7a      	ldrb	r2, [r7, #13]
 8006238:	4909      	ldr	r1, [pc, #36]	; (8006260 <UARTEx_SetNbDataToProcess+0x94>)
 800623a:	5c8a      	ldrb	r2, [r1, r2]
 800623c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006240:	7b7a      	ldrb	r2, [r7, #13]
 8006242:	4908      	ldr	r1, [pc, #32]	; (8006264 <UARTEx_SetNbDataToProcess+0x98>)
 8006244:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006246:	fb93 f3f2 	sdiv	r3, r3, r2
 800624a:	b29a      	uxth	r2, r3
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006252:	bf00      	nop
 8006254:	3714      	adds	r7, #20
 8006256:	46bd      	mov	sp, r7
 8006258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625c:	4770      	bx	lr
 800625e:	bf00      	nop
 8006260:	08006378 	.word	0x08006378
 8006264:	08006380 	.word	0x08006380

08006268 <__libc_init_array>:
 8006268:	b570      	push	{r4, r5, r6, lr}
 800626a:	4d0d      	ldr	r5, [pc, #52]	; (80062a0 <__libc_init_array+0x38>)
 800626c:	4c0d      	ldr	r4, [pc, #52]	; (80062a4 <__libc_init_array+0x3c>)
 800626e:	1b64      	subs	r4, r4, r5
 8006270:	10a4      	asrs	r4, r4, #2
 8006272:	2600      	movs	r6, #0
 8006274:	42a6      	cmp	r6, r4
 8006276:	d109      	bne.n	800628c <__libc_init_array+0x24>
 8006278:	4d0b      	ldr	r5, [pc, #44]	; (80062a8 <__libc_init_array+0x40>)
 800627a:	4c0c      	ldr	r4, [pc, #48]	; (80062ac <__libc_init_array+0x44>)
 800627c:	f000 f82e 	bl	80062dc <_init>
 8006280:	1b64      	subs	r4, r4, r5
 8006282:	10a4      	asrs	r4, r4, #2
 8006284:	2600      	movs	r6, #0
 8006286:	42a6      	cmp	r6, r4
 8006288:	d105      	bne.n	8006296 <__libc_init_array+0x2e>
 800628a:	bd70      	pop	{r4, r5, r6, pc}
 800628c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006290:	4798      	blx	r3
 8006292:	3601      	adds	r6, #1
 8006294:	e7ee      	b.n	8006274 <__libc_init_array+0xc>
 8006296:	f855 3b04 	ldr.w	r3, [r5], #4
 800629a:	4798      	blx	r3
 800629c:	3601      	adds	r6, #1
 800629e:	e7f2      	b.n	8006286 <__libc_init_array+0x1e>
 80062a0:	08006390 	.word	0x08006390
 80062a4:	08006390 	.word	0x08006390
 80062a8:	08006390 	.word	0x08006390
 80062ac:	08006394 	.word	0x08006394

080062b0 <memcpy>:
 80062b0:	440a      	add	r2, r1
 80062b2:	4291      	cmp	r1, r2
 80062b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80062b8:	d100      	bne.n	80062bc <memcpy+0xc>
 80062ba:	4770      	bx	lr
 80062bc:	b510      	push	{r4, lr}
 80062be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80062c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80062c6:	4291      	cmp	r1, r2
 80062c8:	d1f9      	bne.n	80062be <memcpy+0xe>
 80062ca:	bd10      	pop	{r4, pc}

080062cc <memset>:
 80062cc:	4402      	add	r2, r0
 80062ce:	4603      	mov	r3, r0
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d100      	bne.n	80062d6 <memset+0xa>
 80062d4:	4770      	bx	lr
 80062d6:	f803 1b01 	strb.w	r1, [r3], #1
 80062da:	e7f9      	b.n	80062d0 <memset+0x4>

080062dc <_init>:
 80062dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062de:	bf00      	nop
 80062e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062e2:	bc08      	pop	{r3}
 80062e4:	469e      	mov	lr, r3
 80062e6:	4770      	bx	lr

080062e8 <_fini>:
 80062e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062ea:	bf00      	nop
 80062ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062ee:	bc08      	pop	{r3}
 80062f0:	469e      	mov	lr, r3
 80062f2:	4770      	bx	lr
