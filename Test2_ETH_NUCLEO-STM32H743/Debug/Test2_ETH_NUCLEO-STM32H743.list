
Test2_ETH_NUCLEO-STM32H743.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013f40  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002ca8  080141e0  080141e0  000241e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08016e88  08016e88  00026e88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08016e90  08016e90  00026e90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08016e94  08016e94  00026e94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000094  24000000  08016e98  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000376c  24000094  08016f2c  00030094  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24003800  08016f2c  00033800  2**0
                  ALLOC
  9 .lwip_sec     000019d0  30040000  30040000  00040000  2**2
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  00030094  2**0
                  CONTENTS, READONLY
 11 .debug_info   000479bf  00000000  00000000  000300c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 000077c8  00000000  00000000  00077a81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001b10  00000000  00000000  0007f250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00001a38  00000000  00000000  00080d60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00044409  00000000  00000000  00082798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0002d579  00000000  00000000  000c6ba1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001701d6  00000000  00000000  000f411a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  002642f0  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00007804  00000000  00000000  00264344  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000094 	.word	0x24000094
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080141c8 	.word	0x080141c8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000098 	.word	0x24000098
 80002dc:	080141c8 	.word	0x080141c8

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b96e 	b.w	8000674 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468c      	mov	ip, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	f040 8083 	bne.w	80004c6 <__udivmoddi4+0x116>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d947      	bls.n	8000456 <__udivmoddi4+0xa6>
 80003c6:	fab2 f282 	clz	r2, r2
 80003ca:	b142      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003cc:	f1c2 0020 	rsb	r0, r2, #32
 80003d0:	fa24 f000 	lsr.w	r0, r4, r0
 80003d4:	4091      	lsls	r1, r2
 80003d6:	4097      	lsls	r7, r2
 80003d8:	ea40 0c01 	orr.w	ip, r0, r1
 80003dc:	4094      	lsls	r4, r2
 80003de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fbbc f6f8 	udiv	r6, ip, r8
 80003e8:	fa1f fe87 	uxth.w	lr, r7
 80003ec:	fb08 c116 	mls	r1, r8, r6, ip
 80003f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f4:	fb06 f10e 	mul.w	r1, r6, lr
 80003f8:	4299      	cmp	r1, r3
 80003fa:	d909      	bls.n	8000410 <__udivmoddi4+0x60>
 80003fc:	18fb      	adds	r3, r7, r3
 80003fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000402:	f080 8119 	bcs.w	8000638 <__udivmoddi4+0x288>
 8000406:	4299      	cmp	r1, r3
 8000408:	f240 8116 	bls.w	8000638 <__udivmoddi4+0x288>
 800040c:	3e02      	subs	r6, #2
 800040e:	443b      	add	r3, r7
 8000410:	1a5b      	subs	r3, r3, r1
 8000412:	b2a4      	uxth	r4, r4
 8000414:	fbb3 f0f8 	udiv	r0, r3, r8
 8000418:	fb08 3310 	mls	r3, r8, r0, r3
 800041c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000420:	fb00 fe0e 	mul.w	lr, r0, lr
 8000424:	45a6      	cmp	lr, r4
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x8c>
 8000428:	193c      	adds	r4, r7, r4
 800042a:	f100 33ff 	add.w	r3, r0, #4294967295
 800042e:	f080 8105 	bcs.w	800063c <__udivmoddi4+0x28c>
 8000432:	45a6      	cmp	lr, r4
 8000434:	f240 8102 	bls.w	800063c <__udivmoddi4+0x28c>
 8000438:	3802      	subs	r0, #2
 800043a:	443c      	add	r4, r7
 800043c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	2600      	movs	r6, #0
 8000446:	b11d      	cbz	r5, 8000450 <__udivmoddi4+0xa0>
 8000448:	40d4      	lsrs	r4, r2
 800044a:	2300      	movs	r3, #0
 800044c:	e9c5 4300 	strd	r4, r3, [r5]
 8000450:	4631      	mov	r1, r6
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	b902      	cbnz	r2, 800045a <__udivmoddi4+0xaa>
 8000458:	deff      	udf	#255	; 0xff
 800045a:	fab2 f282 	clz	r2, r2
 800045e:	2a00      	cmp	r2, #0
 8000460:	d150      	bne.n	8000504 <__udivmoddi4+0x154>
 8000462:	1bcb      	subs	r3, r1, r7
 8000464:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000468:	fa1f f887 	uxth.w	r8, r7
 800046c:	2601      	movs	r6, #1
 800046e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000472:	0c21      	lsrs	r1, r4, #16
 8000474:	fb0e 331c 	mls	r3, lr, ip, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb08 f30c 	mul.w	r3, r8, ip
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0xe4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f10c 30ff 	add.w	r0, ip, #4294967295
 800048a:	d202      	bcs.n	8000492 <__udivmoddi4+0xe2>
 800048c:	428b      	cmp	r3, r1
 800048e:	f200 80e9 	bhi.w	8000664 <__udivmoddi4+0x2b4>
 8000492:	4684      	mov	ip, r0
 8000494:	1ac9      	subs	r1, r1, r3
 8000496:	b2a3      	uxth	r3, r4
 8000498:	fbb1 f0fe 	udiv	r0, r1, lr
 800049c:	fb0e 1110 	mls	r1, lr, r0, r1
 80004a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004a4:	fb08 f800 	mul.w	r8, r8, r0
 80004a8:	45a0      	cmp	r8, r4
 80004aa:	d907      	bls.n	80004bc <__udivmoddi4+0x10c>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b2:	d202      	bcs.n	80004ba <__udivmoddi4+0x10a>
 80004b4:	45a0      	cmp	r8, r4
 80004b6:	f200 80d9 	bhi.w	800066c <__udivmoddi4+0x2bc>
 80004ba:	4618      	mov	r0, r3
 80004bc:	eba4 0408 	sub.w	r4, r4, r8
 80004c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004c4:	e7bf      	b.n	8000446 <__udivmoddi4+0x96>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d909      	bls.n	80004de <__udivmoddi4+0x12e>
 80004ca:	2d00      	cmp	r5, #0
 80004cc:	f000 80b1 	beq.w	8000632 <__udivmoddi4+0x282>
 80004d0:	2600      	movs	r6, #0
 80004d2:	e9c5 0100 	strd	r0, r1, [r5]
 80004d6:	4630      	mov	r0, r6
 80004d8:	4631      	mov	r1, r6
 80004da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004de:	fab3 f683 	clz	r6, r3
 80004e2:	2e00      	cmp	r6, #0
 80004e4:	d14a      	bne.n	800057c <__udivmoddi4+0x1cc>
 80004e6:	428b      	cmp	r3, r1
 80004e8:	d302      	bcc.n	80004f0 <__udivmoddi4+0x140>
 80004ea:	4282      	cmp	r2, r0
 80004ec:	f200 80b8 	bhi.w	8000660 <__udivmoddi4+0x2b0>
 80004f0:	1a84      	subs	r4, r0, r2
 80004f2:	eb61 0103 	sbc.w	r1, r1, r3
 80004f6:	2001      	movs	r0, #1
 80004f8:	468c      	mov	ip, r1
 80004fa:	2d00      	cmp	r5, #0
 80004fc:	d0a8      	beq.n	8000450 <__udivmoddi4+0xa0>
 80004fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000502:	e7a5      	b.n	8000450 <__udivmoddi4+0xa0>
 8000504:	f1c2 0320 	rsb	r3, r2, #32
 8000508:	fa20 f603 	lsr.w	r6, r0, r3
 800050c:	4097      	lsls	r7, r2
 800050e:	fa01 f002 	lsl.w	r0, r1, r2
 8000512:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000516:	40d9      	lsrs	r1, r3
 8000518:	4330      	orrs	r0, r6
 800051a:	0c03      	lsrs	r3, r0, #16
 800051c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000520:	fa1f f887 	uxth.w	r8, r7
 8000524:	fb0e 1116 	mls	r1, lr, r6, r1
 8000528:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800052c:	fb06 f108 	mul.w	r1, r6, r8
 8000530:	4299      	cmp	r1, r3
 8000532:	fa04 f402 	lsl.w	r4, r4, r2
 8000536:	d909      	bls.n	800054c <__udivmoddi4+0x19c>
 8000538:	18fb      	adds	r3, r7, r3
 800053a:	f106 3cff 	add.w	ip, r6, #4294967295
 800053e:	f080 808d 	bcs.w	800065c <__udivmoddi4+0x2ac>
 8000542:	4299      	cmp	r1, r3
 8000544:	f240 808a 	bls.w	800065c <__udivmoddi4+0x2ac>
 8000548:	3e02      	subs	r6, #2
 800054a:	443b      	add	r3, r7
 800054c:	1a5b      	subs	r3, r3, r1
 800054e:	b281      	uxth	r1, r0
 8000550:	fbb3 f0fe 	udiv	r0, r3, lr
 8000554:	fb0e 3310 	mls	r3, lr, r0, r3
 8000558:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055c:	fb00 f308 	mul.w	r3, r0, r8
 8000560:	428b      	cmp	r3, r1
 8000562:	d907      	bls.n	8000574 <__udivmoddi4+0x1c4>
 8000564:	1879      	adds	r1, r7, r1
 8000566:	f100 3cff 	add.w	ip, r0, #4294967295
 800056a:	d273      	bcs.n	8000654 <__udivmoddi4+0x2a4>
 800056c:	428b      	cmp	r3, r1
 800056e:	d971      	bls.n	8000654 <__udivmoddi4+0x2a4>
 8000570:	3802      	subs	r0, #2
 8000572:	4439      	add	r1, r7
 8000574:	1acb      	subs	r3, r1, r3
 8000576:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800057a:	e778      	b.n	800046e <__udivmoddi4+0xbe>
 800057c:	f1c6 0c20 	rsb	ip, r6, #32
 8000580:	fa03 f406 	lsl.w	r4, r3, r6
 8000584:	fa22 f30c 	lsr.w	r3, r2, ip
 8000588:	431c      	orrs	r4, r3
 800058a:	fa20 f70c 	lsr.w	r7, r0, ip
 800058e:	fa01 f306 	lsl.w	r3, r1, r6
 8000592:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000596:	fa21 f10c 	lsr.w	r1, r1, ip
 800059a:	431f      	orrs	r7, r3
 800059c:	0c3b      	lsrs	r3, r7, #16
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fa1f f884 	uxth.w	r8, r4
 80005a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005ae:	fb09 fa08 	mul.w	sl, r9, r8
 80005b2:	458a      	cmp	sl, r1
 80005b4:	fa02 f206 	lsl.w	r2, r2, r6
 80005b8:	fa00 f306 	lsl.w	r3, r0, r6
 80005bc:	d908      	bls.n	80005d0 <__udivmoddi4+0x220>
 80005be:	1861      	adds	r1, r4, r1
 80005c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005c4:	d248      	bcs.n	8000658 <__udivmoddi4+0x2a8>
 80005c6:	458a      	cmp	sl, r1
 80005c8:	d946      	bls.n	8000658 <__udivmoddi4+0x2a8>
 80005ca:	f1a9 0902 	sub.w	r9, r9, #2
 80005ce:	4421      	add	r1, r4
 80005d0:	eba1 010a 	sub.w	r1, r1, sl
 80005d4:	b2bf      	uxth	r7, r7
 80005d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005da:	fb0e 1110 	mls	r1, lr, r0, r1
 80005de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005e2:	fb00 f808 	mul.w	r8, r0, r8
 80005e6:	45b8      	cmp	r8, r7
 80005e8:	d907      	bls.n	80005fa <__udivmoddi4+0x24a>
 80005ea:	19e7      	adds	r7, r4, r7
 80005ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80005f0:	d22e      	bcs.n	8000650 <__udivmoddi4+0x2a0>
 80005f2:	45b8      	cmp	r8, r7
 80005f4:	d92c      	bls.n	8000650 <__udivmoddi4+0x2a0>
 80005f6:	3802      	subs	r0, #2
 80005f8:	4427      	add	r7, r4
 80005fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80005fe:	eba7 0708 	sub.w	r7, r7, r8
 8000602:	fba0 8902 	umull	r8, r9, r0, r2
 8000606:	454f      	cmp	r7, r9
 8000608:	46c6      	mov	lr, r8
 800060a:	4649      	mov	r1, r9
 800060c:	d31a      	bcc.n	8000644 <__udivmoddi4+0x294>
 800060e:	d017      	beq.n	8000640 <__udivmoddi4+0x290>
 8000610:	b15d      	cbz	r5, 800062a <__udivmoddi4+0x27a>
 8000612:	ebb3 020e 	subs.w	r2, r3, lr
 8000616:	eb67 0701 	sbc.w	r7, r7, r1
 800061a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800061e:	40f2      	lsrs	r2, r6
 8000620:	ea4c 0202 	orr.w	r2, ip, r2
 8000624:	40f7      	lsrs	r7, r6
 8000626:	e9c5 2700 	strd	r2, r7, [r5]
 800062a:	2600      	movs	r6, #0
 800062c:	4631      	mov	r1, r6
 800062e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000632:	462e      	mov	r6, r5
 8000634:	4628      	mov	r0, r5
 8000636:	e70b      	b.n	8000450 <__udivmoddi4+0xa0>
 8000638:	4606      	mov	r6, r0
 800063a:	e6e9      	b.n	8000410 <__udivmoddi4+0x60>
 800063c:	4618      	mov	r0, r3
 800063e:	e6fd      	b.n	800043c <__udivmoddi4+0x8c>
 8000640:	4543      	cmp	r3, r8
 8000642:	d2e5      	bcs.n	8000610 <__udivmoddi4+0x260>
 8000644:	ebb8 0e02 	subs.w	lr, r8, r2
 8000648:	eb69 0104 	sbc.w	r1, r9, r4
 800064c:	3801      	subs	r0, #1
 800064e:	e7df      	b.n	8000610 <__udivmoddi4+0x260>
 8000650:	4608      	mov	r0, r1
 8000652:	e7d2      	b.n	80005fa <__udivmoddi4+0x24a>
 8000654:	4660      	mov	r0, ip
 8000656:	e78d      	b.n	8000574 <__udivmoddi4+0x1c4>
 8000658:	4681      	mov	r9, r0
 800065a:	e7b9      	b.n	80005d0 <__udivmoddi4+0x220>
 800065c:	4666      	mov	r6, ip
 800065e:	e775      	b.n	800054c <__udivmoddi4+0x19c>
 8000660:	4630      	mov	r0, r6
 8000662:	e74a      	b.n	80004fa <__udivmoddi4+0x14a>
 8000664:	f1ac 0c02 	sub.w	ip, ip, #2
 8000668:	4439      	add	r1, r7
 800066a:	e713      	b.n	8000494 <__udivmoddi4+0xe4>
 800066c:	3802      	subs	r0, #2
 800066e:	443c      	add	r4, r7
 8000670:	e724      	b.n	80004bc <__udivmoddi4+0x10c>
 8000672:	bf00      	nop

08000674 <__aeabi_idiv0>:
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b084      	sub	sp, #16
 800067c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800067e:	f000 faa1 	bl	8000bc4 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000682:	4b40      	ldr	r3, [pc, #256]	; (8000784 <main+0x10c>)
 8000684:	695b      	ldr	r3, [r3, #20]
 8000686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800068a:	2b00      	cmp	r3, #0
 800068c:	d11b      	bne.n	80006c6 <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800068e:	f3bf 8f4f 	dsb	sy
}
 8000692:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000694:	f3bf 8f6f 	isb	sy
}
 8000698:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800069a:	4b3a      	ldr	r3, [pc, #232]	; (8000784 <main+0x10c>)
 800069c:	2200      	movs	r2, #0
 800069e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80006a2:	f3bf 8f4f 	dsb	sy
}
 80006a6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006a8:	f3bf 8f6f 	isb	sy
}
 80006ac:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80006ae:	4b35      	ldr	r3, [pc, #212]	; (8000784 <main+0x10c>)
 80006b0:	695b      	ldr	r3, [r3, #20]
 80006b2:	4a34      	ldr	r2, [pc, #208]	; (8000784 <main+0x10c>)
 80006b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006b8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80006ba:	f3bf 8f4f 	dsb	sy
}
 80006be:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006c0:	f3bf 8f6f 	isb	sy
}
 80006c4:	e000      	b.n	80006c8 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80006c6:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80006c8:	4b2e      	ldr	r3, [pc, #184]	; (8000784 <main+0x10c>)
 80006ca:	695b      	ldr	r3, [r3, #20]
 80006cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d138      	bne.n	8000746 <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80006d4:	4b2b      	ldr	r3, [pc, #172]	; (8000784 <main+0x10c>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80006dc:	f3bf 8f4f 	dsb	sy
}
 80006e0:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80006e2:	4b28      	ldr	r3, [pc, #160]	; (8000784 <main+0x10c>)
 80006e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80006e8:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	0b5b      	lsrs	r3, r3, #13
 80006ee:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80006f2:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	08db      	lsrs	r3, r3, #3
 80006f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80006fc:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80006fe:	68bb      	ldr	r3, [r7, #8]
 8000700:	015a      	lsls	r2, r3, #5
 8000702:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000706:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000708:	687a      	ldr	r2, [r7, #4]
 800070a:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800070c:	491d      	ldr	r1, [pc, #116]	; (8000784 <main+0x10c>)
 800070e:	4313      	orrs	r3, r2
 8000710:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	1e5a      	subs	r2, r3, #1
 8000718:	607a      	str	r2, [r7, #4]
 800071a:	2b00      	cmp	r3, #0
 800071c:	d1ef      	bne.n	80006fe <main+0x86>
    } while(sets-- != 0U);
 800071e:	68bb      	ldr	r3, [r7, #8]
 8000720:	1e5a      	subs	r2, r3, #1
 8000722:	60ba      	str	r2, [r7, #8]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d1e5      	bne.n	80006f4 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000728:	f3bf 8f4f 	dsb	sy
}
 800072c:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800072e:	4b15      	ldr	r3, [pc, #84]	; (8000784 <main+0x10c>)
 8000730:	695b      	ldr	r3, [r3, #20]
 8000732:	4a14      	ldr	r2, [pc, #80]	; (8000784 <main+0x10c>)
 8000734:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000738:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800073a:	f3bf 8f4f 	dsb	sy
}
 800073e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000740:	f3bf 8f6f 	isb	sy
}
 8000744:	e000      	b.n	8000748 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000746:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000748:	f001 f898 	bl	800187c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800074c:	f000 f820 	bl	8000790 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000750:	f000 f916 	bl	8000980 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000754:	f000 f896 	bl	8000884 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000758:	f000 f8e0 	bl	800091c <MX_USB_OTG_FS_PCD_Init>
  MX_LWIP_Init();
 800075c:	f007 faac 	bl	8007cb8 <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */
  tcp_echoserver_init();
 8000760:	f000 fd06 	bl	8001170 <tcp_echoserver_init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	   if (Timer_sys[1] == 0)
 8000764:	4b08      	ldr	r3, [pc, #32]	; (8000788 <main+0x110>)
 8000766:	885b      	ldrh	r3, [r3, #2]
 8000768:	b29b      	uxth	r3, r3
 800076a:	2b00      	cmp	r3, #0
 800076c:	d106      	bne.n	800077c <main+0x104>
	  {
		 Timer_sys[1] = 200;
 800076e:	4b06      	ldr	r3, [pc, #24]	; (8000788 <main+0x110>)
 8000770:	22c8      	movs	r2, #200	; 0xc8
 8000772:	805a      	strh	r2, [r3, #2]
		 HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 8000774:	2102      	movs	r1, #2
 8000776:	4805      	ldr	r0, [pc, #20]	; (800078c <main+0x114>)
 8000778:	f003 fb15 	bl	8003da6 <HAL_GPIO_TogglePin>
	  }
	  MX_LWIP_Process();
 800077c:	f007 fbe8 	bl	8007f50 <MX_LWIP_Process>
	   if (Timer_sys[1] == 0)
 8000780:	e7f0      	b.n	8000764 <main+0xec>
 8000782:	bf00      	nop
 8000784:	e000ed00 	.word	0xe000ed00
 8000788:	240006d4 	.word	0x240006d4
 800078c:	58021000 	.word	0x58021000

08000790 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b09c      	sub	sp, #112	; 0x70
 8000794:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000796:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800079a:	224c      	movs	r2, #76	; 0x4c
 800079c:	2100      	movs	r1, #0
 800079e:	4618      	mov	r0, r3
 80007a0:	f012 fcf0 	bl	8013184 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007a4:	1d3b      	adds	r3, r7, #4
 80007a6:	2220      	movs	r2, #32
 80007a8:	2100      	movs	r1, #0
 80007aa:	4618      	mov	r0, r3
 80007ac:	f012 fcea 	bl	8013184 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80007b0:	2002      	movs	r0, #2
 80007b2:	f003 fc5b 	bl	800406c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007b6:	2300      	movs	r3, #0
 80007b8:	603b      	str	r3, [r7, #0]
 80007ba:	4b30      	ldr	r3, [pc, #192]	; (800087c <SystemClock_Config+0xec>)
 80007bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007be:	4a2f      	ldr	r2, [pc, #188]	; (800087c <SystemClock_Config+0xec>)
 80007c0:	f023 0301 	bic.w	r3, r3, #1
 80007c4:	62d3      	str	r3, [r2, #44]	; 0x2c
 80007c6:	4b2d      	ldr	r3, [pc, #180]	; (800087c <SystemClock_Config+0xec>)
 80007c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007ca:	f003 0301 	and.w	r3, r3, #1
 80007ce:	603b      	str	r3, [r7, #0]
 80007d0:	4b2b      	ldr	r3, [pc, #172]	; (8000880 <SystemClock_Config+0xf0>)
 80007d2:	699b      	ldr	r3, [r3, #24]
 80007d4:	4a2a      	ldr	r2, [pc, #168]	; (8000880 <SystemClock_Config+0xf0>)
 80007d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007da:	6193      	str	r3, [r2, #24]
 80007dc:	4b28      	ldr	r3, [pc, #160]	; (8000880 <SystemClock_Config+0xf0>)
 80007de:	699b      	ldr	r3, [r3, #24]
 80007e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007e4:	603b      	str	r3, [r7, #0]
 80007e6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007e8:	bf00      	nop
 80007ea:	4b25      	ldr	r3, [pc, #148]	; (8000880 <SystemClock_Config+0xf0>)
 80007ec:	699b      	ldr	r3, [r3, #24]
 80007ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80007f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80007f6:	d1f8      	bne.n	80007ea <SystemClock_Config+0x5a>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007f8:	2301      	movs	r3, #1
 80007fa:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007fc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000800:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000802:	2302      	movs	r3, #2
 8000804:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000806:	2302      	movs	r3, #2
 8000808:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800080a:	2301      	movs	r3, #1
 800080c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 100;
 800080e:	2364      	movs	r3, #100	; 0x64
 8000810:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000812:	2302      	movs	r3, #2
 8000814:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 13;
 8000816:	230d      	movs	r3, #13
 8000818:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800081a:	2302      	movs	r3, #2
 800081c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800081e:	230c      	movs	r3, #12
 8000820:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000822:	2300      	movs	r3, #0
 8000824:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000826:	2300      	movs	r3, #0
 8000828:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800082a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800082e:	4618      	mov	r0, r3
 8000830:	f003 fc66 	bl	8004100 <HAL_RCC_OscConfig>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800083a:	f000 fa0d 	bl	8000c58 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800083e:	233f      	movs	r3, #63	; 0x3f
 8000840:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000842:	2303      	movs	r3, #3
 8000844:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000846:	2300      	movs	r3, #0
 8000848:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800084a:	2308      	movs	r3, #8
 800084c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800084e:	2340      	movs	r3, #64	; 0x40
 8000850:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000852:	2340      	movs	r3, #64	; 0x40
 8000854:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000856:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800085a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800085c:	2340      	movs	r3, #64	; 0x40
 800085e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000860:	1d3b      	adds	r3, r7, #4
 8000862:	2102      	movs	r1, #2
 8000864:	4618      	mov	r0, r3
 8000866:	f004 f85b 	bl	8004920 <HAL_RCC_ClockConfig>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000870:	f000 f9f2 	bl	8000c58 <Error_Handler>
  }
}
 8000874:	bf00      	nop
 8000876:	3770      	adds	r7, #112	; 0x70
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	58000400 	.word	0x58000400
 8000880:	58024800 	.word	0x58024800

08000884 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000888:	4b22      	ldr	r3, [pc, #136]	; (8000914 <MX_USART3_UART_Init+0x90>)
 800088a:	4a23      	ldr	r2, [pc, #140]	; (8000918 <MX_USART3_UART_Init+0x94>)
 800088c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800088e:	4b21      	ldr	r3, [pc, #132]	; (8000914 <MX_USART3_UART_Init+0x90>)
 8000890:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000894:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000896:	4b1f      	ldr	r3, [pc, #124]	; (8000914 <MX_USART3_UART_Init+0x90>)
 8000898:	2200      	movs	r2, #0
 800089a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800089c:	4b1d      	ldr	r3, [pc, #116]	; (8000914 <MX_USART3_UART_Init+0x90>)
 800089e:	2200      	movs	r2, #0
 80008a0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008a2:	4b1c      	ldr	r3, [pc, #112]	; (8000914 <MX_USART3_UART_Init+0x90>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008a8:	4b1a      	ldr	r3, [pc, #104]	; (8000914 <MX_USART3_UART_Init+0x90>)
 80008aa:	220c      	movs	r2, #12
 80008ac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ae:	4b19      	ldr	r3, [pc, #100]	; (8000914 <MX_USART3_UART_Init+0x90>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008b4:	4b17      	ldr	r3, [pc, #92]	; (8000914 <MX_USART3_UART_Init+0x90>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008ba:	4b16      	ldr	r3, [pc, #88]	; (8000914 <MX_USART3_UART_Init+0x90>)
 80008bc:	2200      	movs	r2, #0
 80008be:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008c0:	4b14      	ldr	r3, [pc, #80]	; (8000914 <MX_USART3_UART_Init+0x90>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008c6:	4b13      	ldr	r3, [pc, #76]	; (8000914 <MX_USART3_UART_Init+0x90>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008cc:	4811      	ldr	r0, [pc, #68]	; (8000914 <MX_USART3_UART_Init+0x90>)
 80008ce:	f005 ff15 	bl	80066fc <HAL_UART_Init>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80008d8:	f000 f9be 	bl	8000c58 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008dc:	2100      	movs	r1, #0
 80008de:	480d      	ldr	r0, [pc, #52]	; (8000914 <MX_USART3_UART_Init+0x90>)
 80008e0:	f006 fe62 	bl	80075a8 <HAL_UARTEx_SetTxFifoThreshold>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80008ea:	f000 f9b5 	bl	8000c58 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008ee:	2100      	movs	r1, #0
 80008f0:	4808      	ldr	r0, [pc, #32]	; (8000914 <MX_USART3_UART_Init+0x90>)
 80008f2:	f006 fe97 	bl	8007624 <HAL_UARTEx_SetRxFifoThreshold>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80008fc:	f000 f9ac 	bl	8000c58 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000900:	4804      	ldr	r0, [pc, #16]	; (8000914 <MX_USART3_UART_Init+0x90>)
 8000902:	f006 fe18 	bl	8007536 <HAL_UARTEx_DisableFifoMode>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800090c:	f000 f9a4 	bl	8000c58 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000910:	bf00      	nop
 8000912:	bd80      	pop	{r7, pc}
 8000914:	24000234 	.word	0x24000234
 8000918:	40004800 	.word	0x40004800

0800091c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000920:	4b15      	ldr	r3, [pc, #84]	; (8000978 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000922:	4a16      	ldr	r2, [pc, #88]	; (800097c <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000924:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000926:	4b14      	ldr	r3, [pc, #80]	; (8000978 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000928:	2209      	movs	r2, #9
 800092a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800092c:	4b12      	ldr	r3, [pc, #72]	; (8000978 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800092e:	2202      	movs	r2, #2
 8000930:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000932:	4b11      	ldr	r3, [pc, #68]	; (8000978 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000934:	2200      	movs	r2, #0
 8000936:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000938:	4b0f      	ldr	r3, [pc, #60]	; (8000978 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800093a:	2202      	movs	r2, #2
 800093c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800093e:	4b0e      	ldr	r3, [pc, #56]	; (8000978 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000940:	2201      	movs	r2, #1
 8000942:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000944:	4b0c      	ldr	r3, [pc, #48]	; (8000978 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000946:	2200      	movs	r2, #0
 8000948:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800094a:	4b0b      	ldr	r3, [pc, #44]	; (8000978 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800094c:	2200      	movs	r2, #0
 800094e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000950:	4b09      	ldr	r3, [pc, #36]	; (8000978 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000952:	2201      	movs	r2, #1
 8000954:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000956:	4b08      	ldr	r3, [pc, #32]	; (8000978 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000958:	2201      	movs	r2, #1
 800095a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800095c:	4b06      	ldr	r3, [pc, #24]	; (8000978 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800095e:	2200      	movs	r2, #0
 8000960:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000962:	4805      	ldr	r0, [pc, #20]	; (8000978 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000964:	f003 fa39 	bl	8003dda <HAL_PCD_Init>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 800096e:	f000 f973 	bl	8000c58 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000972:	bf00      	nop
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	240002c8 	.word	0x240002c8
 800097c:	40080000 	.word	0x40080000

08000980 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b08c      	sub	sp, #48	; 0x30
 8000984:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000986:	f107 031c 	add.w	r3, r7, #28
 800098a:	2200      	movs	r2, #0
 800098c:	601a      	str	r2, [r3, #0]
 800098e:	605a      	str	r2, [r3, #4]
 8000990:	609a      	str	r2, [r3, #8]
 8000992:	60da      	str	r2, [r3, #12]
 8000994:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000996:	4b60      	ldr	r3, [pc, #384]	; (8000b18 <MX_GPIO_Init+0x198>)
 8000998:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800099c:	4a5e      	ldr	r2, [pc, #376]	; (8000b18 <MX_GPIO_Init+0x198>)
 800099e:	f043 0304 	orr.w	r3, r3, #4
 80009a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009a6:	4b5c      	ldr	r3, [pc, #368]	; (8000b18 <MX_GPIO_Init+0x198>)
 80009a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009ac:	f003 0304 	and.w	r3, r3, #4
 80009b0:	61bb      	str	r3, [r7, #24]
 80009b2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009b4:	4b58      	ldr	r3, [pc, #352]	; (8000b18 <MX_GPIO_Init+0x198>)
 80009b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009ba:	4a57      	ldr	r2, [pc, #348]	; (8000b18 <MX_GPIO_Init+0x198>)
 80009bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009c4:	4b54      	ldr	r3, [pc, #336]	; (8000b18 <MX_GPIO_Init+0x198>)
 80009c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009ce:	617b      	str	r3, [r7, #20]
 80009d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d2:	4b51      	ldr	r3, [pc, #324]	; (8000b18 <MX_GPIO_Init+0x198>)
 80009d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d8:	4a4f      	ldr	r2, [pc, #316]	; (8000b18 <MX_GPIO_Init+0x198>)
 80009da:	f043 0301 	orr.w	r3, r3, #1
 80009de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009e2:	4b4d      	ldr	r3, [pc, #308]	; (8000b18 <MX_GPIO_Init+0x198>)
 80009e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e8:	f003 0301 	and.w	r3, r3, #1
 80009ec:	613b      	str	r3, [r7, #16]
 80009ee:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009f0:	4b49      	ldr	r3, [pc, #292]	; (8000b18 <MX_GPIO_Init+0x198>)
 80009f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009f6:	4a48      	ldr	r2, [pc, #288]	; (8000b18 <MX_GPIO_Init+0x198>)
 80009f8:	f043 0302 	orr.w	r3, r3, #2
 80009fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a00:	4b45      	ldr	r3, [pc, #276]	; (8000b18 <MX_GPIO_Init+0x198>)
 8000a02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a06:	f003 0302 	and.w	r3, r3, #2
 8000a0a:	60fb      	str	r3, [r7, #12]
 8000a0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a0e:	4b42      	ldr	r3, [pc, #264]	; (8000b18 <MX_GPIO_Init+0x198>)
 8000a10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a14:	4a40      	ldr	r2, [pc, #256]	; (8000b18 <MX_GPIO_Init+0x198>)
 8000a16:	f043 0308 	orr.w	r3, r3, #8
 8000a1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a1e:	4b3e      	ldr	r3, [pc, #248]	; (8000b18 <MX_GPIO_Init+0x198>)
 8000a20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a24:	f003 0308 	and.w	r3, r3, #8
 8000a28:	60bb      	str	r3, [r7, #8]
 8000a2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a2c:	4b3a      	ldr	r3, [pc, #232]	; (8000b18 <MX_GPIO_Init+0x198>)
 8000a2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a32:	4a39      	ldr	r2, [pc, #228]	; (8000b18 <MX_GPIO_Init+0x198>)
 8000a34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a3c:	4b36      	ldr	r3, [pc, #216]	; (8000b18 <MX_GPIO_Init+0x198>)
 8000a3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a46:	607b      	str	r3, [r7, #4]
 8000a48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a4a:	4b33      	ldr	r3, [pc, #204]	; (8000b18 <MX_GPIO_Init+0x198>)
 8000a4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a50:	4a31      	ldr	r2, [pc, #196]	; (8000b18 <MX_GPIO_Init+0x198>)
 8000a52:	f043 0310 	orr.w	r3, r3, #16
 8000a56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a5a:	4b2f      	ldr	r3, [pc, #188]	; (8000b18 <MX_GPIO_Init+0x198>)
 8000a5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a60:	f003 0310 	and.w	r3, r3, #16
 8000a64:	603b      	str	r3, [r7, #0]
 8000a66:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000a68:	2200      	movs	r2, #0
 8000a6a:	f244 0101 	movw	r1, #16385	; 0x4001
 8000a6e:	482b      	ldr	r0, [pc, #172]	; (8000b1c <MX_GPIO_Init+0x19c>)
 8000a70:	f003 f980 	bl	8003d74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000a74:	2200      	movs	r2, #0
 8000a76:	2140      	movs	r1, #64	; 0x40
 8000a78:	4829      	ldr	r0, [pc, #164]	; (8000b20 <MX_GPIO_Init+0x1a0>)
 8000a7a:	f003 f97b 	bl	8003d74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a7e:	2200      	movs	r2, #0
 8000a80:	2102      	movs	r1, #2
 8000a82:	4828      	ldr	r0, [pc, #160]	; (8000b24 <MX_GPIO_Init+0x1a4>)
 8000a84:	f003 f976 	bl	8003d74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000a88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a8e:	4b26      	ldr	r3, [pc, #152]	; (8000b28 <MX_GPIO_Init+0x1a8>)
 8000a90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a92:	2300      	movs	r3, #0
 8000a94:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000a96:	f107 031c 	add.w	r3, r7, #28
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	4823      	ldr	r0, [pc, #140]	; (8000b2c <MX_GPIO_Init+0x1ac>)
 8000a9e:	f002 ffb9 	bl	8003a14 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000aa2:	f244 0301 	movw	r3, #16385	; 0x4001
 8000aa6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aac:	2300      	movs	r3, #0
 8000aae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ab4:	f107 031c 	add.w	r3, r7, #28
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4818      	ldr	r0, [pc, #96]	; (8000b1c <MX_GPIO_Init+0x19c>)
 8000abc:	f002 ffaa 	bl	8003a14 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000ac0:	2340      	movs	r3, #64	; 0x40
 8000ac2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000acc:	2300      	movs	r3, #0
 8000ace:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000ad0:	f107 031c 	add.w	r3, r7, #28
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	4812      	ldr	r0, [pc, #72]	; (8000b20 <MX_GPIO_Init+0x1a0>)
 8000ad8:	f002 ff9c 	bl	8003a14 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000adc:	2380      	movs	r3, #128	; 0x80
 8000ade:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ae8:	f107 031c 	add.w	r3, r7, #28
 8000aec:	4619      	mov	r1, r3
 8000aee:	480c      	ldr	r0, [pc, #48]	; (8000b20 <MX_GPIO_Init+0x1a0>)
 8000af0:	f002 ff90 	bl	8003a14 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000af4:	2302      	movs	r3, #2
 8000af6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af8:	2301      	movs	r3, #1
 8000afa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afc:	2300      	movs	r3, #0
 8000afe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b00:	2300      	movs	r3, #0
 8000b02:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b04:	f107 031c 	add.w	r3, r7, #28
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4806      	ldr	r0, [pc, #24]	; (8000b24 <MX_GPIO_Init+0x1a4>)
 8000b0c:	f002 ff82 	bl	8003a14 <HAL_GPIO_Init>

}
 8000b10:	bf00      	nop
 8000b12:	3730      	adds	r7, #48	; 0x30
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	58024400 	.word	0x58024400
 8000b1c:	58020400 	.word	0x58020400
 8000b20:	58021800 	.word	0x58021800
 8000b24:	58021000 	.word	0x58021000
 8000b28:	11110000 	.word	0x11110000
 8000b2c:	58020800 	.word	0x58020800

08000b30 <HAL_SYSTICK_Callback>:

/* USER CODE BEGIN 4 */

void HAL_SYSTICK_Callback(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b083      	sub	sp, #12
 8000b34:	af00      	add	r7, sp, #0
	uint16_t t_timer;
	uint8_t i;

	Licznikms++;                        /* increment counter necessary in Delay() */
 8000b36:	4b1e      	ldr	r3, [pc, #120]	; (8000bb0 <HAL_SYSTICK_Callback+0x80>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	3301      	adds	r3, #1
 8000b3c:	4a1c      	ldr	r2, [pc, #112]	; (8000bb0 <HAL_SYSTICK_Callback+0x80>)
 8000b3e:	6013      	str	r3, [r2, #0]
	uwTickms++;
 8000b40:	4b1c      	ldr	r3, [pc, #112]	; (8000bb4 <HAL_SYSTICK_Callback+0x84>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	3301      	adds	r3, #1
 8000b46:	4a1b      	ldr	r2, [pc, #108]	; (8000bb4 <HAL_SYSTICK_Callback+0x84>)
 8000b48:	6013      	str	r3, [r2, #0]
	Tickms++;
 8000b4a:	4b1b      	ldr	r3, [pc, #108]	; (8000bb8 <HAL_SYSTICK_Callback+0x88>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	3301      	adds	r3, #1
 8000b50:	4a19      	ldr	r2, [pc, #100]	; (8000bb8 <HAL_SYSTICK_Callback+0x88>)
 8000b52:	6013      	str	r3, [r2, #0]

	if (Tickms >= 1000)
 8000b54:	4b18      	ldr	r3, [pc, #96]	; (8000bb8 <HAL_SYSTICK_Callback+0x88>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000b5c:	d307      	bcc.n	8000b6e <HAL_SYSTICK_Callback+0x3e>
	{
		Tickms = 0;
 8000b5e:	4b16      	ldr	r3, [pc, #88]	; (8000bb8 <HAL_SYSTICK_Callback+0x88>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
		//Ticks++;
		g_COUNT_SEC++;
 8000b64:	4b15      	ldr	r3, [pc, #84]	; (8000bbc <HAL_SYSTICK_Callback+0x8c>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	3301      	adds	r3, #1
 8000b6a:	4a14      	ldr	r2, [pc, #80]	; (8000bbc <HAL_SYSTICK_Callback+0x8c>)
 8000b6c:	6013      	str	r3, [r2, #0]
	}

	// obsluga timerow systemowych
	for (i = 0; i< ELEMS(Timer_sys); i++)
 8000b6e:	2300      	movs	r3, #0
 8000b70:	71fb      	strb	r3, [r7, #7]
 8000b72:	e012      	b.n	8000b9a <HAL_SYSTICK_Callback+0x6a>
	{
		t_timer = Timer_sys[i];
 8000b74:	79fb      	ldrb	r3, [r7, #7]
 8000b76:	4a12      	ldr	r2, [pc, #72]	; (8000bc0 <HAL_SYSTICK_Callback+0x90>)
 8000b78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b7c:	80bb      	strh	r3, [r7, #4]
		if (t_timer) Timer_sys[i] = --t_timer;
 8000b7e:	88bb      	ldrh	r3, [r7, #4]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d007      	beq.n	8000b94 <HAL_SYSTICK_Callback+0x64>
 8000b84:	88bb      	ldrh	r3, [r7, #4]
 8000b86:	3b01      	subs	r3, #1
 8000b88:	80bb      	strh	r3, [r7, #4]
 8000b8a:	79fb      	ldrb	r3, [r7, #7]
 8000b8c:	490c      	ldr	r1, [pc, #48]	; (8000bc0 <HAL_SYSTICK_Callback+0x90>)
 8000b8e:	88ba      	ldrh	r2, [r7, #4]
 8000b90:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for (i = 0; i< ELEMS(Timer_sys); i++)
 8000b94:	79fb      	ldrb	r3, [r7, #7]
 8000b96:	3301      	adds	r3, #1
 8000b98:	71fb      	strb	r3, [r7, #7]
 8000b9a:	79fb      	ldrb	r3, [r7, #7]
 8000b9c:	2b05      	cmp	r3, #5
 8000b9e:	d9e9      	bls.n	8000b74 <HAL_SYSTICK_Callback+0x44>

	}
}
 8000ba0:	bf00      	nop
 8000ba2:	bf00      	nop
 8000ba4:	370c      	adds	r7, #12
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	240006e0 	.word	0x240006e0
 8000bb4:	240006d0 	.word	0x240006d0
 8000bb8:	240002c4 	.word	0x240002c4
 8000bbc:	240006e4 	.word	0x240006e4
 8000bc0:	240006d4 	.word	0x240006d4

08000bc4 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b084      	sub	sp, #16
 8000bc8:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000bca:	463b      	mov	r3, r7
 8000bcc:	2200      	movs	r2, #0
 8000bce:	601a      	str	r2, [r3, #0]
 8000bd0:	605a      	str	r2, [r3, #4]
 8000bd2:	609a      	str	r2, [r3, #8]
 8000bd4:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000bd6:	f001 f837 	bl	8001c48 <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000bde:	2300      	movs	r3, #0
 8000be0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 8000be2:	4b1b      	ldr	r3, [pc, #108]	; (8000c50 <MPU_Config+0x8c>)
 8000be4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 8000be6:	230d      	movs	r3, #13
 8000be8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000bea:	2300      	movs	r3, #0
 8000bec:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000bf2:	2303      	movs	r3, #3
 8000bf4:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000c02:	2300      	movs	r3, #0
 8000c04:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000c06:	463b      	mov	r3, r7
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f001 f855 	bl	8001cb8 <HAL_MPU_ConfigRegion>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30044000;
 8000c12:	4b10      	ldr	r3, [pc, #64]	; (8000c54 <MPU_Config+0x90>)
 8000c14:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000c16:	2300      	movs	r3, #0
 8000c18:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	73bb      	strb	r3, [r7, #14]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000c1e:	463b      	mov	r3, r7
 8000c20:	4618      	mov	r0, r3
 8000c22:	f001 f849 	bl	8001cb8 <HAL_MPU_ConfigRegion>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000c26:	2302      	movs	r3, #2
 8000c28:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 8000c2a:	4b09      	ldr	r3, [pc, #36]	; (8000c50 <MPU_Config+0x8c>)
 8000c2c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
 8000c2e:	2307      	movs	r3, #7
 8000c30:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000c32:	2300      	movs	r3, #0
 8000c34:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000c36:	2301      	movs	r3, #1
 8000c38:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000c3a:	463b      	mov	r3, r7
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f001 f83b 	bl	8001cb8 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000c42:	2004      	movs	r0, #4
 8000c44:	f001 f818 	bl	8001c78 <HAL_MPU_Enable>

}
 8000c48:	bf00      	nop
 8000c4a:	3710      	adds	r7, #16
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	30040000 	.word	0x30040000
 8000c54:	30044000 	.word	0x30044000

08000c58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000c5c:	b672      	cpsid	i
}
 8000c5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c60:	e7fe      	b.n	8000c60 <Error_Handler+0x8>
	...

08000c64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c6a:	4b0a      	ldr	r3, [pc, #40]	; (8000c94 <HAL_MspInit+0x30>)
 8000c6c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c70:	4a08      	ldr	r2, [pc, #32]	; (8000c94 <HAL_MspInit+0x30>)
 8000c72:	f043 0302 	orr.w	r3, r3, #2
 8000c76:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000c7a:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <HAL_MspInit+0x30>)
 8000c7c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c80:	f003 0302 	and.w	r3, r3, #2
 8000c84:	607b      	str	r3, [r7, #4]
 8000c86:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c88:	bf00      	nop
 8000c8a:	370c      	adds	r7, #12
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr
 8000c94:	58024400 	.word	0x58024400

08000c98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b0b8      	sub	sp, #224	; 0xe0
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
 8000ca8:	605a      	str	r2, [r3, #4]
 8000caa:	609a      	str	r2, [r3, #8]
 8000cac:	60da      	str	r2, [r3, #12]
 8000cae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cb0:	f107 0310 	add.w	r3, r7, #16
 8000cb4:	22bc      	movs	r2, #188	; 0xbc
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f012 fa63 	bl	8013184 <memset>
  if(huart->Instance==USART3)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	4a25      	ldr	r2, [pc, #148]	; (8000d58 <HAL_UART_MspInit+0xc0>)
 8000cc4:	4293      	cmp	r3, r2
 8000cc6:	d142      	bne.n	8000d4e <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000cc8:	2302      	movs	r3, #2
 8000cca:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cd2:	f107 0310 	add.w	r3, r7, #16
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f004 f9ae 	bl	8005038 <HAL_RCCEx_PeriphCLKConfig>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000ce2:	f7ff ffb9 	bl	8000c58 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ce6:	4b1d      	ldr	r3, [pc, #116]	; (8000d5c <HAL_UART_MspInit+0xc4>)
 8000ce8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000cec:	4a1b      	ldr	r2, [pc, #108]	; (8000d5c <HAL_UART_MspInit+0xc4>)
 8000cee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cf2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000cf6:	4b19      	ldr	r3, [pc, #100]	; (8000d5c <HAL_UART_MspInit+0xc4>)
 8000cf8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000cfc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d00:	60fb      	str	r3, [r7, #12]
 8000d02:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d04:	4b15      	ldr	r3, [pc, #84]	; (8000d5c <HAL_UART_MspInit+0xc4>)
 8000d06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d0a:	4a14      	ldr	r2, [pc, #80]	; (8000d5c <HAL_UART_MspInit+0xc4>)
 8000d0c:	f043 0308 	orr.w	r3, r3, #8
 8000d10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d14:	4b11      	ldr	r3, [pc, #68]	; (8000d5c <HAL_UART_MspInit+0xc4>)
 8000d16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d1a:	f003 0308 	and.w	r3, r3, #8
 8000d1e:	60bb      	str	r3, [r7, #8]
 8000d20:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000d22:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d26:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d30:	2300      	movs	r3, #0
 8000d32:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d36:	2300      	movs	r3, #0
 8000d38:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d3c:	2307      	movs	r3, #7
 8000d3e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d42:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000d46:	4619      	mov	r1, r3
 8000d48:	4805      	ldr	r0, [pc, #20]	; (8000d60 <HAL_UART_MspInit+0xc8>)
 8000d4a:	f002 fe63 	bl	8003a14 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d4e:	bf00      	nop
 8000d50:	37e0      	adds	r7, #224	; 0xe0
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	40004800 	.word	0x40004800
 8000d5c:	58024400 	.word	0x58024400
 8000d60:	58020c00 	.word	0x58020c00

08000d64 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b0b8      	sub	sp, #224	; 0xe0
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d6c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	605a      	str	r2, [r3, #4]
 8000d76:	609a      	str	r2, [r3, #8]
 8000d78:	60da      	str	r2, [r3, #12]
 8000d7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d7c:	f107 0310 	add.w	r3, r7, #16
 8000d80:	22bc      	movs	r2, #188	; 0xbc
 8000d82:	2100      	movs	r1, #0
 8000d84:	4618      	mov	r0, r3
 8000d86:	f012 f9fd 	bl	8013184 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4a2f      	ldr	r2, [pc, #188]	; (8000e4c <HAL_PCD_MspInit+0xe8>)
 8000d90:	4293      	cmp	r3, r2
 8000d92:	d156      	bne.n	8000e42 <HAL_PCD_MspInit+0xde>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000d94:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000d98:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000d9a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000d9e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000da2:	f107 0310 	add.w	r3, r7, #16
 8000da6:	4618      	mov	r0, r3
 8000da8:	f004 f946 	bl	8005038 <HAL_RCCEx_PeriphCLKConfig>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 8000db2:	f7ff ff51 	bl	8000c58 <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8000db6:	f003 f993 	bl	80040e0 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dba:	4b25      	ldr	r3, [pc, #148]	; (8000e50 <HAL_PCD_MspInit+0xec>)
 8000dbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dc0:	4a23      	ldr	r2, [pc, #140]	; (8000e50 <HAL_PCD_MspInit+0xec>)
 8000dc2:	f043 0301 	orr.w	r3, r3, #1
 8000dc6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dca:	4b21      	ldr	r3, [pc, #132]	; (8000e50 <HAL_PCD_MspInit+0xec>)
 8000dcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dd0:	f003 0301 	and.w	r3, r3, #1
 8000dd4:	60fb      	str	r3, [r7, #12]
 8000dd6:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000dd8:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000ddc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de0:	2302      	movs	r3, #2
 8000de2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de6:	2300      	movs	r3, #0
 8000de8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dec:	2300      	movs	r3, #0
 8000dee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000df2:	230a      	movs	r3, #10
 8000df4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	4815      	ldr	r0, [pc, #84]	; (8000e54 <HAL_PCD_MspInit+0xf0>)
 8000e00:	f002 fe08 	bl	8003a14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000e04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e08:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e12:	2300      	movs	r3, #0
 8000e14:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000e18:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	480d      	ldr	r0, [pc, #52]	; (8000e54 <HAL_PCD_MspInit+0xf0>)
 8000e20:	f002 fdf8 	bl	8003a14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000e24:	4b0a      	ldr	r3, [pc, #40]	; (8000e50 <HAL_PCD_MspInit+0xec>)
 8000e26:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e2a:	4a09      	ldr	r2, [pc, #36]	; (8000e50 <HAL_PCD_MspInit+0xec>)
 8000e2c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000e30:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000e34:	4b06      	ldr	r3, [pc, #24]	; (8000e50 <HAL_PCD_MspInit+0xec>)
 8000e36:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e3a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000e3e:	60bb      	str	r3, [r7, #8]
 8000e40:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000e42:	bf00      	nop
 8000e44:	37e0      	adds	r7, #224	; 0xe0
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	40080000 	.word	0x40080000
 8000e50:	58024400 	.word	0x58024400
 8000e54:	58020000 	.word	0x58020000

08000e58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e5c:	e7fe      	b.n	8000e5c <NMI_Handler+0x4>

08000e5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e5e:	b480      	push	{r7}
 8000e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e62:	e7fe      	b.n	8000e62 <HardFault_Handler+0x4>

08000e64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e68:	e7fe      	b.n	8000e68 <MemManage_Handler+0x4>

08000e6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e6a:	b480      	push	{r7}
 8000e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e6e:	e7fe      	b.n	8000e6e <BusFault_Handler+0x4>

08000e70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e74:	e7fe      	b.n	8000e74 <UsageFault_Handler+0x4>

08000e76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e76:	b480      	push	{r7}
 8000e78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e7a:	bf00      	nop
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr

08000e84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e88:	bf00      	nop
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr

08000e92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e92:	b480      	push	{r7}
 8000e94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e96:	bf00      	nop
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr

08000ea0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ea4:	f000 fd5c 	bl	8001960 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 8000ea8:	f000 ff4a 	bl	8001d40 <HAL_SYSTICK_IRQHandler>

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eac:	bf00      	nop
 8000eae:	bd80      	pop	{r7, pc}

08000eb0 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000eb4:	4802      	ldr	r0, [pc, #8]	; (8000ec0 <ETH_IRQHandler+0x10>)
 8000eb6:	f001 fbd1 	bl	800265c <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000eba:	bf00      	nop
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	24000828 	.word	0x24000828

08000ec4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
	return 1;
 8000ec8:	2301      	movs	r3, #1
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr

08000ed4 <_kill>:

int _kill(int pid, int sig)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000ede:	4b05      	ldr	r3, [pc, #20]	; (8000ef4 <_kill+0x20>)
 8000ee0:	2216      	movs	r2, #22
 8000ee2:	601a      	str	r2, [r3, #0]
	return -1;
 8000ee4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	370c      	adds	r7, #12
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr
 8000ef4:	240037f0 	.word	0x240037f0

08000ef8 <_exit>:

void _exit (int status)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000f00:	f04f 31ff 	mov.w	r1, #4294967295
 8000f04:	6878      	ldr	r0, [r7, #4]
 8000f06:	f7ff ffe5 	bl	8000ed4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000f0a:	e7fe      	b.n	8000f0a <_exit+0x12>

08000f0c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b086      	sub	sp, #24
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	60f8      	str	r0, [r7, #12]
 8000f14:	60b9      	str	r1, [r7, #8]
 8000f16:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f18:	2300      	movs	r3, #0
 8000f1a:	617b      	str	r3, [r7, #20]
 8000f1c:	e00a      	b.n	8000f34 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000f1e:	f3af 8000 	nop.w
 8000f22:	4601      	mov	r1, r0
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	1c5a      	adds	r2, r3, #1
 8000f28:	60ba      	str	r2, [r7, #8]
 8000f2a:	b2ca      	uxtb	r2, r1
 8000f2c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	3301      	adds	r3, #1
 8000f32:	617b      	str	r3, [r7, #20]
 8000f34:	697a      	ldr	r2, [r7, #20]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	429a      	cmp	r2, r3
 8000f3a:	dbf0      	blt.n	8000f1e <_read+0x12>
	}

return len;
 8000f3c:	687b      	ldr	r3, [r7, #4]
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3718      	adds	r7, #24
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}

08000f46 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f46:	b580      	push	{r7, lr}
 8000f48:	b086      	sub	sp, #24
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	60f8      	str	r0, [r7, #12]
 8000f4e:	60b9      	str	r1, [r7, #8]
 8000f50:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f52:	2300      	movs	r3, #0
 8000f54:	617b      	str	r3, [r7, #20]
 8000f56:	e009      	b.n	8000f6c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	1c5a      	adds	r2, r3, #1
 8000f5c:	60ba      	str	r2, [r7, #8]
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	4618      	mov	r0, r3
 8000f62:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	3301      	adds	r3, #1
 8000f6a:	617b      	str	r3, [r7, #20]
 8000f6c:	697a      	ldr	r2, [r7, #20]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	429a      	cmp	r2, r3
 8000f72:	dbf1      	blt.n	8000f58 <_write+0x12>
	}
	return len;
 8000f74:	687b      	ldr	r3, [r7, #4]
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3718      	adds	r7, #24
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}

08000f7e <_close>:

int _close(int file)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	b083      	sub	sp, #12
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	6078      	str	r0, [r7, #4]
	return -1;
 8000f86:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	370c      	adds	r7, #12
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr

08000f96 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f96:	b480      	push	{r7}
 8000f98:	b083      	sub	sp, #12
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	6078      	str	r0, [r7, #4]
 8000f9e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fa6:	605a      	str	r2, [r3, #4]
	return 0;
 8000fa8:	2300      	movs	r3, #0
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	370c      	adds	r7, #12
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr

08000fb6 <_isatty>:

int _isatty(int file)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	b083      	sub	sp, #12
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	6078      	str	r0, [r7, #4]
	return 1;
 8000fbe:	2301      	movs	r3, #1
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	370c      	adds	r7, #12
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr

08000fcc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b085      	sub	sp, #20
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	60f8      	str	r0, [r7, #12]
 8000fd4:	60b9      	str	r1, [r7, #8]
 8000fd6:	607a      	str	r2, [r7, #4]
	return 0;
 8000fd8:	2300      	movs	r3, #0
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3714      	adds	r7, #20
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
	...

08000fe8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b087      	sub	sp, #28
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ff0:	4a14      	ldr	r2, [pc, #80]	; (8001044 <_sbrk+0x5c>)
 8000ff2:	4b15      	ldr	r3, [pc, #84]	; (8001048 <_sbrk+0x60>)
 8000ff4:	1ad3      	subs	r3, r2, r3
 8000ff6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ffc:	4b13      	ldr	r3, [pc, #76]	; (800104c <_sbrk+0x64>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d102      	bne.n	800100a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001004:	4b11      	ldr	r3, [pc, #68]	; (800104c <_sbrk+0x64>)
 8001006:	4a12      	ldr	r2, [pc, #72]	; (8001050 <_sbrk+0x68>)
 8001008:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800100a:	4b10      	ldr	r3, [pc, #64]	; (800104c <_sbrk+0x64>)
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4413      	add	r3, r2
 8001012:	693a      	ldr	r2, [r7, #16]
 8001014:	429a      	cmp	r2, r3
 8001016:	d205      	bcs.n	8001024 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001018:	4b0e      	ldr	r3, [pc, #56]	; (8001054 <_sbrk+0x6c>)
 800101a:	220c      	movs	r2, #12
 800101c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800101e:	f04f 33ff 	mov.w	r3, #4294967295
 8001022:	e009      	b.n	8001038 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001024:	4b09      	ldr	r3, [pc, #36]	; (800104c <_sbrk+0x64>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800102a:	4b08      	ldr	r3, [pc, #32]	; (800104c <_sbrk+0x64>)
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4413      	add	r3, r2
 8001032:	4a06      	ldr	r2, [pc, #24]	; (800104c <_sbrk+0x64>)
 8001034:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001036:	68fb      	ldr	r3, [r7, #12]
}
 8001038:	4618      	mov	r0, r3
 800103a:	371c      	adds	r7, #28
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr
 8001044:	24080000 	.word	0x24080000
 8001048:	00000400 	.word	0x00000400
 800104c:	240000b0 	.word	0x240000b0
 8001050:	24003800 	.word	0x24003800
 8001054:	240037f0 	.word	0x240037f0

08001058 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800105c:	4b39      	ldr	r3, [pc, #228]	; (8001144 <SystemInit+0xec>)
 800105e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001062:	4a38      	ldr	r2, [pc, #224]	; (8001144 <SystemInit+0xec>)
 8001064:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001068:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800106c:	4b36      	ldr	r3, [pc, #216]	; (8001148 <SystemInit+0xf0>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f003 030f 	and.w	r3, r3, #15
 8001074:	2b06      	cmp	r3, #6
 8001076:	d807      	bhi.n	8001088 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001078:	4b33      	ldr	r3, [pc, #204]	; (8001148 <SystemInit+0xf0>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f023 030f 	bic.w	r3, r3, #15
 8001080:	4a31      	ldr	r2, [pc, #196]	; (8001148 <SystemInit+0xf0>)
 8001082:	f043 0307 	orr.w	r3, r3, #7
 8001086:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001088:	4b30      	ldr	r3, [pc, #192]	; (800114c <SystemInit+0xf4>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a2f      	ldr	r2, [pc, #188]	; (800114c <SystemInit+0xf4>)
 800108e:	f043 0301 	orr.w	r3, r3, #1
 8001092:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001094:	4b2d      	ldr	r3, [pc, #180]	; (800114c <SystemInit+0xf4>)
 8001096:	2200      	movs	r2, #0
 8001098:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800109a:	4b2c      	ldr	r3, [pc, #176]	; (800114c <SystemInit+0xf4>)
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	492b      	ldr	r1, [pc, #172]	; (800114c <SystemInit+0xf4>)
 80010a0:	4b2b      	ldr	r3, [pc, #172]	; (8001150 <SystemInit+0xf8>)
 80010a2:	4013      	ands	r3, r2
 80010a4:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80010a6:	4b28      	ldr	r3, [pc, #160]	; (8001148 <SystemInit+0xf0>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f003 0308 	and.w	r3, r3, #8
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d007      	beq.n	80010c2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80010b2:	4b25      	ldr	r3, [pc, #148]	; (8001148 <SystemInit+0xf0>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f023 030f 	bic.w	r3, r3, #15
 80010ba:	4a23      	ldr	r2, [pc, #140]	; (8001148 <SystemInit+0xf0>)
 80010bc:	f043 0307 	orr.w	r3, r3, #7
 80010c0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80010c2:	4b22      	ldr	r3, [pc, #136]	; (800114c <SystemInit+0xf4>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80010c8:	4b20      	ldr	r3, [pc, #128]	; (800114c <SystemInit+0xf4>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80010ce:	4b1f      	ldr	r3, [pc, #124]	; (800114c <SystemInit+0xf4>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80010d4:	4b1d      	ldr	r3, [pc, #116]	; (800114c <SystemInit+0xf4>)
 80010d6:	4a1f      	ldr	r2, [pc, #124]	; (8001154 <SystemInit+0xfc>)
 80010d8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80010da:	4b1c      	ldr	r3, [pc, #112]	; (800114c <SystemInit+0xf4>)
 80010dc:	4a1e      	ldr	r2, [pc, #120]	; (8001158 <SystemInit+0x100>)
 80010de:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80010e0:	4b1a      	ldr	r3, [pc, #104]	; (800114c <SystemInit+0xf4>)
 80010e2:	4a1e      	ldr	r2, [pc, #120]	; (800115c <SystemInit+0x104>)
 80010e4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80010e6:	4b19      	ldr	r3, [pc, #100]	; (800114c <SystemInit+0xf4>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80010ec:	4b17      	ldr	r3, [pc, #92]	; (800114c <SystemInit+0xf4>)
 80010ee:	4a1b      	ldr	r2, [pc, #108]	; (800115c <SystemInit+0x104>)
 80010f0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80010f2:	4b16      	ldr	r3, [pc, #88]	; (800114c <SystemInit+0xf4>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80010f8:	4b14      	ldr	r3, [pc, #80]	; (800114c <SystemInit+0xf4>)
 80010fa:	4a18      	ldr	r2, [pc, #96]	; (800115c <SystemInit+0x104>)
 80010fc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80010fe:	4b13      	ldr	r3, [pc, #76]	; (800114c <SystemInit+0xf4>)
 8001100:	2200      	movs	r2, #0
 8001102:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001104:	4b11      	ldr	r3, [pc, #68]	; (800114c <SystemInit+0xf4>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a10      	ldr	r2, [pc, #64]	; (800114c <SystemInit+0xf4>)
 800110a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800110e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001110:	4b0e      	ldr	r3, [pc, #56]	; (800114c <SystemInit+0xf4>)
 8001112:	2200      	movs	r2, #0
 8001114:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001116:	4b12      	ldr	r3, [pc, #72]	; (8001160 <SystemInit+0x108>)
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	4b12      	ldr	r3, [pc, #72]	; (8001164 <SystemInit+0x10c>)
 800111c:	4013      	ands	r3, r2
 800111e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001122:	d202      	bcs.n	800112a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001124:	4b10      	ldr	r3, [pc, #64]	; (8001168 <SystemInit+0x110>)
 8001126:	2201      	movs	r2, #1
 8001128:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800112a:	4b10      	ldr	r3, [pc, #64]	; (800116c <SystemInit+0x114>)
 800112c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001130:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001132:	4b04      	ldr	r3, [pc, #16]	; (8001144 <SystemInit+0xec>)
 8001134:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001138:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800113a:	bf00      	nop
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr
 8001144:	e000ed00 	.word	0xe000ed00
 8001148:	52002000 	.word	0x52002000
 800114c:	58024400 	.word	0x58024400
 8001150:	eaf6ed7f 	.word	0xeaf6ed7f
 8001154:	02020200 	.word	0x02020200
 8001158:	01ff0000 	.word	0x01ff0000
 800115c:	01010280 	.word	0x01010280
 8001160:	5c001000 	.word	0x5c001000
 8001164:	ffff0000 	.word	0xffff0000
 8001168:	51008108 	.word	0x51008108
 800116c:	52004000 	.word	0x52004000

08001170 <tcp_echoserver_init>:
  * @brief  Initializes the tcp echo server
  * @param  None
  * @retval None
  */
void tcp_echoserver_init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
  /* create new tcp pcb */
  tcp_echoserver_pcb = tcp_new();
 8001176:	f00a fd35 	bl	800bbe4 <tcp_new>
 800117a:	4603      	mov	r3, r0
 800117c:	4a16      	ldr	r2, [pc, #88]	; (80011d8 <tcp_echoserver_init+0x68>)
 800117e:	6013      	str	r3, [r2, #0]

  if (tcp_echoserver_pcb != NULL)
 8001180:	4b15      	ldr	r3, [pc, #84]	; (80011d8 <tcp_echoserver_init+0x68>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d022      	beq.n	80011ce <tcp_echoserver_init+0x5e>
  {
    err_t err;
    
    /* bind echo_pcb to port 7 (ECHO protocol) */
    err = tcp_bind(tcp_echoserver_pcb, IP_ADDR_ANY, 7);
 8001188:	4b13      	ldr	r3, [pc, #76]	; (80011d8 <tcp_echoserver_init+0x68>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	2207      	movs	r2, #7
 800118e:	4913      	ldr	r1, [pc, #76]	; (80011dc <tcp_echoserver_init+0x6c>)
 8001190:	4618      	mov	r0, r3
 8001192:	f009 fc83 	bl	800aa9c <tcp_bind>
 8001196:	4603      	mov	r3, r0
 8001198:	71fb      	strb	r3, [r7, #7]
    
    if (err == ERR_OK)
 800119a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d10f      	bne.n	80011c2 <tcp_echoserver_init+0x52>
    {
      /* start tcp listening for echo_pcb */
      tcp_echoserver_pcb = tcp_listen(tcp_echoserver_pcb);
 80011a2:	4b0d      	ldr	r3, [pc, #52]	; (80011d8 <tcp_echoserver_init+0x68>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	21ff      	movs	r1, #255	; 0xff
 80011a8:	4618      	mov	r0, r3
 80011aa:	f009 fd2f 	bl	800ac0c <tcp_listen_with_backlog>
 80011ae:	4603      	mov	r3, r0
 80011b0:	4a09      	ldr	r2, [pc, #36]	; (80011d8 <tcp_echoserver_init+0x68>)
 80011b2:	6013      	str	r3, [r2, #0]
      
      /* initialize LwIP tcp_accept callback function */
      tcp_accept(tcp_echoserver_pcb, tcp_echoserver_accept);
 80011b4:	4b08      	ldr	r3, [pc, #32]	; (80011d8 <tcp_echoserver_init+0x68>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4909      	ldr	r1, [pc, #36]	; (80011e0 <tcp_echoserver_init+0x70>)
 80011ba:	4618      	mov	r0, r3
 80011bc:	f00a fd92 	bl	800bce4 <tcp_accept>
    {
      /* deallocate the pcb */
      memp_free(MEMP_TCP_PCB, tcp_echoserver_pcb);
    }
  }
}
 80011c0:	e005      	b.n	80011ce <tcp_echoserver_init+0x5e>
      memp_free(MEMP_TCP_PCB, tcp_echoserver_pcb);
 80011c2:	4b05      	ldr	r3, [pc, #20]	; (80011d8 <tcp_echoserver_init+0x68>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4619      	mov	r1, r3
 80011c8:	2001      	movs	r0, #1
 80011ca:	f008 f84d 	bl	8009268 <memp_free>
}
 80011ce:	bf00      	nop
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	240000b4 	.word	0x240000b4
 80011dc:	08016d28 	.word	0x08016d28
 80011e0:	080011e5 	.word	0x080011e5

080011e4 <tcp_echoserver_accept>:
  * @param  newpcb: pointer on tcp_pcb struct for the newly created tcp connection
  * @param  err: not used 
  * @retval err_t: error status
  */
static err_t tcp_echoserver_accept(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b086      	sub	sp, #24
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	60f8      	str	r0, [r7, #12]
 80011ec:	60b9      	str	r1, [r7, #8]
 80011ee:	4613      	mov	r3, r2
 80011f0:	71fb      	strb	r3, [r7, #7]

  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  /* set priority for the newly accepted tcp connection newpcb */
  tcp_setprio(newpcb, TCP_PRIO_MIN);
 80011f2:	2101      	movs	r1, #1
 80011f4:	68b8      	ldr	r0, [r7, #8]
 80011f6:	f00a fb03 	bl	800b800 <tcp_setprio>

  /* allocate structure es to maintain tcp connection informations */
  es = (struct tcp_echoserver_struct *)mem_malloc(sizeof(struct tcp_echoserver_struct));
 80011fa:	200c      	movs	r0, #12
 80011fc:	f007 fe30 	bl	8008e60 <mem_malloc>
 8001200:	6138      	str	r0, [r7, #16]
  if (es != NULL)
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d01f      	beq.n	8001248 <tcp_echoserver_accept+0x64>
  {
    es->state = ES_ACCEPTED;
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	2201      	movs	r2, #1
 800120c:	701a      	strb	r2, [r3, #0]
    es->pcb = newpcb;
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	68ba      	ldr	r2, [r7, #8]
 8001212:	605a      	str	r2, [r3, #4]
    es->retries = 0;
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	2200      	movs	r2, #0
 8001218:	705a      	strb	r2, [r3, #1]
    es->p = NULL;
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	2200      	movs	r2, #0
 800121e:	609a      	str	r2, [r3, #8]
    
    /* pass newly allocated es structure as argument to newpcb */
    tcp_arg(newpcb, es);
 8001220:	6939      	ldr	r1, [r7, #16]
 8001222:	68b8      	ldr	r0, [r7, #8]
 8001224:	f00a fce6 	bl	800bbf4 <tcp_arg>
    
    /* initialize lwip tcp_recv callback function for newpcb  */ 
    tcp_recv(newpcb, tcp_echoserver_recv);
 8001228:	490d      	ldr	r1, [pc, #52]	; (8001260 <tcp_echoserver_accept+0x7c>)
 800122a:	68b8      	ldr	r0, [r7, #8]
 800122c:	f00a fcf4 	bl	800bc18 <tcp_recv>
    
    /* initialize lwip tcp_err callback function for newpcb  */
    tcp_err(newpcb, tcp_echoserver_error);
 8001230:	490c      	ldr	r1, [pc, #48]	; (8001264 <tcp_echoserver_accept+0x80>)
 8001232:	68b8      	ldr	r0, [r7, #8]
 8001234:	f00a fd34 	bl	800bca0 <tcp_err>
    
    /* initialize lwip tcp_poll callback function for newpcb */
    tcp_poll(newpcb, tcp_echoserver_poll, 0);
 8001238:	2200      	movs	r2, #0
 800123a:	490b      	ldr	r1, [pc, #44]	; (8001268 <tcp_echoserver_accept+0x84>)
 800123c:	68b8      	ldr	r0, [r7, #8]
 800123e:	f00a fd69 	bl	800bd14 <tcp_poll>
    
    ret_err = ERR_OK;
 8001242:	2300      	movs	r3, #0
 8001244:	75fb      	strb	r3, [r7, #23]
 8001246:	e005      	b.n	8001254 <tcp_echoserver_accept+0x70>
  }
  else
  {
    /*  close tcp connection */
    tcp_echoserver_connection_close(newpcb, es);
 8001248:	6939      	ldr	r1, [r7, #16]
 800124a:	68b8      	ldr	r0, [r7, #8]
 800124c:	f000 f965 	bl	800151a <tcp_echoserver_connection_close>
    /* return memory error */
    ret_err = ERR_MEM;
 8001250:	23ff      	movs	r3, #255	; 0xff
 8001252:	75fb      	strb	r3, [r7, #23]
  }
  return ret_err;  
 8001254:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001258:	4618      	mov	r0, r3
 800125a:	3718      	adds	r7, #24
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	0800126d 	.word	0x0800126d
 8001264:	080013a1 	.word	0x080013a1
 8001268:	080013c5 	.word	0x080013c5

0800126c <tcp_echoserver_recv>:
  * @param  pbuf: pointer on the received pbuf
  * @param  err: error information regarding the reveived pbuf
  * @retval err_t: error code
  */
static err_t tcp_echoserver_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b088      	sub	sp, #32
 8001270:	af00      	add	r7, sp, #0
 8001272:	60f8      	str	r0, [r7, #12]
 8001274:	60b9      	str	r1, [r7, #8]
 8001276:	607a      	str	r2, [r7, #4]
 8001278:	70fb      	strb	r3, [r7, #3]
  struct tcp_echoserver_struct *es;
  err_t ret_err;

  LWIP_ASSERT("arg != NULL",arg != NULL);
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d105      	bne.n	800128c <tcp_echoserver_recv+0x20>
 8001280:	4b43      	ldr	r3, [pc, #268]	; (8001390 <tcp_echoserver_recv+0x124>)
 8001282:	22ad      	movs	r2, #173	; 0xad
 8001284:	4943      	ldr	r1, [pc, #268]	; (8001394 <tcp_echoserver_recv+0x128>)
 8001286:	4844      	ldr	r0, [pc, #272]	; (8001398 <tcp_echoserver_recv+0x12c>)
 8001288:	f011 ff84 	bl	8013194 <iprintf>
  
  es = (struct tcp_echoserver_struct *)arg;
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	61bb      	str	r3, [r7, #24]
  
  /* if we receive an empty tcp frame from client => close connection */
  if (p == NULL)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d116      	bne.n	80012c4 <tcp_echoserver_recv+0x58>
  {
    /* remote host closed connection */
    es->state = ES_CLOSING;
 8001296:	69bb      	ldr	r3, [r7, #24]
 8001298:	2203      	movs	r2, #3
 800129a:	701a      	strb	r2, [r3, #0]
    if(es->p == NULL)
 800129c:	69bb      	ldr	r3, [r7, #24]
 800129e:	689b      	ldr	r3, [r3, #8]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d104      	bne.n	80012ae <tcp_echoserver_recv+0x42>
    {
       /* we're done sending, close connection */
       tcp_echoserver_connection_close(tpcb, es);
 80012a4:	69b9      	ldr	r1, [r7, #24]
 80012a6:	68b8      	ldr	r0, [r7, #8]
 80012a8:	f000 f937 	bl	800151a <tcp_echoserver_connection_close>
 80012ac:	e007      	b.n	80012be <tcp_echoserver_recv+0x52>
    }
    else
    {
      /* we're not done yet */
      /* acknowledge received packet */
      tcp_sent(tpcb, tcp_echoserver_sent);
 80012ae:	493b      	ldr	r1, [pc, #236]	; (800139c <tcp_echoserver_recv+0x130>)
 80012b0:	68b8      	ldr	r0, [r7, #8]
 80012b2:	f00a fcd3 	bl	800bc5c <tcp_sent>
      
      /* send remaining data*/
      tcp_echoserver_send(tpcb, es);
 80012b6:	69b9      	ldr	r1, [r7, #24]
 80012b8:	68b8      	ldr	r0, [r7, #8]
 80012ba:	f000 f8db 	bl	8001474 <tcp_echoserver_send>
    }
    ret_err = ERR_OK;
 80012be:	2300      	movs	r3, #0
 80012c0:	77fb      	strb	r3, [r7, #31]
 80012c2:	e05f      	b.n	8001384 <tcp_echoserver_recv+0x118>
  }   
  /* else : a non empty frame was received from client but for some reason err != ERR_OK */
  else if(err != ERR_OK)
 80012c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d00b      	beq.n	80012e4 <tcp_echoserver_recv+0x78>
  {
    /* free received pbuf*/
    if (p != NULL)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d005      	beq.n	80012de <tcp_echoserver_recv+0x72>
    {
      es->p = NULL;
 80012d2:	69bb      	ldr	r3, [r7, #24]
 80012d4:	2200      	movs	r2, #0
 80012d6:	609a      	str	r2, [r3, #8]
      pbuf_free(p);
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	f008 fe3b 	bl	8009f54 <pbuf_free>
    }
    ret_err = err;
 80012de:	78fb      	ldrb	r3, [r7, #3]
 80012e0:	77fb      	strb	r3, [r7, #31]
 80012e2:	e04f      	b.n	8001384 <tcp_echoserver_recv+0x118>
  }
  else if(es->state == ES_ACCEPTED)
 80012e4:	69bb      	ldr	r3, [r7, #24]
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	2b01      	cmp	r3, #1
 80012ea:	d110      	bne.n	800130e <tcp_echoserver_recv+0xa2>
  {
    /* first data chunk in p->payload */
    es->state = ES_RECEIVED;
 80012ec:	69bb      	ldr	r3, [r7, #24]
 80012ee:	2202      	movs	r2, #2
 80012f0:	701a      	strb	r2, [r3, #0]
    
    /* store reference to incoming pbuf (chain) */
    es->p = p;
 80012f2:	69bb      	ldr	r3, [r7, #24]
 80012f4:	687a      	ldr	r2, [r7, #4]
 80012f6:	609a      	str	r2, [r3, #8]
    
    /* initialize LwIP tcp_sent callback function */
    tcp_sent(tpcb, tcp_echoserver_sent);
 80012f8:	4928      	ldr	r1, [pc, #160]	; (800139c <tcp_echoserver_recv+0x130>)
 80012fa:	68b8      	ldr	r0, [r7, #8]
 80012fc:	f00a fcae 	bl	800bc5c <tcp_sent>
    
    /* send back the received data (echo) */
    tcp_echoserver_send(tpcb, es);
 8001300:	69b9      	ldr	r1, [r7, #24]
 8001302:	68b8      	ldr	r0, [r7, #8]
 8001304:	f000 f8b6 	bl	8001474 <tcp_echoserver_send>
    
    ret_err = ERR_OK;
 8001308:	2300      	movs	r3, #0
 800130a:	77fb      	strb	r3, [r7, #31]
 800130c:	e03a      	b.n	8001384 <tcp_echoserver_recv+0x118>
  }
  else if (es->state == ES_RECEIVED)
 800130e:	69bb      	ldr	r3, [r7, #24]
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	2b02      	cmp	r3, #2
 8001314:	d115      	bne.n	8001342 <tcp_echoserver_recv+0xd6>
  {
    /* more data received from client and previous data has been already sent*/
    if(es->p == NULL)
 8001316:	69bb      	ldr	r3, [r7, #24]
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d107      	bne.n	800132e <tcp_echoserver_recv+0xc2>
    {
      es->p = p;
 800131e:	69bb      	ldr	r3, [r7, #24]
 8001320:	687a      	ldr	r2, [r7, #4]
 8001322:	609a      	str	r2, [r3, #8]
  
      /* send back received data */
      tcp_echoserver_send(tpcb, es);
 8001324:	69b9      	ldr	r1, [r7, #24]
 8001326:	68b8      	ldr	r0, [r7, #8]
 8001328:	f000 f8a4 	bl	8001474 <tcp_echoserver_send>
 800132c:	e006      	b.n	800133c <tcp_echoserver_recv+0xd0>
    else
    {
      struct pbuf *ptr;

      /* chain pbufs to the end of what we recv'ed previously  */
      ptr = es->p;
 800132e:	69bb      	ldr	r3, [r7, #24]
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	617b      	str	r3, [r7, #20]
      pbuf_chain(ptr,p);
 8001334:	6879      	ldr	r1, [r7, #4]
 8001336:	6978      	ldr	r0, [r7, #20]
 8001338:	f008 ff24 	bl	800a184 <pbuf_chain>
    }
    ret_err = ERR_OK;
 800133c:	2300      	movs	r3, #0
 800133e:	77fb      	strb	r3, [r7, #31]
 8001340:	e020      	b.n	8001384 <tcp_echoserver_recv+0x118>
  }
  else if(es->state == ES_CLOSING)
 8001342:	69bb      	ldr	r3, [r7, #24]
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	2b03      	cmp	r3, #3
 8001348:	d10e      	bne.n	8001368 <tcp_echoserver_recv+0xfc>
  {
    /* odd case, remote side closing twice, trash data */
    tcp_recved(tpcb, p->tot_len);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	891b      	ldrh	r3, [r3, #8]
 800134e:	4619      	mov	r1, r3
 8001350:	68b8      	ldr	r0, [r7, #8]
 8001352:	f009 fd71 	bl	800ae38 <tcp_recved>
    es->p = NULL;
 8001356:	69bb      	ldr	r3, [r7, #24]
 8001358:	2200      	movs	r2, #0
 800135a:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 800135c:	6878      	ldr	r0, [r7, #4]
 800135e:	f008 fdf9 	bl	8009f54 <pbuf_free>
    ret_err = ERR_OK;
 8001362:	2300      	movs	r3, #0
 8001364:	77fb      	strb	r3, [r7, #31]
 8001366:	e00d      	b.n	8001384 <tcp_echoserver_recv+0x118>
  }
  else
  {
    /* unkown es->state, trash data  */
    tcp_recved(tpcb, p->tot_len);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	891b      	ldrh	r3, [r3, #8]
 800136c:	4619      	mov	r1, r3
 800136e:	68b8      	ldr	r0, [r7, #8]
 8001370:	f009 fd62 	bl	800ae38 <tcp_recved>
    es->p = NULL;
 8001374:	69bb      	ldr	r3, [r7, #24]
 8001376:	2200      	movs	r2, #0
 8001378:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f008 fdea 	bl	8009f54 <pbuf_free>
    ret_err = ERR_OK;
 8001380:	2300      	movs	r3, #0
 8001382:	77fb      	strb	r3, [r7, #31]
  }
  return ret_err;
 8001384:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001388:	4618      	mov	r0, r3
 800138a:	3720      	adds	r7, #32
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	080141e0 	.word	0x080141e0
 8001394:	08014200 	.word	0x08014200
 8001398:	0801420c 	.word	0x0801420c
 800139c:	08001425 	.word	0x08001425

080013a0 <tcp_echoserver_error>:
  * @param  arg: pointer on argument parameter 
  * @param  err: not used
  * @retval None
  */
static void tcp_echoserver_error(void *arg, err_t err)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	460b      	mov	r3, r1
 80013aa:	70fb      	strb	r3, [r7, #3]
  struct tcp_echoserver_struct *es;

  LWIP_UNUSED_ARG(err);

  es = (struct tcp_echoserver_struct *)arg;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	60fb      	str	r3, [r7, #12]
  if (es != NULL)
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d002      	beq.n	80013bc <tcp_echoserver_error+0x1c>
  {
    /*  free es structure */
    mem_free(es);
 80013b6:	68f8      	ldr	r0, [r7, #12]
 80013b8:	f007 fbe6 	bl	8008b88 <mem_free>
  }
}
 80013bc:	bf00      	nop
 80013be:	3710      	adds	r7, #16
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}

080013c4 <tcp_echoserver_poll>:
  * @param  arg: pointer on argument passed to callback
  * @param  tpcb: pointer on the tcp_pcb for the current tcp connection
  * @retval err_t: error code
  */
static err_t tcp_echoserver_poll(void *arg, struct tcp_pcb *tpcb)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
 80013cc:	6039      	str	r1, [r7, #0]
  err_t ret_err;
  struct tcp_echoserver_struct *es;

  es = (struct tcp_echoserver_struct *)arg;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	60bb      	str	r3, [r7, #8]
  if (es != NULL)
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d017      	beq.n	8001408 <tcp_echoserver_poll+0x44>
  {
    if (es->p != NULL)
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d008      	beq.n	80013f2 <tcp_echoserver_poll+0x2e>
    {
      tcp_sent(tpcb, tcp_echoserver_sent);
 80013e0:	490f      	ldr	r1, [pc, #60]	; (8001420 <tcp_echoserver_poll+0x5c>)
 80013e2:	6838      	ldr	r0, [r7, #0]
 80013e4:	f00a fc3a 	bl	800bc5c <tcp_sent>
      /* there is a remaining pbuf (chain) , try to send data */
      tcp_echoserver_send(tpcb, es);
 80013e8:	68b9      	ldr	r1, [r7, #8]
 80013ea:	6838      	ldr	r0, [r7, #0]
 80013ec:	f000 f842 	bl	8001474 <tcp_echoserver_send>
 80013f0:	e007      	b.n	8001402 <tcp_echoserver_poll+0x3e>
    }
    else
    {
      /* no remaining pbuf (chain)  */
      if(es->state == ES_CLOSING)
 80013f2:	68bb      	ldr	r3, [r7, #8]
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	2b03      	cmp	r3, #3
 80013f8:	d103      	bne.n	8001402 <tcp_echoserver_poll+0x3e>
      {
        /*  close tcp connection */
        tcp_echoserver_connection_close(tpcb, es);
 80013fa:	68b9      	ldr	r1, [r7, #8]
 80013fc:	6838      	ldr	r0, [r7, #0]
 80013fe:	f000 f88c 	bl	800151a <tcp_echoserver_connection_close>
      }
    }
    ret_err = ERR_OK;
 8001402:	2300      	movs	r3, #0
 8001404:	73fb      	strb	r3, [r7, #15]
 8001406:	e004      	b.n	8001412 <tcp_echoserver_poll+0x4e>
  }
  else
  {
    /* nothing to be done */
    tcp_abort(tpcb);
 8001408:	6838      	ldr	r0, [r7, #0]
 800140a:	f009 fb3b 	bl	800aa84 <tcp_abort>
    ret_err = ERR_ABRT;
 800140e:	23f3      	movs	r3, #243	; 0xf3
 8001410:	73fb      	strb	r3, [r7, #15]
  }
  return ret_err;
 8001412:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001416:	4618      	mov	r0, r3
 8001418:	3710      	adds	r7, #16
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	08001425 	.word	0x08001425

08001424 <tcp_echoserver_sent>:
  *         is received from remote host for sent data) 
  * @param  None
  * @retval None
  */
static err_t tcp_echoserver_sent(void *arg, struct tcp_pcb *tpcb, u16_t len)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b086      	sub	sp, #24
 8001428:	af00      	add	r7, sp, #0
 800142a:	60f8      	str	r0, [r7, #12]
 800142c:	60b9      	str	r1, [r7, #8]
 800142e:	4613      	mov	r3, r2
 8001430:	80fb      	strh	r3, [r7, #6]
  struct tcp_echoserver_struct *es;

  LWIP_UNUSED_ARG(len);

  es = (struct tcp_echoserver_struct *)arg;
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	617b      	str	r3, [r7, #20]
  es->retries = 0;
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	2200      	movs	r2, #0
 800143a:	705a      	strb	r2, [r3, #1]
  
  if(es->p != NULL)
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d008      	beq.n	8001456 <tcp_echoserver_sent+0x32>
  {
    /* still got pbufs to send */
    tcp_sent(tpcb, tcp_echoserver_sent);
 8001444:	490a      	ldr	r1, [pc, #40]	; (8001470 <tcp_echoserver_sent+0x4c>)
 8001446:	68b8      	ldr	r0, [r7, #8]
 8001448:	f00a fc08 	bl	800bc5c <tcp_sent>
    tcp_echoserver_send(tpcb, es);
 800144c:	6979      	ldr	r1, [r7, #20]
 800144e:	68b8      	ldr	r0, [r7, #8]
 8001450:	f000 f810 	bl	8001474 <tcp_echoserver_send>
 8001454:	e007      	b.n	8001466 <tcp_echoserver_sent+0x42>
  }
  else
  {
    /* if no more data to send and client closed connection*/
    if(es->state == ES_CLOSING)
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	2b03      	cmp	r3, #3
 800145c:	d103      	bne.n	8001466 <tcp_echoserver_sent+0x42>
      tcp_echoserver_connection_close(tpcb, es);
 800145e:	6979      	ldr	r1, [r7, #20]
 8001460:	68b8      	ldr	r0, [r7, #8]
 8001462:	f000 f85a 	bl	800151a <tcp_echoserver_connection_close>
  }
  return ERR_OK;
 8001466:	2300      	movs	r3, #0
}
 8001468:	4618      	mov	r0, r3
 800146a:	3718      	adds	r7, #24
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	08001425 	.word	0x08001425

08001474 <tcp_echoserver_send>:
  * @param  tpcb: pointer on the tcp_pcb connection
  * @param  es: pointer on echo_state structure
  * @retval None
  */
static void tcp_echoserver_send(struct tcp_pcb *tpcb, struct tcp_echoserver_struct *es)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b086      	sub	sp, #24
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	6039      	str	r1, [r7, #0]
  struct pbuf *ptr;
  err_t wr_err = ERR_OK;
 800147e:	2300      	movs	r3, #0
 8001480:	75fb      	strb	r3, [r7, #23]
 
  while ((wr_err == ERR_OK) &&
 8001482:	e036      	b.n	80014f2 <tcp_echoserver_send+0x7e>
         (es->p != NULL) && 
         (es->p->len <= tcp_sndbuf(tpcb)))
  {
    
    /* get pointer on pbuf from es structure */
    ptr = es->p;
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	613b      	str	r3, [r7, #16]

    /* enqueue data for transmission */
    wr_err = tcp_write(tpcb, ptr->payload, ptr->len, 1);
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	6859      	ldr	r1, [r3, #4]
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	895a      	ldrh	r2, [r3, #10]
 8001492:	2301      	movs	r3, #1
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f00d faeb 	bl	800ea70 <tcp_write>
 800149a:	4603      	mov	r3, r0
 800149c:	75fb      	strb	r3, [r7, #23]
    
    if (wr_err == ERR_OK)
 800149e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d11d      	bne.n	80014e2 <tcp_echoserver_send+0x6e>
    {
      u16_t plen;
      u8_t freed;

      plen = ptr->len;
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	895b      	ldrh	r3, [r3, #10]
 80014aa:	81fb      	strh	r3, [r7, #14]
     
      /* continue with next pbuf in chain (if any) */
      es->p = ptr->next;
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	609a      	str	r2, [r3, #8]
      
      if(es->p != NULL)
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d004      	beq.n	80014c6 <tcp_echoserver_send+0x52>
      {
        /* increment reference count for es->p */
        pbuf_ref(es->p);
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f008 fde7 	bl	800a094 <pbuf_ref>
      
     /* chop first pbuf from chain */
      do
      {
        /* try hard to free pbuf */
        freed = pbuf_free(ptr);
 80014c6:	6938      	ldr	r0, [r7, #16]
 80014c8:	f008 fd44 	bl	8009f54 <pbuf_free>
 80014cc:	4603      	mov	r3, r0
 80014ce:	737b      	strb	r3, [r7, #13]
      }
      while(freed == 0);
 80014d0:	7b7b      	ldrb	r3, [r7, #13]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d0f7      	beq.n	80014c6 <tcp_echoserver_send+0x52>
     /* we can read more data now */
     tcp_recved(tpcb, plen);
 80014d6:	89fb      	ldrh	r3, [r7, #14]
 80014d8:	4619      	mov	r1, r3
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	f009 fcac 	bl	800ae38 <tcp_recved>
 80014e0:	e007      	b.n	80014f2 <tcp_echoserver_send+0x7e>
   }
   else if(wr_err == ERR_MEM)
 80014e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80014e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014ea:	d102      	bne.n	80014f2 <tcp_echoserver_send+0x7e>
   {
      /* we are low on memory, try later / harder, defer to poll */
     es->p = ptr;
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	693a      	ldr	r2, [r7, #16]
 80014f0:	609a      	str	r2, [r3, #8]
  while ((wr_err == ERR_OK) &&
 80014f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d10b      	bne.n	8001512 <tcp_echoserver_send+0x9e>
         (es->p != NULL) && 
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	689b      	ldr	r3, [r3, #8]
  while ((wr_err == ERR_OK) &&
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d007      	beq.n	8001512 <tcp_echoserver_send+0x9e>
         (es->p->len <= tcp_sndbuf(tpcb)))
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	895a      	ldrh	r2, [r3, #10]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
         (es->p != NULL) && 
 800150e:	429a      	cmp	r2, r3
 8001510:	d9b8      	bls.n	8001484 <tcp_echoserver_send+0x10>
   else
   {
     /* other problem ?? */
   }
  }
}
 8001512:	bf00      	nop
 8001514:	3718      	adds	r7, #24
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}

0800151a <tcp_echoserver_connection_close>:
  * @param  tcp_pcb: pointer on the tcp connection
  * @param  es: pointer on echo_state structure
  * @retval None
  */
static void tcp_echoserver_connection_close(struct tcp_pcb *tpcb, struct tcp_echoserver_struct *es)
{
 800151a:	b580      	push	{r7, lr}
 800151c:	b082      	sub	sp, #8
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
 8001522:	6039      	str	r1, [r7, #0]
  
  /* remove all callbacks */
  tcp_arg(tpcb, NULL);
 8001524:	2100      	movs	r1, #0
 8001526:	6878      	ldr	r0, [r7, #4]
 8001528:	f00a fb64 	bl	800bbf4 <tcp_arg>
  tcp_sent(tpcb, NULL);
 800152c:	2100      	movs	r1, #0
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	f00a fb94 	bl	800bc5c <tcp_sent>
  tcp_recv(tpcb, NULL);
 8001534:	2100      	movs	r1, #0
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	f00a fb6e 	bl	800bc18 <tcp_recv>
  tcp_err(tpcb, NULL);
 800153c:	2100      	movs	r1, #0
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	f00a fbae 	bl	800bca0 <tcp_err>
  tcp_poll(tpcb, NULL, 0);
 8001544:	2200      	movs	r2, #0
 8001546:	2100      	movs	r1, #0
 8001548:	6878      	ldr	r0, [r7, #4]
 800154a:	f00a fbe3 	bl	800bd14 <tcp_poll>
  
  /* delete es structure */
  if (es != NULL)
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d002      	beq.n	800155a <tcp_echoserver_connection_close+0x40>
  {
    mem_free(es);
 8001554:	6838      	ldr	r0, [r7, #0]
 8001556:	f007 fb17 	bl	8008b88 <mem_free>
  }  
  
  /* close tcp connection */
  tcp_close(tpcb);
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f009 f9a8 	bl	800a8b0 <tcp_close>
}
 8001560:	bf00      	nop
 8001562:	3708      	adds	r7, #8
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}

08001568 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001568:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015a0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800156c:	f7ff fd74 	bl	8001058 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001570:	480c      	ldr	r0, [pc, #48]	; (80015a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001572:	490d      	ldr	r1, [pc, #52]	; (80015a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001574:	4a0d      	ldr	r2, [pc, #52]	; (80015ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001576:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001578:	e002      	b.n	8001580 <LoopCopyDataInit>

0800157a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800157a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800157c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800157e:	3304      	adds	r3, #4

08001580 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001580:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001582:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001584:	d3f9      	bcc.n	800157a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001586:	4a0a      	ldr	r2, [pc, #40]	; (80015b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001588:	4c0a      	ldr	r4, [pc, #40]	; (80015b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800158a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800158c:	e001      	b.n	8001592 <LoopFillZerobss>

0800158e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800158e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001590:	3204      	adds	r2, #4

08001592 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001592:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001594:	d3fb      	bcc.n	800158e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001596:	f011 fdb5 	bl	8013104 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800159a:	f7ff f86d 	bl	8000678 <main>
  bx  lr
 800159e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80015a0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80015a4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80015a8:	24000094 	.word	0x24000094
  ldr r2, =_sidata
 80015ac:	08016e98 	.word	0x08016e98
  ldr r2, =_sbss
 80015b0:	24000094 	.word	0x24000094
  ldr r4, =_ebss
 80015b4:	24003800 	.word	0x24003800

080015b8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015b8:	e7fe      	b.n	80015b8 <ADC3_IRQHandler>

080015ba <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 80015ba:	b480      	push	{r7}
 80015bc:	b083      	sub	sp, #12
 80015be:	af00      	add	r7, sp, #0
 80015c0:	6078      	str	r0, [r7, #4]
 80015c2:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d00b      	beq.n	80015e2 <LAN8742_RegisterBusIO+0x28>
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	68db      	ldr	r3, [r3, #12]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d007      	beq.n	80015e2 <LAN8742_RegisterBusIO+0x28>
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d003      	beq.n	80015e2 <LAN8742_RegisterBusIO+0x28>
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	691b      	ldr	r3, [r3, #16]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d102      	bne.n	80015e8 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 80015e2:	f04f 33ff 	mov.w	r3, #4294967295
 80015e6:	e014      	b.n	8001612 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	685a      	ldr	r2, [r3, #4]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	68da      	ldr	r2, [r3, #12]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	689a      	ldr	r2, [r3, #8]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	691a      	ldr	r2, [r3, #16]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8001610:	2300      	movs	r3, #0
}
 8001612:	4618      	mov	r0, r3
 8001614:	370c      	adds	r7, #12
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr

0800161e <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 800161e:	b580      	push	{r7, lr}
 8001620:	b086      	sub	sp, #24
 8001622:	af00      	add	r7, sp, #0
 8001624:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8001626:	2300      	movs	r3, #0
 8001628:	60fb      	str	r3, [r7, #12]
 800162a:	2300      	movs	r3, #0
 800162c:	60bb      	str	r3, [r7, #8]
 800162e:	2300      	movs	r3, #0
 8001630:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8001632:	2300      	movs	r3, #0
 8001634:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d17c      	bne.n	8001738 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d002      	beq.n	800164c <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2220      	movs	r2, #32
 8001650:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001652:	2300      	movs	r3, #0
 8001654:	617b      	str	r3, [r7, #20]
 8001656:	e01c      	b.n	8001692 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	695b      	ldr	r3, [r3, #20]
 800165c:	f107 0208 	add.w	r2, r7, #8
 8001660:	2112      	movs	r1, #18
 8001662:	6978      	ldr	r0, [r7, #20]
 8001664:	4798      	blx	r3
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	da03      	bge.n	8001674 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 800166c:	f06f 0304 	mvn.w	r3, #4
 8001670:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8001672:	e00b      	b.n	800168c <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	f003 031f 	and.w	r3, r3, #31
 800167a:	697a      	ldr	r2, [r7, #20]
 800167c:	429a      	cmp	r2, r3
 800167e:	d105      	bne.n	800168c <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	697a      	ldr	r2, [r7, #20]
 8001684:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8001686:	2300      	movs	r3, #0
 8001688:	613b      	str	r3, [r7, #16]
         break;
 800168a:	e005      	b.n	8001698 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	3301      	adds	r3, #1
 8001690:	617b      	str	r3, [r7, #20]
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	2b1f      	cmp	r3, #31
 8001696:	d9df      	bls.n	8001658 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2b1f      	cmp	r3, #31
 800169e:	d902      	bls.n	80016a6 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 80016a0:	f06f 0302 	mvn.w	r3, #2
 80016a4:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d145      	bne.n	8001738 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	691b      	ldr	r3, [r3, #16]
 80016b0:	687a      	ldr	r2, [r7, #4]
 80016b2:	6810      	ldr	r0, [r2, #0]
 80016b4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80016b8:	2100      	movs	r1, #0
 80016ba:	4798      	blx	r3
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	db37      	blt.n	8001732 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	695b      	ldr	r3, [r3, #20]
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	6810      	ldr	r0, [r2, #0]
 80016ca:	f107 0208 	add.w	r2, r7, #8
 80016ce:	2100      	movs	r1, #0
 80016d0:	4798      	blx	r3
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	db28      	blt.n	800172a <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	699b      	ldr	r3, [r3, #24]
 80016dc:	4798      	blx	r3
 80016de:	4603      	mov	r3, r0
 80016e0:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80016e2:	e01c      	b.n	800171e <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	699b      	ldr	r3, [r3, #24]
 80016e8:	4798      	blx	r3
 80016ea:	4603      	mov	r3, r0
 80016ec:	461a      	mov	r2, r3
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80016f6:	d80e      	bhi.n	8001716 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	695b      	ldr	r3, [r3, #20]
 80016fc:	687a      	ldr	r2, [r7, #4]
 80016fe:	6810      	ldr	r0, [r2, #0]
 8001700:	f107 0208 	add.w	r2, r7, #8
 8001704:	2100      	movs	r1, #0
 8001706:	4798      	blx	r3
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	da07      	bge.n	800171e <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 800170e:	f06f 0304 	mvn.w	r3, #4
 8001712:	613b      	str	r3, [r7, #16]
                 break;
 8001714:	e010      	b.n	8001738 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8001716:	f06f 0301 	mvn.w	r3, #1
 800171a:	613b      	str	r3, [r7, #16]
               break;
 800171c:	e00c      	b.n	8001738 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001724:	2b00      	cmp	r3, #0
 8001726:	d1dd      	bne.n	80016e4 <LAN8742_Init+0xc6>
 8001728:	e006      	b.n	8001738 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 800172a:	f06f 0304 	mvn.w	r3, #4
 800172e:	613b      	str	r3, [r7, #16]
 8001730:	e002      	b.n	8001738 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8001732:	f06f 0303 	mvn.w	r3, #3
 8001736:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d112      	bne.n	8001764 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	699b      	ldr	r3, [r3, #24]
 8001742:	4798      	blx	r3
 8001744:	4603      	mov	r3, r0
 8001746:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8001748:	bf00      	nop
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	699b      	ldr	r3, [r3, #24]
 800174e:	4798      	blx	r3
 8001750:	4603      	mov	r3, r0
 8001752:	461a      	mov	r2, r3
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800175c:	d9f5      	bls.n	800174a <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2201      	movs	r2, #1
 8001762:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8001764:	693b      	ldr	r3, [r7, #16]
 }
 8001766:	4618      	mov	r0, r3
 8001768:	3718      	adds	r7, #24
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}

0800176e <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 800176e:	b580      	push	{r7, lr}
 8001770:	b084      	sub	sp, #16
 8001772:	af00      	add	r7, sp, #0
 8001774:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001776:	2300      	movs	r3, #0
 8001778:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	695b      	ldr	r3, [r3, #20]
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	6810      	ldr	r0, [r2, #0]
 8001782:	f107 020c 	add.w	r2, r7, #12
 8001786:	2101      	movs	r1, #1
 8001788:	4798      	blx	r3
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	da02      	bge.n	8001796 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001790:	f06f 0304 	mvn.w	r3, #4
 8001794:	e06e      	b.n	8001874 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	695b      	ldr	r3, [r3, #20]
 800179a:	687a      	ldr	r2, [r7, #4]
 800179c:	6810      	ldr	r0, [r2, #0]
 800179e:	f107 020c 	add.w	r2, r7, #12
 80017a2:	2101      	movs	r1, #1
 80017a4:	4798      	blx	r3
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	da02      	bge.n	80017b2 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 80017ac:	f06f 0304 	mvn.w	r3, #4
 80017b0:	e060      	b.n	8001874 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	f003 0304 	and.w	r3, r3, #4
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d101      	bne.n	80017c0 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 80017bc:	2301      	movs	r3, #1
 80017be:	e059      	b.n	8001874 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	695b      	ldr	r3, [r3, #20]
 80017c4:	687a      	ldr	r2, [r7, #4]
 80017c6:	6810      	ldr	r0, [r2, #0]
 80017c8:	f107 020c 	add.w	r2, r7, #12
 80017cc:	2100      	movs	r1, #0
 80017ce:	4798      	blx	r3
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	da02      	bge.n	80017dc <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 80017d6:	f06f 0304 	mvn.w	r3, #4
 80017da:	e04b      	b.n	8001874 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d11b      	bne.n	800181e <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d006      	beq.n	80017fe <LAN8742_GetLinkState+0x90>
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80017fa:	2302      	movs	r3, #2
 80017fc:	e03a      	b.n	8001874 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001808:	2303      	movs	r3, #3
 800180a:	e033      	b.n	8001874 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001816:	2304      	movs	r3, #4
 8001818:	e02c      	b.n	8001874 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800181a:	2305      	movs	r3, #5
 800181c:	e02a      	b.n	8001874 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	695b      	ldr	r3, [r3, #20]
 8001822:	687a      	ldr	r2, [r7, #4]
 8001824:	6810      	ldr	r0, [r2, #0]
 8001826:	f107 020c 	add.w	r2, r7, #12
 800182a:	211f      	movs	r1, #31
 800182c:	4798      	blx	r3
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	da02      	bge.n	800183a <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001834:	f06f 0304 	mvn.w	r3, #4
 8001838:	e01c      	b.n	8001874 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001840:	2b00      	cmp	r3, #0
 8001842:	d101      	bne.n	8001848 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001844:	2306      	movs	r3, #6
 8001846:	e015      	b.n	8001874 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	f003 031c 	and.w	r3, r3, #28
 800184e:	2b18      	cmp	r3, #24
 8001850:	d101      	bne.n	8001856 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001852:	2302      	movs	r3, #2
 8001854:	e00e      	b.n	8001874 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	f003 031c 	and.w	r3, r3, #28
 800185c:	2b08      	cmp	r3, #8
 800185e:	d101      	bne.n	8001864 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001860:	2303      	movs	r3, #3
 8001862:	e007      	b.n	8001874 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	f003 031c 	and.w	r3, r3, #28
 800186a:	2b14      	cmp	r3, #20
 800186c:	d101      	bne.n	8001872 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800186e:	2304      	movs	r3, #4
 8001870:	e000      	b.n	8001874 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001872:	2305      	movs	r3, #5
    }				
  }
}
 8001874:	4618      	mov	r0, r3
 8001876:	3710      	adds	r7, #16
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}

0800187c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001882:	2003      	movs	r0, #3
 8001884:	f000 f9a0 	bl	8001bc8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001888:	f003 fa00 	bl	8004c8c <HAL_RCC_GetSysClockFreq>
 800188c:	4602      	mov	r2, r0
 800188e:	4b15      	ldr	r3, [pc, #84]	; (80018e4 <HAL_Init+0x68>)
 8001890:	699b      	ldr	r3, [r3, #24]
 8001892:	0a1b      	lsrs	r3, r3, #8
 8001894:	f003 030f 	and.w	r3, r3, #15
 8001898:	4913      	ldr	r1, [pc, #76]	; (80018e8 <HAL_Init+0x6c>)
 800189a:	5ccb      	ldrb	r3, [r1, r3]
 800189c:	f003 031f 	and.w	r3, r3, #31
 80018a0:	fa22 f303 	lsr.w	r3, r2, r3
 80018a4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80018a6:	4b0f      	ldr	r3, [pc, #60]	; (80018e4 <HAL_Init+0x68>)
 80018a8:	699b      	ldr	r3, [r3, #24]
 80018aa:	f003 030f 	and.w	r3, r3, #15
 80018ae:	4a0e      	ldr	r2, [pc, #56]	; (80018e8 <HAL_Init+0x6c>)
 80018b0:	5cd3      	ldrb	r3, [r2, r3]
 80018b2:	f003 031f 	and.w	r3, r3, #31
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	fa22 f303 	lsr.w	r3, r2, r3
 80018bc:	4a0b      	ldr	r2, [pc, #44]	; (80018ec <HAL_Init+0x70>)
 80018be:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80018c0:	4a0b      	ldr	r2, [pc, #44]	; (80018f0 <HAL_Init+0x74>)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018c6:	2000      	movs	r0, #0
 80018c8:	f000 f814 	bl	80018f4 <HAL_InitTick>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e002      	b.n	80018dc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80018d6:	f7ff f9c5 	bl	8000c64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018da:	2300      	movs	r3, #0
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3708      	adds	r7, #8
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	58024400 	.word	0x58024400
 80018e8:	08016c14 	.word	0x08016c14
 80018ec:	24000004 	.word	0x24000004
 80018f0:	24000000 	.word	0x24000000

080018f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80018fc:	4b15      	ldr	r3, [pc, #84]	; (8001954 <HAL_InitTick+0x60>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d101      	bne.n	8001908 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	e021      	b.n	800194c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001908:	4b13      	ldr	r3, [pc, #76]	; (8001958 <HAL_InitTick+0x64>)
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	4b11      	ldr	r3, [pc, #68]	; (8001954 <HAL_InitTick+0x60>)
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	4619      	mov	r1, r3
 8001912:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001916:	fbb3 f3f1 	udiv	r3, r3, r1
 800191a:	fbb2 f3f3 	udiv	r3, r2, r3
 800191e:	4618      	mov	r0, r3
 8001920:	f000 f985 	bl	8001c2e <HAL_SYSTICK_Config>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e00e      	b.n	800194c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2b0f      	cmp	r3, #15
 8001932:	d80a      	bhi.n	800194a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001934:	2200      	movs	r2, #0
 8001936:	6879      	ldr	r1, [r7, #4]
 8001938:	f04f 30ff 	mov.w	r0, #4294967295
 800193c:	f000 f94f 	bl	8001bde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001940:	4a06      	ldr	r2, [pc, #24]	; (800195c <HAL_InitTick+0x68>)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001946:	2300      	movs	r3, #0
 8001948:	e000      	b.n	800194c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
}
 800194c:	4618      	mov	r0, r3
 800194e:	3708      	adds	r7, #8
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	2400000c 	.word	0x2400000c
 8001958:	24000000 	.word	0x24000000
 800195c:	24000008 	.word	0x24000008

08001960 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001964:	4b06      	ldr	r3, [pc, #24]	; (8001980 <HAL_IncTick+0x20>)
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	461a      	mov	r2, r3
 800196a:	4b06      	ldr	r3, [pc, #24]	; (8001984 <HAL_IncTick+0x24>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4413      	add	r3, r2
 8001970:	4a04      	ldr	r2, [pc, #16]	; (8001984 <HAL_IncTick+0x24>)
 8001972:	6013      	str	r3, [r2, #0]
}
 8001974:	bf00      	nop
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	2400000c 	.word	0x2400000c
 8001984:	240006e8 	.word	0x240006e8

08001988 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  return uwTick;
 800198c:	4b03      	ldr	r3, [pc, #12]	; (800199c <HAL_GetTick+0x14>)
 800198e:	681b      	ldr	r3, [r3, #0]
}
 8001990:	4618      	mov	r0, r3
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	240006e8 	.word	0x240006e8

080019a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019a8:	f7ff ffee 	bl	8001988 <HAL_GetTick>
 80019ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019b8:	d005      	beq.n	80019c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019ba:	4b0a      	ldr	r3, [pc, #40]	; (80019e4 <HAL_Delay+0x44>)
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	461a      	mov	r2, r3
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	4413      	add	r3, r2
 80019c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019c6:	bf00      	nop
 80019c8:	f7ff ffde 	bl	8001988 <HAL_GetTick>
 80019cc:	4602      	mov	r2, r0
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	68fa      	ldr	r2, [r7, #12]
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d8f7      	bhi.n	80019c8 <HAL_Delay+0x28>
  {
  }
}
 80019d8:	bf00      	nop
 80019da:	bf00      	nop
 80019dc:	3710      	adds	r7, #16
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	2400000c 	.word	0x2400000c

080019e8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80019ec:	4b03      	ldr	r3, [pc, #12]	; (80019fc <HAL_GetREVID+0x14>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	0c1b      	lsrs	r3, r3, #16
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr
 80019fc:	5c001000 	.word	0x5c001000

08001a00 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001a08:	4b06      	ldr	r3, [pc, #24]	; (8001a24 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001a10:	4904      	ldr	r1, [pc, #16]	; (8001a24 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4313      	orrs	r3, r2
 8001a16:	604b      	str	r3, [r1, #4]
}
 8001a18:	bf00      	nop
 8001a1a:	370c      	adds	r7, #12
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr
 8001a24:	58000400 	.word	0x58000400

08001a28 <__NVIC_SetPriorityGrouping>:
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b085      	sub	sp, #20
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	f003 0307 	and.w	r3, r3, #7
 8001a36:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a38:	4b0b      	ldr	r3, [pc, #44]	; (8001a68 <__NVIC_SetPriorityGrouping+0x40>)
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a3e:	68ba      	ldr	r2, [r7, #8]
 8001a40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a44:	4013      	ands	r3, r2
 8001a46:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001a50:	4b06      	ldr	r3, [pc, #24]	; (8001a6c <__NVIC_SetPriorityGrouping+0x44>)
 8001a52:	4313      	orrs	r3, r2
 8001a54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a56:	4a04      	ldr	r2, [pc, #16]	; (8001a68 <__NVIC_SetPriorityGrouping+0x40>)
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	60d3      	str	r3, [r2, #12]
}
 8001a5c:	bf00      	nop
 8001a5e:	3714      	adds	r7, #20
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr
 8001a68:	e000ed00 	.word	0xe000ed00
 8001a6c:	05fa0000 	.word	0x05fa0000

08001a70 <__NVIC_GetPriorityGrouping>:
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a74:	4b04      	ldr	r3, [pc, #16]	; (8001a88 <__NVIC_GetPriorityGrouping+0x18>)
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	0a1b      	lsrs	r3, r3, #8
 8001a7a:	f003 0307 	and.w	r3, r3, #7
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr
 8001a88:	e000ed00 	.word	0xe000ed00

08001a8c <__NVIC_EnableIRQ>:
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	4603      	mov	r3, r0
 8001a94:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001a96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	db0b      	blt.n	8001ab6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a9e:	88fb      	ldrh	r3, [r7, #6]
 8001aa0:	f003 021f 	and.w	r2, r3, #31
 8001aa4:	4907      	ldr	r1, [pc, #28]	; (8001ac4 <__NVIC_EnableIRQ+0x38>)
 8001aa6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001aaa:	095b      	lsrs	r3, r3, #5
 8001aac:	2001      	movs	r0, #1
 8001aae:	fa00 f202 	lsl.w	r2, r0, r2
 8001ab2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001ab6:	bf00      	nop
 8001ab8:	370c      	adds	r7, #12
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	e000e100 	.word	0xe000e100

08001ac8 <__NVIC_SetPriority>:
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	4603      	mov	r3, r0
 8001ad0:	6039      	str	r1, [r7, #0]
 8001ad2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001ad4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	db0a      	blt.n	8001af2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	b2da      	uxtb	r2, r3
 8001ae0:	490c      	ldr	r1, [pc, #48]	; (8001b14 <__NVIC_SetPriority+0x4c>)
 8001ae2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ae6:	0112      	lsls	r2, r2, #4
 8001ae8:	b2d2      	uxtb	r2, r2
 8001aea:	440b      	add	r3, r1
 8001aec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001af0:	e00a      	b.n	8001b08 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	b2da      	uxtb	r2, r3
 8001af6:	4908      	ldr	r1, [pc, #32]	; (8001b18 <__NVIC_SetPriority+0x50>)
 8001af8:	88fb      	ldrh	r3, [r7, #6]
 8001afa:	f003 030f 	and.w	r3, r3, #15
 8001afe:	3b04      	subs	r3, #4
 8001b00:	0112      	lsls	r2, r2, #4
 8001b02:	b2d2      	uxtb	r2, r2
 8001b04:	440b      	add	r3, r1
 8001b06:	761a      	strb	r2, [r3, #24]
}
 8001b08:	bf00      	nop
 8001b0a:	370c      	adds	r7, #12
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr
 8001b14:	e000e100 	.word	0xe000e100
 8001b18:	e000ed00 	.word	0xe000ed00

08001b1c <NVIC_EncodePriority>:
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b089      	sub	sp, #36	; 0x24
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	60f8      	str	r0, [r7, #12]
 8001b24:	60b9      	str	r1, [r7, #8]
 8001b26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	f003 0307 	and.w	r3, r3, #7
 8001b2e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	f1c3 0307 	rsb	r3, r3, #7
 8001b36:	2b04      	cmp	r3, #4
 8001b38:	bf28      	it	cs
 8001b3a:	2304      	movcs	r3, #4
 8001b3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	3304      	adds	r3, #4
 8001b42:	2b06      	cmp	r3, #6
 8001b44:	d902      	bls.n	8001b4c <NVIC_EncodePriority+0x30>
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	3b03      	subs	r3, #3
 8001b4a:	e000      	b.n	8001b4e <NVIC_EncodePriority+0x32>
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b50:	f04f 32ff 	mov.w	r2, #4294967295
 8001b54:	69bb      	ldr	r3, [r7, #24]
 8001b56:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5a:	43da      	mvns	r2, r3
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	401a      	ands	r2, r3
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b64:	f04f 31ff 	mov.w	r1, #4294967295
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b6e:	43d9      	mvns	r1, r3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b74:	4313      	orrs	r3, r2
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3724      	adds	r7, #36	; 0x24
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
	...

08001b84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	3b01      	subs	r3, #1
 8001b90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b94:	d301      	bcc.n	8001b9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b96:	2301      	movs	r3, #1
 8001b98:	e00f      	b.n	8001bba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b9a:	4a0a      	ldr	r2, [pc, #40]	; (8001bc4 <SysTick_Config+0x40>)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	3b01      	subs	r3, #1
 8001ba0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ba2:	210f      	movs	r1, #15
 8001ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ba8:	f7ff ff8e 	bl	8001ac8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bac:	4b05      	ldr	r3, [pc, #20]	; (8001bc4 <SysTick_Config+0x40>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bb2:	4b04      	ldr	r3, [pc, #16]	; (8001bc4 <SysTick_Config+0x40>)
 8001bb4:	2207      	movs	r2, #7
 8001bb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bb8:	2300      	movs	r3, #0
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3708      	adds	r7, #8
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	e000e010 	.word	0xe000e010

08001bc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	f7ff ff29 	bl	8001a28 <__NVIC_SetPriorityGrouping>
}
 8001bd6:	bf00      	nop
 8001bd8:	3708      	adds	r7, #8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}

08001bde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bde:	b580      	push	{r7, lr}
 8001be0:	b086      	sub	sp, #24
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	4603      	mov	r3, r0
 8001be6:	60b9      	str	r1, [r7, #8]
 8001be8:	607a      	str	r2, [r7, #4]
 8001bea:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001bec:	f7ff ff40 	bl	8001a70 <__NVIC_GetPriorityGrouping>
 8001bf0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	68b9      	ldr	r1, [r7, #8]
 8001bf6:	6978      	ldr	r0, [r7, #20]
 8001bf8:	f7ff ff90 	bl	8001b1c <NVIC_EncodePriority>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001c02:	4611      	mov	r1, r2
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7ff ff5f 	bl	8001ac8 <__NVIC_SetPriority>
}
 8001c0a:	bf00      	nop
 8001c0c:	3718      	adds	r7, #24
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}

08001c12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c12:	b580      	push	{r7, lr}
 8001c14:	b082      	sub	sp, #8
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	4603      	mov	r3, r0
 8001c1a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c20:	4618      	mov	r0, r3
 8001c22:	f7ff ff33 	bl	8001a8c <__NVIC_EnableIRQ>
}
 8001c26:	bf00      	nop
 8001c28:	3708      	adds	r7, #8
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}

08001c2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c2e:	b580      	push	{r7, lr}
 8001c30:	b082      	sub	sp, #8
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f7ff ffa4 	bl	8001b84 <SysTick_Config>
 8001c3c:	4603      	mov	r3, r0
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3708      	adds	r7, #8
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
	...

08001c48 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001c4c:	f3bf 8f5f 	dmb	sy
}
 8001c50:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001c52:	4b07      	ldr	r3, [pc, #28]	; (8001c70 <HAL_MPU_Disable+0x28>)
 8001c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c56:	4a06      	ldr	r2, [pc, #24]	; (8001c70 <HAL_MPU_Disable+0x28>)
 8001c58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c5c:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001c5e:	4b05      	ldr	r3, [pc, #20]	; (8001c74 <HAL_MPU_Disable+0x2c>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	605a      	str	r2, [r3, #4]
}
 8001c64:	bf00      	nop
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	e000ed00 	.word	0xe000ed00
 8001c74:	e000ed90 	.word	0xe000ed90

08001c78 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001c80:	4a0b      	ldr	r2, [pc, #44]	; (8001cb0 <HAL_MPU_Enable+0x38>)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	f043 0301 	orr.w	r3, r3, #1
 8001c88:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001c8a:	4b0a      	ldr	r3, [pc, #40]	; (8001cb4 <HAL_MPU_Enable+0x3c>)
 8001c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c8e:	4a09      	ldr	r2, [pc, #36]	; (8001cb4 <HAL_MPU_Enable+0x3c>)
 8001c90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c94:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001c96:	f3bf 8f4f 	dsb	sy
}
 8001c9a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001c9c:	f3bf 8f6f 	isb	sy
}
 8001ca0:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001ca2:	bf00      	nop
 8001ca4:	370c      	adds	r7, #12
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	e000ed90 	.word	0xe000ed90
 8001cb4:	e000ed00 	.word	0xe000ed00

08001cb8 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	785a      	ldrb	r2, [r3, #1]
 8001cc4:	4b1d      	ldr	r3, [pc, #116]	; (8001d3c <HAL_MPU_ConfigRegion+0x84>)
 8001cc6:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d029      	beq.n	8001d24 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8001cd0:	4a1a      	ldr	r2, [pc, #104]	; (8001d3c <HAL_MPU_ConfigRegion+0x84>)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	7b1b      	ldrb	r3, [r3, #12]
 8001cdc:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	7adb      	ldrb	r3, [r3, #11]
 8001ce2:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001ce4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	7a9b      	ldrb	r3, [r3, #10]
 8001cea:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001cec:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	7b5b      	ldrb	r3, [r3, #13]
 8001cf2:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001cf4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	7b9b      	ldrb	r3, [r3, #14]
 8001cfa:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001cfc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	7bdb      	ldrb	r3, [r3, #15]
 8001d02:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001d04:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	7a5b      	ldrb	r3, [r3, #9]
 8001d0a:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001d0c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	7a1b      	ldrb	r3, [r3, #8]
 8001d12:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001d14:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001d16:	687a      	ldr	r2, [r7, #4]
 8001d18:	7812      	ldrb	r2, [r2, #0]
 8001d1a:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001d1c:	4a07      	ldr	r2, [pc, #28]	; (8001d3c <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001d1e:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001d20:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8001d22:	e005      	b.n	8001d30 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8001d24:	4b05      	ldr	r3, [pc, #20]	; (8001d3c <HAL_MPU_ConfigRegion+0x84>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8001d2a:	4b04      	ldr	r3, [pc, #16]	; (8001d3c <HAL_MPU_ConfigRegion+0x84>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	611a      	str	r2, [r3, #16]
}
 8001d30:	bf00      	nop
 8001d32:	370c      	adds	r7, #12
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr
 8001d3c:	e000ed90 	.word	0xe000ed90

08001d40 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001d44:	f7fe fef4 	bl	8000b30 <HAL_SYSTICK_Callback>
}
 8001d48:	bf00      	nop
 8001d4a:	bd80      	pop	{r7, pc}

08001d4c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b084      	sub	sp, #16
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d101      	bne.n	8001d5e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e0c6      	b.n	8001eec <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d102      	bne.n	8001d6c <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f006 f90a 	bl	8007f80 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2223      	movs	r2, #35	; 0x23
 8001d70:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d72:	4b60      	ldr	r3, [pc, #384]	; (8001ef4 <HAL_ETH_Init+0x1a8>)
 8001d74:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001d78:	4a5e      	ldr	r2, [pc, #376]	; (8001ef4 <HAL_ETH_Init+0x1a8>)
 8001d7a:	f043 0302 	orr.w	r3, r3, #2
 8001d7e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001d82:	4b5c      	ldr	r3, [pc, #368]	; (8001ef4 <HAL_ETH_Init+0x1a8>)
 8001d84:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001d88:	f003 0302 	and.w	r3, r3, #2
 8001d8c:	60bb      	str	r3, [r7, #8]
 8001d8e:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	7a1b      	ldrb	r3, [r3, #8]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d103      	bne.n	8001da0 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001d98:	2000      	movs	r0, #0
 8001d9a:	f7ff fe31 	bl	8001a00 <HAL_SYSCFG_ETHInterfaceSelect>
 8001d9e:	e003      	b.n	8001da8 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001da0:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001da4:	f7ff fe2c 	bl	8001a00 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f042 0201 	orr.w	r2, r2, #1
 8001dba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dbe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001dc0:	f7ff fde2 	bl	8001988 <HAL_GetTick>
 8001dc4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001dc6:	e00f      	b.n	8001de8 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8001dc8:	f7ff fdde 	bl	8001988 <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001dd6:	d907      	bls.n	8001de8 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2204      	movs	r2, #4
 8001ddc:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	22e0      	movs	r2, #224	; 0xe0
 8001de2:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e081      	b.n	8001eec <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 0301 	and.w	r3, r3, #1
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d1e6      	bne.n	8001dc8 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f001 fa90 	bl	8003320 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001e00:	f003 f8be 	bl	8004f80 <HAL_RCC_GetHCLKFreq>
 8001e04:	4603      	mov	r3, r0
 8001e06:	4a3c      	ldr	r2, [pc, #240]	; (8001ef8 <HAL_ETH_Init+0x1ac>)
 8001e08:	fba2 2303 	umull	r2, r3, r2, r3
 8001e0c:	0c9a      	lsrs	r2, r3, #18
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	3a01      	subs	r2, #1
 8001e14:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f001 f9e3 	bl	80031e4 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001e34:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001e38:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	695b      	ldr	r3, [r3, #20]
 8001e3e:	f003 0303 	and.w	r3, r3, #3
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d007      	beq.n	8001e56 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2201      	movs	r2, #1
 8001e4a:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	22e0      	movs	r2, #224	; 0xe0
 8001e50:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e04a      	b.n	8001eec <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	f241 1308 	movw	r3, #4360	; 0x1108
 8001e5e:	4413      	add	r3, r2
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	4b26      	ldr	r3, [pc, #152]	; (8001efc <HAL_ETH_Init+0x1b0>)
 8001e64:	4013      	ands	r3, r2
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	6952      	ldr	r2, [r2, #20]
 8001e6a:	0052      	lsls	r2, r2, #1
 8001e6c:	6879      	ldr	r1, [r7, #4]
 8001e6e:	6809      	ldr	r1, [r1, #0]
 8001e70:	431a      	orrs	r2, r3
 8001e72:	f241 1308 	movw	r3, #4360	; 0x1108
 8001e76:	440b      	add	r3, r1
 8001e78:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f001 faa8 	bl	80033d0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f001 faec 	bl	800345e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	3305      	adds	r3, #5
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	021a      	lsls	r2, r3, #8
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	3304      	adds	r3, #4
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	4619      	mov	r1, r3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	430a      	orrs	r2, r1
 8001ea0:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	3303      	adds	r3, #3
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	061a      	lsls	r2, r3, #24
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	3302      	adds	r3, #2
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	041b      	lsls	r3, r3, #16
 8001eb8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001ec4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001ed2:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001ed4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2200      	movs	r2, #0
 8001edc:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2210      	movs	r2, #16
 8001ee2:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2210      	movs	r2, #16
 8001ee8:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8001eea:	2300      	movs	r3, #0
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3710      	adds	r7, #16
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	58024400 	.word	0x58024400
 8001ef8:	431bde83 	.word	0x431bde83
 8001efc:	ffff8001 	.word	0xffff8001

08001f00 <HAL_ETH_DescAssignMemory>:
  * @param  pBuffer1: address of buffer 1
  * @param  pBuffer2: address of buffer 2 if available
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DescAssignMemory(ETH_HandleTypeDef *heth, uint32_t Index, uint8_t *pBuffer1, uint8_t *pBuffer2)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b087      	sub	sp, #28
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	60f8      	str	r0, [r7, #12]
 8001f08:	60b9      	str	r1, [r7, #8]
 8001f0a:	607a      	str	r2, [r7, #4]
 8001f0c:	603b      	str	r3, [r7, #0]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[Index];
 8001f0e:	68fa      	ldr	r2, [r7, #12]
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	3310      	adds	r3, #16
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	4413      	add	r3, r2
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	617b      	str	r3, [r7, #20]

  if((pBuffer1 == NULL) || (Index >= (uint32_t)ETH_RX_DESC_CNT))
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d002      	beq.n	8001f28 <HAL_ETH_DescAssignMemory+0x28>
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	2b03      	cmp	r3, #3
 8001f26:	d904      	bls.n	8001f32 <HAL_ETH_DescAssignMemory+0x32>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	675a      	str	r2, [r3, #116]	; 0x74
    /* Return Error */
    return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e021      	b.n	8001f76 <HAL_ETH_DescAssignMemory+0x76>
  }

  /* write buffer address to RDES0 */
  WRITE_REG(dmarxdesc->DESC0, (uint32_t)pBuffer1);
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	601a      	str	r2, [r3, #0]
  /* store buffer address */
  WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)pBuffer1);
 8001f38:	687a      	ldr	r2, [r7, #4]
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	611a      	str	r2, [r3, #16]
  /* set buffer address valid bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	68db      	ldr	r3, [r3, #12]
 8001f42:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	60da      	str	r2, [r3, #12]

  if(pBuffer2 != NULL)
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d00b      	beq.n	8001f68 <HAL_ETH_DescAssignMemory+0x68>
  {
    /* write buffer 2 address to RDES1 */
    WRITE_REG(dmarxdesc->DESC2, (uint32_t)pBuffer2);
 8001f50:	683a      	ldr	r2, [r7, #0]
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	609a      	str	r2, [r3, #8]
     /* store buffer 2 address */
    WRITE_REG(dmarxdesc->BackupAddr1, (uint32_t)pBuffer2);
 8001f56:	683a      	ldr	r2, [r7, #0]
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	615a      	str	r2, [r3, #20]
    /* set buffer 2 address valid bit to RDES3 */
    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	60da      	str	r2, [r3, #12]
  }
  /* set OWN bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8001f74:	2300      	movs	r3, #0
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	371c      	adds	r7, #28
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr

08001f82 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8001f82:	b480      	push	{r7}
 8001f84:	b083      	sub	sp, #12
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
  if(heth->gState == HAL_ETH_STATE_READY)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f8e:	2b10      	cmp	r3, #16
 8001f90:	d14c      	bne.n	800202c <HAL_ETH_Start+0xaa>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2223      	movs	r2, #35	; 0x23
 8001f96:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f042 0202 	orr.w	r2, r2, #2
 8001fa6:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f042 0201 	orr.w	r2, r2, #1
 8001fb6:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f042 0201 	orr.w	r2, r2, #1
 8001fc8:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	f241 1304 	movw	r3, #4356	; 0x1104
 8001fd4:	4413      	add	r3, r2
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	687a      	ldr	r2, [r7, #4]
 8001fda:	6811      	ldr	r1, [r2, #0]
 8001fdc:	f043 0201 	orr.w	r2, r3, #1
 8001fe0:	f241 1304 	movw	r3, #4356	; 0x1104
 8001fe4:	440b      	add	r3, r1
 8001fe6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	f241 1308 	movw	r3, #4360	; 0x1108
 8001ff0:	4413      	add	r3, r2
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	687a      	ldr	r2, [r7, #4]
 8001ff6:	6811      	ldr	r1, [r2, #0]
 8001ff8:	f043 0201 	orr.w	r2, r3, #1
 8001ffc:	f241 1308 	movw	r3, #4360	; 0x1108
 8002000:	440b      	add	r3, r1
 8002002:	601a      	str	r2, [r3, #0]

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f442 7281 	orr.w	r2, r2, #258	; 0x102
 8002016:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800201a:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2210      	movs	r2, #16
 8002020:	66da      	str	r2, [r3, #108]	; 0x6c
    heth->RxState = HAL_ETH_STATE_BUSY_RX;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2222      	movs	r2, #34	; 0x22
 8002026:	671a      	str	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8002028:	2300      	movs	r3, #0
 800202a:	e000      	b.n	800202e <HAL_ETH_Start+0xac>
  }
  else
  {
    return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
  }
}
 800202e:	4618      	mov	r0, r3
 8002030:	370c      	adds	r7, #12
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr

0800203a <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 800203a:	b480      	push	{r7}
 800203c:	b083      	sub	sp, #12
 800203e:	af00      	add	r7, sp, #0
 8002040:	6078      	str	r0, [r7, #4]
  if(heth->gState != HAL_ETH_STATE_RESET)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002046:	2b00      	cmp	r3, #0
 8002048:	d040      	beq.n	80020cc <HAL_ETH_Stop+0x92>
  {
     /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2223      	movs	r2, #35	; 0x23
 800204e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	f241 1304 	movw	r3, #4356	; 0x1104
 8002058:	4413      	add	r3, r2
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	6811      	ldr	r1, [r2, #0]
 8002060:	f023 0201 	bic.w	r2, r3, #1
 8002064:	f241 1304 	movw	r3, #4356	; 0x1104
 8002068:	440b      	add	r3, r1
 800206a:	601a      	str	r2, [r3, #0]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	f241 1308 	movw	r3, #4360	; 0x1108
 8002074:	4413      	add	r3, r2
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	6811      	ldr	r1, [r2, #0]
 800207c:	f023 0201 	bic.w	r2, r3, #1
 8002080:	f241 1308 	movw	r3, #4360	; 0x1108
 8002084:	440b      	add	r3, r1
 8002086:	601a      	str	r2, [r3, #0]

    /* Disable the MAC reception */
    CLEAR_BIT( heth->Instance->MACCR, ETH_MACCR_RE);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f022 0201 	bic.w	r2, r2, #1
 8002096:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f042 0201 	orr.w	r2, r2, #1
 80020a8:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f022 0202 	bic.w	r2, r2, #2
 80020ba:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2210      	movs	r2, #16
 80020c0:	66da      	str	r2, [r3, #108]	; 0x6c
    heth->RxState = HAL_ETH_STATE_READY;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2210      	movs	r2, #16
 80020c6:	671a      	str	r2, [r3, #112]	; 0x70

    /* Return function status */
    return HAL_OK;
 80020c8:	2300      	movs	r3, #0
 80020ca:	e000      	b.n	80020ce <HAL_ETH_Stop+0x94>
  }
  else
  {
    return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
  }
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	370c      	adds	r7, #12
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr

080020da <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 80020da:	b580      	push	{r7, lr}
 80020dc:	b086      	sub	sp, #24
 80020de:	af00      	add	r7, sp, #0
 80020e0:	60f8      	str	r0, [r7, #12]
 80020e2:	60b9      	str	r1, [r7, #8]
 80020e4:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  const ETH_DMADescTypeDef *dmatxdesc;

  if(pTxConfig == NULL)
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d107      	bne.n	80020fc <HAL_ETH_Transmit+0x22>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020f0:	f043 0201 	orr.w	r2, r3, #1
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	675a      	str	r2, [r3, #116]	; 0x74
    return HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	e073      	b.n	80021e4 <HAL_ETH_Transmit+0x10a>
  }

  if(heth->gState == HAL_ETH_STATE_READY)
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002100:	2b10      	cmp	r3, #16
 8002102:	d16e      	bne.n	80021e2 <HAL_ETH_Transmit+0x108>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8002104:	2200      	movs	r2, #0
 8002106:	68b9      	ldr	r1, [r7, #8]
 8002108:	68f8      	ldr	r0, [r7, #12]
 800210a:	f001 fa05 	bl	8003518 <ETH_Prepare_Tx_Descriptors>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d007      	beq.n	8002124 <HAL_ETH_Transmit+0x4a>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002118:	f043 0202 	orr.w	r2, r3, #2
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	675a      	str	r2, [r3, #116]	; 0x74
      return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e05f      	b.n	80021e4 <HAL_ETH_Transmit+0x10a>
    }

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	3206      	adds	r2, #6
 800212c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002130:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002136:	1c5a      	adds	r2, r3, #1
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	629a      	str	r2, [r3, #40]	; 0x28
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002140:	2b03      	cmp	r3, #3
 8002142:	d904      	bls.n	800214e <HAL_ETH_Transmit+0x74>
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002148:	1f1a      	subs	r2, r3, #4
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	68fa      	ldr	r2, [r7, #12]
 8002158:	3106      	adds	r1, #6
 800215a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800215e:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8002162:	601a      	str	r2, [r3, #0]

    tickstart = HAL_GetTick();
 8002164:	f7ff fc10 	bl	8001988 <HAL_GetTick>
 8002168:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 800216a:	e034      	b.n	80021d6 <HAL_ETH_Transmit+0xfc>
    {
      if((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d011      	beq.n	80021a2 <HAL_ETH_Transmit+0xc8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002182:	f043 0208 	orr.w	r2, r3, #8
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	675a      	str	r2, [r3, #116]	; 0x74
        heth->DMAErrorCode = heth->Instance->DMACSR;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	679a      	str	r2, [r3, #120]	; 0x78
        /* Set ETH HAL State to Ready */
        heth->gState = HAL_ETH_STATE_ERROR;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	22e0      	movs	r2, #224	; 0xe0
 800219c:	66da      	str	r2, [r3, #108]	; 0x6c
        /* Return function status */
        return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e020      	b.n	80021e4 <HAL_ETH_Transmit+0x10a>
      }

      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021a8:	d015      	beq.n	80021d6 <HAL_ETH_Transmit+0xfc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout) || (Timeout == 0U))
 80021aa:	f7ff fbed 	bl	8001988 <HAL_GetTick>
 80021ae:	4602      	mov	r2, r0
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	1ad3      	subs	r3, r2, r3
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d302      	bcc.n	80021c0 <HAL_ETH_Transmit+0xe6>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d10a      	bne.n	80021d6 <HAL_ETH_Transmit+0xfc>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021c4:	f043 0204 	orr.w	r2, r3, #4
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	675a      	str	r2, [r3, #116]	; 0x74
          heth->gState = HAL_ETH_STATE_ERROR;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	22e0      	movs	r2, #224	; 0xe0
 80021d0:	66da      	str	r2, [r3, #108]	; 0x6c
          return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e006      	b.n	80021e4 <HAL_ETH_Transmit+0x10a>
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	68db      	ldr	r3, [r3, #12]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	dbc6      	blt.n	800216c <HAL_ETH_Transmit+0x92>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 80021de:	2300      	movs	r3, #0
 80021e0:	e000      	b.n	80021e4 <HAL_ETH_Transmit+0x10a>
  }
  else
  {
    return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
  }
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3718      	adds	r7, #24
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}

080021ec <HAL_ETH_IsRxDataAvailable>:
  *         the configuration information for ETHERNET module
  * @retval  1: A Packet is received
  *          0: no Packet received
  */
uint8_t HAL_ETH_IsRxDataAvailable(ETH_HandleTypeDef *heth)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b089      	sub	sp, #36	; 0x24
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	3344      	adds	r3, #68	; 0x44
 80021f8:	60bb      	str	r3, [r7, #8]
  uint32_t descidx = dmarxdesclist->CurRxDesc;
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	691b      	ldr	r3, [r3, #16]
 80021fe:	61fb      	str	r3, [r7, #28]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	69fa      	ldr	r2, [r7, #28]
 8002204:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002208:	61bb      	str	r3, [r7, #24]
  uint32_t descscancnt = 0;
 800220a:	2300      	movs	r3, #0
 800220c:	617b      	str	r3, [r7, #20]
  uint32_t appdesccnt = 0, firstappdescidx = 0;
 800220e:	2300      	movs	r3, #0
 8002210:	613b      	str	r3, [r7, #16]
 8002212:	2300      	movs	r3, #0
 8002214:	60fb      	str	r3, [r7, #12]

  if(dmarxdesclist->AppDescNbr != 0U)
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	699b      	ldr	r3, [r3, #24]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d06b      	beq.n	80022f6 <HAL_ETH_IsRxDataAvailable+0x10a>
  {
    /* data already received by not yet processed*/
    return 0;
 800221e:	2300      	movs	r3, #0
 8002220:	e0ce      	b.n	80023c0 <HAL_ETH_IsRxDataAvailable+0x1d4>
  }

  /* Check if descriptor is not owned by DMA */
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
  {
    descscancnt++;
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	3301      	adds	r3, #1
 8002226:	617b      	str	r3, [r7, #20]

    /* Check if last descriptor */
    if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8002228:	69bb      	ldr	r3, [r7, #24]
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002230:	2b00      	cmp	r3, #0
 8002232:	d036      	beq.n	80022a2 <HAL_ETH_IsRxDataAvailable+0xb6>
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	3301      	adds	r3, #1
 8002238:	613b      	str	r3, [r7, #16]

      if(appdesccnt == 1U)
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	2b01      	cmp	r3, #1
 800223e:	d101      	bne.n	8002244 <HAL_ETH_IsRxDataAvailable+0x58>
      {
        WRITE_REG(firstappdescidx, descidx);
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	60fb      	str	r3, [r7, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	3301      	adds	r3, #1
 8002248:	61fb      	str	r3, [r7, #28]
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	2b03      	cmp	r3, #3
 800224e:	d902      	bls.n	8002256 <HAL_ETH_IsRxDataAvailable+0x6a>
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	3b04      	subs	r3, #4
 8002254:	61fb      	str	r3, [r7, #28]

      /* Check for Context descriptor */
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	69fa      	ldr	r2, [r7, #28]
 800225a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800225e:	61bb      	str	r3, [r7, #24]

      if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_OWN)  == (uint32_t)RESET)
 8002260:	69bb      	ldr	r3, [r7, #24]
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	2b00      	cmp	r3, #0
 8002266:	db11      	blt.n	800228c <HAL_ETH_IsRxDataAvailable+0xa0>
      {
        if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 8002268:	69bb      	ldr	r3, [r7, #24]
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002270:	2b00      	cmp	r3, #0
 8002272:	d00b      	beq.n	800228c <HAL_ETH_IsRxDataAvailable+0xa0>
        {
          /* Increment the number of descriptors to be passed to the application */
          dmarxdesclist->AppContextDesc = 1;
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	2201      	movs	r2, #1
 8002278:	61da      	str	r2, [r3, #28]
          /* Increment current rx descriptor index */
          INCR_RX_DESC_INDEX(descidx, 1U);
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	3301      	adds	r3, #1
 800227e:	61fb      	str	r3, [r7, #28]
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	2b03      	cmp	r3, #3
 8002284:	d902      	bls.n	800228c <HAL_ETH_IsRxDataAvailable+0xa0>
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	3b04      	subs	r3, #4
 800228a:	61fb      	str	r3, [r7, #28]
        }
      }
      /* Fill information to Rx descriptors list */
      dmarxdesclist->CurRxDesc = descidx;
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	69fa      	ldr	r2, [r7, #28]
 8002290:	611a      	str	r2, [r3, #16]
      dmarxdesclist->FirstAppDesc = firstappdescidx;
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	68fa      	ldr	r2, [r7, #12]
 8002296:	615a      	str	r2, [r3, #20]
      dmarxdesclist->AppDescNbr = appdesccnt;
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	693a      	ldr	r2, [r7, #16]
 800229c:	619a      	str	r2, [r3, #24]

      /* Return function status */
      return 1;
 800229e:	2301      	movs	r3, #1
 80022a0:	e08e      	b.n	80023c0 <HAL_ETH_IsRxDataAvailable+0x1d4>
    }
    /* Check if first descriptor */
    else if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 80022a2:	69bb      	ldr	r3, [r7, #24]
 80022a4:	68db      	ldr	r3, [r3, #12]
 80022a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d012      	beq.n	80022d4 <HAL_ETH_IsRxDataAvailable+0xe8>
    {
      WRITE_REG(firstappdescidx, descidx);
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	60fb      	str	r3, [r7, #12]
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt = 1U;
 80022b2:	2301      	movs	r3, #1
 80022b4:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	3301      	adds	r3, #1
 80022ba:	61fb      	str	r3, [r7, #28]
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	2b03      	cmp	r3, #3
 80022c0:	d902      	bls.n	80022c8 <HAL_ETH_IsRxDataAvailable+0xdc>
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	3b04      	subs	r3, #4
 80022c6:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	69fa      	ldr	r2, [r7, #28]
 80022cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022d0:	61bb      	str	r3, [r7, #24]
 80022d2:	e010      	b.n	80022f6 <HAL_ETH_IsRxDataAvailable+0x10a>
    }
    /* It should be an intermediate descriptor */
    else
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	3301      	adds	r3, #1
 80022d8:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	3301      	adds	r3, #1
 80022de:	61fb      	str	r3, [r7, #28]
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	2b03      	cmp	r3, #3
 80022e4:	d902      	bls.n	80022ec <HAL_ETH_IsRxDataAvailable+0x100>
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	3b04      	subs	r3, #4
 80022ea:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	69fa      	ldr	r2, [r7, #28]
 80022f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022f4:	61bb      	str	r3, [r7, #24]
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	68db      	ldr	r3, [r3, #12]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	db02      	blt.n	8002304 <HAL_ETH_IsRxDataAvailable+0x118>
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	2b03      	cmp	r3, #3
 8002302:	d98e      	bls.n	8002222 <HAL_ETH_IsRxDataAvailable+0x36>
    }
  }

  /* Build Descriptors if an incomplete Packet is received */
  if(appdesccnt > 0U)
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d056      	beq.n	80023b8 <HAL_ETH_IsRxDataAvailable+0x1cc>
  {
    dmarxdesclist->CurRxDesc = descidx;
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	69fa      	ldr	r2, [r7, #28]
 800230e:	611a      	str	r2, [r3, #16]
    dmarxdesclist->FirstAppDesc = firstappdescidx;
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	68fa      	ldr	r2, [r7, #12]
 8002314:	615a      	str	r2, [r3, #20]
    descidx = firstappdescidx;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	61fb      	str	r3, [r7, #28]
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	69fa      	ldr	r2, [r7, #28]
 800231e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002322:	61bb      	str	r3, [r7, #24]

    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 8002324:	2300      	movs	r3, #0
 8002326:	617b      	str	r3, [r7, #20]
 8002328:	e03b      	b.n	80023a2 <HAL_ETH_IsRxDataAvailable+0x1b6>
    {
      WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 800232a:	69bb      	ldr	r3, [r7, #24]
 800232c:	691a      	ldr	r2, [r3, #16]
 800232e:	69bb      	ldr	r3, [r7, #24]
 8002330:	601a      	str	r2, [r3, #0]
      WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8002332:	69bb      	ldr	r3, [r7, #24]
 8002334:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002338:	60da      	str	r2, [r3, #12]

      if (READ_REG(dmarxdesc->BackupAddr1) != ((uint32_t)RESET))
 800233a:	69bb      	ldr	r3, [r7, #24]
 800233c:	695b      	ldr	r3, [r3, #20]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d009      	beq.n	8002356 <HAL_ETH_IsRxDataAvailable+0x16a>
      {
        WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 8002342:	69bb      	ldr	r3, [r7, #24]
 8002344:	695a      	ldr	r2, [r3, #20]
 8002346:	69bb      	ldr	r3, [r7, #24]
 8002348:	609a      	str	r2, [r3, #8]
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 800234a:	69bb      	ldr	r3, [r7, #24]
 800234c:	68db      	ldr	r3, [r3, #12]
 800234e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002352:	69bb      	ldr	r3, [r7, #24]
 8002354:	60da      	str	r2, [r3, #12]
      }

      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8002356:	69bb      	ldr	r3, [r7, #24]
 8002358:	68db      	ldr	r3, [r3, #12]
 800235a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800235e:	69bb      	ldr	r3, [r7, #24]
 8002360:	60da      	str	r2, [r3, #12]

      if(dmarxdesclist->ItMode != ((uint32_t)RESET))
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	6a1b      	ldr	r3, [r3, #32]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d005      	beq.n	8002376 <HAL_ETH_IsRxDataAvailable+0x18a>
      {
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 800236a:	69bb      	ldr	r3, [r7, #24]
 800236c:	68db      	ldr	r3, [r3, #12]
 800236e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002372:	69bb      	ldr	r3, [r7, #24]
 8002374:	60da      	str	r2, [r3, #12]
      }
      if(descscancnt < (appdesccnt - 1U))
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	3b01      	subs	r3, #1
 800237a:	697a      	ldr	r2, [r7, #20]
 800237c:	429a      	cmp	r2, r3
 800237e:	d20d      	bcs.n	800239c <HAL_ETH_IsRxDataAvailable+0x1b0>
      {
        /* Increment rx descriptor index */
        INCR_RX_DESC_INDEX(descidx, 1U);
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	3301      	adds	r3, #1
 8002384:	61fb      	str	r3, [r7, #28]
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	2b03      	cmp	r3, #3
 800238a:	d902      	bls.n	8002392 <HAL_ETH_IsRxDataAvailable+0x1a6>
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	3b04      	subs	r3, #4
 8002390:	61fb      	str	r3, [r7, #28]
        /* Get descriptor address */
        dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	69fa      	ldr	r2, [r7, #28]
 8002396:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800239a:	61bb      	str	r3, [r7, #24]
    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	3301      	adds	r3, #1
 80023a0:	617b      	str	r3, [r7, #20]
 80023a2:	697a      	ldr	r2, [r7, #20]
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d3bf      	bcc.n	800232a <HAL_ETH_IsRxDataAvailable+0x13e>
      }
    }

    /* Set the Tail pointer address to the last rx descriptor hold by the app */
    WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6819      	ldr	r1, [r3, #0]
 80023ae:	69ba      	ldr	r2, [r7, #24]
 80023b0:	f241 1328 	movw	r3, #4392	; 0x1128
 80023b4:	440b      	add	r3, r1
 80023b6:	601a      	str	r2, [r3, #0]
  }

  /* Fill information to Rx descriptors list: No received Packet */
  dmarxdesclist->AppDescNbr = 0U;
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	2200      	movs	r2, #0
 80023bc:	619a      	str	r2, [r3, #24]

  return 0;
 80023be:	2300      	movs	r3, #0
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3724      	adds	r7, #36	; 0x24
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr

080023cc <HAL_ETH_GetRxDataBuffer>:
  *         the configuration information for ETHERNET module
  * @param  RxBuffer: Pointer to a ETH_BufferTypeDef structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataBuffer(ETH_HandleTypeDef *heth, ETH_BufferTypeDef *RxBuffer)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b08a      	sub	sp, #40	; 0x28
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	3344      	adds	r3, #68	; 0x44
 80023da:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	695b      	ldr	r3, [r3, #20]
 80023e0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t index, accumulatedlen = 0, lastdesclen;
 80023e2:	2300      	movs	r3, #0
 80023e4:	61fb      	str	r3, [r7, #28]
  __IO const ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023ee:	61bb      	str	r3, [r7, #24]
  ETH_BufferTypeDef *rxbuff = RxBuffer;
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	617b      	str	r3, [r7, #20]

  if(rxbuff == NULL)
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d104      	bne.n	8002404 <HAL_ETH_GetRxDataBuffer+0x38>
  {
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2201      	movs	r2, #1
 80023fe:	675a      	str	r2, [r3, #116]	; 0x74
    return HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e07d      	b.n	8002500 <HAL_ETH_GetRxDataBuffer+0x134>
  }

  if(dmarxdesclist->AppDescNbr == 0U)
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	699b      	ldr	r3, [r3, #24]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d10f      	bne.n	800242c <HAL_ETH_GetRxDataBuffer+0x60>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	f7ff feed 	bl	80021ec <HAL_ETH_IsRxDataAvailable>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d101      	bne.n	800241c <HAL_ETH_GetRxDataBuffer+0x50>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e071      	b.n	8002500 <HAL_ETH_GetRxDataBuffer+0x134>
    }
    else
    {
      descidx = dmarxdesclist->FirstAppDesc;
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	695b      	ldr	r3, [r3, #20]
 8002420:	627b      	str	r3, [r7, #36]	; 0x24
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002426:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800242a:	61bb      	str	r3, [r7, #24]
    }
  }

  /* Get intermediate descriptors buffers: in case of the Packet is split into multi descriptors */
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 800242c:	2300      	movs	r3, #0
 800242e:	623b      	str	r3, [r7, #32]
 8002430:	e031      	b.n	8002496 <HAL_ETH_GetRxDataBuffer+0xca>
  {
    /* Get Address and length of the first buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 8002432:	69bb      	ldr	r3, [r7, #24]
 8002434:	691b      	ldr	r3, [r3, #16]
 8002436:	461a      	mov	r2, r3
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	601a      	str	r2, [r3, #0]
    rxbuff->len =  heth->Init.RxBuffLen;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	695a      	ldr	r2, [r3, #20]
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	605a      	str	r2, [r3, #4]

    /* Check if the second buffer address of this descriptor is valid */
    if(dmarxdesc->BackupAddr1 != 0U)
 8002444:	69bb      	ldr	r3, [r7, #24]
 8002446:	695b      	ldr	r3, [r3, #20]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d00b      	beq.n	8002464 <HAL_ETH_GetRxDataBuffer+0x98>
    {
      /* Point to next buffer */
      rxbuff = rxbuff->next;
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	617b      	str	r3, [r7, #20]
      /* Get Address and length of the second buffer address */
      rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 8002452:	69bb      	ldr	r3, [r7, #24]
 8002454:	695b      	ldr	r3, [r3, #20]
 8002456:	461a      	mov	r2, r3
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	601a      	str	r2, [r3, #0]
      rxbuff->len =  heth->Init.RxBuffLen;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	695a      	ldr	r2, [r3, #20]
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	605a      	str	r2, [r3, #4]
    {
      /* Nothing to do here */
    }

    /* get total length until this descriptor */
    accumulatedlen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 8002464:	69bb      	ldr	r3, [r7, #24]
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800246c:	61fb      	str	r3, [r7, #28]

    /* Increment to next descriptor */
    INCR_RX_DESC_INDEX(descidx, 1U);
 800246e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002470:	3301      	adds	r3, #1
 8002472:	627b      	str	r3, [r7, #36]	; 0x24
 8002474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002476:	2b03      	cmp	r3, #3
 8002478:	d902      	bls.n	8002480 <HAL_ETH_GetRxDataBuffer+0xb4>
 800247a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247c:	3b04      	subs	r3, #4
 800247e:	627b      	str	r3, [r7, #36]	; 0x24
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002484:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002488:	61bb      	str	r3, [r7, #24]

    /* Point to next buffer */
    rxbuff = rxbuff->next;
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	617b      	str	r3, [r7, #20]
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 8002490:	6a3b      	ldr	r3, [r7, #32]
 8002492:	3301      	adds	r3, #1
 8002494:	623b      	str	r3, [r7, #32]
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	699b      	ldr	r3, [r3, #24]
 800249a:	3b01      	subs	r3, #1
 800249c:	6a3a      	ldr	r2, [r7, #32]
 800249e:	429a      	cmp	r2, r3
 80024a0:	d3c7      	bcc.n	8002432 <HAL_ETH_GetRxDataBuffer+0x66>
  }

  /* last descriptor data length */
  lastdesclen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - accumulatedlen;
 80024a2:	69bb      	ldr	r3, [r7, #24]
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	60fb      	str	r3, [r7, #12]

  /* Get Address of the first buffer address */
  rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 80024b0:	69bb      	ldr	r3, [r7, #24]
 80024b2:	691b      	ldr	r3, [r3, #16]
 80024b4:	461a      	mov	r2, r3
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	601a      	str	r2, [r3, #0]

  /* data is in only one buffer */
  if(lastdesclen <= heth->Init.RxBuffLen)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	695b      	ldr	r3, [r3, #20]
 80024be:	68fa      	ldr	r2, [r7, #12]
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d803      	bhi.n	80024cc <HAL_ETH_GetRxDataBuffer+0x100>
  {
    rxbuff->len = lastdesclen;
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	68fa      	ldr	r2, [r7, #12]
 80024c8:	605a      	str	r2, [r3, #4]
 80024ca:	e018      	b.n	80024fe <HAL_ETH_GetRxDataBuffer+0x132>
  }
  /* data is in two buffers */
  else if(dmarxdesc->BackupAddr1 != 0U)
 80024cc:	69bb      	ldr	r3, [r7, #24]
 80024ce:	695b      	ldr	r3, [r3, #20]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d012      	beq.n	80024fa <HAL_ETH_GetRxDataBuffer+0x12e>
  {
    /* Get the Length of the first buffer address */
    rxbuff->len = heth->Init.RxBuffLen;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	695a      	ldr	r2, [r3, #20]
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	605a      	str	r2, [r3, #4]
    /* Point to next buffer */
    rxbuff = rxbuff->next;
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	617b      	str	r3, [r7, #20]
    /* Get the Address the Length of the second buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 80024e2:	69bb      	ldr	r3, [r7, #24]
 80024e4:	695b      	ldr	r3, [r3, #20]
 80024e6:	461a      	mov	r2, r3
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	601a      	str	r2, [r3, #0]
    rxbuff->len =  lastdesclen - (heth->Init.RxBuffLen);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	695b      	ldr	r3, [r3, #20]
 80024f0:	68fa      	ldr	r2, [r7, #12]
 80024f2:	1ad2      	subs	r2, r2, r3
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	605a      	str	r2, [r3, #4]
 80024f8:	e001      	b.n	80024fe <HAL_ETH_GetRxDataBuffer+0x132>
  }
  else /* Buffer 2 not valid*/
  {
    return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e000      	b.n	8002500 <HAL_ETH_GetRxDataBuffer+0x134>
  }

  return HAL_OK;
 80024fe:	2300      	movs	r3, #0
}
 8002500:	4618      	mov	r0, r3
 8002502:	3728      	adds	r7, #40	; 0x28
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}

08002508 <HAL_ETH_GetRxDataLength>:
  *         the configuration information for ETHERNET module
  * @param  Length: parameter to hold Rx packet length
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataLength(ETH_HandleTypeDef *heth, uint32_t *Length)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b086      	sub	sp, #24
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	3344      	adds	r3, #68	; 0x44
 8002516:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	695b      	ldr	r3, [r3, #20]
 800251c:	617b      	str	r3, [r7, #20]
  __IO const ETH_DMADescTypeDef *dmarxdesc;

  if(dmarxdesclist->AppDescNbr == 0U)
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	699b      	ldr	r3, [r3, #24]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d107      	bne.n	8002536 <HAL_ETH_GetRxDataLength+0x2e>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f7ff fe60 	bl	80021ec <HAL_ETH_IsRxDataAvailable>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d101      	bne.n	8002536 <HAL_ETH_GetRxDataLength+0x2e>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e017      	b.n	8002566 <HAL_ETH_GetRxDataLength+0x5e>
    }
  }

  /* Get index of last descriptor */
  INCR_RX_DESC_INDEX(descidx, (dmarxdesclist->AppDescNbr - 1U));
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	699a      	ldr	r2, [r3, #24]
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	4413      	add	r3, r2
 800253e:	3b01      	subs	r3, #1
 8002540:	617b      	str	r3, [r7, #20]
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	2b03      	cmp	r3, #3
 8002546:	d902      	bls.n	800254e <HAL_ETH_GetRxDataLength+0x46>
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	3b04      	subs	r3, #4
 800254c:	617b      	str	r3, [r7, #20]
  /* Point to last descriptor */
  dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	697a      	ldr	r2, [r7, #20]
 8002552:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002556:	60fb      	str	r3, [r7, #12]

  *Length = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002564:	2300      	movs	r3, #0
}
 8002566:	4618      	mov	r0, r3
 8002568:	3718      	adds	r7, #24
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}

0800256e <HAL_ETH_BuildRxDescriptors>:
* @param  heth: pointer to a ETH_HandleTypeDef structure that contains
*         the configuration information for ETHERNET module
* @retval HAL status.
*/
HAL_StatusTypeDef HAL_ETH_BuildRxDescriptors(ETH_HandleTypeDef *heth)
{
 800256e:	b480      	push	{r7}
 8002570:	b089      	sub	sp, #36	; 0x24
 8002572:	af00      	add	r7, sp, #0
 8002574:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	3344      	adds	r3, #68	; 0x44
 800257a:	60fb      	str	r3, [r7, #12]
  uint32_t descindex = dmarxdesclist->FirstAppDesc;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	695b      	ldr	r3, [r3, #20]
 8002580:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	69fa      	ldr	r2, [r7, #28]
 8002586:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800258a:	61bb      	str	r3, [r7, #24]
  uint32_t totalappdescnbr = dmarxdesclist->AppDescNbr;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	699b      	ldr	r3, [r3, #24]
 8002590:	617b      	str	r3, [r7, #20]
  uint32_t descscan;

  if(dmarxdesclist->AppDescNbr == 0U)
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	699b      	ldr	r3, [r3, #24]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d101      	bne.n	800259e <HAL_ETH_BuildRxDescriptors+0x30>
  {
    /* No Rx descriptors to build */
    return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e057      	b.n	800264e <HAL_ETH_BuildRxDescriptors+0xe0>
  }

  if(dmarxdesclist->AppContextDesc != 0U)
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	69db      	ldr	r3, [r3, #28]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d002      	beq.n	80025ac <HAL_ETH_BuildRxDescriptors+0x3e>
  {
    /* A context descriptor is available */
    totalappdescnbr += 1U;
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	3301      	adds	r3, #1
 80025aa:	617b      	str	r3, [r7, #20]
  }

  for(descscan =0; descscan < totalappdescnbr; descscan++)
 80025ac:	2300      	movs	r3, #0
 80025ae:	613b      	str	r3, [r7, #16]
 80025b0:	e03b      	b.n	800262a <HAL_ETH_BuildRxDescriptors+0xbc>
  {
    WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	691a      	ldr	r2, [r3, #16]
 80025b6:	69bb      	ldr	r3, [r7, #24]
 80025b8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 80025ba:	69bb      	ldr	r3, [r7, #24]
 80025bc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80025c0:	60da      	str	r2, [r3, #12]

    if (READ_REG(dmarxdesc->BackupAddr1) != 0U)
 80025c2:	69bb      	ldr	r3, [r7, #24]
 80025c4:	695b      	ldr	r3, [r3, #20]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d009      	beq.n	80025de <HAL_ETH_BuildRxDescriptors+0x70>
    {
      WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 80025ca:	69bb      	ldr	r3, [r7, #24]
 80025cc:	695a      	ldr	r2, [r3, #20]
 80025ce:	69bb      	ldr	r3, [r7, #24]
 80025d0:	609a      	str	r2, [r3, #8]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 80025d2:	69bb      	ldr	r3, [r7, #24]
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80025da:	69bb      	ldr	r3, [r7, #24]
 80025dc:	60da      	str	r2, [r3, #12]
    }

    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 80025de:	69bb      	ldr	r3, [r7, #24]
 80025e0:	68db      	ldr	r3, [r3, #12]
 80025e2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80025e6:	69bb      	ldr	r3, [r7, #24]
 80025e8:	60da      	str	r2, [r3, #12]

    if(dmarxdesclist->ItMode != 0U)
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	6a1b      	ldr	r3, [r3, #32]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d005      	beq.n	80025fe <HAL_ETH_BuildRxDescriptors+0x90>
    {
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 80025f2:	69bb      	ldr	r3, [r7, #24]
 80025f4:	68db      	ldr	r3, [r3, #12]
 80025f6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80025fa:	69bb      	ldr	r3, [r7, #24]
 80025fc:	60da      	str	r2, [r3, #12]
    }

    if(descscan < (totalappdescnbr - 1U))
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	3b01      	subs	r3, #1
 8002602:	693a      	ldr	r2, [r7, #16]
 8002604:	429a      	cmp	r2, r3
 8002606:	d20d      	bcs.n	8002624 <HAL_ETH_BuildRxDescriptors+0xb6>
    {
      /* Increment rx descriptor index */
      INCR_RX_DESC_INDEX(descindex, 1U);
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	3301      	adds	r3, #1
 800260c:	61fb      	str	r3, [r7, #28]
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	2b03      	cmp	r3, #3
 8002612:	d902      	bls.n	800261a <HAL_ETH_BuildRxDescriptors+0xac>
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	3b04      	subs	r3, #4
 8002618:	61fb      	str	r3, [r7, #28]
      /* Get descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	69fa      	ldr	r2, [r7, #28]
 800261e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002622:	61bb      	str	r3, [r7, #24]
  for(descscan =0; descscan < totalappdescnbr; descscan++)
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	3301      	adds	r3, #1
 8002628:	613b      	str	r3, [r7, #16]
 800262a:	693a      	ldr	r2, [r7, #16]
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	429a      	cmp	r2, r3
 8002630:	d3bf      	bcc.n	80025b2 <HAL_ETH_BuildRxDescriptors+0x44>
    }
  }

  /* Set the Tail pointer address to the last rx descriptor hold by the app */
  WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6819      	ldr	r1, [r3, #0]
 8002636:	69ba      	ldr	r2, [r7, #24]
 8002638:	f241 1328 	movw	r3, #4392	; 0x1128
 800263c:	440b      	add	r3, r1
 800263e:	601a      	str	r2, [r3, #0]

  /* reset the Application desc number */
  WRITE_REG(dmarxdesclist->AppDescNbr, 0);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2200      	movs	r2, #0
 8002644:	619a      	str	r2, [r3, #24]

  /*  reset the application context descriptor */
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	661a      	str	r2, [r3, #96]	; 0x60

  return HAL_OK;
 800264c:	2300      	movs	r3, #0
}
 800264e:	4618      	mov	r0, r3
 8002650:	3724      	adds	r7, #36	; 0x24
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr
	...

0800265c <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002672:	2b40      	cmp	r3, #64	; 0x40
 8002674:	d113      	bne.n	800269e <HAL_ETH_IRQHandler+0x42>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	f241 1334 	movw	r3, #4404	; 0x1134
 800267e:	4413      	add	r3, r2
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002686:	2b40      	cmp	r3, #64	; 0x40
 8002688:	d109      	bne.n	800269e <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f000 f8de 	bl	800284c <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002698:	f248 0240 	movw	r2, #32832	; 0x8040
 800269c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0301 	and.w	r3, r3, #1
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d113      	bne.n	80026d8 <HAL_ETH_IRQHandler+0x7c>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	f241 1334 	movw	r3, #4404	; 0x1134
 80026b8:	4413      	add	r3, r2
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 0301 	and.w	r3, r3, #1
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d109      	bne.n	80026d8 <HAL_ETH_IRQHandler+0x7c>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
        /*Call registered Transmit complete callback*/
        heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	f000 f8b7 	bl	8002838 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80026d2:	f248 0201 	movw	r2, #32769	; 0x8001
 80026d6:	601a      	str	r2, [r3, #0]
    }
  }


  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80026ea:	d149      	bne.n	8002780 <HAL_ETH_IRQHandler+0x124>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	f241 1334 	movw	r3, #4404	; 0x1134
 80026f4:	4413      	add	r3, r2
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002700:	d13e      	bne.n	8002780 <HAL_ETH_IRQHandler+0x124>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002706:	f043 0208 	orr.w	r2, r3, #8
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	675a      	str	r2, [r3, #116]	; 0x74

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800271c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002720:	d11b      	bne.n	800275a <HAL_ETH_IRQHandler+0xfe>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	f241 1302 	movw	r3, #4354	; 0x1102
 8002730:	4013      	ands	r3, r2
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	6793      	str	r3, [r2, #120]	; 0x78

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	f241 1334 	movw	r3, #4404	; 0x1134
 800273e:	4413      	add	r3, r2
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	687a      	ldr	r2, [r7, #4]
 8002744:	6811      	ldr	r1, [r2, #0]
 8002746:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800274a:	f241 1334 	movw	r3, #4404	; 0x1134
 800274e:	440b      	add	r3, r1
 8002750:	601a      	str	r2, [r3, #0]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	22e0      	movs	r2, #224	; 0xe0
 8002756:	66da      	str	r2, [r3, #108]	; 0x6c
 8002758:	e00f      	b.n	800277a <HAL_ETH_IRQHandler+0x11e>
      }
      else
      {
        /* Get DMA error status  */
       heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f403 42cd 	and.w	r2, r3, #26240	; 0x6680
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	679a      	str	r2, [r3, #120]	; 0x78
                                                       ETH_DMACSR_RBU | ETH_DMACSR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002774:	f44f 42cd 	mov.w	r2, #26240	; 0x6680
 8002778:	601a      	str	r2, [r3, #0]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered DMA Error callback*/
      heth->DMAErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_DMAErrorCallback(heth);
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f000 f870 	bl	8002860 <HAL_ETH_DMAErrorCallback>

    }
  }

  /* ETH MAC Error IT */
  if(__HAL_ETH_MAC_GET_IT(heth, (ETH_MACIER_RXSTSIE | ETH_MACIER_TXSTSIE)))
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002788:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800278c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002790:	d10e      	bne.n	80027b0 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	67da      	str	r2, [r3, #124]	; 0x7c

    heth->gState = HAL_ETH_STATE_ERROR;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	22e0      	movs	r2, #224	; 0xe0
 80027a2:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered MAC Error callback*/
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet MAC Error callback */
    HAL_ETH_MACErrorCallback(heth);
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	f000 f865 	bl	8002874 <HAL_ETH_MACErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACErrorCode = (uint32_t)(0x0U);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2200      	movs	r2, #0
 80027ae:	67da      	str	r2, [r3, #124]	; 0x7c
  }

  /* ETH PMT IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80027b8:	f003 0310 	and.w	r3, r3, #16
 80027bc:	2b10      	cmp	r3, #16
 80027be:	d10f      	bne.n	80027e0 <HAL_ETH_IRQHandler+0x184>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80027c8:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f000 f858 	bl	8002888 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2200      	movs	r2, #0
 80027dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }

  /* ETH EEE IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80027e8:	f003 0320 	and.w	r3, r3, #32
 80027ec:	2b20      	cmp	r3, #32
 80027ee:	d10f      	bne.n	8002810 <HAL_ETH_IRQHandler+0x1b4>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80027f8:	f003 020f 	and.w	r2, r3, #15
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f000 f84a 	bl	800289c <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2200      	movs	r2, #0
 800280c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif
    }
  }
#else
  /* check ETH WAKEUP exti flag */
  if(__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8002810:	4b08      	ldr	r3, [pc, #32]	; (8002834 <HAL_ETH_IRQHandler+0x1d8>)
 8002812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002814:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002818:	2b00      	cmp	r3, #0
 800281a:	d006      	beq.n	800282a <HAL_ETH_IRQHandler+0x1ce>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 800281c:	4b05      	ldr	r3, [pc, #20]	; (8002834 <HAL_ETH_IRQHandler+0x1d8>)
 800281e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002822:	629a      	str	r2, [r3, #40]	; 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered WakeUp callback*/
      heth->WakeUpCallback(heth);
#else
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
 8002824:	6878      	ldr	r0, [r7, #4]
 8002826:	f000 f843 	bl	80028b0 <HAL_ETH_WakeUpCallback>
#endif
  }
#endif
}
 800282a:	bf00      	nop
 800282c:	3708      	adds	r7, #8
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	58000080 	.word	0x58000080

08002838 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8002840:	bf00      	nop
 8002842:	370c      	adds	r7, #12
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr

0800284c <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 8002854:	bf00      	nop
 8002856:	370c      	adds	r7, #12
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr

08002860 <HAL_ETH_DMAErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_DMAErrorCallback(ETH_HandleTypeDef *heth)
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_DMAErrorCallback could be implemented in the user file
  */
}
 8002868:	bf00      	nop
 800286a:	370c      	adds	r7, #12
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr

08002874 <HAL_ETH_MACErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_MACErrorCallback(ETH_HandleTypeDef *heth)
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_MACErrorCallback could be implemented in the user file
  */
}
 800287c:	bf00      	nop
 800287e:	370c      	adds	r7, #12
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr

08002888 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8002890:	bf00      	nop
 8002892:	370c      	adds	r7, #12
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr

0800289c <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 80028a4:	bf00      	nop
 80028a6:	370c      	adds	r7, #12
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr

080028b0 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 80028b8:	bf00      	nop
 80028ba:	370c      	adds	r7, #12
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr

080028c4 <HAL_ETH_ReadPHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t *pRegValue)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b086      	sub	sp, #24
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	60f8      	str	r0, [r7, #12]
 80028cc:	60b9      	str	r1, [r7, #8]
 80028ce:	607a      	str	r2, [r7, #4]
 80028d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80028da:	f003 0301 	and.w	r3, r3, #1
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d001      	beq.n	80028e6 <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e03e      	b.n	8002964 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80028ee:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	055b      	lsls	r3, r3, #21
 80028fa:	4313      	orrs	r3, r2
 80028fc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	041b      	lsls	r3, r3, #16
 8002908:	4313      	orrs	r3, r2
 800290a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	f043 030c 	orr.w	r3, r3, #12
 8002912:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	f043 0301 	orr.w	r3, r3, #1
 800291a:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	697a      	ldr	r2, [r7, #20]
 8002922:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 8002926:	f7ff f82f 	bl	8001988 <HAL_GetTick>
 800292a:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 800292c:	e009      	b.n	8002942 <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 800292e:	f7ff f82b 	bl	8001988 <HAL_GetTick>
 8002932:	4602      	mov	r2, r0
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	1ad3      	subs	r3, r2, r3
 8002938:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800293c:	d901      	bls.n	8002942 <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e010      	b.n	8002964 <HAL_ETH_ReadPHYRegister+0xa0>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800294a:	f003 0301 	and.w	r3, r3, #1
 800294e:	2b00      	cmp	r3, #0
 8002950:	d1ed      	bne.n	800292e <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800295a:	b29b      	uxth	r3, r3
 800295c:	461a      	mov	r2, r3
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002962:	2300      	movs	r3, #0
}
 8002964:	4618      	mov	r0, r3
 8002966:	3718      	adds	r7, #24
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}

0800296c <HAL_ETH_WritePHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t RegValue)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b086      	sub	sp, #24
 8002970:	af00      	add	r7, sp, #0
 8002972:	60f8      	str	r0, [r7, #12]
 8002974:	60b9      	str	r1, [r7, #8]
 8002976:	607a      	str	r2, [r7, #4]
 8002978:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002982:	f003 0301 	and.w	r3, r3, #1
 8002986:	2b00      	cmp	r3, #0
 8002988:	d001      	beq.n	800298e <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e03c      	b.n	8002a08 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002996:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	055b      	lsls	r3, r3, #21
 80029a2:	4313      	orrs	r3, r2
 80029a4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	041b      	lsls	r3, r3, #16
 80029b0:	4313      	orrs	r3, r2
 80029b2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	f023 030c 	bic.w	r3, r3, #12
 80029ba:	f043 0304 	orr.w	r3, r3, #4
 80029be:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	f043 0301 	orr.w	r3, r3, #1
 80029c6:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	b29a      	uxth	r2, r3
 80029cc:	4b10      	ldr	r3, [pc, #64]	; (8002a10 <HAL_ETH_WritePHYRegister+0xa4>)
 80029ce:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 80029d2:	4a0f      	ldr	r2, [pc, #60]	; (8002a10 <HAL_ETH_WritePHYRegister+0xa4>)
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 80029da:	f7fe ffd5 	bl	8001988 <HAL_GetTick>
 80029de:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80029e0:	e009      	b.n	80029f6 <HAL_ETH_WritePHYRegister+0x8a>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 80029e2:	f7fe ffd1 	bl	8001988 <HAL_GetTick>
 80029e6:	4602      	mov	r2, r0
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	1ad3      	subs	r3, r2, r3
 80029ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80029f0:	d901      	bls.n	80029f6 <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e008      	b.n	8002a08 <HAL_ETH_WritePHYRegister+0x9c>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80029fe:	f003 0301 	and.w	r3, r3, #1
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d1ed      	bne.n	80029e2 <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 8002a06:	2300      	movs	r3, #0
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3718      	adds	r7, #24
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	40028000 	.word	0x40028000

08002a14 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d101      	bne.n	8002a28 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e1c3      	b.n	8002db0 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 020c 	and.w	r2, r3, #12
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC)>> 4) > 0U) ? ENABLE : DISABLE;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 0310 	and.w	r3, r3, #16
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	bf14      	ite	ne
 8002a44:	2301      	movne	r3, #1
 8002a46:	2300      	moveq	r3, #0
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	bf0c      	ite	eq
 8002a6e:	2301      	moveq	r3, #1
 8002a70:	2300      	movne	r3, #0
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	461a      	mov	r2, r3
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U) ? ENABLE : DISABLE;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	bf14      	ite	ne
 8002a8a:	2301      	movne	r3, #1
 8002a8c:	2300      	moveq	r3, #0
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	461a      	mov	r2, r3
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	bf0c      	ite	eq
 8002aa4:	2301      	moveq	r3, #1
 8002aa6:	2300      	movne	r3, #0
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	461a      	mov	r2, r3
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	bf14      	ite	ne
 8002abe:	2301      	movne	r3, #1
 8002ac0:	2300      	moveq	r3, #0
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	bf14      	ite	ne
 8002ad8:	2301      	movne	r3, #1
 8002ada:	2300      	moveq	r3, #0
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	461a      	mov	r2, r3
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	bf14      	ite	ne
 8002b0e:	2301      	movne	r3, #1
 8002b10:	2300      	moveq	r3, #0
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	461a      	mov	r2, r3
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >>17) == 0U) ? ENABLE : DISABLE;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	bf0c      	ite	eq
 8002b28:	2301      	moveq	r3, #1
 8002b2a:	2300      	movne	r3, #0
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	461a      	mov	r2, r3
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >>19) == 0U) ? ENABLE : DISABLE;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	bf0c      	ite	eq
 8002b42:	2301      	moveq	r3, #1
 8002b44:	2300      	movne	r3, #0
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	461a      	mov	r2, r3
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	bf14      	ite	ne
 8002b5c:	2301      	movne	r3, #1
 8002b5e:	2300      	moveq	r3, #0
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	461a      	mov	r2, r3
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	bf14      	ite	ne
 8002b76:	2301      	movne	r3, #1
 8002b78:	2300      	moveq	r3, #0
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	bf14      	ite	ne
 8002b90:	2301      	movne	r3, #1
 8002b92:	2300      	moveq	r3, #0
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	461a      	mov	r2, r3
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	bf14      	ite	ne
 8002baa:	2301      	movne	r3, #1
 8002bac:	2300      	moveq	r3, #0
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	bf14      	ite	ne
 8002bd2:	2301      	movne	r3, #1
 8002bd4:	2300      	moveq	r3, #0
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	461a      	mov	r2, r3
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	bf0c      	ite	eq
 8002c08:	2301      	moveq	r3, #1
 8002c0a:	2300      	movne	r3, #0
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	461a      	mov	r2, r3
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	bf14      	ite	ne
 8002c24:	2301      	movne	r3, #1
 8002c26:	2300      	moveq	r3, #0
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	bf14      	ite	ne
 8002c40:	2301      	movne	r3, #1
 8002c42:	2300      	moveq	r3, #0
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	461a      	mov	r2, r3
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U) ? ENABLE : DISABLE;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	bf14      	ite	ne
 8002c5c:	2301      	movne	r3, #1
 8002c5e:	2300      	moveq	r3, #0
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	461a      	mov	r2, r3
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	0e5b      	lsrs	r3, r3, #25
 8002c72:	f003 021f 	and.w	r2, r3, #31
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	bf14      	ite	ne
 8002c88:	2301      	movne	r3, #1
 8002c8a:	2300      	moveq	r3, #0
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	461a      	mov	r2, r3
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	f003 020f 	and.w	r2, r3, #15
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002caa:	f003 0302 	and.w	r3, r3, #2
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	bf14      	ite	ne
 8002cb2:	2301      	movne	r3, #1
 8002cb4:	2300      	moveq	r3, #0
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	461a      	mov	r2, r3
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	bf0c      	ite	eq
 8002cce:	2301      	moveq	r3, #1
 8002cd0:	2300      	movne	r3, #0
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ce2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cf0:	0c1b      	lsrs	r3, r3, #16
 8002cf2:	b29a      	uxth	r2, r3
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d00:	f003 0301 	and.w	r3, r3, #1
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	bf14      	ite	ne
 8002d08:	2301      	movne	r3, #1
 8002d0a:	2300      	moveq	r3, #0
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	461a      	mov	r2, r3
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U) ? ENABLE : DISABLE;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d1e:	f003 0302 	and.w	r3, r3, #2
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	bf14      	ite	ne
 8002d26:	2301      	movne	r3, #1
 8002d28:	2300      	moveq	r3, #0
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8002d3c:	f003 0272 	and.w	r2, r3, #114	; 0x72
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002d4c:	f003 0223 	and.w	r2, r3, #35	; 0x23
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002d5c:	f003 0308 	and.w	r3, r3, #8
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	bf14      	ite	ne
 8002d64:	2301      	movne	r3, #1
 8002d66:	2300      	moveq	r3, #0
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002d7a:	f003 0310 	and.w	r3, r3, #16
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	bf14      	ite	ne
 8002d82:	2301      	movne	r3, #1
 8002d84:	2300      	moveq	r3, #0
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	461a      	mov	r2, r3
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002d98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	bf0c      	ite	eq
 8002da0:	2301      	moveq	r3, #1
 8002da2:	2300      	movne	r3, #0
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	461a      	mov	r2, r3
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8002dae:	2300      	movs	r3, #0
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	370c      	adds	r7, #12
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr

08002dbc <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b082      	sub	sp, #8
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	6039      	str	r1, [r7, #0]
  if(macconf == NULL)
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d101      	bne.n	8002dd0 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e00a      	b.n	8002de6 <HAL_ETH_SetMACConfig+0x2a>
  }

  if(heth->RxState == HAL_ETH_STATE_READY)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dd4:	2b10      	cmp	r3, #16
 8002dd6:	d105      	bne.n	8002de4 <HAL_ETH_SetMACConfig+0x28>
  {
    ETH_SetMACConfig(heth, macconf);
 8002dd8:	6839      	ldr	r1, [r7, #0]
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f000 f860 	bl	8002ea0 <ETH_SetMACConfig>

    return HAL_OK;
 8002de0:	2300      	movs	r3, #0
 8002de2:	e000      	b.n	8002de6 <HAL_ETH_SetMACConfig+0x2a>
  }
  else
  {
    return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
  }
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3708      	adds	r7, #8
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
	...

08002df0 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b084      	sub	sp, #16
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002e00:	60fb      	str	r3, [r7, #12]

	/* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002e08:	60fb      	str	r3, [r7, #12]

	/* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002e0a:	f002 f8b9 	bl	8004f80 <HAL_RCC_GetHCLKFreq>
 8002e0e:	60b8      	str	r0, [r7, #8]

	/* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	4a1e      	ldr	r2, [pc, #120]	; (8002e8c <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d908      	bls.n	8002e2a <HAL_ETH_SetMDIOClockRange+0x3a>
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	4a1d      	ldr	r2, [pc, #116]	; (8002e90 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d804      	bhi.n	8002e2a <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e26:	60fb      	str	r3, [r7, #12]
 8002e28:	e027      	b.n	8002e7a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	4a18      	ldr	r2, [pc, #96]	; (8002e90 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d908      	bls.n	8002e44 <HAL_ETH_SetMDIOClockRange+0x54>
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	4a17      	ldr	r2, [pc, #92]	; (8002e94 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d204      	bcs.n	8002e44 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002e40:	60fb      	str	r3, [r7, #12]
 8002e42:	e01a      	b.n	8002e7a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	4a13      	ldr	r2, [pc, #76]	; (8002e94 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d303      	bcc.n	8002e54 <HAL_ETH_SetMDIOClockRange+0x64>
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	4a12      	ldr	r2, [pc, #72]	; (8002e98 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d911      	bls.n	8002e78 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	4a10      	ldr	r2, [pc, #64]	; (8002e98 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d908      	bls.n	8002e6e <HAL_ETH_SetMDIOClockRange+0x7e>
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	4a0f      	ldr	r2, [pc, #60]	; (8002e9c <HAL_ETH_SetMDIOClockRange+0xac>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d804      	bhi.n	8002e6e <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e6a:	60fb      	str	r3, [r7, #12]
 8002e6c:	e005      	b.n	8002e7a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e74:	60fb      	str	r3, [r7, #12]
 8002e76:	e000      	b.n	8002e7a <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8002e78:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	68fa      	ldr	r2, [r7, #12]
 8002e80:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8002e84:	bf00      	nop
 8002e86:	3710      	adds	r7, #16
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	01312cff 	.word	0x01312cff
 8002e90:	02160ebf 	.word	0x02160ebf
 8002e94:	03938700 	.word	0x03938700
 8002e98:	05f5e0ff 	.word	0x05f5e0ff
 8002e9c:	08f0d17f 	.word	0x08f0d17f

08002ea0 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b085      	sub	sp, #20
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8002eb2:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	791b      	ldrb	r3, [r3, #4]
 8002eb8:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8002eba:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	7b1b      	ldrb	r3, [r3, #12]
 8002ec0:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8002ec2:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	7b5b      	ldrb	r3, [r3, #13]
 8002ec8:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002eca:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	7b9b      	ldrb	r3, [r3, #14]
 8002ed0:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8002ed2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	7bdb      	ldrb	r3, [r3, #15]
 8002ed8:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002eda:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002edc:	683a      	ldr	r2, [r7, #0]
 8002ede:	7c12      	ldrb	r2, [r2, #16]
 8002ee0:	2a00      	cmp	r2, #0
 8002ee2:	d102      	bne.n	8002eea <ETH_SetMACConfig+0x4a>
 8002ee4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002ee8:	e000      	b.n	8002eec <ETH_SetMACConfig+0x4c>
 8002eea:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002eec:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002eee:	683a      	ldr	r2, [r7, #0]
 8002ef0:	7c52      	ldrb	r2, [r2, #17]
 8002ef2:	2a00      	cmp	r2, #0
 8002ef4:	d102      	bne.n	8002efc <ETH_SetMACConfig+0x5c>
 8002ef6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002efa:	e000      	b.n	8002efe <ETH_SetMACConfig+0x5e>
 8002efc:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002efe:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	7c9b      	ldrb	r3, [r3, #18]
 8002f04:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002f06:	431a      	orrs	r2, r3
                                macconf->Speed |
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8002f0c:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8002f12:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	7f1b      	ldrb	r3, [r3, #28]
 8002f18:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8002f1a:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	7f5b      	ldrb	r3, [r3, #29]
 8002f20:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8002f22:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8002f24:	683a      	ldr	r2, [r7, #0]
 8002f26:	7f92      	ldrb	r2, [r2, #30]
 8002f28:	2a00      	cmp	r2, #0
 8002f2a:	d102      	bne.n	8002f32 <ETH_SetMACConfig+0x92>
 8002f2c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f30:	e000      	b.n	8002f34 <ETH_SetMACConfig+0x94>
 8002f32:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8002f34:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	7fdb      	ldrb	r3, [r3, #31]
 8002f3a:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8002f3c:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8002f3e:	683a      	ldr	r2, [r7, #0]
 8002f40:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002f44:	2a00      	cmp	r2, #0
 8002f46:	d102      	bne.n	8002f4e <ETH_SetMACConfig+0xae>
 8002f48:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f4c:	e000      	b.n	8002f50 <ETH_SetMACConfig+0xb0>
 8002f4e:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8002f50:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8002f56:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002f5e:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8002f60:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8002f66:	4313      	orrs	r3, r2
 8002f68:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	4b56      	ldr	r3, [pc, #344]	; (80030cc <ETH_SetMACConfig+0x22c>)
 8002f72:	4013      	ands	r3, r2
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	6812      	ldr	r2, [r2, #0]
 8002f78:	68f9      	ldr	r1, [r7, #12]
 8002f7a:	430b      	orrs	r3, r1
 8002f7c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f82:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002f8a:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8002f8c:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002f94:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8002f96:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002f9e:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8002fa0:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8002fa2:	683a      	ldr	r2, [r7, #0]
 8002fa4:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8002fa8:	2a00      	cmp	r2, #0
 8002faa:	d102      	bne.n	8002fb2 <ETH_SetMACConfig+0x112>
 8002fac:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002fb0:	e000      	b.n	8002fb4 <ETH_SetMACConfig+0x114>
 8002fb2:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8002fb4:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	685a      	ldr	r2, [r3, #4]
 8002fc4:	4b42      	ldr	r3, [pc, #264]	; (80030d0 <ETH_SetMACConfig+0x230>)
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	6812      	ldr	r2, [r2, #0]
 8002fcc:	68f9      	ldr	r1, [r7, #12]
 8002fce:	430b      	orrs	r3, r1
 8002fd0:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002fd8:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	68da      	ldr	r2, [r3, #12]
 8002fe8:	4b3a      	ldr	r3, [pc, #232]	; (80030d4 <ETH_SetMACConfig+0x234>)
 8002fea:	4013      	ands	r3, r2
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	6812      	ldr	r2, [r2, #0]
 8002ff0:	68f9      	ldr	r1, [r7, #12]
 8002ff2:	430b      	orrs	r3, r1
 8002ff4:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002ffc:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003002:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8003004:	683a      	ldr	r2, [r7, #0]
 8003006:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800300a:	2a00      	cmp	r2, #0
 800300c:	d101      	bne.n	8003012 <ETH_SetMACConfig+0x172>
 800300e:	2280      	movs	r2, #128	; 0x80
 8003010:	e000      	b.n	8003014 <ETH_SetMACConfig+0x174>
 8003012:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8003014:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800301a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800301c:	4313      	orrs	r3, r2
 800301e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003026:	f64f 730d 	movw	r3, #65293	; 0xff0d
 800302a:	4013      	ands	r3, r2
 800302c:	687a      	ldr	r2, [r7, #4]
 800302e:	6812      	ldr	r2, [r2, #0]
 8003030:	68f9      	ldr	r1, [r7, #12]
 8003032:	430b      	orrs	r3, r1
 8003034:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800303c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8003044:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8003046:	4313      	orrs	r3, r2
 8003048:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003052:	f023 0103 	bic.w	r1, r3, #3
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	68fa      	ldr	r2, [r7, #12]
 800305c:	430a      	orrs	r2, r1
 800305e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800306a:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	430a      	orrs	r2, r1
 8003078:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8003080:	683a      	ldr	r2, [r7, #0]
 8003082:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8003086:	2a00      	cmp	r2, #0
 8003088:	d101      	bne.n	800308e <ETH_SetMACConfig+0x1ee>
 800308a:	2240      	movs	r2, #64	; 0x40
 800308c:	e000      	b.n	8003090 <ETH_SetMACConfig+0x1f0>
 800308e:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8003090:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8003098:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800309a:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80030a2:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80030a4:	4313      	orrs	r3, r2
 80030a6:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80030b0:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	68fa      	ldr	r2, [r7, #12]
 80030ba:	430a      	orrs	r2, r1
 80030bc:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80030c0:	bf00      	nop
 80030c2:	3714      	adds	r7, #20
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr
 80030cc:	00048083 	.word	0x00048083
 80030d0:	c0f88000 	.word	0xc0f88000
 80030d4:	fffffef0 	.word	0xfffffef0

080030d8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80030d8:	b480      	push	{r7}
 80030da:	b085      	sub	sp, #20
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	4b38      	ldr	r3, [pc, #224]	; (80031d0 <ETH_SetDMAConfig+0xf8>)
 80030ee:	4013      	ands	r3, r2
 80030f0:	683a      	ldr	r2, [r7, #0]
 80030f2:	6812      	ldr	r2, [r2, #0]
 80030f4:	6879      	ldr	r1, [r7, #4]
 80030f6:	6809      	ldr	r1, [r1, #0]
 80030f8:	431a      	orrs	r2, r3
 80030fa:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 80030fe:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	791b      	ldrb	r3, [r3, #4]
 8003104:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800310a:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	7b1b      	ldrb	r3, [r3, #12]
 8003110:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003112:	4313      	orrs	r3, r2
 8003114:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	f241 0304 	movw	r3, #4100	; 0x1004
 800311e:	4413      	add	r3, r2
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	4b2c      	ldr	r3, [pc, #176]	; (80031d4 <ETH_SetDMAConfig+0xfc>)
 8003124:	4013      	ands	r3, r2
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	6811      	ldr	r1, [r2, #0]
 800312a:	68fa      	ldr	r2, [r7, #12]
 800312c:	431a      	orrs	r2, r3
 800312e:	f241 0304 	movw	r3, #4100	; 0x1004
 8003132:	440b      	add	r3, r1
 8003134:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	7b5b      	ldrb	r3, [r3, #13]
 800313a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8003140:	4313      	orrs	r3, r2
 8003142:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	4b22      	ldr	r3, [pc, #136]	; (80031d8 <ETH_SetDMAConfig+0x100>)
 8003150:	4013      	ands	r3, r2
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	6811      	ldr	r1, [r2, #0]
 8003156:	68fa      	ldr	r2, [r7, #12]
 8003158:	431a      	orrs	r2, r3
 800315a:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 800315e:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	7d1b      	ldrb	r3, [r3, #20]
 8003168:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800316a:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	7f5b      	ldrb	r3, [r3, #29]
 8003170:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8003172:	4313      	orrs	r3, r2
 8003174:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	f241 1304 	movw	r3, #4356	; 0x1104
 800317e:	4413      	add	r3, r2
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	4b16      	ldr	r3, [pc, #88]	; (80031dc <ETH_SetDMAConfig+0x104>)
 8003184:	4013      	ands	r3, r2
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	6811      	ldr	r1, [r2, #0]
 800318a:	68fa      	ldr	r2, [r7, #12]
 800318c:	431a      	orrs	r2, r3
 800318e:	f241 1304 	movw	r3, #4356	; 0x1104
 8003192:	440b      	add	r3, r1
 8003194:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	7f1b      	ldrb	r3, [r3, #28]
 800319a:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80031a0:	4313      	orrs	r3, r2
 80031a2:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	f241 1308 	movw	r3, #4360	; 0x1108
 80031ac:	4413      	add	r3, r2
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	4b0b      	ldr	r3, [pc, #44]	; (80031e0 <ETH_SetDMAConfig+0x108>)
 80031b2:	4013      	ands	r3, r2
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	6811      	ldr	r1, [r2, #0]
 80031b8:	68fa      	ldr	r2, [r7, #12]
 80031ba:	431a      	orrs	r2, r3
 80031bc:	f241 1308 	movw	r3, #4360	; 0x1108
 80031c0:	440b      	add	r3, r1
 80031c2:	601a      	str	r2, [r3, #0]
}
 80031c4:	bf00      	nop
 80031c6:	3714      	adds	r7, #20
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr
 80031d0:	ffff87fd 	.word	0xffff87fd
 80031d4:	ffff2ffe 	.word	0xffff2ffe
 80031d8:	fffec000 	.word	0xfffec000
 80031dc:	ffc0efef 	.word	0xffc0efef
 80031e0:	7fc0ffff 	.word	0x7fc0ffff

080031e4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b0a4      	sub	sp, #144	; 0x90
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80031ec:	2301      	movs	r3, #1
 80031ee:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80031f2:	2300      	movs	r3, #0
 80031f4:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80031f6:	2300      	movs	r3, #0
 80031f8:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80031fc:	2300      	movs	r3, #0
 80031fe:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8003202:	2301      	movs	r3, #1
 8003204:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8003208:	2301      	movs	r3, #1
 800320a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800320e:	2301      	movs	r3, #1
 8003210:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8003214:	2300      	movs	r3, #0
 8003216:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800321a:	2301      	movs	r3, #1
 800321c:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003220:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003224:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8003226:	2300      	movs	r3, #0
 8003228:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 800322c:	2300      	movs	r3, #0
 800322e:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8003230:	2300      	movs	r3, #0
 8003232:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8003236:	2300      	movs	r3, #0
 8003238:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 800323c:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8003240:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8003242:	2300      	movs	r3, #0
 8003244:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8003248:	2300      	movs	r3, #0
 800324a:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 800324c:	2301      	movs	r3, #1
 800324e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8003252:	2300      	movs	r3, #0
 8003254:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8003258:	2300      	movs	r3, #0
 800325a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800325e:	2300      	movs	r3, #0
 8003260:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8003262:	2300      	movs	r3, #0
 8003264:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8003266:	2300      	movs	r3, #0
 8003268:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800326a:	2300      	movs	r3, #0
 800326c:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003270:	2300      	movs	r3, #0
 8003272:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8003276:	2301      	movs	r3, #1
 8003278:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 800327c:	2320      	movs	r3, #32
 800327e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8003282:	2301      	movs	r3, #1
 8003284:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8003288:	2300      	movs	r3, #0
 800328a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800328e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8003292:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003294:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003298:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800329a:	2300      	movs	r3, #0
 800329c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80032a0:	2302      	movs	r3, #2
 80032a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80032a6:	2300      	movs	r3, #0
 80032a8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80032ac:	2300      	movs	r3, #0
 80032ae:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80032b2:	2300      	movs	r3, #0
 80032b4:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80032b8:	2301      	movs	r3, #1
 80032ba:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80032be:	2300      	movs	r3, #0
 80032c0:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80032c2:	2301      	movs	r3, #1
 80032c4:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80032c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80032cc:	4619      	mov	r1, r3
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f7ff fde6 	bl	8002ea0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80032d4:	2301      	movs	r3, #1
 80032d6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80032d8:	2301      	movs	r3, #1
 80032da:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80032dc:	2300      	movs	r3, #0
 80032de:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80032e0:	2300      	movs	r3, #0
 80032e2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80032e6:	2300      	movs	r3, #0
 80032e8:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80032ea:	2300      	movs	r3, #0
 80032ec:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80032ee:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80032f2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80032f4:	2300      	movs	r3, #0
 80032f6:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80032f8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80032fc:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80032fe:	2300      	movs	r3, #0
 8003300:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8003304:	f44f 7306 	mov.w	r3, #536	; 0x218
 8003308:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800330a:	f107 0308 	add.w	r3, r7, #8
 800330e:	4619      	mov	r1, r3
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f7ff fee1 	bl	80030d8 <ETH_SetDMAConfig>
}
 8003316:	bf00      	nop
 8003318:	3790      	adds	r7, #144	; 0x90
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
	...

08003320 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b084      	sub	sp, #16
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003330:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003338:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800333a:	f001 fe21 	bl	8004f80 <HAL_RCC_GetHCLKFreq>
 800333e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	4a1e      	ldr	r2, [pc, #120]	; (80033bc <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d908      	bls.n	800335a <ETH_MAC_MDIO_ClkConfig+0x3a>
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	4a1d      	ldr	r2, [pc, #116]	; (80033c0 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d804      	bhi.n	800335a <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003356:	60fb      	str	r3, [r7, #12]
 8003358:	e027      	b.n	80033aa <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	4a18      	ldr	r2, [pc, #96]	; (80033c0 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d908      	bls.n	8003374 <ETH_MAC_MDIO_ClkConfig+0x54>
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	4a17      	ldr	r2, [pc, #92]	; (80033c4 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d204      	bcs.n	8003374 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8003370:	60fb      	str	r3, [r7, #12]
 8003372:	e01a      	b.n	80033aa <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	4a13      	ldr	r2, [pc, #76]	; (80033c4 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d303      	bcc.n	8003384 <ETH_MAC_MDIO_ClkConfig+0x64>
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	4a12      	ldr	r2, [pc, #72]	; (80033c8 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d911      	bls.n	80033a8 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	4a10      	ldr	r2, [pc, #64]	; (80033c8 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d908      	bls.n	800339e <ETH_MAC_MDIO_ClkConfig+0x7e>
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	4a0f      	ldr	r2, [pc, #60]	; (80033cc <ETH_MAC_MDIO_ClkConfig+0xac>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d804      	bhi.n	800339e <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800339a:	60fb      	str	r3, [r7, #12]
 800339c:	e005      	b.n	80033aa <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80033a4:	60fb      	str	r3, [r7, #12]
 80033a6:	e000      	b.n	80033aa <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80033a8:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	68fa      	ldr	r2, [r7, #12]
 80033b0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80033b4:	bf00      	nop
 80033b6:	3710      	adds	r7, #16
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	01312cff 	.word	0x01312cff
 80033c0:	02160ebf 	.word	0x02160ebf
 80033c4:	03938700 	.word	0x03938700
 80033c8:	05f5e0ff 	.word	0x05f5e0ff
 80033cc:	08f0d17f 	.word	0x08f0d17f

080033d0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b085      	sub	sp, #20
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80033d8:	2300      	movs	r3, #0
 80033da:	60fb      	str	r3, [r7, #12]
 80033dc:	e01d      	b.n	800341a <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	68d9      	ldr	r1, [r3, #12]
 80033e2:	68fa      	ldr	r2, [r7, #12]
 80033e4:	4613      	mov	r3, r2
 80033e6:	005b      	lsls	r3, r3, #1
 80033e8:	4413      	add	r3, r2
 80033ea:	00db      	lsls	r3, r3, #3
 80033ec:	440b      	add	r3, r1
 80033ee:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	2200      	movs	r2, #0
 80033f4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	2200      	movs	r2, #0
 80033fa:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	2200      	movs	r2, #0
 8003400:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	2200      	movs	r2, #0
 8003406:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003408:	68b9      	ldr	r1, [r7, #8]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	68fa      	ldr	r2, [r7, #12]
 800340e:	3206      	adds	r2, #6
 8003410:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	3301      	adds	r3, #1
 8003418:	60fb      	str	r3, [r7, #12]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2b03      	cmp	r3, #3
 800341e:	d9de      	bls.n	80033de <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2200      	movs	r2, #0
 8003424:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	f241 132c 	movw	r3, #4396	; 0x112c
 800342e:	4413      	add	r3, r2
 8003430:	2203      	movs	r2, #3
 8003432:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	68d9      	ldr	r1, [r3, #12]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	f241 1314 	movw	r3, #4372	; 0x1114
 8003440:	4413      	add	r3, r2
 8003442:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	68da      	ldr	r2, [r3, #12]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8003450:	601a      	str	r2, [r3, #0]
}
 8003452:	bf00      	nop
 8003454:	3714      	adds	r7, #20
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr

0800345e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800345e:	b480      	push	{r7}
 8003460:	b085      	sub	sp, #20
 8003462:	af00      	add	r7, sp, #0
 8003464:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003466:	2300      	movs	r3, #0
 8003468:	60fb      	str	r3, [r7, #12]
 800346a:	e024      	b.n	80034b6 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6919      	ldr	r1, [r3, #16]
 8003470:	68fa      	ldr	r2, [r7, #12]
 8003472:	4613      	mov	r3, r2
 8003474:	005b      	lsls	r3, r3, #1
 8003476:	4413      	add	r3, r2
 8003478:	00db      	lsls	r3, r3, #3
 800347a:	440b      	add	r3, r1
 800347c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	2200      	movs	r2, #0
 8003482:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	2200      	movs	r2, #0
 8003488:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	2200      	movs	r2, #0
 800348e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	2200      	movs	r2, #0
 8003494:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	2200      	movs	r2, #0
 800349a:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	2200      	movs	r2, #0
 80034a0:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80034a2:	68ba      	ldr	r2, [r7, #8]
 80034a4:	6879      	ldr	r1, [r7, #4]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	3310      	adds	r3, #16
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	440b      	add	r3, r1
 80034ae:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	3301      	adds	r3, #1
 80034b4:	60fb      	str	r3, [r7, #12]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2b03      	cmp	r3, #3
 80034ba:	d9d7      	bls.n	800346c <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2200      	movs	r2, #0
 80034c0:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2200      	movs	r2, #0
 80034cc:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2200      	movs	r2, #0
 80034d8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	f241 1330 	movw	r3, #4400	; 0x1130
 80034e2:	4413      	add	r3, r2
 80034e4:	2203      	movs	r2, #3
 80034e6:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6919      	ldr	r1, [r3, #16]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	f241 131c 	movw	r3, #4380	; 0x111c
 80034f4:	4413      	add	r3, r2
 80034f6:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	691b      	ldr	r3, [r3, #16]
 80034fc:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	f241 1328 	movw	r3, #4392	; 0x1128
 8003508:	4413      	add	r3, r2
 800350a:	6019      	str	r1, [r3, #0]
}
 800350c:	bf00      	nop
 800350e:	3714      	adds	r7, #20
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr

08003518 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8003518:	b480      	push	{r7}
 800351a:	b08d      	sub	sp, #52	; 0x34
 800351c:	af00      	add	r7, sp, #0
 800351e:	60f8      	str	r0, [r7, #12]
 8003520:	60b9      	str	r1, [r7, #8]
 8003522:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	3318      	adds	r3, #24
 8003528:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	691b      	ldr	r3, [r3, #16]
 800352e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	691b      	ldr	r3, [r3, #16]
 8003534:	613b      	str	r3, [r7, #16]
  uint32_t descnbr = 0, idx;
 8003536:	2300      	movs	r3, #0
 8003538:	62bb      	str	r3, [r7, #40]	; 0x28
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800353e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003542:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 800354a:	2300      	movs	r3, #0
 800354c:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN) || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800354e:	6a3b      	ldr	r3, [r7, #32]
 8003550:	68db      	ldr	r3, [r3, #12]
 8003552:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003556:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800355a:	d007      	beq.n	800356c <ETH_Prepare_Tx_Descriptors+0x54>
 800355c:	697a      	ldr	r2, [r7, #20]
 800355e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003560:	3304      	adds	r3, #4
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	4413      	add	r3, r2
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d001      	beq.n	8003570 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 800356c:	2302      	movs	r3, #2
 800356e:	e24a      	b.n	8003a06 <ETH_Prepare_Tx_Descriptors+0x4ee>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0304 	and.w	r3, r3, #4
 8003578:	2b00      	cmp	r3, #0
 800357a:	d044      	beq.n	8003606 <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 800357c:	6a3b      	ldr	r3, [r7, #32]
 800357e:	68da      	ldr	r2, [r3, #12]
 8003580:	4b72      	ldr	r3, [pc, #456]	; (800374c <ETH_Prepare_Tx_Descriptors+0x234>)
 8003582:	4013      	ands	r3, r2
 8003584:	68ba      	ldr	r2, [r7, #8]
 8003586:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003588:	431a      	orrs	r2, r3
 800358a:	6a3b      	ldr	r3, [r7, #32]
 800358c:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 800358e:	6a3b      	ldr	r3, [r7, #32]
 8003590:	68db      	ldr	r3, [r3, #12]
 8003592:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003596:	6a3b      	ldr	r3, [r7, #32]
 8003598:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80035a8:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != 0U)
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0308 	and.w	r3, r3, #8
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d027      	beq.n	8003606 <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 80035b6:	6a3b      	ldr	r3, [r7, #32]
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	b29a      	uxth	r2, r3
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c0:	041b      	lsls	r3, r3, #16
 80035c2:	431a      	orrs	r2, r3
 80035c4:	6a3b      	ldr	r3, [r7, #32]
 80035c6:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 80035c8:	6a3b      	ldr	r3, [r7, #32]
 80035ca:	68db      	ldr	r3, [r3, #12]
 80035cc:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80035d0:	6a3b      	ldr	r3, [r7, #32]
 80035d2:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 80035d4:	6a3b      	ldr	r3, [r7, #32]
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e0:	431a      	orrs	r2, r3
 80035e2:	6a3b      	ldr	r3, [r7, #32]
 80035e4:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80035f4:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003604:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 0310 	and.w	r3, r3, #16
 800360e:	2b00      	cmp	r3, #0
 8003610:	d00e      	beq.n	8003630 <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 8003612:	6a3b      	ldr	r3, [r7, #32]
 8003614:	689a      	ldr	r2, [r3, #8]
 8003616:	4b4e      	ldr	r3, [pc, #312]	; (8003750 <ETH_Prepare_Tx_Descriptors+0x238>)
 8003618:	4013      	ands	r3, r2
 800361a:	68ba      	ldr	r2, [r7, #8]
 800361c:	6992      	ldr	r2, [r2, #24]
 800361e:	431a      	orrs	r2, r3
 8003620:	6a3b      	ldr	r3, [r7, #32]
 8003622:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8003624:	6a3b      	ldr	r3, [r7, #32]
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800362c:	6a3b      	ldr	r3, [r7, #32]
 800362e:	60da      	str	r2, [r3, #12]
  }

  if((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)|| (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U))
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0304 	and.w	r3, r3, #4
 8003638:	2b00      	cmp	r3, #0
 800363a:	d105      	bne.n	8003648 <ETH_Prepare_Tx_Descriptors+0x130>
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 0310 	and.w	r3, r3, #16
 8003644:	2b00      	cmp	r3, #0
 8003646:	d030      	beq.n	80036aa <ETH_Prepare_Tx_Descriptors+0x192>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8003648:	6a3b      	ldr	r3, [r7, #32]
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003650:	6a3b      	ldr	r3, [r7, #32]
 8003652:	60da      	str	r2, [r3, #12]
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8003654:	6a3b      	ldr	r3, [r7, #32]
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800365c:	6a3b      	ldr	r3, [r7, #32]
 800365e:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8003660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003662:	3301      	adds	r3, #1
 8003664:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003668:	2b03      	cmp	r3, #3
 800366a:	d902      	bls.n	8003672 <ETH_Prepare_Tx_Descriptors+0x15a>
 800366c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800366e:	3b04      	subs	r3, #4
 8003670:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003676:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800367a:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 800367c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800367e:	3301      	adds	r3, #1
 8003680:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8003682:	6a3b      	ldr	r3, [r7, #32]
 8003684:	68db      	ldr	r3, [r3, #12]
 8003686:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800368a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800368e:	d10c      	bne.n	80036aa <ETH_Prepare_Tx_Descriptors+0x192>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	693a      	ldr	r2, [r7, #16]
 8003694:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003698:	623b      	str	r3, [r7, #32]
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 800369a:	6a3b      	ldr	r3, [r7, #32]
 800369c:	68db      	ldr	r3, [r3, #12]
 800369e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80036a2:	6a3b      	ldr	r3, [r7, #32]
 80036a4:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 80036a6:	2302      	movs	r3, #2
 80036a8:	e1ad      	b.n	8003a06 <ETH_Prepare_Tx_Descriptors+0x4ee>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 80036aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ac:	3301      	adds	r3, #1
 80036ae:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 80036b0:	69fb      	ldr	r3, [r7, #28]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	461a      	mov	r2, r3
 80036b6:	6a3b      	ldr	r3, [r7, #32]
 80036b8:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 80036ba:	6a3b      	ldr	r3, [r7, #32]
 80036bc:	689a      	ldr	r2, [r3, #8]
 80036be:	4b24      	ldr	r3, [pc, #144]	; (8003750 <ETH_Prepare_Tx_Descriptors+0x238>)
 80036c0:	4013      	ands	r3, r2
 80036c2:	69fa      	ldr	r2, [r7, #28]
 80036c4:	6852      	ldr	r2, [r2, #4]
 80036c6:	431a      	orrs	r2, r3
 80036c8:	6a3b      	ldr	r3, [r7, #32]
 80036ca:	609a      	str	r2, [r3, #8]

  if(txbuffer->next != NULL)
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d012      	beq.n	80036fa <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    txbuffer = txbuffer->next;
 80036d4:	69fb      	ldr	r3, [r7, #28]
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	461a      	mov	r2, r3
 80036e0:	6a3b      	ldr	r3, [r7, #32]
 80036e2:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 80036e4:	6a3b      	ldr	r3, [r7, #32]
 80036e6:	689a      	ldr	r2, [r3, #8]
 80036e8:	4b1a      	ldr	r3, [pc, #104]	; (8003754 <ETH_Prepare_Tx_Descriptors+0x23c>)
 80036ea:	4013      	ands	r3, r2
 80036ec:	69fa      	ldr	r2, [r7, #28]
 80036ee:	6852      	ldr	r2, [r2, #4]
 80036f0:	0412      	lsls	r2, r2, #16
 80036f2:	431a      	orrs	r2, r3
 80036f4:	6a3b      	ldr	r3, [r7, #32]
 80036f6:	609a      	str	r2, [r3, #8]
 80036f8:	e008      	b.n	800370c <ETH_Prepare_Tx_Descriptors+0x1f4>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80036fa:	6a3b      	ldr	r3, [r7, #32]
 80036fc:	2200      	movs	r2, #0
 80036fe:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8003700:	6a3b      	ldr	r3, [r7, #32]
 8003702:	689a      	ldr	r2, [r3, #8]
 8003704:	4b13      	ldr	r3, [pc, #76]	; (8003754 <ETH_Prepare_Tx_Descriptors+0x23c>)
 8003706:	4013      	ands	r3, r2
 8003708:	6a3a      	ldr	r2, [r7, #32]
 800370a:	6093      	str	r3, [r2, #8]
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 0310 	and.w	r3, r3, #16
 8003714:	2b00      	cmp	r3, #0
 8003716:	d021      	beq.n	800375c <ETH_Prepare_Tx_Descriptors+0x244>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8003718:	6a3b      	ldr	r3, [r7, #32]
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	6a1b      	ldr	r3, [r3, #32]
 8003724:	04db      	lsls	r3, r3, #19
 8003726:	431a      	orrs	r2, r3
 8003728:	6a3b      	ldr	r3, [r7, #32]
 800372a:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 800372c:	6a3b      	ldr	r3, [r7, #32]
 800372e:	68da      	ldr	r2, [r3, #12]
 8003730:	4b09      	ldr	r3, [pc, #36]	; (8003758 <ETH_Prepare_Tx_Descriptors+0x240>)
 8003732:	4013      	ands	r3, r2
 8003734:	68ba      	ldr	r2, [r7, #8]
 8003736:	69d2      	ldr	r2, [r2, #28]
 8003738:	431a      	orrs	r2, r3
 800373a:	6a3b      	ldr	r3, [r7, #32]
 800373c:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 800373e:	6a3b      	ldr	r3, [r7, #32]
 8003740:	68db      	ldr	r3, [r3, #12]
 8003742:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003746:	6a3b      	ldr	r3, [r7, #32]
 8003748:	60da      	str	r2, [r3, #12]
 800374a:	e02e      	b.n	80037aa <ETH_Prepare_Tx_Descriptors+0x292>
 800374c:	ffff0000 	.word	0xffff0000
 8003750:	ffffc000 	.word	0xffffc000
 8003754:	c000ffff 	.word	0xc000ffff
 8003758:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 800375c:	6a3b      	ldr	r3, [r7, #32]
 800375e:	68da      	ldr	r2, [r3, #12]
 8003760:	4b93      	ldr	r3, [pc, #588]	; (80039b0 <ETH_Prepare_Tx_Descriptors+0x498>)
 8003762:	4013      	ands	r3, r2
 8003764:	68ba      	ldr	r2, [r7, #8]
 8003766:	6852      	ldr	r2, [r2, #4]
 8003768:	431a      	orrs	r2, r3
 800376a:	6a3b      	ldr	r3, [r7, #32]
 800376c:	60da      	str	r2, [r3, #12]

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 0301 	and.w	r3, r3, #1
 8003776:	2b00      	cmp	r3, #0
 8003778:	d008      	beq.n	800378c <ETH_Prepare_Tx_Descriptors+0x274>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 800377a:	6a3b      	ldr	r3, [r7, #32]
 800377c:	68db      	ldr	r3, [r3, #12]
 800377e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	695b      	ldr	r3, [r3, #20]
 8003786:	431a      	orrs	r2, r3
 8003788:	6a3b      	ldr	r3, [r7, #32]
 800378a:	60da      	str	r2, [r3, #12]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f003 0320 	and.w	r3, r3, #32
 8003794:	2b00      	cmp	r3, #0
 8003796:	d008      	beq.n	80037aa <ETH_Prepare_Tx_Descriptors+0x292>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8003798:	6a3b      	ldr	r3, [r7, #32]
 800379a:	68db      	ldr	r3, [r3, #12]
 800379c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	691b      	ldr	r3, [r3, #16]
 80037a4:	431a      	orrs	r2, r3
 80037a6:	6a3b      	ldr	r3, [r7, #32]
 80037a8:	60da      	str	r2, [r3, #12]
    }
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 0304 	and.w	r3, r3, #4
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d008      	beq.n	80037c8 <ETH_Prepare_Tx_Descriptors+0x2b0>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 80037b6:	6a3b      	ldr	r3, [r7, #32]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037c2:	431a      	orrs	r2, r3
 80037c4:	6a3b      	ldr	r3, [r7, #32]
 80037c6:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 80037c8:	6a3b      	ldr	r3, [r7, #32]
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80037d0:	6a3b      	ldr	r3, [r7, #32]
 80037d2:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 80037d4:	6a3b      	ldr	r3, [r7, #32]
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80037dc:	6a3b      	ldr	r3, [r7, #32]
 80037de:	60da      	str	r2, [r3, #12]
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80037e0:	6a3b      	ldr	r3, [r7, #32]
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80037e8:	6a3b      	ldr	r3, [r7, #32]
 80037ea:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != 0U)
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 0302 	and.w	r3, r3, #2
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	f000 80cb 	beq.w	8003990 <ETH_Prepare_Tx_Descriptors+0x478>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 80037fa:	6a3b      	ldr	r3, [r7, #32]
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	431a      	orrs	r2, r3
 8003808:	6a3b      	ldr	r3, [r7, #32]
 800380a:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 800380c:	e0c0      	b.n	8003990 <ETH_Prepare_Tx_Descriptors+0x478>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 800380e:	6a3b      	ldr	r3, [r7, #32]
 8003810:	68db      	ldr	r3, [r3, #12]
 8003812:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003816:	6a3b      	ldr	r3, [r7, #32]
 8003818:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800381a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800381c:	3301      	adds	r3, #1
 800381e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003822:	2b03      	cmp	r3, #3
 8003824:	d902      	bls.n	800382c <ETH_Prepare_Tx_Descriptors+0x314>
 8003826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003828:	3b04      	subs	r3, #4
 800382a:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003830:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003834:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8003836:	6a3b      	ldr	r3, [r7, #32]
 8003838:	68db      	ldr	r3, [r3, #12]
 800383a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800383e:	6a3b      	ldr	r3, [r7, #32]
 8003840:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN) || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003842:	6a3b      	ldr	r3, [r7, #32]
 8003844:	68db      	ldr	r3, [r3, #12]
 8003846:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800384a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800384e:	d007      	beq.n	8003860 <ETH_Prepare_Tx_Descriptors+0x348>
 8003850:	697a      	ldr	r2, [r7, #20]
 8003852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003854:	3304      	adds	r3, #4
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	4413      	add	r3, r2
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d026      	beq.n	80038ae <ETH_Prepare_Tx_Descriptors+0x396>
    {
      descidx = firstdescidx;
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003868:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800386c:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for(idx = 0; idx < descnbr; idx ++)
 800386e:	2300      	movs	r3, #0
 8003870:	627b      	str	r3, [r7, #36]	; 0x24
 8003872:	e016      	b.n	80038a2 <ETH_Prepare_Tx_Descriptors+0x38a>
      {
        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8003874:	6a3b      	ldr	r3, [r7, #32]
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800387c:	6a3b      	ldr	r3, [r7, #32]
 800387e:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8003880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003882:	3301      	adds	r3, #1
 8003884:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003888:	2b03      	cmp	r3, #3
 800388a:	d902      	bls.n	8003892 <ETH_Prepare_Tx_Descriptors+0x37a>
 800388c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800388e:	3b04      	subs	r3, #4
 8003890:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003896:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800389a:	623b      	str	r3, [r7, #32]
      for(idx = 0; idx < descnbr; idx ++)
 800389c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389e:	3301      	adds	r3, #1
 80038a0:	627b      	str	r3, [r7, #36]	; 0x24
 80038a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d3e4      	bcc.n	8003874 <ETH_Prepare_Tx_Descriptors+0x35c>
      }

      return HAL_ETH_ERROR_BUSY;
 80038aa:	2302      	movs	r3, #2
 80038ac:	e0ab      	b.n	8003a06 <ETH_Prepare_Tx_Descriptors+0x4ee>
    }

    descnbr += 1U;
 80038ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038b0:	3301      	adds	r3, #1
 80038b2:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 80038b4:	69fb      	ldr	r3, [r7, #28]
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	461a      	mov	r2, r3
 80038c0:	6a3b      	ldr	r3, [r7, #32]
 80038c2:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 80038c4:	6a3b      	ldr	r3, [r7, #32]
 80038c6:	689a      	ldr	r2, [r3, #8]
 80038c8:	4b3a      	ldr	r3, [pc, #232]	; (80039b4 <ETH_Prepare_Tx_Descriptors+0x49c>)
 80038ca:	4013      	ands	r3, r2
 80038cc:	69fa      	ldr	r2, [r7, #28]
 80038ce:	6852      	ldr	r2, [r2, #4]
 80038d0:	431a      	orrs	r2, r3
 80038d2:	6a3b      	ldr	r3, [r7, #32]
 80038d4:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d012      	beq.n	8003904 <ETH_Prepare_Tx_Descriptors+0x3ec>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 80038de:	69fb      	ldr	r3, [r7, #28]
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 80038e4:	69fb      	ldr	r3, [r7, #28]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	461a      	mov	r2, r3
 80038ea:	6a3b      	ldr	r3, [r7, #32]
 80038ec:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 80038ee:	6a3b      	ldr	r3, [r7, #32]
 80038f0:	689a      	ldr	r2, [r3, #8]
 80038f2:	4b31      	ldr	r3, [pc, #196]	; (80039b8 <ETH_Prepare_Tx_Descriptors+0x4a0>)
 80038f4:	4013      	ands	r3, r2
 80038f6:	69fa      	ldr	r2, [r7, #28]
 80038f8:	6852      	ldr	r2, [r2, #4]
 80038fa:	0412      	lsls	r2, r2, #16
 80038fc:	431a      	orrs	r2, r3
 80038fe:	6a3b      	ldr	r3, [r7, #32]
 8003900:	609a      	str	r2, [r3, #8]
 8003902:	e008      	b.n	8003916 <ETH_Prepare_Tx_Descriptors+0x3fe>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003904:	6a3b      	ldr	r3, [r7, #32]
 8003906:	2200      	movs	r2, #0
 8003908:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 800390a:	6a3b      	ldr	r3, [r7, #32]
 800390c:	689a      	ldr	r2, [r3, #8]
 800390e:	4b2a      	ldr	r3, [pc, #168]	; (80039b8 <ETH_Prepare_Tx_Descriptors+0x4a0>)
 8003910:	4013      	ands	r3, r2
 8003912:	6a3a      	ldr	r2, [r7, #32]
 8003914:	6093      	str	r3, [r2, #8]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 0310 	and.w	r3, r3, #16
 800391e:	2b00      	cmp	r3, #0
 8003920:	d00f      	beq.n	8003942 <ETH_Prepare_Tx_Descriptors+0x42a>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8003922:	6a3b      	ldr	r3, [r7, #32]
 8003924:	68da      	ldr	r2, [r3, #12]
 8003926:	4b25      	ldr	r3, [pc, #148]	; (80039bc <ETH_Prepare_Tx_Descriptors+0x4a4>)
 8003928:	4013      	ands	r3, r2
 800392a:	68ba      	ldr	r2, [r7, #8]
 800392c:	69d2      	ldr	r2, [r2, #28]
 800392e:	431a      	orrs	r2, r3
 8003930:	6a3b      	ldr	r3, [r7, #32]
 8003932:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8003934:	6a3b      	ldr	r3, [r7, #32]
 8003936:	68db      	ldr	r3, [r3, #12]
 8003938:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800393c:	6a3b      	ldr	r3, [r7, #32]
 800393e:	60da      	str	r2, [r3, #12]
 8003940:	e017      	b.n	8003972 <ETH_Prepare_Tx_Descriptors+0x45a>
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8003942:	6a3b      	ldr	r3, [r7, #32]
 8003944:	68da      	ldr	r2, [r3, #12]
 8003946:	4b1a      	ldr	r3, [pc, #104]	; (80039b0 <ETH_Prepare_Tx_Descriptors+0x498>)
 8003948:	4013      	ands	r3, r2
 800394a:	68ba      	ldr	r2, [r7, #8]
 800394c:	6852      	ldr	r2, [r2, #4]
 800394e:	431a      	orrs	r2, r3
 8003950:	6a3b      	ldr	r3, [r7, #32]
 8003952:	60da      	str	r2, [r3, #12]

      if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0301 	and.w	r3, r3, #1
 800395c:	2b00      	cmp	r3, #0
 800395e:	d008      	beq.n	8003972 <ETH_Prepare_Tx_Descriptors+0x45a>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8003960:	6a3b      	ldr	r3, [r7, #32]
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	695b      	ldr	r3, [r3, #20]
 800396c:	431a      	orrs	r2, r3
 800396e:	6a3b      	ldr	r3, [r7, #32]
 8003970:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 8003972:	69bb      	ldr	r3, [r7, #24]
 8003974:	3301      	adds	r3, #1
 8003976:	61bb      	str	r3, [r7, #24]
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8003978:	6a3b      	ldr	r3, [r7, #32]
 800397a:	68db      	ldr	r3, [r3, #12]
 800397c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003980:	6a3b      	ldr	r3, [r7, #32]
 8003982:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8003984:	6a3b      	ldr	r3, [r7, #32]
 8003986:	68db      	ldr	r3, [r3, #12]
 8003988:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800398c:	6a3b      	ldr	r3, [r7, #32]
 800398e:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8003990:	69fb      	ldr	r3, [r7, #28]
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	2b00      	cmp	r3, #0
 8003996:	f47f af3a 	bne.w	800380e <ETH_Prepare_Tx_Descriptors+0x2f6>
  }

  if(ItMode != ((uint32_t)RESET))
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d00f      	beq.n	80039c0 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 80039a0:	6a3b      	ldr	r3, [r7, #32]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80039a8:	6a3b      	ldr	r3, [r7, #32]
 80039aa:	609a      	str	r2, [r3, #8]
 80039ac:	e00e      	b.n	80039cc <ETH_Prepare_Tx_Descriptors+0x4b4>
 80039ae:	bf00      	nop
 80039b0:	ffff8000 	.word	0xffff8000
 80039b4:	ffffc000 	.word	0xffffc000
 80039b8:	c000ffff 	.word	0xc000ffff
 80039bc:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 80039c0:	6a3b      	ldr	r3, [r7, #32]
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80039c8:	6a3b      	ldr	r3, [r7, #32]
 80039ca:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 80039cc:	6a3b      	ldr	r3, [r7, #32]
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80039d4:	6a3b      	ldr	r3, [r7, #32]
 80039d6:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039dc:	6979      	ldr	r1, [r7, #20]
 80039de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039e0:	3304      	adds	r3, #4
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	440b      	add	r3, r1
 80039e6:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039ec:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80039ee:	b672      	cpsid	i
}
 80039f0:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80039f6:	69bb      	ldr	r3, [r7, #24]
 80039f8:	4413      	add	r3, r2
 80039fa:	1c5a      	adds	r2, r3, #1
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8003a00:	b662      	cpsie	i
}
 8003a02:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8003a04:	2300      	movs	r3, #0
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3734      	adds	r7, #52	; 0x34
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr
 8003a12:	bf00      	nop

08003a14 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b089      	sub	sp, #36	; 0x24
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
 8003a1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003a22:	4b89      	ldr	r3, [pc, #548]	; (8003c48 <HAL_GPIO_Init+0x234>)
 8003a24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003a26:	e194      	b.n	8003d52 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	2101      	movs	r1, #1
 8003a2e:	69fb      	ldr	r3, [r7, #28]
 8003a30:	fa01 f303 	lsl.w	r3, r1, r3
 8003a34:	4013      	ands	r3, r2
 8003a36:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	f000 8186 	beq.w	8003d4c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d00b      	beq.n	8003a60 <HAL_GPIO_Init+0x4c>
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	2b02      	cmp	r3, #2
 8003a4e:	d007      	beq.n	8003a60 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003a54:	2b11      	cmp	r3, #17
 8003a56:	d003      	beq.n	8003a60 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	2b12      	cmp	r3, #18
 8003a5e:	d130      	bne.n	8003ac2 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003a66:	69fb      	ldr	r3, [r7, #28]
 8003a68:	005b      	lsls	r3, r3, #1
 8003a6a:	2203      	movs	r2, #3
 8003a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a70:	43db      	mvns	r3, r3
 8003a72:	69ba      	ldr	r2, [r7, #24]
 8003a74:	4013      	ands	r3, r2
 8003a76:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	68da      	ldr	r2, [r3, #12]
 8003a7c:	69fb      	ldr	r3, [r7, #28]
 8003a7e:	005b      	lsls	r3, r3, #1
 8003a80:	fa02 f303 	lsl.w	r3, r2, r3
 8003a84:	69ba      	ldr	r2, [r7, #24]
 8003a86:	4313      	orrs	r3, r2
 8003a88:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	69ba      	ldr	r2, [r7, #24]
 8003a8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003a96:	2201      	movs	r2, #1
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9e:	43db      	mvns	r3, r3
 8003aa0:	69ba      	ldr	r2, [r7, #24]
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	091b      	lsrs	r3, r3, #4
 8003aac:	f003 0201 	and.w	r2, r3, #1
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab6:	69ba      	ldr	r2, [r7, #24]
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	69ba      	ldr	r2, [r7, #24]
 8003ac0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	68db      	ldr	r3, [r3, #12]
 8003ac6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003ac8:	69fb      	ldr	r3, [r7, #28]
 8003aca:	005b      	lsls	r3, r3, #1
 8003acc:	2203      	movs	r2, #3
 8003ace:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad2:	43db      	mvns	r3, r3
 8003ad4:	69ba      	ldr	r2, [r7, #24]
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	689a      	ldr	r2, [r3, #8]
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	005b      	lsls	r3, r3, #1
 8003ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae6:	69ba      	ldr	r2, [r7, #24]
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	69ba      	ldr	r2, [r7, #24]
 8003af0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	2b02      	cmp	r3, #2
 8003af8:	d003      	beq.n	8003b02 <HAL_GPIO_Init+0xee>
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	2b12      	cmp	r3, #18
 8003b00:	d123      	bne.n	8003b4a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b02:	69fb      	ldr	r3, [r7, #28]
 8003b04:	08da      	lsrs	r2, r3, #3
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	3208      	adds	r2, #8
 8003b0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003b10:	69fb      	ldr	r3, [r7, #28]
 8003b12:	f003 0307 	and.w	r3, r3, #7
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	220f      	movs	r2, #15
 8003b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b1e:	43db      	mvns	r3, r3
 8003b20:	69ba      	ldr	r2, [r7, #24]
 8003b22:	4013      	ands	r3, r2
 8003b24:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	691a      	ldr	r2, [r3, #16]
 8003b2a:	69fb      	ldr	r3, [r7, #28]
 8003b2c:	f003 0307 	and.w	r3, r3, #7
 8003b30:	009b      	lsls	r3, r3, #2
 8003b32:	fa02 f303 	lsl.w	r3, r2, r3
 8003b36:	69ba      	ldr	r2, [r7, #24]
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b3c:	69fb      	ldr	r3, [r7, #28]
 8003b3e:	08da      	lsrs	r2, r3, #3
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	3208      	adds	r2, #8
 8003b44:	69b9      	ldr	r1, [r7, #24]
 8003b46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003b50:	69fb      	ldr	r3, [r7, #28]
 8003b52:	005b      	lsls	r3, r3, #1
 8003b54:	2203      	movs	r2, #3
 8003b56:	fa02 f303 	lsl.w	r3, r2, r3
 8003b5a:	43db      	mvns	r3, r3
 8003b5c:	69ba      	ldr	r2, [r7, #24]
 8003b5e:	4013      	ands	r3, r2
 8003b60:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	f003 0203 	and.w	r2, r3, #3
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	005b      	lsls	r3, r3, #1
 8003b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b72:	69ba      	ldr	r2, [r7, #24]
 8003b74:	4313      	orrs	r3, r2
 8003b76:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	69ba      	ldr	r2, [r7, #24]
 8003b7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	f000 80e0 	beq.w	8003d4c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b8c:	4b2f      	ldr	r3, [pc, #188]	; (8003c4c <HAL_GPIO_Init+0x238>)
 8003b8e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003b92:	4a2e      	ldr	r2, [pc, #184]	; (8003c4c <HAL_GPIO_Init+0x238>)
 8003b94:	f043 0302 	orr.w	r3, r3, #2
 8003b98:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003b9c:	4b2b      	ldr	r3, [pc, #172]	; (8003c4c <HAL_GPIO_Init+0x238>)
 8003b9e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003ba2:	f003 0302 	and.w	r3, r3, #2
 8003ba6:	60fb      	str	r3, [r7, #12]
 8003ba8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003baa:	4a29      	ldr	r2, [pc, #164]	; (8003c50 <HAL_GPIO_Init+0x23c>)
 8003bac:	69fb      	ldr	r3, [r7, #28]
 8003bae:	089b      	lsrs	r3, r3, #2
 8003bb0:	3302      	adds	r3, #2
 8003bb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003bb8:	69fb      	ldr	r3, [r7, #28]
 8003bba:	f003 0303 	and.w	r3, r3, #3
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	220f      	movs	r2, #15
 8003bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc6:	43db      	mvns	r3, r3
 8003bc8:	69ba      	ldr	r2, [r7, #24]
 8003bca:	4013      	ands	r3, r2
 8003bcc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	4a20      	ldr	r2, [pc, #128]	; (8003c54 <HAL_GPIO_Init+0x240>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d052      	beq.n	8003c7c <HAL_GPIO_Init+0x268>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	4a1f      	ldr	r2, [pc, #124]	; (8003c58 <HAL_GPIO_Init+0x244>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d031      	beq.n	8003c42 <HAL_GPIO_Init+0x22e>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4a1e      	ldr	r2, [pc, #120]	; (8003c5c <HAL_GPIO_Init+0x248>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d02b      	beq.n	8003c3e <HAL_GPIO_Init+0x22a>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4a1d      	ldr	r2, [pc, #116]	; (8003c60 <HAL_GPIO_Init+0x24c>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d025      	beq.n	8003c3a <HAL_GPIO_Init+0x226>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4a1c      	ldr	r2, [pc, #112]	; (8003c64 <HAL_GPIO_Init+0x250>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d01f      	beq.n	8003c36 <HAL_GPIO_Init+0x222>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4a1b      	ldr	r2, [pc, #108]	; (8003c68 <HAL_GPIO_Init+0x254>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d019      	beq.n	8003c32 <HAL_GPIO_Init+0x21e>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	4a1a      	ldr	r2, [pc, #104]	; (8003c6c <HAL_GPIO_Init+0x258>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d013      	beq.n	8003c2e <HAL_GPIO_Init+0x21a>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4a19      	ldr	r2, [pc, #100]	; (8003c70 <HAL_GPIO_Init+0x25c>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d00d      	beq.n	8003c2a <HAL_GPIO_Init+0x216>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	4a18      	ldr	r2, [pc, #96]	; (8003c74 <HAL_GPIO_Init+0x260>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d007      	beq.n	8003c26 <HAL_GPIO_Init+0x212>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4a17      	ldr	r2, [pc, #92]	; (8003c78 <HAL_GPIO_Init+0x264>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d101      	bne.n	8003c22 <HAL_GPIO_Init+0x20e>
 8003c1e:	2309      	movs	r3, #9
 8003c20:	e02d      	b.n	8003c7e <HAL_GPIO_Init+0x26a>
 8003c22:	230a      	movs	r3, #10
 8003c24:	e02b      	b.n	8003c7e <HAL_GPIO_Init+0x26a>
 8003c26:	2308      	movs	r3, #8
 8003c28:	e029      	b.n	8003c7e <HAL_GPIO_Init+0x26a>
 8003c2a:	2307      	movs	r3, #7
 8003c2c:	e027      	b.n	8003c7e <HAL_GPIO_Init+0x26a>
 8003c2e:	2306      	movs	r3, #6
 8003c30:	e025      	b.n	8003c7e <HAL_GPIO_Init+0x26a>
 8003c32:	2305      	movs	r3, #5
 8003c34:	e023      	b.n	8003c7e <HAL_GPIO_Init+0x26a>
 8003c36:	2304      	movs	r3, #4
 8003c38:	e021      	b.n	8003c7e <HAL_GPIO_Init+0x26a>
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	e01f      	b.n	8003c7e <HAL_GPIO_Init+0x26a>
 8003c3e:	2302      	movs	r3, #2
 8003c40:	e01d      	b.n	8003c7e <HAL_GPIO_Init+0x26a>
 8003c42:	2301      	movs	r3, #1
 8003c44:	e01b      	b.n	8003c7e <HAL_GPIO_Init+0x26a>
 8003c46:	bf00      	nop
 8003c48:	58000080 	.word	0x58000080
 8003c4c:	58024400 	.word	0x58024400
 8003c50:	58000400 	.word	0x58000400
 8003c54:	58020000 	.word	0x58020000
 8003c58:	58020400 	.word	0x58020400
 8003c5c:	58020800 	.word	0x58020800
 8003c60:	58020c00 	.word	0x58020c00
 8003c64:	58021000 	.word	0x58021000
 8003c68:	58021400 	.word	0x58021400
 8003c6c:	58021800 	.word	0x58021800
 8003c70:	58021c00 	.word	0x58021c00
 8003c74:	58022000 	.word	0x58022000
 8003c78:	58022400 	.word	0x58022400
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	69fa      	ldr	r2, [r7, #28]
 8003c80:	f002 0203 	and.w	r2, r2, #3
 8003c84:	0092      	lsls	r2, r2, #2
 8003c86:	4093      	lsls	r3, r2
 8003c88:	69ba      	ldr	r2, [r7, #24]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c8e:	4938      	ldr	r1, [pc, #224]	; (8003d70 <HAL_GPIO_Init+0x35c>)
 8003c90:	69fb      	ldr	r3, [r7, #28]
 8003c92:	089b      	lsrs	r3, r3, #2
 8003c94:	3302      	adds	r3, #2
 8003c96:	69ba      	ldr	r2, [r7, #24]
 8003c98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	43db      	mvns	r3, r3
 8003ca6:	69ba      	ldr	r2, [r7, #24]
 8003ca8:	4013      	ands	r3, r2
 8003caa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d003      	beq.n	8003cc0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003cb8:	69ba      	ldr	r2, [r7, #24]
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	69ba      	ldr	r2, [r7, #24]
 8003cc4:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	43db      	mvns	r3, r3
 8003cd0:	69ba      	ldr	r2, [r7, #24]
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d003      	beq.n	8003cea <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003ce2:	69ba      	ldr	r2, [r7, #24]
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	69ba      	ldr	r2, [r7, #24]
 8003cee:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003cf0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	43db      	mvns	r3, r3
 8003cfc:	69ba      	ldr	r2, [r7, #24]
 8003cfe:	4013      	ands	r3, r2
 8003d00:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d003      	beq.n	8003d16 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8003d0e:	69ba      	ldr	r2, [r7, #24]
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003d16:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d1a:	69bb      	ldr	r3, [r7, #24]
 8003d1c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003d1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	43db      	mvns	r3, r3
 8003d2a:	69ba      	ldr	r2, [r7, #24]
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d003      	beq.n	8003d44 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8003d3c:	69ba      	ldr	r2, [r7, #24]
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	4313      	orrs	r3, r2
 8003d42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003d44:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d48:	69bb      	ldr	r3, [r7, #24]
 8003d4a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8003d4c:	69fb      	ldr	r3, [r7, #28]
 8003d4e:	3301      	adds	r3, #1
 8003d50:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	69fb      	ldr	r3, [r7, #28]
 8003d58:	fa22 f303 	lsr.w	r3, r2, r3
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	f47f ae63 	bne.w	8003a28 <HAL_GPIO_Init+0x14>
  }
}
 8003d62:	bf00      	nop
 8003d64:	bf00      	nop
 8003d66:	3724      	adds	r7, #36	; 0x24
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr
 8003d70:	58000400 	.word	0x58000400

08003d74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b083      	sub	sp, #12
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
 8003d7c:	460b      	mov	r3, r1
 8003d7e:	807b      	strh	r3, [r7, #2]
 8003d80:	4613      	mov	r3, r2
 8003d82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003d84:	787b      	ldrb	r3, [r7, #1]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d003      	beq.n	8003d92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d8a:	887a      	ldrh	r2, [r7, #2]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003d90:	e003      	b.n	8003d9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003d92:	887b      	ldrh	r3, [r7, #2]
 8003d94:	041a      	lsls	r2, r3, #16
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	619a      	str	r2, [r3, #24]
}
 8003d9a:	bf00      	nop
 8003d9c:	370c      	adds	r7, #12
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr

08003da6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003da6:	b480      	push	{r7}
 8003da8:	b085      	sub	sp, #20
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	6078      	str	r0, [r7, #4]
 8003dae:	460b      	mov	r3, r1
 8003db0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	695b      	ldr	r3, [r3, #20]
 8003db6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003db8:	887a      	ldrh	r2, [r7, #2]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	041a      	lsls	r2, r3, #16
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	43d9      	mvns	r1, r3
 8003dc4:	887b      	ldrh	r3, [r7, #2]
 8003dc6:	400b      	ands	r3, r1
 8003dc8:	431a      	orrs	r2, r3
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	619a      	str	r2, [r3, #24]
}
 8003dce:	bf00      	nop
 8003dd0:	3714      	adds	r7, #20
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd8:	4770      	bx	lr

08003dda <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003dda:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ddc:	b08f      	sub	sp, #60	; 0x3c
 8003dde:	af0a      	add	r7, sp, #40	; 0x28
 8003de0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d101      	bne.n	8003dec <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	e116      	b.n	800401a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d106      	bne.n	8003e0c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f7fc ffac 	bl	8000d64 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2203      	movs	r2, #3
 8003e10:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d102      	bne.n	8003e26 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2200      	movs	r2, #0
 8003e24:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f003 fcf4 	bl	8007818 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	603b      	str	r3, [r7, #0]
 8003e36:	687e      	ldr	r6, [r7, #4]
 8003e38:	466d      	mov	r5, sp
 8003e3a:	f106 0410 	add.w	r4, r6, #16
 8003e3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e46:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003e4a:	e885 0003 	stmia.w	r5, {r0, r1}
 8003e4e:	1d33      	adds	r3, r6, #4
 8003e50:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003e52:	6838      	ldr	r0, [r7, #0]
 8003e54:	f003 fc72 	bl	800773c <USB_CoreInit>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d005      	beq.n	8003e6a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2202      	movs	r2, #2
 8003e62:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e0d7      	b.n	800401a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	2100      	movs	r1, #0
 8003e70:	4618      	mov	r0, r3
 8003e72:	f003 fce2 	bl	800783a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e76:	2300      	movs	r3, #0
 8003e78:	73fb      	strb	r3, [r7, #15]
 8003e7a:	e04a      	b.n	8003f12 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003e7c:	7bfa      	ldrb	r2, [r7, #15]
 8003e7e:	6879      	ldr	r1, [r7, #4]
 8003e80:	4613      	mov	r3, r2
 8003e82:	00db      	lsls	r3, r3, #3
 8003e84:	1a9b      	subs	r3, r3, r2
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	440b      	add	r3, r1
 8003e8a:	333d      	adds	r3, #61	; 0x3d
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003e90:	7bfa      	ldrb	r2, [r7, #15]
 8003e92:	6879      	ldr	r1, [r7, #4]
 8003e94:	4613      	mov	r3, r2
 8003e96:	00db      	lsls	r3, r3, #3
 8003e98:	1a9b      	subs	r3, r3, r2
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	440b      	add	r3, r1
 8003e9e:	333c      	adds	r3, #60	; 0x3c
 8003ea0:	7bfa      	ldrb	r2, [r7, #15]
 8003ea2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003ea4:	7bfa      	ldrb	r2, [r7, #15]
 8003ea6:	7bfb      	ldrb	r3, [r7, #15]
 8003ea8:	b298      	uxth	r0, r3
 8003eaa:	6879      	ldr	r1, [r7, #4]
 8003eac:	4613      	mov	r3, r2
 8003eae:	00db      	lsls	r3, r3, #3
 8003eb0:	1a9b      	subs	r3, r3, r2
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	440b      	add	r3, r1
 8003eb6:	3342      	adds	r3, #66	; 0x42
 8003eb8:	4602      	mov	r2, r0
 8003eba:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003ebc:	7bfa      	ldrb	r2, [r7, #15]
 8003ebe:	6879      	ldr	r1, [r7, #4]
 8003ec0:	4613      	mov	r3, r2
 8003ec2:	00db      	lsls	r3, r3, #3
 8003ec4:	1a9b      	subs	r3, r3, r2
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	440b      	add	r3, r1
 8003eca:	333f      	adds	r3, #63	; 0x3f
 8003ecc:	2200      	movs	r2, #0
 8003ece:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003ed0:	7bfa      	ldrb	r2, [r7, #15]
 8003ed2:	6879      	ldr	r1, [r7, #4]
 8003ed4:	4613      	mov	r3, r2
 8003ed6:	00db      	lsls	r3, r3, #3
 8003ed8:	1a9b      	subs	r3, r3, r2
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	440b      	add	r3, r1
 8003ede:	3344      	adds	r3, #68	; 0x44
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003ee4:	7bfa      	ldrb	r2, [r7, #15]
 8003ee6:	6879      	ldr	r1, [r7, #4]
 8003ee8:	4613      	mov	r3, r2
 8003eea:	00db      	lsls	r3, r3, #3
 8003eec:	1a9b      	subs	r3, r3, r2
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	440b      	add	r3, r1
 8003ef2:	3348      	adds	r3, #72	; 0x48
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003ef8:	7bfa      	ldrb	r2, [r7, #15]
 8003efa:	6879      	ldr	r1, [r7, #4]
 8003efc:	4613      	mov	r3, r2
 8003efe:	00db      	lsls	r3, r3, #3
 8003f00:	1a9b      	subs	r3, r3, r2
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	440b      	add	r3, r1
 8003f06:	3350      	adds	r3, #80	; 0x50
 8003f08:	2200      	movs	r2, #0
 8003f0a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f0c:	7bfb      	ldrb	r3, [r7, #15]
 8003f0e:	3301      	adds	r3, #1
 8003f10:	73fb      	strb	r3, [r7, #15]
 8003f12:	7bfa      	ldrb	r2, [r7, #15]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d3af      	bcc.n	8003e7c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	73fb      	strb	r3, [r7, #15]
 8003f20:	e044      	b.n	8003fac <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003f22:	7bfa      	ldrb	r2, [r7, #15]
 8003f24:	6879      	ldr	r1, [r7, #4]
 8003f26:	4613      	mov	r3, r2
 8003f28:	00db      	lsls	r3, r3, #3
 8003f2a:	1a9b      	subs	r3, r3, r2
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	440b      	add	r3, r1
 8003f30:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003f34:	2200      	movs	r2, #0
 8003f36:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003f38:	7bfa      	ldrb	r2, [r7, #15]
 8003f3a:	6879      	ldr	r1, [r7, #4]
 8003f3c:	4613      	mov	r3, r2
 8003f3e:	00db      	lsls	r3, r3, #3
 8003f40:	1a9b      	subs	r3, r3, r2
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	440b      	add	r3, r1
 8003f46:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003f4a:	7bfa      	ldrb	r2, [r7, #15]
 8003f4c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003f4e:	7bfa      	ldrb	r2, [r7, #15]
 8003f50:	6879      	ldr	r1, [r7, #4]
 8003f52:	4613      	mov	r3, r2
 8003f54:	00db      	lsls	r3, r3, #3
 8003f56:	1a9b      	subs	r3, r3, r2
 8003f58:	009b      	lsls	r3, r3, #2
 8003f5a:	440b      	add	r3, r1
 8003f5c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003f60:	2200      	movs	r2, #0
 8003f62:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003f64:	7bfa      	ldrb	r2, [r7, #15]
 8003f66:	6879      	ldr	r1, [r7, #4]
 8003f68:	4613      	mov	r3, r2
 8003f6a:	00db      	lsls	r3, r3, #3
 8003f6c:	1a9b      	subs	r3, r3, r2
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	440b      	add	r3, r1
 8003f72:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003f76:	2200      	movs	r2, #0
 8003f78:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003f7a:	7bfa      	ldrb	r2, [r7, #15]
 8003f7c:	6879      	ldr	r1, [r7, #4]
 8003f7e:	4613      	mov	r3, r2
 8003f80:	00db      	lsls	r3, r3, #3
 8003f82:	1a9b      	subs	r3, r3, r2
 8003f84:	009b      	lsls	r3, r3, #2
 8003f86:	440b      	add	r3, r1
 8003f88:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003f90:	7bfa      	ldrb	r2, [r7, #15]
 8003f92:	6879      	ldr	r1, [r7, #4]
 8003f94:	4613      	mov	r3, r2
 8003f96:	00db      	lsls	r3, r3, #3
 8003f98:	1a9b      	subs	r3, r3, r2
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	440b      	add	r3, r1
 8003f9e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003fa6:	7bfb      	ldrb	r3, [r7, #15]
 8003fa8:	3301      	adds	r3, #1
 8003faa:	73fb      	strb	r3, [r7, #15]
 8003fac:	7bfa      	ldrb	r2, [r7, #15]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d3b5      	bcc.n	8003f22 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	603b      	str	r3, [r7, #0]
 8003fbc:	687e      	ldr	r6, [r7, #4]
 8003fbe:	466d      	mov	r5, sp
 8003fc0:	f106 0410 	add.w	r4, r6, #16
 8003fc4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003fc6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003fc8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003fca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003fcc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003fd0:	e885 0003 	stmia.w	r5, {r0, r1}
 8003fd4:	1d33      	adds	r3, r6, #4
 8003fd6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003fd8:	6838      	ldr	r0, [r7, #0]
 8003fda:	f003 fc59 	bl	8007890 <USB_DevInit>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d005      	beq.n	8003ff0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2202      	movs	r2, #2
 8003fe8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	e014      	b.n	800401a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004004:	2b01      	cmp	r3, #1
 8004006:	d102      	bne.n	800400e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	f000 f80b 	bl	8004024 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4618      	mov	r0, r3
 8004014:	f003 fdfb 	bl	8007c0e <USB_DevDisconnect>

  return HAL_OK;
 8004018:	2300      	movs	r3, #0
}
 800401a:	4618      	mov	r0, r3
 800401c:	3714      	adds	r7, #20
 800401e:	46bd      	mov	sp, r7
 8004020:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004024 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004024:	b480      	push	{r7}
 8004026:	b085      	sub	sp, #20
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2201      	movs	r2, #1
 8004036:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2200      	movs	r2, #0
 800403e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	699b      	ldr	r3, [r3, #24]
 8004046:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004052:	4b05      	ldr	r3, [pc, #20]	; (8004068 <HAL_PCDEx_ActivateLPM+0x44>)
 8004054:	4313      	orrs	r3, r2
 8004056:	68fa      	ldr	r2, [r7, #12]
 8004058:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800405a:	2300      	movs	r3, #0
}
 800405c:	4618      	mov	r0, r3
 800405e:	3714      	adds	r7, #20
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr
 8004068:	10000003 	.word	0x10000003

0800406c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b084      	sub	sp, #16
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004074:	4b19      	ldr	r3, [pc, #100]	; (80040dc <HAL_PWREx_ConfigSupply+0x70>)
 8004076:	68db      	ldr	r3, [r3, #12]
 8004078:	f003 0304 	and.w	r3, r3, #4
 800407c:	2b04      	cmp	r3, #4
 800407e:	d00a      	beq.n	8004096 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004080:	4b16      	ldr	r3, [pc, #88]	; (80040dc <HAL_PWREx_ConfigSupply+0x70>)
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	f003 0307 	and.w	r3, r3, #7
 8004088:	687a      	ldr	r2, [r7, #4]
 800408a:	429a      	cmp	r2, r3
 800408c:	d001      	beq.n	8004092 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e01f      	b.n	80040d2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004092:	2300      	movs	r3, #0
 8004094:	e01d      	b.n	80040d2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004096:	4b11      	ldr	r3, [pc, #68]	; (80040dc <HAL_PWREx_ConfigSupply+0x70>)
 8004098:	68db      	ldr	r3, [r3, #12]
 800409a:	f023 0207 	bic.w	r2, r3, #7
 800409e:	490f      	ldr	r1, [pc, #60]	; (80040dc <HAL_PWREx_ConfigSupply+0x70>)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	4313      	orrs	r3, r2
 80040a4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80040a6:	f7fd fc6f 	bl	8001988 <HAL_GetTick>
 80040aa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80040ac:	e009      	b.n	80040c2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80040ae:	f7fd fc6b 	bl	8001988 <HAL_GetTick>
 80040b2:	4602      	mov	r2, r0
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	1ad3      	subs	r3, r2, r3
 80040b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80040bc:	d901      	bls.n	80040c2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e007      	b.n	80040d2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80040c2:	4b06      	ldr	r3, [pc, #24]	; (80040dc <HAL_PWREx_ConfigSupply+0x70>)
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80040ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040ce:	d1ee      	bne.n	80040ae <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80040d0:	2300      	movs	r3, #0
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3710      	adds	r7, #16
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	bf00      	nop
 80040dc:	58024800 	.word	0x58024800

080040e0 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80040e0:	b480      	push	{r7}
 80040e2:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80040e4:	4b05      	ldr	r3, [pc, #20]	; (80040fc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	4a04      	ldr	r2, [pc, #16]	; (80040fc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80040ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040ee:	60d3      	str	r3, [r2, #12]
}
 80040f0:	bf00      	nop
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr
 80040fa:	bf00      	nop
 80040fc:	58024800 	.word	0x58024800

08004100 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b08c      	sub	sp, #48	; 0x30
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d101      	bne.n	8004112 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e3ff      	b.n	8004912 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 0301 	and.w	r3, r3, #1
 800411a:	2b00      	cmp	r3, #0
 800411c:	f000 8087 	beq.w	800422e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004120:	4b99      	ldr	r3, [pc, #612]	; (8004388 <HAL_RCC_OscConfig+0x288>)
 8004122:	691b      	ldr	r3, [r3, #16]
 8004124:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004128:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800412a:	4b97      	ldr	r3, [pc, #604]	; (8004388 <HAL_RCC_OscConfig+0x288>)
 800412c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800412e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004132:	2b10      	cmp	r3, #16
 8004134:	d007      	beq.n	8004146 <HAL_RCC_OscConfig+0x46>
 8004136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004138:	2b18      	cmp	r3, #24
 800413a:	d110      	bne.n	800415e <HAL_RCC_OscConfig+0x5e>
 800413c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800413e:	f003 0303 	and.w	r3, r3, #3
 8004142:	2b02      	cmp	r3, #2
 8004144:	d10b      	bne.n	800415e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004146:	4b90      	ldr	r3, [pc, #576]	; (8004388 <HAL_RCC_OscConfig+0x288>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800414e:	2b00      	cmp	r3, #0
 8004150:	d06c      	beq.n	800422c <HAL_RCC_OscConfig+0x12c>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d168      	bne.n	800422c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e3d9      	b.n	8004912 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004166:	d106      	bne.n	8004176 <HAL_RCC_OscConfig+0x76>
 8004168:	4b87      	ldr	r3, [pc, #540]	; (8004388 <HAL_RCC_OscConfig+0x288>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a86      	ldr	r2, [pc, #536]	; (8004388 <HAL_RCC_OscConfig+0x288>)
 800416e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004172:	6013      	str	r3, [r2, #0]
 8004174:	e02e      	b.n	80041d4 <HAL_RCC_OscConfig+0xd4>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d10c      	bne.n	8004198 <HAL_RCC_OscConfig+0x98>
 800417e:	4b82      	ldr	r3, [pc, #520]	; (8004388 <HAL_RCC_OscConfig+0x288>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a81      	ldr	r2, [pc, #516]	; (8004388 <HAL_RCC_OscConfig+0x288>)
 8004184:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004188:	6013      	str	r3, [r2, #0]
 800418a:	4b7f      	ldr	r3, [pc, #508]	; (8004388 <HAL_RCC_OscConfig+0x288>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a7e      	ldr	r2, [pc, #504]	; (8004388 <HAL_RCC_OscConfig+0x288>)
 8004190:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004194:	6013      	str	r3, [r2, #0]
 8004196:	e01d      	b.n	80041d4 <HAL_RCC_OscConfig+0xd4>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80041a0:	d10c      	bne.n	80041bc <HAL_RCC_OscConfig+0xbc>
 80041a2:	4b79      	ldr	r3, [pc, #484]	; (8004388 <HAL_RCC_OscConfig+0x288>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a78      	ldr	r2, [pc, #480]	; (8004388 <HAL_RCC_OscConfig+0x288>)
 80041a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041ac:	6013      	str	r3, [r2, #0]
 80041ae:	4b76      	ldr	r3, [pc, #472]	; (8004388 <HAL_RCC_OscConfig+0x288>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a75      	ldr	r2, [pc, #468]	; (8004388 <HAL_RCC_OscConfig+0x288>)
 80041b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041b8:	6013      	str	r3, [r2, #0]
 80041ba:	e00b      	b.n	80041d4 <HAL_RCC_OscConfig+0xd4>
 80041bc:	4b72      	ldr	r3, [pc, #456]	; (8004388 <HAL_RCC_OscConfig+0x288>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a71      	ldr	r2, [pc, #452]	; (8004388 <HAL_RCC_OscConfig+0x288>)
 80041c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041c6:	6013      	str	r3, [r2, #0]
 80041c8:	4b6f      	ldr	r3, [pc, #444]	; (8004388 <HAL_RCC_OscConfig+0x288>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a6e      	ldr	r2, [pc, #440]	; (8004388 <HAL_RCC_OscConfig+0x288>)
 80041ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d013      	beq.n	8004204 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041dc:	f7fd fbd4 	bl	8001988 <HAL_GetTick>
 80041e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80041e2:	e008      	b.n	80041f6 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041e4:	f7fd fbd0 	bl	8001988 <HAL_GetTick>
 80041e8:	4602      	mov	r2, r0
 80041ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ec:	1ad3      	subs	r3, r2, r3
 80041ee:	2b64      	cmp	r3, #100	; 0x64
 80041f0:	d901      	bls.n	80041f6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80041f2:	2303      	movs	r3, #3
 80041f4:	e38d      	b.n	8004912 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80041f6:	4b64      	ldr	r3, [pc, #400]	; (8004388 <HAL_RCC_OscConfig+0x288>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d0f0      	beq.n	80041e4 <HAL_RCC_OscConfig+0xe4>
 8004202:	e014      	b.n	800422e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004204:	f7fd fbc0 	bl	8001988 <HAL_GetTick>
 8004208:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800420a:	e008      	b.n	800421e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800420c:	f7fd fbbc 	bl	8001988 <HAL_GetTick>
 8004210:	4602      	mov	r2, r0
 8004212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004214:	1ad3      	subs	r3, r2, r3
 8004216:	2b64      	cmp	r3, #100	; 0x64
 8004218:	d901      	bls.n	800421e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800421a:	2303      	movs	r3, #3
 800421c:	e379      	b.n	8004912 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800421e:	4b5a      	ldr	r3, [pc, #360]	; (8004388 <HAL_RCC_OscConfig+0x288>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004226:	2b00      	cmp	r3, #0
 8004228:	d1f0      	bne.n	800420c <HAL_RCC_OscConfig+0x10c>
 800422a:	e000      	b.n	800422e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800422c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 0302 	and.w	r3, r3, #2
 8004236:	2b00      	cmp	r3, #0
 8004238:	f000 80ae 	beq.w	8004398 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800423c:	4b52      	ldr	r3, [pc, #328]	; (8004388 <HAL_RCC_OscConfig+0x288>)
 800423e:	691b      	ldr	r3, [r3, #16]
 8004240:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004244:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004246:	4b50      	ldr	r3, [pc, #320]	; (8004388 <HAL_RCC_OscConfig+0x288>)
 8004248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800424a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800424c:	6a3b      	ldr	r3, [r7, #32]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d007      	beq.n	8004262 <HAL_RCC_OscConfig+0x162>
 8004252:	6a3b      	ldr	r3, [r7, #32]
 8004254:	2b18      	cmp	r3, #24
 8004256:	d13a      	bne.n	80042ce <HAL_RCC_OscConfig+0x1ce>
 8004258:	69fb      	ldr	r3, [r7, #28]
 800425a:	f003 0303 	and.w	r3, r3, #3
 800425e:	2b00      	cmp	r3, #0
 8004260:	d135      	bne.n	80042ce <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004262:	4b49      	ldr	r3, [pc, #292]	; (8004388 <HAL_RCC_OscConfig+0x288>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f003 0304 	and.w	r3, r3, #4
 800426a:	2b00      	cmp	r3, #0
 800426c:	d005      	beq.n	800427a <HAL_RCC_OscConfig+0x17a>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	68db      	ldr	r3, [r3, #12]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d101      	bne.n	800427a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e34b      	b.n	8004912 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800427a:	f7fd fbb5 	bl	80019e8 <HAL_GetREVID>
 800427e:	4603      	mov	r3, r0
 8004280:	f241 0203 	movw	r2, #4099	; 0x1003
 8004284:	4293      	cmp	r3, r2
 8004286:	d817      	bhi.n	80042b8 <HAL_RCC_OscConfig+0x1b8>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	691b      	ldr	r3, [r3, #16]
 800428c:	2b40      	cmp	r3, #64	; 0x40
 800428e:	d108      	bne.n	80042a2 <HAL_RCC_OscConfig+0x1a2>
 8004290:	4b3d      	ldr	r3, [pc, #244]	; (8004388 <HAL_RCC_OscConfig+0x288>)
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004298:	4a3b      	ldr	r2, [pc, #236]	; (8004388 <HAL_RCC_OscConfig+0x288>)
 800429a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800429e:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80042a0:	e07a      	b.n	8004398 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042a2:	4b39      	ldr	r3, [pc, #228]	; (8004388 <HAL_RCC_OscConfig+0x288>)
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	691b      	ldr	r3, [r3, #16]
 80042ae:	031b      	lsls	r3, r3, #12
 80042b0:	4935      	ldr	r1, [pc, #212]	; (8004388 <HAL_RCC_OscConfig+0x288>)
 80042b2:	4313      	orrs	r3, r2
 80042b4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80042b6:	e06f      	b.n	8004398 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042b8:	4b33      	ldr	r3, [pc, #204]	; (8004388 <HAL_RCC_OscConfig+0x288>)
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	691b      	ldr	r3, [r3, #16]
 80042c4:	061b      	lsls	r3, r3, #24
 80042c6:	4930      	ldr	r1, [pc, #192]	; (8004388 <HAL_RCC_OscConfig+0x288>)
 80042c8:	4313      	orrs	r3, r2
 80042ca:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80042cc:	e064      	b.n	8004398 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	68db      	ldr	r3, [r3, #12]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d045      	beq.n	8004362 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80042d6:	4b2c      	ldr	r3, [pc, #176]	; (8004388 <HAL_RCC_OscConfig+0x288>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f023 0219 	bic.w	r2, r3, #25
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	68db      	ldr	r3, [r3, #12]
 80042e2:	4929      	ldr	r1, [pc, #164]	; (8004388 <HAL_RCC_OscConfig+0x288>)
 80042e4:	4313      	orrs	r3, r2
 80042e6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042e8:	f7fd fb4e 	bl	8001988 <HAL_GetTick>
 80042ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80042ee:	e008      	b.n	8004302 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042f0:	f7fd fb4a 	bl	8001988 <HAL_GetTick>
 80042f4:	4602      	mov	r2, r0
 80042f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	2b02      	cmp	r3, #2
 80042fc:	d901      	bls.n	8004302 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 80042fe:	2303      	movs	r3, #3
 8004300:	e307      	b.n	8004912 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004302:	4b21      	ldr	r3, [pc, #132]	; (8004388 <HAL_RCC_OscConfig+0x288>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 0304 	and.w	r3, r3, #4
 800430a:	2b00      	cmp	r3, #0
 800430c:	d0f0      	beq.n	80042f0 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800430e:	f7fd fb6b 	bl	80019e8 <HAL_GetREVID>
 8004312:	4603      	mov	r3, r0
 8004314:	f241 0203 	movw	r2, #4099	; 0x1003
 8004318:	4293      	cmp	r3, r2
 800431a:	d817      	bhi.n	800434c <HAL_RCC_OscConfig+0x24c>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	691b      	ldr	r3, [r3, #16]
 8004320:	2b40      	cmp	r3, #64	; 0x40
 8004322:	d108      	bne.n	8004336 <HAL_RCC_OscConfig+0x236>
 8004324:	4b18      	ldr	r3, [pc, #96]	; (8004388 <HAL_RCC_OscConfig+0x288>)
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800432c:	4a16      	ldr	r2, [pc, #88]	; (8004388 <HAL_RCC_OscConfig+0x288>)
 800432e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004332:	6053      	str	r3, [r2, #4]
 8004334:	e030      	b.n	8004398 <HAL_RCC_OscConfig+0x298>
 8004336:	4b14      	ldr	r3, [pc, #80]	; (8004388 <HAL_RCC_OscConfig+0x288>)
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	691b      	ldr	r3, [r3, #16]
 8004342:	031b      	lsls	r3, r3, #12
 8004344:	4910      	ldr	r1, [pc, #64]	; (8004388 <HAL_RCC_OscConfig+0x288>)
 8004346:	4313      	orrs	r3, r2
 8004348:	604b      	str	r3, [r1, #4]
 800434a:	e025      	b.n	8004398 <HAL_RCC_OscConfig+0x298>
 800434c:	4b0e      	ldr	r3, [pc, #56]	; (8004388 <HAL_RCC_OscConfig+0x288>)
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	691b      	ldr	r3, [r3, #16]
 8004358:	061b      	lsls	r3, r3, #24
 800435a:	490b      	ldr	r1, [pc, #44]	; (8004388 <HAL_RCC_OscConfig+0x288>)
 800435c:	4313      	orrs	r3, r2
 800435e:	604b      	str	r3, [r1, #4]
 8004360:	e01a      	b.n	8004398 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004362:	4b09      	ldr	r3, [pc, #36]	; (8004388 <HAL_RCC_OscConfig+0x288>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a08      	ldr	r2, [pc, #32]	; (8004388 <HAL_RCC_OscConfig+0x288>)
 8004368:	f023 0301 	bic.w	r3, r3, #1
 800436c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800436e:	f7fd fb0b 	bl	8001988 <HAL_GetTick>
 8004372:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004374:	e00a      	b.n	800438c <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004376:	f7fd fb07 	bl	8001988 <HAL_GetTick>
 800437a:	4602      	mov	r2, r0
 800437c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800437e:	1ad3      	subs	r3, r2, r3
 8004380:	2b02      	cmp	r3, #2
 8004382:	d903      	bls.n	800438c <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8004384:	2303      	movs	r3, #3
 8004386:	e2c4      	b.n	8004912 <HAL_RCC_OscConfig+0x812>
 8004388:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800438c:	4ba4      	ldr	r3, [pc, #656]	; (8004620 <HAL_RCC_OscConfig+0x520>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 0304 	and.w	r3, r3, #4
 8004394:	2b00      	cmp	r3, #0
 8004396:	d1ee      	bne.n	8004376 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 0310 	and.w	r3, r3, #16
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	f000 80a9 	beq.w	80044f8 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043a6:	4b9e      	ldr	r3, [pc, #632]	; (8004620 <HAL_RCC_OscConfig+0x520>)
 80043a8:	691b      	ldr	r3, [r3, #16]
 80043aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80043ae:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80043b0:	4b9b      	ldr	r3, [pc, #620]	; (8004620 <HAL_RCC_OscConfig+0x520>)
 80043b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043b4:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80043b6:	69bb      	ldr	r3, [r7, #24]
 80043b8:	2b08      	cmp	r3, #8
 80043ba:	d007      	beq.n	80043cc <HAL_RCC_OscConfig+0x2cc>
 80043bc:	69bb      	ldr	r3, [r7, #24]
 80043be:	2b18      	cmp	r3, #24
 80043c0:	d13a      	bne.n	8004438 <HAL_RCC_OscConfig+0x338>
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	f003 0303 	and.w	r3, r3, #3
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d135      	bne.n	8004438 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80043cc:	4b94      	ldr	r3, [pc, #592]	; (8004620 <HAL_RCC_OscConfig+0x520>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d005      	beq.n	80043e4 <HAL_RCC_OscConfig+0x2e4>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	69db      	ldr	r3, [r3, #28]
 80043dc:	2b80      	cmp	r3, #128	; 0x80
 80043de:	d001      	beq.n	80043e4 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	e296      	b.n	8004912 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80043e4:	f7fd fb00 	bl	80019e8 <HAL_GetREVID>
 80043e8:	4603      	mov	r3, r0
 80043ea:	f241 0203 	movw	r2, #4099	; 0x1003
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d817      	bhi.n	8004422 <HAL_RCC_OscConfig+0x322>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6a1b      	ldr	r3, [r3, #32]
 80043f6:	2b20      	cmp	r3, #32
 80043f8:	d108      	bne.n	800440c <HAL_RCC_OscConfig+0x30c>
 80043fa:	4b89      	ldr	r3, [pc, #548]	; (8004620 <HAL_RCC_OscConfig+0x520>)
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004402:	4a87      	ldr	r2, [pc, #540]	; (8004620 <HAL_RCC_OscConfig+0x520>)
 8004404:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004408:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800440a:	e075      	b.n	80044f8 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800440c:	4b84      	ldr	r3, [pc, #528]	; (8004620 <HAL_RCC_OscConfig+0x520>)
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6a1b      	ldr	r3, [r3, #32]
 8004418:	069b      	lsls	r3, r3, #26
 800441a:	4981      	ldr	r1, [pc, #516]	; (8004620 <HAL_RCC_OscConfig+0x520>)
 800441c:	4313      	orrs	r3, r2
 800441e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004420:	e06a      	b.n	80044f8 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004422:	4b7f      	ldr	r3, [pc, #508]	; (8004620 <HAL_RCC_OscConfig+0x520>)
 8004424:	68db      	ldr	r3, [r3, #12]
 8004426:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6a1b      	ldr	r3, [r3, #32]
 800442e:	061b      	lsls	r3, r3, #24
 8004430:	497b      	ldr	r1, [pc, #492]	; (8004620 <HAL_RCC_OscConfig+0x520>)
 8004432:	4313      	orrs	r3, r2
 8004434:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004436:	e05f      	b.n	80044f8 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	69db      	ldr	r3, [r3, #28]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d042      	beq.n	80044c6 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004440:	4b77      	ldr	r3, [pc, #476]	; (8004620 <HAL_RCC_OscConfig+0x520>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a76      	ldr	r2, [pc, #472]	; (8004620 <HAL_RCC_OscConfig+0x520>)
 8004446:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800444a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800444c:	f7fd fa9c 	bl	8001988 <HAL_GetTick>
 8004450:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004452:	e008      	b.n	8004466 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004454:	f7fd fa98 	bl	8001988 <HAL_GetTick>
 8004458:	4602      	mov	r2, r0
 800445a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	2b02      	cmp	r3, #2
 8004460:	d901      	bls.n	8004466 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8004462:	2303      	movs	r3, #3
 8004464:	e255      	b.n	8004912 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004466:	4b6e      	ldr	r3, [pc, #440]	; (8004620 <HAL_RCC_OscConfig+0x520>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800446e:	2b00      	cmp	r3, #0
 8004470:	d0f0      	beq.n	8004454 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004472:	f7fd fab9 	bl	80019e8 <HAL_GetREVID>
 8004476:	4603      	mov	r3, r0
 8004478:	f241 0203 	movw	r2, #4099	; 0x1003
 800447c:	4293      	cmp	r3, r2
 800447e:	d817      	bhi.n	80044b0 <HAL_RCC_OscConfig+0x3b0>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6a1b      	ldr	r3, [r3, #32]
 8004484:	2b20      	cmp	r3, #32
 8004486:	d108      	bne.n	800449a <HAL_RCC_OscConfig+0x39a>
 8004488:	4b65      	ldr	r3, [pc, #404]	; (8004620 <HAL_RCC_OscConfig+0x520>)
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004490:	4a63      	ldr	r2, [pc, #396]	; (8004620 <HAL_RCC_OscConfig+0x520>)
 8004492:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004496:	6053      	str	r3, [r2, #4]
 8004498:	e02e      	b.n	80044f8 <HAL_RCC_OscConfig+0x3f8>
 800449a:	4b61      	ldr	r3, [pc, #388]	; (8004620 <HAL_RCC_OscConfig+0x520>)
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6a1b      	ldr	r3, [r3, #32]
 80044a6:	069b      	lsls	r3, r3, #26
 80044a8:	495d      	ldr	r1, [pc, #372]	; (8004620 <HAL_RCC_OscConfig+0x520>)
 80044aa:	4313      	orrs	r3, r2
 80044ac:	604b      	str	r3, [r1, #4]
 80044ae:	e023      	b.n	80044f8 <HAL_RCC_OscConfig+0x3f8>
 80044b0:	4b5b      	ldr	r3, [pc, #364]	; (8004620 <HAL_RCC_OscConfig+0x520>)
 80044b2:	68db      	ldr	r3, [r3, #12]
 80044b4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6a1b      	ldr	r3, [r3, #32]
 80044bc:	061b      	lsls	r3, r3, #24
 80044be:	4958      	ldr	r1, [pc, #352]	; (8004620 <HAL_RCC_OscConfig+0x520>)
 80044c0:	4313      	orrs	r3, r2
 80044c2:	60cb      	str	r3, [r1, #12]
 80044c4:	e018      	b.n	80044f8 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80044c6:	4b56      	ldr	r3, [pc, #344]	; (8004620 <HAL_RCC_OscConfig+0x520>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a55      	ldr	r2, [pc, #340]	; (8004620 <HAL_RCC_OscConfig+0x520>)
 80044cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044d2:	f7fd fa59 	bl	8001988 <HAL_GetTick>
 80044d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80044d8:	e008      	b.n	80044ec <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80044da:	f7fd fa55 	bl	8001988 <HAL_GetTick>
 80044de:	4602      	mov	r2, r0
 80044e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e2:	1ad3      	subs	r3, r2, r3
 80044e4:	2b02      	cmp	r3, #2
 80044e6:	d901      	bls.n	80044ec <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 80044e8:	2303      	movs	r3, #3
 80044ea:	e212      	b.n	8004912 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80044ec:	4b4c      	ldr	r3, [pc, #304]	; (8004620 <HAL_RCC_OscConfig+0x520>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d1f0      	bne.n	80044da <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f003 0308 	and.w	r3, r3, #8
 8004500:	2b00      	cmp	r3, #0
 8004502:	d036      	beq.n	8004572 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	695b      	ldr	r3, [r3, #20]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d019      	beq.n	8004540 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800450c:	4b44      	ldr	r3, [pc, #272]	; (8004620 <HAL_RCC_OscConfig+0x520>)
 800450e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004510:	4a43      	ldr	r2, [pc, #268]	; (8004620 <HAL_RCC_OscConfig+0x520>)
 8004512:	f043 0301 	orr.w	r3, r3, #1
 8004516:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004518:	f7fd fa36 	bl	8001988 <HAL_GetTick>
 800451c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800451e:	e008      	b.n	8004532 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004520:	f7fd fa32 	bl	8001988 <HAL_GetTick>
 8004524:	4602      	mov	r2, r0
 8004526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004528:	1ad3      	subs	r3, r2, r3
 800452a:	2b02      	cmp	r3, #2
 800452c:	d901      	bls.n	8004532 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800452e:	2303      	movs	r3, #3
 8004530:	e1ef      	b.n	8004912 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004532:	4b3b      	ldr	r3, [pc, #236]	; (8004620 <HAL_RCC_OscConfig+0x520>)
 8004534:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004536:	f003 0302 	and.w	r3, r3, #2
 800453a:	2b00      	cmp	r3, #0
 800453c:	d0f0      	beq.n	8004520 <HAL_RCC_OscConfig+0x420>
 800453e:	e018      	b.n	8004572 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004540:	4b37      	ldr	r3, [pc, #220]	; (8004620 <HAL_RCC_OscConfig+0x520>)
 8004542:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004544:	4a36      	ldr	r2, [pc, #216]	; (8004620 <HAL_RCC_OscConfig+0x520>)
 8004546:	f023 0301 	bic.w	r3, r3, #1
 800454a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800454c:	f7fd fa1c 	bl	8001988 <HAL_GetTick>
 8004550:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004552:	e008      	b.n	8004566 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004554:	f7fd fa18 	bl	8001988 <HAL_GetTick>
 8004558:	4602      	mov	r2, r0
 800455a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800455c:	1ad3      	subs	r3, r2, r3
 800455e:	2b02      	cmp	r3, #2
 8004560:	d901      	bls.n	8004566 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	e1d5      	b.n	8004912 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004566:	4b2e      	ldr	r3, [pc, #184]	; (8004620 <HAL_RCC_OscConfig+0x520>)
 8004568:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800456a:	f003 0302 	and.w	r3, r3, #2
 800456e:	2b00      	cmp	r3, #0
 8004570:	d1f0      	bne.n	8004554 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 0320 	and.w	r3, r3, #32
 800457a:	2b00      	cmp	r3, #0
 800457c:	d036      	beq.n	80045ec <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	699b      	ldr	r3, [r3, #24]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d019      	beq.n	80045ba <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004586:	4b26      	ldr	r3, [pc, #152]	; (8004620 <HAL_RCC_OscConfig+0x520>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a25      	ldr	r2, [pc, #148]	; (8004620 <HAL_RCC_OscConfig+0x520>)
 800458c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004590:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004592:	f7fd f9f9 	bl	8001988 <HAL_GetTick>
 8004596:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004598:	e008      	b.n	80045ac <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800459a:	f7fd f9f5 	bl	8001988 <HAL_GetTick>
 800459e:	4602      	mov	r2, r0
 80045a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a2:	1ad3      	subs	r3, r2, r3
 80045a4:	2b02      	cmp	r3, #2
 80045a6:	d901      	bls.n	80045ac <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80045a8:	2303      	movs	r3, #3
 80045aa:	e1b2      	b.n	8004912 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80045ac:	4b1c      	ldr	r3, [pc, #112]	; (8004620 <HAL_RCC_OscConfig+0x520>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d0f0      	beq.n	800459a <HAL_RCC_OscConfig+0x49a>
 80045b8:	e018      	b.n	80045ec <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80045ba:	4b19      	ldr	r3, [pc, #100]	; (8004620 <HAL_RCC_OscConfig+0x520>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a18      	ldr	r2, [pc, #96]	; (8004620 <HAL_RCC_OscConfig+0x520>)
 80045c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80045c4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80045c6:	f7fd f9df 	bl	8001988 <HAL_GetTick>
 80045ca:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80045cc:	e008      	b.n	80045e0 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80045ce:	f7fd f9db 	bl	8001988 <HAL_GetTick>
 80045d2:	4602      	mov	r2, r0
 80045d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d6:	1ad3      	subs	r3, r2, r3
 80045d8:	2b02      	cmp	r3, #2
 80045da:	d901      	bls.n	80045e0 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 80045dc:	2303      	movs	r3, #3
 80045de:	e198      	b.n	8004912 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80045e0:	4b0f      	ldr	r3, [pc, #60]	; (8004620 <HAL_RCC_OscConfig+0x520>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d1f0      	bne.n	80045ce <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f003 0304 	and.w	r3, r3, #4
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	f000 8085 	beq.w	8004704 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80045fa:	4b0a      	ldr	r3, [pc, #40]	; (8004624 <HAL_RCC_OscConfig+0x524>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a09      	ldr	r2, [pc, #36]	; (8004624 <HAL_RCC_OscConfig+0x524>)
 8004600:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004604:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004606:	f7fd f9bf 	bl	8001988 <HAL_GetTick>
 800460a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800460c:	e00c      	b.n	8004628 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800460e:	f7fd f9bb 	bl	8001988 <HAL_GetTick>
 8004612:	4602      	mov	r2, r0
 8004614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004616:	1ad3      	subs	r3, r2, r3
 8004618:	2b64      	cmp	r3, #100	; 0x64
 800461a:	d905      	bls.n	8004628 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 800461c:	2303      	movs	r3, #3
 800461e:	e178      	b.n	8004912 <HAL_RCC_OscConfig+0x812>
 8004620:	58024400 	.word	0x58024400
 8004624:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004628:	4b96      	ldr	r3, [pc, #600]	; (8004884 <HAL_RCC_OscConfig+0x784>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004630:	2b00      	cmp	r3, #0
 8004632:	d0ec      	beq.n	800460e <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	2b01      	cmp	r3, #1
 800463a:	d106      	bne.n	800464a <HAL_RCC_OscConfig+0x54a>
 800463c:	4b92      	ldr	r3, [pc, #584]	; (8004888 <HAL_RCC_OscConfig+0x788>)
 800463e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004640:	4a91      	ldr	r2, [pc, #580]	; (8004888 <HAL_RCC_OscConfig+0x788>)
 8004642:	f043 0301 	orr.w	r3, r3, #1
 8004646:	6713      	str	r3, [r2, #112]	; 0x70
 8004648:	e02d      	b.n	80046a6 <HAL_RCC_OscConfig+0x5a6>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d10c      	bne.n	800466c <HAL_RCC_OscConfig+0x56c>
 8004652:	4b8d      	ldr	r3, [pc, #564]	; (8004888 <HAL_RCC_OscConfig+0x788>)
 8004654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004656:	4a8c      	ldr	r2, [pc, #560]	; (8004888 <HAL_RCC_OscConfig+0x788>)
 8004658:	f023 0301 	bic.w	r3, r3, #1
 800465c:	6713      	str	r3, [r2, #112]	; 0x70
 800465e:	4b8a      	ldr	r3, [pc, #552]	; (8004888 <HAL_RCC_OscConfig+0x788>)
 8004660:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004662:	4a89      	ldr	r2, [pc, #548]	; (8004888 <HAL_RCC_OscConfig+0x788>)
 8004664:	f023 0304 	bic.w	r3, r3, #4
 8004668:	6713      	str	r3, [r2, #112]	; 0x70
 800466a:	e01c      	b.n	80046a6 <HAL_RCC_OscConfig+0x5a6>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	2b05      	cmp	r3, #5
 8004672:	d10c      	bne.n	800468e <HAL_RCC_OscConfig+0x58e>
 8004674:	4b84      	ldr	r3, [pc, #528]	; (8004888 <HAL_RCC_OscConfig+0x788>)
 8004676:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004678:	4a83      	ldr	r2, [pc, #524]	; (8004888 <HAL_RCC_OscConfig+0x788>)
 800467a:	f043 0304 	orr.w	r3, r3, #4
 800467e:	6713      	str	r3, [r2, #112]	; 0x70
 8004680:	4b81      	ldr	r3, [pc, #516]	; (8004888 <HAL_RCC_OscConfig+0x788>)
 8004682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004684:	4a80      	ldr	r2, [pc, #512]	; (8004888 <HAL_RCC_OscConfig+0x788>)
 8004686:	f043 0301 	orr.w	r3, r3, #1
 800468a:	6713      	str	r3, [r2, #112]	; 0x70
 800468c:	e00b      	b.n	80046a6 <HAL_RCC_OscConfig+0x5a6>
 800468e:	4b7e      	ldr	r3, [pc, #504]	; (8004888 <HAL_RCC_OscConfig+0x788>)
 8004690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004692:	4a7d      	ldr	r2, [pc, #500]	; (8004888 <HAL_RCC_OscConfig+0x788>)
 8004694:	f023 0301 	bic.w	r3, r3, #1
 8004698:	6713      	str	r3, [r2, #112]	; 0x70
 800469a:	4b7b      	ldr	r3, [pc, #492]	; (8004888 <HAL_RCC_OscConfig+0x788>)
 800469c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800469e:	4a7a      	ldr	r2, [pc, #488]	; (8004888 <HAL_RCC_OscConfig+0x788>)
 80046a0:	f023 0304 	bic.w	r3, r3, #4
 80046a4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d015      	beq.n	80046da <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046ae:	f7fd f96b 	bl	8001988 <HAL_GetTick>
 80046b2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80046b4:	e00a      	b.n	80046cc <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046b6:	f7fd f967 	bl	8001988 <HAL_GetTick>
 80046ba:	4602      	mov	r2, r0
 80046bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046be:	1ad3      	subs	r3, r2, r3
 80046c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d901      	bls.n	80046cc <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 80046c8:	2303      	movs	r3, #3
 80046ca:	e122      	b.n	8004912 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80046cc:	4b6e      	ldr	r3, [pc, #440]	; (8004888 <HAL_RCC_OscConfig+0x788>)
 80046ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046d0:	f003 0302 	and.w	r3, r3, #2
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d0ee      	beq.n	80046b6 <HAL_RCC_OscConfig+0x5b6>
 80046d8:	e014      	b.n	8004704 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046da:	f7fd f955 	bl	8001988 <HAL_GetTick>
 80046de:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80046e0:	e00a      	b.n	80046f8 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046e2:	f7fd f951 	bl	8001988 <HAL_GetTick>
 80046e6:	4602      	mov	r2, r0
 80046e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ea:	1ad3      	subs	r3, r2, r3
 80046ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d901      	bls.n	80046f8 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 80046f4:	2303      	movs	r3, #3
 80046f6:	e10c      	b.n	8004912 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80046f8:	4b63      	ldr	r3, [pc, #396]	; (8004888 <HAL_RCC_OscConfig+0x788>)
 80046fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046fc:	f003 0302 	and.w	r3, r3, #2
 8004700:	2b00      	cmp	r3, #0
 8004702:	d1ee      	bne.n	80046e2 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004708:	2b00      	cmp	r3, #0
 800470a:	f000 8101 	beq.w	8004910 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800470e:	4b5e      	ldr	r3, [pc, #376]	; (8004888 <HAL_RCC_OscConfig+0x788>)
 8004710:	691b      	ldr	r3, [r3, #16]
 8004712:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004716:	2b18      	cmp	r3, #24
 8004718:	f000 80bc 	beq.w	8004894 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004720:	2b02      	cmp	r3, #2
 8004722:	f040 8095 	bne.w	8004850 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004726:	4b58      	ldr	r3, [pc, #352]	; (8004888 <HAL_RCC_OscConfig+0x788>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a57      	ldr	r2, [pc, #348]	; (8004888 <HAL_RCC_OscConfig+0x788>)
 800472c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004730:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004732:	f7fd f929 	bl	8001988 <HAL_GetTick>
 8004736:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004738:	e008      	b.n	800474c <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800473a:	f7fd f925 	bl	8001988 <HAL_GetTick>
 800473e:	4602      	mov	r2, r0
 8004740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004742:	1ad3      	subs	r3, r2, r3
 8004744:	2b02      	cmp	r3, #2
 8004746:	d901      	bls.n	800474c <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8004748:	2303      	movs	r3, #3
 800474a:	e0e2      	b.n	8004912 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800474c:	4b4e      	ldr	r3, [pc, #312]	; (8004888 <HAL_RCC_OscConfig+0x788>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004754:	2b00      	cmp	r3, #0
 8004756:	d1f0      	bne.n	800473a <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004758:	4b4b      	ldr	r3, [pc, #300]	; (8004888 <HAL_RCC_OscConfig+0x788>)
 800475a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800475c:	4b4b      	ldr	r3, [pc, #300]	; (800488c <HAL_RCC_OscConfig+0x78c>)
 800475e:	4013      	ands	r3, r2
 8004760:	687a      	ldr	r2, [r7, #4]
 8004762:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004768:	0112      	lsls	r2, r2, #4
 800476a:	430a      	orrs	r2, r1
 800476c:	4946      	ldr	r1, [pc, #280]	; (8004888 <HAL_RCC_OscConfig+0x788>)
 800476e:	4313      	orrs	r3, r2
 8004770:	628b      	str	r3, [r1, #40]	; 0x28
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004776:	3b01      	subs	r3, #1
 8004778:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004780:	3b01      	subs	r3, #1
 8004782:	025b      	lsls	r3, r3, #9
 8004784:	b29b      	uxth	r3, r3
 8004786:	431a      	orrs	r2, r3
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800478c:	3b01      	subs	r3, #1
 800478e:	041b      	lsls	r3, r3, #16
 8004790:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004794:	431a      	orrs	r2, r3
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800479a:	3b01      	subs	r3, #1
 800479c:	061b      	lsls	r3, r3, #24
 800479e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80047a2:	4939      	ldr	r1, [pc, #228]	; (8004888 <HAL_RCC_OscConfig+0x788>)
 80047a4:	4313      	orrs	r3, r2
 80047a6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80047a8:	4b37      	ldr	r3, [pc, #220]	; (8004888 <HAL_RCC_OscConfig+0x788>)
 80047aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ac:	4a36      	ldr	r2, [pc, #216]	; (8004888 <HAL_RCC_OscConfig+0x788>)
 80047ae:	f023 0301 	bic.w	r3, r3, #1
 80047b2:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80047b4:	4b34      	ldr	r3, [pc, #208]	; (8004888 <HAL_RCC_OscConfig+0x788>)
 80047b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047b8:	4b35      	ldr	r3, [pc, #212]	; (8004890 <HAL_RCC_OscConfig+0x790>)
 80047ba:	4013      	ands	r3, r2
 80047bc:	687a      	ldr	r2, [r7, #4]
 80047be:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80047c0:	00d2      	lsls	r2, r2, #3
 80047c2:	4931      	ldr	r1, [pc, #196]	; (8004888 <HAL_RCC_OscConfig+0x788>)
 80047c4:	4313      	orrs	r3, r2
 80047c6:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80047c8:	4b2f      	ldr	r3, [pc, #188]	; (8004888 <HAL_RCC_OscConfig+0x788>)
 80047ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047cc:	f023 020c 	bic.w	r2, r3, #12
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d4:	492c      	ldr	r1, [pc, #176]	; (8004888 <HAL_RCC_OscConfig+0x788>)
 80047d6:	4313      	orrs	r3, r2
 80047d8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80047da:	4b2b      	ldr	r3, [pc, #172]	; (8004888 <HAL_RCC_OscConfig+0x788>)
 80047dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047de:	f023 0202 	bic.w	r2, r3, #2
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047e6:	4928      	ldr	r1, [pc, #160]	; (8004888 <HAL_RCC_OscConfig+0x788>)
 80047e8:	4313      	orrs	r3, r2
 80047ea:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80047ec:	4b26      	ldr	r3, [pc, #152]	; (8004888 <HAL_RCC_OscConfig+0x788>)
 80047ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f0:	4a25      	ldr	r2, [pc, #148]	; (8004888 <HAL_RCC_OscConfig+0x788>)
 80047f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047f8:	4b23      	ldr	r3, [pc, #140]	; (8004888 <HAL_RCC_OscConfig+0x788>)
 80047fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047fc:	4a22      	ldr	r2, [pc, #136]	; (8004888 <HAL_RCC_OscConfig+0x788>)
 80047fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004802:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004804:	4b20      	ldr	r3, [pc, #128]	; (8004888 <HAL_RCC_OscConfig+0x788>)
 8004806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004808:	4a1f      	ldr	r2, [pc, #124]	; (8004888 <HAL_RCC_OscConfig+0x788>)
 800480a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800480e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8004810:	4b1d      	ldr	r3, [pc, #116]	; (8004888 <HAL_RCC_OscConfig+0x788>)
 8004812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004814:	4a1c      	ldr	r2, [pc, #112]	; (8004888 <HAL_RCC_OscConfig+0x788>)
 8004816:	f043 0301 	orr.w	r3, r3, #1
 800481a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800481c:	4b1a      	ldr	r3, [pc, #104]	; (8004888 <HAL_RCC_OscConfig+0x788>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a19      	ldr	r2, [pc, #100]	; (8004888 <HAL_RCC_OscConfig+0x788>)
 8004822:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004826:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004828:	f7fd f8ae 	bl	8001988 <HAL_GetTick>
 800482c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800482e:	e008      	b.n	8004842 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004830:	f7fd f8aa 	bl	8001988 <HAL_GetTick>
 8004834:	4602      	mov	r2, r0
 8004836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004838:	1ad3      	subs	r3, r2, r3
 800483a:	2b02      	cmp	r3, #2
 800483c:	d901      	bls.n	8004842 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 800483e:	2303      	movs	r3, #3
 8004840:	e067      	b.n	8004912 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004842:	4b11      	ldr	r3, [pc, #68]	; (8004888 <HAL_RCC_OscConfig+0x788>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800484a:	2b00      	cmp	r3, #0
 800484c:	d0f0      	beq.n	8004830 <HAL_RCC_OscConfig+0x730>
 800484e:	e05f      	b.n	8004910 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004850:	4b0d      	ldr	r3, [pc, #52]	; (8004888 <HAL_RCC_OscConfig+0x788>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a0c      	ldr	r2, [pc, #48]	; (8004888 <HAL_RCC_OscConfig+0x788>)
 8004856:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800485a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800485c:	f7fd f894 	bl	8001988 <HAL_GetTick>
 8004860:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004862:	e008      	b.n	8004876 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004864:	f7fd f890 	bl	8001988 <HAL_GetTick>
 8004868:	4602      	mov	r2, r0
 800486a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800486c:	1ad3      	subs	r3, r2, r3
 800486e:	2b02      	cmp	r3, #2
 8004870:	d901      	bls.n	8004876 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8004872:	2303      	movs	r3, #3
 8004874:	e04d      	b.n	8004912 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004876:	4b04      	ldr	r3, [pc, #16]	; (8004888 <HAL_RCC_OscConfig+0x788>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800487e:	2b00      	cmp	r3, #0
 8004880:	d1f0      	bne.n	8004864 <HAL_RCC_OscConfig+0x764>
 8004882:	e045      	b.n	8004910 <HAL_RCC_OscConfig+0x810>
 8004884:	58024800 	.word	0x58024800
 8004888:	58024400 	.word	0x58024400
 800488c:	fffffc0c 	.word	0xfffffc0c
 8004890:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004894:	4b21      	ldr	r3, [pc, #132]	; (800491c <HAL_RCC_OscConfig+0x81c>)
 8004896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004898:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800489a:	4b20      	ldr	r3, [pc, #128]	; (800491c <HAL_RCC_OscConfig+0x81c>)
 800489c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800489e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d031      	beq.n	800490c <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	f003 0203 	and.w	r2, r3, #3
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d12a      	bne.n	800490c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	091b      	lsrs	r3, r3, #4
 80048ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d122      	bne.n	800490c <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80048d2:	429a      	cmp	r2, r3
 80048d4:	d11a      	bne.n	800490c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	0a5b      	lsrs	r3, r3, #9
 80048da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048e2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d111      	bne.n	800490c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	0c1b      	lsrs	r3, r3, #16
 80048ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80048f6:	429a      	cmp	r2, r3
 80048f8:	d108      	bne.n	800490c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	0e1b      	lsrs	r3, r3, #24
 80048fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004906:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004908:	429a      	cmp	r2, r3
 800490a:	d001      	beq.n	8004910 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	e000      	b.n	8004912 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8004910:	2300      	movs	r3, #0
}
 8004912:	4618      	mov	r0, r3
 8004914:	3730      	adds	r7, #48	; 0x30
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}
 800491a:	bf00      	nop
 800491c:	58024400 	.word	0x58024400

08004920 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b086      	sub	sp, #24
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d101      	bne.n	8004934 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004930:	2301      	movs	r3, #1
 8004932:	e19c      	b.n	8004c6e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004934:	4b8a      	ldr	r3, [pc, #552]	; (8004b60 <HAL_RCC_ClockConfig+0x240>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f003 030f 	and.w	r3, r3, #15
 800493c:	683a      	ldr	r2, [r7, #0]
 800493e:	429a      	cmp	r2, r3
 8004940:	d910      	bls.n	8004964 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004942:	4b87      	ldr	r3, [pc, #540]	; (8004b60 <HAL_RCC_ClockConfig+0x240>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f023 020f 	bic.w	r2, r3, #15
 800494a:	4985      	ldr	r1, [pc, #532]	; (8004b60 <HAL_RCC_ClockConfig+0x240>)
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	4313      	orrs	r3, r2
 8004950:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004952:	4b83      	ldr	r3, [pc, #524]	; (8004b60 <HAL_RCC_ClockConfig+0x240>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 030f 	and.w	r3, r3, #15
 800495a:	683a      	ldr	r2, [r7, #0]
 800495c:	429a      	cmp	r2, r3
 800495e:	d001      	beq.n	8004964 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	e184      	b.n	8004c6e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f003 0304 	and.w	r3, r3, #4
 800496c:	2b00      	cmp	r3, #0
 800496e:	d010      	beq.n	8004992 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	691a      	ldr	r2, [r3, #16]
 8004974:	4b7b      	ldr	r3, [pc, #492]	; (8004b64 <HAL_RCC_ClockConfig+0x244>)
 8004976:	699b      	ldr	r3, [r3, #24]
 8004978:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800497c:	429a      	cmp	r2, r3
 800497e:	d908      	bls.n	8004992 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004980:	4b78      	ldr	r3, [pc, #480]	; (8004b64 <HAL_RCC_ClockConfig+0x244>)
 8004982:	699b      	ldr	r3, [r3, #24]
 8004984:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	691b      	ldr	r3, [r3, #16]
 800498c:	4975      	ldr	r1, [pc, #468]	; (8004b64 <HAL_RCC_ClockConfig+0x244>)
 800498e:	4313      	orrs	r3, r2
 8004990:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f003 0308 	and.w	r3, r3, #8
 800499a:	2b00      	cmp	r3, #0
 800499c:	d010      	beq.n	80049c0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	695a      	ldr	r2, [r3, #20]
 80049a2:	4b70      	ldr	r3, [pc, #448]	; (8004b64 <HAL_RCC_ClockConfig+0x244>)
 80049a4:	69db      	ldr	r3, [r3, #28]
 80049a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d908      	bls.n	80049c0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80049ae:	4b6d      	ldr	r3, [pc, #436]	; (8004b64 <HAL_RCC_ClockConfig+0x244>)
 80049b0:	69db      	ldr	r3, [r3, #28]
 80049b2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	695b      	ldr	r3, [r3, #20]
 80049ba:	496a      	ldr	r1, [pc, #424]	; (8004b64 <HAL_RCC_ClockConfig+0x244>)
 80049bc:	4313      	orrs	r3, r2
 80049be:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 0310 	and.w	r3, r3, #16
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d010      	beq.n	80049ee <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	699a      	ldr	r2, [r3, #24]
 80049d0:	4b64      	ldr	r3, [pc, #400]	; (8004b64 <HAL_RCC_ClockConfig+0x244>)
 80049d2:	69db      	ldr	r3, [r3, #28]
 80049d4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80049d8:	429a      	cmp	r2, r3
 80049da:	d908      	bls.n	80049ee <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80049dc:	4b61      	ldr	r3, [pc, #388]	; (8004b64 <HAL_RCC_ClockConfig+0x244>)
 80049de:	69db      	ldr	r3, [r3, #28]
 80049e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	699b      	ldr	r3, [r3, #24]
 80049e8:	495e      	ldr	r1, [pc, #376]	; (8004b64 <HAL_RCC_ClockConfig+0x244>)
 80049ea:	4313      	orrs	r3, r2
 80049ec:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f003 0320 	and.w	r3, r3, #32
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d010      	beq.n	8004a1c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	69da      	ldr	r2, [r3, #28]
 80049fe:	4b59      	ldr	r3, [pc, #356]	; (8004b64 <HAL_RCC_ClockConfig+0x244>)
 8004a00:	6a1b      	ldr	r3, [r3, #32]
 8004a02:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d908      	bls.n	8004a1c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004a0a:	4b56      	ldr	r3, [pc, #344]	; (8004b64 <HAL_RCC_ClockConfig+0x244>)
 8004a0c:	6a1b      	ldr	r3, [r3, #32]
 8004a0e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	69db      	ldr	r3, [r3, #28]
 8004a16:	4953      	ldr	r1, [pc, #332]	; (8004b64 <HAL_RCC_ClockConfig+0x244>)
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 0302 	and.w	r3, r3, #2
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d010      	beq.n	8004a4a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	68da      	ldr	r2, [r3, #12]
 8004a2c:	4b4d      	ldr	r3, [pc, #308]	; (8004b64 <HAL_RCC_ClockConfig+0x244>)
 8004a2e:	699b      	ldr	r3, [r3, #24]
 8004a30:	f003 030f 	and.w	r3, r3, #15
 8004a34:	429a      	cmp	r2, r3
 8004a36:	d908      	bls.n	8004a4a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a38:	4b4a      	ldr	r3, [pc, #296]	; (8004b64 <HAL_RCC_ClockConfig+0x244>)
 8004a3a:	699b      	ldr	r3, [r3, #24]
 8004a3c:	f023 020f 	bic.w	r2, r3, #15
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	68db      	ldr	r3, [r3, #12]
 8004a44:	4947      	ldr	r1, [pc, #284]	; (8004b64 <HAL_RCC_ClockConfig+0x244>)
 8004a46:	4313      	orrs	r3, r2
 8004a48:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 0301 	and.w	r3, r3, #1
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d055      	beq.n	8004b02 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004a56:	4b43      	ldr	r3, [pc, #268]	; (8004b64 <HAL_RCC_ClockConfig+0x244>)
 8004a58:	699b      	ldr	r3, [r3, #24]
 8004a5a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	4940      	ldr	r1, [pc, #256]	; (8004b64 <HAL_RCC_ClockConfig+0x244>)
 8004a64:	4313      	orrs	r3, r2
 8004a66:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	2b02      	cmp	r3, #2
 8004a6e:	d107      	bne.n	8004a80 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004a70:	4b3c      	ldr	r3, [pc, #240]	; (8004b64 <HAL_RCC_ClockConfig+0x244>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d121      	bne.n	8004ac0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	e0f6      	b.n	8004c6e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	2b03      	cmp	r3, #3
 8004a86:	d107      	bne.n	8004a98 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004a88:	4b36      	ldr	r3, [pc, #216]	; (8004b64 <HAL_RCC_ClockConfig+0x244>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d115      	bne.n	8004ac0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004a94:	2301      	movs	r3, #1
 8004a96:	e0ea      	b.n	8004c6e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d107      	bne.n	8004ab0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004aa0:	4b30      	ldr	r3, [pc, #192]	; (8004b64 <HAL_RCC_ClockConfig+0x244>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d109      	bne.n	8004ac0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	e0de      	b.n	8004c6e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004ab0:	4b2c      	ldr	r3, [pc, #176]	; (8004b64 <HAL_RCC_ClockConfig+0x244>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 0304 	and.w	r3, r3, #4
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d101      	bne.n	8004ac0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
 8004abe:	e0d6      	b.n	8004c6e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004ac0:	4b28      	ldr	r3, [pc, #160]	; (8004b64 <HAL_RCC_ClockConfig+0x244>)
 8004ac2:	691b      	ldr	r3, [r3, #16]
 8004ac4:	f023 0207 	bic.w	r2, r3, #7
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	4925      	ldr	r1, [pc, #148]	; (8004b64 <HAL_RCC_ClockConfig+0x244>)
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ad2:	f7fc ff59 	bl	8001988 <HAL_GetTick>
 8004ad6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ad8:	e00a      	b.n	8004af0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ada:	f7fc ff55 	bl	8001988 <HAL_GetTick>
 8004ade:	4602      	mov	r2, r0
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	1ad3      	subs	r3, r2, r3
 8004ae4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d901      	bls.n	8004af0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004aec:	2303      	movs	r3, #3
 8004aee:	e0be      	b.n	8004c6e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004af0:	4b1c      	ldr	r3, [pc, #112]	; (8004b64 <HAL_RCC_ClockConfig+0x244>)
 8004af2:	691b      	ldr	r3, [r3, #16]
 8004af4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	00db      	lsls	r3, r3, #3
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d1eb      	bne.n	8004ada <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 0302 	and.w	r3, r3, #2
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d010      	beq.n	8004b30 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	68da      	ldr	r2, [r3, #12]
 8004b12:	4b14      	ldr	r3, [pc, #80]	; (8004b64 <HAL_RCC_ClockConfig+0x244>)
 8004b14:	699b      	ldr	r3, [r3, #24]
 8004b16:	f003 030f 	and.w	r3, r3, #15
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	d208      	bcs.n	8004b30 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b1e:	4b11      	ldr	r3, [pc, #68]	; (8004b64 <HAL_RCC_ClockConfig+0x244>)
 8004b20:	699b      	ldr	r3, [r3, #24]
 8004b22:	f023 020f 	bic.w	r2, r3, #15
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	68db      	ldr	r3, [r3, #12]
 8004b2a:	490e      	ldr	r1, [pc, #56]	; (8004b64 <HAL_RCC_ClockConfig+0x244>)
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b30:	4b0b      	ldr	r3, [pc, #44]	; (8004b60 <HAL_RCC_ClockConfig+0x240>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f003 030f 	and.w	r3, r3, #15
 8004b38:	683a      	ldr	r2, [r7, #0]
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	d214      	bcs.n	8004b68 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b3e:	4b08      	ldr	r3, [pc, #32]	; (8004b60 <HAL_RCC_ClockConfig+0x240>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f023 020f 	bic.w	r2, r3, #15
 8004b46:	4906      	ldr	r1, [pc, #24]	; (8004b60 <HAL_RCC_ClockConfig+0x240>)
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b4e:	4b04      	ldr	r3, [pc, #16]	; (8004b60 <HAL_RCC_ClockConfig+0x240>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 030f 	and.w	r3, r3, #15
 8004b56:	683a      	ldr	r2, [r7, #0]
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d005      	beq.n	8004b68 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e086      	b.n	8004c6e <HAL_RCC_ClockConfig+0x34e>
 8004b60:	52002000 	.word	0x52002000
 8004b64:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f003 0304 	and.w	r3, r3, #4
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d010      	beq.n	8004b96 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	691a      	ldr	r2, [r3, #16]
 8004b78:	4b3f      	ldr	r3, [pc, #252]	; (8004c78 <HAL_RCC_ClockConfig+0x358>)
 8004b7a:	699b      	ldr	r3, [r3, #24]
 8004b7c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004b80:	429a      	cmp	r2, r3
 8004b82:	d208      	bcs.n	8004b96 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004b84:	4b3c      	ldr	r3, [pc, #240]	; (8004c78 <HAL_RCC_ClockConfig+0x358>)
 8004b86:	699b      	ldr	r3, [r3, #24]
 8004b88:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	691b      	ldr	r3, [r3, #16]
 8004b90:	4939      	ldr	r1, [pc, #228]	; (8004c78 <HAL_RCC_ClockConfig+0x358>)
 8004b92:	4313      	orrs	r3, r2
 8004b94:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f003 0308 	and.w	r3, r3, #8
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d010      	beq.n	8004bc4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	695a      	ldr	r2, [r3, #20]
 8004ba6:	4b34      	ldr	r3, [pc, #208]	; (8004c78 <HAL_RCC_ClockConfig+0x358>)
 8004ba8:	69db      	ldr	r3, [r3, #28]
 8004baa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d208      	bcs.n	8004bc4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004bb2:	4b31      	ldr	r3, [pc, #196]	; (8004c78 <HAL_RCC_ClockConfig+0x358>)
 8004bb4:	69db      	ldr	r3, [r3, #28]
 8004bb6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	695b      	ldr	r3, [r3, #20]
 8004bbe:	492e      	ldr	r1, [pc, #184]	; (8004c78 <HAL_RCC_ClockConfig+0x358>)
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f003 0310 	and.w	r3, r3, #16
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d010      	beq.n	8004bf2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	699a      	ldr	r2, [r3, #24]
 8004bd4:	4b28      	ldr	r3, [pc, #160]	; (8004c78 <HAL_RCC_ClockConfig+0x358>)
 8004bd6:	69db      	ldr	r3, [r3, #28]
 8004bd8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d208      	bcs.n	8004bf2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004be0:	4b25      	ldr	r3, [pc, #148]	; (8004c78 <HAL_RCC_ClockConfig+0x358>)
 8004be2:	69db      	ldr	r3, [r3, #28]
 8004be4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	699b      	ldr	r3, [r3, #24]
 8004bec:	4922      	ldr	r1, [pc, #136]	; (8004c78 <HAL_RCC_ClockConfig+0x358>)
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f003 0320 	and.w	r3, r3, #32
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d010      	beq.n	8004c20 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	69da      	ldr	r2, [r3, #28]
 8004c02:	4b1d      	ldr	r3, [pc, #116]	; (8004c78 <HAL_RCC_ClockConfig+0x358>)
 8004c04:	6a1b      	ldr	r3, [r3, #32]
 8004c06:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d208      	bcs.n	8004c20 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004c0e:	4b1a      	ldr	r3, [pc, #104]	; (8004c78 <HAL_RCC_ClockConfig+0x358>)
 8004c10:	6a1b      	ldr	r3, [r3, #32]
 8004c12:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	69db      	ldr	r3, [r3, #28]
 8004c1a:	4917      	ldr	r1, [pc, #92]	; (8004c78 <HAL_RCC_ClockConfig+0x358>)
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004c20:	f000 f834 	bl	8004c8c <HAL_RCC_GetSysClockFreq>
 8004c24:	4602      	mov	r2, r0
 8004c26:	4b14      	ldr	r3, [pc, #80]	; (8004c78 <HAL_RCC_ClockConfig+0x358>)
 8004c28:	699b      	ldr	r3, [r3, #24]
 8004c2a:	0a1b      	lsrs	r3, r3, #8
 8004c2c:	f003 030f 	and.w	r3, r3, #15
 8004c30:	4912      	ldr	r1, [pc, #72]	; (8004c7c <HAL_RCC_ClockConfig+0x35c>)
 8004c32:	5ccb      	ldrb	r3, [r1, r3]
 8004c34:	f003 031f 	and.w	r3, r3, #31
 8004c38:	fa22 f303 	lsr.w	r3, r2, r3
 8004c3c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004c3e:	4b0e      	ldr	r3, [pc, #56]	; (8004c78 <HAL_RCC_ClockConfig+0x358>)
 8004c40:	699b      	ldr	r3, [r3, #24]
 8004c42:	f003 030f 	and.w	r3, r3, #15
 8004c46:	4a0d      	ldr	r2, [pc, #52]	; (8004c7c <HAL_RCC_ClockConfig+0x35c>)
 8004c48:	5cd3      	ldrb	r3, [r2, r3]
 8004c4a:	f003 031f 	and.w	r3, r3, #31
 8004c4e:	693a      	ldr	r2, [r7, #16]
 8004c50:	fa22 f303 	lsr.w	r3, r2, r3
 8004c54:	4a0a      	ldr	r2, [pc, #40]	; (8004c80 <HAL_RCC_ClockConfig+0x360>)
 8004c56:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004c58:	4a0a      	ldr	r2, [pc, #40]	; (8004c84 <HAL_RCC_ClockConfig+0x364>)
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8004c5e:	4b0a      	ldr	r3, [pc, #40]	; (8004c88 <HAL_RCC_ClockConfig+0x368>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4618      	mov	r0, r3
 8004c64:	f7fc fe46 	bl	80018f4 <HAL_InitTick>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004c6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3718      	adds	r7, #24
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}
 8004c76:	bf00      	nop
 8004c78:	58024400 	.word	0x58024400
 8004c7c:	08016c14 	.word	0x08016c14
 8004c80:	24000004 	.word	0x24000004
 8004c84:	24000000 	.word	0x24000000
 8004c88:	24000008 	.word	0x24000008

08004c8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b089      	sub	sp, #36	; 0x24
 8004c90:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c92:	4bb3      	ldr	r3, [pc, #716]	; (8004f60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c94:	691b      	ldr	r3, [r3, #16]
 8004c96:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c9a:	2b18      	cmp	r3, #24
 8004c9c:	f200 8155 	bhi.w	8004f4a <HAL_RCC_GetSysClockFreq+0x2be>
 8004ca0:	a201      	add	r2, pc, #4	; (adr r2, 8004ca8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ca6:	bf00      	nop
 8004ca8:	08004d0d 	.word	0x08004d0d
 8004cac:	08004f4b 	.word	0x08004f4b
 8004cb0:	08004f4b 	.word	0x08004f4b
 8004cb4:	08004f4b 	.word	0x08004f4b
 8004cb8:	08004f4b 	.word	0x08004f4b
 8004cbc:	08004f4b 	.word	0x08004f4b
 8004cc0:	08004f4b 	.word	0x08004f4b
 8004cc4:	08004f4b 	.word	0x08004f4b
 8004cc8:	08004d33 	.word	0x08004d33
 8004ccc:	08004f4b 	.word	0x08004f4b
 8004cd0:	08004f4b 	.word	0x08004f4b
 8004cd4:	08004f4b 	.word	0x08004f4b
 8004cd8:	08004f4b 	.word	0x08004f4b
 8004cdc:	08004f4b 	.word	0x08004f4b
 8004ce0:	08004f4b 	.word	0x08004f4b
 8004ce4:	08004f4b 	.word	0x08004f4b
 8004ce8:	08004d39 	.word	0x08004d39
 8004cec:	08004f4b 	.word	0x08004f4b
 8004cf0:	08004f4b 	.word	0x08004f4b
 8004cf4:	08004f4b 	.word	0x08004f4b
 8004cf8:	08004f4b 	.word	0x08004f4b
 8004cfc:	08004f4b 	.word	0x08004f4b
 8004d00:	08004f4b 	.word	0x08004f4b
 8004d04:	08004f4b 	.word	0x08004f4b
 8004d08:	08004d3f 	.word	0x08004d3f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d0c:	4b94      	ldr	r3, [pc, #592]	; (8004f60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f003 0320 	and.w	r3, r3, #32
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d009      	beq.n	8004d2c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004d18:	4b91      	ldr	r3, [pc, #580]	; (8004f60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	08db      	lsrs	r3, r3, #3
 8004d1e:	f003 0303 	and.w	r3, r3, #3
 8004d22:	4a90      	ldr	r2, [pc, #576]	; (8004f64 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004d24:	fa22 f303 	lsr.w	r3, r2, r3
 8004d28:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8004d2a:	e111      	b.n	8004f50 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004d2c:	4b8d      	ldr	r3, [pc, #564]	; (8004f64 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004d2e:	61bb      	str	r3, [r7, #24]
    break;
 8004d30:	e10e      	b.n	8004f50 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004d32:	4b8d      	ldr	r3, [pc, #564]	; (8004f68 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004d34:	61bb      	str	r3, [r7, #24]
    break;
 8004d36:	e10b      	b.n	8004f50 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004d38:	4b8c      	ldr	r3, [pc, #560]	; (8004f6c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004d3a:	61bb      	str	r3, [r7, #24]
    break;
 8004d3c:	e108      	b.n	8004f50 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004d3e:	4b88      	ldr	r3, [pc, #544]	; (8004f60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d42:	f003 0303 	and.w	r3, r3, #3
 8004d46:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004d48:	4b85      	ldr	r3, [pc, #532]	; (8004f60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d4c:	091b      	lsrs	r3, r3, #4
 8004d4e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d52:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004d54:	4b82      	ldr	r3, [pc, #520]	; (8004f60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d58:	f003 0301 	and.w	r3, r3, #1
 8004d5c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004d5e:	4b80      	ldr	r3, [pc, #512]	; (8004f60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d62:	08db      	lsrs	r3, r3, #3
 8004d64:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004d68:	68fa      	ldr	r2, [r7, #12]
 8004d6a:	fb02 f303 	mul.w	r3, r2, r3
 8004d6e:	ee07 3a90 	vmov	s15, r3
 8004d72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d76:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	f000 80e1 	beq.w	8004f44 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	2b02      	cmp	r3, #2
 8004d86:	f000 8083 	beq.w	8004e90 <HAL_RCC_GetSysClockFreq+0x204>
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	2b02      	cmp	r3, #2
 8004d8e:	f200 80a1 	bhi.w	8004ed4 <HAL_RCC_GetSysClockFreq+0x248>
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d003      	beq.n	8004da0 <HAL_RCC_GetSysClockFreq+0x114>
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	2b01      	cmp	r3, #1
 8004d9c:	d056      	beq.n	8004e4c <HAL_RCC_GetSysClockFreq+0x1c0>
 8004d9e:	e099      	b.n	8004ed4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004da0:	4b6f      	ldr	r3, [pc, #444]	; (8004f60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f003 0320 	and.w	r3, r3, #32
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d02d      	beq.n	8004e08 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004dac:	4b6c      	ldr	r3, [pc, #432]	; (8004f60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	08db      	lsrs	r3, r3, #3
 8004db2:	f003 0303 	and.w	r3, r3, #3
 8004db6:	4a6b      	ldr	r2, [pc, #428]	; (8004f64 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004db8:	fa22 f303 	lsr.w	r3, r2, r3
 8004dbc:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	ee07 3a90 	vmov	s15, r3
 8004dc4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	ee07 3a90 	vmov	s15, r3
 8004dce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004dd6:	4b62      	ldr	r3, [pc, #392]	; (8004f60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dde:	ee07 3a90 	vmov	s15, r3
 8004de2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004de6:	ed97 6a02 	vldr	s12, [r7, #8]
 8004dea:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004f70 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004dee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004df2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004df6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004dfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004dfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e02:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004e06:	e087      	b.n	8004f18 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	ee07 3a90 	vmov	s15, r3
 8004e0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e12:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004f74 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004e16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e1a:	4b51      	ldr	r3, [pc, #324]	; (8004f60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e22:	ee07 3a90 	vmov	s15, r3
 8004e26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e2a:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e2e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004f70 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004e32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e4a:	e065      	b.n	8004f18 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	ee07 3a90 	vmov	s15, r3
 8004e52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e56:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004f78 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004e5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e5e:	4b40      	ldr	r3, [pc, #256]	; (8004f60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e66:	ee07 3a90 	vmov	s15, r3
 8004e6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e6e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e72:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004f70 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004e76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e8e:	e043      	b.n	8004f18 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	ee07 3a90 	vmov	s15, r3
 8004e96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e9a:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004f7c <HAL_RCC_GetSysClockFreq+0x2f0>
 8004e9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ea2:	4b2f      	ldr	r3, [pc, #188]	; (8004f60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ea6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004eaa:	ee07 3a90 	vmov	s15, r3
 8004eae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004eb2:	ed97 6a02 	vldr	s12, [r7, #8]
 8004eb6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004f70 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004eba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ebe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ec2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ec6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004eca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ece:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ed2:	e021      	b.n	8004f18 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	ee07 3a90 	vmov	s15, r3
 8004eda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ede:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004f78 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004ee2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ee6:	4b1e      	ldr	r3, [pc, #120]	; (8004f60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004eee:	ee07 3a90 	vmov	s15, r3
 8004ef2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ef6:	ed97 6a02 	vldr	s12, [r7, #8]
 8004efa:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004f70 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004efe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f16:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004f18:	4b11      	ldr	r3, [pc, #68]	; (8004f60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f1c:	0a5b      	lsrs	r3, r3, #9
 8004f1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f22:	3301      	adds	r3, #1
 8004f24:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	ee07 3a90 	vmov	s15, r3
 8004f2c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004f30:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f3c:	ee17 3a90 	vmov	r3, s15
 8004f40:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004f42:	e005      	b.n	8004f50 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8004f44:	2300      	movs	r3, #0
 8004f46:	61bb      	str	r3, [r7, #24]
    break;
 8004f48:	e002      	b.n	8004f50 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8004f4a:	4b07      	ldr	r3, [pc, #28]	; (8004f68 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004f4c:	61bb      	str	r3, [r7, #24]
    break;
 8004f4e:	bf00      	nop
  }

  return sysclockfreq;
 8004f50:	69bb      	ldr	r3, [r7, #24]
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3724      	adds	r7, #36	; 0x24
 8004f56:	46bd      	mov	sp, r7
 8004f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5c:	4770      	bx	lr
 8004f5e:	bf00      	nop
 8004f60:	58024400 	.word	0x58024400
 8004f64:	03d09000 	.word	0x03d09000
 8004f68:	003d0900 	.word	0x003d0900
 8004f6c:	007a1200 	.word	0x007a1200
 8004f70:	46000000 	.word	0x46000000
 8004f74:	4c742400 	.word	0x4c742400
 8004f78:	4a742400 	.word	0x4a742400
 8004f7c:	4af42400 	.word	0x4af42400

08004f80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b082      	sub	sp, #8
 8004f84:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004f86:	f7ff fe81 	bl	8004c8c <HAL_RCC_GetSysClockFreq>
 8004f8a:	4602      	mov	r2, r0
 8004f8c:	4b10      	ldr	r3, [pc, #64]	; (8004fd0 <HAL_RCC_GetHCLKFreq+0x50>)
 8004f8e:	699b      	ldr	r3, [r3, #24]
 8004f90:	0a1b      	lsrs	r3, r3, #8
 8004f92:	f003 030f 	and.w	r3, r3, #15
 8004f96:	490f      	ldr	r1, [pc, #60]	; (8004fd4 <HAL_RCC_GetHCLKFreq+0x54>)
 8004f98:	5ccb      	ldrb	r3, [r1, r3]
 8004f9a:	f003 031f 	and.w	r3, r3, #31
 8004f9e:	fa22 f303 	lsr.w	r3, r2, r3
 8004fa2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004fa4:	4b0a      	ldr	r3, [pc, #40]	; (8004fd0 <HAL_RCC_GetHCLKFreq+0x50>)
 8004fa6:	699b      	ldr	r3, [r3, #24]
 8004fa8:	f003 030f 	and.w	r3, r3, #15
 8004fac:	4a09      	ldr	r2, [pc, #36]	; (8004fd4 <HAL_RCC_GetHCLKFreq+0x54>)
 8004fae:	5cd3      	ldrb	r3, [r2, r3]
 8004fb0:	f003 031f 	and.w	r3, r3, #31
 8004fb4:	687a      	ldr	r2, [r7, #4]
 8004fb6:	fa22 f303 	lsr.w	r3, r2, r3
 8004fba:	4a07      	ldr	r2, [pc, #28]	; (8004fd8 <HAL_RCC_GetHCLKFreq+0x58>)
 8004fbc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004fbe:	4a07      	ldr	r2, [pc, #28]	; (8004fdc <HAL_RCC_GetHCLKFreq+0x5c>)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004fc4:	4b04      	ldr	r3, [pc, #16]	; (8004fd8 <HAL_RCC_GetHCLKFreq+0x58>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	3708      	adds	r7, #8
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}
 8004fd0:	58024400 	.word	0x58024400
 8004fd4:	08016c14 	.word	0x08016c14
 8004fd8:	24000004 	.word	0x24000004
 8004fdc:	24000000 	.word	0x24000000

08004fe0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004fe4:	f7ff ffcc 	bl	8004f80 <HAL_RCC_GetHCLKFreq>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	4b06      	ldr	r3, [pc, #24]	; (8005004 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004fec:	69db      	ldr	r3, [r3, #28]
 8004fee:	091b      	lsrs	r3, r3, #4
 8004ff0:	f003 0307 	and.w	r3, r3, #7
 8004ff4:	4904      	ldr	r1, [pc, #16]	; (8005008 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004ff6:	5ccb      	ldrb	r3, [r1, r3]
 8004ff8:	f003 031f 	and.w	r3, r3, #31
 8004ffc:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005000:	4618      	mov	r0, r3
 8005002:	bd80      	pop	{r7, pc}
 8005004:	58024400 	.word	0x58024400
 8005008:	08016c14 	.word	0x08016c14

0800500c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005010:	f7ff ffb6 	bl	8004f80 <HAL_RCC_GetHCLKFreq>
 8005014:	4602      	mov	r2, r0
 8005016:	4b06      	ldr	r3, [pc, #24]	; (8005030 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005018:	69db      	ldr	r3, [r3, #28]
 800501a:	0a1b      	lsrs	r3, r3, #8
 800501c:	f003 0307 	and.w	r3, r3, #7
 8005020:	4904      	ldr	r1, [pc, #16]	; (8005034 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005022:	5ccb      	ldrb	r3, [r1, r3]
 8005024:	f003 031f 	and.w	r3, r3, #31
 8005028:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800502c:	4618      	mov	r0, r3
 800502e:	bd80      	pop	{r7, pc}
 8005030:	58024400 	.word	0x58024400
 8005034:	08016c14 	.word	0x08016c14

08005038 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b086      	sub	sp, #24
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005040:	2300      	movs	r3, #0
 8005042:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005044:	2300      	movs	r3, #0
 8005046:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005050:	2b00      	cmp	r3, #0
 8005052:	d03f      	beq.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005058:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800505c:	d02a      	beq.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800505e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005062:	d824      	bhi.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005064:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005068:	d018      	beq.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800506a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800506e:	d81e      	bhi.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005070:	2b00      	cmp	r3, #0
 8005072:	d003      	beq.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005074:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005078:	d007      	beq.n	800508a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800507a:	e018      	b.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800507c:	4bab      	ldr	r3, [pc, #684]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800507e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005080:	4aaa      	ldr	r2, [pc, #680]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005082:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005086:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005088:	e015      	b.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	3304      	adds	r3, #4
 800508e:	2102      	movs	r1, #2
 8005090:	4618      	mov	r0, r3
 8005092:	f001 f9cf 	bl	8006434 <RCCEx_PLL2_Config>
 8005096:	4603      	mov	r3, r0
 8005098:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800509a:	e00c      	b.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	3324      	adds	r3, #36	; 0x24
 80050a0:	2102      	movs	r1, #2
 80050a2:	4618      	mov	r0, r3
 80050a4:	f001 fa78 	bl	8006598 <RCCEx_PLL3_Config>
 80050a8:	4603      	mov	r3, r0
 80050aa:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80050ac:	e003      	b.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	75fb      	strb	r3, [r7, #23]
      break;
 80050b2:	e000      	b.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80050b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050b6:	7dfb      	ldrb	r3, [r7, #23]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d109      	bne.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80050bc:	4b9b      	ldr	r3, [pc, #620]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80050be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050c0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050c8:	4998      	ldr	r1, [pc, #608]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80050ca:	4313      	orrs	r3, r2
 80050cc:	650b      	str	r3, [r1, #80]	; 0x50
 80050ce:	e001      	b.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050d0:	7dfb      	ldrb	r3, [r7, #23]
 80050d2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d03d      	beq.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050e4:	2b04      	cmp	r3, #4
 80050e6:	d826      	bhi.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80050e8:	a201      	add	r2, pc, #4	; (adr r2, 80050f0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80050ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050ee:	bf00      	nop
 80050f0:	08005105 	.word	0x08005105
 80050f4:	08005113 	.word	0x08005113
 80050f8:	08005125 	.word	0x08005125
 80050fc:	0800513d 	.word	0x0800513d
 8005100:	0800513d 	.word	0x0800513d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005104:	4b89      	ldr	r3, [pc, #548]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005108:	4a88      	ldr	r2, [pc, #544]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800510a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800510e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005110:	e015      	b.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	3304      	adds	r3, #4
 8005116:	2100      	movs	r1, #0
 8005118:	4618      	mov	r0, r3
 800511a:	f001 f98b 	bl	8006434 <RCCEx_PLL2_Config>
 800511e:	4603      	mov	r3, r0
 8005120:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005122:	e00c      	b.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	3324      	adds	r3, #36	; 0x24
 8005128:	2100      	movs	r1, #0
 800512a:	4618      	mov	r0, r3
 800512c:	f001 fa34 	bl	8006598 <RCCEx_PLL3_Config>
 8005130:	4603      	mov	r3, r0
 8005132:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005134:	e003      	b.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	75fb      	strb	r3, [r7, #23]
      break;
 800513a:	e000      	b.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800513c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800513e:	7dfb      	ldrb	r3, [r7, #23]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d109      	bne.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005144:	4b79      	ldr	r3, [pc, #484]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005146:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005148:	f023 0207 	bic.w	r2, r3, #7
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005150:	4976      	ldr	r1, [pc, #472]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005152:	4313      	orrs	r3, r2
 8005154:	650b      	str	r3, [r1, #80]	; 0x50
 8005156:	e001      	b.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005158:	7dfb      	ldrb	r3, [r7, #23]
 800515a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005164:	2b00      	cmp	r3, #0
 8005166:	d042      	beq.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800516c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005170:	d02b      	beq.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0x192>
 8005172:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005176:	d825      	bhi.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005178:	2bc0      	cmp	r3, #192	; 0xc0
 800517a:	d028      	beq.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0x196>
 800517c:	2bc0      	cmp	r3, #192	; 0xc0
 800517e:	d821      	bhi.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005180:	2b80      	cmp	r3, #128	; 0x80
 8005182:	d016      	beq.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8005184:	2b80      	cmp	r3, #128	; 0x80
 8005186:	d81d      	bhi.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005188:	2b00      	cmp	r3, #0
 800518a:	d002      	beq.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800518c:	2b40      	cmp	r3, #64	; 0x40
 800518e:	d007      	beq.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8005190:	e018      	b.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005192:	4b66      	ldr	r3, [pc, #408]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005196:	4a65      	ldr	r2, [pc, #404]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005198:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800519c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800519e:	e017      	b.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	3304      	adds	r3, #4
 80051a4:	2100      	movs	r1, #0
 80051a6:	4618      	mov	r0, r3
 80051a8:	f001 f944 	bl	8006434 <RCCEx_PLL2_Config>
 80051ac:	4603      	mov	r3, r0
 80051ae:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80051b0:	e00e      	b.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	3324      	adds	r3, #36	; 0x24
 80051b6:	2100      	movs	r1, #0
 80051b8:	4618      	mov	r0, r3
 80051ba:	f001 f9ed 	bl	8006598 <RCCEx_PLL3_Config>
 80051be:	4603      	mov	r3, r0
 80051c0:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80051c2:	e005      	b.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80051c4:	2301      	movs	r3, #1
 80051c6:	75fb      	strb	r3, [r7, #23]
      break;
 80051c8:	e002      	b.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80051ca:	bf00      	nop
 80051cc:	e000      	b.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80051ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051d0:	7dfb      	ldrb	r3, [r7, #23]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d109      	bne.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80051d6:	4b55      	ldr	r3, [pc, #340]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80051d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051da:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051e2:	4952      	ldr	r1, [pc, #328]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80051e4:	4313      	orrs	r3, r2
 80051e6:	650b      	str	r3, [r1, #80]	; 0x50
 80051e8:	e001      	b.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051ea:	7dfb      	ldrb	r3, [r7, #23]
 80051ec:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d049      	beq.n	800528e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005200:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005204:	d030      	beq.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8005206:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800520a:	d82a      	bhi.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800520c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005210:	d02c      	beq.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x234>
 8005212:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005216:	d824      	bhi.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005218:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800521c:	d018      	beq.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800521e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005222:	d81e      	bhi.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005224:	2b00      	cmp	r3, #0
 8005226:	d003      	beq.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8005228:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800522c:	d007      	beq.n	800523e <HAL_RCCEx_PeriphCLKConfig+0x206>
 800522e:	e018      	b.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005230:	4b3e      	ldr	r3, [pc, #248]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005234:	4a3d      	ldr	r2, [pc, #244]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005236:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800523a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800523c:	e017      	b.n	800526e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	3304      	adds	r3, #4
 8005242:	2100      	movs	r1, #0
 8005244:	4618      	mov	r0, r3
 8005246:	f001 f8f5 	bl	8006434 <RCCEx_PLL2_Config>
 800524a:	4603      	mov	r3, r0
 800524c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800524e:	e00e      	b.n	800526e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	3324      	adds	r3, #36	; 0x24
 8005254:	2100      	movs	r1, #0
 8005256:	4618      	mov	r0, r3
 8005258:	f001 f99e 	bl	8006598 <RCCEx_PLL3_Config>
 800525c:	4603      	mov	r3, r0
 800525e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005260:	e005      	b.n	800526e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	75fb      	strb	r3, [r7, #23]
      break;
 8005266:	e002      	b.n	800526e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005268:	bf00      	nop
 800526a:	e000      	b.n	800526e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800526c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800526e:	7dfb      	ldrb	r3, [r7, #23]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d10a      	bne.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005274:	4b2d      	ldr	r3, [pc, #180]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005276:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005278:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005282:	492a      	ldr	r1, [pc, #168]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005284:	4313      	orrs	r3, r2
 8005286:	658b      	str	r3, [r1, #88]	; 0x58
 8005288:	e001      	b.n	800528e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800528a:	7dfb      	ldrb	r3, [r7, #23]
 800528c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005296:	2b00      	cmp	r3, #0
 8005298:	d04c      	beq.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80052a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80052a4:	d030      	beq.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80052a6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80052aa:	d82a      	bhi.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80052ac:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80052b0:	d02c      	beq.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 80052b2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80052b6:	d824      	bhi.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80052b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80052bc:	d018      	beq.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80052be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80052c2:	d81e      	bhi.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d003      	beq.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80052c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80052cc:	d007      	beq.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80052ce:	e018      	b.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052d0:	4b16      	ldr	r3, [pc, #88]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80052d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052d4:	4a15      	ldr	r2, [pc, #84]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80052d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052da:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80052dc:	e017      	b.n	800530e <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	3304      	adds	r3, #4
 80052e2:	2100      	movs	r1, #0
 80052e4:	4618      	mov	r0, r3
 80052e6:	f001 f8a5 	bl	8006434 <RCCEx_PLL2_Config>
 80052ea:	4603      	mov	r3, r0
 80052ec:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80052ee:	e00e      	b.n	800530e <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	3324      	adds	r3, #36	; 0x24
 80052f4:	2100      	movs	r1, #0
 80052f6:	4618      	mov	r0, r3
 80052f8:	f001 f94e 	bl	8006598 <RCCEx_PLL3_Config>
 80052fc:	4603      	mov	r3, r0
 80052fe:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005300:	e005      	b.n	800530e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	75fb      	strb	r3, [r7, #23]
      break;
 8005306:	e002      	b.n	800530e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8005308:	bf00      	nop
 800530a:	e000      	b.n	800530e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800530c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800530e:	7dfb      	ldrb	r3, [r7, #23]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d10d      	bne.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005314:	4b05      	ldr	r3, [pc, #20]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005316:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005318:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005322:	4902      	ldr	r1, [pc, #8]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005324:	4313      	orrs	r3, r2
 8005326:	658b      	str	r3, [r1, #88]	; 0x58
 8005328:	e004      	b.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800532a:	bf00      	nop
 800532c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005330:	7dfb      	ldrb	r3, [r7, #23]
 8005332:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800533c:	2b00      	cmp	r3, #0
 800533e:	d032      	beq.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005344:	2b30      	cmp	r3, #48	; 0x30
 8005346:	d01c      	beq.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005348:	2b30      	cmp	r3, #48	; 0x30
 800534a:	d817      	bhi.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x344>
 800534c:	2b20      	cmp	r3, #32
 800534e:	d00c      	beq.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005350:	2b20      	cmp	r3, #32
 8005352:	d813      	bhi.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x344>
 8005354:	2b00      	cmp	r3, #0
 8005356:	d016      	beq.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005358:	2b10      	cmp	r3, #16
 800535a:	d10f      	bne.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800535c:	4baf      	ldr	r3, [pc, #700]	; (800561c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800535e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005360:	4aae      	ldr	r2, [pc, #696]	; (800561c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005362:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005366:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005368:	e00e      	b.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	3304      	adds	r3, #4
 800536e:	2102      	movs	r1, #2
 8005370:	4618      	mov	r0, r3
 8005372:	f001 f85f 	bl	8006434 <RCCEx_PLL2_Config>
 8005376:	4603      	mov	r3, r0
 8005378:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800537a:	e005      	b.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800537c:	2301      	movs	r3, #1
 800537e:	75fb      	strb	r3, [r7, #23]
      break;
 8005380:	e002      	b.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8005382:	bf00      	nop
 8005384:	e000      	b.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8005386:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005388:	7dfb      	ldrb	r3, [r7, #23]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d109      	bne.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800538e:	4ba3      	ldr	r3, [pc, #652]	; (800561c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005390:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005392:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800539a:	49a0      	ldr	r1, [pc, #640]	; (800561c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800539c:	4313      	orrs	r3, r2
 800539e:	64cb      	str	r3, [r1, #76]	; 0x4c
 80053a0:	e001      	b.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053a2:	7dfb      	ldrb	r3, [r7, #23]
 80053a4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d047      	beq.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80053ba:	d030      	beq.n	800541e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 80053bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80053c0:	d82a      	bhi.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80053c2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80053c6:	d02c      	beq.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 80053c8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80053cc:	d824      	bhi.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80053ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053d2:	d018      	beq.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 80053d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053d8:	d81e      	bhi.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d003      	beq.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 80053de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053e2:	d007      	beq.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80053e4:	e018      	b.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053e6:	4b8d      	ldr	r3, [pc, #564]	; (800561c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80053e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ea:	4a8c      	ldr	r2, [pc, #560]	; (800561c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80053ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053f0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80053f2:	e017      	b.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	3304      	adds	r3, #4
 80053f8:	2100      	movs	r1, #0
 80053fa:	4618      	mov	r0, r3
 80053fc:	f001 f81a 	bl	8006434 <RCCEx_PLL2_Config>
 8005400:	4603      	mov	r3, r0
 8005402:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005404:	e00e      	b.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	3324      	adds	r3, #36	; 0x24
 800540a:	2100      	movs	r1, #0
 800540c:	4618      	mov	r0, r3
 800540e:	f001 f8c3 	bl	8006598 <RCCEx_PLL3_Config>
 8005412:	4603      	mov	r3, r0
 8005414:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005416:	e005      	b.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005418:	2301      	movs	r3, #1
 800541a:	75fb      	strb	r3, [r7, #23]
      break;
 800541c:	e002      	b.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800541e:	bf00      	nop
 8005420:	e000      	b.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8005422:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005424:	7dfb      	ldrb	r3, [r7, #23]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d109      	bne.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800542a:	4b7c      	ldr	r3, [pc, #496]	; (800561c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800542c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800542e:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005436:	4979      	ldr	r1, [pc, #484]	; (800561c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005438:	4313      	orrs	r3, r2
 800543a:	650b      	str	r3, [r1, #80]	; 0x50
 800543c:	e001      	b.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800543e:	7dfb      	ldrb	r3, [r7, #23]
 8005440:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800544a:	2b00      	cmp	r3, #0
 800544c:	d049      	beq.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005452:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005456:	d02e      	beq.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8005458:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800545c:	d828      	bhi.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800545e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005462:	d02a      	beq.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x482>
 8005464:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005468:	d822      	bhi.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800546a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800546e:	d026      	beq.n	80054be <HAL_RCCEx_PeriphCLKConfig+0x486>
 8005470:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005474:	d81c      	bhi.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005476:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800547a:	d010      	beq.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x466>
 800547c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005480:	d816      	bhi.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005482:	2b00      	cmp	r3, #0
 8005484:	d01d      	beq.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8005486:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800548a:	d111      	bne.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	3304      	adds	r3, #4
 8005490:	2101      	movs	r1, #1
 8005492:	4618      	mov	r0, r3
 8005494:	f000 ffce 	bl	8006434 <RCCEx_PLL2_Config>
 8005498:	4603      	mov	r3, r0
 800549a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800549c:	e012      	b.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	3324      	adds	r3, #36	; 0x24
 80054a2:	2101      	movs	r1, #1
 80054a4:	4618      	mov	r0, r3
 80054a6:	f001 f877 	bl	8006598 <RCCEx_PLL3_Config>
 80054aa:	4603      	mov	r3, r0
 80054ac:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80054ae:	e009      	b.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80054b0:	2301      	movs	r3, #1
 80054b2:	75fb      	strb	r3, [r7, #23]
      break;
 80054b4:	e006      	b.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80054b6:	bf00      	nop
 80054b8:	e004      	b.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80054ba:	bf00      	nop
 80054bc:	e002      	b.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80054be:	bf00      	nop
 80054c0:	e000      	b.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80054c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054c4:	7dfb      	ldrb	r3, [r7, #23]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d109      	bne.n	80054de <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80054ca:	4b54      	ldr	r3, [pc, #336]	; (800561c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80054cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054ce:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054d6:	4951      	ldr	r1, [pc, #324]	; (800561c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80054d8:	4313      	orrs	r3, r2
 80054da:	650b      	str	r3, [r1, #80]	; 0x50
 80054dc:	e001      	b.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054de:	7dfb      	ldrb	r3, [r7, #23]
 80054e0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d04b      	beq.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80054f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80054f8:	d02e      	beq.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x520>
 80054fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80054fe:	d828      	bhi.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005500:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005504:	d02a      	beq.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8005506:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800550a:	d822      	bhi.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800550c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005510:	d026      	beq.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8005512:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005516:	d81c      	bhi.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005518:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800551c:	d010      	beq.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0x508>
 800551e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005522:	d816      	bhi.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005524:	2b00      	cmp	r3, #0
 8005526:	d01d      	beq.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8005528:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800552c:	d111      	bne.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	3304      	adds	r3, #4
 8005532:	2101      	movs	r1, #1
 8005534:	4618      	mov	r0, r3
 8005536:	f000 ff7d 	bl	8006434 <RCCEx_PLL2_Config>
 800553a:	4603      	mov	r3, r0
 800553c:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800553e:	e012      	b.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	3324      	adds	r3, #36	; 0x24
 8005544:	2101      	movs	r1, #1
 8005546:	4618      	mov	r0, r3
 8005548:	f001 f826 	bl	8006598 <RCCEx_PLL3_Config>
 800554c:	4603      	mov	r3, r0
 800554e:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005550:	e009      	b.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8005552:	2301      	movs	r3, #1
 8005554:	75fb      	strb	r3, [r7, #23]
      break;
 8005556:	e006      	b.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005558:	bf00      	nop
 800555a:	e004      	b.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800555c:	bf00      	nop
 800555e:	e002      	b.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005560:	bf00      	nop
 8005562:	e000      	b.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005564:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005566:	7dfb      	ldrb	r3, [r7, #23]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d10a      	bne.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800556c:	4b2b      	ldr	r3, [pc, #172]	; (800561c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800556e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005570:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800557a:	4928      	ldr	r1, [pc, #160]	; (800561c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800557c:	4313      	orrs	r3, r2
 800557e:	658b      	str	r3, [r1, #88]	; 0x58
 8005580:	e001      	b.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005582:	7dfb      	ldrb	r3, [r7, #23]
 8005584:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800558e:	2b00      	cmp	r3, #0
 8005590:	d02f      	beq.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005596:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800559a:	d00e      	beq.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x582>
 800559c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055a0:	d814      	bhi.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x594>
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d015      	beq.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80055a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80055aa:	d10f      	bne.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055ac:	4b1b      	ldr	r3, [pc, #108]	; (800561c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80055ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055b0:	4a1a      	ldr	r2, [pc, #104]	; (800561c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80055b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055b6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80055b8:	e00c      	b.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	3304      	adds	r3, #4
 80055be:	2101      	movs	r1, #1
 80055c0:	4618      	mov	r0, r3
 80055c2:	f000 ff37 	bl	8006434 <RCCEx_PLL2_Config>
 80055c6:	4603      	mov	r3, r0
 80055c8:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80055ca:	e003      	b.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80055cc:	2301      	movs	r3, #1
 80055ce:	75fb      	strb	r3, [r7, #23]
      break;
 80055d0:	e000      	b.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 80055d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80055d4:	7dfb      	ldrb	r3, [r7, #23]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d109      	bne.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80055da:	4b10      	ldr	r3, [pc, #64]	; (800561c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80055dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055de:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055e6:	490d      	ldr	r1, [pc, #52]	; (800561c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80055e8:	4313      	orrs	r3, r2
 80055ea:	650b      	str	r3, [r1, #80]	; 0x50
 80055ec:	e001      	b.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055ee:	7dfb      	ldrb	r3, [r7, #23]
 80055f0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d033      	beq.n	8005666 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005602:	2b03      	cmp	r3, #3
 8005604:	d81c      	bhi.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8005606:	a201      	add	r2, pc, #4	; (adr r2, 800560c <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8005608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800560c:	08005647 	.word	0x08005647
 8005610:	08005621 	.word	0x08005621
 8005614:	0800562f 	.word	0x0800562f
 8005618:	08005647 	.word	0x08005647
 800561c:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005620:	4bb8      	ldr	r3, [pc, #736]	; (8005904 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005624:	4ab7      	ldr	r2, [pc, #732]	; (8005904 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005626:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800562a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800562c:	e00c      	b.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	3304      	adds	r3, #4
 8005632:	2102      	movs	r1, #2
 8005634:	4618      	mov	r0, r3
 8005636:	f000 fefd 	bl	8006434 <RCCEx_PLL2_Config>
 800563a:	4603      	mov	r3, r0
 800563c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800563e:	e003      	b.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005640:	2301      	movs	r3, #1
 8005642:	75fb      	strb	r3, [r7, #23]
      break;
 8005644:	e000      	b.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8005646:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005648:	7dfb      	ldrb	r3, [r7, #23]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d109      	bne.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800564e:	4bad      	ldr	r3, [pc, #692]	; (8005904 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005652:	f023 0203 	bic.w	r2, r3, #3
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800565a:	49aa      	ldr	r1, [pc, #680]	; (8005904 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800565c:	4313      	orrs	r3, r2
 800565e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005660:	e001      	b.n	8005666 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005662:	7dfb      	ldrb	r3, [r7, #23]
 8005664:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800566e:	2b00      	cmp	r3, #0
 8005670:	f000 8086 	beq.w	8005780 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005674:	4ba4      	ldr	r3, [pc, #656]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4aa3      	ldr	r2, [pc, #652]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800567a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800567e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005680:	f7fc f982 	bl	8001988 <HAL_GetTick>
 8005684:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005686:	e009      	b.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005688:	f7fc f97e 	bl	8001988 <HAL_GetTick>
 800568c:	4602      	mov	r2, r0
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	1ad3      	subs	r3, r2, r3
 8005692:	2b64      	cmp	r3, #100	; 0x64
 8005694:	d902      	bls.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8005696:	2303      	movs	r3, #3
 8005698:	75fb      	strb	r3, [r7, #23]
        break;
 800569a:	e005      	b.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800569c:	4b9a      	ldr	r3, [pc, #616]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d0ef      	beq.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80056a8:	7dfb      	ldrb	r3, [r7, #23]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d166      	bne.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80056ae:	4b95      	ldr	r3, [pc, #596]	; (8005904 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80056b0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80056b8:	4053      	eors	r3, r2
 80056ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d013      	beq.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80056c2:	4b90      	ldr	r3, [pc, #576]	; (8005904 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80056c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056ca:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80056cc:	4b8d      	ldr	r3, [pc, #564]	; (8005904 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80056ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056d0:	4a8c      	ldr	r2, [pc, #560]	; (8005904 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80056d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056d6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80056d8:	4b8a      	ldr	r3, [pc, #552]	; (8005904 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80056da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056dc:	4a89      	ldr	r2, [pc, #548]	; (8005904 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80056de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056e2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80056e4:	4a87      	ldr	r2, [pc, #540]	; (8005904 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80056f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056f4:	d115      	bne.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056f6:	f7fc f947 	bl	8001988 <HAL_GetTick>
 80056fa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80056fc:	e00b      	b.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056fe:	f7fc f943 	bl	8001988 <HAL_GetTick>
 8005702:	4602      	mov	r2, r0
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	1ad3      	subs	r3, r2, r3
 8005708:	f241 3288 	movw	r2, #5000	; 0x1388
 800570c:	4293      	cmp	r3, r2
 800570e:	d902      	bls.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8005710:	2303      	movs	r3, #3
 8005712:	75fb      	strb	r3, [r7, #23]
            break;
 8005714:	e005      	b.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005716:	4b7b      	ldr	r3, [pc, #492]	; (8005904 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800571a:	f003 0302 	and.w	r3, r3, #2
 800571e:	2b00      	cmp	r3, #0
 8005720:	d0ed      	beq.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8005722:	7dfb      	ldrb	r3, [r7, #23]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d126      	bne.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800572e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005732:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005736:	d10d      	bne.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8005738:	4b72      	ldr	r3, [pc, #456]	; (8005904 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800573a:	691b      	ldr	r3, [r3, #16]
 800573c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005746:	0919      	lsrs	r1, r3, #4
 8005748:	4b70      	ldr	r3, [pc, #448]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 800574a:	400b      	ands	r3, r1
 800574c:	496d      	ldr	r1, [pc, #436]	; (8005904 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800574e:	4313      	orrs	r3, r2
 8005750:	610b      	str	r3, [r1, #16]
 8005752:	e005      	b.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8005754:	4b6b      	ldr	r3, [pc, #428]	; (8005904 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005756:	691b      	ldr	r3, [r3, #16]
 8005758:	4a6a      	ldr	r2, [pc, #424]	; (8005904 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800575a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800575e:	6113      	str	r3, [r2, #16]
 8005760:	4b68      	ldr	r3, [pc, #416]	; (8005904 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005762:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800576a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800576e:	4965      	ldr	r1, [pc, #404]	; (8005904 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005770:	4313      	orrs	r3, r2
 8005772:	670b      	str	r3, [r1, #112]	; 0x70
 8005774:	e004      	b.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005776:	7dfb      	ldrb	r3, [r7, #23]
 8005778:	75bb      	strb	r3, [r7, #22]
 800577a:	e001      	b.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800577c:	7dfb      	ldrb	r3, [r7, #23]
 800577e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f003 0301 	and.w	r3, r3, #1
 8005788:	2b00      	cmp	r3, #0
 800578a:	d07e      	beq.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005790:	2b28      	cmp	r3, #40	; 0x28
 8005792:	d867      	bhi.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8005794:	a201      	add	r2, pc, #4	; (adr r2, 800579c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8005796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800579a:	bf00      	nop
 800579c:	0800586b 	.word	0x0800586b
 80057a0:	08005865 	.word	0x08005865
 80057a4:	08005865 	.word	0x08005865
 80057a8:	08005865 	.word	0x08005865
 80057ac:	08005865 	.word	0x08005865
 80057b0:	08005865 	.word	0x08005865
 80057b4:	08005865 	.word	0x08005865
 80057b8:	08005865 	.word	0x08005865
 80057bc:	08005841 	.word	0x08005841
 80057c0:	08005865 	.word	0x08005865
 80057c4:	08005865 	.word	0x08005865
 80057c8:	08005865 	.word	0x08005865
 80057cc:	08005865 	.word	0x08005865
 80057d0:	08005865 	.word	0x08005865
 80057d4:	08005865 	.word	0x08005865
 80057d8:	08005865 	.word	0x08005865
 80057dc:	08005853 	.word	0x08005853
 80057e0:	08005865 	.word	0x08005865
 80057e4:	08005865 	.word	0x08005865
 80057e8:	08005865 	.word	0x08005865
 80057ec:	08005865 	.word	0x08005865
 80057f0:	08005865 	.word	0x08005865
 80057f4:	08005865 	.word	0x08005865
 80057f8:	08005865 	.word	0x08005865
 80057fc:	0800586b 	.word	0x0800586b
 8005800:	08005865 	.word	0x08005865
 8005804:	08005865 	.word	0x08005865
 8005808:	08005865 	.word	0x08005865
 800580c:	08005865 	.word	0x08005865
 8005810:	08005865 	.word	0x08005865
 8005814:	08005865 	.word	0x08005865
 8005818:	08005865 	.word	0x08005865
 800581c:	0800586b 	.word	0x0800586b
 8005820:	08005865 	.word	0x08005865
 8005824:	08005865 	.word	0x08005865
 8005828:	08005865 	.word	0x08005865
 800582c:	08005865 	.word	0x08005865
 8005830:	08005865 	.word	0x08005865
 8005834:	08005865 	.word	0x08005865
 8005838:	08005865 	.word	0x08005865
 800583c:	0800586b 	.word	0x0800586b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	3304      	adds	r3, #4
 8005844:	2101      	movs	r1, #1
 8005846:	4618      	mov	r0, r3
 8005848:	f000 fdf4 	bl	8006434 <RCCEx_PLL2_Config>
 800584c:	4603      	mov	r3, r0
 800584e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005850:	e00c      	b.n	800586c <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	3324      	adds	r3, #36	; 0x24
 8005856:	2101      	movs	r1, #1
 8005858:	4618      	mov	r0, r3
 800585a:	f000 fe9d 	bl	8006598 <RCCEx_PLL3_Config>
 800585e:	4603      	mov	r3, r0
 8005860:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005862:	e003      	b.n	800586c <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005864:	2301      	movs	r3, #1
 8005866:	75fb      	strb	r3, [r7, #23]
      break;
 8005868:	e000      	b.n	800586c <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 800586a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800586c:	7dfb      	ldrb	r3, [r7, #23]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d109      	bne.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005872:	4b24      	ldr	r3, [pc, #144]	; (8005904 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005874:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005876:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800587e:	4921      	ldr	r1, [pc, #132]	; (8005904 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005880:	4313      	orrs	r3, r2
 8005882:	654b      	str	r3, [r1, #84]	; 0x54
 8005884:	e001      	b.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005886:	7dfb      	ldrb	r3, [r7, #23]
 8005888:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f003 0302 	and.w	r3, r3, #2
 8005892:	2b00      	cmp	r3, #0
 8005894:	d03e      	beq.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800589a:	2b05      	cmp	r3, #5
 800589c:	d820      	bhi.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 800589e:	a201      	add	r2, pc, #4	; (adr r2, 80058a4 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 80058a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058a4:	080058e7 	.word	0x080058e7
 80058a8:	080058bd 	.word	0x080058bd
 80058ac:	080058cf 	.word	0x080058cf
 80058b0:	080058e7 	.word	0x080058e7
 80058b4:	080058e7 	.word	0x080058e7
 80058b8:	080058e7 	.word	0x080058e7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	3304      	adds	r3, #4
 80058c0:	2101      	movs	r1, #1
 80058c2:	4618      	mov	r0, r3
 80058c4:	f000 fdb6 	bl	8006434 <RCCEx_PLL2_Config>
 80058c8:	4603      	mov	r3, r0
 80058ca:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80058cc:	e00c      	b.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	3324      	adds	r3, #36	; 0x24
 80058d2:	2101      	movs	r1, #1
 80058d4:	4618      	mov	r0, r3
 80058d6:	f000 fe5f 	bl	8006598 <RCCEx_PLL3_Config>
 80058da:	4603      	mov	r3, r0
 80058dc:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80058de:	e003      	b.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80058e0:	2301      	movs	r3, #1
 80058e2:	75fb      	strb	r3, [r7, #23]
      break;
 80058e4:	e000      	b.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 80058e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80058e8:	7dfb      	ldrb	r3, [r7, #23]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d110      	bne.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80058ee:	4b05      	ldr	r3, [pc, #20]	; (8005904 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80058f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058f2:	f023 0207 	bic.w	r2, r3, #7
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058fa:	4902      	ldr	r1, [pc, #8]	; (8005904 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80058fc:	4313      	orrs	r3, r2
 80058fe:	654b      	str	r3, [r1, #84]	; 0x54
 8005900:	e008      	b.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8005902:	bf00      	nop
 8005904:	58024400 	.word	0x58024400
 8005908:	58024800 	.word	0x58024800
 800590c:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005910:	7dfb      	ldrb	r3, [r7, #23]
 8005912:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f003 0304 	and.w	r3, r3, #4
 800591c:	2b00      	cmp	r3, #0
 800591e:	d039      	beq.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005926:	2b05      	cmp	r3, #5
 8005928:	d820      	bhi.n	800596c <HAL_RCCEx_PeriphCLKConfig+0x934>
 800592a:	a201      	add	r2, pc, #4	; (adr r2, 8005930 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 800592c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005930:	08005973 	.word	0x08005973
 8005934:	08005949 	.word	0x08005949
 8005938:	0800595b 	.word	0x0800595b
 800593c:	08005973 	.word	0x08005973
 8005940:	08005973 	.word	0x08005973
 8005944:	08005973 	.word	0x08005973
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	3304      	adds	r3, #4
 800594c:	2101      	movs	r1, #1
 800594e:	4618      	mov	r0, r3
 8005950:	f000 fd70 	bl	8006434 <RCCEx_PLL2_Config>
 8005954:	4603      	mov	r3, r0
 8005956:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005958:	e00c      	b.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	3324      	adds	r3, #36	; 0x24
 800595e:	2101      	movs	r1, #1
 8005960:	4618      	mov	r0, r3
 8005962:	f000 fe19 	bl	8006598 <RCCEx_PLL3_Config>
 8005966:	4603      	mov	r3, r0
 8005968:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800596a:	e003      	b.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800596c:	2301      	movs	r3, #1
 800596e:	75fb      	strb	r3, [r7, #23]
      break;
 8005970:	e000      	b.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8005972:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005974:	7dfb      	ldrb	r3, [r7, #23]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d10a      	bne.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800597a:	4bb7      	ldr	r3, [pc, #732]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800597c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800597e:	f023 0207 	bic.w	r2, r3, #7
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005988:	49b3      	ldr	r1, [pc, #716]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800598a:	4313      	orrs	r3, r2
 800598c:	658b      	str	r3, [r1, #88]	; 0x58
 800598e:	e001      	b.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005990:	7dfb      	ldrb	r3, [r7, #23]
 8005992:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f003 0320 	and.w	r3, r3, #32
 800599c:	2b00      	cmp	r3, #0
 800599e:	d04b      	beq.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80059a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80059aa:	d02e      	beq.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 80059ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80059b0:	d828      	bhi.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80059b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059b6:	d02a      	beq.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80059b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059bc:	d822      	bhi.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80059be:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80059c2:	d026      	beq.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80059c4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80059c8:	d81c      	bhi.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80059ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059ce:	d010      	beq.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 80059d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059d4:	d816      	bhi.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d01d      	beq.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80059da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80059de:	d111      	bne.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	3304      	adds	r3, #4
 80059e4:	2100      	movs	r1, #0
 80059e6:	4618      	mov	r0, r3
 80059e8:	f000 fd24 	bl	8006434 <RCCEx_PLL2_Config>
 80059ec:	4603      	mov	r3, r0
 80059ee:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80059f0:	e012      	b.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	3324      	adds	r3, #36	; 0x24
 80059f6:	2102      	movs	r1, #2
 80059f8:	4618      	mov	r0, r3
 80059fa:	f000 fdcd 	bl	8006598 <RCCEx_PLL3_Config>
 80059fe:	4603      	mov	r3, r0
 8005a00:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005a02:	e009      	b.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a04:	2301      	movs	r3, #1
 8005a06:	75fb      	strb	r3, [r7, #23]
      break;
 8005a08:	e006      	b.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8005a0a:	bf00      	nop
 8005a0c:	e004      	b.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8005a0e:	bf00      	nop
 8005a10:	e002      	b.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8005a12:	bf00      	nop
 8005a14:	e000      	b.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8005a16:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a18:	7dfb      	ldrb	r3, [r7, #23]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d10a      	bne.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005a1e:	4b8e      	ldr	r3, [pc, #568]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005a20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a22:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a2c:	498a      	ldr	r1, [pc, #552]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	654b      	str	r3, [r1, #84]	; 0x54
 8005a32:	e001      	b.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a34:	7dfb      	ldrb	r3, [r7, #23]
 8005a36:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d04b      	beq.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005a4a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005a4e:	d02e      	beq.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8005a50:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005a54:	d828      	bhi.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8005a56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a5a:	d02a      	beq.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8005a5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a60:	d822      	bhi.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8005a62:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005a66:	d026      	beq.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8005a68:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005a6c:	d81c      	bhi.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8005a6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a72:	d010      	beq.n	8005a96 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8005a74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a78:	d816      	bhi.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d01d      	beq.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8005a7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a82:	d111      	bne.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	3304      	adds	r3, #4
 8005a88:	2100      	movs	r1, #0
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	f000 fcd2 	bl	8006434 <RCCEx_PLL2_Config>
 8005a90:	4603      	mov	r3, r0
 8005a92:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005a94:	e012      	b.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	3324      	adds	r3, #36	; 0x24
 8005a9a:	2102      	movs	r1, #2
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f000 fd7b 	bl	8006598 <RCCEx_PLL3_Config>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005aa6:	e009      	b.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	75fb      	strb	r3, [r7, #23]
      break;
 8005aac:	e006      	b.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8005aae:	bf00      	nop
 8005ab0:	e004      	b.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8005ab2:	bf00      	nop
 8005ab4:	e002      	b.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8005ab6:	bf00      	nop
 8005ab8:	e000      	b.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8005aba:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005abc:	7dfb      	ldrb	r3, [r7, #23]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d10a      	bne.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005ac2:	4b65      	ldr	r3, [pc, #404]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005ac4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ac6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005ad0:	4961      	ldr	r1, [pc, #388]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	658b      	str	r3, [r1, #88]	; 0x58
 8005ad6:	e001      	b.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ad8:	7dfb      	ldrb	r3, [r7, #23]
 8005ada:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d04b      	beq.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005aee:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005af2:	d02e      	beq.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8005af4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005af8:	d828      	bhi.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8005afa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005afe:	d02a      	beq.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8005b00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b04:	d822      	bhi.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8005b06:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005b0a:	d026      	beq.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8005b0c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005b10:	d81c      	bhi.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8005b12:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b16:	d010      	beq.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8005b18:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b1c:	d816      	bhi.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d01d      	beq.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8005b22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b26:	d111      	bne.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	3304      	adds	r3, #4
 8005b2c:	2100      	movs	r1, #0
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f000 fc80 	bl	8006434 <RCCEx_PLL2_Config>
 8005b34:	4603      	mov	r3, r0
 8005b36:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005b38:	e012      	b.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	3324      	adds	r3, #36	; 0x24
 8005b3e:	2102      	movs	r1, #2
 8005b40:	4618      	mov	r0, r3
 8005b42:	f000 fd29 	bl	8006598 <RCCEx_PLL3_Config>
 8005b46:	4603      	mov	r3, r0
 8005b48:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005b4a:	e009      	b.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	75fb      	strb	r3, [r7, #23]
      break;
 8005b50:	e006      	b.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8005b52:	bf00      	nop
 8005b54:	e004      	b.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8005b56:	bf00      	nop
 8005b58:	e002      	b.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8005b5a:	bf00      	nop
 8005b5c:	e000      	b.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8005b5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b60:	7dfb      	ldrb	r3, [r7, #23]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d10a      	bne.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005b66:	4b3c      	ldr	r3, [pc, #240]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b6a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005b74:	4938      	ldr	r1, [pc, #224]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005b76:	4313      	orrs	r3, r2
 8005b78:	658b      	str	r3, [r1, #88]	; 0x58
 8005b7a:	e001      	b.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b7c:	7dfb      	ldrb	r3, [r7, #23]
 8005b7e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f003 0308 	and.w	r3, r3, #8
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d01a      	beq.n	8005bc2 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b96:	d10a      	bne.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	3324      	adds	r3, #36	; 0x24
 8005b9c:	2102      	movs	r1, #2
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f000 fcfa 	bl	8006598 <RCCEx_PLL3_Config>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d001      	beq.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8005baa:	2301      	movs	r3, #1
 8005bac:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005bae:	4b2a      	ldr	r3, [pc, #168]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005bb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bb2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005bbc:	4926      	ldr	r1, [pc, #152]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f003 0310 	and.w	r3, r3, #16
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d01a      	beq.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005bd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bd8:	d10a      	bne.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	3324      	adds	r3, #36	; 0x24
 8005bde:	2102      	movs	r1, #2
 8005be0:	4618      	mov	r0, r3
 8005be2:	f000 fcd9 	bl	8006598 <RCCEx_PLL3_Config>
 8005be6:	4603      	mov	r3, r0
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d001      	beq.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8005bec:	2301      	movs	r3, #1
 8005bee:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005bf0:	4b19      	ldr	r3, [pc, #100]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005bf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bf4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005bfe:	4916      	ldr	r1, [pc, #88]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005c00:	4313      	orrs	r3, r2
 8005c02:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d036      	beq.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005c16:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c1a:	d01f      	beq.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8005c1c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c20:	d817      	bhi.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d003      	beq.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8005c26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c2a:	d009      	beq.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8005c2c:	e011      	b.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	3304      	adds	r3, #4
 8005c32:	2100      	movs	r1, #0
 8005c34:	4618      	mov	r0, r3
 8005c36:	f000 fbfd 	bl	8006434 <RCCEx_PLL2_Config>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005c3e:	e00e      	b.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	3324      	adds	r3, #36	; 0x24
 8005c44:	2102      	movs	r1, #2
 8005c46:	4618      	mov	r0, r3
 8005c48:	f000 fca6 	bl	8006598 <RCCEx_PLL3_Config>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005c50:	e005      	b.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005c52:	2301      	movs	r3, #1
 8005c54:	75fb      	strb	r3, [r7, #23]
      break;
 8005c56:	e002      	b.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8005c58:	58024400 	.word	0x58024400
      break;
 8005c5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c5e:	7dfb      	ldrb	r3, [r7, #23]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d10a      	bne.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005c64:	4b93      	ldr	r3, [pc, #588]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005c66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c68:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005c72:	4990      	ldr	r1, [pc, #576]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005c74:	4313      	orrs	r3, r2
 8005c76:	658b      	str	r3, [r1, #88]	; 0x58
 8005c78:	e001      	b.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c7a:	7dfb      	ldrb	r3, [r7, #23]
 8005c7c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d033      	beq.n	8005cf2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c90:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005c94:	d01c      	beq.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8005c96:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005c9a:	d816      	bhi.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8005c9c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ca0:	d003      	beq.n	8005caa <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8005ca2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005ca6:	d007      	beq.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8005ca8:	e00f      	b.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005caa:	4b82      	ldr	r3, [pc, #520]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cae:	4a81      	ldr	r2, [pc, #516]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005cb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005cb4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8005cb6:	e00c      	b.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	3324      	adds	r3, #36	; 0x24
 8005cbc:	2101      	movs	r1, #1
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f000 fc6a 	bl	8006598 <RCCEx_PLL3_Config>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8005cc8:	e003      	b.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	75fb      	strb	r3, [r7, #23]
      break;
 8005cce:	e000      	b.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8005cd0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005cd2:	7dfb      	ldrb	r3, [r7, #23]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d10a      	bne.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005cd8:	4b76      	ldr	r3, [pc, #472]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005cda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cdc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ce6:	4973      	ldr	r1, [pc, #460]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	654b      	str	r3, [r1, #84]	; 0x54
 8005cec:	e001      	b.n	8005cf2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cee:	7dfb      	ldrb	r3, [r7, #23]
 8005cf0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d029      	beq.n	8005d52 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d003      	beq.n	8005d0e <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8005d06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d0a:	d007      	beq.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8005d0c:	e00f      	b.n	8005d2e <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d0e:	4b69      	ldr	r3, [pc, #420]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d12:	4a68      	ldr	r2, [pc, #416]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005d14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d18:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005d1a:	e00b      	b.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	3304      	adds	r3, #4
 8005d20:	2102      	movs	r1, #2
 8005d22:	4618      	mov	r0, r3
 8005d24:	f000 fb86 	bl	8006434 <RCCEx_PLL2_Config>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005d2c:	e002      	b.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	75fb      	strb	r3, [r7, #23]
      break;
 8005d32:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d34:	7dfb      	ldrb	r3, [r7, #23]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d109      	bne.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005d3a:	4b5e      	ldr	r3, [pc, #376]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005d3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d3e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d46:	495b      	ldr	r1, [pc, #364]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005d4c:	e001      	b.n	8005d52 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d4e:	7dfb      	ldrb	r3, [r7, #23]
 8005d50:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d00a      	beq.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	3324      	adds	r3, #36	; 0x24
 8005d62:	2102      	movs	r1, #2
 8005d64:	4618      	mov	r0, r3
 8005d66:	f000 fc17 	bl	8006598 <RCCEx_PLL3_Config>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d001      	beq.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8005d70:	2301      	movs	r3, #1
 8005d72:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d030      	beq.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d84:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d88:	d017      	beq.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8005d8a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d8e:	d811      	bhi.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8005d90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d94:	d013      	beq.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8005d96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d9a:	d80b      	bhi.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d010      	beq.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8005da0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005da4:	d106      	bne.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005da6:	4b43      	ldr	r3, [pc, #268]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005daa:	4a42      	ldr	r2, [pc, #264]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005dac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005db0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8005db2:	e007      	b.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005db4:	2301      	movs	r3, #1
 8005db6:	75fb      	strb	r3, [r7, #23]
      break;
 8005db8:	e004      	b.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8005dba:	bf00      	nop
 8005dbc:	e002      	b.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8005dbe:	bf00      	nop
 8005dc0:	e000      	b.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8005dc2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005dc4:	7dfb      	ldrb	r3, [r7, #23]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d109      	bne.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005dca:	4b3a      	ldr	r3, [pc, #232]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005dcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dce:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005dd6:	4937      	ldr	r1, [pc, #220]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	654b      	str	r3, [r1, #84]	; 0x54
 8005ddc:	e001      	b.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dde:	7dfb      	ldrb	r3, [r7, #23]
 8005de0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d008      	beq.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005dee:	4b31      	ldr	r3, [pc, #196]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005df0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005df2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dfa:	492e      	ldr	r1, [pc, #184]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d009      	beq.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005e0c:	4b29      	ldr	r3, [pc, #164]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005e0e:	691b      	ldr	r3, [r3, #16]
 8005e10:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005e1a:	4926      	ldr	r1, [pc, #152]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d008      	beq.n	8005e3e <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005e2c:	4b21      	ldr	r3, [pc, #132]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005e2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e30:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e38:	491e      	ldr	r1, [pc, #120]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d00d      	beq.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005e4a:	4b1a      	ldr	r3, [pc, #104]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005e4c:	691b      	ldr	r3, [r3, #16]
 8005e4e:	4a19      	ldr	r2, [pc, #100]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005e50:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005e54:	6113      	str	r3, [r2, #16]
 8005e56:	4b17      	ldr	r3, [pc, #92]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005e58:	691a      	ldr	r2, [r3, #16]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005e60:	4914      	ldr	r1, [pc, #80]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005e62:	4313      	orrs	r3, r2
 8005e64:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	da08      	bge.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005e6e:	4b11      	ldr	r3, [pc, #68]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e72:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e7a:	490e      	ldr	r1, [pc, #56]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d009      	beq.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005e8c:	4b09      	ldr	r3, [pc, #36]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005e8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e90:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e9a:	4906      	ldr	r1, [pc, #24]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8005ea0:	7dbb      	ldrb	r3, [r7, #22]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d101      	bne.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	e000      	b.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8005eaa:	2301      	movs	r3, #1
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	3718      	adds	r7, #24
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd80      	pop	{r7, pc}
 8005eb4:	58024400 	.word	0x58024400

08005eb8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005ebc:	f7ff f860 	bl	8004f80 <HAL_RCC_GetHCLKFreq>
 8005ec0:	4602      	mov	r2, r0
 8005ec2:	4b06      	ldr	r3, [pc, #24]	; (8005edc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005ec4:	6a1b      	ldr	r3, [r3, #32]
 8005ec6:	091b      	lsrs	r3, r3, #4
 8005ec8:	f003 0307 	and.w	r3, r3, #7
 8005ecc:	4904      	ldr	r1, [pc, #16]	; (8005ee0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005ece:	5ccb      	ldrb	r3, [r1, r3]
 8005ed0:	f003 031f 	and.w	r3, r3, #31
 8005ed4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	bd80      	pop	{r7, pc}
 8005edc:	58024400 	.word	0x58024400
 8005ee0:	08016c14 	.word	0x08016c14

08005ee4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b089      	sub	sp, #36	; 0x24
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005eec:	4ba1      	ldr	r3, [pc, #644]	; (8006174 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ef0:	f003 0303 	and.w	r3, r3, #3
 8005ef4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8005ef6:	4b9f      	ldr	r3, [pc, #636]	; (8006174 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005efa:	0b1b      	lsrs	r3, r3, #12
 8005efc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f00:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005f02:	4b9c      	ldr	r3, [pc, #624]	; (8006174 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f06:	091b      	lsrs	r3, r3, #4
 8005f08:	f003 0301 	and.w	r3, r3, #1
 8005f0c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8005f0e:	4b99      	ldr	r3, [pc, #612]	; (8006174 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f12:	08db      	lsrs	r3, r3, #3
 8005f14:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005f18:	693a      	ldr	r2, [r7, #16]
 8005f1a:	fb02 f303 	mul.w	r3, r2, r3
 8005f1e:	ee07 3a90 	vmov	s15, r3
 8005f22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f26:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005f2a:	697b      	ldr	r3, [r7, #20]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	f000 8111 	beq.w	8006154 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005f32:	69bb      	ldr	r3, [r7, #24]
 8005f34:	2b02      	cmp	r3, #2
 8005f36:	f000 8083 	beq.w	8006040 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005f3a:	69bb      	ldr	r3, [r7, #24]
 8005f3c:	2b02      	cmp	r3, #2
 8005f3e:	f200 80a1 	bhi.w	8006084 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005f42:	69bb      	ldr	r3, [r7, #24]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d003      	beq.n	8005f50 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005f48:	69bb      	ldr	r3, [r7, #24]
 8005f4a:	2b01      	cmp	r3, #1
 8005f4c:	d056      	beq.n	8005ffc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005f4e:	e099      	b.n	8006084 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f50:	4b88      	ldr	r3, [pc, #544]	; (8006174 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f003 0320 	and.w	r3, r3, #32
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d02d      	beq.n	8005fb8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005f5c:	4b85      	ldr	r3, [pc, #532]	; (8006174 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	08db      	lsrs	r3, r3, #3
 8005f62:	f003 0303 	and.w	r3, r3, #3
 8005f66:	4a84      	ldr	r2, [pc, #528]	; (8006178 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005f68:	fa22 f303 	lsr.w	r3, r2, r3
 8005f6c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	ee07 3a90 	vmov	s15, r3
 8005f74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	ee07 3a90 	vmov	s15, r3
 8005f7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f86:	4b7b      	ldr	r3, [pc, #492]	; (8006174 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f8e:	ee07 3a90 	vmov	s15, r3
 8005f92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f96:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f9a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800617c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005f9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fa6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005faa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fb2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005fb6:	e087      	b.n	80060c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	ee07 3a90 	vmov	s15, r3
 8005fbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fc2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006180 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005fc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fca:	4b6a      	ldr	r3, [pc, #424]	; (8006174 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fd2:	ee07 3a90 	vmov	s15, r3
 8005fd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fda:	ed97 6a03 	vldr	s12, [r7, #12]
 8005fde:	eddf 5a67 	vldr	s11, [pc, #412]	; 800617c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005fe2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fe6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005fee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ff2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ff6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005ffa:	e065      	b.n	80060c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	ee07 3a90 	vmov	s15, r3
 8006002:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006006:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006184 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800600a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800600e:	4b59      	ldr	r3, [pc, #356]	; (8006174 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006012:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006016:	ee07 3a90 	vmov	s15, r3
 800601a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800601e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006022:	eddf 5a56 	vldr	s11, [pc, #344]	; 800617c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006026:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800602a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800602e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006032:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006036:	ee67 7a27 	vmul.f32	s15, s14, s15
 800603a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800603e:	e043      	b.n	80060c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006040:	697b      	ldr	r3, [r7, #20]
 8006042:	ee07 3a90 	vmov	s15, r3
 8006046:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800604a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006188 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800604e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006052:	4b48      	ldr	r3, [pc, #288]	; (8006174 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006056:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800605a:	ee07 3a90 	vmov	s15, r3
 800605e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006062:	ed97 6a03 	vldr	s12, [r7, #12]
 8006066:	eddf 5a45 	vldr	s11, [pc, #276]	; 800617c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800606a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800606e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006072:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006076:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800607a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800607e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006082:	e021      	b.n	80060c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	ee07 3a90 	vmov	s15, r3
 800608a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800608e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006184 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006092:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006096:	4b37      	ldr	r3, [pc, #220]	; (8006174 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800609a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800609e:	ee07 3a90 	vmov	s15, r3
 80060a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80060aa:	eddf 5a34 	vldr	s11, [pc, #208]	; 800617c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80060ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060c2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80060c6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80060c8:	4b2a      	ldr	r3, [pc, #168]	; (8006174 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80060ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060cc:	0a5b      	lsrs	r3, r3, #9
 80060ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060d2:	ee07 3a90 	vmov	s15, r3
 80060d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80060de:	ee37 7a87 	vadd.f32	s14, s15, s14
 80060e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80060e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060ee:	ee17 2a90 	vmov	r2, s15
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80060f6:	4b1f      	ldr	r3, [pc, #124]	; (8006174 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80060f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060fa:	0c1b      	lsrs	r3, r3, #16
 80060fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006100:	ee07 3a90 	vmov	s15, r3
 8006104:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006108:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800610c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006110:	edd7 6a07 	vldr	s13, [r7, #28]
 8006114:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006118:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800611c:	ee17 2a90 	vmov	r2, s15
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8006124:	4b13      	ldr	r3, [pc, #76]	; (8006174 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006128:	0e1b      	lsrs	r3, r3, #24
 800612a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800612e:	ee07 3a90 	vmov	s15, r3
 8006132:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006136:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800613a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800613e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006142:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006146:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800614a:	ee17 2a90 	vmov	r2, s15
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006152:	e008      	b.n	8006166 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2200      	movs	r2, #0
 8006158:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2200      	movs	r2, #0
 800615e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2200      	movs	r2, #0
 8006164:	609a      	str	r2, [r3, #8]
}
 8006166:	bf00      	nop
 8006168:	3724      	adds	r7, #36	; 0x24
 800616a:	46bd      	mov	sp, r7
 800616c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006170:	4770      	bx	lr
 8006172:	bf00      	nop
 8006174:	58024400 	.word	0x58024400
 8006178:	03d09000 	.word	0x03d09000
 800617c:	46000000 	.word	0x46000000
 8006180:	4c742400 	.word	0x4c742400
 8006184:	4a742400 	.word	0x4a742400
 8006188:	4af42400 	.word	0x4af42400

0800618c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800618c:	b480      	push	{r7}
 800618e:	b089      	sub	sp, #36	; 0x24
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006194:	4ba1      	ldr	r3, [pc, #644]	; (800641c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006198:	f003 0303 	and.w	r3, r3, #3
 800619c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800619e:	4b9f      	ldr	r3, [pc, #636]	; (800641c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80061a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061a2:	0d1b      	lsrs	r3, r3, #20
 80061a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80061a8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80061aa:	4b9c      	ldr	r3, [pc, #624]	; (800641c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80061ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ae:	0a1b      	lsrs	r3, r3, #8
 80061b0:	f003 0301 	and.w	r3, r3, #1
 80061b4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80061b6:	4b99      	ldr	r3, [pc, #612]	; (800641c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80061b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061ba:	08db      	lsrs	r3, r3, #3
 80061bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80061c0:	693a      	ldr	r2, [r7, #16]
 80061c2:	fb02 f303 	mul.w	r3, r2, r3
 80061c6:	ee07 3a90 	vmov	s15, r3
 80061ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061ce:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	f000 8111 	beq.w	80063fc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80061da:	69bb      	ldr	r3, [r7, #24]
 80061dc:	2b02      	cmp	r3, #2
 80061de:	f000 8083 	beq.w	80062e8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80061e2:	69bb      	ldr	r3, [r7, #24]
 80061e4:	2b02      	cmp	r3, #2
 80061e6:	f200 80a1 	bhi.w	800632c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80061ea:	69bb      	ldr	r3, [r7, #24]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d003      	beq.n	80061f8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80061f0:	69bb      	ldr	r3, [r7, #24]
 80061f2:	2b01      	cmp	r3, #1
 80061f4:	d056      	beq.n	80062a4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80061f6:	e099      	b.n	800632c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80061f8:	4b88      	ldr	r3, [pc, #544]	; (800641c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f003 0320 	and.w	r3, r3, #32
 8006200:	2b00      	cmp	r3, #0
 8006202:	d02d      	beq.n	8006260 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006204:	4b85      	ldr	r3, [pc, #532]	; (800641c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	08db      	lsrs	r3, r3, #3
 800620a:	f003 0303 	and.w	r3, r3, #3
 800620e:	4a84      	ldr	r2, [pc, #528]	; (8006420 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006210:	fa22 f303 	lsr.w	r3, r2, r3
 8006214:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	ee07 3a90 	vmov	s15, r3
 800621c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	ee07 3a90 	vmov	s15, r3
 8006226:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800622a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800622e:	4b7b      	ldr	r3, [pc, #492]	; (800641c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006232:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006236:	ee07 3a90 	vmov	s15, r3
 800623a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800623e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006242:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006424 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006246:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800624a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800624e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006252:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006256:	ee67 7a27 	vmul.f32	s15, s14, s15
 800625a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800625e:	e087      	b.n	8006370 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	ee07 3a90 	vmov	s15, r3
 8006266:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800626a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006428 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800626e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006272:	4b6a      	ldr	r3, [pc, #424]	; (800641c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006276:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800627a:	ee07 3a90 	vmov	s15, r3
 800627e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006282:	ed97 6a03 	vldr	s12, [r7, #12]
 8006286:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006424 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800628a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800628e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006292:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006296:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800629a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800629e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80062a2:	e065      	b.n	8006370 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	ee07 3a90 	vmov	s15, r3
 80062aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062ae:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800642c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80062b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062b6:	4b59      	ldr	r3, [pc, #356]	; (800641c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80062b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062be:	ee07 3a90 	vmov	s15, r3
 80062c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80062ca:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006424 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80062ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80062da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062e2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80062e6:	e043      	b.n	8006370 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	ee07 3a90 	vmov	s15, r3
 80062ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062f2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006430 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80062f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062fa:	4b48      	ldr	r3, [pc, #288]	; (800641c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80062fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006302:	ee07 3a90 	vmov	s15, r3
 8006306:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800630a:	ed97 6a03 	vldr	s12, [r7, #12]
 800630e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006424 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006312:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006316:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800631a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800631e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006322:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006326:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800632a:	e021      	b.n	8006370 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800632c:	697b      	ldr	r3, [r7, #20]
 800632e:	ee07 3a90 	vmov	s15, r3
 8006332:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006336:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800642c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800633a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800633e:	4b37      	ldr	r3, [pc, #220]	; (800641c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006342:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006346:	ee07 3a90 	vmov	s15, r3
 800634a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800634e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006352:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006424 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006356:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800635a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800635e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006362:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006366:	ee67 7a27 	vmul.f32	s15, s14, s15
 800636a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800636e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8006370:	4b2a      	ldr	r3, [pc, #168]	; (800641c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006374:	0a5b      	lsrs	r3, r3, #9
 8006376:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800637a:	ee07 3a90 	vmov	s15, r3
 800637e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006382:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006386:	ee37 7a87 	vadd.f32	s14, s15, s14
 800638a:	edd7 6a07 	vldr	s13, [r7, #28]
 800638e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006392:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006396:	ee17 2a90 	vmov	r2, s15
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800639e:	4b1f      	ldr	r3, [pc, #124]	; (800641c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80063a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a2:	0c1b      	lsrs	r3, r3, #16
 80063a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063a8:	ee07 3a90 	vmov	s15, r3
 80063ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80063b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80063b8:	edd7 6a07 	vldr	s13, [r7, #28]
 80063bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80063c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80063c4:	ee17 2a90 	vmov	r2, s15
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80063cc:	4b13      	ldr	r3, [pc, #76]	; (800641c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80063ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063d0:	0e1b      	lsrs	r3, r3, #24
 80063d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063d6:	ee07 3a90 	vmov	s15, r3
 80063da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80063e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80063e6:	edd7 6a07 	vldr	s13, [r7, #28]
 80063ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80063ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80063f2:	ee17 2a90 	vmov	r2, s15
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80063fa:	e008      	b.n	800640e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2200      	movs	r2, #0
 8006400:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2200      	movs	r2, #0
 8006406:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2200      	movs	r2, #0
 800640c:	609a      	str	r2, [r3, #8]
}
 800640e:	bf00      	nop
 8006410:	3724      	adds	r7, #36	; 0x24
 8006412:	46bd      	mov	sp, r7
 8006414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006418:	4770      	bx	lr
 800641a:	bf00      	nop
 800641c:	58024400 	.word	0x58024400
 8006420:	03d09000 	.word	0x03d09000
 8006424:	46000000 	.word	0x46000000
 8006428:	4c742400 	.word	0x4c742400
 800642c:	4a742400 	.word	0x4a742400
 8006430:	4af42400 	.word	0x4af42400

08006434 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b084      	sub	sp, #16
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
 800643c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800643e:	2300      	movs	r3, #0
 8006440:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006442:	4b53      	ldr	r3, [pc, #332]	; (8006590 <RCCEx_PLL2_Config+0x15c>)
 8006444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006446:	f003 0303 	and.w	r3, r3, #3
 800644a:	2b03      	cmp	r3, #3
 800644c:	d101      	bne.n	8006452 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800644e:	2301      	movs	r3, #1
 8006450:	e099      	b.n	8006586 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006452:	4b4f      	ldr	r3, [pc, #316]	; (8006590 <RCCEx_PLL2_Config+0x15c>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a4e      	ldr	r2, [pc, #312]	; (8006590 <RCCEx_PLL2_Config+0x15c>)
 8006458:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800645c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800645e:	f7fb fa93 	bl	8001988 <HAL_GetTick>
 8006462:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006464:	e008      	b.n	8006478 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006466:	f7fb fa8f 	bl	8001988 <HAL_GetTick>
 800646a:	4602      	mov	r2, r0
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	1ad3      	subs	r3, r2, r3
 8006470:	2b02      	cmp	r3, #2
 8006472:	d901      	bls.n	8006478 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006474:	2303      	movs	r3, #3
 8006476:	e086      	b.n	8006586 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006478:	4b45      	ldr	r3, [pc, #276]	; (8006590 <RCCEx_PLL2_Config+0x15c>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006480:	2b00      	cmp	r3, #0
 8006482:	d1f0      	bne.n	8006466 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006484:	4b42      	ldr	r3, [pc, #264]	; (8006590 <RCCEx_PLL2_Config+0x15c>)
 8006486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006488:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	031b      	lsls	r3, r3, #12
 8006492:	493f      	ldr	r1, [pc, #252]	; (8006590 <RCCEx_PLL2_Config+0x15c>)
 8006494:	4313      	orrs	r3, r2
 8006496:	628b      	str	r3, [r1, #40]	; 0x28
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	685b      	ldr	r3, [r3, #4]
 800649c:	3b01      	subs	r3, #1
 800649e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	689b      	ldr	r3, [r3, #8]
 80064a6:	3b01      	subs	r3, #1
 80064a8:	025b      	lsls	r3, r3, #9
 80064aa:	b29b      	uxth	r3, r3
 80064ac:	431a      	orrs	r2, r3
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	68db      	ldr	r3, [r3, #12]
 80064b2:	3b01      	subs	r3, #1
 80064b4:	041b      	lsls	r3, r3, #16
 80064b6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80064ba:	431a      	orrs	r2, r3
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	691b      	ldr	r3, [r3, #16]
 80064c0:	3b01      	subs	r3, #1
 80064c2:	061b      	lsls	r3, r3, #24
 80064c4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80064c8:	4931      	ldr	r1, [pc, #196]	; (8006590 <RCCEx_PLL2_Config+0x15c>)
 80064ca:	4313      	orrs	r3, r2
 80064cc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80064ce:	4b30      	ldr	r3, [pc, #192]	; (8006590 <RCCEx_PLL2_Config+0x15c>)
 80064d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064d2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	695b      	ldr	r3, [r3, #20]
 80064da:	492d      	ldr	r1, [pc, #180]	; (8006590 <RCCEx_PLL2_Config+0x15c>)
 80064dc:	4313      	orrs	r3, r2
 80064de:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80064e0:	4b2b      	ldr	r3, [pc, #172]	; (8006590 <RCCEx_PLL2_Config+0x15c>)
 80064e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064e4:	f023 0220 	bic.w	r2, r3, #32
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	699b      	ldr	r3, [r3, #24]
 80064ec:	4928      	ldr	r1, [pc, #160]	; (8006590 <RCCEx_PLL2_Config+0x15c>)
 80064ee:	4313      	orrs	r3, r2
 80064f0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80064f2:	4b27      	ldr	r3, [pc, #156]	; (8006590 <RCCEx_PLL2_Config+0x15c>)
 80064f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064f6:	4a26      	ldr	r2, [pc, #152]	; (8006590 <RCCEx_PLL2_Config+0x15c>)
 80064f8:	f023 0310 	bic.w	r3, r3, #16
 80064fc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80064fe:	4b24      	ldr	r3, [pc, #144]	; (8006590 <RCCEx_PLL2_Config+0x15c>)
 8006500:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006502:	4b24      	ldr	r3, [pc, #144]	; (8006594 <RCCEx_PLL2_Config+0x160>)
 8006504:	4013      	ands	r3, r2
 8006506:	687a      	ldr	r2, [r7, #4]
 8006508:	69d2      	ldr	r2, [r2, #28]
 800650a:	00d2      	lsls	r2, r2, #3
 800650c:	4920      	ldr	r1, [pc, #128]	; (8006590 <RCCEx_PLL2_Config+0x15c>)
 800650e:	4313      	orrs	r3, r2
 8006510:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006512:	4b1f      	ldr	r3, [pc, #124]	; (8006590 <RCCEx_PLL2_Config+0x15c>)
 8006514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006516:	4a1e      	ldr	r2, [pc, #120]	; (8006590 <RCCEx_PLL2_Config+0x15c>)
 8006518:	f043 0310 	orr.w	r3, r3, #16
 800651c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d106      	bne.n	8006532 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006524:	4b1a      	ldr	r3, [pc, #104]	; (8006590 <RCCEx_PLL2_Config+0x15c>)
 8006526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006528:	4a19      	ldr	r2, [pc, #100]	; (8006590 <RCCEx_PLL2_Config+0x15c>)
 800652a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800652e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006530:	e00f      	b.n	8006552 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	2b01      	cmp	r3, #1
 8006536:	d106      	bne.n	8006546 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006538:	4b15      	ldr	r3, [pc, #84]	; (8006590 <RCCEx_PLL2_Config+0x15c>)
 800653a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800653c:	4a14      	ldr	r2, [pc, #80]	; (8006590 <RCCEx_PLL2_Config+0x15c>)
 800653e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006542:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006544:	e005      	b.n	8006552 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006546:	4b12      	ldr	r3, [pc, #72]	; (8006590 <RCCEx_PLL2_Config+0x15c>)
 8006548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800654a:	4a11      	ldr	r2, [pc, #68]	; (8006590 <RCCEx_PLL2_Config+0x15c>)
 800654c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006550:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006552:	4b0f      	ldr	r3, [pc, #60]	; (8006590 <RCCEx_PLL2_Config+0x15c>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4a0e      	ldr	r2, [pc, #56]	; (8006590 <RCCEx_PLL2_Config+0x15c>)
 8006558:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800655c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800655e:	f7fb fa13 	bl	8001988 <HAL_GetTick>
 8006562:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006564:	e008      	b.n	8006578 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006566:	f7fb fa0f 	bl	8001988 <HAL_GetTick>
 800656a:	4602      	mov	r2, r0
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	1ad3      	subs	r3, r2, r3
 8006570:	2b02      	cmp	r3, #2
 8006572:	d901      	bls.n	8006578 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006574:	2303      	movs	r3, #3
 8006576:	e006      	b.n	8006586 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006578:	4b05      	ldr	r3, [pc, #20]	; (8006590 <RCCEx_PLL2_Config+0x15c>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006580:	2b00      	cmp	r3, #0
 8006582:	d0f0      	beq.n	8006566 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006584:	7bfb      	ldrb	r3, [r7, #15]
}
 8006586:	4618      	mov	r0, r3
 8006588:	3710      	adds	r7, #16
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}
 800658e:	bf00      	nop
 8006590:	58024400 	.word	0x58024400
 8006594:	ffff0007 	.word	0xffff0007

08006598 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b084      	sub	sp, #16
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
 80065a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80065a2:	2300      	movs	r3, #0
 80065a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80065a6:	4b53      	ldr	r3, [pc, #332]	; (80066f4 <RCCEx_PLL3_Config+0x15c>)
 80065a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065aa:	f003 0303 	and.w	r3, r3, #3
 80065ae:	2b03      	cmp	r3, #3
 80065b0:	d101      	bne.n	80065b6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80065b2:	2301      	movs	r3, #1
 80065b4:	e099      	b.n	80066ea <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80065b6:	4b4f      	ldr	r3, [pc, #316]	; (80066f4 <RCCEx_PLL3_Config+0x15c>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4a4e      	ldr	r2, [pc, #312]	; (80066f4 <RCCEx_PLL3_Config+0x15c>)
 80065bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80065c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80065c2:	f7fb f9e1 	bl	8001988 <HAL_GetTick>
 80065c6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80065c8:	e008      	b.n	80065dc <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80065ca:	f7fb f9dd 	bl	8001988 <HAL_GetTick>
 80065ce:	4602      	mov	r2, r0
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	1ad3      	subs	r3, r2, r3
 80065d4:	2b02      	cmp	r3, #2
 80065d6:	d901      	bls.n	80065dc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80065d8:	2303      	movs	r3, #3
 80065da:	e086      	b.n	80066ea <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80065dc:	4b45      	ldr	r3, [pc, #276]	; (80066f4 <RCCEx_PLL3_Config+0x15c>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d1f0      	bne.n	80065ca <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80065e8:	4b42      	ldr	r3, [pc, #264]	; (80066f4 <RCCEx_PLL3_Config+0x15c>)
 80065ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065ec:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	051b      	lsls	r3, r3, #20
 80065f6:	493f      	ldr	r1, [pc, #252]	; (80066f4 <RCCEx_PLL3_Config+0x15c>)
 80065f8:	4313      	orrs	r3, r2
 80065fa:	628b      	str	r3, [r1, #40]	; 0x28
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	685b      	ldr	r3, [r3, #4]
 8006600:	3b01      	subs	r3, #1
 8006602:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	689b      	ldr	r3, [r3, #8]
 800660a:	3b01      	subs	r3, #1
 800660c:	025b      	lsls	r3, r3, #9
 800660e:	b29b      	uxth	r3, r3
 8006610:	431a      	orrs	r2, r3
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	68db      	ldr	r3, [r3, #12]
 8006616:	3b01      	subs	r3, #1
 8006618:	041b      	lsls	r3, r3, #16
 800661a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800661e:	431a      	orrs	r2, r3
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	691b      	ldr	r3, [r3, #16]
 8006624:	3b01      	subs	r3, #1
 8006626:	061b      	lsls	r3, r3, #24
 8006628:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800662c:	4931      	ldr	r1, [pc, #196]	; (80066f4 <RCCEx_PLL3_Config+0x15c>)
 800662e:	4313      	orrs	r3, r2
 8006630:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006632:	4b30      	ldr	r3, [pc, #192]	; (80066f4 <RCCEx_PLL3_Config+0x15c>)
 8006634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006636:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	695b      	ldr	r3, [r3, #20]
 800663e:	492d      	ldr	r1, [pc, #180]	; (80066f4 <RCCEx_PLL3_Config+0x15c>)
 8006640:	4313      	orrs	r3, r2
 8006642:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006644:	4b2b      	ldr	r3, [pc, #172]	; (80066f4 <RCCEx_PLL3_Config+0x15c>)
 8006646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006648:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	699b      	ldr	r3, [r3, #24]
 8006650:	4928      	ldr	r1, [pc, #160]	; (80066f4 <RCCEx_PLL3_Config+0x15c>)
 8006652:	4313      	orrs	r3, r2
 8006654:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006656:	4b27      	ldr	r3, [pc, #156]	; (80066f4 <RCCEx_PLL3_Config+0x15c>)
 8006658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800665a:	4a26      	ldr	r2, [pc, #152]	; (80066f4 <RCCEx_PLL3_Config+0x15c>)
 800665c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006660:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006662:	4b24      	ldr	r3, [pc, #144]	; (80066f4 <RCCEx_PLL3_Config+0x15c>)
 8006664:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006666:	4b24      	ldr	r3, [pc, #144]	; (80066f8 <RCCEx_PLL3_Config+0x160>)
 8006668:	4013      	ands	r3, r2
 800666a:	687a      	ldr	r2, [r7, #4]
 800666c:	69d2      	ldr	r2, [r2, #28]
 800666e:	00d2      	lsls	r2, r2, #3
 8006670:	4920      	ldr	r1, [pc, #128]	; (80066f4 <RCCEx_PLL3_Config+0x15c>)
 8006672:	4313      	orrs	r3, r2
 8006674:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006676:	4b1f      	ldr	r3, [pc, #124]	; (80066f4 <RCCEx_PLL3_Config+0x15c>)
 8006678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800667a:	4a1e      	ldr	r2, [pc, #120]	; (80066f4 <RCCEx_PLL3_Config+0x15c>)
 800667c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006680:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d106      	bne.n	8006696 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006688:	4b1a      	ldr	r3, [pc, #104]	; (80066f4 <RCCEx_PLL3_Config+0x15c>)
 800668a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800668c:	4a19      	ldr	r2, [pc, #100]	; (80066f4 <RCCEx_PLL3_Config+0x15c>)
 800668e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006692:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006694:	e00f      	b.n	80066b6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	2b01      	cmp	r3, #1
 800669a:	d106      	bne.n	80066aa <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800669c:	4b15      	ldr	r3, [pc, #84]	; (80066f4 <RCCEx_PLL3_Config+0x15c>)
 800669e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066a0:	4a14      	ldr	r2, [pc, #80]	; (80066f4 <RCCEx_PLL3_Config+0x15c>)
 80066a2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80066a6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80066a8:	e005      	b.n	80066b6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80066aa:	4b12      	ldr	r3, [pc, #72]	; (80066f4 <RCCEx_PLL3_Config+0x15c>)
 80066ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066ae:	4a11      	ldr	r2, [pc, #68]	; (80066f4 <RCCEx_PLL3_Config+0x15c>)
 80066b0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80066b4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80066b6:	4b0f      	ldr	r3, [pc, #60]	; (80066f4 <RCCEx_PLL3_Config+0x15c>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4a0e      	ldr	r2, [pc, #56]	; (80066f4 <RCCEx_PLL3_Config+0x15c>)
 80066bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80066c2:	f7fb f961 	bl	8001988 <HAL_GetTick>
 80066c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80066c8:	e008      	b.n	80066dc <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80066ca:	f7fb f95d 	bl	8001988 <HAL_GetTick>
 80066ce:	4602      	mov	r2, r0
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	1ad3      	subs	r3, r2, r3
 80066d4:	2b02      	cmp	r3, #2
 80066d6:	d901      	bls.n	80066dc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80066d8:	2303      	movs	r3, #3
 80066da:	e006      	b.n	80066ea <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80066dc:	4b05      	ldr	r3, [pc, #20]	; (80066f4 <RCCEx_PLL3_Config+0x15c>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d0f0      	beq.n	80066ca <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80066e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80066ea:	4618      	mov	r0, r3
 80066ec:	3710      	adds	r7, #16
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd80      	pop	{r7, pc}
 80066f2:	bf00      	nop
 80066f4:	58024400 	.word	0x58024400
 80066f8:	ffff0007 	.word	0xffff0007

080066fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b082      	sub	sp, #8
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d101      	bne.n	800670e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800670a:	2301      	movs	r3, #1
 800670c:	e042      	b.n	8006794 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006714:	2b00      	cmp	r3, #0
 8006716:	d106      	bne.n	8006726 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2200      	movs	r2, #0
 800671c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	f7fa fab9 	bl	8000c98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2224      	movs	r2, #36	; 0x24
 800672a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	681a      	ldr	r2, [r3, #0]
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f022 0201 	bic.w	r2, r2, #1
 800673c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f000 f82c 	bl	800679c <UART_SetConfig>
 8006744:	4603      	mov	r3, r0
 8006746:	2b01      	cmp	r3, #1
 8006748:	d101      	bne.n	800674e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800674a:	2301      	movs	r3, #1
 800674c:	e022      	b.n	8006794 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006752:	2b00      	cmp	r3, #0
 8006754:	d002      	beq.n	800675c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f000 fd80 	bl	800725c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	685a      	ldr	r2, [r3, #4]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800676a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	689a      	ldr	r2, [r3, #8]
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800677a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	681a      	ldr	r2, [r3, #0]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f042 0201 	orr.w	r2, r2, #1
 800678a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	f000 fe07 	bl	80073a0 <UART_CheckIdleState>
 8006792:	4603      	mov	r3, r0
}
 8006794:	4618      	mov	r0, r3
 8006796:	3708      	adds	r7, #8
 8006798:	46bd      	mov	sp, r7
 800679a:	bd80      	pop	{r7, pc}

0800679c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800679c:	b5b0      	push	{r4, r5, r7, lr}
 800679e:	b08e      	sub	sp, #56	; 0x38
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80067a4:	2300      	movs	r3, #0
 80067a6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	689a      	ldr	r2, [r3, #8]
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	691b      	ldr	r3, [r3, #16]
 80067b2:	431a      	orrs	r2, r3
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	695b      	ldr	r3, [r3, #20]
 80067b8:	431a      	orrs	r2, r3
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	69db      	ldr	r3, [r3, #28]
 80067be:	4313      	orrs	r3, r2
 80067c0:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	681a      	ldr	r2, [r3, #0]
 80067c8:	4bbf      	ldr	r3, [pc, #764]	; (8006ac8 <UART_SetConfig+0x32c>)
 80067ca:	4013      	ands	r3, r2
 80067cc:	687a      	ldr	r2, [r7, #4]
 80067ce:	6812      	ldr	r2, [r2, #0]
 80067d0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80067d2:	430b      	orrs	r3, r1
 80067d4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	685b      	ldr	r3, [r3, #4]
 80067dc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	68da      	ldr	r2, [r3, #12]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	430a      	orrs	r2, r1
 80067ea:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	699b      	ldr	r3, [r3, #24]
 80067f0:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4ab5      	ldr	r2, [pc, #724]	; (8006acc <UART_SetConfig+0x330>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d004      	beq.n	8006806 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6a1b      	ldr	r3, [r3, #32]
 8006800:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006802:	4313      	orrs	r3, r2
 8006804:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	689a      	ldr	r2, [r3, #8]
 800680c:	4bb0      	ldr	r3, [pc, #704]	; (8006ad0 <UART_SetConfig+0x334>)
 800680e:	4013      	ands	r3, r2
 8006810:	687a      	ldr	r2, [r7, #4]
 8006812:	6812      	ldr	r2, [r2, #0]
 8006814:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006816:	430b      	orrs	r3, r1
 8006818:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006820:	f023 010f 	bic.w	r1, r3, #15
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	430a      	orrs	r2, r1
 800682e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4aa7      	ldr	r2, [pc, #668]	; (8006ad4 <UART_SetConfig+0x338>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d176      	bne.n	8006928 <UART_SetConfig+0x18c>
 800683a:	4ba7      	ldr	r3, [pc, #668]	; (8006ad8 <UART_SetConfig+0x33c>)
 800683c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800683e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006842:	2b28      	cmp	r3, #40	; 0x28
 8006844:	d86c      	bhi.n	8006920 <UART_SetConfig+0x184>
 8006846:	a201      	add	r2, pc, #4	; (adr r2, 800684c <UART_SetConfig+0xb0>)
 8006848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800684c:	080068f1 	.word	0x080068f1
 8006850:	08006921 	.word	0x08006921
 8006854:	08006921 	.word	0x08006921
 8006858:	08006921 	.word	0x08006921
 800685c:	08006921 	.word	0x08006921
 8006860:	08006921 	.word	0x08006921
 8006864:	08006921 	.word	0x08006921
 8006868:	08006921 	.word	0x08006921
 800686c:	080068f9 	.word	0x080068f9
 8006870:	08006921 	.word	0x08006921
 8006874:	08006921 	.word	0x08006921
 8006878:	08006921 	.word	0x08006921
 800687c:	08006921 	.word	0x08006921
 8006880:	08006921 	.word	0x08006921
 8006884:	08006921 	.word	0x08006921
 8006888:	08006921 	.word	0x08006921
 800688c:	08006901 	.word	0x08006901
 8006890:	08006921 	.word	0x08006921
 8006894:	08006921 	.word	0x08006921
 8006898:	08006921 	.word	0x08006921
 800689c:	08006921 	.word	0x08006921
 80068a0:	08006921 	.word	0x08006921
 80068a4:	08006921 	.word	0x08006921
 80068a8:	08006921 	.word	0x08006921
 80068ac:	08006909 	.word	0x08006909
 80068b0:	08006921 	.word	0x08006921
 80068b4:	08006921 	.word	0x08006921
 80068b8:	08006921 	.word	0x08006921
 80068bc:	08006921 	.word	0x08006921
 80068c0:	08006921 	.word	0x08006921
 80068c4:	08006921 	.word	0x08006921
 80068c8:	08006921 	.word	0x08006921
 80068cc:	08006911 	.word	0x08006911
 80068d0:	08006921 	.word	0x08006921
 80068d4:	08006921 	.word	0x08006921
 80068d8:	08006921 	.word	0x08006921
 80068dc:	08006921 	.word	0x08006921
 80068e0:	08006921 	.word	0x08006921
 80068e4:	08006921 	.word	0x08006921
 80068e8:	08006921 	.word	0x08006921
 80068ec:	08006919 	.word	0x08006919
 80068f0:	2301      	movs	r3, #1
 80068f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068f6:	e222      	b.n	8006d3e <UART_SetConfig+0x5a2>
 80068f8:	2304      	movs	r3, #4
 80068fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068fe:	e21e      	b.n	8006d3e <UART_SetConfig+0x5a2>
 8006900:	2308      	movs	r3, #8
 8006902:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006906:	e21a      	b.n	8006d3e <UART_SetConfig+0x5a2>
 8006908:	2310      	movs	r3, #16
 800690a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800690e:	e216      	b.n	8006d3e <UART_SetConfig+0x5a2>
 8006910:	2320      	movs	r3, #32
 8006912:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006916:	e212      	b.n	8006d3e <UART_SetConfig+0x5a2>
 8006918:	2340      	movs	r3, #64	; 0x40
 800691a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800691e:	e20e      	b.n	8006d3e <UART_SetConfig+0x5a2>
 8006920:	2380      	movs	r3, #128	; 0x80
 8006922:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006926:	e20a      	b.n	8006d3e <UART_SetConfig+0x5a2>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a6b      	ldr	r2, [pc, #428]	; (8006adc <UART_SetConfig+0x340>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d130      	bne.n	8006994 <UART_SetConfig+0x1f8>
 8006932:	4b69      	ldr	r3, [pc, #420]	; (8006ad8 <UART_SetConfig+0x33c>)
 8006934:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006936:	f003 0307 	and.w	r3, r3, #7
 800693a:	2b05      	cmp	r3, #5
 800693c:	d826      	bhi.n	800698c <UART_SetConfig+0x1f0>
 800693e:	a201      	add	r2, pc, #4	; (adr r2, 8006944 <UART_SetConfig+0x1a8>)
 8006940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006944:	0800695d 	.word	0x0800695d
 8006948:	08006965 	.word	0x08006965
 800694c:	0800696d 	.word	0x0800696d
 8006950:	08006975 	.word	0x08006975
 8006954:	0800697d 	.word	0x0800697d
 8006958:	08006985 	.word	0x08006985
 800695c:	2300      	movs	r3, #0
 800695e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006962:	e1ec      	b.n	8006d3e <UART_SetConfig+0x5a2>
 8006964:	2304      	movs	r3, #4
 8006966:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800696a:	e1e8      	b.n	8006d3e <UART_SetConfig+0x5a2>
 800696c:	2308      	movs	r3, #8
 800696e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006972:	e1e4      	b.n	8006d3e <UART_SetConfig+0x5a2>
 8006974:	2310      	movs	r3, #16
 8006976:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800697a:	e1e0      	b.n	8006d3e <UART_SetConfig+0x5a2>
 800697c:	2320      	movs	r3, #32
 800697e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006982:	e1dc      	b.n	8006d3e <UART_SetConfig+0x5a2>
 8006984:	2340      	movs	r3, #64	; 0x40
 8006986:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800698a:	e1d8      	b.n	8006d3e <UART_SetConfig+0x5a2>
 800698c:	2380      	movs	r3, #128	; 0x80
 800698e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006992:	e1d4      	b.n	8006d3e <UART_SetConfig+0x5a2>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4a51      	ldr	r2, [pc, #324]	; (8006ae0 <UART_SetConfig+0x344>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d130      	bne.n	8006a00 <UART_SetConfig+0x264>
 800699e:	4b4e      	ldr	r3, [pc, #312]	; (8006ad8 <UART_SetConfig+0x33c>)
 80069a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069a2:	f003 0307 	and.w	r3, r3, #7
 80069a6:	2b05      	cmp	r3, #5
 80069a8:	d826      	bhi.n	80069f8 <UART_SetConfig+0x25c>
 80069aa:	a201      	add	r2, pc, #4	; (adr r2, 80069b0 <UART_SetConfig+0x214>)
 80069ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069b0:	080069c9 	.word	0x080069c9
 80069b4:	080069d1 	.word	0x080069d1
 80069b8:	080069d9 	.word	0x080069d9
 80069bc:	080069e1 	.word	0x080069e1
 80069c0:	080069e9 	.word	0x080069e9
 80069c4:	080069f1 	.word	0x080069f1
 80069c8:	2300      	movs	r3, #0
 80069ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80069ce:	e1b6      	b.n	8006d3e <UART_SetConfig+0x5a2>
 80069d0:	2304      	movs	r3, #4
 80069d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80069d6:	e1b2      	b.n	8006d3e <UART_SetConfig+0x5a2>
 80069d8:	2308      	movs	r3, #8
 80069da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80069de:	e1ae      	b.n	8006d3e <UART_SetConfig+0x5a2>
 80069e0:	2310      	movs	r3, #16
 80069e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80069e6:	e1aa      	b.n	8006d3e <UART_SetConfig+0x5a2>
 80069e8:	2320      	movs	r3, #32
 80069ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80069ee:	e1a6      	b.n	8006d3e <UART_SetConfig+0x5a2>
 80069f0:	2340      	movs	r3, #64	; 0x40
 80069f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80069f6:	e1a2      	b.n	8006d3e <UART_SetConfig+0x5a2>
 80069f8:	2380      	movs	r3, #128	; 0x80
 80069fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80069fe:	e19e      	b.n	8006d3e <UART_SetConfig+0x5a2>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a37      	ldr	r2, [pc, #220]	; (8006ae4 <UART_SetConfig+0x348>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d130      	bne.n	8006a6c <UART_SetConfig+0x2d0>
 8006a0a:	4b33      	ldr	r3, [pc, #204]	; (8006ad8 <UART_SetConfig+0x33c>)
 8006a0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a0e:	f003 0307 	and.w	r3, r3, #7
 8006a12:	2b05      	cmp	r3, #5
 8006a14:	d826      	bhi.n	8006a64 <UART_SetConfig+0x2c8>
 8006a16:	a201      	add	r2, pc, #4	; (adr r2, 8006a1c <UART_SetConfig+0x280>)
 8006a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a1c:	08006a35 	.word	0x08006a35
 8006a20:	08006a3d 	.word	0x08006a3d
 8006a24:	08006a45 	.word	0x08006a45
 8006a28:	08006a4d 	.word	0x08006a4d
 8006a2c:	08006a55 	.word	0x08006a55
 8006a30:	08006a5d 	.word	0x08006a5d
 8006a34:	2300      	movs	r3, #0
 8006a36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a3a:	e180      	b.n	8006d3e <UART_SetConfig+0x5a2>
 8006a3c:	2304      	movs	r3, #4
 8006a3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a42:	e17c      	b.n	8006d3e <UART_SetConfig+0x5a2>
 8006a44:	2308      	movs	r3, #8
 8006a46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a4a:	e178      	b.n	8006d3e <UART_SetConfig+0x5a2>
 8006a4c:	2310      	movs	r3, #16
 8006a4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a52:	e174      	b.n	8006d3e <UART_SetConfig+0x5a2>
 8006a54:	2320      	movs	r3, #32
 8006a56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a5a:	e170      	b.n	8006d3e <UART_SetConfig+0x5a2>
 8006a5c:	2340      	movs	r3, #64	; 0x40
 8006a5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a62:	e16c      	b.n	8006d3e <UART_SetConfig+0x5a2>
 8006a64:	2380      	movs	r3, #128	; 0x80
 8006a66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a6a:	e168      	b.n	8006d3e <UART_SetConfig+0x5a2>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a1d      	ldr	r2, [pc, #116]	; (8006ae8 <UART_SetConfig+0x34c>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d142      	bne.n	8006afc <UART_SetConfig+0x360>
 8006a76:	4b18      	ldr	r3, [pc, #96]	; (8006ad8 <UART_SetConfig+0x33c>)
 8006a78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a7a:	f003 0307 	and.w	r3, r3, #7
 8006a7e:	2b05      	cmp	r3, #5
 8006a80:	d838      	bhi.n	8006af4 <UART_SetConfig+0x358>
 8006a82:	a201      	add	r2, pc, #4	; (adr r2, 8006a88 <UART_SetConfig+0x2ec>)
 8006a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a88:	08006aa1 	.word	0x08006aa1
 8006a8c:	08006aa9 	.word	0x08006aa9
 8006a90:	08006ab1 	.word	0x08006ab1
 8006a94:	08006ab9 	.word	0x08006ab9
 8006a98:	08006ac1 	.word	0x08006ac1
 8006a9c:	08006aed 	.word	0x08006aed
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006aa6:	e14a      	b.n	8006d3e <UART_SetConfig+0x5a2>
 8006aa8:	2304      	movs	r3, #4
 8006aaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006aae:	e146      	b.n	8006d3e <UART_SetConfig+0x5a2>
 8006ab0:	2308      	movs	r3, #8
 8006ab2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ab6:	e142      	b.n	8006d3e <UART_SetConfig+0x5a2>
 8006ab8:	2310      	movs	r3, #16
 8006aba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006abe:	e13e      	b.n	8006d3e <UART_SetConfig+0x5a2>
 8006ac0:	2320      	movs	r3, #32
 8006ac2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ac6:	e13a      	b.n	8006d3e <UART_SetConfig+0x5a2>
 8006ac8:	cfff69f3 	.word	0xcfff69f3
 8006acc:	58000c00 	.word	0x58000c00
 8006ad0:	11fff4ff 	.word	0x11fff4ff
 8006ad4:	40011000 	.word	0x40011000
 8006ad8:	58024400 	.word	0x58024400
 8006adc:	40004400 	.word	0x40004400
 8006ae0:	40004800 	.word	0x40004800
 8006ae4:	40004c00 	.word	0x40004c00
 8006ae8:	40005000 	.word	0x40005000
 8006aec:	2340      	movs	r3, #64	; 0x40
 8006aee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006af2:	e124      	b.n	8006d3e <UART_SetConfig+0x5a2>
 8006af4:	2380      	movs	r3, #128	; 0x80
 8006af6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006afa:	e120      	b.n	8006d3e <UART_SetConfig+0x5a2>
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4acc      	ldr	r2, [pc, #816]	; (8006e34 <UART_SetConfig+0x698>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d176      	bne.n	8006bf4 <UART_SetConfig+0x458>
 8006b06:	4bcc      	ldr	r3, [pc, #816]	; (8006e38 <UART_SetConfig+0x69c>)
 8006b08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b0a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006b0e:	2b28      	cmp	r3, #40	; 0x28
 8006b10:	d86c      	bhi.n	8006bec <UART_SetConfig+0x450>
 8006b12:	a201      	add	r2, pc, #4	; (adr r2, 8006b18 <UART_SetConfig+0x37c>)
 8006b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b18:	08006bbd 	.word	0x08006bbd
 8006b1c:	08006bed 	.word	0x08006bed
 8006b20:	08006bed 	.word	0x08006bed
 8006b24:	08006bed 	.word	0x08006bed
 8006b28:	08006bed 	.word	0x08006bed
 8006b2c:	08006bed 	.word	0x08006bed
 8006b30:	08006bed 	.word	0x08006bed
 8006b34:	08006bed 	.word	0x08006bed
 8006b38:	08006bc5 	.word	0x08006bc5
 8006b3c:	08006bed 	.word	0x08006bed
 8006b40:	08006bed 	.word	0x08006bed
 8006b44:	08006bed 	.word	0x08006bed
 8006b48:	08006bed 	.word	0x08006bed
 8006b4c:	08006bed 	.word	0x08006bed
 8006b50:	08006bed 	.word	0x08006bed
 8006b54:	08006bed 	.word	0x08006bed
 8006b58:	08006bcd 	.word	0x08006bcd
 8006b5c:	08006bed 	.word	0x08006bed
 8006b60:	08006bed 	.word	0x08006bed
 8006b64:	08006bed 	.word	0x08006bed
 8006b68:	08006bed 	.word	0x08006bed
 8006b6c:	08006bed 	.word	0x08006bed
 8006b70:	08006bed 	.word	0x08006bed
 8006b74:	08006bed 	.word	0x08006bed
 8006b78:	08006bd5 	.word	0x08006bd5
 8006b7c:	08006bed 	.word	0x08006bed
 8006b80:	08006bed 	.word	0x08006bed
 8006b84:	08006bed 	.word	0x08006bed
 8006b88:	08006bed 	.word	0x08006bed
 8006b8c:	08006bed 	.word	0x08006bed
 8006b90:	08006bed 	.word	0x08006bed
 8006b94:	08006bed 	.word	0x08006bed
 8006b98:	08006bdd 	.word	0x08006bdd
 8006b9c:	08006bed 	.word	0x08006bed
 8006ba0:	08006bed 	.word	0x08006bed
 8006ba4:	08006bed 	.word	0x08006bed
 8006ba8:	08006bed 	.word	0x08006bed
 8006bac:	08006bed 	.word	0x08006bed
 8006bb0:	08006bed 	.word	0x08006bed
 8006bb4:	08006bed 	.word	0x08006bed
 8006bb8:	08006be5 	.word	0x08006be5
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006bc2:	e0bc      	b.n	8006d3e <UART_SetConfig+0x5a2>
 8006bc4:	2304      	movs	r3, #4
 8006bc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006bca:	e0b8      	b.n	8006d3e <UART_SetConfig+0x5a2>
 8006bcc:	2308      	movs	r3, #8
 8006bce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006bd2:	e0b4      	b.n	8006d3e <UART_SetConfig+0x5a2>
 8006bd4:	2310      	movs	r3, #16
 8006bd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006bda:	e0b0      	b.n	8006d3e <UART_SetConfig+0x5a2>
 8006bdc:	2320      	movs	r3, #32
 8006bde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006be2:	e0ac      	b.n	8006d3e <UART_SetConfig+0x5a2>
 8006be4:	2340      	movs	r3, #64	; 0x40
 8006be6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006bea:	e0a8      	b.n	8006d3e <UART_SetConfig+0x5a2>
 8006bec:	2380      	movs	r3, #128	; 0x80
 8006bee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006bf2:	e0a4      	b.n	8006d3e <UART_SetConfig+0x5a2>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a90      	ldr	r2, [pc, #576]	; (8006e3c <UART_SetConfig+0x6a0>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d130      	bne.n	8006c60 <UART_SetConfig+0x4c4>
 8006bfe:	4b8e      	ldr	r3, [pc, #568]	; (8006e38 <UART_SetConfig+0x69c>)
 8006c00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c02:	f003 0307 	and.w	r3, r3, #7
 8006c06:	2b05      	cmp	r3, #5
 8006c08:	d826      	bhi.n	8006c58 <UART_SetConfig+0x4bc>
 8006c0a:	a201      	add	r2, pc, #4	; (adr r2, 8006c10 <UART_SetConfig+0x474>)
 8006c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c10:	08006c29 	.word	0x08006c29
 8006c14:	08006c31 	.word	0x08006c31
 8006c18:	08006c39 	.word	0x08006c39
 8006c1c:	08006c41 	.word	0x08006c41
 8006c20:	08006c49 	.word	0x08006c49
 8006c24:	08006c51 	.word	0x08006c51
 8006c28:	2300      	movs	r3, #0
 8006c2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c2e:	e086      	b.n	8006d3e <UART_SetConfig+0x5a2>
 8006c30:	2304      	movs	r3, #4
 8006c32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c36:	e082      	b.n	8006d3e <UART_SetConfig+0x5a2>
 8006c38:	2308      	movs	r3, #8
 8006c3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c3e:	e07e      	b.n	8006d3e <UART_SetConfig+0x5a2>
 8006c40:	2310      	movs	r3, #16
 8006c42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c46:	e07a      	b.n	8006d3e <UART_SetConfig+0x5a2>
 8006c48:	2320      	movs	r3, #32
 8006c4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c4e:	e076      	b.n	8006d3e <UART_SetConfig+0x5a2>
 8006c50:	2340      	movs	r3, #64	; 0x40
 8006c52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c56:	e072      	b.n	8006d3e <UART_SetConfig+0x5a2>
 8006c58:	2380      	movs	r3, #128	; 0x80
 8006c5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c5e:	e06e      	b.n	8006d3e <UART_SetConfig+0x5a2>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4a76      	ldr	r2, [pc, #472]	; (8006e40 <UART_SetConfig+0x6a4>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d130      	bne.n	8006ccc <UART_SetConfig+0x530>
 8006c6a:	4b73      	ldr	r3, [pc, #460]	; (8006e38 <UART_SetConfig+0x69c>)
 8006c6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c6e:	f003 0307 	and.w	r3, r3, #7
 8006c72:	2b05      	cmp	r3, #5
 8006c74:	d826      	bhi.n	8006cc4 <UART_SetConfig+0x528>
 8006c76:	a201      	add	r2, pc, #4	; (adr r2, 8006c7c <UART_SetConfig+0x4e0>)
 8006c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c7c:	08006c95 	.word	0x08006c95
 8006c80:	08006c9d 	.word	0x08006c9d
 8006c84:	08006ca5 	.word	0x08006ca5
 8006c88:	08006cad 	.word	0x08006cad
 8006c8c:	08006cb5 	.word	0x08006cb5
 8006c90:	08006cbd 	.word	0x08006cbd
 8006c94:	2300      	movs	r3, #0
 8006c96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c9a:	e050      	b.n	8006d3e <UART_SetConfig+0x5a2>
 8006c9c:	2304      	movs	r3, #4
 8006c9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ca2:	e04c      	b.n	8006d3e <UART_SetConfig+0x5a2>
 8006ca4:	2308      	movs	r3, #8
 8006ca6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006caa:	e048      	b.n	8006d3e <UART_SetConfig+0x5a2>
 8006cac:	2310      	movs	r3, #16
 8006cae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006cb2:	e044      	b.n	8006d3e <UART_SetConfig+0x5a2>
 8006cb4:	2320      	movs	r3, #32
 8006cb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006cba:	e040      	b.n	8006d3e <UART_SetConfig+0x5a2>
 8006cbc:	2340      	movs	r3, #64	; 0x40
 8006cbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006cc2:	e03c      	b.n	8006d3e <UART_SetConfig+0x5a2>
 8006cc4:	2380      	movs	r3, #128	; 0x80
 8006cc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006cca:	e038      	b.n	8006d3e <UART_SetConfig+0x5a2>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a5c      	ldr	r2, [pc, #368]	; (8006e44 <UART_SetConfig+0x6a8>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d130      	bne.n	8006d38 <UART_SetConfig+0x59c>
 8006cd6:	4b58      	ldr	r3, [pc, #352]	; (8006e38 <UART_SetConfig+0x69c>)
 8006cd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cda:	f003 0307 	and.w	r3, r3, #7
 8006cde:	2b05      	cmp	r3, #5
 8006ce0:	d826      	bhi.n	8006d30 <UART_SetConfig+0x594>
 8006ce2:	a201      	add	r2, pc, #4	; (adr r2, 8006ce8 <UART_SetConfig+0x54c>)
 8006ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ce8:	08006d01 	.word	0x08006d01
 8006cec:	08006d09 	.word	0x08006d09
 8006cf0:	08006d11 	.word	0x08006d11
 8006cf4:	08006d19 	.word	0x08006d19
 8006cf8:	08006d21 	.word	0x08006d21
 8006cfc:	08006d29 	.word	0x08006d29
 8006d00:	2302      	movs	r3, #2
 8006d02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d06:	e01a      	b.n	8006d3e <UART_SetConfig+0x5a2>
 8006d08:	2304      	movs	r3, #4
 8006d0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d0e:	e016      	b.n	8006d3e <UART_SetConfig+0x5a2>
 8006d10:	2308      	movs	r3, #8
 8006d12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d16:	e012      	b.n	8006d3e <UART_SetConfig+0x5a2>
 8006d18:	2310      	movs	r3, #16
 8006d1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d1e:	e00e      	b.n	8006d3e <UART_SetConfig+0x5a2>
 8006d20:	2320      	movs	r3, #32
 8006d22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d26:	e00a      	b.n	8006d3e <UART_SetConfig+0x5a2>
 8006d28:	2340      	movs	r3, #64	; 0x40
 8006d2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d2e:	e006      	b.n	8006d3e <UART_SetConfig+0x5a2>
 8006d30:	2380      	movs	r3, #128	; 0x80
 8006d32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d36:	e002      	b.n	8006d3e <UART_SetConfig+0x5a2>
 8006d38:	2380      	movs	r3, #128	; 0x80
 8006d3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a40      	ldr	r2, [pc, #256]	; (8006e44 <UART_SetConfig+0x6a8>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	f040 80ef 	bne.w	8006f28 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006d4a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006d4e:	2b20      	cmp	r3, #32
 8006d50:	dc46      	bgt.n	8006de0 <UART_SetConfig+0x644>
 8006d52:	2b02      	cmp	r3, #2
 8006d54:	f2c0 8081 	blt.w	8006e5a <UART_SetConfig+0x6be>
 8006d58:	3b02      	subs	r3, #2
 8006d5a:	2b1e      	cmp	r3, #30
 8006d5c:	d87d      	bhi.n	8006e5a <UART_SetConfig+0x6be>
 8006d5e:	a201      	add	r2, pc, #4	; (adr r2, 8006d64 <UART_SetConfig+0x5c8>)
 8006d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d64:	08006de7 	.word	0x08006de7
 8006d68:	08006e5b 	.word	0x08006e5b
 8006d6c:	08006def 	.word	0x08006def
 8006d70:	08006e5b 	.word	0x08006e5b
 8006d74:	08006e5b 	.word	0x08006e5b
 8006d78:	08006e5b 	.word	0x08006e5b
 8006d7c:	08006dff 	.word	0x08006dff
 8006d80:	08006e5b 	.word	0x08006e5b
 8006d84:	08006e5b 	.word	0x08006e5b
 8006d88:	08006e5b 	.word	0x08006e5b
 8006d8c:	08006e5b 	.word	0x08006e5b
 8006d90:	08006e5b 	.word	0x08006e5b
 8006d94:	08006e5b 	.word	0x08006e5b
 8006d98:	08006e5b 	.word	0x08006e5b
 8006d9c:	08006e0f 	.word	0x08006e0f
 8006da0:	08006e5b 	.word	0x08006e5b
 8006da4:	08006e5b 	.word	0x08006e5b
 8006da8:	08006e5b 	.word	0x08006e5b
 8006dac:	08006e5b 	.word	0x08006e5b
 8006db0:	08006e5b 	.word	0x08006e5b
 8006db4:	08006e5b 	.word	0x08006e5b
 8006db8:	08006e5b 	.word	0x08006e5b
 8006dbc:	08006e5b 	.word	0x08006e5b
 8006dc0:	08006e5b 	.word	0x08006e5b
 8006dc4:	08006e5b 	.word	0x08006e5b
 8006dc8:	08006e5b 	.word	0x08006e5b
 8006dcc:	08006e5b 	.word	0x08006e5b
 8006dd0:	08006e5b 	.word	0x08006e5b
 8006dd4:	08006e5b 	.word	0x08006e5b
 8006dd8:	08006e5b 	.word	0x08006e5b
 8006ddc:	08006e4d 	.word	0x08006e4d
 8006de0:	2b40      	cmp	r3, #64	; 0x40
 8006de2:	d036      	beq.n	8006e52 <UART_SetConfig+0x6b6>
 8006de4:	e039      	b.n	8006e5a <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006de6:	f7ff f867 	bl	8005eb8 <HAL_RCCEx_GetD3PCLK1Freq>
 8006dea:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006dec:	e03b      	b.n	8006e66 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006dee:	f107 0314 	add.w	r3, r7, #20
 8006df2:	4618      	mov	r0, r3
 8006df4:	f7ff f876 	bl	8005ee4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006df8:	69bb      	ldr	r3, [r7, #24]
 8006dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006dfc:	e033      	b.n	8006e66 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006dfe:	f107 0308 	add.w	r3, r7, #8
 8006e02:	4618      	mov	r0, r3
 8006e04:	f7ff f9c2 	bl	800618c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006e0c:	e02b      	b.n	8006e66 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006e0e:	4b0a      	ldr	r3, [pc, #40]	; (8006e38 <UART_SetConfig+0x69c>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f003 0320 	and.w	r3, r3, #32
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d009      	beq.n	8006e2e <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006e1a:	4b07      	ldr	r3, [pc, #28]	; (8006e38 <UART_SetConfig+0x69c>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	08db      	lsrs	r3, r3, #3
 8006e20:	f003 0303 	and.w	r3, r3, #3
 8006e24:	4a08      	ldr	r2, [pc, #32]	; (8006e48 <UART_SetConfig+0x6ac>)
 8006e26:	fa22 f303 	lsr.w	r3, r2, r3
 8006e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006e2c:	e01b      	b.n	8006e66 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8006e2e:	4b06      	ldr	r3, [pc, #24]	; (8006e48 <UART_SetConfig+0x6ac>)
 8006e30:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006e32:	e018      	b.n	8006e66 <UART_SetConfig+0x6ca>
 8006e34:	40011400 	.word	0x40011400
 8006e38:	58024400 	.word	0x58024400
 8006e3c:	40007800 	.word	0x40007800
 8006e40:	40007c00 	.word	0x40007c00
 8006e44:	58000c00 	.word	0x58000c00
 8006e48:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006e4c:	4bc4      	ldr	r3, [pc, #784]	; (8007160 <UART_SetConfig+0x9c4>)
 8006e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006e50:	e009      	b.n	8006e66 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e56:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006e58:	e005      	b.n	8006e66 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006e5e:	2301      	movs	r3, #1
 8006e60:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006e64:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	f000 81da 	beq.w	8007222 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e72:	4abc      	ldr	r2, [pc, #752]	; (8007164 <UART_SetConfig+0x9c8>)
 8006e74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e78:	461a      	mov	r2, r3
 8006e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e7c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e80:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	685a      	ldr	r2, [r3, #4]
 8006e86:	4613      	mov	r3, r2
 8006e88:	005b      	lsls	r3, r3, #1
 8006e8a:	4413      	add	r3, r2
 8006e8c:	6a3a      	ldr	r2, [r7, #32]
 8006e8e:	429a      	cmp	r2, r3
 8006e90:	d305      	bcc.n	8006e9e <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	685b      	ldr	r3, [r3, #4]
 8006e96:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006e98:	6a3a      	ldr	r2, [r7, #32]
 8006e9a:	429a      	cmp	r2, r3
 8006e9c:	d903      	bls.n	8006ea6 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006ea4:	e1bd      	b.n	8007222 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	f04f 0100 	mov.w	r1, #0
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eb2:	4aac      	ldr	r2, [pc, #688]	; (8007164 <UART_SetConfig+0x9c8>)
 8006eb4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006eb8:	b29a      	uxth	r2, r3
 8006eba:	f04f 0300 	mov.w	r3, #0
 8006ebe:	f7f9 fa5f 	bl	8000380 <__aeabi_uldivmod>
 8006ec2:	4602      	mov	r2, r0
 8006ec4:	460b      	mov	r3, r1
 8006ec6:	4610      	mov	r0, r2
 8006ec8:	4619      	mov	r1, r3
 8006eca:	f04f 0200 	mov.w	r2, #0
 8006ece:	f04f 0300 	mov.w	r3, #0
 8006ed2:	020b      	lsls	r3, r1, #8
 8006ed4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006ed8:	0202      	lsls	r2, r0, #8
 8006eda:	6879      	ldr	r1, [r7, #4]
 8006edc:	6849      	ldr	r1, [r1, #4]
 8006ede:	0849      	lsrs	r1, r1, #1
 8006ee0:	4608      	mov	r0, r1
 8006ee2:	f04f 0100 	mov.w	r1, #0
 8006ee6:	1814      	adds	r4, r2, r0
 8006ee8:	eb43 0501 	adc.w	r5, r3, r1
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	685b      	ldr	r3, [r3, #4]
 8006ef0:	461a      	mov	r2, r3
 8006ef2:	f04f 0300 	mov.w	r3, #0
 8006ef6:	4620      	mov	r0, r4
 8006ef8:	4629      	mov	r1, r5
 8006efa:	f7f9 fa41 	bl	8000380 <__aeabi_uldivmod>
 8006efe:	4602      	mov	r2, r0
 8006f00:	460b      	mov	r3, r1
 8006f02:	4613      	mov	r3, r2
 8006f04:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f08:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f0c:	d308      	bcc.n	8006f20 <UART_SetConfig+0x784>
 8006f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f14:	d204      	bcs.n	8006f20 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f1c:	60da      	str	r2, [r3, #12]
 8006f1e:	e180      	b.n	8007222 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8006f20:	2301      	movs	r3, #1
 8006f22:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006f26:	e17c      	b.n	8007222 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	69db      	ldr	r3, [r3, #28]
 8006f2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f30:	f040 80bf 	bne.w	80070b2 <UART_SetConfig+0x916>
  {
    switch (clocksource)
 8006f34:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006f38:	2b20      	cmp	r3, #32
 8006f3a:	dc49      	bgt.n	8006fd0 <UART_SetConfig+0x834>
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	db7c      	blt.n	800703a <UART_SetConfig+0x89e>
 8006f40:	2b20      	cmp	r3, #32
 8006f42:	d87a      	bhi.n	800703a <UART_SetConfig+0x89e>
 8006f44:	a201      	add	r2, pc, #4	; (adr r2, 8006f4c <UART_SetConfig+0x7b0>)
 8006f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f4a:	bf00      	nop
 8006f4c:	08006fd7 	.word	0x08006fd7
 8006f50:	08006fdf 	.word	0x08006fdf
 8006f54:	0800703b 	.word	0x0800703b
 8006f58:	0800703b 	.word	0x0800703b
 8006f5c:	08006fe7 	.word	0x08006fe7
 8006f60:	0800703b 	.word	0x0800703b
 8006f64:	0800703b 	.word	0x0800703b
 8006f68:	0800703b 	.word	0x0800703b
 8006f6c:	08006ff7 	.word	0x08006ff7
 8006f70:	0800703b 	.word	0x0800703b
 8006f74:	0800703b 	.word	0x0800703b
 8006f78:	0800703b 	.word	0x0800703b
 8006f7c:	0800703b 	.word	0x0800703b
 8006f80:	0800703b 	.word	0x0800703b
 8006f84:	0800703b 	.word	0x0800703b
 8006f88:	0800703b 	.word	0x0800703b
 8006f8c:	08007007 	.word	0x08007007
 8006f90:	0800703b 	.word	0x0800703b
 8006f94:	0800703b 	.word	0x0800703b
 8006f98:	0800703b 	.word	0x0800703b
 8006f9c:	0800703b 	.word	0x0800703b
 8006fa0:	0800703b 	.word	0x0800703b
 8006fa4:	0800703b 	.word	0x0800703b
 8006fa8:	0800703b 	.word	0x0800703b
 8006fac:	0800703b 	.word	0x0800703b
 8006fb0:	0800703b 	.word	0x0800703b
 8006fb4:	0800703b 	.word	0x0800703b
 8006fb8:	0800703b 	.word	0x0800703b
 8006fbc:	0800703b 	.word	0x0800703b
 8006fc0:	0800703b 	.word	0x0800703b
 8006fc4:	0800703b 	.word	0x0800703b
 8006fc8:	0800703b 	.word	0x0800703b
 8006fcc:	0800702d 	.word	0x0800702d
 8006fd0:	2b40      	cmp	r3, #64	; 0x40
 8006fd2:	d02e      	beq.n	8007032 <UART_SetConfig+0x896>
 8006fd4:	e031      	b.n	800703a <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006fd6:	f7fe f803 	bl	8004fe0 <HAL_RCC_GetPCLK1Freq>
 8006fda:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006fdc:	e033      	b.n	8007046 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006fde:	f7fe f815 	bl	800500c <HAL_RCC_GetPCLK2Freq>
 8006fe2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006fe4:	e02f      	b.n	8007046 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006fe6:	f107 0314 	add.w	r3, r7, #20
 8006fea:	4618      	mov	r0, r3
 8006fec:	f7fe ff7a 	bl	8005ee4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006ff0:	69bb      	ldr	r3, [r7, #24]
 8006ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006ff4:	e027      	b.n	8007046 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ff6:	f107 0308 	add.w	r3, r7, #8
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	f7ff f8c6 	bl	800618c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007004:	e01f      	b.n	8007046 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007006:	4b58      	ldr	r3, [pc, #352]	; (8007168 <UART_SetConfig+0x9cc>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f003 0320 	and.w	r3, r3, #32
 800700e:	2b00      	cmp	r3, #0
 8007010:	d009      	beq.n	8007026 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007012:	4b55      	ldr	r3, [pc, #340]	; (8007168 <UART_SetConfig+0x9cc>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	08db      	lsrs	r3, r3, #3
 8007018:	f003 0303 	and.w	r3, r3, #3
 800701c:	4a53      	ldr	r2, [pc, #332]	; (800716c <UART_SetConfig+0x9d0>)
 800701e:	fa22 f303 	lsr.w	r3, r2, r3
 8007022:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007024:	e00f      	b.n	8007046 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8007026:	4b51      	ldr	r3, [pc, #324]	; (800716c <UART_SetConfig+0x9d0>)
 8007028:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800702a:	e00c      	b.n	8007046 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800702c:	4b4c      	ldr	r3, [pc, #304]	; (8007160 <UART_SetConfig+0x9c4>)
 800702e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007030:	e009      	b.n	8007046 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007032:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007036:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007038:	e005      	b.n	8007046 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800703a:	2300      	movs	r3, #0
 800703c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800703e:	2301      	movs	r3, #1
 8007040:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8007044:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007048:	2b00      	cmp	r3, #0
 800704a:	f000 80ea 	beq.w	8007222 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007052:	4a44      	ldr	r2, [pc, #272]	; (8007164 <UART_SetConfig+0x9c8>)
 8007054:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007058:	461a      	mov	r2, r3
 800705a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800705c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007060:	005a      	lsls	r2, r3, #1
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	685b      	ldr	r3, [r3, #4]
 8007066:	085b      	lsrs	r3, r3, #1
 8007068:	441a      	add	r2, r3
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	685b      	ldr	r3, [r3, #4]
 800706e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007072:	b29b      	uxth	r3, r3
 8007074:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007078:	2b0f      	cmp	r3, #15
 800707a:	d916      	bls.n	80070aa <UART_SetConfig+0x90e>
 800707c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800707e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007082:	d212      	bcs.n	80070aa <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007086:	b29b      	uxth	r3, r3
 8007088:	f023 030f 	bic.w	r3, r3, #15
 800708c:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800708e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007090:	085b      	lsrs	r3, r3, #1
 8007092:	b29b      	uxth	r3, r3
 8007094:	f003 0307 	and.w	r3, r3, #7
 8007098:	b29a      	uxth	r2, r3
 800709a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800709c:	4313      	orrs	r3, r2
 800709e:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80070a6:	60da      	str	r2, [r3, #12]
 80070a8:	e0bb      	b.n	8007222 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 80070aa:	2301      	movs	r3, #1
 80070ac:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80070b0:	e0b7      	b.n	8007222 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 80070b2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80070b6:	2b20      	cmp	r3, #32
 80070b8:	dc4a      	bgt.n	8007150 <UART_SetConfig+0x9b4>
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	f2c0 8086 	blt.w	80071cc <UART_SetConfig+0xa30>
 80070c0:	2b20      	cmp	r3, #32
 80070c2:	f200 8083 	bhi.w	80071cc <UART_SetConfig+0xa30>
 80070c6:	a201      	add	r2, pc, #4	; (adr r2, 80070cc <UART_SetConfig+0x930>)
 80070c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070cc:	08007157 	.word	0x08007157
 80070d0:	08007171 	.word	0x08007171
 80070d4:	080071cd 	.word	0x080071cd
 80070d8:	080071cd 	.word	0x080071cd
 80070dc:	08007179 	.word	0x08007179
 80070e0:	080071cd 	.word	0x080071cd
 80070e4:	080071cd 	.word	0x080071cd
 80070e8:	080071cd 	.word	0x080071cd
 80070ec:	08007189 	.word	0x08007189
 80070f0:	080071cd 	.word	0x080071cd
 80070f4:	080071cd 	.word	0x080071cd
 80070f8:	080071cd 	.word	0x080071cd
 80070fc:	080071cd 	.word	0x080071cd
 8007100:	080071cd 	.word	0x080071cd
 8007104:	080071cd 	.word	0x080071cd
 8007108:	080071cd 	.word	0x080071cd
 800710c:	08007199 	.word	0x08007199
 8007110:	080071cd 	.word	0x080071cd
 8007114:	080071cd 	.word	0x080071cd
 8007118:	080071cd 	.word	0x080071cd
 800711c:	080071cd 	.word	0x080071cd
 8007120:	080071cd 	.word	0x080071cd
 8007124:	080071cd 	.word	0x080071cd
 8007128:	080071cd 	.word	0x080071cd
 800712c:	080071cd 	.word	0x080071cd
 8007130:	080071cd 	.word	0x080071cd
 8007134:	080071cd 	.word	0x080071cd
 8007138:	080071cd 	.word	0x080071cd
 800713c:	080071cd 	.word	0x080071cd
 8007140:	080071cd 	.word	0x080071cd
 8007144:	080071cd 	.word	0x080071cd
 8007148:	080071cd 	.word	0x080071cd
 800714c:	080071bf 	.word	0x080071bf
 8007150:	2b40      	cmp	r3, #64	; 0x40
 8007152:	d037      	beq.n	80071c4 <UART_SetConfig+0xa28>
 8007154:	e03a      	b.n	80071cc <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007156:	f7fd ff43 	bl	8004fe0 <HAL_RCC_GetPCLK1Freq>
 800715a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800715c:	e03c      	b.n	80071d8 <UART_SetConfig+0xa3c>
 800715e:	bf00      	nop
 8007160:	003d0900 	.word	0x003d0900
 8007164:	08016c24 	.word	0x08016c24
 8007168:	58024400 	.word	0x58024400
 800716c:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007170:	f7fd ff4c 	bl	800500c <HAL_RCC_GetPCLK2Freq>
 8007174:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007176:	e02f      	b.n	80071d8 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007178:	f107 0314 	add.w	r3, r7, #20
 800717c:	4618      	mov	r0, r3
 800717e:	f7fe feb1 	bl	8005ee4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007182:	69bb      	ldr	r3, [r7, #24]
 8007184:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007186:	e027      	b.n	80071d8 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007188:	f107 0308 	add.w	r3, r7, #8
 800718c:	4618      	mov	r0, r3
 800718e:	f7fe fffd 	bl	800618c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007196:	e01f      	b.n	80071d8 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007198:	4b2c      	ldr	r3, [pc, #176]	; (800724c <UART_SetConfig+0xab0>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f003 0320 	and.w	r3, r3, #32
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d009      	beq.n	80071b8 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80071a4:	4b29      	ldr	r3, [pc, #164]	; (800724c <UART_SetConfig+0xab0>)
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	08db      	lsrs	r3, r3, #3
 80071aa:	f003 0303 	and.w	r3, r3, #3
 80071ae:	4a28      	ldr	r2, [pc, #160]	; (8007250 <UART_SetConfig+0xab4>)
 80071b0:	fa22 f303 	lsr.w	r3, r2, r3
 80071b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80071b6:	e00f      	b.n	80071d8 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 80071b8:	4b25      	ldr	r3, [pc, #148]	; (8007250 <UART_SetConfig+0xab4>)
 80071ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80071bc:	e00c      	b.n	80071d8 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80071be:	4b25      	ldr	r3, [pc, #148]	; (8007254 <UART_SetConfig+0xab8>)
 80071c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80071c2:	e009      	b.n	80071d8 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80071c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80071c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80071ca:	e005      	b.n	80071d8 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 80071cc:	2300      	movs	r3, #0
 80071ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80071d0:	2301      	movs	r3, #1
 80071d2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80071d6:	bf00      	nop
    }

    if (pclk != 0U)
 80071d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d021      	beq.n	8007222 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071e2:	4a1d      	ldr	r2, [pc, #116]	; (8007258 <UART_SetConfig+0xabc>)
 80071e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80071e8:	461a      	mov	r2, r3
 80071ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071ec:	fbb3 f2f2 	udiv	r2, r3, r2
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	685b      	ldr	r3, [r3, #4]
 80071f4:	085b      	lsrs	r3, r3, #1
 80071f6:	441a      	add	r2, r3
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	685b      	ldr	r3, [r3, #4]
 80071fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007200:	b29b      	uxth	r3, r3
 8007202:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007206:	2b0f      	cmp	r3, #15
 8007208:	d908      	bls.n	800721c <UART_SetConfig+0xa80>
 800720a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800720c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007210:	d204      	bcs.n	800721c <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007218:	60da      	str	r2, [r3, #12]
 800721a:	e002      	b.n	8007222 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800721c:	2301      	movs	r3, #1
 800721e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2201      	movs	r2, #1
 8007226:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2201      	movs	r2, #1
 800722e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2200      	movs	r2, #0
 8007236:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2200      	movs	r2, #0
 800723c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800723e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8007242:	4618      	mov	r0, r3
 8007244:	3738      	adds	r7, #56	; 0x38
 8007246:	46bd      	mov	sp, r7
 8007248:	bdb0      	pop	{r4, r5, r7, pc}
 800724a:	bf00      	nop
 800724c:	58024400 	.word	0x58024400
 8007250:	03d09000 	.word	0x03d09000
 8007254:	003d0900 	.word	0x003d0900
 8007258:	08016c24 	.word	0x08016c24

0800725c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800725c:	b480      	push	{r7}
 800725e:	b083      	sub	sp, #12
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007268:	f003 0301 	and.w	r3, r3, #1
 800726c:	2b00      	cmp	r3, #0
 800726e:	d00a      	beq.n	8007286 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	685b      	ldr	r3, [r3, #4]
 8007276:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	430a      	orrs	r2, r1
 8007284:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800728a:	f003 0302 	and.w	r3, r3, #2
 800728e:	2b00      	cmp	r3, #0
 8007290:	d00a      	beq.n	80072a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	430a      	orrs	r2, r1
 80072a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072ac:	f003 0304 	and.w	r3, r3, #4
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d00a      	beq.n	80072ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	685b      	ldr	r3, [r3, #4]
 80072ba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	430a      	orrs	r2, r1
 80072c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072ce:	f003 0308 	and.w	r3, r3, #8
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d00a      	beq.n	80072ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	685b      	ldr	r3, [r3, #4]
 80072dc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	430a      	orrs	r2, r1
 80072ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072f0:	f003 0310 	and.w	r3, r3, #16
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d00a      	beq.n	800730e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	689b      	ldr	r3, [r3, #8]
 80072fe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	430a      	orrs	r2, r1
 800730c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007312:	f003 0320 	and.w	r3, r3, #32
 8007316:	2b00      	cmp	r3, #0
 8007318:	d00a      	beq.n	8007330 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	689b      	ldr	r3, [r3, #8]
 8007320:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	430a      	orrs	r2, r1
 800732e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007334:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007338:	2b00      	cmp	r3, #0
 800733a:	d01a      	beq.n	8007372 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	685b      	ldr	r3, [r3, #4]
 8007342:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	430a      	orrs	r2, r1
 8007350:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007356:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800735a:	d10a      	bne.n	8007372 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	685b      	ldr	r3, [r3, #4]
 8007362:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	430a      	orrs	r2, r1
 8007370:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007376:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800737a:	2b00      	cmp	r3, #0
 800737c:	d00a      	beq.n	8007394 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	685b      	ldr	r3, [r3, #4]
 8007384:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	430a      	orrs	r2, r1
 8007392:	605a      	str	r2, [r3, #4]
  }
}
 8007394:	bf00      	nop
 8007396:	370c      	adds	r7, #12
 8007398:	46bd      	mov	sp, r7
 800739a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739e:	4770      	bx	lr

080073a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b086      	sub	sp, #24
 80073a4:	af02      	add	r7, sp, #8
 80073a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2200      	movs	r2, #0
 80073ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80073b0:	f7fa faea 	bl	8001988 <HAL_GetTick>
 80073b4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f003 0308 	and.w	r3, r3, #8
 80073c0:	2b08      	cmp	r3, #8
 80073c2:	d10e      	bne.n	80073e2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80073c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80073c8:	9300      	str	r3, [sp, #0]
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	2200      	movs	r2, #0
 80073ce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f000 f82f 	bl	8007436 <UART_WaitOnFlagUntilTimeout>
 80073d8:	4603      	mov	r3, r0
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d001      	beq.n	80073e2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80073de:	2303      	movs	r3, #3
 80073e0:	e025      	b.n	800742e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f003 0304 	and.w	r3, r3, #4
 80073ec:	2b04      	cmp	r3, #4
 80073ee:	d10e      	bne.n	800740e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80073f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80073f4:	9300      	str	r3, [sp, #0]
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	2200      	movs	r2, #0
 80073fa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f000 f819 	bl	8007436 <UART_WaitOnFlagUntilTimeout>
 8007404:	4603      	mov	r3, r0
 8007406:	2b00      	cmp	r3, #0
 8007408:	d001      	beq.n	800740e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800740a:	2303      	movs	r3, #3
 800740c:	e00f      	b.n	800742e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2220      	movs	r2, #32
 8007412:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2220      	movs	r2, #32
 800741a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2200      	movs	r2, #0
 8007422:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2200      	movs	r2, #0
 8007428:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800742c:	2300      	movs	r3, #0
}
 800742e:	4618      	mov	r0, r3
 8007430:	3710      	adds	r7, #16
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}

08007436 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007436:	b580      	push	{r7, lr}
 8007438:	b084      	sub	sp, #16
 800743a:	af00      	add	r7, sp, #0
 800743c:	60f8      	str	r0, [r7, #12]
 800743e:	60b9      	str	r1, [r7, #8]
 8007440:	603b      	str	r3, [r7, #0]
 8007442:	4613      	mov	r3, r2
 8007444:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007446:	e062      	b.n	800750e <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007448:	69bb      	ldr	r3, [r7, #24]
 800744a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800744e:	d05e      	beq.n	800750e <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007450:	f7fa fa9a 	bl	8001988 <HAL_GetTick>
 8007454:	4602      	mov	r2, r0
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	1ad3      	subs	r3, r2, r3
 800745a:	69ba      	ldr	r2, [r7, #24]
 800745c:	429a      	cmp	r2, r3
 800745e:	d302      	bcc.n	8007466 <UART_WaitOnFlagUntilTimeout+0x30>
 8007460:	69bb      	ldr	r3, [r7, #24]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d11d      	bne.n	80074a2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	681a      	ldr	r2, [r3, #0]
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007474:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	689a      	ldr	r2, [r3, #8]
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f022 0201 	bic.w	r2, r2, #1
 8007484:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	2220      	movs	r2, #32
 800748a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	2220      	movs	r2, #32
 8007492:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	2200      	movs	r2, #0
 800749a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800749e:	2303      	movs	r3, #3
 80074a0:	e045      	b.n	800752e <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f003 0304 	and.w	r3, r3, #4
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d02e      	beq.n	800750e <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	69db      	ldr	r3, [r3, #28]
 80074b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80074ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80074be:	d126      	bne.n	800750e <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80074c8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	681a      	ldr	r2, [r3, #0]
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80074d8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	689a      	ldr	r2, [r3, #8]
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f022 0201 	bic.w	r2, r2, #1
 80074e8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	2220      	movs	r2, #32
 80074ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	2220      	movs	r2, #32
 80074f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	2220      	movs	r2, #32
 80074fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	2200      	movs	r2, #0
 8007506:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800750a:	2303      	movs	r3, #3
 800750c:	e00f      	b.n	800752e <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	69da      	ldr	r2, [r3, #28]
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	4013      	ands	r3, r2
 8007518:	68ba      	ldr	r2, [r7, #8]
 800751a:	429a      	cmp	r2, r3
 800751c:	bf0c      	ite	eq
 800751e:	2301      	moveq	r3, #1
 8007520:	2300      	movne	r3, #0
 8007522:	b2db      	uxtb	r3, r3
 8007524:	461a      	mov	r2, r3
 8007526:	79fb      	ldrb	r3, [r7, #7]
 8007528:	429a      	cmp	r2, r3
 800752a:	d08d      	beq.n	8007448 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800752c:	2300      	movs	r3, #0
}
 800752e:	4618      	mov	r0, r3
 8007530:	3710      	adds	r7, #16
 8007532:	46bd      	mov	sp, r7
 8007534:	bd80      	pop	{r7, pc}

08007536 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007536:	b480      	push	{r7}
 8007538:	b085      	sub	sp, #20
 800753a:	af00      	add	r7, sp, #0
 800753c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007544:	2b01      	cmp	r3, #1
 8007546:	d101      	bne.n	800754c <HAL_UARTEx_DisableFifoMode+0x16>
 8007548:	2302      	movs	r3, #2
 800754a:	e027      	b.n	800759c <HAL_UARTEx_DisableFifoMode+0x66>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2201      	movs	r2, #1
 8007550:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2224      	movs	r2, #36	; 0x24
 8007558:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	681a      	ldr	r2, [r3, #0]
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f022 0201 	bic.w	r2, r2, #1
 8007572:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800757a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2200      	movs	r2, #0
 8007580:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	68fa      	ldr	r2, [r7, #12]
 8007588:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2220      	movs	r2, #32
 800758e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2200      	movs	r2, #0
 8007596:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800759a:	2300      	movs	r3, #0
}
 800759c:	4618      	mov	r0, r3
 800759e:	3714      	adds	r7, #20
 80075a0:	46bd      	mov	sp, r7
 80075a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a6:	4770      	bx	lr

080075a8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b084      	sub	sp, #16
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
 80075b0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80075b8:	2b01      	cmp	r3, #1
 80075ba:	d101      	bne.n	80075c0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80075bc:	2302      	movs	r3, #2
 80075be:	e02d      	b.n	800761c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2201      	movs	r2, #1
 80075c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2224      	movs	r2, #36	; 0x24
 80075cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	681a      	ldr	r2, [r3, #0]
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f022 0201 	bic.w	r2, r2, #1
 80075e6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	689b      	ldr	r3, [r3, #8]
 80075ee:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	683a      	ldr	r2, [r7, #0]
 80075f8:	430a      	orrs	r2, r1
 80075fa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f000 f84f 	bl	80076a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	68fa      	ldr	r2, [r7, #12]
 8007608:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2220      	movs	r2, #32
 800760e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2200      	movs	r2, #0
 8007616:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800761a:	2300      	movs	r3, #0
}
 800761c:	4618      	mov	r0, r3
 800761e:	3710      	adds	r7, #16
 8007620:	46bd      	mov	sp, r7
 8007622:	bd80      	pop	{r7, pc}

08007624 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b084      	sub	sp, #16
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
 800762c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007634:	2b01      	cmp	r3, #1
 8007636:	d101      	bne.n	800763c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007638:	2302      	movs	r3, #2
 800763a:	e02d      	b.n	8007698 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2201      	movs	r2, #1
 8007640:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2224      	movs	r2, #36	; 0x24
 8007648:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	681a      	ldr	r2, [r3, #0]
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f022 0201 	bic.w	r2, r2, #1
 8007662:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	689b      	ldr	r3, [r3, #8]
 800766a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	683a      	ldr	r2, [r7, #0]
 8007674:	430a      	orrs	r2, r1
 8007676:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007678:	6878      	ldr	r0, [r7, #4]
 800767a:	f000 f811 	bl	80076a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	68fa      	ldr	r2, [r7, #12]
 8007684:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2220      	movs	r2, #32
 800768a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2200      	movs	r2, #0
 8007692:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007696:	2300      	movs	r3, #0
}
 8007698:	4618      	mov	r0, r3
 800769a:	3710      	adds	r7, #16
 800769c:	46bd      	mov	sp, r7
 800769e:	bd80      	pop	{r7, pc}

080076a0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80076a0:	b480      	push	{r7}
 80076a2:	b085      	sub	sp, #20
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d108      	bne.n	80076c2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2201      	movs	r2, #1
 80076b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2201      	movs	r2, #1
 80076bc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80076c0:	e031      	b.n	8007726 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80076c2:	2310      	movs	r3, #16
 80076c4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80076c6:	2310      	movs	r3, #16
 80076c8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	689b      	ldr	r3, [r3, #8]
 80076d0:	0e5b      	lsrs	r3, r3, #25
 80076d2:	b2db      	uxtb	r3, r3
 80076d4:	f003 0307 	and.w	r3, r3, #7
 80076d8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	689b      	ldr	r3, [r3, #8]
 80076e0:	0f5b      	lsrs	r3, r3, #29
 80076e2:	b2db      	uxtb	r3, r3
 80076e4:	f003 0307 	and.w	r3, r3, #7
 80076e8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80076ea:	7bbb      	ldrb	r3, [r7, #14]
 80076ec:	7b3a      	ldrb	r2, [r7, #12]
 80076ee:	4911      	ldr	r1, [pc, #68]	; (8007734 <UARTEx_SetNbDataToProcess+0x94>)
 80076f0:	5c8a      	ldrb	r2, [r1, r2]
 80076f2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80076f6:	7b3a      	ldrb	r2, [r7, #12]
 80076f8:	490f      	ldr	r1, [pc, #60]	; (8007738 <UARTEx_SetNbDataToProcess+0x98>)
 80076fa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80076fc:	fb93 f3f2 	sdiv	r3, r3, r2
 8007700:	b29a      	uxth	r2, r3
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007708:	7bfb      	ldrb	r3, [r7, #15]
 800770a:	7b7a      	ldrb	r2, [r7, #13]
 800770c:	4909      	ldr	r1, [pc, #36]	; (8007734 <UARTEx_SetNbDataToProcess+0x94>)
 800770e:	5c8a      	ldrb	r2, [r1, r2]
 8007710:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007714:	7b7a      	ldrb	r2, [r7, #13]
 8007716:	4908      	ldr	r1, [pc, #32]	; (8007738 <UARTEx_SetNbDataToProcess+0x98>)
 8007718:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800771a:	fb93 f3f2 	sdiv	r3, r3, r2
 800771e:	b29a      	uxth	r2, r3
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007726:	bf00      	nop
 8007728:	3714      	adds	r7, #20
 800772a:	46bd      	mov	sp, r7
 800772c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007730:	4770      	bx	lr
 8007732:	bf00      	nop
 8007734:	08016c3c 	.word	0x08016c3c
 8007738:	08016c44 	.word	0x08016c44

0800773c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800773c:	b084      	sub	sp, #16
 800773e:	b580      	push	{r7, lr}
 8007740:	b084      	sub	sp, #16
 8007742:	af00      	add	r7, sp, #0
 8007744:	6078      	str	r0, [r7, #4]
 8007746:	f107 001c 	add.w	r0, r7, #28
 800774a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800774e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007750:	2b01      	cmp	r3, #1
 8007752:	d120      	bne.n	8007796 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007758:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	68da      	ldr	r2, [r3, #12]
 8007764:	4b2a      	ldr	r3, [pc, #168]	; (8007810 <USB_CoreInit+0xd4>)
 8007766:	4013      	ands	r3, r2
 8007768:	687a      	ldr	r2, [r7, #4]
 800776a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	68db      	ldr	r3, [r3, #12]
 8007770:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007778:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800777a:	2b01      	cmp	r3, #1
 800777c:	d105      	bne.n	800778a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	68db      	ldr	r3, [r3, #12]
 8007782:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f000 fa60 	bl	8007c50 <USB_CoreReset>
 8007790:	4603      	mov	r3, r0
 8007792:	73fb      	strb	r3, [r7, #15]
 8007794:	e01a      	b.n	80077cc <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	68db      	ldr	r3, [r3, #12]
 800779a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f000 fa54 	bl	8007c50 <USB_CoreReset>
 80077a8:	4603      	mov	r3, r0
 80077aa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80077ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d106      	bne.n	80077c0 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077b6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	639a      	str	r2, [r3, #56]	; 0x38
 80077be:	e005      	b.n	80077cc <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077c4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80077cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ce:	2b01      	cmp	r3, #1
 80077d0:	d116      	bne.n	8007800 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077d6:	b29a      	uxth	r2, r3
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80077e0:	4b0c      	ldr	r3, [pc, #48]	; (8007814 <USB_CoreInit+0xd8>)
 80077e2:	4313      	orrs	r3, r2
 80077e4:	687a      	ldr	r2, [r7, #4]
 80077e6:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	689b      	ldr	r3, [r3, #8]
 80077ec:	f043 0206 	orr.w	r2, r3, #6
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	689b      	ldr	r3, [r3, #8]
 80077f8:	f043 0220 	orr.w	r2, r3, #32
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007800:	7bfb      	ldrb	r3, [r7, #15]
}
 8007802:	4618      	mov	r0, r3
 8007804:	3710      	adds	r7, #16
 8007806:	46bd      	mov	sp, r7
 8007808:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800780c:	b004      	add	sp, #16
 800780e:	4770      	bx	lr
 8007810:	ffbdffbf 	.word	0xffbdffbf
 8007814:	03ee0000 	.word	0x03ee0000

08007818 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007818:	b480      	push	{r7}
 800781a:	b083      	sub	sp, #12
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	689b      	ldr	r3, [r3, #8]
 8007824:	f023 0201 	bic.w	r2, r3, #1
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800782c:	2300      	movs	r3, #0
}
 800782e:	4618      	mov	r0, r3
 8007830:	370c      	adds	r7, #12
 8007832:	46bd      	mov	sp, r7
 8007834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007838:	4770      	bx	lr

0800783a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800783a:	b580      	push	{r7, lr}
 800783c:	b082      	sub	sp, #8
 800783e:	af00      	add	r7, sp, #0
 8007840:	6078      	str	r0, [r7, #4]
 8007842:	460b      	mov	r3, r1
 8007844:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	68db      	ldr	r3, [r3, #12]
 800784a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007852:	78fb      	ldrb	r3, [r7, #3]
 8007854:	2b01      	cmp	r3, #1
 8007856:	d106      	bne.n	8007866 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	68db      	ldr	r3, [r3, #12]
 800785c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	60da      	str	r2, [r3, #12]
 8007864:	e00b      	b.n	800787e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8007866:	78fb      	ldrb	r3, [r7, #3]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d106      	bne.n	800787a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	68db      	ldr	r3, [r3, #12]
 8007870:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	60da      	str	r2, [r3, #12]
 8007878:	e001      	b.n	800787e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800787a:	2301      	movs	r3, #1
 800787c:	e003      	b.n	8007886 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800787e:	2032      	movs	r0, #50	; 0x32
 8007880:	f7fa f88e 	bl	80019a0 <HAL_Delay>

  return HAL_OK;
 8007884:	2300      	movs	r3, #0
}
 8007886:	4618      	mov	r0, r3
 8007888:	3708      	adds	r7, #8
 800788a:	46bd      	mov	sp, r7
 800788c:	bd80      	pop	{r7, pc}
	...

08007890 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007890:	b084      	sub	sp, #16
 8007892:	b580      	push	{r7, lr}
 8007894:	b086      	sub	sp, #24
 8007896:	af00      	add	r7, sp, #0
 8007898:	6078      	str	r0, [r7, #4]
 800789a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800789e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80078a2:	2300      	movs	r3, #0
 80078a4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80078aa:	2300      	movs	r3, #0
 80078ac:	613b      	str	r3, [r7, #16]
 80078ae:	e009      	b.n	80078c4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80078b0:	687a      	ldr	r2, [r7, #4]
 80078b2:	693b      	ldr	r3, [r7, #16]
 80078b4:	3340      	adds	r3, #64	; 0x40
 80078b6:	009b      	lsls	r3, r3, #2
 80078b8:	4413      	add	r3, r2
 80078ba:	2200      	movs	r2, #0
 80078bc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80078be:	693b      	ldr	r3, [r7, #16]
 80078c0:	3301      	adds	r3, #1
 80078c2:	613b      	str	r3, [r7, #16]
 80078c4:	693b      	ldr	r3, [r7, #16]
 80078c6:	2b0e      	cmp	r3, #14
 80078c8:	d9f2      	bls.n	80078b0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80078ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d11c      	bne.n	800790a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078d6:	685b      	ldr	r3, [r3, #4]
 80078d8:	68fa      	ldr	r2, [r7, #12]
 80078da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80078de:	f043 0302 	orr.w	r3, r3, #2
 80078e2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078e8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	601a      	str	r2, [r3, #0]
 8007908:	e005      	b.n	8007916 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800790e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800791c:	461a      	mov	r2, r3
 800791e:	2300      	movs	r3, #0
 8007920:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007928:	4619      	mov	r1, r3
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007930:	461a      	mov	r2, r3
 8007932:	680b      	ldr	r3, [r1, #0]
 8007934:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007938:	2b01      	cmp	r3, #1
 800793a:	d10c      	bne.n	8007956 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800793c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800793e:	2b00      	cmp	r3, #0
 8007940:	d104      	bne.n	800794c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007942:	2100      	movs	r1, #0
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	f000 f949 	bl	8007bdc <USB_SetDevSpeed>
 800794a:	e008      	b.n	800795e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800794c:	2101      	movs	r1, #1
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f000 f944 	bl	8007bdc <USB_SetDevSpeed>
 8007954:	e003      	b.n	800795e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007956:	2103      	movs	r1, #3
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f000 f93f 	bl	8007bdc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800795e:	2110      	movs	r1, #16
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	f000 f8f3 	bl	8007b4c <USB_FlushTxFifo>
 8007966:	4603      	mov	r3, r0
 8007968:	2b00      	cmp	r3, #0
 800796a:	d001      	beq.n	8007970 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800796c:	2301      	movs	r3, #1
 800796e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	f000 f911 	bl	8007b98 <USB_FlushRxFifo>
 8007976:	4603      	mov	r3, r0
 8007978:	2b00      	cmp	r3, #0
 800797a:	d001      	beq.n	8007980 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800797c:	2301      	movs	r3, #1
 800797e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007986:	461a      	mov	r2, r3
 8007988:	2300      	movs	r3, #0
 800798a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007992:	461a      	mov	r2, r3
 8007994:	2300      	movs	r3, #0
 8007996:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800799e:	461a      	mov	r2, r3
 80079a0:	2300      	movs	r3, #0
 80079a2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80079a4:	2300      	movs	r3, #0
 80079a6:	613b      	str	r3, [r7, #16]
 80079a8:	e043      	b.n	8007a32 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80079aa:	693b      	ldr	r3, [r7, #16]
 80079ac:	015a      	lsls	r2, r3, #5
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	4413      	add	r3, r2
 80079b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80079bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80079c0:	d118      	bne.n	80079f4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80079c2:	693b      	ldr	r3, [r7, #16]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d10a      	bne.n	80079de <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80079c8:	693b      	ldr	r3, [r7, #16]
 80079ca:	015a      	lsls	r2, r3, #5
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	4413      	add	r3, r2
 80079d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079d4:	461a      	mov	r2, r3
 80079d6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80079da:	6013      	str	r3, [r2, #0]
 80079dc:	e013      	b.n	8007a06 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80079de:	693b      	ldr	r3, [r7, #16]
 80079e0:	015a      	lsls	r2, r3, #5
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	4413      	add	r3, r2
 80079e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079ea:	461a      	mov	r2, r3
 80079ec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80079f0:	6013      	str	r3, [r2, #0]
 80079f2:	e008      	b.n	8007a06 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80079f4:	693b      	ldr	r3, [r7, #16]
 80079f6:	015a      	lsls	r2, r3, #5
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	4413      	add	r3, r2
 80079fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a00:	461a      	mov	r2, r3
 8007a02:	2300      	movs	r3, #0
 8007a04:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007a06:	693b      	ldr	r3, [r7, #16]
 8007a08:	015a      	lsls	r2, r3, #5
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	4413      	add	r3, r2
 8007a0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a12:	461a      	mov	r2, r3
 8007a14:	2300      	movs	r3, #0
 8007a16:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007a18:	693b      	ldr	r3, [r7, #16]
 8007a1a:	015a      	lsls	r2, r3, #5
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	4413      	add	r3, r2
 8007a20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a24:	461a      	mov	r2, r3
 8007a26:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007a2a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007a2c:	693b      	ldr	r3, [r7, #16]
 8007a2e:	3301      	adds	r3, #1
 8007a30:	613b      	str	r3, [r7, #16]
 8007a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a34:	693a      	ldr	r2, [r7, #16]
 8007a36:	429a      	cmp	r2, r3
 8007a38:	d3b7      	bcc.n	80079aa <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	613b      	str	r3, [r7, #16]
 8007a3e:	e043      	b.n	8007ac8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007a40:	693b      	ldr	r3, [r7, #16]
 8007a42:	015a      	lsls	r2, r3, #5
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	4413      	add	r3, r2
 8007a48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007a52:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007a56:	d118      	bne.n	8007a8a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8007a58:	693b      	ldr	r3, [r7, #16]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d10a      	bne.n	8007a74 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007a5e:	693b      	ldr	r3, [r7, #16]
 8007a60:	015a      	lsls	r2, r3, #5
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	4413      	add	r3, r2
 8007a66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a6a:	461a      	mov	r2, r3
 8007a6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007a70:	6013      	str	r3, [r2, #0]
 8007a72:	e013      	b.n	8007a9c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007a74:	693b      	ldr	r3, [r7, #16]
 8007a76:	015a      	lsls	r2, r3, #5
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	4413      	add	r3, r2
 8007a7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a80:	461a      	mov	r2, r3
 8007a82:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007a86:	6013      	str	r3, [r2, #0]
 8007a88:	e008      	b.n	8007a9c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007a8a:	693b      	ldr	r3, [r7, #16]
 8007a8c:	015a      	lsls	r2, r3, #5
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	4413      	add	r3, r2
 8007a92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a96:	461a      	mov	r2, r3
 8007a98:	2300      	movs	r3, #0
 8007a9a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007a9c:	693b      	ldr	r3, [r7, #16]
 8007a9e:	015a      	lsls	r2, r3, #5
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	4413      	add	r3, r2
 8007aa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007aa8:	461a      	mov	r2, r3
 8007aaa:	2300      	movs	r3, #0
 8007aac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007aae:	693b      	ldr	r3, [r7, #16]
 8007ab0:	015a      	lsls	r2, r3, #5
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	4413      	add	r3, r2
 8007ab6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007aba:	461a      	mov	r2, r3
 8007abc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007ac0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007ac2:	693b      	ldr	r3, [r7, #16]
 8007ac4:	3301      	adds	r3, #1
 8007ac6:	613b      	str	r3, [r7, #16]
 8007ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aca:	693a      	ldr	r2, [r7, #16]
 8007acc:	429a      	cmp	r2, r3
 8007ace:	d3b7      	bcc.n	8007a40 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ad6:	691b      	ldr	r3, [r3, #16]
 8007ad8:	68fa      	ldr	r2, [r7, #12]
 8007ada:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007ade:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ae2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007af0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d105      	bne.n	8007b04 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	699b      	ldr	r3, [r3, #24]
 8007afc:	f043 0210 	orr.w	r2, r3, #16
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	699a      	ldr	r2, [r3, #24]
 8007b08:	4b0e      	ldr	r3, [pc, #56]	; (8007b44 <USB_DevInit+0x2b4>)
 8007b0a:	4313      	orrs	r3, r2
 8007b0c:	687a      	ldr	r2, [r7, #4]
 8007b0e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007b10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d005      	beq.n	8007b22 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	699b      	ldr	r3, [r3, #24]
 8007b1a:	f043 0208 	orr.w	r2, r3, #8
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007b22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b24:	2b01      	cmp	r3, #1
 8007b26:	d105      	bne.n	8007b34 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	699a      	ldr	r2, [r3, #24]
 8007b2c:	4b06      	ldr	r3, [pc, #24]	; (8007b48 <USB_DevInit+0x2b8>)
 8007b2e:	4313      	orrs	r3, r2
 8007b30:	687a      	ldr	r2, [r7, #4]
 8007b32:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007b34:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	3718      	adds	r7, #24
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007b40:	b004      	add	sp, #16
 8007b42:	4770      	bx	lr
 8007b44:	803c3800 	.word	0x803c3800
 8007b48:	40000004 	.word	0x40000004

08007b4c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b085      	sub	sp, #20
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
 8007b54:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8007b56:	2300      	movs	r3, #0
 8007b58:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	019b      	lsls	r3, r3, #6
 8007b5e:	f043 0220 	orr.w	r2, r3, #32
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	3301      	adds	r3, #1
 8007b6a:	60fb      	str	r3, [r7, #12]
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	4a09      	ldr	r2, [pc, #36]	; (8007b94 <USB_FlushTxFifo+0x48>)
 8007b70:	4293      	cmp	r3, r2
 8007b72:	d901      	bls.n	8007b78 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007b74:	2303      	movs	r3, #3
 8007b76:	e006      	b.n	8007b86 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	691b      	ldr	r3, [r3, #16]
 8007b7c:	f003 0320 	and.w	r3, r3, #32
 8007b80:	2b20      	cmp	r3, #32
 8007b82:	d0f0      	beq.n	8007b66 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007b84:	2300      	movs	r3, #0
}
 8007b86:	4618      	mov	r0, r3
 8007b88:	3714      	adds	r7, #20
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b90:	4770      	bx	lr
 8007b92:	bf00      	nop
 8007b94:	00030d40 	.word	0x00030d40

08007b98 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007b98:	b480      	push	{r7}
 8007b9a:	b085      	sub	sp, #20
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2210      	movs	r2, #16
 8007ba8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	3301      	adds	r3, #1
 8007bae:	60fb      	str	r3, [r7, #12]
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	4a09      	ldr	r2, [pc, #36]	; (8007bd8 <USB_FlushRxFifo+0x40>)
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	d901      	bls.n	8007bbc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8007bb8:	2303      	movs	r3, #3
 8007bba:	e006      	b.n	8007bca <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	691b      	ldr	r3, [r3, #16]
 8007bc0:	f003 0310 	and.w	r3, r3, #16
 8007bc4:	2b10      	cmp	r3, #16
 8007bc6:	d0f0      	beq.n	8007baa <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007bc8:	2300      	movs	r3, #0
}
 8007bca:	4618      	mov	r0, r3
 8007bcc:	3714      	adds	r7, #20
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd4:	4770      	bx	lr
 8007bd6:	bf00      	nop
 8007bd8:	00030d40 	.word	0x00030d40

08007bdc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b085      	sub	sp, #20
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
 8007be4:	460b      	mov	r3, r1
 8007be6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bf2:	681a      	ldr	r2, [r3, #0]
 8007bf4:	78fb      	ldrb	r3, [r7, #3]
 8007bf6:	68f9      	ldr	r1, [r7, #12]
 8007bf8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007bfc:	4313      	orrs	r3, r2
 8007bfe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007c00:	2300      	movs	r3, #0
}
 8007c02:	4618      	mov	r0, r3
 8007c04:	3714      	adds	r7, #20
 8007c06:	46bd      	mov	sp, r7
 8007c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0c:	4770      	bx	lr

08007c0e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007c0e:	b480      	push	{r7}
 8007c10:	b085      	sub	sp, #20
 8007c12:	af00      	add	r7, sp, #0
 8007c14:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	68fa      	ldr	r2, [r7, #12]
 8007c24:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007c28:	f023 0303 	bic.w	r3, r3, #3
 8007c2c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c34:	685b      	ldr	r3, [r3, #4]
 8007c36:	68fa      	ldr	r2, [r7, #12]
 8007c38:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007c3c:	f043 0302 	orr.w	r3, r3, #2
 8007c40:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007c42:	2300      	movs	r3, #0
}
 8007c44:	4618      	mov	r0, r3
 8007c46:	3714      	adds	r7, #20
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4e:	4770      	bx	lr

08007c50 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007c50:	b480      	push	{r7}
 8007c52:	b085      	sub	sp, #20
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007c58:	2300      	movs	r3, #0
 8007c5a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	3301      	adds	r3, #1
 8007c60:	60fb      	str	r3, [r7, #12]
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	4a13      	ldr	r2, [pc, #76]	; (8007cb4 <USB_CoreReset+0x64>)
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d901      	bls.n	8007c6e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007c6a:	2303      	movs	r3, #3
 8007c6c:	e01b      	b.n	8007ca6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	691b      	ldr	r3, [r3, #16]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	daf2      	bge.n	8007c5c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007c76:	2300      	movs	r3, #0
 8007c78:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	691b      	ldr	r3, [r3, #16]
 8007c7e:	f043 0201 	orr.w	r2, r3, #1
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	3301      	adds	r3, #1
 8007c8a:	60fb      	str	r3, [r7, #12]
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	4a09      	ldr	r2, [pc, #36]	; (8007cb4 <USB_CoreReset+0x64>)
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d901      	bls.n	8007c98 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007c94:	2303      	movs	r3, #3
 8007c96:	e006      	b.n	8007ca6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	691b      	ldr	r3, [r3, #16]
 8007c9c:	f003 0301 	and.w	r3, r3, #1
 8007ca0:	2b01      	cmp	r3, #1
 8007ca2:	d0f0      	beq.n	8007c86 <USB_CoreReset+0x36>

  return HAL_OK;
 8007ca4:	2300      	movs	r3, #0
}
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	3714      	adds	r7, #20
 8007caa:	46bd      	mov	sp, r7
 8007cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb0:	4770      	bx	lr
 8007cb2:	bf00      	nop
 8007cb4:	00030d40 	.word	0x00030d40

08007cb8 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b084      	sub	sp, #16
 8007cbc:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8007cbe:	4b8d      	ldr	r3, [pc, #564]	; (8007ef4 <MX_LWIP_Init+0x23c>)
 8007cc0:	22c0      	movs	r2, #192	; 0xc0
 8007cc2:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8007cc4:	4b8b      	ldr	r3, [pc, #556]	; (8007ef4 <MX_LWIP_Init+0x23c>)
 8007cc6:	22a8      	movs	r2, #168	; 0xa8
 8007cc8:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 8;
 8007cca:	4b8a      	ldr	r3, [pc, #552]	; (8007ef4 <MX_LWIP_Init+0x23c>)
 8007ccc:	2208      	movs	r2, #8
 8007cce:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 77;
 8007cd0:	4b88      	ldr	r3, [pc, #544]	; (8007ef4 <MX_LWIP_Init+0x23c>)
 8007cd2:	224d      	movs	r2, #77	; 0x4d
 8007cd4:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8007cd6:	4b88      	ldr	r3, [pc, #544]	; (8007ef8 <MX_LWIP_Init+0x240>)
 8007cd8:	22ff      	movs	r2, #255	; 0xff
 8007cda:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8007cdc:	4b86      	ldr	r3, [pc, #536]	; (8007ef8 <MX_LWIP_Init+0x240>)
 8007cde:	22ff      	movs	r2, #255	; 0xff
 8007ce0:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8007ce2:	4b85      	ldr	r3, [pc, #532]	; (8007ef8 <MX_LWIP_Init+0x240>)
 8007ce4:	22ff      	movs	r2, #255	; 0xff
 8007ce6:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8007ce8:	4b83      	ldr	r3, [pc, #524]	; (8007ef8 <MX_LWIP_Init+0x240>)
 8007cea:	2200      	movs	r2, #0
 8007cec:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 8007cee:	4b83      	ldr	r3, [pc, #524]	; (8007efc <MX_LWIP_Init+0x244>)
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 8007cf4:	4b81      	ldr	r3, [pc, #516]	; (8007efc <MX_LWIP_Init+0x244>)
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8007cfa:	4b80      	ldr	r3, [pc, #512]	; (8007efc <MX_LWIP_Init+0x244>)
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 8007d00:	4b7e      	ldr	r3, [pc, #504]	; (8007efc <MX_LWIP_Init+0x244>)
 8007d02:	2200      	movs	r2, #0
 8007d04:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8007d06:	f000 fde9 	bl	80088dc <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8007d0a:	4b7a      	ldr	r3, [pc, #488]	; (8007ef4 <MX_LWIP_Init+0x23c>)
 8007d0c:	781b      	ldrb	r3, [r3, #0]
 8007d0e:	061a      	lsls	r2, r3, #24
 8007d10:	4b78      	ldr	r3, [pc, #480]	; (8007ef4 <MX_LWIP_Init+0x23c>)
 8007d12:	785b      	ldrb	r3, [r3, #1]
 8007d14:	041b      	lsls	r3, r3, #16
 8007d16:	431a      	orrs	r2, r3
 8007d18:	4b76      	ldr	r3, [pc, #472]	; (8007ef4 <MX_LWIP_Init+0x23c>)
 8007d1a:	789b      	ldrb	r3, [r3, #2]
 8007d1c:	021b      	lsls	r3, r3, #8
 8007d1e:	4313      	orrs	r3, r2
 8007d20:	4a74      	ldr	r2, [pc, #464]	; (8007ef4 <MX_LWIP_Init+0x23c>)
 8007d22:	78d2      	ldrb	r2, [r2, #3]
 8007d24:	4313      	orrs	r3, r2
 8007d26:	061a      	lsls	r2, r3, #24
 8007d28:	4b72      	ldr	r3, [pc, #456]	; (8007ef4 <MX_LWIP_Init+0x23c>)
 8007d2a:	781b      	ldrb	r3, [r3, #0]
 8007d2c:	0619      	lsls	r1, r3, #24
 8007d2e:	4b71      	ldr	r3, [pc, #452]	; (8007ef4 <MX_LWIP_Init+0x23c>)
 8007d30:	785b      	ldrb	r3, [r3, #1]
 8007d32:	041b      	lsls	r3, r3, #16
 8007d34:	4319      	orrs	r1, r3
 8007d36:	4b6f      	ldr	r3, [pc, #444]	; (8007ef4 <MX_LWIP_Init+0x23c>)
 8007d38:	789b      	ldrb	r3, [r3, #2]
 8007d3a:	021b      	lsls	r3, r3, #8
 8007d3c:	430b      	orrs	r3, r1
 8007d3e:	496d      	ldr	r1, [pc, #436]	; (8007ef4 <MX_LWIP_Init+0x23c>)
 8007d40:	78c9      	ldrb	r1, [r1, #3]
 8007d42:	430b      	orrs	r3, r1
 8007d44:	021b      	lsls	r3, r3, #8
 8007d46:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007d4a:	431a      	orrs	r2, r3
 8007d4c:	4b69      	ldr	r3, [pc, #420]	; (8007ef4 <MX_LWIP_Init+0x23c>)
 8007d4e:	781b      	ldrb	r3, [r3, #0]
 8007d50:	0619      	lsls	r1, r3, #24
 8007d52:	4b68      	ldr	r3, [pc, #416]	; (8007ef4 <MX_LWIP_Init+0x23c>)
 8007d54:	785b      	ldrb	r3, [r3, #1]
 8007d56:	041b      	lsls	r3, r3, #16
 8007d58:	4319      	orrs	r1, r3
 8007d5a:	4b66      	ldr	r3, [pc, #408]	; (8007ef4 <MX_LWIP_Init+0x23c>)
 8007d5c:	789b      	ldrb	r3, [r3, #2]
 8007d5e:	021b      	lsls	r3, r3, #8
 8007d60:	430b      	orrs	r3, r1
 8007d62:	4964      	ldr	r1, [pc, #400]	; (8007ef4 <MX_LWIP_Init+0x23c>)
 8007d64:	78c9      	ldrb	r1, [r1, #3]
 8007d66:	430b      	orrs	r3, r1
 8007d68:	0a1b      	lsrs	r3, r3, #8
 8007d6a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007d6e:	431a      	orrs	r2, r3
 8007d70:	4b60      	ldr	r3, [pc, #384]	; (8007ef4 <MX_LWIP_Init+0x23c>)
 8007d72:	781b      	ldrb	r3, [r3, #0]
 8007d74:	0619      	lsls	r1, r3, #24
 8007d76:	4b5f      	ldr	r3, [pc, #380]	; (8007ef4 <MX_LWIP_Init+0x23c>)
 8007d78:	785b      	ldrb	r3, [r3, #1]
 8007d7a:	041b      	lsls	r3, r3, #16
 8007d7c:	4319      	orrs	r1, r3
 8007d7e:	4b5d      	ldr	r3, [pc, #372]	; (8007ef4 <MX_LWIP_Init+0x23c>)
 8007d80:	789b      	ldrb	r3, [r3, #2]
 8007d82:	021b      	lsls	r3, r3, #8
 8007d84:	430b      	orrs	r3, r1
 8007d86:	495b      	ldr	r1, [pc, #364]	; (8007ef4 <MX_LWIP_Init+0x23c>)
 8007d88:	78c9      	ldrb	r1, [r1, #3]
 8007d8a:	430b      	orrs	r3, r1
 8007d8c:	0e1b      	lsrs	r3, r3, #24
 8007d8e:	4313      	orrs	r3, r2
 8007d90:	4a5b      	ldr	r2, [pc, #364]	; (8007f00 <MX_LWIP_Init+0x248>)
 8007d92:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8007d94:	4b58      	ldr	r3, [pc, #352]	; (8007ef8 <MX_LWIP_Init+0x240>)
 8007d96:	781b      	ldrb	r3, [r3, #0]
 8007d98:	061a      	lsls	r2, r3, #24
 8007d9a:	4b57      	ldr	r3, [pc, #348]	; (8007ef8 <MX_LWIP_Init+0x240>)
 8007d9c:	785b      	ldrb	r3, [r3, #1]
 8007d9e:	041b      	lsls	r3, r3, #16
 8007da0:	431a      	orrs	r2, r3
 8007da2:	4b55      	ldr	r3, [pc, #340]	; (8007ef8 <MX_LWIP_Init+0x240>)
 8007da4:	789b      	ldrb	r3, [r3, #2]
 8007da6:	021b      	lsls	r3, r3, #8
 8007da8:	4313      	orrs	r3, r2
 8007daa:	4a53      	ldr	r2, [pc, #332]	; (8007ef8 <MX_LWIP_Init+0x240>)
 8007dac:	78d2      	ldrb	r2, [r2, #3]
 8007dae:	4313      	orrs	r3, r2
 8007db0:	061a      	lsls	r2, r3, #24
 8007db2:	4b51      	ldr	r3, [pc, #324]	; (8007ef8 <MX_LWIP_Init+0x240>)
 8007db4:	781b      	ldrb	r3, [r3, #0]
 8007db6:	0619      	lsls	r1, r3, #24
 8007db8:	4b4f      	ldr	r3, [pc, #316]	; (8007ef8 <MX_LWIP_Init+0x240>)
 8007dba:	785b      	ldrb	r3, [r3, #1]
 8007dbc:	041b      	lsls	r3, r3, #16
 8007dbe:	4319      	orrs	r1, r3
 8007dc0:	4b4d      	ldr	r3, [pc, #308]	; (8007ef8 <MX_LWIP_Init+0x240>)
 8007dc2:	789b      	ldrb	r3, [r3, #2]
 8007dc4:	021b      	lsls	r3, r3, #8
 8007dc6:	430b      	orrs	r3, r1
 8007dc8:	494b      	ldr	r1, [pc, #300]	; (8007ef8 <MX_LWIP_Init+0x240>)
 8007dca:	78c9      	ldrb	r1, [r1, #3]
 8007dcc:	430b      	orrs	r3, r1
 8007dce:	021b      	lsls	r3, r3, #8
 8007dd0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007dd4:	431a      	orrs	r2, r3
 8007dd6:	4b48      	ldr	r3, [pc, #288]	; (8007ef8 <MX_LWIP_Init+0x240>)
 8007dd8:	781b      	ldrb	r3, [r3, #0]
 8007dda:	0619      	lsls	r1, r3, #24
 8007ddc:	4b46      	ldr	r3, [pc, #280]	; (8007ef8 <MX_LWIP_Init+0x240>)
 8007dde:	785b      	ldrb	r3, [r3, #1]
 8007de0:	041b      	lsls	r3, r3, #16
 8007de2:	4319      	orrs	r1, r3
 8007de4:	4b44      	ldr	r3, [pc, #272]	; (8007ef8 <MX_LWIP_Init+0x240>)
 8007de6:	789b      	ldrb	r3, [r3, #2]
 8007de8:	021b      	lsls	r3, r3, #8
 8007dea:	430b      	orrs	r3, r1
 8007dec:	4942      	ldr	r1, [pc, #264]	; (8007ef8 <MX_LWIP_Init+0x240>)
 8007dee:	78c9      	ldrb	r1, [r1, #3]
 8007df0:	430b      	orrs	r3, r1
 8007df2:	0a1b      	lsrs	r3, r3, #8
 8007df4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007df8:	431a      	orrs	r2, r3
 8007dfa:	4b3f      	ldr	r3, [pc, #252]	; (8007ef8 <MX_LWIP_Init+0x240>)
 8007dfc:	781b      	ldrb	r3, [r3, #0]
 8007dfe:	0619      	lsls	r1, r3, #24
 8007e00:	4b3d      	ldr	r3, [pc, #244]	; (8007ef8 <MX_LWIP_Init+0x240>)
 8007e02:	785b      	ldrb	r3, [r3, #1]
 8007e04:	041b      	lsls	r3, r3, #16
 8007e06:	4319      	orrs	r1, r3
 8007e08:	4b3b      	ldr	r3, [pc, #236]	; (8007ef8 <MX_LWIP_Init+0x240>)
 8007e0a:	789b      	ldrb	r3, [r3, #2]
 8007e0c:	021b      	lsls	r3, r3, #8
 8007e0e:	430b      	orrs	r3, r1
 8007e10:	4939      	ldr	r1, [pc, #228]	; (8007ef8 <MX_LWIP_Init+0x240>)
 8007e12:	78c9      	ldrb	r1, [r1, #3]
 8007e14:	430b      	orrs	r3, r1
 8007e16:	0e1b      	lsrs	r3, r3, #24
 8007e18:	4313      	orrs	r3, r2
 8007e1a:	4a3a      	ldr	r2, [pc, #232]	; (8007f04 <MX_LWIP_Init+0x24c>)
 8007e1c:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8007e1e:	4b37      	ldr	r3, [pc, #220]	; (8007efc <MX_LWIP_Init+0x244>)
 8007e20:	781b      	ldrb	r3, [r3, #0]
 8007e22:	061a      	lsls	r2, r3, #24
 8007e24:	4b35      	ldr	r3, [pc, #212]	; (8007efc <MX_LWIP_Init+0x244>)
 8007e26:	785b      	ldrb	r3, [r3, #1]
 8007e28:	041b      	lsls	r3, r3, #16
 8007e2a:	431a      	orrs	r2, r3
 8007e2c:	4b33      	ldr	r3, [pc, #204]	; (8007efc <MX_LWIP_Init+0x244>)
 8007e2e:	789b      	ldrb	r3, [r3, #2]
 8007e30:	021b      	lsls	r3, r3, #8
 8007e32:	4313      	orrs	r3, r2
 8007e34:	4a31      	ldr	r2, [pc, #196]	; (8007efc <MX_LWIP_Init+0x244>)
 8007e36:	78d2      	ldrb	r2, [r2, #3]
 8007e38:	4313      	orrs	r3, r2
 8007e3a:	061a      	lsls	r2, r3, #24
 8007e3c:	4b2f      	ldr	r3, [pc, #188]	; (8007efc <MX_LWIP_Init+0x244>)
 8007e3e:	781b      	ldrb	r3, [r3, #0]
 8007e40:	0619      	lsls	r1, r3, #24
 8007e42:	4b2e      	ldr	r3, [pc, #184]	; (8007efc <MX_LWIP_Init+0x244>)
 8007e44:	785b      	ldrb	r3, [r3, #1]
 8007e46:	041b      	lsls	r3, r3, #16
 8007e48:	4319      	orrs	r1, r3
 8007e4a:	4b2c      	ldr	r3, [pc, #176]	; (8007efc <MX_LWIP_Init+0x244>)
 8007e4c:	789b      	ldrb	r3, [r3, #2]
 8007e4e:	021b      	lsls	r3, r3, #8
 8007e50:	430b      	orrs	r3, r1
 8007e52:	492a      	ldr	r1, [pc, #168]	; (8007efc <MX_LWIP_Init+0x244>)
 8007e54:	78c9      	ldrb	r1, [r1, #3]
 8007e56:	430b      	orrs	r3, r1
 8007e58:	021b      	lsls	r3, r3, #8
 8007e5a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007e5e:	431a      	orrs	r2, r3
 8007e60:	4b26      	ldr	r3, [pc, #152]	; (8007efc <MX_LWIP_Init+0x244>)
 8007e62:	781b      	ldrb	r3, [r3, #0]
 8007e64:	0619      	lsls	r1, r3, #24
 8007e66:	4b25      	ldr	r3, [pc, #148]	; (8007efc <MX_LWIP_Init+0x244>)
 8007e68:	785b      	ldrb	r3, [r3, #1]
 8007e6a:	041b      	lsls	r3, r3, #16
 8007e6c:	4319      	orrs	r1, r3
 8007e6e:	4b23      	ldr	r3, [pc, #140]	; (8007efc <MX_LWIP_Init+0x244>)
 8007e70:	789b      	ldrb	r3, [r3, #2]
 8007e72:	021b      	lsls	r3, r3, #8
 8007e74:	430b      	orrs	r3, r1
 8007e76:	4921      	ldr	r1, [pc, #132]	; (8007efc <MX_LWIP_Init+0x244>)
 8007e78:	78c9      	ldrb	r1, [r1, #3]
 8007e7a:	430b      	orrs	r3, r1
 8007e7c:	0a1b      	lsrs	r3, r3, #8
 8007e7e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007e82:	431a      	orrs	r2, r3
 8007e84:	4b1d      	ldr	r3, [pc, #116]	; (8007efc <MX_LWIP_Init+0x244>)
 8007e86:	781b      	ldrb	r3, [r3, #0]
 8007e88:	0619      	lsls	r1, r3, #24
 8007e8a:	4b1c      	ldr	r3, [pc, #112]	; (8007efc <MX_LWIP_Init+0x244>)
 8007e8c:	785b      	ldrb	r3, [r3, #1]
 8007e8e:	041b      	lsls	r3, r3, #16
 8007e90:	4319      	orrs	r1, r3
 8007e92:	4b1a      	ldr	r3, [pc, #104]	; (8007efc <MX_LWIP_Init+0x244>)
 8007e94:	789b      	ldrb	r3, [r3, #2]
 8007e96:	021b      	lsls	r3, r3, #8
 8007e98:	430b      	orrs	r3, r1
 8007e9a:	4918      	ldr	r1, [pc, #96]	; (8007efc <MX_LWIP_Init+0x244>)
 8007e9c:	78c9      	ldrb	r1, [r1, #3]
 8007e9e:	430b      	orrs	r3, r1
 8007ea0:	0e1b      	lsrs	r3, r3, #24
 8007ea2:	4313      	orrs	r3, r2
 8007ea4:	4a18      	ldr	r2, [pc, #96]	; (8007f08 <MX_LWIP_Init+0x250>)
 8007ea6:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8007ea8:	4b18      	ldr	r3, [pc, #96]	; (8007f0c <MX_LWIP_Init+0x254>)
 8007eaa:	9302      	str	r3, [sp, #8]
 8007eac:	4b18      	ldr	r3, [pc, #96]	; (8007f10 <MX_LWIP_Init+0x258>)
 8007eae:	9301      	str	r3, [sp, #4]
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	9300      	str	r3, [sp, #0]
 8007eb4:	4b14      	ldr	r3, [pc, #80]	; (8007f08 <MX_LWIP_Init+0x250>)
 8007eb6:	4a13      	ldr	r2, [pc, #76]	; (8007f04 <MX_LWIP_Init+0x24c>)
 8007eb8:	4911      	ldr	r1, [pc, #68]	; (8007f00 <MX_LWIP_Init+0x248>)
 8007eba:	4816      	ldr	r0, [pc, #88]	; (8007f14 <MX_LWIP_Init+0x25c>)
 8007ebc:	f001 fa06 	bl	80092cc <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8007ec0:	4814      	ldr	r0, [pc, #80]	; (8007f14 <MX_LWIP_Init+0x25c>)
 8007ec2:	f001 fbb5 	bl	8009630 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8007ec6:	4b13      	ldr	r3, [pc, #76]	; (8007f14 <MX_LWIP_Init+0x25c>)
 8007ec8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007ecc:	089b      	lsrs	r3, r3, #2
 8007ece:	f003 0301 	and.w	r3, r3, #1
 8007ed2:	b2db      	uxtb	r3, r3
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d003      	beq.n	8007ee0 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8007ed8:	480e      	ldr	r0, [pc, #56]	; (8007f14 <MX_LWIP_Init+0x25c>)
 8007eda:	f001 fbb9 	bl	8009650 <netif_set_up>
 8007ede:	e002      	b.n	8007ee6 <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8007ee0:	480c      	ldr	r0, [pc, #48]	; (8007f14 <MX_LWIP_Init+0x25c>)
 8007ee2:	f001 fc21 	bl	8009728 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8007ee6:	490c      	ldr	r1, [pc, #48]	; (8007f18 <MX_LWIP_Init+0x260>)
 8007ee8:	480a      	ldr	r0, [pc, #40]	; (8007f14 <MX_LWIP_Init+0x25c>)
 8007eea:	f001 fcb3 	bl	8009854 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8007eee:	bf00      	nop
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	bd80      	pop	{r7, pc}
 8007ef4:	24000730 	.word	0x24000730
 8007ef8:	2400072c 	.word	0x2400072c
 8007efc:	240006ec 	.word	0x240006ec
 8007f00:	24000724 	.word	0x24000724
 8007f04:	24000734 	.word	0x24000734
 8007f08:	24000738 	.word	0x24000738
 8007f0c:	08012f59 	.word	0x08012f59
 8007f10:	080084d9 	.word	0x080084d9
 8007f14:	240006f0 	.word	0x240006f0
 8007f18:	08007f6d 	.word	0x08007f6d

08007f1c <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b082      	sub	sp, #8
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 8007f24:	f7f9 fd30 	bl	8001988 <HAL_GetTick>
 8007f28:	4602      	mov	r2, r0
 8007f2a:	4b08      	ldr	r3, [pc, #32]	; (8007f4c <Ethernet_Link_Periodic_Handle+0x30>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	1ad3      	subs	r3, r2, r3
 8007f30:	2b63      	cmp	r3, #99	; 0x63
 8007f32:	d907      	bls.n	8007f44 <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 8007f34:	f7f9 fd28 	bl	8001988 <HAL_GetTick>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	4a04      	ldr	r2, [pc, #16]	; (8007f4c <Ethernet_Link_Periodic_Handle+0x30>)
 8007f3c:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 8007f3e:	6878      	ldr	r0, [r7, #4]
 8007f40:	f000 fb5e 	bl	8008600 <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 8007f44:	bf00      	nop
 8007f46:	3708      	adds	r7, #8
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	bd80      	pop	{r7, pc}
 8007f4c:	24000728 	.word	0x24000728

08007f50 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8007f54:	4804      	ldr	r0, [pc, #16]	; (8007f68 <MX_LWIP_Process+0x18>)
 8007f56:	f000 fa9f 	bl	8008498 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 8007f5a:	f008 fbf1 	bl	8010740 <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 8007f5e:	4802      	ldr	r0, [pc, #8]	; (8007f68 <MX_LWIP_Process+0x18>)
 8007f60:	f7ff ffdc 	bl	8007f1c <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8007f64:	bf00      	nop
 8007f66:	bd80      	pop	{r7, pc}
 8007f68:	240006f0 	.word	0x240006f0

08007f6c <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8007f6c:	b480      	push	{r7}
 8007f6e:	b083      	sub	sp, #12
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8007f74:	bf00      	nop
 8007f76:	370c      	adds	r7, #12
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7e:	4770      	bx	lr

08007f80 <HAL_ETH_MspInit>:
/* Private functions ---------------------------------------------------------*/
void pbuf_free_custom(struct pbuf *p);
void Error_Handler(void);

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b08e      	sub	sp, #56	; 0x38
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007f88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	601a      	str	r2, [r3, #0]
 8007f90:	605a      	str	r2, [r3, #4]
 8007f92:	609a      	str	r2, [r3, #8]
 8007f94:	60da      	str	r2, [r3, #12]
 8007f96:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	4a5d      	ldr	r2, [pc, #372]	; (8008114 <HAL_ETH_MspInit+0x194>)
 8007f9e:	4293      	cmp	r3, r2
 8007fa0:	f040 80b3 	bne.w	800810a <HAL_ETH_MspInit+0x18a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8007fa4:	4b5c      	ldr	r3, [pc, #368]	; (8008118 <HAL_ETH_MspInit+0x198>)
 8007fa6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007faa:	4a5b      	ldr	r2, [pc, #364]	; (8008118 <HAL_ETH_MspInit+0x198>)
 8007fac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007fb0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8007fb4:	4b58      	ldr	r3, [pc, #352]	; (8008118 <HAL_ETH_MspInit+0x198>)
 8007fb6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007fba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007fbe:	623b      	str	r3, [r7, #32]
 8007fc0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8007fc2:	4b55      	ldr	r3, [pc, #340]	; (8008118 <HAL_ETH_MspInit+0x198>)
 8007fc4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007fc8:	4a53      	ldr	r2, [pc, #332]	; (8008118 <HAL_ETH_MspInit+0x198>)
 8007fca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007fce:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8007fd2:	4b51      	ldr	r3, [pc, #324]	; (8008118 <HAL_ETH_MspInit+0x198>)
 8007fd4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007fd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007fdc:	61fb      	str	r3, [r7, #28]
 8007fde:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8007fe0:	4b4d      	ldr	r3, [pc, #308]	; (8008118 <HAL_ETH_MspInit+0x198>)
 8007fe2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007fe6:	4a4c      	ldr	r2, [pc, #304]	; (8008118 <HAL_ETH_MspInit+0x198>)
 8007fe8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007fec:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8007ff0:	4b49      	ldr	r3, [pc, #292]	; (8008118 <HAL_ETH_MspInit+0x198>)
 8007ff2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007ff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ffa:	61bb      	str	r3, [r7, #24]
 8007ffc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007ffe:	4b46      	ldr	r3, [pc, #280]	; (8008118 <HAL_ETH_MspInit+0x198>)
 8008000:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008004:	4a44      	ldr	r2, [pc, #272]	; (8008118 <HAL_ETH_MspInit+0x198>)
 8008006:	f043 0304 	orr.w	r3, r3, #4
 800800a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800800e:	4b42      	ldr	r3, [pc, #264]	; (8008118 <HAL_ETH_MspInit+0x198>)
 8008010:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008014:	f003 0304 	and.w	r3, r3, #4
 8008018:	617b      	str	r3, [r7, #20]
 800801a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800801c:	4b3e      	ldr	r3, [pc, #248]	; (8008118 <HAL_ETH_MspInit+0x198>)
 800801e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008022:	4a3d      	ldr	r2, [pc, #244]	; (8008118 <HAL_ETH_MspInit+0x198>)
 8008024:	f043 0301 	orr.w	r3, r3, #1
 8008028:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800802c:	4b3a      	ldr	r3, [pc, #232]	; (8008118 <HAL_ETH_MspInit+0x198>)
 800802e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008032:	f003 0301 	and.w	r3, r3, #1
 8008036:	613b      	str	r3, [r7, #16]
 8008038:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800803a:	4b37      	ldr	r3, [pc, #220]	; (8008118 <HAL_ETH_MspInit+0x198>)
 800803c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008040:	4a35      	ldr	r2, [pc, #212]	; (8008118 <HAL_ETH_MspInit+0x198>)
 8008042:	f043 0302 	orr.w	r3, r3, #2
 8008046:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800804a:	4b33      	ldr	r3, [pc, #204]	; (8008118 <HAL_ETH_MspInit+0x198>)
 800804c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008050:	f003 0302 	and.w	r3, r3, #2
 8008054:	60fb      	str	r3, [r7, #12]
 8008056:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8008058:	4b2f      	ldr	r3, [pc, #188]	; (8008118 <HAL_ETH_MspInit+0x198>)
 800805a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800805e:	4a2e      	ldr	r2, [pc, #184]	; (8008118 <HAL_ETH_MspInit+0x198>)
 8008060:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008064:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008068:	4b2b      	ldr	r3, [pc, #172]	; (8008118 <HAL_ETH_MspInit+0x198>)
 800806a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800806e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008072:	60bb      	str	r3, [r7, #8]
 8008074:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8008076:	2332      	movs	r3, #50	; 0x32
 8008078:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800807a:	2302      	movs	r3, #2
 800807c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800807e:	2300      	movs	r3, #0
 8008080:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008082:	2303      	movs	r3, #3
 8008084:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008086:	230b      	movs	r3, #11
 8008088:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800808a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800808e:	4619      	mov	r1, r3
 8008090:	4822      	ldr	r0, [pc, #136]	; (800811c <HAL_ETH_MspInit+0x19c>)
 8008092:	f7fb fcbf 	bl	8003a14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8008096:	2386      	movs	r3, #134	; 0x86
 8008098:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800809a:	2302      	movs	r3, #2
 800809c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800809e:	2300      	movs	r3, #0
 80080a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80080a2:	2303      	movs	r3, #3
 80080a4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80080a6:	230b      	movs	r3, #11
 80080a8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80080aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80080ae:	4619      	mov	r1, r3
 80080b0:	481b      	ldr	r0, [pc, #108]	; (8008120 <HAL_ETH_MspInit+0x1a0>)
 80080b2:	f7fb fcaf 	bl	8003a14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80080b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80080ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80080bc:	2302      	movs	r3, #2
 80080be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080c0:	2300      	movs	r3, #0
 80080c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80080c4:	2303      	movs	r3, #3
 80080c6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80080c8:	230b      	movs	r3, #11
 80080ca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80080cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80080d0:	4619      	mov	r1, r3
 80080d2:	4814      	ldr	r0, [pc, #80]	; (8008124 <HAL_ETH_MspInit+0x1a4>)
 80080d4:	f7fb fc9e 	bl	8003a14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80080d8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80080dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80080de:	2302      	movs	r3, #2
 80080e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080e2:	2300      	movs	r3, #0
 80080e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80080e6:	2303      	movs	r3, #3
 80080e8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80080ea:	230b      	movs	r3, #11
 80080ec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80080ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80080f2:	4619      	mov	r1, r3
 80080f4:	480c      	ldr	r0, [pc, #48]	; (8008128 <HAL_ETH_MspInit+0x1a8>)
 80080f6:	f7fb fc8d 	bl	8003a14 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 80080fa:	2200      	movs	r2, #0
 80080fc:	2100      	movs	r1, #0
 80080fe:	203d      	movs	r0, #61	; 0x3d
 8008100:	f7f9 fd6d 	bl	8001bde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8008104:	203d      	movs	r0, #61	; 0x3d
 8008106:	f7f9 fd84 	bl	8001c12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800810a:	bf00      	nop
 800810c:	3738      	adds	r7, #56	; 0x38
 800810e:	46bd      	mov	sp, r7
 8008110:	bd80      	pop	{r7, pc}
 8008112:	bf00      	nop
 8008114:	40028000 	.word	0x40028000
 8008118:	58024400 	.word	0x58024400
 800811c:	58020800 	.word	0x58020800
 8008120:	58020000 	.word	0x58020000
 8008124:	58020400 	.word	0x58020400
 8008128:	58021800 	.word	0x58021800

0800812c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b086      	sub	sp, #24
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8008134:	2300      	movs	r3, #0
 8008136:	74fb      	strb	r3, [r7, #19]
  uint32_t idx = 0;
 8008138:	2300      	movs	r3, #0
 800813a:	617b      	str	r3, [r7, #20]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800813c:	4b4a      	ldr	r3, [pc, #296]	; (8008268 <low_level_init+0x13c>)
 800813e:	4a4b      	ldr	r2, [pc, #300]	; (800826c <low_level_init+0x140>)
 8008140:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8008142:	2300      	movs	r3, #0
 8008144:	733b      	strb	r3, [r7, #12]
  MACAddr[1] = 0x80;
 8008146:	2380      	movs	r3, #128	; 0x80
 8008148:	737b      	strb	r3, [r7, #13]
  MACAddr[2] = 0xE1;
 800814a:	23e1      	movs	r3, #225	; 0xe1
 800814c:	73bb      	strb	r3, [r7, #14]
  MACAddr[3] = 0x00;
 800814e:	2300      	movs	r3, #0
 8008150:	73fb      	strb	r3, [r7, #15]
  MACAddr[4] = 0x00;
 8008152:	2300      	movs	r3, #0
 8008154:	743b      	strb	r3, [r7, #16]
  MACAddr[5] = 0x00;
 8008156:	2300      	movs	r3, #0
 8008158:	747b      	strb	r3, [r7, #17]
  heth.Init.MACAddr = &MACAddr[0];
 800815a:	4a43      	ldr	r2, [pc, #268]	; (8008268 <low_level_init+0x13c>)
 800815c:	f107 030c 	add.w	r3, r7, #12
 8008160:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8008162:	4b41      	ldr	r3, [pc, #260]	; (8008268 <low_level_init+0x13c>)
 8008164:	2201      	movs	r2, #1
 8008166:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8008168:	4b3f      	ldr	r3, [pc, #252]	; (8008268 <low_level_init+0x13c>)
 800816a:	4a41      	ldr	r2, [pc, #260]	; (8008270 <low_level_init+0x144>)
 800816c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800816e:	4b3e      	ldr	r3, [pc, #248]	; (8008268 <low_level_init+0x13c>)
 8008170:	4a40      	ldr	r2, [pc, #256]	; (8008274 <low_level_init+0x148>)
 8008172:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8008174:	4b3c      	ldr	r3, [pc, #240]	; (8008268 <low_level_init+0x13c>)
 8008176:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800817a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800817c:	483a      	ldr	r0, [pc, #232]	; (8008268 <low_level_init+0x13c>)
 800817e:	f7f9 fde5 	bl	8001d4c <HAL_ETH_Init>
 8008182:	4603      	mov	r3, r0
 8008184:	74fb      	strb	r3, [r7, #19]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8008186:	2234      	movs	r2, #52	; 0x34
 8008188:	2100      	movs	r1, #0
 800818a:	483b      	ldr	r0, [pc, #236]	; (8008278 <low_level_init+0x14c>)
 800818c:	f00a fffa 	bl	8013184 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8008190:	4b39      	ldr	r3, [pc, #228]	; (8008278 <low_level_init+0x14c>)
 8008192:	2221      	movs	r2, #33	; 0x21
 8008194:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8008196:	4b38      	ldr	r3, [pc, #224]	; (8008278 <low_level_init+0x14c>)
 8008198:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800819c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800819e:	4b36      	ldr	r3, [pc, #216]	; (8008278 <low_level_init+0x14c>)
 80081a0:	2200      	movs	r2, #0
 80081a2:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 80081a4:	4835      	ldr	r0, [pc, #212]	; (800827c <low_level_init+0x150>)
 80081a6:	f000 ff59 	bl	800905c <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2206      	movs	r2, #6
 80081ae:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80081b2:	4b2d      	ldr	r3, [pc, #180]	; (8008268 <low_level_init+0x13c>)
 80081b4:	685b      	ldr	r3, [r3, #4]
 80081b6:	781a      	ldrb	r2, [r3, #0]
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80081be:	4b2a      	ldr	r3, [pc, #168]	; (8008268 <low_level_init+0x13c>)
 80081c0:	685b      	ldr	r3, [r3, #4]
 80081c2:	785a      	ldrb	r2, [r3, #1]
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80081ca:	4b27      	ldr	r3, [pc, #156]	; (8008268 <low_level_init+0x13c>)
 80081cc:	685b      	ldr	r3, [r3, #4]
 80081ce:	789a      	ldrb	r2, [r3, #2]
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80081d6:	4b24      	ldr	r3, [pc, #144]	; (8008268 <low_level_init+0x13c>)
 80081d8:	685b      	ldr	r3, [r3, #4]
 80081da:	78da      	ldrb	r2, [r3, #3]
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80081e2:	4b21      	ldr	r3, [pc, #132]	; (8008268 <low_level_init+0x13c>)
 80081e4:	685b      	ldr	r3, [r3, #4]
 80081e6:	791a      	ldrb	r2, [r3, #4]
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80081ee:	4b1e      	ldr	r3, [pc, #120]	; (8008268 <low_level_init+0x13c>)
 80081f0:	685b      	ldr	r3, [r3, #4]
 80081f2:	795a      	ldrb	r2, [r3, #5]
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8008200:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008208:	f043 030a 	orr.w	r3, r3, #10
 800820c:	b2da      	uxtb	r2, r3
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 8008214:	2300      	movs	r3, #0
 8008216:	617b      	str	r3, [r7, #20]
 8008218:	e00e      	b.n	8008238 <low_level_init+0x10c>
  {
    HAL_ETH_DescAssignMemory(&heth, idx, Rx_Buff[idx], NULL);
 800821a:	697b      	ldr	r3, [r7, #20]
 800821c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8008220:	fb02 f303 	mul.w	r3, r2, r3
 8008224:	4a16      	ldr	r2, [pc, #88]	; (8008280 <low_level_init+0x154>)
 8008226:	441a      	add	r2, r3
 8008228:	2300      	movs	r3, #0
 800822a:	6979      	ldr	r1, [r7, #20]
 800822c:	480e      	ldr	r0, [pc, #56]	; (8008268 <low_level_init+0x13c>)
 800822e:	f7f9 fe67 	bl	8001f00 <HAL_ETH_DescAssignMemory>
  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 8008232:	697b      	ldr	r3, [r7, #20]
 8008234:	3301      	adds	r3, #1
 8008236:	617b      	str	r3, [r7, #20]
 8008238:	697b      	ldr	r3, [r7, #20]
 800823a:	2b03      	cmp	r3, #3
 800823c:	d9ed      	bls.n	800821a <low_level_init+0xee>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800823e:	4911      	ldr	r1, [pc, #68]	; (8008284 <low_level_init+0x158>)
 8008240:	4811      	ldr	r0, [pc, #68]	; (8008288 <low_level_init+0x15c>)
 8008242:	f7f9 f9ba 	bl	80015ba <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8008246:	4810      	ldr	r0, [pc, #64]	; (8008288 <low_level_init+0x15c>)
 8008248:	f7f9 f9e9 	bl	800161e <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800824c:	7cfb      	ldrb	r3, [r7, #19]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d103      	bne.n	800825a <low_level_init+0x12e>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8008252:	6878      	ldr	r0, [r7, #4]
 8008254:	f000 f9d4 	bl	8008600 <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8008258:	e001      	b.n	800825e <low_level_init+0x132>
    Error_Handler();
 800825a:	f7f8 fcfd 	bl	8000c58 <Error_Handler>
}
 800825e:	bf00      	nop
 8008260:	3718      	adds	r7, #24
 8008262:	46bd      	mov	sp, r7
 8008264:	bd80      	pop	{r7, pc}
 8008266:	bf00      	nop
 8008268:	24000828 	.word	0x24000828
 800826c:	40028000 	.word	0x40028000
 8008270:	30040060 	.word	0x30040060
 8008274:	30040000 	.word	0x30040000
 8008278:	240008b0 	.word	0x240008b0
 800827c:	08016c4c 	.word	0x08016c4c
 8008280:	30040200 	.word	0x30040200
 8008284:	24000010 	.word	0x24000010
 8008288:	24000808 	.word	0x24000808

0800828c <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b092      	sub	sp, #72	; 0x48
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
 8008294:	6039      	str	r1, [r7, #0]
  uint32_t i=0;
 8008296:	2300      	movs	r3, #0
 8008298:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q;
  err_t errval = ERR_OK;
 800829a:	2300      	movs	r3, #0
 800829c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT];

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 80082a0:	f107 030c 	add.w	r3, r7, #12
 80082a4:	2230      	movs	r2, #48	; 0x30
 80082a6:	2100      	movs	r1, #0
 80082a8:	4618      	mov	r0, r3
 80082aa:	f00a ff6b 	bl	8013184 <memset>

  for(q = p; q != NULL; q = q->next)
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	643b      	str	r3, [r7, #64]	; 0x40
 80082b2:	e049      	b.n	8008348 <low_level_output+0xbc>
  {
    if(i >= ETH_TX_DESC_CNT)
 80082b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80082b6:	2b03      	cmp	r3, #3
 80082b8:	d902      	bls.n	80082c0 <low_level_output+0x34>
      return ERR_IF;
 80082ba:	f06f 030b 	mvn.w	r3, #11
 80082be:	e056      	b.n	800836e <low_level_output+0xe2>

    Txbuffer[i].buffer = q->payload;
 80082c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082c2:	6859      	ldr	r1, [r3, #4]
 80082c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80082c6:	4613      	mov	r3, r2
 80082c8:	005b      	lsls	r3, r3, #1
 80082ca:	4413      	add	r3, r2
 80082cc:	009b      	lsls	r3, r3, #2
 80082ce:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80082d2:	4413      	add	r3, r2
 80082d4:	3b3c      	subs	r3, #60	; 0x3c
 80082d6:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 80082d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082da:	895b      	ldrh	r3, [r3, #10]
 80082dc:	4619      	mov	r1, r3
 80082de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80082e0:	4613      	mov	r3, r2
 80082e2:	005b      	lsls	r3, r3, #1
 80082e4:	4413      	add	r3, r2
 80082e6:	009b      	lsls	r3, r3, #2
 80082e8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80082ec:	4413      	add	r3, r2
 80082ee:	3b38      	subs	r3, #56	; 0x38
 80082f0:	6019      	str	r1, [r3, #0]

    if(i>0)
 80082f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d012      	beq.n	800831e <low_level_output+0x92>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 80082f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80082fa:	1e5a      	subs	r2, r3, #1
 80082fc:	f107 000c 	add.w	r0, r7, #12
 8008300:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008302:	460b      	mov	r3, r1
 8008304:	005b      	lsls	r3, r3, #1
 8008306:	440b      	add	r3, r1
 8008308:	009b      	lsls	r3, r3, #2
 800830a:	18c1      	adds	r1, r0, r3
 800830c:	4613      	mov	r3, r2
 800830e:	005b      	lsls	r3, r3, #1
 8008310:	4413      	add	r3, r2
 8008312:	009b      	lsls	r3, r3, #2
 8008314:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8008318:	4413      	add	r3, r2
 800831a:	3b34      	subs	r3, #52	; 0x34
 800831c:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800831e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d10a      	bne.n	800833c <low_level_output+0xb0>
    {
      Txbuffer[i].next = NULL;
 8008326:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008328:	4613      	mov	r3, r2
 800832a:	005b      	lsls	r3, r3, #1
 800832c:	4413      	add	r3, r2
 800832e:	009b      	lsls	r3, r3, #2
 8008330:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8008334:	4413      	add	r3, r2
 8008336:	3b34      	subs	r3, #52	; 0x34
 8008338:	2200      	movs	r2, #0
 800833a:	601a      	str	r2, [r3, #0]
    }

    i++;
 800833c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800833e:	3301      	adds	r3, #1
 8008340:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8008342:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	643b      	str	r3, [r7, #64]	; 0x40
 8008348:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800834a:	2b00      	cmp	r3, #0
 800834c:	d1b2      	bne.n	80082b4 <low_level_output+0x28>
  }

  TxConfig.Length =  p->tot_len;
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	891b      	ldrh	r3, [r3, #8]
 8008352:	461a      	mov	r2, r3
 8008354:	4b08      	ldr	r3, [pc, #32]	; (8008378 <low_level_output+0xec>)
 8008356:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8008358:	4a07      	ldr	r2, [pc, #28]	; (8008378 <low_level_output+0xec>)
 800835a:	f107 030c 	add.w	r3, r7, #12
 800835e:	6093      	str	r3, [r2, #8]

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8008360:	2214      	movs	r2, #20
 8008362:	4905      	ldr	r1, [pc, #20]	; (8008378 <low_level_output+0xec>)
 8008364:	4805      	ldr	r0, [pc, #20]	; (800837c <low_level_output+0xf0>)
 8008366:	f7f9 feb8 	bl	80020da <HAL_ETH_Transmit>

  return errval;
 800836a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800836e:	4618      	mov	r0, r3
 8008370:	3748      	adds	r7, #72	; 0x48
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}
 8008376:	bf00      	nop
 8008378:	240008b0 	.word	0x240008b0
 800837c:	24000828 	.word	0x24000828

08008380 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b098      	sub	sp, #96	; 0x60
 8008384:	af02      	add	r7, sp, #8
 8008386:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8008388:	2300      	movs	r3, #0
 800838a:	653b      	str	r3, [r7, #80]	; 0x50
  ETH_BufferTypeDef RxBuff[ETH_RX_DESC_CNT];
  uint32_t framelength = 0, i = 0;
 800838c:	2300      	movs	r3, #0
 800838e:	60bb      	str	r3, [r7, #8]
 8008390:	2300      	movs	r3, #0
 8008392:	657b      	str	r3, [r7, #84]	; 0x54
  struct pbuf_custom* custom_pbuf;

  memset(RxBuff, 0 , ETH_RX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8008394:	f107 030c 	add.w	r3, r7, #12
 8008398:	2230      	movs	r2, #48	; 0x30
 800839a:	2100      	movs	r1, #0
 800839c:	4618      	mov	r0, r3
 800839e:	f00a fef1 	bl	8013184 <memset>

  for(i = 0; i < ETH_RX_DESC_CNT -1; i++)
 80083a2:	2300      	movs	r3, #0
 80083a4:	657b      	str	r3, [r7, #84]	; 0x54
 80083a6:	e015      	b.n	80083d4 <low_level_input+0x54>
  {
    RxBuff[i].next=&RxBuff[i+1];
 80083a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80083aa:	1c5a      	adds	r2, r3, #1
 80083ac:	f107 010c 	add.w	r1, r7, #12
 80083b0:	4613      	mov	r3, r2
 80083b2:	005b      	lsls	r3, r3, #1
 80083b4:	4413      	add	r3, r2
 80083b6:	009b      	lsls	r3, r3, #2
 80083b8:	4419      	add	r1, r3
 80083ba:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80083bc:	4613      	mov	r3, r2
 80083be:	005b      	lsls	r3, r3, #1
 80083c0:	4413      	add	r3, r2
 80083c2:	009b      	lsls	r3, r3, #2
 80083c4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80083c8:	4413      	add	r3, r2
 80083ca:	3b44      	subs	r3, #68	; 0x44
 80083cc:	6019      	str	r1, [r3, #0]
  for(i = 0; i < ETH_RX_DESC_CNT -1; i++)
 80083ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80083d0:	3301      	adds	r3, #1
 80083d2:	657b      	str	r3, [r7, #84]	; 0x54
 80083d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80083d6:	2b02      	cmp	r3, #2
 80083d8:	d9e6      	bls.n	80083a8 <low_level_input+0x28>
  }

  if (HAL_ETH_IsRxDataAvailable(&heth))
 80083da:	482b      	ldr	r0, [pc, #172]	; (8008488 <low_level_input+0x108>)
 80083dc:	f7f9 ff06 	bl	80021ec <HAL_ETH_IsRxDataAvailable>
 80083e0:	4603      	mov	r3, r0
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d04a      	beq.n	800847c <low_level_input+0xfc>
  {
    HAL_ETH_GetRxDataBuffer(&heth, RxBuff);
 80083e6:	f107 030c 	add.w	r3, r7, #12
 80083ea:	4619      	mov	r1, r3
 80083ec:	4826      	ldr	r0, [pc, #152]	; (8008488 <low_level_input+0x108>)
 80083ee:	f7f9 ffed 	bl	80023cc <HAL_ETH_GetRxDataBuffer>
    HAL_ETH_GetRxDataLength(&heth, &framelength);
 80083f2:	f107 0308 	add.w	r3, r7, #8
 80083f6:	4619      	mov	r1, r3
 80083f8:	4823      	ldr	r0, [pc, #140]	; (8008488 <low_level_input+0x108>)
 80083fa:	f7fa f885 	bl	8002508 <HAL_ETH_GetRxDataLength>

    /* Build Rx descriptor to be ready for next data reception */
    HAL_ETH_BuildRxDescriptors(&heth);
 80083fe:	4822      	ldr	r0, [pc, #136]	; (8008488 <low_level_input+0x108>)
 8008400:	f7fa f8b5 	bl	800256e <HAL_ETH_BuildRxDescriptors>

#if !defined(DUAL_CORE) || defined(CORE_CM7)
    /* Invalidate data cache for ETH Rx Buffers */
    SCB_InvalidateDCache_by_Addr((uint32_t *)RxBuff->buffer, framelength);
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	68ba      	ldr	r2, [r7, #8]
 8008408:	64bb      	str	r3, [r7, #72]	; 0x48
 800840a:	647a      	str	r2, [r7, #68]	; 0x44
    if ( dsize > 0 ) { 
 800840c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800840e:	2b00      	cmp	r3, #0
 8008410:	dd1d      	ble.n	800844e <low_level_input+0xce>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8008412:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008414:	f003 021f 	and.w	r2, r3, #31
 8008418:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800841a:	4413      	add	r3, r2
 800841c:	643b      	str	r3, [r7, #64]	; 0x40
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 800841e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008420:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("dsb 0xF":::"memory");
 8008422:	f3bf 8f4f 	dsb	sy
}
 8008426:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8008428:	4a18      	ldr	r2, [pc, #96]	; (800848c <low_level_input+0x10c>)
 800842a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800842c:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8008430:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008432:	3320      	adds	r3, #32
 8008434:	63fb      	str	r3, [r7, #60]	; 0x3c
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8008436:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008438:	3b20      	subs	r3, #32
 800843a:	643b      	str	r3, [r7, #64]	; 0x40
      } while ( op_size > 0 );
 800843c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800843e:	2b00      	cmp	r3, #0
 8008440:	dcf2      	bgt.n	8008428 <low_level_input+0xa8>
  __ASM volatile ("dsb 0xF":::"memory");
 8008442:	f3bf 8f4f 	dsb	sy
}
 8008446:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8008448:	f3bf 8f6f 	isb	sy
}
 800844c:	bf00      	nop
}
 800844e:	bf00      	nop
#endif

    custom_pbuf  = (struct pbuf_custom*)LWIP_MEMPOOL_ALLOC(RX_POOL);
 8008450:	480f      	ldr	r0, [pc, #60]	; (8008490 <low_level_input+0x110>)
 8008452:	f000 fe77 	bl	8009144 <memp_malloc_pool>
 8008456:	64f8      	str	r0, [r7, #76]	; 0x4c
    custom_pbuf->custom_free_function = pbuf_free_custom;
 8008458:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800845a:	4a0e      	ldr	r2, [pc, #56]	; (8008494 <low_level_input+0x114>)
 800845c:	611a      	str	r2, [r3, #16]

    p = pbuf_alloced_custom(PBUF_RAW, framelength, PBUF_REF, custom_pbuf, RxBuff->buffer, framelength);
 800845e:	68bb      	ldr	r3, [r7, #8]
 8008460:	b299      	uxth	r1, r3
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	68ba      	ldr	r2, [r7, #8]
 8008466:	b292      	uxth	r2, r2
 8008468:	9201      	str	r2, [sp, #4]
 800846a:	9300      	str	r3, [sp, #0]
 800846c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800846e:	2241      	movs	r2, #65	; 0x41
 8008470:	2000      	movs	r0, #0
 8008472:	f001 fbb5 	bl	8009be0 <pbuf_alloced_custom>
 8008476:	6538      	str	r0, [r7, #80]	; 0x50

    return p;
 8008478:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800847a:	e000      	b.n	800847e <low_level_input+0xfe>
  }
  else
  {
    return NULL;
 800847c:	2300      	movs	r3, #0
  }
}
 800847e:	4618      	mov	r0, r3
 8008480:	3758      	adds	r7, #88	; 0x58
 8008482:	46bd      	mov	sp, r7
 8008484:	bd80      	pop	{r7, pc}
 8008486:	bf00      	nop
 8008488:	24000828 	.word	0x24000828
 800848c:	e000ed00 	.word	0xe000ed00
 8008490:	08016c4c 	.word	0x08016c4c
 8008494:	08008535 	.word	0x08008535

08008498 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b084      	sub	sp, #16
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 80084a0:	6878      	ldr	r0, [r7, #4]
 80084a2:	f7ff ff6d 	bl	8008380 <low_level_input>
 80084a6:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d010      	beq.n	80084d0 <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	691b      	ldr	r3, [r3, #16]
 80084b2:	6879      	ldr	r1, [r7, #4]
 80084b4:	68f8      	ldr	r0, [r7, #12]
 80084b6:	4798      	blx	r3
 80084b8:	4603      	mov	r3, r0
 80084ba:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 80084bc:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d006      	beq.n	80084d2 <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 80084c4:	68f8      	ldr	r0, [r7, #12]
 80084c6:	f001 fd45 	bl	8009f54 <pbuf_free>
    p = NULL;
 80084ca:	2300      	movs	r3, #0
 80084cc:	60fb      	str	r3, [r7, #12]
 80084ce:	e000      	b.n	80084d2 <ethernetif_input+0x3a>
  if (p == NULL) return;
 80084d0:	bf00      	nop
  }

}
 80084d2:	3710      	adds	r7, #16
 80084d4:	46bd      	mov	sp, r7
 80084d6:	bd80      	pop	{r7, pc}

080084d8 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b082      	sub	sp, #8
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d106      	bne.n	80084f4 <ethernetif_init+0x1c>
 80084e6:	4b0e      	ldr	r3, [pc, #56]	; (8008520 <ethernetif_init+0x48>)
 80084e8:	f240 12fd 	movw	r2, #509	; 0x1fd
 80084ec:	490d      	ldr	r1, [pc, #52]	; (8008524 <ethernetif_init+0x4c>)
 80084ee:	480e      	ldr	r0, [pc, #56]	; (8008528 <ethernetif_init+0x50>)
 80084f0:	f00a fe50 	bl	8013194 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2273      	movs	r2, #115	; 0x73
 80084f8:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2274      	movs	r2, #116	; 0x74
 8008500:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	4a09      	ldr	r2, [pc, #36]	; (800852c <ethernetif_init+0x54>)
 8008508:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	4a08      	ldr	r2, [pc, #32]	; (8008530 <ethernetif_init+0x58>)
 800850e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f7ff fe0b 	bl	800812c <low_level_init>

  return ERR_OK;
 8008516:	2300      	movs	r3, #0
}
 8008518:	4618      	mov	r0, r3
 800851a:	3708      	adds	r7, #8
 800851c:	46bd      	mov	sp, r7
 800851e:	bd80      	pop	{r7, pc}
 8008520:	08014234 	.word	0x08014234
 8008524:	08014250 	.word	0x08014250
 8008528:	08014260 	.word	0x08014260
 800852c:	080113d1 	.word	0x080113d1
 8008530:	0800828d 	.word	0x0800828d

08008534 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b084      	sub	sp, #16
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	60fb      	str	r3, [r7, #12]

  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8008540:	68f9      	ldr	r1, [r7, #12]
 8008542:	4803      	ldr	r0, [pc, #12]	; (8008550 <pbuf_free_custom+0x1c>)
 8008544:	f000 fe6c 	bl	8009220 <memp_free_pool>
}
 8008548:	bf00      	nop
 800854a:	3710      	adds	r7, #16
 800854c:	46bd      	mov	sp, r7
 800854e:	bd80      	pop	{r7, pc}
 8008550:	08016c4c 	.word	0x08016c4c

08008554 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8008558:	f7f9 fa16 	bl	8001988 <HAL_GetTick>
 800855c:	4603      	mov	r3, r0
}
 800855e:	4618      	mov	r0, r3
 8008560:	bd80      	pop	{r7, pc}
	...

08008564 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8008568:	4802      	ldr	r0, [pc, #8]	; (8008574 <ETH_PHY_IO_Init+0x10>)
 800856a:	f7fa fc41 	bl	8002df0 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800856e:	2300      	movs	r3, #0
}
 8008570:	4618      	mov	r0, r3
 8008572:	bd80      	pop	{r7, pc}
 8008574:	24000828 	.word	0x24000828

08008578 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8008578:	b480      	push	{r7}
 800857a:	af00      	add	r7, sp, #0
  return 0;
 800857c:	2300      	movs	r3, #0
}
 800857e:	4618      	mov	r0, r3
 8008580:	46bd      	mov	sp, r7
 8008582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008586:	4770      	bx	lr

08008588 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b084      	sub	sp, #16
 800858c:	af00      	add	r7, sp, #0
 800858e:	60f8      	str	r0, [r7, #12]
 8008590:	60b9      	str	r1, [r7, #8]
 8008592:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	68ba      	ldr	r2, [r7, #8]
 8008598:	68f9      	ldr	r1, [r7, #12]
 800859a:	4807      	ldr	r0, [pc, #28]	; (80085b8 <ETH_PHY_IO_ReadReg+0x30>)
 800859c:	f7fa f992 	bl	80028c4 <HAL_ETH_ReadPHYRegister>
 80085a0:	4603      	mov	r3, r0
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d002      	beq.n	80085ac <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 80085a6:	f04f 33ff 	mov.w	r3, #4294967295
 80085aa:	e000      	b.n	80085ae <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 80085ac:	2300      	movs	r3, #0
}
 80085ae:	4618      	mov	r0, r3
 80085b0:	3710      	adds	r7, #16
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bd80      	pop	{r7, pc}
 80085b6:	bf00      	nop
 80085b8:	24000828 	.word	0x24000828

080085bc <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b084      	sub	sp, #16
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	60f8      	str	r0, [r7, #12]
 80085c4:	60b9      	str	r1, [r7, #8]
 80085c6:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	68ba      	ldr	r2, [r7, #8]
 80085cc:	68f9      	ldr	r1, [r7, #12]
 80085ce:	4807      	ldr	r0, [pc, #28]	; (80085ec <ETH_PHY_IO_WriteReg+0x30>)
 80085d0:	f7fa f9cc 	bl	800296c <HAL_ETH_WritePHYRegister>
 80085d4:	4603      	mov	r3, r0
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d002      	beq.n	80085e0 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 80085da:	f04f 33ff 	mov.w	r3, #4294967295
 80085de:	e000      	b.n	80085e2 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 80085e0:	2300      	movs	r3, #0
}
 80085e2:	4618      	mov	r0, r3
 80085e4:	3710      	adds	r7, #16
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bd80      	pop	{r7, pc}
 80085ea:	bf00      	nop
 80085ec:	24000828 	.word	0x24000828

080085f0 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80085f4:	f7f9 f9c8 	bl	8001988 <HAL_GetTick>
 80085f8:	4603      	mov	r3, r0
}
 80085fa:	4618      	mov	r0, r3
 80085fc:	bd80      	pop	{r7, pc}
	...

08008600 <ethernet_link_check_state>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @param  argument: netif
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b0a0      	sub	sp, #128	; 0x80
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf;
  int32_t PHYLinkState;
  uint32_t linkchanged = 0, speed = 0, duplex =0;
 8008608:	2300      	movs	r3, #0
 800860a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800860c:	2300      	movs	r3, #0
 800860e:	67bb      	str	r3, [r7, #120]	; 0x78
 8008610:	2300      	movs	r3, #0
 8008612:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8008614:	483a      	ldr	r0, [pc, #232]	; (8008700 <ethernet_link_check_state+0x100>)
 8008616:	f7f9 f8aa 	bl	800176e <LAN8742_GetLinkState>
 800861a:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008622:	089b      	lsrs	r3, r3, #2
 8008624:	f003 0301 	and.w	r3, r3, #1
 8008628:	b2db      	uxtb	r3, r3
 800862a:	2b00      	cmp	r3, #0
 800862c:	d00c      	beq.n	8008648 <ethernet_link_check_state+0x48>
 800862e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008630:	2b01      	cmp	r3, #1
 8008632:	dc09      	bgt.n	8008648 <ethernet_link_check_state+0x48>
  {
    HAL_ETH_Stop(&heth);
 8008634:	4833      	ldr	r0, [pc, #204]	; (8008704 <ethernet_link_check_state+0x104>)
 8008636:	f7f9 fd00 	bl	800203a <HAL_ETH_Stop>
    netif_set_down(netif);
 800863a:	6878      	ldr	r0, [r7, #4]
 800863c:	f001 f874 	bl	8009728 <netif_set_down>
    netif_set_link_down(netif);
 8008640:	6878      	ldr	r0, [r7, #4]
 8008642:	f001 f8d7 	bl	80097f4 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 8008646:	e056      	b.n	80086f6 <ethernet_link_check_state+0xf6>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800864e:	f003 0304 	and.w	r3, r3, #4
 8008652:	2b00      	cmp	r3, #0
 8008654:	d14f      	bne.n	80086f6 <ethernet_link_check_state+0xf6>
 8008656:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008658:	2b01      	cmp	r3, #1
 800865a:	dd4c      	ble.n	80086f6 <ethernet_link_check_state+0xf6>
 800865c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800865e:	3b02      	subs	r3, #2
 8008660:	2b03      	cmp	r3, #3
 8008662:	d82b      	bhi.n	80086bc <ethernet_link_check_state+0xbc>
 8008664:	a201      	add	r2, pc, #4	; (adr r2, 800866c <ethernet_link_check_state+0x6c>)
 8008666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800866a:	bf00      	nop
 800866c:	0800867d 	.word	0x0800867d
 8008670:	0800868f 	.word	0x0800868f
 8008674:	0800869f 	.word	0x0800869f
 8008678:	080086af 	.word	0x080086af
      duplex = ETH_FULLDUPLEX_MODE;
 800867c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008680:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8008682:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008686:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8008688:	2301      	movs	r3, #1
 800868a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800868c:	e017      	b.n	80086be <ethernet_link_check_state+0xbe>
      duplex = ETH_HALFDUPLEX_MODE;
 800868e:	2300      	movs	r3, #0
 8008690:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8008692:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008696:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8008698:	2301      	movs	r3, #1
 800869a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800869c:	e00f      	b.n	80086be <ethernet_link_check_state+0xbe>
      duplex = ETH_FULLDUPLEX_MODE;
 800869e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80086a2:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80086a4:	2300      	movs	r3, #0
 80086a6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80086a8:	2301      	movs	r3, #1
 80086aa:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80086ac:	e007      	b.n	80086be <ethernet_link_check_state+0xbe>
      duplex = ETH_HALFDUPLEX_MODE;
 80086ae:	2300      	movs	r3, #0
 80086b0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80086b2:	2300      	movs	r3, #0
 80086b4:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80086b6:	2301      	movs	r3, #1
 80086b8:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80086ba:	e000      	b.n	80086be <ethernet_link_check_state+0xbe>
      break;
 80086bc:	bf00      	nop
    if(linkchanged)
 80086be:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d018      	beq.n	80086f6 <ethernet_link_check_state+0xf6>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 80086c4:	f107 030c 	add.w	r3, r7, #12
 80086c8:	4619      	mov	r1, r3
 80086ca:	480e      	ldr	r0, [pc, #56]	; (8008704 <ethernet_link_check_state+0x104>)
 80086cc:	f7fa f9a2 	bl	8002a14 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 80086d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80086d2:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 80086d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80086d6:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 80086d8:	f107 030c 	add.w	r3, r7, #12
 80086dc:	4619      	mov	r1, r3
 80086de:	4809      	ldr	r0, [pc, #36]	; (8008704 <ethernet_link_check_state+0x104>)
 80086e0:	f7fa fb6c 	bl	8002dbc <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 80086e4:	4807      	ldr	r0, [pc, #28]	; (8008704 <ethernet_link_check_state+0x104>)
 80086e6:	f7f9 fc4c 	bl	8001f82 <HAL_ETH_Start>
      netif_set_up(netif);
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	f000 ffb0 	bl	8009650 <netif_set_up>
      netif_set_link_up(netif);
 80086f0:	6878      	ldr	r0, [r7, #4]
 80086f2:	f001 f84b 	bl	800978c <netif_set_link_up>
}
 80086f6:	bf00      	nop
 80086f8:	3780      	adds	r7, #128	; 0x80
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bd80      	pop	{r7, pc}
 80086fe:	bf00      	nop
 8008700:	24000808 	.word	0x24000808
 8008704:	24000828 	.word	0x24000828

08008708 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8008708:	b480      	push	{r7}
 800870a:	b083      	sub	sp, #12
 800870c:	af00      	add	r7, sp, #0
 800870e:	4603      	mov	r3, r0
 8008710:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8008712:	88fb      	ldrh	r3, [r7, #6]
 8008714:	021b      	lsls	r3, r3, #8
 8008716:	b21a      	sxth	r2, r3
 8008718:	88fb      	ldrh	r3, [r7, #6]
 800871a:	0a1b      	lsrs	r3, r3, #8
 800871c:	b29b      	uxth	r3, r3
 800871e:	b21b      	sxth	r3, r3
 8008720:	4313      	orrs	r3, r2
 8008722:	b21b      	sxth	r3, r3
 8008724:	b29b      	uxth	r3, r3
}
 8008726:	4618      	mov	r0, r3
 8008728:	370c      	adds	r7, #12
 800872a:	46bd      	mov	sp, r7
 800872c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008730:	4770      	bx	lr

08008732 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8008732:	b480      	push	{r7}
 8008734:	b083      	sub	sp, #12
 8008736:	af00      	add	r7, sp, #0
 8008738:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	061a      	lsls	r2, r3, #24
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	021b      	lsls	r3, r3, #8
 8008742:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008746:	431a      	orrs	r2, r3
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	0a1b      	lsrs	r3, r3, #8
 800874c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008750:	431a      	orrs	r2, r3
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	0e1b      	lsrs	r3, r3, #24
 8008756:	4313      	orrs	r3, r2
}
 8008758:	4618      	mov	r0, r3
 800875a:	370c      	adds	r7, #12
 800875c:	46bd      	mov	sp, r7
 800875e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008762:	4770      	bx	lr

08008764 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 8008764:	b480      	push	{r7}
 8008766:	b089      	sub	sp, #36	; 0x24
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
 800876c:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 8008772:	2300      	movs	r3, #0
 8008774:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 8008776:	2300      	movs	r3, #0
 8008778:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800877a:	69fb      	ldr	r3, [r7, #28]
 800877c:	f003 0301 	and.w	r3, r3, #1
 8008780:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 8008782:	693b      	ldr	r3, [r7, #16]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d00d      	beq.n	80087a4 <lwip_standard_chksum+0x40>
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	2b00      	cmp	r3, #0
 800878c:	dd0a      	ble.n	80087a4 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800878e:	69fa      	ldr	r2, [r7, #28]
 8008790:	1c53      	adds	r3, r2, #1
 8008792:	61fb      	str	r3, [r7, #28]
 8008794:	f107 030e 	add.w	r3, r7, #14
 8008798:	3301      	adds	r3, #1
 800879a:	7812      	ldrb	r2, [r2, #0]
 800879c:	701a      	strb	r2, [r3, #0]
    len--;
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	3b01      	subs	r3, #1
 80087a2:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 80087a4:	69fb      	ldr	r3, [r7, #28]
 80087a6:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 80087a8:	e00a      	b.n	80087c0 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 80087aa:	69bb      	ldr	r3, [r7, #24]
 80087ac:	1c9a      	adds	r2, r3, #2
 80087ae:	61ba      	str	r2, [r7, #24]
 80087b0:	881b      	ldrh	r3, [r3, #0]
 80087b2:	461a      	mov	r2, r3
 80087b4:	697b      	ldr	r3, [r7, #20]
 80087b6:	4413      	add	r3, r2
 80087b8:	617b      	str	r3, [r7, #20]
    len -= 2;
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	3b02      	subs	r3, #2
 80087be:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	2b01      	cmp	r3, #1
 80087c4:	dcf1      	bgt.n	80087aa <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	dd04      	ble.n	80087d6 <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 80087cc:	f107 030e 	add.w	r3, r7, #14
 80087d0:	69ba      	ldr	r2, [r7, #24]
 80087d2:	7812      	ldrb	r2, [r2, #0]
 80087d4:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 80087d6:	89fb      	ldrh	r3, [r7, #14]
 80087d8:	461a      	mov	r2, r3
 80087da:	697b      	ldr	r3, [r7, #20]
 80087dc:	4413      	add	r3, r2
 80087de:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 80087e0:	697b      	ldr	r3, [r7, #20]
 80087e2:	0c1a      	lsrs	r2, r3, #16
 80087e4:	697b      	ldr	r3, [r7, #20]
 80087e6:	b29b      	uxth	r3, r3
 80087e8:	4413      	add	r3, r2
 80087ea:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 80087ec:	697b      	ldr	r3, [r7, #20]
 80087ee:	0c1a      	lsrs	r2, r3, #16
 80087f0:	697b      	ldr	r3, [r7, #20]
 80087f2:	b29b      	uxth	r3, r3
 80087f4:	4413      	add	r3, r2
 80087f6:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 80087f8:	693b      	ldr	r3, [r7, #16]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d007      	beq.n	800880e <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 80087fe:	697b      	ldr	r3, [r7, #20]
 8008800:	021b      	lsls	r3, r3, #8
 8008802:	b29a      	uxth	r2, r3
 8008804:	697b      	ldr	r3, [r7, #20]
 8008806:	0a1b      	lsrs	r3, r3, #8
 8008808:	b2db      	uxtb	r3, r3
 800880a:	4313      	orrs	r3, r2
 800880c:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800880e:	697b      	ldr	r3, [r7, #20]
 8008810:	b29b      	uxth	r3, r3
}
 8008812:	4618      	mov	r0, r3
 8008814:	3724      	adds	r7, #36	; 0x24
 8008816:	46bd      	mov	sp, r7
 8008818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881c:	4770      	bx	lr

0800881e <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 800881e:	b580      	push	{r7, lr}
 8008820:	b082      	sub	sp, #8
 8008822:	af00      	add	r7, sp, #0
 8008824:	6078      	str	r0, [r7, #4]
 8008826:	460b      	mov	r3, r1
 8008828:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800882a:	887b      	ldrh	r3, [r7, #2]
 800882c:	4619      	mov	r1, r3
 800882e:	6878      	ldr	r0, [r7, #4]
 8008830:	f7ff ff98 	bl	8008764 <lwip_standard_chksum>
 8008834:	4603      	mov	r3, r0
 8008836:	43db      	mvns	r3, r3
 8008838:	b29b      	uxth	r3, r3
}
 800883a:	4618      	mov	r0, r3
 800883c:	3708      	adds	r7, #8
 800883e:	46bd      	mov	sp, r7
 8008840:	bd80      	pop	{r7, pc}

08008842 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 8008842:	b580      	push	{r7, lr}
 8008844:	b086      	sub	sp, #24
 8008846:	af00      	add	r7, sp, #0
 8008848:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 800884a:	2300      	movs	r3, #0
 800884c:	60fb      	str	r3, [r7, #12]

  acc = 0;
 800884e:	2300      	movs	r3, #0
 8008850:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	613b      	str	r3, [r7, #16]
 8008856:	e02b      	b.n	80088b0 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 8008858:	693b      	ldr	r3, [r7, #16]
 800885a:	685a      	ldr	r2, [r3, #4]
 800885c:	693b      	ldr	r3, [r7, #16]
 800885e:	895b      	ldrh	r3, [r3, #10]
 8008860:	4619      	mov	r1, r3
 8008862:	4610      	mov	r0, r2
 8008864:	f7ff ff7e 	bl	8008764 <lwip_standard_chksum>
 8008868:	4603      	mov	r3, r0
 800886a:	461a      	mov	r2, r3
 800886c:	697b      	ldr	r3, [r7, #20]
 800886e:	4413      	add	r3, r2
 8008870:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 8008872:	697b      	ldr	r3, [r7, #20]
 8008874:	0c1a      	lsrs	r2, r3, #16
 8008876:	697b      	ldr	r3, [r7, #20]
 8008878:	b29b      	uxth	r3, r3
 800887a:	4413      	add	r3, r2
 800887c:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 800887e:	693b      	ldr	r3, [r7, #16]
 8008880:	895b      	ldrh	r3, [r3, #10]
 8008882:	f003 0301 	and.w	r3, r3, #1
 8008886:	b29b      	uxth	r3, r3
 8008888:	2b00      	cmp	r3, #0
 800888a:	d00e      	beq.n	80088aa <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	2b00      	cmp	r3, #0
 8008890:	bf0c      	ite	eq
 8008892:	2301      	moveq	r3, #1
 8008894:	2300      	movne	r3, #0
 8008896:	b2db      	uxtb	r3, r3
 8008898:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 800889a:	697b      	ldr	r3, [r7, #20]
 800889c:	021b      	lsls	r3, r3, #8
 800889e:	b29a      	uxth	r2, r3
 80088a0:	697b      	ldr	r3, [r7, #20]
 80088a2:	0a1b      	lsrs	r3, r3, #8
 80088a4:	b2db      	uxtb	r3, r3
 80088a6:	4313      	orrs	r3, r2
 80088a8:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 80088aa:	693b      	ldr	r3, [r7, #16]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	613b      	str	r3, [r7, #16]
 80088b0:	693b      	ldr	r3, [r7, #16]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d1d0      	bne.n	8008858 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d007      	beq.n	80088cc <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 80088bc:	697b      	ldr	r3, [r7, #20]
 80088be:	021b      	lsls	r3, r3, #8
 80088c0:	b29a      	uxth	r2, r3
 80088c2:	697b      	ldr	r3, [r7, #20]
 80088c4:	0a1b      	lsrs	r3, r3, #8
 80088c6:	b2db      	uxtb	r3, r3
 80088c8:	4313      	orrs	r3, r2
 80088ca:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 80088cc:	697b      	ldr	r3, [r7, #20]
 80088ce:	b29b      	uxth	r3, r3
 80088d0:	43db      	mvns	r3, r3
 80088d2:	b29b      	uxth	r3, r3
}
 80088d4:	4618      	mov	r0, r3
 80088d6:	3718      	adds	r7, #24
 80088d8:	46bd      	mov	sp, r7
 80088da:	bd80      	pop	{r7, pc}

080088dc <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b082      	sub	sp, #8
 80088e0:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80088e2:	2300      	movs	r3, #0
 80088e4:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 80088e6:	f000 f8d9 	bl	8008a9c <mem_init>
  memp_init();
 80088ea:	f000 fbe7 	bl	80090bc <memp_init>
  pbuf_init();
  netif_init();
 80088ee:	f000 fce5 	bl	80092bc <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80088f2:	f007 ff67 	bl	80107c4 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80088f6:	f001 fdcb 	bl	800a490 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 80088fa:	f007 fed9 	bl	80106b0 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80088fe:	bf00      	nop
 8008900:	3708      	adds	r7, #8
 8008902:	46bd      	mov	sp, r7
 8008904:	bd80      	pop	{r7, pc}
	...

08008908 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8008908:	b480      	push	{r7}
 800890a:	b083      	sub	sp, #12
 800890c:	af00      	add	r7, sp, #0
 800890e:	4603      	mov	r3, r0
 8008910:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8008912:	4b05      	ldr	r3, [pc, #20]	; (8008928 <ptr_to_mem+0x20>)
 8008914:	681a      	ldr	r2, [r3, #0]
 8008916:	88fb      	ldrh	r3, [r7, #6]
 8008918:	4413      	add	r3, r2
}
 800891a:	4618      	mov	r0, r3
 800891c:	370c      	adds	r7, #12
 800891e:	46bd      	mov	sp, r7
 8008920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008924:	4770      	bx	lr
 8008926:	bf00      	nop
 8008928:	240000bc 	.word	0x240000bc

0800892c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800892c:	b480      	push	{r7}
 800892e:	b083      	sub	sp, #12
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8008934:	4b05      	ldr	r3, [pc, #20]	; (800894c <mem_to_ptr+0x20>)
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	687a      	ldr	r2, [r7, #4]
 800893a:	1ad3      	subs	r3, r2, r3
 800893c:	b29b      	uxth	r3, r3
}
 800893e:	4618      	mov	r0, r3
 8008940:	370c      	adds	r7, #12
 8008942:	46bd      	mov	sp, r7
 8008944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008948:	4770      	bx	lr
 800894a:	bf00      	nop
 800894c:	240000bc 	.word	0x240000bc

08008950 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8008950:	b590      	push	{r4, r7, lr}
 8008952:	b085      	sub	sp, #20
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8008958:	4b47      	ldr	r3, [pc, #284]	; (8008a78 <plug_holes+0x128>)
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	687a      	ldr	r2, [r7, #4]
 800895e:	429a      	cmp	r2, r3
 8008960:	d206      	bcs.n	8008970 <plug_holes+0x20>
 8008962:	4b46      	ldr	r3, [pc, #280]	; (8008a7c <plug_holes+0x12c>)
 8008964:	f240 12df 	movw	r2, #479	; 0x1df
 8008968:	4945      	ldr	r1, [pc, #276]	; (8008a80 <plug_holes+0x130>)
 800896a:	4846      	ldr	r0, [pc, #280]	; (8008a84 <plug_holes+0x134>)
 800896c:	f00a fc12 	bl	8013194 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8008970:	4b45      	ldr	r3, [pc, #276]	; (8008a88 <plug_holes+0x138>)
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	687a      	ldr	r2, [r7, #4]
 8008976:	429a      	cmp	r2, r3
 8008978:	d306      	bcc.n	8008988 <plug_holes+0x38>
 800897a:	4b40      	ldr	r3, [pc, #256]	; (8008a7c <plug_holes+0x12c>)
 800897c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8008980:	4942      	ldr	r1, [pc, #264]	; (8008a8c <plug_holes+0x13c>)
 8008982:	4840      	ldr	r0, [pc, #256]	; (8008a84 <plug_holes+0x134>)
 8008984:	f00a fc06 	bl	8013194 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	791b      	ldrb	r3, [r3, #4]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d006      	beq.n	800899e <plug_holes+0x4e>
 8008990:	4b3a      	ldr	r3, [pc, #232]	; (8008a7c <plug_holes+0x12c>)
 8008992:	f240 12e1 	movw	r2, #481	; 0x1e1
 8008996:	493e      	ldr	r1, [pc, #248]	; (8008a90 <plug_holes+0x140>)
 8008998:	483a      	ldr	r0, [pc, #232]	; (8008a84 <plug_holes+0x134>)
 800899a:	f00a fbfb 	bl	8013194 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	881b      	ldrh	r3, [r3, #0]
 80089a2:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 80089a6:	4293      	cmp	r3, r2
 80089a8:	d906      	bls.n	80089b8 <plug_holes+0x68>
 80089aa:	4b34      	ldr	r3, [pc, #208]	; (8008a7c <plug_holes+0x12c>)
 80089ac:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 80089b0:	4938      	ldr	r1, [pc, #224]	; (8008a94 <plug_holes+0x144>)
 80089b2:	4834      	ldr	r0, [pc, #208]	; (8008a84 <plug_holes+0x134>)
 80089b4:	f00a fbee 	bl	8013194 <iprintf>

  nmem = ptr_to_mem(mem->next);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	881b      	ldrh	r3, [r3, #0]
 80089bc:	4618      	mov	r0, r3
 80089be:	f7ff ffa3 	bl	8008908 <ptr_to_mem>
 80089c2:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80089c4:	687a      	ldr	r2, [r7, #4]
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	429a      	cmp	r2, r3
 80089ca:	d025      	beq.n	8008a18 <plug_holes+0xc8>
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	791b      	ldrb	r3, [r3, #4]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d121      	bne.n	8008a18 <plug_holes+0xc8>
 80089d4:	4b2c      	ldr	r3, [pc, #176]	; (8008a88 <plug_holes+0x138>)
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	68fa      	ldr	r2, [r7, #12]
 80089da:	429a      	cmp	r2, r3
 80089dc:	d01c      	beq.n	8008a18 <plug_holes+0xc8>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80089de:	4b2e      	ldr	r3, [pc, #184]	; (8008a98 <plug_holes+0x148>)
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	68fa      	ldr	r2, [r7, #12]
 80089e4:	429a      	cmp	r2, r3
 80089e6:	d102      	bne.n	80089ee <plug_holes+0x9e>
      lfree = mem;
 80089e8:	4a2b      	ldr	r2, [pc, #172]	; (8008a98 <plug_holes+0x148>)
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	881a      	ldrh	r2, [r3, #0]
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	881b      	ldrh	r3, [r3, #0]
 80089fa:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 80089fe:	4293      	cmp	r3, r2
 8008a00:	d00a      	beq.n	8008a18 <plug_holes+0xc8>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	881b      	ldrh	r3, [r3, #0]
 8008a06:	4618      	mov	r0, r3
 8008a08:	f7ff ff7e 	bl	8008908 <ptr_to_mem>
 8008a0c:	4604      	mov	r4, r0
 8008a0e:	6878      	ldr	r0, [r7, #4]
 8008a10:	f7ff ff8c 	bl	800892c <mem_to_ptr>
 8008a14:	4603      	mov	r3, r0
 8008a16:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	885b      	ldrh	r3, [r3, #2]
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	f7ff ff73 	bl	8008908 <ptr_to_mem>
 8008a22:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8008a24:	68ba      	ldr	r2, [r7, #8]
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	429a      	cmp	r2, r3
 8008a2a:	d020      	beq.n	8008a6e <plug_holes+0x11e>
 8008a2c:	68bb      	ldr	r3, [r7, #8]
 8008a2e:	791b      	ldrb	r3, [r3, #4]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d11c      	bne.n	8008a6e <plug_holes+0x11e>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8008a34:	4b18      	ldr	r3, [pc, #96]	; (8008a98 <plug_holes+0x148>)
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	687a      	ldr	r2, [r7, #4]
 8008a3a:	429a      	cmp	r2, r3
 8008a3c:	d102      	bne.n	8008a44 <plug_holes+0xf4>
      lfree = pmem;
 8008a3e:	4a16      	ldr	r2, [pc, #88]	; (8008a98 <plug_holes+0x148>)
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	881a      	ldrh	r2, [r3, #0]
 8008a48:	68bb      	ldr	r3, [r7, #8]
 8008a4a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	881b      	ldrh	r3, [r3, #0]
 8008a50:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8008a54:	4293      	cmp	r3, r2
 8008a56:	d00a      	beq.n	8008a6e <plug_holes+0x11e>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	881b      	ldrh	r3, [r3, #0]
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	f7ff ff53 	bl	8008908 <ptr_to_mem>
 8008a62:	4604      	mov	r4, r0
 8008a64:	68b8      	ldr	r0, [r7, #8]
 8008a66:	f7ff ff61 	bl	800892c <mem_to_ptr>
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8008a6e:	bf00      	nop
 8008a70:	3714      	adds	r7, #20
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bd90      	pop	{r4, r7, pc}
 8008a76:	bf00      	nop
 8008a78:	240000bc 	.word	0x240000bc
 8008a7c:	08014288 	.word	0x08014288
 8008a80:	080142b8 	.word	0x080142b8
 8008a84:	080142d0 	.word	0x080142d0
 8008a88:	240000c0 	.word	0x240000c0
 8008a8c:	080142f8 	.word	0x080142f8
 8008a90:	08014314 	.word	0x08014314
 8008a94:	08014330 	.word	0x08014330
 8008a98:	240000c4 	.word	0x240000c4

08008a9c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b082      	sub	sp, #8
 8008aa0:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8008aa2:	4b16      	ldr	r3, [pc, #88]	; (8008afc <mem_init+0x60>)
 8008aa4:	4a16      	ldr	r2, [pc, #88]	; (8008b00 <mem_init+0x64>)
 8008aa6:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8008aa8:	4b14      	ldr	r3, [pc, #80]	; (8008afc <mem_init+0x60>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8008ab4:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2200      	movs	r2, #0
 8008aba:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2200      	movs	r2, #0
 8008ac0:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8008ac2:	f643 70e8 	movw	r0, #16360	; 0x3fe8
 8008ac6:	f7ff ff1f 	bl	8008908 <ptr_to_mem>
 8008aca:	4603      	mov	r3, r0
 8008acc:	4a0d      	ldr	r2, [pc, #52]	; (8008b04 <mem_init+0x68>)
 8008ace:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8008ad0:	4b0c      	ldr	r3, [pc, #48]	; (8008b04 <mem_init+0x68>)
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	2201      	movs	r2, #1
 8008ad6:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8008ad8:	4b0a      	ldr	r3, [pc, #40]	; (8008b04 <mem_init+0x68>)
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8008ae0:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8008ae2:	4b08      	ldr	r3, [pc, #32]	; (8008b04 <mem_init+0x68>)
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8008aea:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8008aec:	4b03      	ldr	r3, [pc, #12]	; (8008afc <mem_init+0x60>)
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	4a05      	ldr	r2, [pc, #20]	; (8008b08 <mem_init+0x6c>)
 8008af2:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8008af4:	bf00      	nop
 8008af6:	3708      	adds	r7, #8
 8008af8:	46bd      	mov	sp, r7
 8008afa:	bd80      	pop	{r7, pc}
 8008afc:	240000bc 	.word	0x240000bc
 8008b00:	30044000 	.word	0x30044000
 8008b04:	240000c0 	.word	0x240000c0
 8008b08:	240000c4 	.word	0x240000c4

08008b0c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b086      	sub	sp, #24
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8008b14:	6878      	ldr	r0, [r7, #4]
 8008b16:	f7ff ff09 	bl	800892c <mem_to_ptr>
 8008b1a:	4603      	mov	r3, r0
 8008b1c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	881b      	ldrh	r3, [r3, #0]
 8008b22:	4618      	mov	r0, r3
 8008b24:	f7ff fef0 	bl	8008908 <ptr_to_mem>
 8008b28:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	885b      	ldrh	r3, [r3, #2]
 8008b2e:	4618      	mov	r0, r3
 8008b30:	f7ff feea 	bl	8008908 <ptr_to_mem>
 8008b34:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	881b      	ldrh	r3, [r3, #0]
 8008b3a:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8008b3e:	4293      	cmp	r3, r2
 8008b40:	d819      	bhi.n	8008b76 <mem_link_valid+0x6a>
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	885b      	ldrh	r3, [r3, #2]
 8008b46:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8008b4a:	4293      	cmp	r3, r2
 8008b4c:	d813      	bhi.n	8008b76 <mem_link_valid+0x6a>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8008b52:	8afa      	ldrh	r2, [r7, #22]
 8008b54:	429a      	cmp	r2, r3
 8008b56:	d004      	beq.n	8008b62 <mem_link_valid+0x56>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	881b      	ldrh	r3, [r3, #0]
 8008b5c:	8afa      	ldrh	r2, [r7, #22]
 8008b5e:	429a      	cmp	r2, r3
 8008b60:	d109      	bne.n	8008b76 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8008b62:	4b08      	ldr	r3, [pc, #32]	; (8008b84 <mem_link_valid+0x78>)
 8008b64:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8008b66:	693a      	ldr	r2, [r7, #16]
 8008b68:	429a      	cmp	r2, r3
 8008b6a:	d006      	beq.n	8008b7a <mem_link_valid+0x6e>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8008b6c:	693b      	ldr	r3, [r7, #16]
 8008b6e:	885b      	ldrh	r3, [r3, #2]
 8008b70:	8afa      	ldrh	r2, [r7, #22]
 8008b72:	429a      	cmp	r2, r3
 8008b74:	d001      	beq.n	8008b7a <mem_link_valid+0x6e>
    return 0;
 8008b76:	2300      	movs	r3, #0
 8008b78:	e000      	b.n	8008b7c <mem_link_valid+0x70>
  }
  return 1;
 8008b7a:	2301      	movs	r3, #1
}
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	3718      	adds	r7, #24
 8008b80:	46bd      	mov	sp, r7
 8008b82:	bd80      	pop	{r7, pc}
 8008b84:	240000c0 	.word	0x240000c0

08008b88 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b084      	sub	sp, #16
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d04c      	beq.n	8008c30 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	f003 0303 	and.w	r3, r3, #3
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d007      	beq.n	8008bb0 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8008ba0:	4b25      	ldr	r3, [pc, #148]	; (8008c38 <mem_free+0xb0>)
 8008ba2:	f240 2273 	movw	r2, #627	; 0x273
 8008ba6:	4925      	ldr	r1, [pc, #148]	; (8008c3c <mem_free+0xb4>)
 8008ba8:	4825      	ldr	r0, [pc, #148]	; (8008c40 <mem_free+0xb8>)
 8008baa:	f00a faf3 	bl	8013194 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8008bae:	e040      	b.n	8008c32 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	3b08      	subs	r3, #8
 8008bb4:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8008bb6:	4b23      	ldr	r3, [pc, #140]	; (8008c44 <mem_free+0xbc>)
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	68fa      	ldr	r2, [r7, #12]
 8008bbc:	429a      	cmp	r2, r3
 8008bbe:	d306      	bcc.n	8008bce <mem_free+0x46>
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	f103 020c 	add.w	r2, r3, #12
 8008bc6:	4b20      	ldr	r3, [pc, #128]	; (8008c48 <mem_free+0xc0>)
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	429a      	cmp	r2, r3
 8008bcc:	d907      	bls.n	8008bde <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8008bce:	4b1a      	ldr	r3, [pc, #104]	; (8008c38 <mem_free+0xb0>)
 8008bd0:	f240 227f 	movw	r2, #639	; 0x27f
 8008bd4:	491d      	ldr	r1, [pc, #116]	; (8008c4c <mem_free+0xc4>)
 8008bd6:	481a      	ldr	r0, [pc, #104]	; (8008c40 <mem_free+0xb8>)
 8008bd8:	f00a fadc 	bl	8013194 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8008bdc:	e029      	b.n	8008c32 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	791b      	ldrb	r3, [r3, #4]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d107      	bne.n	8008bf6 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8008be6:	4b14      	ldr	r3, [pc, #80]	; (8008c38 <mem_free+0xb0>)
 8008be8:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8008bec:	4918      	ldr	r1, [pc, #96]	; (8008c50 <mem_free+0xc8>)
 8008bee:	4814      	ldr	r0, [pc, #80]	; (8008c40 <mem_free+0xb8>)
 8008bf0:	f00a fad0 	bl	8013194 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8008bf4:	e01d      	b.n	8008c32 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8008bf6:	68f8      	ldr	r0, [r7, #12]
 8008bf8:	f7ff ff88 	bl	8008b0c <mem_link_valid>
 8008bfc:	4603      	mov	r3, r0
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d107      	bne.n	8008c12 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8008c02:	4b0d      	ldr	r3, [pc, #52]	; (8008c38 <mem_free+0xb0>)
 8008c04:	f240 2295 	movw	r2, #661	; 0x295
 8008c08:	4912      	ldr	r1, [pc, #72]	; (8008c54 <mem_free+0xcc>)
 8008c0a:	480d      	ldr	r0, [pc, #52]	; (8008c40 <mem_free+0xb8>)
 8008c0c:	f00a fac2 	bl	8013194 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8008c10:	e00f      	b.n	8008c32 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	2200      	movs	r2, #0
 8008c16:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8008c18:	4b0f      	ldr	r3, [pc, #60]	; (8008c58 <mem_free+0xd0>)
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	68fa      	ldr	r2, [r7, #12]
 8008c1e:	429a      	cmp	r2, r3
 8008c20:	d202      	bcs.n	8008c28 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8008c22:	4a0d      	ldr	r2, [pc, #52]	; (8008c58 <mem_free+0xd0>)
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8008c28:	68f8      	ldr	r0, [r7, #12]
 8008c2a:	f7ff fe91 	bl	8008950 <plug_holes>
 8008c2e:	e000      	b.n	8008c32 <mem_free+0xaa>
    return;
 8008c30:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8008c32:	3710      	adds	r7, #16
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bd80      	pop	{r7, pc}
 8008c38:	08014288 	.word	0x08014288
 8008c3c:	0801435c 	.word	0x0801435c
 8008c40:	080142d0 	.word	0x080142d0
 8008c44:	240000bc 	.word	0x240000bc
 8008c48:	240000c0 	.word	0x240000c0
 8008c4c:	08014380 	.word	0x08014380
 8008c50:	0801439c 	.word	0x0801439c
 8008c54:	080143c4 	.word	0x080143c4
 8008c58:	240000c4 	.word	0x240000c4

08008c5c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b088      	sub	sp, #32
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
 8008c64:	460b      	mov	r3, r1
 8008c66:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8008c68:	887b      	ldrh	r3, [r7, #2]
 8008c6a:	3303      	adds	r3, #3
 8008c6c:	b29b      	uxth	r3, r3
 8008c6e:	f023 0303 	bic.w	r3, r3, #3
 8008c72:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8008c74:	8bfb      	ldrh	r3, [r7, #30]
 8008c76:	2b0b      	cmp	r3, #11
 8008c78:	d801      	bhi.n	8008c7e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8008c7a:	230c      	movs	r3, #12
 8008c7c:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8008c7e:	8bfb      	ldrh	r3, [r7, #30]
 8008c80:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8008c84:	4293      	cmp	r3, r2
 8008c86:	d803      	bhi.n	8008c90 <mem_trim+0x34>
 8008c88:	8bfa      	ldrh	r2, [r7, #30]
 8008c8a:	887b      	ldrh	r3, [r7, #2]
 8008c8c:	429a      	cmp	r2, r3
 8008c8e:	d201      	bcs.n	8008c94 <mem_trim+0x38>
    return NULL;
 8008c90:	2300      	movs	r3, #0
 8008c92:	e0d0      	b.n	8008e36 <mem_trim+0x1da>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8008c94:	4b6a      	ldr	r3, [pc, #424]	; (8008e40 <mem_trim+0x1e4>)
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	687a      	ldr	r2, [r7, #4]
 8008c9a:	429a      	cmp	r2, r3
 8008c9c:	d304      	bcc.n	8008ca8 <mem_trim+0x4c>
 8008c9e:	4b69      	ldr	r3, [pc, #420]	; (8008e44 <mem_trim+0x1e8>)
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	687a      	ldr	r2, [r7, #4]
 8008ca4:	429a      	cmp	r2, r3
 8008ca6:	d306      	bcc.n	8008cb6 <mem_trim+0x5a>
 8008ca8:	4b67      	ldr	r3, [pc, #412]	; (8008e48 <mem_trim+0x1ec>)
 8008caa:	f240 22d1 	movw	r2, #721	; 0x2d1
 8008cae:	4967      	ldr	r1, [pc, #412]	; (8008e4c <mem_trim+0x1f0>)
 8008cb0:	4867      	ldr	r0, [pc, #412]	; (8008e50 <mem_trim+0x1f4>)
 8008cb2:	f00a fa6f 	bl	8013194 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8008cb6:	4b62      	ldr	r3, [pc, #392]	; (8008e40 <mem_trim+0x1e4>)
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	687a      	ldr	r2, [r7, #4]
 8008cbc:	429a      	cmp	r2, r3
 8008cbe:	d304      	bcc.n	8008cca <mem_trim+0x6e>
 8008cc0:	4b60      	ldr	r3, [pc, #384]	; (8008e44 <mem_trim+0x1e8>)
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	687a      	ldr	r2, [r7, #4]
 8008cc6:	429a      	cmp	r2, r3
 8008cc8:	d301      	bcc.n	8008cce <mem_trim+0x72>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	e0b3      	b.n	8008e36 <mem_trim+0x1da>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	3b08      	subs	r3, #8
 8008cd2:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8008cd4:	69b8      	ldr	r0, [r7, #24]
 8008cd6:	f7ff fe29 	bl	800892c <mem_to_ptr>
 8008cda:	4603      	mov	r3, r0
 8008cdc:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8008cde:	69bb      	ldr	r3, [r7, #24]
 8008ce0:	881a      	ldrh	r2, [r3, #0]
 8008ce2:	8afb      	ldrh	r3, [r7, #22]
 8008ce4:	1ad3      	subs	r3, r2, r3
 8008ce6:	b29b      	uxth	r3, r3
 8008ce8:	3b08      	subs	r3, #8
 8008cea:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8008cec:	8bfa      	ldrh	r2, [r7, #30]
 8008cee:	8abb      	ldrh	r3, [r7, #20]
 8008cf0:	429a      	cmp	r2, r3
 8008cf2:	d906      	bls.n	8008d02 <mem_trim+0xa6>
 8008cf4:	4b54      	ldr	r3, [pc, #336]	; (8008e48 <mem_trim+0x1ec>)
 8008cf6:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8008cfa:	4956      	ldr	r1, [pc, #344]	; (8008e54 <mem_trim+0x1f8>)
 8008cfc:	4854      	ldr	r0, [pc, #336]	; (8008e50 <mem_trim+0x1f4>)
 8008cfe:	f00a fa49 	bl	8013194 <iprintf>
  if (newsize > size) {
 8008d02:	8bfa      	ldrh	r2, [r7, #30]
 8008d04:	8abb      	ldrh	r3, [r7, #20]
 8008d06:	429a      	cmp	r2, r3
 8008d08:	d901      	bls.n	8008d0e <mem_trim+0xb2>
    /* not supported */
    return NULL;
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	e093      	b.n	8008e36 <mem_trim+0x1da>
  }
  if (newsize == size) {
 8008d0e:	8bfa      	ldrh	r2, [r7, #30]
 8008d10:	8abb      	ldrh	r3, [r7, #20]
 8008d12:	429a      	cmp	r2, r3
 8008d14:	d101      	bne.n	8008d1a <mem_trim+0xbe>
    /* No change in size, simply return */
    return rmem;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	e08d      	b.n	8008e36 <mem_trim+0x1da>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8008d1a:	69bb      	ldr	r3, [r7, #24]
 8008d1c:	881b      	ldrh	r3, [r3, #0]
 8008d1e:	4618      	mov	r0, r3
 8008d20:	f7ff fdf2 	bl	8008908 <ptr_to_mem>
 8008d24:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8008d26:	693b      	ldr	r3, [r7, #16]
 8008d28:	791b      	ldrb	r3, [r3, #4]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d141      	bne.n	8008db2 <mem_trim+0x156>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8008d2e:	69bb      	ldr	r3, [r7, #24]
 8008d30:	881b      	ldrh	r3, [r3, #0]
 8008d32:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8008d36:	4293      	cmp	r3, r2
 8008d38:	d106      	bne.n	8008d48 <mem_trim+0xec>
 8008d3a:	4b43      	ldr	r3, [pc, #268]	; (8008e48 <mem_trim+0x1ec>)
 8008d3c:	f240 22f5 	movw	r2, #757	; 0x2f5
 8008d40:	4945      	ldr	r1, [pc, #276]	; (8008e58 <mem_trim+0x1fc>)
 8008d42:	4843      	ldr	r0, [pc, #268]	; (8008e50 <mem_trim+0x1f4>)
 8008d44:	f00a fa26 	bl	8013194 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8008d48:	693b      	ldr	r3, [r7, #16]
 8008d4a:	881b      	ldrh	r3, [r3, #0]
 8008d4c:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8008d4e:	8afa      	ldrh	r2, [r7, #22]
 8008d50:	8bfb      	ldrh	r3, [r7, #30]
 8008d52:	4413      	add	r3, r2
 8008d54:	b29b      	uxth	r3, r3
 8008d56:	3308      	adds	r3, #8
 8008d58:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8008d5a:	4b40      	ldr	r3, [pc, #256]	; (8008e5c <mem_trim+0x200>)
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	693a      	ldr	r2, [r7, #16]
 8008d60:	429a      	cmp	r2, r3
 8008d62:	d106      	bne.n	8008d72 <mem_trim+0x116>
      lfree = ptr_to_mem(ptr2);
 8008d64:	89fb      	ldrh	r3, [r7, #14]
 8008d66:	4618      	mov	r0, r3
 8008d68:	f7ff fdce 	bl	8008908 <ptr_to_mem>
 8008d6c:	4603      	mov	r3, r0
 8008d6e:	4a3b      	ldr	r2, [pc, #236]	; (8008e5c <mem_trim+0x200>)
 8008d70:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8008d72:	89fb      	ldrh	r3, [r7, #14]
 8008d74:	4618      	mov	r0, r3
 8008d76:	f7ff fdc7 	bl	8008908 <ptr_to_mem>
 8008d7a:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8008d7c:	693b      	ldr	r3, [r7, #16]
 8008d7e:	2200      	movs	r2, #0
 8008d80:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8008d82:	693b      	ldr	r3, [r7, #16]
 8008d84:	89ba      	ldrh	r2, [r7, #12]
 8008d86:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8008d88:	693b      	ldr	r3, [r7, #16]
 8008d8a:	8afa      	ldrh	r2, [r7, #22]
 8008d8c:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8008d8e:	69bb      	ldr	r3, [r7, #24]
 8008d90:	89fa      	ldrh	r2, [r7, #14]
 8008d92:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8008d94:	693b      	ldr	r3, [r7, #16]
 8008d96:	881b      	ldrh	r3, [r3, #0]
 8008d98:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8008d9c:	4293      	cmp	r3, r2
 8008d9e:	d049      	beq.n	8008e34 <mem_trim+0x1d8>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8008da0:	693b      	ldr	r3, [r7, #16]
 8008da2:	881b      	ldrh	r3, [r3, #0]
 8008da4:	4618      	mov	r0, r3
 8008da6:	f7ff fdaf 	bl	8008908 <ptr_to_mem>
 8008daa:	4602      	mov	r2, r0
 8008dac:	89fb      	ldrh	r3, [r7, #14]
 8008dae:	8053      	strh	r3, [r2, #2]
 8008db0:	e040      	b.n	8008e34 <mem_trim+0x1d8>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8008db2:	8bfb      	ldrh	r3, [r7, #30]
 8008db4:	f103 0214 	add.w	r2, r3, #20
 8008db8:	8abb      	ldrh	r3, [r7, #20]
 8008dba:	429a      	cmp	r2, r3
 8008dbc:	d83a      	bhi.n	8008e34 <mem_trim+0x1d8>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8008dbe:	8afa      	ldrh	r2, [r7, #22]
 8008dc0:	8bfb      	ldrh	r3, [r7, #30]
 8008dc2:	4413      	add	r3, r2
 8008dc4:	b29b      	uxth	r3, r3
 8008dc6:	3308      	adds	r3, #8
 8008dc8:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8008dca:	69bb      	ldr	r3, [r7, #24]
 8008dcc:	881b      	ldrh	r3, [r3, #0]
 8008dce:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8008dd2:	4293      	cmp	r3, r2
 8008dd4:	d106      	bne.n	8008de4 <mem_trim+0x188>
 8008dd6:	4b1c      	ldr	r3, [pc, #112]	; (8008e48 <mem_trim+0x1ec>)
 8008dd8:	f240 3216 	movw	r2, #790	; 0x316
 8008ddc:	491e      	ldr	r1, [pc, #120]	; (8008e58 <mem_trim+0x1fc>)
 8008dde:	481c      	ldr	r0, [pc, #112]	; (8008e50 <mem_trim+0x1f4>)
 8008de0:	f00a f9d8 	bl	8013194 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8008de4:	89fb      	ldrh	r3, [r7, #14]
 8008de6:	4618      	mov	r0, r3
 8008de8:	f7ff fd8e 	bl	8008908 <ptr_to_mem>
 8008dec:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8008dee:	4b1b      	ldr	r3, [pc, #108]	; (8008e5c <mem_trim+0x200>)
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	693a      	ldr	r2, [r7, #16]
 8008df4:	429a      	cmp	r2, r3
 8008df6:	d202      	bcs.n	8008dfe <mem_trim+0x1a2>
      lfree = mem2;
 8008df8:	4a18      	ldr	r2, [pc, #96]	; (8008e5c <mem_trim+0x200>)
 8008dfa:	693b      	ldr	r3, [r7, #16]
 8008dfc:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8008dfe:	693b      	ldr	r3, [r7, #16]
 8008e00:	2200      	movs	r2, #0
 8008e02:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8008e04:	69bb      	ldr	r3, [r7, #24]
 8008e06:	881a      	ldrh	r2, [r3, #0]
 8008e08:	693b      	ldr	r3, [r7, #16]
 8008e0a:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8008e0c:	693b      	ldr	r3, [r7, #16]
 8008e0e:	8afa      	ldrh	r2, [r7, #22]
 8008e10:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8008e12:	69bb      	ldr	r3, [r7, #24]
 8008e14:	89fa      	ldrh	r2, [r7, #14]
 8008e16:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8008e18:	693b      	ldr	r3, [r7, #16]
 8008e1a:	881b      	ldrh	r3, [r3, #0]
 8008e1c:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8008e20:	4293      	cmp	r3, r2
 8008e22:	d007      	beq.n	8008e34 <mem_trim+0x1d8>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8008e24:	693b      	ldr	r3, [r7, #16]
 8008e26:	881b      	ldrh	r3, [r3, #0]
 8008e28:	4618      	mov	r0, r3
 8008e2a:	f7ff fd6d 	bl	8008908 <ptr_to_mem>
 8008e2e:	4602      	mov	r2, r0
 8008e30:	89fb      	ldrh	r3, [r7, #14]
 8008e32:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8008e34:	687b      	ldr	r3, [r7, #4]
}
 8008e36:	4618      	mov	r0, r3
 8008e38:	3720      	adds	r7, #32
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bd80      	pop	{r7, pc}
 8008e3e:	bf00      	nop
 8008e40:	240000bc 	.word	0x240000bc
 8008e44:	240000c0 	.word	0x240000c0
 8008e48:	08014288 	.word	0x08014288
 8008e4c:	080143f8 	.word	0x080143f8
 8008e50:	080142d0 	.word	0x080142d0
 8008e54:	08014410 	.word	0x08014410
 8008e58:	08014430 	.word	0x08014430
 8008e5c:	240000c4 	.word	0x240000c4

08008e60 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b088      	sub	sp, #32
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	4603      	mov	r3, r0
 8008e68:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8008e6a:	88fb      	ldrh	r3, [r7, #6]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d101      	bne.n	8008e74 <mem_malloc+0x14>
    return NULL;
 8008e70:	2300      	movs	r3, #0
 8008e72:	e0dd      	b.n	8009030 <mem_malloc+0x1d0>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8008e74:	88fb      	ldrh	r3, [r7, #6]
 8008e76:	3303      	adds	r3, #3
 8008e78:	b29b      	uxth	r3, r3
 8008e7a:	f023 0303 	bic.w	r3, r3, #3
 8008e7e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8008e80:	8bbb      	ldrh	r3, [r7, #28]
 8008e82:	2b0b      	cmp	r3, #11
 8008e84:	d801      	bhi.n	8008e8a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8008e86:	230c      	movs	r3, #12
 8008e88:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8008e8a:	8bbb      	ldrh	r3, [r7, #28]
 8008e8c:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8008e90:	4293      	cmp	r3, r2
 8008e92:	d803      	bhi.n	8008e9c <mem_malloc+0x3c>
 8008e94:	8bba      	ldrh	r2, [r7, #28]
 8008e96:	88fb      	ldrh	r3, [r7, #6]
 8008e98:	429a      	cmp	r2, r3
 8008e9a:	d201      	bcs.n	8008ea0 <mem_malloc+0x40>
    return NULL;
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	e0c7      	b.n	8009030 <mem_malloc+0x1d0>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8008ea0:	4b65      	ldr	r3, [pc, #404]	; (8009038 <mem_malloc+0x1d8>)
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	f7ff fd41 	bl	800892c <mem_to_ptr>
 8008eaa:	4603      	mov	r3, r0
 8008eac:	83fb      	strh	r3, [r7, #30]
 8008eae:	e0b6      	b.n	800901e <mem_malloc+0x1be>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8008eb0:	8bfb      	ldrh	r3, [r7, #30]
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	f7ff fd28 	bl	8008908 <ptr_to_mem>
 8008eb8:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8008eba:	697b      	ldr	r3, [r7, #20]
 8008ebc:	791b      	ldrb	r3, [r3, #4]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	f040 80a6 	bne.w	8009010 <mem_malloc+0x1b0>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8008ec4:	697b      	ldr	r3, [r7, #20]
 8008ec6:	881b      	ldrh	r3, [r3, #0]
 8008ec8:	461a      	mov	r2, r3
 8008eca:	8bfb      	ldrh	r3, [r7, #30]
 8008ecc:	1ad3      	subs	r3, r2, r3
 8008ece:	f1a3 0208 	sub.w	r2, r3, #8
 8008ed2:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8008ed4:	429a      	cmp	r2, r3
 8008ed6:	f0c0 809b 	bcc.w	8009010 <mem_malloc+0x1b0>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8008eda:	697b      	ldr	r3, [r7, #20]
 8008edc:	881b      	ldrh	r3, [r3, #0]
 8008ede:	461a      	mov	r2, r3
 8008ee0:	8bfb      	ldrh	r3, [r7, #30]
 8008ee2:	1ad3      	subs	r3, r2, r3
 8008ee4:	f1a3 0208 	sub.w	r2, r3, #8
 8008ee8:	8bbb      	ldrh	r3, [r7, #28]
 8008eea:	3314      	adds	r3, #20
 8008eec:	429a      	cmp	r2, r3
 8008eee:	d335      	bcc.n	8008f5c <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8008ef0:	8bfa      	ldrh	r2, [r7, #30]
 8008ef2:	8bbb      	ldrh	r3, [r7, #28]
 8008ef4:	4413      	add	r3, r2
 8008ef6:	b29b      	uxth	r3, r3
 8008ef8:	3308      	adds	r3, #8
 8008efa:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8008efc:	8a7b      	ldrh	r3, [r7, #18]
 8008efe:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8008f02:	4293      	cmp	r3, r2
 8008f04:	d106      	bne.n	8008f14 <mem_malloc+0xb4>
 8008f06:	4b4d      	ldr	r3, [pc, #308]	; (800903c <mem_malloc+0x1dc>)
 8008f08:	f240 3287 	movw	r2, #903	; 0x387
 8008f0c:	494c      	ldr	r1, [pc, #304]	; (8009040 <mem_malloc+0x1e0>)
 8008f0e:	484d      	ldr	r0, [pc, #308]	; (8009044 <mem_malloc+0x1e4>)
 8008f10:	f00a f940 	bl	8013194 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8008f14:	8a7b      	ldrh	r3, [r7, #18]
 8008f16:	4618      	mov	r0, r3
 8008f18:	f7ff fcf6 	bl	8008908 <ptr_to_mem>
 8008f1c:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	2200      	movs	r2, #0
 8008f22:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8008f24:	697b      	ldr	r3, [r7, #20]
 8008f26:	881a      	ldrh	r2, [r3, #0]
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	8bfa      	ldrh	r2, [r7, #30]
 8008f30:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8008f32:	697b      	ldr	r3, [r7, #20]
 8008f34:	8a7a      	ldrh	r2, [r7, #18]
 8008f36:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8008f38:	697b      	ldr	r3, [r7, #20]
 8008f3a:	2201      	movs	r2, #1
 8008f3c:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	881b      	ldrh	r3, [r3, #0]
 8008f42:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8008f46:	4293      	cmp	r3, r2
 8008f48:	d00b      	beq.n	8008f62 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	881b      	ldrh	r3, [r3, #0]
 8008f4e:	4618      	mov	r0, r3
 8008f50:	f7ff fcda 	bl	8008908 <ptr_to_mem>
 8008f54:	4602      	mov	r2, r0
 8008f56:	8a7b      	ldrh	r3, [r7, #18]
 8008f58:	8053      	strh	r3, [r2, #2]
 8008f5a:	e002      	b.n	8008f62 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8008f5c:	697b      	ldr	r3, [r7, #20]
 8008f5e:	2201      	movs	r2, #1
 8008f60:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8008f62:	4b35      	ldr	r3, [pc, #212]	; (8009038 <mem_malloc+0x1d8>)
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	697a      	ldr	r2, [r7, #20]
 8008f68:	429a      	cmp	r2, r3
 8008f6a:	d127      	bne.n	8008fbc <mem_malloc+0x15c>
          struct mem *cur = lfree;
 8008f6c:	4b32      	ldr	r3, [pc, #200]	; (8009038 <mem_malloc+0x1d8>)
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8008f72:	e005      	b.n	8008f80 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8008f74:	69bb      	ldr	r3, [r7, #24]
 8008f76:	881b      	ldrh	r3, [r3, #0]
 8008f78:	4618      	mov	r0, r3
 8008f7a:	f7ff fcc5 	bl	8008908 <ptr_to_mem>
 8008f7e:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8008f80:	69bb      	ldr	r3, [r7, #24]
 8008f82:	791b      	ldrb	r3, [r3, #4]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d004      	beq.n	8008f92 <mem_malloc+0x132>
 8008f88:	4b2f      	ldr	r3, [pc, #188]	; (8009048 <mem_malloc+0x1e8>)
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	69ba      	ldr	r2, [r7, #24]
 8008f8e:	429a      	cmp	r2, r3
 8008f90:	d1f0      	bne.n	8008f74 <mem_malloc+0x114>
          }
          lfree = cur;
 8008f92:	4a29      	ldr	r2, [pc, #164]	; (8009038 <mem_malloc+0x1d8>)
 8008f94:	69bb      	ldr	r3, [r7, #24]
 8008f96:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8008f98:	4b27      	ldr	r3, [pc, #156]	; (8009038 <mem_malloc+0x1d8>)
 8008f9a:	681a      	ldr	r2, [r3, #0]
 8008f9c:	4b2a      	ldr	r3, [pc, #168]	; (8009048 <mem_malloc+0x1e8>)
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	429a      	cmp	r2, r3
 8008fa2:	d00b      	beq.n	8008fbc <mem_malloc+0x15c>
 8008fa4:	4b24      	ldr	r3, [pc, #144]	; (8009038 <mem_malloc+0x1d8>)
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	791b      	ldrb	r3, [r3, #4]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d006      	beq.n	8008fbc <mem_malloc+0x15c>
 8008fae:	4b23      	ldr	r3, [pc, #140]	; (800903c <mem_malloc+0x1dc>)
 8008fb0:	f240 32b5 	movw	r2, #949	; 0x3b5
 8008fb4:	4925      	ldr	r1, [pc, #148]	; (800904c <mem_malloc+0x1ec>)
 8008fb6:	4823      	ldr	r0, [pc, #140]	; (8009044 <mem_malloc+0x1e4>)
 8008fb8:	f00a f8ec 	bl	8013194 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8008fbc:	8bba      	ldrh	r2, [r7, #28]
 8008fbe:	697b      	ldr	r3, [r7, #20]
 8008fc0:	4413      	add	r3, r2
 8008fc2:	3308      	adds	r3, #8
 8008fc4:	4a20      	ldr	r2, [pc, #128]	; (8009048 <mem_malloc+0x1e8>)
 8008fc6:	6812      	ldr	r2, [r2, #0]
 8008fc8:	4293      	cmp	r3, r2
 8008fca:	d906      	bls.n	8008fda <mem_malloc+0x17a>
 8008fcc:	4b1b      	ldr	r3, [pc, #108]	; (800903c <mem_malloc+0x1dc>)
 8008fce:	f240 32b9 	movw	r2, #953	; 0x3b9
 8008fd2:	491f      	ldr	r1, [pc, #124]	; (8009050 <mem_malloc+0x1f0>)
 8008fd4:	481b      	ldr	r0, [pc, #108]	; (8009044 <mem_malloc+0x1e4>)
 8008fd6:	f00a f8dd 	bl	8013194 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8008fda:	697b      	ldr	r3, [r7, #20]
 8008fdc:	f003 0303 	and.w	r3, r3, #3
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d006      	beq.n	8008ff2 <mem_malloc+0x192>
 8008fe4:	4b15      	ldr	r3, [pc, #84]	; (800903c <mem_malloc+0x1dc>)
 8008fe6:	f240 32bb 	movw	r2, #955	; 0x3bb
 8008fea:	491a      	ldr	r1, [pc, #104]	; (8009054 <mem_malloc+0x1f4>)
 8008fec:	4815      	ldr	r0, [pc, #84]	; (8009044 <mem_malloc+0x1e4>)
 8008fee:	f00a f8d1 	bl	8013194 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8008ff2:	697b      	ldr	r3, [r7, #20]
 8008ff4:	f003 0303 	and.w	r3, r3, #3
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d006      	beq.n	800900a <mem_malloc+0x1aa>
 8008ffc:	4b0f      	ldr	r3, [pc, #60]	; (800903c <mem_malloc+0x1dc>)
 8008ffe:	f240 32bd 	movw	r2, #957	; 0x3bd
 8009002:	4915      	ldr	r1, [pc, #84]	; (8009058 <mem_malloc+0x1f8>)
 8009004:	480f      	ldr	r0, [pc, #60]	; (8009044 <mem_malloc+0x1e4>)
 8009006:	f00a f8c5 	bl	8013194 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800900a:	697b      	ldr	r3, [r7, #20]
 800900c:	3308      	adds	r3, #8
 800900e:	e00f      	b.n	8009030 <mem_malloc+0x1d0>
         ptr = ptr_to_mem(ptr)->next) {
 8009010:	8bfb      	ldrh	r3, [r7, #30]
 8009012:	4618      	mov	r0, r3
 8009014:	f7ff fc78 	bl	8008908 <ptr_to_mem>
 8009018:	4603      	mov	r3, r0
 800901a:	881b      	ldrh	r3, [r3, #0]
 800901c:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800901e:	8bfa      	ldrh	r2, [r7, #30]
 8009020:	8bb9      	ldrh	r1, [r7, #28]
 8009022:	f643 73e8 	movw	r3, #16360	; 0x3fe8
 8009026:	1a5b      	subs	r3, r3, r1
 8009028:	429a      	cmp	r2, r3
 800902a:	f4ff af41 	bcc.w	8008eb0 <mem_malloc+0x50>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800902e:	2300      	movs	r3, #0
}
 8009030:	4618      	mov	r0, r3
 8009032:	3720      	adds	r7, #32
 8009034:	46bd      	mov	sp, r7
 8009036:	bd80      	pop	{r7, pc}
 8009038:	240000c4 	.word	0x240000c4
 800903c:	08014288 	.word	0x08014288
 8009040:	08014430 	.word	0x08014430
 8009044:	080142d0 	.word	0x080142d0
 8009048:	240000c0 	.word	0x240000c0
 800904c:	08014444 	.word	0x08014444
 8009050:	08014460 	.word	0x08014460
 8009054:	08014490 	.word	0x08014490
 8009058:	080144c0 	.word	0x080144c0

0800905c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800905c:	b480      	push	{r7}
 800905e:	b085      	sub	sp, #20
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	689b      	ldr	r3, [r3, #8]
 8009068:	2200      	movs	r2, #0
 800906a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	685b      	ldr	r3, [r3, #4]
 8009070:	3303      	adds	r3, #3
 8009072:	f023 0303 	bic.w	r3, r3, #3
 8009076:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8009078:	2300      	movs	r3, #0
 800907a:	60fb      	str	r3, [r7, #12]
 800907c:	e011      	b.n	80090a2 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	689b      	ldr	r3, [r3, #8]
 8009082:	681a      	ldr	r2, [r3, #0]
 8009084:	68bb      	ldr	r3, [r7, #8]
 8009086:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	689b      	ldr	r3, [r3, #8]
 800908c:	68ba      	ldr	r2, [r7, #8]
 800908e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	881b      	ldrh	r3, [r3, #0]
 8009094:	461a      	mov	r2, r3
 8009096:	68bb      	ldr	r3, [r7, #8]
 8009098:	4413      	add	r3, r2
 800909a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	3301      	adds	r3, #1
 80090a0:	60fb      	str	r3, [r7, #12]
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	885b      	ldrh	r3, [r3, #2]
 80090a6:	461a      	mov	r2, r3
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	4293      	cmp	r3, r2
 80090ac:	dbe7      	blt.n	800907e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80090ae:	bf00      	nop
 80090b0:	bf00      	nop
 80090b2:	3714      	adds	r7, #20
 80090b4:	46bd      	mov	sp, r7
 80090b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ba:	4770      	bx	lr

080090bc <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b082      	sub	sp, #8
 80090c0:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80090c2:	2300      	movs	r3, #0
 80090c4:	80fb      	strh	r3, [r7, #6]
 80090c6:	e009      	b.n	80090dc <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 80090c8:	88fb      	ldrh	r3, [r7, #6]
 80090ca:	4a08      	ldr	r2, [pc, #32]	; (80090ec <memp_init+0x30>)
 80090cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80090d0:	4618      	mov	r0, r3
 80090d2:	f7ff ffc3 	bl	800905c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80090d6:	88fb      	ldrh	r3, [r7, #6]
 80090d8:	3301      	adds	r3, #1
 80090da:	80fb      	strh	r3, [r7, #6]
 80090dc:	88fb      	ldrh	r3, [r7, #6]
 80090de:	2b08      	cmp	r3, #8
 80090e0:	d9f2      	bls.n	80090c8 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80090e2:	bf00      	nop
 80090e4:	bf00      	nop
 80090e6:	3708      	adds	r7, #8
 80090e8:	46bd      	mov	sp, r7
 80090ea:	bd80      	pop	{r7, pc}
 80090ec:	08016cc4 	.word	0x08016cc4

080090f0 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b084      	sub	sp, #16
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	689b      	ldr	r3, [r3, #8]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d012      	beq.n	800912c <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	689b      	ldr	r3, [r3, #8]
 800910a:	68fa      	ldr	r2, [r7, #12]
 800910c:	6812      	ldr	r2, [r2, #0]
 800910e:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	f003 0303 	and.w	r3, r3, #3
 8009116:	2b00      	cmp	r3, #0
 8009118:	d006      	beq.n	8009128 <do_memp_malloc_pool+0x38>
 800911a:	4b07      	ldr	r3, [pc, #28]	; (8009138 <do_memp_malloc_pool+0x48>)
 800911c:	f44f 728c 	mov.w	r2, #280	; 0x118
 8009120:	4906      	ldr	r1, [pc, #24]	; (800913c <do_memp_malloc_pool+0x4c>)
 8009122:	4807      	ldr	r0, [pc, #28]	; (8009140 <do_memp_malloc_pool+0x50>)
 8009124:	f00a f836 	bl	8013194 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	e000      	b.n	800912e <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800912c:	2300      	movs	r3, #0
}
 800912e:	4618      	mov	r0, r3
 8009130:	3710      	adds	r7, #16
 8009132:	46bd      	mov	sp, r7
 8009134:	bd80      	pop	{r7, pc}
 8009136:	bf00      	nop
 8009138:	080144e4 	.word	0x080144e4
 800913c:	08014514 	.word	0x08014514
 8009140:	08014538 	.word	0x08014538

08009144 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b082      	sub	sp, #8
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d106      	bne.n	8009160 <memp_malloc_pool+0x1c>
 8009152:	4b0a      	ldr	r3, [pc, #40]	; (800917c <memp_malloc_pool+0x38>)
 8009154:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8009158:	4909      	ldr	r1, [pc, #36]	; (8009180 <memp_malloc_pool+0x3c>)
 800915a:	480a      	ldr	r0, [pc, #40]	; (8009184 <memp_malloc_pool+0x40>)
 800915c:	f00a f81a 	bl	8013194 <iprintf>
  if (desc == NULL) {
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d101      	bne.n	800916a <memp_malloc_pool+0x26>
    return NULL;
 8009166:	2300      	movs	r3, #0
 8009168:	e003      	b.n	8009172 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800916a:	6878      	ldr	r0, [r7, #4]
 800916c:	f7ff ffc0 	bl	80090f0 <do_memp_malloc_pool>
 8009170:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8009172:	4618      	mov	r0, r3
 8009174:	3708      	adds	r7, #8
 8009176:	46bd      	mov	sp, r7
 8009178:	bd80      	pop	{r7, pc}
 800917a:	bf00      	nop
 800917c:	080144e4 	.word	0x080144e4
 8009180:	08014560 	.word	0x08014560
 8009184:	08014538 	.word	0x08014538

08009188 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b084      	sub	sp, #16
 800918c:	af00      	add	r7, sp, #0
 800918e:	4603      	mov	r3, r0
 8009190:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8009192:	79fb      	ldrb	r3, [r7, #7]
 8009194:	2b08      	cmp	r3, #8
 8009196:	d908      	bls.n	80091aa <memp_malloc+0x22>
 8009198:	4b0a      	ldr	r3, [pc, #40]	; (80091c4 <memp_malloc+0x3c>)
 800919a:	f240 1257 	movw	r2, #343	; 0x157
 800919e:	490a      	ldr	r1, [pc, #40]	; (80091c8 <memp_malloc+0x40>)
 80091a0:	480a      	ldr	r0, [pc, #40]	; (80091cc <memp_malloc+0x44>)
 80091a2:	f009 fff7 	bl	8013194 <iprintf>
 80091a6:	2300      	movs	r3, #0
 80091a8:	e008      	b.n	80091bc <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80091aa:	79fb      	ldrb	r3, [r7, #7]
 80091ac:	4a08      	ldr	r2, [pc, #32]	; (80091d0 <memp_malloc+0x48>)
 80091ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80091b2:	4618      	mov	r0, r3
 80091b4:	f7ff ff9c 	bl	80090f0 <do_memp_malloc_pool>
 80091b8:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80091ba:	68fb      	ldr	r3, [r7, #12]
}
 80091bc:	4618      	mov	r0, r3
 80091be:	3710      	adds	r7, #16
 80091c0:	46bd      	mov	sp, r7
 80091c2:	bd80      	pop	{r7, pc}
 80091c4:	080144e4 	.word	0x080144e4
 80091c8:	08014574 	.word	0x08014574
 80091cc:	08014538 	.word	0x08014538
 80091d0:	08016cc4 	.word	0x08016cc4

080091d4 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b084      	sub	sp, #16
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
 80091dc:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	f003 0303 	and.w	r3, r3, #3
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d006      	beq.n	80091f6 <do_memp_free_pool+0x22>
 80091e8:	4b0a      	ldr	r3, [pc, #40]	; (8009214 <do_memp_free_pool+0x40>)
 80091ea:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 80091ee:	490a      	ldr	r1, [pc, #40]	; (8009218 <do_memp_free_pool+0x44>)
 80091f0:	480a      	ldr	r0, [pc, #40]	; (800921c <do_memp_free_pool+0x48>)
 80091f2:	f009 ffcf 	bl	8013194 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	689b      	ldr	r3, [r3, #8]
 80091fe:	681a      	ldr	r2, [r3, #0]
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	689b      	ldr	r3, [r3, #8]
 8009208:	68fa      	ldr	r2, [r7, #12]
 800920a:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800920c:	bf00      	nop
 800920e:	3710      	adds	r7, #16
 8009210:	46bd      	mov	sp, r7
 8009212:	bd80      	pop	{r7, pc}
 8009214:	080144e4 	.word	0x080144e4
 8009218:	08014594 	.word	0x08014594
 800921c:	08014538 	.word	0x08014538

08009220 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b082      	sub	sp, #8
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
 8009228:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d106      	bne.n	800923e <memp_free_pool+0x1e>
 8009230:	4b0a      	ldr	r3, [pc, #40]	; (800925c <memp_free_pool+0x3c>)
 8009232:	f240 1295 	movw	r2, #405	; 0x195
 8009236:	490a      	ldr	r1, [pc, #40]	; (8009260 <memp_free_pool+0x40>)
 8009238:	480a      	ldr	r0, [pc, #40]	; (8009264 <memp_free_pool+0x44>)
 800923a:	f009 ffab 	bl	8013194 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d007      	beq.n	8009254 <memp_free_pool+0x34>
 8009244:	683b      	ldr	r3, [r7, #0]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d004      	beq.n	8009254 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800924a:	6839      	ldr	r1, [r7, #0]
 800924c:	6878      	ldr	r0, [r7, #4]
 800924e:	f7ff ffc1 	bl	80091d4 <do_memp_free_pool>
 8009252:	e000      	b.n	8009256 <memp_free_pool+0x36>
    return;
 8009254:	bf00      	nop
}
 8009256:	3708      	adds	r7, #8
 8009258:	46bd      	mov	sp, r7
 800925a:	bd80      	pop	{r7, pc}
 800925c:	080144e4 	.word	0x080144e4
 8009260:	08014560 	.word	0x08014560
 8009264:	08014538 	.word	0x08014538

08009268 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b082      	sub	sp, #8
 800926c:	af00      	add	r7, sp, #0
 800926e:	4603      	mov	r3, r0
 8009270:	6039      	str	r1, [r7, #0]
 8009272:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8009274:	79fb      	ldrb	r3, [r7, #7]
 8009276:	2b08      	cmp	r3, #8
 8009278:	d907      	bls.n	800928a <memp_free+0x22>
 800927a:	4b0c      	ldr	r3, [pc, #48]	; (80092ac <memp_free+0x44>)
 800927c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8009280:	490b      	ldr	r1, [pc, #44]	; (80092b0 <memp_free+0x48>)
 8009282:	480c      	ldr	r0, [pc, #48]	; (80092b4 <memp_free+0x4c>)
 8009284:	f009 ff86 	bl	8013194 <iprintf>
 8009288:	e00c      	b.n	80092a4 <memp_free+0x3c>

  if (mem == NULL) {
 800928a:	683b      	ldr	r3, [r7, #0]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d008      	beq.n	80092a2 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8009290:	79fb      	ldrb	r3, [r7, #7]
 8009292:	4a09      	ldr	r2, [pc, #36]	; (80092b8 <memp_free+0x50>)
 8009294:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009298:	6839      	ldr	r1, [r7, #0]
 800929a:	4618      	mov	r0, r3
 800929c:	f7ff ff9a 	bl	80091d4 <do_memp_free_pool>
 80092a0:	e000      	b.n	80092a4 <memp_free+0x3c>
    return;
 80092a2:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80092a4:	3708      	adds	r7, #8
 80092a6:	46bd      	mov	sp, r7
 80092a8:	bd80      	pop	{r7, pc}
 80092aa:	bf00      	nop
 80092ac:	080144e4 	.word	0x080144e4
 80092b0:	080145b4 	.word	0x080145b4
 80092b4:	08014538 	.word	0x08014538
 80092b8:	08016cc4 	.word	0x08016cc4

080092bc <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 80092bc:	b480      	push	{r7}
 80092be:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 80092c0:	bf00      	nop
 80092c2:	46bd      	mov	sp, r7
 80092c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c8:	4770      	bx	lr
	...

080092cc <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b086      	sub	sp, #24
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	60f8      	str	r0, [r7, #12]
 80092d4:	60b9      	str	r1, [r7, #8]
 80092d6:	607a      	str	r2, [r7, #4]
 80092d8:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d108      	bne.n	80092f2 <netif_add+0x26>
 80092e0:	4b57      	ldr	r3, [pc, #348]	; (8009440 <netif_add+0x174>)
 80092e2:	f240 1227 	movw	r2, #295	; 0x127
 80092e6:	4957      	ldr	r1, [pc, #348]	; (8009444 <netif_add+0x178>)
 80092e8:	4857      	ldr	r0, [pc, #348]	; (8009448 <netif_add+0x17c>)
 80092ea:	f009 ff53 	bl	8013194 <iprintf>
 80092ee:	2300      	movs	r3, #0
 80092f0:	e0a2      	b.n	8009438 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80092f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d108      	bne.n	800930a <netif_add+0x3e>
 80092f8:	4b51      	ldr	r3, [pc, #324]	; (8009440 <netif_add+0x174>)
 80092fa:	f44f 7294 	mov.w	r2, #296	; 0x128
 80092fe:	4953      	ldr	r1, [pc, #332]	; (800944c <netif_add+0x180>)
 8009300:	4851      	ldr	r0, [pc, #324]	; (8009448 <netif_add+0x17c>)
 8009302:	f009 ff47 	bl	8013194 <iprintf>
 8009306:	2300      	movs	r3, #0
 8009308:	e096      	b.n	8009438 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800930a:	68bb      	ldr	r3, [r7, #8]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d101      	bne.n	8009314 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8009310:	4b4f      	ldr	r3, [pc, #316]	; (8009450 <netif_add+0x184>)
 8009312:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d101      	bne.n	800931e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800931a:	4b4d      	ldr	r3, [pc, #308]	; (8009450 <netif_add+0x184>)
 800931c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d101      	bne.n	8009328 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8009324:	4b4a      	ldr	r3, [pc, #296]	; (8009450 <netif_add+0x184>)
 8009326:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	2200      	movs	r2, #0
 800932c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	2200      	movs	r2, #0
 8009332:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	2200      	movs	r2, #0
 8009338:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	4a45      	ldr	r2, [pc, #276]	; (8009454 <netif_add+0x188>)
 800933e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	2200      	movs	r2, #0
 8009344:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	2200      	movs	r2, #0
 800934a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	2200      	movs	r2, #0
 8009352:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	6a3a      	ldr	r2, [r7, #32]
 8009358:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800935a:	4b3f      	ldr	r3, [pc, #252]	; (8009458 <netif_add+0x18c>)
 800935c:	781a      	ldrb	r2, [r3, #0]
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009368:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	687a      	ldr	r2, [r7, #4]
 800936e:	68b9      	ldr	r1, [r7, #8]
 8009370:	68f8      	ldr	r0, [r7, #12]
 8009372:	f000 f913 	bl	800959c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8009376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009378:	68f8      	ldr	r0, [r7, #12]
 800937a:	4798      	blx	r3
 800937c:	4603      	mov	r3, r0
 800937e:	2b00      	cmp	r3, #0
 8009380:	d001      	beq.n	8009386 <netif_add+0xba>
    return NULL;
 8009382:	2300      	movs	r3, #0
 8009384:	e058      	b.n	8009438 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800938c:	2bff      	cmp	r3, #255	; 0xff
 800938e:	d103      	bne.n	8009398 <netif_add+0xcc>
        netif->num = 0;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	2200      	movs	r2, #0
 8009394:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8009398:	2300      	movs	r3, #0
 800939a:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800939c:	4b2f      	ldr	r3, [pc, #188]	; (800945c <netif_add+0x190>)
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	617b      	str	r3, [r7, #20]
 80093a2:	e02b      	b.n	80093fc <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80093a4:	697a      	ldr	r2, [r7, #20]
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	429a      	cmp	r2, r3
 80093aa:	d106      	bne.n	80093ba <netif_add+0xee>
 80093ac:	4b24      	ldr	r3, [pc, #144]	; (8009440 <netif_add+0x174>)
 80093ae:	f240 128b 	movw	r2, #395	; 0x18b
 80093b2:	492b      	ldr	r1, [pc, #172]	; (8009460 <netif_add+0x194>)
 80093b4:	4824      	ldr	r0, [pc, #144]	; (8009448 <netif_add+0x17c>)
 80093b6:	f009 feed 	bl	8013194 <iprintf>
        num_netifs++;
 80093ba:	693b      	ldr	r3, [r7, #16]
 80093bc:	3301      	adds	r3, #1
 80093be:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80093c0:	693b      	ldr	r3, [r7, #16]
 80093c2:	2bff      	cmp	r3, #255	; 0xff
 80093c4:	dd06      	ble.n	80093d4 <netif_add+0x108>
 80093c6:	4b1e      	ldr	r3, [pc, #120]	; (8009440 <netif_add+0x174>)
 80093c8:	f240 128d 	movw	r2, #397	; 0x18d
 80093cc:	4925      	ldr	r1, [pc, #148]	; (8009464 <netif_add+0x198>)
 80093ce:	481e      	ldr	r0, [pc, #120]	; (8009448 <netif_add+0x17c>)
 80093d0:	f009 fee0 	bl	8013194 <iprintf>
        if (netif2->num == netif->num) {
 80093d4:	697b      	ldr	r3, [r7, #20]
 80093d6:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80093e0:	429a      	cmp	r2, r3
 80093e2:	d108      	bne.n	80093f6 <netif_add+0x12a>
          netif->num++;
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80093ea:	3301      	adds	r3, #1
 80093ec:	b2da      	uxtb	r2, r3
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 80093f4:	e005      	b.n	8009402 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80093f6:	697b      	ldr	r3, [r7, #20]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	617b      	str	r3, [r7, #20]
 80093fc:	697b      	ldr	r3, [r7, #20]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d1d0      	bne.n	80093a4 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8009402:	697b      	ldr	r3, [r7, #20]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d1be      	bne.n	8009386 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800940e:	2bfe      	cmp	r3, #254	; 0xfe
 8009410:	d103      	bne.n	800941a <netif_add+0x14e>
    netif_num = 0;
 8009412:	4b11      	ldr	r3, [pc, #68]	; (8009458 <netif_add+0x18c>)
 8009414:	2200      	movs	r2, #0
 8009416:	701a      	strb	r2, [r3, #0]
 8009418:	e006      	b.n	8009428 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009420:	3301      	adds	r3, #1
 8009422:	b2da      	uxtb	r2, r3
 8009424:	4b0c      	ldr	r3, [pc, #48]	; (8009458 <netif_add+0x18c>)
 8009426:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8009428:	4b0c      	ldr	r3, [pc, #48]	; (800945c <netif_add+0x190>)
 800942a:	681a      	ldr	r2, [r3, #0]
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8009430:	4a0a      	ldr	r2, [pc, #40]	; (800945c <netif_add+0x190>)
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8009436:	68fb      	ldr	r3, [r7, #12]
}
 8009438:	4618      	mov	r0, r3
 800943a:	3718      	adds	r7, #24
 800943c:	46bd      	mov	sp, r7
 800943e:	bd80      	pop	{r7, pc}
 8009440:	080145d0 	.word	0x080145d0
 8009444:	08014664 	.word	0x08014664
 8009448:	08014620 	.word	0x08014620
 800944c:	08014680 	.word	0x08014680
 8009450:	08016d28 	.word	0x08016d28
 8009454:	08009877 	.word	0x08009877
 8009458:	240000ec 	.word	0x240000ec
 800945c:	240037c4 	.word	0x240037c4
 8009460:	080146a4 	.word	0x080146a4
 8009464:	080146b8 	.word	0x080146b8

08009468 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b082      	sub	sp, #8
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
 8009470:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8009472:	6839      	ldr	r1, [r7, #0]
 8009474:	6878      	ldr	r0, [r7, #4]
 8009476:	f002 fdf3 	bl	800c060 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800947a:	6839      	ldr	r1, [r7, #0]
 800947c:	6878      	ldr	r0, [r7, #4]
 800947e:	f007 fb2b 	bl	8010ad8 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8009482:	bf00      	nop
 8009484:	3708      	adds	r7, #8
 8009486:	46bd      	mov	sp, r7
 8009488:	bd80      	pop	{r7, pc}
	...

0800948c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b086      	sub	sp, #24
 8009490:	af00      	add	r7, sp, #0
 8009492:	60f8      	str	r0, [r7, #12]
 8009494:	60b9      	str	r1, [r7, #8]
 8009496:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8009498:	68bb      	ldr	r3, [r7, #8]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d106      	bne.n	80094ac <netif_do_set_ipaddr+0x20>
 800949e:	4b1d      	ldr	r3, [pc, #116]	; (8009514 <netif_do_set_ipaddr+0x88>)
 80094a0:	f240 12cb 	movw	r2, #459	; 0x1cb
 80094a4:	491c      	ldr	r1, [pc, #112]	; (8009518 <netif_do_set_ipaddr+0x8c>)
 80094a6:	481d      	ldr	r0, [pc, #116]	; (800951c <netif_do_set_ipaddr+0x90>)
 80094a8:	f009 fe74 	bl	8013194 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d106      	bne.n	80094c0 <netif_do_set_ipaddr+0x34>
 80094b2:	4b18      	ldr	r3, [pc, #96]	; (8009514 <netif_do_set_ipaddr+0x88>)
 80094b4:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 80094b8:	4917      	ldr	r1, [pc, #92]	; (8009518 <netif_do_set_ipaddr+0x8c>)
 80094ba:	4818      	ldr	r0, [pc, #96]	; (800951c <netif_do_set_ipaddr+0x90>)
 80094bc:	f009 fe6a 	bl	8013194 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80094c0:	68bb      	ldr	r3, [r7, #8]
 80094c2:	681a      	ldr	r2, [r3, #0]
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	3304      	adds	r3, #4
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	429a      	cmp	r2, r3
 80094cc:	d01c      	beq.n	8009508 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80094ce:	68bb      	ldr	r3, [r7, #8]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	3304      	adds	r3, #4
 80094d8:	681a      	ldr	r2, [r3, #0]
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80094de:	f107 0314 	add.w	r3, r7, #20
 80094e2:	4619      	mov	r1, r3
 80094e4:	6878      	ldr	r0, [r7, #4]
 80094e6:	f7ff ffbf 	bl	8009468 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80094ea:	68bb      	ldr	r3, [r7, #8]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d002      	beq.n	80094f6 <netif_do_set_ipaddr+0x6a>
 80094f0:	68bb      	ldr	r3, [r7, #8]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	e000      	b.n	80094f8 <netif_do_set_ipaddr+0x6c>
 80094f6:	2300      	movs	r3, #0
 80094f8:	68fa      	ldr	r2, [r7, #12]
 80094fa:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80094fc:	2101      	movs	r1, #1
 80094fe:	68f8      	ldr	r0, [r7, #12]
 8009500:	f000 f8d2 	bl	80096a8 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8009504:	2301      	movs	r3, #1
 8009506:	e000      	b.n	800950a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8009508:	2300      	movs	r3, #0
}
 800950a:	4618      	mov	r0, r3
 800950c:	3718      	adds	r7, #24
 800950e:	46bd      	mov	sp, r7
 8009510:	bd80      	pop	{r7, pc}
 8009512:	bf00      	nop
 8009514:	080145d0 	.word	0x080145d0
 8009518:	080146e8 	.word	0x080146e8
 800951c:	08014620 	.word	0x08014620

08009520 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8009520:	b480      	push	{r7}
 8009522:	b085      	sub	sp, #20
 8009524:	af00      	add	r7, sp, #0
 8009526:	60f8      	str	r0, [r7, #12]
 8009528:	60b9      	str	r1, [r7, #8]
 800952a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800952c:	68bb      	ldr	r3, [r7, #8]
 800952e:	681a      	ldr	r2, [r3, #0]
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	3308      	adds	r3, #8
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	429a      	cmp	r2, r3
 8009538:	d00a      	beq.n	8009550 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800953a:	68bb      	ldr	r3, [r7, #8]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d002      	beq.n	8009546 <netif_do_set_netmask+0x26>
 8009540:	68bb      	ldr	r3, [r7, #8]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	e000      	b.n	8009548 <netif_do_set_netmask+0x28>
 8009546:	2300      	movs	r3, #0
 8009548:	68fa      	ldr	r2, [r7, #12]
 800954a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800954c:	2301      	movs	r3, #1
 800954e:	e000      	b.n	8009552 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8009550:	2300      	movs	r3, #0
}
 8009552:	4618      	mov	r0, r3
 8009554:	3714      	adds	r7, #20
 8009556:	46bd      	mov	sp, r7
 8009558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955c:	4770      	bx	lr

0800955e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800955e:	b480      	push	{r7}
 8009560:	b085      	sub	sp, #20
 8009562:	af00      	add	r7, sp, #0
 8009564:	60f8      	str	r0, [r7, #12]
 8009566:	60b9      	str	r1, [r7, #8]
 8009568:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800956a:	68bb      	ldr	r3, [r7, #8]
 800956c:	681a      	ldr	r2, [r3, #0]
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	330c      	adds	r3, #12
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	429a      	cmp	r2, r3
 8009576:	d00a      	beq.n	800958e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8009578:	68bb      	ldr	r3, [r7, #8]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d002      	beq.n	8009584 <netif_do_set_gw+0x26>
 800957e:	68bb      	ldr	r3, [r7, #8]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	e000      	b.n	8009586 <netif_do_set_gw+0x28>
 8009584:	2300      	movs	r3, #0
 8009586:	68fa      	ldr	r2, [r7, #12]
 8009588:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800958a:	2301      	movs	r3, #1
 800958c:	e000      	b.n	8009590 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800958e:	2300      	movs	r3, #0
}
 8009590:	4618      	mov	r0, r3
 8009592:	3714      	adds	r7, #20
 8009594:	46bd      	mov	sp, r7
 8009596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959a:	4770      	bx	lr

0800959c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800959c:	b580      	push	{r7, lr}
 800959e:	b088      	sub	sp, #32
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	60f8      	str	r0, [r7, #12]
 80095a4:	60b9      	str	r1, [r7, #8]
 80095a6:	607a      	str	r2, [r7, #4]
 80095a8:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 80095aa:	2300      	movs	r3, #0
 80095ac:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 80095ae:	2300      	movs	r3, #0
 80095b0:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80095b2:	68bb      	ldr	r3, [r7, #8]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d101      	bne.n	80095bc <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80095b8:	4b1c      	ldr	r3, [pc, #112]	; (800962c <netif_set_addr+0x90>)
 80095ba:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d101      	bne.n	80095c6 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80095c2:	4b1a      	ldr	r3, [pc, #104]	; (800962c <netif_set_addr+0x90>)
 80095c4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80095c6:	683b      	ldr	r3, [r7, #0]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d101      	bne.n	80095d0 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80095cc:	4b17      	ldr	r3, [pc, #92]	; (800962c <netif_set_addr+0x90>)
 80095ce:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80095d0:	68bb      	ldr	r3, [r7, #8]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d003      	beq.n	80095de <netif_set_addr+0x42>
 80095d6:	68bb      	ldr	r3, [r7, #8]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d101      	bne.n	80095e2 <netif_set_addr+0x46>
 80095de:	2301      	movs	r3, #1
 80095e0:	e000      	b.n	80095e4 <netif_set_addr+0x48>
 80095e2:	2300      	movs	r3, #0
 80095e4:	617b      	str	r3, [r7, #20]
  if (remove) {
 80095e6:	697b      	ldr	r3, [r7, #20]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d006      	beq.n	80095fa <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80095ec:	f107 0310 	add.w	r3, r7, #16
 80095f0:	461a      	mov	r2, r3
 80095f2:	68b9      	ldr	r1, [r7, #8]
 80095f4:	68f8      	ldr	r0, [r7, #12]
 80095f6:	f7ff ff49 	bl	800948c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80095fa:	69fa      	ldr	r2, [r7, #28]
 80095fc:	6879      	ldr	r1, [r7, #4]
 80095fe:	68f8      	ldr	r0, [r7, #12]
 8009600:	f7ff ff8e 	bl	8009520 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8009604:	69ba      	ldr	r2, [r7, #24]
 8009606:	6839      	ldr	r1, [r7, #0]
 8009608:	68f8      	ldr	r0, [r7, #12]
 800960a:	f7ff ffa8 	bl	800955e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800960e:	697b      	ldr	r3, [r7, #20]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d106      	bne.n	8009622 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8009614:	f107 0310 	add.w	r3, r7, #16
 8009618:	461a      	mov	r2, r3
 800961a:	68b9      	ldr	r1, [r7, #8]
 800961c:	68f8      	ldr	r0, [r7, #12]
 800961e:	f7ff ff35 	bl	800948c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8009622:	bf00      	nop
 8009624:	3720      	adds	r7, #32
 8009626:	46bd      	mov	sp, r7
 8009628:	bd80      	pop	{r7, pc}
 800962a:	bf00      	nop
 800962c:	08016d28 	.word	0x08016d28

08009630 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8009630:	b480      	push	{r7}
 8009632:	b083      	sub	sp, #12
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8009638:	4a04      	ldr	r2, [pc, #16]	; (800964c <netif_set_default+0x1c>)
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800963e:	bf00      	nop
 8009640:	370c      	adds	r7, #12
 8009642:	46bd      	mov	sp, r7
 8009644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009648:	4770      	bx	lr
 800964a:	bf00      	nop
 800964c:	240037c8 	.word	0x240037c8

08009650 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b082      	sub	sp, #8
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d107      	bne.n	800966e <netif_set_up+0x1e>
 800965e:	4b0f      	ldr	r3, [pc, #60]	; (800969c <netif_set_up+0x4c>)
 8009660:	f44f 7254 	mov.w	r2, #848	; 0x350
 8009664:	490e      	ldr	r1, [pc, #56]	; (80096a0 <netif_set_up+0x50>)
 8009666:	480f      	ldr	r0, [pc, #60]	; (80096a4 <netif_set_up+0x54>)
 8009668:	f009 fd94 	bl	8013194 <iprintf>
 800966c:	e013      	b.n	8009696 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009674:	f003 0301 	and.w	r3, r3, #1
 8009678:	2b00      	cmp	r3, #0
 800967a:	d10c      	bne.n	8009696 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009682:	f043 0301 	orr.w	r3, r3, #1
 8009686:	b2da      	uxtb	r2, r3
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800968e:	2103      	movs	r1, #3
 8009690:	6878      	ldr	r0, [r7, #4]
 8009692:	f000 f809 	bl	80096a8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8009696:	3708      	adds	r7, #8
 8009698:	46bd      	mov	sp, r7
 800969a:	bd80      	pop	{r7, pc}
 800969c:	080145d0 	.word	0x080145d0
 80096a0:	08014758 	.word	0x08014758
 80096a4:	08014620 	.word	0x08014620

080096a8 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b082      	sub	sp, #8
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
 80096b0:	460b      	mov	r3, r1
 80096b2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d106      	bne.n	80096c8 <netif_issue_reports+0x20>
 80096ba:	4b18      	ldr	r3, [pc, #96]	; (800971c <netif_issue_reports+0x74>)
 80096bc:	f240 326d 	movw	r2, #877	; 0x36d
 80096c0:	4917      	ldr	r1, [pc, #92]	; (8009720 <netif_issue_reports+0x78>)
 80096c2:	4818      	ldr	r0, [pc, #96]	; (8009724 <netif_issue_reports+0x7c>)
 80096c4:	f009 fd66 	bl	8013194 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80096ce:	f003 0304 	and.w	r3, r3, #4
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d01e      	beq.n	8009714 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80096dc:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d017      	beq.n	8009714 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80096e4:	78fb      	ldrb	r3, [r7, #3]
 80096e6:	f003 0301 	and.w	r3, r3, #1
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d013      	beq.n	8009716 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	3304      	adds	r3, #4
 80096f2:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d00e      	beq.n	8009716 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80096fe:	f003 0308 	and.w	r3, r3, #8
 8009702:	2b00      	cmp	r3, #0
 8009704:	d007      	beq.n	8009716 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	3304      	adds	r3, #4
 800970a:	4619      	mov	r1, r3
 800970c:	6878      	ldr	r0, [r7, #4]
 800970e:	f008 f94d 	bl	80119ac <etharp_request>
 8009712:	e000      	b.n	8009716 <netif_issue_reports+0x6e>
    return;
 8009714:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8009716:	3708      	adds	r7, #8
 8009718:	46bd      	mov	sp, r7
 800971a:	bd80      	pop	{r7, pc}
 800971c:	080145d0 	.word	0x080145d0
 8009720:	08014774 	.word	0x08014774
 8009724:	08014620 	.word	0x08014620

08009728 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8009728:	b580      	push	{r7, lr}
 800972a:	b082      	sub	sp, #8
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d107      	bne.n	8009746 <netif_set_down+0x1e>
 8009736:	4b12      	ldr	r3, [pc, #72]	; (8009780 <netif_set_down+0x58>)
 8009738:	f240 329b 	movw	r2, #923	; 0x39b
 800973c:	4911      	ldr	r1, [pc, #68]	; (8009784 <netif_set_down+0x5c>)
 800973e:	4812      	ldr	r0, [pc, #72]	; (8009788 <netif_set_down+0x60>)
 8009740:	f009 fd28 	bl	8013194 <iprintf>
 8009744:	e019      	b.n	800977a <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800974c:	f003 0301 	and.w	r3, r3, #1
 8009750:	2b00      	cmp	r3, #0
 8009752:	d012      	beq.n	800977a <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800975a:	f023 0301 	bic.w	r3, r3, #1
 800975e:	b2da      	uxtb	r2, r3
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800976c:	f003 0308 	and.w	r3, r3, #8
 8009770:	2b00      	cmp	r3, #0
 8009772:	d002      	beq.n	800977a <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8009774:	6878      	ldr	r0, [r7, #4]
 8009776:	f007 fcd7 	bl	8011128 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800977a:	3708      	adds	r7, #8
 800977c:	46bd      	mov	sp, r7
 800977e:	bd80      	pop	{r7, pc}
 8009780:	080145d0 	.word	0x080145d0
 8009784:	08014798 	.word	0x08014798
 8009788:	08014620 	.word	0x08014620

0800978c <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800978c:	b580      	push	{r7, lr}
 800978e:	b082      	sub	sp, #8
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d107      	bne.n	80097aa <netif_set_link_up+0x1e>
 800979a:	4b13      	ldr	r3, [pc, #76]	; (80097e8 <netif_set_link_up+0x5c>)
 800979c:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 80097a0:	4912      	ldr	r1, [pc, #72]	; (80097ec <netif_set_link_up+0x60>)
 80097a2:	4813      	ldr	r0, [pc, #76]	; (80097f0 <netif_set_link_up+0x64>)
 80097a4:	f009 fcf6 	bl	8013194 <iprintf>
 80097a8:	e01b      	b.n	80097e2 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80097b0:	f003 0304 	and.w	r3, r3, #4
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d114      	bne.n	80097e2 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80097be:	f043 0304 	orr.w	r3, r3, #4
 80097c2:	b2da      	uxtb	r2, r3
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80097ca:	2103      	movs	r1, #3
 80097cc:	6878      	ldr	r0, [r7, #4]
 80097ce:	f7ff ff6b 	bl	80096a8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	69db      	ldr	r3, [r3, #28]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d003      	beq.n	80097e2 <netif_set_link_up+0x56>
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	69db      	ldr	r3, [r3, #28]
 80097de:	6878      	ldr	r0, [r7, #4]
 80097e0:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80097e2:	3708      	adds	r7, #8
 80097e4:	46bd      	mov	sp, r7
 80097e6:	bd80      	pop	{r7, pc}
 80097e8:	080145d0 	.word	0x080145d0
 80097ec:	080147b8 	.word	0x080147b8
 80097f0:	08014620 	.word	0x08014620

080097f4 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	b082      	sub	sp, #8
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d107      	bne.n	8009812 <netif_set_link_down+0x1e>
 8009802:	4b11      	ldr	r3, [pc, #68]	; (8009848 <netif_set_link_down+0x54>)
 8009804:	f240 4206 	movw	r2, #1030	; 0x406
 8009808:	4910      	ldr	r1, [pc, #64]	; (800984c <netif_set_link_down+0x58>)
 800980a:	4811      	ldr	r0, [pc, #68]	; (8009850 <netif_set_link_down+0x5c>)
 800980c:	f009 fcc2 	bl	8013194 <iprintf>
 8009810:	e017      	b.n	8009842 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009818:	f003 0304 	and.w	r3, r3, #4
 800981c:	2b00      	cmp	r3, #0
 800981e:	d010      	beq.n	8009842 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009826:	f023 0304 	bic.w	r3, r3, #4
 800982a:	b2da      	uxtb	r2, r3
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	69db      	ldr	r3, [r3, #28]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d003      	beq.n	8009842 <netif_set_link_down+0x4e>
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	69db      	ldr	r3, [r3, #28]
 800983e:	6878      	ldr	r0, [r7, #4]
 8009840:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8009842:	3708      	adds	r7, #8
 8009844:	46bd      	mov	sp, r7
 8009846:	bd80      	pop	{r7, pc}
 8009848:	080145d0 	.word	0x080145d0
 800984c:	080147dc 	.word	0x080147dc
 8009850:	08014620 	.word	0x08014620

08009854 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8009854:	b480      	push	{r7}
 8009856:	b083      	sub	sp, #12
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
 800985c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d002      	beq.n	800986a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	683a      	ldr	r2, [r7, #0]
 8009868:	61da      	str	r2, [r3, #28]
  }
}
 800986a:	bf00      	nop
 800986c:	370c      	adds	r7, #12
 800986e:	46bd      	mov	sp, r7
 8009870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009874:	4770      	bx	lr

08009876 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8009876:	b480      	push	{r7}
 8009878:	b085      	sub	sp, #20
 800987a:	af00      	add	r7, sp, #0
 800987c:	60f8      	str	r0, [r7, #12]
 800987e:	60b9      	str	r1, [r7, #8]
 8009880:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8009882:	f06f 030b 	mvn.w	r3, #11
}
 8009886:	4618      	mov	r0, r3
 8009888:	3714      	adds	r7, #20
 800988a:	46bd      	mov	sp, r7
 800988c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009890:	4770      	bx	lr
	...

08009894 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8009894:	b480      	push	{r7}
 8009896:	b085      	sub	sp, #20
 8009898:	af00      	add	r7, sp, #0
 800989a:	4603      	mov	r3, r0
 800989c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800989e:	79fb      	ldrb	r3, [r7, #7]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d013      	beq.n	80098cc <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80098a4:	4b0d      	ldr	r3, [pc, #52]	; (80098dc <netif_get_by_index+0x48>)
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	60fb      	str	r3, [r7, #12]
 80098aa:	e00c      	b.n	80098c6 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80098b2:	3301      	adds	r3, #1
 80098b4:	b2db      	uxtb	r3, r3
 80098b6:	79fa      	ldrb	r2, [r7, #7]
 80098b8:	429a      	cmp	r2, r3
 80098ba:	d101      	bne.n	80098c0 <netif_get_by_index+0x2c>
        return netif; /* found! */
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	e006      	b.n	80098ce <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	60fb      	str	r3, [r7, #12]
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d1ef      	bne.n	80098ac <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80098cc:	2300      	movs	r3, #0
}
 80098ce:	4618      	mov	r0, r3
 80098d0:	3714      	adds	r7, #20
 80098d2:	46bd      	mov	sp, r7
 80098d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d8:	4770      	bx	lr
 80098da:	bf00      	nop
 80098dc:	240037c4 	.word	0x240037c4

080098e0 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b082      	sub	sp, #8
 80098e4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80098e6:	4b0c      	ldr	r3, [pc, #48]	; (8009918 <pbuf_free_ooseq+0x38>)
 80098e8:	2200      	movs	r2, #0
 80098ea:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80098ec:	4b0b      	ldr	r3, [pc, #44]	; (800991c <pbuf_free_ooseq+0x3c>)
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	607b      	str	r3, [r7, #4]
 80098f2:	e00a      	b.n	800990a <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d003      	beq.n	8009904 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 80098fc:	6878      	ldr	r0, [r7, #4]
 80098fe:	f002 fbed 	bl	800c0dc <tcp_free_ooseq>
      return;
 8009902:	e005      	b.n	8009910 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	68db      	ldr	r3, [r3, #12]
 8009908:	607b      	str	r3, [r7, #4]
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d1f1      	bne.n	80098f4 <pbuf_free_ooseq+0x14>
    }
  }
}
 8009910:	3708      	adds	r7, #8
 8009912:	46bd      	mov	sp, r7
 8009914:	bd80      	pop	{r7, pc}
 8009916:	bf00      	nop
 8009918:	240037cc 	.word	0x240037cc
 800991c:	240037d4 	.word	0x240037d4

08009920 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8009920:	b480      	push	{r7}
 8009922:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8009924:	4b03      	ldr	r3, [pc, #12]	; (8009934 <pbuf_pool_is_empty+0x14>)
 8009926:	2201      	movs	r2, #1
 8009928:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800992a:	bf00      	nop
 800992c:	46bd      	mov	sp, r7
 800992e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009932:	4770      	bx	lr
 8009934:	240037cc 	.word	0x240037cc

08009938 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8009938:	b480      	push	{r7}
 800993a:	b085      	sub	sp, #20
 800993c:	af00      	add	r7, sp, #0
 800993e:	60f8      	str	r0, [r7, #12]
 8009940:	60b9      	str	r1, [r7, #8]
 8009942:	4611      	mov	r1, r2
 8009944:	461a      	mov	r2, r3
 8009946:	460b      	mov	r3, r1
 8009948:	80fb      	strh	r3, [r7, #6]
 800994a:	4613      	mov	r3, r2
 800994c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	2200      	movs	r2, #0
 8009952:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	68ba      	ldr	r2, [r7, #8]
 8009958:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	88fa      	ldrh	r2, [r7, #6]
 800995e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	88ba      	ldrh	r2, [r7, #4]
 8009964:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8009966:	8b3b      	ldrh	r3, [r7, #24]
 8009968:	b2da      	uxtb	r2, r3
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	7f3a      	ldrb	r2, [r7, #28]
 8009972:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	2201      	movs	r2, #1
 8009978:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	2200      	movs	r2, #0
 800997e:	73da      	strb	r2, [r3, #15]
}
 8009980:	bf00      	nop
 8009982:	3714      	adds	r7, #20
 8009984:	46bd      	mov	sp, r7
 8009986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998a:	4770      	bx	lr

0800998c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800998c:	b580      	push	{r7, lr}
 800998e:	b08c      	sub	sp, #48	; 0x30
 8009990:	af02      	add	r7, sp, #8
 8009992:	4603      	mov	r3, r0
 8009994:	71fb      	strb	r3, [r7, #7]
 8009996:	460b      	mov	r3, r1
 8009998:	80bb      	strh	r3, [r7, #4]
 800999a:	4613      	mov	r3, r2
 800999c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800999e:	79fb      	ldrb	r3, [r7, #7]
 80099a0:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 80099a2:	887b      	ldrh	r3, [r7, #2]
 80099a4:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80099a8:	d07f      	beq.n	8009aaa <pbuf_alloc+0x11e>
 80099aa:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80099ae:	f300 80c8 	bgt.w	8009b42 <pbuf_alloc+0x1b6>
 80099b2:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80099b6:	d010      	beq.n	80099da <pbuf_alloc+0x4e>
 80099b8:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80099bc:	f300 80c1 	bgt.w	8009b42 <pbuf_alloc+0x1b6>
 80099c0:	2b01      	cmp	r3, #1
 80099c2:	d002      	beq.n	80099ca <pbuf_alloc+0x3e>
 80099c4:	2b41      	cmp	r3, #65	; 0x41
 80099c6:	f040 80bc 	bne.w	8009b42 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 80099ca:	887a      	ldrh	r2, [r7, #2]
 80099cc:	88bb      	ldrh	r3, [r7, #4]
 80099ce:	4619      	mov	r1, r3
 80099d0:	2000      	movs	r0, #0
 80099d2:	f000 f8d1 	bl	8009b78 <pbuf_alloc_reference>
 80099d6:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 80099d8:	e0bd      	b.n	8009b56 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 80099da:	2300      	movs	r3, #0
 80099dc:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 80099de:	2300      	movs	r3, #0
 80099e0:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 80099e2:	88bb      	ldrh	r3, [r7, #4]
 80099e4:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80099e6:	2008      	movs	r0, #8
 80099e8:	f7ff fbce 	bl	8009188 <memp_malloc>
 80099ec:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 80099ee:	693b      	ldr	r3, [r7, #16]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d109      	bne.n	8009a08 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 80099f4:	f7ff ff94 	bl	8009920 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 80099f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d002      	beq.n	8009a04 <pbuf_alloc+0x78>
            pbuf_free(p);
 80099fe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009a00:	f000 faa8 	bl	8009f54 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8009a04:	2300      	movs	r3, #0
 8009a06:	e0a7      	b.n	8009b58 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8009a08:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009a0a:	3303      	adds	r3, #3
 8009a0c:	b29b      	uxth	r3, r3
 8009a0e:	f023 0303 	bic.w	r3, r3, #3
 8009a12:	b29b      	uxth	r3, r3
 8009a14:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8009a18:	b29b      	uxth	r3, r3
 8009a1a:	8b7a      	ldrh	r2, [r7, #26]
 8009a1c:	4293      	cmp	r3, r2
 8009a1e:	bf28      	it	cs
 8009a20:	4613      	movcs	r3, r2
 8009a22:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8009a24:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009a26:	3310      	adds	r3, #16
 8009a28:	693a      	ldr	r2, [r7, #16]
 8009a2a:	4413      	add	r3, r2
 8009a2c:	3303      	adds	r3, #3
 8009a2e:	f023 0303 	bic.w	r3, r3, #3
 8009a32:	4618      	mov	r0, r3
 8009a34:	89f9      	ldrh	r1, [r7, #14]
 8009a36:	8b7a      	ldrh	r2, [r7, #26]
 8009a38:	2300      	movs	r3, #0
 8009a3a:	9301      	str	r3, [sp, #4]
 8009a3c:	887b      	ldrh	r3, [r7, #2]
 8009a3e:	9300      	str	r3, [sp, #0]
 8009a40:	460b      	mov	r3, r1
 8009a42:	4601      	mov	r1, r0
 8009a44:	6938      	ldr	r0, [r7, #16]
 8009a46:	f7ff ff77 	bl	8009938 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8009a4a:	693b      	ldr	r3, [r7, #16]
 8009a4c:	685b      	ldr	r3, [r3, #4]
 8009a4e:	f003 0303 	and.w	r3, r3, #3
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d006      	beq.n	8009a64 <pbuf_alloc+0xd8>
 8009a56:	4b42      	ldr	r3, [pc, #264]	; (8009b60 <pbuf_alloc+0x1d4>)
 8009a58:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009a5c:	4941      	ldr	r1, [pc, #260]	; (8009b64 <pbuf_alloc+0x1d8>)
 8009a5e:	4842      	ldr	r0, [pc, #264]	; (8009b68 <pbuf_alloc+0x1dc>)
 8009a60:	f009 fb98 	bl	8013194 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8009a64:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009a66:	3303      	adds	r3, #3
 8009a68:	f023 0303 	bic.w	r3, r3, #3
 8009a6c:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8009a70:	d106      	bne.n	8009a80 <pbuf_alloc+0xf4>
 8009a72:	4b3b      	ldr	r3, [pc, #236]	; (8009b60 <pbuf_alloc+0x1d4>)
 8009a74:	f44f 7281 	mov.w	r2, #258	; 0x102
 8009a78:	493c      	ldr	r1, [pc, #240]	; (8009b6c <pbuf_alloc+0x1e0>)
 8009a7a:	483b      	ldr	r0, [pc, #236]	; (8009b68 <pbuf_alloc+0x1dc>)
 8009a7c:	f009 fb8a 	bl	8013194 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8009a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d102      	bne.n	8009a8c <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8009a86:	693b      	ldr	r3, [r7, #16]
 8009a88:	627b      	str	r3, [r7, #36]	; 0x24
 8009a8a:	e002      	b.n	8009a92 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8009a8c:	69fb      	ldr	r3, [r7, #28]
 8009a8e:	693a      	ldr	r2, [r7, #16]
 8009a90:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8009a92:	693b      	ldr	r3, [r7, #16]
 8009a94:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8009a96:	8b7a      	ldrh	r2, [r7, #26]
 8009a98:	89fb      	ldrh	r3, [r7, #14]
 8009a9a:	1ad3      	subs	r3, r2, r3
 8009a9c:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8009aa2:	8b7b      	ldrh	r3, [r7, #26]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d19e      	bne.n	80099e6 <pbuf_alloc+0x5a>
      break;
 8009aa8:	e055      	b.n	8009b56 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8009aaa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009aac:	3303      	adds	r3, #3
 8009aae:	b29b      	uxth	r3, r3
 8009ab0:	f023 0303 	bic.w	r3, r3, #3
 8009ab4:	b29a      	uxth	r2, r3
 8009ab6:	88bb      	ldrh	r3, [r7, #4]
 8009ab8:	3303      	adds	r3, #3
 8009aba:	b29b      	uxth	r3, r3
 8009abc:	f023 0303 	bic.w	r3, r3, #3
 8009ac0:	b29b      	uxth	r3, r3
 8009ac2:	4413      	add	r3, r2
 8009ac4:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8009ac6:	8b3b      	ldrh	r3, [r7, #24]
 8009ac8:	3310      	adds	r3, #16
 8009aca:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8009acc:	8b3a      	ldrh	r2, [r7, #24]
 8009ace:	88bb      	ldrh	r3, [r7, #4]
 8009ad0:	3303      	adds	r3, #3
 8009ad2:	f023 0303 	bic.w	r3, r3, #3
 8009ad6:	429a      	cmp	r2, r3
 8009ad8:	d306      	bcc.n	8009ae8 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8009ada:	8afa      	ldrh	r2, [r7, #22]
 8009adc:	88bb      	ldrh	r3, [r7, #4]
 8009ade:	3303      	adds	r3, #3
 8009ae0:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8009ae4:	429a      	cmp	r2, r3
 8009ae6:	d201      	bcs.n	8009aec <pbuf_alloc+0x160>
        return NULL;
 8009ae8:	2300      	movs	r3, #0
 8009aea:	e035      	b.n	8009b58 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8009aec:	8afb      	ldrh	r3, [r7, #22]
 8009aee:	4618      	mov	r0, r3
 8009af0:	f7ff f9b6 	bl	8008e60 <mem_malloc>
 8009af4:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8009af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d101      	bne.n	8009b00 <pbuf_alloc+0x174>
        return NULL;
 8009afc:	2300      	movs	r3, #0
 8009afe:	e02b      	b.n	8009b58 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8009b00:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009b02:	3310      	adds	r3, #16
 8009b04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b06:	4413      	add	r3, r2
 8009b08:	3303      	adds	r3, #3
 8009b0a:	f023 0303 	bic.w	r3, r3, #3
 8009b0e:	4618      	mov	r0, r3
 8009b10:	88b9      	ldrh	r1, [r7, #4]
 8009b12:	88ba      	ldrh	r2, [r7, #4]
 8009b14:	2300      	movs	r3, #0
 8009b16:	9301      	str	r3, [sp, #4]
 8009b18:	887b      	ldrh	r3, [r7, #2]
 8009b1a:	9300      	str	r3, [sp, #0]
 8009b1c:	460b      	mov	r3, r1
 8009b1e:	4601      	mov	r1, r0
 8009b20:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009b22:	f7ff ff09 	bl	8009938 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8009b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b28:	685b      	ldr	r3, [r3, #4]
 8009b2a:	f003 0303 	and.w	r3, r3, #3
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d010      	beq.n	8009b54 <pbuf_alloc+0x1c8>
 8009b32:	4b0b      	ldr	r3, [pc, #44]	; (8009b60 <pbuf_alloc+0x1d4>)
 8009b34:	f44f 7291 	mov.w	r2, #290	; 0x122
 8009b38:	490d      	ldr	r1, [pc, #52]	; (8009b70 <pbuf_alloc+0x1e4>)
 8009b3a:	480b      	ldr	r0, [pc, #44]	; (8009b68 <pbuf_alloc+0x1dc>)
 8009b3c:	f009 fb2a 	bl	8013194 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8009b40:	e008      	b.n	8009b54 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8009b42:	4b07      	ldr	r3, [pc, #28]	; (8009b60 <pbuf_alloc+0x1d4>)
 8009b44:	f240 1227 	movw	r2, #295	; 0x127
 8009b48:	490a      	ldr	r1, [pc, #40]	; (8009b74 <pbuf_alloc+0x1e8>)
 8009b4a:	4807      	ldr	r0, [pc, #28]	; (8009b68 <pbuf_alloc+0x1dc>)
 8009b4c:	f009 fb22 	bl	8013194 <iprintf>
      return NULL;
 8009b50:	2300      	movs	r3, #0
 8009b52:	e001      	b.n	8009b58 <pbuf_alloc+0x1cc>
      break;
 8009b54:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8009b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009b58:	4618      	mov	r0, r3
 8009b5a:	3728      	adds	r7, #40	; 0x28
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	bd80      	pop	{r7, pc}
 8009b60:	08014800 	.word	0x08014800
 8009b64:	08014830 	.word	0x08014830
 8009b68:	08014860 	.word	0x08014860
 8009b6c:	08014888 	.word	0x08014888
 8009b70:	080148bc 	.word	0x080148bc
 8009b74:	080148e8 	.word	0x080148e8

08009b78 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b086      	sub	sp, #24
 8009b7c:	af02      	add	r7, sp, #8
 8009b7e:	6078      	str	r0, [r7, #4]
 8009b80:	460b      	mov	r3, r1
 8009b82:	807b      	strh	r3, [r7, #2]
 8009b84:	4613      	mov	r3, r2
 8009b86:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8009b88:	883b      	ldrh	r3, [r7, #0]
 8009b8a:	2b41      	cmp	r3, #65	; 0x41
 8009b8c:	d009      	beq.n	8009ba2 <pbuf_alloc_reference+0x2a>
 8009b8e:	883b      	ldrh	r3, [r7, #0]
 8009b90:	2b01      	cmp	r3, #1
 8009b92:	d006      	beq.n	8009ba2 <pbuf_alloc_reference+0x2a>
 8009b94:	4b0f      	ldr	r3, [pc, #60]	; (8009bd4 <pbuf_alloc_reference+0x5c>)
 8009b96:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8009b9a:	490f      	ldr	r1, [pc, #60]	; (8009bd8 <pbuf_alloc_reference+0x60>)
 8009b9c:	480f      	ldr	r0, [pc, #60]	; (8009bdc <pbuf_alloc_reference+0x64>)
 8009b9e:	f009 faf9 	bl	8013194 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8009ba2:	2007      	movs	r0, #7
 8009ba4:	f7ff faf0 	bl	8009188 <memp_malloc>
 8009ba8:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d101      	bne.n	8009bb4 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	e00b      	b.n	8009bcc <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8009bb4:	8879      	ldrh	r1, [r7, #2]
 8009bb6:	887a      	ldrh	r2, [r7, #2]
 8009bb8:	2300      	movs	r3, #0
 8009bba:	9301      	str	r3, [sp, #4]
 8009bbc:	883b      	ldrh	r3, [r7, #0]
 8009bbe:	9300      	str	r3, [sp, #0]
 8009bc0:	460b      	mov	r3, r1
 8009bc2:	6879      	ldr	r1, [r7, #4]
 8009bc4:	68f8      	ldr	r0, [r7, #12]
 8009bc6:	f7ff feb7 	bl	8009938 <pbuf_init_alloced_pbuf>
  return p;
 8009bca:	68fb      	ldr	r3, [r7, #12]
}
 8009bcc:	4618      	mov	r0, r3
 8009bce:	3710      	adds	r7, #16
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	bd80      	pop	{r7, pc}
 8009bd4:	08014800 	.word	0x08014800
 8009bd8:	08014904 	.word	0x08014904
 8009bdc:	08014860 	.word	0x08014860

08009be0 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b088      	sub	sp, #32
 8009be4:	af02      	add	r7, sp, #8
 8009be6:	607b      	str	r3, [r7, #4]
 8009be8:	4603      	mov	r3, r0
 8009bea:	73fb      	strb	r3, [r7, #15]
 8009bec:	460b      	mov	r3, r1
 8009bee:	81bb      	strh	r3, [r7, #12]
 8009bf0:	4613      	mov	r3, r2
 8009bf2:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8009bf4:	7bfb      	ldrb	r3, [r7, #15]
 8009bf6:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8009bf8:	8a7b      	ldrh	r3, [r7, #18]
 8009bfa:	3303      	adds	r3, #3
 8009bfc:	f023 0203 	bic.w	r2, r3, #3
 8009c00:	89bb      	ldrh	r3, [r7, #12]
 8009c02:	441a      	add	r2, r3
 8009c04:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009c06:	429a      	cmp	r2, r3
 8009c08:	d901      	bls.n	8009c0e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	e018      	b.n	8009c40 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8009c0e:	6a3b      	ldr	r3, [r7, #32]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d007      	beq.n	8009c24 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8009c14:	8a7b      	ldrh	r3, [r7, #18]
 8009c16:	3303      	adds	r3, #3
 8009c18:	f023 0303 	bic.w	r3, r3, #3
 8009c1c:	6a3a      	ldr	r2, [r7, #32]
 8009c1e:	4413      	add	r3, r2
 8009c20:	617b      	str	r3, [r7, #20]
 8009c22:	e001      	b.n	8009c28 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8009c24:	2300      	movs	r3, #0
 8009c26:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8009c28:	6878      	ldr	r0, [r7, #4]
 8009c2a:	89b9      	ldrh	r1, [r7, #12]
 8009c2c:	89ba      	ldrh	r2, [r7, #12]
 8009c2e:	2302      	movs	r3, #2
 8009c30:	9301      	str	r3, [sp, #4]
 8009c32:	897b      	ldrh	r3, [r7, #10]
 8009c34:	9300      	str	r3, [sp, #0]
 8009c36:	460b      	mov	r3, r1
 8009c38:	6979      	ldr	r1, [r7, #20]
 8009c3a:	f7ff fe7d 	bl	8009938 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8009c3e:	687b      	ldr	r3, [r7, #4]
}
 8009c40:	4618      	mov	r0, r3
 8009c42:	3718      	adds	r7, #24
 8009c44:	46bd      	mov	sp, r7
 8009c46:	bd80      	pop	{r7, pc}

08009c48 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b084      	sub	sp, #16
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]
 8009c50:	460b      	mov	r3, r1
 8009c52:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d106      	bne.n	8009c68 <pbuf_realloc+0x20>
 8009c5a:	4b3a      	ldr	r3, [pc, #232]	; (8009d44 <pbuf_realloc+0xfc>)
 8009c5c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8009c60:	4939      	ldr	r1, [pc, #228]	; (8009d48 <pbuf_realloc+0x100>)
 8009c62:	483a      	ldr	r0, [pc, #232]	; (8009d4c <pbuf_realloc+0x104>)
 8009c64:	f009 fa96 	bl	8013194 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	891b      	ldrh	r3, [r3, #8]
 8009c6c:	887a      	ldrh	r2, [r7, #2]
 8009c6e:	429a      	cmp	r2, r3
 8009c70:	d263      	bcs.n	8009d3a <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	891a      	ldrh	r2, [r3, #8]
 8009c76:	887b      	ldrh	r3, [r7, #2]
 8009c78:	1ad3      	subs	r3, r2, r3
 8009c7a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8009c7c:	887b      	ldrh	r3, [r7, #2]
 8009c7e:	817b      	strh	r3, [r7, #10]
  q = p;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8009c84:	e018      	b.n	8009cb8 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	895b      	ldrh	r3, [r3, #10]
 8009c8a:	897a      	ldrh	r2, [r7, #10]
 8009c8c:	1ad3      	subs	r3, r2, r3
 8009c8e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	891a      	ldrh	r2, [r3, #8]
 8009c94:	893b      	ldrh	r3, [r7, #8]
 8009c96:	1ad3      	subs	r3, r2, r3
 8009c98:	b29a      	uxth	r2, r3
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d106      	bne.n	8009cb8 <pbuf_realloc+0x70>
 8009caa:	4b26      	ldr	r3, [pc, #152]	; (8009d44 <pbuf_realloc+0xfc>)
 8009cac:	f240 12af 	movw	r2, #431	; 0x1af
 8009cb0:	4927      	ldr	r1, [pc, #156]	; (8009d50 <pbuf_realloc+0x108>)
 8009cb2:	4826      	ldr	r0, [pc, #152]	; (8009d4c <pbuf_realloc+0x104>)
 8009cb4:	f009 fa6e 	bl	8013194 <iprintf>
  while (rem_len > q->len) {
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	895b      	ldrh	r3, [r3, #10]
 8009cbc:	897a      	ldrh	r2, [r7, #10]
 8009cbe:	429a      	cmp	r2, r3
 8009cc0:	d8e1      	bhi.n	8009c86 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	7b1b      	ldrb	r3, [r3, #12]
 8009cc6:	f003 030f 	and.w	r3, r3, #15
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d121      	bne.n	8009d12 <pbuf_realloc+0xca>
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	895b      	ldrh	r3, [r3, #10]
 8009cd2:	897a      	ldrh	r2, [r7, #10]
 8009cd4:	429a      	cmp	r2, r3
 8009cd6:	d01c      	beq.n	8009d12 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	7b5b      	ldrb	r3, [r3, #13]
 8009cdc:	f003 0302 	and.w	r3, r3, #2
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d116      	bne.n	8009d12 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	685a      	ldr	r2, [r3, #4]
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	1ad3      	subs	r3, r2, r3
 8009cec:	b29a      	uxth	r2, r3
 8009cee:	897b      	ldrh	r3, [r7, #10]
 8009cf0:	4413      	add	r3, r2
 8009cf2:	b29b      	uxth	r3, r3
 8009cf4:	4619      	mov	r1, r3
 8009cf6:	68f8      	ldr	r0, [r7, #12]
 8009cf8:	f7fe ffb0 	bl	8008c5c <mem_trim>
 8009cfc:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d106      	bne.n	8009d12 <pbuf_realloc+0xca>
 8009d04:	4b0f      	ldr	r3, [pc, #60]	; (8009d44 <pbuf_realloc+0xfc>)
 8009d06:	f240 12bd 	movw	r2, #445	; 0x1bd
 8009d0a:	4912      	ldr	r1, [pc, #72]	; (8009d54 <pbuf_realloc+0x10c>)
 8009d0c:	480f      	ldr	r0, [pc, #60]	; (8009d4c <pbuf_realloc+0x104>)
 8009d0e:	f009 fa41 	bl	8013194 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	897a      	ldrh	r2, [r7, #10]
 8009d16:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	895a      	ldrh	r2, [r3, #10]
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d004      	beq.n	8009d32 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	f000 f911 	bl	8009f54 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	2200      	movs	r2, #0
 8009d36:	601a      	str	r2, [r3, #0]
 8009d38:	e000      	b.n	8009d3c <pbuf_realloc+0xf4>
    return;
 8009d3a:	bf00      	nop

}
 8009d3c:	3710      	adds	r7, #16
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	bd80      	pop	{r7, pc}
 8009d42:	bf00      	nop
 8009d44:	08014800 	.word	0x08014800
 8009d48:	08014918 	.word	0x08014918
 8009d4c:	08014860 	.word	0x08014860
 8009d50:	08014930 	.word	0x08014930
 8009d54:	08014948 	.word	0x08014948

08009d58 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b086      	sub	sp, #24
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	60f8      	str	r0, [r7, #12]
 8009d60:	60b9      	str	r1, [r7, #8]
 8009d62:	4613      	mov	r3, r2
 8009d64:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d106      	bne.n	8009d7a <pbuf_add_header_impl+0x22>
 8009d6c:	4b2b      	ldr	r3, [pc, #172]	; (8009e1c <pbuf_add_header_impl+0xc4>)
 8009d6e:	f240 12df 	movw	r2, #479	; 0x1df
 8009d72:	492b      	ldr	r1, [pc, #172]	; (8009e20 <pbuf_add_header_impl+0xc8>)
 8009d74:	482b      	ldr	r0, [pc, #172]	; (8009e24 <pbuf_add_header_impl+0xcc>)
 8009d76:	f009 fa0d 	bl	8013194 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d003      	beq.n	8009d88 <pbuf_add_header_impl+0x30>
 8009d80:	68bb      	ldr	r3, [r7, #8]
 8009d82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d86:	d301      	bcc.n	8009d8c <pbuf_add_header_impl+0x34>
    return 1;
 8009d88:	2301      	movs	r3, #1
 8009d8a:	e043      	b.n	8009e14 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8009d8c:	68bb      	ldr	r3, [r7, #8]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d101      	bne.n	8009d96 <pbuf_add_header_impl+0x3e>
    return 0;
 8009d92:	2300      	movs	r3, #0
 8009d94:	e03e      	b.n	8009e14 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8009d96:	68bb      	ldr	r3, [r7, #8]
 8009d98:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	891a      	ldrh	r2, [r3, #8]
 8009d9e:	8a7b      	ldrh	r3, [r7, #18]
 8009da0:	4413      	add	r3, r2
 8009da2:	b29b      	uxth	r3, r3
 8009da4:	8a7a      	ldrh	r2, [r7, #18]
 8009da6:	429a      	cmp	r2, r3
 8009da8:	d901      	bls.n	8009dae <pbuf_add_header_impl+0x56>
    return 1;
 8009daa:	2301      	movs	r3, #1
 8009dac:	e032      	b.n	8009e14 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	7b1b      	ldrb	r3, [r3, #12]
 8009db2:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8009db4:	8a3b      	ldrh	r3, [r7, #16]
 8009db6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d00c      	beq.n	8009dd8 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	685a      	ldr	r2, [r3, #4]
 8009dc2:	68bb      	ldr	r3, [r7, #8]
 8009dc4:	425b      	negs	r3, r3
 8009dc6:	4413      	add	r3, r2
 8009dc8:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	3310      	adds	r3, #16
 8009dce:	697a      	ldr	r2, [r7, #20]
 8009dd0:	429a      	cmp	r2, r3
 8009dd2:	d20d      	bcs.n	8009df0 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8009dd4:	2301      	movs	r3, #1
 8009dd6:	e01d      	b.n	8009e14 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8009dd8:	79fb      	ldrb	r3, [r7, #7]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d006      	beq.n	8009dec <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	685a      	ldr	r2, [r3, #4]
 8009de2:	68bb      	ldr	r3, [r7, #8]
 8009de4:	425b      	negs	r3, r3
 8009de6:	4413      	add	r3, r2
 8009de8:	617b      	str	r3, [r7, #20]
 8009dea:	e001      	b.n	8009df0 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8009dec:	2301      	movs	r3, #1
 8009dee:	e011      	b.n	8009e14 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	697a      	ldr	r2, [r7, #20]
 8009df4:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	895a      	ldrh	r2, [r3, #10]
 8009dfa:	8a7b      	ldrh	r3, [r7, #18]
 8009dfc:	4413      	add	r3, r2
 8009dfe:	b29a      	uxth	r2, r3
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	891a      	ldrh	r2, [r3, #8]
 8009e08:	8a7b      	ldrh	r3, [r7, #18]
 8009e0a:	4413      	add	r3, r2
 8009e0c:	b29a      	uxth	r2, r3
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	811a      	strh	r2, [r3, #8]


  return 0;
 8009e12:	2300      	movs	r3, #0
}
 8009e14:	4618      	mov	r0, r3
 8009e16:	3718      	adds	r7, #24
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	bd80      	pop	{r7, pc}
 8009e1c:	08014800 	.word	0x08014800
 8009e20:	08014964 	.word	0x08014964
 8009e24:	08014860 	.word	0x08014860

08009e28 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b082      	sub	sp, #8
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
 8009e30:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8009e32:	2200      	movs	r2, #0
 8009e34:	6839      	ldr	r1, [r7, #0]
 8009e36:	6878      	ldr	r0, [r7, #4]
 8009e38:	f7ff ff8e 	bl	8009d58 <pbuf_add_header_impl>
 8009e3c:	4603      	mov	r3, r0
}
 8009e3e:	4618      	mov	r0, r3
 8009e40:	3708      	adds	r7, #8
 8009e42:	46bd      	mov	sp, r7
 8009e44:	bd80      	pop	{r7, pc}
	...

08009e48 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b084      	sub	sp, #16
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	6078      	str	r0, [r7, #4]
 8009e50:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d106      	bne.n	8009e66 <pbuf_remove_header+0x1e>
 8009e58:	4b20      	ldr	r3, [pc, #128]	; (8009edc <pbuf_remove_header+0x94>)
 8009e5a:	f240 224b 	movw	r2, #587	; 0x24b
 8009e5e:	4920      	ldr	r1, [pc, #128]	; (8009ee0 <pbuf_remove_header+0x98>)
 8009e60:	4820      	ldr	r0, [pc, #128]	; (8009ee4 <pbuf_remove_header+0x9c>)
 8009e62:	f009 f997 	bl	8013194 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d003      	beq.n	8009e74 <pbuf_remove_header+0x2c>
 8009e6c:	683b      	ldr	r3, [r7, #0]
 8009e6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e72:	d301      	bcc.n	8009e78 <pbuf_remove_header+0x30>
    return 1;
 8009e74:	2301      	movs	r3, #1
 8009e76:	e02c      	b.n	8009ed2 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8009e78:	683b      	ldr	r3, [r7, #0]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d101      	bne.n	8009e82 <pbuf_remove_header+0x3a>
    return 0;
 8009e7e:	2300      	movs	r3, #0
 8009e80:	e027      	b.n	8009ed2 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8009e82:	683b      	ldr	r3, [r7, #0]
 8009e84:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	895b      	ldrh	r3, [r3, #10]
 8009e8a:	89fa      	ldrh	r2, [r7, #14]
 8009e8c:	429a      	cmp	r2, r3
 8009e8e:	d908      	bls.n	8009ea2 <pbuf_remove_header+0x5a>
 8009e90:	4b12      	ldr	r3, [pc, #72]	; (8009edc <pbuf_remove_header+0x94>)
 8009e92:	f240 2255 	movw	r2, #597	; 0x255
 8009e96:	4914      	ldr	r1, [pc, #80]	; (8009ee8 <pbuf_remove_header+0xa0>)
 8009e98:	4812      	ldr	r0, [pc, #72]	; (8009ee4 <pbuf_remove_header+0x9c>)
 8009e9a:	f009 f97b 	bl	8013194 <iprintf>
 8009e9e:	2301      	movs	r3, #1
 8009ea0:	e017      	b.n	8009ed2 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	685b      	ldr	r3, [r3, #4]
 8009ea6:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	685a      	ldr	r2, [r3, #4]
 8009eac:	683b      	ldr	r3, [r7, #0]
 8009eae:	441a      	add	r2, r3
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	895a      	ldrh	r2, [r3, #10]
 8009eb8:	89fb      	ldrh	r3, [r7, #14]
 8009eba:	1ad3      	subs	r3, r2, r3
 8009ebc:	b29a      	uxth	r2, r3
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	891a      	ldrh	r2, [r3, #8]
 8009ec6:	89fb      	ldrh	r3, [r7, #14]
 8009ec8:	1ad3      	subs	r3, r2, r3
 8009eca:	b29a      	uxth	r2, r3
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8009ed0:	2300      	movs	r3, #0
}
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	3710      	adds	r7, #16
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	bd80      	pop	{r7, pc}
 8009eda:	bf00      	nop
 8009edc:	08014800 	.word	0x08014800
 8009ee0:	08014964 	.word	0x08014964
 8009ee4:	08014860 	.word	0x08014860
 8009ee8:	08014970 	.word	0x08014970

08009eec <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b082      	sub	sp, #8
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
 8009ef4:	460b      	mov	r3, r1
 8009ef6:	807b      	strh	r3, [r7, #2]
 8009ef8:	4613      	mov	r3, r2
 8009efa:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8009efc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	da08      	bge.n	8009f16 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8009f04:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009f08:	425b      	negs	r3, r3
 8009f0a:	4619      	mov	r1, r3
 8009f0c:	6878      	ldr	r0, [r7, #4]
 8009f0e:	f7ff ff9b 	bl	8009e48 <pbuf_remove_header>
 8009f12:	4603      	mov	r3, r0
 8009f14:	e007      	b.n	8009f26 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8009f16:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009f1a:	787a      	ldrb	r2, [r7, #1]
 8009f1c:	4619      	mov	r1, r3
 8009f1e:	6878      	ldr	r0, [r7, #4]
 8009f20:	f7ff ff1a 	bl	8009d58 <pbuf_add_header_impl>
 8009f24:	4603      	mov	r3, r0
  }
}
 8009f26:	4618      	mov	r0, r3
 8009f28:	3708      	adds	r7, #8
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	bd80      	pop	{r7, pc}

08009f2e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8009f2e:	b580      	push	{r7, lr}
 8009f30:	b082      	sub	sp, #8
 8009f32:	af00      	add	r7, sp, #0
 8009f34:	6078      	str	r0, [r7, #4]
 8009f36:	460b      	mov	r3, r1
 8009f38:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8009f3a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009f3e:	2201      	movs	r2, #1
 8009f40:	4619      	mov	r1, r3
 8009f42:	6878      	ldr	r0, [r7, #4]
 8009f44:	f7ff ffd2 	bl	8009eec <pbuf_header_impl>
 8009f48:	4603      	mov	r3, r0
}
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	3708      	adds	r7, #8
 8009f4e:	46bd      	mov	sp, r7
 8009f50:	bd80      	pop	{r7, pc}
	...

08009f54 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b086      	sub	sp, #24
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d10b      	bne.n	8009f7a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d106      	bne.n	8009f76 <pbuf_free+0x22>
 8009f68:	4b38      	ldr	r3, [pc, #224]	; (800a04c <pbuf_free+0xf8>)
 8009f6a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8009f6e:	4938      	ldr	r1, [pc, #224]	; (800a050 <pbuf_free+0xfc>)
 8009f70:	4838      	ldr	r0, [pc, #224]	; (800a054 <pbuf_free+0x100>)
 8009f72:	f009 f90f 	bl	8013194 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8009f76:	2300      	movs	r3, #0
 8009f78:	e063      	b.n	800a042 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8009f7e:	e05c      	b.n	800a03a <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	7b9b      	ldrb	r3, [r3, #14]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d106      	bne.n	8009f96 <pbuf_free+0x42>
 8009f88:	4b30      	ldr	r3, [pc, #192]	; (800a04c <pbuf_free+0xf8>)
 8009f8a:	f240 22f1 	movw	r2, #753	; 0x2f1
 8009f8e:	4932      	ldr	r1, [pc, #200]	; (800a058 <pbuf_free+0x104>)
 8009f90:	4830      	ldr	r0, [pc, #192]	; (800a054 <pbuf_free+0x100>)
 8009f92:	f009 f8ff 	bl	8013194 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	7b9b      	ldrb	r3, [r3, #14]
 8009f9a:	3b01      	subs	r3, #1
 8009f9c:	b2da      	uxtb	r2, r3
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	739a      	strb	r2, [r3, #14]
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	7b9b      	ldrb	r3, [r3, #14]
 8009fa6:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8009fa8:	7dbb      	ldrb	r3, [r7, #22]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d143      	bne.n	800a036 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	7b1b      	ldrb	r3, [r3, #12]
 8009fb8:	f003 030f 	and.w	r3, r3, #15
 8009fbc:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	7b5b      	ldrb	r3, [r3, #13]
 8009fc2:	f003 0302 	and.w	r3, r3, #2
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d011      	beq.n	8009fee <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8009fce:	68bb      	ldr	r3, [r7, #8]
 8009fd0:	691b      	ldr	r3, [r3, #16]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d106      	bne.n	8009fe4 <pbuf_free+0x90>
 8009fd6:	4b1d      	ldr	r3, [pc, #116]	; (800a04c <pbuf_free+0xf8>)
 8009fd8:	f240 22ff 	movw	r2, #767	; 0x2ff
 8009fdc:	491f      	ldr	r1, [pc, #124]	; (800a05c <pbuf_free+0x108>)
 8009fde:	481d      	ldr	r0, [pc, #116]	; (800a054 <pbuf_free+0x100>)
 8009fe0:	f009 f8d8 	bl	8013194 <iprintf>
        pc->custom_free_function(p);
 8009fe4:	68bb      	ldr	r3, [r7, #8]
 8009fe6:	691b      	ldr	r3, [r3, #16]
 8009fe8:	6878      	ldr	r0, [r7, #4]
 8009fea:	4798      	blx	r3
 8009fec:	e01d      	b.n	800a02a <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8009fee:	7bfb      	ldrb	r3, [r7, #15]
 8009ff0:	2b02      	cmp	r3, #2
 8009ff2:	d104      	bne.n	8009ffe <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8009ff4:	6879      	ldr	r1, [r7, #4]
 8009ff6:	2008      	movs	r0, #8
 8009ff8:	f7ff f936 	bl	8009268 <memp_free>
 8009ffc:	e015      	b.n	800a02a <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8009ffe:	7bfb      	ldrb	r3, [r7, #15]
 800a000:	2b01      	cmp	r3, #1
 800a002:	d104      	bne.n	800a00e <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800a004:	6879      	ldr	r1, [r7, #4]
 800a006:	2007      	movs	r0, #7
 800a008:	f7ff f92e 	bl	8009268 <memp_free>
 800a00c:	e00d      	b.n	800a02a <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800a00e:	7bfb      	ldrb	r3, [r7, #15]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d103      	bne.n	800a01c <pbuf_free+0xc8>
          mem_free(p);
 800a014:	6878      	ldr	r0, [r7, #4]
 800a016:	f7fe fdb7 	bl	8008b88 <mem_free>
 800a01a:	e006      	b.n	800a02a <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800a01c:	4b0b      	ldr	r3, [pc, #44]	; (800a04c <pbuf_free+0xf8>)
 800a01e:	f240 320f 	movw	r2, #783	; 0x30f
 800a022:	490f      	ldr	r1, [pc, #60]	; (800a060 <pbuf_free+0x10c>)
 800a024:	480b      	ldr	r0, [pc, #44]	; (800a054 <pbuf_free+0x100>)
 800a026:	f009 f8b5 	bl	8013194 <iprintf>
        }
      }
      count++;
 800a02a:	7dfb      	ldrb	r3, [r7, #23]
 800a02c:	3301      	adds	r3, #1
 800a02e:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800a030:	693b      	ldr	r3, [r7, #16]
 800a032:	607b      	str	r3, [r7, #4]
 800a034:	e001      	b.n	800a03a <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800a036:	2300      	movs	r3, #0
 800a038:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d19f      	bne.n	8009f80 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800a040:	7dfb      	ldrb	r3, [r7, #23]
}
 800a042:	4618      	mov	r0, r3
 800a044:	3718      	adds	r7, #24
 800a046:	46bd      	mov	sp, r7
 800a048:	bd80      	pop	{r7, pc}
 800a04a:	bf00      	nop
 800a04c:	08014800 	.word	0x08014800
 800a050:	08014964 	.word	0x08014964
 800a054:	08014860 	.word	0x08014860
 800a058:	08014990 	.word	0x08014990
 800a05c:	080149a8 	.word	0x080149a8
 800a060:	080149cc 	.word	0x080149cc

0800a064 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800a064:	b480      	push	{r7}
 800a066:	b085      	sub	sp, #20
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800a06c:	2300      	movs	r3, #0
 800a06e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800a070:	e005      	b.n	800a07e <pbuf_clen+0x1a>
    ++len;
 800a072:	89fb      	ldrh	r3, [r7, #14]
 800a074:	3301      	adds	r3, #1
 800a076:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d1f6      	bne.n	800a072 <pbuf_clen+0xe>
  }
  return len;
 800a084:	89fb      	ldrh	r3, [r7, #14]
}
 800a086:	4618      	mov	r0, r3
 800a088:	3714      	adds	r7, #20
 800a08a:	46bd      	mov	sp, r7
 800a08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a090:	4770      	bx	lr
	...

0800a094 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b082      	sub	sp, #8
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d010      	beq.n	800a0c4 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	7b9b      	ldrb	r3, [r3, #14]
 800a0a6:	3301      	adds	r3, #1
 800a0a8:	b2da      	uxtb	r2, r3
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	7b9b      	ldrb	r3, [r3, #14]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d106      	bne.n	800a0c4 <pbuf_ref+0x30>
 800a0b6:	4b05      	ldr	r3, [pc, #20]	; (800a0cc <pbuf_ref+0x38>)
 800a0b8:	f240 3242 	movw	r2, #834	; 0x342
 800a0bc:	4904      	ldr	r1, [pc, #16]	; (800a0d0 <pbuf_ref+0x3c>)
 800a0be:	4805      	ldr	r0, [pc, #20]	; (800a0d4 <pbuf_ref+0x40>)
 800a0c0:	f009 f868 	bl	8013194 <iprintf>
  }
}
 800a0c4:	bf00      	nop
 800a0c6:	3708      	adds	r7, #8
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	bd80      	pop	{r7, pc}
 800a0cc:	08014800 	.word	0x08014800
 800a0d0:	080149e0 	.word	0x080149e0
 800a0d4:	08014860 	.word	0x08014860

0800a0d8 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b084      	sub	sp, #16
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
 800a0e0:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d002      	beq.n	800a0ee <pbuf_cat+0x16>
 800a0e8:	683b      	ldr	r3, [r7, #0]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d107      	bne.n	800a0fe <pbuf_cat+0x26>
 800a0ee:	4b20      	ldr	r3, [pc, #128]	; (800a170 <pbuf_cat+0x98>)
 800a0f0:	f240 3259 	movw	r2, #857	; 0x359
 800a0f4:	491f      	ldr	r1, [pc, #124]	; (800a174 <pbuf_cat+0x9c>)
 800a0f6:	4820      	ldr	r0, [pc, #128]	; (800a178 <pbuf_cat+0xa0>)
 800a0f8:	f009 f84c 	bl	8013194 <iprintf>
 800a0fc:	e034      	b.n	800a168 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	60fb      	str	r3, [r7, #12]
 800a102:	e00a      	b.n	800a11a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	891a      	ldrh	r2, [r3, #8]
 800a108:	683b      	ldr	r3, [r7, #0]
 800a10a:	891b      	ldrh	r3, [r3, #8]
 800a10c:	4413      	add	r3, r2
 800a10e:	b29a      	uxth	r2, r3
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	60fb      	str	r3, [r7, #12]
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d1f0      	bne.n	800a104 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	891a      	ldrh	r2, [r3, #8]
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	895b      	ldrh	r3, [r3, #10]
 800a12a:	429a      	cmp	r2, r3
 800a12c:	d006      	beq.n	800a13c <pbuf_cat+0x64>
 800a12e:	4b10      	ldr	r3, [pc, #64]	; (800a170 <pbuf_cat+0x98>)
 800a130:	f240 3262 	movw	r2, #866	; 0x362
 800a134:	4911      	ldr	r1, [pc, #68]	; (800a17c <pbuf_cat+0xa4>)
 800a136:	4810      	ldr	r0, [pc, #64]	; (800a178 <pbuf_cat+0xa0>)
 800a138:	f009 f82c 	bl	8013194 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d006      	beq.n	800a152 <pbuf_cat+0x7a>
 800a144:	4b0a      	ldr	r3, [pc, #40]	; (800a170 <pbuf_cat+0x98>)
 800a146:	f240 3263 	movw	r2, #867	; 0x363
 800a14a:	490d      	ldr	r1, [pc, #52]	; (800a180 <pbuf_cat+0xa8>)
 800a14c:	480a      	ldr	r0, [pc, #40]	; (800a178 <pbuf_cat+0xa0>)
 800a14e:	f009 f821 	bl	8013194 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	891a      	ldrh	r2, [r3, #8]
 800a156:	683b      	ldr	r3, [r7, #0]
 800a158:	891b      	ldrh	r3, [r3, #8]
 800a15a:	4413      	add	r3, r2
 800a15c:	b29a      	uxth	r2, r3
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	683a      	ldr	r2, [r7, #0]
 800a166:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800a168:	3710      	adds	r7, #16
 800a16a:	46bd      	mov	sp, r7
 800a16c:	bd80      	pop	{r7, pc}
 800a16e:	bf00      	nop
 800a170:	08014800 	.word	0x08014800
 800a174:	080149f4 	.word	0x080149f4
 800a178:	08014860 	.word	0x08014860
 800a17c:	08014a2c 	.word	0x08014a2c
 800a180:	08014a5c 	.word	0x08014a5c

0800a184 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800a184:	b580      	push	{r7, lr}
 800a186:	b082      	sub	sp, #8
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
 800a18c:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800a18e:	6839      	ldr	r1, [r7, #0]
 800a190:	6878      	ldr	r0, [r7, #4]
 800a192:	f7ff ffa1 	bl	800a0d8 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800a196:	6838      	ldr	r0, [r7, #0]
 800a198:	f7ff ff7c 	bl	800a094 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800a19c:	bf00      	nop
 800a19e:	3708      	adds	r7, #8
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	bd80      	pop	{r7, pc}

0800a1a4 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b086      	sub	sp, #24
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
 800a1ac:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	617b      	str	r3, [r7, #20]
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d008      	beq.n	800a1ce <pbuf_copy+0x2a>
 800a1bc:	683b      	ldr	r3, [r7, #0]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d005      	beq.n	800a1ce <pbuf_copy+0x2a>
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	891a      	ldrh	r2, [r3, #8]
 800a1c6:	683b      	ldr	r3, [r7, #0]
 800a1c8:	891b      	ldrh	r3, [r3, #8]
 800a1ca:	429a      	cmp	r2, r3
 800a1cc:	d209      	bcs.n	800a1e2 <pbuf_copy+0x3e>
 800a1ce:	4b57      	ldr	r3, [pc, #348]	; (800a32c <pbuf_copy+0x188>)
 800a1d0:	f240 32c9 	movw	r2, #969	; 0x3c9
 800a1d4:	4956      	ldr	r1, [pc, #344]	; (800a330 <pbuf_copy+0x18c>)
 800a1d6:	4857      	ldr	r0, [pc, #348]	; (800a334 <pbuf_copy+0x190>)
 800a1d8:	f008 ffdc 	bl	8013194 <iprintf>
 800a1dc:	f06f 030f 	mvn.w	r3, #15
 800a1e0:	e09f      	b.n	800a322 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	895b      	ldrh	r3, [r3, #10]
 800a1e6:	461a      	mov	r2, r3
 800a1e8:	697b      	ldr	r3, [r7, #20]
 800a1ea:	1ad2      	subs	r2, r2, r3
 800a1ec:	683b      	ldr	r3, [r7, #0]
 800a1ee:	895b      	ldrh	r3, [r3, #10]
 800a1f0:	4619      	mov	r1, r3
 800a1f2:	693b      	ldr	r3, [r7, #16]
 800a1f4:	1acb      	subs	r3, r1, r3
 800a1f6:	429a      	cmp	r2, r3
 800a1f8:	d306      	bcc.n	800a208 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800a1fa:	683b      	ldr	r3, [r7, #0]
 800a1fc:	895b      	ldrh	r3, [r3, #10]
 800a1fe:	461a      	mov	r2, r3
 800a200:	693b      	ldr	r3, [r7, #16]
 800a202:	1ad3      	subs	r3, r2, r3
 800a204:	60fb      	str	r3, [r7, #12]
 800a206:	e005      	b.n	800a214 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	895b      	ldrh	r3, [r3, #10]
 800a20c:	461a      	mov	r2, r3
 800a20e:	697b      	ldr	r3, [r7, #20]
 800a210:	1ad3      	subs	r3, r2, r3
 800a212:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	685a      	ldr	r2, [r3, #4]
 800a218:	697b      	ldr	r3, [r7, #20]
 800a21a:	18d0      	adds	r0, r2, r3
 800a21c:	683b      	ldr	r3, [r7, #0]
 800a21e:	685a      	ldr	r2, [r3, #4]
 800a220:	693b      	ldr	r3, [r7, #16]
 800a222:	4413      	add	r3, r2
 800a224:	68fa      	ldr	r2, [r7, #12]
 800a226:	4619      	mov	r1, r3
 800a228:	f008 ff9e 	bl	8013168 <memcpy>
    offset_to += len;
 800a22c:	697a      	ldr	r2, [r7, #20]
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	4413      	add	r3, r2
 800a232:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800a234:	693a      	ldr	r2, [r7, #16]
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	4413      	add	r3, r2
 800a23a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	895b      	ldrh	r3, [r3, #10]
 800a240:	461a      	mov	r2, r3
 800a242:	697b      	ldr	r3, [r7, #20]
 800a244:	4293      	cmp	r3, r2
 800a246:	d906      	bls.n	800a256 <pbuf_copy+0xb2>
 800a248:	4b38      	ldr	r3, [pc, #224]	; (800a32c <pbuf_copy+0x188>)
 800a24a:	f240 32d9 	movw	r2, #985	; 0x3d9
 800a24e:	493a      	ldr	r1, [pc, #232]	; (800a338 <pbuf_copy+0x194>)
 800a250:	4838      	ldr	r0, [pc, #224]	; (800a334 <pbuf_copy+0x190>)
 800a252:	f008 ff9f 	bl	8013194 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800a256:	683b      	ldr	r3, [r7, #0]
 800a258:	895b      	ldrh	r3, [r3, #10]
 800a25a:	461a      	mov	r2, r3
 800a25c:	693b      	ldr	r3, [r7, #16]
 800a25e:	4293      	cmp	r3, r2
 800a260:	d906      	bls.n	800a270 <pbuf_copy+0xcc>
 800a262:	4b32      	ldr	r3, [pc, #200]	; (800a32c <pbuf_copy+0x188>)
 800a264:	f240 32da 	movw	r2, #986	; 0x3da
 800a268:	4934      	ldr	r1, [pc, #208]	; (800a33c <pbuf_copy+0x198>)
 800a26a:	4832      	ldr	r0, [pc, #200]	; (800a334 <pbuf_copy+0x190>)
 800a26c:	f008 ff92 	bl	8013194 <iprintf>
    if (offset_from >= p_from->len) {
 800a270:	683b      	ldr	r3, [r7, #0]
 800a272:	895b      	ldrh	r3, [r3, #10]
 800a274:	461a      	mov	r2, r3
 800a276:	693b      	ldr	r3, [r7, #16]
 800a278:	4293      	cmp	r3, r2
 800a27a:	d304      	bcc.n	800a286 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800a27c:	2300      	movs	r3, #0
 800a27e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800a280:	683b      	ldr	r3, [r7, #0]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	895b      	ldrh	r3, [r3, #10]
 800a28a:	461a      	mov	r2, r3
 800a28c:	697b      	ldr	r3, [r7, #20]
 800a28e:	4293      	cmp	r3, r2
 800a290:	d114      	bne.n	800a2bc <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800a292:	2300      	movs	r3, #0
 800a294:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d10c      	bne.n	800a2bc <pbuf_copy+0x118>
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d009      	beq.n	800a2bc <pbuf_copy+0x118>
 800a2a8:	4b20      	ldr	r3, [pc, #128]	; (800a32c <pbuf_copy+0x188>)
 800a2aa:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800a2ae:	4924      	ldr	r1, [pc, #144]	; (800a340 <pbuf_copy+0x19c>)
 800a2b0:	4820      	ldr	r0, [pc, #128]	; (800a334 <pbuf_copy+0x190>)
 800a2b2:	f008 ff6f 	bl	8013194 <iprintf>
 800a2b6:	f06f 030f 	mvn.w	r3, #15
 800a2ba:	e032      	b.n	800a322 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800a2bc:	683b      	ldr	r3, [r7, #0]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d013      	beq.n	800a2ea <pbuf_copy+0x146>
 800a2c2:	683b      	ldr	r3, [r7, #0]
 800a2c4:	895a      	ldrh	r2, [r3, #10]
 800a2c6:	683b      	ldr	r3, [r7, #0]
 800a2c8:	891b      	ldrh	r3, [r3, #8]
 800a2ca:	429a      	cmp	r2, r3
 800a2cc:	d10d      	bne.n	800a2ea <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800a2ce:	683b      	ldr	r3, [r7, #0]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d009      	beq.n	800a2ea <pbuf_copy+0x146>
 800a2d6:	4b15      	ldr	r3, [pc, #84]	; (800a32c <pbuf_copy+0x188>)
 800a2d8:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800a2dc:	4919      	ldr	r1, [pc, #100]	; (800a344 <pbuf_copy+0x1a0>)
 800a2de:	4815      	ldr	r0, [pc, #84]	; (800a334 <pbuf_copy+0x190>)
 800a2e0:	f008 ff58 	bl	8013194 <iprintf>
 800a2e4:	f06f 0305 	mvn.w	r3, #5
 800a2e8:	e01b      	b.n	800a322 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d013      	beq.n	800a318 <pbuf_copy+0x174>
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	895a      	ldrh	r2, [r3, #10]
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	891b      	ldrh	r3, [r3, #8]
 800a2f8:	429a      	cmp	r2, r3
 800a2fa:	d10d      	bne.n	800a318 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	2b00      	cmp	r3, #0
 800a302:	d009      	beq.n	800a318 <pbuf_copy+0x174>
 800a304:	4b09      	ldr	r3, [pc, #36]	; (800a32c <pbuf_copy+0x188>)
 800a306:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800a30a:	490e      	ldr	r1, [pc, #56]	; (800a344 <pbuf_copy+0x1a0>)
 800a30c:	4809      	ldr	r0, [pc, #36]	; (800a334 <pbuf_copy+0x190>)
 800a30e:	f008 ff41 	bl	8013194 <iprintf>
 800a312:	f06f 0305 	mvn.w	r3, #5
 800a316:	e004      	b.n	800a322 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	f47f af61 	bne.w	800a1e2 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800a320:	2300      	movs	r3, #0
}
 800a322:	4618      	mov	r0, r3
 800a324:	3718      	adds	r7, #24
 800a326:	46bd      	mov	sp, r7
 800a328:	bd80      	pop	{r7, pc}
 800a32a:	bf00      	nop
 800a32c:	08014800 	.word	0x08014800
 800a330:	08014aa8 	.word	0x08014aa8
 800a334:	08014860 	.word	0x08014860
 800a338:	08014ad8 	.word	0x08014ad8
 800a33c:	08014af0 	.word	0x08014af0
 800a340:	08014b0c 	.word	0x08014b0c
 800a344:	08014b1c 	.word	0x08014b1c

0800a348 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800a348:	b580      	push	{r7, lr}
 800a34a:	b088      	sub	sp, #32
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	60f8      	str	r0, [r7, #12]
 800a350:	60b9      	str	r1, [r7, #8]
 800a352:	4611      	mov	r1, r2
 800a354:	461a      	mov	r2, r3
 800a356:	460b      	mov	r3, r1
 800a358:	80fb      	strh	r3, [r7, #6]
 800a35a:	4613      	mov	r3, r2
 800a35c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800a35e:	2300      	movs	r3, #0
 800a360:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800a362:	2300      	movs	r3, #0
 800a364:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d108      	bne.n	800a37e <pbuf_copy_partial+0x36>
 800a36c:	4b2b      	ldr	r3, [pc, #172]	; (800a41c <pbuf_copy_partial+0xd4>)
 800a36e:	f240 420a 	movw	r2, #1034	; 0x40a
 800a372:	492b      	ldr	r1, [pc, #172]	; (800a420 <pbuf_copy_partial+0xd8>)
 800a374:	482b      	ldr	r0, [pc, #172]	; (800a424 <pbuf_copy_partial+0xdc>)
 800a376:	f008 ff0d 	bl	8013194 <iprintf>
 800a37a:	2300      	movs	r3, #0
 800a37c:	e04a      	b.n	800a414 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800a37e:	68bb      	ldr	r3, [r7, #8]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d108      	bne.n	800a396 <pbuf_copy_partial+0x4e>
 800a384:	4b25      	ldr	r3, [pc, #148]	; (800a41c <pbuf_copy_partial+0xd4>)
 800a386:	f240 420b 	movw	r2, #1035	; 0x40b
 800a38a:	4927      	ldr	r1, [pc, #156]	; (800a428 <pbuf_copy_partial+0xe0>)
 800a38c:	4825      	ldr	r0, [pc, #148]	; (800a424 <pbuf_copy_partial+0xdc>)
 800a38e:	f008 ff01 	bl	8013194 <iprintf>
 800a392:	2300      	movs	r3, #0
 800a394:	e03e      	b.n	800a414 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	61fb      	str	r3, [r7, #28]
 800a39a:	e034      	b.n	800a406 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800a39c:	88bb      	ldrh	r3, [r7, #4]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d00a      	beq.n	800a3b8 <pbuf_copy_partial+0x70>
 800a3a2:	69fb      	ldr	r3, [r7, #28]
 800a3a4:	895b      	ldrh	r3, [r3, #10]
 800a3a6:	88ba      	ldrh	r2, [r7, #4]
 800a3a8:	429a      	cmp	r2, r3
 800a3aa:	d305      	bcc.n	800a3b8 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800a3ac:	69fb      	ldr	r3, [r7, #28]
 800a3ae:	895b      	ldrh	r3, [r3, #10]
 800a3b0:	88ba      	ldrh	r2, [r7, #4]
 800a3b2:	1ad3      	subs	r3, r2, r3
 800a3b4:	80bb      	strh	r3, [r7, #4]
 800a3b6:	e023      	b.n	800a400 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800a3b8:	69fb      	ldr	r3, [r7, #28]
 800a3ba:	895a      	ldrh	r2, [r3, #10]
 800a3bc:	88bb      	ldrh	r3, [r7, #4]
 800a3be:	1ad3      	subs	r3, r2, r3
 800a3c0:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800a3c2:	8b3a      	ldrh	r2, [r7, #24]
 800a3c4:	88fb      	ldrh	r3, [r7, #6]
 800a3c6:	429a      	cmp	r2, r3
 800a3c8:	d901      	bls.n	800a3ce <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800a3ca:	88fb      	ldrh	r3, [r7, #6]
 800a3cc:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800a3ce:	8b7b      	ldrh	r3, [r7, #26]
 800a3d0:	68ba      	ldr	r2, [r7, #8]
 800a3d2:	18d0      	adds	r0, r2, r3
 800a3d4:	69fb      	ldr	r3, [r7, #28]
 800a3d6:	685a      	ldr	r2, [r3, #4]
 800a3d8:	88bb      	ldrh	r3, [r7, #4]
 800a3da:	4413      	add	r3, r2
 800a3dc:	8b3a      	ldrh	r2, [r7, #24]
 800a3de:	4619      	mov	r1, r3
 800a3e0:	f008 fec2 	bl	8013168 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800a3e4:	8afa      	ldrh	r2, [r7, #22]
 800a3e6:	8b3b      	ldrh	r3, [r7, #24]
 800a3e8:	4413      	add	r3, r2
 800a3ea:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800a3ec:	8b7a      	ldrh	r2, [r7, #26]
 800a3ee:	8b3b      	ldrh	r3, [r7, #24]
 800a3f0:	4413      	add	r3, r2
 800a3f2:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800a3f4:	88fa      	ldrh	r2, [r7, #6]
 800a3f6:	8b3b      	ldrh	r3, [r7, #24]
 800a3f8:	1ad3      	subs	r3, r2, r3
 800a3fa:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800a400:	69fb      	ldr	r3, [r7, #28]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	61fb      	str	r3, [r7, #28]
 800a406:	88fb      	ldrh	r3, [r7, #6]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d002      	beq.n	800a412 <pbuf_copy_partial+0xca>
 800a40c:	69fb      	ldr	r3, [r7, #28]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d1c4      	bne.n	800a39c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800a412:	8afb      	ldrh	r3, [r7, #22]
}
 800a414:	4618      	mov	r0, r3
 800a416:	3720      	adds	r7, #32
 800a418:	46bd      	mov	sp, r7
 800a41a:	bd80      	pop	{r7, pc}
 800a41c:	08014800 	.word	0x08014800
 800a420:	08014b48 	.word	0x08014b48
 800a424:	08014860 	.word	0x08014860
 800a428:	08014b68 	.word	0x08014b68

0800a42c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800a42c:	b580      	push	{r7, lr}
 800a42e:	b084      	sub	sp, #16
 800a430:	af00      	add	r7, sp, #0
 800a432:	4603      	mov	r3, r0
 800a434:	603a      	str	r2, [r7, #0]
 800a436:	71fb      	strb	r3, [r7, #7]
 800a438:	460b      	mov	r3, r1
 800a43a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800a43c:	683b      	ldr	r3, [r7, #0]
 800a43e:	8919      	ldrh	r1, [r3, #8]
 800a440:	88ba      	ldrh	r2, [r7, #4]
 800a442:	79fb      	ldrb	r3, [r7, #7]
 800a444:	4618      	mov	r0, r3
 800a446:	f7ff faa1 	bl	800998c <pbuf_alloc>
 800a44a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d101      	bne.n	800a456 <pbuf_clone+0x2a>
    return NULL;
 800a452:	2300      	movs	r3, #0
 800a454:	e011      	b.n	800a47a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800a456:	6839      	ldr	r1, [r7, #0]
 800a458:	68f8      	ldr	r0, [r7, #12]
 800a45a:	f7ff fea3 	bl	800a1a4 <pbuf_copy>
 800a45e:	4603      	mov	r3, r0
 800a460:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800a462:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d006      	beq.n	800a478 <pbuf_clone+0x4c>
 800a46a:	4b06      	ldr	r3, [pc, #24]	; (800a484 <pbuf_clone+0x58>)
 800a46c:	f240 5224 	movw	r2, #1316	; 0x524
 800a470:	4905      	ldr	r1, [pc, #20]	; (800a488 <pbuf_clone+0x5c>)
 800a472:	4806      	ldr	r0, [pc, #24]	; (800a48c <pbuf_clone+0x60>)
 800a474:	f008 fe8e 	bl	8013194 <iprintf>
  return q;
 800a478:	68fb      	ldr	r3, [r7, #12]
}
 800a47a:	4618      	mov	r0, r3
 800a47c:	3710      	adds	r7, #16
 800a47e:	46bd      	mov	sp, r7
 800a480:	bd80      	pop	{r7, pc}
 800a482:	bf00      	nop
 800a484:	08014800 	.word	0x08014800
 800a488:	08014c74 	.word	0x08014c74
 800a48c:	08014860 	.word	0x08014860

0800a490 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800a490:	b580      	push	{r7, lr}
 800a492:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800a494:	f008 fe96 	bl	80131c4 <rand>
 800a498:	4603      	mov	r3, r0
 800a49a:	b29b      	uxth	r3, r3
 800a49c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800a4a0:	b29b      	uxth	r3, r3
 800a4a2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800a4a6:	b29a      	uxth	r2, r3
 800a4a8:	4b01      	ldr	r3, [pc, #4]	; (800a4b0 <tcp_init+0x20>)
 800a4aa:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800a4ac:	bf00      	nop
 800a4ae:	bd80      	pop	{r7, pc}
 800a4b0:	24000024 	.word	0x24000024

0800a4b4 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b082      	sub	sp, #8
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	7d1b      	ldrb	r3, [r3, #20]
 800a4c0:	2b01      	cmp	r3, #1
 800a4c2:	d105      	bne.n	800a4d0 <tcp_free+0x1c>
 800a4c4:	4b06      	ldr	r3, [pc, #24]	; (800a4e0 <tcp_free+0x2c>)
 800a4c6:	22d4      	movs	r2, #212	; 0xd4
 800a4c8:	4906      	ldr	r1, [pc, #24]	; (800a4e4 <tcp_free+0x30>)
 800a4ca:	4807      	ldr	r0, [pc, #28]	; (800a4e8 <tcp_free+0x34>)
 800a4cc:	f008 fe62 	bl	8013194 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800a4d0:	6879      	ldr	r1, [r7, #4]
 800a4d2:	2001      	movs	r0, #1
 800a4d4:	f7fe fec8 	bl	8009268 <memp_free>
}
 800a4d8:	bf00      	nop
 800a4da:	3708      	adds	r7, #8
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	bd80      	pop	{r7, pc}
 800a4e0:	08014d00 	.word	0x08014d00
 800a4e4:	08014d30 	.word	0x08014d30
 800a4e8:	08014d44 	.word	0x08014d44

0800a4ec <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b082      	sub	sp, #8
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	7d1b      	ldrb	r3, [r3, #20]
 800a4f8:	2b01      	cmp	r3, #1
 800a4fa:	d105      	bne.n	800a508 <tcp_free_listen+0x1c>
 800a4fc:	4b06      	ldr	r3, [pc, #24]	; (800a518 <tcp_free_listen+0x2c>)
 800a4fe:	22df      	movs	r2, #223	; 0xdf
 800a500:	4906      	ldr	r1, [pc, #24]	; (800a51c <tcp_free_listen+0x30>)
 800a502:	4807      	ldr	r0, [pc, #28]	; (800a520 <tcp_free_listen+0x34>)
 800a504:	f008 fe46 	bl	8013194 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800a508:	6879      	ldr	r1, [r7, #4]
 800a50a:	2002      	movs	r0, #2
 800a50c:	f7fe feac 	bl	8009268 <memp_free>
}
 800a510:	bf00      	nop
 800a512:	3708      	adds	r7, #8
 800a514:	46bd      	mov	sp, r7
 800a516:	bd80      	pop	{r7, pc}
 800a518:	08014d00 	.word	0x08014d00
 800a51c:	08014d6c 	.word	0x08014d6c
 800a520:	08014d44 	.word	0x08014d44

0800a524 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800a524:	b580      	push	{r7, lr}
 800a526:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800a528:	f001 f85c 	bl	800b5e4 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800a52c:	4b07      	ldr	r3, [pc, #28]	; (800a54c <tcp_tmr+0x28>)
 800a52e:	781b      	ldrb	r3, [r3, #0]
 800a530:	3301      	adds	r3, #1
 800a532:	b2da      	uxtb	r2, r3
 800a534:	4b05      	ldr	r3, [pc, #20]	; (800a54c <tcp_tmr+0x28>)
 800a536:	701a      	strb	r2, [r3, #0]
 800a538:	4b04      	ldr	r3, [pc, #16]	; (800a54c <tcp_tmr+0x28>)
 800a53a:	781b      	ldrb	r3, [r3, #0]
 800a53c:	f003 0301 	and.w	r3, r3, #1
 800a540:	2b00      	cmp	r3, #0
 800a542:	d001      	beq.n	800a548 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800a544:	f000 fd0e 	bl	800af64 <tcp_slowtmr>
  }
}
 800a548:	bf00      	nop
 800a54a:	bd80      	pop	{r7, pc}
 800a54c:	240000ed 	.word	0x240000ed

0800a550 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800a550:	b580      	push	{r7, lr}
 800a552:	b084      	sub	sp, #16
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]
 800a558:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800a55a:	683b      	ldr	r3, [r7, #0]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d105      	bne.n	800a56c <tcp_remove_listener+0x1c>
 800a560:	4b0d      	ldr	r3, [pc, #52]	; (800a598 <tcp_remove_listener+0x48>)
 800a562:	22ff      	movs	r2, #255	; 0xff
 800a564:	490d      	ldr	r1, [pc, #52]	; (800a59c <tcp_remove_listener+0x4c>)
 800a566:	480e      	ldr	r0, [pc, #56]	; (800a5a0 <tcp_remove_listener+0x50>)
 800a568:	f008 fe14 	bl	8013194 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	60fb      	str	r3, [r7, #12]
 800a570:	e00a      	b.n	800a588 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a576:	683a      	ldr	r2, [r7, #0]
 800a578:	429a      	cmp	r2, r3
 800a57a:	d102      	bne.n	800a582 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	2200      	movs	r2, #0
 800a580:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	68db      	ldr	r3, [r3, #12]
 800a586:	60fb      	str	r3, [r7, #12]
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d1f1      	bne.n	800a572 <tcp_remove_listener+0x22>
    }
  }
}
 800a58e:	bf00      	nop
 800a590:	bf00      	nop
 800a592:	3710      	adds	r7, #16
 800a594:	46bd      	mov	sp, r7
 800a596:	bd80      	pop	{r7, pc}
 800a598:	08014d00 	.word	0x08014d00
 800a59c:	08014d88 	.word	0x08014d88
 800a5a0:	08014d44 	.word	0x08014d44

0800a5a4 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	b084      	sub	sp, #16
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d106      	bne.n	800a5c0 <tcp_listen_closed+0x1c>
 800a5b2:	4b14      	ldr	r3, [pc, #80]	; (800a604 <tcp_listen_closed+0x60>)
 800a5b4:	f240 1211 	movw	r2, #273	; 0x111
 800a5b8:	4913      	ldr	r1, [pc, #76]	; (800a608 <tcp_listen_closed+0x64>)
 800a5ba:	4814      	ldr	r0, [pc, #80]	; (800a60c <tcp_listen_closed+0x68>)
 800a5bc:	f008 fdea 	bl	8013194 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	7d1b      	ldrb	r3, [r3, #20]
 800a5c4:	2b01      	cmp	r3, #1
 800a5c6:	d006      	beq.n	800a5d6 <tcp_listen_closed+0x32>
 800a5c8:	4b0e      	ldr	r3, [pc, #56]	; (800a604 <tcp_listen_closed+0x60>)
 800a5ca:	f44f 7289 	mov.w	r2, #274	; 0x112
 800a5ce:	4910      	ldr	r1, [pc, #64]	; (800a610 <tcp_listen_closed+0x6c>)
 800a5d0:	480e      	ldr	r0, [pc, #56]	; (800a60c <tcp_listen_closed+0x68>)
 800a5d2:	f008 fddf 	bl	8013194 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800a5d6:	2301      	movs	r3, #1
 800a5d8:	60fb      	str	r3, [r7, #12]
 800a5da:	e00b      	b.n	800a5f4 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800a5dc:	4a0d      	ldr	r2, [pc, #52]	; (800a614 <tcp_listen_closed+0x70>)
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	6879      	ldr	r1, [r7, #4]
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	f7ff ffb1 	bl	800a550 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	3301      	adds	r3, #1
 800a5f2:	60fb      	str	r3, [r7, #12]
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	2b03      	cmp	r3, #3
 800a5f8:	d9f0      	bls.n	800a5dc <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800a5fa:	bf00      	nop
 800a5fc:	bf00      	nop
 800a5fe:	3710      	adds	r7, #16
 800a600:	46bd      	mov	sp, r7
 800a602:	bd80      	pop	{r7, pc}
 800a604:	08014d00 	.word	0x08014d00
 800a608:	08014db0 	.word	0x08014db0
 800a60c:	08014d44 	.word	0x08014d44
 800a610:	08014dbc 	.word	0x08014dbc
 800a614:	08016d00 	.word	0x08016d00

0800a618 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800a618:	b5b0      	push	{r4, r5, r7, lr}
 800a61a:	b088      	sub	sp, #32
 800a61c:	af04      	add	r7, sp, #16
 800a61e:	6078      	str	r0, [r7, #4]
 800a620:	460b      	mov	r3, r1
 800a622:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2b00      	cmp	r3, #0
 800a628:	d106      	bne.n	800a638 <tcp_close_shutdown+0x20>
 800a62a:	4b63      	ldr	r3, [pc, #396]	; (800a7b8 <tcp_close_shutdown+0x1a0>)
 800a62c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800a630:	4962      	ldr	r1, [pc, #392]	; (800a7bc <tcp_close_shutdown+0x1a4>)
 800a632:	4863      	ldr	r0, [pc, #396]	; (800a7c0 <tcp_close_shutdown+0x1a8>)
 800a634:	f008 fdae 	bl	8013194 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800a638:	78fb      	ldrb	r3, [r7, #3]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d066      	beq.n	800a70c <tcp_close_shutdown+0xf4>
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	7d1b      	ldrb	r3, [r3, #20]
 800a642:	2b04      	cmp	r3, #4
 800a644:	d003      	beq.n	800a64e <tcp_close_shutdown+0x36>
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	7d1b      	ldrb	r3, [r3, #20]
 800a64a:	2b07      	cmp	r3, #7
 800a64c:	d15e      	bne.n	800a70c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a652:	2b00      	cmp	r3, #0
 800a654:	d104      	bne.n	800a660 <tcp_close_shutdown+0x48>
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a65a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800a65e:	d055      	beq.n	800a70c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	8b5b      	ldrh	r3, [r3, #26]
 800a664:	f003 0310 	and.w	r3, r3, #16
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d106      	bne.n	800a67a <tcp_close_shutdown+0x62>
 800a66c:	4b52      	ldr	r3, [pc, #328]	; (800a7b8 <tcp_close_shutdown+0x1a0>)
 800a66e:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800a672:	4954      	ldr	r1, [pc, #336]	; (800a7c4 <tcp_close_shutdown+0x1ac>)
 800a674:	4852      	ldr	r0, [pc, #328]	; (800a7c0 <tcp_close_shutdown+0x1a8>)
 800a676:	f008 fd8d 	bl	8013194 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800a682:	687d      	ldr	r5, [r7, #4]
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	3304      	adds	r3, #4
 800a688:	687a      	ldr	r2, [r7, #4]
 800a68a:	8ad2      	ldrh	r2, [r2, #22]
 800a68c:	6879      	ldr	r1, [r7, #4]
 800a68e:	8b09      	ldrh	r1, [r1, #24]
 800a690:	9102      	str	r1, [sp, #8]
 800a692:	9201      	str	r2, [sp, #4]
 800a694:	9300      	str	r3, [sp, #0]
 800a696:	462b      	mov	r3, r5
 800a698:	4622      	mov	r2, r4
 800a69a:	4601      	mov	r1, r0
 800a69c:	6878      	ldr	r0, [r7, #4]
 800a69e:	f005 fd85 	bl	80101ac <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800a6a2:	6878      	ldr	r0, [r7, #4]
 800a6a4:	f001 fb66 	bl	800bd74 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800a6a8:	4b47      	ldr	r3, [pc, #284]	; (800a7c8 <tcp_close_shutdown+0x1b0>)
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	687a      	ldr	r2, [r7, #4]
 800a6ae:	429a      	cmp	r2, r3
 800a6b0:	d105      	bne.n	800a6be <tcp_close_shutdown+0xa6>
 800a6b2:	4b45      	ldr	r3, [pc, #276]	; (800a7c8 <tcp_close_shutdown+0x1b0>)
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	68db      	ldr	r3, [r3, #12]
 800a6b8:	4a43      	ldr	r2, [pc, #268]	; (800a7c8 <tcp_close_shutdown+0x1b0>)
 800a6ba:	6013      	str	r3, [r2, #0]
 800a6bc:	e013      	b.n	800a6e6 <tcp_close_shutdown+0xce>
 800a6be:	4b42      	ldr	r3, [pc, #264]	; (800a7c8 <tcp_close_shutdown+0x1b0>)
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	60fb      	str	r3, [r7, #12]
 800a6c4:	e00c      	b.n	800a6e0 <tcp_close_shutdown+0xc8>
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	68db      	ldr	r3, [r3, #12]
 800a6ca:	687a      	ldr	r2, [r7, #4]
 800a6cc:	429a      	cmp	r2, r3
 800a6ce:	d104      	bne.n	800a6da <tcp_close_shutdown+0xc2>
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	68da      	ldr	r2, [r3, #12]
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	60da      	str	r2, [r3, #12]
 800a6d8:	e005      	b.n	800a6e6 <tcp_close_shutdown+0xce>
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	68db      	ldr	r3, [r3, #12]
 800a6de:	60fb      	str	r3, [r7, #12]
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d1ef      	bne.n	800a6c6 <tcp_close_shutdown+0xae>
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	2200      	movs	r2, #0
 800a6ea:	60da      	str	r2, [r3, #12]
 800a6ec:	4b37      	ldr	r3, [pc, #220]	; (800a7cc <tcp_close_shutdown+0x1b4>)
 800a6ee:	2201      	movs	r2, #1
 800a6f0:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800a6f2:	4b37      	ldr	r3, [pc, #220]	; (800a7d0 <tcp_close_shutdown+0x1b8>)
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	687a      	ldr	r2, [r7, #4]
 800a6f8:	429a      	cmp	r2, r3
 800a6fa:	d102      	bne.n	800a702 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800a6fc:	f003 fffa 	bl	800e6f4 <tcp_trigger_input_pcb_close>
 800a700:	e002      	b.n	800a708 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800a702:	6878      	ldr	r0, [r7, #4]
 800a704:	f7ff fed6 	bl	800a4b4 <tcp_free>
      }
      return ERR_OK;
 800a708:	2300      	movs	r3, #0
 800a70a:	e050      	b.n	800a7ae <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	7d1b      	ldrb	r3, [r3, #20]
 800a710:	2b02      	cmp	r3, #2
 800a712:	d03b      	beq.n	800a78c <tcp_close_shutdown+0x174>
 800a714:	2b02      	cmp	r3, #2
 800a716:	dc44      	bgt.n	800a7a2 <tcp_close_shutdown+0x18a>
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d002      	beq.n	800a722 <tcp_close_shutdown+0x10a>
 800a71c:	2b01      	cmp	r3, #1
 800a71e:	d02a      	beq.n	800a776 <tcp_close_shutdown+0x15e>
 800a720:	e03f      	b.n	800a7a2 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	8adb      	ldrh	r3, [r3, #22]
 800a726:	2b00      	cmp	r3, #0
 800a728:	d021      	beq.n	800a76e <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800a72a:	4b2a      	ldr	r3, [pc, #168]	; (800a7d4 <tcp_close_shutdown+0x1bc>)
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	687a      	ldr	r2, [r7, #4]
 800a730:	429a      	cmp	r2, r3
 800a732:	d105      	bne.n	800a740 <tcp_close_shutdown+0x128>
 800a734:	4b27      	ldr	r3, [pc, #156]	; (800a7d4 <tcp_close_shutdown+0x1bc>)
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	68db      	ldr	r3, [r3, #12]
 800a73a:	4a26      	ldr	r2, [pc, #152]	; (800a7d4 <tcp_close_shutdown+0x1bc>)
 800a73c:	6013      	str	r3, [r2, #0]
 800a73e:	e013      	b.n	800a768 <tcp_close_shutdown+0x150>
 800a740:	4b24      	ldr	r3, [pc, #144]	; (800a7d4 <tcp_close_shutdown+0x1bc>)
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	60bb      	str	r3, [r7, #8]
 800a746:	e00c      	b.n	800a762 <tcp_close_shutdown+0x14a>
 800a748:	68bb      	ldr	r3, [r7, #8]
 800a74a:	68db      	ldr	r3, [r3, #12]
 800a74c:	687a      	ldr	r2, [r7, #4]
 800a74e:	429a      	cmp	r2, r3
 800a750:	d104      	bne.n	800a75c <tcp_close_shutdown+0x144>
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	68da      	ldr	r2, [r3, #12]
 800a756:	68bb      	ldr	r3, [r7, #8]
 800a758:	60da      	str	r2, [r3, #12]
 800a75a:	e005      	b.n	800a768 <tcp_close_shutdown+0x150>
 800a75c:	68bb      	ldr	r3, [r7, #8]
 800a75e:	68db      	ldr	r3, [r3, #12]
 800a760:	60bb      	str	r3, [r7, #8]
 800a762:	68bb      	ldr	r3, [r7, #8]
 800a764:	2b00      	cmp	r3, #0
 800a766:	d1ef      	bne.n	800a748 <tcp_close_shutdown+0x130>
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	2200      	movs	r2, #0
 800a76c:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800a76e:	6878      	ldr	r0, [r7, #4]
 800a770:	f7ff fea0 	bl	800a4b4 <tcp_free>
      break;
 800a774:	e01a      	b.n	800a7ac <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800a776:	6878      	ldr	r0, [r7, #4]
 800a778:	f7ff ff14 	bl	800a5a4 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800a77c:	6879      	ldr	r1, [r7, #4]
 800a77e:	4816      	ldr	r0, [pc, #88]	; (800a7d8 <tcp_close_shutdown+0x1c0>)
 800a780:	f001 fb48 	bl	800be14 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800a784:	6878      	ldr	r0, [r7, #4]
 800a786:	f7ff feb1 	bl	800a4ec <tcp_free_listen>
      break;
 800a78a:	e00f      	b.n	800a7ac <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800a78c:	6879      	ldr	r1, [r7, #4]
 800a78e:	480e      	ldr	r0, [pc, #56]	; (800a7c8 <tcp_close_shutdown+0x1b0>)
 800a790:	f001 fb40 	bl	800be14 <tcp_pcb_remove>
 800a794:	4b0d      	ldr	r3, [pc, #52]	; (800a7cc <tcp_close_shutdown+0x1b4>)
 800a796:	2201      	movs	r2, #1
 800a798:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800a79a:	6878      	ldr	r0, [r7, #4]
 800a79c:	f7ff fe8a 	bl	800a4b4 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800a7a0:	e004      	b.n	800a7ac <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800a7a2:	6878      	ldr	r0, [r7, #4]
 800a7a4:	f000 f81a 	bl	800a7dc <tcp_close_shutdown_fin>
 800a7a8:	4603      	mov	r3, r0
 800a7aa:	e000      	b.n	800a7ae <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800a7ac:	2300      	movs	r3, #0
}
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	3710      	adds	r7, #16
 800a7b2:	46bd      	mov	sp, r7
 800a7b4:	bdb0      	pop	{r4, r5, r7, pc}
 800a7b6:	bf00      	nop
 800a7b8:	08014d00 	.word	0x08014d00
 800a7bc:	08014dd4 	.word	0x08014dd4
 800a7c0:	08014d44 	.word	0x08014d44
 800a7c4:	08014df4 	.word	0x08014df4
 800a7c8:	240037d4 	.word	0x240037d4
 800a7cc:	240037d0 	.word	0x240037d0
 800a7d0:	240037e8 	.word	0x240037e8
 800a7d4:	240037e0 	.word	0x240037e0
 800a7d8:	240037dc 	.word	0x240037dc

0800a7dc <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	b084      	sub	sp, #16
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d106      	bne.n	800a7f8 <tcp_close_shutdown_fin+0x1c>
 800a7ea:	4b2e      	ldr	r3, [pc, #184]	; (800a8a4 <tcp_close_shutdown_fin+0xc8>)
 800a7ec:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800a7f0:	492d      	ldr	r1, [pc, #180]	; (800a8a8 <tcp_close_shutdown_fin+0xcc>)
 800a7f2:	482e      	ldr	r0, [pc, #184]	; (800a8ac <tcp_close_shutdown_fin+0xd0>)
 800a7f4:	f008 fcce 	bl	8013194 <iprintf>

  switch (pcb->state) {
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	7d1b      	ldrb	r3, [r3, #20]
 800a7fc:	2b07      	cmp	r3, #7
 800a7fe:	d020      	beq.n	800a842 <tcp_close_shutdown_fin+0x66>
 800a800:	2b07      	cmp	r3, #7
 800a802:	dc2b      	bgt.n	800a85c <tcp_close_shutdown_fin+0x80>
 800a804:	2b03      	cmp	r3, #3
 800a806:	d002      	beq.n	800a80e <tcp_close_shutdown_fin+0x32>
 800a808:	2b04      	cmp	r3, #4
 800a80a:	d00d      	beq.n	800a828 <tcp_close_shutdown_fin+0x4c>
 800a80c:	e026      	b.n	800a85c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800a80e:	6878      	ldr	r0, [r7, #4]
 800a810:	f004 fdda 	bl	800f3c8 <tcp_send_fin>
 800a814:	4603      	mov	r3, r0
 800a816:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800a818:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d11f      	bne.n	800a860 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	2205      	movs	r2, #5
 800a824:	751a      	strb	r2, [r3, #20]
      }
      break;
 800a826:	e01b      	b.n	800a860 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800a828:	6878      	ldr	r0, [r7, #4]
 800a82a:	f004 fdcd 	bl	800f3c8 <tcp_send_fin>
 800a82e:	4603      	mov	r3, r0
 800a830:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800a832:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d114      	bne.n	800a864 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	2205      	movs	r2, #5
 800a83e:	751a      	strb	r2, [r3, #20]
      }
      break;
 800a840:	e010      	b.n	800a864 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800a842:	6878      	ldr	r0, [r7, #4]
 800a844:	f004 fdc0 	bl	800f3c8 <tcp_send_fin>
 800a848:	4603      	mov	r3, r0
 800a84a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800a84c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a850:	2b00      	cmp	r3, #0
 800a852:	d109      	bne.n	800a868 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	2209      	movs	r2, #9
 800a858:	751a      	strb	r2, [r3, #20]
      }
      break;
 800a85a:	e005      	b.n	800a868 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800a85c:	2300      	movs	r3, #0
 800a85e:	e01c      	b.n	800a89a <tcp_close_shutdown_fin+0xbe>
      break;
 800a860:	bf00      	nop
 800a862:	e002      	b.n	800a86a <tcp_close_shutdown_fin+0x8e>
      break;
 800a864:	bf00      	nop
 800a866:	e000      	b.n	800a86a <tcp_close_shutdown_fin+0x8e>
      break;
 800a868:	bf00      	nop
  }

  if (err == ERR_OK) {
 800a86a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d103      	bne.n	800a87a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800a872:	6878      	ldr	r0, [r7, #4]
 800a874:	f004 fee6 	bl	800f644 <tcp_output>
 800a878:	e00d      	b.n	800a896 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800a87a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a87e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a882:	d108      	bne.n	800a896 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	8b5b      	ldrh	r3, [r3, #26]
 800a888:	f043 0308 	orr.w	r3, r3, #8
 800a88c:	b29a      	uxth	r2, r3
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800a892:	2300      	movs	r3, #0
 800a894:	e001      	b.n	800a89a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800a896:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a89a:	4618      	mov	r0, r3
 800a89c:	3710      	adds	r7, #16
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	bd80      	pop	{r7, pc}
 800a8a2:	bf00      	nop
 800a8a4:	08014d00 	.word	0x08014d00
 800a8a8:	08014db0 	.word	0x08014db0
 800a8ac:	08014d44 	.word	0x08014d44

0800a8b0 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	b082      	sub	sp, #8
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d109      	bne.n	800a8d2 <tcp_close+0x22>
 800a8be:	4b0f      	ldr	r3, [pc, #60]	; (800a8fc <tcp_close+0x4c>)
 800a8c0:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800a8c4:	490e      	ldr	r1, [pc, #56]	; (800a900 <tcp_close+0x50>)
 800a8c6:	480f      	ldr	r0, [pc, #60]	; (800a904 <tcp_close+0x54>)
 800a8c8:	f008 fc64 	bl	8013194 <iprintf>
 800a8cc:	f06f 030f 	mvn.w	r3, #15
 800a8d0:	e00f      	b.n	800a8f2 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	7d1b      	ldrb	r3, [r3, #20]
 800a8d6:	2b01      	cmp	r3, #1
 800a8d8:	d006      	beq.n	800a8e8 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	8b5b      	ldrh	r3, [r3, #26]
 800a8de:	f043 0310 	orr.w	r3, r3, #16
 800a8e2:	b29a      	uxth	r2, r3
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800a8e8:	2101      	movs	r1, #1
 800a8ea:	6878      	ldr	r0, [r7, #4]
 800a8ec:	f7ff fe94 	bl	800a618 <tcp_close_shutdown>
 800a8f0:	4603      	mov	r3, r0
}
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	3708      	adds	r7, #8
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	bd80      	pop	{r7, pc}
 800a8fa:	bf00      	nop
 800a8fc:	08014d00 	.word	0x08014d00
 800a900:	08014e10 	.word	0x08014e10
 800a904:	08014d44 	.word	0x08014d44

0800a908 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800a908:	b580      	push	{r7, lr}
 800a90a:	b08e      	sub	sp, #56	; 0x38
 800a90c:	af04      	add	r7, sp, #16
 800a90e:	6078      	str	r0, [r7, #4]
 800a910:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	2b00      	cmp	r3, #0
 800a916:	d107      	bne.n	800a928 <tcp_abandon+0x20>
 800a918:	4b52      	ldr	r3, [pc, #328]	; (800aa64 <tcp_abandon+0x15c>)
 800a91a:	f240 223d 	movw	r2, #573	; 0x23d
 800a91e:	4952      	ldr	r1, [pc, #328]	; (800aa68 <tcp_abandon+0x160>)
 800a920:	4852      	ldr	r0, [pc, #328]	; (800aa6c <tcp_abandon+0x164>)
 800a922:	f008 fc37 	bl	8013194 <iprintf>
 800a926:	e099      	b.n	800aa5c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	7d1b      	ldrb	r3, [r3, #20]
 800a92c:	2b01      	cmp	r3, #1
 800a92e:	d106      	bne.n	800a93e <tcp_abandon+0x36>
 800a930:	4b4c      	ldr	r3, [pc, #304]	; (800aa64 <tcp_abandon+0x15c>)
 800a932:	f44f 7210 	mov.w	r2, #576	; 0x240
 800a936:	494e      	ldr	r1, [pc, #312]	; (800aa70 <tcp_abandon+0x168>)
 800a938:	484c      	ldr	r0, [pc, #304]	; (800aa6c <tcp_abandon+0x164>)
 800a93a:	f008 fc2b 	bl	8013194 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	7d1b      	ldrb	r3, [r3, #20]
 800a942:	2b0a      	cmp	r3, #10
 800a944:	d107      	bne.n	800a956 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800a946:	6879      	ldr	r1, [r7, #4]
 800a948:	484a      	ldr	r0, [pc, #296]	; (800aa74 <tcp_abandon+0x16c>)
 800a94a:	f001 fa63 	bl	800be14 <tcp_pcb_remove>
    tcp_free(pcb);
 800a94e:	6878      	ldr	r0, [r7, #4]
 800a950:	f7ff fdb0 	bl	800a4b4 <tcp_free>
 800a954:	e082      	b.n	800aa5c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800a956:	2300      	movs	r3, #0
 800a958:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800a95a:	2300      	movs	r3, #0
 800a95c:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a962:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a968:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a970:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	691b      	ldr	r3, [r3, #16]
 800a976:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	7d1b      	ldrb	r3, [r3, #20]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d126      	bne.n	800a9ce <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	8adb      	ldrh	r3, [r3, #22]
 800a984:	2b00      	cmp	r3, #0
 800a986:	d02e      	beq.n	800a9e6 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800a988:	4b3b      	ldr	r3, [pc, #236]	; (800aa78 <tcp_abandon+0x170>)
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	687a      	ldr	r2, [r7, #4]
 800a98e:	429a      	cmp	r2, r3
 800a990:	d105      	bne.n	800a99e <tcp_abandon+0x96>
 800a992:	4b39      	ldr	r3, [pc, #228]	; (800aa78 <tcp_abandon+0x170>)
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	68db      	ldr	r3, [r3, #12]
 800a998:	4a37      	ldr	r2, [pc, #220]	; (800aa78 <tcp_abandon+0x170>)
 800a99a:	6013      	str	r3, [r2, #0]
 800a99c:	e013      	b.n	800a9c6 <tcp_abandon+0xbe>
 800a99e:	4b36      	ldr	r3, [pc, #216]	; (800aa78 <tcp_abandon+0x170>)
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	61fb      	str	r3, [r7, #28]
 800a9a4:	e00c      	b.n	800a9c0 <tcp_abandon+0xb8>
 800a9a6:	69fb      	ldr	r3, [r7, #28]
 800a9a8:	68db      	ldr	r3, [r3, #12]
 800a9aa:	687a      	ldr	r2, [r7, #4]
 800a9ac:	429a      	cmp	r2, r3
 800a9ae:	d104      	bne.n	800a9ba <tcp_abandon+0xb2>
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	68da      	ldr	r2, [r3, #12]
 800a9b4:	69fb      	ldr	r3, [r7, #28]
 800a9b6:	60da      	str	r2, [r3, #12]
 800a9b8:	e005      	b.n	800a9c6 <tcp_abandon+0xbe>
 800a9ba:	69fb      	ldr	r3, [r7, #28]
 800a9bc:	68db      	ldr	r3, [r3, #12]
 800a9be:	61fb      	str	r3, [r7, #28]
 800a9c0:	69fb      	ldr	r3, [r7, #28]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d1ef      	bne.n	800a9a6 <tcp_abandon+0x9e>
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	2200      	movs	r2, #0
 800a9ca:	60da      	str	r2, [r3, #12]
 800a9cc:	e00b      	b.n	800a9e6 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800a9ce:	683b      	ldr	r3, [r7, #0]
 800a9d0:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	8adb      	ldrh	r3, [r3, #22]
 800a9d6:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800a9d8:	6879      	ldr	r1, [r7, #4]
 800a9da:	4828      	ldr	r0, [pc, #160]	; (800aa7c <tcp_abandon+0x174>)
 800a9dc:	f001 fa1a 	bl	800be14 <tcp_pcb_remove>
 800a9e0:	4b27      	ldr	r3, [pc, #156]	; (800aa80 <tcp_abandon+0x178>)
 800a9e2:	2201      	movs	r2, #1
 800a9e4:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d004      	beq.n	800a9f8 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	f000 fed6 	bl	800b7a4 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d004      	beq.n	800aa0a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa04:	4618      	mov	r0, r3
 800aa06:	f000 fecd 	bl	800b7a4 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d004      	beq.n	800aa1c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aa16:	4618      	mov	r0, r3
 800aa18:	f000 fec4 	bl	800b7a4 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800aa1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d00e      	beq.n	800aa40 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800aa22:	6879      	ldr	r1, [r7, #4]
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	3304      	adds	r3, #4
 800aa28:	687a      	ldr	r2, [r7, #4]
 800aa2a:	8b12      	ldrh	r2, [r2, #24]
 800aa2c:	9202      	str	r2, [sp, #8]
 800aa2e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800aa30:	9201      	str	r2, [sp, #4]
 800aa32:	9300      	str	r3, [sp, #0]
 800aa34:	460b      	mov	r3, r1
 800aa36:	697a      	ldr	r2, [r7, #20]
 800aa38:	69b9      	ldr	r1, [r7, #24]
 800aa3a:	6878      	ldr	r0, [r7, #4]
 800aa3c:	f005 fbb6 	bl	80101ac <tcp_rst>
    }
    last_state = pcb->state;
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	7d1b      	ldrb	r3, [r3, #20]
 800aa44:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800aa46:	6878      	ldr	r0, [r7, #4]
 800aa48:	f7ff fd34 	bl	800a4b4 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800aa4c:	693b      	ldr	r3, [r7, #16]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d004      	beq.n	800aa5c <tcp_abandon+0x154>
 800aa52:	693b      	ldr	r3, [r7, #16]
 800aa54:	f06f 010c 	mvn.w	r1, #12
 800aa58:	68f8      	ldr	r0, [r7, #12]
 800aa5a:	4798      	blx	r3
  }
}
 800aa5c:	3728      	adds	r7, #40	; 0x28
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	bd80      	pop	{r7, pc}
 800aa62:	bf00      	nop
 800aa64:	08014d00 	.word	0x08014d00
 800aa68:	08014e44 	.word	0x08014e44
 800aa6c:	08014d44 	.word	0x08014d44
 800aa70:	08014e60 	.word	0x08014e60
 800aa74:	240037e4 	.word	0x240037e4
 800aa78:	240037e0 	.word	0x240037e0
 800aa7c:	240037d4 	.word	0x240037d4
 800aa80:	240037d0 	.word	0x240037d0

0800aa84 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800aa84:	b580      	push	{r7, lr}
 800aa86:	b082      	sub	sp, #8
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800aa8c:	2101      	movs	r1, #1
 800aa8e:	6878      	ldr	r0, [r7, #4]
 800aa90:	f7ff ff3a 	bl	800a908 <tcp_abandon>
}
 800aa94:	bf00      	nop
 800aa96:	3708      	adds	r7, #8
 800aa98:	46bd      	mov	sp, r7
 800aa9a:	bd80      	pop	{r7, pc}

0800aa9c <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800aa9c:	b580      	push	{r7, lr}
 800aa9e:	b088      	sub	sp, #32
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	60f8      	str	r0, [r7, #12]
 800aaa4:	60b9      	str	r1, [r7, #8]
 800aaa6:	4613      	mov	r3, r2
 800aaa8:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800aaaa:	2304      	movs	r3, #4
 800aaac:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800aaae:	68bb      	ldr	r3, [r7, #8]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d101      	bne.n	800aab8 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800aab4:	4b3e      	ldr	r3, [pc, #248]	; (800abb0 <tcp_bind+0x114>)
 800aab6:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d109      	bne.n	800aad2 <tcp_bind+0x36>
 800aabe:	4b3d      	ldr	r3, [pc, #244]	; (800abb4 <tcp_bind+0x118>)
 800aac0:	f240 22a9 	movw	r2, #681	; 0x2a9
 800aac4:	493c      	ldr	r1, [pc, #240]	; (800abb8 <tcp_bind+0x11c>)
 800aac6:	483d      	ldr	r0, [pc, #244]	; (800abbc <tcp_bind+0x120>)
 800aac8:	f008 fb64 	bl	8013194 <iprintf>
 800aacc:	f06f 030f 	mvn.w	r3, #15
 800aad0:	e06a      	b.n	800aba8 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	7d1b      	ldrb	r3, [r3, #20]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d009      	beq.n	800aaee <tcp_bind+0x52>
 800aada:	4b36      	ldr	r3, [pc, #216]	; (800abb4 <tcp_bind+0x118>)
 800aadc:	f240 22ab 	movw	r2, #683	; 0x2ab
 800aae0:	4937      	ldr	r1, [pc, #220]	; (800abc0 <tcp_bind+0x124>)
 800aae2:	4836      	ldr	r0, [pc, #216]	; (800abbc <tcp_bind+0x120>)
 800aae4:	f008 fb56 	bl	8013194 <iprintf>
 800aae8:	f06f 0305 	mvn.w	r3, #5
 800aaec:	e05c      	b.n	800aba8 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800aaee:	88fb      	ldrh	r3, [r7, #6]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d109      	bne.n	800ab08 <tcp_bind+0x6c>
    port = tcp_new_port();
 800aaf4:	f000 f9f0 	bl	800aed8 <tcp_new_port>
 800aaf8:	4603      	mov	r3, r0
 800aafa:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800aafc:	88fb      	ldrh	r3, [r7, #6]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d135      	bne.n	800ab6e <tcp_bind+0xd2>
      return ERR_BUF;
 800ab02:	f06f 0301 	mvn.w	r3, #1
 800ab06:	e04f      	b.n	800aba8 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800ab08:	2300      	movs	r3, #0
 800ab0a:	61fb      	str	r3, [r7, #28]
 800ab0c:	e02b      	b.n	800ab66 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800ab0e:	4a2d      	ldr	r2, [pc, #180]	; (800abc4 <tcp_bind+0x128>)
 800ab10:	69fb      	ldr	r3, [r7, #28]
 800ab12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	61bb      	str	r3, [r7, #24]
 800ab1a:	e01e      	b.n	800ab5a <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800ab1c:	69bb      	ldr	r3, [r7, #24]
 800ab1e:	8adb      	ldrh	r3, [r3, #22]
 800ab20:	88fa      	ldrh	r2, [r7, #6]
 800ab22:	429a      	cmp	r2, r3
 800ab24:	d116      	bne.n	800ab54 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800ab26:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d010      	beq.n	800ab4e <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800ab2c:	69bb      	ldr	r3, [r7, #24]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d00c      	beq.n	800ab4e <tcp_bind+0xb2>
 800ab34:	68bb      	ldr	r3, [r7, #8]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d009      	beq.n	800ab4e <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800ab3a:	68bb      	ldr	r3, [r7, #8]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d005      	beq.n	800ab4e <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800ab42:	69bb      	ldr	r3, [r7, #24]
 800ab44:	681a      	ldr	r2, [r3, #0]
 800ab46:	68bb      	ldr	r3, [r7, #8]
 800ab48:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800ab4a:	429a      	cmp	r2, r3
 800ab4c:	d102      	bne.n	800ab54 <tcp_bind+0xb8>
              return ERR_USE;
 800ab4e:	f06f 0307 	mvn.w	r3, #7
 800ab52:	e029      	b.n	800aba8 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800ab54:	69bb      	ldr	r3, [r7, #24]
 800ab56:	68db      	ldr	r3, [r3, #12]
 800ab58:	61bb      	str	r3, [r7, #24]
 800ab5a:	69bb      	ldr	r3, [r7, #24]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d1dd      	bne.n	800ab1c <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800ab60:	69fb      	ldr	r3, [r7, #28]
 800ab62:	3301      	adds	r3, #1
 800ab64:	61fb      	str	r3, [r7, #28]
 800ab66:	69fa      	ldr	r2, [r7, #28]
 800ab68:	697b      	ldr	r3, [r7, #20]
 800ab6a:	429a      	cmp	r2, r3
 800ab6c:	dbcf      	blt.n	800ab0e <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800ab6e:	68bb      	ldr	r3, [r7, #8]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d00c      	beq.n	800ab8e <tcp_bind+0xf2>
 800ab74:	68bb      	ldr	r3, [r7, #8]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d008      	beq.n	800ab8e <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800ab7c:	68bb      	ldr	r3, [r7, #8]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d002      	beq.n	800ab88 <tcp_bind+0xec>
 800ab82:	68bb      	ldr	r3, [r7, #8]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	e000      	b.n	800ab8a <tcp_bind+0xee>
 800ab88:	2300      	movs	r3, #0
 800ab8a:	68fa      	ldr	r2, [r7, #12]
 800ab8c:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	88fa      	ldrh	r2, [r7, #6]
 800ab92:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800ab94:	4b0c      	ldr	r3, [pc, #48]	; (800abc8 <tcp_bind+0x12c>)
 800ab96:	681a      	ldr	r2, [r3, #0]
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	60da      	str	r2, [r3, #12]
 800ab9c:	4a0a      	ldr	r2, [pc, #40]	; (800abc8 <tcp_bind+0x12c>)
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	6013      	str	r3, [r2, #0]
 800aba2:	f005 fcc5 	bl	8010530 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800aba6:	2300      	movs	r3, #0
}
 800aba8:	4618      	mov	r0, r3
 800abaa:	3720      	adds	r7, #32
 800abac:	46bd      	mov	sp, r7
 800abae:	bd80      	pop	{r7, pc}
 800abb0:	08016d28 	.word	0x08016d28
 800abb4:	08014d00 	.word	0x08014d00
 800abb8:	08014e94 	.word	0x08014e94
 800abbc:	08014d44 	.word	0x08014d44
 800abc0:	08014eac 	.word	0x08014eac
 800abc4:	08016d00 	.word	0x08016d00
 800abc8:	240037e0 	.word	0x240037e0

0800abcc <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800abcc:	b580      	push	{r7, lr}
 800abce:	b084      	sub	sp, #16
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	60f8      	str	r0, [r7, #12]
 800abd4:	60b9      	str	r1, [r7, #8]
 800abd6:	4613      	mov	r3, r2
 800abd8:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800abda:	68bb      	ldr	r3, [r7, #8]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d106      	bne.n	800abee <tcp_accept_null+0x22>
 800abe0:	4b07      	ldr	r3, [pc, #28]	; (800ac00 <tcp_accept_null+0x34>)
 800abe2:	f240 320f 	movw	r2, #783	; 0x30f
 800abe6:	4907      	ldr	r1, [pc, #28]	; (800ac04 <tcp_accept_null+0x38>)
 800abe8:	4807      	ldr	r0, [pc, #28]	; (800ac08 <tcp_accept_null+0x3c>)
 800abea:	f008 fad3 	bl	8013194 <iprintf>

  tcp_abort(pcb);
 800abee:	68b8      	ldr	r0, [r7, #8]
 800abf0:	f7ff ff48 	bl	800aa84 <tcp_abort>

  return ERR_ABRT;
 800abf4:	f06f 030c 	mvn.w	r3, #12
}
 800abf8:	4618      	mov	r0, r3
 800abfa:	3710      	adds	r7, #16
 800abfc:	46bd      	mov	sp, r7
 800abfe:	bd80      	pop	{r7, pc}
 800ac00:	08014d00 	.word	0x08014d00
 800ac04:	08014ed4 	.word	0x08014ed4
 800ac08:	08014d44 	.word	0x08014d44

0800ac0c <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 800ac0c:	b580      	push	{r7, lr}
 800ac0e:	b082      	sub	sp, #8
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
 800ac14:	460b      	mov	r3, r1
 800ac16:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 800ac18:	78fb      	ldrb	r3, [r7, #3]
 800ac1a:	2200      	movs	r2, #0
 800ac1c:	4619      	mov	r1, r3
 800ac1e:	6878      	ldr	r0, [r7, #4]
 800ac20:	f000 f806 	bl	800ac30 <tcp_listen_with_backlog_and_err>
 800ac24:	4603      	mov	r3, r0
}
 800ac26:	4618      	mov	r0, r3
 800ac28:	3708      	adds	r7, #8
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	bd80      	pop	{r7, pc}
	...

0800ac30 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800ac30:	b580      	push	{r7, lr}
 800ac32:	b088      	sub	sp, #32
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	60f8      	str	r0, [r7, #12]
 800ac38:	460b      	mov	r3, r1
 800ac3a:	607a      	str	r2, [r7, #4]
 800ac3c:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800ac3e:	2300      	movs	r3, #0
 800ac40:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d109      	bne.n	800ac5c <tcp_listen_with_backlog_and_err+0x2c>
 800ac48:	4b47      	ldr	r3, [pc, #284]	; (800ad68 <tcp_listen_with_backlog_and_err+0x138>)
 800ac4a:	f240 3259 	movw	r2, #857	; 0x359
 800ac4e:	4947      	ldr	r1, [pc, #284]	; (800ad6c <tcp_listen_with_backlog_and_err+0x13c>)
 800ac50:	4847      	ldr	r0, [pc, #284]	; (800ad70 <tcp_listen_with_backlog_and_err+0x140>)
 800ac52:	f008 fa9f 	bl	8013194 <iprintf>
 800ac56:	23f0      	movs	r3, #240	; 0xf0
 800ac58:	76fb      	strb	r3, [r7, #27]
 800ac5a:	e079      	b.n	800ad50 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	7d1b      	ldrb	r3, [r3, #20]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d009      	beq.n	800ac78 <tcp_listen_with_backlog_and_err+0x48>
 800ac64:	4b40      	ldr	r3, [pc, #256]	; (800ad68 <tcp_listen_with_backlog_and_err+0x138>)
 800ac66:	f240 325a 	movw	r2, #858	; 0x35a
 800ac6a:	4942      	ldr	r1, [pc, #264]	; (800ad74 <tcp_listen_with_backlog_and_err+0x144>)
 800ac6c:	4840      	ldr	r0, [pc, #256]	; (800ad70 <tcp_listen_with_backlog_and_err+0x140>)
 800ac6e:	f008 fa91 	bl	8013194 <iprintf>
 800ac72:	23f1      	movs	r3, #241	; 0xf1
 800ac74:	76fb      	strb	r3, [r7, #27]
 800ac76:	e06b      	b.n	800ad50 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	7d1b      	ldrb	r3, [r3, #20]
 800ac7c:	2b01      	cmp	r3, #1
 800ac7e:	d104      	bne.n	800ac8a <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800ac84:	23f7      	movs	r3, #247	; 0xf7
 800ac86:	76fb      	strb	r3, [r7, #27]
    goto done;
 800ac88:	e062      	b.n	800ad50 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800ac8a:	2002      	movs	r0, #2
 800ac8c:	f7fe fa7c 	bl	8009188 <memp_malloc>
 800ac90:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800ac92:	69fb      	ldr	r3, [r7, #28]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d102      	bne.n	800ac9e <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800ac98:	23ff      	movs	r3, #255	; 0xff
 800ac9a:	76fb      	strb	r3, [r7, #27]
    goto done;
 800ac9c:	e058      	b.n	800ad50 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	691a      	ldr	r2, [r3, #16]
 800aca2:	69fb      	ldr	r3, [r7, #28]
 800aca4:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	8ada      	ldrh	r2, [r3, #22]
 800acaa:	69fb      	ldr	r3, [r7, #28]
 800acac:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800acae:	69fb      	ldr	r3, [r7, #28]
 800acb0:	2201      	movs	r2, #1
 800acb2:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	7d5a      	ldrb	r2, [r3, #21]
 800acb8:	69fb      	ldr	r3, [r7, #28]
 800acba:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	7a5a      	ldrb	r2, [r3, #9]
 800acc0:	69fb      	ldr	r3, [r7, #28]
 800acc2:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800acc4:	69fb      	ldr	r3, [r7, #28]
 800acc6:	2200      	movs	r2, #0
 800acc8:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	7ada      	ldrb	r2, [r3, #11]
 800acce:	69fb      	ldr	r3, [r7, #28]
 800acd0:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	7a9a      	ldrb	r2, [r3, #10]
 800acd6:	69fb      	ldr	r3, [r7, #28]
 800acd8:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	681a      	ldr	r2, [r3, #0]
 800acde:	69fb      	ldr	r3, [r7, #28]
 800ace0:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	8adb      	ldrh	r3, [r3, #22]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d021      	beq.n	800ad2e <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800acea:	4b23      	ldr	r3, [pc, #140]	; (800ad78 <tcp_listen_with_backlog_and_err+0x148>)
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	68fa      	ldr	r2, [r7, #12]
 800acf0:	429a      	cmp	r2, r3
 800acf2:	d105      	bne.n	800ad00 <tcp_listen_with_backlog_and_err+0xd0>
 800acf4:	4b20      	ldr	r3, [pc, #128]	; (800ad78 <tcp_listen_with_backlog_and_err+0x148>)
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	68db      	ldr	r3, [r3, #12]
 800acfa:	4a1f      	ldr	r2, [pc, #124]	; (800ad78 <tcp_listen_with_backlog_and_err+0x148>)
 800acfc:	6013      	str	r3, [r2, #0]
 800acfe:	e013      	b.n	800ad28 <tcp_listen_with_backlog_and_err+0xf8>
 800ad00:	4b1d      	ldr	r3, [pc, #116]	; (800ad78 <tcp_listen_with_backlog_and_err+0x148>)
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	617b      	str	r3, [r7, #20]
 800ad06:	e00c      	b.n	800ad22 <tcp_listen_with_backlog_and_err+0xf2>
 800ad08:	697b      	ldr	r3, [r7, #20]
 800ad0a:	68db      	ldr	r3, [r3, #12]
 800ad0c:	68fa      	ldr	r2, [r7, #12]
 800ad0e:	429a      	cmp	r2, r3
 800ad10:	d104      	bne.n	800ad1c <tcp_listen_with_backlog_and_err+0xec>
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	68da      	ldr	r2, [r3, #12]
 800ad16:	697b      	ldr	r3, [r7, #20]
 800ad18:	60da      	str	r2, [r3, #12]
 800ad1a:	e005      	b.n	800ad28 <tcp_listen_with_backlog_and_err+0xf8>
 800ad1c:	697b      	ldr	r3, [r7, #20]
 800ad1e:	68db      	ldr	r3, [r3, #12]
 800ad20:	617b      	str	r3, [r7, #20]
 800ad22:	697b      	ldr	r3, [r7, #20]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d1ef      	bne.n	800ad08 <tcp_listen_with_backlog_and_err+0xd8>
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800ad2e:	68f8      	ldr	r0, [r7, #12]
 800ad30:	f7ff fbc0 	bl	800a4b4 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800ad34:	69fb      	ldr	r3, [r7, #28]
 800ad36:	4a11      	ldr	r2, [pc, #68]	; (800ad7c <tcp_listen_with_backlog_and_err+0x14c>)
 800ad38:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800ad3a:	4b11      	ldr	r3, [pc, #68]	; (800ad80 <tcp_listen_with_backlog_and_err+0x150>)
 800ad3c:	681a      	ldr	r2, [r3, #0]
 800ad3e:	69fb      	ldr	r3, [r7, #28]
 800ad40:	60da      	str	r2, [r3, #12]
 800ad42:	4a0f      	ldr	r2, [pc, #60]	; (800ad80 <tcp_listen_with_backlog_and_err+0x150>)
 800ad44:	69fb      	ldr	r3, [r7, #28]
 800ad46:	6013      	str	r3, [r2, #0]
 800ad48:	f005 fbf2 	bl	8010530 <tcp_timer_needed>
  res = ERR_OK;
 800ad4c:	2300      	movs	r3, #0
 800ad4e:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d002      	beq.n	800ad5c <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	7efa      	ldrb	r2, [r7, #27]
 800ad5a:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800ad5c:	69fb      	ldr	r3, [r7, #28]
}
 800ad5e:	4618      	mov	r0, r3
 800ad60:	3720      	adds	r7, #32
 800ad62:	46bd      	mov	sp, r7
 800ad64:	bd80      	pop	{r7, pc}
 800ad66:	bf00      	nop
 800ad68:	08014d00 	.word	0x08014d00
 800ad6c:	08014ef4 	.word	0x08014ef4
 800ad70:	08014d44 	.word	0x08014d44
 800ad74:	08014f24 	.word	0x08014f24
 800ad78:	240037e0 	.word	0x240037e0
 800ad7c:	0800abcd 	.word	0x0800abcd
 800ad80:	240037dc 	.word	0x240037dc

0800ad84 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800ad84:	b580      	push	{r7, lr}
 800ad86:	b084      	sub	sp, #16
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d106      	bne.n	800ada0 <tcp_update_rcv_ann_wnd+0x1c>
 800ad92:	4b25      	ldr	r3, [pc, #148]	; (800ae28 <tcp_update_rcv_ann_wnd+0xa4>)
 800ad94:	f240 32a6 	movw	r2, #934	; 0x3a6
 800ad98:	4924      	ldr	r1, [pc, #144]	; (800ae2c <tcp_update_rcv_ann_wnd+0xa8>)
 800ad9a:	4825      	ldr	r0, [pc, #148]	; (800ae30 <tcp_update_rcv_ann_wnd+0xac>)
 800ad9c:	f008 f9fa 	bl	8013194 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ada4:	687a      	ldr	r2, [r7, #4]
 800ada6:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800ada8:	4413      	add	r3, r2
 800adaa:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adb0:	687a      	ldr	r2, [r7, #4]
 800adb2:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800adb4:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800adb8:	bf28      	it	cs
 800adba:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800adbe:	b292      	uxth	r2, r2
 800adc0:	4413      	add	r3, r2
 800adc2:	68fa      	ldr	r2, [r7, #12]
 800adc4:	1ad3      	subs	r3, r2, r3
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	db08      	blt.n	800addc <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800add6:	68fa      	ldr	r2, [r7, #12]
 800add8:	1ad3      	subs	r3, r2, r3
 800adda:	e020      	b.n	800ae1e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ade4:	1ad3      	subs	r3, r2, r3
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	dd03      	ble.n	800adf2 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	2200      	movs	r2, #0
 800adee:	855a      	strh	r2, [r3, #42]	; 0x2a
 800adf0:	e014      	b.n	800ae1c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adfa:	1ad3      	subs	r3, r2, r3
 800adfc:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800adfe:	68bb      	ldr	r3, [r7, #8]
 800ae00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ae04:	d306      	bcc.n	800ae14 <tcp_update_rcv_ann_wnd+0x90>
 800ae06:	4b08      	ldr	r3, [pc, #32]	; (800ae28 <tcp_update_rcv_ann_wnd+0xa4>)
 800ae08:	f240 32b6 	movw	r2, #950	; 0x3b6
 800ae0c:	4909      	ldr	r1, [pc, #36]	; (800ae34 <tcp_update_rcv_ann_wnd+0xb0>)
 800ae0e:	4808      	ldr	r0, [pc, #32]	; (800ae30 <tcp_update_rcv_ann_wnd+0xac>)
 800ae10:	f008 f9c0 	bl	8013194 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800ae14:	68bb      	ldr	r3, [r7, #8]
 800ae16:	b29a      	uxth	r2, r3
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800ae1c:	2300      	movs	r3, #0
  }
}
 800ae1e:	4618      	mov	r0, r3
 800ae20:	3710      	adds	r7, #16
 800ae22:	46bd      	mov	sp, r7
 800ae24:	bd80      	pop	{r7, pc}
 800ae26:	bf00      	nop
 800ae28:	08014d00 	.word	0x08014d00
 800ae2c:	08014f5c 	.word	0x08014f5c
 800ae30:	08014d44 	.word	0x08014d44
 800ae34:	08014f80 	.word	0x08014f80

0800ae38 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800ae38:	b580      	push	{r7, lr}
 800ae3a:	b084      	sub	sp, #16
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	6078      	str	r0, [r7, #4]
 800ae40:	460b      	mov	r3, r1
 800ae42:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d107      	bne.n	800ae5a <tcp_recved+0x22>
 800ae4a:	4b1f      	ldr	r3, [pc, #124]	; (800aec8 <tcp_recved+0x90>)
 800ae4c:	f240 32cf 	movw	r2, #975	; 0x3cf
 800ae50:	491e      	ldr	r1, [pc, #120]	; (800aecc <tcp_recved+0x94>)
 800ae52:	481f      	ldr	r0, [pc, #124]	; (800aed0 <tcp_recved+0x98>)
 800ae54:	f008 f99e 	bl	8013194 <iprintf>
 800ae58:	e032      	b.n	800aec0 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	7d1b      	ldrb	r3, [r3, #20]
 800ae5e:	2b01      	cmp	r3, #1
 800ae60:	d106      	bne.n	800ae70 <tcp_recved+0x38>
 800ae62:	4b19      	ldr	r3, [pc, #100]	; (800aec8 <tcp_recved+0x90>)
 800ae64:	f240 32d2 	movw	r2, #978	; 0x3d2
 800ae68:	491a      	ldr	r1, [pc, #104]	; (800aed4 <tcp_recved+0x9c>)
 800ae6a:	4819      	ldr	r0, [pc, #100]	; (800aed0 <tcp_recved+0x98>)
 800ae6c:	f008 f992 	bl	8013194 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ae74:	887b      	ldrh	r3, [r7, #2]
 800ae76:	4413      	add	r3, r2
 800ae78:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800ae7a:	89fb      	ldrh	r3, [r7, #14]
 800ae7c:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ae80:	d804      	bhi.n	800ae8c <tcp_recved+0x54>
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ae86:	89fa      	ldrh	r2, [r7, #14]
 800ae88:	429a      	cmp	r2, r3
 800ae8a:	d204      	bcs.n	800ae96 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800ae92:	851a      	strh	r2, [r3, #40]	; 0x28
 800ae94:	e002      	b.n	800ae9c <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	89fa      	ldrh	r2, [r7, #14]
 800ae9a:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800ae9c:	6878      	ldr	r0, [r7, #4]
 800ae9e:	f7ff ff71 	bl	800ad84 <tcp_update_rcv_ann_wnd>
 800aea2:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800aea4:	68bb      	ldr	r3, [r7, #8]
 800aea6:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800aeaa:	d309      	bcc.n	800aec0 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	8b5b      	ldrh	r3, [r3, #26]
 800aeb0:	f043 0302 	orr.w	r3, r3, #2
 800aeb4:	b29a      	uxth	r2, r3
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800aeba:	6878      	ldr	r0, [r7, #4]
 800aebc:	f004 fbc2 	bl	800f644 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800aec0:	3710      	adds	r7, #16
 800aec2:	46bd      	mov	sp, r7
 800aec4:	bd80      	pop	{r7, pc}
 800aec6:	bf00      	nop
 800aec8:	08014d00 	.word	0x08014d00
 800aecc:	08014f9c 	.word	0x08014f9c
 800aed0:	08014d44 	.word	0x08014d44
 800aed4:	08014fb4 	.word	0x08014fb4

0800aed8 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800aed8:	b480      	push	{r7}
 800aeda:	b083      	sub	sp, #12
 800aedc:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800aede:	2300      	movs	r3, #0
 800aee0:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800aee2:	4b1e      	ldr	r3, [pc, #120]	; (800af5c <tcp_new_port+0x84>)
 800aee4:	881b      	ldrh	r3, [r3, #0]
 800aee6:	3301      	adds	r3, #1
 800aee8:	b29a      	uxth	r2, r3
 800aeea:	4b1c      	ldr	r3, [pc, #112]	; (800af5c <tcp_new_port+0x84>)
 800aeec:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800aeee:	4b1b      	ldr	r3, [pc, #108]	; (800af5c <tcp_new_port+0x84>)
 800aef0:	881b      	ldrh	r3, [r3, #0]
 800aef2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aef6:	4293      	cmp	r3, r2
 800aef8:	d103      	bne.n	800af02 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800aefa:	4b18      	ldr	r3, [pc, #96]	; (800af5c <tcp_new_port+0x84>)
 800aefc:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800af00:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800af02:	2300      	movs	r3, #0
 800af04:	71fb      	strb	r3, [r7, #7]
 800af06:	e01e      	b.n	800af46 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800af08:	79fb      	ldrb	r3, [r7, #7]
 800af0a:	4a15      	ldr	r2, [pc, #84]	; (800af60 <tcp_new_port+0x88>)
 800af0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	603b      	str	r3, [r7, #0]
 800af14:	e011      	b.n	800af3a <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800af16:	683b      	ldr	r3, [r7, #0]
 800af18:	8ada      	ldrh	r2, [r3, #22]
 800af1a:	4b10      	ldr	r3, [pc, #64]	; (800af5c <tcp_new_port+0x84>)
 800af1c:	881b      	ldrh	r3, [r3, #0]
 800af1e:	429a      	cmp	r2, r3
 800af20:	d108      	bne.n	800af34 <tcp_new_port+0x5c>
        n++;
 800af22:	88bb      	ldrh	r3, [r7, #4]
 800af24:	3301      	adds	r3, #1
 800af26:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800af28:	88bb      	ldrh	r3, [r7, #4]
 800af2a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800af2e:	d3d8      	bcc.n	800aee2 <tcp_new_port+0xa>
          return 0;
 800af30:	2300      	movs	r3, #0
 800af32:	e00d      	b.n	800af50 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800af34:	683b      	ldr	r3, [r7, #0]
 800af36:	68db      	ldr	r3, [r3, #12]
 800af38:	603b      	str	r3, [r7, #0]
 800af3a:	683b      	ldr	r3, [r7, #0]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d1ea      	bne.n	800af16 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800af40:	79fb      	ldrb	r3, [r7, #7]
 800af42:	3301      	adds	r3, #1
 800af44:	71fb      	strb	r3, [r7, #7]
 800af46:	79fb      	ldrb	r3, [r7, #7]
 800af48:	2b03      	cmp	r3, #3
 800af4a:	d9dd      	bls.n	800af08 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800af4c:	4b03      	ldr	r3, [pc, #12]	; (800af5c <tcp_new_port+0x84>)
 800af4e:	881b      	ldrh	r3, [r3, #0]
}
 800af50:	4618      	mov	r0, r3
 800af52:	370c      	adds	r7, #12
 800af54:	46bd      	mov	sp, r7
 800af56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5a:	4770      	bx	lr
 800af5c:	24000024 	.word	0x24000024
 800af60:	08016d00 	.word	0x08016d00

0800af64 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800af64:	b5b0      	push	{r4, r5, r7, lr}
 800af66:	b090      	sub	sp, #64	; 0x40
 800af68:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800af6a:	2300      	movs	r3, #0
 800af6c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800af70:	4b94      	ldr	r3, [pc, #592]	; (800b1c4 <tcp_slowtmr+0x260>)
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	3301      	adds	r3, #1
 800af76:	4a93      	ldr	r2, [pc, #588]	; (800b1c4 <tcp_slowtmr+0x260>)
 800af78:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800af7a:	4b93      	ldr	r3, [pc, #588]	; (800b1c8 <tcp_slowtmr+0x264>)
 800af7c:	781b      	ldrb	r3, [r3, #0]
 800af7e:	3301      	adds	r3, #1
 800af80:	b2da      	uxtb	r2, r3
 800af82:	4b91      	ldr	r3, [pc, #580]	; (800b1c8 <tcp_slowtmr+0x264>)
 800af84:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800af86:	2300      	movs	r3, #0
 800af88:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800af8a:	4b90      	ldr	r3, [pc, #576]	; (800b1cc <tcp_slowtmr+0x268>)
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800af90:	e29d      	b.n	800b4ce <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800af92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af94:	7d1b      	ldrb	r3, [r3, #20]
 800af96:	2b00      	cmp	r3, #0
 800af98:	d106      	bne.n	800afa8 <tcp_slowtmr+0x44>
 800af9a:	4b8d      	ldr	r3, [pc, #564]	; (800b1d0 <tcp_slowtmr+0x26c>)
 800af9c:	f240 42be 	movw	r2, #1214	; 0x4be
 800afa0:	498c      	ldr	r1, [pc, #560]	; (800b1d4 <tcp_slowtmr+0x270>)
 800afa2:	488d      	ldr	r0, [pc, #564]	; (800b1d8 <tcp_slowtmr+0x274>)
 800afa4:	f008 f8f6 	bl	8013194 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800afa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afaa:	7d1b      	ldrb	r3, [r3, #20]
 800afac:	2b01      	cmp	r3, #1
 800afae:	d106      	bne.n	800afbe <tcp_slowtmr+0x5a>
 800afb0:	4b87      	ldr	r3, [pc, #540]	; (800b1d0 <tcp_slowtmr+0x26c>)
 800afb2:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800afb6:	4989      	ldr	r1, [pc, #548]	; (800b1dc <tcp_slowtmr+0x278>)
 800afb8:	4887      	ldr	r0, [pc, #540]	; (800b1d8 <tcp_slowtmr+0x274>)
 800afba:	f008 f8eb 	bl	8013194 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800afbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afc0:	7d1b      	ldrb	r3, [r3, #20]
 800afc2:	2b0a      	cmp	r3, #10
 800afc4:	d106      	bne.n	800afd4 <tcp_slowtmr+0x70>
 800afc6:	4b82      	ldr	r3, [pc, #520]	; (800b1d0 <tcp_slowtmr+0x26c>)
 800afc8:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800afcc:	4984      	ldr	r1, [pc, #528]	; (800b1e0 <tcp_slowtmr+0x27c>)
 800afce:	4882      	ldr	r0, [pc, #520]	; (800b1d8 <tcp_slowtmr+0x274>)
 800afd0:	f008 f8e0 	bl	8013194 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800afd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afd6:	7f9a      	ldrb	r2, [r3, #30]
 800afd8:	4b7b      	ldr	r3, [pc, #492]	; (800b1c8 <tcp_slowtmr+0x264>)
 800afda:	781b      	ldrb	r3, [r3, #0]
 800afdc:	429a      	cmp	r2, r3
 800afde:	d105      	bne.n	800afec <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800afe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afe2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800afe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afe6:	68db      	ldr	r3, [r3, #12]
 800afe8:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800afea:	e270      	b.n	800b4ce <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800afec:	4b76      	ldr	r3, [pc, #472]	; (800b1c8 <tcp_slowtmr+0x264>)
 800afee:	781a      	ldrb	r2, [r3, #0]
 800aff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aff2:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800aff4:	2300      	movs	r3, #0
 800aff6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800affa:	2300      	movs	r3, #0
 800affc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800b000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b002:	7d1b      	ldrb	r3, [r3, #20]
 800b004:	2b02      	cmp	r3, #2
 800b006:	d10a      	bne.n	800b01e <tcp_slowtmr+0xba>
 800b008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b00a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b00e:	2b05      	cmp	r3, #5
 800b010:	d905      	bls.n	800b01e <tcp_slowtmr+0xba>
      ++pcb_remove;
 800b012:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b016:	3301      	adds	r3, #1
 800b018:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b01c:	e11e      	b.n	800b25c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800b01e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b020:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b024:	2b0b      	cmp	r3, #11
 800b026:	d905      	bls.n	800b034 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800b028:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b02c:	3301      	adds	r3, #1
 800b02e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b032:	e113      	b.n	800b25c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800b034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b036:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d075      	beq.n	800b12a <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800b03e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b042:	2b00      	cmp	r3, #0
 800b044:	d006      	beq.n	800b054 <tcp_slowtmr+0xf0>
 800b046:	4b62      	ldr	r3, [pc, #392]	; (800b1d0 <tcp_slowtmr+0x26c>)
 800b048:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800b04c:	4965      	ldr	r1, [pc, #404]	; (800b1e4 <tcp_slowtmr+0x280>)
 800b04e:	4862      	ldr	r0, [pc, #392]	; (800b1d8 <tcp_slowtmr+0x274>)
 800b050:	f008 f8a0 	bl	8013194 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800b054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b056:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d106      	bne.n	800b06a <tcp_slowtmr+0x106>
 800b05c:	4b5c      	ldr	r3, [pc, #368]	; (800b1d0 <tcp_slowtmr+0x26c>)
 800b05e:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800b062:	4961      	ldr	r1, [pc, #388]	; (800b1e8 <tcp_slowtmr+0x284>)
 800b064:	485c      	ldr	r0, [pc, #368]	; (800b1d8 <tcp_slowtmr+0x274>)
 800b066:	f008 f895 	bl	8013194 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800b06a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b06c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800b070:	2b0b      	cmp	r3, #11
 800b072:	d905      	bls.n	800b080 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800b074:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b078:	3301      	adds	r3, #1
 800b07a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b07e:	e0ed      	b.n	800b25c <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800b080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b082:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800b086:	3b01      	subs	r3, #1
 800b088:	4a58      	ldr	r2, [pc, #352]	; (800b1ec <tcp_slowtmr+0x288>)
 800b08a:	5cd3      	ldrb	r3, [r2, r3]
 800b08c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800b08e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b090:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800b094:	7c7a      	ldrb	r2, [r7, #17]
 800b096:	429a      	cmp	r2, r3
 800b098:	d907      	bls.n	800b0aa <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800b09a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b09c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800b0a0:	3301      	adds	r3, #1
 800b0a2:	b2da      	uxtb	r2, r3
 800b0a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0a6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800b0aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0ac:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800b0b0:	7c7a      	ldrb	r2, [r7, #17]
 800b0b2:	429a      	cmp	r2, r3
 800b0b4:	f200 80d2 	bhi.w	800b25c <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800b0b8:	2301      	movs	r3, #1
 800b0ba:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800b0bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0be:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d108      	bne.n	800b0d8 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800b0c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b0c8:	f005 f964 	bl	8010394 <tcp_zero_window_probe>
 800b0cc:	4603      	mov	r3, r0
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d014      	beq.n	800b0fc <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	623b      	str	r3, [r7, #32]
 800b0d6:	e011      	b.n	800b0fc <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800b0d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0da:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b0de:	4619      	mov	r1, r3
 800b0e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b0e2:	f004 f829 	bl	800f138 <tcp_split_unsent_seg>
 800b0e6:	4603      	mov	r3, r0
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d107      	bne.n	800b0fc <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800b0ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b0ee:	f004 faa9 	bl	800f644 <tcp_output>
 800b0f2:	4603      	mov	r3, r0
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d101      	bne.n	800b0fc <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800b0fc:	6a3b      	ldr	r3, [r7, #32]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	f000 80ac 	beq.w	800b25c <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800b104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b106:	2200      	movs	r2, #0
 800b108:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800b10c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b10e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800b112:	2b06      	cmp	r3, #6
 800b114:	f200 80a2 	bhi.w	800b25c <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800b118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b11a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800b11e:	3301      	adds	r3, #1
 800b120:	b2da      	uxtb	r2, r3
 800b122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b124:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800b128:	e098      	b.n	800b25c <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800b12a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b12c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b130:	2b00      	cmp	r3, #0
 800b132:	db0f      	blt.n	800b154 <tcp_slowtmr+0x1f0>
 800b134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b136:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b13a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800b13e:	4293      	cmp	r3, r2
 800b140:	d008      	beq.n	800b154 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800b142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b144:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b148:	b29b      	uxth	r3, r3
 800b14a:	3301      	adds	r3, #1
 800b14c:	b29b      	uxth	r3, r3
 800b14e:	b21a      	sxth	r2, r3
 800b150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b152:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800b154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b156:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800b15a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b15c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800b160:	429a      	cmp	r2, r3
 800b162:	db7b      	blt.n	800b25c <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800b164:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b166:	f004 fd5f 	bl	800fc28 <tcp_rexmit_rto_prepare>
 800b16a:	4603      	mov	r3, r0
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d007      	beq.n	800b180 <tcp_slowtmr+0x21c>
 800b170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b172:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b174:	2b00      	cmp	r3, #0
 800b176:	d171      	bne.n	800b25c <tcp_slowtmr+0x2f8>
 800b178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b17a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d06d      	beq.n	800b25c <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800b180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b182:	7d1b      	ldrb	r3, [r3, #20]
 800b184:	2b02      	cmp	r3, #2
 800b186:	d03a      	beq.n	800b1fe <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800b188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b18a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b18e:	2b0c      	cmp	r3, #12
 800b190:	bf28      	it	cs
 800b192:	230c      	movcs	r3, #12
 800b194:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800b196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b198:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b19c:	10db      	asrs	r3, r3, #3
 800b19e:	b21b      	sxth	r3, r3
 800b1a0:	461a      	mov	r2, r3
 800b1a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1a4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800b1a8:	4413      	add	r3, r2
 800b1aa:	7efa      	ldrb	r2, [r7, #27]
 800b1ac:	4910      	ldr	r1, [pc, #64]	; (800b1f0 <tcp_slowtmr+0x28c>)
 800b1ae:	5c8a      	ldrb	r2, [r1, r2]
 800b1b0:	4093      	lsls	r3, r2
 800b1b2:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800b1b4:	697b      	ldr	r3, [r7, #20]
 800b1b6:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800b1ba:	4293      	cmp	r3, r2
 800b1bc:	dc1a      	bgt.n	800b1f4 <tcp_slowtmr+0x290>
 800b1be:	697b      	ldr	r3, [r7, #20]
 800b1c0:	b21a      	sxth	r2, r3
 800b1c2:	e019      	b.n	800b1f8 <tcp_slowtmr+0x294>
 800b1c4:	240037d8 	.word	0x240037d8
 800b1c8:	240000ee 	.word	0x240000ee
 800b1cc:	240037d4 	.word	0x240037d4
 800b1d0:	08014d00 	.word	0x08014d00
 800b1d4:	08015044 	.word	0x08015044
 800b1d8:	08014d44 	.word	0x08014d44
 800b1dc:	08015070 	.word	0x08015070
 800b1e0:	0801509c 	.word	0x0801509c
 800b1e4:	080150cc 	.word	0x080150cc
 800b1e8:	08015100 	.word	0x08015100
 800b1ec:	08016cf8 	.word	0x08016cf8
 800b1f0:	08016ce8 	.word	0x08016ce8
 800b1f4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800b1f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1fa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800b1fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b200:	2200      	movs	r2, #0
 800b202:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800b204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b206:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800b20a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b20c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b210:	4293      	cmp	r3, r2
 800b212:	bf28      	it	cs
 800b214:	4613      	movcs	r3, r2
 800b216:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800b218:	8a7b      	ldrh	r3, [r7, #18]
 800b21a:	085b      	lsrs	r3, r3, #1
 800b21c:	b29a      	uxth	r2, r3
 800b21e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b220:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800b224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b226:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800b22a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b22c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b22e:	005b      	lsls	r3, r3, #1
 800b230:	b29b      	uxth	r3, r3
 800b232:	429a      	cmp	r2, r3
 800b234:	d206      	bcs.n	800b244 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800b236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b238:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b23a:	005b      	lsls	r3, r3, #1
 800b23c:	b29a      	uxth	r2, r3
 800b23e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b240:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800b244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b246:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800b248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b24a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800b24e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b250:	2200      	movs	r2, #0
 800b252:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800b256:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b258:	f004 fd56 	bl	800fd08 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800b25c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b25e:	7d1b      	ldrb	r3, [r3, #20]
 800b260:	2b06      	cmp	r3, #6
 800b262:	d111      	bne.n	800b288 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800b264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b266:	8b5b      	ldrh	r3, [r3, #26]
 800b268:	f003 0310 	and.w	r3, r3, #16
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d00b      	beq.n	800b288 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b270:	4b9c      	ldr	r3, [pc, #624]	; (800b4e4 <tcp_slowtmr+0x580>)
 800b272:	681a      	ldr	r2, [r3, #0]
 800b274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b276:	6a1b      	ldr	r3, [r3, #32]
 800b278:	1ad3      	subs	r3, r2, r3
 800b27a:	2b28      	cmp	r3, #40	; 0x28
 800b27c:	d904      	bls.n	800b288 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800b27e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b282:	3301      	adds	r3, #1
 800b284:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800b288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b28a:	7a5b      	ldrb	r3, [r3, #9]
 800b28c:	f003 0308 	and.w	r3, r3, #8
 800b290:	2b00      	cmp	r3, #0
 800b292:	d04a      	beq.n	800b32a <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800b294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b296:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800b298:	2b04      	cmp	r3, #4
 800b29a:	d003      	beq.n	800b2a4 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800b29c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b29e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800b2a0:	2b07      	cmp	r3, #7
 800b2a2:	d142      	bne.n	800b32a <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b2a4:	4b8f      	ldr	r3, [pc, #572]	; (800b4e4 <tcp_slowtmr+0x580>)
 800b2a6:	681a      	ldr	r2, [r3, #0]
 800b2a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2aa:	6a1b      	ldr	r3, [r3, #32]
 800b2ac:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800b2ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2b0:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800b2b4:	4b8c      	ldr	r3, [pc, #560]	; (800b4e8 <tcp_slowtmr+0x584>)
 800b2b6:	440b      	add	r3, r1
 800b2b8:	498c      	ldr	r1, [pc, #560]	; (800b4ec <tcp_slowtmr+0x588>)
 800b2ba:	fba1 1303 	umull	r1, r3, r1, r3
 800b2be:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b2c0:	429a      	cmp	r2, r3
 800b2c2:	d90a      	bls.n	800b2da <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800b2c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b2c8:	3301      	adds	r3, #1
 800b2ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800b2ce:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b2d2:	3301      	adds	r3, #1
 800b2d4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b2d8:	e027      	b.n	800b32a <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b2da:	4b82      	ldr	r3, [pc, #520]	; (800b4e4 <tcp_slowtmr+0x580>)
 800b2dc:	681a      	ldr	r2, [r3, #0]
 800b2de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2e0:	6a1b      	ldr	r3, [r3, #32]
 800b2e2:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800b2e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2e6:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800b2ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2ec:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800b2f0:	4618      	mov	r0, r3
 800b2f2:	4b7f      	ldr	r3, [pc, #508]	; (800b4f0 <tcp_slowtmr+0x58c>)
 800b2f4:	fb03 f300 	mul.w	r3, r3, r0
 800b2f8:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800b2fa:	497c      	ldr	r1, [pc, #496]	; (800b4ec <tcp_slowtmr+0x588>)
 800b2fc:	fba1 1303 	umull	r1, r3, r1, r3
 800b300:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b302:	429a      	cmp	r2, r3
 800b304:	d911      	bls.n	800b32a <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800b306:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b308:	f005 f804 	bl	8010314 <tcp_keepalive>
 800b30c:	4603      	mov	r3, r0
 800b30e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800b312:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800b316:	2b00      	cmp	r3, #0
 800b318:	d107      	bne.n	800b32a <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800b31a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b31c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800b320:	3301      	adds	r3, #1
 800b322:	b2da      	uxtb	r2, r3
 800b324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b326:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800b32a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b32c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d011      	beq.n	800b356 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800b332:	4b6c      	ldr	r3, [pc, #432]	; (800b4e4 <tcp_slowtmr+0x580>)
 800b334:	681a      	ldr	r2, [r3, #0]
 800b336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b338:	6a1b      	ldr	r3, [r3, #32]
 800b33a:	1ad2      	subs	r2, r2, r3
 800b33c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b33e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800b342:	4619      	mov	r1, r3
 800b344:	460b      	mov	r3, r1
 800b346:	005b      	lsls	r3, r3, #1
 800b348:	440b      	add	r3, r1
 800b34a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800b34c:	429a      	cmp	r2, r3
 800b34e:	d302      	bcc.n	800b356 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800b350:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b352:	f000 fec3 	bl	800c0dc <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800b356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b358:	7d1b      	ldrb	r3, [r3, #20]
 800b35a:	2b03      	cmp	r3, #3
 800b35c:	d10b      	bne.n	800b376 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b35e:	4b61      	ldr	r3, [pc, #388]	; (800b4e4 <tcp_slowtmr+0x580>)
 800b360:	681a      	ldr	r2, [r3, #0]
 800b362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b364:	6a1b      	ldr	r3, [r3, #32]
 800b366:	1ad3      	subs	r3, r2, r3
 800b368:	2b28      	cmp	r3, #40	; 0x28
 800b36a:	d904      	bls.n	800b376 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800b36c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b370:	3301      	adds	r3, #1
 800b372:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800b376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b378:	7d1b      	ldrb	r3, [r3, #20]
 800b37a:	2b09      	cmp	r3, #9
 800b37c:	d10b      	bne.n	800b396 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800b37e:	4b59      	ldr	r3, [pc, #356]	; (800b4e4 <tcp_slowtmr+0x580>)
 800b380:	681a      	ldr	r2, [r3, #0]
 800b382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b384:	6a1b      	ldr	r3, [r3, #32]
 800b386:	1ad3      	subs	r3, r2, r3
 800b388:	2bf0      	cmp	r3, #240	; 0xf0
 800b38a:	d904      	bls.n	800b396 <tcp_slowtmr+0x432>
        ++pcb_remove;
 800b38c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b390:	3301      	adds	r3, #1
 800b392:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800b396:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d060      	beq.n	800b460 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800b39e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b3a4:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800b3a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b3a8:	f000 fce4 	bl	800bd74 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800b3ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d010      	beq.n	800b3d4 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800b3b2:	4b50      	ldr	r3, [pc, #320]	; (800b4f4 <tcp_slowtmr+0x590>)
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b3b8:	429a      	cmp	r2, r3
 800b3ba:	d106      	bne.n	800b3ca <tcp_slowtmr+0x466>
 800b3bc:	4b4e      	ldr	r3, [pc, #312]	; (800b4f8 <tcp_slowtmr+0x594>)
 800b3be:	f240 526d 	movw	r2, #1389	; 0x56d
 800b3c2:	494e      	ldr	r1, [pc, #312]	; (800b4fc <tcp_slowtmr+0x598>)
 800b3c4:	484e      	ldr	r0, [pc, #312]	; (800b500 <tcp_slowtmr+0x59c>)
 800b3c6:	f007 fee5 	bl	8013194 <iprintf>
        prev->next = pcb->next;
 800b3ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3cc:	68da      	ldr	r2, [r3, #12]
 800b3ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3d0:	60da      	str	r2, [r3, #12]
 800b3d2:	e00f      	b.n	800b3f4 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800b3d4:	4b47      	ldr	r3, [pc, #284]	; (800b4f4 <tcp_slowtmr+0x590>)
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b3da:	429a      	cmp	r2, r3
 800b3dc:	d006      	beq.n	800b3ec <tcp_slowtmr+0x488>
 800b3de:	4b46      	ldr	r3, [pc, #280]	; (800b4f8 <tcp_slowtmr+0x594>)
 800b3e0:	f240 5271 	movw	r2, #1393	; 0x571
 800b3e4:	4947      	ldr	r1, [pc, #284]	; (800b504 <tcp_slowtmr+0x5a0>)
 800b3e6:	4846      	ldr	r0, [pc, #280]	; (800b500 <tcp_slowtmr+0x59c>)
 800b3e8:	f007 fed4 	bl	8013194 <iprintf>
        tcp_active_pcbs = pcb->next;
 800b3ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3ee:	68db      	ldr	r3, [r3, #12]
 800b3f0:	4a40      	ldr	r2, [pc, #256]	; (800b4f4 <tcp_slowtmr+0x590>)
 800b3f2:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800b3f4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d013      	beq.n	800b424 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800b3fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3fe:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800b400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b402:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800b404:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800b406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b408:	3304      	adds	r3, #4
 800b40a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b40c:	8ad2      	ldrh	r2, [r2, #22]
 800b40e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b410:	8b09      	ldrh	r1, [r1, #24]
 800b412:	9102      	str	r1, [sp, #8]
 800b414:	9201      	str	r2, [sp, #4]
 800b416:	9300      	str	r3, [sp, #0]
 800b418:	462b      	mov	r3, r5
 800b41a:	4622      	mov	r2, r4
 800b41c:	4601      	mov	r1, r0
 800b41e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b420:	f004 fec4 	bl	80101ac <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800b424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b426:	691b      	ldr	r3, [r3, #16]
 800b428:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800b42a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b42c:	7d1b      	ldrb	r3, [r3, #20]
 800b42e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800b430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b432:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800b434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b436:	68db      	ldr	r3, [r3, #12]
 800b438:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800b43a:	6838      	ldr	r0, [r7, #0]
 800b43c:	f7ff f83a 	bl	800a4b4 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800b440:	4b31      	ldr	r3, [pc, #196]	; (800b508 <tcp_slowtmr+0x5a4>)
 800b442:	2200      	movs	r2, #0
 800b444:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d004      	beq.n	800b456 <tcp_slowtmr+0x4f2>
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	f06f 010c 	mvn.w	r1, #12
 800b452:	68b8      	ldr	r0, [r7, #8]
 800b454:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800b456:	4b2c      	ldr	r3, [pc, #176]	; (800b508 <tcp_slowtmr+0x5a4>)
 800b458:	781b      	ldrb	r3, [r3, #0]
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d037      	beq.n	800b4ce <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800b45e:	e592      	b.n	800af86 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800b460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b462:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800b464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b466:	68db      	ldr	r3, [r3, #12]
 800b468:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800b46a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b46c:	7f1b      	ldrb	r3, [r3, #28]
 800b46e:	3301      	adds	r3, #1
 800b470:	b2da      	uxtb	r2, r3
 800b472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b474:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800b476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b478:	7f1a      	ldrb	r2, [r3, #28]
 800b47a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b47c:	7f5b      	ldrb	r3, [r3, #29]
 800b47e:	429a      	cmp	r2, r3
 800b480:	d325      	bcc.n	800b4ce <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800b482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b484:	2200      	movs	r2, #0
 800b486:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800b488:	4b1f      	ldr	r3, [pc, #124]	; (800b508 <tcp_slowtmr+0x5a4>)
 800b48a:	2200      	movs	r2, #0
 800b48c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800b48e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b490:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b494:	2b00      	cmp	r3, #0
 800b496:	d00b      	beq.n	800b4b0 <tcp_slowtmr+0x54c>
 800b498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b49a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b49e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b4a0:	6912      	ldr	r2, [r2, #16]
 800b4a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b4a4:	4610      	mov	r0, r2
 800b4a6:	4798      	blx	r3
 800b4a8:	4603      	mov	r3, r0
 800b4aa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800b4ae:	e002      	b.n	800b4b6 <tcp_slowtmr+0x552>
 800b4b0:	2300      	movs	r3, #0
 800b4b2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800b4b6:	4b14      	ldr	r3, [pc, #80]	; (800b508 <tcp_slowtmr+0x5a4>)
 800b4b8:	781b      	ldrb	r3, [r3, #0]
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d000      	beq.n	800b4c0 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800b4be:	e562      	b.n	800af86 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800b4c0:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d102      	bne.n	800b4ce <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800b4c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b4ca:	f004 f8bb 	bl	800f644 <tcp_output>
  while (pcb != NULL) {
 800b4ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	f47f ad5e 	bne.w	800af92 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800b4da:	4b0c      	ldr	r3, [pc, #48]	; (800b50c <tcp_slowtmr+0x5a8>)
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800b4e0:	e069      	b.n	800b5b6 <tcp_slowtmr+0x652>
 800b4e2:	bf00      	nop
 800b4e4:	240037d8 	.word	0x240037d8
 800b4e8:	000a4cb8 	.word	0x000a4cb8
 800b4ec:	10624dd3 	.word	0x10624dd3
 800b4f0:	000124f8 	.word	0x000124f8
 800b4f4:	240037d4 	.word	0x240037d4
 800b4f8:	08014d00 	.word	0x08014d00
 800b4fc:	08015138 	.word	0x08015138
 800b500:	08014d44 	.word	0x08014d44
 800b504:	08015164 	.word	0x08015164
 800b508:	240037d0 	.word	0x240037d0
 800b50c:	240037e4 	.word	0x240037e4
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800b510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b512:	7d1b      	ldrb	r3, [r3, #20]
 800b514:	2b0a      	cmp	r3, #10
 800b516:	d006      	beq.n	800b526 <tcp_slowtmr+0x5c2>
 800b518:	4b2b      	ldr	r3, [pc, #172]	; (800b5c8 <tcp_slowtmr+0x664>)
 800b51a:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800b51e:	492b      	ldr	r1, [pc, #172]	; (800b5cc <tcp_slowtmr+0x668>)
 800b520:	482b      	ldr	r0, [pc, #172]	; (800b5d0 <tcp_slowtmr+0x66c>)
 800b522:	f007 fe37 	bl	8013194 <iprintf>
    pcb_remove = 0;
 800b526:	2300      	movs	r3, #0
 800b528:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800b52c:	4b29      	ldr	r3, [pc, #164]	; (800b5d4 <tcp_slowtmr+0x670>)
 800b52e:	681a      	ldr	r2, [r3, #0]
 800b530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b532:	6a1b      	ldr	r3, [r3, #32]
 800b534:	1ad3      	subs	r3, r2, r3
 800b536:	2bf0      	cmp	r3, #240	; 0xf0
 800b538:	d904      	bls.n	800b544 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800b53a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b53e:	3301      	adds	r3, #1
 800b540:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800b544:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d02f      	beq.n	800b5ac <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800b54c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b54e:	f000 fc11 	bl	800bd74 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800b552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b554:	2b00      	cmp	r3, #0
 800b556:	d010      	beq.n	800b57a <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800b558:	4b1f      	ldr	r3, [pc, #124]	; (800b5d8 <tcp_slowtmr+0x674>)
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b55e:	429a      	cmp	r2, r3
 800b560:	d106      	bne.n	800b570 <tcp_slowtmr+0x60c>
 800b562:	4b19      	ldr	r3, [pc, #100]	; (800b5c8 <tcp_slowtmr+0x664>)
 800b564:	f240 52af 	movw	r2, #1455	; 0x5af
 800b568:	491c      	ldr	r1, [pc, #112]	; (800b5dc <tcp_slowtmr+0x678>)
 800b56a:	4819      	ldr	r0, [pc, #100]	; (800b5d0 <tcp_slowtmr+0x66c>)
 800b56c:	f007 fe12 	bl	8013194 <iprintf>
        prev->next = pcb->next;
 800b570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b572:	68da      	ldr	r2, [r3, #12]
 800b574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b576:	60da      	str	r2, [r3, #12]
 800b578:	e00f      	b.n	800b59a <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800b57a:	4b17      	ldr	r3, [pc, #92]	; (800b5d8 <tcp_slowtmr+0x674>)
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b580:	429a      	cmp	r2, r3
 800b582:	d006      	beq.n	800b592 <tcp_slowtmr+0x62e>
 800b584:	4b10      	ldr	r3, [pc, #64]	; (800b5c8 <tcp_slowtmr+0x664>)
 800b586:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800b58a:	4915      	ldr	r1, [pc, #84]	; (800b5e0 <tcp_slowtmr+0x67c>)
 800b58c:	4810      	ldr	r0, [pc, #64]	; (800b5d0 <tcp_slowtmr+0x66c>)
 800b58e:	f007 fe01 	bl	8013194 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800b592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b594:	68db      	ldr	r3, [r3, #12]
 800b596:	4a10      	ldr	r2, [pc, #64]	; (800b5d8 <tcp_slowtmr+0x674>)
 800b598:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800b59a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b59c:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800b59e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5a0:	68db      	ldr	r3, [r3, #12]
 800b5a2:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800b5a4:	69f8      	ldr	r0, [r7, #28]
 800b5a6:	f7fe ff85 	bl	800a4b4 <tcp_free>
 800b5aa:	e004      	b.n	800b5b6 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800b5ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5ae:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800b5b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5b2:	68db      	ldr	r3, [r3, #12]
 800b5b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800b5b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d1a9      	bne.n	800b510 <tcp_slowtmr+0x5ac>
    }
  }
}
 800b5bc:	bf00      	nop
 800b5be:	bf00      	nop
 800b5c0:	3730      	adds	r7, #48	; 0x30
 800b5c2:	46bd      	mov	sp, r7
 800b5c4:	bdb0      	pop	{r4, r5, r7, pc}
 800b5c6:	bf00      	nop
 800b5c8:	08014d00 	.word	0x08014d00
 800b5cc:	08015190 	.word	0x08015190
 800b5d0:	08014d44 	.word	0x08014d44
 800b5d4:	240037d8 	.word	0x240037d8
 800b5d8:	240037e4 	.word	0x240037e4
 800b5dc:	080151c0 	.word	0x080151c0
 800b5e0:	080151e8 	.word	0x080151e8

0800b5e4 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800b5e4:	b580      	push	{r7, lr}
 800b5e6:	b082      	sub	sp, #8
 800b5e8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800b5ea:	4b2d      	ldr	r3, [pc, #180]	; (800b6a0 <tcp_fasttmr+0xbc>)
 800b5ec:	781b      	ldrb	r3, [r3, #0]
 800b5ee:	3301      	adds	r3, #1
 800b5f0:	b2da      	uxtb	r2, r3
 800b5f2:	4b2b      	ldr	r3, [pc, #172]	; (800b6a0 <tcp_fasttmr+0xbc>)
 800b5f4:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800b5f6:	4b2b      	ldr	r3, [pc, #172]	; (800b6a4 <tcp_fasttmr+0xc0>)
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800b5fc:	e048      	b.n	800b690 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	7f9a      	ldrb	r2, [r3, #30]
 800b602:	4b27      	ldr	r3, [pc, #156]	; (800b6a0 <tcp_fasttmr+0xbc>)
 800b604:	781b      	ldrb	r3, [r3, #0]
 800b606:	429a      	cmp	r2, r3
 800b608:	d03f      	beq.n	800b68a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800b60a:	4b25      	ldr	r3, [pc, #148]	; (800b6a0 <tcp_fasttmr+0xbc>)
 800b60c:	781a      	ldrb	r2, [r3, #0]
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	8b5b      	ldrh	r3, [r3, #26]
 800b616:	f003 0301 	and.w	r3, r3, #1
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d010      	beq.n	800b640 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	8b5b      	ldrh	r3, [r3, #26]
 800b622:	f043 0302 	orr.w	r3, r3, #2
 800b626:	b29a      	uxth	r2, r3
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800b62c:	6878      	ldr	r0, [r7, #4]
 800b62e:	f004 f809 	bl	800f644 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	8b5b      	ldrh	r3, [r3, #26]
 800b636:	f023 0303 	bic.w	r3, r3, #3
 800b63a:	b29a      	uxth	r2, r3
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	8b5b      	ldrh	r3, [r3, #26]
 800b644:	f003 0308 	and.w	r3, r3, #8
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d009      	beq.n	800b660 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	8b5b      	ldrh	r3, [r3, #26]
 800b650:	f023 0308 	bic.w	r3, r3, #8
 800b654:	b29a      	uxth	r2, r3
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800b65a:	6878      	ldr	r0, [r7, #4]
 800b65c:	f7ff f8be 	bl	800a7dc <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	68db      	ldr	r3, [r3, #12]
 800b664:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d00a      	beq.n	800b684 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800b66e:	4b0e      	ldr	r3, [pc, #56]	; (800b6a8 <tcp_fasttmr+0xc4>)
 800b670:	2200      	movs	r2, #0
 800b672:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800b674:	6878      	ldr	r0, [r7, #4]
 800b676:	f000 f819 	bl	800b6ac <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800b67a:	4b0b      	ldr	r3, [pc, #44]	; (800b6a8 <tcp_fasttmr+0xc4>)
 800b67c:	781b      	ldrb	r3, [r3, #0]
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d000      	beq.n	800b684 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800b682:	e7b8      	b.n	800b5f6 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800b684:	683b      	ldr	r3, [r7, #0]
 800b686:	607b      	str	r3, [r7, #4]
 800b688:	e002      	b.n	800b690 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	68db      	ldr	r3, [r3, #12]
 800b68e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	2b00      	cmp	r3, #0
 800b694:	d1b3      	bne.n	800b5fe <tcp_fasttmr+0x1a>
    }
  }
}
 800b696:	bf00      	nop
 800b698:	bf00      	nop
 800b69a:	3708      	adds	r7, #8
 800b69c:	46bd      	mov	sp, r7
 800b69e:	bd80      	pop	{r7, pc}
 800b6a0:	240000ee 	.word	0x240000ee
 800b6a4:	240037d4 	.word	0x240037d4
 800b6a8:	240037d0 	.word	0x240037d0

0800b6ac <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800b6ac:	b590      	push	{r4, r7, lr}
 800b6ae:	b085      	sub	sp, #20
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d109      	bne.n	800b6ce <tcp_process_refused_data+0x22>
 800b6ba:	4b37      	ldr	r3, [pc, #220]	; (800b798 <tcp_process_refused_data+0xec>)
 800b6bc:	f240 6209 	movw	r2, #1545	; 0x609
 800b6c0:	4936      	ldr	r1, [pc, #216]	; (800b79c <tcp_process_refused_data+0xf0>)
 800b6c2:	4837      	ldr	r0, [pc, #220]	; (800b7a0 <tcp_process_refused_data+0xf4>)
 800b6c4:	f007 fd66 	bl	8013194 <iprintf>
 800b6c8:	f06f 030f 	mvn.w	r3, #15
 800b6cc:	e060      	b.n	800b790 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b6d2:	7b5b      	ldrb	r3, [r3, #13]
 800b6d4:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b6da:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	2200      	movs	r2, #0
 800b6e0:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d00b      	beq.n	800b704 <tcp_process_refused_data+0x58>
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	6918      	ldr	r0, [r3, #16]
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	68ba      	ldr	r2, [r7, #8]
 800b6fa:	6879      	ldr	r1, [r7, #4]
 800b6fc:	47a0      	blx	r4
 800b6fe:	4603      	mov	r3, r0
 800b700:	73fb      	strb	r3, [r7, #15]
 800b702:	e007      	b.n	800b714 <tcp_process_refused_data+0x68>
 800b704:	2300      	movs	r3, #0
 800b706:	68ba      	ldr	r2, [r7, #8]
 800b708:	6879      	ldr	r1, [r7, #4]
 800b70a:	2000      	movs	r0, #0
 800b70c:	f000 f8c2 	bl	800b894 <tcp_recv_null>
 800b710:	4603      	mov	r3, r0
 800b712:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800b714:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d12a      	bne.n	800b772 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800b71c:	7bbb      	ldrb	r3, [r7, #14]
 800b71e:	f003 0320 	and.w	r3, r3, #32
 800b722:	2b00      	cmp	r3, #0
 800b724:	d033      	beq.n	800b78e <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b72a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800b72e:	d005      	beq.n	800b73c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b734:	3301      	adds	r3, #1
 800b736:	b29a      	uxth	r2, r3
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b742:	2b00      	cmp	r3, #0
 800b744:	d00b      	beq.n	800b75e <tcp_process_refused_data+0xb2>
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	6918      	ldr	r0, [r3, #16]
 800b750:	2300      	movs	r3, #0
 800b752:	2200      	movs	r2, #0
 800b754:	6879      	ldr	r1, [r7, #4]
 800b756:	47a0      	blx	r4
 800b758:	4603      	mov	r3, r0
 800b75a:	73fb      	strb	r3, [r7, #15]
 800b75c:	e001      	b.n	800b762 <tcp_process_refused_data+0xb6>
 800b75e:	2300      	movs	r3, #0
 800b760:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800b762:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b766:	f113 0f0d 	cmn.w	r3, #13
 800b76a:	d110      	bne.n	800b78e <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800b76c:	f06f 030c 	mvn.w	r3, #12
 800b770:	e00e      	b.n	800b790 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800b772:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b776:	f113 0f0d 	cmn.w	r3, #13
 800b77a:	d102      	bne.n	800b782 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800b77c:	f06f 030c 	mvn.w	r3, #12
 800b780:	e006      	b.n	800b790 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	68ba      	ldr	r2, [r7, #8]
 800b786:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800b788:	f06f 0304 	mvn.w	r3, #4
 800b78c:	e000      	b.n	800b790 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800b78e:	2300      	movs	r3, #0
}
 800b790:	4618      	mov	r0, r3
 800b792:	3714      	adds	r7, #20
 800b794:	46bd      	mov	sp, r7
 800b796:	bd90      	pop	{r4, r7, pc}
 800b798:	08014d00 	.word	0x08014d00
 800b79c:	08015210 	.word	0x08015210
 800b7a0:	08014d44 	.word	0x08014d44

0800b7a4 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800b7a4:	b580      	push	{r7, lr}
 800b7a6:	b084      	sub	sp, #16
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800b7ac:	e007      	b.n	800b7be <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800b7b4:	6878      	ldr	r0, [r7, #4]
 800b7b6:	f000 f80a 	bl	800b7ce <tcp_seg_free>
    seg = next;
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d1f4      	bne.n	800b7ae <tcp_segs_free+0xa>
  }
}
 800b7c4:	bf00      	nop
 800b7c6:	bf00      	nop
 800b7c8:	3710      	adds	r7, #16
 800b7ca:	46bd      	mov	sp, r7
 800b7cc:	bd80      	pop	{r7, pc}

0800b7ce <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800b7ce:	b580      	push	{r7, lr}
 800b7d0:	b082      	sub	sp, #8
 800b7d2:	af00      	add	r7, sp, #0
 800b7d4:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d00c      	beq.n	800b7f6 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	685b      	ldr	r3, [r3, #4]
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d004      	beq.n	800b7ee <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	685b      	ldr	r3, [r3, #4]
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	f7fe fbb3 	bl	8009f54 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800b7ee:	6879      	ldr	r1, [r7, #4]
 800b7f0:	2003      	movs	r0, #3
 800b7f2:	f7fd fd39 	bl	8009268 <memp_free>
  }
}
 800b7f6:	bf00      	nop
 800b7f8:	3708      	adds	r7, #8
 800b7fa:	46bd      	mov	sp, r7
 800b7fc:	bd80      	pop	{r7, pc}
	...

0800b800 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 800b800:	b580      	push	{r7, lr}
 800b802:	b082      	sub	sp, #8
 800b804:	af00      	add	r7, sp, #0
 800b806:	6078      	str	r0, [r7, #4]
 800b808:	460b      	mov	r3, r1
 800b80a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d107      	bne.n	800b822 <tcp_setprio+0x22>
 800b812:	4b07      	ldr	r3, [pc, #28]	; (800b830 <tcp_setprio+0x30>)
 800b814:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 800b818:	4906      	ldr	r1, [pc, #24]	; (800b834 <tcp_setprio+0x34>)
 800b81a:	4807      	ldr	r0, [pc, #28]	; (800b838 <tcp_setprio+0x38>)
 800b81c:	f007 fcba 	bl	8013194 <iprintf>
 800b820:	e002      	b.n	800b828 <tcp_setprio+0x28>

  pcb->prio = prio;
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	78fa      	ldrb	r2, [r7, #3]
 800b826:	755a      	strb	r2, [r3, #21]
}
 800b828:	3708      	adds	r7, #8
 800b82a:	46bd      	mov	sp, r7
 800b82c:	bd80      	pop	{r7, pc}
 800b82e:	bf00      	nop
 800b830:	08014d00 	.word	0x08014d00
 800b834:	08015238 	.word	0x08015238
 800b838:	08014d44 	.word	0x08014d44

0800b83c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800b83c:	b580      	push	{r7, lr}
 800b83e:	b084      	sub	sp, #16
 800b840:	af00      	add	r7, sp, #0
 800b842:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	2b00      	cmp	r3, #0
 800b848:	d106      	bne.n	800b858 <tcp_seg_copy+0x1c>
 800b84a:	4b0f      	ldr	r3, [pc, #60]	; (800b888 <tcp_seg_copy+0x4c>)
 800b84c:	f240 6282 	movw	r2, #1666	; 0x682
 800b850:	490e      	ldr	r1, [pc, #56]	; (800b88c <tcp_seg_copy+0x50>)
 800b852:	480f      	ldr	r0, [pc, #60]	; (800b890 <tcp_seg_copy+0x54>)
 800b854:	f007 fc9e 	bl	8013194 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800b858:	2003      	movs	r0, #3
 800b85a:	f7fd fc95 	bl	8009188 <memp_malloc>
 800b85e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	2b00      	cmp	r3, #0
 800b864:	d101      	bne.n	800b86a <tcp_seg_copy+0x2e>
    return NULL;
 800b866:	2300      	movs	r3, #0
 800b868:	e00a      	b.n	800b880 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800b86a:	2210      	movs	r2, #16
 800b86c:	6879      	ldr	r1, [r7, #4]
 800b86e:	68f8      	ldr	r0, [r7, #12]
 800b870:	f007 fc7a 	bl	8013168 <memcpy>
  pbuf_ref(cseg->p);
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	685b      	ldr	r3, [r3, #4]
 800b878:	4618      	mov	r0, r3
 800b87a:	f7fe fc0b 	bl	800a094 <pbuf_ref>
  return cseg;
 800b87e:	68fb      	ldr	r3, [r7, #12]
}
 800b880:	4618      	mov	r0, r3
 800b882:	3710      	adds	r7, #16
 800b884:	46bd      	mov	sp, r7
 800b886:	bd80      	pop	{r7, pc}
 800b888:	08014d00 	.word	0x08014d00
 800b88c:	08015254 	.word	0x08015254
 800b890:	08014d44 	.word	0x08014d44

0800b894 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800b894:	b580      	push	{r7, lr}
 800b896:	b084      	sub	sp, #16
 800b898:	af00      	add	r7, sp, #0
 800b89a:	60f8      	str	r0, [r7, #12]
 800b89c:	60b9      	str	r1, [r7, #8]
 800b89e:	607a      	str	r2, [r7, #4]
 800b8a0:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800b8a2:	68bb      	ldr	r3, [r7, #8]
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d109      	bne.n	800b8bc <tcp_recv_null+0x28>
 800b8a8:	4b12      	ldr	r3, [pc, #72]	; (800b8f4 <tcp_recv_null+0x60>)
 800b8aa:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800b8ae:	4912      	ldr	r1, [pc, #72]	; (800b8f8 <tcp_recv_null+0x64>)
 800b8b0:	4812      	ldr	r0, [pc, #72]	; (800b8fc <tcp_recv_null+0x68>)
 800b8b2:	f007 fc6f 	bl	8013194 <iprintf>
 800b8b6:	f06f 030f 	mvn.w	r3, #15
 800b8ba:	e016      	b.n	800b8ea <tcp_recv_null+0x56>

  if (p != NULL) {
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d009      	beq.n	800b8d6 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	891b      	ldrh	r3, [r3, #8]
 800b8c6:	4619      	mov	r1, r3
 800b8c8:	68b8      	ldr	r0, [r7, #8]
 800b8ca:	f7ff fab5 	bl	800ae38 <tcp_recved>
    pbuf_free(p);
 800b8ce:	6878      	ldr	r0, [r7, #4]
 800b8d0:	f7fe fb40 	bl	8009f54 <pbuf_free>
 800b8d4:	e008      	b.n	800b8e8 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800b8d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d104      	bne.n	800b8e8 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800b8de:	68b8      	ldr	r0, [r7, #8]
 800b8e0:	f7fe ffe6 	bl	800a8b0 <tcp_close>
 800b8e4:	4603      	mov	r3, r0
 800b8e6:	e000      	b.n	800b8ea <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800b8e8:	2300      	movs	r3, #0
}
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	3710      	adds	r7, #16
 800b8ee:	46bd      	mov	sp, r7
 800b8f0:	bd80      	pop	{r7, pc}
 800b8f2:	bf00      	nop
 800b8f4:	08014d00 	.word	0x08014d00
 800b8f8:	08015270 	.word	0x08015270
 800b8fc:	08014d44 	.word	0x08014d44

0800b900 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800b900:	b580      	push	{r7, lr}
 800b902:	b086      	sub	sp, #24
 800b904:	af00      	add	r7, sp, #0
 800b906:	4603      	mov	r3, r0
 800b908:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800b90a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b90e:	2b00      	cmp	r3, #0
 800b910:	db01      	blt.n	800b916 <tcp_kill_prio+0x16>
 800b912:	79fb      	ldrb	r3, [r7, #7]
 800b914:	e000      	b.n	800b918 <tcp_kill_prio+0x18>
 800b916:	237f      	movs	r3, #127	; 0x7f
 800b918:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800b91a:	7afb      	ldrb	r3, [r7, #11]
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d034      	beq.n	800b98a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800b920:	7afb      	ldrb	r3, [r7, #11]
 800b922:	3b01      	subs	r3, #1
 800b924:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800b926:	2300      	movs	r3, #0
 800b928:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800b92a:	2300      	movs	r3, #0
 800b92c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b92e:	4b19      	ldr	r3, [pc, #100]	; (800b994 <tcp_kill_prio+0x94>)
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	617b      	str	r3, [r7, #20]
 800b934:	e01f      	b.n	800b976 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800b936:	697b      	ldr	r3, [r7, #20]
 800b938:	7d5b      	ldrb	r3, [r3, #21]
 800b93a:	7afa      	ldrb	r2, [r7, #11]
 800b93c:	429a      	cmp	r2, r3
 800b93e:	d80c      	bhi.n	800b95a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800b940:	697b      	ldr	r3, [r7, #20]
 800b942:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800b944:	7afa      	ldrb	r2, [r7, #11]
 800b946:	429a      	cmp	r2, r3
 800b948:	d112      	bne.n	800b970 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800b94a:	4b13      	ldr	r3, [pc, #76]	; (800b998 <tcp_kill_prio+0x98>)
 800b94c:	681a      	ldr	r2, [r3, #0]
 800b94e:	697b      	ldr	r3, [r7, #20]
 800b950:	6a1b      	ldr	r3, [r3, #32]
 800b952:	1ad3      	subs	r3, r2, r3
 800b954:	68fa      	ldr	r2, [r7, #12]
 800b956:	429a      	cmp	r2, r3
 800b958:	d80a      	bhi.n	800b970 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800b95a:	4b0f      	ldr	r3, [pc, #60]	; (800b998 <tcp_kill_prio+0x98>)
 800b95c:	681a      	ldr	r2, [r3, #0]
 800b95e:	697b      	ldr	r3, [r7, #20]
 800b960:	6a1b      	ldr	r3, [r3, #32]
 800b962:	1ad3      	subs	r3, r2, r3
 800b964:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800b966:	697b      	ldr	r3, [r7, #20]
 800b968:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800b96a:	697b      	ldr	r3, [r7, #20]
 800b96c:	7d5b      	ldrb	r3, [r3, #21]
 800b96e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b970:	697b      	ldr	r3, [r7, #20]
 800b972:	68db      	ldr	r3, [r3, #12]
 800b974:	617b      	str	r3, [r7, #20]
 800b976:	697b      	ldr	r3, [r7, #20]
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d1dc      	bne.n	800b936 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800b97c:	693b      	ldr	r3, [r7, #16]
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d004      	beq.n	800b98c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800b982:	6938      	ldr	r0, [r7, #16]
 800b984:	f7ff f87e 	bl	800aa84 <tcp_abort>
 800b988:	e000      	b.n	800b98c <tcp_kill_prio+0x8c>
    return;
 800b98a:	bf00      	nop
  }
}
 800b98c:	3718      	adds	r7, #24
 800b98e:	46bd      	mov	sp, r7
 800b990:	bd80      	pop	{r7, pc}
 800b992:	bf00      	nop
 800b994:	240037d4 	.word	0x240037d4
 800b998:	240037d8 	.word	0x240037d8

0800b99c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800b99c:	b580      	push	{r7, lr}
 800b99e:	b086      	sub	sp, #24
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	4603      	mov	r3, r0
 800b9a4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800b9a6:	79fb      	ldrb	r3, [r7, #7]
 800b9a8:	2b08      	cmp	r3, #8
 800b9aa:	d009      	beq.n	800b9c0 <tcp_kill_state+0x24>
 800b9ac:	79fb      	ldrb	r3, [r7, #7]
 800b9ae:	2b09      	cmp	r3, #9
 800b9b0:	d006      	beq.n	800b9c0 <tcp_kill_state+0x24>
 800b9b2:	4b1a      	ldr	r3, [pc, #104]	; (800ba1c <tcp_kill_state+0x80>)
 800b9b4:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800b9b8:	4919      	ldr	r1, [pc, #100]	; (800ba20 <tcp_kill_state+0x84>)
 800b9ba:	481a      	ldr	r0, [pc, #104]	; (800ba24 <tcp_kill_state+0x88>)
 800b9bc:	f007 fbea 	bl	8013194 <iprintf>

  inactivity = 0;
 800b9c0:	2300      	movs	r3, #0
 800b9c2:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800b9c4:	2300      	movs	r3, #0
 800b9c6:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b9c8:	4b17      	ldr	r3, [pc, #92]	; (800ba28 <tcp_kill_state+0x8c>)
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	617b      	str	r3, [r7, #20]
 800b9ce:	e017      	b.n	800ba00 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800b9d0:	697b      	ldr	r3, [r7, #20]
 800b9d2:	7d1b      	ldrb	r3, [r3, #20]
 800b9d4:	79fa      	ldrb	r2, [r7, #7]
 800b9d6:	429a      	cmp	r2, r3
 800b9d8:	d10f      	bne.n	800b9fa <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800b9da:	4b14      	ldr	r3, [pc, #80]	; (800ba2c <tcp_kill_state+0x90>)
 800b9dc:	681a      	ldr	r2, [r3, #0]
 800b9de:	697b      	ldr	r3, [r7, #20]
 800b9e0:	6a1b      	ldr	r3, [r3, #32]
 800b9e2:	1ad3      	subs	r3, r2, r3
 800b9e4:	68fa      	ldr	r2, [r7, #12]
 800b9e6:	429a      	cmp	r2, r3
 800b9e8:	d807      	bhi.n	800b9fa <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800b9ea:	4b10      	ldr	r3, [pc, #64]	; (800ba2c <tcp_kill_state+0x90>)
 800b9ec:	681a      	ldr	r2, [r3, #0]
 800b9ee:	697b      	ldr	r3, [r7, #20]
 800b9f0:	6a1b      	ldr	r3, [r3, #32]
 800b9f2:	1ad3      	subs	r3, r2, r3
 800b9f4:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800b9f6:	697b      	ldr	r3, [r7, #20]
 800b9f8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b9fa:	697b      	ldr	r3, [r7, #20]
 800b9fc:	68db      	ldr	r3, [r3, #12]
 800b9fe:	617b      	str	r3, [r7, #20]
 800ba00:	697b      	ldr	r3, [r7, #20]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d1e4      	bne.n	800b9d0 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800ba06:	693b      	ldr	r3, [r7, #16]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d003      	beq.n	800ba14 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800ba0c:	2100      	movs	r1, #0
 800ba0e:	6938      	ldr	r0, [r7, #16]
 800ba10:	f7fe ff7a 	bl	800a908 <tcp_abandon>
  }
}
 800ba14:	bf00      	nop
 800ba16:	3718      	adds	r7, #24
 800ba18:	46bd      	mov	sp, r7
 800ba1a:	bd80      	pop	{r7, pc}
 800ba1c:	08014d00 	.word	0x08014d00
 800ba20:	0801528c 	.word	0x0801528c
 800ba24:	08014d44 	.word	0x08014d44
 800ba28:	240037d4 	.word	0x240037d4
 800ba2c:	240037d8 	.word	0x240037d8

0800ba30 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800ba30:	b580      	push	{r7, lr}
 800ba32:	b084      	sub	sp, #16
 800ba34:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800ba36:	2300      	movs	r3, #0
 800ba38:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ba3e:	4b12      	ldr	r3, [pc, #72]	; (800ba88 <tcp_kill_timewait+0x58>)
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	60fb      	str	r3, [r7, #12]
 800ba44:	e012      	b.n	800ba6c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800ba46:	4b11      	ldr	r3, [pc, #68]	; (800ba8c <tcp_kill_timewait+0x5c>)
 800ba48:	681a      	ldr	r2, [r3, #0]
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	6a1b      	ldr	r3, [r3, #32]
 800ba4e:	1ad3      	subs	r3, r2, r3
 800ba50:	687a      	ldr	r2, [r7, #4]
 800ba52:	429a      	cmp	r2, r3
 800ba54:	d807      	bhi.n	800ba66 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800ba56:	4b0d      	ldr	r3, [pc, #52]	; (800ba8c <tcp_kill_timewait+0x5c>)
 800ba58:	681a      	ldr	r2, [r3, #0]
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	6a1b      	ldr	r3, [r3, #32]
 800ba5e:	1ad3      	subs	r3, r2, r3
 800ba60:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	68db      	ldr	r3, [r3, #12]
 800ba6a:	60fb      	str	r3, [r7, #12]
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d1e9      	bne.n	800ba46 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800ba72:	68bb      	ldr	r3, [r7, #8]
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d002      	beq.n	800ba7e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800ba78:	68b8      	ldr	r0, [r7, #8]
 800ba7a:	f7ff f803 	bl	800aa84 <tcp_abort>
  }
}
 800ba7e:	bf00      	nop
 800ba80:	3710      	adds	r7, #16
 800ba82:	46bd      	mov	sp, r7
 800ba84:	bd80      	pop	{r7, pc}
 800ba86:	bf00      	nop
 800ba88:	240037e4 	.word	0x240037e4
 800ba8c:	240037d8 	.word	0x240037d8

0800ba90 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800ba90:	b580      	push	{r7, lr}
 800ba92:	b082      	sub	sp, #8
 800ba94:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800ba96:	4b10      	ldr	r3, [pc, #64]	; (800bad8 <tcp_handle_closepend+0x48>)
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800ba9c:	e014      	b.n	800bac8 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	68db      	ldr	r3, [r3, #12]
 800baa2:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	8b5b      	ldrh	r3, [r3, #26]
 800baa8:	f003 0308 	and.w	r3, r3, #8
 800baac:	2b00      	cmp	r3, #0
 800baae:	d009      	beq.n	800bac4 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	8b5b      	ldrh	r3, [r3, #26]
 800bab4:	f023 0308 	bic.w	r3, r3, #8
 800bab8:	b29a      	uxth	r2, r3
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800babe:	6878      	ldr	r0, [r7, #4]
 800bac0:	f7fe fe8c 	bl	800a7dc <tcp_close_shutdown_fin>
    }
    pcb = next;
 800bac4:	683b      	ldr	r3, [r7, #0]
 800bac6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d1e7      	bne.n	800ba9e <tcp_handle_closepend+0xe>
  }
}
 800bace:	bf00      	nop
 800bad0:	bf00      	nop
 800bad2:	3708      	adds	r7, #8
 800bad4:	46bd      	mov	sp, r7
 800bad6:	bd80      	pop	{r7, pc}
 800bad8:	240037d4 	.word	0x240037d4

0800badc <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800badc:	b580      	push	{r7, lr}
 800bade:	b084      	sub	sp, #16
 800bae0:	af00      	add	r7, sp, #0
 800bae2:	4603      	mov	r3, r0
 800bae4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800bae6:	2001      	movs	r0, #1
 800bae8:	f7fd fb4e 	bl	8009188 <memp_malloc>
 800baec:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d126      	bne.n	800bb42 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800baf4:	f7ff ffcc 	bl	800ba90 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800baf8:	f7ff ff9a 	bl	800ba30 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800bafc:	2001      	movs	r0, #1
 800bafe:	f7fd fb43 	bl	8009188 <memp_malloc>
 800bb02:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d11b      	bne.n	800bb42 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800bb0a:	2009      	movs	r0, #9
 800bb0c:	f7ff ff46 	bl	800b99c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800bb10:	2001      	movs	r0, #1
 800bb12:	f7fd fb39 	bl	8009188 <memp_malloc>
 800bb16:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d111      	bne.n	800bb42 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800bb1e:	2008      	movs	r0, #8
 800bb20:	f7ff ff3c 	bl	800b99c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800bb24:	2001      	movs	r0, #1
 800bb26:	f7fd fb2f 	bl	8009188 <memp_malloc>
 800bb2a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d107      	bne.n	800bb42 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800bb32:	79fb      	ldrb	r3, [r7, #7]
 800bb34:	4618      	mov	r0, r3
 800bb36:	f7ff fee3 	bl	800b900 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800bb3a:	2001      	movs	r0, #1
 800bb3c:	f7fd fb24 	bl	8009188 <memp_malloc>
 800bb40:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d03f      	beq.n	800bbc8 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800bb48:	229c      	movs	r2, #156	; 0x9c
 800bb4a:	2100      	movs	r1, #0
 800bb4c:	68f8      	ldr	r0, [r7, #12]
 800bb4e:	f007 fb19 	bl	8013184 <memset>
    pcb->prio = prio;
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	79fa      	ldrb	r2, [r7, #7]
 800bb56:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800bb5e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800bb68:	855a      	strh	r2, [r3, #42]	; 0x2a
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	22ff      	movs	r2, #255	; 0xff
 800bb76:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	f44f 7206 	mov.w	r2, #536	; 0x218
 800bb7e:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	2206      	movs	r2, #6
 800bb84:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	2206      	movs	r2, #6
 800bb8c:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bb94:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	2201      	movs	r2, #1
 800bb9a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800bb9e:	4b0d      	ldr	r3, [pc, #52]	; (800bbd4 <tcp_alloc+0xf8>)
 800bba0:	681a      	ldr	r2, [r3, #0]
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800bba6:	4b0c      	ldr	r3, [pc, #48]	; (800bbd8 <tcp_alloc+0xfc>)
 800bba8:	781a      	ldrb	r2, [r3, #0]
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800bbb4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	4a08      	ldr	r2, [pc, #32]	; (800bbdc <tcp_alloc+0x100>)
 800bbbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	4a07      	ldr	r2, [pc, #28]	; (800bbe0 <tcp_alloc+0x104>)
 800bbc4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800bbc8:	68fb      	ldr	r3, [r7, #12]
}
 800bbca:	4618      	mov	r0, r3
 800bbcc:	3710      	adds	r7, #16
 800bbce:	46bd      	mov	sp, r7
 800bbd0:	bd80      	pop	{r7, pc}
 800bbd2:	bf00      	nop
 800bbd4:	240037d8 	.word	0x240037d8
 800bbd8:	240000ee 	.word	0x240000ee
 800bbdc:	0800b895 	.word	0x0800b895
 800bbe0:	006ddd00 	.word	0x006ddd00

0800bbe4 <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 800bbe4:	b580      	push	{r7, lr}
 800bbe6:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 800bbe8:	2040      	movs	r0, #64	; 0x40
 800bbea:	f7ff ff77 	bl	800badc <tcp_alloc>
 800bbee:	4603      	mov	r3, r0
}
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	bd80      	pop	{r7, pc}

0800bbf4 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800bbf4:	b480      	push	{r7}
 800bbf6:	b083      	sub	sp, #12
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	6078      	str	r0, [r7, #4]
 800bbfc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d002      	beq.n	800bc0a <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	683a      	ldr	r2, [r7, #0]
 800bc08:	611a      	str	r2, [r3, #16]
  }
}
 800bc0a:	bf00      	nop
 800bc0c:	370c      	adds	r7, #12
 800bc0e:	46bd      	mov	sp, r7
 800bc10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc14:	4770      	bx	lr
	...

0800bc18 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800bc18:	b580      	push	{r7, lr}
 800bc1a:	b082      	sub	sp, #8
 800bc1c:	af00      	add	r7, sp, #0
 800bc1e:	6078      	str	r0, [r7, #4]
 800bc20:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d00e      	beq.n	800bc46 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	7d1b      	ldrb	r3, [r3, #20]
 800bc2c:	2b01      	cmp	r3, #1
 800bc2e:	d106      	bne.n	800bc3e <tcp_recv+0x26>
 800bc30:	4b07      	ldr	r3, [pc, #28]	; (800bc50 <tcp_recv+0x38>)
 800bc32:	f240 72df 	movw	r2, #2015	; 0x7df
 800bc36:	4907      	ldr	r1, [pc, #28]	; (800bc54 <tcp_recv+0x3c>)
 800bc38:	4807      	ldr	r0, [pc, #28]	; (800bc58 <tcp_recv+0x40>)
 800bc3a:	f007 faab 	bl	8013194 <iprintf>
    pcb->recv = recv;
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	683a      	ldr	r2, [r7, #0]
 800bc42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800bc46:	bf00      	nop
 800bc48:	3708      	adds	r7, #8
 800bc4a:	46bd      	mov	sp, r7
 800bc4c:	bd80      	pop	{r7, pc}
 800bc4e:	bf00      	nop
 800bc50:	08014d00 	.word	0x08014d00
 800bc54:	0801529c 	.word	0x0801529c
 800bc58:	08014d44 	.word	0x08014d44

0800bc5c <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800bc5c:	b580      	push	{r7, lr}
 800bc5e:	b082      	sub	sp, #8
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	6078      	str	r0, [r7, #4]
 800bc64:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d00e      	beq.n	800bc8a <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	7d1b      	ldrb	r3, [r3, #20]
 800bc70:	2b01      	cmp	r3, #1
 800bc72:	d106      	bne.n	800bc82 <tcp_sent+0x26>
 800bc74:	4b07      	ldr	r3, [pc, #28]	; (800bc94 <tcp_sent+0x38>)
 800bc76:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800bc7a:	4907      	ldr	r1, [pc, #28]	; (800bc98 <tcp_sent+0x3c>)
 800bc7c:	4807      	ldr	r0, [pc, #28]	; (800bc9c <tcp_sent+0x40>)
 800bc7e:	f007 fa89 	bl	8013194 <iprintf>
    pcb->sent = sent;
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	683a      	ldr	r2, [r7, #0]
 800bc86:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800bc8a:	bf00      	nop
 800bc8c:	3708      	adds	r7, #8
 800bc8e:	46bd      	mov	sp, r7
 800bc90:	bd80      	pop	{r7, pc}
 800bc92:	bf00      	nop
 800bc94:	08014d00 	.word	0x08014d00
 800bc98:	080152c4 	.word	0x080152c4
 800bc9c:	08014d44 	.word	0x08014d44

0800bca0 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800bca0:	b580      	push	{r7, lr}
 800bca2:	b082      	sub	sp, #8
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	6078      	str	r0, [r7, #4]
 800bca8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d00e      	beq.n	800bcce <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	7d1b      	ldrb	r3, [r3, #20]
 800bcb4:	2b01      	cmp	r3, #1
 800bcb6:	d106      	bne.n	800bcc6 <tcp_err+0x26>
 800bcb8:	4b07      	ldr	r3, [pc, #28]	; (800bcd8 <tcp_err+0x38>)
 800bcba:	f640 020d 	movw	r2, #2061	; 0x80d
 800bcbe:	4907      	ldr	r1, [pc, #28]	; (800bcdc <tcp_err+0x3c>)
 800bcc0:	4807      	ldr	r0, [pc, #28]	; (800bce0 <tcp_err+0x40>)
 800bcc2:	f007 fa67 	bl	8013194 <iprintf>
    pcb->errf = err;
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	683a      	ldr	r2, [r7, #0]
 800bcca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800bcce:	bf00      	nop
 800bcd0:	3708      	adds	r7, #8
 800bcd2:	46bd      	mov	sp, r7
 800bcd4:	bd80      	pop	{r7, pc}
 800bcd6:	bf00      	nop
 800bcd8:	08014d00 	.word	0x08014d00
 800bcdc:	080152ec 	.word	0x080152ec
 800bce0:	08014d44 	.word	0x08014d44

0800bce4 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800bce4:	b480      	push	{r7}
 800bce6:	b085      	sub	sp, #20
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	6078      	str	r0, [r7, #4]
 800bcec:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d008      	beq.n	800bd06 <tcp_accept+0x22>
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	7d1b      	ldrb	r3, [r3, #20]
 800bcf8:	2b01      	cmp	r3, #1
 800bcfa:	d104      	bne.n	800bd06 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	683a      	ldr	r2, [r7, #0]
 800bd04:	619a      	str	r2, [r3, #24]
  }
}
 800bd06:	bf00      	nop
 800bd08:	3714      	adds	r7, #20
 800bd0a:	46bd      	mov	sp, r7
 800bd0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd10:	4770      	bx	lr
	...

0800bd14 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800bd14:	b580      	push	{r7, lr}
 800bd16:	b084      	sub	sp, #16
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	60f8      	str	r0, [r7, #12]
 800bd1c:	60b9      	str	r1, [r7, #8]
 800bd1e:	4613      	mov	r3, r2
 800bd20:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d107      	bne.n	800bd38 <tcp_poll+0x24>
 800bd28:	4b0e      	ldr	r3, [pc, #56]	; (800bd64 <tcp_poll+0x50>)
 800bd2a:	f640 023d 	movw	r2, #2109	; 0x83d
 800bd2e:	490e      	ldr	r1, [pc, #56]	; (800bd68 <tcp_poll+0x54>)
 800bd30:	480e      	ldr	r0, [pc, #56]	; (800bd6c <tcp_poll+0x58>)
 800bd32:	f007 fa2f 	bl	8013194 <iprintf>
 800bd36:	e011      	b.n	800bd5c <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	7d1b      	ldrb	r3, [r3, #20]
 800bd3c:	2b01      	cmp	r3, #1
 800bd3e:	d106      	bne.n	800bd4e <tcp_poll+0x3a>
 800bd40:	4b08      	ldr	r3, [pc, #32]	; (800bd64 <tcp_poll+0x50>)
 800bd42:	f640 023e 	movw	r2, #2110	; 0x83e
 800bd46:	490a      	ldr	r1, [pc, #40]	; (800bd70 <tcp_poll+0x5c>)
 800bd48:	4808      	ldr	r0, [pc, #32]	; (800bd6c <tcp_poll+0x58>)
 800bd4a:	f007 fa23 	bl	8013194 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	68ba      	ldr	r2, [r7, #8]
 800bd52:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	79fa      	ldrb	r2, [r7, #7]
 800bd5a:	775a      	strb	r2, [r3, #29]
}
 800bd5c:	3710      	adds	r7, #16
 800bd5e:	46bd      	mov	sp, r7
 800bd60:	bd80      	pop	{r7, pc}
 800bd62:	bf00      	nop
 800bd64:	08014d00 	.word	0x08014d00
 800bd68:	08015314 	.word	0x08015314
 800bd6c:	08014d44 	.word	0x08014d44
 800bd70:	0801532c 	.word	0x0801532c

0800bd74 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800bd74:	b580      	push	{r7, lr}
 800bd76:	b082      	sub	sp, #8
 800bd78:	af00      	add	r7, sp, #0
 800bd7a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d107      	bne.n	800bd92 <tcp_pcb_purge+0x1e>
 800bd82:	4b21      	ldr	r3, [pc, #132]	; (800be08 <tcp_pcb_purge+0x94>)
 800bd84:	f640 0251 	movw	r2, #2129	; 0x851
 800bd88:	4920      	ldr	r1, [pc, #128]	; (800be0c <tcp_pcb_purge+0x98>)
 800bd8a:	4821      	ldr	r0, [pc, #132]	; (800be10 <tcp_pcb_purge+0x9c>)
 800bd8c:	f007 fa02 	bl	8013194 <iprintf>
 800bd90:	e037      	b.n	800be02 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	7d1b      	ldrb	r3, [r3, #20]
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d033      	beq.n	800be02 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800bd9e:	2b0a      	cmp	r3, #10
 800bda0:	d02f      	beq.n	800be02 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800bda6:	2b01      	cmp	r3, #1
 800bda8:	d02b      	beq.n	800be02 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d007      	beq.n	800bdc2 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bdb6:	4618      	mov	r0, r3
 800bdb8:	f7fe f8cc 	bl	8009f54 <pbuf_free>
      pcb->refused_data = NULL;
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	2200      	movs	r2, #0
 800bdc0:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d002      	beq.n	800bdd0 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800bdca:	6878      	ldr	r0, [r7, #4]
 800bdcc:	f000 f986 	bl	800c0dc <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bdd6:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bddc:	4618      	mov	r0, r3
 800bdde:	f7ff fce1 	bl	800b7a4 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bde6:	4618      	mov	r0, r3
 800bde8:	f7ff fcdc 	bl	800b7a4 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	2200      	movs	r2, #0
 800bdf0:	66da      	str	r2, [r3, #108]	; 0x6c
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	2200      	movs	r2, #0
 800bdfe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800be02:	3708      	adds	r7, #8
 800be04:	46bd      	mov	sp, r7
 800be06:	bd80      	pop	{r7, pc}
 800be08:	08014d00 	.word	0x08014d00
 800be0c:	0801534c 	.word	0x0801534c
 800be10:	08014d44 	.word	0x08014d44

0800be14 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800be14:	b580      	push	{r7, lr}
 800be16:	b084      	sub	sp, #16
 800be18:	af00      	add	r7, sp, #0
 800be1a:	6078      	str	r0, [r7, #4]
 800be1c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800be1e:	683b      	ldr	r3, [r7, #0]
 800be20:	2b00      	cmp	r3, #0
 800be22:	d106      	bne.n	800be32 <tcp_pcb_remove+0x1e>
 800be24:	4b3e      	ldr	r3, [pc, #248]	; (800bf20 <tcp_pcb_remove+0x10c>)
 800be26:	f640 0283 	movw	r2, #2179	; 0x883
 800be2a:	493e      	ldr	r1, [pc, #248]	; (800bf24 <tcp_pcb_remove+0x110>)
 800be2c:	483e      	ldr	r0, [pc, #248]	; (800bf28 <tcp_pcb_remove+0x114>)
 800be2e:	f007 f9b1 	bl	8013194 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	2b00      	cmp	r3, #0
 800be36:	d106      	bne.n	800be46 <tcp_pcb_remove+0x32>
 800be38:	4b39      	ldr	r3, [pc, #228]	; (800bf20 <tcp_pcb_remove+0x10c>)
 800be3a:	f640 0284 	movw	r2, #2180	; 0x884
 800be3e:	493b      	ldr	r1, [pc, #236]	; (800bf2c <tcp_pcb_remove+0x118>)
 800be40:	4839      	ldr	r0, [pc, #228]	; (800bf28 <tcp_pcb_remove+0x114>)
 800be42:	f007 f9a7 	bl	8013194 <iprintf>

  TCP_RMV(pcblist, pcb);
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	683a      	ldr	r2, [r7, #0]
 800be4c:	429a      	cmp	r2, r3
 800be4e:	d105      	bne.n	800be5c <tcp_pcb_remove+0x48>
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	68da      	ldr	r2, [r3, #12]
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	601a      	str	r2, [r3, #0]
 800be5a:	e013      	b.n	800be84 <tcp_pcb_remove+0x70>
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	60fb      	str	r3, [r7, #12]
 800be62:	e00c      	b.n	800be7e <tcp_pcb_remove+0x6a>
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	68db      	ldr	r3, [r3, #12]
 800be68:	683a      	ldr	r2, [r7, #0]
 800be6a:	429a      	cmp	r2, r3
 800be6c:	d104      	bne.n	800be78 <tcp_pcb_remove+0x64>
 800be6e:	683b      	ldr	r3, [r7, #0]
 800be70:	68da      	ldr	r2, [r3, #12]
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	60da      	str	r2, [r3, #12]
 800be76:	e005      	b.n	800be84 <tcp_pcb_remove+0x70>
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	68db      	ldr	r3, [r3, #12]
 800be7c:	60fb      	str	r3, [r7, #12]
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	2b00      	cmp	r3, #0
 800be82:	d1ef      	bne.n	800be64 <tcp_pcb_remove+0x50>
 800be84:	683b      	ldr	r3, [r7, #0]
 800be86:	2200      	movs	r2, #0
 800be88:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800be8a:	6838      	ldr	r0, [r7, #0]
 800be8c:	f7ff ff72 	bl	800bd74 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800be90:	683b      	ldr	r3, [r7, #0]
 800be92:	7d1b      	ldrb	r3, [r3, #20]
 800be94:	2b0a      	cmp	r3, #10
 800be96:	d013      	beq.n	800bec0 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800be98:	683b      	ldr	r3, [r7, #0]
 800be9a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800be9c:	2b01      	cmp	r3, #1
 800be9e:	d00f      	beq.n	800bec0 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800bea0:	683b      	ldr	r3, [r7, #0]
 800bea2:	8b5b      	ldrh	r3, [r3, #26]
 800bea4:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d009      	beq.n	800bec0 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800beac:	683b      	ldr	r3, [r7, #0]
 800beae:	8b5b      	ldrh	r3, [r3, #26]
 800beb0:	f043 0302 	orr.w	r3, r3, #2
 800beb4:	b29a      	uxth	r2, r3
 800beb6:	683b      	ldr	r3, [r7, #0]
 800beb8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800beba:	6838      	ldr	r0, [r7, #0]
 800bebc:	f003 fbc2 	bl	800f644 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800bec0:	683b      	ldr	r3, [r7, #0]
 800bec2:	7d1b      	ldrb	r3, [r3, #20]
 800bec4:	2b01      	cmp	r3, #1
 800bec6:	d020      	beq.n	800bf0a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800bec8:	683b      	ldr	r3, [r7, #0]
 800beca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800becc:	2b00      	cmp	r3, #0
 800bece:	d006      	beq.n	800bede <tcp_pcb_remove+0xca>
 800bed0:	4b13      	ldr	r3, [pc, #76]	; (800bf20 <tcp_pcb_remove+0x10c>)
 800bed2:	f640 0293 	movw	r2, #2195	; 0x893
 800bed6:	4916      	ldr	r1, [pc, #88]	; (800bf30 <tcp_pcb_remove+0x11c>)
 800bed8:	4813      	ldr	r0, [pc, #76]	; (800bf28 <tcp_pcb_remove+0x114>)
 800beda:	f007 f95b 	bl	8013194 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800bede:	683b      	ldr	r3, [r7, #0]
 800bee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d006      	beq.n	800bef4 <tcp_pcb_remove+0xe0>
 800bee6:	4b0e      	ldr	r3, [pc, #56]	; (800bf20 <tcp_pcb_remove+0x10c>)
 800bee8:	f640 0294 	movw	r2, #2196	; 0x894
 800beec:	4911      	ldr	r1, [pc, #68]	; (800bf34 <tcp_pcb_remove+0x120>)
 800beee:	480e      	ldr	r0, [pc, #56]	; (800bf28 <tcp_pcb_remove+0x114>)
 800bef0:	f007 f950 	bl	8013194 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800bef4:	683b      	ldr	r3, [r7, #0]
 800bef6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d006      	beq.n	800bf0a <tcp_pcb_remove+0xf6>
 800befc:	4b08      	ldr	r3, [pc, #32]	; (800bf20 <tcp_pcb_remove+0x10c>)
 800befe:	f640 0296 	movw	r2, #2198	; 0x896
 800bf02:	490d      	ldr	r1, [pc, #52]	; (800bf38 <tcp_pcb_remove+0x124>)
 800bf04:	4808      	ldr	r0, [pc, #32]	; (800bf28 <tcp_pcb_remove+0x114>)
 800bf06:	f007 f945 	bl	8013194 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800bf0a:	683b      	ldr	r3, [r7, #0]
 800bf0c:	2200      	movs	r2, #0
 800bf0e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800bf10:	683b      	ldr	r3, [r7, #0]
 800bf12:	2200      	movs	r2, #0
 800bf14:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800bf16:	bf00      	nop
 800bf18:	3710      	adds	r7, #16
 800bf1a:	46bd      	mov	sp, r7
 800bf1c:	bd80      	pop	{r7, pc}
 800bf1e:	bf00      	nop
 800bf20:	08014d00 	.word	0x08014d00
 800bf24:	08015368 	.word	0x08015368
 800bf28:	08014d44 	.word	0x08014d44
 800bf2c:	08015384 	.word	0x08015384
 800bf30:	080153a4 	.word	0x080153a4
 800bf34:	080153bc 	.word	0x080153bc
 800bf38:	080153d8 	.word	0x080153d8

0800bf3c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	b082      	sub	sp, #8
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d106      	bne.n	800bf58 <tcp_next_iss+0x1c>
 800bf4a:	4b0a      	ldr	r3, [pc, #40]	; (800bf74 <tcp_next_iss+0x38>)
 800bf4c:	f640 02af 	movw	r2, #2223	; 0x8af
 800bf50:	4909      	ldr	r1, [pc, #36]	; (800bf78 <tcp_next_iss+0x3c>)
 800bf52:	480a      	ldr	r0, [pc, #40]	; (800bf7c <tcp_next_iss+0x40>)
 800bf54:	f007 f91e 	bl	8013194 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800bf58:	4b09      	ldr	r3, [pc, #36]	; (800bf80 <tcp_next_iss+0x44>)
 800bf5a:	681a      	ldr	r2, [r3, #0]
 800bf5c:	4b09      	ldr	r3, [pc, #36]	; (800bf84 <tcp_next_iss+0x48>)
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	4413      	add	r3, r2
 800bf62:	4a07      	ldr	r2, [pc, #28]	; (800bf80 <tcp_next_iss+0x44>)
 800bf64:	6013      	str	r3, [r2, #0]
  return iss;
 800bf66:	4b06      	ldr	r3, [pc, #24]	; (800bf80 <tcp_next_iss+0x44>)
 800bf68:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	3708      	adds	r7, #8
 800bf6e:	46bd      	mov	sp, r7
 800bf70:	bd80      	pop	{r7, pc}
 800bf72:	bf00      	nop
 800bf74:	08014d00 	.word	0x08014d00
 800bf78:	080153f0 	.word	0x080153f0
 800bf7c:	08014d44 	.word	0x08014d44
 800bf80:	24000028 	.word	0x24000028
 800bf84:	240037d8 	.word	0x240037d8

0800bf88 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800bf88:	b580      	push	{r7, lr}
 800bf8a:	b086      	sub	sp, #24
 800bf8c:	af00      	add	r7, sp, #0
 800bf8e:	4603      	mov	r3, r0
 800bf90:	60b9      	str	r1, [r7, #8]
 800bf92:	607a      	str	r2, [r7, #4]
 800bf94:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d106      	bne.n	800bfaa <tcp_eff_send_mss_netif+0x22>
 800bf9c:	4b14      	ldr	r3, [pc, #80]	; (800bff0 <tcp_eff_send_mss_netif+0x68>)
 800bf9e:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800bfa2:	4914      	ldr	r1, [pc, #80]	; (800bff4 <tcp_eff_send_mss_netif+0x6c>)
 800bfa4:	4814      	ldr	r0, [pc, #80]	; (800bff8 <tcp_eff_send_mss_netif+0x70>)
 800bfa6:	f007 f8f5 	bl	8013194 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800bfaa:	68bb      	ldr	r3, [r7, #8]
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d101      	bne.n	800bfb4 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800bfb0:	89fb      	ldrh	r3, [r7, #14]
 800bfb2:	e019      	b.n	800bfe8 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800bfb4:	68bb      	ldr	r3, [r7, #8]
 800bfb6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800bfb8:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800bfba:	8afb      	ldrh	r3, [r7, #22]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d012      	beq.n	800bfe6 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800bfc0:	2328      	movs	r3, #40	; 0x28
 800bfc2:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800bfc4:	8afa      	ldrh	r2, [r7, #22]
 800bfc6:	8abb      	ldrh	r3, [r7, #20]
 800bfc8:	429a      	cmp	r2, r3
 800bfca:	d904      	bls.n	800bfd6 <tcp_eff_send_mss_netif+0x4e>
 800bfcc:	8afa      	ldrh	r2, [r7, #22]
 800bfce:	8abb      	ldrh	r3, [r7, #20]
 800bfd0:	1ad3      	subs	r3, r2, r3
 800bfd2:	b29b      	uxth	r3, r3
 800bfd4:	e000      	b.n	800bfd8 <tcp_eff_send_mss_netif+0x50>
 800bfd6:	2300      	movs	r3, #0
 800bfd8:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800bfda:	8a7a      	ldrh	r2, [r7, #18]
 800bfdc:	89fb      	ldrh	r3, [r7, #14]
 800bfde:	4293      	cmp	r3, r2
 800bfe0:	bf28      	it	cs
 800bfe2:	4613      	movcs	r3, r2
 800bfe4:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800bfe6:	89fb      	ldrh	r3, [r7, #14]
}
 800bfe8:	4618      	mov	r0, r3
 800bfea:	3718      	adds	r7, #24
 800bfec:	46bd      	mov	sp, r7
 800bfee:	bd80      	pop	{r7, pc}
 800bff0:	08014d00 	.word	0x08014d00
 800bff4:	0801540c 	.word	0x0801540c
 800bff8:	08014d44 	.word	0x08014d44

0800bffc <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800bffc:	b580      	push	{r7, lr}
 800bffe:	b084      	sub	sp, #16
 800c000:	af00      	add	r7, sp, #0
 800c002:	6078      	str	r0, [r7, #4]
 800c004:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800c006:	683b      	ldr	r3, [r7, #0]
 800c008:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d119      	bne.n	800c044 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800c010:	4b10      	ldr	r3, [pc, #64]	; (800c054 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800c012:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800c016:	4910      	ldr	r1, [pc, #64]	; (800c058 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800c018:	4810      	ldr	r0, [pc, #64]	; (800c05c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800c01a:	f007 f8bb 	bl	8013194 <iprintf>

  while (pcb != NULL) {
 800c01e:	e011      	b.n	800c044 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	681a      	ldr	r2, [r3, #0]
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	429a      	cmp	r2, r3
 800c02a:	d108      	bne.n	800c03e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	68db      	ldr	r3, [r3, #12]
 800c030:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800c032:	68f8      	ldr	r0, [r7, #12]
 800c034:	f7fe fd26 	bl	800aa84 <tcp_abort>
      pcb = next;
 800c038:	68bb      	ldr	r3, [r7, #8]
 800c03a:	60fb      	str	r3, [r7, #12]
 800c03c:	e002      	b.n	800c044 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	68db      	ldr	r3, [r3, #12]
 800c042:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	2b00      	cmp	r3, #0
 800c048:	d1ea      	bne.n	800c020 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800c04a:	bf00      	nop
 800c04c:	bf00      	nop
 800c04e:	3710      	adds	r7, #16
 800c050:	46bd      	mov	sp, r7
 800c052:	bd80      	pop	{r7, pc}
 800c054:	08014d00 	.word	0x08014d00
 800c058:	08015434 	.word	0x08015434
 800c05c:	08014d44 	.word	0x08014d44

0800c060 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c060:	b580      	push	{r7, lr}
 800c062:	b084      	sub	sp, #16
 800c064:	af00      	add	r7, sp, #0
 800c066:	6078      	str	r0, [r7, #4]
 800c068:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d02a      	beq.n	800c0c6 <tcp_netif_ip_addr_changed+0x66>
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	2b00      	cmp	r3, #0
 800c076:	d026      	beq.n	800c0c6 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800c078:	4b15      	ldr	r3, [pc, #84]	; (800c0d0 <tcp_netif_ip_addr_changed+0x70>)
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	4619      	mov	r1, r3
 800c07e:	6878      	ldr	r0, [r7, #4]
 800c080:	f7ff ffbc 	bl	800bffc <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800c084:	4b13      	ldr	r3, [pc, #76]	; (800c0d4 <tcp_netif_ip_addr_changed+0x74>)
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	4619      	mov	r1, r3
 800c08a:	6878      	ldr	r0, [r7, #4]
 800c08c:	f7ff ffb6 	bl	800bffc <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800c090:	683b      	ldr	r3, [r7, #0]
 800c092:	2b00      	cmp	r3, #0
 800c094:	d017      	beq.n	800c0c6 <tcp_netif_ip_addr_changed+0x66>
 800c096:	683b      	ldr	r3, [r7, #0]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d013      	beq.n	800c0c6 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c09e:	4b0e      	ldr	r3, [pc, #56]	; (800c0d8 <tcp_netif_ip_addr_changed+0x78>)
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	60fb      	str	r3, [r7, #12]
 800c0a4:	e00c      	b.n	800c0c0 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	681a      	ldr	r2, [r3, #0]
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	429a      	cmp	r2, r3
 800c0b0:	d103      	bne.n	800c0ba <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800c0b2:	683b      	ldr	r3, [r7, #0]
 800c0b4:	681a      	ldr	r2, [r3, #0]
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	68db      	ldr	r3, [r3, #12]
 800c0be:	60fb      	str	r3, [r7, #12]
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d1ef      	bne.n	800c0a6 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800c0c6:	bf00      	nop
 800c0c8:	3710      	adds	r7, #16
 800c0ca:	46bd      	mov	sp, r7
 800c0cc:	bd80      	pop	{r7, pc}
 800c0ce:	bf00      	nop
 800c0d0:	240037d4 	.word	0x240037d4
 800c0d4:	240037e0 	.word	0x240037e0
 800c0d8:	240037dc 	.word	0x240037dc

0800c0dc <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800c0dc:	b580      	push	{r7, lr}
 800c0de:	b082      	sub	sp, #8
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d007      	beq.n	800c0fc <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	f7ff fb57 	bl	800b7a4 <tcp_segs_free>
    pcb->ooseq = NULL;
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	2200      	movs	r2, #0
 800c0fa:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800c0fc:	bf00      	nop
 800c0fe:	3708      	adds	r7, #8
 800c100:	46bd      	mov	sp, r7
 800c102:	bd80      	pop	{r7, pc}

0800c104 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800c104:	b590      	push	{r4, r7, lr}
 800c106:	b08d      	sub	sp, #52	; 0x34
 800c108:	af04      	add	r7, sp, #16
 800c10a:	6078      	str	r0, [r7, #4]
 800c10c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	2b00      	cmp	r3, #0
 800c112:	d105      	bne.n	800c120 <tcp_input+0x1c>
 800c114:	4b9b      	ldr	r3, [pc, #620]	; (800c384 <tcp_input+0x280>)
 800c116:	2283      	movs	r2, #131	; 0x83
 800c118:	499b      	ldr	r1, [pc, #620]	; (800c388 <tcp_input+0x284>)
 800c11a:	489c      	ldr	r0, [pc, #624]	; (800c38c <tcp_input+0x288>)
 800c11c:	f007 f83a 	bl	8013194 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	685b      	ldr	r3, [r3, #4]
 800c124:	4a9a      	ldr	r2, [pc, #616]	; (800c390 <tcp_input+0x28c>)
 800c126:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	895b      	ldrh	r3, [r3, #10]
 800c12c:	2b13      	cmp	r3, #19
 800c12e:	f240 83c4 	bls.w	800c8ba <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800c132:	4b98      	ldr	r3, [pc, #608]	; (800c394 <tcp_input+0x290>)
 800c134:	695b      	ldr	r3, [r3, #20]
 800c136:	4a97      	ldr	r2, [pc, #604]	; (800c394 <tcp_input+0x290>)
 800c138:	6812      	ldr	r2, [r2, #0]
 800c13a:	4611      	mov	r1, r2
 800c13c:	4618      	mov	r0, r3
 800c13e:	f006 f891 	bl	8012264 <ip4_addr_isbroadcast_u32>
 800c142:	4603      	mov	r3, r0
 800c144:	2b00      	cmp	r3, #0
 800c146:	f040 83ba 	bne.w	800c8be <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800c14a:	4b92      	ldr	r3, [pc, #584]	; (800c394 <tcp_input+0x290>)
 800c14c:	695b      	ldr	r3, [r3, #20]
 800c14e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800c152:	2be0      	cmp	r3, #224	; 0xe0
 800c154:	f000 83b3 	beq.w	800c8be <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800c158:	4b8d      	ldr	r3, [pc, #564]	; (800c390 <tcp_input+0x28c>)
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	899b      	ldrh	r3, [r3, #12]
 800c15e:	b29b      	uxth	r3, r3
 800c160:	4618      	mov	r0, r3
 800c162:	f7fc fad1 	bl	8008708 <lwip_htons>
 800c166:	4603      	mov	r3, r0
 800c168:	0b1b      	lsrs	r3, r3, #12
 800c16a:	b29b      	uxth	r3, r3
 800c16c:	b2db      	uxtb	r3, r3
 800c16e:	009b      	lsls	r3, r3, #2
 800c170:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800c172:	7cbb      	ldrb	r3, [r7, #18]
 800c174:	2b13      	cmp	r3, #19
 800c176:	f240 83a4 	bls.w	800c8c2 <tcp_input+0x7be>
 800c17a:	7cbb      	ldrb	r3, [r7, #18]
 800c17c:	b29a      	uxth	r2, r3
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	891b      	ldrh	r3, [r3, #8]
 800c182:	429a      	cmp	r2, r3
 800c184:	f200 839d 	bhi.w	800c8c2 <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800c188:	7cbb      	ldrb	r3, [r7, #18]
 800c18a:	b29b      	uxth	r3, r3
 800c18c:	3b14      	subs	r3, #20
 800c18e:	b29a      	uxth	r2, r3
 800c190:	4b81      	ldr	r3, [pc, #516]	; (800c398 <tcp_input+0x294>)
 800c192:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800c194:	4b81      	ldr	r3, [pc, #516]	; (800c39c <tcp_input+0x298>)
 800c196:	2200      	movs	r2, #0
 800c198:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	895a      	ldrh	r2, [r3, #10]
 800c19e:	7cbb      	ldrb	r3, [r7, #18]
 800c1a0:	b29b      	uxth	r3, r3
 800c1a2:	429a      	cmp	r2, r3
 800c1a4:	d309      	bcc.n	800c1ba <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800c1a6:	4b7c      	ldr	r3, [pc, #496]	; (800c398 <tcp_input+0x294>)
 800c1a8:	881a      	ldrh	r2, [r3, #0]
 800c1aa:	4b7d      	ldr	r3, [pc, #500]	; (800c3a0 <tcp_input+0x29c>)
 800c1ac:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800c1ae:	7cbb      	ldrb	r3, [r7, #18]
 800c1b0:	4619      	mov	r1, r3
 800c1b2:	6878      	ldr	r0, [r7, #4]
 800c1b4:	f7fd fe48 	bl	8009e48 <pbuf_remove_header>
 800c1b8:	e04e      	b.n	800c258 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d105      	bne.n	800c1ce <tcp_input+0xca>
 800c1c2:	4b70      	ldr	r3, [pc, #448]	; (800c384 <tcp_input+0x280>)
 800c1c4:	22c2      	movs	r2, #194	; 0xc2
 800c1c6:	4977      	ldr	r1, [pc, #476]	; (800c3a4 <tcp_input+0x2a0>)
 800c1c8:	4870      	ldr	r0, [pc, #448]	; (800c38c <tcp_input+0x288>)
 800c1ca:	f006 ffe3 	bl	8013194 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800c1ce:	2114      	movs	r1, #20
 800c1d0:	6878      	ldr	r0, [r7, #4]
 800c1d2:	f7fd fe39 	bl	8009e48 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	895a      	ldrh	r2, [r3, #10]
 800c1da:	4b71      	ldr	r3, [pc, #452]	; (800c3a0 <tcp_input+0x29c>)
 800c1dc:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800c1de:	4b6e      	ldr	r3, [pc, #440]	; (800c398 <tcp_input+0x294>)
 800c1e0:	881a      	ldrh	r2, [r3, #0]
 800c1e2:	4b6f      	ldr	r3, [pc, #444]	; (800c3a0 <tcp_input+0x29c>)
 800c1e4:	881b      	ldrh	r3, [r3, #0]
 800c1e6:	1ad3      	subs	r3, r2, r3
 800c1e8:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800c1ea:	4b6d      	ldr	r3, [pc, #436]	; (800c3a0 <tcp_input+0x29c>)
 800c1ec:	881b      	ldrh	r3, [r3, #0]
 800c1ee:	4619      	mov	r1, r3
 800c1f0:	6878      	ldr	r0, [r7, #4]
 800c1f2:	f7fd fe29 	bl	8009e48 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	895b      	ldrh	r3, [r3, #10]
 800c1fc:	8a3a      	ldrh	r2, [r7, #16]
 800c1fe:	429a      	cmp	r2, r3
 800c200:	f200 8361 	bhi.w	800c8c6 <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	685b      	ldr	r3, [r3, #4]
 800c20a:	4a64      	ldr	r2, [pc, #400]	; (800c39c <tcp_input+0x298>)
 800c20c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	8a3a      	ldrh	r2, [r7, #16]
 800c214:	4611      	mov	r1, r2
 800c216:	4618      	mov	r0, r3
 800c218:	f7fd fe16 	bl	8009e48 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	891a      	ldrh	r2, [r3, #8]
 800c220:	8a3b      	ldrh	r3, [r7, #16]
 800c222:	1ad3      	subs	r3, r2, r3
 800c224:	b29a      	uxth	r2, r3
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	895b      	ldrh	r3, [r3, #10]
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d005      	beq.n	800c23e <tcp_input+0x13a>
 800c232:	4b54      	ldr	r3, [pc, #336]	; (800c384 <tcp_input+0x280>)
 800c234:	22df      	movs	r2, #223	; 0xdf
 800c236:	495c      	ldr	r1, [pc, #368]	; (800c3a8 <tcp_input+0x2a4>)
 800c238:	4854      	ldr	r0, [pc, #336]	; (800c38c <tcp_input+0x288>)
 800c23a:	f006 ffab 	bl	8013194 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	891a      	ldrh	r2, [r3, #8]
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	891b      	ldrh	r3, [r3, #8]
 800c248:	429a      	cmp	r2, r3
 800c24a:	d005      	beq.n	800c258 <tcp_input+0x154>
 800c24c:	4b4d      	ldr	r3, [pc, #308]	; (800c384 <tcp_input+0x280>)
 800c24e:	22e0      	movs	r2, #224	; 0xe0
 800c250:	4956      	ldr	r1, [pc, #344]	; (800c3ac <tcp_input+0x2a8>)
 800c252:	484e      	ldr	r0, [pc, #312]	; (800c38c <tcp_input+0x288>)
 800c254:	f006 ff9e 	bl	8013194 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800c258:	4b4d      	ldr	r3, [pc, #308]	; (800c390 <tcp_input+0x28c>)
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	881b      	ldrh	r3, [r3, #0]
 800c25e:	b29b      	uxth	r3, r3
 800c260:	4a4b      	ldr	r2, [pc, #300]	; (800c390 <tcp_input+0x28c>)
 800c262:	6814      	ldr	r4, [r2, #0]
 800c264:	4618      	mov	r0, r3
 800c266:	f7fc fa4f 	bl	8008708 <lwip_htons>
 800c26a:	4603      	mov	r3, r0
 800c26c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800c26e:	4b48      	ldr	r3, [pc, #288]	; (800c390 <tcp_input+0x28c>)
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	885b      	ldrh	r3, [r3, #2]
 800c274:	b29b      	uxth	r3, r3
 800c276:	4a46      	ldr	r2, [pc, #280]	; (800c390 <tcp_input+0x28c>)
 800c278:	6814      	ldr	r4, [r2, #0]
 800c27a:	4618      	mov	r0, r3
 800c27c:	f7fc fa44 	bl	8008708 <lwip_htons>
 800c280:	4603      	mov	r3, r0
 800c282:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800c284:	4b42      	ldr	r3, [pc, #264]	; (800c390 <tcp_input+0x28c>)
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	685b      	ldr	r3, [r3, #4]
 800c28a:	4a41      	ldr	r2, [pc, #260]	; (800c390 <tcp_input+0x28c>)
 800c28c:	6814      	ldr	r4, [r2, #0]
 800c28e:	4618      	mov	r0, r3
 800c290:	f7fc fa4f 	bl	8008732 <lwip_htonl>
 800c294:	4603      	mov	r3, r0
 800c296:	6063      	str	r3, [r4, #4]
 800c298:	6863      	ldr	r3, [r4, #4]
 800c29a:	4a45      	ldr	r2, [pc, #276]	; (800c3b0 <tcp_input+0x2ac>)
 800c29c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800c29e:	4b3c      	ldr	r3, [pc, #240]	; (800c390 <tcp_input+0x28c>)
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	689b      	ldr	r3, [r3, #8]
 800c2a4:	4a3a      	ldr	r2, [pc, #232]	; (800c390 <tcp_input+0x28c>)
 800c2a6:	6814      	ldr	r4, [r2, #0]
 800c2a8:	4618      	mov	r0, r3
 800c2aa:	f7fc fa42 	bl	8008732 <lwip_htonl>
 800c2ae:	4603      	mov	r3, r0
 800c2b0:	60a3      	str	r3, [r4, #8]
 800c2b2:	68a3      	ldr	r3, [r4, #8]
 800c2b4:	4a3f      	ldr	r2, [pc, #252]	; (800c3b4 <tcp_input+0x2b0>)
 800c2b6:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800c2b8:	4b35      	ldr	r3, [pc, #212]	; (800c390 <tcp_input+0x28c>)
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	89db      	ldrh	r3, [r3, #14]
 800c2be:	b29b      	uxth	r3, r3
 800c2c0:	4a33      	ldr	r2, [pc, #204]	; (800c390 <tcp_input+0x28c>)
 800c2c2:	6814      	ldr	r4, [r2, #0]
 800c2c4:	4618      	mov	r0, r3
 800c2c6:	f7fc fa1f 	bl	8008708 <lwip_htons>
 800c2ca:	4603      	mov	r3, r0
 800c2cc:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800c2ce:	4b30      	ldr	r3, [pc, #192]	; (800c390 <tcp_input+0x28c>)
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	899b      	ldrh	r3, [r3, #12]
 800c2d4:	b29b      	uxth	r3, r3
 800c2d6:	4618      	mov	r0, r3
 800c2d8:	f7fc fa16 	bl	8008708 <lwip_htons>
 800c2dc:	4603      	mov	r3, r0
 800c2de:	b2db      	uxtb	r3, r3
 800c2e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c2e4:	b2da      	uxtb	r2, r3
 800c2e6:	4b34      	ldr	r3, [pc, #208]	; (800c3b8 <tcp_input+0x2b4>)
 800c2e8:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	891a      	ldrh	r2, [r3, #8]
 800c2ee:	4b33      	ldr	r3, [pc, #204]	; (800c3bc <tcp_input+0x2b8>)
 800c2f0:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800c2f2:	4b31      	ldr	r3, [pc, #196]	; (800c3b8 <tcp_input+0x2b4>)
 800c2f4:	781b      	ldrb	r3, [r3, #0]
 800c2f6:	f003 0303 	and.w	r3, r3, #3
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d00c      	beq.n	800c318 <tcp_input+0x214>
    tcplen++;
 800c2fe:	4b2f      	ldr	r3, [pc, #188]	; (800c3bc <tcp_input+0x2b8>)
 800c300:	881b      	ldrh	r3, [r3, #0]
 800c302:	3301      	adds	r3, #1
 800c304:	b29a      	uxth	r2, r3
 800c306:	4b2d      	ldr	r3, [pc, #180]	; (800c3bc <tcp_input+0x2b8>)
 800c308:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	891a      	ldrh	r2, [r3, #8]
 800c30e:	4b2b      	ldr	r3, [pc, #172]	; (800c3bc <tcp_input+0x2b8>)
 800c310:	881b      	ldrh	r3, [r3, #0]
 800c312:	429a      	cmp	r2, r3
 800c314:	f200 82d9 	bhi.w	800c8ca <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800c318:	2300      	movs	r3, #0
 800c31a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c31c:	4b28      	ldr	r3, [pc, #160]	; (800c3c0 <tcp_input+0x2bc>)
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	61fb      	str	r3, [r7, #28]
 800c322:	e09d      	b.n	800c460 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800c324:	69fb      	ldr	r3, [r7, #28]
 800c326:	7d1b      	ldrb	r3, [r3, #20]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d105      	bne.n	800c338 <tcp_input+0x234>
 800c32c:	4b15      	ldr	r3, [pc, #84]	; (800c384 <tcp_input+0x280>)
 800c32e:	22fb      	movs	r2, #251	; 0xfb
 800c330:	4924      	ldr	r1, [pc, #144]	; (800c3c4 <tcp_input+0x2c0>)
 800c332:	4816      	ldr	r0, [pc, #88]	; (800c38c <tcp_input+0x288>)
 800c334:	f006 ff2e 	bl	8013194 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800c338:	69fb      	ldr	r3, [r7, #28]
 800c33a:	7d1b      	ldrb	r3, [r3, #20]
 800c33c:	2b0a      	cmp	r3, #10
 800c33e:	d105      	bne.n	800c34c <tcp_input+0x248>
 800c340:	4b10      	ldr	r3, [pc, #64]	; (800c384 <tcp_input+0x280>)
 800c342:	22fc      	movs	r2, #252	; 0xfc
 800c344:	4920      	ldr	r1, [pc, #128]	; (800c3c8 <tcp_input+0x2c4>)
 800c346:	4811      	ldr	r0, [pc, #68]	; (800c38c <tcp_input+0x288>)
 800c348:	f006 ff24 	bl	8013194 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800c34c:	69fb      	ldr	r3, [r7, #28]
 800c34e:	7d1b      	ldrb	r3, [r3, #20]
 800c350:	2b01      	cmp	r3, #1
 800c352:	d105      	bne.n	800c360 <tcp_input+0x25c>
 800c354:	4b0b      	ldr	r3, [pc, #44]	; (800c384 <tcp_input+0x280>)
 800c356:	22fd      	movs	r2, #253	; 0xfd
 800c358:	491c      	ldr	r1, [pc, #112]	; (800c3cc <tcp_input+0x2c8>)
 800c35a:	480c      	ldr	r0, [pc, #48]	; (800c38c <tcp_input+0x288>)
 800c35c:	f006 ff1a 	bl	8013194 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c360:	69fb      	ldr	r3, [r7, #28]
 800c362:	7a1b      	ldrb	r3, [r3, #8]
 800c364:	2b00      	cmp	r3, #0
 800c366:	d033      	beq.n	800c3d0 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c368:	69fb      	ldr	r3, [r7, #28]
 800c36a:	7a1a      	ldrb	r2, [r3, #8]
 800c36c:	4b09      	ldr	r3, [pc, #36]	; (800c394 <tcp_input+0x290>)
 800c36e:	685b      	ldr	r3, [r3, #4]
 800c370:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c374:	3301      	adds	r3, #1
 800c376:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c378:	429a      	cmp	r2, r3
 800c37a:	d029      	beq.n	800c3d0 <tcp_input+0x2cc>
      prev = pcb;
 800c37c:	69fb      	ldr	r3, [r7, #28]
 800c37e:	61bb      	str	r3, [r7, #24]
      continue;
 800c380:	e06b      	b.n	800c45a <tcp_input+0x356>
 800c382:	bf00      	nop
 800c384:	08015468 	.word	0x08015468
 800c388:	0801549c 	.word	0x0801549c
 800c38c:	080154b4 	.word	0x080154b4
 800c390:	24000100 	.word	0x24000100
 800c394:	240008e4 	.word	0x240008e4
 800c398:	24000104 	.word	0x24000104
 800c39c:	24000108 	.word	0x24000108
 800c3a0:	24000106 	.word	0x24000106
 800c3a4:	080154dc 	.word	0x080154dc
 800c3a8:	080154ec 	.word	0x080154ec
 800c3ac:	080154f8 	.word	0x080154f8
 800c3b0:	24000110 	.word	0x24000110
 800c3b4:	24000114 	.word	0x24000114
 800c3b8:	2400011c 	.word	0x2400011c
 800c3bc:	2400011a 	.word	0x2400011a
 800c3c0:	240037d4 	.word	0x240037d4
 800c3c4:	08015518 	.word	0x08015518
 800c3c8:	08015540 	.word	0x08015540
 800c3cc:	0801556c 	.word	0x0801556c
    }

    if (pcb->remote_port == tcphdr->src &&
 800c3d0:	69fb      	ldr	r3, [r7, #28]
 800c3d2:	8b1a      	ldrh	r2, [r3, #24]
 800c3d4:	4b94      	ldr	r3, [pc, #592]	; (800c628 <tcp_input+0x524>)
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	881b      	ldrh	r3, [r3, #0]
 800c3da:	b29b      	uxth	r3, r3
 800c3dc:	429a      	cmp	r2, r3
 800c3de:	d13a      	bne.n	800c456 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800c3e0:	69fb      	ldr	r3, [r7, #28]
 800c3e2:	8ada      	ldrh	r2, [r3, #22]
 800c3e4:	4b90      	ldr	r3, [pc, #576]	; (800c628 <tcp_input+0x524>)
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	885b      	ldrh	r3, [r3, #2]
 800c3ea:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800c3ec:	429a      	cmp	r2, r3
 800c3ee:	d132      	bne.n	800c456 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c3f0:	69fb      	ldr	r3, [r7, #28]
 800c3f2:	685a      	ldr	r2, [r3, #4]
 800c3f4:	4b8d      	ldr	r3, [pc, #564]	; (800c62c <tcp_input+0x528>)
 800c3f6:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800c3f8:	429a      	cmp	r2, r3
 800c3fa:	d12c      	bne.n	800c456 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800c3fc:	69fb      	ldr	r3, [r7, #28]
 800c3fe:	681a      	ldr	r2, [r3, #0]
 800c400:	4b8a      	ldr	r3, [pc, #552]	; (800c62c <tcp_input+0x528>)
 800c402:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c404:	429a      	cmp	r2, r3
 800c406:	d126      	bne.n	800c456 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800c408:	69fb      	ldr	r3, [r7, #28]
 800c40a:	68db      	ldr	r3, [r3, #12]
 800c40c:	69fa      	ldr	r2, [r7, #28]
 800c40e:	429a      	cmp	r2, r3
 800c410:	d106      	bne.n	800c420 <tcp_input+0x31c>
 800c412:	4b87      	ldr	r3, [pc, #540]	; (800c630 <tcp_input+0x52c>)
 800c414:	f240 120d 	movw	r2, #269	; 0x10d
 800c418:	4986      	ldr	r1, [pc, #536]	; (800c634 <tcp_input+0x530>)
 800c41a:	4887      	ldr	r0, [pc, #540]	; (800c638 <tcp_input+0x534>)
 800c41c:	f006 feba 	bl	8013194 <iprintf>
      if (prev != NULL) {
 800c420:	69bb      	ldr	r3, [r7, #24]
 800c422:	2b00      	cmp	r3, #0
 800c424:	d00a      	beq.n	800c43c <tcp_input+0x338>
        prev->next = pcb->next;
 800c426:	69fb      	ldr	r3, [r7, #28]
 800c428:	68da      	ldr	r2, [r3, #12]
 800c42a:	69bb      	ldr	r3, [r7, #24]
 800c42c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800c42e:	4b83      	ldr	r3, [pc, #524]	; (800c63c <tcp_input+0x538>)
 800c430:	681a      	ldr	r2, [r3, #0]
 800c432:	69fb      	ldr	r3, [r7, #28]
 800c434:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800c436:	4a81      	ldr	r2, [pc, #516]	; (800c63c <tcp_input+0x538>)
 800c438:	69fb      	ldr	r3, [r7, #28]
 800c43a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800c43c:	69fb      	ldr	r3, [r7, #28]
 800c43e:	68db      	ldr	r3, [r3, #12]
 800c440:	69fa      	ldr	r2, [r7, #28]
 800c442:	429a      	cmp	r2, r3
 800c444:	d111      	bne.n	800c46a <tcp_input+0x366>
 800c446:	4b7a      	ldr	r3, [pc, #488]	; (800c630 <tcp_input+0x52c>)
 800c448:	f240 1215 	movw	r2, #277	; 0x115
 800c44c:	497c      	ldr	r1, [pc, #496]	; (800c640 <tcp_input+0x53c>)
 800c44e:	487a      	ldr	r0, [pc, #488]	; (800c638 <tcp_input+0x534>)
 800c450:	f006 fea0 	bl	8013194 <iprintf>
      break;
 800c454:	e009      	b.n	800c46a <tcp_input+0x366>
    }
    prev = pcb;
 800c456:	69fb      	ldr	r3, [r7, #28]
 800c458:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c45a:	69fb      	ldr	r3, [r7, #28]
 800c45c:	68db      	ldr	r3, [r3, #12]
 800c45e:	61fb      	str	r3, [r7, #28]
 800c460:	69fb      	ldr	r3, [r7, #28]
 800c462:	2b00      	cmp	r3, #0
 800c464:	f47f af5e 	bne.w	800c324 <tcp_input+0x220>
 800c468:	e000      	b.n	800c46c <tcp_input+0x368>
      break;
 800c46a:	bf00      	nop
  }

  if (pcb == NULL) {
 800c46c:	69fb      	ldr	r3, [r7, #28]
 800c46e:	2b00      	cmp	r3, #0
 800c470:	f040 8095 	bne.w	800c59e <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c474:	4b73      	ldr	r3, [pc, #460]	; (800c644 <tcp_input+0x540>)
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	61fb      	str	r3, [r7, #28]
 800c47a:	e03f      	b.n	800c4fc <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800c47c:	69fb      	ldr	r3, [r7, #28]
 800c47e:	7d1b      	ldrb	r3, [r3, #20]
 800c480:	2b0a      	cmp	r3, #10
 800c482:	d006      	beq.n	800c492 <tcp_input+0x38e>
 800c484:	4b6a      	ldr	r3, [pc, #424]	; (800c630 <tcp_input+0x52c>)
 800c486:	f240 121f 	movw	r2, #287	; 0x11f
 800c48a:	496f      	ldr	r1, [pc, #444]	; (800c648 <tcp_input+0x544>)
 800c48c:	486a      	ldr	r0, [pc, #424]	; (800c638 <tcp_input+0x534>)
 800c48e:	f006 fe81 	bl	8013194 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c492:	69fb      	ldr	r3, [r7, #28]
 800c494:	7a1b      	ldrb	r3, [r3, #8]
 800c496:	2b00      	cmp	r3, #0
 800c498:	d009      	beq.n	800c4ae <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c49a:	69fb      	ldr	r3, [r7, #28]
 800c49c:	7a1a      	ldrb	r2, [r3, #8]
 800c49e:	4b63      	ldr	r3, [pc, #396]	; (800c62c <tcp_input+0x528>)
 800c4a0:	685b      	ldr	r3, [r3, #4]
 800c4a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c4a6:	3301      	adds	r3, #1
 800c4a8:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c4aa:	429a      	cmp	r2, r3
 800c4ac:	d122      	bne.n	800c4f4 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800c4ae:	69fb      	ldr	r3, [r7, #28]
 800c4b0:	8b1a      	ldrh	r2, [r3, #24]
 800c4b2:	4b5d      	ldr	r3, [pc, #372]	; (800c628 <tcp_input+0x524>)
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	881b      	ldrh	r3, [r3, #0]
 800c4b8:	b29b      	uxth	r3, r3
 800c4ba:	429a      	cmp	r2, r3
 800c4bc:	d11b      	bne.n	800c4f6 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800c4be:	69fb      	ldr	r3, [r7, #28]
 800c4c0:	8ada      	ldrh	r2, [r3, #22]
 800c4c2:	4b59      	ldr	r3, [pc, #356]	; (800c628 <tcp_input+0x524>)
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	885b      	ldrh	r3, [r3, #2]
 800c4c8:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800c4ca:	429a      	cmp	r2, r3
 800c4cc:	d113      	bne.n	800c4f6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c4ce:	69fb      	ldr	r3, [r7, #28]
 800c4d0:	685a      	ldr	r2, [r3, #4]
 800c4d2:	4b56      	ldr	r3, [pc, #344]	; (800c62c <tcp_input+0x528>)
 800c4d4:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800c4d6:	429a      	cmp	r2, r3
 800c4d8:	d10d      	bne.n	800c4f6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800c4da:	69fb      	ldr	r3, [r7, #28]
 800c4dc:	681a      	ldr	r2, [r3, #0]
 800c4de:	4b53      	ldr	r3, [pc, #332]	; (800c62c <tcp_input+0x528>)
 800c4e0:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c4e2:	429a      	cmp	r2, r3
 800c4e4:	d107      	bne.n	800c4f6 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800c4e6:	69f8      	ldr	r0, [r7, #28]
 800c4e8:	f000 fb54 	bl	800cb94 <tcp_timewait_input>
        }
        pbuf_free(p);
 800c4ec:	6878      	ldr	r0, [r7, #4]
 800c4ee:	f7fd fd31 	bl	8009f54 <pbuf_free>
        return;
 800c4f2:	e1f0      	b.n	800c8d6 <tcp_input+0x7d2>
        continue;
 800c4f4:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c4f6:	69fb      	ldr	r3, [r7, #28]
 800c4f8:	68db      	ldr	r3, [r3, #12]
 800c4fa:	61fb      	str	r3, [r7, #28]
 800c4fc:	69fb      	ldr	r3, [r7, #28]
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d1bc      	bne.n	800c47c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800c502:	2300      	movs	r3, #0
 800c504:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c506:	4b51      	ldr	r3, [pc, #324]	; (800c64c <tcp_input+0x548>)
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	617b      	str	r3, [r7, #20]
 800c50c:	e02a      	b.n	800c564 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800c50e:	697b      	ldr	r3, [r7, #20]
 800c510:	7a1b      	ldrb	r3, [r3, #8]
 800c512:	2b00      	cmp	r3, #0
 800c514:	d00c      	beq.n	800c530 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c516:	697b      	ldr	r3, [r7, #20]
 800c518:	7a1a      	ldrb	r2, [r3, #8]
 800c51a:	4b44      	ldr	r3, [pc, #272]	; (800c62c <tcp_input+0x528>)
 800c51c:	685b      	ldr	r3, [r3, #4]
 800c51e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c522:	3301      	adds	r3, #1
 800c524:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800c526:	429a      	cmp	r2, r3
 800c528:	d002      	beq.n	800c530 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800c52a:	697b      	ldr	r3, [r7, #20]
 800c52c:	61bb      	str	r3, [r7, #24]
        continue;
 800c52e:	e016      	b.n	800c55e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800c530:	697b      	ldr	r3, [r7, #20]
 800c532:	8ada      	ldrh	r2, [r3, #22]
 800c534:	4b3c      	ldr	r3, [pc, #240]	; (800c628 <tcp_input+0x524>)
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	885b      	ldrh	r3, [r3, #2]
 800c53a:	b29b      	uxth	r3, r3
 800c53c:	429a      	cmp	r2, r3
 800c53e:	d10c      	bne.n	800c55a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800c540:	697b      	ldr	r3, [r7, #20]
 800c542:	681a      	ldr	r2, [r3, #0]
 800c544:	4b39      	ldr	r3, [pc, #228]	; (800c62c <tcp_input+0x528>)
 800c546:	695b      	ldr	r3, [r3, #20]
 800c548:	429a      	cmp	r2, r3
 800c54a:	d00f      	beq.n	800c56c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800c54c:	697b      	ldr	r3, [r7, #20]
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d00d      	beq.n	800c56e <tcp_input+0x46a>
 800c552:	697b      	ldr	r3, [r7, #20]
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	2b00      	cmp	r3, #0
 800c558:	d009      	beq.n	800c56e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800c55a:	697b      	ldr	r3, [r7, #20]
 800c55c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c55e:	697b      	ldr	r3, [r7, #20]
 800c560:	68db      	ldr	r3, [r3, #12]
 800c562:	617b      	str	r3, [r7, #20]
 800c564:	697b      	ldr	r3, [r7, #20]
 800c566:	2b00      	cmp	r3, #0
 800c568:	d1d1      	bne.n	800c50e <tcp_input+0x40a>
 800c56a:	e000      	b.n	800c56e <tcp_input+0x46a>
            break;
 800c56c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800c56e:	697b      	ldr	r3, [r7, #20]
 800c570:	2b00      	cmp	r3, #0
 800c572:	d014      	beq.n	800c59e <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800c574:	69bb      	ldr	r3, [r7, #24]
 800c576:	2b00      	cmp	r3, #0
 800c578:	d00a      	beq.n	800c590 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800c57a:	697b      	ldr	r3, [r7, #20]
 800c57c:	68da      	ldr	r2, [r3, #12]
 800c57e:	69bb      	ldr	r3, [r7, #24]
 800c580:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800c582:	4b32      	ldr	r3, [pc, #200]	; (800c64c <tcp_input+0x548>)
 800c584:	681a      	ldr	r2, [r3, #0]
 800c586:	697b      	ldr	r3, [r7, #20]
 800c588:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800c58a:	4a30      	ldr	r2, [pc, #192]	; (800c64c <tcp_input+0x548>)
 800c58c:	697b      	ldr	r3, [r7, #20]
 800c58e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800c590:	6978      	ldr	r0, [r7, #20]
 800c592:	f000 fa01 	bl	800c998 <tcp_listen_input>
      }
      pbuf_free(p);
 800c596:	6878      	ldr	r0, [r7, #4]
 800c598:	f7fd fcdc 	bl	8009f54 <pbuf_free>
      return;
 800c59c:	e19b      	b.n	800c8d6 <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800c59e:	69fb      	ldr	r3, [r7, #28]
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	f000 8160 	beq.w	800c866 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800c5a6:	4b2a      	ldr	r3, [pc, #168]	; (800c650 <tcp_input+0x54c>)
 800c5a8:	2200      	movs	r2, #0
 800c5aa:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	891a      	ldrh	r2, [r3, #8]
 800c5b0:	4b27      	ldr	r3, [pc, #156]	; (800c650 <tcp_input+0x54c>)
 800c5b2:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800c5b4:	4a26      	ldr	r2, [pc, #152]	; (800c650 <tcp_input+0x54c>)
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800c5ba:	4b1b      	ldr	r3, [pc, #108]	; (800c628 <tcp_input+0x524>)
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	4a24      	ldr	r2, [pc, #144]	; (800c650 <tcp_input+0x54c>)
 800c5c0:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800c5c2:	4b24      	ldr	r3, [pc, #144]	; (800c654 <tcp_input+0x550>)
 800c5c4:	2200      	movs	r2, #0
 800c5c6:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800c5c8:	4b23      	ldr	r3, [pc, #140]	; (800c658 <tcp_input+0x554>)
 800c5ca:	2200      	movs	r2, #0
 800c5cc:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800c5ce:	4b23      	ldr	r3, [pc, #140]	; (800c65c <tcp_input+0x558>)
 800c5d0:	2200      	movs	r2, #0
 800c5d2:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800c5d4:	4b22      	ldr	r3, [pc, #136]	; (800c660 <tcp_input+0x55c>)
 800c5d6:	781b      	ldrb	r3, [r3, #0]
 800c5d8:	f003 0308 	and.w	r3, r3, #8
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d006      	beq.n	800c5ee <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	7b5b      	ldrb	r3, [r3, #13]
 800c5e4:	f043 0301 	orr.w	r3, r3, #1
 800c5e8:	b2da      	uxtb	r2, r3
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800c5ee:	69fb      	ldr	r3, [r7, #28]
 800c5f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d038      	beq.n	800c668 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800c5f6:	69f8      	ldr	r0, [r7, #28]
 800c5f8:	f7ff f858 	bl	800b6ac <tcp_process_refused_data>
 800c5fc:	4603      	mov	r3, r0
 800c5fe:	f113 0f0d 	cmn.w	r3, #13
 800c602:	d007      	beq.n	800c614 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800c604:	69fb      	ldr	r3, [r7, #28]
 800c606:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d02d      	beq.n	800c668 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800c60c:	4b15      	ldr	r3, [pc, #84]	; (800c664 <tcp_input+0x560>)
 800c60e:	881b      	ldrh	r3, [r3, #0]
 800c610:	2b00      	cmp	r3, #0
 800c612:	d029      	beq.n	800c668 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800c614:	69fb      	ldr	r3, [r7, #28]
 800c616:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c618:	2b00      	cmp	r3, #0
 800c61a:	f040 8104 	bne.w	800c826 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800c61e:	69f8      	ldr	r0, [r7, #28]
 800c620:	f003 fe16 	bl	8010250 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800c624:	e0ff      	b.n	800c826 <tcp_input+0x722>
 800c626:	bf00      	nop
 800c628:	24000100 	.word	0x24000100
 800c62c:	240008e4 	.word	0x240008e4
 800c630:	08015468 	.word	0x08015468
 800c634:	08015594 	.word	0x08015594
 800c638:	080154b4 	.word	0x080154b4
 800c63c:	240037d4 	.word	0x240037d4
 800c640:	080155c0 	.word	0x080155c0
 800c644:	240037e4 	.word	0x240037e4
 800c648:	080155ec 	.word	0x080155ec
 800c64c:	240037dc 	.word	0x240037dc
 800c650:	240000f0 	.word	0x240000f0
 800c654:	24000120 	.word	0x24000120
 800c658:	2400011d 	.word	0x2400011d
 800c65c:	24000118 	.word	0x24000118
 800c660:	2400011c 	.word	0x2400011c
 800c664:	2400011a 	.word	0x2400011a
      }
    }
    tcp_input_pcb = pcb;
 800c668:	4a9c      	ldr	r2, [pc, #624]	; (800c8dc <tcp_input+0x7d8>)
 800c66a:	69fb      	ldr	r3, [r7, #28]
 800c66c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800c66e:	69f8      	ldr	r0, [r7, #28]
 800c670:	f000 fb0a 	bl	800cc88 <tcp_process>
 800c674:	4603      	mov	r3, r0
 800c676:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800c678:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c67c:	f113 0f0d 	cmn.w	r3, #13
 800c680:	f000 80d3 	beq.w	800c82a <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 800c684:	4b96      	ldr	r3, [pc, #600]	; (800c8e0 <tcp_input+0x7dc>)
 800c686:	781b      	ldrb	r3, [r3, #0]
 800c688:	f003 0308 	and.w	r3, r3, #8
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d015      	beq.n	800c6bc <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800c690:	69fb      	ldr	r3, [r7, #28]
 800c692:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c696:	2b00      	cmp	r3, #0
 800c698:	d008      	beq.n	800c6ac <tcp_input+0x5a8>
 800c69a:	69fb      	ldr	r3, [r7, #28]
 800c69c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c6a0:	69fa      	ldr	r2, [r7, #28]
 800c6a2:	6912      	ldr	r2, [r2, #16]
 800c6a4:	f06f 010d 	mvn.w	r1, #13
 800c6a8:	4610      	mov	r0, r2
 800c6aa:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800c6ac:	69f9      	ldr	r1, [r7, #28]
 800c6ae:	488d      	ldr	r0, [pc, #564]	; (800c8e4 <tcp_input+0x7e0>)
 800c6b0:	f7ff fbb0 	bl	800be14 <tcp_pcb_remove>
        tcp_free(pcb);
 800c6b4:	69f8      	ldr	r0, [r7, #28]
 800c6b6:	f7fd fefd 	bl	800a4b4 <tcp_free>
 800c6ba:	e0c1      	b.n	800c840 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 800c6bc:	2300      	movs	r3, #0
 800c6be:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800c6c0:	4b89      	ldr	r3, [pc, #548]	; (800c8e8 <tcp_input+0x7e4>)
 800c6c2:	881b      	ldrh	r3, [r3, #0]
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d01d      	beq.n	800c704 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800c6c8:	4b87      	ldr	r3, [pc, #540]	; (800c8e8 <tcp_input+0x7e4>)
 800c6ca:	881b      	ldrh	r3, [r3, #0]
 800c6cc:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800c6ce:	69fb      	ldr	r3, [r7, #28]
 800c6d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d00a      	beq.n	800c6ee <tcp_input+0x5ea>
 800c6d8:	69fb      	ldr	r3, [r7, #28]
 800c6da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c6de:	69fa      	ldr	r2, [r7, #28]
 800c6e0:	6910      	ldr	r0, [r2, #16]
 800c6e2:	89fa      	ldrh	r2, [r7, #14]
 800c6e4:	69f9      	ldr	r1, [r7, #28]
 800c6e6:	4798      	blx	r3
 800c6e8:	4603      	mov	r3, r0
 800c6ea:	74fb      	strb	r3, [r7, #19]
 800c6ec:	e001      	b.n	800c6f2 <tcp_input+0x5ee>
 800c6ee:	2300      	movs	r3, #0
 800c6f0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800c6f2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c6f6:	f113 0f0d 	cmn.w	r3, #13
 800c6fa:	f000 8098 	beq.w	800c82e <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 800c6fe:	4b7a      	ldr	r3, [pc, #488]	; (800c8e8 <tcp_input+0x7e4>)
 800c700:	2200      	movs	r2, #0
 800c702:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800c704:	69f8      	ldr	r0, [r7, #28]
 800c706:	f000 f907 	bl	800c918 <tcp_input_delayed_close>
 800c70a:	4603      	mov	r3, r0
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	f040 8090 	bne.w	800c832 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800c712:	4b76      	ldr	r3, [pc, #472]	; (800c8ec <tcp_input+0x7e8>)
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	2b00      	cmp	r3, #0
 800c718:	d041      	beq.n	800c79e <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800c71a:	69fb      	ldr	r3, [r7, #28]
 800c71c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d006      	beq.n	800c730 <tcp_input+0x62c>
 800c722:	4b73      	ldr	r3, [pc, #460]	; (800c8f0 <tcp_input+0x7ec>)
 800c724:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800c728:	4972      	ldr	r1, [pc, #456]	; (800c8f4 <tcp_input+0x7f0>)
 800c72a:	4873      	ldr	r0, [pc, #460]	; (800c8f8 <tcp_input+0x7f4>)
 800c72c:	f006 fd32 	bl	8013194 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800c730:	69fb      	ldr	r3, [r7, #28]
 800c732:	8b5b      	ldrh	r3, [r3, #26]
 800c734:	f003 0310 	and.w	r3, r3, #16
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d008      	beq.n	800c74e <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800c73c:	4b6b      	ldr	r3, [pc, #428]	; (800c8ec <tcp_input+0x7e8>)
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	4618      	mov	r0, r3
 800c742:	f7fd fc07 	bl	8009f54 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800c746:	69f8      	ldr	r0, [r7, #28]
 800c748:	f7fe f99c 	bl	800aa84 <tcp_abort>
            goto aborted;
 800c74c:	e078      	b.n	800c840 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800c74e:	69fb      	ldr	r3, [r7, #28]
 800c750:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c754:	2b00      	cmp	r3, #0
 800c756:	d00c      	beq.n	800c772 <tcp_input+0x66e>
 800c758:	69fb      	ldr	r3, [r7, #28]
 800c75a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800c75e:	69fb      	ldr	r3, [r7, #28]
 800c760:	6918      	ldr	r0, [r3, #16]
 800c762:	4b62      	ldr	r3, [pc, #392]	; (800c8ec <tcp_input+0x7e8>)
 800c764:	681a      	ldr	r2, [r3, #0]
 800c766:	2300      	movs	r3, #0
 800c768:	69f9      	ldr	r1, [r7, #28]
 800c76a:	47a0      	blx	r4
 800c76c:	4603      	mov	r3, r0
 800c76e:	74fb      	strb	r3, [r7, #19]
 800c770:	e008      	b.n	800c784 <tcp_input+0x680>
 800c772:	4b5e      	ldr	r3, [pc, #376]	; (800c8ec <tcp_input+0x7e8>)
 800c774:	681a      	ldr	r2, [r3, #0]
 800c776:	2300      	movs	r3, #0
 800c778:	69f9      	ldr	r1, [r7, #28]
 800c77a:	2000      	movs	r0, #0
 800c77c:	f7ff f88a 	bl	800b894 <tcp_recv_null>
 800c780:	4603      	mov	r3, r0
 800c782:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800c784:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c788:	f113 0f0d 	cmn.w	r3, #13
 800c78c:	d053      	beq.n	800c836 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800c78e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c792:	2b00      	cmp	r3, #0
 800c794:	d003      	beq.n	800c79e <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800c796:	4b55      	ldr	r3, [pc, #340]	; (800c8ec <tcp_input+0x7e8>)
 800c798:	681a      	ldr	r2, [r3, #0]
 800c79a:	69fb      	ldr	r3, [r7, #28]
 800c79c:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800c79e:	4b50      	ldr	r3, [pc, #320]	; (800c8e0 <tcp_input+0x7dc>)
 800c7a0:	781b      	ldrb	r3, [r3, #0]
 800c7a2:	f003 0320 	and.w	r3, r3, #32
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d030      	beq.n	800c80c <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 800c7aa:	69fb      	ldr	r3, [r7, #28]
 800c7ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d009      	beq.n	800c7c6 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800c7b2:	69fb      	ldr	r3, [r7, #28]
 800c7b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c7b6:	7b5a      	ldrb	r2, [r3, #13]
 800c7b8:	69fb      	ldr	r3, [r7, #28]
 800c7ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c7bc:	f042 0220 	orr.w	r2, r2, #32
 800c7c0:	b2d2      	uxtb	r2, r2
 800c7c2:	735a      	strb	r2, [r3, #13]
 800c7c4:	e022      	b.n	800c80c <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800c7c6:	69fb      	ldr	r3, [r7, #28]
 800c7c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c7ca:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c7ce:	d005      	beq.n	800c7dc <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 800c7d0:	69fb      	ldr	r3, [r7, #28]
 800c7d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c7d4:	3301      	adds	r3, #1
 800c7d6:	b29a      	uxth	r2, r3
 800c7d8:	69fb      	ldr	r3, [r7, #28]
 800c7da:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800c7dc:	69fb      	ldr	r3, [r7, #28]
 800c7de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d00b      	beq.n	800c7fe <tcp_input+0x6fa>
 800c7e6:	69fb      	ldr	r3, [r7, #28]
 800c7e8:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800c7ec:	69fb      	ldr	r3, [r7, #28]
 800c7ee:	6918      	ldr	r0, [r3, #16]
 800c7f0:	2300      	movs	r3, #0
 800c7f2:	2200      	movs	r2, #0
 800c7f4:	69f9      	ldr	r1, [r7, #28]
 800c7f6:	47a0      	blx	r4
 800c7f8:	4603      	mov	r3, r0
 800c7fa:	74fb      	strb	r3, [r7, #19]
 800c7fc:	e001      	b.n	800c802 <tcp_input+0x6fe>
 800c7fe:	2300      	movs	r3, #0
 800c800:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800c802:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c806:	f113 0f0d 	cmn.w	r3, #13
 800c80a:	d016      	beq.n	800c83a <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800c80c:	4b33      	ldr	r3, [pc, #204]	; (800c8dc <tcp_input+0x7d8>)
 800c80e:	2200      	movs	r2, #0
 800c810:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800c812:	69f8      	ldr	r0, [r7, #28]
 800c814:	f000 f880 	bl	800c918 <tcp_input_delayed_close>
 800c818:	4603      	mov	r3, r0
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d10f      	bne.n	800c83e <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800c81e:	69f8      	ldr	r0, [r7, #28]
 800c820:	f002 ff10 	bl	800f644 <tcp_output>
 800c824:	e00c      	b.n	800c840 <tcp_input+0x73c>
        goto aborted;
 800c826:	bf00      	nop
 800c828:	e00a      	b.n	800c840 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800c82a:	bf00      	nop
 800c82c:	e008      	b.n	800c840 <tcp_input+0x73c>
              goto aborted;
 800c82e:	bf00      	nop
 800c830:	e006      	b.n	800c840 <tcp_input+0x73c>
          goto aborted;
 800c832:	bf00      	nop
 800c834:	e004      	b.n	800c840 <tcp_input+0x73c>
            goto aborted;
 800c836:	bf00      	nop
 800c838:	e002      	b.n	800c840 <tcp_input+0x73c>
              goto aborted;
 800c83a:	bf00      	nop
 800c83c:	e000      	b.n	800c840 <tcp_input+0x73c>
          goto aborted;
 800c83e:	bf00      	nop
    tcp_input_pcb = NULL;
 800c840:	4b26      	ldr	r3, [pc, #152]	; (800c8dc <tcp_input+0x7d8>)
 800c842:	2200      	movs	r2, #0
 800c844:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800c846:	4b29      	ldr	r3, [pc, #164]	; (800c8ec <tcp_input+0x7e8>)
 800c848:	2200      	movs	r2, #0
 800c84a:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800c84c:	4b2b      	ldr	r3, [pc, #172]	; (800c8fc <tcp_input+0x7f8>)
 800c84e:	685b      	ldr	r3, [r3, #4]
 800c850:	2b00      	cmp	r3, #0
 800c852:	d03f      	beq.n	800c8d4 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 800c854:	4b29      	ldr	r3, [pc, #164]	; (800c8fc <tcp_input+0x7f8>)
 800c856:	685b      	ldr	r3, [r3, #4]
 800c858:	4618      	mov	r0, r3
 800c85a:	f7fd fb7b 	bl	8009f54 <pbuf_free>
      inseg.p = NULL;
 800c85e:	4b27      	ldr	r3, [pc, #156]	; (800c8fc <tcp_input+0x7f8>)
 800c860:	2200      	movs	r2, #0
 800c862:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800c864:	e036      	b.n	800c8d4 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800c866:	4b26      	ldr	r3, [pc, #152]	; (800c900 <tcp_input+0x7fc>)
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	899b      	ldrh	r3, [r3, #12]
 800c86c:	b29b      	uxth	r3, r3
 800c86e:	4618      	mov	r0, r3
 800c870:	f7fb ff4a 	bl	8008708 <lwip_htons>
 800c874:	4603      	mov	r3, r0
 800c876:	b2db      	uxtb	r3, r3
 800c878:	f003 0304 	and.w	r3, r3, #4
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d118      	bne.n	800c8b2 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c880:	4b20      	ldr	r3, [pc, #128]	; (800c904 <tcp_input+0x800>)
 800c882:	6819      	ldr	r1, [r3, #0]
 800c884:	4b20      	ldr	r3, [pc, #128]	; (800c908 <tcp_input+0x804>)
 800c886:	881b      	ldrh	r3, [r3, #0]
 800c888:	461a      	mov	r2, r3
 800c88a:	4b20      	ldr	r3, [pc, #128]	; (800c90c <tcp_input+0x808>)
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c890:	4b1b      	ldr	r3, [pc, #108]	; (800c900 <tcp_input+0x7fc>)
 800c892:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c894:	885b      	ldrh	r3, [r3, #2]
 800c896:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c898:	4a19      	ldr	r2, [pc, #100]	; (800c900 <tcp_input+0x7fc>)
 800c89a:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c89c:	8812      	ldrh	r2, [r2, #0]
 800c89e:	b292      	uxth	r2, r2
 800c8a0:	9202      	str	r2, [sp, #8]
 800c8a2:	9301      	str	r3, [sp, #4]
 800c8a4:	4b1a      	ldr	r3, [pc, #104]	; (800c910 <tcp_input+0x80c>)
 800c8a6:	9300      	str	r3, [sp, #0]
 800c8a8:	4b1a      	ldr	r3, [pc, #104]	; (800c914 <tcp_input+0x810>)
 800c8aa:	4602      	mov	r2, r0
 800c8ac:	2000      	movs	r0, #0
 800c8ae:	f003 fc7d 	bl	80101ac <tcp_rst>
    pbuf_free(p);
 800c8b2:	6878      	ldr	r0, [r7, #4]
 800c8b4:	f7fd fb4e 	bl	8009f54 <pbuf_free>
  return;
 800c8b8:	e00c      	b.n	800c8d4 <tcp_input+0x7d0>
    goto dropped;
 800c8ba:	bf00      	nop
 800c8bc:	e006      	b.n	800c8cc <tcp_input+0x7c8>
    goto dropped;
 800c8be:	bf00      	nop
 800c8c0:	e004      	b.n	800c8cc <tcp_input+0x7c8>
    goto dropped;
 800c8c2:	bf00      	nop
 800c8c4:	e002      	b.n	800c8cc <tcp_input+0x7c8>
      goto dropped;
 800c8c6:	bf00      	nop
 800c8c8:	e000      	b.n	800c8cc <tcp_input+0x7c8>
      goto dropped;
 800c8ca:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800c8cc:	6878      	ldr	r0, [r7, #4]
 800c8ce:	f7fd fb41 	bl	8009f54 <pbuf_free>
 800c8d2:	e000      	b.n	800c8d6 <tcp_input+0x7d2>
  return;
 800c8d4:	bf00      	nop
}
 800c8d6:	3724      	adds	r7, #36	; 0x24
 800c8d8:	46bd      	mov	sp, r7
 800c8da:	bd90      	pop	{r4, r7, pc}
 800c8dc:	240037e8 	.word	0x240037e8
 800c8e0:	2400011d 	.word	0x2400011d
 800c8e4:	240037d4 	.word	0x240037d4
 800c8e8:	24000118 	.word	0x24000118
 800c8ec:	24000120 	.word	0x24000120
 800c8f0:	08015468 	.word	0x08015468
 800c8f4:	0801561c 	.word	0x0801561c
 800c8f8:	080154b4 	.word	0x080154b4
 800c8fc:	240000f0 	.word	0x240000f0
 800c900:	24000100 	.word	0x24000100
 800c904:	24000114 	.word	0x24000114
 800c908:	2400011a 	.word	0x2400011a
 800c90c:	24000110 	.word	0x24000110
 800c910:	240008f4 	.word	0x240008f4
 800c914:	240008f8 	.word	0x240008f8

0800c918 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800c918:	b580      	push	{r7, lr}
 800c91a:	b082      	sub	sp, #8
 800c91c:	af00      	add	r7, sp, #0
 800c91e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	2b00      	cmp	r3, #0
 800c924:	d106      	bne.n	800c934 <tcp_input_delayed_close+0x1c>
 800c926:	4b17      	ldr	r3, [pc, #92]	; (800c984 <tcp_input_delayed_close+0x6c>)
 800c928:	f240 225a 	movw	r2, #602	; 0x25a
 800c92c:	4916      	ldr	r1, [pc, #88]	; (800c988 <tcp_input_delayed_close+0x70>)
 800c92e:	4817      	ldr	r0, [pc, #92]	; (800c98c <tcp_input_delayed_close+0x74>)
 800c930:	f006 fc30 	bl	8013194 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800c934:	4b16      	ldr	r3, [pc, #88]	; (800c990 <tcp_input_delayed_close+0x78>)
 800c936:	781b      	ldrb	r3, [r3, #0]
 800c938:	f003 0310 	and.w	r3, r3, #16
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d01c      	beq.n	800c97a <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	8b5b      	ldrh	r3, [r3, #26]
 800c944:	f003 0310 	and.w	r3, r3, #16
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d10d      	bne.n	800c968 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c952:	2b00      	cmp	r3, #0
 800c954:	d008      	beq.n	800c968 <tcp_input_delayed_close+0x50>
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c95c:	687a      	ldr	r2, [r7, #4]
 800c95e:	6912      	ldr	r2, [r2, #16]
 800c960:	f06f 010e 	mvn.w	r1, #14
 800c964:	4610      	mov	r0, r2
 800c966:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800c968:	6879      	ldr	r1, [r7, #4]
 800c96a:	480a      	ldr	r0, [pc, #40]	; (800c994 <tcp_input_delayed_close+0x7c>)
 800c96c:	f7ff fa52 	bl	800be14 <tcp_pcb_remove>
    tcp_free(pcb);
 800c970:	6878      	ldr	r0, [r7, #4]
 800c972:	f7fd fd9f 	bl	800a4b4 <tcp_free>
    return 1;
 800c976:	2301      	movs	r3, #1
 800c978:	e000      	b.n	800c97c <tcp_input_delayed_close+0x64>
  }
  return 0;
 800c97a:	2300      	movs	r3, #0
}
 800c97c:	4618      	mov	r0, r3
 800c97e:	3708      	adds	r7, #8
 800c980:	46bd      	mov	sp, r7
 800c982:	bd80      	pop	{r7, pc}
 800c984:	08015468 	.word	0x08015468
 800c988:	08015638 	.word	0x08015638
 800c98c:	080154b4 	.word	0x080154b4
 800c990:	2400011d 	.word	0x2400011d
 800c994:	240037d4 	.word	0x240037d4

0800c998 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800c998:	b590      	push	{r4, r7, lr}
 800c99a:	b08b      	sub	sp, #44	; 0x2c
 800c99c:	af04      	add	r7, sp, #16
 800c99e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800c9a0:	4b6f      	ldr	r3, [pc, #444]	; (800cb60 <tcp_listen_input+0x1c8>)
 800c9a2:	781b      	ldrb	r3, [r3, #0]
 800c9a4:	f003 0304 	and.w	r3, r3, #4
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	f040 80d2 	bne.w	800cb52 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d106      	bne.n	800c9c2 <tcp_listen_input+0x2a>
 800c9b4:	4b6b      	ldr	r3, [pc, #428]	; (800cb64 <tcp_listen_input+0x1cc>)
 800c9b6:	f240 2281 	movw	r2, #641	; 0x281
 800c9ba:	496b      	ldr	r1, [pc, #428]	; (800cb68 <tcp_listen_input+0x1d0>)
 800c9bc:	486b      	ldr	r0, [pc, #428]	; (800cb6c <tcp_listen_input+0x1d4>)
 800c9be:	f006 fbe9 	bl	8013194 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800c9c2:	4b67      	ldr	r3, [pc, #412]	; (800cb60 <tcp_listen_input+0x1c8>)
 800c9c4:	781b      	ldrb	r3, [r3, #0]
 800c9c6:	f003 0310 	and.w	r3, r3, #16
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d019      	beq.n	800ca02 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c9ce:	4b68      	ldr	r3, [pc, #416]	; (800cb70 <tcp_listen_input+0x1d8>)
 800c9d0:	6819      	ldr	r1, [r3, #0]
 800c9d2:	4b68      	ldr	r3, [pc, #416]	; (800cb74 <tcp_listen_input+0x1dc>)
 800c9d4:	881b      	ldrh	r3, [r3, #0]
 800c9d6:	461a      	mov	r2, r3
 800c9d8:	4b67      	ldr	r3, [pc, #412]	; (800cb78 <tcp_listen_input+0x1e0>)
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c9de:	4b67      	ldr	r3, [pc, #412]	; (800cb7c <tcp_listen_input+0x1e4>)
 800c9e0:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c9e2:	885b      	ldrh	r3, [r3, #2]
 800c9e4:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c9e6:	4a65      	ldr	r2, [pc, #404]	; (800cb7c <tcp_listen_input+0x1e4>)
 800c9e8:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c9ea:	8812      	ldrh	r2, [r2, #0]
 800c9ec:	b292      	uxth	r2, r2
 800c9ee:	9202      	str	r2, [sp, #8]
 800c9f0:	9301      	str	r3, [sp, #4]
 800c9f2:	4b63      	ldr	r3, [pc, #396]	; (800cb80 <tcp_listen_input+0x1e8>)
 800c9f4:	9300      	str	r3, [sp, #0]
 800c9f6:	4b63      	ldr	r3, [pc, #396]	; (800cb84 <tcp_listen_input+0x1ec>)
 800c9f8:	4602      	mov	r2, r0
 800c9fa:	6878      	ldr	r0, [r7, #4]
 800c9fc:	f003 fbd6 	bl	80101ac <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800ca00:	e0a9      	b.n	800cb56 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800ca02:	4b57      	ldr	r3, [pc, #348]	; (800cb60 <tcp_listen_input+0x1c8>)
 800ca04:	781b      	ldrb	r3, [r3, #0]
 800ca06:	f003 0302 	and.w	r3, r3, #2
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	f000 80a3 	beq.w	800cb56 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	7d5b      	ldrb	r3, [r3, #21]
 800ca14:	4618      	mov	r0, r3
 800ca16:	f7ff f861 	bl	800badc <tcp_alloc>
 800ca1a:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800ca1c:	697b      	ldr	r3, [r7, #20]
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d111      	bne.n	800ca46 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	699b      	ldr	r3, [r3, #24]
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d00a      	beq.n	800ca40 <tcp_listen_input+0xa8>
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	699b      	ldr	r3, [r3, #24]
 800ca2e:	687a      	ldr	r2, [r7, #4]
 800ca30:	6910      	ldr	r0, [r2, #16]
 800ca32:	f04f 32ff 	mov.w	r2, #4294967295
 800ca36:	2100      	movs	r1, #0
 800ca38:	4798      	blx	r3
 800ca3a:	4603      	mov	r3, r0
 800ca3c:	73bb      	strb	r3, [r7, #14]
      return;
 800ca3e:	e08b      	b.n	800cb58 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800ca40:	23f0      	movs	r3, #240	; 0xf0
 800ca42:	73bb      	strb	r3, [r7, #14]
      return;
 800ca44:	e088      	b.n	800cb58 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800ca46:	4b50      	ldr	r3, [pc, #320]	; (800cb88 <tcp_listen_input+0x1f0>)
 800ca48:	695a      	ldr	r2, [r3, #20]
 800ca4a:	697b      	ldr	r3, [r7, #20]
 800ca4c:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800ca4e:	4b4e      	ldr	r3, [pc, #312]	; (800cb88 <tcp_listen_input+0x1f0>)
 800ca50:	691a      	ldr	r2, [r3, #16]
 800ca52:	697b      	ldr	r3, [r7, #20]
 800ca54:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	8ada      	ldrh	r2, [r3, #22]
 800ca5a:	697b      	ldr	r3, [r7, #20]
 800ca5c:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800ca5e:	4b47      	ldr	r3, [pc, #284]	; (800cb7c <tcp_listen_input+0x1e4>)
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	881b      	ldrh	r3, [r3, #0]
 800ca64:	b29a      	uxth	r2, r3
 800ca66:	697b      	ldr	r3, [r7, #20]
 800ca68:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800ca6a:	697b      	ldr	r3, [r7, #20]
 800ca6c:	2203      	movs	r2, #3
 800ca6e:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800ca70:	4b41      	ldr	r3, [pc, #260]	; (800cb78 <tcp_listen_input+0x1e0>)
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	1c5a      	adds	r2, r3, #1
 800ca76:	697b      	ldr	r3, [r7, #20]
 800ca78:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800ca7a:	697b      	ldr	r3, [r7, #20]
 800ca7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ca7e:	697b      	ldr	r3, [r7, #20]
 800ca80:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800ca82:	6978      	ldr	r0, [r7, #20]
 800ca84:	f7ff fa5a 	bl	800bf3c <tcp_next_iss>
 800ca88:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800ca8a:	697b      	ldr	r3, [r7, #20]
 800ca8c:	693a      	ldr	r2, [r7, #16]
 800ca8e:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800ca90:	697b      	ldr	r3, [r7, #20]
 800ca92:	693a      	ldr	r2, [r7, #16]
 800ca94:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800ca96:	697b      	ldr	r3, [r7, #20]
 800ca98:	693a      	ldr	r2, [r7, #16]
 800ca9a:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800ca9c:	697b      	ldr	r3, [r7, #20]
 800ca9e:	693a      	ldr	r2, [r7, #16]
 800caa0:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800caa2:	4b35      	ldr	r3, [pc, #212]	; (800cb78 <tcp_listen_input+0x1e0>)
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	1e5a      	subs	r2, r3, #1
 800caa8:	697b      	ldr	r3, [r7, #20]
 800caaa:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	691a      	ldr	r2, [r3, #16]
 800cab0:	697b      	ldr	r3, [r7, #20]
 800cab2:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800cab4:	697b      	ldr	r3, [r7, #20]
 800cab6:	687a      	ldr	r2, [r7, #4]
 800cab8:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	7a5b      	ldrb	r3, [r3, #9]
 800cabe:	f003 030c 	and.w	r3, r3, #12
 800cac2:	b2da      	uxtb	r2, r3
 800cac4:	697b      	ldr	r3, [r7, #20]
 800cac6:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	7a1a      	ldrb	r2, [r3, #8]
 800cacc:	697b      	ldr	r3, [r7, #20]
 800cace:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800cad0:	4b2e      	ldr	r3, [pc, #184]	; (800cb8c <tcp_listen_input+0x1f4>)
 800cad2:	681a      	ldr	r2, [r3, #0]
 800cad4:	697b      	ldr	r3, [r7, #20]
 800cad6:	60da      	str	r2, [r3, #12]
 800cad8:	4a2c      	ldr	r2, [pc, #176]	; (800cb8c <tcp_listen_input+0x1f4>)
 800cada:	697b      	ldr	r3, [r7, #20]
 800cadc:	6013      	str	r3, [r2, #0]
 800cade:	f003 fd27 	bl	8010530 <tcp_timer_needed>
 800cae2:	4b2b      	ldr	r3, [pc, #172]	; (800cb90 <tcp_listen_input+0x1f8>)
 800cae4:	2201      	movs	r2, #1
 800cae6:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800cae8:	6978      	ldr	r0, [r7, #20]
 800caea:	f001 fd8d 	bl	800e608 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800caee:	4b23      	ldr	r3, [pc, #140]	; (800cb7c <tcp_listen_input+0x1e4>)
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	89db      	ldrh	r3, [r3, #14]
 800caf4:	b29a      	uxth	r2, r3
 800caf6:	697b      	ldr	r3, [r7, #20]
 800caf8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800cafc:	697b      	ldr	r3, [r7, #20]
 800cafe:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800cb02:	697b      	ldr	r3, [r7, #20]
 800cb04:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800cb08:	697b      	ldr	r3, [r7, #20]
 800cb0a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800cb0c:	697b      	ldr	r3, [r7, #20]
 800cb0e:	3304      	adds	r3, #4
 800cb10:	4618      	mov	r0, r3
 800cb12:	f005 f911 	bl	8011d38 <ip4_route>
 800cb16:	4601      	mov	r1, r0
 800cb18:	697b      	ldr	r3, [r7, #20]
 800cb1a:	3304      	adds	r3, #4
 800cb1c:	461a      	mov	r2, r3
 800cb1e:	4620      	mov	r0, r4
 800cb20:	f7ff fa32 	bl	800bf88 <tcp_eff_send_mss_netif>
 800cb24:	4603      	mov	r3, r0
 800cb26:	461a      	mov	r2, r3
 800cb28:	697b      	ldr	r3, [r7, #20]
 800cb2a:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800cb2c:	2112      	movs	r1, #18
 800cb2e:	6978      	ldr	r0, [r7, #20]
 800cb30:	f002 fc9a 	bl	800f468 <tcp_enqueue_flags>
 800cb34:	4603      	mov	r3, r0
 800cb36:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800cb38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d004      	beq.n	800cb4a <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800cb40:	2100      	movs	r1, #0
 800cb42:	6978      	ldr	r0, [r7, #20]
 800cb44:	f7fd fee0 	bl	800a908 <tcp_abandon>
      return;
 800cb48:	e006      	b.n	800cb58 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800cb4a:	6978      	ldr	r0, [r7, #20]
 800cb4c:	f002 fd7a 	bl	800f644 <tcp_output>
  return;
 800cb50:	e001      	b.n	800cb56 <tcp_listen_input+0x1be>
    return;
 800cb52:	bf00      	nop
 800cb54:	e000      	b.n	800cb58 <tcp_listen_input+0x1c0>
  return;
 800cb56:	bf00      	nop
}
 800cb58:	371c      	adds	r7, #28
 800cb5a:	46bd      	mov	sp, r7
 800cb5c:	bd90      	pop	{r4, r7, pc}
 800cb5e:	bf00      	nop
 800cb60:	2400011c 	.word	0x2400011c
 800cb64:	08015468 	.word	0x08015468
 800cb68:	08015660 	.word	0x08015660
 800cb6c:	080154b4 	.word	0x080154b4
 800cb70:	24000114 	.word	0x24000114
 800cb74:	2400011a 	.word	0x2400011a
 800cb78:	24000110 	.word	0x24000110
 800cb7c:	24000100 	.word	0x24000100
 800cb80:	240008f4 	.word	0x240008f4
 800cb84:	240008f8 	.word	0x240008f8
 800cb88:	240008e4 	.word	0x240008e4
 800cb8c:	240037d4 	.word	0x240037d4
 800cb90:	240037d0 	.word	0x240037d0

0800cb94 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800cb94:	b580      	push	{r7, lr}
 800cb96:	b086      	sub	sp, #24
 800cb98:	af04      	add	r7, sp, #16
 800cb9a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800cb9c:	4b2f      	ldr	r3, [pc, #188]	; (800cc5c <tcp_timewait_input+0xc8>)
 800cb9e:	781b      	ldrb	r3, [r3, #0]
 800cba0:	f003 0304 	and.w	r3, r3, #4
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d153      	bne.n	800cc50 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d106      	bne.n	800cbbc <tcp_timewait_input+0x28>
 800cbae:	4b2c      	ldr	r3, [pc, #176]	; (800cc60 <tcp_timewait_input+0xcc>)
 800cbb0:	f240 22ee 	movw	r2, #750	; 0x2ee
 800cbb4:	492b      	ldr	r1, [pc, #172]	; (800cc64 <tcp_timewait_input+0xd0>)
 800cbb6:	482c      	ldr	r0, [pc, #176]	; (800cc68 <tcp_timewait_input+0xd4>)
 800cbb8:	f006 faec 	bl	8013194 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800cbbc:	4b27      	ldr	r3, [pc, #156]	; (800cc5c <tcp_timewait_input+0xc8>)
 800cbbe:	781b      	ldrb	r3, [r3, #0]
 800cbc0:	f003 0302 	and.w	r3, r3, #2
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d02a      	beq.n	800cc1e <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800cbc8:	4b28      	ldr	r3, [pc, #160]	; (800cc6c <tcp_timewait_input+0xd8>)
 800cbca:	681a      	ldr	r2, [r3, #0]
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbd0:	1ad3      	subs	r3, r2, r3
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	db2d      	blt.n	800cc32 <tcp_timewait_input+0x9e>
 800cbd6:	4b25      	ldr	r3, [pc, #148]	; (800cc6c <tcp_timewait_input+0xd8>)
 800cbd8:	681a      	ldr	r2, [r3, #0]
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbde:	6879      	ldr	r1, [r7, #4]
 800cbe0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800cbe2:	440b      	add	r3, r1
 800cbe4:	1ad3      	subs	r3, r2, r3
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	dc23      	bgt.n	800cc32 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cbea:	4b21      	ldr	r3, [pc, #132]	; (800cc70 <tcp_timewait_input+0xdc>)
 800cbec:	6819      	ldr	r1, [r3, #0]
 800cbee:	4b21      	ldr	r3, [pc, #132]	; (800cc74 <tcp_timewait_input+0xe0>)
 800cbf0:	881b      	ldrh	r3, [r3, #0]
 800cbf2:	461a      	mov	r2, r3
 800cbf4:	4b1d      	ldr	r3, [pc, #116]	; (800cc6c <tcp_timewait_input+0xd8>)
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cbfa:	4b1f      	ldr	r3, [pc, #124]	; (800cc78 <tcp_timewait_input+0xe4>)
 800cbfc:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cbfe:	885b      	ldrh	r3, [r3, #2]
 800cc00:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cc02:	4a1d      	ldr	r2, [pc, #116]	; (800cc78 <tcp_timewait_input+0xe4>)
 800cc04:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cc06:	8812      	ldrh	r2, [r2, #0]
 800cc08:	b292      	uxth	r2, r2
 800cc0a:	9202      	str	r2, [sp, #8]
 800cc0c:	9301      	str	r3, [sp, #4]
 800cc0e:	4b1b      	ldr	r3, [pc, #108]	; (800cc7c <tcp_timewait_input+0xe8>)
 800cc10:	9300      	str	r3, [sp, #0]
 800cc12:	4b1b      	ldr	r3, [pc, #108]	; (800cc80 <tcp_timewait_input+0xec>)
 800cc14:	4602      	mov	r2, r0
 800cc16:	6878      	ldr	r0, [r7, #4]
 800cc18:	f003 fac8 	bl	80101ac <tcp_rst>
      return;
 800cc1c:	e01b      	b.n	800cc56 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800cc1e:	4b0f      	ldr	r3, [pc, #60]	; (800cc5c <tcp_timewait_input+0xc8>)
 800cc20:	781b      	ldrb	r3, [r3, #0]
 800cc22:	f003 0301 	and.w	r3, r3, #1
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d003      	beq.n	800cc32 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800cc2a:	4b16      	ldr	r3, [pc, #88]	; (800cc84 <tcp_timewait_input+0xf0>)
 800cc2c:	681a      	ldr	r2, [r3, #0]
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800cc32:	4b10      	ldr	r3, [pc, #64]	; (800cc74 <tcp_timewait_input+0xe0>)
 800cc34:	881b      	ldrh	r3, [r3, #0]
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d00c      	beq.n	800cc54 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	8b5b      	ldrh	r3, [r3, #26]
 800cc3e:	f043 0302 	orr.w	r3, r3, #2
 800cc42:	b29a      	uxth	r2, r3
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800cc48:	6878      	ldr	r0, [r7, #4]
 800cc4a:	f002 fcfb 	bl	800f644 <tcp_output>
  }
  return;
 800cc4e:	e001      	b.n	800cc54 <tcp_timewait_input+0xc0>
    return;
 800cc50:	bf00      	nop
 800cc52:	e000      	b.n	800cc56 <tcp_timewait_input+0xc2>
  return;
 800cc54:	bf00      	nop
}
 800cc56:	3708      	adds	r7, #8
 800cc58:	46bd      	mov	sp, r7
 800cc5a:	bd80      	pop	{r7, pc}
 800cc5c:	2400011c 	.word	0x2400011c
 800cc60:	08015468 	.word	0x08015468
 800cc64:	08015680 	.word	0x08015680
 800cc68:	080154b4 	.word	0x080154b4
 800cc6c:	24000110 	.word	0x24000110
 800cc70:	24000114 	.word	0x24000114
 800cc74:	2400011a 	.word	0x2400011a
 800cc78:	24000100 	.word	0x24000100
 800cc7c:	240008f4 	.word	0x240008f4
 800cc80:	240008f8 	.word	0x240008f8
 800cc84:	240037d8 	.word	0x240037d8

0800cc88 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800cc88:	b590      	push	{r4, r7, lr}
 800cc8a:	b08d      	sub	sp, #52	; 0x34
 800cc8c:	af04      	add	r7, sp, #16
 800cc8e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800cc90:	2300      	movs	r3, #0
 800cc92:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800cc94:	2300      	movs	r3, #0
 800cc96:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d106      	bne.n	800ccac <tcp_process+0x24>
 800cc9e:	4ba5      	ldr	r3, [pc, #660]	; (800cf34 <tcp_process+0x2ac>)
 800cca0:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800cca4:	49a4      	ldr	r1, [pc, #656]	; (800cf38 <tcp_process+0x2b0>)
 800cca6:	48a5      	ldr	r0, [pc, #660]	; (800cf3c <tcp_process+0x2b4>)
 800cca8:	f006 fa74 	bl	8013194 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800ccac:	4ba4      	ldr	r3, [pc, #656]	; (800cf40 <tcp_process+0x2b8>)
 800ccae:	781b      	ldrb	r3, [r3, #0]
 800ccb0:	f003 0304 	and.w	r3, r3, #4
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d04e      	beq.n	800cd56 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	7d1b      	ldrb	r3, [r3, #20]
 800ccbc:	2b02      	cmp	r3, #2
 800ccbe:	d108      	bne.n	800ccd2 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ccc4:	4b9f      	ldr	r3, [pc, #636]	; (800cf44 <tcp_process+0x2bc>)
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	429a      	cmp	r2, r3
 800ccca:	d123      	bne.n	800cd14 <tcp_process+0x8c>
        acceptable = 1;
 800cccc:	2301      	movs	r3, #1
 800ccce:	76fb      	strb	r3, [r7, #27]
 800ccd0:	e020      	b.n	800cd14 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ccd6:	4b9c      	ldr	r3, [pc, #624]	; (800cf48 <tcp_process+0x2c0>)
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	429a      	cmp	r2, r3
 800ccdc:	d102      	bne.n	800cce4 <tcp_process+0x5c>
        acceptable = 1;
 800ccde:	2301      	movs	r3, #1
 800cce0:	76fb      	strb	r3, [r7, #27]
 800cce2:	e017      	b.n	800cd14 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800cce4:	4b98      	ldr	r3, [pc, #608]	; (800cf48 <tcp_process+0x2c0>)
 800cce6:	681a      	ldr	r2, [r3, #0]
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccec:	1ad3      	subs	r3, r2, r3
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	db10      	blt.n	800cd14 <tcp_process+0x8c>
 800ccf2:	4b95      	ldr	r3, [pc, #596]	; (800cf48 <tcp_process+0x2c0>)
 800ccf4:	681a      	ldr	r2, [r3, #0]
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccfa:	6879      	ldr	r1, [r7, #4]
 800ccfc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ccfe:	440b      	add	r3, r1
 800cd00:	1ad3      	subs	r3, r2, r3
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	dc06      	bgt.n	800cd14 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	8b5b      	ldrh	r3, [r3, #26]
 800cd0a:	f043 0302 	orr.w	r3, r3, #2
 800cd0e:	b29a      	uxth	r2, r3
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800cd14:	7efb      	ldrb	r3, [r7, #27]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d01b      	beq.n	800cd52 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	7d1b      	ldrb	r3, [r3, #20]
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d106      	bne.n	800cd30 <tcp_process+0xa8>
 800cd22:	4b84      	ldr	r3, [pc, #528]	; (800cf34 <tcp_process+0x2ac>)
 800cd24:	f44f 724e 	mov.w	r2, #824	; 0x338
 800cd28:	4988      	ldr	r1, [pc, #544]	; (800cf4c <tcp_process+0x2c4>)
 800cd2a:	4884      	ldr	r0, [pc, #528]	; (800cf3c <tcp_process+0x2b4>)
 800cd2c:	f006 fa32 	bl	8013194 <iprintf>
      recv_flags |= TF_RESET;
 800cd30:	4b87      	ldr	r3, [pc, #540]	; (800cf50 <tcp_process+0x2c8>)
 800cd32:	781b      	ldrb	r3, [r3, #0]
 800cd34:	f043 0308 	orr.w	r3, r3, #8
 800cd38:	b2da      	uxtb	r2, r3
 800cd3a:	4b85      	ldr	r3, [pc, #532]	; (800cf50 <tcp_process+0x2c8>)
 800cd3c:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	8b5b      	ldrh	r3, [r3, #26]
 800cd42:	f023 0301 	bic.w	r3, r3, #1
 800cd46:	b29a      	uxth	r2, r3
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800cd4c:	f06f 030d 	mvn.w	r3, #13
 800cd50:	e37a      	b.n	800d448 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800cd52:	2300      	movs	r3, #0
 800cd54:	e378      	b.n	800d448 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800cd56:	4b7a      	ldr	r3, [pc, #488]	; (800cf40 <tcp_process+0x2b8>)
 800cd58:	781b      	ldrb	r3, [r3, #0]
 800cd5a:	f003 0302 	and.w	r3, r3, #2
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d010      	beq.n	800cd84 <tcp_process+0xfc>
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	7d1b      	ldrb	r3, [r3, #20]
 800cd66:	2b02      	cmp	r3, #2
 800cd68:	d00c      	beq.n	800cd84 <tcp_process+0xfc>
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	7d1b      	ldrb	r3, [r3, #20]
 800cd6e:	2b03      	cmp	r3, #3
 800cd70:	d008      	beq.n	800cd84 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	8b5b      	ldrh	r3, [r3, #26]
 800cd76:	f043 0302 	orr.w	r3, r3, #2
 800cd7a:	b29a      	uxth	r2, r3
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800cd80:	2300      	movs	r3, #0
 800cd82:	e361      	b.n	800d448 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	8b5b      	ldrh	r3, [r3, #26]
 800cd88:	f003 0310 	and.w	r3, r3, #16
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d103      	bne.n	800cd98 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800cd90:	4b70      	ldr	r3, [pc, #448]	; (800cf54 <tcp_process+0x2cc>)
 800cd92:	681a      	ldr	r2, [r3, #0]
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	2200      	movs	r2, #0
 800cd9c:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	2200      	movs	r2, #0
 800cda4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800cda8:	6878      	ldr	r0, [r7, #4]
 800cdaa:	f001 fc2d 	bl	800e608 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	7d1b      	ldrb	r3, [r3, #20]
 800cdb2:	3b02      	subs	r3, #2
 800cdb4:	2b07      	cmp	r3, #7
 800cdb6:	f200 8337 	bhi.w	800d428 <tcp_process+0x7a0>
 800cdba:	a201      	add	r2, pc, #4	; (adr r2, 800cdc0 <tcp_process+0x138>)
 800cdbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdc0:	0800cde1 	.word	0x0800cde1
 800cdc4:	0800d011 	.word	0x0800d011
 800cdc8:	0800d189 	.word	0x0800d189
 800cdcc:	0800d1b3 	.word	0x0800d1b3
 800cdd0:	0800d2d7 	.word	0x0800d2d7
 800cdd4:	0800d189 	.word	0x0800d189
 800cdd8:	0800d363 	.word	0x0800d363
 800cddc:	0800d3f3 	.word	0x0800d3f3
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800cde0:	4b57      	ldr	r3, [pc, #348]	; (800cf40 <tcp_process+0x2b8>)
 800cde2:	781b      	ldrb	r3, [r3, #0]
 800cde4:	f003 0310 	and.w	r3, r3, #16
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	f000 80e4 	beq.w	800cfb6 <tcp_process+0x32e>
 800cdee:	4b54      	ldr	r3, [pc, #336]	; (800cf40 <tcp_process+0x2b8>)
 800cdf0:	781b      	ldrb	r3, [r3, #0]
 800cdf2:	f003 0302 	and.w	r3, r3, #2
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	f000 80dd 	beq.w	800cfb6 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce00:	1c5a      	adds	r2, r3, #1
 800ce02:	4b50      	ldr	r3, [pc, #320]	; (800cf44 <tcp_process+0x2bc>)
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	429a      	cmp	r2, r3
 800ce08:	f040 80d5 	bne.w	800cfb6 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800ce0c:	4b4e      	ldr	r3, [pc, #312]	; (800cf48 <tcp_process+0x2c0>)
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	1c5a      	adds	r2, r3, #1
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800ce1e:	4b49      	ldr	r3, [pc, #292]	; (800cf44 <tcp_process+0x2bc>)
 800ce20:	681a      	ldr	r2, [r3, #0]
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800ce26:	4b4c      	ldr	r3, [pc, #304]	; (800cf58 <tcp_process+0x2d0>)
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	89db      	ldrh	r3, [r3, #14]
 800ce2c:	b29a      	uxth	r2, r3
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800ce40:	4b41      	ldr	r3, [pc, #260]	; (800cf48 <tcp_process+0x2c0>)
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	1e5a      	subs	r2, r3, #1
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	2204      	movs	r2, #4
 800ce4e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	3304      	adds	r3, #4
 800ce58:	4618      	mov	r0, r3
 800ce5a:	f004 ff6d 	bl	8011d38 <ip4_route>
 800ce5e:	4601      	mov	r1, r0
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	3304      	adds	r3, #4
 800ce64:	461a      	mov	r2, r3
 800ce66:	4620      	mov	r0, r4
 800ce68:	f7ff f88e 	bl	800bf88 <tcp_eff_send_mss_netif>
 800ce6c:	4603      	mov	r3, r0
 800ce6e:	461a      	mov	r2, r3
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ce78:	009a      	lsls	r2, r3, #2
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ce7e:	005b      	lsls	r3, r3, #1
 800ce80:	f241 111c 	movw	r1, #4380	; 0x111c
 800ce84:	428b      	cmp	r3, r1
 800ce86:	bf38      	it	cc
 800ce88:	460b      	movcc	r3, r1
 800ce8a:	429a      	cmp	r2, r3
 800ce8c:	d204      	bcs.n	800ce98 <tcp_process+0x210>
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ce92:	009b      	lsls	r3, r3, #2
 800ce94:	b29b      	uxth	r3, r3
 800ce96:	e00d      	b.n	800ceb4 <tcp_process+0x22c>
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ce9c:	005b      	lsls	r3, r3, #1
 800ce9e:	f241 121c 	movw	r2, #4380	; 0x111c
 800cea2:	4293      	cmp	r3, r2
 800cea4:	d904      	bls.n	800ceb0 <tcp_process+0x228>
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ceaa:	005b      	lsls	r3, r3, #1
 800ceac:	b29b      	uxth	r3, r3
 800ceae:	e001      	b.n	800ceb4 <tcp_process+0x22c>
 800ceb0:	f241 131c 	movw	r3, #4380	; 0x111c
 800ceb4:	687a      	ldr	r2, [r7, #4]
 800ceb6:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d106      	bne.n	800ced2 <tcp_process+0x24a>
 800cec4:	4b1b      	ldr	r3, [pc, #108]	; (800cf34 <tcp_process+0x2ac>)
 800cec6:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800ceca:	4924      	ldr	r1, [pc, #144]	; (800cf5c <tcp_process+0x2d4>)
 800cecc:	481b      	ldr	r0, [pc, #108]	; (800cf3c <tcp_process+0x2b4>)
 800cece:	f006 f961 	bl	8013194 <iprintf>
        --pcb->snd_queuelen;
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ced8:	3b01      	subs	r3, #1
 800ceda:	b29a      	uxth	r2, r3
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cee6:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800cee8:	69fb      	ldr	r3, [r7, #28]
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d111      	bne.n	800cf12 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cef2:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800cef4:	69fb      	ldr	r3, [r7, #28]
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d106      	bne.n	800cf08 <tcp_process+0x280>
 800cefa:	4b0e      	ldr	r3, [pc, #56]	; (800cf34 <tcp_process+0x2ac>)
 800cefc:	f44f 725d 	mov.w	r2, #884	; 0x374
 800cf00:	4917      	ldr	r1, [pc, #92]	; (800cf60 <tcp_process+0x2d8>)
 800cf02:	480e      	ldr	r0, [pc, #56]	; (800cf3c <tcp_process+0x2b4>)
 800cf04:	f006 f946 	bl	8013194 <iprintf>
          pcb->unsent = rseg->next;
 800cf08:	69fb      	ldr	r3, [r7, #28]
 800cf0a:	681a      	ldr	r2, [r3, #0]
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	66da      	str	r2, [r3, #108]	; 0x6c
 800cf10:	e003      	b.n	800cf1a <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 800cf12:	69fb      	ldr	r3, [r7, #28]
 800cf14:	681a      	ldr	r2, [r3, #0]
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800cf1a:	69f8      	ldr	r0, [r7, #28]
 800cf1c:	f7fe fc57 	bl	800b7ce <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d11d      	bne.n	800cf64 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cf2e:	861a      	strh	r2, [r3, #48]	; 0x30
 800cf30:	e01f      	b.n	800cf72 <tcp_process+0x2ea>
 800cf32:	bf00      	nop
 800cf34:	08015468 	.word	0x08015468
 800cf38:	080156a0 	.word	0x080156a0
 800cf3c:	080154b4 	.word	0x080154b4
 800cf40:	2400011c 	.word	0x2400011c
 800cf44:	24000114 	.word	0x24000114
 800cf48:	24000110 	.word	0x24000110
 800cf4c:	080156bc 	.word	0x080156bc
 800cf50:	2400011d 	.word	0x2400011d
 800cf54:	240037d8 	.word	0x240037d8
 800cf58:	24000100 	.word	0x24000100
 800cf5c:	080156dc 	.word	0x080156dc
 800cf60:	080156f4 	.word	0x080156f4
        } else {
          pcb->rtime = 0;
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	2200      	movs	r2, #0
 800cf68:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	2200      	movs	r2, #0
 800cf6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d00a      	beq.n	800cf92 <tcp_process+0x30a>
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cf82:	687a      	ldr	r2, [r7, #4]
 800cf84:	6910      	ldr	r0, [r2, #16]
 800cf86:	2200      	movs	r2, #0
 800cf88:	6879      	ldr	r1, [r7, #4]
 800cf8a:	4798      	blx	r3
 800cf8c:	4603      	mov	r3, r0
 800cf8e:	76bb      	strb	r3, [r7, #26]
 800cf90:	e001      	b.n	800cf96 <tcp_process+0x30e>
 800cf92:	2300      	movs	r3, #0
 800cf94:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800cf96:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800cf9a:	f113 0f0d 	cmn.w	r3, #13
 800cf9e:	d102      	bne.n	800cfa6 <tcp_process+0x31e>
          return ERR_ABRT;
 800cfa0:	f06f 030c 	mvn.w	r3, #12
 800cfa4:	e250      	b.n	800d448 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	8b5b      	ldrh	r3, [r3, #26]
 800cfaa:	f043 0302 	orr.w	r3, r3, #2
 800cfae:	b29a      	uxth	r2, r3
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800cfb4:	e23a      	b.n	800d42c <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800cfb6:	4b9d      	ldr	r3, [pc, #628]	; (800d22c <tcp_process+0x5a4>)
 800cfb8:	781b      	ldrb	r3, [r3, #0]
 800cfba:	f003 0310 	and.w	r3, r3, #16
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	f000 8234 	beq.w	800d42c <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cfc4:	4b9a      	ldr	r3, [pc, #616]	; (800d230 <tcp_process+0x5a8>)
 800cfc6:	6819      	ldr	r1, [r3, #0]
 800cfc8:	4b9a      	ldr	r3, [pc, #616]	; (800d234 <tcp_process+0x5ac>)
 800cfca:	881b      	ldrh	r3, [r3, #0]
 800cfcc:	461a      	mov	r2, r3
 800cfce:	4b9a      	ldr	r3, [pc, #616]	; (800d238 <tcp_process+0x5b0>)
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cfd4:	4b99      	ldr	r3, [pc, #612]	; (800d23c <tcp_process+0x5b4>)
 800cfd6:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cfd8:	885b      	ldrh	r3, [r3, #2]
 800cfda:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cfdc:	4a97      	ldr	r2, [pc, #604]	; (800d23c <tcp_process+0x5b4>)
 800cfde:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cfe0:	8812      	ldrh	r2, [r2, #0]
 800cfe2:	b292      	uxth	r2, r2
 800cfe4:	9202      	str	r2, [sp, #8]
 800cfe6:	9301      	str	r3, [sp, #4]
 800cfe8:	4b95      	ldr	r3, [pc, #596]	; (800d240 <tcp_process+0x5b8>)
 800cfea:	9300      	str	r3, [sp, #0]
 800cfec:	4b95      	ldr	r3, [pc, #596]	; (800d244 <tcp_process+0x5bc>)
 800cfee:	4602      	mov	r2, r0
 800cff0:	6878      	ldr	r0, [r7, #4]
 800cff2:	f003 f8db 	bl	80101ac <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cffc:	2b05      	cmp	r3, #5
 800cffe:	f200 8215 	bhi.w	800d42c <tcp_process+0x7a4>
          pcb->rtime = 0;
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	2200      	movs	r2, #0
 800d006:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800d008:	6878      	ldr	r0, [r7, #4]
 800d00a:	f002 fea5 	bl	800fd58 <tcp_rexmit_rto>
      break;
 800d00e:	e20d      	b.n	800d42c <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800d010:	4b86      	ldr	r3, [pc, #536]	; (800d22c <tcp_process+0x5a4>)
 800d012:	781b      	ldrb	r3, [r3, #0]
 800d014:	f003 0310 	and.w	r3, r3, #16
 800d018:	2b00      	cmp	r3, #0
 800d01a:	f000 80a1 	beq.w	800d160 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d01e:	4b84      	ldr	r3, [pc, #528]	; (800d230 <tcp_process+0x5a8>)
 800d020:	681a      	ldr	r2, [r3, #0]
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d026:	1ad3      	subs	r3, r2, r3
 800d028:	3b01      	subs	r3, #1
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	db7e      	blt.n	800d12c <tcp_process+0x4a4>
 800d02e:	4b80      	ldr	r3, [pc, #512]	; (800d230 <tcp_process+0x5a8>)
 800d030:	681a      	ldr	r2, [r3, #0]
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d036:	1ad3      	subs	r3, r2, r3
 800d038:	2b00      	cmp	r3, #0
 800d03a:	dc77      	bgt.n	800d12c <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	2204      	movs	r2, #4
 800d040:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d046:	2b00      	cmp	r3, #0
 800d048:	d102      	bne.n	800d050 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800d04a:	23fa      	movs	r3, #250	; 0xfa
 800d04c:	76bb      	strb	r3, [r7, #26]
 800d04e:	e01d      	b.n	800d08c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d054:	699b      	ldr	r3, [r3, #24]
 800d056:	2b00      	cmp	r3, #0
 800d058:	d106      	bne.n	800d068 <tcp_process+0x3e0>
 800d05a:	4b7b      	ldr	r3, [pc, #492]	; (800d248 <tcp_process+0x5c0>)
 800d05c:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800d060:	497a      	ldr	r1, [pc, #488]	; (800d24c <tcp_process+0x5c4>)
 800d062:	487b      	ldr	r0, [pc, #492]	; (800d250 <tcp_process+0x5c8>)
 800d064:	f006 f896 	bl	8013194 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d06c:	699b      	ldr	r3, [r3, #24]
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d00a      	beq.n	800d088 <tcp_process+0x400>
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d076:	699b      	ldr	r3, [r3, #24]
 800d078:	687a      	ldr	r2, [r7, #4]
 800d07a:	6910      	ldr	r0, [r2, #16]
 800d07c:	2200      	movs	r2, #0
 800d07e:	6879      	ldr	r1, [r7, #4]
 800d080:	4798      	blx	r3
 800d082:	4603      	mov	r3, r0
 800d084:	76bb      	strb	r3, [r7, #26]
 800d086:	e001      	b.n	800d08c <tcp_process+0x404>
 800d088:	23f0      	movs	r3, #240	; 0xf0
 800d08a:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800d08c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800d090:	2b00      	cmp	r3, #0
 800d092:	d00a      	beq.n	800d0aa <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800d094:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800d098:	f113 0f0d 	cmn.w	r3, #13
 800d09c:	d002      	beq.n	800d0a4 <tcp_process+0x41c>
              tcp_abort(pcb);
 800d09e:	6878      	ldr	r0, [r7, #4]
 800d0a0:	f7fd fcf0 	bl	800aa84 <tcp_abort>
            }
            return ERR_ABRT;
 800d0a4:	f06f 030c 	mvn.w	r3, #12
 800d0a8:	e1ce      	b.n	800d448 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800d0aa:	6878      	ldr	r0, [r7, #4]
 800d0ac:	f000 fae0 	bl	800d670 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800d0b0:	4b68      	ldr	r3, [pc, #416]	; (800d254 <tcp_process+0x5cc>)
 800d0b2:	881b      	ldrh	r3, [r3, #0]
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d005      	beq.n	800d0c4 <tcp_process+0x43c>
            recv_acked--;
 800d0b8:	4b66      	ldr	r3, [pc, #408]	; (800d254 <tcp_process+0x5cc>)
 800d0ba:	881b      	ldrh	r3, [r3, #0]
 800d0bc:	3b01      	subs	r3, #1
 800d0be:	b29a      	uxth	r2, r3
 800d0c0:	4b64      	ldr	r3, [pc, #400]	; (800d254 <tcp_process+0x5cc>)
 800d0c2:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d0c8:	009a      	lsls	r2, r3, #2
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d0ce:	005b      	lsls	r3, r3, #1
 800d0d0:	f241 111c 	movw	r1, #4380	; 0x111c
 800d0d4:	428b      	cmp	r3, r1
 800d0d6:	bf38      	it	cc
 800d0d8:	460b      	movcc	r3, r1
 800d0da:	429a      	cmp	r2, r3
 800d0dc:	d204      	bcs.n	800d0e8 <tcp_process+0x460>
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d0e2:	009b      	lsls	r3, r3, #2
 800d0e4:	b29b      	uxth	r3, r3
 800d0e6:	e00d      	b.n	800d104 <tcp_process+0x47c>
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d0ec:	005b      	lsls	r3, r3, #1
 800d0ee:	f241 121c 	movw	r2, #4380	; 0x111c
 800d0f2:	4293      	cmp	r3, r2
 800d0f4:	d904      	bls.n	800d100 <tcp_process+0x478>
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d0fa:	005b      	lsls	r3, r3, #1
 800d0fc:	b29b      	uxth	r3, r3
 800d0fe:	e001      	b.n	800d104 <tcp_process+0x47c>
 800d100:	f241 131c 	movw	r3, #4380	; 0x111c
 800d104:	687a      	ldr	r2, [r7, #4]
 800d106:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800d10a:	4b53      	ldr	r3, [pc, #332]	; (800d258 <tcp_process+0x5d0>)
 800d10c:	781b      	ldrb	r3, [r3, #0]
 800d10e:	f003 0320 	and.w	r3, r3, #32
 800d112:	2b00      	cmp	r3, #0
 800d114:	d037      	beq.n	800d186 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	8b5b      	ldrh	r3, [r3, #26]
 800d11a:	f043 0302 	orr.w	r3, r3, #2
 800d11e:	b29a      	uxth	r2, r3
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	2207      	movs	r2, #7
 800d128:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800d12a:	e02c      	b.n	800d186 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d12c:	4b40      	ldr	r3, [pc, #256]	; (800d230 <tcp_process+0x5a8>)
 800d12e:	6819      	ldr	r1, [r3, #0]
 800d130:	4b40      	ldr	r3, [pc, #256]	; (800d234 <tcp_process+0x5ac>)
 800d132:	881b      	ldrh	r3, [r3, #0]
 800d134:	461a      	mov	r2, r3
 800d136:	4b40      	ldr	r3, [pc, #256]	; (800d238 <tcp_process+0x5b0>)
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d13c:	4b3f      	ldr	r3, [pc, #252]	; (800d23c <tcp_process+0x5b4>)
 800d13e:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d140:	885b      	ldrh	r3, [r3, #2]
 800d142:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d144:	4a3d      	ldr	r2, [pc, #244]	; (800d23c <tcp_process+0x5b4>)
 800d146:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d148:	8812      	ldrh	r2, [r2, #0]
 800d14a:	b292      	uxth	r2, r2
 800d14c:	9202      	str	r2, [sp, #8]
 800d14e:	9301      	str	r3, [sp, #4]
 800d150:	4b3b      	ldr	r3, [pc, #236]	; (800d240 <tcp_process+0x5b8>)
 800d152:	9300      	str	r3, [sp, #0]
 800d154:	4b3b      	ldr	r3, [pc, #236]	; (800d244 <tcp_process+0x5bc>)
 800d156:	4602      	mov	r2, r0
 800d158:	6878      	ldr	r0, [r7, #4]
 800d15a:	f003 f827 	bl	80101ac <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800d15e:	e167      	b.n	800d430 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800d160:	4b32      	ldr	r3, [pc, #200]	; (800d22c <tcp_process+0x5a4>)
 800d162:	781b      	ldrb	r3, [r3, #0]
 800d164:	f003 0302 	and.w	r3, r3, #2
 800d168:	2b00      	cmp	r3, #0
 800d16a:	f000 8161 	beq.w	800d430 <tcp_process+0x7a8>
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d172:	1e5a      	subs	r2, r3, #1
 800d174:	4b30      	ldr	r3, [pc, #192]	; (800d238 <tcp_process+0x5b0>)
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	429a      	cmp	r2, r3
 800d17a:	f040 8159 	bne.w	800d430 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800d17e:	6878      	ldr	r0, [r7, #4]
 800d180:	f002 fe0c 	bl	800fd9c <tcp_rexmit>
      break;
 800d184:	e154      	b.n	800d430 <tcp_process+0x7a8>
 800d186:	e153      	b.n	800d430 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800d188:	6878      	ldr	r0, [r7, #4]
 800d18a:	f000 fa71 	bl	800d670 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800d18e:	4b32      	ldr	r3, [pc, #200]	; (800d258 <tcp_process+0x5d0>)
 800d190:	781b      	ldrb	r3, [r3, #0]
 800d192:	f003 0320 	and.w	r3, r3, #32
 800d196:	2b00      	cmp	r3, #0
 800d198:	f000 814c 	beq.w	800d434 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	8b5b      	ldrh	r3, [r3, #26]
 800d1a0:	f043 0302 	orr.w	r3, r3, #2
 800d1a4:	b29a      	uxth	r2, r3
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	2207      	movs	r2, #7
 800d1ae:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d1b0:	e140      	b.n	800d434 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800d1b2:	6878      	ldr	r0, [r7, #4]
 800d1b4:	f000 fa5c 	bl	800d670 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800d1b8:	4b27      	ldr	r3, [pc, #156]	; (800d258 <tcp_process+0x5d0>)
 800d1ba:	781b      	ldrb	r3, [r3, #0]
 800d1bc:	f003 0320 	and.w	r3, r3, #32
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d071      	beq.n	800d2a8 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d1c4:	4b19      	ldr	r3, [pc, #100]	; (800d22c <tcp_process+0x5a4>)
 800d1c6:	781b      	ldrb	r3, [r3, #0]
 800d1c8:	f003 0310 	and.w	r3, r3, #16
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d060      	beq.n	800d292 <tcp_process+0x60a>
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d1d4:	4b16      	ldr	r3, [pc, #88]	; (800d230 <tcp_process+0x5a8>)
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	429a      	cmp	r2, r3
 800d1da:	d15a      	bne.n	800d292 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d156      	bne.n	800d292 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	8b5b      	ldrh	r3, [r3, #26]
 800d1e8:	f043 0302 	orr.w	r3, r3, #2
 800d1ec:	b29a      	uxth	r2, r3
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800d1f2:	6878      	ldr	r0, [r7, #4]
 800d1f4:	f7fe fdbe 	bl	800bd74 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800d1f8:	4b18      	ldr	r3, [pc, #96]	; (800d25c <tcp_process+0x5d4>)
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	687a      	ldr	r2, [r7, #4]
 800d1fe:	429a      	cmp	r2, r3
 800d200:	d105      	bne.n	800d20e <tcp_process+0x586>
 800d202:	4b16      	ldr	r3, [pc, #88]	; (800d25c <tcp_process+0x5d4>)
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	68db      	ldr	r3, [r3, #12]
 800d208:	4a14      	ldr	r2, [pc, #80]	; (800d25c <tcp_process+0x5d4>)
 800d20a:	6013      	str	r3, [r2, #0]
 800d20c:	e02e      	b.n	800d26c <tcp_process+0x5e4>
 800d20e:	4b13      	ldr	r3, [pc, #76]	; (800d25c <tcp_process+0x5d4>)
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	617b      	str	r3, [r7, #20]
 800d214:	e027      	b.n	800d266 <tcp_process+0x5de>
 800d216:	697b      	ldr	r3, [r7, #20]
 800d218:	68db      	ldr	r3, [r3, #12]
 800d21a:	687a      	ldr	r2, [r7, #4]
 800d21c:	429a      	cmp	r2, r3
 800d21e:	d11f      	bne.n	800d260 <tcp_process+0x5d8>
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	68da      	ldr	r2, [r3, #12]
 800d224:	697b      	ldr	r3, [r7, #20]
 800d226:	60da      	str	r2, [r3, #12]
 800d228:	e020      	b.n	800d26c <tcp_process+0x5e4>
 800d22a:	bf00      	nop
 800d22c:	2400011c 	.word	0x2400011c
 800d230:	24000114 	.word	0x24000114
 800d234:	2400011a 	.word	0x2400011a
 800d238:	24000110 	.word	0x24000110
 800d23c:	24000100 	.word	0x24000100
 800d240:	240008f4 	.word	0x240008f4
 800d244:	240008f8 	.word	0x240008f8
 800d248:	08015468 	.word	0x08015468
 800d24c:	08015708 	.word	0x08015708
 800d250:	080154b4 	.word	0x080154b4
 800d254:	24000118 	.word	0x24000118
 800d258:	2400011d 	.word	0x2400011d
 800d25c:	240037d4 	.word	0x240037d4
 800d260:	697b      	ldr	r3, [r7, #20]
 800d262:	68db      	ldr	r3, [r3, #12]
 800d264:	617b      	str	r3, [r7, #20]
 800d266:	697b      	ldr	r3, [r7, #20]
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d1d4      	bne.n	800d216 <tcp_process+0x58e>
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	2200      	movs	r2, #0
 800d270:	60da      	str	r2, [r3, #12]
 800d272:	4b77      	ldr	r3, [pc, #476]	; (800d450 <tcp_process+0x7c8>)
 800d274:	2201      	movs	r2, #1
 800d276:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	220a      	movs	r2, #10
 800d27c:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800d27e:	4b75      	ldr	r3, [pc, #468]	; (800d454 <tcp_process+0x7cc>)
 800d280:	681a      	ldr	r2, [r3, #0]
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	60da      	str	r2, [r3, #12]
 800d286:	4a73      	ldr	r2, [pc, #460]	; (800d454 <tcp_process+0x7cc>)
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	6013      	str	r3, [r2, #0]
 800d28c:	f003 f950 	bl	8010530 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800d290:	e0d2      	b.n	800d438 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	8b5b      	ldrh	r3, [r3, #26]
 800d296:	f043 0302 	orr.w	r3, r3, #2
 800d29a:	b29a      	uxth	r2, r3
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	2208      	movs	r2, #8
 800d2a4:	751a      	strb	r2, [r3, #20]
      break;
 800d2a6:	e0c7      	b.n	800d438 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d2a8:	4b6b      	ldr	r3, [pc, #428]	; (800d458 <tcp_process+0x7d0>)
 800d2aa:	781b      	ldrb	r3, [r3, #0]
 800d2ac:	f003 0310 	and.w	r3, r3, #16
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	f000 80c1 	beq.w	800d438 <tcp_process+0x7b0>
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d2ba:	4b68      	ldr	r3, [pc, #416]	; (800d45c <tcp_process+0x7d4>)
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	429a      	cmp	r2, r3
 800d2c0:	f040 80ba 	bne.w	800d438 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	f040 80b5 	bne.w	800d438 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	2206      	movs	r2, #6
 800d2d2:	751a      	strb	r2, [r3, #20]
      break;
 800d2d4:	e0b0      	b.n	800d438 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800d2d6:	6878      	ldr	r0, [r7, #4]
 800d2d8:	f000 f9ca 	bl	800d670 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800d2dc:	4b60      	ldr	r3, [pc, #384]	; (800d460 <tcp_process+0x7d8>)
 800d2de:	781b      	ldrb	r3, [r3, #0]
 800d2e0:	f003 0320 	and.w	r3, r3, #32
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	f000 80a9 	beq.w	800d43c <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	8b5b      	ldrh	r3, [r3, #26]
 800d2ee:	f043 0302 	orr.w	r3, r3, #2
 800d2f2:	b29a      	uxth	r2, r3
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800d2f8:	6878      	ldr	r0, [r7, #4]
 800d2fa:	f7fe fd3b 	bl	800bd74 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800d2fe:	4b59      	ldr	r3, [pc, #356]	; (800d464 <tcp_process+0x7dc>)
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	687a      	ldr	r2, [r7, #4]
 800d304:	429a      	cmp	r2, r3
 800d306:	d105      	bne.n	800d314 <tcp_process+0x68c>
 800d308:	4b56      	ldr	r3, [pc, #344]	; (800d464 <tcp_process+0x7dc>)
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	68db      	ldr	r3, [r3, #12]
 800d30e:	4a55      	ldr	r2, [pc, #340]	; (800d464 <tcp_process+0x7dc>)
 800d310:	6013      	str	r3, [r2, #0]
 800d312:	e013      	b.n	800d33c <tcp_process+0x6b4>
 800d314:	4b53      	ldr	r3, [pc, #332]	; (800d464 <tcp_process+0x7dc>)
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	613b      	str	r3, [r7, #16]
 800d31a:	e00c      	b.n	800d336 <tcp_process+0x6ae>
 800d31c:	693b      	ldr	r3, [r7, #16]
 800d31e:	68db      	ldr	r3, [r3, #12]
 800d320:	687a      	ldr	r2, [r7, #4]
 800d322:	429a      	cmp	r2, r3
 800d324:	d104      	bne.n	800d330 <tcp_process+0x6a8>
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	68da      	ldr	r2, [r3, #12]
 800d32a:	693b      	ldr	r3, [r7, #16]
 800d32c:	60da      	str	r2, [r3, #12]
 800d32e:	e005      	b.n	800d33c <tcp_process+0x6b4>
 800d330:	693b      	ldr	r3, [r7, #16]
 800d332:	68db      	ldr	r3, [r3, #12]
 800d334:	613b      	str	r3, [r7, #16]
 800d336:	693b      	ldr	r3, [r7, #16]
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d1ef      	bne.n	800d31c <tcp_process+0x694>
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	2200      	movs	r2, #0
 800d340:	60da      	str	r2, [r3, #12]
 800d342:	4b43      	ldr	r3, [pc, #268]	; (800d450 <tcp_process+0x7c8>)
 800d344:	2201      	movs	r2, #1
 800d346:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	220a      	movs	r2, #10
 800d34c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800d34e:	4b41      	ldr	r3, [pc, #260]	; (800d454 <tcp_process+0x7cc>)
 800d350:	681a      	ldr	r2, [r3, #0]
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	60da      	str	r2, [r3, #12]
 800d356:	4a3f      	ldr	r2, [pc, #252]	; (800d454 <tcp_process+0x7cc>)
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	6013      	str	r3, [r2, #0]
 800d35c:	f003 f8e8 	bl	8010530 <tcp_timer_needed>
      }
      break;
 800d360:	e06c      	b.n	800d43c <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800d362:	6878      	ldr	r0, [r7, #4]
 800d364:	f000 f984 	bl	800d670 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800d368:	4b3b      	ldr	r3, [pc, #236]	; (800d458 <tcp_process+0x7d0>)
 800d36a:	781b      	ldrb	r3, [r3, #0]
 800d36c:	f003 0310 	and.w	r3, r3, #16
 800d370:	2b00      	cmp	r3, #0
 800d372:	d065      	beq.n	800d440 <tcp_process+0x7b8>
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d378:	4b38      	ldr	r3, [pc, #224]	; (800d45c <tcp_process+0x7d4>)
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	429a      	cmp	r2, r3
 800d37e:	d15f      	bne.n	800d440 <tcp_process+0x7b8>
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d384:	2b00      	cmp	r3, #0
 800d386:	d15b      	bne.n	800d440 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800d388:	6878      	ldr	r0, [r7, #4]
 800d38a:	f7fe fcf3 	bl	800bd74 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800d38e:	4b35      	ldr	r3, [pc, #212]	; (800d464 <tcp_process+0x7dc>)
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	687a      	ldr	r2, [r7, #4]
 800d394:	429a      	cmp	r2, r3
 800d396:	d105      	bne.n	800d3a4 <tcp_process+0x71c>
 800d398:	4b32      	ldr	r3, [pc, #200]	; (800d464 <tcp_process+0x7dc>)
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	68db      	ldr	r3, [r3, #12]
 800d39e:	4a31      	ldr	r2, [pc, #196]	; (800d464 <tcp_process+0x7dc>)
 800d3a0:	6013      	str	r3, [r2, #0]
 800d3a2:	e013      	b.n	800d3cc <tcp_process+0x744>
 800d3a4:	4b2f      	ldr	r3, [pc, #188]	; (800d464 <tcp_process+0x7dc>)
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	60fb      	str	r3, [r7, #12]
 800d3aa:	e00c      	b.n	800d3c6 <tcp_process+0x73e>
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	68db      	ldr	r3, [r3, #12]
 800d3b0:	687a      	ldr	r2, [r7, #4]
 800d3b2:	429a      	cmp	r2, r3
 800d3b4:	d104      	bne.n	800d3c0 <tcp_process+0x738>
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	68da      	ldr	r2, [r3, #12]
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	60da      	str	r2, [r3, #12]
 800d3be:	e005      	b.n	800d3cc <tcp_process+0x744>
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	68db      	ldr	r3, [r3, #12]
 800d3c4:	60fb      	str	r3, [r7, #12]
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d1ef      	bne.n	800d3ac <tcp_process+0x724>
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	2200      	movs	r2, #0
 800d3d0:	60da      	str	r2, [r3, #12]
 800d3d2:	4b1f      	ldr	r3, [pc, #124]	; (800d450 <tcp_process+0x7c8>)
 800d3d4:	2201      	movs	r2, #1
 800d3d6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	220a      	movs	r2, #10
 800d3dc:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800d3de:	4b1d      	ldr	r3, [pc, #116]	; (800d454 <tcp_process+0x7cc>)
 800d3e0:	681a      	ldr	r2, [r3, #0]
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	60da      	str	r2, [r3, #12]
 800d3e6:	4a1b      	ldr	r2, [pc, #108]	; (800d454 <tcp_process+0x7cc>)
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	6013      	str	r3, [r2, #0]
 800d3ec:	f003 f8a0 	bl	8010530 <tcp_timer_needed>
      }
      break;
 800d3f0:	e026      	b.n	800d440 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800d3f2:	6878      	ldr	r0, [r7, #4]
 800d3f4:	f000 f93c 	bl	800d670 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800d3f8:	4b17      	ldr	r3, [pc, #92]	; (800d458 <tcp_process+0x7d0>)
 800d3fa:	781b      	ldrb	r3, [r3, #0]
 800d3fc:	f003 0310 	and.w	r3, r3, #16
 800d400:	2b00      	cmp	r3, #0
 800d402:	d01f      	beq.n	800d444 <tcp_process+0x7bc>
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d408:	4b14      	ldr	r3, [pc, #80]	; (800d45c <tcp_process+0x7d4>)
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	429a      	cmp	r2, r3
 800d40e:	d119      	bne.n	800d444 <tcp_process+0x7bc>
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d414:	2b00      	cmp	r3, #0
 800d416:	d115      	bne.n	800d444 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800d418:	4b11      	ldr	r3, [pc, #68]	; (800d460 <tcp_process+0x7d8>)
 800d41a:	781b      	ldrb	r3, [r3, #0]
 800d41c:	f043 0310 	orr.w	r3, r3, #16
 800d420:	b2da      	uxtb	r2, r3
 800d422:	4b0f      	ldr	r3, [pc, #60]	; (800d460 <tcp_process+0x7d8>)
 800d424:	701a      	strb	r2, [r3, #0]
      }
      break;
 800d426:	e00d      	b.n	800d444 <tcp_process+0x7bc>
    default:
      break;
 800d428:	bf00      	nop
 800d42a:	e00c      	b.n	800d446 <tcp_process+0x7be>
      break;
 800d42c:	bf00      	nop
 800d42e:	e00a      	b.n	800d446 <tcp_process+0x7be>
      break;
 800d430:	bf00      	nop
 800d432:	e008      	b.n	800d446 <tcp_process+0x7be>
      break;
 800d434:	bf00      	nop
 800d436:	e006      	b.n	800d446 <tcp_process+0x7be>
      break;
 800d438:	bf00      	nop
 800d43a:	e004      	b.n	800d446 <tcp_process+0x7be>
      break;
 800d43c:	bf00      	nop
 800d43e:	e002      	b.n	800d446 <tcp_process+0x7be>
      break;
 800d440:	bf00      	nop
 800d442:	e000      	b.n	800d446 <tcp_process+0x7be>
      break;
 800d444:	bf00      	nop
  }
  return ERR_OK;
 800d446:	2300      	movs	r3, #0
}
 800d448:	4618      	mov	r0, r3
 800d44a:	3724      	adds	r7, #36	; 0x24
 800d44c:	46bd      	mov	sp, r7
 800d44e:	bd90      	pop	{r4, r7, pc}
 800d450:	240037d0 	.word	0x240037d0
 800d454:	240037e4 	.word	0x240037e4
 800d458:	2400011c 	.word	0x2400011c
 800d45c:	24000114 	.word	0x24000114
 800d460:	2400011d 	.word	0x2400011d
 800d464:	240037d4 	.word	0x240037d4

0800d468 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800d468:	b590      	push	{r4, r7, lr}
 800d46a:	b085      	sub	sp, #20
 800d46c:	af00      	add	r7, sp, #0
 800d46e:	6078      	str	r0, [r7, #4]
 800d470:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	2b00      	cmp	r3, #0
 800d476:	d106      	bne.n	800d486 <tcp_oos_insert_segment+0x1e>
 800d478:	4b3b      	ldr	r3, [pc, #236]	; (800d568 <tcp_oos_insert_segment+0x100>)
 800d47a:	f240 421f 	movw	r2, #1055	; 0x41f
 800d47e:	493b      	ldr	r1, [pc, #236]	; (800d56c <tcp_oos_insert_segment+0x104>)
 800d480:	483b      	ldr	r0, [pc, #236]	; (800d570 <tcp_oos_insert_segment+0x108>)
 800d482:	f005 fe87 	bl	8013194 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	68db      	ldr	r3, [r3, #12]
 800d48a:	899b      	ldrh	r3, [r3, #12]
 800d48c:	b29b      	uxth	r3, r3
 800d48e:	4618      	mov	r0, r3
 800d490:	f7fb f93a 	bl	8008708 <lwip_htons>
 800d494:	4603      	mov	r3, r0
 800d496:	b2db      	uxtb	r3, r3
 800d498:	f003 0301 	and.w	r3, r3, #1
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d028      	beq.n	800d4f2 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800d4a0:	6838      	ldr	r0, [r7, #0]
 800d4a2:	f7fe f97f 	bl	800b7a4 <tcp_segs_free>
    next = NULL;
 800d4a6:	2300      	movs	r3, #0
 800d4a8:	603b      	str	r3, [r7, #0]
 800d4aa:	e056      	b.n	800d55a <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800d4ac:	683b      	ldr	r3, [r7, #0]
 800d4ae:	68db      	ldr	r3, [r3, #12]
 800d4b0:	899b      	ldrh	r3, [r3, #12]
 800d4b2:	b29b      	uxth	r3, r3
 800d4b4:	4618      	mov	r0, r3
 800d4b6:	f7fb f927 	bl	8008708 <lwip_htons>
 800d4ba:	4603      	mov	r3, r0
 800d4bc:	b2db      	uxtb	r3, r3
 800d4be:	f003 0301 	and.w	r3, r3, #1
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d00d      	beq.n	800d4e2 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	68db      	ldr	r3, [r3, #12]
 800d4ca:	899b      	ldrh	r3, [r3, #12]
 800d4cc:	b29c      	uxth	r4, r3
 800d4ce:	2001      	movs	r0, #1
 800d4d0:	f7fb f91a 	bl	8008708 <lwip_htons>
 800d4d4:	4603      	mov	r3, r0
 800d4d6:	461a      	mov	r2, r3
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	68db      	ldr	r3, [r3, #12]
 800d4dc:	4322      	orrs	r2, r4
 800d4de:	b292      	uxth	r2, r2
 800d4e0:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800d4e2:	683b      	ldr	r3, [r7, #0]
 800d4e4:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800d4e6:	683b      	ldr	r3, [r7, #0]
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800d4ec:	68f8      	ldr	r0, [r7, #12]
 800d4ee:	f7fe f96e 	bl	800b7ce <tcp_seg_free>
    while (next &&
 800d4f2:	683b      	ldr	r3, [r7, #0]
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d00e      	beq.n	800d516 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	891b      	ldrh	r3, [r3, #8]
 800d4fc:	461a      	mov	r2, r3
 800d4fe:	4b1d      	ldr	r3, [pc, #116]	; (800d574 <tcp_oos_insert_segment+0x10c>)
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	441a      	add	r2, r3
 800d504:	683b      	ldr	r3, [r7, #0]
 800d506:	68db      	ldr	r3, [r3, #12]
 800d508:	685b      	ldr	r3, [r3, #4]
 800d50a:	6839      	ldr	r1, [r7, #0]
 800d50c:	8909      	ldrh	r1, [r1, #8]
 800d50e:	440b      	add	r3, r1
 800d510:	1ad3      	subs	r3, r2, r3
    while (next &&
 800d512:	2b00      	cmp	r3, #0
 800d514:	daca      	bge.n	800d4ac <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800d516:	683b      	ldr	r3, [r7, #0]
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d01e      	beq.n	800d55a <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	891b      	ldrh	r3, [r3, #8]
 800d520:	461a      	mov	r2, r3
 800d522:	4b14      	ldr	r3, [pc, #80]	; (800d574 <tcp_oos_insert_segment+0x10c>)
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	441a      	add	r2, r3
 800d528:	683b      	ldr	r3, [r7, #0]
 800d52a:	68db      	ldr	r3, [r3, #12]
 800d52c:	685b      	ldr	r3, [r3, #4]
 800d52e:	1ad3      	subs	r3, r2, r3
    if (next &&
 800d530:	2b00      	cmp	r3, #0
 800d532:	dd12      	ble.n	800d55a <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800d534:	683b      	ldr	r3, [r7, #0]
 800d536:	68db      	ldr	r3, [r3, #12]
 800d538:	685b      	ldr	r3, [r3, #4]
 800d53a:	b29a      	uxth	r2, r3
 800d53c:	4b0d      	ldr	r3, [pc, #52]	; (800d574 <tcp_oos_insert_segment+0x10c>)
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	b29b      	uxth	r3, r3
 800d542:	1ad3      	subs	r3, r2, r3
 800d544:	b29a      	uxth	r2, r3
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	685a      	ldr	r2, [r3, #4]
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	891b      	ldrh	r3, [r3, #8]
 800d552:	4619      	mov	r1, r3
 800d554:	4610      	mov	r0, r2
 800d556:	f7fc fb77 	bl	8009c48 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	683a      	ldr	r2, [r7, #0]
 800d55e:	601a      	str	r2, [r3, #0]
}
 800d560:	bf00      	nop
 800d562:	3714      	adds	r7, #20
 800d564:	46bd      	mov	sp, r7
 800d566:	bd90      	pop	{r4, r7, pc}
 800d568:	08015468 	.word	0x08015468
 800d56c:	08015728 	.word	0x08015728
 800d570:	080154b4 	.word	0x080154b4
 800d574:	24000110 	.word	0x24000110

0800d578 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800d578:	b5b0      	push	{r4, r5, r7, lr}
 800d57a:	b086      	sub	sp, #24
 800d57c:	af00      	add	r7, sp, #0
 800d57e:	60f8      	str	r0, [r7, #12]
 800d580:	60b9      	str	r1, [r7, #8]
 800d582:	607a      	str	r2, [r7, #4]
 800d584:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800d586:	e03e      	b.n	800d606 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800d588:	68bb      	ldr	r3, [r7, #8]
 800d58a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800d58c:	68bb      	ldr	r3, [r7, #8]
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800d592:	697b      	ldr	r3, [r7, #20]
 800d594:	685b      	ldr	r3, [r3, #4]
 800d596:	4618      	mov	r0, r3
 800d598:	f7fc fd64 	bl	800a064 <pbuf_clen>
 800d59c:	4603      	mov	r3, r0
 800d59e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d5a6:	8a7a      	ldrh	r2, [r7, #18]
 800d5a8:	429a      	cmp	r2, r3
 800d5aa:	d906      	bls.n	800d5ba <tcp_free_acked_segments+0x42>
 800d5ac:	4b2a      	ldr	r3, [pc, #168]	; (800d658 <tcp_free_acked_segments+0xe0>)
 800d5ae:	f240 4257 	movw	r2, #1111	; 0x457
 800d5b2:	492a      	ldr	r1, [pc, #168]	; (800d65c <tcp_free_acked_segments+0xe4>)
 800d5b4:	482a      	ldr	r0, [pc, #168]	; (800d660 <tcp_free_acked_segments+0xe8>)
 800d5b6:	f005 fded 	bl	8013194 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800d5c0:	8a7b      	ldrh	r3, [r7, #18]
 800d5c2:	1ad3      	subs	r3, r2, r3
 800d5c4:	b29a      	uxth	r2, r3
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800d5cc:	697b      	ldr	r3, [r7, #20]
 800d5ce:	891a      	ldrh	r2, [r3, #8]
 800d5d0:	4b24      	ldr	r3, [pc, #144]	; (800d664 <tcp_free_acked_segments+0xec>)
 800d5d2:	881b      	ldrh	r3, [r3, #0]
 800d5d4:	4413      	add	r3, r2
 800d5d6:	b29a      	uxth	r2, r3
 800d5d8:	4b22      	ldr	r3, [pc, #136]	; (800d664 <tcp_free_acked_segments+0xec>)
 800d5da:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800d5dc:	6978      	ldr	r0, [r7, #20]
 800d5de:	f7fe f8f6 	bl	800b7ce <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d00c      	beq.n	800d606 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800d5ec:	68bb      	ldr	r3, [r7, #8]
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d109      	bne.n	800d606 <tcp_free_acked_segments+0x8e>
 800d5f2:	683b      	ldr	r3, [r7, #0]
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d106      	bne.n	800d606 <tcp_free_acked_segments+0x8e>
 800d5f8:	4b17      	ldr	r3, [pc, #92]	; (800d658 <tcp_free_acked_segments+0xe0>)
 800d5fa:	f240 4261 	movw	r2, #1121	; 0x461
 800d5fe:	491a      	ldr	r1, [pc, #104]	; (800d668 <tcp_free_acked_segments+0xf0>)
 800d600:	4817      	ldr	r0, [pc, #92]	; (800d660 <tcp_free_acked_segments+0xe8>)
 800d602:	f005 fdc7 	bl	8013194 <iprintf>
  while (seg_list != NULL &&
 800d606:	68bb      	ldr	r3, [r7, #8]
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d020      	beq.n	800d64e <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800d60c:	68bb      	ldr	r3, [r7, #8]
 800d60e:	68db      	ldr	r3, [r3, #12]
 800d610:	685b      	ldr	r3, [r3, #4]
 800d612:	4618      	mov	r0, r3
 800d614:	f7fb f88d 	bl	8008732 <lwip_htonl>
 800d618:	4604      	mov	r4, r0
 800d61a:	68bb      	ldr	r3, [r7, #8]
 800d61c:	891b      	ldrh	r3, [r3, #8]
 800d61e:	461d      	mov	r5, r3
 800d620:	68bb      	ldr	r3, [r7, #8]
 800d622:	68db      	ldr	r3, [r3, #12]
 800d624:	899b      	ldrh	r3, [r3, #12]
 800d626:	b29b      	uxth	r3, r3
 800d628:	4618      	mov	r0, r3
 800d62a:	f7fb f86d 	bl	8008708 <lwip_htons>
 800d62e:	4603      	mov	r3, r0
 800d630:	b2db      	uxtb	r3, r3
 800d632:	f003 0303 	and.w	r3, r3, #3
 800d636:	2b00      	cmp	r3, #0
 800d638:	d001      	beq.n	800d63e <tcp_free_acked_segments+0xc6>
 800d63a:	2301      	movs	r3, #1
 800d63c:	e000      	b.n	800d640 <tcp_free_acked_segments+0xc8>
 800d63e:	2300      	movs	r3, #0
 800d640:	442b      	add	r3, r5
 800d642:	18e2      	adds	r2, r4, r3
 800d644:	4b09      	ldr	r3, [pc, #36]	; (800d66c <tcp_free_acked_segments+0xf4>)
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	dd9c      	ble.n	800d588 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800d64e:	68bb      	ldr	r3, [r7, #8]
}
 800d650:	4618      	mov	r0, r3
 800d652:	3718      	adds	r7, #24
 800d654:	46bd      	mov	sp, r7
 800d656:	bdb0      	pop	{r4, r5, r7, pc}
 800d658:	08015468 	.word	0x08015468
 800d65c:	08015750 	.word	0x08015750
 800d660:	080154b4 	.word	0x080154b4
 800d664:	24000118 	.word	0x24000118
 800d668:	08015778 	.word	0x08015778
 800d66c:	24000114 	.word	0x24000114

0800d670 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800d670:	b5b0      	push	{r4, r5, r7, lr}
 800d672:	b094      	sub	sp, #80	; 0x50
 800d674:	af00      	add	r7, sp, #0
 800d676:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800d678:	2300      	movs	r3, #0
 800d67a:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d106      	bne.n	800d690 <tcp_receive+0x20>
 800d682:	4ba6      	ldr	r3, [pc, #664]	; (800d91c <tcp_receive+0x2ac>)
 800d684:	f240 427b 	movw	r2, #1147	; 0x47b
 800d688:	49a5      	ldr	r1, [pc, #660]	; (800d920 <tcp_receive+0x2b0>)
 800d68a:	48a6      	ldr	r0, [pc, #664]	; (800d924 <tcp_receive+0x2b4>)
 800d68c:	f005 fd82 	bl	8013194 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	7d1b      	ldrb	r3, [r3, #20]
 800d694:	2b03      	cmp	r3, #3
 800d696:	d806      	bhi.n	800d6a6 <tcp_receive+0x36>
 800d698:	4ba0      	ldr	r3, [pc, #640]	; (800d91c <tcp_receive+0x2ac>)
 800d69a:	f240 427c 	movw	r2, #1148	; 0x47c
 800d69e:	49a2      	ldr	r1, [pc, #648]	; (800d928 <tcp_receive+0x2b8>)
 800d6a0:	48a0      	ldr	r0, [pc, #640]	; (800d924 <tcp_receive+0x2b4>)
 800d6a2:	f005 fd77 	bl	8013194 <iprintf>

  if (flags & TCP_ACK) {
 800d6a6:	4ba1      	ldr	r3, [pc, #644]	; (800d92c <tcp_receive+0x2bc>)
 800d6a8:	781b      	ldrb	r3, [r3, #0]
 800d6aa:	f003 0310 	and.w	r3, r3, #16
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	f000 8263 	beq.w	800db7a <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d6ba:	461a      	mov	r2, r3
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d6c0:	4413      	add	r3, r2
 800d6c2:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d6c8:	4b99      	ldr	r3, [pc, #612]	; (800d930 <tcp_receive+0x2c0>)
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	1ad3      	subs	r3, r2, r3
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	db1b      	blt.n	800d70a <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d6d6:	4b96      	ldr	r3, [pc, #600]	; (800d930 <tcp_receive+0x2c0>)
 800d6d8:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800d6da:	429a      	cmp	r2, r3
 800d6dc:	d106      	bne.n	800d6ec <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d6e2:	4b94      	ldr	r3, [pc, #592]	; (800d934 <tcp_receive+0x2c4>)
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	1ad3      	subs	r3, r2, r3
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	db0e      	blt.n	800d70a <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d6f0:	4b90      	ldr	r3, [pc, #576]	; (800d934 <tcp_receive+0x2c4>)
 800d6f2:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800d6f4:	429a      	cmp	r2, r3
 800d6f6:	d125      	bne.n	800d744 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800d6f8:	4b8f      	ldr	r3, [pc, #572]	; (800d938 <tcp_receive+0x2c8>)
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	89db      	ldrh	r3, [r3, #14]
 800d6fe:	b29a      	uxth	r2, r3
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d706:	429a      	cmp	r2, r3
 800d708:	d91c      	bls.n	800d744 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800d70a:	4b8b      	ldr	r3, [pc, #556]	; (800d938 <tcp_receive+0x2c8>)
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	89db      	ldrh	r3, [r3, #14]
 800d710:	b29a      	uxth	r2, r3
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d724:	429a      	cmp	r2, r3
 800d726:	d205      	bcs.n	800d734 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800d734:	4b7e      	ldr	r3, [pc, #504]	; (800d930 <tcp_receive+0x2c0>)
 800d736:	681a      	ldr	r2, [r3, #0]
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800d73c:	4b7d      	ldr	r3, [pc, #500]	; (800d934 <tcp_receive+0x2c4>)
 800d73e:	681a      	ldr	r2, [r3, #0]
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800d744:	4b7b      	ldr	r3, [pc, #492]	; (800d934 <tcp_receive+0x2c4>)
 800d746:	681a      	ldr	r2, [r3, #0]
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d74c:	1ad3      	subs	r3, r2, r3
 800d74e:	2b00      	cmp	r3, #0
 800d750:	dc58      	bgt.n	800d804 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800d752:	4b7a      	ldr	r3, [pc, #488]	; (800d93c <tcp_receive+0x2cc>)
 800d754:	881b      	ldrh	r3, [r3, #0]
 800d756:	2b00      	cmp	r3, #0
 800d758:	d14b      	bne.n	800d7f2 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d75e:	687a      	ldr	r2, [r7, #4]
 800d760:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800d764:	4413      	add	r3, r2
 800d766:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d768:	429a      	cmp	r2, r3
 800d76a:	d142      	bne.n	800d7f2 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d772:	2b00      	cmp	r3, #0
 800d774:	db3d      	blt.n	800d7f2 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d77a:	4b6e      	ldr	r3, [pc, #440]	; (800d934 <tcp_receive+0x2c4>)
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	429a      	cmp	r2, r3
 800d780:	d137      	bne.n	800d7f2 <tcp_receive+0x182>
              found_dupack = 1;
 800d782:	2301      	movs	r3, #1
 800d784:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d78c:	2bff      	cmp	r3, #255	; 0xff
 800d78e:	d007      	beq.n	800d7a0 <tcp_receive+0x130>
                ++pcb->dupacks;
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d796:	3301      	adds	r3, #1
 800d798:	b2da      	uxtb	r2, r3
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d7a6:	2b03      	cmp	r3, #3
 800d7a8:	d91b      	bls.n	800d7e2 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d7b4:	4413      	add	r3, r2
 800d7b6:	b29a      	uxth	r2, r3
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d7be:	429a      	cmp	r2, r3
 800d7c0:	d30a      	bcc.n	800d7d8 <tcp_receive+0x168>
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d7cc:	4413      	add	r3, r2
 800d7ce:	b29a      	uxth	r2, r3
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800d7d6:	e004      	b.n	800d7e2 <tcp_receive+0x172>
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d7de:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d7e8:	2b02      	cmp	r3, #2
 800d7ea:	d902      	bls.n	800d7f2 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800d7ec:	6878      	ldr	r0, [r7, #4]
 800d7ee:	f002 fb41 	bl	800fe74 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800d7f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	f040 8160 	bne.w	800daba <tcp_receive+0x44a>
        pcb->dupacks = 0;
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	2200      	movs	r2, #0
 800d7fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d802:	e15a      	b.n	800daba <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d804:	4b4b      	ldr	r3, [pc, #300]	; (800d934 <tcp_receive+0x2c4>)
 800d806:	681a      	ldr	r2, [r3, #0]
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d80c:	1ad3      	subs	r3, r2, r3
 800d80e:	3b01      	subs	r3, #1
 800d810:	2b00      	cmp	r3, #0
 800d812:	f2c0 814d 	blt.w	800dab0 <tcp_receive+0x440>
 800d816:	4b47      	ldr	r3, [pc, #284]	; (800d934 <tcp_receive+0x2c4>)
 800d818:	681a      	ldr	r2, [r3, #0]
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d81e:	1ad3      	subs	r3, r2, r3
 800d820:	2b00      	cmp	r3, #0
 800d822:	f300 8145 	bgt.w	800dab0 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	8b5b      	ldrh	r3, [r3, #26]
 800d82a:	f003 0304 	and.w	r3, r3, #4
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d010      	beq.n	800d854 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	8b5b      	ldrh	r3, [r3, #26]
 800d836:	f023 0304 	bic.w	r3, r3, #4
 800d83a:	b29a      	uxth	r2, r3
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	2200      	movs	r2, #0
 800d850:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	2200      	movs	r2, #0
 800d858:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d862:	10db      	asrs	r3, r3, #3
 800d864:	b21b      	sxth	r3, r3
 800d866:	b29a      	uxth	r2, r3
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d86e:	b29b      	uxth	r3, r3
 800d870:	4413      	add	r3, r2
 800d872:	b29b      	uxth	r3, r3
 800d874:	b21a      	sxth	r2, r3
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800d87c:	4b2d      	ldr	r3, [pc, #180]	; (800d934 <tcp_receive+0x2c4>)
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	b29a      	uxth	r2, r3
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d886:	b29b      	uxth	r3, r3
 800d888:	1ad3      	subs	r3, r2, r3
 800d88a:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	2200      	movs	r2, #0
 800d890:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800d894:	4b27      	ldr	r3, [pc, #156]	; (800d934 <tcp_receive+0x2c4>)
 800d896:	681a      	ldr	r2, [r3, #0]
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	7d1b      	ldrb	r3, [r3, #20]
 800d8a0:	2b03      	cmp	r3, #3
 800d8a2:	f240 8096 	bls.w	800d9d2 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800d8b2:	429a      	cmp	r2, r3
 800d8b4:	d244      	bcs.n	800d940 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	8b5b      	ldrh	r3, [r3, #26]
 800d8ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d001      	beq.n	800d8c6 <tcp_receive+0x256>
 800d8c2:	2301      	movs	r3, #1
 800d8c4:	e000      	b.n	800d8c8 <tcp_receive+0x258>
 800d8c6:	2302      	movs	r3, #2
 800d8c8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800d8cc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800d8d0:	b29a      	uxth	r2, r3
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d8d6:	fb12 f303 	smulbb	r3, r2, r3
 800d8da:	b29b      	uxth	r3, r3
 800d8dc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d8de:	4293      	cmp	r3, r2
 800d8e0:	bf28      	it	cs
 800d8e2:	4613      	movcs	r3, r2
 800d8e4:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d8ec:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800d8ee:	4413      	add	r3, r2
 800d8f0:	b29a      	uxth	r2, r3
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d8f8:	429a      	cmp	r2, r3
 800d8fa:	d309      	bcc.n	800d910 <tcp_receive+0x2a0>
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d902:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800d904:	4413      	add	r3, r2
 800d906:	b29a      	uxth	r2, r3
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800d90e:	e060      	b.n	800d9d2 <tcp_receive+0x362>
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d916:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800d91a:	e05a      	b.n	800d9d2 <tcp_receive+0x362>
 800d91c:	08015468 	.word	0x08015468
 800d920:	08015798 	.word	0x08015798
 800d924:	080154b4 	.word	0x080154b4
 800d928:	080157b4 	.word	0x080157b4
 800d92c:	2400011c 	.word	0x2400011c
 800d930:	24000110 	.word	0x24000110
 800d934:	24000114 	.word	0x24000114
 800d938:	24000100 	.word	0x24000100
 800d93c:	2400011a 	.word	0x2400011a
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800d946:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d948:	4413      	add	r3, r2
 800d94a:	b29a      	uxth	r2, r3
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d952:	429a      	cmp	r2, r3
 800d954:	d309      	bcc.n	800d96a <tcp_receive+0x2fa>
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800d95c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d95e:	4413      	add	r3, r2
 800d960:	b29a      	uxth	r2, r3
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800d968:	e004      	b.n	800d974 <tcp_receive+0x304>
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d970:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d980:	429a      	cmp	r2, r3
 800d982:	d326      	bcc.n	800d9d2 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d990:	1ad3      	subs	r3, r2, r3
 800d992:	b29a      	uxth	r2, r3
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d9a4:	4413      	add	r3, r2
 800d9a6:	b29a      	uxth	r2, r3
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d9ae:	429a      	cmp	r2, r3
 800d9b0:	d30a      	bcc.n	800d9c8 <tcp_receive+0x358>
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d9bc:	4413      	add	r3, r2
 800d9be:	b29a      	uxth	r2, r3
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800d9c6:	e004      	b.n	800d9d2 <tcp_receive+0x362>
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d9ce:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d9da:	4a98      	ldr	r2, [pc, #608]	; (800dc3c <tcp_receive+0x5cc>)
 800d9dc:	6878      	ldr	r0, [r7, #4]
 800d9de:	f7ff fdcb 	bl	800d578 <tcp_free_acked_segments>
 800d9e2:	4602      	mov	r2, r0
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d9f0:	4a93      	ldr	r2, [pc, #588]	; (800dc40 <tcp_receive+0x5d0>)
 800d9f2:	6878      	ldr	r0, [r7, #4]
 800d9f4:	f7ff fdc0 	bl	800d578 <tcp_free_acked_segments>
 800d9f8:	4602      	mov	r2, r0
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da02:	2b00      	cmp	r3, #0
 800da04:	d104      	bne.n	800da10 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800da0c:	861a      	strh	r2, [r3, #48]	; 0x30
 800da0e:	e002      	b.n	800da16 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	2200      	movs	r2, #0
 800da14:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	2200      	movs	r2, #0
 800da1a:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da20:	2b00      	cmp	r3, #0
 800da22:	d103      	bne.n	800da2c <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	2200      	movs	r2, #0
 800da28:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800da32:	4b84      	ldr	r3, [pc, #528]	; (800dc44 <tcp_receive+0x5d4>)
 800da34:	881b      	ldrh	r3, [r3, #0]
 800da36:	4413      	add	r3, r2
 800da38:	b29a      	uxth	r2, r3
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	8b5b      	ldrh	r3, [r3, #26]
 800da44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d035      	beq.n	800dab8 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da50:	2b00      	cmp	r3, #0
 800da52:	d118      	bne.n	800da86 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d00c      	beq.n	800da76 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da64:	68db      	ldr	r3, [r3, #12]
 800da66:	685b      	ldr	r3, [r3, #4]
 800da68:	4618      	mov	r0, r3
 800da6a:	f7fa fe62 	bl	8008732 <lwip_htonl>
 800da6e:	4603      	mov	r3, r0
 800da70:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800da72:	2b00      	cmp	r3, #0
 800da74:	dc20      	bgt.n	800dab8 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	8b5b      	ldrh	r3, [r3, #26]
 800da7a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800da7e:	b29a      	uxth	r2, r3
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800da84:	e018      	b.n	800dab8 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da8e:	68db      	ldr	r3, [r3, #12]
 800da90:	685b      	ldr	r3, [r3, #4]
 800da92:	4618      	mov	r0, r3
 800da94:	f7fa fe4d 	bl	8008732 <lwip_htonl>
 800da98:	4603      	mov	r3, r0
 800da9a:	1ae3      	subs	r3, r4, r3
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	dc0b      	bgt.n	800dab8 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	8b5b      	ldrh	r3, [r3, #26]
 800daa4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800daa8:	b29a      	uxth	r2, r3
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800daae:	e003      	b.n	800dab8 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800dab0:	6878      	ldr	r0, [r7, #4]
 800dab2:	f002 fbcd 	bl	8010250 <tcp_send_empty_ack>
 800dab6:	e000      	b.n	800daba <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800dab8:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d05b      	beq.n	800db7a <tcp_receive+0x50a>
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dac6:	4b60      	ldr	r3, [pc, #384]	; (800dc48 <tcp_receive+0x5d8>)
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	1ad3      	subs	r3, r2, r3
 800dacc:	2b00      	cmp	r3, #0
 800dace:	da54      	bge.n	800db7a <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800dad0:	4b5e      	ldr	r3, [pc, #376]	; (800dc4c <tcp_receive+0x5dc>)
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	b29a      	uxth	r2, r3
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dada:	b29b      	uxth	r3, r3
 800dadc:	1ad3      	subs	r3, r2, r3
 800dade:	b29b      	uxth	r3, r3
 800dae0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800dae4:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800daee:	10db      	asrs	r3, r3, #3
 800daf0:	b21b      	sxth	r3, r3
 800daf2:	b29b      	uxth	r3, r3
 800daf4:	1ad3      	subs	r3, r2, r3
 800daf6:	b29b      	uxth	r3, r3
 800daf8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800db02:	b29a      	uxth	r2, r3
 800db04:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800db08:	4413      	add	r3, r2
 800db0a:	b29b      	uxth	r3, r3
 800db0c:	b21a      	sxth	r2, r3
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800db12:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800db16:	2b00      	cmp	r3, #0
 800db18:	da05      	bge.n	800db26 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 800db1a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800db1e:	425b      	negs	r3, r3
 800db20:	b29b      	uxth	r3, r3
 800db22:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800db26:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800db30:	109b      	asrs	r3, r3, #2
 800db32:	b21b      	sxth	r3, r3
 800db34:	b29b      	uxth	r3, r3
 800db36:	1ad3      	subs	r3, r2, r3
 800db38:	b29b      	uxth	r3, r3
 800db3a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800db44:	b29a      	uxth	r2, r3
 800db46:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800db4a:	4413      	add	r3, r2
 800db4c:	b29b      	uxth	r3, r3
 800db4e:	b21a      	sxth	r2, r3
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800db5a:	10db      	asrs	r3, r3, #3
 800db5c:	b21b      	sxth	r3, r3
 800db5e:	b29a      	uxth	r2, r3
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800db66:	b29b      	uxth	r3, r3
 800db68:	4413      	add	r3, r2
 800db6a:	b29b      	uxth	r3, r3
 800db6c:	b21a      	sxth	r2, r3
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	2200      	movs	r2, #0
 800db78:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800db7a:	4b35      	ldr	r3, [pc, #212]	; (800dc50 <tcp_receive+0x5e0>)
 800db7c:	881b      	ldrh	r3, [r3, #0]
 800db7e:	2b00      	cmp	r3, #0
 800db80:	f000 84e1 	beq.w	800e546 <tcp_receive+0xed6>
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	7d1b      	ldrb	r3, [r3, #20]
 800db88:	2b06      	cmp	r3, #6
 800db8a:	f200 84dc 	bhi.w	800e546 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800db92:	4b30      	ldr	r3, [pc, #192]	; (800dc54 <tcp_receive+0x5e4>)
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	1ad3      	subs	r3, r2, r3
 800db98:	3b01      	subs	r3, #1
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	f2c0 808e 	blt.w	800dcbc <tcp_receive+0x64c>
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dba4:	4b2a      	ldr	r3, [pc, #168]	; (800dc50 <tcp_receive+0x5e0>)
 800dba6:	881b      	ldrh	r3, [r3, #0]
 800dba8:	4619      	mov	r1, r3
 800dbaa:	4b2a      	ldr	r3, [pc, #168]	; (800dc54 <tcp_receive+0x5e4>)
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	440b      	add	r3, r1
 800dbb0:	1ad3      	subs	r3, r2, r3
 800dbb2:	3301      	adds	r3, #1
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	f300 8081 	bgt.w	800dcbc <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800dbba:	4b27      	ldr	r3, [pc, #156]	; (800dc58 <tcp_receive+0x5e8>)
 800dbbc:	685b      	ldr	r3, [r3, #4]
 800dbbe:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dbc4:	4b23      	ldr	r3, [pc, #140]	; (800dc54 <tcp_receive+0x5e4>)
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	1ad3      	subs	r3, r2, r3
 800dbca:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800dbcc:	4b22      	ldr	r3, [pc, #136]	; (800dc58 <tcp_receive+0x5e8>)
 800dbce:	685b      	ldr	r3, [r3, #4]
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d106      	bne.n	800dbe2 <tcp_receive+0x572>
 800dbd4:	4b21      	ldr	r3, [pc, #132]	; (800dc5c <tcp_receive+0x5ec>)
 800dbd6:	f240 5294 	movw	r2, #1428	; 0x594
 800dbda:	4921      	ldr	r1, [pc, #132]	; (800dc60 <tcp_receive+0x5f0>)
 800dbdc:	4821      	ldr	r0, [pc, #132]	; (800dc64 <tcp_receive+0x5f4>)
 800dbde:	f005 fad9 	bl	8013194 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800dbe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbe4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800dbe8:	4293      	cmp	r3, r2
 800dbea:	d906      	bls.n	800dbfa <tcp_receive+0x58a>
 800dbec:	4b1b      	ldr	r3, [pc, #108]	; (800dc5c <tcp_receive+0x5ec>)
 800dbee:	f240 5295 	movw	r2, #1429	; 0x595
 800dbf2:	491d      	ldr	r1, [pc, #116]	; (800dc68 <tcp_receive+0x5f8>)
 800dbf4:	481b      	ldr	r0, [pc, #108]	; (800dc64 <tcp_receive+0x5f4>)
 800dbf6:	f005 facd 	bl	8013194 <iprintf>
      off = (u16_t)off32;
 800dbfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbfc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800dc00:	4b15      	ldr	r3, [pc, #84]	; (800dc58 <tcp_receive+0x5e8>)
 800dc02:	685b      	ldr	r3, [r3, #4]
 800dc04:	891b      	ldrh	r3, [r3, #8]
 800dc06:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800dc0a:	429a      	cmp	r2, r3
 800dc0c:	d906      	bls.n	800dc1c <tcp_receive+0x5ac>
 800dc0e:	4b13      	ldr	r3, [pc, #76]	; (800dc5c <tcp_receive+0x5ec>)
 800dc10:	f240 5297 	movw	r2, #1431	; 0x597
 800dc14:	4915      	ldr	r1, [pc, #84]	; (800dc6c <tcp_receive+0x5fc>)
 800dc16:	4813      	ldr	r0, [pc, #76]	; (800dc64 <tcp_receive+0x5f4>)
 800dc18:	f005 fabc 	bl	8013194 <iprintf>
      inseg.len -= off;
 800dc1c:	4b0e      	ldr	r3, [pc, #56]	; (800dc58 <tcp_receive+0x5e8>)
 800dc1e:	891a      	ldrh	r2, [r3, #8]
 800dc20:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800dc24:	1ad3      	subs	r3, r2, r3
 800dc26:	b29a      	uxth	r2, r3
 800dc28:	4b0b      	ldr	r3, [pc, #44]	; (800dc58 <tcp_receive+0x5e8>)
 800dc2a:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800dc2c:	4b0a      	ldr	r3, [pc, #40]	; (800dc58 <tcp_receive+0x5e8>)
 800dc2e:	685b      	ldr	r3, [r3, #4]
 800dc30:	891a      	ldrh	r2, [r3, #8]
 800dc32:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800dc36:	1ad3      	subs	r3, r2, r3
 800dc38:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800dc3a:	e029      	b.n	800dc90 <tcp_receive+0x620>
 800dc3c:	080157d0 	.word	0x080157d0
 800dc40:	080157d8 	.word	0x080157d8
 800dc44:	24000118 	.word	0x24000118
 800dc48:	24000114 	.word	0x24000114
 800dc4c:	240037d8 	.word	0x240037d8
 800dc50:	2400011a 	.word	0x2400011a
 800dc54:	24000110 	.word	0x24000110
 800dc58:	240000f0 	.word	0x240000f0
 800dc5c:	08015468 	.word	0x08015468
 800dc60:	080157e0 	.word	0x080157e0
 800dc64:	080154b4 	.word	0x080154b4
 800dc68:	080157f0 	.word	0x080157f0
 800dc6c:	08015800 	.word	0x08015800
        off -= p->len;
 800dc70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dc72:	895b      	ldrh	r3, [r3, #10]
 800dc74:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800dc78:	1ad3      	subs	r3, r2, r3
 800dc7a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800dc7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dc80:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800dc82:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800dc84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dc86:	2200      	movs	r2, #0
 800dc88:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800dc8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800dc90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dc92:	895b      	ldrh	r3, [r3, #10]
 800dc94:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800dc98:	429a      	cmp	r2, r3
 800dc9a:	d8e9      	bhi.n	800dc70 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800dc9c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800dca0:	4619      	mov	r1, r3
 800dca2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800dca4:	f7fc f8d0 	bl	8009e48 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcac:	4a91      	ldr	r2, [pc, #580]	; (800def4 <tcp_receive+0x884>)
 800dcae:	6013      	str	r3, [r2, #0]
 800dcb0:	4b91      	ldr	r3, [pc, #580]	; (800def8 <tcp_receive+0x888>)
 800dcb2:	68db      	ldr	r3, [r3, #12]
 800dcb4:	4a8f      	ldr	r2, [pc, #572]	; (800def4 <tcp_receive+0x884>)
 800dcb6:	6812      	ldr	r2, [r2, #0]
 800dcb8:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800dcba:	e00d      	b.n	800dcd8 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800dcbc:	4b8d      	ldr	r3, [pc, #564]	; (800def4 <tcp_receive+0x884>)
 800dcbe:	681a      	ldr	r2, [r3, #0]
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcc4:	1ad3      	subs	r3, r2, r3
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	da06      	bge.n	800dcd8 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	8b5b      	ldrh	r3, [r3, #26]
 800dcce:	f043 0302 	orr.w	r3, r3, #2
 800dcd2:	b29a      	uxth	r2, r3
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800dcd8:	4b86      	ldr	r3, [pc, #536]	; (800def4 <tcp_receive+0x884>)
 800dcda:	681a      	ldr	r2, [r3, #0]
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dce0:	1ad3      	subs	r3, r2, r3
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	f2c0 842a 	blt.w	800e53c <tcp_receive+0xecc>
 800dce8:	4b82      	ldr	r3, [pc, #520]	; (800def4 <tcp_receive+0x884>)
 800dcea:	681a      	ldr	r2, [r3, #0]
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcf0:	6879      	ldr	r1, [r7, #4]
 800dcf2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800dcf4:	440b      	add	r3, r1
 800dcf6:	1ad3      	subs	r3, r2, r3
 800dcf8:	3301      	adds	r3, #1
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	f300 841e 	bgt.w	800e53c <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dd04:	4b7b      	ldr	r3, [pc, #492]	; (800def4 <tcp_receive+0x884>)
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	429a      	cmp	r2, r3
 800dd0a:	f040 829a 	bne.w	800e242 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800dd0e:	4b7a      	ldr	r3, [pc, #488]	; (800def8 <tcp_receive+0x888>)
 800dd10:	891c      	ldrh	r4, [r3, #8]
 800dd12:	4b79      	ldr	r3, [pc, #484]	; (800def8 <tcp_receive+0x888>)
 800dd14:	68db      	ldr	r3, [r3, #12]
 800dd16:	899b      	ldrh	r3, [r3, #12]
 800dd18:	b29b      	uxth	r3, r3
 800dd1a:	4618      	mov	r0, r3
 800dd1c:	f7fa fcf4 	bl	8008708 <lwip_htons>
 800dd20:	4603      	mov	r3, r0
 800dd22:	b2db      	uxtb	r3, r3
 800dd24:	f003 0303 	and.w	r3, r3, #3
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d001      	beq.n	800dd30 <tcp_receive+0x6c0>
 800dd2c:	2301      	movs	r3, #1
 800dd2e:	e000      	b.n	800dd32 <tcp_receive+0x6c2>
 800dd30:	2300      	movs	r3, #0
 800dd32:	4423      	add	r3, r4
 800dd34:	b29a      	uxth	r2, r3
 800dd36:	4b71      	ldr	r3, [pc, #452]	; (800defc <tcp_receive+0x88c>)
 800dd38:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800dd3e:	4b6f      	ldr	r3, [pc, #444]	; (800defc <tcp_receive+0x88c>)
 800dd40:	881b      	ldrh	r3, [r3, #0]
 800dd42:	429a      	cmp	r2, r3
 800dd44:	d275      	bcs.n	800de32 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800dd46:	4b6c      	ldr	r3, [pc, #432]	; (800def8 <tcp_receive+0x888>)
 800dd48:	68db      	ldr	r3, [r3, #12]
 800dd4a:	899b      	ldrh	r3, [r3, #12]
 800dd4c:	b29b      	uxth	r3, r3
 800dd4e:	4618      	mov	r0, r3
 800dd50:	f7fa fcda 	bl	8008708 <lwip_htons>
 800dd54:	4603      	mov	r3, r0
 800dd56:	b2db      	uxtb	r3, r3
 800dd58:	f003 0301 	and.w	r3, r3, #1
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d01f      	beq.n	800dda0 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800dd60:	4b65      	ldr	r3, [pc, #404]	; (800def8 <tcp_receive+0x888>)
 800dd62:	68db      	ldr	r3, [r3, #12]
 800dd64:	899b      	ldrh	r3, [r3, #12]
 800dd66:	b29b      	uxth	r3, r3
 800dd68:	b21b      	sxth	r3, r3
 800dd6a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800dd6e:	b21c      	sxth	r4, r3
 800dd70:	4b61      	ldr	r3, [pc, #388]	; (800def8 <tcp_receive+0x888>)
 800dd72:	68db      	ldr	r3, [r3, #12]
 800dd74:	899b      	ldrh	r3, [r3, #12]
 800dd76:	b29b      	uxth	r3, r3
 800dd78:	4618      	mov	r0, r3
 800dd7a:	f7fa fcc5 	bl	8008708 <lwip_htons>
 800dd7e:	4603      	mov	r3, r0
 800dd80:	b2db      	uxtb	r3, r3
 800dd82:	b29b      	uxth	r3, r3
 800dd84:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800dd88:	b29b      	uxth	r3, r3
 800dd8a:	4618      	mov	r0, r3
 800dd8c:	f7fa fcbc 	bl	8008708 <lwip_htons>
 800dd90:	4603      	mov	r3, r0
 800dd92:	b21b      	sxth	r3, r3
 800dd94:	4323      	orrs	r3, r4
 800dd96:	b21a      	sxth	r2, r3
 800dd98:	4b57      	ldr	r3, [pc, #348]	; (800def8 <tcp_receive+0x888>)
 800dd9a:	68db      	ldr	r3, [r3, #12]
 800dd9c:	b292      	uxth	r2, r2
 800dd9e:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800dda4:	4b54      	ldr	r3, [pc, #336]	; (800def8 <tcp_receive+0x888>)
 800dda6:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800dda8:	4b53      	ldr	r3, [pc, #332]	; (800def8 <tcp_receive+0x888>)
 800ddaa:	68db      	ldr	r3, [r3, #12]
 800ddac:	899b      	ldrh	r3, [r3, #12]
 800ddae:	b29b      	uxth	r3, r3
 800ddb0:	4618      	mov	r0, r3
 800ddb2:	f7fa fca9 	bl	8008708 <lwip_htons>
 800ddb6:	4603      	mov	r3, r0
 800ddb8:	b2db      	uxtb	r3, r3
 800ddba:	f003 0302 	and.w	r3, r3, #2
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d005      	beq.n	800ddce <tcp_receive+0x75e>
            inseg.len -= 1;
 800ddc2:	4b4d      	ldr	r3, [pc, #308]	; (800def8 <tcp_receive+0x888>)
 800ddc4:	891b      	ldrh	r3, [r3, #8]
 800ddc6:	3b01      	subs	r3, #1
 800ddc8:	b29a      	uxth	r2, r3
 800ddca:	4b4b      	ldr	r3, [pc, #300]	; (800def8 <tcp_receive+0x888>)
 800ddcc:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800ddce:	4b4a      	ldr	r3, [pc, #296]	; (800def8 <tcp_receive+0x888>)
 800ddd0:	685b      	ldr	r3, [r3, #4]
 800ddd2:	4a49      	ldr	r2, [pc, #292]	; (800def8 <tcp_receive+0x888>)
 800ddd4:	8912      	ldrh	r2, [r2, #8]
 800ddd6:	4611      	mov	r1, r2
 800ddd8:	4618      	mov	r0, r3
 800ddda:	f7fb ff35 	bl	8009c48 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800ddde:	4b46      	ldr	r3, [pc, #280]	; (800def8 <tcp_receive+0x888>)
 800dde0:	891c      	ldrh	r4, [r3, #8]
 800dde2:	4b45      	ldr	r3, [pc, #276]	; (800def8 <tcp_receive+0x888>)
 800dde4:	68db      	ldr	r3, [r3, #12]
 800dde6:	899b      	ldrh	r3, [r3, #12]
 800dde8:	b29b      	uxth	r3, r3
 800ddea:	4618      	mov	r0, r3
 800ddec:	f7fa fc8c 	bl	8008708 <lwip_htons>
 800ddf0:	4603      	mov	r3, r0
 800ddf2:	b2db      	uxtb	r3, r3
 800ddf4:	f003 0303 	and.w	r3, r3, #3
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d001      	beq.n	800de00 <tcp_receive+0x790>
 800ddfc:	2301      	movs	r3, #1
 800ddfe:	e000      	b.n	800de02 <tcp_receive+0x792>
 800de00:	2300      	movs	r3, #0
 800de02:	4423      	add	r3, r4
 800de04:	b29a      	uxth	r2, r3
 800de06:	4b3d      	ldr	r3, [pc, #244]	; (800defc <tcp_receive+0x88c>)
 800de08:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800de0a:	4b3c      	ldr	r3, [pc, #240]	; (800defc <tcp_receive+0x88c>)
 800de0c:	881b      	ldrh	r3, [r3, #0]
 800de0e:	461a      	mov	r2, r3
 800de10:	4b38      	ldr	r3, [pc, #224]	; (800def4 <tcp_receive+0x884>)
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	441a      	add	r2, r3
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de1a:	6879      	ldr	r1, [r7, #4]
 800de1c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800de1e:	440b      	add	r3, r1
 800de20:	429a      	cmp	r2, r3
 800de22:	d006      	beq.n	800de32 <tcp_receive+0x7c2>
 800de24:	4b36      	ldr	r3, [pc, #216]	; (800df00 <tcp_receive+0x890>)
 800de26:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800de2a:	4936      	ldr	r1, [pc, #216]	; (800df04 <tcp_receive+0x894>)
 800de2c:	4836      	ldr	r0, [pc, #216]	; (800df08 <tcp_receive+0x898>)
 800de2e:	f005 f9b1 	bl	8013194 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800de36:	2b00      	cmp	r3, #0
 800de38:	f000 80e7 	beq.w	800e00a <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800de3c:	4b2e      	ldr	r3, [pc, #184]	; (800def8 <tcp_receive+0x888>)
 800de3e:	68db      	ldr	r3, [r3, #12]
 800de40:	899b      	ldrh	r3, [r3, #12]
 800de42:	b29b      	uxth	r3, r3
 800de44:	4618      	mov	r0, r3
 800de46:	f7fa fc5f 	bl	8008708 <lwip_htons>
 800de4a:	4603      	mov	r3, r0
 800de4c:	b2db      	uxtb	r3, r3
 800de4e:	f003 0301 	and.w	r3, r3, #1
 800de52:	2b00      	cmp	r3, #0
 800de54:	d010      	beq.n	800de78 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800de56:	e00a      	b.n	800de6e <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800de5c:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800de62:	681a      	ldr	r2, [r3, #0]
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800de68:	68f8      	ldr	r0, [r7, #12]
 800de6a:	f7fd fcb0 	bl	800b7ce <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800de72:	2b00      	cmp	r3, #0
 800de74:	d1f0      	bne.n	800de58 <tcp_receive+0x7e8>
 800de76:	e0c8      	b.n	800e00a <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800de7c:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800de7e:	e052      	b.n	800df26 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800de80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de82:	68db      	ldr	r3, [r3, #12]
 800de84:	899b      	ldrh	r3, [r3, #12]
 800de86:	b29b      	uxth	r3, r3
 800de88:	4618      	mov	r0, r3
 800de8a:	f7fa fc3d 	bl	8008708 <lwip_htons>
 800de8e:	4603      	mov	r3, r0
 800de90:	b2db      	uxtb	r3, r3
 800de92:	f003 0301 	and.w	r3, r3, #1
 800de96:	2b00      	cmp	r3, #0
 800de98:	d03d      	beq.n	800df16 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800de9a:	4b17      	ldr	r3, [pc, #92]	; (800def8 <tcp_receive+0x888>)
 800de9c:	68db      	ldr	r3, [r3, #12]
 800de9e:	899b      	ldrh	r3, [r3, #12]
 800dea0:	b29b      	uxth	r3, r3
 800dea2:	4618      	mov	r0, r3
 800dea4:	f7fa fc30 	bl	8008708 <lwip_htons>
 800dea8:	4603      	mov	r3, r0
 800deaa:	b2db      	uxtb	r3, r3
 800deac:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d130      	bne.n	800df16 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800deb4:	4b10      	ldr	r3, [pc, #64]	; (800def8 <tcp_receive+0x888>)
 800deb6:	68db      	ldr	r3, [r3, #12]
 800deb8:	899b      	ldrh	r3, [r3, #12]
 800deba:	b29c      	uxth	r4, r3
 800debc:	2001      	movs	r0, #1
 800debe:	f7fa fc23 	bl	8008708 <lwip_htons>
 800dec2:	4603      	mov	r3, r0
 800dec4:	461a      	mov	r2, r3
 800dec6:	4b0c      	ldr	r3, [pc, #48]	; (800def8 <tcp_receive+0x888>)
 800dec8:	68db      	ldr	r3, [r3, #12]
 800deca:	4322      	orrs	r2, r4
 800decc:	b292      	uxth	r2, r2
 800dece:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800ded0:	4b09      	ldr	r3, [pc, #36]	; (800def8 <tcp_receive+0x888>)
 800ded2:	891c      	ldrh	r4, [r3, #8]
 800ded4:	4b08      	ldr	r3, [pc, #32]	; (800def8 <tcp_receive+0x888>)
 800ded6:	68db      	ldr	r3, [r3, #12]
 800ded8:	899b      	ldrh	r3, [r3, #12]
 800deda:	b29b      	uxth	r3, r3
 800dedc:	4618      	mov	r0, r3
 800dede:	f7fa fc13 	bl	8008708 <lwip_htons>
 800dee2:	4603      	mov	r3, r0
 800dee4:	b2db      	uxtb	r3, r3
 800dee6:	f003 0303 	and.w	r3, r3, #3
 800deea:	2b00      	cmp	r3, #0
 800deec:	d00e      	beq.n	800df0c <tcp_receive+0x89c>
 800deee:	2301      	movs	r3, #1
 800def0:	e00d      	b.n	800df0e <tcp_receive+0x89e>
 800def2:	bf00      	nop
 800def4:	24000110 	.word	0x24000110
 800def8:	240000f0 	.word	0x240000f0
 800defc:	2400011a 	.word	0x2400011a
 800df00:	08015468 	.word	0x08015468
 800df04:	08015810 	.word	0x08015810
 800df08:	080154b4 	.word	0x080154b4
 800df0c:	2300      	movs	r3, #0
 800df0e:	4423      	add	r3, r4
 800df10:	b29a      	uxth	r2, r3
 800df12:	4b98      	ldr	r3, [pc, #608]	; (800e174 <tcp_receive+0xb04>)
 800df14:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800df16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df18:	613b      	str	r3, [r7, #16]
              next = next->next;
 800df1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800df20:	6938      	ldr	r0, [r7, #16]
 800df22:	f7fd fc54 	bl	800b7ce <tcp_seg_free>
            while (next &&
 800df26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d00e      	beq.n	800df4a <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800df2c:	4b91      	ldr	r3, [pc, #580]	; (800e174 <tcp_receive+0xb04>)
 800df2e:	881b      	ldrh	r3, [r3, #0]
 800df30:	461a      	mov	r2, r3
 800df32:	4b91      	ldr	r3, [pc, #580]	; (800e178 <tcp_receive+0xb08>)
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	441a      	add	r2, r3
 800df38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df3a:	68db      	ldr	r3, [r3, #12]
 800df3c:	685b      	ldr	r3, [r3, #4]
 800df3e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800df40:	8909      	ldrh	r1, [r1, #8]
 800df42:	440b      	add	r3, r1
 800df44:	1ad3      	subs	r3, r2, r3
            while (next &&
 800df46:	2b00      	cmp	r3, #0
 800df48:	da9a      	bge.n	800de80 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800df4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d059      	beq.n	800e004 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800df50:	4b88      	ldr	r3, [pc, #544]	; (800e174 <tcp_receive+0xb04>)
 800df52:	881b      	ldrh	r3, [r3, #0]
 800df54:	461a      	mov	r2, r3
 800df56:	4b88      	ldr	r3, [pc, #544]	; (800e178 <tcp_receive+0xb08>)
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	441a      	add	r2, r3
 800df5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df5e:	68db      	ldr	r3, [r3, #12]
 800df60:	685b      	ldr	r3, [r3, #4]
 800df62:	1ad3      	subs	r3, r2, r3
            if (next &&
 800df64:	2b00      	cmp	r3, #0
 800df66:	dd4d      	ble.n	800e004 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800df68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df6a:	68db      	ldr	r3, [r3, #12]
 800df6c:	685b      	ldr	r3, [r3, #4]
 800df6e:	b29a      	uxth	r2, r3
 800df70:	4b81      	ldr	r3, [pc, #516]	; (800e178 <tcp_receive+0xb08>)
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	b29b      	uxth	r3, r3
 800df76:	1ad3      	subs	r3, r2, r3
 800df78:	b29a      	uxth	r2, r3
 800df7a:	4b80      	ldr	r3, [pc, #512]	; (800e17c <tcp_receive+0xb0c>)
 800df7c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800df7e:	4b7f      	ldr	r3, [pc, #508]	; (800e17c <tcp_receive+0xb0c>)
 800df80:	68db      	ldr	r3, [r3, #12]
 800df82:	899b      	ldrh	r3, [r3, #12]
 800df84:	b29b      	uxth	r3, r3
 800df86:	4618      	mov	r0, r3
 800df88:	f7fa fbbe 	bl	8008708 <lwip_htons>
 800df8c:	4603      	mov	r3, r0
 800df8e:	b2db      	uxtb	r3, r3
 800df90:	f003 0302 	and.w	r3, r3, #2
 800df94:	2b00      	cmp	r3, #0
 800df96:	d005      	beq.n	800dfa4 <tcp_receive+0x934>
                inseg.len -= 1;
 800df98:	4b78      	ldr	r3, [pc, #480]	; (800e17c <tcp_receive+0xb0c>)
 800df9a:	891b      	ldrh	r3, [r3, #8]
 800df9c:	3b01      	subs	r3, #1
 800df9e:	b29a      	uxth	r2, r3
 800dfa0:	4b76      	ldr	r3, [pc, #472]	; (800e17c <tcp_receive+0xb0c>)
 800dfa2:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800dfa4:	4b75      	ldr	r3, [pc, #468]	; (800e17c <tcp_receive+0xb0c>)
 800dfa6:	685b      	ldr	r3, [r3, #4]
 800dfa8:	4a74      	ldr	r2, [pc, #464]	; (800e17c <tcp_receive+0xb0c>)
 800dfaa:	8912      	ldrh	r2, [r2, #8]
 800dfac:	4611      	mov	r1, r2
 800dfae:	4618      	mov	r0, r3
 800dfb0:	f7fb fe4a 	bl	8009c48 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800dfb4:	4b71      	ldr	r3, [pc, #452]	; (800e17c <tcp_receive+0xb0c>)
 800dfb6:	891c      	ldrh	r4, [r3, #8]
 800dfb8:	4b70      	ldr	r3, [pc, #448]	; (800e17c <tcp_receive+0xb0c>)
 800dfba:	68db      	ldr	r3, [r3, #12]
 800dfbc:	899b      	ldrh	r3, [r3, #12]
 800dfbe:	b29b      	uxth	r3, r3
 800dfc0:	4618      	mov	r0, r3
 800dfc2:	f7fa fba1 	bl	8008708 <lwip_htons>
 800dfc6:	4603      	mov	r3, r0
 800dfc8:	b2db      	uxtb	r3, r3
 800dfca:	f003 0303 	and.w	r3, r3, #3
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d001      	beq.n	800dfd6 <tcp_receive+0x966>
 800dfd2:	2301      	movs	r3, #1
 800dfd4:	e000      	b.n	800dfd8 <tcp_receive+0x968>
 800dfd6:	2300      	movs	r3, #0
 800dfd8:	4423      	add	r3, r4
 800dfda:	b29a      	uxth	r2, r3
 800dfdc:	4b65      	ldr	r3, [pc, #404]	; (800e174 <tcp_receive+0xb04>)
 800dfde:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800dfe0:	4b64      	ldr	r3, [pc, #400]	; (800e174 <tcp_receive+0xb04>)
 800dfe2:	881b      	ldrh	r3, [r3, #0]
 800dfe4:	461a      	mov	r2, r3
 800dfe6:	4b64      	ldr	r3, [pc, #400]	; (800e178 <tcp_receive+0xb08>)
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	441a      	add	r2, r3
 800dfec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dfee:	68db      	ldr	r3, [r3, #12]
 800dff0:	685b      	ldr	r3, [r3, #4]
 800dff2:	429a      	cmp	r2, r3
 800dff4:	d006      	beq.n	800e004 <tcp_receive+0x994>
 800dff6:	4b62      	ldr	r3, [pc, #392]	; (800e180 <tcp_receive+0xb10>)
 800dff8:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800dffc:	4961      	ldr	r1, [pc, #388]	; (800e184 <tcp_receive+0xb14>)
 800dffe:	4862      	ldr	r0, [pc, #392]	; (800e188 <tcp_receive+0xb18>)
 800e000:	f005 f8c8 	bl	8013194 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e008:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800e00a:	4b5a      	ldr	r3, [pc, #360]	; (800e174 <tcp_receive+0xb04>)
 800e00c:	881b      	ldrh	r3, [r3, #0]
 800e00e:	461a      	mov	r2, r3
 800e010:	4b59      	ldr	r3, [pc, #356]	; (800e178 <tcp_receive+0xb08>)
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	441a      	add	r2, r3
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e01e:	4b55      	ldr	r3, [pc, #340]	; (800e174 <tcp_receive+0xb04>)
 800e020:	881b      	ldrh	r3, [r3, #0]
 800e022:	429a      	cmp	r2, r3
 800e024:	d206      	bcs.n	800e034 <tcp_receive+0x9c4>
 800e026:	4b56      	ldr	r3, [pc, #344]	; (800e180 <tcp_receive+0xb10>)
 800e028:	f240 6207 	movw	r2, #1543	; 0x607
 800e02c:	4957      	ldr	r1, [pc, #348]	; (800e18c <tcp_receive+0xb1c>)
 800e02e:	4856      	ldr	r0, [pc, #344]	; (800e188 <tcp_receive+0xb18>)
 800e030:	f005 f8b0 	bl	8013194 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e038:	4b4e      	ldr	r3, [pc, #312]	; (800e174 <tcp_receive+0xb04>)
 800e03a:	881b      	ldrh	r3, [r3, #0]
 800e03c:	1ad3      	subs	r3, r2, r3
 800e03e:	b29a      	uxth	r2, r3
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800e044:	6878      	ldr	r0, [r7, #4]
 800e046:	f7fc fe9d 	bl	800ad84 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800e04a:	4b4c      	ldr	r3, [pc, #304]	; (800e17c <tcp_receive+0xb0c>)
 800e04c:	685b      	ldr	r3, [r3, #4]
 800e04e:	891b      	ldrh	r3, [r3, #8]
 800e050:	2b00      	cmp	r3, #0
 800e052:	d006      	beq.n	800e062 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800e054:	4b49      	ldr	r3, [pc, #292]	; (800e17c <tcp_receive+0xb0c>)
 800e056:	685b      	ldr	r3, [r3, #4]
 800e058:	4a4d      	ldr	r2, [pc, #308]	; (800e190 <tcp_receive+0xb20>)
 800e05a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800e05c:	4b47      	ldr	r3, [pc, #284]	; (800e17c <tcp_receive+0xb0c>)
 800e05e:	2200      	movs	r2, #0
 800e060:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800e062:	4b46      	ldr	r3, [pc, #280]	; (800e17c <tcp_receive+0xb0c>)
 800e064:	68db      	ldr	r3, [r3, #12]
 800e066:	899b      	ldrh	r3, [r3, #12]
 800e068:	b29b      	uxth	r3, r3
 800e06a:	4618      	mov	r0, r3
 800e06c:	f7fa fb4c 	bl	8008708 <lwip_htons>
 800e070:	4603      	mov	r3, r0
 800e072:	b2db      	uxtb	r3, r3
 800e074:	f003 0301 	and.w	r3, r3, #1
 800e078:	2b00      	cmp	r3, #0
 800e07a:	f000 80b8 	beq.w	800e1ee <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800e07e:	4b45      	ldr	r3, [pc, #276]	; (800e194 <tcp_receive+0xb24>)
 800e080:	781b      	ldrb	r3, [r3, #0]
 800e082:	f043 0320 	orr.w	r3, r3, #32
 800e086:	b2da      	uxtb	r2, r3
 800e088:	4b42      	ldr	r3, [pc, #264]	; (800e194 <tcp_receive+0xb24>)
 800e08a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800e08c:	e0af      	b.n	800e1ee <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e092:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e098:	68db      	ldr	r3, [r3, #12]
 800e09a:	685b      	ldr	r3, [r3, #4]
 800e09c:	4a36      	ldr	r2, [pc, #216]	; (800e178 <tcp_receive+0xb08>)
 800e09e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800e0a0:	68bb      	ldr	r3, [r7, #8]
 800e0a2:	891b      	ldrh	r3, [r3, #8]
 800e0a4:	461c      	mov	r4, r3
 800e0a6:	68bb      	ldr	r3, [r7, #8]
 800e0a8:	68db      	ldr	r3, [r3, #12]
 800e0aa:	899b      	ldrh	r3, [r3, #12]
 800e0ac:	b29b      	uxth	r3, r3
 800e0ae:	4618      	mov	r0, r3
 800e0b0:	f7fa fb2a 	bl	8008708 <lwip_htons>
 800e0b4:	4603      	mov	r3, r0
 800e0b6:	b2db      	uxtb	r3, r3
 800e0b8:	f003 0303 	and.w	r3, r3, #3
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d001      	beq.n	800e0c4 <tcp_receive+0xa54>
 800e0c0:	2301      	movs	r3, #1
 800e0c2:	e000      	b.n	800e0c6 <tcp_receive+0xa56>
 800e0c4:	2300      	movs	r3, #0
 800e0c6:	191a      	adds	r2, r3, r4
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0cc:	441a      	add	r2, r3
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e0d6:	461c      	mov	r4, r3
 800e0d8:	68bb      	ldr	r3, [r7, #8]
 800e0da:	891b      	ldrh	r3, [r3, #8]
 800e0dc:	461d      	mov	r5, r3
 800e0de:	68bb      	ldr	r3, [r7, #8]
 800e0e0:	68db      	ldr	r3, [r3, #12]
 800e0e2:	899b      	ldrh	r3, [r3, #12]
 800e0e4:	b29b      	uxth	r3, r3
 800e0e6:	4618      	mov	r0, r3
 800e0e8:	f7fa fb0e 	bl	8008708 <lwip_htons>
 800e0ec:	4603      	mov	r3, r0
 800e0ee:	b2db      	uxtb	r3, r3
 800e0f0:	f003 0303 	and.w	r3, r3, #3
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d001      	beq.n	800e0fc <tcp_receive+0xa8c>
 800e0f8:	2301      	movs	r3, #1
 800e0fa:	e000      	b.n	800e0fe <tcp_receive+0xa8e>
 800e0fc:	2300      	movs	r3, #0
 800e0fe:	442b      	add	r3, r5
 800e100:	429c      	cmp	r4, r3
 800e102:	d206      	bcs.n	800e112 <tcp_receive+0xaa2>
 800e104:	4b1e      	ldr	r3, [pc, #120]	; (800e180 <tcp_receive+0xb10>)
 800e106:	f240 622b 	movw	r2, #1579	; 0x62b
 800e10a:	4923      	ldr	r1, [pc, #140]	; (800e198 <tcp_receive+0xb28>)
 800e10c:	481e      	ldr	r0, [pc, #120]	; (800e188 <tcp_receive+0xb18>)
 800e10e:	f005 f841 	bl	8013194 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800e112:	68bb      	ldr	r3, [r7, #8]
 800e114:	891b      	ldrh	r3, [r3, #8]
 800e116:	461c      	mov	r4, r3
 800e118:	68bb      	ldr	r3, [r7, #8]
 800e11a:	68db      	ldr	r3, [r3, #12]
 800e11c:	899b      	ldrh	r3, [r3, #12]
 800e11e:	b29b      	uxth	r3, r3
 800e120:	4618      	mov	r0, r3
 800e122:	f7fa faf1 	bl	8008708 <lwip_htons>
 800e126:	4603      	mov	r3, r0
 800e128:	b2db      	uxtb	r3, r3
 800e12a:	f003 0303 	and.w	r3, r3, #3
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d001      	beq.n	800e136 <tcp_receive+0xac6>
 800e132:	2301      	movs	r3, #1
 800e134:	e000      	b.n	800e138 <tcp_receive+0xac8>
 800e136:	2300      	movs	r3, #0
 800e138:	1919      	adds	r1, r3, r4
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e13e:	b28b      	uxth	r3, r1
 800e140:	1ad3      	subs	r3, r2, r3
 800e142:	b29a      	uxth	r2, r3
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800e148:	6878      	ldr	r0, [r7, #4]
 800e14a:	f7fc fe1b 	bl	800ad84 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800e14e:	68bb      	ldr	r3, [r7, #8]
 800e150:	685b      	ldr	r3, [r3, #4]
 800e152:	891b      	ldrh	r3, [r3, #8]
 800e154:	2b00      	cmp	r3, #0
 800e156:	d028      	beq.n	800e1aa <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800e158:	4b0d      	ldr	r3, [pc, #52]	; (800e190 <tcp_receive+0xb20>)
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d01d      	beq.n	800e19c <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800e160:	4b0b      	ldr	r3, [pc, #44]	; (800e190 <tcp_receive+0xb20>)
 800e162:	681a      	ldr	r2, [r3, #0]
 800e164:	68bb      	ldr	r3, [r7, #8]
 800e166:	685b      	ldr	r3, [r3, #4]
 800e168:	4619      	mov	r1, r3
 800e16a:	4610      	mov	r0, r2
 800e16c:	f7fb ffb4 	bl	800a0d8 <pbuf_cat>
 800e170:	e018      	b.n	800e1a4 <tcp_receive+0xb34>
 800e172:	bf00      	nop
 800e174:	2400011a 	.word	0x2400011a
 800e178:	24000110 	.word	0x24000110
 800e17c:	240000f0 	.word	0x240000f0
 800e180:	08015468 	.word	0x08015468
 800e184:	08015848 	.word	0x08015848
 800e188:	080154b4 	.word	0x080154b4
 800e18c:	08015884 	.word	0x08015884
 800e190:	24000120 	.word	0x24000120
 800e194:	2400011d 	.word	0x2400011d
 800e198:	080158a4 	.word	0x080158a4
            } else {
              recv_data = cseg->p;
 800e19c:	68bb      	ldr	r3, [r7, #8]
 800e19e:	685b      	ldr	r3, [r3, #4]
 800e1a0:	4a70      	ldr	r2, [pc, #448]	; (800e364 <tcp_receive+0xcf4>)
 800e1a2:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800e1a4:	68bb      	ldr	r3, [r7, #8]
 800e1a6:	2200      	movs	r2, #0
 800e1a8:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800e1aa:	68bb      	ldr	r3, [r7, #8]
 800e1ac:	68db      	ldr	r3, [r3, #12]
 800e1ae:	899b      	ldrh	r3, [r3, #12]
 800e1b0:	b29b      	uxth	r3, r3
 800e1b2:	4618      	mov	r0, r3
 800e1b4:	f7fa faa8 	bl	8008708 <lwip_htons>
 800e1b8:	4603      	mov	r3, r0
 800e1ba:	b2db      	uxtb	r3, r3
 800e1bc:	f003 0301 	and.w	r3, r3, #1
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d00d      	beq.n	800e1e0 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800e1c4:	4b68      	ldr	r3, [pc, #416]	; (800e368 <tcp_receive+0xcf8>)
 800e1c6:	781b      	ldrb	r3, [r3, #0]
 800e1c8:	f043 0320 	orr.w	r3, r3, #32
 800e1cc:	b2da      	uxtb	r2, r3
 800e1ce:	4b66      	ldr	r3, [pc, #408]	; (800e368 <tcp_receive+0xcf8>)
 800e1d0:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	7d1b      	ldrb	r3, [r3, #20]
 800e1d6:	2b04      	cmp	r3, #4
 800e1d8:	d102      	bne.n	800e1e0 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	2207      	movs	r2, #7
 800e1de:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800e1e0:	68bb      	ldr	r3, [r7, #8]
 800e1e2:	681a      	ldr	r2, [r3, #0]
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800e1e8:	68b8      	ldr	r0, [r7, #8]
 800e1ea:	f7fd faf0 	bl	800b7ce <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d008      	beq.n	800e208 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e1fa:	68db      	ldr	r3, [r3, #12]
 800e1fc:	685a      	ldr	r2, [r3, #4]
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800e202:	429a      	cmp	r2, r3
 800e204:	f43f af43 	beq.w	800e08e <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	8b5b      	ldrh	r3, [r3, #26]
 800e20c:	f003 0301 	and.w	r3, r3, #1
 800e210:	2b00      	cmp	r3, #0
 800e212:	d00e      	beq.n	800e232 <tcp_receive+0xbc2>
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	8b5b      	ldrh	r3, [r3, #26]
 800e218:	f023 0301 	bic.w	r3, r3, #1
 800e21c:	b29a      	uxth	r2, r3
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	835a      	strh	r2, [r3, #26]
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	8b5b      	ldrh	r3, [r3, #26]
 800e226:	f043 0302 	orr.w	r3, r3, #2
 800e22a:	b29a      	uxth	r2, r3
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800e230:	e188      	b.n	800e544 <tcp_receive+0xed4>
        tcp_ack(pcb);
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	8b5b      	ldrh	r3, [r3, #26]
 800e236:	f043 0301 	orr.w	r3, r3, #1
 800e23a:	b29a      	uxth	r2, r3
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800e240:	e180      	b.n	800e544 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e246:	2b00      	cmp	r3, #0
 800e248:	d106      	bne.n	800e258 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800e24a:	4848      	ldr	r0, [pc, #288]	; (800e36c <tcp_receive+0xcfc>)
 800e24c:	f7fd faf6 	bl	800b83c <tcp_seg_copy>
 800e250:	4602      	mov	r2, r0
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	675a      	str	r2, [r3, #116]	; 0x74
 800e256:	e16d      	b.n	800e534 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800e258:	2300      	movs	r3, #0
 800e25a:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e260:	63bb      	str	r3, [r7, #56]	; 0x38
 800e262:	e157      	b.n	800e514 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 800e264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e266:	68db      	ldr	r3, [r3, #12]
 800e268:	685a      	ldr	r2, [r3, #4]
 800e26a:	4b41      	ldr	r3, [pc, #260]	; (800e370 <tcp_receive+0xd00>)
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	429a      	cmp	r2, r3
 800e270:	d11d      	bne.n	800e2ae <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800e272:	4b3e      	ldr	r3, [pc, #248]	; (800e36c <tcp_receive+0xcfc>)
 800e274:	891a      	ldrh	r2, [r3, #8]
 800e276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e278:	891b      	ldrh	r3, [r3, #8]
 800e27a:	429a      	cmp	r2, r3
 800e27c:	f240 814f 	bls.w	800e51e <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800e280:	483a      	ldr	r0, [pc, #232]	; (800e36c <tcp_receive+0xcfc>)
 800e282:	f7fd fadb 	bl	800b83c <tcp_seg_copy>
 800e286:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800e288:	697b      	ldr	r3, [r7, #20]
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	f000 8149 	beq.w	800e522 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 800e290:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e292:	2b00      	cmp	r3, #0
 800e294:	d003      	beq.n	800e29e <tcp_receive+0xc2e>
                    prev->next = cseg;
 800e296:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e298:	697a      	ldr	r2, [r7, #20]
 800e29a:	601a      	str	r2, [r3, #0]
 800e29c:	e002      	b.n	800e2a4 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	697a      	ldr	r2, [r7, #20]
 800e2a2:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800e2a4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e2a6:	6978      	ldr	r0, [r7, #20]
 800e2a8:	f7ff f8de 	bl	800d468 <tcp_oos_insert_segment>
                }
                break;
 800e2ac:	e139      	b.n	800e522 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800e2ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d117      	bne.n	800e2e4 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800e2b4:	4b2e      	ldr	r3, [pc, #184]	; (800e370 <tcp_receive+0xd00>)
 800e2b6:	681a      	ldr	r2, [r3, #0]
 800e2b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2ba:	68db      	ldr	r3, [r3, #12]
 800e2bc:	685b      	ldr	r3, [r3, #4]
 800e2be:	1ad3      	subs	r3, r2, r3
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	da57      	bge.n	800e374 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800e2c4:	4829      	ldr	r0, [pc, #164]	; (800e36c <tcp_receive+0xcfc>)
 800e2c6:	f7fd fab9 	bl	800b83c <tcp_seg_copy>
 800e2ca:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800e2cc:	69bb      	ldr	r3, [r7, #24]
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	f000 8129 	beq.w	800e526 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	69ba      	ldr	r2, [r7, #24]
 800e2d8:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800e2da:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e2dc:	69b8      	ldr	r0, [r7, #24]
 800e2de:	f7ff f8c3 	bl	800d468 <tcp_oos_insert_segment>
                  }
                  break;
 800e2e2:	e120      	b.n	800e526 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800e2e4:	4b22      	ldr	r3, [pc, #136]	; (800e370 <tcp_receive+0xd00>)
 800e2e6:	681a      	ldr	r2, [r3, #0]
 800e2e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e2ea:	68db      	ldr	r3, [r3, #12]
 800e2ec:	685b      	ldr	r3, [r3, #4]
 800e2ee:	1ad3      	subs	r3, r2, r3
 800e2f0:	3b01      	subs	r3, #1
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	db3e      	blt.n	800e374 <tcp_receive+0xd04>
 800e2f6:	4b1e      	ldr	r3, [pc, #120]	; (800e370 <tcp_receive+0xd00>)
 800e2f8:	681a      	ldr	r2, [r3, #0]
 800e2fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2fc:	68db      	ldr	r3, [r3, #12]
 800e2fe:	685b      	ldr	r3, [r3, #4]
 800e300:	1ad3      	subs	r3, r2, r3
 800e302:	3301      	adds	r3, #1
 800e304:	2b00      	cmp	r3, #0
 800e306:	dc35      	bgt.n	800e374 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800e308:	4818      	ldr	r0, [pc, #96]	; (800e36c <tcp_receive+0xcfc>)
 800e30a:	f7fd fa97 	bl	800b83c <tcp_seg_copy>
 800e30e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800e310:	69fb      	ldr	r3, [r7, #28]
 800e312:	2b00      	cmp	r3, #0
 800e314:	f000 8109 	beq.w	800e52a <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800e318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e31a:	68db      	ldr	r3, [r3, #12]
 800e31c:	685b      	ldr	r3, [r3, #4]
 800e31e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e320:	8912      	ldrh	r2, [r2, #8]
 800e322:	441a      	add	r2, r3
 800e324:	4b12      	ldr	r3, [pc, #72]	; (800e370 <tcp_receive+0xd00>)
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	1ad3      	subs	r3, r2, r3
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	dd12      	ble.n	800e354 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800e32e:	4b10      	ldr	r3, [pc, #64]	; (800e370 <tcp_receive+0xd00>)
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	b29a      	uxth	r2, r3
 800e334:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e336:	68db      	ldr	r3, [r3, #12]
 800e338:	685b      	ldr	r3, [r3, #4]
 800e33a:	b29b      	uxth	r3, r3
 800e33c:	1ad3      	subs	r3, r2, r3
 800e33e:	b29a      	uxth	r2, r3
 800e340:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e342:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800e344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e346:	685a      	ldr	r2, [r3, #4]
 800e348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e34a:	891b      	ldrh	r3, [r3, #8]
 800e34c:	4619      	mov	r1, r3
 800e34e:	4610      	mov	r0, r2
 800e350:	f7fb fc7a 	bl	8009c48 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800e354:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e356:	69fa      	ldr	r2, [r7, #28]
 800e358:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800e35a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e35c:	69f8      	ldr	r0, [r7, #28]
 800e35e:	f7ff f883 	bl	800d468 <tcp_oos_insert_segment>
                  }
                  break;
 800e362:	e0e2      	b.n	800e52a <tcp_receive+0xeba>
 800e364:	24000120 	.word	0x24000120
 800e368:	2400011d 	.word	0x2400011d
 800e36c:	240000f0 	.word	0x240000f0
 800e370:	24000110 	.word	0x24000110
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800e374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e376:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800e378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	f040 80c6 	bne.w	800e50e <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800e382:	4b80      	ldr	r3, [pc, #512]	; (800e584 <tcp_receive+0xf14>)
 800e384:	681a      	ldr	r2, [r3, #0]
 800e386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e388:	68db      	ldr	r3, [r3, #12]
 800e38a:	685b      	ldr	r3, [r3, #4]
 800e38c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800e38e:	2b00      	cmp	r3, #0
 800e390:	f340 80bd 	ble.w	800e50e <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800e394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e396:	68db      	ldr	r3, [r3, #12]
 800e398:	899b      	ldrh	r3, [r3, #12]
 800e39a:	b29b      	uxth	r3, r3
 800e39c:	4618      	mov	r0, r3
 800e39e:	f7fa f9b3 	bl	8008708 <lwip_htons>
 800e3a2:	4603      	mov	r3, r0
 800e3a4:	b2db      	uxtb	r3, r3
 800e3a6:	f003 0301 	and.w	r3, r3, #1
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	f040 80bf 	bne.w	800e52e <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800e3b0:	4875      	ldr	r0, [pc, #468]	; (800e588 <tcp_receive+0xf18>)
 800e3b2:	f7fd fa43 	bl	800b83c <tcp_seg_copy>
 800e3b6:	4602      	mov	r2, r0
 800e3b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3ba:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800e3bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	f000 80b6 	beq.w	800e532 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800e3c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3c8:	68db      	ldr	r3, [r3, #12]
 800e3ca:	685b      	ldr	r3, [r3, #4]
 800e3cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e3ce:	8912      	ldrh	r2, [r2, #8]
 800e3d0:	441a      	add	r2, r3
 800e3d2:	4b6c      	ldr	r3, [pc, #432]	; (800e584 <tcp_receive+0xf14>)
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	1ad3      	subs	r3, r2, r3
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	dd12      	ble.n	800e402 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800e3dc:	4b69      	ldr	r3, [pc, #420]	; (800e584 <tcp_receive+0xf14>)
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	b29a      	uxth	r2, r3
 800e3e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3e4:	68db      	ldr	r3, [r3, #12]
 800e3e6:	685b      	ldr	r3, [r3, #4]
 800e3e8:	b29b      	uxth	r3, r3
 800e3ea:	1ad3      	subs	r3, r2, r3
 800e3ec:	b29a      	uxth	r2, r3
 800e3ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3f0:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800e3f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3f4:	685a      	ldr	r2, [r3, #4]
 800e3f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3f8:	891b      	ldrh	r3, [r3, #8]
 800e3fa:	4619      	mov	r1, r3
 800e3fc:	4610      	mov	r0, r2
 800e3fe:	f7fb fc23 	bl	8009c48 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800e402:	4b62      	ldr	r3, [pc, #392]	; (800e58c <tcp_receive+0xf1c>)
 800e404:	881b      	ldrh	r3, [r3, #0]
 800e406:	461a      	mov	r2, r3
 800e408:	4b5e      	ldr	r3, [pc, #376]	; (800e584 <tcp_receive+0xf14>)
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	441a      	add	r2, r3
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e412:	6879      	ldr	r1, [r7, #4]
 800e414:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e416:	440b      	add	r3, r1
 800e418:	1ad3      	subs	r3, r2, r3
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	f340 8089 	ble.w	800e532 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800e420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	68db      	ldr	r3, [r3, #12]
 800e426:	899b      	ldrh	r3, [r3, #12]
 800e428:	b29b      	uxth	r3, r3
 800e42a:	4618      	mov	r0, r3
 800e42c:	f7fa f96c 	bl	8008708 <lwip_htons>
 800e430:	4603      	mov	r3, r0
 800e432:	b2db      	uxtb	r3, r3
 800e434:	f003 0301 	and.w	r3, r3, #1
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d022      	beq.n	800e482 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800e43c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	68db      	ldr	r3, [r3, #12]
 800e442:	899b      	ldrh	r3, [r3, #12]
 800e444:	b29b      	uxth	r3, r3
 800e446:	b21b      	sxth	r3, r3
 800e448:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800e44c:	b21c      	sxth	r4, r3
 800e44e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	68db      	ldr	r3, [r3, #12]
 800e454:	899b      	ldrh	r3, [r3, #12]
 800e456:	b29b      	uxth	r3, r3
 800e458:	4618      	mov	r0, r3
 800e45a:	f7fa f955 	bl	8008708 <lwip_htons>
 800e45e:	4603      	mov	r3, r0
 800e460:	b2db      	uxtb	r3, r3
 800e462:	b29b      	uxth	r3, r3
 800e464:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800e468:	b29b      	uxth	r3, r3
 800e46a:	4618      	mov	r0, r3
 800e46c:	f7fa f94c 	bl	8008708 <lwip_htons>
 800e470:	4603      	mov	r3, r0
 800e472:	b21b      	sxth	r3, r3
 800e474:	4323      	orrs	r3, r4
 800e476:	b21a      	sxth	r2, r3
 800e478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	68db      	ldr	r3, [r3, #12]
 800e47e:	b292      	uxth	r2, r2
 800e480:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e486:	b29a      	uxth	r2, r3
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e48c:	4413      	add	r3, r2
 800e48e:	b299      	uxth	r1, r3
 800e490:	4b3c      	ldr	r3, [pc, #240]	; (800e584 <tcp_receive+0xf14>)
 800e492:	681b      	ldr	r3, [r3, #0]
 800e494:	b29a      	uxth	r2, r3
 800e496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	1a8a      	subs	r2, r1, r2
 800e49c:	b292      	uxth	r2, r2
 800e49e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800e4a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	685a      	ldr	r2, [r3, #4]
 800e4a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	891b      	ldrh	r3, [r3, #8]
 800e4ac:	4619      	mov	r1, r3
 800e4ae:	4610      	mov	r0, r2
 800e4b0:	f7fb fbca 	bl	8009c48 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800e4b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4b6:	681b      	ldr	r3, [r3, #0]
 800e4b8:	891c      	ldrh	r4, [r3, #8]
 800e4ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	68db      	ldr	r3, [r3, #12]
 800e4c0:	899b      	ldrh	r3, [r3, #12]
 800e4c2:	b29b      	uxth	r3, r3
 800e4c4:	4618      	mov	r0, r3
 800e4c6:	f7fa f91f 	bl	8008708 <lwip_htons>
 800e4ca:	4603      	mov	r3, r0
 800e4cc:	b2db      	uxtb	r3, r3
 800e4ce:	f003 0303 	and.w	r3, r3, #3
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d001      	beq.n	800e4da <tcp_receive+0xe6a>
 800e4d6:	2301      	movs	r3, #1
 800e4d8:	e000      	b.n	800e4dc <tcp_receive+0xe6c>
 800e4da:	2300      	movs	r3, #0
 800e4dc:	4423      	add	r3, r4
 800e4de:	b29a      	uxth	r2, r3
 800e4e0:	4b2a      	ldr	r3, [pc, #168]	; (800e58c <tcp_receive+0xf1c>)
 800e4e2:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800e4e4:	4b29      	ldr	r3, [pc, #164]	; (800e58c <tcp_receive+0xf1c>)
 800e4e6:	881b      	ldrh	r3, [r3, #0]
 800e4e8:	461a      	mov	r2, r3
 800e4ea:	4b26      	ldr	r3, [pc, #152]	; (800e584 <tcp_receive+0xf14>)
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	441a      	add	r2, r3
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4f4:	6879      	ldr	r1, [r7, #4]
 800e4f6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e4f8:	440b      	add	r3, r1
 800e4fa:	429a      	cmp	r2, r3
 800e4fc:	d019      	beq.n	800e532 <tcp_receive+0xec2>
 800e4fe:	4b24      	ldr	r3, [pc, #144]	; (800e590 <tcp_receive+0xf20>)
 800e500:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800e504:	4923      	ldr	r1, [pc, #140]	; (800e594 <tcp_receive+0xf24>)
 800e506:	4824      	ldr	r0, [pc, #144]	; (800e598 <tcp_receive+0xf28>)
 800e508:	f004 fe44 	bl	8013194 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800e50c:	e011      	b.n	800e532 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800e50e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e510:	681b      	ldr	r3, [r3, #0]
 800e512:	63bb      	str	r3, [r7, #56]	; 0x38
 800e514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e516:	2b00      	cmp	r3, #0
 800e518:	f47f aea4 	bne.w	800e264 <tcp_receive+0xbf4>
 800e51c:	e00a      	b.n	800e534 <tcp_receive+0xec4>
                break;
 800e51e:	bf00      	nop
 800e520:	e008      	b.n	800e534 <tcp_receive+0xec4>
                break;
 800e522:	bf00      	nop
 800e524:	e006      	b.n	800e534 <tcp_receive+0xec4>
                  break;
 800e526:	bf00      	nop
 800e528:	e004      	b.n	800e534 <tcp_receive+0xec4>
                  break;
 800e52a:	bf00      	nop
 800e52c:	e002      	b.n	800e534 <tcp_receive+0xec4>
                  break;
 800e52e:	bf00      	nop
 800e530:	e000      	b.n	800e534 <tcp_receive+0xec4>
                break;
 800e532:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800e534:	6878      	ldr	r0, [r7, #4]
 800e536:	f001 fe8b 	bl	8010250 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800e53a:	e003      	b.n	800e544 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800e53c:	6878      	ldr	r0, [r7, #4]
 800e53e:	f001 fe87 	bl	8010250 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e542:	e01a      	b.n	800e57a <tcp_receive+0xf0a>
 800e544:	e019      	b.n	800e57a <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800e546:	4b0f      	ldr	r3, [pc, #60]	; (800e584 <tcp_receive+0xf14>)
 800e548:	681a      	ldr	r2, [r3, #0]
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e54e:	1ad3      	subs	r3, r2, r3
 800e550:	2b00      	cmp	r3, #0
 800e552:	db0a      	blt.n	800e56a <tcp_receive+0xefa>
 800e554:	4b0b      	ldr	r3, [pc, #44]	; (800e584 <tcp_receive+0xf14>)
 800e556:	681a      	ldr	r2, [r3, #0]
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e55c:	6879      	ldr	r1, [r7, #4]
 800e55e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e560:	440b      	add	r3, r1
 800e562:	1ad3      	subs	r3, r2, r3
 800e564:	3301      	adds	r3, #1
 800e566:	2b00      	cmp	r3, #0
 800e568:	dd07      	ble.n	800e57a <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	8b5b      	ldrh	r3, [r3, #26]
 800e56e:	f043 0302 	orr.w	r3, r3, #2
 800e572:	b29a      	uxth	r2, r3
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800e578:	e7ff      	b.n	800e57a <tcp_receive+0xf0a>
 800e57a:	bf00      	nop
 800e57c:	3750      	adds	r7, #80	; 0x50
 800e57e:	46bd      	mov	sp, r7
 800e580:	bdb0      	pop	{r4, r5, r7, pc}
 800e582:	bf00      	nop
 800e584:	24000110 	.word	0x24000110
 800e588:	240000f0 	.word	0x240000f0
 800e58c:	2400011a 	.word	0x2400011a
 800e590:	08015468 	.word	0x08015468
 800e594:	08015810 	.word	0x08015810
 800e598:	080154b4 	.word	0x080154b4

0800e59c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800e59c:	b480      	push	{r7}
 800e59e:	b083      	sub	sp, #12
 800e5a0:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800e5a2:	4b15      	ldr	r3, [pc, #84]	; (800e5f8 <tcp_get_next_optbyte+0x5c>)
 800e5a4:	881b      	ldrh	r3, [r3, #0]
 800e5a6:	1c5a      	adds	r2, r3, #1
 800e5a8:	b291      	uxth	r1, r2
 800e5aa:	4a13      	ldr	r2, [pc, #76]	; (800e5f8 <tcp_get_next_optbyte+0x5c>)
 800e5ac:	8011      	strh	r1, [r2, #0]
 800e5ae:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800e5b0:	4b12      	ldr	r3, [pc, #72]	; (800e5fc <tcp_get_next_optbyte+0x60>)
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d004      	beq.n	800e5c2 <tcp_get_next_optbyte+0x26>
 800e5b8:	4b11      	ldr	r3, [pc, #68]	; (800e600 <tcp_get_next_optbyte+0x64>)
 800e5ba:	881b      	ldrh	r3, [r3, #0]
 800e5bc:	88fa      	ldrh	r2, [r7, #6]
 800e5be:	429a      	cmp	r2, r3
 800e5c0:	d208      	bcs.n	800e5d4 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800e5c2:	4b10      	ldr	r3, [pc, #64]	; (800e604 <tcp_get_next_optbyte+0x68>)
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	3314      	adds	r3, #20
 800e5c8:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800e5ca:	88fb      	ldrh	r3, [r7, #6]
 800e5cc:	683a      	ldr	r2, [r7, #0]
 800e5ce:	4413      	add	r3, r2
 800e5d0:	781b      	ldrb	r3, [r3, #0]
 800e5d2:	e00b      	b.n	800e5ec <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800e5d4:	88fb      	ldrh	r3, [r7, #6]
 800e5d6:	b2da      	uxtb	r2, r3
 800e5d8:	4b09      	ldr	r3, [pc, #36]	; (800e600 <tcp_get_next_optbyte+0x64>)
 800e5da:	881b      	ldrh	r3, [r3, #0]
 800e5dc:	b2db      	uxtb	r3, r3
 800e5de:	1ad3      	subs	r3, r2, r3
 800e5e0:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800e5e2:	4b06      	ldr	r3, [pc, #24]	; (800e5fc <tcp_get_next_optbyte+0x60>)
 800e5e4:	681a      	ldr	r2, [r3, #0]
 800e5e6:	797b      	ldrb	r3, [r7, #5]
 800e5e8:	4413      	add	r3, r2
 800e5ea:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e5ec:	4618      	mov	r0, r3
 800e5ee:	370c      	adds	r7, #12
 800e5f0:	46bd      	mov	sp, r7
 800e5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5f6:	4770      	bx	lr
 800e5f8:	2400010c 	.word	0x2400010c
 800e5fc:	24000108 	.word	0x24000108
 800e600:	24000106 	.word	0x24000106
 800e604:	24000100 	.word	0x24000100

0800e608 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800e608:	b580      	push	{r7, lr}
 800e60a:	b084      	sub	sp, #16
 800e60c:	af00      	add	r7, sp, #0
 800e60e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	2b00      	cmp	r3, #0
 800e614:	d106      	bne.n	800e624 <tcp_parseopt+0x1c>
 800e616:	4b32      	ldr	r3, [pc, #200]	; (800e6e0 <tcp_parseopt+0xd8>)
 800e618:	f240 727d 	movw	r2, #1917	; 0x77d
 800e61c:	4931      	ldr	r1, [pc, #196]	; (800e6e4 <tcp_parseopt+0xdc>)
 800e61e:	4832      	ldr	r0, [pc, #200]	; (800e6e8 <tcp_parseopt+0xe0>)
 800e620:	f004 fdb8 	bl	8013194 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800e624:	4b31      	ldr	r3, [pc, #196]	; (800e6ec <tcp_parseopt+0xe4>)
 800e626:	881b      	ldrh	r3, [r3, #0]
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d055      	beq.n	800e6d8 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800e62c:	4b30      	ldr	r3, [pc, #192]	; (800e6f0 <tcp_parseopt+0xe8>)
 800e62e:	2200      	movs	r2, #0
 800e630:	801a      	strh	r2, [r3, #0]
 800e632:	e045      	b.n	800e6c0 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800e634:	f7ff ffb2 	bl	800e59c <tcp_get_next_optbyte>
 800e638:	4603      	mov	r3, r0
 800e63a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800e63c:	7bfb      	ldrb	r3, [r7, #15]
 800e63e:	2b02      	cmp	r3, #2
 800e640:	d006      	beq.n	800e650 <tcp_parseopt+0x48>
 800e642:	2b02      	cmp	r3, #2
 800e644:	dc2b      	bgt.n	800e69e <tcp_parseopt+0x96>
 800e646:	2b00      	cmp	r3, #0
 800e648:	d041      	beq.n	800e6ce <tcp_parseopt+0xc6>
 800e64a:	2b01      	cmp	r3, #1
 800e64c:	d127      	bne.n	800e69e <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800e64e:	e037      	b.n	800e6c0 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800e650:	f7ff ffa4 	bl	800e59c <tcp_get_next_optbyte>
 800e654:	4603      	mov	r3, r0
 800e656:	2b04      	cmp	r3, #4
 800e658:	d13b      	bne.n	800e6d2 <tcp_parseopt+0xca>
 800e65a:	4b25      	ldr	r3, [pc, #148]	; (800e6f0 <tcp_parseopt+0xe8>)
 800e65c:	881b      	ldrh	r3, [r3, #0]
 800e65e:	3301      	adds	r3, #1
 800e660:	4a22      	ldr	r2, [pc, #136]	; (800e6ec <tcp_parseopt+0xe4>)
 800e662:	8812      	ldrh	r2, [r2, #0]
 800e664:	4293      	cmp	r3, r2
 800e666:	da34      	bge.n	800e6d2 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800e668:	f7ff ff98 	bl	800e59c <tcp_get_next_optbyte>
 800e66c:	4603      	mov	r3, r0
 800e66e:	b29b      	uxth	r3, r3
 800e670:	021b      	lsls	r3, r3, #8
 800e672:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800e674:	f7ff ff92 	bl	800e59c <tcp_get_next_optbyte>
 800e678:	4603      	mov	r3, r0
 800e67a:	b29a      	uxth	r2, r3
 800e67c:	89bb      	ldrh	r3, [r7, #12]
 800e67e:	4313      	orrs	r3, r2
 800e680:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800e682:	89bb      	ldrh	r3, [r7, #12]
 800e684:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800e688:	d804      	bhi.n	800e694 <tcp_parseopt+0x8c>
 800e68a:	89bb      	ldrh	r3, [r7, #12]
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d001      	beq.n	800e694 <tcp_parseopt+0x8c>
 800e690:	89ba      	ldrh	r2, [r7, #12]
 800e692:	e001      	b.n	800e698 <tcp_parseopt+0x90>
 800e694:	f44f 7206 	mov.w	r2, #536	; 0x218
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800e69c:	e010      	b.n	800e6c0 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800e69e:	f7ff ff7d 	bl	800e59c <tcp_get_next_optbyte>
 800e6a2:	4603      	mov	r3, r0
 800e6a4:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800e6a6:	7afb      	ldrb	r3, [r7, #11]
 800e6a8:	2b01      	cmp	r3, #1
 800e6aa:	d914      	bls.n	800e6d6 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800e6ac:	7afb      	ldrb	r3, [r7, #11]
 800e6ae:	b29a      	uxth	r2, r3
 800e6b0:	4b0f      	ldr	r3, [pc, #60]	; (800e6f0 <tcp_parseopt+0xe8>)
 800e6b2:	881b      	ldrh	r3, [r3, #0]
 800e6b4:	4413      	add	r3, r2
 800e6b6:	b29b      	uxth	r3, r3
 800e6b8:	3b02      	subs	r3, #2
 800e6ba:	b29a      	uxth	r2, r3
 800e6bc:	4b0c      	ldr	r3, [pc, #48]	; (800e6f0 <tcp_parseopt+0xe8>)
 800e6be:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800e6c0:	4b0b      	ldr	r3, [pc, #44]	; (800e6f0 <tcp_parseopt+0xe8>)
 800e6c2:	881a      	ldrh	r2, [r3, #0]
 800e6c4:	4b09      	ldr	r3, [pc, #36]	; (800e6ec <tcp_parseopt+0xe4>)
 800e6c6:	881b      	ldrh	r3, [r3, #0]
 800e6c8:	429a      	cmp	r2, r3
 800e6ca:	d3b3      	bcc.n	800e634 <tcp_parseopt+0x2c>
 800e6cc:	e004      	b.n	800e6d8 <tcp_parseopt+0xd0>
          return;
 800e6ce:	bf00      	nop
 800e6d0:	e002      	b.n	800e6d8 <tcp_parseopt+0xd0>
            return;
 800e6d2:	bf00      	nop
 800e6d4:	e000      	b.n	800e6d8 <tcp_parseopt+0xd0>
            return;
 800e6d6:	bf00      	nop
      }
    }
  }
}
 800e6d8:	3710      	adds	r7, #16
 800e6da:	46bd      	mov	sp, r7
 800e6dc:	bd80      	pop	{r7, pc}
 800e6de:	bf00      	nop
 800e6e0:	08015468 	.word	0x08015468
 800e6e4:	080158cc 	.word	0x080158cc
 800e6e8:	080154b4 	.word	0x080154b4
 800e6ec:	24000104 	.word	0x24000104
 800e6f0:	2400010c 	.word	0x2400010c

0800e6f4 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800e6f4:	b480      	push	{r7}
 800e6f6:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800e6f8:	4b05      	ldr	r3, [pc, #20]	; (800e710 <tcp_trigger_input_pcb_close+0x1c>)
 800e6fa:	781b      	ldrb	r3, [r3, #0]
 800e6fc:	f043 0310 	orr.w	r3, r3, #16
 800e700:	b2da      	uxtb	r2, r3
 800e702:	4b03      	ldr	r3, [pc, #12]	; (800e710 <tcp_trigger_input_pcb_close+0x1c>)
 800e704:	701a      	strb	r2, [r3, #0]
}
 800e706:	bf00      	nop
 800e708:	46bd      	mov	sp, r7
 800e70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e70e:	4770      	bx	lr
 800e710:	2400011d 	.word	0x2400011d

0800e714 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800e714:	b580      	push	{r7, lr}
 800e716:	b084      	sub	sp, #16
 800e718:	af00      	add	r7, sp, #0
 800e71a:	60f8      	str	r0, [r7, #12]
 800e71c:	60b9      	str	r1, [r7, #8]
 800e71e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	2b00      	cmp	r3, #0
 800e724:	d00a      	beq.n	800e73c <tcp_route+0x28>
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	7a1b      	ldrb	r3, [r3, #8]
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d006      	beq.n	800e73c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800e72e:	68fb      	ldr	r3, [r7, #12]
 800e730:	7a1b      	ldrb	r3, [r3, #8]
 800e732:	4618      	mov	r0, r3
 800e734:	f7fb f8ae 	bl	8009894 <netif_get_by_index>
 800e738:	4603      	mov	r3, r0
 800e73a:	e003      	b.n	800e744 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800e73c:	6878      	ldr	r0, [r7, #4]
 800e73e:	f003 fafb 	bl	8011d38 <ip4_route>
 800e742:	4603      	mov	r3, r0
  }
}
 800e744:	4618      	mov	r0, r3
 800e746:	3710      	adds	r7, #16
 800e748:	46bd      	mov	sp, r7
 800e74a:	bd80      	pop	{r7, pc}

0800e74c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800e74c:	b590      	push	{r4, r7, lr}
 800e74e:	b087      	sub	sp, #28
 800e750:	af00      	add	r7, sp, #0
 800e752:	60f8      	str	r0, [r7, #12]
 800e754:	60b9      	str	r1, [r7, #8]
 800e756:	603b      	str	r3, [r7, #0]
 800e758:	4613      	mov	r3, r2
 800e75a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d105      	bne.n	800e76e <tcp_create_segment+0x22>
 800e762:	4b44      	ldr	r3, [pc, #272]	; (800e874 <tcp_create_segment+0x128>)
 800e764:	22a3      	movs	r2, #163	; 0xa3
 800e766:	4944      	ldr	r1, [pc, #272]	; (800e878 <tcp_create_segment+0x12c>)
 800e768:	4844      	ldr	r0, [pc, #272]	; (800e87c <tcp_create_segment+0x130>)
 800e76a:	f004 fd13 	bl	8013194 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800e76e:	68bb      	ldr	r3, [r7, #8]
 800e770:	2b00      	cmp	r3, #0
 800e772:	d105      	bne.n	800e780 <tcp_create_segment+0x34>
 800e774:	4b3f      	ldr	r3, [pc, #252]	; (800e874 <tcp_create_segment+0x128>)
 800e776:	22a4      	movs	r2, #164	; 0xa4
 800e778:	4941      	ldr	r1, [pc, #260]	; (800e880 <tcp_create_segment+0x134>)
 800e77a:	4840      	ldr	r0, [pc, #256]	; (800e87c <tcp_create_segment+0x130>)
 800e77c:	f004 fd0a 	bl	8013194 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800e780:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e784:	009b      	lsls	r3, r3, #2
 800e786:	b2db      	uxtb	r3, r3
 800e788:	f003 0304 	and.w	r3, r3, #4
 800e78c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800e78e:	2003      	movs	r0, #3
 800e790:	f7fa fcfa 	bl	8009188 <memp_malloc>
 800e794:	6138      	str	r0, [r7, #16]
 800e796:	693b      	ldr	r3, [r7, #16]
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d104      	bne.n	800e7a6 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800e79c:	68b8      	ldr	r0, [r7, #8]
 800e79e:	f7fb fbd9 	bl	8009f54 <pbuf_free>
    return NULL;
 800e7a2:	2300      	movs	r3, #0
 800e7a4:	e061      	b.n	800e86a <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800e7a6:	693b      	ldr	r3, [r7, #16]
 800e7a8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800e7ac:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800e7ae:	693b      	ldr	r3, [r7, #16]
 800e7b0:	2200      	movs	r2, #0
 800e7b2:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800e7b4:	693b      	ldr	r3, [r7, #16]
 800e7b6:	68ba      	ldr	r2, [r7, #8]
 800e7b8:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800e7ba:	68bb      	ldr	r3, [r7, #8]
 800e7bc:	891a      	ldrh	r2, [r3, #8]
 800e7be:	7dfb      	ldrb	r3, [r7, #23]
 800e7c0:	b29b      	uxth	r3, r3
 800e7c2:	429a      	cmp	r2, r3
 800e7c4:	d205      	bcs.n	800e7d2 <tcp_create_segment+0x86>
 800e7c6:	4b2b      	ldr	r3, [pc, #172]	; (800e874 <tcp_create_segment+0x128>)
 800e7c8:	22b0      	movs	r2, #176	; 0xb0
 800e7ca:	492e      	ldr	r1, [pc, #184]	; (800e884 <tcp_create_segment+0x138>)
 800e7cc:	482b      	ldr	r0, [pc, #172]	; (800e87c <tcp_create_segment+0x130>)
 800e7ce:	f004 fce1 	bl	8013194 <iprintf>
  seg->len = p->tot_len - optlen;
 800e7d2:	68bb      	ldr	r3, [r7, #8]
 800e7d4:	891a      	ldrh	r2, [r3, #8]
 800e7d6:	7dfb      	ldrb	r3, [r7, #23]
 800e7d8:	b29b      	uxth	r3, r3
 800e7da:	1ad3      	subs	r3, r2, r3
 800e7dc:	b29a      	uxth	r2, r3
 800e7de:	693b      	ldr	r3, [r7, #16]
 800e7e0:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800e7e2:	2114      	movs	r1, #20
 800e7e4:	68b8      	ldr	r0, [r7, #8]
 800e7e6:	f7fb fb1f 	bl	8009e28 <pbuf_add_header>
 800e7ea:	4603      	mov	r3, r0
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d004      	beq.n	800e7fa <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800e7f0:	6938      	ldr	r0, [r7, #16]
 800e7f2:	f7fc ffec 	bl	800b7ce <tcp_seg_free>
    return NULL;
 800e7f6:	2300      	movs	r3, #0
 800e7f8:	e037      	b.n	800e86a <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800e7fa:	693b      	ldr	r3, [r7, #16]
 800e7fc:	685b      	ldr	r3, [r3, #4]
 800e7fe:	685a      	ldr	r2, [r3, #4]
 800e800:	693b      	ldr	r3, [r7, #16]
 800e802:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	8ada      	ldrh	r2, [r3, #22]
 800e808:	693b      	ldr	r3, [r7, #16]
 800e80a:	68dc      	ldr	r4, [r3, #12]
 800e80c:	4610      	mov	r0, r2
 800e80e:	f7f9 ff7b 	bl	8008708 <lwip_htons>
 800e812:	4603      	mov	r3, r0
 800e814:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	8b1a      	ldrh	r2, [r3, #24]
 800e81a:	693b      	ldr	r3, [r7, #16]
 800e81c:	68dc      	ldr	r4, [r3, #12]
 800e81e:	4610      	mov	r0, r2
 800e820:	f7f9 ff72 	bl	8008708 <lwip_htons>
 800e824:	4603      	mov	r3, r0
 800e826:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800e828:	693b      	ldr	r3, [r7, #16]
 800e82a:	68dc      	ldr	r4, [r3, #12]
 800e82c:	6838      	ldr	r0, [r7, #0]
 800e82e:	f7f9 ff80 	bl	8008732 <lwip_htonl>
 800e832:	4603      	mov	r3, r0
 800e834:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800e836:	7dfb      	ldrb	r3, [r7, #23]
 800e838:	089b      	lsrs	r3, r3, #2
 800e83a:	b2db      	uxtb	r3, r3
 800e83c:	b29b      	uxth	r3, r3
 800e83e:	3305      	adds	r3, #5
 800e840:	b29b      	uxth	r3, r3
 800e842:	031b      	lsls	r3, r3, #12
 800e844:	b29a      	uxth	r2, r3
 800e846:	79fb      	ldrb	r3, [r7, #7]
 800e848:	b29b      	uxth	r3, r3
 800e84a:	4313      	orrs	r3, r2
 800e84c:	b29a      	uxth	r2, r3
 800e84e:	693b      	ldr	r3, [r7, #16]
 800e850:	68dc      	ldr	r4, [r3, #12]
 800e852:	4610      	mov	r0, r2
 800e854:	f7f9 ff58 	bl	8008708 <lwip_htons>
 800e858:	4603      	mov	r3, r0
 800e85a:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800e85c:	693b      	ldr	r3, [r7, #16]
 800e85e:	68db      	ldr	r3, [r3, #12]
 800e860:	2200      	movs	r2, #0
 800e862:	749a      	strb	r2, [r3, #18]
 800e864:	2200      	movs	r2, #0
 800e866:	74da      	strb	r2, [r3, #19]
  return seg;
 800e868:	693b      	ldr	r3, [r7, #16]
}
 800e86a:	4618      	mov	r0, r3
 800e86c:	371c      	adds	r7, #28
 800e86e:	46bd      	mov	sp, r7
 800e870:	bd90      	pop	{r4, r7, pc}
 800e872:	bf00      	nop
 800e874:	080158e8 	.word	0x080158e8
 800e878:	0801591c 	.word	0x0801591c
 800e87c:	0801593c 	.word	0x0801593c
 800e880:	08015964 	.word	0x08015964
 800e884:	08015988 	.word	0x08015988

0800e888 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800e888:	b580      	push	{r7, lr}
 800e88a:	b086      	sub	sp, #24
 800e88c:	af00      	add	r7, sp, #0
 800e88e:	607b      	str	r3, [r7, #4]
 800e890:	4603      	mov	r3, r0
 800e892:	73fb      	strb	r3, [r7, #15]
 800e894:	460b      	mov	r3, r1
 800e896:	81bb      	strh	r3, [r7, #12]
 800e898:	4613      	mov	r3, r2
 800e89a:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800e89c:	89bb      	ldrh	r3, [r7, #12]
 800e89e:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	d105      	bne.n	800e8b2 <tcp_pbuf_prealloc+0x2a>
 800e8a6:	4b30      	ldr	r3, [pc, #192]	; (800e968 <tcp_pbuf_prealloc+0xe0>)
 800e8a8:	22e8      	movs	r2, #232	; 0xe8
 800e8aa:	4930      	ldr	r1, [pc, #192]	; (800e96c <tcp_pbuf_prealloc+0xe4>)
 800e8ac:	4830      	ldr	r0, [pc, #192]	; (800e970 <tcp_pbuf_prealloc+0xe8>)
 800e8ae:	f004 fc71 	bl	8013194 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800e8b2:	6a3b      	ldr	r3, [r7, #32]
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d105      	bne.n	800e8c4 <tcp_pbuf_prealloc+0x3c>
 800e8b8:	4b2b      	ldr	r3, [pc, #172]	; (800e968 <tcp_pbuf_prealloc+0xe0>)
 800e8ba:	22e9      	movs	r2, #233	; 0xe9
 800e8bc:	492d      	ldr	r1, [pc, #180]	; (800e974 <tcp_pbuf_prealloc+0xec>)
 800e8be:	482c      	ldr	r0, [pc, #176]	; (800e970 <tcp_pbuf_prealloc+0xe8>)
 800e8c0:	f004 fc68 	bl	8013194 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800e8c4:	89ba      	ldrh	r2, [r7, #12]
 800e8c6:	897b      	ldrh	r3, [r7, #10]
 800e8c8:	429a      	cmp	r2, r3
 800e8ca:	d221      	bcs.n	800e910 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800e8cc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e8d0:	f003 0302 	and.w	r3, r3, #2
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d111      	bne.n	800e8fc <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 800e8d8:	6a3b      	ldr	r3, [r7, #32]
 800e8da:	8b5b      	ldrh	r3, [r3, #26]
 800e8dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d115      	bne.n	800e910 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 800e8e4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d007      	beq.n	800e8fc <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 800e8ec:	6a3b      	ldr	r3, [r7, #32]
 800e8ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d103      	bne.n	800e8fc <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 800e8f4:	6a3b      	ldr	r3, [r7, #32]
 800e8f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d009      	beq.n	800e910 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800e8fc:	89bb      	ldrh	r3, [r7, #12]
 800e8fe:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800e902:	f023 0203 	bic.w	r2, r3, #3
 800e906:	897b      	ldrh	r3, [r7, #10]
 800e908:	4293      	cmp	r3, r2
 800e90a:	bf28      	it	cs
 800e90c:	4613      	movcs	r3, r2
 800e90e:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800e910:	8af9      	ldrh	r1, [r7, #22]
 800e912:	7bfb      	ldrb	r3, [r7, #15]
 800e914:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e918:	4618      	mov	r0, r3
 800e91a:	f7fb f837 	bl	800998c <pbuf_alloc>
 800e91e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800e920:	693b      	ldr	r3, [r7, #16]
 800e922:	2b00      	cmp	r3, #0
 800e924:	d101      	bne.n	800e92a <tcp_pbuf_prealloc+0xa2>
    return NULL;
 800e926:	2300      	movs	r3, #0
 800e928:	e019      	b.n	800e95e <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800e92a:	693b      	ldr	r3, [r7, #16]
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d006      	beq.n	800e940 <tcp_pbuf_prealloc+0xb8>
 800e932:	4b0d      	ldr	r3, [pc, #52]	; (800e968 <tcp_pbuf_prealloc+0xe0>)
 800e934:	f240 120b 	movw	r2, #267	; 0x10b
 800e938:	490f      	ldr	r1, [pc, #60]	; (800e978 <tcp_pbuf_prealloc+0xf0>)
 800e93a:	480d      	ldr	r0, [pc, #52]	; (800e970 <tcp_pbuf_prealloc+0xe8>)
 800e93c:	f004 fc2a 	bl	8013194 <iprintf>
  *oversize = p->len - length;
 800e940:	693b      	ldr	r3, [r7, #16]
 800e942:	895a      	ldrh	r2, [r3, #10]
 800e944:	89bb      	ldrh	r3, [r7, #12]
 800e946:	1ad3      	subs	r3, r2, r3
 800e948:	b29a      	uxth	r2, r3
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800e94e:	693b      	ldr	r3, [r7, #16]
 800e950:	89ba      	ldrh	r2, [r7, #12]
 800e952:	811a      	strh	r2, [r3, #8]
 800e954:	693b      	ldr	r3, [r7, #16]
 800e956:	891a      	ldrh	r2, [r3, #8]
 800e958:	693b      	ldr	r3, [r7, #16]
 800e95a:	815a      	strh	r2, [r3, #10]
  return p;
 800e95c:	693b      	ldr	r3, [r7, #16]
}
 800e95e:	4618      	mov	r0, r3
 800e960:	3718      	adds	r7, #24
 800e962:	46bd      	mov	sp, r7
 800e964:	bd80      	pop	{r7, pc}
 800e966:	bf00      	nop
 800e968:	080158e8 	.word	0x080158e8
 800e96c:	080159a0 	.word	0x080159a0
 800e970:	0801593c 	.word	0x0801593c
 800e974:	080159c4 	.word	0x080159c4
 800e978:	080159e4 	.word	0x080159e4

0800e97c <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800e97c:	b580      	push	{r7, lr}
 800e97e:	b082      	sub	sp, #8
 800e980:	af00      	add	r7, sp, #0
 800e982:	6078      	str	r0, [r7, #4]
 800e984:	460b      	mov	r3, r1
 800e986:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d106      	bne.n	800e99c <tcp_write_checks+0x20>
 800e98e:	4b33      	ldr	r3, [pc, #204]	; (800ea5c <tcp_write_checks+0xe0>)
 800e990:	f240 1233 	movw	r2, #307	; 0x133
 800e994:	4932      	ldr	r1, [pc, #200]	; (800ea60 <tcp_write_checks+0xe4>)
 800e996:	4833      	ldr	r0, [pc, #204]	; (800ea64 <tcp_write_checks+0xe8>)
 800e998:	f004 fbfc 	bl	8013194 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	7d1b      	ldrb	r3, [r3, #20]
 800e9a0:	2b04      	cmp	r3, #4
 800e9a2:	d00e      	beq.n	800e9c2 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800e9a8:	2b07      	cmp	r3, #7
 800e9aa:	d00a      	beq.n	800e9c2 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800e9b0:	2b02      	cmp	r3, #2
 800e9b2:	d006      	beq.n	800e9c2 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800e9b8:	2b03      	cmp	r3, #3
 800e9ba:	d002      	beq.n	800e9c2 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800e9bc:	f06f 030a 	mvn.w	r3, #10
 800e9c0:	e048      	b.n	800ea54 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 800e9c2:	887b      	ldrh	r3, [r7, #2]
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d101      	bne.n	800e9cc <tcp_write_checks+0x50>
    return ERR_OK;
 800e9c8:	2300      	movs	r3, #0
 800e9ca:	e043      	b.n	800ea54 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800e9d2:	887a      	ldrh	r2, [r7, #2]
 800e9d4:	429a      	cmp	r2, r3
 800e9d6:	d909      	bls.n	800e9ec <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	8b5b      	ldrh	r3, [r3, #26]
 800e9dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e9e0:	b29a      	uxth	r2, r3
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800e9e6:	f04f 33ff 	mov.w	r3, #4294967295
 800e9ea:	e033      	b.n	800ea54 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e9f2:	2b08      	cmp	r3, #8
 800e9f4:	d909      	bls.n	800ea0a <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	8b5b      	ldrh	r3, [r3, #26]
 800e9fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e9fe:	b29a      	uxth	r2, r3
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800ea04:	f04f 33ff 	mov.w	r3, #4294967295
 800ea08:	e024      	b.n	800ea54 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d00f      	beq.n	800ea34 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d11a      	bne.n	800ea52 <tcp_write_checks+0xd6>
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d116      	bne.n	800ea52 <tcp_write_checks+0xd6>
 800ea24:	4b0d      	ldr	r3, [pc, #52]	; (800ea5c <tcp_write_checks+0xe0>)
 800ea26:	f240 1255 	movw	r2, #341	; 0x155
 800ea2a:	490f      	ldr	r1, [pc, #60]	; (800ea68 <tcp_write_checks+0xec>)
 800ea2c:	480d      	ldr	r0, [pc, #52]	; (800ea64 <tcp_write_checks+0xe8>)
 800ea2e:	f004 fbb1 	bl	8013194 <iprintf>
 800ea32:	e00e      	b.n	800ea52 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d103      	bne.n	800ea44 <tcp_write_checks+0xc8>
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d006      	beq.n	800ea52 <tcp_write_checks+0xd6>
 800ea44:	4b05      	ldr	r3, [pc, #20]	; (800ea5c <tcp_write_checks+0xe0>)
 800ea46:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800ea4a:	4908      	ldr	r1, [pc, #32]	; (800ea6c <tcp_write_checks+0xf0>)
 800ea4c:	4805      	ldr	r0, [pc, #20]	; (800ea64 <tcp_write_checks+0xe8>)
 800ea4e:	f004 fba1 	bl	8013194 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800ea52:	2300      	movs	r3, #0
}
 800ea54:	4618      	mov	r0, r3
 800ea56:	3708      	adds	r7, #8
 800ea58:	46bd      	mov	sp, r7
 800ea5a:	bd80      	pop	{r7, pc}
 800ea5c:	080158e8 	.word	0x080158e8
 800ea60:	080159f8 	.word	0x080159f8
 800ea64:	0801593c 	.word	0x0801593c
 800ea68:	08015a18 	.word	0x08015a18
 800ea6c:	08015a54 	.word	0x08015a54

0800ea70 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800ea70:	b590      	push	{r4, r7, lr}
 800ea72:	b09b      	sub	sp, #108	; 0x6c
 800ea74:	af04      	add	r7, sp, #16
 800ea76:	60f8      	str	r0, [r7, #12]
 800ea78:	60b9      	str	r1, [r7, #8]
 800ea7a:	4611      	mov	r1, r2
 800ea7c:	461a      	mov	r2, r3
 800ea7e:	460b      	mov	r3, r1
 800ea80:	80fb      	strh	r3, [r7, #6]
 800ea82:	4613      	mov	r3, r2
 800ea84:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800ea86:	2300      	movs	r3, #0
 800ea88:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800ea8a:	2300      	movs	r3, #0
 800ea8c:	653b      	str	r3, [r7, #80]	; 0x50
 800ea8e:	2300      	movs	r3, #0
 800ea90:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ea92:	2300      	movs	r3, #0
 800ea94:	64bb      	str	r3, [r7, #72]	; 0x48
 800ea96:	2300      	movs	r3, #0
 800ea98:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800ea9a:	2300      	movs	r3, #0
 800ea9c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 800eaa0:	2300      	movs	r3, #0
 800eaa2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800eaa6:	2300      	movs	r3, #0
 800eaa8:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800eaaa:	2300      	movs	r3, #0
 800eaac:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800eaae:	2300      	movs	r3, #0
 800eab0:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800eab2:	68fb      	ldr	r3, [r7, #12]
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d109      	bne.n	800eacc <tcp_write+0x5c>
 800eab8:	4ba4      	ldr	r3, [pc, #656]	; (800ed4c <tcp_write+0x2dc>)
 800eaba:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 800eabe:	49a4      	ldr	r1, [pc, #656]	; (800ed50 <tcp_write+0x2e0>)
 800eac0:	48a4      	ldr	r0, [pc, #656]	; (800ed54 <tcp_write+0x2e4>)
 800eac2:	f004 fb67 	bl	8013194 <iprintf>
 800eac6:	f06f 030f 	mvn.w	r3, #15
 800eaca:	e32a      	b.n	800f122 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800eacc:	68fb      	ldr	r3, [r7, #12]
 800eace:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ead2:	085b      	lsrs	r3, r3, #1
 800ead4:	b29a      	uxth	r2, r3
 800ead6:	68fb      	ldr	r3, [r7, #12]
 800ead8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eada:	4293      	cmp	r3, r2
 800eadc:	bf28      	it	cs
 800eade:	4613      	movcs	r3, r2
 800eae0:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800eae2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d102      	bne.n	800eaee <tcp_write+0x7e>
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eaec:	e000      	b.n	800eaf0 <tcp_write+0x80>
 800eaee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eaf0:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800eaf2:	68bb      	ldr	r3, [r7, #8]
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d109      	bne.n	800eb0c <tcp_write+0x9c>
 800eaf8:	4b94      	ldr	r3, [pc, #592]	; (800ed4c <tcp_write+0x2dc>)
 800eafa:	f240 12ad 	movw	r2, #429	; 0x1ad
 800eafe:	4996      	ldr	r1, [pc, #600]	; (800ed58 <tcp_write+0x2e8>)
 800eb00:	4894      	ldr	r0, [pc, #592]	; (800ed54 <tcp_write+0x2e4>)
 800eb02:	f004 fb47 	bl	8013194 <iprintf>
 800eb06:	f06f 030f 	mvn.w	r3, #15
 800eb0a:	e30a      	b.n	800f122 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800eb0c:	88fb      	ldrh	r3, [r7, #6]
 800eb0e:	4619      	mov	r1, r3
 800eb10:	68f8      	ldr	r0, [r7, #12]
 800eb12:	f7ff ff33 	bl	800e97c <tcp_write_checks>
 800eb16:	4603      	mov	r3, r0
 800eb18:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 800eb1c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d002      	beq.n	800eb2a <tcp_write+0xba>
    return err;
 800eb24:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800eb28:	e2fb      	b.n	800f122 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800eb30:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800eb34:	2300      	movs	r3, #0
 800eb36:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800eb3a:	68fb      	ldr	r3, [r7, #12]
 800eb3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	f000 80f6 	beq.w	800ed30 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eb48:	653b      	str	r3, [r7, #80]	; 0x50
 800eb4a:	e002      	b.n	800eb52 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 800eb4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800eb52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eb54:	681b      	ldr	r3, [r3, #0]
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d1f8      	bne.n	800eb4c <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800eb5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eb5c:	7a9b      	ldrb	r3, [r3, #10]
 800eb5e:	009b      	lsls	r3, r3, #2
 800eb60:	b29b      	uxth	r3, r3
 800eb62:	f003 0304 	and.w	r3, r3, #4
 800eb66:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800eb68:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800eb6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eb6c:	891b      	ldrh	r3, [r3, #8]
 800eb6e:	4619      	mov	r1, r3
 800eb70:	8c3b      	ldrh	r3, [r7, #32]
 800eb72:	440b      	add	r3, r1
 800eb74:	429a      	cmp	r2, r3
 800eb76:	da06      	bge.n	800eb86 <tcp_write+0x116>
 800eb78:	4b74      	ldr	r3, [pc, #464]	; (800ed4c <tcp_write+0x2dc>)
 800eb7a:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800eb7e:	4977      	ldr	r1, [pc, #476]	; (800ed5c <tcp_write+0x2ec>)
 800eb80:	4874      	ldr	r0, [pc, #464]	; (800ed54 <tcp_write+0x2e4>)
 800eb82:	f004 fb07 	bl	8013194 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800eb86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eb88:	891a      	ldrh	r2, [r3, #8]
 800eb8a:	8c3b      	ldrh	r3, [r7, #32]
 800eb8c:	4413      	add	r3, r2
 800eb8e:	b29b      	uxth	r3, r3
 800eb90:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800eb92:	1ad3      	subs	r3, r2, r3
 800eb94:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800eb9c:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800eb9e:	8a7b      	ldrh	r3, [r7, #18]
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d026      	beq.n	800ebf2 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800eba4:	8a7b      	ldrh	r3, [r7, #18]
 800eba6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800eba8:	429a      	cmp	r2, r3
 800ebaa:	d206      	bcs.n	800ebba <tcp_write+0x14a>
 800ebac:	4b67      	ldr	r3, [pc, #412]	; (800ed4c <tcp_write+0x2dc>)
 800ebae:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800ebb2:	496b      	ldr	r1, [pc, #428]	; (800ed60 <tcp_write+0x2f0>)
 800ebb4:	4867      	ldr	r0, [pc, #412]	; (800ed54 <tcp_write+0x2e4>)
 800ebb6:	f004 faed 	bl	8013194 <iprintf>
      seg = last_unsent;
 800ebba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ebbc:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800ebbe:	8a7b      	ldrh	r3, [r7, #18]
 800ebc0:	88fa      	ldrh	r2, [r7, #6]
 800ebc2:	4293      	cmp	r3, r2
 800ebc4:	bf28      	it	cs
 800ebc6:	4613      	movcs	r3, r2
 800ebc8:	b29b      	uxth	r3, r3
 800ebca:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800ebcc:	4293      	cmp	r3, r2
 800ebce:	bf28      	it	cs
 800ebd0:	4613      	movcs	r3, r2
 800ebd2:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 800ebd4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ebd8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ebda:	4413      	add	r3, r2
 800ebdc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 800ebe0:	8a7a      	ldrh	r2, [r7, #18]
 800ebe2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ebe4:	1ad3      	subs	r3, r2, r3
 800ebe6:	b29b      	uxth	r3, r3
 800ebe8:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800ebea:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800ebec:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ebee:	1ad3      	subs	r3, r2, r3
 800ebf0:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800ebf2:	8a7b      	ldrh	r3, [r7, #18]
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d00b      	beq.n	800ec10 <tcp_write+0x1a0>
 800ebf8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ebfc:	88fb      	ldrh	r3, [r7, #6]
 800ebfe:	429a      	cmp	r2, r3
 800ec00:	d006      	beq.n	800ec10 <tcp_write+0x1a0>
 800ec02:	4b52      	ldr	r3, [pc, #328]	; (800ed4c <tcp_write+0x2dc>)
 800ec04:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ec08:	4956      	ldr	r1, [pc, #344]	; (800ed64 <tcp_write+0x2f4>)
 800ec0a:	4852      	ldr	r0, [pc, #328]	; (800ed54 <tcp_write+0x2e4>)
 800ec0c:	f004 fac2 	bl	8013194 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800ec10:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ec14:	88fb      	ldrh	r3, [r7, #6]
 800ec16:	429a      	cmp	r2, r3
 800ec18:	f080 8167 	bcs.w	800eeea <tcp_write+0x47a>
 800ec1c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	f000 8163 	beq.w	800eeea <tcp_write+0x47a>
 800ec24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ec26:	891b      	ldrh	r3, [r3, #8]
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	f000 815e 	beq.w	800eeea <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800ec2e:	88fa      	ldrh	r2, [r7, #6]
 800ec30:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ec34:	1ad2      	subs	r2, r2, r3
 800ec36:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ec38:	4293      	cmp	r3, r2
 800ec3a:	bfa8      	it	ge
 800ec3c:	4613      	movge	r3, r2
 800ec3e:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800ec40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ec42:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800ec44:	797b      	ldrb	r3, [r7, #5]
 800ec46:	f003 0301 	and.w	r3, r3, #1
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	d027      	beq.n	800ec9e <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800ec4e:	f107 0012 	add.w	r0, r7, #18
 800ec52:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800ec54:	8bf9      	ldrh	r1, [r7, #30]
 800ec56:	2301      	movs	r3, #1
 800ec58:	9302      	str	r3, [sp, #8]
 800ec5a:	797b      	ldrb	r3, [r7, #5]
 800ec5c:	9301      	str	r3, [sp, #4]
 800ec5e:	68fb      	ldr	r3, [r7, #12]
 800ec60:	9300      	str	r3, [sp, #0]
 800ec62:	4603      	mov	r3, r0
 800ec64:	2000      	movs	r0, #0
 800ec66:	f7ff fe0f 	bl	800e888 <tcp_pbuf_prealloc>
 800ec6a:	6578      	str	r0, [r7, #84]	; 0x54
 800ec6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	f000 8225 	beq.w	800f0be <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800ec74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ec76:	6858      	ldr	r0, [r3, #4]
 800ec78:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ec7c:	68ba      	ldr	r2, [r7, #8]
 800ec7e:	4413      	add	r3, r2
 800ec80:	8bfa      	ldrh	r2, [r7, #30]
 800ec82:	4619      	mov	r1, r3
 800ec84:	f004 fa70 	bl	8013168 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800ec88:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800ec8a:	f7fb f9eb 	bl	800a064 <pbuf_clen>
 800ec8e:	4603      	mov	r3, r0
 800ec90:	461a      	mov	r2, r3
 800ec92:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800ec96:	4413      	add	r3, r2
 800ec98:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800ec9c:	e041      	b.n	800ed22 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800ec9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eca0:	685b      	ldr	r3, [r3, #4]
 800eca2:	637b      	str	r3, [r7, #52]	; 0x34
 800eca4:	e002      	b.n	800ecac <tcp_write+0x23c>
 800eca6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	637b      	str	r3, [r7, #52]	; 0x34
 800ecac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ecae:	681b      	ldr	r3, [r3, #0]
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d1f8      	bne.n	800eca6 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800ecb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ecb6:	7b1b      	ldrb	r3, [r3, #12]
 800ecb8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d115      	bne.n	800ecec <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800ecc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ecc2:	685b      	ldr	r3, [r3, #4]
 800ecc4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ecc6:	8952      	ldrh	r2, [r2, #10]
 800ecc8:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800ecca:	68ba      	ldr	r2, [r7, #8]
 800eccc:	429a      	cmp	r2, r3
 800ecce:	d10d      	bne.n	800ecec <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800ecd0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	d006      	beq.n	800ece6 <tcp_write+0x276>
 800ecd8:	4b1c      	ldr	r3, [pc, #112]	; (800ed4c <tcp_write+0x2dc>)
 800ecda:	f240 2231 	movw	r2, #561	; 0x231
 800ecde:	4922      	ldr	r1, [pc, #136]	; (800ed68 <tcp_write+0x2f8>)
 800ece0:	481c      	ldr	r0, [pc, #112]	; (800ed54 <tcp_write+0x2e4>)
 800ece2:	f004 fa57 	bl	8013194 <iprintf>
          extendlen = seglen;
 800ece6:	8bfb      	ldrh	r3, [r7, #30]
 800ece8:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800ecea:	e01a      	b.n	800ed22 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800ecec:	8bfb      	ldrh	r3, [r7, #30]
 800ecee:	2201      	movs	r2, #1
 800ecf0:	4619      	mov	r1, r3
 800ecf2:	2000      	movs	r0, #0
 800ecf4:	f7fa fe4a 	bl	800998c <pbuf_alloc>
 800ecf8:	6578      	str	r0, [r7, #84]	; 0x54
 800ecfa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	f000 81e0 	beq.w	800f0c2 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800ed02:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ed06:	68ba      	ldr	r2, [r7, #8]
 800ed08:	441a      	add	r2, r3
 800ed0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ed0c:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800ed0e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800ed10:	f7fb f9a8 	bl	800a064 <pbuf_clen>
 800ed14:	4603      	mov	r3, r0
 800ed16:	461a      	mov	r2, r3
 800ed18:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800ed1c:	4413      	add	r3, r2
 800ed1e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800ed22:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ed26:	8bfb      	ldrh	r3, [r7, #30]
 800ed28:	4413      	add	r3, r2
 800ed2a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800ed2e:	e0dc      	b.n	800eeea <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	f000 80d7 	beq.w	800eeea <tcp_write+0x47a>
 800ed3c:	4b03      	ldr	r3, [pc, #12]	; (800ed4c <tcp_write+0x2dc>)
 800ed3e:	f240 224a 	movw	r2, #586	; 0x24a
 800ed42:	490a      	ldr	r1, [pc, #40]	; (800ed6c <tcp_write+0x2fc>)
 800ed44:	4803      	ldr	r0, [pc, #12]	; (800ed54 <tcp_write+0x2e4>)
 800ed46:	f004 fa25 	bl	8013194 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800ed4a:	e0ce      	b.n	800eeea <tcp_write+0x47a>
 800ed4c:	080158e8 	.word	0x080158e8
 800ed50:	08015a88 	.word	0x08015a88
 800ed54:	0801593c 	.word	0x0801593c
 800ed58:	08015aa0 	.word	0x08015aa0
 800ed5c:	08015ad4 	.word	0x08015ad4
 800ed60:	08015aec 	.word	0x08015aec
 800ed64:	08015b0c 	.word	0x08015b0c
 800ed68:	08015b2c 	.word	0x08015b2c
 800ed6c:	08015b58 	.word	0x08015b58
    struct pbuf *p;
    u16_t left = len - pos;
 800ed70:	88fa      	ldrh	r2, [r7, #6]
 800ed72:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ed76:	1ad3      	subs	r3, r2, r3
 800ed78:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800ed7a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800ed7e:	b29b      	uxth	r3, r3
 800ed80:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ed82:	1ad3      	subs	r3, r2, r3
 800ed84:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800ed86:	8b7a      	ldrh	r2, [r7, #26]
 800ed88:	8bbb      	ldrh	r3, [r7, #28]
 800ed8a:	4293      	cmp	r3, r2
 800ed8c:	bf28      	it	cs
 800ed8e:	4613      	movcs	r3, r2
 800ed90:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800ed92:	797b      	ldrb	r3, [r7, #5]
 800ed94:	f003 0301 	and.w	r3, r3, #1
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	d036      	beq.n	800ee0a <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800ed9c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800eda0:	b29a      	uxth	r2, r3
 800eda2:	8b3b      	ldrh	r3, [r7, #24]
 800eda4:	4413      	add	r3, r2
 800eda6:	b299      	uxth	r1, r3
 800eda8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800edaa:	2b00      	cmp	r3, #0
 800edac:	bf0c      	ite	eq
 800edae:	2301      	moveq	r3, #1
 800edb0:	2300      	movne	r3, #0
 800edb2:	b2db      	uxtb	r3, r3
 800edb4:	f107 0012 	add.w	r0, r7, #18
 800edb8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800edba:	9302      	str	r3, [sp, #8]
 800edbc:	797b      	ldrb	r3, [r7, #5]
 800edbe:	9301      	str	r3, [sp, #4]
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	9300      	str	r3, [sp, #0]
 800edc4:	4603      	mov	r3, r0
 800edc6:	2036      	movs	r0, #54	; 0x36
 800edc8:	f7ff fd5e 	bl	800e888 <tcp_pbuf_prealloc>
 800edcc:	6338      	str	r0, [r7, #48]	; 0x30
 800edce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	f000 8178 	beq.w	800f0c6 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800edd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edd8:	895b      	ldrh	r3, [r3, #10]
 800edda:	8b3a      	ldrh	r2, [r7, #24]
 800eddc:	429a      	cmp	r2, r3
 800edde:	d906      	bls.n	800edee <tcp_write+0x37e>
 800ede0:	4b8c      	ldr	r3, [pc, #560]	; (800f014 <tcp_write+0x5a4>)
 800ede2:	f240 2266 	movw	r2, #614	; 0x266
 800ede6:	498c      	ldr	r1, [pc, #560]	; (800f018 <tcp_write+0x5a8>)
 800ede8:	488c      	ldr	r0, [pc, #560]	; (800f01c <tcp_write+0x5ac>)
 800edea:	f004 f9d3 	bl	8013194 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800edee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edf0:	685a      	ldr	r2, [r3, #4]
 800edf2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800edf6:	18d0      	adds	r0, r2, r3
 800edf8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800edfc:	68ba      	ldr	r2, [r7, #8]
 800edfe:	4413      	add	r3, r2
 800ee00:	8b3a      	ldrh	r2, [r7, #24]
 800ee02:	4619      	mov	r1, r3
 800ee04:	f004 f9b0 	bl	8013168 <memcpy>
 800ee08:	e02f      	b.n	800ee6a <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800ee0a:	8a7b      	ldrh	r3, [r7, #18]
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d006      	beq.n	800ee1e <tcp_write+0x3ae>
 800ee10:	4b80      	ldr	r3, [pc, #512]	; (800f014 <tcp_write+0x5a4>)
 800ee12:	f240 2271 	movw	r2, #625	; 0x271
 800ee16:	4982      	ldr	r1, [pc, #520]	; (800f020 <tcp_write+0x5b0>)
 800ee18:	4880      	ldr	r0, [pc, #512]	; (800f01c <tcp_write+0x5ac>)
 800ee1a:	f004 f9bb 	bl	8013194 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800ee1e:	8b3b      	ldrh	r3, [r7, #24]
 800ee20:	2201      	movs	r2, #1
 800ee22:	4619      	mov	r1, r3
 800ee24:	2036      	movs	r0, #54	; 0x36
 800ee26:	f7fa fdb1 	bl	800998c <pbuf_alloc>
 800ee2a:	6178      	str	r0, [r7, #20]
 800ee2c:	697b      	ldr	r3, [r7, #20]
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	f000 814b 	beq.w	800f0ca <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800ee34:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ee38:	68ba      	ldr	r2, [r7, #8]
 800ee3a:	441a      	add	r2, r3
 800ee3c:	697b      	ldr	r3, [r7, #20]
 800ee3e:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800ee40:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800ee44:	b29b      	uxth	r3, r3
 800ee46:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ee4a:	4619      	mov	r1, r3
 800ee4c:	2036      	movs	r0, #54	; 0x36
 800ee4e:	f7fa fd9d 	bl	800998c <pbuf_alloc>
 800ee52:	6338      	str	r0, [r7, #48]	; 0x30
 800ee54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d103      	bne.n	800ee62 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800ee5a:	6978      	ldr	r0, [r7, #20]
 800ee5c:	f7fb f87a 	bl	8009f54 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800ee60:	e136      	b.n	800f0d0 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800ee62:	6979      	ldr	r1, [r7, #20]
 800ee64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ee66:	f7fb f937 	bl	800a0d8 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800ee6a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ee6c:	f7fb f8fa 	bl	800a064 <pbuf_clen>
 800ee70:	4603      	mov	r3, r0
 800ee72:	461a      	mov	r2, r3
 800ee74:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800ee78:	4413      	add	r3, r2
 800ee7a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800ee7e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800ee82:	2b09      	cmp	r3, #9
 800ee84:	d903      	bls.n	800ee8e <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800ee86:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ee88:	f7fb f864 	bl	8009f54 <pbuf_free>
      goto memerr;
 800ee8c:	e120      	b.n	800f0d0 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800ee8e:	68fb      	ldr	r3, [r7, #12]
 800ee90:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ee92:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ee96:	441a      	add	r2, r3
 800ee98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ee9c:	9300      	str	r3, [sp, #0]
 800ee9e:	4613      	mov	r3, r2
 800eea0:	2200      	movs	r2, #0
 800eea2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800eea4:	68f8      	ldr	r0, [r7, #12]
 800eea6:	f7ff fc51 	bl	800e74c <tcp_create_segment>
 800eeaa:	64f8      	str	r0, [r7, #76]	; 0x4c
 800eeac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	f000 810d 	beq.w	800f0ce <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800eeb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	d102      	bne.n	800eec0 <tcp_write+0x450>
      queue = seg;
 800eeba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eebc:	647b      	str	r3, [r7, #68]	; 0x44
 800eebe:	e00c      	b.n	800eeda <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800eec0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d106      	bne.n	800eed4 <tcp_write+0x464>
 800eec6:	4b53      	ldr	r3, [pc, #332]	; (800f014 <tcp_write+0x5a4>)
 800eec8:	f240 22ab 	movw	r2, #683	; 0x2ab
 800eecc:	4955      	ldr	r1, [pc, #340]	; (800f024 <tcp_write+0x5b4>)
 800eece:	4853      	ldr	r0, [pc, #332]	; (800f01c <tcp_write+0x5ac>)
 800eed0:	f004 f960 	bl	8013194 <iprintf>
      prev_seg->next = seg;
 800eed4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eed6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800eed8:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800eeda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eedc:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800eede:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800eee2:	8b3b      	ldrh	r3, [r7, #24]
 800eee4:	4413      	add	r3, r2
 800eee6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 800eeea:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800eeee:	88fb      	ldrh	r3, [r7, #6]
 800eef0:	429a      	cmp	r2, r3
 800eef2:	f4ff af3d 	bcc.w	800ed70 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800eef6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d02c      	beq.n	800ef56 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800eefc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eefe:	685b      	ldr	r3, [r3, #4]
 800ef00:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ef02:	e01e      	b.n	800ef42 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 800ef04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef06:	891a      	ldrh	r2, [r3, #8]
 800ef08:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ef0a:	4413      	add	r3, r2
 800ef0c:	b29a      	uxth	r2, r3
 800ef0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef10:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800ef12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d110      	bne.n	800ef3c <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800ef1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef1c:	685b      	ldr	r3, [r3, #4]
 800ef1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ef20:	8952      	ldrh	r2, [r2, #10]
 800ef22:	4413      	add	r3, r2
 800ef24:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800ef26:	68b9      	ldr	r1, [r7, #8]
 800ef28:	4618      	mov	r0, r3
 800ef2a:	f004 f91d 	bl	8013168 <memcpy>
        p->len += oversize_used;
 800ef2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef30:	895a      	ldrh	r2, [r3, #10]
 800ef32:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ef34:	4413      	add	r3, r2
 800ef36:	b29a      	uxth	r2, r3
 800ef38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef3a:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800ef3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef3e:	681b      	ldr	r3, [r3, #0]
 800ef40:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ef42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d1dd      	bne.n	800ef04 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 800ef48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ef4a:	891a      	ldrh	r2, [r3, #8]
 800ef4c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ef4e:	4413      	add	r3, r2
 800ef50:	b29a      	uxth	r2, r3
 800ef52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ef54:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800ef56:	8a7a      	ldrh	r2, [r7, #18]
 800ef58:	68fb      	ldr	r3, [r7, #12]
 800ef5a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800ef5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	d018      	beq.n	800ef96 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800ef64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d106      	bne.n	800ef78 <tcp_write+0x508>
 800ef6a:	4b2a      	ldr	r3, [pc, #168]	; (800f014 <tcp_write+0x5a4>)
 800ef6c:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 800ef70:	492d      	ldr	r1, [pc, #180]	; (800f028 <tcp_write+0x5b8>)
 800ef72:	482a      	ldr	r0, [pc, #168]	; (800f01c <tcp_write+0x5ac>)
 800ef74:	f004 f90e 	bl	8013194 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800ef78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ef7a:	685b      	ldr	r3, [r3, #4]
 800ef7c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ef7e:	4618      	mov	r0, r3
 800ef80:	f7fb f8aa 	bl	800a0d8 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800ef84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ef86:	891a      	ldrh	r2, [r3, #8]
 800ef88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ef8a:	891b      	ldrh	r3, [r3, #8]
 800ef8c:	4413      	add	r3, r2
 800ef8e:	b29a      	uxth	r2, r3
 800ef90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ef92:	811a      	strh	r2, [r3, #8]
 800ef94:	e037      	b.n	800f006 <tcp_write+0x596>
  } else if (extendlen > 0) {
 800ef96:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d034      	beq.n	800f006 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800ef9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d003      	beq.n	800efaa <tcp_write+0x53a>
 800efa2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800efa4:	685b      	ldr	r3, [r3, #4]
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d106      	bne.n	800efb8 <tcp_write+0x548>
 800efaa:	4b1a      	ldr	r3, [pc, #104]	; (800f014 <tcp_write+0x5a4>)
 800efac:	f240 22e6 	movw	r2, #742	; 0x2e6
 800efb0:	491e      	ldr	r1, [pc, #120]	; (800f02c <tcp_write+0x5bc>)
 800efb2:	481a      	ldr	r0, [pc, #104]	; (800f01c <tcp_write+0x5ac>)
 800efb4:	f004 f8ee 	bl	8013194 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800efb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800efba:	685b      	ldr	r3, [r3, #4]
 800efbc:	62bb      	str	r3, [r7, #40]	; 0x28
 800efbe:	e009      	b.n	800efd4 <tcp_write+0x564>
      p->tot_len += extendlen;
 800efc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efc2:	891a      	ldrh	r2, [r3, #8]
 800efc4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800efc6:	4413      	add	r3, r2
 800efc8:	b29a      	uxth	r2, r3
 800efca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efcc:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800efce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	62bb      	str	r3, [r7, #40]	; 0x28
 800efd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efd6:	681b      	ldr	r3, [r3, #0]
 800efd8:	2b00      	cmp	r3, #0
 800efda:	d1f1      	bne.n	800efc0 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 800efdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efde:	891a      	ldrh	r2, [r3, #8]
 800efe0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800efe2:	4413      	add	r3, r2
 800efe4:	b29a      	uxth	r2, r3
 800efe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efe8:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800efea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efec:	895a      	ldrh	r2, [r3, #10]
 800efee:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800eff0:	4413      	add	r3, r2
 800eff2:	b29a      	uxth	r2, r3
 800eff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eff6:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800eff8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800effa:	891a      	ldrh	r2, [r3, #8]
 800effc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800effe:	4413      	add	r3, r2
 800f000:	b29a      	uxth	r2, r3
 800f002:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f004:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800f006:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f008:	2b00      	cmp	r3, #0
 800f00a:	d111      	bne.n	800f030 <tcp_write+0x5c0>
    pcb->unsent = queue;
 800f00c:	68fb      	ldr	r3, [r7, #12]
 800f00e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f010:	66da      	str	r2, [r3, #108]	; 0x6c
 800f012:	e010      	b.n	800f036 <tcp_write+0x5c6>
 800f014:	080158e8 	.word	0x080158e8
 800f018:	08015b88 	.word	0x08015b88
 800f01c:	0801593c 	.word	0x0801593c
 800f020:	08015bc8 	.word	0x08015bc8
 800f024:	08015bd8 	.word	0x08015bd8
 800f028:	08015bec 	.word	0x08015bec
 800f02c:	08015c24 	.word	0x08015c24
  } else {
    last_unsent->next = queue;
 800f030:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f032:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f034:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800f036:	68fb      	ldr	r3, [r7, #12]
 800f038:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f03a:	88fb      	ldrh	r3, [r7, #6]
 800f03c:	441a      	add	r2, r3
 800f03e:	68fb      	ldr	r3, [r7, #12]
 800f040:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800f048:	88fb      	ldrh	r3, [r7, #6]
 800f04a:	1ad3      	subs	r3, r2, r3
 800f04c:	b29a      	uxth	r2, r3
 800f04e:	68fb      	ldr	r3, [r7, #12]
 800f050:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 800f054:	68fb      	ldr	r3, [r7, #12]
 800f056:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800f05a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800f05e:	68fb      	ldr	r3, [r7, #12]
 800f060:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f064:	2b00      	cmp	r3, #0
 800f066:	d00e      	beq.n	800f086 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 800f068:	68fb      	ldr	r3, [r7, #12]
 800f06a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d10a      	bne.n	800f086 <tcp_write+0x616>
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f074:	2b00      	cmp	r3, #0
 800f076:	d106      	bne.n	800f086 <tcp_write+0x616>
 800f078:	4b2c      	ldr	r3, [pc, #176]	; (800f12c <tcp_write+0x6bc>)
 800f07a:	f240 3212 	movw	r2, #786	; 0x312
 800f07e:	492c      	ldr	r1, [pc, #176]	; (800f130 <tcp_write+0x6c0>)
 800f080:	482c      	ldr	r0, [pc, #176]	; (800f134 <tcp_write+0x6c4>)
 800f082:	f004 f887 	bl	8013194 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800f086:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d016      	beq.n	800f0ba <tcp_write+0x64a>
 800f08c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f08e:	68db      	ldr	r3, [r3, #12]
 800f090:	2b00      	cmp	r3, #0
 800f092:	d012      	beq.n	800f0ba <tcp_write+0x64a>
 800f094:	797b      	ldrb	r3, [r7, #5]
 800f096:	f003 0302 	and.w	r3, r3, #2
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d10d      	bne.n	800f0ba <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800f09e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f0a0:	68db      	ldr	r3, [r3, #12]
 800f0a2:	899b      	ldrh	r3, [r3, #12]
 800f0a4:	b29c      	uxth	r4, r3
 800f0a6:	2008      	movs	r0, #8
 800f0a8:	f7f9 fb2e 	bl	8008708 <lwip_htons>
 800f0ac:	4603      	mov	r3, r0
 800f0ae:	461a      	mov	r2, r3
 800f0b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f0b2:	68db      	ldr	r3, [r3, #12]
 800f0b4:	4322      	orrs	r2, r4
 800f0b6:	b292      	uxth	r2, r2
 800f0b8:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800f0ba:	2300      	movs	r3, #0
 800f0bc:	e031      	b.n	800f122 <tcp_write+0x6b2>
          goto memerr;
 800f0be:	bf00      	nop
 800f0c0:	e006      	b.n	800f0d0 <tcp_write+0x660>
            goto memerr;
 800f0c2:	bf00      	nop
 800f0c4:	e004      	b.n	800f0d0 <tcp_write+0x660>
        goto memerr;
 800f0c6:	bf00      	nop
 800f0c8:	e002      	b.n	800f0d0 <tcp_write+0x660>
        goto memerr;
 800f0ca:	bf00      	nop
 800f0cc:	e000      	b.n	800f0d0 <tcp_write+0x660>
      goto memerr;
 800f0ce:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800f0d0:	68fb      	ldr	r3, [r7, #12]
 800f0d2:	8b5b      	ldrh	r3, [r3, #26]
 800f0d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f0d8:	b29a      	uxth	r2, r3
 800f0da:	68fb      	ldr	r3, [r7, #12]
 800f0dc:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800f0de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d002      	beq.n	800f0ea <tcp_write+0x67a>
    pbuf_free(concat_p);
 800f0e4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800f0e6:	f7fa ff35 	bl	8009f54 <pbuf_free>
  }
  if (queue != NULL) {
 800f0ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d002      	beq.n	800f0f6 <tcp_write+0x686>
    tcp_segs_free(queue);
 800f0f0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f0f2:	f7fc fb57 	bl	800b7a4 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800f0f6:	68fb      	ldr	r3, [r7, #12]
 800f0f8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d00e      	beq.n	800f11e <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800f100:	68fb      	ldr	r3, [r7, #12]
 800f102:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f104:	2b00      	cmp	r3, #0
 800f106:	d10a      	bne.n	800f11e <tcp_write+0x6ae>
 800f108:	68fb      	ldr	r3, [r7, #12]
 800f10a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d106      	bne.n	800f11e <tcp_write+0x6ae>
 800f110:	4b06      	ldr	r3, [pc, #24]	; (800f12c <tcp_write+0x6bc>)
 800f112:	f240 3227 	movw	r2, #807	; 0x327
 800f116:	4906      	ldr	r1, [pc, #24]	; (800f130 <tcp_write+0x6c0>)
 800f118:	4806      	ldr	r0, [pc, #24]	; (800f134 <tcp_write+0x6c4>)
 800f11a:	f004 f83b 	bl	8013194 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800f11e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800f122:	4618      	mov	r0, r3
 800f124:	375c      	adds	r7, #92	; 0x5c
 800f126:	46bd      	mov	sp, r7
 800f128:	bd90      	pop	{r4, r7, pc}
 800f12a:	bf00      	nop
 800f12c:	080158e8 	.word	0x080158e8
 800f130:	08015c5c 	.word	0x08015c5c
 800f134:	0801593c 	.word	0x0801593c

0800f138 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800f138:	b590      	push	{r4, r7, lr}
 800f13a:	b08b      	sub	sp, #44	; 0x2c
 800f13c:	af02      	add	r7, sp, #8
 800f13e:	6078      	str	r0, [r7, #4]
 800f140:	460b      	mov	r3, r1
 800f142:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800f144:	2300      	movs	r3, #0
 800f146:	61fb      	str	r3, [r7, #28]
 800f148:	2300      	movs	r3, #0
 800f14a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800f14c:	2300      	movs	r3, #0
 800f14e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	2b00      	cmp	r3, #0
 800f154:	d106      	bne.n	800f164 <tcp_split_unsent_seg+0x2c>
 800f156:	4b95      	ldr	r3, [pc, #596]	; (800f3ac <tcp_split_unsent_seg+0x274>)
 800f158:	f240 324b 	movw	r2, #843	; 0x34b
 800f15c:	4994      	ldr	r1, [pc, #592]	; (800f3b0 <tcp_split_unsent_seg+0x278>)
 800f15e:	4895      	ldr	r0, [pc, #596]	; (800f3b4 <tcp_split_unsent_seg+0x27c>)
 800f160:	f004 f818 	bl	8013194 <iprintf>

  useg = pcb->unsent;
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f168:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800f16a:	697b      	ldr	r3, [r7, #20]
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	d102      	bne.n	800f176 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800f170:	f04f 33ff 	mov.w	r3, #4294967295
 800f174:	e116      	b.n	800f3a4 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800f176:	887b      	ldrh	r3, [r7, #2]
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d109      	bne.n	800f190 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800f17c:	4b8b      	ldr	r3, [pc, #556]	; (800f3ac <tcp_split_unsent_seg+0x274>)
 800f17e:	f240 3253 	movw	r2, #851	; 0x353
 800f182:	498d      	ldr	r1, [pc, #564]	; (800f3b8 <tcp_split_unsent_seg+0x280>)
 800f184:	488b      	ldr	r0, [pc, #556]	; (800f3b4 <tcp_split_unsent_seg+0x27c>)
 800f186:	f004 f805 	bl	8013194 <iprintf>
    return ERR_VAL;
 800f18a:	f06f 0305 	mvn.w	r3, #5
 800f18e:	e109      	b.n	800f3a4 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800f190:	697b      	ldr	r3, [r7, #20]
 800f192:	891b      	ldrh	r3, [r3, #8]
 800f194:	887a      	ldrh	r2, [r7, #2]
 800f196:	429a      	cmp	r2, r3
 800f198:	d301      	bcc.n	800f19e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800f19a:	2300      	movs	r3, #0
 800f19c:	e102      	b.n	800f3a4 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f1a2:	887a      	ldrh	r2, [r7, #2]
 800f1a4:	429a      	cmp	r2, r3
 800f1a6:	d906      	bls.n	800f1b6 <tcp_split_unsent_seg+0x7e>
 800f1a8:	4b80      	ldr	r3, [pc, #512]	; (800f3ac <tcp_split_unsent_seg+0x274>)
 800f1aa:	f240 325b 	movw	r2, #859	; 0x35b
 800f1ae:	4983      	ldr	r1, [pc, #524]	; (800f3bc <tcp_split_unsent_seg+0x284>)
 800f1b0:	4880      	ldr	r0, [pc, #512]	; (800f3b4 <tcp_split_unsent_seg+0x27c>)
 800f1b2:	f003 ffef 	bl	8013194 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800f1b6:	697b      	ldr	r3, [r7, #20]
 800f1b8:	891b      	ldrh	r3, [r3, #8]
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d106      	bne.n	800f1cc <tcp_split_unsent_seg+0x94>
 800f1be:	4b7b      	ldr	r3, [pc, #492]	; (800f3ac <tcp_split_unsent_seg+0x274>)
 800f1c0:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800f1c4:	497e      	ldr	r1, [pc, #504]	; (800f3c0 <tcp_split_unsent_seg+0x288>)
 800f1c6:	487b      	ldr	r0, [pc, #492]	; (800f3b4 <tcp_split_unsent_seg+0x27c>)
 800f1c8:	f003 ffe4 	bl	8013194 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800f1cc:	697b      	ldr	r3, [r7, #20]
 800f1ce:	7a9b      	ldrb	r3, [r3, #10]
 800f1d0:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800f1d2:	7bfb      	ldrb	r3, [r7, #15]
 800f1d4:	009b      	lsls	r3, r3, #2
 800f1d6:	b2db      	uxtb	r3, r3
 800f1d8:	f003 0304 	and.w	r3, r3, #4
 800f1dc:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800f1de:	697b      	ldr	r3, [r7, #20]
 800f1e0:	891a      	ldrh	r2, [r3, #8]
 800f1e2:	887b      	ldrh	r3, [r7, #2]
 800f1e4:	1ad3      	subs	r3, r2, r3
 800f1e6:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800f1e8:	7bbb      	ldrb	r3, [r7, #14]
 800f1ea:	b29a      	uxth	r2, r3
 800f1ec:	89bb      	ldrh	r3, [r7, #12]
 800f1ee:	4413      	add	r3, r2
 800f1f0:	b29b      	uxth	r3, r3
 800f1f2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f1f6:	4619      	mov	r1, r3
 800f1f8:	2036      	movs	r0, #54	; 0x36
 800f1fa:	f7fa fbc7 	bl	800998c <pbuf_alloc>
 800f1fe:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800f200:	693b      	ldr	r3, [r7, #16]
 800f202:	2b00      	cmp	r3, #0
 800f204:	f000 80b7 	beq.w	800f376 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800f208:	697b      	ldr	r3, [r7, #20]
 800f20a:	685b      	ldr	r3, [r3, #4]
 800f20c:	891a      	ldrh	r2, [r3, #8]
 800f20e:	697b      	ldr	r3, [r7, #20]
 800f210:	891b      	ldrh	r3, [r3, #8]
 800f212:	1ad3      	subs	r3, r2, r3
 800f214:	b29a      	uxth	r2, r3
 800f216:	887b      	ldrh	r3, [r7, #2]
 800f218:	4413      	add	r3, r2
 800f21a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800f21c:	697b      	ldr	r3, [r7, #20]
 800f21e:	6858      	ldr	r0, [r3, #4]
 800f220:	693b      	ldr	r3, [r7, #16]
 800f222:	685a      	ldr	r2, [r3, #4]
 800f224:	7bbb      	ldrb	r3, [r7, #14]
 800f226:	18d1      	adds	r1, r2, r3
 800f228:	897b      	ldrh	r3, [r7, #10]
 800f22a:	89ba      	ldrh	r2, [r7, #12]
 800f22c:	f7fb f88c 	bl	800a348 <pbuf_copy_partial>
 800f230:	4603      	mov	r3, r0
 800f232:	461a      	mov	r2, r3
 800f234:	89bb      	ldrh	r3, [r7, #12]
 800f236:	4293      	cmp	r3, r2
 800f238:	f040 809f 	bne.w	800f37a <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800f23c:	697b      	ldr	r3, [r7, #20]
 800f23e:	68db      	ldr	r3, [r3, #12]
 800f240:	899b      	ldrh	r3, [r3, #12]
 800f242:	b29b      	uxth	r3, r3
 800f244:	4618      	mov	r0, r3
 800f246:	f7f9 fa5f 	bl	8008708 <lwip_htons>
 800f24a:	4603      	mov	r3, r0
 800f24c:	b2db      	uxtb	r3, r3
 800f24e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f252:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800f254:	2300      	movs	r3, #0
 800f256:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800f258:	7efb      	ldrb	r3, [r7, #27]
 800f25a:	f003 0308 	and.w	r3, r3, #8
 800f25e:	2b00      	cmp	r3, #0
 800f260:	d007      	beq.n	800f272 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800f262:	7efb      	ldrb	r3, [r7, #27]
 800f264:	f023 0308 	bic.w	r3, r3, #8
 800f268:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800f26a:	7ebb      	ldrb	r3, [r7, #26]
 800f26c:	f043 0308 	orr.w	r3, r3, #8
 800f270:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800f272:	7efb      	ldrb	r3, [r7, #27]
 800f274:	f003 0301 	and.w	r3, r3, #1
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d007      	beq.n	800f28c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800f27c:	7efb      	ldrb	r3, [r7, #27]
 800f27e:	f023 0301 	bic.w	r3, r3, #1
 800f282:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800f284:	7ebb      	ldrb	r3, [r7, #26]
 800f286:	f043 0301 	orr.w	r3, r3, #1
 800f28a:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800f28c:	697b      	ldr	r3, [r7, #20]
 800f28e:	68db      	ldr	r3, [r3, #12]
 800f290:	685b      	ldr	r3, [r3, #4]
 800f292:	4618      	mov	r0, r3
 800f294:	f7f9 fa4d 	bl	8008732 <lwip_htonl>
 800f298:	4602      	mov	r2, r0
 800f29a:	887b      	ldrh	r3, [r7, #2]
 800f29c:	18d1      	adds	r1, r2, r3
 800f29e:	7eba      	ldrb	r2, [r7, #26]
 800f2a0:	7bfb      	ldrb	r3, [r7, #15]
 800f2a2:	9300      	str	r3, [sp, #0]
 800f2a4:	460b      	mov	r3, r1
 800f2a6:	6939      	ldr	r1, [r7, #16]
 800f2a8:	6878      	ldr	r0, [r7, #4]
 800f2aa:	f7ff fa4f 	bl	800e74c <tcp_create_segment>
 800f2ae:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800f2b0:	69fb      	ldr	r3, [r7, #28]
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	d063      	beq.n	800f37e <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800f2b6:	697b      	ldr	r3, [r7, #20]
 800f2b8:	685b      	ldr	r3, [r3, #4]
 800f2ba:	4618      	mov	r0, r3
 800f2bc:	f7fa fed2 	bl	800a064 <pbuf_clen>
 800f2c0:	4603      	mov	r3, r0
 800f2c2:	461a      	mov	r2, r3
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f2ca:	1a9b      	subs	r3, r3, r2
 800f2cc:	b29a      	uxth	r2, r3
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800f2d4:	697b      	ldr	r3, [r7, #20]
 800f2d6:	6858      	ldr	r0, [r3, #4]
 800f2d8:	697b      	ldr	r3, [r7, #20]
 800f2da:	685b      	ldr	r3, [r3, #4]
 800f2dc:	891a      	ldrh	r2, [r3, #8]
 800f2de:	89bb      	ldrh	r3, [r7, #12]
 800f2e0:	1ad3      	subs	r3, r2, r3
 800f2e2:	b29b      	uxth	r3, r3
 800f2e4:	4619      	mov	r1, r3
 800f2e6:	f7fa fcaf 	bl	8009c48 <pbuf_realloc>
  useg->len -= remainder;
 800f2ea:	697b      	ldr	r3, [r7, #20]
 800f2ec:	891a      	ldrh	r2, [r3, #8]
 800f2ee:	89bb      	ldrh	r3, [r7, #12]
 800f2f0:	1ad3      	subs	r3, r2, r3
 800f2f2:	b29a      	uxth	r2, r3
 800f2f4:	697b      	ldr	r3, [r7, #20]
 800f2f6:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800f2f8:	697b      	ldr	r3, [r7, #20]
 800f2fa:	68db      	ldr	r3, [r3, #12]
 800f2fc:	899b      	ldrh	r3, [r3, #12]
 800f2fe:	b29c      	uxth	r4, r3
 800f300:	7efb      	ldrb	r3, [r7, #27]
 800f302:	b29b      	uxth	r3, r3
 800f304:	4618      	mov	r0, r3
 800f306:	f7f9 f9ff 	bl	8008708 <lwip_htons>
 800f30a:	4603      	mov	r3, r0
 800f30c:	461a      	mov	r2, r3
 800f30e:	697b      	ldr	r3, [r7, #20]
 800f310:	68db      	ldr	r3, [r3, #12]
 800f312:	4322      	orrs	r2, r4
 800f314:	b292      	uxth	r2, r2
 800f316:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800f318:	697b      	ldr	r3, [r7, #20]
 800f31a:	685b      	ldr	r3, [r3, #4]
 800f31c:	4618      	mov	r0, r3
 800f31e:	f7fa fea1 	bl	800a064 <pbuf_clen>
 800f322:	4603      	mov	r3, r0
 800f324:	461a      	mov	r2, r3
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f32c:	4413      	add	r3, r2
 800f32e:	b29a      	uxth	r2, r3
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800f336:	69fb      	ldr	r3, [r7, #28]
 800f338:	685b      	ldr	r3, [r3, #4]
 800f33a:	4618      	mov	r0, r3
 800f33c:	f7fa fe92 	bl	800a064 <pbuf_clen>
 800f340:	4603      	mov	r3, r0
 800f342:	461a      	mov	r2, r3
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f34a:	4413      	add	r3, r2
 800f34c:	b29a      	uxth	r2, r3
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800f354:	697b      	ldr	r3, [r7, #20]
 800f356:	681a      	ldr	r2, [r3, #0]
 800f358:	69fb      	ldr	r3, [r7, #28]
 800f35a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800f35c:	697b      	ldr	r3, [r7, #20]
 800f35e:	69fa      	ldr	r2, [r7, #28]
 800f360:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800f362:	69fb      	ldr	r3, [r7, #28]
 800f364:	681b      	ldr	r3, [r3, #0]
 800f366:	2b00      	cmp	r3, #0
 800f368:	d103      	bne.n	800f372 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	2200      	movs	r2, #0
 800f36e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800f372:	2300      	movs	r3, #0
 800f374:	e016      	b.n	800f3a4 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800f376:	bf00      	nop
 800f378:	e002      	b.n	800f380 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800f37a:	bf00      	nop
 800f37c:	e000      	b.n	800f380 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800f37e:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800f380:	69fb      	ldr	r3, [r7, #28]
 800f382:	2b00      	cmp	r3, #0
 800f384:	d006      	beq.n	800f394 <tcp_split_unsent_seg+0x25c>
 800f386:	4b09      	ldr	r3, [pc, #36]	; (800f3ac <tcp_split_unsent_seg+0x274>)
 800f388:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800f38c:	490d      	ldr	r1, [pc, #52]	; (800f3c4 <tcp_split_unsent_seg+0x28c>)
 800f38e:	4809      	ldr	r0, [pc, #36]	; (800f3b4 <tcp_split_unsent_seg+0x27c>)
 800f390:	f003 ff00 	bl	8013194 <iprintf>
  if (p != NULL) {
 800f394:	693b      	ldr	r3, [r7, #16]
 800f396:	2b00      	cmp	r3, #0
 800f398:	d002      	beq.n	800f3a0 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800f39a:	6938      	ldr	r0, [r7, #16]
 800f39c:	f7fa fdda 	bl	8009f54 <pbuf_free>
  }

  return ERR_MEM;
 800f3a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 800f3a4:	4618      	mov	r0, r3
 800f3a6:	3724      	adds	r7, #36	; 0x24
 800f3a8:	46bd      	mov	sp, r7
 800f3aa:	bd90      	pop	{r4, r7, pc}
 800f3ac:	080158e8 	.word	0x080158e8
 800f3b0:	08015c7c 	.word	0x08015c7c
 800f3b4:	0801593c 	.word	0x0801593c
 800f3b8:	08015ca0 	.word	0x08015ca0
 800f3bc:	08015cc4 	.word	0x08015cc4
 800f3c0:	08015cd4 	.word	0x08015cd4
 800f3c4:	08015ce4 	.word	0x08015ce4

0800f3c8 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800f3c8:	b590      	push	{r4, r7, lr}
 800f3ca:	b085      	sub	sp, #20
 800f3cc:	af00      	add	r7, sp, #0
 800f3ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	d106      	bne.n	800f3e4 <tcp_send_fin+0x1c>
 800f3d6:	4b21      	ldr	r3, [pc, #132]	; (800f45c <tcp_send_fin+0x94>)
 800f3d8:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800f3dc:	4920      	ldr	r1, [pc, #128]	; (800f460 <tcp_send_fin+0x98>)
 800f3de:	4821      	ldr	r0, [pc, #132]	; (800f464 <tcp_send_fin+0x9c>)
 800f3e0:	f003 fed8 	bl	8013194 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f3e8:	2b00      	cmp	r3, #0
 800f3ea:	d02e      	beq.n	800f44a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f3f0:	60fb      	str	r3, [r7, #12]
 800f3f2:	e002      	b.n	800f3fa <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	681b      	ldr	r3, [r3, #0]
 800f3f8:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800f3fa:	68fb      	ldr	r3, [r7, #12]
 800f3fc:	681b      	ldr	r3, [r3, #0]
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	d1f8      	bne.n	800f3f4 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800f402:	68fb      	ldr	r3, [r7, #12]
 800f404:	68db      	ldr	r3, [r3, #12]
 800f406:	899b      	ldrh	r3, [r3, #12]
 800f408:	b29b      	uxth	r3, r3
 800f40a:	4618      	mov	r0, r3
 800f40c:	f7f9 f97c 	bl	8008708 <lwip_htons>
 800f410:	4603      	mov	r3, r0
 800f412:	b2db      	uxtb	r3, r3
 800f414:	f003 0307 	and.w	r3, r3, #7
 800f418:	2b00      	cmp	r3, #0
 800f41a:	d116      	bne.n	800f44a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800f41c:	68fb      	ldr	r3, [r7, #12]
 800f41e:	68db      	ldr	r3, [r3, #12]
 800f420:	899b      	ldrh	r3, [r3, #12]
 800f422:	b29c      	uxth	r4, r3
 800f424:	2001      	movs	r0, #1
 800f426:	f7f9 f96f 	bl	8008708 <lwip_htons>
 800f42a:	4603      	mov	r3, r0
 800f42c:	461a      	mov	r2, r3
 800f42e:	68fb      	ldr	r3, [r7, #12]
 800f430:	68db      	ldr	r3, [r3, #12]
 800f432:	4322      	orrs	r2, r4
 800f434:	b292      	uxth	r2, r2
 800f436:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	8b5b      	ldrh	r3, [r3, #26]
 800f43c:	f043 0320 	orr.w	r3, r3, #32
 800f440:	b29a      	uxth	r2, r3
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800f446:	2300      	movs	r3, #0
 800f448:	e004      	b.n	800f454 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800f44a:	2101      	movs	r1, #1
 800f44c:	6878      	ldr	r0, [r7, #4]
 800f44e:	f000 f80b 	bl	800f468 <tcp_enqueue_flags>
 800f452:	4603      	mov	r3, r0
}
 800f454:	4618      	mov	r0, r3
 800f456:	3714      	adds	r7, #20
 800f458:	46bd      	mov	sp, r7
 800f45a:	bd90      	pop	{r4, r7, pc}
 800f45c:	080158e8 	.word	0x080158e8
 800f460:	08015cf0 	.word	0x08015cf0
 800f464:	0801593c 	.word	0x0801593c

0800f468 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800f468:	b580      	push	{r7, lr}
 800f46a:	b08a      	sub	sp, #40	; 0x28
 800f46c:	af02      	add	r7, sp, #8
 800f46e:	6078      	str	r0, [r7, #4]
 800f470:	460b      	mov	r3, r1
 800f472:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800f474:	2300      	movs	r3, #0
 800f476:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800f478:	2300      	movs	r3, #0
 800f47a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800f47c:	78fb      	ldrb	r3, [r7, #3]
 800f47e:	f003 0303 	and.w	r3, r3, #3
 800f482:	2b00      	cmp	r3, #0
 800f484:	d106      	bne.n	800f494 <tcp_enqueue_flags+0x2c>
 800f486:	4b67      	ldr	r3, [pc, #412]	; (800f624 <tcp_enqueue_flags+0x1bc>)
 800f488:	f240 4211 	movw	r2, #1041	; 0x411
 800f48c:	4966      	ldr	r1, [pc, #408]	; (800f628 <tcp_enqueue_flags+0x1c0>)
 800f48e:	4867      	ldr	r0, [pc, #412]	; (800f62c <tcp_enqueue_flags+0x1c4>)
 800f490:	f003 fe80 	bl	8013194 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	2b00      	cmp	r3, #0
 800f498:	d106      	bne.n	800f4a8 <tcp_enqueue_flags+0x40>
 800f49a:	4b62      	ldr	r3, [pc, #392]	; (800f624 <tcp_enqueue_flags+0x1bc>)
 800f49c:	f240 4213 	movw	r2, #1043	; 0x413
 800f4a0:	4963      	ldr	r1, [pc, #396]	; (800f630 <tcp_enqueue_flags+0x1c8>)
 800f4a2:	4862      	ldr	r0, [pc, #392]	; (800f62c <tcp_enqueue_flags+0x1c4>)
 800f4a4:	f003 fe76 	bl	8013194 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800f4a8:	78fb      	ldrb	r3, [r7, #3]
 800f4aa:	f003 0302 	and.w	r3, r3, #2
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	d001      	beq.n	800f4b6 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800f4b2:	2301      	movs	r3, #1
 800f4b4:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800f4b6:	7ffb      	ldrb	r3, [r7, #31]
 800f4b8:	009b      	lsls	r3, r3, #2
 800f4ba:	b2db      	uxtb	r3, r3
 800f4bc:	f003 0304 	and.w	r3, r3, #4
 800f4c0:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800f4c2:	7dfb      	ldrb	r3, [r7, #23]
 800f4c4:	b29b      	uxth	r3, r3
 800f4c6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f4ca:	4619      	mov	r1, r3
 800f4cc:	2036      	movs	r0, #54	; 0x36
 800f4ce:	f7fa fa5d 	bl	800998c <pbuf_alloc>
 800f4d2:	6138      	str	r0, [r7, #16]
 800f4d4:	693b      	ldr	r3, [r7, #16]
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d109      	bne.n	800f4ee <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	8b5b      	ldrh	r3, [r3, #26]
 800f4de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f4e2:	b29a      	uxth	r2, r3
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800f4e8:	f04f 33ff 	mov.w	r3, #4294967295
 800f4ec:	e095      	b.n	800f61a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800f4ee:	693b      	ldr	r3, [r7, #16]
 800f4f0:	895a      	ldrh	r2, [r3, #10]
 800f4f2:	7dfb      	ldrb	r3, [r7, #23]
 800f4f4:	b29b      	uxth	r3, r3
 800f4f6:	429a      	cmp	r2, r3
 800f4f8:	d206      	bcs.n	800f508 <tcp_enqueue_flags+0xa0>
 800f4fa:	4b4a      	ldr	r3, [pc, #296]	; (800f624 <tcp_enqueue_flags+0x1bc>)
 800f4fc:	f240 4239 	movw	r2, #1081	; 0x439
 800f500:	494c      	ldr	r1, [pc, #304]	; (800f634 <tcp_enqueue_flags+0x1cc>)
 800f502:	484a      	ldr	r0, [pc, #296]	; (800f62c <tcp_enqueue_flags+0x1c4>)
 800f504:	f003 fe46 	bl	8013194 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800f50c:	78fa      	ldrb	r2, [r7, #3]
 800f50e:	7ffb      	ldrb	r3, [r7, #31]
 800f510:	9300      	str	r3, [sp, #0]
 800f512:	460b      	mov	r3, r1
 800f514:	6939      	ldr	r1, [r7, #16]
 800f516:	6878      	ldr	r0, [r7, #4]
 800f518:	f7ff f918 	bl	800e74c <tcp_create_segment>
 800f51c:	60f8      	str	r0, [r7, #12]
 800f51e:	68fb      	ldr	r3, [r7, #12]
 800f520:	2b00      	cmp	r3, #0
 800f522:	d109      	bne.n	800f538 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	8b5b      	ldrh	r3, [r3, #26]
 800f528:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f52c:	b29a      	uxth	r2, r3
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800f532:	f04f 33ff 	mov.w	r3, #4294967295
 800f536:	e070      	b.n	800f61a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800f538:	68fb      	ldr	r3, [r7, #12]
 800f53a:	68db      	ldr	r3, [r3, #12]
 800f53c:	f003 0303 	and.w	r3, r3, #3
 800f540:	2b00      	cmp	r3, #0
 800f542:	d006      	beq.n	800f552 <tcp_enqueue_flags+0xea>
 800f544:	4b37      	ldr	r3, [pc, #220]	; (800f624 <tcp_enqueue_flags+0x1bc>)
 800f546:	f240 4242 	movw	r2, #1090	; 0x442
 800f54a:	493b      	ldr	r1, [pc, #236]	; (800f638 <tcp_enqueue_flags+0x1d0>)
 800f54c:	4837      	ldr	r0, [pc, #220]	; (800f62c <tcp_enqueue_flags+0x1c4>)
 800f54e:	f003 fe21 	bl	8013194 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800f552:	68fb      	ldr	r3, [r7, #12]
 800f554:	891b      	ldrh	r3, [r3, #8]
 800f556:	2b00      	cmp	r3, #0
 800f558:	d006      	beq.n	800f568 <tcp_enqueue_flags+0x100>
 800f55a:	4b32      	ldr	r3, [pc, #200]	; (800f624 <tcp_enqueue_flags+0x1bc>)
 800f55c:	f240 4243 	movw	r2, #1091	; 0x443
 800f560:	4936      	ldr	r1, [pc, #216]	; (800f63c <tcp_enqueue_flags+0x1d4>)
 800f562:	4832      	ldr	r0, [pc, #200]	; (800f62c <tcp_enqueue_flags+0x1c4>)
 800f564:	f003 fe16 	bl	8013194 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	d103      	bne.n	800f578 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	68fa      	ldr	r2, [r7, #12]
 800f574:	66da      	str	r2, [r3, #108]	; 0x6c
 800f576:	e00d      	b.n	800f594 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f57c:	61bb      	str	r3, [r7, #24]
 800f57e:	e002      	b.n	800f586 <tcp_enqueue_flags+0x11e>
 800f580:	69bb      	ldr	r3, [r7, #24]
 800f582:	681b      	ldr	r3, [r3, #0]
 800f584:	61bb      	str	r3, [r7, #24]
 800f586:	69bb      	ldr	r3, [r7, #24]
 800f588:	681b      	ldr	r3, [r3, #0]
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	d1f8      	bne.n	800f580 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800f58e:	69bb      	ldr	r3, [r7, #24]
 800f590:	68fa      	ldr	r2, [r7, #12]
 800f592:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	2200      	movs	r2, #0
 800f598:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800f59c:	78fb      	ldrb	r3, [r7, #3]
 800f59e:	f003 0302 	and.w	r3, r3, #2
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	d104      	bne.n	800f5b0 <tcp_enqueue_flags+0x148>
 800f5a6:	78fb      	ldrb	r3, [r7, #3]
 800f5a8:	f003 0301 	and.w	r3, r3, #1
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	d004      	beq.n	800f5ba <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f5b4:	1c5a      	adds	r2, r3, #1
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800f5ba:	78fb      	ldrb	r3, [r7, #3]
 800f5bc:	f003 0301 	and.w	r3, r3, #1
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	d006      	beq.n	800f5d2 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	8b5b      	ldrh	r3, [r3, #26]
 800f5c8:	f043 0320 	orr.w	r3, r3, #32
 800f5cc:	b29a      	uxth	r2, r3
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800f5d2:	68fb      	ldr	r3, [r7, #12]
 800f5d4:	685b      	ldr	r3, [r3, #4]
 800f5d6:	4618      	mov	r0, r3
 800f5d8:	f7fa fd44 	bl	800a064 <pbuf_clen>
 800f5dc:	4603      	mov	r3, r0
 800f5de:	461a      	mov	r2, r3
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f5e6:	4413      	add	r3, r2
 800f5e8:	b29a      	uxth	r2, r3
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d00e      	beq.n	800f618 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f5fe:	2b00      	cmp	r3, #0
 800f600:	d10a      	bne.n	800f618 <tcp_enqueue_flags+0x1b0>
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f606:	2b00      	cmp	r3, #0
 800f608:	d106      	bne.n	800f618 <tcp_enqueue_flags+0x1b0>
 800f60a:	4b06      	ldr	r3, [pc, #24]	; (800f624 <tcp_enqueue_flags+0x1bc>)
 800f60c:	f240 4265 	movw	r2, #1125	; 0x465
 800f610:	490b      	ldr	r1, [pc, #44]	; (800f640 <tcp_enqueue_flags+0x1d8>)
 800f612:	4806      	ldr	r0, [pc, #24]	; (800f62c <tcp_enqueue_flags+0x1c4>)
 800f614:	f003 fdbe 	bl	8013194 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800f618:	2300      	movs	r3, #0
}
 800f61a:	4618      	mov	r0, r3
 800f61c:	3720      	adds	r7, #32
 800f61e:	46bd      	mov	sp, r7
 800f620:	bd80      	pop	{r7, pc}
 800f622:	bf00      	nop
 800f624:	080158e8 	.word	0x080158e8
 800f628:	08015d0c 	.word	0x08015d0c
 800f62c:	0801593c 	.word	0x0801593c
 800f630:	08015d64 	.word	0x08015d64
 800f634:	08015d84 	.word	0x08015d84
 800f638:	08015dc0 	.word	0x08015dc0
 800f63c:	08015dd8 	.word	0x08015dd8
 800f640:	08015e04 	.word	0x08015e04

0800f644 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800f644:	b5b0      	push	{r4, r5, r7, lr}
 800f646:	b08a      	sub	sp, #40	; 0x28
 800f648:	af00      	add	r7, sp, #0
 800f64a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	2b00      	cmp	r3, #0
 800f650:	d106      	bne.n	800f660 <tcp_output+0x1c>
 800f652:	4b9e      	ldr	r3, [pc, #632]	; (800f8cc <tcp_output+0x288>)
 800f654:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800f658:	499d      	ldr	r1, [pc, #628]	; (800f8d0 <tcp_output+0x28c>)
 800f65a:	489e      	ldr	r0, [pc, #632]	; (800f8d4 <tcp_output+0x290>)
 800f65c:	f003 fd9a 	bl	8013194 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	7d1b      	ldrb	r3, [r3, #20]
 800f664:	2b01      	cmp	r3, #1
 800f666:	d106      	bne.n	800f676 <tcp_output+0x32>
 800f668:	4b98      	ldr	r3, [pc, #608]	; (800f8cc <tcp_output+0x288>)
 800f66a:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800f66e:	499a      	ldr	r1, [pc, #616]	; (800f8d8 <tcp_output+0x294>)
 800f670:	4898      	ldr	r0, [pc, #608]	; (800f8d4 <tcp_output+0x290>)
 800f672:	f003 fd8f 	bl	8013194 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800f676:	4b99      	ldr	r3, [pc, #612]	; (800f8dc <tcp_output+0x298>)
 800f678:	681b      	ldr	r3, [r3, #0]
 800f67a:	687a      	ldr	r2, [r7, #4]
 800f67c:	429a      	cmp	r2, r3
 800f67e:	d101      	bne.n	800f684 <tcp_output+0x40>
    return ERR_OK;
 800f680:	2300      	movs	r3, #0
 800f682:	e1ce      	b.n	800fa22 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f690:	4293      	cmp	r3, r2
 800f692:	bf28      	it	cs
 800f694:	4613      	movcs	r3, r2
 800f696:	b29b      	uxth	r3, r3
 800f698:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f69e:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800f6a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	d10b      	bne.n	800f6be <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	8b5b      	ldrh	r3, [r3, #26]
 800f6aa:	f003 0302 	and.w	r3, r3, #2
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	f000 81aa 	beq.w	800fa08 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800f6b4:	6878      	ldr	r0, [r7, #4]
 800f6b6:	f000 fdcb 	bl	8010250 <tcp_send_empty_ack>
 800f6ba:	4603      	mov	r3, r0
 800f6bc:	e1b1      	b.n	800fa22 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800f6be:	6879      	ldr	r1, [r7, #4]
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	3304      	adds	r3, #4
 800f6c4:	461a      	mov	r2, r3
 800f6c6:	6878      	ldr	r0, [r7, #4]
 800f6c8:	f7ff f824 	bl	800e714 <tcp_route>
 800f6cc:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800f6ce:	697b      	ldr	r3, [r7, #20]
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	d102      	bne.n	800f6da <tcp_output+0x96>
    return ERR_RTE;
 800f6d4:	f06f 0303 	mvn.w	r3, #3
 800f6d8:	e1a3      	b.n	800fa22 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d003      	beq.n	800f6e8 <tcp_output+0xa4>
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	681b      	ldr	r3, [r3, #0]
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	d111      	bne.n	800f70c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800f6e8:	697b      	ldr	r3, [r7, #20]
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	d002      	beq.n	800f6f4 <tcp_output+0xb0>
 800f6ee:	697b      	ldr	r3, [r7, #20]
 800f6f0:	3304      	adds	r3, #4
 800f6f2:	e000      	b.n	800f6f6 <tcp_output+0xb2>
 800f6f4:	2300      	movs	r3, #0
 800f6f6:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800f6f8:	693b      	ldr	r3, [r7, #16]
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	d102      	bne.n	800f704 <tcp_output+0xc0>
      return ERR_RTE;
 800f6fe:	f06f 0303 	mvn.w	r3, #3
 800f702:	e18e      	b.n	800fa22 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800f704:	693b      	ldr	r3, [r7, #16]
 800f706:	681a      	ldr	r2, [r3, #0]
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800f70c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f70e:	68db      	ldr	r3, [r3, #12]
 800f710:	685b      	ldr	r3, [r3, #4]
 800f712:	4618      	mov	r0, r3
 800f714:	f7f9 f80d 	bl	8008732 <lwip_htonl>
 800f718:	4602      	mov	r2, r0
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f71e:	1ad3      	subs	r3, r2, r3
 800f720:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f722:	8912      	ldrh	r2, [r2, #8]
 800f724:	4413      	add	r3, r2
 800f726:	69ba      	ldr	r2, [r7, #24]
 800f728:	429a      	cmp	r2, r3
 800f72a:	d227      	bcs.n	800f77c <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f732:	461a      	mov	r2, r3
 800f734:	69bb      	ldr	r3, [r7, #24]
 800f736:	4293      	cmp	r3, r2
 800f738:	d114      	bne.n	800f764 <tcp_output+0x120>
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f73e:	2b00      	cmp	r3, #0
 800f740:	d110      	bne.n	800f764 <tcp_output+0x120>
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f748:	2b00      	cmp	r3, #0
 800f74a:	d10b      	bne.n	800f764 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	2200      	movs	r2, #0
 800f750:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	2201      	movs	r2, #1
 800f758:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	2200      	movs	r2, #0
 800f760:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	8b5b      	ldrh	r3, [r3, #26]
 800f768:	f003 0302 	and.w	r3, r3, #2
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	f000 814d 	beq.w	800fa0c <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800f772:	6878      	ldr	r0, [r7, #4]
 800f774:	f000 fd6c 	bl	8010250 <tcp_send_empty_ack>
 800f778:	4603      	mov	r3, r0
 800f77a:	e152      	b.n	800fa22 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	2200      	movs	r2, #0
 800f780:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f788:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800f78a:	6a3b      	ldr	r3, [r7, #32]
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	f000 811c 	beq.w	800f9ca <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800f792:	e002      	b.n	800f79a <tcp_output+0x156>
 800f794:	6a3b      	ldr	r3, [r7, #32]
 800f796:	681b      	ldr	r3, [r3, #0]
 800f798:	623b      	str	r3, [r7, #32]
 800f79a:	6a3b      	ldr	r3, [r7, #32]
 800f79c:	681b      	ldr	r3, [r3, #0]
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d1f8      	bne.n	800f794 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800f7a2:	e112      	b.n	800f9ca <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800f7a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7a6:	68db      	ldr	r3, [r3, #12]
 800f7a8:	899b      	ldrh	r3, [r3, #12]
 800f7aa:	b29b      	uxth	r3, r3
 800f7ac:	4618      	mov	r0, r3
 800f7ae:	f7f8 ffab 	bl	8008708 <lwip_htons>
 800f7b2:	4603      	mov	r3, r0
 800f7b4:	b2db      	uxtb	r3, r3
 800f7b6:	f003 0304 	and.w	r3, r3, #4
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	d006      	beq.n	800f7cc <tcp_output+0x188>
 800f7be:	4b43      	ldr	r3, [pc, #268]	; (800f8cc <tcp_output+0x288>)
 800f7c0:	f240 5236 	movw	r2, #1334	; 0x536
 800f7c4:	4946      	ldr	r1, [pc, #280]	; (800f8e0 <tcp_output+0x29c>)
 800f7c6:	4843      	ldr	r0, [pc, #268]	; (800f8d4 <tcp_output+0x290>)
 800f7c8:	f003 fce4 	bl	8013194 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	d01f      	beq.n	800f814 <tcp_output+0x1d0>
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	8b5b      	ldrh	r3, [r3, #26]
 800f7d8:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	d119      	bne.n	800f814 <tcp_output+0x1d0>
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	d00b      	beq.n	800f800 <tcp_output+0x1bc>
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f7ec:	681b      	ldr	r3, [r3, #0]
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d110      	bne.n	800f814 <tcp_output+0x1d0>
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f7f6:	891a      	ldrh	r2, [r3, #8]
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f7fc:	429a      	cmp	r2, r3
 800f7fe:	d209      	bcs.n	800f814 <tcp_output+0x1d0>
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800f806:	2b00      	cmp	r3, #0
 800f808:	d004      	beq.n	800f814 <tcp_output+0x1d0>
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f810:	2b08      	cmp	r3, #8
 800f812:	d901      	bls.n	800f818 <tcp_output+0x1d4>
 800f814:	2301      	movs	r3, #1
 800f816:	e000      	b.n	800f81a <tcp_output+0x1d6>
 800f818:	2300      	movs	r3, #0
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	d106      	bne.n	800f82c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	8b5b      	ldrh	r3, [r3, #26]
 800f822:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800f826:	2b00      	cmp	r3, #0
 800f828:	f000 80e4 	beq.w	800f9f4 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	7d1b      	ldrb	r3, [r3, #20]
 800f830:	2b02      	cmp	r3, #2
 800f832:	d00d      	beq.n	800f850 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800f834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f836:	68db      	ldr	r3, [r3, #12]
 800f838:	899b      	ldrh	r3, [r3, #12]
 800f83a:	b29c      	uxth	r4, r3
 800f83c:	2010      	movs	r0, #16
 800f83e:	f7f8 ff63 	bl	8008708 <lwip_htons>
 800f842:	4603      	mov	r3, r0
 800f844:	461a      	mov	r2, r3
 800f846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f848:	68db      	ldr	r3, [r3, #12]
 800f84a:	4322      	orrs	r2, r4
 800f84c:	b292      	uxth	r2, r2
 800f84e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800f850:	697a      	ldr	r2, [r7, #20]
 800f852:	6879      	ldr	r1, [r7, #4]
 800f854:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f856:	f000 f909 	bl	800fa6c <tcp_output_segment>
 800f85a:	4603      	mov	r3, r0
 800f85c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800f85e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f862:	2b00      	cmp	r3, #0
 800f864:	d009      	beq.n	800f87a <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	8b5b      	ldrh	r3, [r3, #26]
 800f86a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f86e:	b29a      	uxth	r2, r3
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	835a      	strh	r2, [r3, #26]
      return err;
 800f874:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f878:	e0d3      	b.n	800fa22 <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800f87a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f87c:	681a      	ldr	r2, [r3, #0]
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	7d1b      	ldrb	r3, [r3, #20]
 800f886:	2b02      	cmp	r3, #2
 800f888:	d006      	beq.n	800f898 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	8b5b      	ldrh	r3, [r3, #26]
 800f88e:	f023 0303 	bic.w	r3, r3, #3
 800f892:	b29a      	uxth	r2, r3
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800f898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f89a:	68db      	ldr	r3, [r3, #12]
 800f89c:	685b      	ldr	r3, [r3, #4]
 800f89e:	4618      	mov	r0, r3
 800f8a0:	f7f8 ff47 	bl	8008732 <lwip_htonl>
 800f8a4:	4604      	mov	r4, r0
 800f8a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8a8:	891b      	ldrh	r3, [r3, #8]
 800f8aa:	461d      	mov	r5, r3
 800f8ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8ae:	68db      	ldr	r3, [r3, #12]
 800f8b0:	899b      	ldrh	r3, [r3, #12]
 800f8b2:	b29b      	uxth	r3, r3
 800f8b4:	4618      	mov	r0, r3
 800f8b6:	f7f8 ff27 	bl	8008708 <lwip_htons>
 800f8ba:	4603      	mov	r3, r0
 800f8bc:	b2db      	uxtb	r3, r3
 800f8be:	f003 0303 	and.w	r3, r3, #3
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	d00e      	beq.n	800f8e4 <tcp_output+0x2a0>
 800f8c6:	2301      	movs	r3, #1
 800f8c8:	e00d      	b.n	800f8e6 <tcp_output+0x2a2>
 800f8ca:	bf00      	nop
 800f8cc:	080158e8 	.word	0x080158e8
 800f8d0:	08015e2c 	.word	0x08015e2c
 800f8d4:	0801593c 	.word	0x0801593c
 800f8d8:	08015e44 	.word	0x08015e44
 800f8dc:	240037e8 	.word	0x240037e8
 800f8e0:	08015e6c 	.word	0x08015e6c
 800f8e4:	2300      	movs	r3, #0
 800f8e6:	442b      	add	r3, r5
 800f8e8:	4423      	add	r3, r4
 800f8ea:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f8f0:	68bb      	ldr	r3, [r7, #8]
 800f8f2:	1ad3      	subs	r3, r2, r3
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	da02      	bge.n	800f8fe <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	68ba      	ldr	r2, [r7, #8]
 800f8fc:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800f8fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f900:	891b      	ldrh	r3, [r3, #8]
 800f902:	461c      	mov	r4, r3
 800f904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f906:	68db      	ldr	r3, [r3, #12]
 800f908:	899b      	ldrh	r3, [r3, #12]
 800f90a:	b29b      	uxth	r3, r3
 800f90c:	4618      	mov	r0, r3
 800f90e:	f7f8 fefb 	bl	8008708 <lwip_htons>
 800f912:	4603      	mov	r3, r0
 800f914:	b2db      	uxtb	r3, r3
 800f916:	f003 0303 	and.w	r3, r3, #3
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	d001      	beq.n	800f922 <tcp_output+0x2de>
 800f91e:	2301      	movs	r3, #1
 800f920:	e000      	b.n	800f924 <tcp_output+0x2e0>
 800f922:	2300      	movs	r3, #0
 800f924:	4423      	add	r3, r4
 800f926:	2b00      	cmp	r3, #0
 800f928:	d049      	beq.n	800f9be <tcp_output+0x37a>
      seg->next = NULL;
 800f92a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f92c:	2200      	movs	r2, #0
 800f92e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f934:	2b00      	cmp	r3, #0
 800f936:	d105      	bne.n	800f944 <tcp_output+0x300>
        pcb->unacked = seg;
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f93c:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800f93e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f940:	623b      	str	r3, [r7, #32]
 800f942:	e03f      	b.n	800f9c4 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800f944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f946:	68db      	ldr	r3, [r3, #12]
 800f948:	685b      	ldr	r3, [r3, #4]
 800f94a:	4618      	mov	r0, r3
 800f94c:	f7f8 fef1 	bl	8008732 <lwip_htonl>
 800f950:	4604      	mov	r4, r0
 800f952:	6a3b      	ldr	r3, [r7, #32]
 800f954:	68db      	ldr	r3, [r3, #12]
 800f956:	685b      	ldr	r3, [r3, #4]
 800f958:	4618      	mov	r0, r3
 800f95a:	f7f8 feea 	bl	8008732 <lwip_htonl>
 800f95e:	4603      	mov	r3, r0
 800f960:	1ae3      	subs	r3, r4, r3
 800f962:	2b00      	cmp	r3, #0
 800f964:	da24      	bge.n	800f9b0 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	3370      	adds	r3, #112	; 0x70
 800f96a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800f96c:	e002      	b.n	800f974 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800f96e:	69fb      	ldr	r3, [r7, #28]
 800f970:	681b      	ldr	r3, [r3, #0]
 800f972:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800f974:	69fb      	ldr	r3, [r7, #28]
 800f976:	681b      	ldr	r3, [r3, #0]
 800f978:	2b00      	cmp	r3, #0
 800f97a:	d011      	beq.n	800f9a0 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800f97c:	69fb      	ldr	r3, [r7, #28]
 800f97e:	681b      	ldr	r3, [r3, #0]
 800f980:	68db      	ldr	r3, [r3, #12]
 800f982:	685b      	ldr	r3, [r3, #4]
 800f984:	4618      	mov	r0, r3
 800f986:	f7f8 fed4 	bl	8008732 <lwip_htonl>
 800f98a:	4604      	mov	r4, r0
 800f98c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f98e:	68db      	ldr	r3, [r3, #12]
 800f990:	685b      	ldr	r3, [r3, #4]
 800f992:	4618      	mov	r0, r3
 800f994:	f7f8 fecd 	bl	8008732 <lwip_htonl>
 800f998:	4603      	mov	r3, r0
 800f99a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	dbe6      	blt.n	800f96e <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800f9a0:	69fb      	ldr	r3, [r7, #28]
 800f9a2:	681a      	ldr	r2, [r3, #0]
 800f9a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9a6:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800f9a8:	69fb      	ldr	r3, [r7, #28]
 800f9aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f9ac:	601a      	str	r2, [r3, #0]
 800f9ae:	e009      	b.n	800f9c4 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800f9b0:	6a3b      	ldr	r3, [r7, #32]
 800f9b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f9b4:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800f9b6:	6a3b      	ldr	r3, [r7, #32]
 800f9b8:	681b      	ldr	r3, [r3, #0]
 800f9ba:	623b      	str	r3, [r7, #32]
 800f9bc:	e002      	b.n	800f9c4 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800f9be:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f9c0:	f7fb ff05 	bl	800b7ce <tcp_seg_free>
    }
    seg = pcb->unsent;
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f9c8:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800f9ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	d012      	beq.n	800f9f6 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800f9d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9d2:	68db      	ldr	r3, [r3, #12]
 800f9d4:	685b      	ldr	r3, [r3, #4]
 800f9d6:	4618      	mov	r0, r3
 800f9d8:	f7f8 feab 	bl	8008732 <lwip_htonl>
 800f9dc:	4602      	mov	r2, r0
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f9e2:	1ad3      	subs	r3, r2, r3
 800f9e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f9e6:	8912      	ldrh	r2, [r2, #8]
 800f9e8:	4413      	add	r3, r2
  while (seg != NULL &&
 800f9ea:	69ba      	ldr	r2, [r7, #24]
 800f9ec:	429a      	cmp	r2, r3
 800f9ee:	f4bf aed9 	bcs.w	800f7a4 <tcp_output+0x160>
 800f9f2:	e000      	b.n	800f9f6 <tcp_output+0x3b2>
      break;
 800f9f4:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	d108      	bne.n	800fa10 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	2200      	movs	r2, #0
 800fa02:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800fa06:	e004      	b.n	800fa12 <tcp_output+0x3ce>
    goto output_done;
 800fa08:	bf00      	nop
 800fa0a:	e002      	b.n	800fa12 <tcp_output+0x3ce>
    goto output_done;
 800fa0c:	bf00      	nop
 800fa0e:	e000      	b.n	800fa12 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800fa10:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	8b5b      	ldrh	r3, [r3, #26]
 800fa16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fa1a:	b29a      	uxth	r2, r3
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800fa20:	2300      	movs	r3, #0
}
 800fa22:	4618      	mov	r0, r3
 800fa24:	3728      	adds	r7, #40	; 0x28
 800fa26:	46bd      	mov	sp, r7
 800fa28:	bdb0      	pop	{r4, r5, r7, pc}
 800fa2a:	bf00      	nop

0800fa2c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800fa2c:	b580      	push	{r7, lr}
 800fa2e:	b082      	sub	sp, #8
 800fa30:	af00      	add	r7, sp, #0
 800fa32:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	d106      	bne.n	800fa48 <tcp_output_segment_busy+0x1c>
 800fa3a:	4b09      	ldr	r3, [pc, #36]	; (800fa60 <tcp_output_segment_busy+0x34>)
 800fa3c:	f240 529a 	movw	r2, #1434	; 0x59a
 800fa40:	4908      	ldr	r1, [pc, #32]	; (800fa64 <tcp_output_segment_busy+0x38>)
 800fa42:	4809      	ldr	r0, [pc, #36]	; (800fa68 <tcp_output_segment_busy+0x3c>)
 800fa44:	f003 fba6 	bl	8013194 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	685b      	ldr	r3, [r3, #4]
 800fa4c:	7b9b      	ldrb	r3, [r3, #14]
 800fa4e:	2b01      	cmp	r3, #1
 800fa50:	d001      	beq.n	800fa56 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800fa52:	2301      	movs	r3, #1
 800fa54:	e000      	b.n	800fa58 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800fa56:	2300      	movs	r3, #0
}
 800fa58:	4618      	mov	r0, r3
 800fa5a:	3708      	adds	r7, #8
 800fa5c:	46bd      	mov	sp, r7
 800fa5e:	bd80      	pop	{r7, pc}
 800fa60:	080158e8 	.word	0x080158e8
 800fa64:	08015e84 	.word	0x08015e84
 800fa68:	0801593c 	.word	0x0801593c

0800fa6c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800fa6c:	b5b0      	push	{r4, r5, r7, lr}
 800fa6e:	b08c      	sub	sp, #48	; 0x30
 800fa70:	af04      	add	r7, sp, #16
 800fa72:	60f8      	str	r0, [r7, #12]
 800fa74:	60b9      	str	r1, [r7, #8]
 800fa76:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800fa78:	68fb      	ldr	r3, [r7, #12]
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	d106      	bne.n	800fa8c <tcp_output_segment+0x20>
 800fa7e:	4b63      	ldr	r3, [pc, #396]	; (800fc0c <tcp_output_segment+0x1a0>)
 800fa80:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800fa84:	4962      	ldr	r1, [pc, #392]	; (800fc10 <tcp_output_segment+0x1a4>)
 800fa86:	4863      	ldr	r0, [pc, #396]	; (800fc14 <tcp_output_segment+0x1a8>)
 800fa88:	f003 fb84 	bl	8013194 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800fa8c:	68bb      	ldr	r3, [r7, #8]
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	d106      	bne.n	800faa0 <tcp_output_segment+0x34>
 800fa92:	4b5e      	ldr	r3, [pc, #376]	; (800fc0c <tcp_output_segment+0x1a0>)
 800fa94:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800fa98:	495f      	ldr	r1, [pc, #380]	; (800fc18 <tcp_output_segment+0x1ac>)
 800fa9a:	485e      	ldr	r0, [pc, #376]	; (800fc14 <tcp_output_segment+0x1a8>)
 800fa9c:	f003 fb7a 	bl	8013194 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	d106      	bne.n	800fab4 <tcp_output_segment+0x48>
 800faa6:	4b59      	ldr	r3, [pc, #356]	; (800fc0c <tcp_output_segment+0x1a0>)
 800faa8:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800faac:	495b      	ldr	r1, [pc, #364]	; (800fc1c <tcp_output_segment+0x1b0>)
 800faae:	4859      	ldr	r0, [pc, #356]	; (800fc14 <tcp_output_segment+0x1a8>)
 800fab0:	f003 fb70 	bl	8013194 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800fab4:	68f8      	ldr	r0, [r7, #12]
 800fab6:	f7ff ffb9 	bl	800fa2c <tcp_output_segment_busy>
 800faba:	4603      	mov	r3, r0
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	d001      	beq.n	800fac4 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800fac0:	2300      	movs	r3, #0
 800fac2:	e09f      	b.n	800fc04 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800fac4:	68bb      	ldr	r3, [r7, #8]
 800fac6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fac8:	68fb      	ldr	r3, [r7, #12]
 800faca:	68dc      	ldr	r4, [r3, #12]
 800facc:	4610      	mov	r0, r2
 800face:	f7f8 fe30 	bl	8008732 <lwip_htonl>
 800fad2:	4603      	mov	r3, r0
 800fad4:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800fad6:	68bb      	ldr	r3, [r7, #8]
 800fad8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800fada:	68fb      	ldr	r3, [r7, #12]
 800fadc:	68dc      	ldr	r4, [r3, #12]
 800fade:	4610      	mov	r0, r2
 800fae0:	f7f8 fe12 	bl	8008708 <lwip_htons>
 800fae4:	4603      	mov	r3, r0
 800fae6:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800fae8:	68bb      	ldr	r3, [r7, #8]
 800faea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800faec:	68ba      	ldr	r2, [r7, #8]
 800faee:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800faf0:	441a      	add	r2, r3
 800faf2:	68bb      	ldr	r3, [r7, #8]
 800faf4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800faf6:	68fb      	ldr	r3, [r7, #12]
 800faf8:	68db      	ldr	r3, [r3, #12]
 800fafa:	3314      	adds	r3, #20
 800fafc:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800fafe:	68fb      	ldr	r3, [r7, #12]
 800fb00:	7a9b      	ldrb	r3, [r3, #10]
 800fb02:	f003 0301 	and.w	r3, r3, #1
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	d015      	beq.n	800fb36 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800fb0a:	68bb      	ldr	r3, [r7, #8]
 800fb0c:	3304      	adds	r3, #4
 800fb0e:	461a      	mov	r2, r3
 800fb10:	6879      	ldr	r1, [r7, #4]
 800fb12:	f44f 7006 	mov.w	r0, #536	; 0x218
 800fb16:	f7fc fa37 	bl	800bf88 <tcp_eff_send_mss_netif>
 800fb1a:	4603      	mov	r3, r0
 800fb1c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800fb1e:	8b7b      	ldrh	r3, [r7, #26]
 800fb20:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800fb24:	4618      	mov	r0, r3
 800fb26:	f7f8 fe04 	bl	8008732 <lwip_htonl>
 800fb2a:	4602      	mov	r2, r0
 800fb2c:	69fb      	ldr	r3, [r7, #28]
 800fb2e:	601a      	str	r2, [r3, #0]
    opts += 1;
 800fb30:	69fb      	ldr	r3, [r7, #28]
 800fb32:	3304      	adds	r3, #4
 800fb34:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800fb36:	68bb      	ldr	r3, [r7, #8]
 800fb38:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	da02      	bge.n	800fb46 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800fb40:	68bb      	ldr	r3, [r7, #8]
 800fb42:	2200      	movs	r2, #0
 800fb44:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800fb46:	68bb      	ldr	r3, [r7, #8]
 800fb48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	d10c      	bne.n	800fb68 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800fb4e:	4b34      	ldr	r3, [pc, #208]	; (800fc20 <tcp_output_segment+0x1b4>)
 800fb50:	681a      	ldr	r2, [r3, #0]
 800fb52:	68bb      	ldr	r3, [r7, #8]
 800fb54:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800fb56:	68fb      	ldr	r3, [r7, #12]
 800fb58:	68db      	ldr	r3, [r3, #12]
 800fb5a:	685b      	ldr	r3, [r3, #4]
 800fb5c:	4618      	mov	r0, r3
 800fb5e:	f7f8 fde8 	bl	8008732 <lwip_htonl>
 800fb62:	4602      	mov	r2, r0
 800fb64:	68bb      	ldr	r3, [r7, #8]
 800fb66:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800fb68:	68fb      	ldr	r3, [r7, #12]
 800fb6a:	68da      	ldr	r2, [r3, #12]
 800fb6c:	68fb      	ldr	r3, [r7, #12]
 800fb6e:	685b      	ldr	r3, [r3, #4]
 800fb70:	685b      	ldr	r3, [r3, #4]
 800fb72:	1ad3      	subs	r3, r2, r3
 800fb74:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800fb76:	68fb      	ldr	r3, [r7, #12]
 800fb78:	685b      	ldr	r3, [r3, #4]
 800fb7a:	8959      	ldrh	r1, [r3, #10]
 800fb7c:	68fb      	ldr	r3, [r7, #12]
 800fb7e:	685b      	ldr	r3, [r3, #4]
 800fb80:	8b3a      	ldrh	r2, [r7, #24]
 800fb82:	1a8a      	subs	r2, r1, r2
 800fb84:	b292      	uxth	r2, r2
 800fb86:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800fb88:	68fb      	ldr	r3, [r7, #12]
 800fb8a:	685b      	ldr	r3, [r3, #4]
 800fb8c:	8919      	ldrh	r1, [r3, #8]
 800fb8e:	68fb      	ldr	r3, [r7, #12]
 800fb90:	685b      	ldr	r3, [r3, #4]
 800fb92:	8b3a      	ldrh	r2, [r7, #24]
 800fb94:	1a8a      	subs	r2, r1, r2
 800fb96:	b292      	uxth	r2, r2
 800fb98:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800fb9a:	68fb      	ldr	r3, [r7, #12]
 800fb9c:	685b      	ldr	r3, [r3, #4]
 800fb9e:	68fa      	ldr	r2, [r7, #12]
 800fba0:	68d2      	ldr	r2, [r2, #12]
 800fba2:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800fba4:	68fb      	ldr	r3, [r7, #12]
 800fba6:	68db      	ldr	r3, [r3, #12]
 800fba8:	2200      	movs	r2, #0
 800fbaa:	741a      	strb	r2, [r3, #16]
 800fbac:	2200      	movs	r2, #0
 800fbae:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800fbb0:	68fb      	ldr	r3, [r7, #12]
 800fbb2:	68db      	ldr	r3, [r3, #12]
 800fbb4:	f103 0214 	add.w	r2, r3, #20
 800fbb8:	68fb      	ldr	r3, [r7, #12]
 800fbba:	7a9b      	ldrb	r3, [r3, #10]
 800fbbc:	009b      	lsls	r3, r3, #2
 800fbbe:	f003 0304 	and.w	r3, r3, #4
 800fbc2:	4413      	add	r3, r2
 800fbc4:	69fa      	ldr	r2, [r7, #28]
 800fbc6:	429a      	cmp	r2, r3
 800fbc8:	d006      	beq.n	800fbd8 <tcp_output_segment+0x16c>
 800fbca:	4b10      	ldr	r3, [pc, #64]	; (800fc0c <tcp_output_segment+0x1a0>)
 800fbcc:	f240 621c 	movw	r2, #1564	; 0x61c
 800fbd0:	4914      	ldr	r1, [pc, #80]	; (800fc24 <tcp_output_segment+0x1b8>)
 800fbd2:	4810      	ldr	r0, [pc, #64]	; (800fc14 <tcp_output_segment+0x1a8>)
 800fbd4:	f003 fade 	bl	8013194 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800fbd8:	68fb      	ldr	r3, [r7, #12]
 800fbda:	6858      	ldr	r0, [r3, #4]
 800fbdc:	68b9      	ldr	r1, [r7, #8]
 800fbde:	68bb      	ldr	r3, [r7, #8]
 800fbe0:	1d1c      	adds	r4, r3, #4
 800fbe2:	68bb      	ldr	r3, [r7, #8]
 800fbe4:	7add      	ldrb	r5, [r3, #11]
 800fbe6:	68bb      	ldr	r3, [r7, #8]
 800fbe8:	7a9b      	ldrb	r3, [r3, #10]
 800fbea:	687a      	ldr	r2, [r7, #4]
 800fbec:	9202      	str	r2, [sp, #8]
 800fbee:	2206      	movs	r2, #6
 800fbf0:	9201      	str	r2, [sp, #4]
 800fbf2:	9300      	str	r3, [sp, #0]
 800fbf4:	462b      	mov	r3, r5
 800fbf6:	4622      	mov	r2, r4
 800fbf8:	f002 fa5c 	bl	80120b4 <ip4_output_if>
 800fbfc:	4603      	mov	r3, r0
 800fbfe:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800fc00:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fc04:	4618      	mov	r0, r3
 800fc06:	3720      	adds	r7, #32
 800fc08:	46bd      	mov	sp, r7
 800fc0a:	bdb0      	pop	{r4, r5, r7, pc}
 800fc0c:	080158e8 	.word	0x080158e8
 800fc10:	08015eac 	.word	0x08015eac
 800fc14:	0801593c 	.word	0x0801593c
 800fc18:	08015ecc 	.word	0x08015ecc
 800fc1c:	08015eec 	.word	0x08015eec
 800fc20:	240037d8 	.word	0x240037d8
 800fc24:	08015f10 	.word	0x08015f10

0800fc28 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800fc28:	b5b0      	push	{r4, r5, r7, lr}
 800fc2a:	b084      	sub	sp, #16
 800fc2c:	af00      	add	r7, sp, #0
 800fc2e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	d106      	bne.n	800fc44 <tcp_rexmit_rto_prepare+0x1c>
 800fc36:	4b31      	ldr	r3, [pc, #196]	; (800fcfc <tcp_rexmit_rto_prepare+0xd4>)
 800fc38:	f240 6263 	movw	r2, #1635	; 0x663
 800fc3c:	4930      	ldr	r1, [pc, #192]	; (800fd00 <tcp_rexmit_rto_prepare+0xd8>)
 800fc3e:	4831      	ldr	r0, [pc, #196]	; (800fd04 <tcp_rexmit_rto_prepare+0xdc>)
 800fc40:	f003 faa8 	bl	8013194 <iprintf>

  if (pcb->unacked == NULL) {
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fc48:	2b00      	cmp	r3, #0
 800fc4a:	d102      	bne.n	800fc52 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800fc4c:	f06f 0305 	mvn.w	r3, #5
 800fc50:	e050      	b.n	800fcf4 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fc56:	60fb      	str	r3, [r7, #12]
 800fc58:	e00b      	b.n	800fc72 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800fc5a:	68f8      	ldr	r0, [r7, #12]
 800fc5c:	f7ff fee6 	bl	800fa2c <tcp_output_segment_busy>
 800fc60:	4603      	mov	r3, r0
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d002      	beq.n	800fc6c <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800fc66:	f06f 0305 	mvn.w	r3, #5
 800fc6a:	e043      	b.n	800fcf4 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800fc6c:	68fb      	ldr	r3, [r7, #12]
 800fc6e:	681b      	ldr	r3, [r3, #0]
 800fc70:	60fb      	str	r3, [r7, #12]
 800fc72:	68fb      	ldr	r3, [r7, #12]
 800fc74:	681b      	ldr	r3, [r3, #0]
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	d1ef      	bne.n	800fc5a <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800fc7a:	68f8      	ldr	r0, [r7, #12]
 800fc7c:	f7ff fed6 	bl	800fa2c <tcp_output_segment_busy>
 800fc80:	4603      	mov	r3, r0
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	d002      	beq.n	800fc8c <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800fc86:	f06f 0305 	mvn.w	r3, #5
 800fc8a:	e033      	b.n	800fcf4 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800fc90:	68fb      	ldr	r3, [r7, #12]
 800fc92:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	2200      	movs	r2, #0
 800fca0:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	8b5b      	ldrh	r3, [r3, #26]
 800fca6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800fcaa:	b29a      	uxth	r2, r3
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800fcb0:	68fb      	ldr	r3, [r7, #12]
 800fcb2:	68db      	ldr	r3, [r3, #12]
 800fcb4:	685b      	ldr	r3, [r3, #4]
 800fcb6:	4618      	mov	r0, r3
 800fcb8:	f7f8 fd3b 	bl	8008732 <lwip_htonl>
 800fcbc:	4604      	mov	r4, r0
 800fcbe:	68fb      	ldr	r3, [r7, #12]
 800fcc0:	891b      	ldrh	r3, [r3, #8]
 800fcc2:	461d      	mov	r5, r3
 800fcc4:	68fb      	ldr	r3, [r7, #12]
 800fcc6:	68db      	ldr	r3, [r3, #12]
 800fcc8:	899b      	ldrh	r3, [r3, #12]
 800fcca:	b29b      	uxth	r3, r3
 800fccc:	4618      	mov	r0, r3
 800fcce:	f7f8 fd1b 	bl	8008708 <lwip_htons>
 800fcd2:	4603      	mov	r3, r0
 800fcd4:	b2db      	uxtb	r3, r3
 800fcd6:	f003 0303 	and.w	r3, r3, #3
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d001      	beq.n	800fce2 <tcp_rexmit_rto_prepare+0xba>
 800fcde:	2301      	movs	r3, #1
 800fce0:	e000      	b.n	800fce4 <tcp_rexmit_rto_prepare+0xbc>
 800fce2:	2300      	movs	r3, #0
 800fce4:	442b      	add	r3, r5
 800fce6:	18e2      	adds	r2, r4, r3
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	2200      	movs	r2, #0
 800fcf0:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800fcf2:	2300      	movs	r3, #0
}
 800fcf4:	4618      	mov	r0, r3
 800fcf6:	3710      	adds	r7, #16
 800fcf8:	46bd      	mov	sp, r7
 800fcfa:	bdb0      	pop	{r4, r5, r7, pc}
 800fcfc:	080158e8 	.word	0x080158e8
 800fd00:	08015f24 	.word	0x08015f24
 800fd04:	0801593c 	.word	0x0801593c

0800fd08 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800fd08:	b580      	push	{r7, lr}
 800fd0a:	b082      	sub	sp, #8
 800fd0c:	af00      	add	r7, sp, #0
 800fd0e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	d106      	bne.n	800fd24 <tcp_rexmit_rto_commit+0x1c>
 800fd16:	4b0d      	ldr	r3, [pc, #52]	; (800fd4c <tcp_rexmit_rto_commit+0x44>)
 800fd18:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800fd1c:	490c      	ldr	r1, [pc, #48]	; (800fd50 <tcp_rexmit_rto_commit+0x48>)
 800fd1e:	480d      	ldr	r0, [pc, #52]	; (800fd54 <tcp_rexmit_rto_commit+0x4c>)
 800fd20:	f003 fa38 	bl	8013194 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fd2a:	2bff      	cmp	r3, #255	; 0xff
 800fd2c:	d007      	beq.n	800fd3e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fd34:	3301      	adds	r3, #1
 800fd36:	b2da      	uxtb	r2, r3
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800fd3e:	6878      	ldr	r0, [r7, #4]
 800fd40:	f7ff fc80 	bl	800f644 <tcp_output>
}
 800fd44:	bf00      	nop
 800fd46:	3708      	adds	r7, #8
 800fd48:	46bd      	mov	sp, r7
 800fd4a:	bd80      	pop	{r7, pc}
 800fd4c:	080158e8 	.word	0x080158e8
 800fd50:	08015f48 	.word	0x08015f48
 800fd54:	0801593c 	.word	0x0801593c

0800fd58 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800fd58:	b580      	push	{r7, lr}
 800fd5a:	b082      	sub	sp, #8
 800fd5c:	af00      	add	r7, sp, #0
 800fd5e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	d106      	bne.n	800fd74 <tcp_rexmit_rto+0x1c>
 800fd66:	4b0a      	ldr	r3, [pc, #40]	; (800fd90 <tcp_rexmit_rto+0x38>)
 800fd68:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800fd6c:	4909      	ldr	r1, [pc, #36]	; (800fd94 <tcp_rexmit_rto+0x3c>)
 800fd6e:	480a      	ldr	r0, [pc, #40]	; (800fd98 <tcp_rexmit_rto+0x40>)
 800fd70:	f003 fa10 	bl	8013194 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800fd74:	6878      	ldr	r0, [r7, #4]
 800fd76:	f7ff ff57 	bl	800fc28 <tcp_rexmit_rto_prepare>
 800fd7a:	4603      	mov	r3, r0
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	d102      	bne.n	800fd86 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800fd80:	6878      	ldr	r0, [r7, #4]
 800fd82:	f7ff ffc1 	bl	800fd08 <tcp_rexmit_rto_commit>
  }
}
 800fd86:	bf00      	nop
 800fd88:	3708      	adds	r7, #8
 800fd8a:	46bd      	mov	sp, r7
 800fd8c:	bd80      	pop	{r7, pc}
 800fd8e:	bf00      	nop
 800fd90:	080158e8 	.word	0x080158e8
 800fd94:	08015f6c 	.word	0x08015f6c
 800fd98:	0801593c 	.word	0x0801593c

0800fd9c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800fd9c:	b590      	push	{r4, r7, lr}
 800fd9e:	b085      	sub	sp, #20
 800fda0:	af00      	add	r7, sp, #0
 800fda2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	d106      	bne.n	800fdb8 <tcp_rexmit+0x1c>
 800fdaa:	4b2f      	ldr	r3, [pc, #188]	; (800fe68 <tcp_rexmit+0xcc>)
 800fdac:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800fdb0:	492e      	ldr	r1, [pc, #184]	; (800fe6c <tcp_rexmit+0xd0>)
 800fdb2:	482f      	ldr	r0, [pc, #188]	; (800fe70 <tcp_rexmit+0xd4>)
 800fdb4:	f003 f9ee 	bl	8013194 <iprintf>

  if (pcb->unacked == NULL) {
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	d102      	bne.n	800fdc6 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800fdc0:	f06f 0305 	mvn.w	r3, #5
 800fdc4:	e04c      	b.n	800fe60 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fdca:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800fdcc:	68b8      	ldr	r0, [r7, #8]
 800fdce:	f7ff fe2d 	bl	800fa2c <tcp_output_segment_busy>
 800fdd2:	4603      	mov	r3, r0
 800fdd4:	2b00      	cmp	r3, #0
 800fdd6:	d002      	beq.n	800fdde <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800fdd8:	f06f 0305 	mvn.w	r3, #5
 800fddc:	e040      	b.n	800fe60 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800fdde:	68bb      	ldr	r3, [r7, #8]
 800fde0:	681a      	ldr	r2, [r3, #0]
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	336c      	adds	r3, #108	; 0x6c
 800fdea:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800fdec:	e002      	b.n	800fdf4 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800fdee:	68fb      	ldr	r3, [r7, #12]
 800fdf0:	681b      	ldr	r3, [r3, #0]
 800fdf2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800fdf4:	68fb      	ldr	r3, [r7, #12]
 800fdf6:	681b      	ldr	r3, [r3, #0]
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	d011      	beq.n	800fe20 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800fdfc:	68fb      	ldr	r3, [r7, #12]
 800fdfe:	681b      	ldr	r3, [r3, #0]
 800fe00:	68db      	ldr	r3, [r3, #12]
 800fe02:	685b      	ldr	r3, [r3, #4]
 800fe04:	4618      	mov	r0, r3
 800fe06:	f7f8 fc94 	bl	8008732 <lwip_htonl>
 800fe0a:	4604      	mov	r4, r0
 800fe0c:	68bb      	ldr	r3, [r7, #8]
 800fe0e:	68db      	ldr	r3, [r3, #12]
 800fe10:	685b      	ldr	r3, [r3, #4]
 800fe12:	4618      	mov	r0, r3
 800fe14:	f7f8 fc8d 	bl	8008732 <lwip_htonl>
 800fe18:	4603      	mov	r3, r0
 800fe1a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	dbe6      	blt.n	800fdee <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800fe20:	68fb      	ldr	r3, [r7, #12]
 800fe22:	681a      	ldr	r2, [r3, #0]
 800fe24:	68bb      	ldr	r3, [r7, #8]
 800fe26:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800fe28:	68fb      	ldr	r3, [r7, #12]
 800fe2a:	68ba      	ldr	r2, [r7, #8]
 800fe2c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800fe2e:	68bb      	ldr	r3, [r7, #8]
 800fe30:	681b      	ldr	r3, [r3, #0]
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	d103      	bne.n	800fe3e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	2200      	movs	r2, #0
 800fe3a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fe44:	2bff      	cmp	r3, #255	; 0xff
 800fe46:	d007      	beq.n	800fe58 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fe4e:	3301      	adds	r3, #1
 800fe50:	b2da      	uxtb	r2, r3
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	2200      	movs	r2, #0
 800fe5c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800fe5e:	2300      	movs	r3, #0
}
 800fe60:	4618      	mov	r0, r3
 800fe62:	3714      	adds	r7, #20
 800fe64:	46bd      	mov	sp, r7
 800fe66:	bd90      	pop	{r4, r7, pc}
 800fe68:	080158e8 	.word	0x080158e8
 800fe6c:	08015f88 	.word	0x08015f88
 800fe70:	0801593c 	.word	0x0801593c

0800fe74 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800fe74:	b580      	push	{r7, lr}
 800fe76:	b082      	sub	sp, #8
 800fe78:	af00      	add	r7, sp, #0
 800fe7a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	d106      	bne.n	800fe90 <tcp_rexmit_fast+0x1c>
 800fe82:	4b2a      	ldr	r3, [pc, #168]	; (800ff2c <tcp_rexmit_fast+0xb8>)
 800fe84:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800fe88:	4929      	ldr	r1, [pc, #164]	; (800ff30 <tcp_rexmit_fast+0xbc>)
 800fe8a:	482a      	ldr	r0, [pc, #168]	; (800ff34 <tcp_rexmit_fast+0xc0>)
 800fe8c:	f003 f982 	bl	8013194 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	d045      	beq.n	800ff24 <tcp_rexmit_fast+0xb0>
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	8b5b      	ldrh	r3, [r3, #26]
 800fe9c:	f003 0304 	and.w	r3, r3, #4
 800fea0:	2b00      	cmp	r3, #0
 800fea2:	d13f      	bne.n	800ff24 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800fea4:	6878      	ldr	r0, [r7, #4]
 800fea6:	f7ff ff79 	bl	800fd9c <tcp_rexmit>
 800feaa:	4603      	mov	r3, r0
 800feac:	2b00      	cmp	r3, #0
 800feae:	d139      	bne.n	800ff24 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800febc:	4293      	cmp	r3, r2
 800febe:	bf28      	it	cs
 800fec0:	4613      	movcs	r3, r2
 800fec2:	b29b      	uxth	r3, r3
 800fec4:	2b00      	cmp	r3, #0
 800fec6:	da00      	bge.n	800feca <tcp_rexmit_fast+0x56>
 800fec8:	3301      	adds	r3, #1
 800feca:	105b      	asrs	r3, r3, #1
 800fecc:	b29a      	uxth	r2, r3
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800feda:	461a      	mov	r2, r3
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fee0:	005b      	lsls	r3, r3, #1
 800fee2:	429a      	cmp	r2, r3
 800fee4:	d206      	bcs.n	800fef4 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800feea:	005b      	lsls	r3, r3, #1
 800feec:	b29a      	uxth	r2, r3
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fefe:	4619      	mov	r1, r3
 800ff00:	0049      	lsls	r1, r1, #1
 800ff02:	440b      	add	r3, r1
 800ff04:	b29b      	uxth	r3, r3
 800ff06:	4413      	add	r3, r2
 800ff08:	b29a      	uxth	r2, r3
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	8b5b      	ldrh	r3, [r3, #26]
 800ff14:	f043 0304 	orr.w	r3, r3, #4
 800ff18:	b29a      	uxth	r2, r3
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	2200      	movs	r2, #0
 800ff22:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800ff24:	bf00      	nop
 800ff26:	3708      	adds	r7, #8
 800ff28:	46bd      	mov	sp, r7
 800ff2a:	bd80      	pop	{r7, pc}
 800ff2c:	080158e8 	.word	0x080158e8
 800ff30:	08015fa0 	.word	0x08015fa0
 800ff34:	0801593c 	.word	0x0801593c

0800ff38 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800ff38:	b580      	push	{r7, lr}
 800ff3a:	b086      	sub	sp, #24
 800ff3c:	af00      	add	r7, sp, #0
 800ff3e:	60f8      	str	r0, [r7, #12]
 800ff40:	607b      	str	r3, [r7, #4]
 800ff42:	460b      	mov	r3, r1
 800ff44:	817b      	strh	r3, [r7, #10]
 800ff46:	4613      	mov	r3, r2
 800ff48:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800ff4a:	897a      	ldrh	r2, [r7, #10]
 800ff4c:	893b      	ldrh	r3, [r7, #8]
 800ff4e:	4413      	add	r3, r2
 800ff50:	b29b      	uxth	r3, r3
 800ff52:	3314      	adds	r3, #20
 800ff54:	b29b      	uxth	r3, r3
 800ff56:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ff5a:	4619      	mov	r1, r3
 800ff5c:	2022      	movs	r0, #34	; 0x22
 800ff5e:	f7f9 fd15 	bl	800998c <pbuf_alloc>
 800ff62:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800ff64:	697b      	ldr	r3, [r7, #20]
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	d04d      	beq.n	8010006 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800ff6a:	897b      	ldrh	r3, [r7, #10]
 800ff6c:	3313      	adds	r3, #19
 800ff6e:	697a      	ldr	r2, [r7, #20]
 800ff70:	8952      	ldrh	r2, [r2, #10]
 800ff72:	4293      	cmp	r3, r2
 800ff74:	db06      	blt.n	800ff84 <tcp_output_alloc_header_common+0x4c>
 800ff76:	4b26      	ldr	r3, [pc, #152]	; (8010010 <tcp_output_alloc_header_common+0xd8>)
 800ff78:	f240 7223 	movw	r2, #1827	; 0x723
 800ff7c:	4925      	ldr	r1, [pc, #148]	; (8010014 <tcp_output_alloc_header_common+0xdc>)
 800ff7e:	4826      	ldr	r0, [pc, #152]	; (8010018 <tcp_output_alloc_header_common+0xe0>)
 800ff80:	f003 f908 	bl	8013194 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800ff84:	697b      	ldr	r3, [r7, #20]
 800ff86:	685b      	ldr	r3, [r3, #4]
 800ff88:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800ff8a:	8c3b      	ldrh	r3, [r7, #32]
 800ff8c:	4618      	mov	r0, r3
 800ff8e:	f7f8 fbbb 	bl	8008708 <lwip_htons>
 800ff92:	4603      	mov	r3, r0
 800ff94:	461a      	mov	r2, r3
 800ff96:	693b      	ldr	r3, [r7, #16]
 800ff98:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800ff9a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ff9c:	4618      	mov	r0, r3
 800ff9e:	f7f8 fbb3 	bl	8008708 <lwip_htons>
 800ffa2:	4603      	mov	r3, r0
 800ffa4:	461a      	mov	r2, r3
 800ffa6:	693b      	ldr	r3, [r7, #16]
 800ffa8:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800ffaa:	693b      	ldr	r3, [r7, #16]
 800ffac:	687a      	ldr	r2, [r7, #4]
 800ffae:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800ffb0:	68f8      	ldr	r0, [r7, #12]
 800ffb2:	f7f8 fbbe 	bl	8008732 <lwip_htonl>
 800ffb6:	4602      	mov	r2, r0
 800ffb8:	693b      	ldr	r3, [r7, #16]
 800ffba:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800ffbc:	897b      	ldrh	r3, [r7, #10]
 800ffbe:	089b      	lsrs	r3, r3, #2
 800ffc0:	b29b      	uxth	r3, r3
 800ffc2:	3305      	adds	r3, #5
 800ffc4:	b29b      	uxth	r3, r3
 800ffc6:	031b      	lsls	r3, r3, #12
 800ffc8:	b29a      	uxth	r2, r3
 800ffca:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ffce:	b29b      	uxth	r3, r3
 800ffd0:	4313      	orrs	r3, r2
 800ffd2:	b29b      	uxth	r3, r3
 800ffd4:	4618      	mov	r0, r3
 800ffd6:	f7f8 fb97 	bl	8008708 <lwip_htons>
 800ffda:	4603      	mov	r3, r0
 800ffdc:	461a      	mov	r2, r3
 800ffde:	693b      	ldr	r3, [r7, #16]
 800ffe0:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800ffe2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ffe4:	4618      	mov	r0, r3
 800ffe6:	f7f8 fb8f 	bl	8008708 <lwip_htons>
 800ffea:	4603      	mov	r3, r0
 800ffec:	461a      	mov	r2, r3
 800ffee:	693b      	ldr	r3, [r7, #16]
 800fff0:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800fff2:	693b      	ldr	r3, [r7, #16]
 800fff4:	2200      	movs	r2, #0
 800fff6:	741a      	strb	r2, [r3, #16]
 800fff8:	2200      	movs	r2, #0
 800fffa:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800fffc:	693b      	ldr	r3, [r7, #16]
 800fffe:	2200      	movs	r2, #0
 8010000:	749a      	strb	r2, [r3, #18]
 8010002:	2200      	movs	r2, #0
 8010004:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8010006:	697b      	ldr	r3, [r7, #20]
}
 8010008:	4618      	mov	r0, r3
 801000a:	3718      	adds	r7, #24
 801000c:	46bd      	mov	sp, r7
 801000e:	bd80      	pop	{r7, pc}
 8010010:	080158e8 	.word	0x080158e8
 8010014:	08015fc0 	.word	0x08015fc0
 8010018:	0801593c 	.word	0x0801593c

0801001c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 801001c:	b5b0      	push	{r4, r5, r7, lr}
 801001e:	b08a      	sub	sp, #40	; 0x28
 8010020:	af04      	add	r7, sp, #16
 8010022:	60f8      	str	r0, [r7, #12]
 8010024:	607b      	str	r3, [r7, #4]
 8010026:	460b      	mov	r3, r1
 8010028:	817b      	strh	r3, [r7, #10]
 801002a:	4613      	mov	r3, r2
 801002c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801002e:	68fb      	ldr	r3, [r7, #12]
 8010030:	2b00      	cmp	r3, #0
 8010032:	d106      	bne.n	8010042 <tcp_output_alloc_header+0x26>
 8010034:	4b15      	ldr	r3, [pc, #84]	; (801008c <tcp_output_alloc_header+0x70>)
 8010036:	f240 7242 	movw	r2, #1858	; 0x742
 801003a:	4915      	ldr	r1, [pc, #84]	; (8010090 <tcp_output_alloc_header+0x74>)
 801003c:	4815      	ldr	r0, [pc, #84]	; (8010094 <tcp_output_alloc_header+0x78>)
 801003e:	f003 f8a9 	bl	8013194 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8010042:	68fb      	ldr	r3, [r7, #12]
 8010044:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8010046:	68fb      	ldr	r3, [r7, #12]
 8010048:	8adb      	ldrh	r3, [r3, #22]
 801004a:	68fa      	ldr	r2, [r7, #12]
 801004c:	8b12      	ldrh	r2, [r2, #24]
 801004e:	68f9      	ldr	r1, [r7, #12]
 8010050:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8010052:	893d      	ldrh	r5, [r7, #8]
 8010054:	897c      	ldrh	r4, [r7, #10]
 8010056:	9103      	str	r1, [sp, #12]
 8010058:	2110      	movs	r1, #16
 801005a:	9102      	str	r1, [sp, #8]
 801005c:	9201      	str	r2, [sp, #4]
 801005e:	9300      	str	r3, [sp, #0]
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	462a      	mov	r2, r5
 8010064:	4621      	mov	r1, r4
 8010066:	f7ff ff67 	bl	800ff38 <tcp_output_alloc_header_common>
 801006a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801006c:	697b      	ldr	r3, [r7, #20]
 801006e:	2b00      	cmp	r3, #0
 8010070:	d006      	beq.n	8010080 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8010072:	68fb      	ldr	r3, [r7, #12]
 8010074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010076:	68fa      	ldr	r2, [r7, #12]
 8010078:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801007a:	441a      	add	r2, r3
 801007c:	68fb      	ldr	r3, [r7, #12]
 801007e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8010080:	697b      	ldr	r3, [r7, #20]
}
 8010082:	4618      	mov	r0, r3
 8010084:	3718      	adds	r7, #24
 8010086:	46bd      	mov	sp, r7
 8010088:	bdb0      	pop	{r4, r5, r7, pc}
 801008a:	bf00      	nop
 801008c:	080158e8 	.word	0x080158e8
 8010090:	08015ff0 	.word	0x08015ff0
 8010094:	0801593c 	.word	0x0801593c

08010098 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8010098:	b580      	push	{r7, lr}
 801009a:	b088      	sub	sp, #32
 801009c:	af00      	add	r7, sp, #0
 801009e:	60f8      	str	r0, [r7, #12]
 80100a0:	60b9      	str	r1, [r7, #8]
 80100a2:	4611      	mov	r1, r2
 80100a4:	461a      	mov	r2, r3
 80100a6:	460b      	mov	r3, r1
 80100a8:	71fb      	strb	r3, [r7, #7]
 80100aa:	4613      	mov	r3, r2
 80100ac:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80100ae:	2300      	movs	r3, #0
 80100b0:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80100b2:	68bb      	ldr	r3, [r7, #8]
 80100b4:	2b00      	cmp	r3, #0
 80100b6:	d106      	bne.n	80100c6 <tcp_output_fill_options+0x2e>
 80100b8:	4b13      	ldr	r3, [pc, #76]	; (8010108 <tcp_output_fill_options+0x70>)
 80100ba:	f240 7256 	movw	r2, #1878	; 0x756
 80100be:	4913      	ldr	r1, [pc, #76]	; (801010c <tcp_output_fill_options+0x74>)
 80100c0:	4813      	ldr	r0, [pc, #76]	; (8010110 <tcp_output_fill_options+0x78>)
 80100c2:	f003 f867 	bl	8013194 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80100c6:	68bb      	ldr	r3, [r7, #8]
 80100c8:	685b      	ldr	r3, [r3, #4]
 80100ca:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80100cc:	69bb      	ldr	r3, [r7, #24]
 80100ce:	3314      	adds	r3, #20
 80100d0:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80100d2:	69bb      	ldr	r3, [r7, #24]
 80100d4:	f103 0214 	add.w	r2, r3, #20
 80100d8:	8bfb      	ldrh	r3, [r7, #30]
 80100da:	009b      	lsls	r3, r3, #2
 80100dc:	4619      	mov	r1, r3
 80100de:	79fb      	ldrb	r3, [r7, #7]
 80100e0:	009b      	lsls	r3, r3, #2
 80100e2:	f003 0304 	and.w	r3, r3, #4
 80100e6:	440b      	add	r3, r1
 80100e8:	4413      	add	r3, r2
 80100ea:	697a      	ldr	r2, [r7, #20]
 80100ec:	429a      	cmp	r2, r3
 80100ee:	d006      	beq.n	80100fe <tcp_output_fill_options+0x66>
 80100f0:	4b05      	ldr	r3, [pc, #20]	; (8010108 <tcp_output_fill_options+0x70>)
 80100f2:	f240 7275 	movw	r2, #1909	; 0x775
 80100f6:	4907      	ldr	r1, [pc, #28]	; (8010114 <tcp_output_fill_options+0x7c>)
 80100f8:	4805      	ldr	r0, [pc, #20]	; (8010110 <tcp_output_fill_options+0x78>)
 80100fa:	f003 f84b 	bl	8013194 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80100fe:	bf00      	nop
 8010100:	3720      	adds	r7, #32
 8010102:	46bd      	mov	sp, r7
 8010104:	bd80      	pop	{r7, pc}
 8010106:	bf00      	nop
 8010108:	080158e8 	.word	0x080158e8
 801010c:	08016018 	.word	0x08016018
 8010110:	0801593c 	.word	0x0801593c
 8010114:	08015f10 	.word	0x08015f10

08010118 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8010118:	b580      	push	{r7, lr}
 801011a:	b08a      	sub	sp, #40	; 0x28
 801011c:	af04      	add	r7, sp, #16
 801011e:	60f8      	str	r0, [r7, #12]
 8010120:	60b9      	str	r1, [r7, #8]
 8010122:	607a      	str	r2, [r7, #4]
 8010124:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8010126:	68bb      	ldr	r3, [r7, #8]
 8010128:	2b00      	cmp	r3, #0
 801012a:	d106      	bne.n	801013a <tcp_output_control_segment+0x22>
 801012c:	4b1c      	ldr	r3, [pc, #112]	; (80101a0 <tcp_output_control_segment+0x88>)
 801012e:	f240 7287 	movw	r2, #1927	; 0x787
 8010132:	491c      	ldr	r1, [pc, #112]	; (80101a4 <tcp_output_control_segment+0x8c>)
 8010134:	481c      	ldr	r0, [pc, #112]	; (80101a8 <tcp_output_control_segment+0x90>)
 8010136:	f003 f82d 	bl	8013194 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801013a:	683a      	ldr	r2, [r7, #0]
 801013c:	6879      	ldr	r1, [r7, #4]
 801013e:	68f8      	ldr	r0, [r7, #12]
 8010140:	f7fe fae8 	bl	800e714 <tcp_route>
 8010144:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8010146:	693b      	ldr	r3, [r7, #16]
 8010148:	2b00      	cmp	r3, #0
 801014a:	d102      	bne.n	8010152 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801014c:	23fc      	movs	r3, #252	; 0xfc
 801014e:	75fb      	strb	r3, [r7, #23]
 8010150:	e01c      	b.n	801018c <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8010152:	68fb      	ldr	r3, [r7, #12]
 8010154:	2b00      	cmp	r3, #0
 8010156:	d006      	beq.n	8010166 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8010158:	68fb      	ldr	r3, [r7, #12]
 801015a:	7adb      	ldrb	r3, [r3, #11]
 801015c:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801015e:	68fb      	ldr	r3, [r7, #12]
 8010160:	7a9b      	ldrb	r3, [r3, #10]
 8010162:	757b      	strb	r3, [r7, #21]
 8010164:	e003      	b.n	801016e <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8010166:	23ff      	movs	r3, #255	; 0xff
 8010168:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801016a:	2300      	movs	r3, #0
 801016c:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801016e:	7dba      	ldrb	r2, [r7, #22]
 8010170:	693b      	ldr	r3, [r7, #16]
 8010172:	9302      	str	r3, [sp, #8]
 8010174:	2306      	movs	r3, #6
 8010176:	9301      	str	r3, [sp, #4]
 8010178:	7d7b      	ldrb	r3, [r7, #21]
 801017a:	9300      	str	r3, [sp, #0]
 801017c:	4613      	mov	r3, r2
 801017e:	683a      	ldr	r2, [r7, #0]
 8010180:	6879      	ldr	r1, [r7, #4]
 8010182:	68b8      	ldr	r0, [r7, #8]
 8010184:	f001 ff96 	bl	80120b4 <ip4_output_if>
 8010188:	4603      	mov	r3, r0
 801018a:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801018c:	68b8      	ldr	r0, [r7, #8]
 801018e:	f7f9 fee1 	bl	8009f54 <pbuf_free>
  return err;
 8010192:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010196:	4618      	mov	r0, r3
 8010198:	3718      	adds	r7, #24
 801019a:	46bd      	mov	sp, r7
 801019c:	bd80      	pop	{r7, pc}
 801019e:	bf00      	nop
 80101a0:	080158e8 	.word	0x080158e8
 80101a4:	08016040 	.word	0x08016040
 80101a8:	0801593c 	.word	0x0801593c

080101ac <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80101ac:	b590      	push	{r4, r7, lr}
 80101ae:	b08b      	sub	sp, #44	; 0x2c
 80101b0:	af04      	add	r7, sp, #16
 80101b2:	60f8      	str	r0, [r7, #12]
 80101b4:	60b9      	str	r1, [r7, #8]
 80101b6:	607a      	str	r2, [r7, #4]
 80101b8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80101ba:	683b      	ldr	r3, [r7, #0]
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d106      	bne.n	80101ce <tcp_rst+0x22>
 80101c0:	4b1f      	ldr	r3, [pc, #124]	; (8010240 <tcp_rst+0x94>)
 80101c2:	f240 72c4 	movw	r2, #1988	; 0x7c4
 80101c6:	491f      	ldr	r1, [pc, #124]	; (8010244 <tcp_rst+0x98>)
 80101c8:	481f      	ldr	r0, [pc, #124]	; (8010248 <tcp_rst+0x9c>)
 80101ca:	f002 ffe3 	bl	8013194 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80101ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	d106      	bne.n	80101e2 <tcp_rst+0x36>
 80101d4:	4b1a      	ldr	r3, [pc, #104]	; (8010240 <tcp_rst+0x94>)
 80101d6:	f240 72c5 	movw	r2, #1989	; 0x7c5
 80101da:	491c      	ldr	r1, [pc, #112]	; (801024c <tcp_rst+0xa0>)
 80101dc:	481a      	ldr	r0, [pc, #104]	; (8010248 <tcp_rst+0x9c>)
 80101de:	f002 ffd9 	bl	8013194 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80101e2:	2300      	movs	r3, #0
 80101e4:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80101e6:	f246 0308 	movw	r3, #24584	; 0x6008
 80101ea:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80101ec:	7dfb      	ldrb	r3, [r7, #23]
 80101ee:	b29c      	uxth	r4, r3
 80101f0:	68b8      	ldr	r0, [r7, #8]
 80101f2:	f7f8 fa9e 	bl	8008732 <lwip_htonl>
 80101f6:	4602      	mov	r2, r0
 80101f8:	8abb      	ldrh	r3, [r7, #20]
 80101fa:	9303      	str	r3, [sp, #12]
 80101fc:	2314      	movs	r3, #20
 80101fe:	9302      	str	r3, [sp, #8]
 8010200:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8010202:	9301      	str	r3, [sp, #4]
 8010204:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010206:	9300      	str	r3, [sp, #0]
 8010208:	4613      	mov	r3, r2
 801020a:	2200      	movs	r2, #0
 801020c:	4621      	mov	r1, r4
 801020e:	6878      	ldr	r0, [r7, #4]
 8010210:	f7ff fe92 	bl	800ff38 <tcp_output_alloc_header_common>
 8010214:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8010216:	693b      	ldr	r3, [r7, #16]
 8010218:	2b00      	cmp	r3, #0
 801021a:	d00c      	beq.n	8010236 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801021c:	7dfb      	ldrb	r3, [r7, #23]
 801021e:	2200      	movs	r2, #0
 8010220:	6939      	ldr	r1, [r7, #16]
 8010222:	68f8      	ldr	r0, [r7, #12]
 8010224:	f7ff ff38 	bl	8010098 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8010228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801022a:	683a      	ldr	r2, [r7, #0]
 801022c:	6939      	ldr	r1, [r7, #16]
 801022e:	68f8      	ldr	r0, [r7, #12]
 8010230:	f7ff ff72 	bl	8010118 <tcp_output_control_segment>
 8010234:	e000      	b.n	8010238 <tcp_rst+0x8c>
    return;
 8010236:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8010238:	371c      	adds	r7, #28
 801023a:	46bd      	mov	sp, r7
 801023c:	bd90      	pop	{r4, r7, pc}
 801023e:	bf00      	nop
 8010240:	080158e8 	.word	0x080158e8
 8010244:	0801606c 	.word	0x0801606c
 8010248:	0801593c 	.word	0x0801593c
 801024c:	08016088 	.word	0x08016088

08010250 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8010250:	b590      	push	{r4, r7, lr}
 8010252:	b087      	sub	sp, #28
 8010254:	af00      	add	r7, sp, #0
 8010256:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8010258:	2300      	movs	r3, #0
 801025a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801025c:	2300      	movs	r3, #0
 801025e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	2b00      	cmp	r3, #0
 8010264:	d106      	bne.n	8010274 <tcp_send_empty_ack+0x24>
 8010266:	4b28      	ldr	r3, [pc, #160]	; (8010308 <tcp_send_empty_ack+0xb8>)
 8010268:	f240 72ea 	movw	r2, #2026	; 0x7ea
 801026c:	4927      	ldr	r1, [pc, #156]	; (801030c <tcp_send_empty_ack+0xbc>)
 801026e:	4828      	ldr	r0, [pc, #160]	; (8010310 <tcp_send_empty_ack+0xc0>)
 8010270:	f002 ff90 	bl	8013194 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010274:	7dfb      	ldrb	r3, [r7, #23]
 8010276:	009b      	lsls	r3, r3, #2
 8010278:	b2db      	uxtb	r3, r3
 801027a:	f003 0304 	and.w	r3, r3, #4
 801027e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8010280:	7d7b      	ldrb	r3, [r7, #21]
 8010282:	b29c      	uxth	r4, r3
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010288:	4618      	mov	r0, r3
 801028a:	f7f8 fa52 	bl	8008732 <lwip_htonl>
 801028e:	4603      	mov	r3, r0
 8010290:	2200      	movs	r2, #0
 8010292:	4621      	mov	r1, r4
 8010294:	6878      	ldr	r0, [r7, #4]
 8010296:	f7ff fec1 	bl	801001c <tcp_output_alloc_header>
 801029a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801029c:	693b      	ldr	r3, [r7, #16]
 801029e:	2b00      	cmp	r3, #0
 80102a0:	d109      	bne.n	80102b6 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	8b5b      	ldrh	r3, [r3, #26]
 80102a6:	f043 0303 	orr.w	r3, r3, #3
 80102aa:	b29a      	uxth	r2, r3
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80102b0:	f06f 0301 	mvn.w	r3, #1
 80102b4:	e023      	b.n	80102fe <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80102b6:	7dbb      	ldrb	r3, [r7, #22]
 80102b8:	7dfa      	ldrb	r2, [r7, #23]
 80102ba:	6939      	ldr	r1, [r7, #16]
 80102bc:	6878      	ldr	r0, [r7, #4]
 80102be:	f7ff feeb 	bl	8010098 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80102c2:	687a      	ldr	r2, [r7, #4]
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	3304      	adds	r3, #4
 80102c8:	6939      	ldr	r1, [r7, #16]
 80102ca:	6878      	ldr	r0, [r7, #4]
 80102cc:	f7ff ff24 	bl	8010118 <tcp_output_control_segment>
 80102d0:	4603      	mov	r3, r0
 80102d2:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80102d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80102d8:	2b00      	cmp	r3, #0
 80102da:	d007      	beq.n	80102ec <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	8b5b      	ldrh	r3, [r3, #26]
 80102e0:	f043 0303 	orr.w	r3, r3, #3
 80102e4:	b29a      	uxth	r2, r3
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	835a      	strh	r2, [r3, #26]
 80102ea:	e006      	b.n	80102fa <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	8b5b      	ldrh	r3, [r3, #26]
 80102f0:	f023 0303 	bic.w	r3, r3, #3
 80102f4:	b29a      	uxth	r2, r3
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80102fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80102fe:	4618      	mov	r0, r3
 8010300:	371c      	adds	r7, #28
 8010302:	46bd      	mov	sp, r7
 8010304:	bd90      	pop	{r4, r7, pc}
 8010306:	bf00      	nop
 8010308:	080158e8 	.word	0x080158e8
 801030c:	080160a4 	.word	0x080160a4
 8010310:	0801593c 	.word	0x0801593c

08010314 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8010314:	b590      	push	{r4, r7, lr}
 8010316:	b087      	sub	sp, #28
 8010318:	af00      	add	r7, sp, #0
 801031a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801031c:	2300      	movs	r3, #0
 801031e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	2b00      	cmp	r3, #0
 8010324:	d106      	bne.n	8010334 <tcp_keepalive+0x20>
 8010326:	4b18      	ldr	r3, [pc, #96]	; (8010388 <tcp_keepalive+0x74>)
 8010328:	f640 0224 	movw	r2, #2084	; 0x824
 801032c:	4917      	ldr	r1, [pc, #92]	; (801038c <tcp_keepalive+0x78>)
 801032e:	4818      	ldr	r0, [pc, #96]	; (8010390 <tcp_keepalive+0x7c>)
 8010330:	f002 ff30 	bl	8013194 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8010334:	7dfb      	ldrb	r3, [r7, #23]
 8010336:	b29c      	uxth	r4, r3
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801033c:	3b01      	subs	r3, #1
 801033e:	4618      	mov	r0, r3
 8010340:	f7f8 f9f7 	bl	8008732 <lwip_htonl>
 8010344:	4603      	mov	r3, r0
 8010346:	2200      	movs	r2, #0
 8010348:	4621      	mov	r1, r4
 801034a:	6878      	ldr	r0, [r7, #4]
 801034c:	f7ff fe66 	bl	801001c <tcp_output_alloc_header>
 8010350:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010352:	693b      	ldr	r3, [r7, #16]
 8010354:	2b00      	cmp	r3, #0
 8010356:	d102      	bne.n	801035e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8010358:	f04f 33ff 	mov.w	r3, #4294967295
 801035c:	e010      	b.n	8010380 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801035e:	7dfb      	ldrb	r3, [r7, #23]
 8010360:	2200      	movs	r2, #0
 8010362:	6939      	ldr	r1, [r7, #16]
 8010364:	6878      	ldr	r0, [r7, #4]
 8010366:	f7ff fe97 	bl	8010098 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801036a:	687a      	ldr	r2, [r7, #4]
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	3304      	adds	r3, #4
 8010370:	6939      	ldr	r1, [r7, #16]
 8010372:	6878      	ldr	r0, [r7, #4]
 8010374:	f7ff fed0 	bl	8010118 <tcp_output_control_segment>
 8010378:	4603      	mov	r3, r0
 801037a:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801037c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010380:	4618      	mov	r0, r3
 8010382:	371c      	adds	r7, #28
 8010384:	46bd      	mov	sp, r7
 8010386:	bd90      	pop	{r4, r7, pc}
 8010388:	080158e8 	.word	0x080158e8
 801038c:	080160c4 	.word	0x080160c4
 8010390:	0801593c 	.word	0x0801593c

08010394 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8010394:	b590      	push	{r4, r7, lr}
 8010396:	b08b      	sub	sp, #44	; 0x2c
 8010398:	af00      	add	r7, sp, #0
 801039a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801039c:	2300      	movs	r3, #0
 801039e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	2b00      	cmp	r3, #0
 80103a6:	d106      	bne.n	80103b6 <tcp_zero_window_probe+0x22>
 80103a8:	4b4c      	ldr	r3, [pc, #304]	; (80104dc <tcp_zero_window_probe+0x148>)
 80103aa:	f640 024f 	movw	r2, #2127	; 0x84f
 80103ae:	494c      	ldr	r1, [pc, #304]	; (80104e0 <tcp_zero_window_probe+0x14c>)
 80103b0:	484c      	ldr	r0, [pc, #304]	; (80104e4 <tcp_zero_window_probe+0x150>)
 80103b2:	f002 feef 	bl	8013194 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80103ba:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 80103bc:	6a3b      	ldr	r3, [r7, #32]
 80103be:	2b00      	cmp	r3, #0
 80103c0:	d101      	bne.n	80103c6 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80103c2:	2300      	movs	r3, #0
 80103c4:	e086      	b.n	80104d4 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80103cc:	2bff      	cmp	r3, #255	; 0xff
 80103ce:	d007      	beq.n	80103e0 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80103d6:	3301      	adds	r3, #1
 80103d8:	b2da      	uxtb	r2, r3
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80103e0:	6a3b      	ldr	r3, [r7, #32]
 80103e2:	68db      	ldr	r3, [r3, #12]
 80103e4:	899b      	ldrh	r3, [r3, #12]
 80103e6:	b29b      	uxth	r3, r3
 80103e8:	4618      	mov	r0, r3
 80103ea:	f7f8 f98d 	bl	8008708 <lwip_htons>
 80103ee:	4603      	mov	r3, r0
 80103f0:	b2db      	uxtb	r3, r3
 80103f2:	f003 0301 	and.w	r3, r3, #1
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	d005      	beq.n	8010406 <tcp_zero_window_probe+0x72>
 80103fa:	6a3b      	ldr	r3, [r7, #32]
 80103fc:	891b      	ldrh	r3, [r3, #8]
 80103fe:	2b00      	cmp	r3, #0
 8010400:	d101      	bne.n	8010406 <tcp_zero_window_probe+0x72>
 8010402:	2301      	movs	r3, #1
 8010404:	e000      	b.n	8010408 <tcp_zero_window_probe+0x74>
 8010406:	2300      	movs	r3, #0
 8010408:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801040a:	7ffb      	ldrb	r3, [r7, #31]
 801040c:	2b00      	cmp	r3, #0
 801040e:	bf0c      	ite	eq
 8010410:	2301      	moveq	r3, #1
 8010412:	2300      	movne	r3, #0
 8010414:	b2db      	uxtb	r3, r3
 8010416:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8010418:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801041c:	b299      	uxth	r1, r3
 801041e:	6a3b      	ldr	r3, [r7, #32]
 8010420:	68db      	ldr	r3, [r3, #12]
 8010422:	685b      	ldr	r3, [r3, #4]
 8010424:	8bba      	ldrh	r2, [r7, #28]
 8010426:	6878      	ldr	r0, [r7, #4]
 8010428:	f7ff fdf8 	bl	801001c <tcp_output_alloc_header>
 801042c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801042e:	69bb      	ldr	r3, [r7, #24]
 8010430:	2b00      	cmp	r3, #0
 8010432:	d102      	bne.n	801043a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8010434:	f04f 33ff 	mov.w	r3, #4294967295
 8010438:	e04c      	b.n	80104d4 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801043a:	69bb      	ldr	r3, [r7, #24]
 801043c:	685b      	ldr	r3, [r3, #4]
 801043e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8010440:	7ffb      	ldrb	r3, [r7, #31]
 8010442:	2b00      	cmp	r3, #0
 8010444:	d011      	beq.n	801046a <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8010446:	697b      	ldr	r3, [r7, #20]
 8010448:	899b      	ldrh	r3, [r3, #12]
 801044a:	b29b      	uxth	r3, r3
 801044c:	b21b      	sxth	r3, r3
 801044e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8010452:	b21c      	sxth	r4, r3
 8010454:	2011      	movs	r0, #17
 8010456:	f7f8 f957 	bl	8008708 <lwip_htons>
 801045a:	4603      	mov	r3, r0
 801045c:	b21b      	sxth	r3, r3
 801045e:	4323      	orrs	r3, r4
 8010460:	b21b      	sxth	r3, r3
 8010462:	b29a      	uxth	r2, r3
 8010464:	697b      	ldr	r3, [r7, #20]
 8010466:	819a      	strh	r2, [r3, #12]
 8010468:	e010      	b.n	801048c <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801046a:	69bb      	ldr	r3, [r7, #24]
 801046c:	685b      	ldr	r3, [r3, #4]
 801046e:	3314      	adds	r3, #20
 8010470:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8010472:	6a3b      	ldr	r3, [r7, #32]
 8010474:	6858      	ldr	r0, [r3, #4]
 8010476:	6a3b      	ldr	r3, [r7, #32]
 8010478:	685b      	ldr	r3, [r3, #4]
 801047a:	891a      	ldrh	r2, [r3, #8]
 801047c:	6a3b      	ldr	r3, [r7, #32]
 801047e:	891b      	ldrh	r3, [r3, #8]
 8010480:	1ad3      	subs	r3, r2, r3
 8010482:	b29b      	uxth	r3, r3
 8010484:	2201      	movs	r2, #1
 8010486:	6939      	ldr	r1, [r7, #16]
 8010488:	f7f9 ff5e 	bl	800a348 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801048c:	6a3b      	ldr	r3, [r7, #32]
 801048e:	68db      	ldr	r3, [r3, #12]
 8010490:	685b      	ldr	r3, [r3, #4]
 8010492:	4618      	mov	r0, r3
 8010494:	f7f8 f94d 	bl	8008732 <lwip_htonl>
 8010498:	4603      	mov	r3, r0
 801049a:	3301      	adds	r3, #1
 801049c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80104a2:	68fb      	ldr	r3, [r7, #12]
 80104a4:	1ad3      	subs	r3, r2, r3
 80104a6:	2b00      	cmp	r3, #0
 80104a8:	da02      	bge.n	80104b0 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	68fa      	ldr	r2, [r7, #12]
 80104ae:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80104b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80104b4:	2200      	movs	r2, #0
 80104b6:	69b9      	ldr	r1, [r7, #24]
 80104b8:	6878      	ldr	r0, [r7, #4]
 80104ba:	f7ff fded 	bl	8010098 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80104be:	687a      	ldr	r2, [r7, #4]
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	3304      	adds	r3, #4
 80104c4:	69b9      	ldr	r1, [r7, #24]
 80104c6:	6878      	ldr	r0, [r7, #4]
 80104c8:	f7ff fe26 	bl	8010118 <tcp_output_control_segment>
 80104cc:	4603      	mov	r3, r0
 80104ce:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80104d0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80104d4:	4618      	mov	r0, r3
 80104d6:	372c      	adds	r7, #44	; 0x2c
 80104d8:	46bd      	mov	sp, r7
 80104da:	bd90      	pop	{r4, r7, pc}
 80104dc:	080158e8 	.word	0x080158e8
 80104e0:	080160e0 	.word	0x080160e0
 80104e4:	0801593c 	.word	0x0801593c

080104e8 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80104e8:	b580      	push	{r7, lr}
 80104ea:	b082      	sub	sp, #8
 80104ec:	af00      	add	r7, sp, #0
 80104ee:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80104f0:	f7fa f818 	bl	800a524 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80104f4:	4b0a      	ldr	r3, [pc, #40]	; (8010520 <tcpip_tcp_timer+0x38>)
 80104f6:	681b      	ldr	r3, [r3, #0]
 80104f8:	2b00      	cmp	r3, #0
 80104fa:	d103      	bne.n	8010504 <tcpip_tcp_timer+0x1c>
 80104fc:	4b09      	ldr	r3, [pc, #36]	; (8010524 <tcpip_tcp_timer+0x3c>)
 80104fe:	681b      	ldr	r3, [r3, #0]
 8010500:	2b00      	cmp	r3, #0
 8010502:	d005      	beq.n	8010510 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8010504:	2200      	movs	r2, #0
 8010506:	4908      	ldr	r1, [pc, #32]	; (8010528 <tcpip_tcp_timer+0x40>)
 8010508:	20fa      	movs	r0, #250	; 0xfa
 801050a:	f000 f8f3 	bl	80106f4 <sys_timeout>
 801050e:	e003      	b.n	8010518 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8010510:	4b06      	ldr	r3, [pc, #24]	; (801052c <tcpip_tcp_timer+0x44>)
 8010512:	2200      	movs	r2, #0
 8010514:	601a      	str	r2, [r3, #0]
  }
}
 8010516:	bf00      	nop
 8010518:	bf00      	nop
 801051a:	3708      	adds	r7, #8
 801051c:	46bd      	mov	sp, r7
 801051e:	bd80      	pop	{r7, pc}
 8010520:	240037d4 	.word	0x240037d4
 8010524:	240037e4 	.word	0x240037e4
 8010528:	080104e9 	.word	0x080104e9
 801052c:	2400012c 	.word	0x2400012c

08010530 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8010530:	b580      	push	{r7, lr}
 8010532:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8010534:	4b0a      	ldr	r3, [pc, #40]	; (8010560 <tcp_timer_needed+0x30>)
 8010536:	681b      	ldr	r3, [r3, #0]
 8010538:	2b00      	cmp	r3, #0
 801053a:	d10f      	bne.n	801055c <tcp_timer_needed+0x2c>
 801053c:	4b09      	ldr	r3, [pc, #36]	; (8010564 <tcp_timer_needed+0x34>)
 801053e:	681b      	ldr	r3, [r3, #0]
 8010540:	2b00      	cmp	r3, #0
 8010542:	d103      	bne.n	801054c <tcp_timer_needed+0x1c>
 8010544:	4b08      	ldr	r3, [pc, #32]	; (8010568 <tcp_timer_needed+0x38>)
 8010546:	681b      	ldr	r3, [r3, #0]
 8010548:	2b00      	cmp	r3, #0
 801054a:	d007      	beq.n	801055c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801054c:	4b04      	ldr	r3, [pc, #16]	; (8010560 <tcp_timer_needed+0x30>)
 801054e:	2201      	movs	r2, #1
 8010550:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8010552:	2200      	movs	r2, #0
 8010554:	4905      	ldr	r1, [pc, #20]	; (801056c <tcp_timer_needed+0x3c>)
 8010556:	20fa      	movs	r0, #250	; 0xfa
 8010558:	f000 f8cc 	bl	80106f4 <sys_timeout>
  }
}
 801055c:	bf00      	nop
 801055e:	bd80      	pop	{r7, pc}
 8010560:	2400012c 	.word	0x2400012c
 8010564:	240037d4 	.word	0x240037d4
 8010568:	240037e4 	.word	0x240037e4
 801056c:	080104e9 	.word	0x080104e9

08010570 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8010570:	b580      	push	{r7, lr}
 8010572:	b086      	sub	sp, #24
 8010574:	af00      	add	r7, sp, #0
 8010576:	60f8      	str	r0, [r7, #12]
 8010578:	60b9      	str	r1, [r7, #8]
 801057a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801057c:	2006      	movs	r0, #6
 801057e:	f7f8 fe03 	bl	8009188 <memp_malloc>
 8010582:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8010584:	693b      	ldr	r3, [r7, #16]
 8010586:	2b00      	cmp	r3, #0
 8010588:	d109      	bne.n	801059e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801058a:	693b      	ldr	r3, [r7, #16]
 801058c:	2b00      	cmp	r3, #0
 801058e:	d151      	bne.n	8010634 <sys_timeout_abs+0xc4>
 8010590:	4b2a      	ldr	r3, [pc, #168]	; (801063c <sys_timeout_abs+0xcc>)
 8010592:	22be      	movs	r2, #190	; 0xbe
 8010594:	492a      	ldr	r1, [pc, #168]	; (8010640 <sys_timeout_abs+0xd0>)
 8010596:	482b      	ldr	r0, [pc, #172]	; (8010644 <sys_timeout_abs+0xd4>)
 8010598:	f002 fdfc 	bl	8013194 <iprintf>
    return;
 801059c:	e04a      	b.n	8010634 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801059e:	693b      	ldr	r3, [r7, #16]
 80105a0:	2200      	movs	r2, #0
 80105a2:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80105a4:	693b      	ldr	r3, [r7, #16]
 80105a6:	68ba      	ldr	r2, [r7, #8]
 80105a8:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80105aa:	693b      	ldr	r3, [r7, #16]
 80105ac:	687a      	ldr	r2, [r7, #4]
 80105ae:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 80105b0:	693b      	ldr	r3, [r7, #16]
 80105b2:	68fa      	ldr	r2, [r7, #12]
 80105b4:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80105b6:	4b24      	ldr	r3, [pc, #144]	; (8010648 <sys_timeout_abs+0xd8>)
 80105b8:	681b      	ldr	r3, [r3, #0]
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	d103      	bne.n	80105c6 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 80105be:	4a22      	ldr	r2, [pc, #136]	; (8010648 <sys_timeout_abs+0xd8>)
 80105c0:	693b      	ldr	r3, [r7, #16]
 80105c2:	6013      	str	r3, [r2, #0]
    return;
 80105c4:	e037      	b.n	8010636 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80105c6:	693b      	ldr	r3, [r7, #16]
 80105c8:	685a      	ldr	r2, [r3, #4]
 80105ca:	4b1f      	ldr	r3, [pc, #124]	; (8010648 <sys_timeout_abs+0xd8>)
 80105cc:	681b      	ldr	r3, [r3, #0]
 80105ce:	685b      	ldr	r3, [r3, #4]
 80105d0:	1ad3      	subs	r3, r2, r3
 80105d2:	0fdb      	lsrs	r3, r3, #31
 80105d4:	f003 0301 	and.w	r3, r3, #1
 80105d8:	b2db      	uxtb	r3, r3
 80105da:	2b00      	cmp	r3, #0
 80105dc:	d007      	beq.n	80105ee <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 80105de:	4b1a      	ldr	r3, [pc, #104]	; (8010648 <sys_timeout_abs+0xd8>)
 80105e0:	681a      	ldr	r2, [r3, #0]
 80105e2:	693b      	ldr	r3, [r7, #16]
 80105e4:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80105e6:	4a18      	ldr	r2, [pc, #96]	; (8010648 <sys_timeout_abs+0xd8>)
 80105e8:	693b      	ldr	r3, [r7, #16]
 80105ea:	6013      	str	r3, [r2, #0]
 80105ec:	e023      	b.n	8010636 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80105ee:	4b16      	ldr	r3, [pc, #88]	; (8010648 <sys_timeout_abs+0xd8>)
 80105f0:	681b      	ldr	r3, [r3, #0]
 80105f2:	617b      	str	r3, [r7, #20]
 80105f4:	e01a      	b.n	801062c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80105f6:	697b      	ldr	r3, [r7, #20]
 80105f8:	681b      	ldr	r3, [r3, #0]
 80105fa:	2b00      	cmp	r3, #0
 80105fc:	d00b      	beq.n	8010616 <sys_timeout_abs+0xa6>
 80105fe:	693b      	ldr	r3, [r7, #16]
 8010600:	685a      	ldr	r2, [r3, #4]
 8010602:	697b      	ldr	r3, [r7, #20]
 8010604:	681b      	ldr	r3, [r3, #0]
 8010606:	685b      	ldr	r3, [r3, #4]
 8010608:	1ad3      	subs	r3, r2, r3
 801060a:	0fdb      	lsrs	r3, r3, #31
 801060c:	f003 0301 	and.w	r3, r3, #1
 8010610:	b2db      	uxtb	r3, r3
 8010612:	2b00      	cmp	r3, #0
 8010614:	d007      	beq.n	8010626 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8010616:	697b      	ldr	r3, [r7, #20]
 8010618:	681a      	ldr	r2, [r3, #0]
 801061a:	693b      	ldr	r3, [r7, #16]
 801061c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801061e:	697b      	ldr	r3, [r7, #20]
 8010620:	693a      	ldr	r2, [r7, #16]
 8010622:	601a      	str	r2, [r3, #0]
        break;
 8010624:	e007      	b.n	8010636 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8010626:	697b      	ldr	r3, [r7, #20]
 8010628:	681b      	ldr	r3, [r3, #0]
 801062a:	617b      	str	r3, [r7, #20]
 801062c:	697b      	ldr	r3, [r7, #20]
 801062e:	2b00      	cmp	r3, #0
 8010630:	d1e1      	bne.n	80105f6 <sys_timeout_abs+0x86>
 8010632:	e000      	b.n	8010636 <sys_timeout_abs+0xc6>
    return;
 8010634:	bf00      	nop
      }
    }
  }
}
 8010636:	3718      	adds	r7, #24
 8010638:	46bd      	mov	sp, r7
 801063a:	bd80      	pop	{r7, pc}
 801063c:	08016104 	.word	0x08016104
 8010640:	08016138 	.word	0x08016138
 8010644:	08016178 	.word	0x08016178
 8010648:	24000124 	.word	0x24000124

0801064c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801064c:	b580      	push	{r7, lr}
 801064e:	b086      	sub	sp, #24
 8010650:	af00      	add	r7, sp, #0
 8010652:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8010658:	697b      	ldr	r3, [r7, #20]
 801065a:	685b      	ldr	r3, [r3, #4]
 801065c:	4798      	blx	r3

  now = sys_now();
 801065e:	f7f7 ff79 	bl	8008554 <sys_now>
 8010662:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8010664:	697b      	ldr	r3, [r7, #20]
 8010666:	681a      	ldr	r2, [r3, #0]
 8010668:	4b0f      	ldr	r3, [pc, #60]	; (80106a8 <lwip_cyclic_timer+0x5c>)
 801066a:	681b      	ldr	r3, [r3, #0]
 801066c:	4413      	add	r3, r2
 801066e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8010670:	68fa      	ldr	r2, [r7, #12]
 8010672:	693b      	ldr	r3, [r7, #16]
 8010674:	1ad3      	subs	r3, r2, r3
 8010676:	0fdb      	lsrs	r3, r3, #31
 8010678:	f003 0301 	and.w	r3, r3, #1
 801067c:	b2db      	uxtb	r3, r3
 801067e:	2b00      	cmp	r3, #0
 8010680:	d009      	beq.n	8010696 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8010682:	697b      	ldr	r3, [r7, #20]
 8010684:	681a      	ldr	r2, [r3, #0]
 8010686:	693b      	ldr	r3, [r7, #16]
 8010688:	4413      	add	r3, r2
 801068a:	687a      	ldr	r2, [r7, #4]
 801068c:	4907      	ldr	r1, [pc, #28]	; (80106ac <lwip_cyclic_timer+0x60>)
 801068e:	4618      	mov	r0, r3
 8010690:	f7ff ff6e 	bl	8010570 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8010694:	e004      	b.n	80106a0 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8010696:	687a      	ldr	r2, [r7, #4]
 8010698:	4904      	ldr	r1, [pc, #16]	; (80106ac <lwip_cyclic_timer+0x60>)
 801069a:	68f8      	ldr	r0, [r7, #12]
 801069c:	f7ff ff68 	bl	8010570 <sys_timeout_abs>
}
 80106a0:	bf00      	nop
 80106a2:	3718      	adds	r7, #24
 80106a4:	46bd      	mov	sp, r7
 80106a6:	bd80      	pop	{r7, pc}
 80106a8:	24000128 	.word	0x24000128
 80106ac:	0801064d 	.word	0x0801064d

080106b0 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80106b0:	b580      	push	{r7, lr}
 80106b2:	b082      	sub	sp, #8
 80106b4:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80106b6:	2301      	movs	r3, #1
 80106b8:	607b      	str	r3, [r7, #4]
 80106ba:	e00e      	b.n	80106da <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 80106bc:	4a0b      	ldr	r2, [pc, #44]	; (80106ec <sys_timeouts_init+0x3c>)
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	00db      	lsls	r3, r3, #3
 80106c8:	4a08      	ldr	r2, [pc, #32]	; (80106ec <sys_timeouts_init+0x3c>)
 80106ca:	4413      	add	r3, r2
 80106cc:	461a      	mov	r2, r3
 80106ce:	4908      	ldr	r1, [pc, #32]	; (80106f0 <sys_timeouts_init+0x40>)
 80106d0:	f000 f810 	bl	80106f4 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	3301      	adds	r3, #1
 80106d8:	607b      	str	r3, [r7, #4]
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	2b02      	cmp	r3, #2
 80106de:	d9ed      	bls.n	80106bc <sys_timeouts_init+0xc>
  }
}
 80106e0:	bf00      	nop
 80106e2:	bf00      	nop
 80106e4:	3708      	adds	r7, #8
 80106e6:	46bd      	mov	sp, r7
 80106e8:	bd80      	pop	{r7, pc}
 80106ea:	bf00      	nop
 80106ec:	08016d10 	.word	0x08016d10
 80106f0:	0801064d 	.word	0x0801064d

080106f4 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80106f4:	b580      	push	{r7, lr}
 80106f6:	b086      	sub	sp, #24
 80106f8:	af00      	add	r7, sp, #0
 80106fa:	60f8      	str	r0, [r7, #12]
 80106fc:	60b9      	str	r1, [r7, #8]
 80106fe:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8010700:	68fb      	ldr	r3, [r7, #12]
 8010702:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010706:	d306      	bcc.n	8010716 <sys_timeout+0x22>
 8010708:	4b0a      	ldr	r3, [pc, #40]	; (8010734 <sys_timeout+0x40>)
 801070a:	f240 1229 	movw	r2, #297	; 0x129
 801070e:	490a      	ldr	r1, [pc, #40]	; (8010738 <sys_timeout+0x44>)
 8010710:	480a      	ldr	r0, [pc, #40]	; (801073c <sys_timeout+0x48>)
 8010712:	f002 fd3f 	bl	8013194 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8010716:	f7f7 ff1d 	bl	8008554 <sys_now>
 801071a:	4602      	mov	r2, r0
 801071c:	68fb      	ldr	r3, [r7, #12]
 801071e:	4413      	add	r3, r2
 8010720:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8010722:	687a      	ldr	r2, [r7, #4]
 8010724:	68b9      	ldr	r1, [r7, #8]
 8010726:	6978      	ldr	r0, [r7, #20]
 8010728:	f7ff ff22 	bl	8010570 <sys_timeout_abs>
#endif
}
 801072c:	bf00      	nop
 801072e:	3718      	adds	r7, #24
 8010730:	46bd      	mov	sp, r7
 8010732:	bd80      	pop	{r7, pc}
 8010734:	08016104 	.word	0x08016104
 8010738:	080161a0 	.word	0x080161a0
 801073c:	08016178 	.word	0x08016178

08010740 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8010740:	b580      	push	{r7, lr}
 8010742:	b084      	sub	sp, #16
 8010744:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8010746:	f7f7 ff05 	bl	8008554 <sys_now>
 801074a:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 801074c:	4b1a      	ldr	r3, [pc, #104]	; (80107b8 <sys_check_timeouts+0x78>)
 801074e:	781b      	ldrb	r3, [r3, #0]
 8010750:	b2db      	uxtb	r3, r3
 8010752:	2b00      	cmp	r3, #0
 8010754:	d001      	beq.n	801075a <sys_check_timeouts+0x1a>
 8010756:	f7f9 f8c3 	bl	80098e0 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 801075a:	4b18      	ldr	r3, [pc, #96]	; (80107bc <sys_check_timeouts+0x7c>)
 801075c:	681b      	ldr	r3, [r3, #0]
 801075e:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8010760:	68bb      	ldr	r3, [r7, #8]
 8010762:	2b00      	cmp	r3, #0
 8010764:	d022      	beq.n	80107ac <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8010766:	68bb      	ldr	r3, [r7, #8]
 8010768:	685b      	ldr	r3, [r3, #4]
 801076a:	68fa      	ldr	r2, [r7, #12]
 801076c:	1ad3      	subs	r3, r2, r3
 801076e:	0fdb      	lsrs	r3, r3, #31
 8010770:	f003 0301 	and.w	r3, r3, #1
 8010774:	b2db      	uxtb	r3, r3
 8010776:	2b00      	cmp	r3, #0
 8010778:	d11a      	bne.n	80107b0 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801077a:	68bb      	ldr	r3, [r7, #8]
 801077c:	681b      	ldr	r3, [r3, #0]
 801077e:	4a0f      	ldr	r2, [pc, #60]	; (80107bc <sys_check_timeouts+0x7c>)
 8010780:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8010782:	68bb      	ldr	r3, [r7, #8]
 8010784:	689b      	ldr	r3, [r3, #8]
 8010786:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8010788:	68bb      	ldr	r3, [r7, #8]
 801078a:	68db      	ldr	r3, [r3, #12]
 801078c:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801078e:	68bb      	ldr	r3, [r7, #8]
 8010790:	685b      	ldr	r3, [r3, #4]
 8010792:	4a0b      	ldr	r2, [pc, #44]	; (80107c0 <sys_check_timeouts+0x80>)
 8010794:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8010796:	68b9      	ldr	r1, [r7, #8]
 8010798:	2006      	movs	r0, #6
 801079a:	f7f8 fd65 	bl	8009268 <memp_free>
    if (handler != NULL) {
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	2b00      	cmp	r3, #0
 80107a2:	d0d3      	beq.n	801074c <sys_check_timeouts+0xc>
      handler(arg);
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	6838      	ldr	r0, [r7, #0]
 80107a8:	4798      	blx	r3
  do {
 80107aa:	e7cf      	b.n	801074c <sys_check_timeouts+0xc>
      return;
 80107ac:	bf00      	nop
 80107ae:	e000      	b.n	80107b2 <sys_check_timeouts+0x72>
      return;
 80107b0:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 80107b2:	3710      	adds	r7, #16
 80107b4:	46bd      	mov	sp, r7
 80107b6:	bd80      	pop	{r7, pc}
 80107b8:	240037cc 	.word	0x240037cc
 80107bc:	24000124 	.word	0x24000124
 80107c0:	24000128 	.word	0x24000128

080107c4 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80107c4:	b580      	push	{r7, lr}
 80107c6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80107c8:	f002 fcfc 	bl	80131c4 <rand>
 80107cc:	4603      	mov	r3, r0
 80107ce:	b29b      	uxth	r3, r3
 80107d0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80107d4:	b29b      	uxth	r3, r3
 80107d6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80107da:	b29a      	uxth	r2, r3
 80107dc:	4b01      	ldr	r3, [pc, #4]	; (80107e4 <udp_init+0x20>)
 80107de:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80107e0:	bf00      	nop
 80107e2:	bd80      	pop	{r7, pc}
 80107e4:	2400002c 	.word	0x2400002c

080107e8 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80107e8:	b580      	push	{r7, lr}
 80107ea:	b084      	sub	sp, #16
 80107ec:	af00      	add	r7, sp, #0
 80107ee:	60f8      	str	r0, [r7, #12]
 80107f0:	60b9      	str	r1, [r7, #8]
 80107f2:	4613      	mov	r3, r2
 80107f4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 80107f6:	68fb      	ldr	r3, [r7, #12]
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	d105      	bne.n	8010808 <udp_input_local_match+0x20>
 80107fc:	4b27      	ldr	r3, [pc, #156]	; (801089c <udp_input_local_match+0xb4>)
 80107fe:	2287      	movs	r2, #135	; 0x87
 8010800:	4927      	ldr	r1, [pc, #156]	; (80108a0 <udp_input_local_match+0xb8>)
 8010802:	4828      	ldr	r0, [pc, #160]	; (80108a4 <udp_input_local_match+0xbc>)
 8010804:	f002 fcc6 	bl	8013194 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8010808:	68bb      	ldr	r3, [r7, #8]
 801080a:	2b00      	cmp	r3, #0
 801080c:	d105      	bne.n	801081a <udp_input_local_match+0x32>
 801080e:	4b23      	ldr	r3, [pc, #140]	; (801089c <udp_input_local_match+0xb4>)
 8010810:	2288      	movs	r2, #136	; 0x88
 8010812:	4925      	ldr	r1, [pc, #148]	; (80108a8 <udp_input_local_match+0xc0>)
 8010814:	4823      	ldr	r0, [pc, #140]	; (80108a4 <udp_input_local_match+0xbc>)
 8010816:	f002 fcbd 	bl	8013194 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801081a:	68fb      	ldr	r3, [r7, #12]
 801081c:	7a1b      	ldrb	r3, [r3, #8]
 801081e:	2b00      	cmp	r3, #0
 8010820:	d00b      	beq.n	801083a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010822:	68fb      	ldr	r3, [r7, #12]
 8010824:	7a1a      	ldrb	r2, [r3, #8]
 8010826:	4b21      	ldr	r3, [pc, #132]	; (80108ac <udp_input_local_match+0xc4>)
 8010828:	685b      	ldr	r3, [r3, #4]
 801082a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801082e:	3301      	adds	r3, #1
 8010830:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010832:	429a      	cmp	r2, r3
 8010834:	d001      	beq.n	801083a <udp_input_local_match+0x52>
    return 0;
 8010836:	2300      	movs	r3, #0
 8010838:	e02b      	b.n	8010892 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801083a:	79fb      	ldrb	r3, [r7, #7]
 801083c:	2b00      	cmp	r3, #0
 801083e:	d018      	beq.n	8010872 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8010840:	68fb      	ldr	r3, [r7, #12]
 8010842:	2b00      	cmp	r3, #0
 8010844:	d013      	beq.n	801086e <udp_input_local_match+0x86>
 8010846:	68fb      	ldr	r3, [r7, #12]
 8010848:	681b      	ldr	r3, [r3, #0]
 801084a:	2b00      	cmp	r3, #0
 801084c:	d00f      	beq.n	801086e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801084e:	4b17      	ldr	r3, [pc, #92]	; (80108ac <udp_input_local_match+0xc4>)
 8010850:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8010852:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010856:	d00a      	beq.n	801086e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8010858:	68fb      	ldr	r3, [r7, #12]
 801085a:	681a      	ldr	r2, [r3, #0]
 801085c:	4b13      	ldr	r3, [pc, #76]	; (80108ac <udp_input_local_match+0xc4>)
 801085e:	695b      	ldr	r3, [r3, #20]
 8010860:	405a      	eors	r2, r3
 8010862:	68bb      	ldr	r3, [r7, #8]
 8010864:	3308      	adds	r3, #8
 8010866:	681b      	ldr	r3, [r3, #0]
 8010868:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801086a:	2b00      	cmp	r3, #0
 801086c:	d110      	bne.n	8010890 <udp_input_local_match+0xa8>
          return 1;
 801086e:	2301      	movs	r3, #1
 8010870:	e00f      	b.n	8010892 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8010872:	68fb      	ldr	r3, [r7, #12]
 8010874:	2b00      	cmp	r3, #0
 8010876:	d009      	beq.n	801088c <udp_input_local_match+0xa4>
 8010878:	68fb      	ldr	r3, [r7, #12]
 801087a:	681b      	ldr	r3, [r3, #0]
 801087c:	2b00      	cmp	r3, #0
 801087e:	d005      	beq.n	801088c <udp_input_local_match+0xa4>
 8010880:	68fb      	ldr	r3, [r7, #12]
 8010882:	681a      	ldr	r2, [r3, #0]
 8010884:	4b09      	ldr	r3, [pc, #36]	; (80108ac <udp_input_local_match+0xc4>)
 8010886:	695b      	ldr	r3, [r3, #20]
 8010888:	429a      	cmp	r2, r3
 801088a:	d101      	bne.n	8010890 <udp_input_local_match+0xa8>
        return 1;
 801088c:	2301      	movs	r3, #1
 801088e:	e000      	b.n	8010892 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8010890:	2300      	movs	r3, #0
}
 8010892:	4618      	mov	r0, r3
 8010894:	3710      	adds	r7, #16
 8010896:	46bd      	mov	sp, r7
 8010898:	bd80      	pop	{r7, pc}
 801089a:	bf00      	nop
 801089c:	080161ec 	.word	0x080161ec
 80108a0:	0801621c 	.word	0x0801621c
 80108a4:	08016240 	.word	0x08016240
 80108a8:	08016268 	.word	0x08016268
 80108ac:	240008e4 	.word	0x240008e4

080108b0 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80108b0:	b590      	push	{r4, r7, lr}
 80108b2:	b08d      	sub	sp, #52	; 0x34
 80108b4:	af02      	add	r7, sp, #8
 80108b6:	6078      	str	r0, [r7, #4]
 80108b8:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80108ba:	2300      	movs	r3, #0
 80108bc:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	2b00      	cmp	r3, #0
 80108c2:	d105      	bne.n	80108d0 <udp_input+0x20>
 80108c4:	4b7c      	ldr	r3, [pc, #496]	; (8010ab8 <udp_input+0x208>)
 80108c6:	22cf      	movs	r2, #207	; 0xcf
 80108c8:	497c      	ldr	r1, [pc, #496]	; (8010abc <udp_input+0x20c>)
 80108ca:	487d      	ldr	r0, [pc, #500]	; (8010ac0 <udp_input+0x210>)
 80108cc:	f002 fc62 	bl	8013194 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80108d0:	683b      	ldr	r3, [r7, #0]
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	d105      	bne.n	80108e2 <udp_input+0x32>
 80108d6:	4b78      	ldr	r3, [pc, #480]	; (8010ab8 <udp_input+0x208>)
 80108d8:	22d0      	movs	r2, #208	; 0xd0
 80108da:	497a      	ldr	r1, [pc, #488]	; (8010ac4 <udp_input+0x214>)
 80108dc:	4878      	ldr	r0, [pc, #480]	; (8010ac0 <udp_input+0x210>)
 80108de:	f002 fc59 	bl	8013194 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	895b      	ldrh	r3, [r3, #10]
 80108e6:	2b07      	cmp	r3, #7
 80108e8:	d803      	bhi.n	80108f2 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80108ea:	6878      	ldr	r0, [r7, #4]
 80108ec:	f7f9 fb32 	bl	8009f54 <pbuf_free>
    goto end;
 80108f0:	e0de      	b.n	8010ab0 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	685b      	ldr	r3, [r3, #4]
 80108f6:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80108f8:	4b73      	ldr	r3, [pc, #460]	; (8010ac8 <udp_input+0x218>)
 80108fa:	695b      	ldr	r3, [r3, #20]
 80108fc:	4a72      	ldr	r2, [pc, #456]	; (8010ac8 <udp_input+0x218>)
 80108fe:	6812      	ldr	r2, [r2, #0]
 8010900:	4611      	mov	r1, r2
 8010902:	4618      	mov	r0, r3
 8010904:	f001 fcae 	bl	8012264 <ip4_addr_isbroadcast_u32>
 8010908:	4603      	mov	r3, r0
 801090a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801090c:	697b      	ldr	r3, [r7, #20]
 801090e:	881b      	ldrh	r3, [r3, #0]
 8010910:	b29b      	uxth	r3, r3
 8010912:	4618      	mov	r0, r3
 8010914:	f7f7 fef8 	bl	8008708 <lwip_htons>
 8010918:	4603      	mov	r3, r0
 801091a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801091c:	697b      	ldr	r3, [r7, #20]
 801091e:	885b      	ldrh	r3, [r3, #2]
 8010920:	b29b      	uxth	r3, r3
 8010922:	4618      	mov	r0, r3
 8010924:	f7f7 fef0 	bl	8008708 <lwip_htons>
 8010928:	4603      	mov	r3, r0
 801092a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801092c:	2300      	movs	r3, #0
 801092e:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8010930:	2300      	movs	r3, #0
 8010932:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8010934:	2300      	movs	r3, #0
 8010936:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8010938:	4b64      	ldr	r3, [pc, #400]	; (8010acc <udp_input+0x21c>)
 801093a:	681b      	ldr	r3, [r3, #0]
 801093c:	627b      	str	r3, [r7, #36]	; 0x24
 801093e:	e054      	b.n	80109ea <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8010940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010942:	8a5b      	ldrh	r3, [r3, #18]
 8010944:	89fa      	ldrh	r2, [r7, #14]
 8010946:	429a      	cmp	r2, r3
 8010948:	d14a      	bne.n	80109e0 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801094a:	7cfb      	ldrb	r3, [r7, #19]
 801094c:	461a      	mov	r2, r3
 801094e:	6839      	ldr	r1, [r7, #0]
 8010950:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010952:	f7ff ff49 	bl	80107e8 <udp_input_local_match>
 8010956:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8010958:	2b00      	cmp	r3, #0
 801095a:	d041      	beq.n	80109e0 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801095c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801095e:	7c1b      	ldrb	r3, [r3, #16]
 8010960:	f003 0304 	and.w	r3, r3, #4
 8010964:	2b00      	cmp	r3, #0
 8010966:	d11d      	bne.n	80109a4 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8010968:	69fb      	ldr	r3, [r7, #28]
 801096a:	2b00      	cmp	r3, #0
 801096c:	d102      	bne.n	8010974 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801096e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010970:	61fb      	str	r3, [r7, #28]
 8010972:	e017      	b.n	80109a4 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8010974:	7cfb      	ldrb	r3, [r7, #19]
 8010976:	2b00      	cmp	r3, #0
 8010978:	d014      	beq.n	80109a4 <udp_input+0xf4>
 801097a:	4b53      	ldr	r3, [pc, #332]	; (8010ac8 <udp_input+0x218>)
 801097c:	695b      	ldr	r3, [r3, #20]
 801097e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010982:	d10f      	bne.n	80109a4 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8010984:	69fb      	ldr	r3, [r7, #28]
 8010986:	681a      	ldr	r2, [r3, #0]
 8010988:	683b      	ldr	r3, [r7, #0]
 801098a:	3304      	adds	r3, #4
 801098c:	681b      	ldr	r3, [r3, #0]
 801098e:	429a      	cmp	r2, r3
 8010990:	d008      	beq.n	80109a4 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8010992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010994:	681a      	ldr	r2, [r3, #0]
 8010996:	683b      	ldr	r3, [r7, #0]
 8010998:	3304      	adds	r3, #4
 801099a:	681b      	ldr	r3, [r3, #0]
 801099c:	429a      	cmp	r2, r3
 801099e:	d101      	bne.n	80109a4 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80109a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109a2:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80109a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109a6:	8a9b      	ldrh	r3, [r3, #20]
 80109a8:	8a3a      	ldrh	r2, [r7, #16]
 80109aa:	429a      	cmp	r2, r3
 80109ac:	d118      	bne.n	80109e0 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80109ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109b0:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	d005      	beq.n	80109c2 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80109b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109b8:	685a      	ldr	r2, [r3, #4]
 80109ba:	4b43      	ldr	r3, [pc, #268]	; (8010ac8 <udp_input+0x218>)
 80109bc:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80109be:	429a      	cmp	r2, r3
 80109c0:	d10e      	bne.n	80109e0 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80109c2:	6a3b      	ldr	r3, [r7, #32]
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	d014      	beq.n	80109f2 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80109c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109ca:	68da      	ldr	r2, [r3, #12]
 80109cc:	6a3b      	ldr	r3, [r7, #32]
 80109ce:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80109d0:	4b3e      	ldr	r3, [pc, #248]	; (8010acc <udp_input+0x21c>)
 80109d2:	681a      	ldr	r2, [r3, #0]
 80109d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109d6:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80109d8:	4a3c      	ldr	r2, [pc, #240]	; (8010acc <udp_input+0x21c>)
 80109da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109dc:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80109de:	e008      	b.n	80109f2 <udp_input+0x142>
      }
    }

    prev = pcb;
 80109e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109e2:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80109e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109e6:	68db      	ldr	r3, [r3, #12]
 80109e8:	627b      	str	r3, [r7, #36]	; 0x24
 80109ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	d1a7      	bne.n	8010940 <udp_input+0x90>
 80109f0:	e000      	b.n	80109f4 <udp_input+0x144>
        break;
 80109f2:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80109f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109f6:	2b00      	cmp	r3, #0
 80109f8:	d101      	bne.n	80109fe <udp_input+0x14e>
    pcb = uncon_pcb;
 80109fa:	69fb      	ldr	r3, [r7, #28]
 80109fc:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80109fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a00:	2b00      	cmp	r3, #0
 8010a02:	d002      	beq.n	8010a0a <udp_input+0x15a>
    for_us = 1;
 8010a04:	2301      	movs	r3, #1
 8010a06:	76fb      	strb	r3, [r7, #27]
 8010a08:	e00a      	b.n	8010a20 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8010a0a:	683b      	ldr	r3, [r7, #0]
 8010a0c:	3304      	adds	r3, #4
 8010a0e:	681a      	ldr	r2, [r3, #0]
 8010a10:	4b2d      	ldr	r3, [pc, #180]	; (8010ac8 <udp_input+0x218>)
 8010a12:	695b      	ldr	r3, [r3, #20]
 8010a14:	429a      	cmp	r2, r3
 8010a16:	bf0c      	ite	eq
 8010a18:	2301      	moveq	r3, #1
 8010a1a:	2300      	movne	r3, #0
 8010a1c:	b2db      	uxtb	r3, r3
 8010a1e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8010a20:	7efb      	ldrb	r3, [r7, #27]
 8010a22:	2b00      	cmp	r3, #0
 8010a24:	d041      	beq.n	8010aaa <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8010a26:	2108      	movs	r1, #8
 8010a28:	6878      	ldr	r0, [r7, #4]
 8010a2a:	f7f9 fa0d 	bl	8009e48 <pbuf_remove_header>
 8010a2e:	4603      	mov	r3, r0
 8010a30:	2b00      	cmp	r3, #0
 8010a32:	d00a      	beq.n	8010a4a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8010a34:	4b20      	ldr	r3, [pc, #128]	; (8010ab8 <udp_input+0x208>)
 8010a36:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8010a3a:	4925      	ldr	r1, [pc, #148]	; (8010ad0 <udp_input+0x220>)
 8010a3c:	4820      	ldr	r0, [pc, #128]	; (8010ac0 <udp_input+0x210>)
 8010a3e:	f002 fba9 	bl	8013194 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8010a42:	6878      	ldr	r0, [r7, #4]
 8010a44:	f7f9 fa86 	bl	8009f54 <pbuf_free>
      goto end;
 8010a48:	e032      	b.n	8010ab0 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8010a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	d012      	beq.n	8010a76 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8010a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a52:	699b      	ldr	r3, [r3, #24]
 8010a54:	2b00      	cmp	r3, #0
 8010a56:	d00a      	beq.n	8010a6e <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8010a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a5a:	699c      	ldr	r4, [r3, #24]
 8010a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a5e:	69d8      	ldr	r0, [r3, #28]
 8010a60:	8a3b      	ldrh	r3, [r7, #16]
 8010a62:	9300      	str	r3, [sp, #0]
 8010a64:	4b1b      	ldr	r3, [pc, #108]	; (8010ad4 <udp_input+0x224>)
 8010a66:	687a      	ldr	r2, [r7, #4]
 8010a68:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010a6a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8010a6c:	e021      	b.n	8010ab2 <udp_input+0x202>
        pbuf_free(p);
 8010a6e:	6878      	ldr	r0, [r7, #4]
 8010a70:	f7f9 fa70 	bl	8009f54 <pbuf_free>
        goto end;
 8010a74:	e01c      	b.n	8010ab0 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8010a76:	7cfb      	ldrb	r3, [r7, #19]
 8010a78:	2b00      	cmp	r3, #0
 8010a7a:	d112      	bne.n	8010aa2 <udp_input+0x1f2>
 8010a7c:	4b12      	ldr	r3, [pc, #72]	; (8010ac8 <udp_input+0x218>)
 8010a7e:	695b      	ldr	r3, [r3, #20]
 8010a80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010a84:	2be0      	cmp	r3, #224	; 0xe0
 8010a86:	d00c      	beq.n	8010aa2 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8010a88:	4b0f      	ldr	r3, [pc, #60]	; (8010ac8 <udp_input+0x218>)
 8010a8a:	899b      	ldrh	r3, [r3, #12]
 8010a8c:	3308      	adds	r3, #8
 8010a8e:	b29b      	uxth	r3, r3
 8010a90:	b21b      	sxth	r3, r3
 8010a92:	4619      	mov	r1, r3
 8010a94:	6878      	ldr	r0, [r7, #4]
 8010a96:	f7f9 fa4a 	bl	8009f2e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8010a9a:	2103      	movs	r1, #3
 8010a9c:	6878      	ldr	r0, [r7, #4]
 8010a9e:	f001 f8b7 	bl	8011c10 <icmp_dest_unreach>
      pbuf_free(p);
 8010aa2:	6878      	ldr	r0, [r7, #4]
 8010aa4:	f7f9 fa56 	bl	8009f54 <pbuf_free>
  return;
 8010aa8:	e003      	b.n	8010ab2 <udp_input+0x202>
    pbuf_free(p);
 8010aaa:	6878      	ldr	r0, [r7, #4]
 8010aac:	f7f9 fa52 	bl	8009f54 <pbuf_free>
  return;
 8010ab0:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8010ab2:	372c      	adds	r7, #44	; 0x2c
 8010ab4:	46bd      	mov	sp, r7
 8010ab6:	bd90      	pop	{r4, r7, pc}
 8010ab8:	080161ec 	.word	0x080161ec
 8010abc:	08016290 	.word	0x08016290
 8010ac0:	08016240 	.word	0x08016240
 8010ac4:	080162a8 	.word	0x080162a8
 8010ac8:	240008e4 	.word	0x240008e4
 8010acc:	240037ec 	.word	0x240037ec
 8010ad0:	080162c4 	.word	0x080162c4
 8010ad4:	240008f4 	.word	0x240008f4

08010ad8 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8010ad8:	b480      	push	{r7}
 8010ada:	b085      	sub	sp, #20
 8010adc:	af00      	add	r7, sp, #0
 8010ade:	6078      	str	r0, [r7, #4]
 8010ae0:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	d01e      	beq.n	8010b26 <udp_netif_ip_addr_changed+0x4e>
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	681b      	ldr	r3, [r3, #0]
 8010aec:	2b00      	cmp	r3, #0
 8010aee:	d01a      	beq.n	8010b26 <udp_netif_ip_addr_changed+0x4e>
 8010af0:	683b      	ldr	r3, [r7, #0]
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	d017      	beq.n	8010b26 <udp_netif_ip_addr_changed+0x4e>
 8010af6:	683b      	ldr	r3, [r7, #0]
 8010af8:	681b      	ldr	r3, [r3, #0]
 8010afa:	2b00      	cmp	r3, #0
 8010afc:	d013      	beq.n	8010b26 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8010afe:	4b0d      	ldr	r3, [pc, #52]	; (8010b34 <udp_netif_ip_addr_changed+0x5c>)
 8010b00:	681b      	ldr	r3, [r3, #0]
 8010b02:	60fb      	str	r3, [r7, #12]
 8010b04:	e00c      	b.n	8010b20 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8010b06:	68fb      	ldr	r3, [r7, #12]
 8010b08:	681a      	ldr	r2, [r3, #0]
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	681b      	ldr	r3, [r3, #0]
 8010b0e:	429a      	cmp	r2, r3
 8010b10:	d103      	bne.n	8010b1a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8010b12:	683b      	ldr	r3, [r7, #0]
 8010b14:	681a      	ldr	r2, [r3, #0]
 8010b16:	68fb      	ldr	r3, [r7, #12]
 8010b18:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8010b1a:	68fb      	ldr	r3, [r7, #12]
 8010b1c:	68db      	ldr	r3, [r3, #12]
 8010b1e:	60fb      	str	r3, [r7, #12]
 8010b20:	68fb      	ldr	r3, [r7, #12]
 8010b22:	2b00      	cmp	r3, #0
 8010b24:	d1ef      	bne.n	8010b06 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8010b26:	bf00      	nop
 8010b28:	3714      	adds	r7, #20
 8010b2a:	46bd      	mov	sp, r7
 8010b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b30:	4770      	bx	lr
 8010b32:	bf00      	nop
 8010b34:	240037ec 	.word	0x240037ec

08010b38 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8010b38:	b580      	push	{r7, lr}
 8010b3a:	b082      	sub	sp, #8
 8010b3c:	af00      	add	r7, sp, #0
 8010b3e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8010b40:	4915      	ldr	r1, [pc, #84]	; (8010b98 <etharp_free_entry+0x60>)
 8010b42:	687a      	ldr	r2, [r7, #4]
 8010b44:	4613      	mov	r3, r2
 8010b46:	005b      	lsls	r3, r3, #1
 8010b48:	4413      	add	r3, r2
 8010b4a:	00db      	lsls	r3, r3, #3
 8010b4c:	440b      	add	r3, r1
 8010b4e:	681b      	ldr	r3, [r3, #0]
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	d013      	beq.n	8010b7c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8010b54:	4910      	ldr	r1, [pc, #64]	; (8010b98 <etharp_free_entry+0x60>)
 8010b56:	687a      	ldr	r2, [r7, #4]
 8010b58:	4613      	mov	r3, r2
 8010b5a:	005b      	lsls	r3, r3, #1
 8010b5c:	4413      	add	r3, r2
 8010b5e:	00db      	lsls	r3, r3, #3
 8010b60:	440b      	add	r3, r1
 8010b62:	681b      	ldr	r3, [r3, #0]
 8010b64:	4618      	mov	r0, r3
 8010b66:	f7f9 f9f5 	bl	8009f54 <pbuf_free>
    arp_table[i].q = NULL;
 8010b6a:	490b      	ldr	r1, [pc, #44]	; (8010b98 <etharp_free_entry+0x60>)
 8010b6c:	687a      	ldr	r2, [r7, #4]
 8010b6e:	4613      	mov	r3, r2
 8010b70:	005b      	lsls	r3, r3, #1
 8010b72:	4413      	add	r3, r2
 8010b74:	00db      	lsls	r3, r3, #3
 8010b76:	440b      	add	r3, r1
 8010b78:	2200      	movs	r2, #0
 8010b7a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8010b7c:	4906      	ldr	r1, [pc, #24]	; (8010b98 <etharp_free_entry+0x60>)
 8010b7e:	687a      	ldr	r2, [r7, #4]
 8010b80:	4613      	mov	r3, r2
 8010b82:	005b      	lsls	r3, r3, #1
 8010b84:	4413      	add	r3, r2
 8010b86:	00db      	lsls	r3, r3, #3
 8010b88:	440b      	add	r3, r1
 8010b8a:	3314      	adds	r3, #20
 8010b8c:	2200      	movs	r2, #0
 8010b8e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8010b90:	bf00      	nop
 8010b92:	3708      	adds	r7, #8
 8010b94:	46bd      	mov	sp, r7
 8010b96:	bd80      	pop	{r7, pc}
 8010b98:	24000130 	.word	0x24000130

08010b9c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8010b9c:	b580      	push	{r7, lr}
 8010b9e:	b082      	sub	sp, #8
 8010ba0:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010ba2:	2300      	movs	r3, #0
 8010ba4:	607b      	str	r3, [r7, #4]
 8010ba6:	e096      	b.n	8010cd6 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8010ba8:	494f      	ldr	r1, [pc, #316]	; (8010ce8 <etharp_tmr+0x14c>)
 8010baa:	687a      	ldr	r2, [r7, #4]
 8010bac:	4613      	mov	r3, r2
 8010bae:	005b      	lsls	r3, r3, #1
 8010bb0:	4413      	add	r3, r2
 8010bb2:	00db      	lsls	r3, r3, #3
 8010bb4:	440b      	add	r3, r1
 8010bb6:	3314      	adds	r3, #20
 8010bb8:	781b      	ldrb	r3, [r3, #0]
 8010bba:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8010bbc:	78fb      	ldrb	r3, [r7, #3]
 8010bbe:	2b00      	cmp	r3, #0
 8010bc0:	f000 8086 	beq.w	8010cd0 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8010bc4:	4948      	ldr	r1, [pc, #288]	; (8010ce8 <etharp_tmr+0x14c>)
 8010bc6:	687a      	ldr	r2, [r7, #4]
 8010bc8:	4613      	mov	r3, r2
 8010bca:	005b      	lsls	r3, r3, #1
 8010bcc:	4413      	add	r3, r2
 8010bce:	00db      	lsls	r3, r3, #3
 8010bd0:	440b      	add	r3, r1
 8010bd2:	3312      	adds	r3, #18
 8010bd4:	881b      	ldrh	r3, [r3, #0]
 8010bd6:	3301      	adds	r3, #1
 8010bd8:	b298      	uxth	r0, r3
 8010bda:	4943      	ldr	r1, [pc, #268]	; (8010ce8 <etharp_tmr+0x14c>)
 8010bdc:	687a      	ldr	r2, [r7, #4]
 8010bde:	4613      	mov	r3, r2
 8010be0:	005b      	lsls	r3, r3, #1
 8010be2:	4413      	add	r3, r2
 8010be4:	00db      	lsls	r3, r3, #3
 8010be6:	440b      	add	r3, r1
 8010be8:	3312      	adds	r3, #18
 8010bea:	4602      	mov	r2, r0
 8010bec:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8010bee:	493e      	ldr	r1, [pc, #248]	; (8010ce8 <etharp_tmr+0x14c>)
 8010bf0:	687a      	ldr	r2, [r7, #4]
 8010bf2:	4613      	mov	r3, r2
 8010bf4:	005b      	lsls	r3, r3, #1
 8010bf6:	4413      	add	r3, r2
 8010bf8:	00db      	lsls	r3, r3, #3
 8010bfa:	440b      	add	r3, r1
 8010bfc:	3312      	adds	r3, #18
 8010bfe:	881b      	ldrh	r3, [r3, #0]
 8010c00:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8010c04:	d215      	bcs.n	8010c32 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8010c06:	4938      	ldr	r1, [pc, #224]	; (8010ce8 <etharp_tmr+0x14c>)
 8010c08:	687a      	ldr	r2, [r7, #4]
 8010c0a:	4613      	mov	r3, r2
 8010c0c:	005b      	lsls	r3, r3, #1
 8010c0e:	4413      	add	r3, r2
 8010c10:	00db      	lsls	r3, r3, #3
 8010c12:	440b      	add	r3, r1
 8010c14:	3314      	adds	r3, #20
 8010c16:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8010c18:	2b01      	cmp	r3, #1
 8010c1a:	d10e      	bne.n	8010c3a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8010c1c:	4932      	ldr	r1, [pc, #200]	; (8010ce8 <etharp_tmr+0x14c>)
 8010c1e:	687a      	ldr	r2, [r7, #4]
 8010c20:	4613      	mov	r3, r2
 8010c22:	005b      	lsls	r3, r3, #1
 8010c24:	4413      	add	r3, r2
 8010c26:	00db      	lsls	r3, r3, #3
 8010c28:	440b      	add	r3, r1
 8010c2a:	3312      	adds	r3, #18
 8010c2c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8010c2e:	2b04      	cmp	r3, #4
 8010c30:	d903      	bls.n	8010c3a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8010c32:	6878      	ldr	r0, [r7, #4]
 8010c34:	f7ff ff80 	bl	8010b38 <etharp_free_entry>
 8010c38:	e04a      	b.n	8010cd0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8010c3a:	492b      	ldr	r1, [pc, #172]	; (8010ce8 <etharp_tmr+0x14c>)
 8010c3c:	687a      	ldr	r2, [r7, #4]
 8010c3e:	4613      	mov	r3, r2
 8010c40:	005b      	lsls	r3, r3, #1
 8010c42:	4413      	add	r3, r2
 8010c44:	00db      	lsls	r3, r3, #3
 8010c46:	440b      	add	r3, r1
 8010c48:	3314      	adds	r3, #20
 8010c4a:	781b      	ldrb	r3, [r3, #0]
 8010c4c:	2b03      	cmp	r3, #3
 8010c4e:	d10a      	bne.n	8010c66 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8010c50:	4925      	ldr	r1, [pc, #148]	; (8010ce8 <etharp_tmr+0x14c>)
 8010c52:	687a      	ldr	r2, [r7, #4]
 8010c54:	4613      	mov	r3, r2
 8010c56:	005b      	lsls	r3, r3, #1
 8010c58:	4413      	add	r3, r2
 8010c5a:	00db      	lsls	r3, r3, #3
 8010c5c:	440b      	add	r3, r1
 8010c5e:	3314      	adds	r3, #20
 8010c60:	2204      	movs	r2, #4
 8010c62:	701a      	strb	r2, [r3, #0]
 8010c64:	e034      	b.n	8010cd0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8010c66:	4920      	ldr	r1, [pc, #128]	; (8010ce8 <etharp_tmr+0x14c>)
 8010c68:	687a      	ldr	r2, [r7, #4]
 8010c6a:	4613      	mov	r3, r2
 8010c6c:	005b      	lsls	r3, r3, #1
 8010c6e:	4413      	add	r3, r2
 8010c70:	00db      	lsls	r3, r3, #3
 8010c72:	440b      	add	r3, r1
 8010c74:	3314      	adds	r3, #20
 8010c76:	781b      	ldrb	r3, [r3, #0]
 8010c78:	2b04      	cmp	r3, #4
 8010c7a:	d10a      	bne.n	8010c92 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8010c7c:	491a      	ldr	r1, [pc, #104]	; (8010ce8 <etharp_tmr+0x14c>)
 8010c7e:	687a      	ldr	r2, [r7, #4]
 8010c80:	4613      	mov	r3, r2
 8010c82:	005b      	lsls	r3, r3, #1
 8010c84:	4413      	add	r3, r2
 8010c86:	00db      	lsls	r3, r3, #3
 8010c88:	440b      	add	r3, r1
 8010c8a:	3314      	adds	r3, #20
 8010c8c:	2202      	movs	r2, #2
 8010c8e:	701a      	strb	r2, [r3, #0]
 8010c90:	e01e      	b.n	8010cd0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8010c92:	4915      	ldr	r1, [pc, #84]	; (8010ce8 <etharp_tmr+0x14c>)
 8010c94:	687a      	ldr	r2, [r7, #4]
 8010c96:	4613      	mov	r3, r2
 8010c98:	005b      	lsls	r3, r3, #1
 8010c9a:	4413      	add	r3, r2
 8010c9c:	00db      	lsls	r3, r3, #3
 8010c9e:	440b      	add	r3, r1
 8010ca0:	3314      	adds	r3, #20
 8010ca2:	781b      	ldrb	r3, [r3, #0]
 8010ca4:	2b01      	cmp	r3, #1
 8010ca6:	d113      	bne.n	8010cd0 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8010ca8:	490f      	ldr	r1, [pc, #60]	; (8010ce8 <etharp_tmr+0x14c>)
 8010caa:	687a      	ldr	r2, [r7, #4]
 8010cac:	4613      	mov	r3, r2
 8010cae:	005b      	lsls	r3, r3, #1
 8010cb0:	4413      	add	r3, r2
 8010cb2:	00db      	lsls	r3, r3, #3
 8010cb4:	440b      	add	r3, r1
 8010cb6:	3308      	adds	r3, #8
 8010cb8:	6818      	ldr	r0, [r3, #0]
 8010cba:	687a      	ldr	r2, [r7, #4]
 8010cbc:	4613      	mov	r3, r2
 8010cbe:	005b      	lsls	r3, r3, #1
 8010cc0:	4413      	add	r3, r2
 8010cc2:	00db      	lsls	r3, r3, #3
 8010cc4:	4a08      	ldr	r2, [pc, #32]	; (8010ce8 <etharp_tmr+0x14c>)
 8010cc6:	4413      	add	r3, r2
 8010cc8:	3304      	adds	r3, #4
 8010cca:	4619      	mov	r1, r3
 8010ccc:	f000 fe6e 	bl	80119ac <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	3301      	adds	r3, #1
 8010cd4:	607b      	str	r3, [r7, #4]
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	2b09      	cmp	r3, #9
 8010cda:	f77f af65 	ble.w	8010ba8 <etharp_tmr+0xc>
      }
    }
  }
}
 8010cde:	bf00      	nop
 8010ce0:	bf00      	nop
 8010ce2:	3708      	adds	r7, #8
 8010ce4:	46bd      	mov	sp, r7
 8010ce6:	bd80      	pop	{r7, pc}
 8010ce8:	24000130 	.word	0x24000130

08010cec <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8010cec:	b580      	push	{r7, lr}
 8010cee:	b08a      	sub	sp, #40	; 0x28
 8010cf0:	af00      	add	r7, sp, #0
 8010cf2:	60f8      	str	r0, [r7, #12]
 8010cf4:	460b      	mov	r3, r1
 8010cf6:	607a      	str	r2, [r7, #4]
 8010cf8:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8010cfa:	230a      	movs	r3, #10
 8010cfc:	84fb      	strh	r3, [r7, #38]	; 0x26
 8010cfe:	230a      	movs	r3, #10
 8010d00:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8010d02:	230a      	movs	r3, #10
 8010d04:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8010d06:	2300      	movs	r3, #0
 8010d08:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8010d0a:	230a      	movs	r3, #10
 8010d0c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8010d0e:	2300      	movs	r3, #0
 8010d10:	83bb      	strh	r3, [r7, #28]
 8010d12:	2300      	movs	r3, #0
 8010d14:	837b      	strh	r3, [r7, #26]
 8010d16:	2300      	movs	r3, #0
 8010d18:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010d1a:	2300      	movs	r3, #0
 8010d1c:	843b      	strh	r3, [r7, #32]
 8010d1e:	e0ae      	b.n	8010e7e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8010d20:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010d24:	49a6      	ldr	r1, [pc, #664]	; (8010fc0 <etharp_find_entry+0x2d4>)
 8010d26:	4613      	mov	r3, r2
 8010d28:	005b      	lsls	r3, r3, #1
 8010d2a:	4413      	add	r3, r2
 8010d2c:	00db      	lsls	r3, r3, #3
 8010d2e:	440b      	add	r3, r1
 8010d30:	3314      	adds	r3, #20
 8010d32:	781b      	ldrb	r3, [r3, #0]
 8010d34:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8010d36:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8010d3a:	2b0a      	cmp	r3, #10
 8010d3c:	d105      	bne.n	8010d4a <etharp_find_entry+0x5e>
 8010d3e:	7dfb      	ldrb	r3, [r7, #23]
 8010d40:	2b00      	cmp	r3, #0
 8010d42:	d102      	bne.n	8010d4a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8010d44:	8c3b      	ldrh	r3, [r7, #32]
 8010d46:	847b      	strh	r3, [r7, #34]	; 0x22
 8010d48:	e095      	b.n	8010e76 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8010d4a:	7dfb      	ldrb	r3, [r7, #23]
 8010d4c:	2b00      	cmp	r3, #0
 8010d4e:	f000 8092 	beq.w	8010e76 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8010d52:	7dfb      	ldrb	r3, [r7, #23]
 8010d54:	2b01      	cmp	r3, #1
 8010d56:	d009      	beq.n	8010d6c <etharp_find_entry+0x80>
 8010d58:	7dfb      	ldrb	r3, [r7, #23]
 8010d5a:	2b01      	cmp	r3, #1
 8010d5c:	d806      	bhi.n	8010d6c <etharp_find_entry+0x80>
 8010d5e:	4b99      	ldr	r3, [pc, #612]	; (8010fc4 <etharp_find_entry+0x2d8>)
 8010d60:	f240 1223 	movw	r2, #291	; 0x123
 8010d64:	4998      	ldr	r1, [pc, #608]	; (8010fc8 <etharp_find_entry+0x2dc>)
 8010d66:	4899      	ldr	r0, [pc, #612]	; (8010fcc <etharp_find_entry+0x2e0>)
 8010d68:	f002 fa14 	bl	8013194 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8010d6c:	68fb      	ldr	r3, [r7, #12]
 8010d6e:	2b00      	cmp	r3, #0
 8010d70:	d020      	beq.n	8010db4 <etharp_find_entry+0xc8>
 8010d72:	68fb      	ldr	r3, [r7, #12]
 8010d74:	6819      	ldr	r1, [r3, #0]
 8010d76:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010d7a:	4891      	ldr	r0, [pc, #580]	; (8010fc0 <etharp_find_entry+0x2d4>)
 8010d7c:	4613      	mov	r3, r2
 8010d7e:	005b      	lsls	r3, r3, #1
 8010d80:	4413      	add	r3, r2
 8010d82:	00db      	lsls	r3, r3, #3
 8010d84:	4403      	add	r3, r0
 8010d86:	3304      	adds	r3, #4
 8010d88:	681b      	ldr	r3, [r3, #0]
 8010d8a:	4299      	cmp	r1, r3
 8010d8c:	d112      	bne.n	8010db4 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	2b00      	cmp	r3, #0
 8010d92:	d00c      	beq.n	8010dae <etharp_find_entry+0xc2>
 8010d94:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010d98:	4989      	ldr	r1, [pc, #548]	; (8010fc0 <etharp_find_entry+0x2d4>)
 8010d9a:	4613      	mov	r3, r2
 8010d9c:	005b      	lsls	r3, r3, #1
 8010d9e:	4413      	add	r3, r2
 8010da0:	00db      	lsls	r3, r3, #3
 8010da2:	440b      	add	r3, r1
 8010da4:	3308      	adds	r3, #8
 8010da6:	681b      	ldr	r3, [r3, #0]
 8010da8:	687a      	ldr	r2, [r7, #4]
 8010daa:	429a      	cmp	r2, r3
 8010dac:	d102      	bne.n	8010db4 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8010dae:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010db2:	e100      	b.n	8010fb6 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8010db4:	7dfb      	ldrb	r3, [r7, #23]
 8010db6:	2b01      	cmp	r3, #1
 8010db8:	d140      	bne.n	8010e3c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8010dba:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010dbe:	4980      	ldr	r1, [pc, #512]	; (8010fc0 <etharp_find_entry+0x2d4>)
 8010dc0:	4613      	mov	r3, r2
 8010dc2:	005b      	lsls	r3, r3, #1
 8010dc4:	4413      	add	r3, r2
 8010dc6:	00db      	lsls	r3, r3, #3
 8010dc8:	440b      	add	r3, r1
 8010dca:	681b      	ldr	r3, [r3, #0]
 8010dcc:	2b00      	cmp	r3, #0
 8010dce:	d01a      	beq.n	8010e06 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8010dd0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010dd4:	497a      	ldr	r1, [pc, #488]	; (8010fc0 <etharp_find_entry+0x2d4>)
 8010dd6:	4613      	mov	r3, r2
 8010dd8:	005b      	lsls	r3, r3, #1
 8010dda:	4413      	add	r3, r2
 8010ddc:	00db      	lsls	r3, r3, #3
 8010dde:	440b      	add	r3, r1
 8010de0:	3312      	adds	r3, #18
 8010de2:	881b      	ldrh	r3, [r3, #0]
 8010de4:	8bba      	ldrh	r2, [r7, #28]
 8010de6:	429a      	cmp	r2, r3
 8010de8:	d845      	bhi.n	8010e76 <etharp_find_entry+0x18a>
            old_queue = i;
 8010dea:	8c3b      	ldrh	r3, [r7, #32]
 8010dec:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8010dee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010df2:	4973      	ldr	r1, [pc, #460]	; (8010fc0 <etharp_find_entry+0x2d4>)
 8010df4:	4613      	mov	r3, r2
 8010df6:	005b      	lsls	r3, r3, #1
 8010df8:	4413      	add	r3, r2
 8010dfa:	00db      	lsls	r3, r3, #3
 8010dfc:	440b      	add	r3, r1
 8010dfe:	3312      	adds	r3, #18
 8010e00:	881b      	ldrh	r3, [r3, #0]
 8010e02:	83bb      	strh	r3, [r7, #28]
 8010e04:	e037      	b.n	8010e76 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8010e06:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010e0a:	496d      	ldr	r1, [pc, #436]	; (8010fc0 <etharp_find_entry+0x2d4>)
 8010e0c:	4613      	mov	r3, r2
 8010e0e:	005b      	lsls	r3, r3, #1
 8010e10:	4413      	add	r3, r2
 8010e12:	00db      	lsls	r3, r3, #3
 8010e14:	440b      	add	r3, r1
 8010e16:	3312      	adds	r3, #18
 8010e18:	881b      	ldrh	r3, [r3, #0]
 8010e1a:	8b7a      	ldrh	r2, [r7, #26]
 8010e1c:	429a      	cmp	r2, r3
 8010e1e:	d82a      	bhi.n	8010e76 <etharp_find_entry+0x18a>
            old_pending = i;
 8010e20:	8c3b      	ldrh	r3, [r7, #32]
 8010e22:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8010e24:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010e28:	4965      	ldr	r1, [pc, #404]	; (8010fc0 <etharp_find_entry+0x2d4>)
 8010e2a:	4613      	mov	r3, r2
 8010e2c:	005b      	lsls	r3, r3, #1
 8010e2e:	4413      	add	r3, r2
 8010e30:	00db      	lsls	r3, r3, #3
 8010e32:	440b      	add	r3, r1
 8010e34:	3312      	adds	r3, #18
 8010e36:	881b      	ldrh	r3, [r3, #0]
 8010e38:	837b      	strh	r3, [r7, #26]
 8010e3a:	e01c      	b.n	8010e76 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8010e3c:	7dfb      	ldrb	r3, [r7, #23]
 8010e3e:	2b01      	cmp	r3, #1
 8010e40:	d919      	bls.n	8010e76 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8010e42:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010e46:	495e      	ldr	r1, [pc, #376]	; (8010fc0 <etharp_find_entry+0x2d4>)
 8010e48:	4613      	mov	r3, r2
 8010e4a:	005b      	lsls	r3, r3, #1
 8010e4c:	4413      	add	r3, r2
 8010e4e:	00db      	lsls	r3, r3, #3
 8010e50:	440b      	add	r3, r1
 8010e52:	3312      	adds	r3, #18
 8010e54:	881b      	ldrh	r3, [r3, #0]
 8010e56:	8b3a      	ldrh	r2, [r7, #24]
 8010e58:	429a      	cmp	r2, r3
 8010e5a:	d80c      	bhi.n	8010e76 <etharp_find_entry+0x18a>
            old_stable = i;
 8010e5c:	8c3b      	ldrh	r3, [r7, #32]
 8010e5e:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8010e60:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010e64:	4956      	ldr	r1, [pc, #344]	; (8010fc0 <etharp_find_entry+0x2d4>)
 8010e66:	4613      	mov	r3, r2
 8010e68:	005b      	lsls	r3, r3, #1
 8010e6a:	4413      	add	r3, r2
 8010e6c:	00db      	lsls	r3, r3, #3
 8010e6e:	440b      	add	r3, r1
 8010e70:	3312      	adds	r3, #18
 8010e72:	881b      	ldrh	r3, [r3, #0]
 8010e74:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010e76:	8c3b      	ldrh	r3, [r7, #32]
 8010e78:	3301      	adds	r3, #1
 8010e7a:	b29b      	uxth	r3, r3
 8010e7c:	843b      	strh	r3, [r7, #32]
 8010e7e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010e82:	2b09      	cmp	r3, #9
 8010e84:	f77f af4c 	ble.w	8010d20 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8010e88:	7afb      	ldrb	r3, [r7, #11]
 8010e8a:	f003 0302 	and.w	r3, r3, #2
 8010e8e:	2b00      	cmp	r3, #0
 8010e90:	d108      	bne.n	8010ea4 <etharp_find_entry+0x1b8>
 8010e92:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8010e96:	2b0a      	cmp	r3, #10
 8010e98:	d107      	bne.n	8010eaa <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8010e9a:	7afb      	ldrb	r3, [r7, #11]
 8010e9c:	f003 0301 	and.w	r3, r3, #1
 8010ea0:	2b00      	cmp	r3, #0
 8010ea2:	d102      	bne.n	8010eaa <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8010ea4:	f04f 33ff 	mov.w	r3, #4294967295
 8010ea8:	e085      	b.n	8010fb6 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8010eaa:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8010eae:	2b09      	cmp	r3, #9
 8010eb0:	dc02      	bgt.n	8010eb8 <etharp_find_entry+0x1cc>
    i = empty;
 8010eb2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010eb4:	843b      	strh	r3, [r7, #32]
 8010eb6:	e039      	b.n	8010f2c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8010eb8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8010ebc:	2b09      	cmp	r3, #9
 8010ebe:	dc14      	bgt.n	8010eea <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8010ec0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010ec2:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8010ec4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010ec8:	493d      	ldr	r1, [pc, #244]	; (8010fc0 <etharp_find_entry+0x2d4>)
 8010eca:	4613      	mov	r3, r2
 8010ecc:	005b      	lsls	r3, r3, #1
 8010ece:	4413      	add	r3, r2
 8010ed0:	00db      	lsls	r3, r3, #3
 8010ed2:	440b      	add	r3, r1
 8010ed4:	681b      	ldr	r3, [r3, #0]
 8010ed6:	2b00      	cmp	r3, #0
 8010ed8:	d018      	beq.n	8010f0c <etharp_find_entry+0x220>
 8010eda:	4b3a      	ldr	r3, [pc, #232]	; (8010fc4 <etharp_find_entry+0x2d8>)
 8010edc:	f240 126d 	movw	r2, #365	; 0x16d
 8010ee0:	493b      	ldr	r1, [pc, #236]	; (8010fd0 <etharp_find_entry+0x2e4>)
 8010ee2:	483a      	ldr	r0, [pc, #232]	; (8010fcc <etharp_find_entry+0x2e0>)
 8010ee4:	f002 f956 	bl	8013194 <iprintf>
 8010ee8:	e010      	b.n	8010f0c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8010eea:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8010eee:	2b09      	cmp	r3, #9
 8010ef0:	dc02      	bgt.n	8010ef8 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8010ef2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010ef4:	843b      	strh	r3, [r7, #32]
 8010ef6:	e009      	b.n	8010f0c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8010ef8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8010efc:	2b09      	cmp	r3, #9
 8010efe:	dc02      	bgt.n	8010f06 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8010f00:	8bfb      	ldrh	r3, [r7, #30]
 8010f02:	843b      	strh	r3, [r7, #32]
 8010f04:	e002      	b.n	8010f0c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8010f06:	f04f 33ff 	mov.w	r3, #4294967295
 8010f0a:	e054      	b.n	8010fb6 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8010f0c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010f10:	2b09      	cmp	r3, #9
 8010f12:	dd06      	ble.n	8010f22 <etharp_find_entry+0x236>
 8010f14:	4b2b      	ldr	r3, [pc, #172]	; (8010fc4 <etharp_find_entry+0x2d8>)
 8010f16:	f240 127f 	movw	r2, #383	; 0x17f
 8010f1a:	492e      	ldr	r1, [pc, #184]	; (8010fd4 <etharp_find_entry+0x2e8>)
 8010f1c:	482b      	ldr	r0, [pc, #172]	; (8010fcc <etharp_find_entry+0x2e0>)
 8010f1e:	f002 f939 	bl	8013194 <iprintf>
    etharp_free_entry(i);
 8010f22:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010f26:	4618      	mov	r0, r3
 8010f28:	f7ff fe06 	bl	8010b38 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8010f2c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010f30:	2b09      	cmp	r3, #9
 8010f32:	dd06      	ble.n	8010f42 <etharp_find_entry+0x256>
 8010f34:	4b23      	ldr	r3, [pc, #140]	; (8010fc4 <etharp_find_entry+0x2d8>)
 8010f36:	f240 1283 	movw	r2, #387	; 0x183
 8010f3a:	4926      	ldr	r1, [pc, #152]	; (8010fd4 <etharp_find_entry+0x2e8>)
 8010f3c:	4823      	ldr	r0, [pc, #140]	; (8010fcc <etharp_find_entry+0x2e0>)
 8010f3e:	f002 f929 	bl	8013194 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8010f42:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010f46:	491e      	ldr	r1, [pc, #120]	; (8010fc0 <etharp_find_entry+0x2d4>)
 8010f48:	4613      	mov	r3, r2
 8010f4a:	005b      	lsls	r3, r3, #1
 8010f4c:	4413      	add	r3, r2
 8010f4e:	00db      	lsls	r3, r3, #3
 8010f50:	440b      	add	r3, r1
 8010f52:	3314      	adds	r3, #20
 8010f54:	781b      	ldrb	r3, [r3, #0]
 8010f56:	2b00      	cmp	r3, #0
 8010f58:	d006      	beq.n	8010f68 <etharp_find_entry+0x27c>
 8010f5a:	4b1a      	ldr	r3, [pc, #104]	; (8010fc4 <etharp_find_entry+0x2d8>)
 8010f5c:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8010f60:	491d      	ldr	r1, [pc, #116]	; (8010fd8 <etharp_find_entry+0x2ec>)
 8010f62:	481a      	ldr	r0, [pc, #104]	; (8010fcc <etharp_find_entry+0x2e0>)
 8010f64:	f002 f916 	bl	8013194 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8010f68:	68fb      	ldr	r3, [r7, #12]
 8010f6a:	2b00      	cmp	r3, #0
 8010f6c:	d00b      	beq.n	8010f86 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8010f6e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010f72:	68fb      	ldr	r3, [r7, #12]
 8010f74:	6819      	ldr	r1, [r3, #0]
 8010f76:	4812      	ldr	r0, [pc, #72]	; (8010fc0 <etharp_find_entry+0x2d4>)
 8010f78:	4613      	mov	r3, r2
 8010f7a:	005b      	lsls	r3, r3, #1
 8010f7c:	4413      	add	r3, r2
 8010f7e:	00db      	lsls	r3, r3, #3
 8010f80:	4403      	add	r3, r0
 8010f82:	3304      	adds	r3, #4
 8010f84:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8010f86:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010f8a:	490d      	ldr	r1, [pc, #52]	; (8010fc0 <etharp_find_entry+0x2d4>)
 8010f8c:	4613      	mov	r3, r2
 8010f8e:	005b      	lsls	r3, r3, #1
 8010f90:	4413      	add	r3, r2
 8010f92:	00db      	lsls	r3, r3, #3
 8010f94:	440b      	add	r3, r1
 8010f96:	3312      	adds	r3, #18
 8010f98:	2200      	movs	r2, #0
 8010f9a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8010f9c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010fa0:	4907      	ldr	r1, [pc, #28]	; (8010fc0 <etharp_find_entry+0x2d4>)
 8010fa2:	4613      	mov	r3, r2
 8010fa4:	005b      	lsls	r3, r3, #1
 8010fa6:	4413      	add	r3, r2
 8010fa8:	00db      	lsls	r3, r3, #3
 8010faa:	440b      	add	r3, r1
 8010fac:	3308      	adds	r3, #8
 8010fae:	687a      	ldr	r2, [r7, #4]
 8010fb0:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8010fb2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8010fb6:	4618      	mov	r0, r3
 8010fb8:	3728      	adds	r7, #40	; 0x28
 8010fba:	46bd      	mov	sp, r7
 8010fbc:	bd80      	pop	{r7, pc}
 8010fbe:	bf00      	nop
 8010fc0:	24000130 	.word	0x24000130
 8010fc4:	08016550 	.word	0x08016550
 8010fc8:	08016588 	.word	0x08016588
 8010fcc:	080165c8 	.word	0x080165c8
 8010fd0:	080165f0 	.word	0x080165f0
 8010fd4:	08016608 	.word	0x08016608
 8010fd8:	0801661c 	.word	0x0801661c

08010fdc <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8010fdc:	b580      	push	{r7, lr}
 8010fde:	b088      	sub	sp, #32
 8010fe0:	af02      	add	r7, sp, #8
 8010fe2:	60f8      	str	r0, [r7, #12]
 8010fe4:	60b9      	str	r1, [r7, #8]
 8010fe6:	607a      	str	r2, [r7, #4]
 8010fe8:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8010fea:	68fb      	ldr	r3, [r7, #12]
 8010fec:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010ff0:	2b06      	cmp	r3, #6
 8010ff2:	d006      	beq.n	8011002 <etharp_update_arp_entry+0x26>
 8010ff4:	4b48      	ldr	r3, [pc, #288]	; (8011118 <etharp_update_arp_entry+0x13c>)
 8010ff6:	f240 12a9 	movw	r2, #425	; 0x1a9
 8010ffa:	4948      	ldr	r1, [pc, #288]	; (801111c <etharp_update_arp_entry+0x140>)
 8010ffc:	4848      	ldr	r0, [pc, #288]	; (8011120 <etharp_update_arp_entry+0x144>)
 8010ffe:	f002 f8c9 	bl	8013194 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8011002:	68bb      	ldr	r3, [r7, #8]
 8011004:	2b00      	cmp	r3, #0
 8011006:	d012      	beq.n	801102e <etharp_update_arp_entry+0x52>
 8011008:	68bb      	ldr	r3, [r7, #8]
 801100a:	681b      	ldr	r3, [r3, #0]
 801100c:	2b00      	cmp	r3, #0
 801100e:	d00e      	beq.n	801102e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8011010:	68bb      	ldr	r3, [r7, #8]
 8011012:	681b      	ldr	r3, [r3, #0]
 8011014:	68f9      	ldr	r1, [r7, #12]
 8011016:	4618      	mov	r0, r3
 8011018:	f001 f924 	bl	8012264 <ip4_addr_isbroadcast_u32>
 801101c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801101e:	2b00      	cmp	r3, #0
 8011020:	d105      	bne.n	801102e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8011022:	68bb      	ldr	r3, [r7, #8]
 8011024:	681b      	ldr	r3, [r3, #0]
 8011026:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801102a:	2be0      	cmp	r3, #224	; 0xe0
 801102c:	d102      	bne.n	8011034 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801102e:	f06f 030f 	mvn.w	r3, #15
 8011032:	e06c      	b.n	801110e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8011034:	78fb      	ldrb	r3, [r7, #3]
 8011036:	68fa      	ldr	r2, [r7, #12]
 8011038:	4619      	mov	r1, r3
 801103a:	68b8      	ldr	r0, [r7, #8]
 801103c:	f7ff fe56 	bl	8010cec <etharp_find_entry>
 8011040:	4603      	mov	r3, r0
 8011042:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8011044:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8011048:	2b00      	cmp	r3, #0
 801104a:	da02      	bge.n	8011052 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801104c:	8afb      	ldrh	r3, [r7, #22]
 801104e:	b25b      	sxtb	r3, r3
 8011050:	e05d      	b.n	801110e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8011052:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011056:	4933      	ldr	r1, [pc, #204]	; (8011124 <etharp_update_arp_entry+0x148>)
 8011058:	4613      	mov	r3, r2
 801105a:	005b      	lsls	r3, r3, #1
 801105c:	4413      	add	r3, r2
 801105e:	00db      	lsls	r3, r3, #3
 8011060:	440b      	add	r3, r1
 8011062:	3314      	adds	r3, #20
 8011064:	2202      	movs	r2, #2
 8011066:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8011068:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801106c:	492d      	ldr	r1, [pc, #180]	; (8011124 <etharp_update_arp_entry+0x148>)
 801106e:	4613      	mov	r3, r2
 8011070:	005b      	lsls	r3, r3, #1
 8011072:	4413      	add	r3, r2
 8011074:	00db      	lsls	r3, r3, #3
 8011076:	440b      	add	r3, r1
 8011078:	3308      	adds	r3, #8
 801107a:	68fa      	ldr	r2, [r7, #12]
 801107c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801107e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011082:	4613      	mov	r3, r2
 8011084:	005b      	lsls	r3, r3, #1
 8011086:	4413      	add	r3, r2
 8011088:	00db      	lsls	r3, r3, #3
 801108a:	3308      	adds	r3, #8
 801108c:	4a25      	ldr	r2, [pc, #148]	; (8011124 <etharp_update_arp_entry+0x148>)
 801108e:	4413      	add	r3, r2
 8011090:	3304      	adds	r3, #4
 8011092:	2206      	movs	r2, #6
 8011094:	6879      	ldr	r1, [r7, #4]
 8011096:	4618      	mov	r0, r3
 8011098:	f002 f866 	bl	8013168 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801109c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80110a0:	4920      	ldr	r1, [pc, #128]	; (8011124 <etharp_update_arp_entry+0x148>)
 80110a2:	4613      	mov	r3, r2
 80110a4:	005b      	lsls	r3, r3, #1
 80110a6:	4413      	add	r3, r2
 80110a8:	00db      	lsls	r3, r3, #3
 80110aa:	440b      	add	r3, r1
 80110ac:	3312      	adds	r3, #18
 80110ae:	2200      	movs	r2, #0
 80110b0:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80110b2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80110b6:	491b      	ldr	r1, [pc, #108]	; (8011124 <etharp_update_arp_entry+0x148>)
 80110b8:	4613      	mov	r3, r2
 80110ba:	005b      	lsls	r3, r3, #1
 80110bc:	4413      	add	r3, r2
 80110be:	00db      	lsls	r3, r3, #3
 80110c0:	440b      	add	r3, r1
 80110c2:	681b      	ldr	r3, [r3, #0]
 80110c4:	2b00      	cmp	r3, #0
 80110c6:	d021      	beq.n	801110c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80110c8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80110cc:	4915      	ldr	r1, [pc, #84]	; (8011124 <etharp_update_arp_entry+0x148>)
 80110ce:	4613      	mov	r3, r2
 80110d0:	005b      	lsls	r3, r3, #1
 80110d2:	4413      	add	r3, r2
 80110d4:	00db      	lsls	r3, r3, #3
 80110d6:	440b      	add	r3, r1
 80110d8:	681b      	ldr	r3, [r3, #0]
 80110da:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80110dc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80110e0:	4910      	ldr	r1, [pc, #64]	; (8011124 <etharp_update_arp_entry+0x148>)
 80110e2:	4613      	mov	r3, r2
 80110e4:	005b      	lsls	r3, r3, #1
 80110e6:	4413      	add	r3, r2
 80110e8:	00db      	lsls	r3, r3, #3
 80110ea:	440b      	add	r3, r1
 80110ec:	2200      	movs	r2, #0
 80110ee:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80110f0:	68fb      	ldr	r3, [r7, #12]
 80110f2:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80110f6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80110fa:	9300      	str	r3, [sp, #0]
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	6939      	ldr	r1, [r7, #16]
 8011100:	68f8      	ldr	r0, [r7, #12]
 8011102:	f001 ffb7 	bl	8013074 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8011106:	6938      	ldr	r0, [r7, #16]
 8011108:	f7f8 ff24 	bl	8009f54 <pbuf_free>
  }
  return ERR_OK;
 801110c:	2300      	movs	r3, #0
}
 801110e:	4618      	mov	r0, r3
 8011110:	3718      	adds	r7, #24
 8011112:	46bd      	mov	sp, r7
 8011114:	bd80      	pop	{r7, pc}
 8011116:	bf00      	nop
 8011118:	08016550 	.word	0x08016550
 801111c:	08016648 	.word	0x08016648
 8011120:	080165c8 	.word	0x080165c8
 8011124:	24000130 	.word	0x24000130

08011128 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8011128:	b580      	push	{r7, lr}
 801112a:	b084      	sub	sp, #16
 801112c:	af00      	add	r7, sp, #0
 801112e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011130:	2300      	movs	r3, #0
 8011132:	60fb      	str	r3, [r7, #12]
 8011134:	e01e      	b.n	8011174 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8011136:	4913      	ldr	r1, [pc, #76]	; (8011184 <etharp_cleanup_netif+0x5c>)
 8011138:	68fa      	ldr	r2, [r7, #12]
 801113a:	4613      	mov	r3, r2
 801113c:	005b      	lsls	r3, r3, #1
 801113e:	4413      	add	r3, r2
 8011140:	00db      	lsls	r3, r3, #3
 8011142:	440b      	add	r3, r1
 8011144:	3314      	adds	r3, #20
 8011146:	781b      	ldrb	r3, [r3, #0]
 8011148:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801114a:	7afb      	ldrb	r3, [r7, #11]
 801114c:	2b00      	cmp	r3, #0
 801114e:	d00e      	beq.n	801116e <etharp_cleanup_netif+0x46>
 8011150:	490c      	ldr	r1, [pc, #48]	; (8011184 <etharp_cleanup_netif+0x5c>)
 8011152:	68fa      	ldr	r2, [r7, #12]
 8011154:	4613      	mov	r3, r2
 8011156:	005b      	lsls	r3, r3, #1
 8011158:	4413      	add	r3, r2
 801115a:	00db      	lsls	r3, r3, #3
 801115c:	440b      	add	r3, r1
 801115e:	3308      	adds	r3, #8
 8011160:	681b      	ldr	r3, [r3, #0]
 8011162:	687a      	ldr	r2, [r7, #4]
 8011164:	429a      	cmp	r2, r3
 8011166:	d102      	bne.n	801116e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8011168:	68f8      	ldr	r0, [r7, #12]
 801116a:	f7ff fce5 	bl	8010b38 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801116e:	68fb      	ldr	r3, [r7, #12]
 8011170:	3301      	adds	r3, #1
 8011172:	60fb      	str	r3, [r7, #12]
 8011174:	68fb      	ldr	r3, [r7, #12]
 8011176:	2b09      	cmp	r3, #9
 8011178:	dddd      	ble.n	8011136 <etharp_cleanup_netif+0xe>
    }
  }
}
 801117a:	bf00      	nop
 801117c:	bf00      	nop
 801117e:	3710      	adds	r7, #16
 8011180:	46bd      	mov	sp, r7
 8011182:	bd80      	pop	{r7, pc}
 8011184:	24000130 	.word	0x24000130

08011188 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8011188:	b5b0      	push	{r4, r5, r7, lr}
 801118a:	b08a      	sub	sp, #40	; 0x28
 801118c:	af04      	add	r7, sp, #16
 801118e:	6078      	str	r0, [r7, #4]
 8011190:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8011192:	683b      	ldr	r3, [r7, #0]
 8011194:	2b00      	cmp	r3, #0
 8011196:	d107      	bne.n	80111a8 <etharp_input+0x20>
 8011198:	4b3d      	ldr	r3, [pc, #244]	; (8011290 <etharp_input+0x108>)
 801119a:	f240 228a 	movw	r2, #650	; 0x28a
 801119e:	493d      	ldr	r1, [pc, #244]	; (8011294 <etharp_input+0x10c>)
 80111a0:	483d      	ldr	r0, [pc, #244]	; (8011298 <etharp_input+0x110>)
 80111a2:	f001 fff7 	bl	8013194 <iprintf>
 80111a6:	e06f      	b.n	8011288 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	685b      	ldr	r3, [r3, #4]
 80111ac:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80111ae:	693b      	ldr	r3, [r7, #16]
 80111b0:	881b      	ldrh	r3, [r3, #0]
 80111b2:	b29b      	uxth	r3, r3
 80111b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80111b8:	d10c      	bne.n	80111d4 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80111ba:	693b      	ldr	r3, [r7, #16]
 80111bc:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80111be:	2b06      	cmp	r3, #6
 80111c0:	d108      	bne.n	80111d4 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80111c2:	693b      	ldr	r3, [r7, #16]
 80111c4:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80111c6:	2b04      	cmp	r3, #4
 80111c8:	d104      	bne.n	80111d4 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80111ca:	693b      	ldr	r3, [r7, #16]
 80111cc:	885b      	ldrh	r3, [r3, #2]
 80111ce:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80111d0:	2b08      	cmp	r3, #8
 80111d2:	d003      	beq.n	80111dc <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80111d4:	6878      	ldr	r0, [r7, #4]
 80111d6:	f7f8 febd 	bl	8009f54 <pbuf_free>
    return;
 80111da:	e055      	b.n	8011288 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80111dc:	693b      	ldr	r3, [r7, #16]
 80111de:	330e      	adds	r3, #14
 80111e0:	681b      	ldr	r3, [r3, #0]
 80111e2:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80111e4:	693b      	ldr	r3, [r7, #16]
 80111e6:	3318      	adds	r3, #24
 80111e8:	681b      	ldr	r3, [r3, #0]
 80111ea:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80111ec:	683b      	ldr	r3, [r7, #0]
 80111ee:	3304      	adds	r3, #4
 80111f0:	681b      	ldr	r3, [r3, #0]
 80111f2:	2b00      	cmp	r3, #0
 80111f4:	d102      	bne.n	80111fc <etharp_input+0x74>
    for_us = 0;
 80111f6:	2300      	movs	r3, #0
 80111f8:	75fb      	strb	r3, [r7, #23]
 80111fa:	e009      	b.n	8011210 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80111fc:	68ba      	ldr	r2, [r7, #8]
 80111fe:	683b      	ldr	r3, [r7, #0]
 8011200:	3304      	adds	r3, #4
 8011202:	681b      	ldr	r3, [r3, #0]
 8011204:	429a      	cmp	r2, r3
 8011206:	bf0c      	ite	eq
 8011208:	2301      	moveq	r3, #1
 801120a:	2300      	movne	r3, #0
 801120c:	b2db      	uxtb	r3, r3
 801120e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8011210:	693b      	ldr	r3, [r7, #16]
 8011212:	f103 0208 	add.w	r2, r3, #8
 8011216:	7dfb      	ldrb	r3, [r7, #23]
 8011218:	2b00      	cmp	r3, #0
 801121a:	d001      	beq.n	8011220 <etharp_input+0x98>
 801121c:	2301      	movs	r3, #1
 801121e:	e000      	b.n	8011222 <etharp_input+0x9a>
 8011220:	2302      	movs	r3, #2
 8011222:	f107 010c 	add.w	r1, r7, #12
 8011226:	6838      	ldr	r0, [r7, #0]
 8011228:	f7ff fed8 	bl	8010fdc <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801122c:	693b      	ldr	r3, [r7, #16]
 801122e:	88db      	ldrh	r3, [r3, #6]
 8011230:	b29b      	uxth	r3, r3
 8011232:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011236:	d003      	beq.n	8011240 <etharp_input+0xb8>
 8011238:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801123c:	d01e      	beq.n	801127c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801123e:	e020      	b.n	8011282 <etharp_input+0xfa>
      if (for_us) {
 8011240:	7dfb      	ldrb	r3, [r7, #23]
 8011242:	2b00      	cmp	r3, #0
 8011244:	d01c      	beq.n	8011280 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8011246:	683b      	ldr	r3, [r7, #0]
 8011248:	f103 0026 	add.w	r0, r3, #38	; 0x26
 801124c:	693b      	ldr	r3, [r7, #16]
 801124e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8011252:	683b      	ldr	r3, [r7, #0]
 8011254:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8011258:	683b      	ldr	r3, [r7, #0]
 801125a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801125c:	693a      	ldr	r2, [r7, #16]
 801125e:	3208      	adds	r2, #8
        etharp_raw(netif,
 8011260:	2102      	movs	r1, #2
 8011262:	9103      	str	r1, [sp, #12]
 8011264:	f107 010c 	add.w	r1, r7, #12
 8011268:	9102      	str	r1, [sp, #8]
 801126a:	9201      	str	r2, [sp, #4]
 801126c:	9300      	str	r3, [sp, #0]
 801126e:	462b      	mov	r3, r5
 8011270:	4622      	mov	r2, r4
 8011272:	4601      	mov	r1, r0
 8011274:	6838      	ldr	r0, [r7, #0]
 8011276:	f000 faeb 	bl	8011850 <etharp_raw>
      break;
 801127a:	e001      	b.n	8011280 <etharp_input+0xf8>
      break;
 801127c:	bf00      	nop
 801127e:	e000      	b.n	8011282 <etharp_input+0xfa>
      break;
 8011280:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8011282:	6878      	ldr	r0, [r7, #4]
 8011284:	f7f8 fe66 	bl	8009f54 <pbuf_free>
}
 8011288:	3718      	adds	r7, #24
 801128a:	46bd      	mov	sp, r7
 801128c:	bdb0      	pop	{r4, r5, r7, pc}
 801128e:	bf00      	nop
 8011290:	08016550 	.word	0x08016550
 8011294:	080166a0 	.word	0x080166a0
 8011298:	080165c8 	.word	0x080165c8

0801129c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801129c:	b580      	push	{r7, lr}
 801129e:	b086      	sub	sp, #24
 80112a0:	af02      	add	r7, sp, #8
 80112a2:	60f8      	str	r0, [r7, #12]
 80112a4:	60b9      	str	r1, [r7, #8]
 80112a6:	4613      	mov	r3, r2
 80112a8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80112aa:	79fa      	ldrb	r2, [r7, #7]
 80112ac:	4944      	ldr	r1, [pc, #272]	; (80113c0 <etharp_output_to_arp_index+0x124>)
 80112ae:	4613      	mov	r3, r2
 80112b0:	005b      	lsls	r3, r3, #1
 80112b2:	4413      	add	r3, r2
 80112b4:	00db      	lsls	r3, r3, #3
 80112b6:	440b      	add	r3, r1
 80112b8:	3314      	adds	r3, #20
 80112ba:	781b      	ldrb	r3, [r3, #0]
 80112bc:	2b01      	cmp	r3, #1
 80112be:	d806      	bhi.n	80112ce <etharp_output_to_arp_index+0x32>
 80112c0:	4b40      	ldr	r3, [pc, #256]	; (80113c4 <etharp_output_to_arp_index+0x128>)
 80112c2:	f240 22ee 	movw	r2, #750	; 0x2ee
 80112c6:	4940      	ldr	r1, [pc, #256]	; (80113c8 <etharp_output_to_arp_index+0x12c>)
 80112c8:	4840      	ldr	r0, [pc, #256]	; (80113cc <etharp_output_to_arp_index+0x130>)
 80112ca:	f001 ff63 	bl	8013194 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80112ce:	79fa      	ldrb	r2, [r7, #7]
 80112d0:	493b      	ldr	r1, [pc, #236]	; (80113c0 <etharp_output_to_arp_index+0x124>)
 80112d2:	4613      	mov	r3, r2
 80112d4:	005b      	lsls	r3, r3, #1
 80112d6:	4413      	add	r3, r2
 80112d8:	00db      	lsls	r3, r3, #3
 80112da:	440b      	add	r3, r1
 80112dc:	3314      	adds	r3, #20
 80112de:	781b      	ldrb	r3, [r3, #0]
 80112e0:	2b02      	cmp	r3, #2
 80112e2:	d153      	bne.n	801138c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80112e4:	79fa      	ldrb	r2, [r7, #7]
 80112e6:	4936      	ldr	r1, [pc, #216]	; (80113c0 <etharp_output_to_arp_index+0x124>)
 80112e8:	4613      	mov	r3, r2
 80112ea:	005b      	lsls	r3, r3, #1
 80112ec:	4413      	add	r3, r2
 80112ee:	00db      	lsls	r3, r3, #3
 80112f0:	440b      	add	r3, r1
 80112f2:	3312      	adds	r3, #18
 80112f4:	881b      	ldrh	r3, [r3, #0]
 80112f6:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80112fa:	d919      	bls.n	8011330 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80112fc:	79fa      	ldrb	r2, [r7, #7]
 80112fe:	4613      	mov	r3, r2
 8011300:	005b      	lsls	r3, r3, #1
 8011302:	4413      	add	r3, r2
 8011304:	00db      	lsls	r3, r3, #3
 8011306:	4a2e      	ldr	r2, [pc, #184]	; (80113c0 <etharp_output_to_arp_index+0x124>)
 8011308:	4413      	add	r3, r2
 801130a:	3304      	adds	r3, #4
 801130c:	4619      	mov	r1, r3
 801130e:	68f8      	ldr	r0, [r7, #12]
 8011310:	f000 fb4c 	bl	80119ac <etharp_request>
 8011314:	4603      	mov	r3, r0
 8011316:	2b00      	cmp	r3, #0
 8011318:	d138      	bne.n	801138c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801131a:	79fa      	ldrb	r2, [r7, #7]
 801131c:	4928      	ldr	r1, [pc, #160]	; (80113c0 <etharp_output_to_arp_index+0x124>)
 801131e:	4613      	mov	r3, r2
 8011320:	005b      	lsls	r3, r3, #1
 8011322:	4413      	add	r3, r2
 8011324:	00db      	lsls	r3, r3, #3
 8011326:	440b      	add	r3, r1
 8011328:	3314      	adds	r3, #20
 801132a:	2203      	movs	r2, #3
 801132c:	701a      	strb	r2, [r3, #0]
 801132e:	e02d      	b.n	801138c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8011330:	79fa      	ldrb	r2, [r7, #7]
 8011332:	4923      	ldr	r1, [pc, #140]	; (80113c0 <etharp_output_to_arp_index+0x124>)
 8011334:	4613      	mov	r3, r2
 8011336:	005b      	lsls	r3, r3, #1
 8011338:	4413      	add	r3, r2
 801133a:	00db      	lsls	r3, r3, #3
 801133c:	440b      	add	r3, r1
 801133e:	3312      	adds	r3, #18
 8011340:	881b      	ldrh	r3, [r3, #0]
 8011342:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8011346:	d321      	bcc.n	801138c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8011348:	79fa      	ldrb	r2, [r7, #7]
 801134a:	4613      	mov	r3, r2
 801134c:	005b      	lsls	r3, r3, #1
 801134e:	4413      	add	r3, r2
 8011350:	00db      	lsls	r3, r3, #3
 8011352:	4a1b      	ldr	r2, [pc, #108]	; (80113c0 <etharp_output_to_arp_index+0x124>)
 8011354:	4413      	add	r3, r2
 8011356:	1d19      	adds	r1, r3, #4
 8011358:	79fa      	ldrb	r2, [r7, #7]
 801135a:	4613      	mov	r3, r2
 801135c:	005b      	lsls	r3, r3, #1
 801135e:	4413      	add	r3, r2
 8011360:	00db      	lsls	r3, r3, #3
 8011362:	3308      	adds	r3, #8
 8011364:	4a16      	ldr	r2, [pc, #88]	; (80113c0 <etharp_output_to_arp_index+0x124>)
 8011366:	4413      	add	r3, r2
 8011368:	3304      	adds	r3, #4
 801136a:	461a      	mov	r2, r3
 801136c:	68f8      	ldr	r0, [r7, #12]
 801136e:	f000 fafb 	bl	8011968 <etharp_request_dst>
 8011372:	4603      	mov	r3, r0
 8011374:	2b00      	cmp	r3, #0
 8011376:	d109      	bne.n	801138c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8011378:	79fa      	ldrb	r2, [r7, #7]
 801137a:	4911      	ldr	r1, [pc, #68]	; (80113c0 <etharp_output_to_arp_index+0x124>)
 801137c:	4613      	mov	r3, r2
 801137e:	005b      	lsls	r3, r3, #1
 8011380:	4413      	add	r3, r2
 8011382:	00db      	lsls	r3, r3, #3
 8011384:	440b      	add	r3, r1
 8011386:	3314      	adds	r3, #20
 8011388:	2203      	movs	r2, #3
 801138a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801138c:	68fb      	ldr	r3, [r7, #12]
 801138e:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8011392:	79fa      	ldrb	r2, [r7, #7]
 8011394:	4613      	mov	r3, r2
 8011396:	005b      	lsls	r3, r3, #1
 8011398:	4413      	add	r3, r2
 801139a:	00db      	lsls	r3, r3, #3
 801139c:	3308      	adds	r3, #8
 801139e:	4a08      	ldr	r2, [pc, #32]	; (80113c0 <etharp_output_to_arp_index+0x124>)
 80113a0:	4413      	add	r3, r2
 80113a2:	3304      	adds	r3, #4
 80113a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80113a8:	9200      	str	r2, [sp, #0]
 80113aa:	460a      	mov	r2, r1
 80113ac:	68b9      	ldr	r1, [r7, #8]
 80113ae:	68f8      	ldr	r0, [r7, #12]
 80113b0:	f001 fe60 	bl	8013074 <ethernet_output>
 80113b4:	4603      	mov	r3, r0
}
 80113b6:	4618      	mov	r0, r3
 80113b8:	3710      	adds	r7, #16
 80113ba:	46bd      	mov	sp, r7
 80113bc:	bd80      	pop	{r7, pc}
 80113be:	bf00      	nop
 80113c0:	24000130 	.word	0x24000130
 80113c4:	08016550 	.word	0x08016550
 80113c8:	080166c0 	.word	0x080166c0
 80113cc:	080165c8 	.word	0x080165c8

080113d0 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80113d0:	b580      	push	{r7, lr}
 80113d2:	b08a      	sub	sp, #40	; 0x28
 80113d4:	af02      	add	r7, sp, #8
 80113d6:	60f8      	str	r0, [r7, #12]
 80113d8:	60b9      	str	r1, [r7, #8]
 80113da:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80113e0:	68fb      	ldr	r3, [r7, #12]
 80113e2:	2b00      	cmp	r3, #0
 80113e4:	d106      	bne.n	80113f4 <etharp_output+0x24>
 80113e6:	4b73      	ldr	r3, [pc, #460]	; (80115b4 <etharp_output+0x1e4>)
 80113e8:	f240 321e 	movw	r2, #798	; 0x31e
 80113ec:	4972      	ldr	r1, [pc, #456]	; (80115b8 <etharp_output+0x1e8>)
 80113ee:	4873      	ldr	r0, [pc, #460]	; (80115bc <etharp_output+0x1ec>)
 80113f0:	f001 fed0 	bl	8013194 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80113f4:	68bb      	ldr	r3, [r7, #8]
 80113f6:	2b00      	cmp	r3, #0
 80113f8:	d106      	bne.n	8011408 <etharp_output+0x38>
 80113fa:	4b6e      	ldr	r3, [pc, #440]	; (80115b4 <etharp_output+0x1e4>)
 80113fc:	f240 321f 	movw	r2, #799	; 0x31f
 8011400:	496f      	ldr	r1, [pc, #444]	; (80115c0 <etharp_output+0x1f0>)
 8011402:	486e      	ldr	r0, [pc, #440]	; (80115bc <etharp_output+0x1ec>)
 8011404:	f001 fec6 	bl	8013194 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	2b00      	cmp	r3, #0
 801140c:	d106      	bne.n	801141c <etharp_output+0x4c>
 801140e:	4b69      	ldr	r3, [pc, #420]	; (80115b4 <etharp_output+0x1e4>)
 8011410:	f44f 7248 	mov.w	r2, #800	; 0x320
 8011414:	496b      	ldr	r1, [pc, #428]	; (80115c4 <etharp_output+0x1f4>)
 8011416:	4869      	ldr	r0, [pc, #420]	; (80115bc <etharp_output+0x1ec>)
 8011418:	f001 febc 	bl	8013194 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	681b      	ldr	r3, [r3, #0]
 8011420:	68f9      	ldr	r1, [r7, #12]
 8011422:	4618      	mov	r0, r3
 8011424:	f000 ff1e 	bl	8012264 <ip4_addr_isbroadcast_u32>
 8011428:	4603      	mov	r3, r0
 801142a:	2b00      	cmp	r3, #0
 801142c:	d002      	beq.n	8011434 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801142e:	4b66      	ldr	r3, [pc, #408]	; (80115c8 <etharp_output+0x1f8>)
 8011430:	61fb      	str	r3, [r7, #28]
 8011432:	e0af      	b.n	8011594 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	681b      	ldr	r3, [r3, #0]
 8011438:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801143c:	2be0      	cmp	r3, #224	; 0xe0
 801143e:	d118      	bne.n	8011472 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8011440:	2301      	movs	r3, #1
 8011442:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8011444:	2300      	movs	r3, #0
 8011446:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8011448:	235e      	movs	r3, #94	; 0x5e
 801144a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	3301      	adds	r3, #1
 8011450:	781b      	ldrb	r3, [r3, #0]
 8011452:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011456:	b2db      	uxtb	r3, r3
 8011458:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	3302      	adds	r3, #2
 801145e:	781b      	ldrb	r3, [r3, #0]
 8011460:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	3303      	adds	r3, #3
 8011466:	781b      	ldrb	r3, [r3, #0]
 8011468:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801146a:	f107 0310 	add.w	r3, r7, #16
 801146e:	61fb      	str	r3, [r7, #28]
 8011470:	e090      	b.n	8011594 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	681a      	ldr	r2, [r3, #0]
 8011476:	68fb      	ldr	r3, [r7, #12]
 8011478:	3304      	adds	r3, #4
 801147a:	681b      	ldr	r3, [r3, #0]
 801147c:	405a      	eors	r2, r3
 801147e:	68fb      	ldr	r3, [r7, #12]
 8011480:	3308      	adds	r3, #8
 8011482:	681b      	ldr	r3, [r3, #0]
 8011484:	4013      	ands	r3, r2
 8011486:	2b00      	cmp	r3, #0
 8011488:	d012      	beq.n	80114b0 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	681b      	ldr	r3, [r3, #0]
 801148e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8011490:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8011494:	4293      	cmp	r3, r2
 8011496:	d00b      	beq.n	80114b0 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8011498:	68fb      	ldr	r3, [r7, #12]
 801149a:	330c      	adds	r3, #12
 801149c:	681b      	ldr	r3, [r3, #0]
 801149e:	2b00      	cmp	r3, #0
 80114a0:	d003      	beq.n	80114aa <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80114a2:	68fb      	ldr	r3, [r7, #12]
 80114a4:	330c      	adds	r3, #12
 80114a6:	61bb      	str	r3, [r7, #24]
 80114a8:	e002      	b.n	80114b0 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80114aa:	f06f 0303 	mvn.w	r3, #3
 80114ae:	e07d      	b.n	80115ac <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80114b0:	4b46      	ldr	r3, [pc, #280]	; (80115cc <etharp_output+0x1fc>)
 80114b2:	781b      	ldrb	r3, [r3, #0]
 80114b4:	4619      	mov	r1, r3
 80114b6:	4a46      	ldr	r2, [pc, #280]	; (80115d0 <etharp_output+0x200>)
 80114b8:	460b      	mov	r3, r1
 80114ba:	005b      	lsls	r3, r3, #1
 80114bc:	440b      	add	r3, r1
 80114be:	00db      	lsls	r3, r3, #3
 80114c0:	4413      	add	r3, r2
 80114c2:	3314      	adds	r3, #20
 80114c4:	781b      	ldrb	r3, [r3, #0]
 80114c6:	2b01      	cmp	r3, #1
 80114c8:	d925      	bls.n	8011516 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80114ca:	4b40      	ldr	r3, [pc, #256]	; (80115cc <etharp_output+0x1fc>)
 80114cc:	781b      	ldrb	r3, [r3, #0]
 80114ce:	4619      	mov	r1, r3
 80114d0:	4a3f      	ldr	r2, [pc, #252]	; (80115d0 <etharp_output+0x200>)
 80114d2:	460b      	mov	r3, r1
 80114d4:	005b      	lsls	r3, r3, #1
 80114d6:	440b      	add	r3, r1
 80114d8:	00db      	lsls	r3, r3, #3
 80114da:	4413      	add	r3, r2
 80114dc:	3308      	adds	r3, #8
 80114de:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80114e0:	68fa      	ldr	r2, [r7, #12]
 80114e2:	429a      	cmp	r2, r3
 80114e4:	d117      	bne.n	8011516 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80114e6:	69bb      	ldr	r3, [r7, #24]
 80114e8:	681a      	ldr	r2, [r3, #0]
 80114ea:	4b38      	ldr	r3, [pc, #224]	; (80115cc <etharp_output+0x1fc>)
 80114ec:	781b      	ldrb	r3, [r3, #0]
 80114ee:	4618      	mov	r0, r3
 80114f0:	4937      	ldr	r1, [pc, #220]	; (80115d0 <etharp_output+0x200>)
 80114f2:	4603      	mov	r3, r0
 80114f4:	005b      	lsls	r3, r3, #1
 80114f6:	4403      	add	r3, r0
 80114f8:	00db      	lsls	r3, r3, #3
 80114fa:	440b      	add	r3, r1
 80114fc:	3304      	adds	r3, #4
 80114fe:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8011500:	429a      	cmp	r2, r3
 8011502:	d108      	bne.n	8011516 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8011504:	4b31      	ldr	r3, [pc, #196]	; (80115cc <etharp_output+0x1fc>)
 8011506:	781b      	ldrb	r3, [r3, #0]
 8011508:	461a      	mov	r2, r3
 801150a:	68b9      	ldr	r1, [r7, #8]
 801150c:	68f8      	ldr	r0, [r7, #12]
 801150e:	f7ff fec5 	bl	801129c <etharp_output_to_arp_index>
 8011512:	4603      	mov	r3, r0
 8011514:	e04a      	b.n	80115ac <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8011516:	2300      	movs	r3, #0
 8011518:	75fb      	strb	r3, [r7, #23]
 801151a:	e031      	b.n	8011580 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801151c:	7dfa      	ldrb	r2, [r7, #23]
 801151e:	492c      	ldr	r1, [pc, #176]	; (80115d0 <etharp_output+0x200>)
 8011520:	4613      	mov	r3, r2
 8011522:	005b      	lsls	r3, r3, #1
 8011524:	4413      	add	r3, r2
 8011526:	00db      	lsls	r3, r3, #3
 8011528:	440b      	add	r3, r1
 801152a:	3314      	adds	r3, #20
 801152c:	781b      	ldrb	r3, [r3, #0]
 801152e:	2b01      	cmp	r3, #1
 8011530:	d923      	bls.n	801157a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8011532:	7dfa      	ldrb	r2, [r7, #23]
 8011534:	4926      	ldr	r1, [pc, #152]	; (80115d0 <etharp_output+0x200>)
 8011536:	4613      	mov	r3, r2
 8011538:	005b      	lsls	r3, r3, #1
 801153a:	4413      	add	r3, r2
 801153c:	00db      	lsls	r3, r3, #3
 801153e:	440b      	add	r3, r1
 8011540:	3308      	adds	r3, #8
 8011542:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8011544:	68fa      	ldr	r2, [r7, #12]
 8011546:	429a      	cmp	r2, r3
 8011548:	d117      	bne.n	801157a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801154a:	69bb      	ldr	r3, [r7, #24]
 801154c:	6819      	ldr	r1, [r3, #0]
 801154e:	7dfa      	ldrb	r2, [r7, #23]
 8011550:	481f      	ldr	r0, [pc, #124]	; (80115d0 <etharp_output+0x200>)
 8011552:	4613      	mov	r3, r2
 8011554:	005b      	lsls	r3, r3, #1
 8011556:	4413      	add	r3, r2
 8011558:	00db      	lsls	r3, r3, #3
 801155a:	4403      	add	r3, r0
 801155c:	3304      	adds	r3, #4
 801155e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8011560:	4299      	cmp	r1, r3
 8011562:	d10a      	bne.n	801157a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8011564:	4a19      	ldr	r2, [pc, #100]	; (80115cc <etharp_output+0x1fc>)
 8011566:	7dfb      	ldrb	r3, [r7, #23]
 8011568:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801156a:	7dfb      	ldrb	r3, [r7, #23]
 801156c:	461a      	mov	r2, r3
 801156e:	68b9      	ldr	r1, [r7, #8]
 8011570:	68f8      	ldr	r0, [r7, #12]
 8011572:	f7ff fe93 	bl	801129c <etharp_output_to_arp_index>
 8011576:	4603      	mov	r3, r0
 8011578:	e018      	b.n	80115ac <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801157a:	7dfb      	ldrb	r3, [r7, #23]
 801157c:	3301      	adds	r3, #1
 801157e:	75fb      	strb	r3, [r7, #23]
 8011580:	7dfb      	ldrb	r3, [r7, #23]
 8011582:	2b09      	cmp	r3, #9
 8011584:	d9ca      	bls.n	801151c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8011586:	68ba      	ldr	r2, [r7, #8]
 8011588:	69b9      	ldr	r1, [r7, #24]
 801158a:	68f8      	ldr	r0, [r7, #12]
 801158c:	f000 f822 	bl	80115d4 <etharp_query>
 8011590:	4603      	mov	r3, r0
 8011592:	e00b      	b.n	80115ac <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8011594:	68fb      	ldr	r3, [r7, #12]
 8011596:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801159a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801159e:	9300      	str	r3, [sp, #0]
 80115a0:	69fb      	ldr	r3, [r7, #28]
 80115a2:	68b9      	ldr	r1, [r7, #8]
 80115a4:	68f8      	ldr	r0, [r7, #12]
 80115a6:	f001 fd65 	bl	8013074 <ethernet_output>
 80115aa:	4603      	mov	r3, r0
}
 80115ac:	4618      	mov	r0, r3
 80115ae:	3720      	adds	r7, #32
 80115b0:	46bd      	mov	sp, r7
 80115b2:	bd80      	pop	{r7, pc}
 80115b4:	08016550 	.word	0x08016550
 80115b8:	080166a0 	.word	0x080166a0
 80115bc:	080165c8 	.word	0x080165c8
 80115c0:	080166f0 	.word	0x080166f0
 80115c4:	08016690 	.word	0x08016690
 80115c8:	08016d2c 	.word	0x08016d2c
 80115cc:	24000220 	.word	0x24000220
 80115d0:	24000130 	.word	0x24000130

080115d4 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80115d4:	b580      	push	{r7, lr}
 80115d6:	b08c      	sub	sp, #48	; 0x30
 80115d8:	af02      	add	r7, sp, #8
 80115da:	60f8      	str	r0, [r7, #12]
 80115dc:	60b9      	str	r1, [r7, #8]
 80115de:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80115e0:	68fb      	ldr	r3, [r7, #12]
 80115e2:	3326      	adds	r3, #38	; 0x26
 80115e4:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80115e6:	23ff      	movs	r3, #255	; 0xff
 80115e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 80115ec:	2300      	movs	r3, #0
 80115ee:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80115f0:	68bb      	ldr	r3, [r7, #8]
 80115f2:	681b      	ldr	r3, [r3, #0]
 80115f4:	68f9      	ldr	r1, [r7, #12]
 80115f6:	4618      	mov	r0, r3
 80115f8:	f000 fe34 	bl	8012264 <ip4_addr_isbroadcast_u32>
 80115fc:	4603      	mov	r3, r0
 80115fe:	2b00      	cmp	r3, #0
 8011600:	d10c      	bne.n	801161c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8011602:	68bb      	ldr	r3, [r7, #8]
 8011604:	681b      	ldr	r3, [r3, #0]
 8011606:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801160a:	2be0      	cmp	r3, #224	; 0xe0
 801160c:	d006      	beq.n	801161c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801160e:	68bb      	ldr	r3, [r7, #8]
 8011610:	2b00      	cmp	r3, #0
 8011612:	d003      	beq.n	801161c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8011614:	68bb      	ldr	r3, [r7, #8]
 8011616:	681b      	ldr	r3, [r3, #0]
 8011618:	2b00      	cmp	r3, #0
 801161a:	d102      	bne.n	8011622 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801161c:	f06f 030f 	mvn.w	r3, #15
 8011620:	e101      	b.n	8011826 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8011622:	68fa      	ldr	r2, [r7, #12]
 8011624:	2101      	movs	r1, #1
 8011626:	68b8      	ldr	r0, [r7, #8]
 8011628:	f7ff fb60 	bl	8010cec <etharp_find_entry>
 801162c:	4603      	mov	r3, r0
 801162e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8011630:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011634:	2b00      	cmp	r3, #0
 8011636:	da02      	bge.n	801163e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8011638:	8a7b      	ldrh	r3, [r7, #18]
 801163a:	b25b      	sxtb	r3, r3
 801163c:	e0f3      	b.n	8011826 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801163e:	8a7b      	ldrh	r3, [r7, #18]
 8011640:	2b7e      	cmp	r3, #126	; 0x7e
 8011642:	d906      	bls.n	8011652 <etharp_query+0x7e>
 8011644:	4b7a      	ldr	r3, [pc, #488]	; (8011830 <etharp_query+0x25c>)
 8011646:	f240 32c1 	movw	r2, #961	; 0x3c1
 801164a:	497a      	ldr	r1, [pc, #488]	; (8011834 <etharp_query+0x260>)
 801164c:	487a      	ldr	r0, [pc, #488]	; (8011838 <etharp_query+0x264>)
 801164e:	f001 fda1 	bl	8013194 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8011652:	8a7b      	ldrh	r3, [r7, #18]
 8011654:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8011656:	7c7a      	ldrb	r2, [r7, #17]
 8011658:	4978      	ldr	r1, [pc, #480]	; (801183c <etharp_query+0x268>)
 801165a:	4613      	mov	r3, r2
 801165c:	005b      	lsls	r3, r3, #1
 801165e:	4413      	add	r3, r2
 8011660:	00db      	lsls	r3, r3, #3
 8011662:	440b      	add	r3, r1
 8011664:	3314      	adds	r3, #20
 8011666:	781b      	ldrb	r3, [r3, #0]
 8011668:	2b00      	cmp	r3, #0
 801166a:	d115      	bne.n	8011698 <etharp_query+0xc4>
    is_new_entry = 1;
 801166c:	2301      	movs	r3, #1
 801166e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8011670:	7c7a      	ldrb	r2, [r7, #17]
 8011672:	4972      	ldr	r1, [pc, #456]	; (801183c <etharp_query+0x268>)
 8011674:	4613      	mov	r3, r2
 8011676:	005b      	lsls	r3, r3, #1
 8011678:	4413      	add	r3, r2
 801167a:	00db      	lsls	r3, r3, #3
 801167c:	440b      	add	r3, r1
 801167e:	3314      	adds	r3, #20
 8011680:	2201      	movs	r2, #1
 8011682:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8011684:	7c7a      	ldrb	r2, [r7, #17]
 8011686:	496d      	ldr	r1, [pc, #436]	; (801183c <etharp_query+0x268>)
 8011688:	4613      	mov	r3, r2
 801168a:	005b      	lsls	r3, r3, #1
 801168c:	4413      	add	r3, r2
 801168e:	00db      	lsls	r3, r3, #3
 8011690:	440b      	add	r3, r1
 8011692:	3308      	adds	r3, #8
 8011694:	68fa      	ldr	r2, [r7, #12]
 8011696:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8011698:	7c7a      	ldrb	r2, [r7, #17]
 801169a:	4968      	ldr	r1, [pc, #416]	; (801183c <etharp_query+0x268>)
 801169c:	4613      	mov	r3, r2
 801169e:	005b      	lsls	r3, r3, #1
 80116a0:	4413      	add	r3, r2
 80116a2:	00db      	lsls	r3, r3, #3
 80116a4:	440b      	add	r3, r1
 80116a6:	3314      	adds	r3, #20
 80116a8:	781b      	ldrb	r3, [r3, #0]
 80116aa:	2b01      	cmp	r3, #1
 80116ac:	d011      	beq.n	80116d2 <etharp_query+0xfe>
 80116ae:	7c7a      	ldrb	r2, [r7, #17]
 80116b0:	4962      	ldr	r1, [pc, #392]	; (801183c <etharp_query+0x268>)
 80116b2:	4613      	mov	r3, r2
 80116b4:	005b      	lsls	r3, r3, #1
 80116b6:	4413      	add	r3, r2
 80116b8:	00db      	lsls	r3, r3, #3
 80116ba:	440b      	add	r3, r1
 80116bc:	3314      	adds	r3, #20
 80116be:	781b      	ldrb	r3, [r3, #0]
 80116c0:	2b01      	cmp	r3, #1
 80116c2:	d806      	bhi.n	80116d2 <etharp_query+0xfe>
 80116c4:	4b5a      	ldr	r3, [pc, #360]	; (8011830 <etharp_query+0x25c>)
 80116c6:	f240 32cd 	movw	r2, #973	; 0x3cd
 80116ca:	495d      	ldr	r1, [pc, #372]	; (8011840 <etharp_query+0x26c>)
 80116cc:	485a      	ldr	r0, [pc, #360]	; (8011838 <etharp_query+0x264>)
 80116ce:	f001 fd61 	bl	8013194 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80116d2:	6a3b      	ldr	r3, [r7, #32]
 80116d4:	2b00      	cmp	r3, #0
 80116d6:	d102      	bne.n	80116de <etharp_query+0x10a>
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	2b00      	cmp	r3, #0
 80116dc:	d10c      	bne.n	80116f8 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80116de:	68b9      	ldr	r1, [r7, #8]
 80116e0:	68f8      	ldr	r0, [r7, #12]
 80116e2:	f000 f963 	bl	80119ac <etharp_request>
 80116e6:	4603      	mov	r3, r0
 80116e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	2b00      	cmp	r3, #0
 80116f0:	d102      	bne.n	80116f8 <etharp_query+0x124>
      return result;
 80116f2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80116f6:	e096      	b.n	8011826 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	2b00      	cmp	r3, #0
 80116fc:	d106      	bne.n	801170c <etharp_query+0x138>
 80116fe:	4b4c      	ldr	r3, [pc, #304]	; (8011830 <etharp_query+0x25c>)
 8011700:	f240 32e1 	movw	r2, #993	; 0x3e1
 8011704:	494f      	ldr	r1, [pc, #316]	; (8011844 <etharp_query+0x270>)
 8011706:	484c      	ldr	r0, [pc, #304]	; (8011838 <etharp_query+0x264>)
 8011708:	f001 fd44 	bl	8013194 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801170c:	7c7a      	ldrb	r2, [r7, #17]
 801170e:	494b      	ldr	r1, [pc, #300]	; (801183c <etharp_query+0x268>)
 8011710:	4613      	mov	r3, r2
 8011712:	005b      	lsls	r3, r3, #1
 8011714:	4413      	add	r3, r2
 8011716:	00db      	lsls	r3, r3, #3
 8011718:	440b      	add	r3, r1
 801171a:	3314      	adds	r3, #20
 801171c:	781b      	ldrb	r3, [r3, #0]
 801171e:	2b01      	cmp	r3, #1
 8011720:	d917      	bls.n	8011752 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8011722:	4a49      	ldr	r2, [pc, #292]	; (8011848 <etharp_query+0x274>)
 8011724:	7c7b      	ldrb	r3, [r7, #17]
 8011726:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8011728:	7c7a      	ldrb	r2, [r7, #17]
 801172a:	4613      	mov	r3, r2
 801172c:	005b      	lsls	r3, r3, #1
 801172e:	4413      	add	r3, r2
 8011730:	00db      	lsls	r3, r3, #3
 8011732:	3308      	adds	r3, #8
 8011734:	4a41      	ldr	r2, [pc, #260]	; (801183c <etharp_query+0x268>)
 8011736:	4413      	add	r3, r2
 8011738:	3304      	adds	r3, #4
 801173a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801173e:	9200      	str	r2, [sp, #0]
 8011740:	697a      	ldr	r2, [r7, #20]
 8011742:	6879      	ldr	r1, [r7, #4]
 8011744:	68f8      	ldr	r0, [r7, #12]
 8011746:	f001 fc95 	bl	8013074 <ethernet_output>
 801174a:	4603      	mov	r3, r0
 801174c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011750:	e067      	b.n	8011822 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8011752:	7c7a      	ldrb	r2, [r7, #17]
 8011754:	4939      	ldr	r1, [pc, #228]	; (801183c <etharp_query+0x268>)
 8011756:	4613      	mov	r3, r2
 8011758:	005b      	lsls	r3, r3, #1
 801175a:	4413      	add	r3, r2
 801175c:	00db      	lsls	r3, r3, #3
 801175e:	440b      	add	r3, r1
 8011760:	3314      	adds	r3, #20
 8011762:	781b      	ldrb	r3, [r3, #0]
 8011764:	2b01      	cmp	r3, #1
 8011766:	d15c      	bne.n	8011822 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8011768:	2300      	movs	r3, #0
 801176a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8011770:	e01c      	b.n	80117ac <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8011772:	69fb      	ldr	r3, [r7, #28]
 8011774:	895a      	ldrh	r2, [r3, #10]
 8011776:	69fb      	ldr	r3, [r7, #28]
 8011778:	891b      	ldrh	r3, [r3, #8]
 801177a:	429a      	cmp	r2, r3
 801177c:	d10a      	bne.n	8011794 <etharp_query+0x1c0>
 801177e:	69fb      	ldr	r3, [r7, #28]
 8011780:	681b      	ldr	r3, [r3, #0]
 8011782:	2b00      	cmp	r3, #0
 8011784:	d006      	beq.n	8011794 <etharp_query+0x1c0>
 8011786:	4b2a      	ldr	r3, [pc, #168]	; (8011830 <etharp_query+0x25c>)
 8011788:	f240 32f1 	movw	r2, #1009	; 0x3f1
 801178c:	492f      	ldr	r1, [pc, #188]	; (801184c <etharp_query+0x278>)
 801178e:	482a      	ldr	r0, [pc, #168]	; (8011838 <etharp_query+0x264>)
 8011790:	f001 fd00 	bl	8013194 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8011794:	69fb      	ldr	r3, [r7, #28]
 8011796:	7b1b      	ldrb	r3, [r3, #12]
 8011798:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801179c:	2b00      	cmp	r3, #0
 801179e:	d002      	beq.n	80117a6 <etharp_query+0x1d2>
        copy_needed = 1;
 80117a0:	2301      	movs	r3, #1
 80117a2:	61bb      	str	r3, [r7, #24]
        break;
 80117a4:	e005      	b.n	80117b2 <etharp_query+0x1de>
      }
      p = p->next;
 80117a6:	69fb      	ldr	r3, [r7, #28]
 80117a8:	681b      	ldr	r3, [r3, #0]
 80117aa:	61fb      	str	r3, [r7, #28]
    while (p) {
 80117ac:	69fb      	ldr	r3, [r7, #28]
 80117ae:	2b00      	cmp	r3, #0
 80117b0:	d1df      	bne.n	8011772 <etharp_query+0x19e>
    }
    if (copy_needed) {
 80117b2:	69bb      	ldr	r3, [r7, #24]
 80117b4:	2b00      	cmp	r3, #0
 80117b6:	d007      	beq.n	80117c8 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80117b8:	687a      	ldr	r2, [r7, #4]
 80117ba:	f44f 7120 	mov.w	r1, #640	; 0x280
 80117be:	200e      	movs	r0, #14
 80117c0:	f7f8 fe34 	bl	800a42c <pbuf_clone>
 80117c4:	61f8      	str	r0, [r7, #28]
 80117c6:	e004      	b.n	80117d2 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80117cc:	69f8      	ldr	r0, [r7, #28]
 80117ce:	f7f8 fc61 	bl	800a094 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80117d2:	69fb      	ldr	r3, [r7, #28]
 80117d4:	2b00      	cmp	r3, #0
 80117d6:	d021      	beq.n	801181c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80117d8:	7c7a      	ldrb	r2, [r7, #17]
 80117da:	4918      	ldr	r1, [pc, #96]	; (801183c <etharp_query+0x268>)
 80117dc:	4613      	mov	r3, r2
 80117de:	005b      	lsls	r3, r3, #1
 80117e0:	4413      	add	r3, r2
 80117e2:	00db      	lsls	r3, r3, #3
 80117e4:	440b      	add	r3, r1
 80117e6:	681b      	ldr	r3, [r3, #0]
 80117e8:	2b00      	cmp	r3, #0
 80117ea:	d00a      	beq.n	8011802 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80117ec:	7c7a      	ldrb	r2, [r7, #17]
 80117ee:	4913      	ldr	r1, [pc, #76]	; (801183c <etharp_query+0x268>)
 80117f0:	4613      	mov	r3, r2
 80117f2:	005b      	lsls	r3, r3, #1
 80117f4:	4413      	add	r3, r2
 80117f6:	00db      	lsls	r3, r3, #3
 80117f8:	440b      	add	r3, r1
 80117fa:	681b      	ldr	r3, [r3, #0]
 80117fc:	4618      	mov	r0, r3
 80117fe:	f7f8 fba9 	bl	8009f54 <pbuf_free>
      }
      arp_table[i].q = p;
 8011802:	7c7a      	ldrb	r2, [r7, #17]
 8011804:	490d      	ldr	r1, [pc, #52]	; (801183c <etharp_query+0x268>)
 8011806:	4613      	mov	r3, r2
 8011808:	005b      	lsls	r3, r3, #1
 801180a:	4413      	add	r3, r2
 801180c:	00db      	lsls	r3, r3, #3
 801180e:	440b      	add	r3, r1
 8011810:	69fa      	ldr	r2, [r7, #28]
 8011812:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8011814:	2300      	movs	r3, #0
 8011816:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801181a:	e002      	b.n	8011822 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801181c:	23ff      	movs	r3, #255	; 0xff
 801181e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8011822:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8011826:	4618      	mov	r0, r3
 8011828:	3728      	adds	r7, #40	; 0x28
 801182a:	46bd      	mov	sp, r7
 801182c:	bd80      	pop	{r7, pc}
 801182e:	bf00      	nop
 8011830:	08016550 	.word	0x08016550
 8011834:	080166fc 	.word	0x080166fc
 8011838:	080165c8 	.word	0x080165c8
 801183c:	24000130 	.word	0x24000130
 8011840:	0801670c 	.word	0x0801670c
 8011844:	080166f0 	.word	0x080166f0
 8011848:	24000220 	.word	0x24000220
 801184c:	08016734 	.word	0x08016734

08011850 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8011850:	b580      	push	{r7, lr}
 8011852:	b08a      	sub	sp, #40	; 0x28
 8011854:	af02      	add	r7, sp, #8
 8011856:	60f8      	str	r0, [r7, #12]
 8011858:	60b9      	str	r1, [r7, #8]
 801185a:	607a      	str	r2, [r7, #4]
 801185c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801185e:	2300      	movs	r3, #0
 8011860:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8011862:	68fb      	ldr	r3, [r7, #12]
 8011864:	2b00      	cmp	r3, #0
 8011866:	d106      	bne.n	8011876 <etharp_raw+0x26>
 8011868:	4b3a      	ldr	r3, [pc, #232]	; (8011954 <etharp_raw+0x104>)
 801186a:	f240 4257 	movw	r2, #1111	; 0x457
 801186e:	493a      	ldr	r1, [pc, #232]	; (8011958 <etharp_raw+0x108>)
 8011870:	483a      	ldr	r0, [pc, #232]	; (801195c <etharp_raw+0x10c>)
 8011872:	f001 fc8f 	bl	8013194 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8011876:	f44f 7220 	mov.w	r2, #640	; 0x280
 801187a:	211c      	movs	r1, #28
 801187c:	200e      	movs	r0, #14
 801187e:	f7f8 f885 	bl	800998c <pbuf_alloc>
 8011882:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8011884:	69bb      	ldr	r3, [r7, #24]
 8011886:	2b00      	cmp	r3, #0
 8011888:	d102      	bne.n	8011890 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801188a:	f04f 33ff 	mov.w	r3, #4294967295
 801188e:	e05d      	b.n	801194c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8011890:	69bb      	ldr	r3, [r7, #24]
 8011892:	895b      	ldrh	r3, [r3, #10]
 8011894:	2b1b      	cmp	r3, #27
 8011896:	d806      	bhi.n	80118a6 <etharp_raw+0x56>
 8011898:	4b2e      	ldr	r3, [pc, #184]	; (8011954 <etharp_raw+0x104>)
 801189a:	f240 4262 	movw	r2, #1122	; 0x462
 801189e:	4930      	ldr	r1, [pc, #192]	; (8011960 <etharp_raw+0x110>)
 80118a0:	482e      	ldr	r0, [pc, #184]	; (801195c <etharp_raw+0x10c>)
 80118a2:	f001 fc77 	bl	8013194 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80118a6:	69bb      	ldr	r3, [r7, #24]
 80118a8:	685b      	ldr	r3, [r3, #4]
 80118aa:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80118ac:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80118ae:	4618      	mov	r0, r3
 80118b0:	f7f6 ff2a 	bl	8008708 <lwip_htons>
 80118b4:	4603      	mov	r3, r0
 80118b6:	461a      	mov	r2, r3
 80118b8:	697b      	ldr	r3, [r7, #20]
 80118ba:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80118bc:	68fb      	ldr	r3, [r7, #12]
 80118be:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80118c2:	2b06      	cmp	r3, #6
 80118c4:	d006      	beq.n	80118d4 <etharp_raw+0x84>
 80118c6:	4b23      	ldr	r3, [pc, #140]	; (8011954 <etharp_raw+0x104>)
 80118c8:	f240 4269 	movw	r2, #1129	; 0x469
 80118cc:	4925      	ldr	r1, [pc, #148]	; (8011964 <etharp_raw+0x114>)
 80118ce:	4823      	ldr	r0, [pc, #140]	; (801195c <etharp_raw+0x10c>)
 80118d0:	f001 fc60 	bl	8013194 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80118d4:	697b      	ldr	r3, [r7, #20]
 80118d6:	3308      	adds	r3, #8
 80118d8:	2206      	movs	r2, #6
 80118da:	6839      	ldr	r1, [r7, #0]
 80118dc:	4618      	mov	r0, r3
 80118de:	f001 fc43 	bl	8013168 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80118e2:	697b      	ldr	r3, [r7, #20]
 80118e4:	3312      	adds	r3, #18
 80118e6:	2206      	movs	r2, #6
 80118e8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80118ea:	4618      	mov	r0, r3
 80118ec:	f001 fc3c 	bl	8013168 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80118f0:	697b      	ldr	r3, [r7, #20]
 80118f2:	330e      	adds	r3, #14
 80118f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80118f6:	6812      	ldr	r2, [r2, #0]
 80118f8:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80118fa:	697b      	ldr	r3, [r7, #20]
 80118fc:	3318      	adds	r3, #24
 80118fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011900:	6812      	ldr	r2, [r2, #0]
 8011902:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8011904:	697b      	ldr	r3, [r7, #20]
 8011906:	2200      	movs	r2, #0
 8011908:	701a      	strb	r2, [r3, #0]
 801190a:	2200      	movs	r2, #0
 801190c:	f042 0201 	orr.w	r2, r2, #1
 8011910:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8011912:	697b      	ldr	r3, [r7, #20]
 8011914:	2200      	movs	r2, #0
 8011916:	f042 0208 	orr.w	r2, r2, #8
 801191a:	709a      	strb	r2, [r3, #2]
 801191c:	2200      	movs	r2, #0
 801191e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8011920:	697b      	ldr	r3, [r7, #20]
 8011922:	2206      	movs	r2, #6
 8011924:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8011926:	697b      	ldr	r3, [r7, #20]
 8011928:	2204      	movs	r2, #4
 801192a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801192c:	f640 0306 	movw	r3, #2054	; 0x806
 8011930:	9300      	str	r3, [sp, #0]
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	68ba      	ldr	r2, [r7, #8]
 8011936:	69b9      	ldr	r1, [r7, #24]
 8011938:	68f8      	ldr	r0, [r7, #12]
 801193a:	f001 fb9b 	bl	8013074 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801193e:	69b8      	ldr	r0, [r7, #24]
 8011940:	f7f8 fb08 	bl	8009f54 <pbuf_free>
  p = NULL;
 8011944:	2300      	movs	r3, #0
 8011946:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8011948:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801194c:	4618      	mov	r0, r3
 801194e:	3720      	adds	r7, #32
 8011950:	46bd      	mov	sp, r7
 8011952:	bd80      	pop	{r7, pc}
 8011954:	08016550 	.word	0x08016550
 8011958:	080166a0 	.word	0x080166a0
 801195c:	080165c8 	.word	0x080165c8
 8011960:	08016750 	.word	0x08016750
 8011964:	08016784 	.word	0x08016784

08011968 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8011968:	b580      	push	{r7, lr}
 801196a:	b088      	sub	sp, #32
 801196c:	af04      	add	r7, sp, #16
 801196e:	60f8      	str	r0, [r7, #12]
 8011970:	60b9      	str	r1, [r7, #8]
 8011972:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8011974:	68fb      	ldr	r3, [r7, #12]
 8011976:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801197a:	68fb      	ldr	r3, [r7, #12]
 801197c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8011980:	68fb      	ldr	r3, [r7, #12]
 8011982:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8011984:	2201      	movs	r2, #1
 8011986:	9203      	str	r2, [sp, #12]
 8011988:	68ba      	ldr	r2, [r7, #8]
 801198a:	9202      	str	r2, [sp, #8]
 801198c:	4a06      	ldr	r2, [pc, #24]	; (80119a8 <etharp_request_dst+0x40>)
 801198e:	9201      	str	r2, [sp, #4]
 8011990:	9300      	str	r3, [sp, #0]
 8011992:	4603      	mov	r3, r0
 8011994:	687a      	ldr	r2, [r7, #4]
 8011996:	68f8      	ldr	r0, [r7, #12]
 8011998:	f7ff ff5a 	bl	8011850 <etharp_raw>
 801199c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801199e:	4618      	mov	r0, r3
 80119a0:	3710      	adds	r7, #16
 80119a2:	46bd      	mov	sp, r7
 80119a4:	bd80      	pop	{r7, pc}
 80119a6:	bf00      	nop
 80119a8:	08016d34 	.word	0x08016d34

080119ac <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80119ac:	b580      	push	{r7, lr}
 80119ae:	b082      	sub	sp, #8
 80119b0:	af00      	add	r7, sp, #0
 80119b2:	6078      	str	r0, [r7, #4]
 80119b4:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80119b6:	4a05      	ldr	r2, [pc, #20]	; (80119cc <etharp_request+0x20>)
 80119b8:	6839      	ldr	r1, [r7, #0]
 80119ba:	6878      	ldr	r0, [r7, #4]
 80119bc:	f7ff ffd4 	bl	8011968 <etharp_request_dst>
 80119c0:	4603      	mov	r3, r0
}
 80119c2:	4618      	mov	r0, r3
 80119c4:	3708      	adds	r7, #8
 80119c6:	46bd      	mov	sp, r7
 80119c8:	bd80      	pop	{r7, pc}
 80119ca:	bf00      	nop
 80119cc:	08016d2c 	.word	0x08016d2c

080119d0 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80119d0:	b580      	push	{r7, lr}
 80119d2:	b08e      	sub	sp, #56	; 0x38
 80119d4:	af04      	add	r7, sp, #16
 80119d6:	6078      	str	r0, [r7, #4]
 80119d8:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80119da:	4b87      	ldr	r3, [pc, #540]	; (8011bf8 <icmp_input+0x228>)
 80119dc:	689b      	ldr	r3, [r3, #8]
 80119de:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80119e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119e2:	781b      	ldrb	r3, [r3, #0]
 80119e4:	f003 030f 	and.w	r3, r3, #15
 80119e8:	b2db      	uxtb	r3, r3
 80119ea:	009b      	lsls	r3, r3, #2
 80119ec:	b2db      	uxtb	r3, r3
 80119ee:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80119f0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80119f2:	2b13      	cmp	r3, #19
 80119f4:	f240 80e8 	bls.w	8011bc8 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	895b      	ldrh	r3, [r3, #10]
 80119fc:	2b03      	cmp	r3, #3
 80119fe:	f240 80e5 	bls.w	8011bcc <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	685b      	ldr	r3, [r3, #4]
 8011a06:	781b      	ldrb	r3, [r3, #0]
 8011a08:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8011a0c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8011a10:	2b00      	cmp	r3, #0
 8011a12:	f000 80d2 	beq.w	8011bba <icmp_input+0x1ea>
 8011a16:	2b08      	cmp	r3, #8
 8011a18:	f040 80d2 	bne.w	8011bc0 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8011a1c:	4b77      	ldr	r3, [pc, #476]	; (8011bfc <icmp_input+0x22c>)
 8011a1e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8011a20:	4b75      	ldr	r3, [pc, #468]	; (8011bf8 <icmp_input+0x228>)
 8011a22:	695b      	ldr	r3, [r3, #20]
 8011a24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011a28:	2be0      	cmp	r3, #224	; 0xe0
 8011a2a:	f000 80d6 	beq.w	8011bda <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8011a2e:	4b72      	ldr	r3, [pc, #456]	; (8011bf8 <icmp_input+0x228>)
 8011a30:	695b      	ldr	r3, [r3, #20]
 8011a32:	4a71      	ldr	r2, [pc, #452]	; (8011bf8 <icmp_input+0x228>)
 8011a34:	6812      	ldr	r2, [r2, #0]
 8011a36:	4611      	mov	r1, r2
 8011a38:	4618      	mov	r0, r3
 8011a3a:	f000 fc13 	bl	8012264 <ip4_addr_isbroadcast_u32>
 8011a3e:	4603      	mov	r3, r0
 8011a40:	2b00      	cmp	r3, #0
 8011a42:	f040 80cc 	bne.w	8011bde <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	891b      	ldrh	r3, [r3, #8]
 8011a4a:	2b07      	cmp	r3, #7
 8011a4c:	f240 80c0 	bls.w	8011bd0 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 8011a50:	6878      	ldr	r0, [r7, #4]
 8011a52:	f7f6 fef6 	bl	8008842 <inet_chksum_pbuf>
 8011a56:	4603      	mov	r3, r0
 8011a58:	2b00      	cmp	r3, #0
 8011a5a:	d003      	beq.n	8011a64 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 8011a5c:	6878      	ldr	r0, [r7, #4]
 8011a5e:	f7f8 fa79 	bl	8009f54 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 8011a62:	e0c5      	b.n	8011bf0 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8011a64:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011a66:	330e      	adds	r3, #14
 8011a68:	4619      	mov	r1, r3
 8011a6a:	6878      	ldr	r0, [r7, #4]
 8011a6c:	f7f8 f9dc 	bl	8009e28 <pbuf_add_header>
 8011a70:	4603      	mov	r3, r0
 8011a72:	2b00      	cmp	r3, #0
 8011a74:	d04b      	beq.n	8011b0e <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	891a      	ldrh	r2, [r3, #8]
 8011a7a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011a7c:	4413      	add	r3, r2
 8011a7e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	891b      	ldrh	r3, [r3, #8]
 8011a84:	8b7a      	ldrh	r2, [r7, #26]
 8011a86:	429a      	cmp	r2, r3
 8011a88:	f0c0 80ab 	bcc.w	8011be2 <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8011a8c:	8b7b      	ldrh	r3, [r7, #26]
 8011a8e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011a92:	4619      	mov	r1, r3
 8011a94:	200e      	movs	r0, #14
 8011a96:	f7f7 ff79 	bl	800998c <pbuf_alloc>
 8011a9a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8011a9c:	697b      	ldr	r3, [r7, #20]
 8011a9e:	2b00      	cmp	r3, #0
 8011aa0:	f000 80a1 	beq.w	8011be6 <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8011aa4:	697b      	ldr	r3, [r7, #20]
 8011aa6:	895b      	ldrh	r3, [r3, #10]
 8011aa8:	461a      	mov	r2, r3
 8011aaa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011aac:	3308      	adds	r3, #8
 8011aae:	429a      	cmp	r2, r3
 8011ab0:	d203      	bcs.n	8011aba <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8011ab2:	6978      	ldr	r0, [r7, #20]
 8011ab4:	f7f8 fa4e 	bl	8009f54 <pbuf_free>
          goto icmperr;
 8011ab8:	e096      	b.n	8011be8 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8011aba:	697b      	ldr	r3, [r7, #20]
 8011abc:	685b      	ldr	r3, [r3, #4]
 8011abe:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8011ac0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011ac2:	4618      	mov	r0, r3
 8011ac4:	f001 fb50 	bl	8013168 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8011ac8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011aca:	4619      	mov	r1, r3
 8011acc:	6978      	ldr	r0, [r7, #20]
 8011ace:	f7f8 f9bb 	bl	8009e48 <pbuf_remove_header>
 8011ad2:	4603      	mov	r3, r0
 8011ad4:	2b00      	cmp	r3, #0
 8011ad6:	d009      	beq.n	8011aec <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8011ad8:	4b49      	ldr	r3, [pc, #292]	; (8011c00 <icmp_input+0x230>)
 8011ada:	22b6      	movs	r2, #182	; 0xb6
 8011adc:	4949      	ldr	r1, [pc, #292]	; (8011c04 <icmp_input+0x234>)
 8011ade:	484a      	ldr	r0, [pc, #296]	; (8011c08 <icmp_input+0x238>)
 8011ae0:	f001 fb58 	bl	8013194 <iprintf>
          pbuf_free(r);
 8011ae4:	6978      	ldr	r0, [r7, #20]
 8011ae6:	f7f8 fa35 	bl	8009f54 <pbuf_free>
          goto icmperr;
 8011aea:	e07d      	b.n	8011be8 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8011aec:	6879      	ldr	r1, [r7, #4]
 8011aee:	6978      	ldr	r0, [r7, #20]
 8011af0:	f7f8 fb58 	bl	800a1a4 <pbuf_copy>
 8011af4:	4603      	mov	r3, r0
 8011af6:	2b00      	cmp	r3, #0
 8011af8:	d003      	beq.n	8011b02 <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8011afa:	6978      	ldr	r0, [r7, #20]
 8011afc:	f7f8 fa2a 	bl	8009f54 <pbuf_free>
          goto icmperr;
 8011b00:	e072      	b.n	8011be8 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 8011b02:	6878      	ldr	r0, [r7, #4]
 8011b04:	f7f8 fa26 	bl	8009f54 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8011b08:	697b      	ldr	r3, [r7, #20]
 8011b0a:	607b      	str	r3, [r7, #4]
 8011b0c:	e00f      	b.n	8011b2e <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8011b0e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011b10:	330e      	adds	r3, #14
 8011b12:	4619      	mov	r1, r3
 8011b14:	6878      	ldr	r0, [r7, #4]
 8011b16:	f7f8 f997 	bl	8009e48 <pbuf_remove_header>
 8011b1a:	4603      	mov	r3, r0
 8011b1c:	2b00      	cmp	r3, #0
 8011b1e:	d006      	beq.n	8011b2e <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8011b20:	4b37      	ldr	r3, [pc, #220]	; (8011c00 <icmp_input+0x230>)
 8011b22:	22c7      	movs	r2, #199	; 0xc7
 8011b24:	4939      	ldr	r1, [pc, #228]	; (8011c0c <icmp_input+0x23c>)
 8011b26:	4838      	ldr	r0, [pc, #224]	; (8011c08 <icmp_input+0x238>)
 8011b28:	f001 fb34 	bl	8013194 <iprintf>
          goto icmperr;
 8011b2c:	e05c      	b.n	8011be8 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	685b      	ldr	r3, [r3, #4]
 8011b32:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8011b34:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011b36:	4619      	mov	r1, r3
 8011b38:	6878      	ldr	r0, [r7, #4]
 8011b3a:	f7f8 f975 	bl	8009e28 <pbuf_add_header>
 8011b3e:	4603      	mov	r3, r0
 8011b40:	2b00      	cmp	r3, #0
 8011b42:	d13c      	bne.n	8011bbe <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8011b44:	687b      	ldr	r3, [r7, #4]
 8011b46:	685b      	ldr	r3, [r3, #4]
 8011b48:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8011b4a:	69fb      	ldr	r3, [r7, #28]
 8011b4c:	681a      	ldr	r2, [r3, #0]
 8011b4e:	68fb      	ldr	r3, [r7, #12]
 8011b50:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8011b52:	4b29      	ldr	r3, [pc, #164]	; (8011bf8 <icmp_input+0x228>)
 8011b54:	691a      	ldr	r2, [r3, #16]
 8011b56:	68fb      	ldr	r3, [r7, #12]
 8011b58:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8011b5a:	693b      	ldr	r3, [r7, #16]
 8011b5c:	2200      	movs	r2, #0
 8011b5e:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8011b60:	693b      	ldr	r3, [r7, #16]
 8011b62:	885b      	ldrh	r3, [r3, #2]
 8011b64:	b29b      	uxth	r3, r3
 8011b66:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8011b6a:	4293      	cmp	r3, r2
 8011b6c:	d907      	bls.n	8011b7e <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 8011b6e:	693b      	ldr	r3, [r7, #16]
 8011b70:	885b      	ldrh	r3, [r3, #2]
 8011b72:	b29b      	uxth	r3, r3
 8011b74:	3309      	adds	r3, #9
 8011b76:	b29a      	uxth	r2, r3
 8011b78:	693b      	ldr	r3, [r7, #16]
 8011b7a:	805a      	strh	r2, [r3, #2]
 8011b7c:	e006      	b.n	8011b8c <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 8011b7e:	693b      	ldr	r3, [r7, #16]
 8011b80:	885b      	ldrh	r3, [r3, #2]
 8011b82:	b29b      	uxth	r3, r3
 8011b84:	3308      	adds	r3, #8
 8011b86:	b29a      	uxth	r2, r3
 8011b88:	693b      	ldr	r3, [r7, #16]
 8011b8a:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8011b8c:	68fb      	ldr	r3, [r7, #12]
 8011b8e:	22ff      	movs	r2, #255	; 0xff
 8011b90:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8011b92:	68fb      	ldr	r3, [r7, #12]
 8011b94:	2200      	movs	r2, #0
 8011b96:	729a      	strb	r2, [r3, #10]
 8011b98:	2200      	movs	r2, #0
 8011b9a:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8011b9c:	683b      	ldr	r3, [r7, #0]
 8011b9e:	9302      	str	r3, [sp, #8]
 8011ba0:	2301      	movs	r3, #1
 8011ba2:	9301      	str	r3, [sp, #4]
 8011ba4:	2300      	movs	r3, #0
 8011ba6:	9300      	str	r3, [sp, #0]
 8011ba8:	23ff      	movs	r3, #255	; 0xff
 8011baa:	2200      	movs	r2, #0
 8011bac:	69f9      	ldr	r1, [r7, #28]
 8011bae:	6878      	ldr	r0, [r7, #4]
 8011bb0:	f000 fa80 	bl	80120b4 <ip4_output_if>
 8011bb4:	4603      	mov	r3, r0
 8011bb6:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8011bb8:	e001      	b.n	8011bbe <icmp_input+0x1ee>
      break;
 8011bba:	bf00      	nop
 8011bbc:	e000      	b.n	8011bc0 <icmp_input+0x1f0>
      break;
 8011bbe:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8011bc0:	6878      	ldr	r0, [r7, #4]
 8011bc2:	f7f8 f9c7 	bl	8009f54 <pbuf_free>
  return;
 8011bc6:	e013      	b.n	8011bf0 <icmp_input+0x220>
    goto lenerr;
 8011bc8:	bf00      	nop
 8011bca:	e002      	b.n	8011bd2 <icmp_input+0x202>
    goto lenerr;
 8011bcc:	bf00      	nop
 8011bce:	e000      	b.n	8011bd2 <icmp_input+0x202>
        goto lenerr;
 8011bd0:	bf00      	nop
lenerr:
  pbuf_free(p);
 8011bd2:	6878      	ldr	r0, [r7, #4]
 8011bd4:	f7f8 f9be 	bl	8009f54 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8011bd8:	e00a      	b.n	8011bf0 <icmp_input+0x220>
        goto icmperr;
 8011bda:	bf00      	nop
 8011bdc:	e004      	b.n	8011be8 <icmp_input+0x218>
        goto icmperr;
 8011bde:	bf00      	nop
 8011be0:	e002      	b.n	8011be8 <icmp_input+0x218>
          goto icmperr;
 8011be2:	bf00      	nop
 8011be4:	e000      	b.n	8011be8 <icmp_input+0x218>
          goto icmperr;
 8011be6:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8011be8:	6878      	ldr	r0, [r7, #4]
 8011bea:	f7f8 f9b3 	bl	8009f54 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8011bee:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8011bf0:	3728      	adds	r7, #40	; 0x28
 8011bf2:	46bd      	mov	sp, r7
 8011bf4:	bd80      	pop	{r7, pc}
 8011bf6:	bf00      	nop
 8011bf8:	240008e4 	.word	0x240008e4
 8011bfc:	240008f8 	.word	0x240008f8
 8011c00:	080167c8 	.word	0x080167c8
 8011c04:	08016800 	.word	0x08016800
 8011c08:	08016838 	.word	0x08016838
 8011c0c:	08016860 	.word	0x08016860

08011c10 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8011c10:	b580      	push	{r7, lr}
 8011c12:	b082      	sub	sp, #8
 8011c14:	af00      	add	r7, sp, #0
 8011c16:	6078      	str	r0, [r7, #4]
 8011c18:	460b      	mov	r3, r1
 8011c1a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8011c1c:	78fb      	ldrb	r3, [r7, #3]
 8011c1e:	461a      	mov	r2, r3
 8011c20:	2103      	movs	r1, #3
 8011c22:	6878      	ldr	r0, [r7, #4]
 8011c24:	f000 f814 	bl	8011c50 <icmp_send_response>
}
 8011c28:	bf00      	nop
 8011c2a:	3708      	adds	r7, #8
 8011c2c:	46bd      	mov	sp, r7
 8011c2e:	bd80      	pop	{r7, pc}

08011c30 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8011c30:	b580      	push	{r7, lr}
 8011c32:	b082      	sub	sp, #8
 8011c34:	af00      	add	r7, sp, #0
 8011c36:	6078      	str	r0, [r7, #4]
 8011c38:	460b      	mov	r3, r1
 8011c3a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8011c3c:	78fb      	ldrb	r3, [r7, #3]
 8011c3e:	461a      	mov	r2, r3
 8011c40:	210b      	movs	r1, #11
 8011c42:	6878      	ldr	r0, [r7, #4]
 8011c44:	f000 f804 	bl	8011c50 <icmp_send_response>
}
 8011c48:	bf00      	nop
 8011c4a:	3708      	adds	r7, #8
 8011c4c:	46bd      	mov	sp, r7
 8011c4e:	bd80      	pop	{r7, pc}

08011c50 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8011c50:	b580      	push	{r7, lr}
 8011c52:	b08c      	sub	sp, #48	; 0x30
 8011c54:	af04      	add	r7, sp, #16
 8011c56:	6078      	str	r0, [r7, #4]
 8011c58:	460b      	mov	r3, r1
 8011c5a:	70fb      	strb	r3, [r7, #3]
 8011c5c:	4613      	mov	r3, r2
 8011c5e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8011c60:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011c64:	2124      	movs	r1, #36	; 0x24
 8011c66:	2022      	movs	r0, #34	; 0x22
 8011c68:	f7f7 fe90 	bl	800998c <pbuf_alloc>
 8011c6c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8011c6e:	69fb      	ldr	r3, [r7, #28]
 8011c70:	2b00      	cmp	r3, #0
 8011c72:	d056      	beq.n	8011d22 <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8011c74:	69fb      	ldr	r3, [r7, #28]
 8011c76:	895b      	ldrh	r3, [r3, #10]
 8011c78:	2b23      	cmp	r3, #35	; 0x23
 8011c7a:	d806      	bhi.n	8011c8a <icmp_send_response+0x3a>
 8011c7c:	4b2b      	ldr	r3, [pc, #172]	; (8011d2c <icmp_send_response+0xdc>)
 8011c7e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8011c82:	492b      	ldr	r1, [pc, #172]	; (8011d30 <icmp_send_response+0xe0>)
 8011c84:	482b      	ldr	r0, [pc, #172]	; (8011d34 <icmp_send_response+0xe4>)
 8011c86:	f001 fa85 	bl	8013194 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	685b      	ldr	r3, [r3, #4]
 8011c8e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8011c90:	69fb      	ldr	r3, [r7, #28]
 8011c92:	685b      	ldr	r3, [r3, #4]
 8011c94:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8011c96:	697b      	ldr	r3, [r7, #20]
 8011c98:	78fa      	ldrb	r2, [r7, #3]
 8011c9a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8011c9c:	697b      	ldr	r3, [r7, #20]
 8011c9e:	78ba      	ldrb	r2, [r7, #2]
 8011ca0:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8011ca2:	697b      	ldr	r3, [r7, #20]
 8011ca4:	2200      	movs	r2, #0
 8011ca6:	711a      	strb	r2, [r3, #4]
 8011ca8:	2200      	movs	r2, #0
 8011caa:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8011cac:	697b      	ldr	r3, [r7, #20]
 8011cae:	2200      	movs	r2, #0
 8011cb0:	719a      	strb	r2, [r3, #6]
 8011cb2:	2200      	movs	r2, #0
 8011cb4:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8011cb6:	69fb      	ldr	r3, [r7, #28]
 8011cb8:	685b      	ldr	r3, [r3, #4]
 8011cba:	f103 0008 	add.w	r0, r3, #8
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	685b      	ldr	r3, [r3, #4]
 8011cc2:	221c      	movs	r2, #28
 8011cc4:	4619      	mov	r1, r3
 8011cc6:	f001 fa4f 	bl	8013168 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8011cca:	69bb      	ldr	r3, [r7, #24]
 8011ccc:	68db      	ldr	r3, [r3, #12]
 8011cce:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8011cd0:	f107 030c 	add.w	r3, r7, #12
 8011cd4:	4618      	mov	r0, r3
 8011cd6:	f000 f82f 	bl	8011d38 <ip4_route>
 8011cda:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8011cdc:	693b      	ldr	r3, [r7, #16]
 8011cde:	2b00      	cmp	r3, #0
 8011ce0:	d01b      	beq.n	8011d1a <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8011ce2:	697b      	ldr	r3, [r7, #20]
 8011ce4:	2200      	movs	r2, #0
 8011ce6:	709a      	strb	r2, [r3, #2]
 8011ce8:	2200      	movs	r2, #0
 8011cea:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8011cec:	69fb      	ldr	r3, [r7, #28]
 8011cee:	895b      	ldrh	r3, [r3, #10]
 8011cf0:	4619      	mov	r1, r3
 8011cf2:	6978      	ldr	r0, [r7, #20]
 8011cf4:	f7f6 fd93 	bl	800881e <inet_chksum>
 8011cf8:	4603      	mov	r3, r0
 8011cfa:	461a      	mov	r2, r3
 8011cfc:	697b      	ldr	r3, [r7, #20]
 8011cfe:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8011d00:	f107 020c 	add.w	r2, r7, #12
 8011d04:	693b      	ldr	r3, [r7, #16]
 8011d06:	9302      	str	r3, [sp, #8]
 8011d08:	2301      	movs	r3, #1
 8011d0a:	9301      	str	r3, [sp, #4]
 8011d0c:	2300      	movs	r3, #0
 8011d0e:	9300      	str	r3, [sp, #0]
 8011d10:	23ff      	movs	r3, #255	; 0xff
 8011d12:	2100      	movs	r1, #0
 8011d14:	69f8      	ldr	r0, [r7, #28]
 8011d16:	f000 f9cd 	bl	80120b4 <ip4_output_if>
  }
  pbuf_free(q);
 8011d1a:	69f8      	ldr	r0, [r7, #28]
 8011d1c:	f7f8 f91a 	bl	8009f54 <pbuf_free>
 8011d20:	e000      	b.n	8011d24 <icmp_send_response+0xd4>
    return;
 8011d22:	bf00      	nop
}
 8011d24:	3720      	adds	r7, #32
 8011d26:	46bd      	mov	sp, r7
 8011d28:	bd80      	pop	{r7, pc}
 8011d2a:	bf00      	nop
 8011d2c:	080167c8 	.word	0x080167c8
 8011d30:	08016894 	.word	0x08016894
 8011d34:	08016838 	.word	0x08016838

08011d38 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8011d38:	b480      	push	{r7}
 8011d3a:	b085      	sub	sp, #20
 8011d3c:	af00      	add	r7, sp, #0
 8011d3e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8011d40:	4b33      	ldr	r3, [pc, #204]	; (8011e10 <ip4_route+0xd8>)
 8011d42:	681b      	ldr	r3, [r3, #0]
 8011d44:	60fb      	str	r3, [r7, #12]
 8011d46:	e036      	b.n	8011db6 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8011d48:	68fb      	ldr	r3, [r7, #12]
 8011d4a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011d4e:	f003 0301 	and.w	r3, r3, #1
 8011d52:	b2db      	uxtb	r3, r3
 8011d54:	2b00      	cmp	r3, #0
 8011d56:	d02b      	beq.n	8011db0 <ip4_route+0x78>
 8011d58:	68fb      	ldr	r3, [r7, #12]
 8011d5a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011d5e:	089b      	lsrs	r3, r3, #2
 8011d60:	f003 0301 	and.w	r3, r3, #1
 8011d64:	b2db      	uxtb	r3, r3
 8011d66:	2b00      	cmp	r3, #0
 8011d68:	d022      	beq.n	8011db0 <ip4_route+0x78>
 8011d6a:	68fb      	ldr	r3, [r7, #12]
 8011d6c:	3304      	adds	r3, #4
 8011d6e:	681b      	ldr	r3, [r3, #0]
 8011d70:	2b00      	cmp	r3, #0
 8011d72:	d01d      	beq.n	8011db0 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	681a      	ldr	r2, [r3, #0]
 8011d78:	68fb      	ldr	r3, [r7, #12]
 8011d7a:	3304      	adds	r3, #4
 8011d7c:	681b      	ldr	r3, [r3, #0]
 8011d7e:	405a      	eors	r2, r3
 8011d80:	68fb      	ldr	r3, [r7, #12]
 8011d82:	3308      	adds	r3, #8
 8011d84:	681b      	ldr	r3, [r3, #0]
 8011d86:	4013      	ands	r3, r2
 8011d88:	2b00      	cmp	r3, #0
 8011d8a:	d101      	bne.n	8011d90 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8011d8c:	68fb      	ldr	r3, [r7, #12]
 8011d8e:	e038      	b.n	8011e02 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8011d90:	68fb      	ldr	r3, [r7, #12]
 8011d92:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011d96:	f003 0302 	and.w	r3, r3, #2
 8011d9a:	2b00      	cmp	r3, #0
 8011d9c:	d108      	bne.n	8011db0 <ip4_route+0x78>
 8011d9e:	687b      	ldr	r3, [r7, #4]
 8011da0:	681a      	ldr	r2, [r3, #0]
 8011da2:	68fb      	ldr	r3, [r7, #12]
 8011da4:	330c      	adds	r3, #12
 8011da6:	681b      	ldr	r3, [r3, #0]
 8011da8:	429a      	cmp	r2, r3
 8011daa:	d101      	bne.n	8011db0 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8011dac:	68fb      	ldr	r3, [r7, #12]
 8011dae:	e028      	b.n	8011e02 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8011db0:	68fb      	ldr	r3, [r7, #12]
 8011db2:	681b      	ldr	r3, [r3, #0]
 8011db4:	60fb      	str	r3, [r7, #12]
 8011db6:	68fb      	ldr	r3, [r7, #12]
 8011db8:	2b00      	cmp	r3, #0
 8011dba:	d1c5      	bne.n	8011d48 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8011dbc:	4b15      	ldr	r3, [pc, #84]	; (8011e14 <ip4_route+0xdc>)
 8011dbe:	681b      	ldr	r3, [r3, #0]
 8011dc0:	2b00      	cmp	r3, #0
 8011dc2:	d01a      	beq.n	8011dfa <ip4_route+0xc2>
 8011dc4:	4b13      	ldr	r3, [pc, #76]	; (8011e14 <ip4_route+0xdc>)
 8011dc6:	681b      	ldr	r3, [r3, #0]
 8011dc8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011dcc:	f003 0301 	and.w	r3, r3, #1
 8011dd0:	2b00      	cmp	r3, #0
 8011dd2:	d012      	beq.n	8011dfa <ip4_route+0xc2>
 8011dd4:	4b0f      	ldr	r3, [pc, #60]	; (8011e14 <ip4_route+0xdc>)
 8011dd6:	681b      	ldr	r3, [r3, #0]
 8011dd8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011ddc:	f003 0304 	and.w	r3, r3, #4
 8011de0:	2b00      	cmp	r3, #0
 8011de2:	d00a      	beq.n	8011dfa <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8011de4:	4b0b      	ldr	r3, [pc, #44]	; (8011e14 <ip4_route+0xdc>)
 8011de6:	681b      	ldr	r3, [r3, #0]
 8011de8:	3304      	adds	r3, #4
 8011dea:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8011dec:	2b00      	cmp	r3, #0
 8011dee:	d004      	beq.n	8011dfa <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	681b      	ldr	r3, [r3, #0]
 8011df4:	b2db      	uxtb	r3, r3
 8011df6:	2b7f      	cmp	r3, #127	; 0x7f
 8011df8:	d101      	bne.n	8011dfe <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8011dfa:	2300      	movs	r3, #0
 8011dfc:	e001      	b.n	8011e02 <ip4_route+0xca>
  }

  return netif_default;
 8011dfe:	4b05      	ldr	r3, [pc, #20]	; (8011e14 <ip4_route+0xdc>)
 8011e00:	681b      	ldr	r3, [r3, #0]
}
 8011e02:	4618      	mov	r0, r3
 8011e04:	3714      	adds	r7, #20
 8011e06:	46bd      	mov	sp, r7
 8011e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e0c:	4770      	bx	lr
 8011e0e:	bf00      	nop
 8011e10:	240037c4 	.word	0x240037c4
 8011e14:	240037c8 	.word	0x240037c8

08011e18 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8011e18:	b580      	push	{r7, lr}
 8011e1a:	b082      	sub	sp, #8
 8011e1c:	af00      	add	r7, sp, #0
 8011e1e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011e26:	f003 0301 	and.w	r3, r3, #1
 8011e2a:	b2db      	uxtb	r3, r3
 8011e2c:	2b00      	cmp	r3, #0
 8011e2e:	d016      	beq.n	8011e5e <ip4_input_accept+0x46>
 8011e30:	687b      	ldr	r3, [r7, #4]
 8011e32:	3304      	adds	r3, #4
 8011e34:	681b      	ldr	r3, [r3, #0]
 8011e36:	2b00      	cmp	r3, #0
 8011e38:	d011      	beq.n	8011e5e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8011e3a:	4b0b      	ldr	r3, [pc, #44]	; (8011e68 <ip4_input_accept+0x50>)
 8011e3c:	695a      	ldr	r2, [r3, #20]
 8011e3e:	687b      	ldr	r3, [r7, #4]
 8011e40:	3304      	adds	r3, #4
 8011e42:	681b      	ldr	r3, [r3, #0]
 8011e44:	429a      	cmp	r2, r3
 8011e46:	d008      	beq.n	8011e5a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8011e48:	4b07      	ldr	r3, [pc, #28]	; (8011e68 <ip4_input_accept+0x50>)
 8011e4a:	695b      	ldr	r3, [r3, #20]
 8011e4c:	6879      	ldr	r1, [r7, #4]
 8011e4e:	4618      	mov	r0, r3
 8011e50:	f000 fa08 	bl	8012264 <ip4_addr_isbroadcast_u32>
 8011e54:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8011e56:	2b00      	cmp	r3, #0
 8011e58:	d001      	beq.n	8011e5e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8011e5a:	2301      	movs	r3, #1
 8011e5c:	e000      	b.n	8011e60 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8011e5e:	2300      	movs	r3, #0
}
 8011e60:	4618      	mov	r0, r3
 8011e62:	3708      	adds	r7, #8
 8011e64:	46bd      	mov	sp, r7
 8011e66:	bd80      	pop	{r7, pc}
 8011e68:	240008e4 	.word	0x240008e4

08011e6c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8011e6c:	b580      	push	{r7, lr}
 8011e6e:	b086      	sub	sp, #24
 8011e70:	af00      	add	r7, sp, #0
 8011e72:	6078      	str	r0, [r7, #4]
 8011e74:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8011e76:	687b      	ldr	r3, [r7, #4]
 8011e78:	685b      	ldr	r3, [r3, #4]
 8011e7a:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8011e7c:	697b      	ldr	r3, [r7, #20]
 8011e7e:	781b      	ldrb	r3, [r3, #0]
 8011e80:	091b      	lsrs	r3, r3, #4
 8011e82:	b2db      	uxtb	r3, r3
 8011e84:	2b04      	cmp	r3, #4
 8011e86:	d004      	beq.n	8011e92 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8011e88:	6878      	ldr	r0, [r7, #4]
 8011e8a:	f7f8 f863 	bl	8009f54 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8011e8e:	2300      	movs	r3, #0
 8011e90:	e107      	b.n	80120a2 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8011e92:	697b      	ldr	r3, [r7, #20]
 8011e94:	781b      	ldrb	r3, [r3, #0]
 8011e96:	f003 030f 	and.w	r3, r3, #15
 8011e9a:	b2db      	uxtb	r3, r3
 8011e9c:	009b      	lsls	r3, r3, #2
 8011e9e:	b2db      	uxtb	r3, r3
 8011ea0:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8011ea2:	697b      	ldr	r3, [r7, #20]
 8011ea4:	885b      	ldrh	r3, [r3, #2]
 8011ea6:	b29b      	uxth	r3, r3
 8011ea8:	4618      	mov	r0, r3
 8011eaa:	f7f6 fc2d 	bl	8008708 <lwip_htons>
 8011eae:	4603      	mov	r3, r0
 8011eb0:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	891b      	ldrh	r3, [r3, #8]
 8011eb6:	89ba      	ldrh	r2, [r7, #12]
 8011eb8:	429a      	cmp	r2, r3
 8011eba:	d204      	bcs.n	8011ec6 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8011ebc:	89bb      	ldrh	r3, [r7, #12]
 8011ebe:	4619      	mov	r1, r3
 8011ec0:	6878      	ldr	r0, [r7, #4]
 8011ec2:	f7f7 fec1 	bl	8009c48 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	895b      	ldrh	r3, [r3, #10]
 8011eca:	89fa      	ldrh	r2, [r7, #14]
 8011ecc:	429a      	cmp	r2, r3
 8011ece:	d807      	bhi.n	8011ee0 <ip4_input+0x74>
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	891b      	ldrh	r3, [r3, #8]
 8011ed4:	89ba      	ldrh	r2, [r7, #12]
 8011ed6:	429a      	cmp	r2, r3
 8011ed8:	d802      	bhi.n	8011ee0 <ip4_input+0x74>
 8011eda:	89fb      	ldrh	r3, [r7, #14]
 8011edc:	2b13      	cmp	r3, #19
 8011ede:	d804      	bhi.n	8011eea <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8011ee0:	6878      	ldr	r0, [r7, #4]
 8011ee2:	f7f8 f837 	bl	8009f54 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8011ee6:	2300      	movs	r3, #0
 8011ee8:	e0db      	b.n	80120a2 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8011eea:	697b      	ldr	r3, [r7, #20]
 8011eec:	691b      	ldr	r3, [r3, #16]
 8011eee:	4a6f      	ldr	r2, [pc, #444]	; (80120ac <ip4_input+0x240>)
 8011ef0:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8011ef2:	697b      	ldr	r3, [r7, #20]
 8011ef4:	68db      	ldr	r3, [r3, #12]
 8011ef6:	4a6d      	ldr	r2, [pc, #436]	; (80120ac <ip4_input+0x240>)
 8011ef8:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8011efa:	4b6c      	ldr	r3, [pc, #432]	; (80120ac <ip4_input+0x240>)
 8011efc:	695b      	ldr	r3, [r3, #20]
 8011efe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011f02:	2be0      	cmp	r3, #224	; 0xe0
 8011f04:	d112      	bne.n	8011f2c <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8011f06:	683b      	ldr	r3, [r7, #0]
 8011f08:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011f0c:	f003 0301 	and.w	r3, r3, #1
 8011f10:	b2db      	uxtb	r3, r3
 8011f12:	2b00      	cmp	r3, #0
 8011f14:	d007      	beq.n	8011f26 <ip4_input+0xba>
 8011f16:	683b      	ldr	r3, [r7, #0]
 8011f18:	3304      	adds	r3, #4
 8011f1a:	681b      	ldr	r3, [r3, #0]
 8011f1c:	2b00      	cmp	r3, #0
 8011f1e:	d002      	beq.n	8011f26 <ip4_input+0xba>
      netif = inp;
 8011f20:	683b      	ldr	r3, [r7, #0]
 8011f22:	613b      	str	r3, [r7, #16]
 8011f24:	e02a      	b.n	8011f7c <ip4_input+0x110>
    } else {
      netif = NULL;
 8011f26:	2300      	movs	r3, #0
 8011f28:	613b      	str	r3, [r7, #16]
 8011f2a:	e027      	b.n	8011f7c <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8011f2c:	6838      	ldr	r0, [r7, #0]
 8011f2e:	f7ff ff73 	bl	8011e18 <ip4_input_accept>
 8011f32:	4603      	mov	r3, r0
 8011f34:	2b00      	cmp	r3, #0
 8011f36:	d002      	beq.n	8011f3e <ip4_input+0xd2>
      netif = inp;
 8011f38:	683b      	ldr	r3, [r7, #0]
 8011f3a:	613b      	str	r3, [r7, #16]
 8011f3c:	e01e      	b.n	8011f7c <ip4_input+0x110>
    } else {
      netif = NULL;
 8011f3e:	2300      	movs	r3, #0
 8011f40:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8011f42:	4b5a      	ldr	r3, [pc, #360]	; (80120ac <ip4_input+0x240>)
 8011f44:	695b      	ldr	r3, [r3, #20]
 8011f46:	b2db      	uxtb	r3, r3
 8011f48:	2b7f      	cmp	r3, #127	; 0x7f
 8011f4a:	d017      	beq.n	8011f7c <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8011f4c:	4b58      	ldr	r3, [pc, #352]	; (80120b0 <ip4_input+0x244>)
 8011f4e:	681b      	ldr	r3, [r3, #0]
 8011f50:	613b      	str	r3, [r7, #16]
 8011f52:	e00e      	b.n	8011f72 <ip4_input+0x106>
          if (netif == inp) {
 8011f54:	693a      	ldr	r2, [r7, #16]
 8011f56:	683b      	ldr	r3, [r7, #0]
 8011f58:	429a      	cmp	r2, r3
 8011f5a:	d006      	beq.n	8011f6a <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8011f5c:	6938      	ldr	r0, [r7, #16]
 8011f5e:	f7ff ff5b 	bl	8011e18 <ip4_input_accept>
 8011f62:	4603      	mov	r3, r0
 8011f64:	2b00      	cmp	r3, #0
 8011f66:	d108      	bne.n	8011f7a <ip4_input+0x10e>
 8011f68:	e000      	b.n	8011f6c <ip4_input+0x100>
            continue;
 8011f6a:	bf00      	nop
        NETIF_FOREACH(netif) {
 8011f6c:	693b      	ldr	r3, [r7, #16]
 8011f6e:	681b      	ldr	r3, [r3, #0]
 8011f70:	613b      	str	r3, [r7, #16]
 8011f72:	693b      	ldr	r3, [r7, #16]
 8011f74:	2b00      	cmp	r3, #0
 8011f76:	d1ed      	bne.n	8011f54 <ip4_input+0xe8>
 8011f78:	e000      	b.n	8011f7c <ip4_input+0x110>
            break;
 8011f7a:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8011f7c:	4b4b      	ldr	r3, [pc, #300]	; (80120ac <ip4_input+0x240>)
 8011f7e:	691b      	ldr	r3, [r3, #16]
 8011f80:	6839      	ldr	r1, [r7, #0]
 8011f82:	4618      	mov	r0, r3
 8011f84:	f000 f96e 	bl	8012264 <ip4_addr_isbroadcast_u32>
 8011f88:	4603      	mov	r3, r0
 8011f8a:	2b00      	cmp	r3, #0
 8011f8c:	d105      	bne.n	8011f9a <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8011f8e:	4b47      	ldr	r3, [pc, #284]	; (80120ac <ip4_input+0x240>)
 8011f90:	691b      	ldr	r3, [r3, #16]
 8011f92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8011f96:	2be0      	cmp	r3, #224	; 0xe0
 8011f98:	d104      	bne.n	8011fa4 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8011f9a:	6878      	ldr	r0, [r7, #4]
 8011f9c:	f7f7 ffda 	bl	8009f54 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8011fa0:	2300      	movs	r3, #0
 8011fa2:	e07e      	b.n	80120a2 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8011fa4:	693b      	ldr	r3, [r7, #16]
 8011fa6:	2b00      	cmp	r3, #0
 8011fa8:	d104      	bne.n	8011fb4 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8011faa:	6878      	ldr	r0, [r7, #4]
 8011fac:	f7f7 ffd2 	bl	8009f54 <pbuf_free>
    return ERR_OK;
 8011fb0:	2300      	movs	r3, #0
 8011fb2:	e076      	b.n	80120a2 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8011fb4:	697b      	ldr	r3, [r7, #20]
 8011fb6:	88db      	ldrh	r3, [r3, #6]
 8011fb8:	b29b      	uxth	r3, r3
 8011fba:	461a      	mov	r2, r3
 8011fbc:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8011fc0:	4013      	ands	r3, r2
 8011fc2:	2b00      	cmp	r3, #0
 8011fc4:	d00b      	beq.n	8011fde <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8011fc6:	6878      	ldr	r0, [r7, #4]
 8011fc8:	f000 fc92 	bl	80128f0 <ip4_reass>
 8011fcc:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8011fce:	687b      	ldr	r3, [r7, #4]
 8011fd0:	2b00      	cmp	r3, #0
 8011fd2:	d101      	bne.n	8011fd8 <ip4_input+0x16c>
      return ERR_OK;
 8011fd4:	2300      	movs	r3, #0
 8011fd6:	e064      	b.n	80120a2 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8011fd8:	687b      	ldr	r3, [r7, #4]
 8011fda:	685b      	ldr	r3, [r3, #4]
 8011fdc:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8011fde:	4a33      	ldr	r2, [pc, #204]	; (80120ac <ip4_input+0x240>)
 8011fe0:	693b      	ldr	r3, [r7, #16]
 8011fe2:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8011fe4:	4a31      	ldr	r2, [pc, #196]	; (80120ac <ip4_input+0x240>)
 8011fe6:	683b      	ldr	r3, [r7, #0]
 8011fe8:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8011fea:	4a30      	ldr	r2, [pc, #192]	; (80120ac <ip4_input+0x240>)
 8011fec:	697b      	ldr	r3, [r7, #20]
 8011fee:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8011ff0:	697b      	ldr	r3, [r7, #20]
 8011ff2:	781b      	ldrb	r3, [r3, #0]
 8011ff4:	f003 030f 	and.w	r3, r3, #15
 8011ff8:	b2db      	uxtb	r3, r3
 8011ffa:	009b      	lsls	r3, r3, #2
 8011ffc:	b2db      	uxtb	r3, r3
 8011ffe:	b29a      	uxth	r2, r3
 8012000:	4b2a      	ldr	r3, [pc, #168]	; (80120ac <ip4_input+0x240>)
 8012002:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8012004:	89fb      	ldrh	r3, [r7, #14]
 8012006:	4619      	mov	r1, r3
 8012008:	6878      	ldr	r0, [r7, #4]
 801200a:	f7f7 ff1d 	bl	8009e48 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801200e:	697b      	ldr	r3, [r7, #20]
 8012010:	7a5b      	ldrb	r3, [r3, #9]
 8012012:	2b11      	cmp	r3, #17
 8012014:	d006      	beq.n	8012024 <ip4_input+0x1b8>
 8012016:	2b11      	cmp	r3, #17
 8012018:	dc13      	bgt.n	8012042 <ip4_input+0x1d6>
 801201a:	2b01      	cmp	r3, #1
 801201c:	d00c      	beq.n	8012038 <ip4_input+0x1cc>
 801201e:	2b06      	cmp	r3, #6
 8012020:	d005      	beq.n	801202e <ip4_input+0x1c2>
 8012022:	e00e      	b.n	8012042 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8012024:	6839      	ldr	r1, [r7, #0]
 8012026:	6878      	ldr	r0, [r7, #4]
 8012028:	f7fe fc42 	bl	80108b0 <udp_input>
        break;
 801202c:	e026      	b.n	801207c <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801202e:	6839      	ldr	r1, [r7, #0]
 8012030:	6878      	ldr	r0, [r7, #4]
 8012032:	f7fa f867 	bl	800c104 <tcp_input>
        break;
 8012036:	e021      	b.n	801207c <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8012038:	6839      	ldr	r1, [r7, #0]
 801203a:	6878      	ldr	r0, [r7, #4]
 801203c:	f7ff fcc8 	bl	80119d0 <icmp_input>
        break;
 8012040:	e01c      	b.n	801207c <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8012042:	4b1a      	ldr	r3, [pc, #104]	; (80120ac <ip4_input+0x240>)
 8012044:	695b      	ldr	r3, [r3, #20]
 8012046:	6939      	ldr	r1, [r7, #16]
 8012048:	4618      	mov	r0, r3
 801204a:	f000 f90b 	bl	8012264 <ip4_addr_isbroadcast_u32>
 801204e:	4603      	mov	r3, r0
 8012050:	2b00      	cmp	r3, #0
 8012052:	d10f      	bne.n	8012074 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012054:	4b15      	ldr	r3, [pc, #84]	; (80120ac <ip4_input+0x240>)
 8012056:	695b      	ldr	r3, [r3, #20]
 8012058:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801205c:	2be0      	cmp	r3, #224	; 0xe0
 801205e:	d009      	beq.n	8012074 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8012060:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012064:	4619      	mov	r1, r3
 8012066:	6878      	ldr	r0, [r7, #4]
 8012068:	f7f7 ff61 	bl	8009f2e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801206c:	2102      	movs	r1, #2
 801206e:	6878      	ldr	r0, [r7, #4]
 8012070:	f7ff fdce 	bl	8011c10 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8012074:	6878      	ldr	r0, [r7, #4]
 8012076:	f7f7 ff6d 	bl	8009f54 <pbuf_free>
        break;
 801207a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801207c:	4b0b      	ldr	r3, [pc, #44]	; (80120ac <ip4_input+0x240>)
 801207e:	2200      	movs	r2, #0
 8012080:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8012082:	4b0a      	ldr	r3, [pc, #40]	; (80120ac <ip4_input+0x240>)
 8012084:	2200      	movs	r2, #0
 8012086:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8012088:	4b08      	ldr	r3, [pc, #32]	; (80120ac <ip4_input+0x240>)
 801208a:	2200      	movs	r2, #0
 801208c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801208e:	4b07      	ldr	r3, [pc, #28]	; (80120ac <ip4_input+0x240>)
 8012090:	2200      	movs	r2, #0
 8012092:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8012094:	4b05      	ldr	r3, [pc, #20]	; (80120ac <ip4_input+0x240>)
 8012096:	2200      	movs	r2, #0
 8012098:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801209a:	4b04      	ldr	r3, [pc, #16]	; (80120ac <ip4_input+0x240>)
 801209c:	2200      	movs	r2, #0
 801209e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80120a0:	2300      	movs	r3, #0
}
 80120a2:	4618      	mov	r0, r3
 80120a4:	3718      	adds	r7, #24
 80120a6:	46bd      	mov	sp, r7
 80120a8:	bd80      	pop	{r7, pc}
 80120aa:	bf00      	nop
 80120ac:	240008e4 	.word	0x240008e4
 80120b0:	240037c4 	.word	0x240037c4

080120b4 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80120b4:	b580      	push	{r7, lr}
 80120b6:	b08a      	sub	sp, #40	; 0x28
 80120b8:	af04      	add	r7, sp, #16
 80120ba:	60f8      	str	r0, [r7, #12]
 80120bc:	60b9      	str	r1, [r7, #8]
 80120be:	607a      	str	r2, [r7, #4]
 80120c0:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80120c2:	68bb      	ldr	r3, [r7, #8]
 80120c4:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80120c6:	687b      	ldr	r3, [r7, #4]
 80120c8:	2b00      	cmp	r3, #0
 80120ca:	d009      	beq.n	80120e0 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80120cc:	68bb      	ldr	r3, [r7, #8]
 80120ce:	2b00      	cmp	r3, #0
 80120d0:	d003      	beq.n	80120da <ip4_output_if+0x26>
 80120d2:	68bb      	ldr	r3, [r7, #8]
 80120d4:	681b      	ldr	r3, [r3, #0]
 80120d6:	2b00      	cmp	r3, #0
 80120d8:	d102      	bne.n	80120e0 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80120da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120dc:	3304      	adds	r3, #4
 80120de:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80120e0:	78fa      	ldrb	r2, [r7, #3]
 80120e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120e4:	9302      	str	r3, [sp, #8]
 80120e6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80120ea:	9301      	str	r3, [sp, #4]
 80120ec:	f897 3020 	ldrb.w	r3, [r7, #32]
 80120f0:	9300      	str	r3, [sp, #0]
 80120f2:	4613      	mov	r3, r2
 80120f4:	687a      	ldr	r2, [r7, #4]
 80120f6:	6979      	ldr	r1, [r7, #20]
 80120f8:	68f8      	ldr	r0, [r7, #12]
 80120fa:	f000 f805 	bl	8012108 <ip4_output_if_src>
 80120fe:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8012100:	4618      	mov	r0, r3
 8012102:	3718      	adds	r7, #24
 8012104:	46bd      	mov	sp, r7
 8012106:	bd80      	pop	{r7, pc}

08012108 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8012108:	b580      	push	{r7, lr}
 801210a:	b088      	sub	sp, #32
 801210c:	af00      	add	r7, sp, #0
 801210e:	60f8      	str	r0, [r7, #12]
 8012110:	60b9      	str	r1, [r7, #8]
 8012112:	607a      	str	r2, [r7, #4]
 8012114:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8012116:	68fb      	ldr	r3, [r7, #12]
 8012118:	7b9b      	ldrb	r3, [r3, #14]
 801211a:	2b01      	cmp	r3, #1
 801211c:	d006      	beq.n	801212c <ip4_output_if_src+0x24>
 801211e:	4b4b      	ldr	r3, [pc, #300]	; (801224c <ip4_output_if_src+0x144>)
 8012120:	f44f 7255 	mov.w	r2, #852	; 0x354
 8012124:	494a      	ldr	r1, [pc, #296]	; (8012250 <ip4_output_if_src+0x148>)
 8012126:	484b      	ldr	r0, [pc, #300]	; (8012254 <ip4_output_if_src+0x14c>)
 8012128:	f001 f834 	bl	8013194 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	2b00      	cmp	r3, #0
 8012130:	d060      	beq.n	80121f4 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8012132:	2314      	movs	r3, #20
 8012134:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8012136:	2114      	movs	r1, #20
 8012138:	68f8      	ldr	r0, [r7, #12]
 801213a:	f7f7 fe75 	bl	8009e28 <pbuf_add_header>
 801213e:	4603      	mov	r3, r0
 8012140:	2b00      	cmp	r3, #0
 8012142:	d002      	beq.n	801214a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8012144:	f06f 0301 	mvn.w	r3, #1
 8012148:	e07c      	b.n	8012244 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801214a:	68fb      	ldr	r3, [r7, #12]
 801214c:	685b      	ldr	r3, [r3, #4]
 801214e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8012150:	68fb      	ldr	r3, [r7, #12]
 8012152:	895b      	ldrh	r3, [r3, #10]
 8012154:	2b13      	cmp	r3, #19
 8012156:	d806      	bhi.n	8012166 <ip4_output_if_src+0x5e>
 8012158:	4b3c      	ldr	r3, [pc, #240]	; (801224c <ip4_output_if_src+0x144>)
 801215a:	f44f 7262 	mov.w	r2, #904	; 0x388
 801215e:	493e      	ldr	r1, [pc, #248]	; (8012258 <ip4_output_if_src+0x150>)
 8012160:	483c      	ldr	r0, [pc, #240]	; (8012254 <ip4_output_if_src+0x14c>)
 8012162:	f001 f817 	bl	8013194 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8012166:	69fb      	ldr	r3, [r7, #28]
 8012168:	78fa      	ldrb	r2, [r7, #3]
 801216a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801216c:	69fb      	ldr	r3, [r7, #28]
 801216e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8012172:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8012174:	687b      	ldr	r3, [r7, #4]
 8012176:	681a      	ldr	r2, [r3, #0]
 8012178:	69fb      	ldr	r3, [r7, #28]
 801217a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801217c:	8b7b      	ldrh	r3, [r7, #26]
 801217e:	089b      	lsrs	r3, r3, #2
 8012180:	b29b      	uxth	r3, r3
 8012182:	b2db      	uxtb	r3, r3
 8012184:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012188:	b2da      	uxtb	r2, r3
 801218a:	69fb      	ldr	r3, [r7, #28]
 801218c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801218e:	69fb      	ldr	r3, [r7, #28]
 8012190:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8012194:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8012196:	68fb      	ldr	r3, [r7, #12]
 8012198:	891b      	ldrh	r3, [r3, #8]
 801219a:	4618      	mov	r0, r3
 801219c:	f7f6 fab4 	bl	8008708 <lwip_htons>
 80121a0:	4603      	mov	r3, r0
 80121a2:	461a      	mov	r2, r3
 80121a4:	69fb      	ldr	r3, [r7, #28]
 80121a6:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80121a8:	69fb      	ldr	r3, [r7, #28]
 80121aa:	2200      	movs	r2, #0
 80121ac:	719a      	strb	r2, [r3, #6]
 80121ae:	2200      	movs	r2, #0
 80121b0:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80121b2:	4b2a      	ldr	r3, [pc, #168]	; (801225c <ip4_output_if_src+0x154>)
 80121b4:	881b      	ldrh	r3, [r3, #0]
 80121b6:	4618      	mov	r0, r3
 80121b8:	f7f6 faa6 	bl	8008708 <lwip_htons>
 80121bc:	4603      	mov	r3, r0
 80121be:	461a      	mov	r2, r3
 80121c0:	69fb      	ldr	r3, [r7, #28]
 80121c2:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80121c4:	4b25      	ldr	r3, [pc, #148]	; (801225c <ip4_output_if_src+0x154>)
 80121c6:	881b      	ldrh	r3, [r3, #0]
 80121c8:	3301      	adds	r3, #1
 80121ca:	b29a      	uxth	r2, r3
 80121cc:	4b23      	ldr	r3, [pc, #140]	; (801225c <ip4_output_if_src+0x154>)
 80121ce:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80121d0:	68bb      	ldr	r3, [r7, #8]
 80121d2:	2b00      	cmp	r3, #0
 80121d4:	d104      	bne.n	80121e0 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80121d6:	4b22      	ldr	r3, [pc, #136]	; (8012260 <ip4_output_if_src+0x158>)
 80121d8:	681a      	ldr	r2, [r3, #0]
 80121da:	69fb      	ldr	r3, [r7, #28]
 80121dc:	60da      	str	r2, [r3, #12]
 80121de:	e003      	b.n	80121e8 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80121e0:	68bb      	ldr	r3, [r7, #8]
 80121e2:	681a      	ldr	r2, [r3, #0]
 80121e4:	69fb      	ldr	r3, [r7, #28]
 80121e6:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80121e8:	69fb      	ldr	r3, [r7, #28]
 80121ea:	2200      	movs	r2, #0
 80121ec:	729a      	strb	r2, [r3, #10]
 80121ee:	2200      	movs	r2, #0
 80121f0:	72da      	strb	r2, [r3, #11]
 80121f2:	e00f      	b.n	8012214 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80121f4:	68fb      	ldr	r3, [r7, #12]
 80121f6:	895b      	ldrh	r3, [r3, #10]
 80121f8:	2b13      	cmp	r3, #19
 80121fa:	d802      	bhi.n	8012202 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80121fc:	f06f 0301 	mvn.w	r3, #1
 8012200:	e020      	b.n	8012244 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8012202:	68fb      	ldr	r3, [r7, #12]
 8012204:	685b      	ldr	r3, [r3, #4]
 8012206:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8012208:	69fb      	ldr	r3, [r7, #28]
 801220a:	691b      	ldr	r3, [r3, #16]
 801220c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801220e:	f107 0314 	add.w	r3, r7, #20
 8012212:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8012214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012216:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8012218:	2b00      	cmp	r3, #0
 801221a:	d00c      	beq.n	8012236 <ip4_output_if_src+0x12e>
 801221c:	68fb      	ldr	r3, [r7, #12]
 801221e:	891a      	ldrh	r2, [r3, #8]
 8012220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012222:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8012224:	429a      	cmp	r2, r3
 8012226:	d906      	bls.n	8012236 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8012228:	687a      	ldr	r2, [r7, #4]
 801222a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801222c:	68f8      	ldr	r0, [r7, #12]
 801222e:	f000 fd4d 	bl	8012ccc <ip4_frag>
 8012232:	4603      	mov	r3, r0
 8012234:	e006      	b.n	8012244 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8012236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012238:	695b      	ldr	r3, [r3, #20]
 801223a:	687a      	ldr	r2, [r7, #4]
 801223c:	68f9      	ldr	r1, [r7, #12]
 801223e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012240:	4798      	blx	r3
 8012242:	4603      	mov	r3, r0
}
 8012244:	4618      	mov	r0, r3
 8012246:	3720      	adds	r7, #32
 8012248:	46bd      	mov	sp, r7
 801224a:	bd80      	pop	{r7, pc}
 801224c:	080168c0 	.word	0x080168c0
 8012250:	080168f4 	.word	0x080168f4
 8012254:	08016900 	.word	0x08016900
 8012258:	08016928 	.word	0x08016928
 801225c:	24000222 	.word	0x24000222
 8012260:	08016d28 	.word	0x08016d28

08012264 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8012264:	b480      	push	{r7}
 8012266:	b085      	sub	sp, #20
 8012268:	af00      	add	r7, sp, #0
 801226a:	6078      	str	r0, [r7, #4]
 801226c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801226e:	687b      	ldr	r3, [r7, #4]
 8012270:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8012272:	687b      	ldr	r3, [r7, #4]
 8012274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012278:	d002      	beq.n	8012280 <ip4_addr_isbroadcast_u32+0x1c>
 801227a:	687b      	ldr	r3, [r7, #4]
 801227c:	2b00      	cmp	r3, #0
 801227e:	d101      	bne.n	8012284 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8012280:	2301      	movs	r3, #1
 8012282:	e02a      	b.n	80122da <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8012284:	683b      	ldr	r3, [r7, #0]
 8012286:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801228a:	f003 0302 	and.w	r3, r3, #2
 801228e:	2b00      	cmp	r3, #0
 8012290:	d101      	bne.n	8012296 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8012292:	2300      	movs	r3, #0
 8012294:	e021      	b.n	80122da <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8012296:	683b      	ldr	r3, [r7, #0]
 8012298:	3304      	adds	r3, #4
 801229a:	681b      	ldr	r3, [r3, #0]
 801229c:	687a      	ldr	r2, [r7, #4]
 801229e:	429a      	cmp	r2, r3
 80122a0:	d101      	bne.n	80122a6 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80122a2:	2300      	movs	r3, #0
 80122a4:	e019      	b.n	80122da <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80122a6:	68fa      	ldr	r2, [r7, #12]
 80122a8:	683b      	ldr	r3, [r7, #0]
 80122aa:	3304      	adds	r3, #4
 80122ac:	681b      	ldr	r3, [r3, #0]
 80122ae:	405a      	eors	r2, r3
 80122b0:	683b      	ldr	r3, [r7, #0]
 80122b2:	3308      	adds	r3, #8
 80122b4:	681b      	ldr	r3, [r3, #0]
 80122b6:	4013      	ands	r3, r2
 80122b8:	2b00      	cmp	r3, #0
 80122ba:	d10d      	bne.n	80122d8 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80122bc:	683b      	ldr	r3, [r7, #0]
 80122be:	3308      	adds	r3, #8
 80122c0:	681b      	ldr	r3, [r3, #0]
 80122c2:	43da      	mvns	r2, r3
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80122c8:	683b      	ldr	r3, [r7, #0]
 80122ca:	3308      	adds	r3, #8
 80122cc:	681b      	ldr	r3, [r3, #0]
 80122ce:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80122d0:	429a      	cmp	r2, r3
 80122d2:	d101      	bne.n	80122d8 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80122d4:	2301      	movs	r3, #1
 80122d6:	e000      	b.n	80122da <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80122d8:	2300      	movs	r3, #0
  }
}
 80122da:	4618      	mov	r0, r3
 80122dc:	3714      	adds	r7, #20
 80122de:	46bd      	mov	sp, r7
 80122e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122e4:	4770      	bx	lr
	...

080122e8 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80122e8:	b580      	push	{r7, lr}
 80122ea:	b084      	sub	sp, #16
 80122ec:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80122ee:	2300      	movs	r3, #0
 80122f0:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80122f2:	4b12      	ldr	r3, [pc, #72]	; (801233c <ip_reass_tmr+0x54>)
 80122f4:	681b      	ldr	r3, [r3, #0]
 80122f6:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80122f8:	e018      	b.n	801232c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80122fa:	68fb      	ldr	r3, [r7, #12]
 80122fc:	7fdb      	ldrb	r3, [r3, #31]
 80122fe:	2b00      	cmp	r3, #0
 8012300:	d00b      	beq.n	801231a <ip_reass_tmr+0x32>
      r->timer--;
 8012302:	68fb      	ldr	r3, [r7, #12]
 8012304:	7fdb      	ldrb	r3, [r3, #31]
 8012306:	3b01      	subs	r3, #1
 8012308:	b2da      	uxtb	r2, r3
 801230a:	68fb      	ldr	r3, [r7, #12]
 801230c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801230e:	68fb      	ldr	r3, [r7, #12]
 8012310:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8012312:	68fb      	ldr	r3, [r7, #12]
 8012314:	681b      	ldr	r3, [r3, #0]
 8012316:	60fb      	str	r3, [r7, #12]
 8012318:	e008      	b.n	801232c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801231a:	68fb      	ldr	r3, [r7, #12]
 801231c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801231e:	68fb      	ldr	r3, [r7, #12]
 8012320:	681b      	ldr	r3, [r3, #0]
 8012322:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8012324:	68b9      	ldr	r1, [r7, #8]
 8012326:	6878      	ldr	r0, [r7, #4]
 8012328:	f000 f80a 	bl	8012340 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801232c:	68fb      	ldr	r3, [r7, #12]
 801232e:	2b00      	cmp	r3, #0
 8012330:	d1e3      	bne.n	80122fa <ip_reass_tmr+0x12>
    }
  }
}
 8012332:	bf00      	nop
 8012334:	bf00      	nop
 8012336:	3710      	adds	r7, #16
 8012338:	46bd      	mov	sp, r7
 801233a:	bd80      	pop	{r7, pc}
 801233c:	24000224 	.word	0x24000224

08012340 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8012340:	b580      	push	{r7, lr}
 8012342:	b088      	sub	sp, #32
 8012344:	af00      	add	r7, sp, #0
 8012346:	6078      	str	r0, [r7, #4]
 8012348:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801234a:	2300      	movs	r3, #0
 801234c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801234e:	683a      	ldr	r2, [r7, #0]
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	429a      	cmp	r2, r3
 8012354:	d105      	bne.n	8012362 <ip_reass_free_complete_datagram+0x22>
 8012356:	4b45      	ldr	r3, [pc, #276]	; (801246c <ip_reass_free_complete_datagram+0x12c>)
 8012358:	22ab      	movs	r2, #171	; 0xab
 801235a:	4945      	ldr	r1, [pc, #276]	; (8012470 <ip_reass_free_complete_datagram+0x130>)
 801235c:	4845      	ldr	r0, [pc, #276]	; (8012474 <ip_reass_free_complete_datagram+0x134>)
 801235e:	f000 ff19 	bl	8013194 <iprintf>
  if (prev != NULL) {
 8012362:	683b      	ldr	r3, [r7, #0]
 8012364:	2b00      	cmp	r3, #0
 8012366:	d00a      	beq.n	801237e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8012368:	683b      	ldr	r3, [r7, #0]
 801236a:	681b      	ldr	r3, [r3, #0]
 801236c:	687a      	ldr	r2, [r7, #4]
 801236e:	429a      	cmp	r2, r3
 8012370:	d005      	beq.n	801237e <ip_reass_free_complete_datagram+0x3e>
 8012372:	4b3e      	ldr	r3, [pc, #248]	; (801246c <ip_reass_free_complete_datagram+0x12c>)
 8012374:	22ad      	movs	r2, #173	; 0xad
 8012376:	4940      	ldr	r1, [pc, #256]	; (8012478 <ip_reass_free_complete_datagram+0x138>)
 8012378:	483e      	ldr	r0, [pc, #248]	; (8012474 <ip_reass_free_complete_datagram+0x134>)
 801237a:	f000 ff0b 	bl	8013194 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801237e:	687b      	ldr	r3, [r7, #4]
 8012380:	685b      	ldr	r3, [r3, #4]
 8012382:	685b      	ldr	r3, [r3, #4]
 8012384:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8012386:	697b      	ldr	r3, [r7, #20]
 8012388:	889b      	ldrh	r3, [r3, #4]
 801238a:	b29b      	uxth	r3, r3
 801238c:	2b00      	cmp	r3, #0
 801238e:	d12a      	bne.n	80123e6 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8012390:	687b      	ldr	r3, [r7, #4]
 8012392:	685b      	ldr	r3, [r3, #4]
 8012394:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8012396:	697b      	ldr	r3, [r7, #20]
 8012398:	681a      	ldr	r2, [r3, #0]
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801239e:	69bb      	ldr	r3, [r7, #24]
 80123a0:	6858      	ldr	r0, [r3, #4]
 80123a2:	687b      	ldr	r3, [r7, #4]
 80123a4:	3308      	adds	r3, #8
 80123a6:	2214      	movs	r2, #20
 80123a8:	4619      	mov	r1, r3
 80123aa:	f000 fedd 	bl	8013168 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80123ae:	2101      	movs	r1, #1
 80123b0:	69b8      	ldr	r0, [r7, #24]
 80123b2:	f7ff fc3d 	bl	8011c30 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80123b6:	69b8      	ldr	r0, [r7, #24]
 80123b8:	f7f7 fe54 	bl	800a064 <pbuf_clen>
 80123bc:	4603      	mov	r3, r0
 80123be:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80123c0:	8bfa      	ldrh	r2, [r7, #30]
 80123c2:	8a7b      	ldrh	r3, [r7, #18]
 80123c4:	4413      	add	r3, r2
 80123c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80123ca:	db05      	blt.n	80123d8 <ip_reass_free_complete_datagram+0x98>
 80123cc:	4b27      	ldr	r3, [pc, #156]	; (801246c <ip_reass_free_complete_datagram+0x12c>)
 80123ce:	22bc      	movs	r2, #188	; 0xbc
 80123d0:	492a      	ldr	r1, [pc, #168]	; (801247c <ip_reass_free_complete_datagram+0x13c>)
 80123d2:	4828      	ldr	r0, [pc, #160]	; (8012474 <ip_reass_free_complete_datagram+0x134>)
 80123d4:	f000 fede 	bl	8013194 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80123d8:	8bfa      	ldrh	r2, [r7, #30]
 80123da:	8a7b      	ldrh	r3, [r7, #18]
 80123dc:	4413      	add	r3, r2
 80123de:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80123e0:	69b8      	ldr	r0, [r7, #24]
 80123e2:	f7f7 fdb7 	bl	8009f54 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	685b      	ldr	r3, [r3, #4]
 80123ea:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80123ec:	e01f      	b.n	801242e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80123ee:	69bb      	ldr	r3, [r7, #24]
 80123f0:	685b      	ldr	r3, [r3, #4]
 80123f2:	617b      	str	r3, [r7, #20]
    pcur = p;
 80123f4:	69bb      	ldr	r3, [r7, #24]
 80123f6:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80123f8:	697b      	ldr	r3, [r7, #20]
 80123fa:	681b      	ldr	r3, [r3, #0]
 80123fc:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80123fe:	68f8      	ldr	r0, [r7, #12]
 8012400:	f7f7 fe30 	bl	800a064 <pbuf_clen>
 8012404:	4603      	mov	r3, r0
 8012406:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8012408:	8bfa      	ldrh	r2, [r7, #30]
 801240a:	8a7b      	ldrh	r3, [r7, #18]
 801240c:	4413      	add	r3, r2
 801240e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012412:	db05      	blt.n	8012420 <ip_reass_free_complete_datagram+0xe0>
 8012414:	4b15      	ldr	r3, [pc, #84]	; (801246c <ip_reass_free_complete_datagram+0x12c>)
 8012416:	22cc      	movs	r2, #204	; 0xcc
 8012418:	4918      	ldr	r1, [pc, #96]	; (801247c <ip_reass_free_complete_datagram+0x13c>)
 801241a:	4816      	ldr	r0, [pc, #88]	; (8012474 <ip_reass_free_complete_datagram+0x134>)
 801241c:	f000 feba 	bl	8013194 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8012420:	8bfa      	ldrh	r2, [r7, #30]
 8012422:	8a7b      	ldrh	r3, [r7, #18]
 8012424:	4413      	add	r3, r2
 8012426:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8012428:	68f8      	ldr	r0, [r7, #12]
 801242a:	f7f7 fd93 	bl	8009f54 <pbuf_free>
  while (p != NULL) {
 801242e:	69bb      	ldr	r3, [r7, #24]
 8012430:	2b00      	cmp	r3, #0
 8012432:	d1dc      	bne.n	80123ee <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8012434:	6839      	ldr	r1, [r7, #0]
 8012436:	6878      	ldr	r0, [r7, #4]
 8012438:	f000 f8c2 	bl	80125c0 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801243c:	4b10      	ldr	r3, [pc, #64]	; (8012480 <ip_reass_free_complete_datagram+0x140>)
 801243e:	881b      	ldrh	r3, [r3, #0]
 8012440:	8bfa      	ldrh	r2, [r7, #30]
 8012442:	429a      	cmp	r2, r3
 8012444:	d905      	bls.n	8012452 <ip_reass_free_complete_datagram+0x112>
 8012446:	4b09      	ldr	r3, [pc, #36]	; (801246c <ip_reass_free_complete_datagram+0x12c>)
 8012448:	22d2      	movs	r2, #210	; 0xd2
 801244a:	490e      	ldr	r1, [pc, #56]	; (8012484 <ip_reass_free_complete_datagram+0x144>)
 801244c:	4809      	ldr	r0, [pc, #36]	; (8012474 <ip_reass_free_complete_datagram+0x134>)
 801244e:	f000 fea1 	bl	8013194 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8012452:	4b0b      	ldr	r3, [pc, #44]	; (8012480 <ip_reass_free_complete_datagram+0x140>)
 8012454:	881a      	ldrh	r2, [r3, #0]
 8012456:	8bfb      	ldrh	r3, [r7, #30]
 8012458:	1ad3      	subs	r3, r2, r3
 801245a:	b29a      	uxth	r2, r3
 801245c:	4b08      	ldr	r3, [pc, #32]	; (8012480 <ip_reass_free_complete_datagram+0x140>)
 801245e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8012460:	8bfb      	ldrh	r3, [r7, #30]
}
 8012462:	4618      	mov	r0, r3
 8012464:	3720      	adds	r7, #32
 8012466:	46bd      	mov	sp, r7
 8012468:	bd80      	pop	{r7, pc}
 801246a:	bf00      	nop
 801246c:	08016958 	.word	0x08016958
 8012470:	08016994 	.word	0x08016994
 8012474:	080169a0 	.word	0x080169a0
 8012478:	080169c8 	.word	0x080169c8
 801247c:	080169dc 	.word	0x080169dc
 8012480:	24000228 	.word	0x24000228
 8012484:	080169fc 	.word	0x080169fc

08012488 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8012488:	b580      	push	{r7, lr}
 801248a:	b08a      	sub	sp, #40	; 0x28
 801248c:	af00      	add	r7, sp, #0
 801248e:	6078      	str	r0, [r7, #4]
 8012490:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8012492:	2300      	movs	r3, #0
 8012494:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8012496:	2300      	movs	r3, #0
 8012498:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801249a:	2300      	movs	r3, #0
 801249c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801249e:	2300      	movs	r3, #0
 80124a0:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80124a2:	2300      	movs	r3, #0
 80124a4:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80124a6:	4b28      	ldr	r3, [pc, #160]	; (8012548 <ip_reass_remove_oldest_datagram+0xc0>)
 80124a8:	681b      	ldr	r3, [r3, #0]
 80124aa:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80124ac:	e030      	b.n	8012510 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80124ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124b0:	695a      	ldr	r2, [r3, #20]
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	68db      	ldr	r3, [r3, #12]
 80124b6:	429a      	cmp	r2, r3
 80124b8:	d10c      	bne.n	80124d4 <ip_reass_remove_oldest_datagram+0x4c>
 80124ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124bc:	699a      	ldr	r2, [r3, #24]
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	691b      	ldr	r3, [r3, #16]
 80124c2:	429a      	cmp	r2, r3
 80124c4:	d106      	bne.n	80124d4 <ip_reass_remove_oldest_datagram+0x4c>
 80124c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124c8:	899a      	ldrh	r2, [r3, #12]
 80124ca:	687b      	ldr	r3, [r7, #4]
 80124cc:	889b      	ldrh	r3, [r3, #4]
 80124ce:	b29b      	uxth	r3, r3
 80124d0:	429a      	cmp	r2, r3
 80124d2:	d014      	beq.n	80124fe <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80124d4:	693b      	ldr	r3, [r7, #16]
 80124d6:	3301      	adds	r3, #1
 80124d8:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80124da:	6a3b      	ldr	r3, [r7, #32]
 80124dc:	2b00      	cmp	r3, #0
 80124de:	d104      	bne.n	80124ea <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80124e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124e2:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80124e4:	69fb      	ldr	r3, [r7, #28]
 80124e6:	61bb      	str	r3, [r7, #24]
 80124e8:	e009      	b.n	80124fe <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80124ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124ec:	7fda      	ldrb	r2, [r3, #31]
 80124ee:	6a3b      	ldr	r3, [r7, #32]
 80124f0:	7fdb      	ldrb	r3, [r3, #31]
 80124f2:	429a      	cmp	r2, r3
 80124f4:	d803      	bhi.n	80124fe <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80124f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124f8:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80124fa:	69fb      	ldr	r3, [r7, #28]
 80124fc:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80124fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012500:	681b      	ldr	r3, [r3, #0]
 8012502:	2b00      	cmp	r3, #0
 8012504:	d001      	beq.n	801250a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8012506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012508:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801250a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801250c:	681b      	ldr	r3, [r3, #0]
 801250e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8012510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012512:	2b00      	cmp	r3, #0
 8012514:	d1cb      	bne.n	80124ae <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8012516:	6a3b      	ldr	r3, [r7, #32]
 8012518:	2b00      	cmp	r3, #0
 801251a:	d008      	beq.n	801252e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801251c:	69b9      	ldr	r1, [r7, #24]
 801251e:	6a38      	ldr	r0, [r7, #32]
 8012520:	f7ff ff0e 	bl	8012340 <ip_reass_free_complete_datagram>
 8012524:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8012526:	697a      	ldr	r2, [r7, #20]
 8012528:	68fb      	ldr	r3, [r7, #12]
 801252a:	4413      	add	r3, r2
 801252c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801252e:	697a      	ldr	r2, [r7, #20]
 8012530:	683b      	ldr	r3, [r7, #0]
 8012532:	429a      	cmp	r2, r3
 8012534:	da02      	bge.n	801253c <ip_reass_remove_oldest_datagram+0xb4>
 8012536:	693b      	ldr	r3, [r7, #16]
 8012538:	2b01      	cmp	r3, #1
 801253a:	dcac      	bgt.n	8012496 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801253c:	697b      	ldr	r3, [r7, #20]
}
 801253e:	4618      	mov	r0, r3
 8012540:	3728      	adds	r7, #40	; 0x28
 8012542:	46bd      	mov	sp, r7
 8012544:	bd80      	pop	{r7, pc}
 8012546:	bf00      	nop
 8012548:	24000224 	.word	0x24000224

0801254c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801254c:	b580      	push	{r7, lr}
 801254e:	b084      	sub	sp, #16
 8012550:	af00      	add	r7, sp, #0
 8012552:	6078      	str	r0, [r7, #4]
 8012554:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8012556:	2004      	movs	r0, #4
 8012558:	f7f6 fe16 	bl	8009188 <memp_malloc>
 801255c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801255e:	68fb      	ldr	r3, [r7, #12]
 8012560:	2b00      	cmp	r3, #0
 8012562:	d110      	bne.n	8012586 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8012564:	6839      	ldr	r1, [r7, #0]
 8012566:	6878      	ldr	r0, [r7, #4]
 8012568:	f7ff ff8e 	bl	8012488 <ip_reass_remove_oldest_datagram>
 801256c:	4602      	mov	r2, r0
 801256e:	683b      	ldr	r3, [r7, #0]
 8012570:	4293      	cmp	r3, r2
 8012572:	dc03      	bgt.n	801257c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8012574:	2004      	movs	r0, #4
 8012576:	f7f6 fe07 	bl	8009188 <memp_malloc>
 801257a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801257c:	68fb      	ldr	r3, [r7, #12]
 801257e:	2b00      	cmp	r3, #0
 8012580:	d101      	bne.n	8012586 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8012582:	2300      	movs	r3, #0
 8012584:	e016      	b.n	80125b4 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8012586:	2220      	movs	r2, #32
 8012588:	2100      	movs	r1, #0
 801258a:	68f8      	ldr	r0, [r7, #12]
 801258c:	f000 fdfa 	bl	8013184 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8012590:	68fb      	ldr	r3, [r7, #12]
 8012592:	220f      	movs	r2, #15
 8012594:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8012596:	4b09      	ldr	r3, [pc, #36]	; (80125bc <ip_reass_enqueue_new_datagram+0x70>)
 8012598:	681a      	ldr	r2, [r3, #0]
 801259a:	68fb      	ldr	r3, [r7, #12]
 801259c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801259e:	4a07      	ldr	r2, [pc, #28]	; (80125bc <ip_reass_enqueue_new_datagram+0x70>)
 80125a0:	68fb      	ldr	r3, [r7, #12]
 80125a2:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80125a4:	68fb      	ldr	r3, [r7, #12]
 80125a6:	3308      	adds	r3, #8
 80125a8:	2214      	movs	r2, #20
 80125aa:	6879      	ldr	r1, [r7, #4]
 80125ac:	4618      	mov	r0, r3
 80125ae:	f000 fddb 	bl	8013168 <memcpy>
  return ipr;
 80125b2:	68fb      	ldr	r3, [r7, #12]
}
 80125b4:	4618      	mov	r0, r3
 80125b6:	3710      	adds	r7, #16
 80125b8:	46bd      	mov	sp, r7
 80125ba:	bd80      	pop	{r7, pc}
 80125bc:	24000224 	.word	0x24000224

080125c0 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80125c0:	b580      	push	{r7, lr}
 80125c2:	b082      	sub	sp, #8
 80125c4:	af00      	add	r7, sp, #0
 80125c6:	6078      	str	r0, [r7, #4]
 80125c8:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80125ca:	4b10      	ldr	r3, [pc, #64]	; (801260c <ip_reass_dequeue_datagram+0x4c>)
 80125cc:	681b      	ldr	r3, [r3, #0]
 80125ce:	687a      	ldr	r2, [r7, #4]
 80125d0:	429a      	cmp	r2, r3
 80125d2:	d104      	bne.n	80125de <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	681b      	ldr	r3, [r3, #0]
 80125d8:	4a0c      	ldr	r2, [pc, #48]	; (801260c <ip_reass_dequeue_datagram+0x4c>)
 80125da:	6013      	str	r3, [r2, #0]
 80125dc:	e00d      	b.n	80125fa <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80125de:	683b      	ldr	r3, [r7, #0]
 80125e0:	2b00      	cmp	r3, #0
 80125e2:	d106      	bne.n	80125f2 <ip_reass_dequeue_datagram+0x32>
 80125e4:	4b0a      	ldr	r3, [pc, #40]	; (8012610 <ip_reass_dequeue_datagram+0x50>)
 80125e6:	f240 1245 	movw	r2, #325	; 0x145
 80125ea:	490a      	ldr	r1, [pc, #40]	; (8012614 <ip_reass_dequeue_datagram+0x54>)
 80125ec:	480a      	ldr	r0, [pc, #40]	; (8012618 <ip_reass_dequeue_datagram+0x58>)
 80125ee:	f000 fdd1 	bl	8013194 <iprintf>
    prev->next = ipr->next;
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	681a      	ldr	r2, [r3, #0]
 80125f6:	683b      	ldr	r3, [r7, #0]
 80125f8:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80125fa:	6879      	ldr	r1, [r7, #4]
 80125fc:	2004      	movs	r0, #4
 80125fe:	f7f6 fe33 	bl	8009268 <memp_free>
}
 8012602:	bf00      	nop
 8012604:	3708      	adds	r7, #8
 8012606:	46bd      	mov	sp, r7
 8012608:	bd80      	pop	{r7, pc}
 801260a:	bf00      	nop
 801260c:	24000224 	.word	0x24000224
 8012610:	08016958 	.word	0x08016958
 8012614:	08016a20 	.word	0x08016a20
 8012618:	080169a0 	.word	0x080169a0

0801261c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801261c:	b580      	push	{r7, lr}
 801261e:	b08c      	sub	sp, #48	; 0x30
 8012620:	af00      	add	r7, sp, #0
 8012622:	60f8      	str	r0, [r7, #12]
 8012624:	60b9      	str	r1, [r7, #8]
 8012626:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8012628:	2300      	movs	r3, #0
 801262a:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801262c:	2301      	movs	r3, #1
 801262e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8012630:	68bb      	ldr	r3, [r7, #8]
 8012632:	685b      	ldr	r3, [r3, #4]
 8012634:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8012636:	69fb      	ldr	r3, [r7, #28]
 8012638:	885b      	ldrh	r3, [r3, #2]
 801263a:	b29b      	uxth	r3, r3
 801263c:	4618      	mov	r0, r3
 801263e:	f7f6 f863 	bl	8008708 <lwip_htons>
 8012642:	4603      	mov	r3, r0
 8012644:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8012646:	69fb      	ldr	r3, [r7, #28]
 8012648:	781b      	ldrb	r3, [r3, #0]
 801264a:	f003 030f 	and.w	r3, r3, #15
 801264e:	b2db      	uxtb	r3, r3
 8012650:	009b      	lsls	r3, r3, #2
 8012652:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8012654:	7e7b      	ldrb	r3, [r7, #25]
 8012656:	b29b      	uxth	r3, r3
 8012658:	8b7a      	ldrh	r2, [r7, #26]
 801265a:	429a      	cmp	r2, r3
 801265c:	d202      	bcs.n	8012664 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801265e:	f04f 33ff 	mov.w	r3, #4294967295
 8012662:	e135      	b.n	80128d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8012664:	7e7b      	ldrb	r3, [r7, #25]
 8012666:	b29b      	uxth	r3, r3
 8012668:	8b7a      	ldrh	r2, [r7, #26]
 801266a:	1ad3      	subs	r3, r2, r3
 801266c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801266e:	69fb      	ldr	r3, [r7, #28]
 8012670:	88db      	ldrh	r3, [r3, #6]
 8012672:	b29b      	uxth	r3, r3
 8012674:	4618      	mov	r0, r3
 8012676:	f7f6 f847 	bl	8008708 <lwip_htons>
 801267a:	4603      	mov	r3, r0
 801267c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012680:	b29b      	uxth	r3, r3
 8012682:	00db      	lsls	r3, r3, #3
 8012684:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8012686:	68bb      	ldr	r3, [r7, #8]
 8012688:	685b      	ldr	r3, [r3, #4]
 801268a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 801268c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801268e:	2200      	movs	r2, #0
 8012690:	701a      	strb	r2, [r3, #0]
 8012692:	2200      	movs	r2, #0
 8012694:	705a      	strb	r2, [r3, #1]
 8012696:	2200      	movs	r2, #0
 8012698:	709a      	strb	r2, [r3, #2]
 801269a:	2200      	movs	r2, #0
 801269c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801269e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126a0:	8afa      	ldrh	r2, [r7, #22]
 80126a2:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80126a4:	8afa      	ldrh	r2, [r7, #22]
 80126a6:	8b7b      	ldrh	r3, [r7, #26]
 80126a8:	4413      	add	r3, r2
 80126aa:	b29a      	uxth	r2, r3
 80126ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126ae:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80126b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126b2:	88db      	ldrh	r3, [r3, #6]
 80126b4:	b29b      	uxth	r3, r3
 80126b6:	8afa      	ldrh	r2, [r7, #22]
 80126b8:	429a      	cmp	r2, r3
 80126ba:	d902      	bls.n	80126c2 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80126bc:	f04f 33ff 	mov.w	r3, #4294967295
 80126c0:	e106      	b.n	80128d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80126c2:	68fb      	ldr	r3, [r7, #12]
 80126c4:	685b      	ldr	r3, [r3, #4]
 80126c6:	627b      	str	r3, [r7, #36]	; 0x24
 80126c8:	e068      	b.n	801279c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80126ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126cc:	685b      	ldr	r3, [r3, #4]
 80126ce:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80126d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126d2:	889b      	ldrh	r3, [r3, #4]
 80126d4:	b29a      	uxth	r2, r3
 80126d6:	693b      	ldr	r3, [r7, #16]
 80126d8:	889b      	ldrh	r3, [r3, #4]
 80126da:	b29b      	uxth	r3, r3
 80126dc:	429a      	cmp	r2, r3
 80126de:	d235      	bcs.n	801274c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80126e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80126e4:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80126e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126e8:	2b00      	cmp	r3, #0
 80126ea:	d020      	beq.n	801272e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80126ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126ee:	889b      	ldrh	r3, [r3, #4]
 80126f0:	b29a      	uxth	r2, r3
 80126f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126f4:	88db      	ldrh	r3, [r3, #6]
 80126f6:	b29b      	uxth	r3, r3
 80126f8:	429a      	cmp	r2, r3
 80126fa:	d307      	bcc.n	801270c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80126fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126fe:	88db      	ldrh	r3, [r3, #6]
 8012700:	b29a      	uxth	r2, r3
 8012702:	693b      	ldr	r3, [r7, #16]
 8012704:	889b      	ldrh	r3, [r3, #4]
 8012706:	b29b      	uxth	r3, r3
 8012708:	429a      	cmp	r2, r3
 801270a:	d902      	bls.n	8012712 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801270c:	f04f 33ff 	mov.w	r3, #4294967295
 8012710:	e0de      	b.n	80128d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8012712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012714:	68ba      	ldr	r2, [r7, #8]
 8012716:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8012718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801271a:	88db      	ldrh	r3, [r3, #6]
 801271c:	b29a      	uxth	r2, r3
 801271e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012720:	889b      	ldrh	r3, [r3, #4]
 8012722:	b29b      	uxth	r3, r3
 8012724:	429a      	cmp	r2, r3
 8012726:	d03d      	beq.n	80127a4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8012728:	2300      	movs	r3, #0
 801272a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801272c:	e03a      	b.n	80127a4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801272e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012730:	88db      	ldrh	r3, [r3, #6]
 8012732:	b29a      	uxth	r2, r3
 8012734:	693b      	ldr	r3, [r7, #16]
 8012736:	889b      	ldrh	r3, [r3, #4]
 8012738:	b29b      	uxth	r3, r3
 801273a:	429a      	cmp	r2, r3
 801273c:	d902      	bls.n	8012744 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801273e:	f04f 33ff 	mov.w	r3, #4294967295
 8012742:	e0c5      	b.n	80128d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8012744:	68fb      	ldr	r3, [r7, #12]
 8012746:	68ba      	ldr	r2, [r7, #8]
 8012748:	605a      	str	r2, [r3, #4]
      break;
 801274a:	e02b      	b.n	80127a4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801274c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801274e:	889b      	ldrh	r3, [r3, #4]
 8012750:	b29a      	uxth	r2, r3
 8012752:	693b      	ldr	r3, [r7, #16]
 8012754:	889b      	ldrh	r3, [r3, #4]
 8012756:	b29b      	uxth	r3, r3
 8012758:	429a      	cmp	r2, r3
 801275a:	d102      	bne.n	8012762 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801275c:	f04f 33ff 	mov.w	r3, #4294967295
 8012760:	e0b6      	b.n	80128d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8012762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012764:	889b      	ldrh	r3, [r3, #4]
 8012766:	b29a      	uxth	r2, r3
 8012768:	693b      	ldr	r3, [r7, #16]
 801276a:	88db      	ldrh	r3, [r3, #6]
 801276c:	b29b      	uxth	r3, r3
 801276e:	429a      	cmp	r2, r3
 8012770:	d202      	bcs.n	8012778 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012772:	f04f 33ff 	mov.w	r3, #4294967295
 8012776:	e0ab      	b.n	80128d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8012778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801277a:	2b00      	cmp	r3, #0
 801277c:	d009      	beq.n	8012792 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801277e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012780:	88db      	ldrh	r3, [r3, #6]
 8012782:	b29a      	uxth	r2, r3
 8012784:	693b      	ldr	r3, [r7, #16]
 8012786:	889b      	ldrh	r3, [r3, #4]
 8012788:	b29b      	uxth	r3, r3
 801278a:	429a      	cmp	r2, r3
 801278c:	d001      	beq.n	8012792 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801278e:	2300      	movs	r3, #0
 8012790:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8012792:	693b      	ldr	r3, [r7, #16]
 8012794:	681b      	ldr	r3, [r3, #0]
 8012796:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8012798:	693b      	ldr	r3, [r7, #16]
 801279a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 801279c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801279e:	2b00      	cmp	r3, #0
 80127a0:	d193      	bne.n	80126ca <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80127a2:	e000      	b.n	80127a6 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80127a4:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80127a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127a8:	2b00      	cmp	r3, #0
 80127aa:	d12d      	bne.n	8012808 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80127ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127ae:	2b00      	cmp	r3, #0
 80127b0:	d01c      	beq.n	80127ec <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80127b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127b4:	88db      	ldrh	r3, [r3, #6]
 80127b6:	b29a      	uxth	r2, r3
 80127b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127ba:	889b      	ldrh	r3, [r3, #4]
 80127bc:	b29b      	uxth	r3, r3
 80127be:	429a      	cmp	r2, r3
 80127c0:	d906      	bls.n	80127d0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80127c2:	4b45      	ldr	r3, [pc, #276]	; (80128d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80127c4:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 80127c8:	4944      	ldr	r1, [pc, #272]	; (80128dc <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80127ca:	4845      	ldr	r0, [pc, #276]	; (80128e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80127cc:	f000 fce2 	bl	8013194 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80127d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127d2:	68ba      	ldr	r2, [r7, #8]
 80127d4:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80127d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127d8:	88db      	ldrh	r3, [r3, #6]
 80127da:	b29a      	uxth	r2, r3
 80127dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127de:	889b      	ldrh	r3, [r3, #4]
 80127e0:	b29b      	uxth	r3, r3
 80127e2:	429a      	cmp	r2, r3
 80127e4:	d010      	beq.n	8012808 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80127e6:	2300      	movs	r3, #0
 80127e8:	623b      	str	r3, [r7, #32]
 80127ea:	e00d      	b.n	8012808 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80127ec:	68fb      	ldr	r3, [r7, #12]
 80127ee:	685b      	ldr	r3, [r3, #4]
 80127f0:	2b00      	cmp	r3, #0
 80127f2:	d006      	beq.n	8012802 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80127f4:	4b38      	ldr	r3, [pc, #224]	; (80128d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80127f6:	f44f 72df 	mov.w	r2, #446	; 0x1be
 80127fa:	493a      	ldr	r1, [pc, #232]	; (80128e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80127fc:	4838      	ldr	r0, [pc, #224]	; (80128e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80127fe:	f000 fcc9 	bl	8013194 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8012802:	68fb      	ldr	r3, [r7, #12]
 8012804:	68ba      	ldr	r2, [r7, #8]
 8012806:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8012808:	687b      	ldr	r3, [r7, #4]
 801280a:	2b00      	cmp	r3, #0
 801280c:	d105      	bne.n	801281a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801280e:	68fb      	ldr	r3, [r7, #12]
 8012810:	7f9b      	ldrb	r3, [r3, #30]
 8012812:	f003 0301 	and.w	r3, r3, #1
 8012816:	2b00      	cmp	r3, #0
 8012818:	d059      	beq.n	80128ce <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801281a:	6a3b      	ldr	r3, [r7, #32]
 801281c:	2b00      	cmp	r3, #0
 801281e:	d04f      	beq.n	80128c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8012820:	68fb      	ldr	r3, [r7, #12]
 8012822:	685b      	ldr	r3, [r3, #4]
 8012824:	2b00      	cmp	r3, #0
 8012826:	d006      	beq.n	8012836 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8012828:	68fb      	ldr	r3, [r7, #12]
 801282a:	685b      	ldr	r3, [r3, #4]
 801282c:	685b      	ldr	r3, [r3, #4]
 801282e:	889b      	ldrh	r3, [r3, #4]
 8012830:	b29b      	uxth	r3, r3
 8012832:	2b00      	cmp	r3, #0
 8012834:	d002      	beq.n	801283c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8012836:	2300      	movs	r3, #0
 8012838:	623b      	str	r3, [r7, #32]
 801283a:	e041      	b.n	80128c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801283c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801283e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8012840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012842:	681b      	ldr	r3, [r3, #0]
 8012844:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8012846:	e012      	b.n	801286e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8012848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801284a:	685b      	ldr	r3, [r3, #4]
 801284c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801284e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012850:	88db      	ldrh	r3, [r3, #6]
 8012852:	b29a      	uxth	r2, r3
 8012854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012856:	889b      	ldrh	r3, [r3, #4]
 8012858:	b29b      	uxth	r3, r3
 801285a:	429a      	cmp	r2, r3
 801285c:	d002      	beq.n	8012864 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801285e:	2300      	movs	r3, #0
 8012860:	623b      	str	r3, [r7, #32]
            break;
 8012862:	e007      	b.n	8012874 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8012864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012866:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8012868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801286a:	681b      	ldr	r3, [r3, #0]
 801286c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801286e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012870:	2b00      	cmp	r3, #0
 8012872:	d1e9      	bne.n	8012848 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8012874:	6a3b      	ldr	r3, [r7, #32]
 8012876:	2b00      	cmp	r3, #0
 8012878:	d022      	beq.n	80128c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801287a:	68fb      	ldr	r3, [r7, #12]
 801287c:	685b      	ldr	r3, [r3, #4]
 801287e:	2b00      	cmp	r3, #0
 8012880:	d106      	bne.n	8012890 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8012882:	4b15      	ldr	r3, [pc, #84]	; (80128d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012884:	f240 12df 	movw	r2, #479	; 0x1df
 8012888:	4917      	ldr	r1, [pc, #92]	; (80128e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801288a:	4815      	ldr	r0, [pc, #84]	; (80128e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801288c:	f000 fc82 	bl	8013194 <iprintf>
          LWIP_ASSERT("sanity check",
 8012890:	68fb      	ldr	r3, [r7, #12]
 8012892:	685b      	ldr	r3, [r3, #4]
 8012894:	685b      	ldr	r3, [r3, #4]
 8012896:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012898:	429a      	cmp	r2, r3
 801289a:	d106      	bne.n	80128aa <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801289c:	4b0e      	ldr	r3, [pc, #56]	; (80128d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801289e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80128a2:	4911      	ldr	r1, [pc, #68]	; (80128e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80128a4:	480e      	ldr	r0, [pc, #56]	; (80128e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80128a6:	f000 fc75 	bl	8013194 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80128aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128ac:	681b      	ldr	r3, [r3, #0]
 80128ae:	2b00      	cmp	r3, #0
 80128b0:	d006      	beq.n	80128c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80128b2:	4b09      	ldr	r3, [pc, #36]	; (80128d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80128b4:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 80128b8:	490c      	ldr	r1, [pc, #48]	; (80128ec <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80128ba:	4809      	ldr	r0, [pc, #36]	; (80128e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80128bc:	f000 fc6a 	bl	8013194 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80128c0:	6a3b      	ldr	r3, [r7, #32]
 80128c2:	2b00      	cmp	r3, #0
 80128c4:	bf14      	ite	ne
 80128c6:	2301      	movne	r3, #1
 80128c8:	2300      	moveq	r3, #0
 80128ca:	b2db      	uxtb	r3, r3
 80128cc:	e000      	b.n	80128d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80128ce:	2300      	movs	r3, #0
}
 80128d0:	4618      	mov	r0, r3
 80128d2:	3730      	adds	r7, #48	; 0x30
 80128d4:	46bd      	mov	sp, r7
 80128d6:	bd80      	pop	{r7, pc}
 80128d8:	08016958 	.word	0x08016958
 80128dc:	08016a3c 	.word	0x08016a3c
 80128e0:	080169a0 	.word	0x080169a0
 80128e4:	08016a5c 	.word	0x08016a5c
 80128e8:	08016a94 	.word	0x08016a94
 80128ec:	08016aa4 	.word	0x08016aa4

080128f0 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80128f0:	b580      	push	{r7, lr}
 80128f2:	b08e      	sub	sp, #56	; 0x38
 80128f4:	af00      	add	r7, sp, #0
 80128f6:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80128f8:	687b      	ldr	r3, [r7, #4]
 80128fa:	685b      	ldr	r3, [r3, #4]
 80128fc:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80128fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012900:	781b      	ldrb	r3, [r3, #0]
 8012902:	f003 030f 	and.w	r3, r3, #15
 8012906:	b2db      	uxtb	r3, r3
 8012908:	009b      	lsls	r3, r3, #2
 801290a:	b2db      	uxtb	r3, r3
 801290c:	2b14      	cmp	r3, #20
 801290e:	f040 8167 	bne.w	8012be0 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8012912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012914:	88db      	ldrh	r3, [r3, #6]
 8012916:	b29b      	uxth	r3, r3
 8012918:	4618      	mov	r0, r3
 801291a:	f7f5 fef5 	bl	8008708 <lwip_htons>
 801291e:	4603      	mov	r3, r0
 8012920:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012924:	b29b      	uxth	r3, r3
 8012926:	00db      	lsls	r3, r3, #3
 8012928:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801292a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801292c:	885b      	ldrh	r3, [r3, #2]
 801292e:	b29b      	uxth	r3, r3
 8012930:	4618      	mov	r0, r3
 8012932:	f7f5 fee9 	bl	8008708 <lwip_htons>
 8012936:	4603      	mov	r3, r0
 8012938:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801293a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801293c:	781b      	ldrb	r3, [r3, #0]
 801293e:	f003 030f 	and.w	r3, r3, #15
 8012942:	b2db      	uxtb	r3, r3
 8012944:	009b      	lsls	r3, r3, #2
 8012946:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801294a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801294e:	b29b      	uxth	r3, r3
 8012950:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012952:	429a      	cmp	r2, r3
 8012954:	f0c0 8146 	bcc.w	8012be4 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8012958:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801295c:	b29b      	uxth	r3, r3
 801295e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012960:	1ad3      	subs	r3, r2, r3
 8012962:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8012964:	6878      	ldr	r0, [r7, #4]
 8012966:	f7f7 fb7d 	bl	800a064 <pbuf_clen>
 801296a:	4603      	mov	r3, r0
 801296c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801296e:	4b9f      	ldr	r3, [pc, #636]	; (8012bec <ip4_reass+0x2fc>)
 8012970:	881b      	ldrh	r3, [r3, #0]
 8012972:	461a      	mov	r2, r3
 8012974:	8c3b      	ldrh	r3, [r7, #32]
 8012976:	4413      	add	r3, r2
 8012978:	2b0a      	cmp	r3, #10
 801297a:	dd10      	ble.n	801299e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801297c:	8c3b      	ldrh	r3, [r7, #32]
 801297e:	4619      	mov	r1, r3
 8012980:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012982:	f7ff fd81 	bl	8012488 <ip_reass_remove_oldest_datagram>
 8012986:	4603      	mov	r3, r0
 8012988:	2b00      	cmp	r3, #0
 801298a:	f000 812d 	beq.w	8012be8 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801298e:	4b97      	ldr	r3, [pc, #604]	; (8012bec <ip4_reass+0x2fc>)
 8012990:	881b      	ldrh	r3, [r3, #0]
 8012992:	461a      	mov	r2, r3
 8012994:	8c3b      	ldrh	r3, [r7, #32]
 8012996:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8012998:	2b0a      	cmp	r3, #10
 801299a:	f300 8125 	bgt.w	8012be8 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801299e:	4b94      	ldr	r3, [pc, #592]	; (8012bf0 <ip4_reass+0x300>)
 80129a0:	681b      	ldr	r3, [r3, #0]
 80129a2:	633b      	str	r3, [r7, #48]	; 0x30
 80129a4:	e015      	b.n	80129d2 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80129a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129a8:	695a      	ldr	r2, [r3, #20]
 80129aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129ac:	68db      	ldr	r3, [r3, #12]
 80129ae:	429a      	cmp	r2, r3
 80129b0:	d10c      	bne.n	80129cc <ip4_reass+0xdc>
 80129b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129b4:	699a      	ldr	r2, [r3, #24]
 80129b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129b8:	691b      	ldr	r3, [r3, #16]
 80129ba:	429a      	cmp	r2, r3
 80129bc:	d106      	bne.n	80129cc <ip4_reass+0xdc>
 80129be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129c0:	899a      	ldrh	r2, [r3, #12]
 80129c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129c4:	889b      	ldrh	r3, [r3, #4]
 80129c6:	b29b      	uxth	r3, r3
 80129c8:	429a      	cmp	r2, r3
 80129ca:	d006      	beq.n	80129da <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80129cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129ce:	681b      	ldr	r3, [r3, #0]
 80129d0:	633b      	str	r3, [r7, #48]	; 0x30
 80129d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129d4:	2b00      	cmp	r3, #0
 80129d6:	d1e6      	bne.n	80129a6 <ip4_reass+0xb6>
 80129d8:	e000      	b.n	80129dc <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80129da:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80129dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129de:	2b00      	cmp	r3, #0
 80129e0:	d109      	bne.n	80129f6 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80129e2:	8c3b      	ldrh	r3, [r7, #32]
 80129e4:	4619      	mov	r1, r3
 80129e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80129e8:	f7ff fdb0 	bl	801254c <ip_reass_enqueue_new_datagram>
 80129ec:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80129ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129f0:	2b00      	cmp	r3, #0
 80129f2:	d11c      	bne.n	8012a2e <ip4_reass+0x13e>
      goto nullreturn;
 80129f4:	e109      	b.n	8012c0a <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80129f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129f8:	88db      	ldrh	r3, [r3, #6]
 80129fa:	b29b      	uxth	r3, r3
 80129fc:	4618      	mov	r0, r3
 80129fe:	f7f5 fe83 	bl	8008708 <lwip_htons>
 8012a02:	4603      	mov	r3, r0
 8012a04:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012a08:	2b00      	cmp	r3, #0
 8012a0a:	d110      	bne.n	8012a2e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8012a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a0e:	89db      	ldrh	r3, [r3, #14]
 8012a10:	4618      	mov	r0, r3
 8012a12:	f7f5 fe79 	bl	8008708 <lwip_htons>
 8012a16:	4603      	mov	r3, r0
 8012a18:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8012a1c:	2b00      	cmp	r3, #0
 8012a1e:	d006      	beq.n	8012a2e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8012a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a22:	3308      	adds	r3, #8
 8012a24:	2214      	movs	r2, #20
 8012a26:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012a28:	4618      	mov	r0, r3
 8012a2a:	f000 fb9d 	bl	8013168 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8012a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a30:	88db      	ldrh	r3, [r3, #6]
 8012a32:	b29b      	uxth	r3, r3
 8012a34:	f003 0320 	and.w	r3, r3, #32
 8012a38:	2b00      	cmp	r3, #0
 8012a3a:	bf0c      	ite	eq
 8012a3c:	2301      	moveq	r3, #1
 8012a3e:	2300      	movne	r3, #0
 8012a40:	b2db      	uxtb	r3, r3
 8012a42:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8012a44:	69fb      	ldr	r3, [r7, #28]
 8012a46:	2b00      	cmp	r3, #0
 8012a48:	d00e      	beq.n	8012a68 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8012a4a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8012a4c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012a4e:	4413      	add	r3, r2
 8012a50:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8012a52:	8b7a      	ldrh	r2, [r7, #26]
 8012a54:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012a56:	429a      	cmp	r2, r3
 8012a58:	f0c0 80a0 	bcc.w	8012b9c <ip4_reass+0x2ac>
 8012a5c:	8b7b      	ldrh	r3, [r7, #26]
 8012a5e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8012a62:	4293      	cmp	r3, r2
 8012a64:	f200 809a 	bhi.w	8012b9c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8012a68:	69fa      	ldr	r2, [r7, #28]
 8012a6a:	6879      	ldr	r1, [r7, #4]
 8012a6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012a6e:	f7ff fdd5 	bl	801261c <ip_reass_chain_frag_into_datagram_and_validate>
 8012a72:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8012a74:	697b      	ldr	r3, [r7, #20]
 8012a76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012a7a:	f000 8091 	beq.w	8012ba0 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8012a7e:	4b5b      	ldr	r3, [pc, #364]	; (8012bec <ip4_reass+0x2fc>)
 8012a80:	881a      	ldrh	r2, [r3, #0]
 8012a82:	8c3b      	ldrh	r3, [r7, #32]
 8012a84:	4413      	add	r3, r2
 8012a86:	b29a      	uxth	r2, r3
 8012a88:	4b58      	ldr	r3, [pc, #352]	; (8012bec <ip4_reass+0x2fc>)
 8012a8a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8012a8c:	69fb      	ldr	r3, [r7, #28]
 8012a8e:	2b00      	cmp	r3, #0
 8012a90:	d00d      	beq.n	8012aae <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8012a92:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8012a94:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012a96:	4413      	add	r3, r2
 8012a98:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8012a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a9c:	8a7a      	ldrh	r2, [r7, #18]
 8012a9e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8012aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012aa2:	7f9b      	ldrb	r3, [r3, #30]
 8012aa4:	f043 0301 	orr.w	r3, r3, #1
 8012aa8:	b2da      	uxtb	r2, r3
 8012aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012aac:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8012aae:	697b      	ldr	r3, [r7, #20]
 8012ab0:	2b01      	cmp	r3, #1
 8012ab2:	d171      	bne.n	8012b98 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8012ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ab6:	8b9b      	ldrh	r3, [r3, #28]
 8012ab8:	3314      	adds	r3, #20
 8012aba:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8012abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012abe:	685b      	ldr	r3, [r3, #4]
 8012ac0:	685b      	ldr	r3, [r3, #4]
 8012ac2:	681b      	ldr	r3, [r3, #0]
 8012ac4:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8012ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ac8:	685b      	ldr	r3, [r3, #4]
 8012aca:	685b      	ldr	r3, [r3, #4]
 8012acc:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8012ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ad0:	3308      	adds	r3, #8
 8012ad2:	2214      	movs	r2, #20
 8012ad4:	4619      	mov	r1, r3
 8012ad6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012ad8:	f000 fb46 	bl	8013168 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8012adc:	8a3b      	ldrh	r3, [r7, #16]
 8012ade:	4618      	mov	r0, r3
 8012ae0:	f7f5 fe12 	bl	8008708 <lwip_htons>
 8012ae4:	4603      	mov	r3, r0
 8012ae6:	461a      	mov	r2, r3
 8012ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012aea:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8012aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012aee:	2200      	movs	r2, #0
 8012af0:	719a      	strb	r2, [r3, #6]
 8012af2:	2200      	movs	r2, #0
 8012af4:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8012af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012af8:	2200      	movs	r2, #0
 8012afa:	729a      	strb	r2, [r3, #10]
 8012afc:	2200      	movs	r2, #0
 8012afe:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8012b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b02:	685b      	ldr	r3, [r3, #4]
 8012b04:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8012b06:	e00d      	b.n	8012b24 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8012b08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012b0a:	685b      	ldr	r3, [r3, #4]
 8012b0c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8012b0e:	2114      	movs	r1, #20
 8012b10:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8012b12:	f7f7 f999 	bl	8009e48 <pbuf_remove_header>
      pbuf_cat(p, r);
 8012b16:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8012b18:	6878      	ldr	r0, [r7, #4]
 8012b1a:	f7f7 fadd 	bl	800a0d8 <pbuf_cat>
      r = iprh->next_pbuf;
 8012b1e:	68fb      	ldr	r3, [r7, #12]
 8012b20:	681b      	ldr	r3, [r3, #0]
 8012b22:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8012b24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012b26:	2b00      	cmp	r3, #0
 8012b28:	d1ee      	bne.n	8012b08 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8012b2a:	4b31      	ldr	r3, [pc, #196]	; (8012bf0 <ip4_reass+0x300>)
 8012b2c:	681b      	ldr	r3, [r3, #0]
 8012b2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012b30:	429a      	cmp	r2, r3
 8012b32:	d102      	bne.n	8012b3a <ip4_reass+0x24a>
      ipr_prev = NULL;
 8012b34:	2300      	movs	r3, #0
 8012b36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012b38:	e010      	b.n	8012b5c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8012b3a:	4b2d      	ldr	r3, [pc, #180]	; (8012bf0 <ip4_reass+0x300>)
 8012b3c:	681b      	ldr	r3, [r3, #0]
 8012b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012b40:	e007      	b.n	8012b52 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8012b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b44:	681b      	ldr	r3, [r3, #0]
 8012b46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012b48:	429a      	cmp	r2, r3
 8012b4a:	d006      	beq.n	8012b5a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8012b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b4e:	681b      	ldr	r3, [r3, #0]
 8012b50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b54:	2b00      	cmp	r3, #0
 8012b56:	d1f4      	bne.n	8012b42 <ip4_reass+0x252>
 8012b58:	e000      	b.n	8012b5c <ip4_reass+0x26c>
          break;
 8012b5a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8012b5c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012b5e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012b60:	f7ff fd2e 	bl	80125c0 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8012b64:	6878      	ldr	r0, [r7, #4]
 8012b66:	f7f7 fa7d 	bl	800a064 <pbuf_clen>
 8012b6a:	4603      	mov	r3, r0
 8012b6c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8012b6e:	4b1f      	ldr	r3, [pc, #124]	; (8012bec <ip4_reass+0x2fc>)
 8012b70:	881b      	ldrh	r3, [r3, #0]
 8012b72:	8c3a      	ldrh	r2, [r7, #32]
 8012b74:	429a      	cmp	r2, r3
 8012b76:	d906      	bls.n	8012b86 <ip4_reass+0x296>
 8012b78:	4b1e      	ldr	r3, [pc, #120]	; (8012bf4 <ip4_reass+0x304>)
 8012b7a:	f240 229b 	movw	r2, #667	; 0x29b
 8012b7e:	491e      	ldr	r1, [pc, #120]	; (8012bf8 <ip4_reass+0x308>)
 8012b80:	481e      	ldr	r0, [pc, #120]	; (8012bfc <ip4_reass+0x30c>)
 8012b82:	f000 fb07 	bl	8013194 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8012b86:	4b19      	ldr	r3, [pc, #100]	; (8012bec <ip4_reass+0x2fc>)
 8012b88:	881a      	ldrh	r2, [r3, #0]
 8012b8a:	8c3b      	ldrh	r3, [r7, #32]
 8012b8c:	1ad3      	subs	r3, r2, r3
 8012b8e:	b29a      	uxth	r2, r3
 8012b90:	4b16      	ldr	r3, [pc, #88]	; (8012bec <ip4_reass+0x2fc>)
 8012b92:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8012b94:	687b      	ldr	r3, [r7, #4]
 8012b96:	e03c      	b.n	8012c12 <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8012b98:	2300      	movs	r3, #0
 8012b9a:	e03a      	b.n	8012c12 <ip4_reass+0x322>
      goto nullreturn_ipr;
 8012b9c:	bf00      	nop
 8012b9e:	e000      	b.n	8012ba2 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8012ba0:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8012ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ba4:	2b00      	cmp	r3, #0
 8012ba6:	d106      	bne.n	8012bb6 <ip4_reass+0x2c6>
 8012ba8:	4b12      	ldr	r3, [pc, #72]	; (8012bf4 <ip4_reass+0x304>)
 8012baa:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8012bae:	4914      	ldr	r1, [pc, #80]	; (8012c00 <ip4_reass+0x310>)
 8012bb0:	4812      	ldr	r0, [pc, #72]	; (8012bfc <ip4_reass+0x30c>)
 8012bb2:	f000 faef 	bl	8013194 <iprintf>
  if (ipr->p == NULL) {
 8012bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bb8:	685b      	ldr	r3, [r3, #4]
 8012bba:	2b00      	cmp	r3, #0
 8012bbc:	d124      	bne.n	8012c08 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8012bbe:	4b0c      	ldr	r3, [pc, #48]	; (8012bf0 <ip4_reass+0x300>)
 8012bc0:	681b      	ldr	r3, [r3, #0]
 8012bc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012bc4:	429a      	cmp	r2, r3
 8012bc6:	d006      	beq.n	8012bd6 <ip4_reass+0x2e6>
 8012bc8:	4b0a      	ldr	r3, [pc, #40]	; (8012bf4 <ip4_reass+0x304>)
 8012bca:	f240 22ab 	movw	r2, #683	; 0x2ab
 8012bce:	490d      	ldr	r1, [pc, #52]	; (8012c04 <ip4_reass+0x314>)
 8012bd0:	480a      	ldr	r0, [pc, #40]	; (8012bfc <ip4_reass+0x30c>)
 8012bd2:	f000 fadf 	bl	8013194 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8012bd6:	2100      	movs	r1, #0
 8012bd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012bda:	f7ff fcf1 	bl	80125c0 <ip_reass_dequeue_datagram>
 8012bde:	e014      	b.n	8012c0a <ip4_reass+0x31a>
    goto nullreturn;
 8012be0:	bf00      	nop
 8012be2:	e012      	b.n	8012c0a <ip4_reass+0x31a>
    goto nullreturn;
 8012be4:	bf00      	nop
 8012be6:	e010      	b.n	8012c0a <ip4_reass+0x31a>
      goto nullreturn;
 8012be8:	bf00      	nop
 8012bea:	e00e      	b.n	8012c0a <ip4_reass+0x31a>
 8012bec:	24000228 	.word	0x24000228
 8012bf0:	24000224 	.word	0x24000224
 8012bf4:	08016958 	.word	0x08016958
 8012bf8:	08016ac8 	.word	0x08016ac8
 8012bfc:	080169a0 	.word	0x080169a0
 8012c00:	08016ae4 	.word	0x08016ae4
 8012c04:	08016af0 	.word	0x08016af0
  }

nullreturn:
 8012c08:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8012c0a:	6878      	ldr	r0, [r7, #4]
 8012c0c:	f7f7 f9a2 	bl	8009f54 <pbuf_free>
  return NULL;
 8012c10:	2300      	movs	r3, #0
}
 8012c12:	4618      	mov	r0, r3
 8012c14:	3738      	adds	r7, #56	; 0x38
 8012c16:	46bd      	mov	sp, r7
 8012c18:	bd80      	pop	{r7, pc}
 8012c1a:	bf00      	nop

08012c1c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8012c1c:	b580      	push	{r7, lr}
 8012c1e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8012c20:	2005      	movs	r0, #5
 8012c22:	f7f6 fab1 	bl	8009188 <memp_malloc>
 8012c26:	4603      	mov	r3, r0
}
 8012c28:	4618      	mov	r0, r3
 8012c2a:	bd80      	pop	{r7, pc}

08012c2c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8012c2c:	b580      	push	{r7, lr}
 8012c2e:	b082      	sub	sp, #8
 8012c30:	af00      	add	r7, sp, #0
 8012c32:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8012c34:	687b      	ldr	r3, [r7, #4]
 8012c36:	2b00      	cmp	r3, #0
 8012c38:	d106      	bne.n	8012c48 <ip_frag_free_pbuf_custom_ref+0x1c>
 8012c3a:	4b07      	ldr	r3, [pc, #28]	; (8012c58 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8012c3c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8012c40:	4906      	ldr	r1, [pc, #24]	; (8012c5c <ip_frag_free_pbuf_custom_ref+0x30>)
 8012c42:	4807      	ldr	r0, [pc, #28]	; (8012c60 <ip_frag_free_pbuf_custom_ref+0x34>)
 8012c44:	f000 faa6 	bl	8013194 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8012c48:	6879      	ldr	r1, [r7, #4]
 8012c4a:	2005      	movs	r0, #5
 8012c4c:	f7f6 fb0c 	bl	8009268 <memp_free>
}
 8012c50:	bf00      	nop
 8012c52:	3708      	adds	r7, #8
 8012c54:	46bd      	mov	sp, r7
 8012c56:	bd80      	pop	{r7, pc}
 8012c58:	08016958 	.word	0x08016958
 8012c5c:	08016b10 	.word	0x08016b10
 8012c60:	080169a0 	.word	0x080169a0

08012c64 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8012c64:	b580      	push	{r7, lr}
 8012c66:	b084      	sub	sp, #16
 8012c68:	af00      	add	r7, sp, #0
 8012c6a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8012c6c:	687b      	ldr	r3, [r7, #4]
 8012c6e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8012c70:	68fb      	ldr	r3, [r7, #12]
 8012c72:	2b00      	cmp	r3, #0
 8012c74:	d106      	bne.n	8012c84 <ipfrag_free_pbuf_custom+0x20>
 8012c76:	4b11      	ldr	r3, [pc, #68]	; (8012cbc <ipfrag_free_pbuf_custom+0x58>)
 8012c78:	f240 22ce 	movw	r2, #718	; 0x2ce
 8012c7c:	4910      	ldr	r1, [pc, #64]	; (8012cc0 <ipfrag_free_pbuf_custom+0x5c>)
 8012c7e:	4811      	ldr	r0, [pc, #68]	; (8012cc4 <ipfrag_free_pbuf_custom+0x60>)
 8012c80:	f000 fa88 	bl	8013194 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8012c84:	68fa      	ldr	r2, [r7, #12]
 8012c86:	687b      	ldr	r3, [r7, #4]
 8012c88:	429a      	cmp	r2, r3
 8012c8a:	d006      	beq.n	8012c9a <ipfrag_free_pbuf_custom+0x36>
 8012c8c:	4b0b      	ldr	r3, [pc, #44]	; (8012cbc <ipfrag_free_pbuf_custom+0x58>)
 8012c8e:	f240 22cf 	movw	r2, #719	; 0x2cf
 8012c92:	490d      	ldr	r1, [pc, #52]	; (8012cc8 <ipfrag_free_pbuf_custom+0x64>)
 8012c94:	480b      	ldr	r0, [pc, #44]	; (8012cc4 <ipfrag_free_pbuf_custom+0x60>)
 8012c96:	f000 fa7d 	bl	8013194 <iprintf>
  if (pcr->original != NULL) {
 8012c9a:	68fb      	ldr	r3, [r7, #12]
 8012c9c:	695b      	ldr	r3, [r3, #20]
 8012c9e:	2b00      	cmp	r3, #0
 8012ca0:	d004      	beq.n	8012cac <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8012ca2:	68fb      	ldr	r3, [r7, #12]
 8012ca4:	695b      	ldr	r3, [r3, #20]
 8012ca6:	4618      	mov	r0, r3
 8012ca8:	f7f7 f954 	bl	8009f54 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8012cac:	68f8      	ldr	r0, [r7, #12]
 8012cae:	f7ff ffbd 	bl	8012c2c <ip_frag_free_pbuf_custom_ref>
}
 8012cb2:	bf00      	nop
 8012cb4:	3710      	adds	r7, #16
 8012cb6:	46bd      	mov	sp, r7
 8012cb8:	bd80      	pop	{r7, pc}
 8012cba:	bf00      	nop
 8012cbc:	08016958 	.word	0x08016958
 8012cc0:	08016b1c 	.word	0x08016b1c
 8012cc4:	080169a0 	.word	0x080169a0
 8012cc8:	08016b28 	.word	0x08016b28

08012ccc <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8012ccc:	b580      	push	{r7, lr}
 8012cce:	b094      	sub	sp, #80	; 0x50
 8012cd0:	af02      	add	r7, sp, #8
 8012cd2:	60f8      	str	r0, [r7, #12]
 8012cd4:	60b9      	str	r1, [r7, #8]
 8012cd6:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8012cd8:	2300      	movs	r3, #0
 8012cda:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8012cde:	68bb      	ldr	r3, [r7, #8]
 8012ce0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8012ce2:	3b14      	subs	r3, #20
 8012ce4:	2b00      	cmp	r3, #0
 8012ce6:	da00      	bge.n	8012cea <ip4_frag+0x1e>
 8012ce8:	3307      	adds	r3, #7
 8012cea:	10db      	asrs	r3, r3, #3
 8012cec:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8012cee:	2314      	movs	r3, #20
 8012cf0:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8012cf2:	68fb      	ldr	r3, [r7, #12]
 8012cf4:	685b      	ldr	r3, [r3, #4]
 8012cf6:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8012cf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012cfa:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8012cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cfe:	781b      	ldrb	r3, [r3, #0]
 8012d00:	f003 030f 	and.w	r3, r3, #15
 8012d04:	b2db      	uxtb	r3, r3
 8012d06:	009b      	lsls	r3, r3, #2
 8012d08:	b2db      	uxtb	r3, r3
 8012d0a:	2b14      	cmp	r3, #20
 8012d0c:	d002      	beq.n	8012d14 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8012d0e:	f06f 0305 	mvn.w	r3, #5
 8012d12:	e110      	b.n	8012f36 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8012d14:	68fb      	ldr	r3, [r7, #12]
 8012d16:	895b      	ldrh	r3, [r3, #10]
 8012d18:	2b13      	cmp	r3, #19
 8012d1a:	d809      	bhi.n	8012d30 <ip4_frag+0x64>
 8012d1c:	4b88      	ldr	r3, [pc, #544]	; (8012f40 <ip4_frag+0x274>)
 8012d1e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8012d22:	4988      	ldr	r1, [pc, #544]	; (8012f44 <ip4_frag+0x278>)
 8012d24:	4888      	ldr	r0, [pc, #544]	; (8012f48 <ip4_frag+0x27c>)
 8012d26:	f000 fa35 	bl	8013194 <iprintf>
 8012d2a:	f06f 0305 	mvn.w	r3, #5
 8012d2e:	e102      	b.n	8012f36 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8012d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d32:	88db      	ldrh	r3, [r3, #6]
 8012d34:	b29b      	uxth	r3, r3
 8012d36:	4618      	mov	r0, r3
 8012d38:	f7f5 fce6 	bl	8008708 <lwip_htons>
 8012d3c:	4603      	mov	r3, r0
 8012d3e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8012d40:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012d42:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012d46:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8012d4a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012d4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012d50:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8012d52:	68fb      	ldr	r3, [r7, #12]
 8012d54:	891b      	ldrh	r3, [r3, #8]
 8012d56:	3b14      	subs	r3, #20
 8012d58:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8012d5c:	e0e1      	b.n	8012f22 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8012d5e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012d60:	00db      	lsls	r3, r3, #3
 8012d62:	b29b      	uxth	r3, r3
 8012d64:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012d68:	4293      	cmp	r3, r2
 8012d6a:	bf28      	it	cs
 8012d6c:	4613      	movcs	r3, r2
 8012d6e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8012d70:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012d74:	2114      	movs	r1, #20
 8012d76:	200e      	movs	r0, #14
 8012d78:	f7f6 fe08 	bl	800998c <pbuf_alloc>
 8012d7c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8012d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d80:	2b00      	cmp	r3, #0
 8012d82:	f000 80d5 	beq.w	8012f30 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8012d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d88:	895b      	ldrh	r3, [r3, #10]
 8012d8a:	2b13      	cmp	r3, #19
 8012d8c:	d806      	bhi.n	8012d9c <ip4_frag+0xd0>
 8012d8e:	4b6c      	ldr	r3, [pc, #432]	; (8012f40 <ip4_frag+0x274>)
 8012d90:	f44f 7249 	mov.w	r2, #804	; 0x324
 8012d94:	496d      	ldr	r1, [pc, #436]	; (8012f4c <ip4_frag+0x280>)
 8012d96:	486c      	ldr	r0, [pc, #432]	; (8012f48 <ip4_frag+0x27c>)
 8012d98:	f000 f9fc 	bl	8013194 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8012d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d9e:	685b      	ldr	r3, [r3, #4]
 8012da0:	2214      	movs	r2, #20
 8012da2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8012da4:	4618      	mov	r0, r3
 8012da6:	f000 f9df 	bl	8013168 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8012daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012dac:	685b      	ldr	r3, [r3, #4]
 8012dae:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8012db0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012db2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8012db6:	e064      	b.n	8012e82 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8012db8:	68fb      	ldr	r3, [r7, #12]
 8012dba:	895a      	ldrh	r2, [r3, #10]
 8012dbc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012dbe:	1ad3      	subs	r3, r2, r3
 8012dc0:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8012dc2:	68fb      	ldr	r3, [r7, #12]
 8012dc4:	895b      	ldrh	r3, [r3, #10]
 8012dc6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8012dc8:	429a      	cmp	r2, r3
 8012dca:	d906      	bls.n	8012dda <ip4_frag+0x10e>
 8012dcc:	4b5c      	ldr	r3, [pc, #368]	; (8012f40 <ip4_frag+0x274>)
 8012dce:	f240 322d 	movw	r2, #813	; 0x32d
 8012dd2:	495f      	ldr	r1, [pc, #380]	; (8012f50 <ip4_frag+0x284>)
 8012dd4:	485c      	ldr	r0, [pc, #368]	; (8012f48 <ip4_frag+0x27c>)
 8012dd6:	f000 f9dd 	bl	8013194 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8012dda:	8bfa      	ldrh	r2, [r7, #30]
 8012ddc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8012de0:	4293      	cmp	r3, r2
 8012de2:	bf28      	it	cs
 8012de4:	4613      	movcs	r3, r2
 8012de6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8012dea:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8012dee:	2b00      	cmp	r3, #0
 8012df0:	d105      	bne.n	8012dfe <ip4_frag+0x132>
        poff = 0;
 8012df2:	2300      	movs	r3, #0
 8012df4:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8012df6:	68fb      	ldr	r3, [r7, #12]
 8012df8:	681b      	ldr	r3, [r3, #0]
 8012dfa:	60fb      	str	r3, [r7, #12]
        continue;
 8012dfc:	e041      	b.n	8012e82 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8012dfe:	f7ff ff0d 	bl	8012c1c <ip_frag_alloc_pbuf_custom_ref>
 8012e02:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8012e04:	69bb      	ldr	r3, [r7, #24]
 8012e06:	2b00      	cmp	r3, #0
 8012e08:	d103      	bne.n	8012e12 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8012e0a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012e0c:	f7f7 f8a2 	bl	8009f54 <pbuf_free>
        goto memerr;
 8012e10:	e08f      	b.n	8012f32 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8012e12:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8012e14:	68fb      	ldr	r3, [r7, #12]
 8012e16:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8012e18:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012e1a:	4413      	add	r3, r2
 8012e1c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8012e20:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8012e24:	9201      	str	r2, [sp, #4]
 8012e26:	9300      	str	r3, [sp, #0]
 8012e28:	4603      	mov	r3, r0
 8012e2a:	2241      	movs	r2, #65	; 0x41
 8012e2c:	2000      	movs	r0, #0
 8012e2e:	f7f6 fed7 	bl	8009be0 <pbuf_alloced_custom>
 8012e32:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8012e34:	697b      	ldr	r3, [r7, #20]
 8012e36:	2b00      	cmp	r3, #0
 8012e38:	d106      	bne.n	8012e48 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8012e3a:	69b8      	ldr	r0, [r7, #24]
 8012e3c:	f7ff fef6 	bl	8012c2c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8012e40:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012e42:	f7f7 f887 	bl	8009f54 <pbuf_free>
        goto memerr;
 8012e46:	e074      	b.n	8012f32 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8012e48:	68f8      	ldr	r0, [r7, #12]
 8012e4a:	f7f7 f923 	bl	800a094 <pbuf_ref>
      pcr->original = p;
 8012e4e:	69bb      	ldr	r3, [r7, #24]
 8012e50:	68fa      	ldr	r2, [r7, #12]
 8012e52:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8012e54:	69bb      	ldr	r3, [r7, #24]
 8012e56:	4a3f      	ldr	r2, [pc, #252]	; (8012f54 <ip4_frag+0x288>)
 8012e58:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8012e5a:	6979      	ldr	r1, [r7, #20]
 8012e5c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012e5e:	f7f7 f93b 	bl	800a0d8 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8012e62:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8012e66:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8012e6a:	1ad3      	subs	r3, r2, r3
 8012e6c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8012e70:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8012e74:	2b00      	cmp	r3, #0
 8012e76:	d004      	beq.n	8012e82 <ip4_frag+0x1b6>
        poff = 0;
 8012e78:	2300      	movs	r3, #0
 8012e7a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8012e7c:	68fb      	ldr	r3, [r7, #12]
 8012e7e:	681b      	ldr	r3, [r3, #0]
 8012e80:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8012e82:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8012e86:	2b00      	cmp	r3, #0
 8012e88:	d196      	bne.n	8012db8 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8012e8a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8012e8c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8012e90:	4413      	add	r3, r2
 8012e92:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8012e94:	68bb      	ldr	r3, [r7, #8]
 8012e96:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8012e98:	f1a3 0213 	sub.w	r2, r3, #19
 8012e9c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012ea0:	429a      	cmp	r2, r3
 8012ea2:	bfcc      	ite	gt
 8012ea4:	2301      	movgt	r3, #1
 8012ea6:	2300      	movle	r3, #0
 8012ea8:	b2db      	uxtb	r3, r3
 8012eaa:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8012eac:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012eb0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012eb4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8012eb6:	6a3b      	ldr	r3, [r7, #32]
 8012eb8:	2b00      	cmp	r3, #0
 8012eba:	d002      	beq.n	8012ec2 <ip4_frag+0x1f6>
 8012ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ebe:	2b00      	cmp	r3, #0
 8012ec0:	d003      	beq.n	8012eca <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8012ec2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012ec4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8012ec8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8012eca:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012ecc:	4618      	mov	r0, r3
 8012ece:	f7f5 fc1b 	bl	8008708 <lwip_htons>
 8012ed2:	4603      	mov	r3, r0
 8012ed4:	461a      	mov	r2, r3
 8012ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ed8:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8012eda:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012edc:	3314      	adds	r3, #20
 8012ede:	b29b      	uxth	r3, r3
 8012ee0:	4618      	mov	r0, r3
 8012ee2:	f7f5 fc11 	bl	8008708 <lwip_htons>
 8012ee6:	4603      	mov	r3, r0
 8012ee8:	461a      	mov	r2, r3
 8012eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012eec:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8012eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ef0:	2200      	movs	r2, #0
 8012ef2:	729a      	strb	r2, [r3, #10]
 8012ef4:	2200      	movs	r2, #0
 8012ef6:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8012ef8:	68bb      	ldr	r3, [r7, #8]
 8012efa:	695b      	ldr	r3, [r3, #20]
 8012efc:	687a      	ldr	r2, [r7, #4]
 8012efe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012f00:	68b8      	ldr	r0, [r7, #8]
 8012f02:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8012f04:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012f06:	f7f7 f825 	bl	8009f54 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8012f0a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012f0e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012f10:	1ad3      	subs	r3, r2, r3
 8012f12:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8012f16:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8012f1a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012f1c:	4413      	add	r3, r2
 8012f1e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8012f22:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012f26:	2b00      	cmp	r3, #0
 8012f28:	f47f af19 	bne.w	8012d5e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8012f2c:	2300      	movs	r3, #0
 8012f2e:	e002      	b.n	8012f36 <ip4_frag+0x26a>
      goto memerr;
 8012f30:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8012f32:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012f36:	4618      	mov	r0, r3
 8012f38:	3748      	adds	r7, #72	; 0x48
 8012f3a:	46bd      	mov	sp, r7
 8012f3c:	bd80      	pop	{r7, pc}
 8012f3e:	bf00      	nop
 8012f40:	08016958 	.word	0x08016958
 8012f44:	08016b34 	.word	0x08016b34
 8012f48:	080169a0 	.word	0x080169a0
 8012f4c:	08016b50 	.word	0x08016b50
 8012f50:	08016b70 	.word	0x08016b70
 8012f54:	08012c65 	.word	0x08012c65

08012f58 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8012f58:	b580      	push	{r7, lr}
 8012f5a:	b086      	sub	sp, #24
 8012f5c:	af00      	add	r7, sp, #0
 8012f5e:	6078      	str	r0, [r7, #4]
 8012f60:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8012f62:	230e      	movs	r3, #14
 8012f64:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8012f66:	687b      	ldr	r3, [r7, #4]
 8012f68:	895b      	ldrh	r3, [r3, #10]
 8012f6a:	2b0e      	cmp	r3, #14
 8012f6c:	d96e      	bls.n	801304c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8012f6e:	687b      	ldr	r3, [r7, #4]
 8012f70:	7bdb      	ldrb	r3, [r3, #15]
 8012f72:	2b00      	cmp	r3, #0
 8012f74:	d106      	bne.n	8012f84 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8012f76:	683b      	ldr	r3, [r7, #0]
 8012f78:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012f7c:	3301      	adds	r3, #1
 8012f7e:	b2da      	uxtb	r2, r3
 8012f80:	687b      	ldr	r3, [r7, #4]
 8012f82:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8012f84:	687b      	ldr	r3, [r7, #4]
 8012f86:	685b      	ldr	r3, [r3, #4]
 8012f88:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8012f8a:	693b      	ldr	r3, [r7, #16]
 8012f8c:	7b1a      	ldrb	r2, [r3, #12]
 8012f8e:	7b5b      	ldrb	r3, [r3, #13]
 8012f90:	021b      	lsls	r3, r3, #8
 8012f92:	4313      	orrs	r3, r2
 8012f94:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8012f96:	693b      	ldr	r3, [r7, #16]
 8012f98:	781b      	ldrb	r3, [r3, #0]
 8012f9a:	f003 0301 	and.w	r3, r3, #1
 8012f9e:	2b00      	cmp	r3, #0
 8012fa0:	d023      	beq.n	8012fea <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8012fa2:	693b      	ldr	r3, [r7, #16]
 8012fa4:	781b      	ldrb	r3, [r3, #0]
 8012fa6:	2b01      	cmp	r3, #1
 8012fa8:	d10f      	bne.n	8012fca <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8012faa:	693b      	ldr	r3, [r7, #16]
 8012fac:	785b      	ldrb	r3, [r3, #1]
 8012fae:	2b00      	cmp	r3, #0
 8012fb0:	d11b      	bne.n	8012fea <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8012fb2:	693b      	ldr	r3, [r7, #16]
 8012fb4:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8012fb6:	2b5e      	cmp	r3, #94	; 0x5e
 8012fb8:	d117      	bne.n	8012fea <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8012fba:	687b      	ldr	r3, [r7, #4]
 8012fbc:	7b5b      	ldrb	r3, [r3, #13]
 8012fbe:	f043 0310 	orr.w	r3, r3, #16
 8012fc2:	b2da      	uxtb	r2, r3
 8012fc4:	687b      	ldr	r3, [r7, #4]
 8012fc6:	735a      	strb	r2, [r3, #13]
 8012fc8:	e00f      	b.n	8012fea <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8012fca:	693b      	ldr	r3, [r7, #16]
 8012fcc:	2206      	movs	r2, #6
 8012fce:	4928      	ldr	r1, [pc, #160]	; (8013070 <ethernet_input+0x118>)
 8012fd0:	4618      	mov	r0, r3
 8012fd2:	f000 f8bb 	bl	801314c <memcmp>
 8012fd6:	4603      	mov	r3, r0
 8012fd8:	2b00      	cmp	r3, #0
 8012fda:	d106      	bne.n	8012fea <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8012fdc:	687b      	ldr	r3, [r7, #4]
 8012fde:	7b5b      	ldrb	r3, [r3, #13]
 8012fe0:	f043 0308 	orr.w	r3, r3, #8
 8012fe4:	b2da      	uxtb	r2, r3
 8012fe6:	687b      	ldr	r3, [r7, #4]
 8012fe8:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8012fea:	89fb      	ldrh	r3, [r7, #14]
 8012fec:	2b08      	cmp	r3, #8
 8012fee:	d003      	beq.n	8012ff8 <ethernet_input+0xa0>
 8012ff0:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8012ff4:	d014      	beq.n	8013020 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8012ff6:	e032      	b.n	801305e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8012ff8:	683b      	ldr	r3, [r7, #0]
 8012ffa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012ffe:	f003 0308 	and.w	r3, r3, #8
 8013002:	2b00      	cmp	r3, #0
 8013004:	d024      	beq.n	8013050 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8013006:	8afb      	ldrh	r3, [r7, #22]
 8013008:	4619      	mov	r1, r3
 801300a:	6878      	ldr	r0, [r7, #4]
 801300c:	f7f6 ff1c 	bl	8009e48 <pbuf_remove_header>
 8013010:	4603      	mov	r3, r0
 8013012:	2b00      	cmp	r3, #0
 8013014:	d11e      	bne.n	8013054 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8013016:	6839      	ldr	r1, [r7, #0]
 8013018:	6878      	ldr	r0, [r7, #4]
 801301a:	f7fe ff27 	bl	8011e6c <ip4_input>
      break;
 801301e:	e013      	b.n	8013048 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8013020:	683b      	ldr	r3, [r7, #0]
 8013022:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013026:	f003 0308 	and.w	r3, r3, #8
 801302a:	2b00      	cmp	r3, #0
 801302c:	d014      	beq.n	8013058 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801302e:	8afb      	ldrh	r3, [r7, #22]
 8013030:	4619      	mov	r1, r3
 8013032:	6878      	ldr	r0, [r7, #4]
 8013034:	f7f6 ff08 	bl	8009e48 <pbuf_remove_header>
 8013038:	4603      	mov	r3, r0
 801303a:	2b00      	cmp	r3, #0
 801303c:	d10e      	bne.n	801305c <ethernet_input+0x104>
        etharp_input(p, netif);
 801303e:	6839      	ldr	r1, [r7, #0]
 8013040:	6878      	ldr	r0, [r7, #4]
 8013042:	f7fe f8a1 	bl	8011188 <etharp_input>
      break;
 8013046:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8013048:	2300      	movs	r3, #0
 801304a:	e00c      	b.n	8013066 <ethernet_input+0x10e>
    goto free_and_return;
 801304c:	bf00      	nop
 801304e:	e006      	b.n	801305e <ethernet_input+0x106>
        goto free_and_return;
 8013050:	bf00      	nop
 8013052:	e004      	b.n	801305e <ethernet_input+0x106>
        goto free_and_return;
 8013054:	bf00      	nop
 8013056:	e002      	b.n	801305e <ethernet_input+0x106>
        goto free_and_return;
 8013058:	bf00      	nop
 801305a:	e000      	b.n	801305e <ethernet_input+0x106>
        goto free_and_return;
 801305c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801305e:	6878      	ldr	r0, [r7, #4]
 8013060:	f7f6 ff78 	bl	8009f54 <pbuf_free>
  return ERR_OK;
 8013064:	2300      	movs	r3, #0
}
 8013066:	4618      	mov	r0, r3
 8013068:	3718      	adds	r7, #24
 801306a:	46bd      	mov	sp, r7
 801306c:	bd80      	pop	{r7, pc}
 801306e:	bf00      	nop
 8013070:	08016d2c 	.word	0x08016d2c

08013074 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8013074:	b580      	push	{r7, lr}
 8013076:	b086      	sub	sp, #24
 8013078:	af00      	add	r7, sp, #0
 801307a:	60f8      	str	r0, [r7, #12]
 801307c:	60b9      	str	r1, [r7, #8]
 801307e:	607a      	str	r2, [r7, #4]
 8013080:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8013082:	8c3b      	ldrh	r3, [r7, #32]
 8013084:	4618      	mov	r0, r3
 8013086:	f7f5 fb3f 	bl	8008708 <lwip_htons>
 801308a:	4603      	mov	r3, r0
 801308c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801308e:	210e      	movs	r1, #14
 8013090:	68b8      	ldr	r0, [r7, #8]
 8013092:	f7f6 fec9 	bl	8009e28 <pbuf_add_header>
 8013096:	4603      	mov	r3, r0
 8013098:	2b00      	cmp	r3, #0
 801309a:	d125      	bne.n	80130e8 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801309c:	68bb      	ldr	r3, [r7, #8]
 801309e:	685b      	ldr	r3, [r3, #4]
 80130a0:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80130a2:	693b      	ldr	r3, [r7, #16]
 80130a4:	8afa      	ldrh	r2, [r7, #22]
 80130a6:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80130a8:	693b      	ldr	r3, [r7, #16]
 80130aa:	2206      	movs	r2, #6
 80130ac:	6839      	ldr	r1, [r7, #0]
 80130ae:	4618      	mov	r0, r3
 80130b0:	f000 f85a 	bl	8013168 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80130b4:	693b      	ldr	r3, [r7, #16]
 80130b6:	3306      	adds	r3, #6
 80130b8:	2206      	movs	r2, #6
 80130ba:	6879      	ldr	r1, [r7, #4]
 80130bc:	4618      	mov	r0, r3
 80130be:	f000 f853 	bl	8013168 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80130c2:	68fb      	ldr	r3, [r7, #12]
 80130c4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80130c8:	2b06      	cmp	r3, #6
 80130ca:	d006      	beq.n	80130da <ethernet_output+0x66>
 80130cc:	4b0a      	ldr	r3, [pc, #40]	; (80130f8 <ethernet_output+0x84>)
 80130ce:	f44f 7299 	mov.w	r2, #306	; 0x132
 80130d2:	490a      	ldr	r1, [pc, #40]	; (80130fc <ethernet_output+0x88>)
 80130d4:	480a      	ldr	r0, [pc, #40]	; (8013100 <ethernet_output+0x8c>)
 80130d6:	f000 f85d 	bl	8013194 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80130da:	68fb      	ldr	r3, [r7, #12]
 80130dc:	699b      	ldr	r3, [r3, #24]
 80130de:	68b9      	ldr	r1, [r7, #8]
 80130e0:	68f8      	ldr	r0, [r7, #12]
 80130e2:	4798      	blx	r3
 80130e4:	4603      	mov	r3, r0
 80130e6:	e002      	b.n	80130ee <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80130e8:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80130ea:	f06f 0301 	mvn.w	r3, #1
}
 80130ee:	4618      	mov	r0, r3
 80130f0:	3718      	adds	r7, #24
 80130f2:	46bd      	mov	sp, r7
 80130f4:	bd80      	pop	{r7, pc}
 80130f6:	bf00      	nop
 80130f8:	08016b80 	.word	0x08016b80
 80130fc:	08016bb8 	.word	0x08016bb8
 8013100:	08016bec 	.word	0x08016bec

08013104 <__libc_init_array>:
 8013104:	b570      	push	{r4, r5, r6, lr}
 8013106:	4d0d      	ldr	r5, [pc, #52]	; (801313c <__libc_init_array+0x38>)
 8013108:	4c0d      	ldr	r4, [pc, #52]	; (8013140 <__libc_init_array+0x3c>)
 801310a:	1b64      	subs	r4, r4, r5
 801310c:	10a4      	asrs	r4, r4, #2
 801310e:	2600      	movs	r6, #0
 8013110:	42a6      	cmp	r6, r4
 8013112:	d109      	bne.n	8013128 <__libc_init_array+0x24>
 8013114:	4d0b      	ldr	r5, [pc, #44]	; (8013144 <__libc_init_array+0x40>)
 8013116:	4c0c      	ldr	r4, [pc, #48]	; (8013148 <__libc_init_array+0x44>)
 8013118:	f001 f856 	bl	80141c8 <_init>
 801311c:	1b64      	subs	r4, r4, r5
 801311e:	10a4      	asrs	r4, r4, #2
 8013120:	2600      	movs	r6, #0
 8013122:	42a6      	cmp	r6, r4
 8013124:	d105      	bne.n	8013132 <__libc_init_array+0x2e>
 8013126:	bd70      	pop	{r4, r5, r6, pc}
 8013128:	f855 3b04 	ldr.w	r3, [r5], #4
 801312c:	4798      	blx	r3
 801312e:	3601      	adds	r6, #1
 8013130:	e7ee      	b.n	8013110 <__libc_init_array+0xc>
 8013132:	f855 3b04 	ldr.w	r3, [r5], #4
 8013136:	4798      	blx	r3
 8013138:	3601      	adds	r6, #1
 801313a:	e7f2      	b.n	8013122 <__libc_init_array+0x1e>
 801313c:	08016e90 	.word	0x08016e90
 8013140:	08016e90 	.word	0x08016e90
 8013144:	08016e90 	.word	0x08016e90
 8013148:	08016e94 	.word	0x08016e94

0801314c <memcmp>:
 801314c:	b530      	push	{r4, r5, lr}
 801314e:	3901      	subs	r1, #1
 8013150:	2400      	movs	r4, #0
 8013152:	42a2      	cmp	r2, r4
 8013154:	d101      	bne.n	801315a <memcmp+0xe>
 8013156:	2000      	movs	r0, #0
 8013158:	e005      	b.n	8013166 <memcmp+0x1a>
 801315a:	5d03      	ldrb	r3, [r0, r4]
 801315c:	3401      	adds	r4, #1
 801315e:	5d0d      	ldrb	r5, [r1, r4]
 8013160:	42ab      	cmp	r3, r5
 8013162:	d0f6      	beq.n	8013152 <memcmp+0x6>
 8013164:	1b58      	subs	r0, r3, r5
 8013166:	bd30      	pop	{r4, r5, pc}

08013168 <memcpy>:
 8013168:	440a      	add	r2, r1
 801316a:	4291      	cmp	r1, r2
 801316c:	f100 33ff 	add.w	r3, r0, #4294967295
 8013170:	d100      	bne.n	8013174 <memcpy+0xc>
 8013172:	4770      	bx	lr
 8013174:	b510      	push	{r4, lr}
 8013176:	f811 4b01 	ldrb.w	r4, [r1], #1
 801317a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801317e:	4291      	cmp	r1, r2
 8013180:	d1f9      	bne.n	8013176 <memcpy+0xe>
 8013182:	bd10      	pop	{r4, pc}

08013184 <memset>:
 8013184:	4402      	add	r2, r0
 8013186:	4603      	mov	r3, r0
 8013188:	4293      	cmp	r3, r2
 801318a:	d100      	bne.n	801318e <memset+0xa>
 801318c:	4770      	bx	lr
 801318e:	f803 1b01 	strb.w	r1, [r3], #1
 8013192:	e7f9      	b.n	8013188 <memset+0x4>

08013194 <iprintf>:
 8013194:	b40f      	push	{r0, r1, r2, r3}
 8013196:	4b0a      	ldr	r3, [pc, #40]	; (80131c0 <iprintf+0x2c>)
 8013198:	b513      	push	{r0, r1, r4, lr}
 801319a:	681c      	ldr	r4, [r3, #0]
 801319c:	b124      	cbz	r4, 80131a8 <iprintf+0x14>
 801319e:	69a3      	ldr	r3, [r4, #24]
 80131a0:	b913      	cbnz	r3, 80131a8 <iprintf+0x14>
 80131a2:	4620      	mov	r0, r4
 80131a4:	f000 f8c4 	bl	8013330 <__sinit>
 80131a8:	ab05      	add	r3, sp, #20
 80131aa:	9a04      	ldr	r2, [sp, #16]
 80131ac:	68a1      	ldr	r1, [r4, #8]
 80131ae:	9301      	str	r3, [sp, #4]
 80131b0:	4620      	mov	r0, r4
 80131b2:	f000 fa4b 	bl	801364c <_vfiprintf_r>
 80131b6:	b002      	add	sp, #8
 80131b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80131bc:	b004      	add	sp, #16
 80131be:	4770      	bx	lr
 80131c0:	24000030 	.word	0x24000030

080131c4 <rand>:
 80131c4:	4b17      	ldr	r3, [pc, #92]	; (8013224 <rand+0x60>)
 80131c6:	b510      	push	{r4, lr}
 80131c8:	681c      	ldr	r4, [r3, #0]
 80131ca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80131cc:	b9b3      	cbnz	r3, 80131fc <rand+0x38>
 80131ce:	2018      	movs	r0, #24
 80131d0:	f000 f960 	bl	8013494 <malloc>
 80131d4:	63a0      	str	r0, [r4, #56]	; 0x38
 80131d6:	b928      	cbnz	r0, 80131e4 <rand+0x20>
 80131d8:	4602      	mov	r2, r0
 80131da:	4b13      	ldr	r3, [pc, #76]	; (8013228 <rand+0x64>)
 80131dc:	4813      	ldr	r0, [pc, #76]	; (801322c <rand+0x68>)
 80131de:	214e      	movs	r1, #78	; 0x4e
 80131e0:	f000 f830 	bl	8013244 <__assert_func>
 80131e4:	4a12      	ldr	r2, [pc, #72]	; (8013230 <rand+0x6c>)
 80131e6:	4b13      	ldr	r3, [pc, #76]	; (8013234 <rand+0x70>)
 80131e8:	e9c0 2300 	strd	r2, r3, [r0]
 80131ec:	4b12      	ldr	r3, [pc, #72]	; (8013238 <rand+0x74>)
 80131ee:	6083      	str	r3, [r0, #8]
 80131f0:	230b      	movs	r3, #11
 80131f2:	8183      	strh	r3, [r0, #12]
 80131f4:	2201      	movs	r2, #1
 80131f6:	2300      	movs	r3, #0
 80131f8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80131fc:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80131fe:	480f      	ldr	r0, [pc, #60]	; (801323c <rand+0x78>)
 8013200:	690a      	ldr	r2, [r1, #16]
 8013202:	694b      	ldr	r3, [r1, #20]
 8013204:	4c0e      	ldr	r4, [pc, #56]	; (8013240 <rand+0x7c>)
 8013206:	4350      	muls	r0, r2
 8013208:	fb04 0003 	mla	r0, r4, r3, r0
 801320c:	fba2 3404 	umull	r3, r4, r2, r4
 8013210:	1c5a      	adds	r2, r3, #1
 8013212:	4404      	add	r4, r0
 8013214:	f144 0000 	adc.w	r0, r4, #0
 8013218:	e9c1 2004 	strd	r2, r0, [r1, #16]
 801321c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8013220:	bd10      	pop	{r4, pc}
 8013222:	bf00      	nop
 8013224:	24000030 	.word	0x24000030
 8013228:	08016d40 	.word	0x08016d40
 801322c:	08016d57 	.word	0x08016d57
 8013230:	abcd330e 	.word	0xabcd330e
 8013234:	e66d1234 	.word	0xe66d1234
 8013238:	0005deec 	.word	0x0005deec
 801323c:	5851f42d 	.word	0x5851f42d
 8013240:	4c957f2d 	.word	0x4c957f2d

08013244 <__assert_func>:
 8013244:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013246:	4614      	mov	r4, r2
 8013248:	461a      	mov	r2, r3
 801324a:	4b09      	ldr	r3, [pc, #36]	; (8013270 <__assert_func+0x2c>)
 801324c:	681b      	ldr	r3, [r3, #0]
 801324e:	4605      	mov	r5, r0
 8013250:	68d8      	ldr	r0, [r3, #12]
 8013252:	b14c      	cbz	r4, 8013268 <__assert_func+0x24>
 8013254:	4b07      	ldr	r3, [pc, #28]	; (8013274 <__assert_func+0x30>)
 8013256:	9100      	str	r1, [sp, #0]
 8013258:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801325c:	4906      	ldr	r1, [pc, #24]	; (8013278 <__assert_func+0x34>)
 801325e:	462b      	mov	r3, r5
 8013260:	f000 f8e4 	bl	801342c <fiprintf>
 8013264:	f000 fddc 	bl	8013e20 <abort>
 8013268:	4b04      	ldr	r3, [pc, #16]	; (801327c <__assert_func+0x38>)
 801326a:	461c      	mov	r4, r3
 801326c:	e7f3      	b.n	8013256 <__assert_func+0x12>
 801326e:	bf00      	nop
 8013270:	24000030 	.word	0x24000030
 8013274:	08016db6 	.word	0x08016db6
 8013278:	08016dc3 	.word	0x08016dc3
 801327c:	08016df1 	.word	0x08016df1

08013280 <std>:
 8013280:	2300      	movs	r3, #0
 8013282:	b510      	push	{r4, lr}
 8013284:	4604      	mov	r4, r0
 8013286:	e9c0 3300 	strd	r3, r3, [r0]
 801328a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801328e:	6083      	str	r3, [r0, #8]
 8013290:	8181      	strh	r1, [r0, #12]
 8013292:	6643      	str	r3, [r0, #100]	; 0x64
 8013294:	81c2      	strh	r2, [r0, #14]
 8013296:	6183      	str	r3, [r0, #24]
 8013298:	4619      	mov	r1, r3
 801329a:	2208      	movs	r2, #8
 801329c:	305c      	adds	r0, #92	; 0x5c
 801329e:	f7ff ff71 	bl	8013184 <memset>
 80132a2:	4b05      	ldr	r3, [pc, #20]	; (80132b8 <std+0x38>)
 80132a4:	6263      	str	r3, [r4, #36]	; 0x24
 80132a6:	4b05      	ldr	r3, [pc, #20]	; (80132bc <std+0x3c>)
 80132a8:	62a3      	str	r3, [r4, #40]	; 0x28
 80132aa:	4b05      	ldr	r3, [pc, #20]	; (80132c0 <std+0x40>)
 80132ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 80132ae:	4b05      	ldr	r3, [pc, #20]	; (80132c4 <std+0x44>)
 80132b0:	6224      	str	r4, [r4, #32]
 80132b2:	6323      	str	r3, [r4, #48]	; 0x30
 80132b4:	bd10      	pop	{r4, pc}
 80132b6:	bf00      	nop
 80132b8:	08013bf5 	.word	0x08013bf5
 80132bc:	08013c17 	.word	0x08013c17
 80132c0:	08013c4f 	.word	0x08013c4f
 80132c4:	08013c73 	.word	0x08013c73

080132c8 <_cleanup_r>:
 80132c8:	4901      	ldr	r1, [pc, #4]	; (80132d0 <_cleanup_r+0x8>)
 80132ca:	f000 b8c1 	b.w	8013450 <_fwalk_reent>
 80132ce:	bf00      	nop
 80132d0:	08013f5d 	.word	0x08013f5d

080132d4 <__sfmoreglue>:
 80132d4:	b570      	push	{r4, r5, r6, lr}
 80132d6:	1e4a      	subs	r2, r1, #1
 80132d8:	2568      	movs	r5, #104	; 0x68
 80132da:	4355      	muls	r5, r2
 80132dc:	460e      	mov	r6, r1
 80132de:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80132e2:	f000 f92f 	bl	8013544 <_malloc_r>
 80132e6:	4604      	mov	r4, r0
 80132e8:	b140      	cbz	r0, 80132fc <__sfmoreglue+0x28>
 80132ea:	2100      	movs	r1, #0
 80132ec:	e9c0 1600 	strd	r1, r6, [r0]
 80132f0:	300c      	adds	r0, #12
 80132f2:	60a0      	str	r0, [r4, #8]
 80132f4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80132f8:	f7ff ff44 	bl	8013184 <memset>
 80132fc:	4620      	mov	r0, r4
 80132fe:	bd70      	pop	{r4, r5, r6, pc}

08013300 <__sfp_lock_acquire>:
 8013300:	4801      	ldr	r0, [pc, #4]	; (8013308 <__sfp_lock_acquire+0x8>)
 8013302:	f000 b8c5 	b.w	8013490 <__retarget_lock_acquire_recursive>
 8013306:	bf00      	nop
 8013308:	240037fc 	.word	0x240037fc

0801330c <__sfp_lock_release>:
 801330c:	4801      	ldr	r0, [pc, #4]	; (8013314 <__sfp_lock_release+0x8>)
 801330e:	f000 b8c0 	b.w	8013492 <__retarget_lock_release_recursive>
 8013312:	bf00      	nop
 8013314:	240037fc 	.word	0x240037fc

08013318 <__sinit_lock_acquire>:
 8013318:	4801      	ldr	r0, [pc, #4]	; (8013320 <__sinit_lock_acquire+0x8>)
 801331a:	f000 b8b9 	b.w	8013490 <__retarget_lock_acquire_recursive>
 801331e:	bf00      	nop
 8013320:	240037f7 	.word	0x240037f7

08013324 <__sinit_lock_release>:
 8013324:	4801      	ldr	r0, [pc, #4]	; (801332c <__sinit_lock_release+0x8>)
 8013326:	f000 b8b4 	b.w	8013492 <__retarget_lock_release_recursive>
 801332a:	bf00      	nop
 801332c:	240037f7 	.word	0x240037f7

08013330 <__sinit>:
 8013330:	b510      	push	{r4, lr}
 8013332:	4604      	mov	r4, r0
 8013334:	f7ff fff0 	bl	8013318 <__sinit_lock_acquire>
 8013338:	69a3      	ldr	r3, [r4, #24]
 801333a:	b11b      	cbz	r3, 8013344 <__sinit+0x14>
 801333c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013340:	f7ff bff0 	b.w	8013324 <__sinit_lock_release>
 8013344:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8013348:	6523      	str	r3, [r4, #80]	; 0x50
 801334a:	4b13      	ldr	r3, [pc, #76]	; (8013398 <__sinit+0x68>)
 801334c:	4a13      	ldr	r2, [pc, #76]	; (801339c <__sinit+0x6c>)
 801334e:	681b      	ldr	r3, [r3, #0]
 8013350:	62a2      	str	r2, [r4, #40]	; 0x28
 8013352:	42a3      	cmp	r3, r4
 8013354:	bf04      	itt	eq
 8013356:	2301      	moveq	r3, #1
 8013358:	61a3      	streq	r3, [r4, #24]
 801335a:	4620      	mov	r0, r4
 801335c:	f000 f820 	bl	80133a0 <__sfp>
 8013360:	6060      	str	r0, [r4, #4]
 8013362:	4620      	mov	r0, r4
 8013364:	f000 f81c 	bl	80133a0 <__sfp>
 8013368:	60a0      	str	r0, [r4, #8]
 801336a:	4620      	mov	r0, r4
 801336c:	f000 f818 	bl	80133a0 <__sfp>
 8013370:	2200      	movs	r2, #0
 8013372:	60e0      	str	r0, [r4, #12]
 8013374:	2104      	movs	r1, #4
 8013376:	6860      	ldr	r0, [r4, #4]
 8013378:	f7ff ff82 	bl	8013280 <std>
 801337c:	68a0      	ldr	r0, [r4, #8]
 801337e:	2201      	movs	r2, #1
 8013380:	2109      	movs	r1, #9
 8013382:	f7ff ff7d 	bl	8013280 <std>
 8013386:	68e0      	ldr	r0, [r4, #12]
 8013388:	2202      	movs	r2, #2
 801338a:	2112      	movs	r1, #18
 801338c:	f7ff ff78 	bl	8013280 <std>
 8013390:	2301      	movs	r3, #1
 8013392:	61a3      	str	r3, [r4, #24]
 8013394:	e7d2      	b.n	801333c <__sinit+0xc>
 8013396:	bf00      	nop
 8013398:	08016d3c 	.word	0x08016d3c
 801339c:	080132c9 	.word	0x080132c9

080133a0 <__sfp>:
 80133a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80133a2:	4607      	mov	r7, r0
 80133a4:	f7ff ffac 	bl	8013300 <__sfp_lock_acquire>
 80133a8:	4b1e      	ldr	r3, [pc, #120]	; (8013424 <__sfp+0x84>)
 80133aa:	681e      	ldr	r6, [r3, #0]
 80133ac:	69b3      	ldr	r3, [r6, #24]
 80133ae:	b913      	cbnz	r3, 80133b6 <__sfp+0x16>
 80133b0:	4630      	mov	r0, r6
 80133b2:	f7ff ffbd 	bl	8013330 <__sinit>
 80133b6:	3648      	adds	r6, #72	; 0x48
 80133b8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80133bc:	3b01      	subs	r3, #1
 80133be:	d503      	bpl.n	80133c8 <__sfp+0x28>
 80133c0:	6833      	ldr	r3, [r6, #0]
 80133c2:	b30b      	cbz	r3, 8013408 <__sfp+0x68>
 80133c4:	6836      	ldr	r6, [r6, #0]
 80133c6:	e7f7      	b.n	80133b8 <__sfp+0x18>
 80133c8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80133cc:	b9d5      	cbnz	r5, 8013404 <__sfp+0x64>
 80133ce:	4b16      	ldr	r3, [pc, #88]	; (8013428 <__sfp+0x88>)
 80133d0:	60e3      	str	r3, [r4, #12]
 80133d2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80133d6:	6665      	str	r5, [r4, #100]	; 0x64
 80133d8:	f000 f859 	bl	801348e <__retarget_lock_init_recursive>
 80133dc:	f7ff ff96 	bl	801330c <__sfp_lock_release>
 80133e0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80133e4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80133e8:	6025      	str	r5, [r4, #0]
 80133ea:	61a5      	str	r5, [r4, #24]
 80133ec:	2208      	movs	r2, #8
 80133ee:	4629      	mov	r1, r5
 80133f0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80133f4:	f7ff fec6 	bl	8013184 <memset>
 80133f8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80133fc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013400:	4620      	mov	r0, r4
 8013402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013404:	3468      	adds	r4, #104	; 0x68
 8013406:	e7d9      	b.n	80133bc <__sfp+0x1c>
 8013408:	2104      	movs	r1, #4
 801340a:	4638      	mov	r0, r7
 801340c:	f7ff ff62 	bl	80132d4 <__sfmoreglue>
 8013410:	4604      	mov	r4, r0
 8013412:	6030      	str	r0, [r6, #0]
 8013414:	2800      	cmp	r0, #0
 8013416:	d1d5      	bne.n	80133c4 <__sfp+0x24>
 8013418:	f7ff ff78 	bl	801330c <__sfp_lock_release>
 801341c:	230c      	movs	r3, #12
 801341e:	603b      	str	r3, [r7, #0]
 8013420:	e7ee      	b.n	8013400 <__sfp+0x60>
 8013422:	bf00      	nop
 8013424:	08016d3c 	.word	0x08016d3c
 8013428:	ffff0001 	.word	0xffff0001

0801342c <fiprintf>:
 801342c:	b40e      	push	{r1, r2, r3}
 801342e:	b503      	push	{r0, r1, lr}
 8013430:	4601      	mov	r1, r0
 8013432:	ab03      	add	r3, sp, #12
 8013434:	4805      	ldr	r0, [pc, #20]	; (801344c <fiprintf+0x20>)
 8013436:	f853 2b04 	ldr.w	r2, [r3], #4
 801343a:	6800      	ldr	r0, [r0, #0]
 801343c:	9301      	str	r3, [sp, #4]
 801343e:	f000 f905 	bl	801364c <_vfiprintf_r>
 8013442:	b002      	add	sp, #8
 8013444:	f85d eb04 	ldr.w	lr, [sp], #4
 8013448:	b003      	add	sp, #12
 801344a:	4770      	bx	lr
 801344c:	24000030 	.word	0x24000030

08013450 <_fwalk_reent>:
 8013450:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013454:	4606      	mov	r6, r0
 8013456:	4688      	mov	r8, r1
 8013458:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801345c:	2700      	movs	r7, #0
 801345e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013462:	f1b9 0901 	subs.w	r9, r9, #1
 8013466:	d505      	bpl.n	8013474 <_fwalk_reent+0x24>
 8013468:	6824      	ldr	r4, [r4, #0]
 801346a:	2c00      	cmp	r4, #0
 801346c:	d1f7      	bne.n	801345e <_fwalk_reent+0xe>
 801346e:	4638      	mov	r0, r7
 8013470:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013474:	89ab      	ldrh	r3, [r5, #12]
 8013476:	2b01      	cmp	r3, #1
 8013478:	d907      	bls.n	801348a <_fwalk_reent+0x3a>
 801347a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801347e:	3301      	adds	r3, #1
 8013480:	d003      	beq.n	801348a <_fwalk_reent+0x3a>
 8013482:	4629      	mov	r1, r5
 8013484:	4630      	mov	r0, r6
 8013486:	47c0      	blx	r8
 8013488:	4307      	orrs	r7, r0
 801348a:	3568      	adds	r5, #104	; 0x68
 801348c:	e7e9      	b.n	8013462 <_fwalk_reent+0x12>

0801348e <__retarget_lock_init_recursive>:
 801348e:	4770      	bx	lr

08013490 <__retarget_lock_acquire_recursive>:
 8013490:	4770      	bx	lr

08013492 <__retarget_lock_release_recursive>:
 8013492:	4770      	bx	lr

08013494 <malloc>:
 8013494:	4b02      	ldr	r3, [pc, #8]	; (80134a0 <malloc+0xc>)
 8013496:	4601      	mov	r1, r0
 8013498:	6818      	ldr	r0, [r3, #0]
 801349a:	f000 b853 	b.w	8013544 <_malloc_r>
 801349e:	bf00      	nop
 80134a0:	24000030 	.word	0x24000030

080134a4 <_free_r>:
 80134a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80134a6:	2900      	cmp	r1, #0
 80134a8:	d048      	beq.n	801353c <_free_r+0x98>
 80134aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80134ae:	9001      	str	r0, [sp, #4]
 80134b0:	2b00      	cmp	r3, #0
 80134b2:	f1a1 0404 	sub.w	r4, r1, #4
 80134b6:	bfb8      	it	lt
 80134b8:	18e4      	addlt	r4, r4, r3
 80134ba:	f000 fe01 	bl	80140c0 <__malloc_lock>
 80134be:	4a20      	ldr	r2, [pc, #128]	; (8013540 <_free_r+0x9c>)
 80134c0:	9801      	ldr	r0, [sp, #4]
 80134c2:	6813      	ldr	r3, [r2, #0]
 80134c4:	4615      	mov	r5, r2
 80134c6:	b933      	cbnz	r3, 80134d6 <_free_r+0x32>
 80134c8:	6063      	str	r3, [r4, #4]
 80134ca:	6014      	str	r4, [r2, #0]
 80134cc:	b003      	add	sp, #12
 80134ce:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80134d2:	f000 bdfb 	b.w	80140cc <__malloc_unlock>
 80134d6:	42a3      	cmp	r3, r4
 80134d8:	d90b      	bls.n	80134f2 <_free_r+0x4e>
 80134da:	6821      	ldr	r1, [r4, #0]
 80134dc:	1862      	adds	r2, r4, r1
 80134de:	4293      	cmp	r3, r2
 80134e0:	bf04      	itt	eq
 80134e2:	681a      	ldreq	r2, [r3, #0]
 80134e4:	685b      	ldreq	r3, [r3, #4]
 80134e6:	6063      	str	r3, [r4, #4]
 80134e8:	bf04      	itt	eq
 80134ea:	1852      	addeq	r2, r2, r1
 80134ec:	6022      	streq	r2, [r4, #0]
 80134ee:	602c      	str	r4, [r5, #0]
 80134f0:	e7ec      	b.n	80134cc <_free_r+0x28>
 80134f2:	461a      	mov	r2, r3
 80134f4:	685b      	ldr	r3, [r3, #4]
 80134f6:	b10b      	cbz	r3, 80134fc <_free_r+0x58>
 80134f8:	42a3      	cmp	r3, r4
 80134fa:	d9fa      	bls.n	80134f2 <_free_r+0x4e>
 80134fc:	6811      	ldr	r1, [r2, #0]
 80134fe:	1855      	adds	r5, r2, r1
 8013500:	42a5      	cmp	r5, r4
 8013502:	d10b      	bne.n	801351c <_free_r+0x78>
 8013504:	6824      	ldr	r4, [r4, #0]
 8013506:	4421      	add	r1, r4
 8013508:	1854      	adds	r4, r2, r1
 801350a:	42a3      	cmp	r3, r4
 801350c:	6011      	str	r1, [r2, #0]
 801350e:	d1dd      	bne.n	80134cc <_free_r+0x28>
 8013510:	681c      	ldr	r4, [r3, #0]
 8013512:	685b      	ldr	r3, [r3, #4]
 8013514:	6053      	str	r3, [r2, #4]
 8013516:	4421      	add	r1, r4
 8013518:	6011      	str	r1, [r2, #0]
 801351a:	e7d7      	b.n	80134cc <_free_r+0x28>
 801351c:	d902      	bls.n	8013524 <_free_r+0x80>
 801351e:	230c      	movs	r3, #12
 8013520:	6003      	str	r3, [r0, #0]
 8013522:	e7d3      	b.n	80134cc <_free_r+0x28>
 8013524:	6825      	ldr	r5, [r4, #0]
 8013526:	1961      	adds	r1, r4, r5
 8013528:	428b      	cmp	r3, r1
 801352a:	bf04      	itt	eq
 801352c:	6819      	ldreq	r1, [r3, #0]
 801352e:	685b      	ldreq	r3, [r3, #4]
 8013530:	6063      	str	r3, [r4, #4]
 8013532:	bf04      	itt	eq
 8013534:	1949      	addeq	r1, r1, r5
 8013536:	6021      	streq	r1, [r4, #0]
 8013538:	6054      	str	r4, [r2, #4]
 801353a:	e7c7      	b.n	80134cc <_free_r+0x28>
 801353c:	b003      	add	sp, #12
 801353e:	bd30      	pop	{r4, r5, pc}
 8013540:	2400022c 	.word	0x2400022c

08013544 <_malloc_r>:
 8013544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013546:	1ccd      	adds	r5, r1, #3
 8013548:	f025 0503 	bic.w	r5, r5, #3
 801354c:	3508      	adds	r5, #8
 801354e:	2d0c      	cmp	r5, #12
 8013550:	bf38      	it	cc
 8013552:	250c      	movcc	r5, #12
 8013554:	2d00      	cmp	r5, #0
 8013556:	4606      	mov	r6, r0
 8013558:	db01      	blt.n	801355e <_malloc_r+0x1a>
 801355a:	42a9      	cmp	r1, r5
 801355c:	d903      	bls.n	8013566 <_malloc_r+0x22>
 801355e:	230c      	movs	r3, #12
 8013560:	6033      	str	r3, [r6, #0]
 8013562:	2000      	movs	r0, #0
 8013564:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013566:	f000 fdab 	bl	80140c0 <__malloc_lock>
 801356a:	4921      	ldr	r1, [pc, #132]	; (80135f0 <_malloc_r+0xac>)
 801356c:	680a      	ldr	r2, [r1, #0]
 801356e:	4614      	mov	r4, r2
 8013570:	b99c      	cbnz	r4, 801359a <_malloc_r+0x56>
 8013572:	4f20      	ldr	r7, [pc, #128]	; (80135f4 <_malloc_r+0xb0>)
 8013574:	683b      	ldr	r3, [r7, #0]
 8013576:	b923      	cbnz	r3, 8013582 <_malloc_r+0x3e>
 8013578:	4621      	mov	r1, r4
 801357a:	4630      	mov	r0, r6
 801357c:	f000 fb2a 	bl	8013bd4 <_sbrk_r>
 8013580:	6038      	str	r0, [r7, #0]
 8013582:	4629      	mov	r1, r5
 8013584:	4630      	mov	r0, r6
 8013586:	f000 fb25 	bl	8013bd4 <_sbrk_r>
 801358a:	1c43      	adds	r3, r0, #1
 801358c:	d123      	bne.n	80135d6 <_malloc_r+0x92>
 801358e:	230c      	movs	r3, #12
 8013590:	6033      	str	r3, [r6, #0]
 8013592:	4630      	mov	r0, r6
 8013594:	f000 fd9a 	bl	80140cc <__malloc_unlock>
 8013598:	e7e3      	b.n	8013562 <_malloc_r+0x1e>
 801359a:	6823      	ldr	r3, [r4, #0]
 801359c:	1b5b      	subs	r3, r3, r5
 801359e:	d417      	bmi.n	80135d0 <_malloc_r+0x8c>
 80135a0:	2b0b      	cmp	r3, #11
 80135a2:	d903      	bls.n	80135ac <_malloc_r+0x68>
 80135a4:	6023      	str	r3, [r4, #0]
 80135a6:	441c      	add	r4, r3
 80135a8:	6025      	str	r5, [r4, #0]
 80135aa:	e004      	b.n	80135b6 <_malloc_r+0x72>
 80135ac:	6863      	ldr	r3, [r4, #4]
 80135ae:	42a2      	cmp	r2, r4
 80135b0:	bf0c      	ite	eq
 80135b2:	600b      	streq	r3, [r1, #0]
 80135b4:	6053      	strne	r3, [r2, #4]
 80135b6:	4630      	mov	r0, r6
 80135b8:	f000 fd88 	bl	80140cc <__malloc_unlock>
 80135bc:	f104 000b 	add.w	r0, r4, #11
 80135c0:	1d23      	adds	r3, r4, #4
 80135c2:	f020 0007 	bic.w	r0, r0, #7
 80135c6:	1ac2      	subs	r2, r0, r3
 80135c8:	d0cc      	beq.n	8013564 <_malloc_r+0x20>
 80135ca:	1a1b      	subs	r3, r3, r0
 80135cc:	50a3      	str	r3, [r4, r2]
 80135ce:	e7c9      	b.n	8013564 <_malloc_r+0x20>
 80135d0:	4622      	mov	r2, r4
 80135d2:	6864      	ldr	r4, [r4, #4]
 80135d4:	e7cc      	b.n	8013570 <_malloc_r+0x2c>
 80135d6:	1cc4      	adds	r4, r0, #3
 80135d8:	f024 0403 	bic.w	r4, r4, #3
 80135dc:	42a0      	cmp	r0, r4
 80135de:	d0e3      	beq.n	80135a8 <_malloc_r+0x64>
 80135e0:	1a21      	subs	r1, r4, r0
 80135e2:	4630      	mov	r0, r6
 80135e4:	f000 faf6 	bl	8013bd4 <_sbrk_r>
 80135e8:	3001      	adds	r0, #1
 80135ea:	d1dd      	bne.n	80135a8 <_malloc_r+0x64>
 80135ec:	e7cf      	b.n	801358e <_malloc_r+0x4a>
 80135ee:	bf00      	nop
 80135f0:	2400022c 	.word	0x2400022c
 80135f4:	24000230 	.word	0x24000230

080135f8 <__sfputc_r>:
 80135f8:	6893      	ldr	r3, [r2, #8]
 80135fa:	3b01      	subs	r3, #1
 80135fc:	2b00      	cmp	r3, #0
 80135fe:	b410      	push	{r4}
 8013600:	6093      	str	r3, [r2, #8]
 8013602:	da08      	bge.n	8013616 <__sfputc_r+0x1e>
 8013604:	6994      	ldr	r4, [r2, #24]
 8013606:	42a3      	cmp	r3, r4
 8013608:	db01      	blt.n	801360e <__sfputc_r+0x16>
 801360a:	290a      	cmp	r1, #10
 801360c:	d103      	bne.n	8013616 <__sfputc_r+0x1e>
 801360e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013612:	f000 bb33 	b.w	8013c7c <__swbuf_r>
 8013616:	6813      	ldr	r3, [r2, #0]
 8013618:	1c58      	adds	r0, r3, #1
 801361a:	6010      	str	r0, [r2, #0]
 801361c:	7019      	strb	r1, [r3, #0]
 801361e:	4608      	mov	r0, r1
 8013620:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013624:	4770      	bx	lr

08013626 <__sfputs_r>:
 8013626:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013628:	4606      	mov	r6, r0
 801362a:	460f      	mov	r7, r1
 801362c:	4614      	mov	r4, r2
 801362e:	18d5      	adds	r5, r2, r3
 8013630:	42ac      	cmp	r4, r5
 8013632:	d101      	bne.n	8013638 <__sfputs_r+0x12>
 8013634:	2000      	movs	r0, #0
 8013636:	e007      	b.n	8013648 <__sfputs_r+0x22>
 8013638:	f814 1b01 	ldrb.w	r1, [r4], #1
 801363c:	463a      	mov	r2, r7
 801363e:	4630      	mov	r0, r6
 8013640:	f7ff ffda 	bl	80135f8 <__sfputc_r>
 8013644:	1c43      	adds	r3, r0, #1
 8013646:	d1f3      	bne.n	8013630 <__sfputs_r+0xa>
 8013648:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801364c <_vfiprintf_r>:
 801364c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013650:	460d      	mov	r5, r1
 8013652:	b09d      	sub	sp, #116	; 0x74
 8013654:	4614      	mov	r4, r2
 8013656:	4698      	mov	r8, r3
 8013658:	4606      	mov	r6, r0
 801365a:	b118      	cbz	r0, 8013664 <_vfiprintf_r+0x18>
 801365c:	6983      	ldr	r3, [r0, #24]
 801365e:	b90b      	cbnz	r3, 8013664 <_vfiprintf_r+0x18>
 8013660:	f7ff fe66 	bl	8013330 <__sinit>
 8013664:	4b89      	ldr	r3, [pc, #548]	; (801388c <_vfiprintf_r+0x240>)
 8013666:	429d      	cmp	r5, r3
 8013668:	d11b      	bne.n	80136a2 <_vfiprintf_r+0x56>
 801366a:	6875      	ldr	r5, [r6, #4]
 801366c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801366e:	07d9      	lsls	r1, r3, #31
 8013670:	d405      	bmi.n	801367e <_vfiprintf_r+0x32>
 8013672:	89ab      	ldrh	r3, [r5, #12]
 8013674:	059a      	lsls	r2, r3, #22
 8013676:	d402      	bmi.n	801367e <_vfiprintf_r+0x32>
 8013678:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801367a:	f7ff ff09 	bl	8013490 <__retarget_lock_acquire_recursive>
 801367e:	89ab      	ldrh	r3, [r5, #12]
 8013680:	071b      	lsls	r3, r3, #28
 8013682:	d501      	bpl.n	8013688 <_vfiprintf_r+0x3c>
 8013684:	692b      	ldr	r3, [r5, #16]
 8013686:	b9eb      	cbnz	r3, 80136c4 <_vfiprintf_r+0x78>
 8013688:	4629      	mov	r1, r5
 801368a:	4630      	mov	r0, r6
 801368c:	f000 fb5a 	bl	8013d44 <__swsetup_r>
 8013690:	b1c0      	cbz	r0, 80136c4 <_vfiprintf_r+0x78>
 8013692:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013694:	07dc      	lsls	r4, r3, #31
 8013696:	d50e      	bpl.n	80136b6 <_vfiprintf_r+0x6a>
 8013698:	f04f 30ff 	mov.w	r0, #4294967295
 801369c:	b01d      	add	sp, #116	; 0x74
 801369e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80136a2:	4b7b      	ldr	r3, [pc, #492]	; (8013890 <_vfiprintf_r+0x244>)
 80136a4:	429d      	cmp	r5, r3
 80136a6:	d101      	bne.n	80136ac <_vfiprintf_r+0x60>
 80136a8:	68b5      	ldr	r5, [r6, #8]
 80136aa:	e7df      	b.n	801366c <_vfiprintf_r+0x20>
 80136ac:	4b79      	ldr	r3, [pc, #484]	; (8013894 <_vfiprintf_r+0x248>)
 80136ae:	429d      	cmp	r5, r3
 80136b0:	bf08      	it	eq
 80136b2:	68f5      	ldreq	r5, [r6, #12]
 80136b4:	e7da      	b.n	801366c <_vfiprintf_r+0x20>
 80136b6:	89ab      	ldrh	r3, [r5, #12]
 80136b8:	0598      	lsls	r0, r3, #22
 80136ba:	d4ed      	bmi.n	8013698 <_vfiprintf_r+0x4c>
 80136bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80136be:	f7ff fee8 	bl	8013492 <__retarget_lock_release_recursive>
 80136c2:	e7e9      	b.n	8013698 <_vfiprintf_r+0x4c>
 80136c4:	2300      	movs	r3, #0
 80136c6:	9309      	str	r3, [sp, #36]	; 0x24
 80136c8:	2320      	movs	r3, #32
 80136ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80136ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80136d2:	2330      	movs	r3, #48	; 0x30
 80136d4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8013898 <_vfiprintf_r+0x24c>
 80136d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80136dc:	f04f 0901 	mov.w	r9, #1
 80136e0:	4623      	mov	r3, r4
 80136e2:	469a      	mov	sl, r3
 80136e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80136e8:	b10a      	cbz	r2, 80136ee <_vfiprintf_r+0xa2>
 80136ea:	2a25      	cmp	r2, #37	; 0x25
 80136ec:	d1f9      	bne.n	80136e2 <_vfiprintf_r+0x96>
 80136ee:	ebba 0b04 	subs.w	fp, sl, r4
 80136f2:	d00b      	beq.n	801370c <_vfiprintf_r+0xc0>
 80136f4:	465b      	mov	r3, fp
 80136f6:	4622      	mov	r2, r4
 80136f8:	4629      	mov	r1, r5
 80136fa:	4630      	mov	r0, r6
 80136fc:	f7ff ff93 	bl	8013626 <__sfputs_r>
 8013700:	3001      	adds	r0, #1
 8013702:	f000 80aa 	beq.w	801385a <_vfiprintf_r+0x20e>
 8013706:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013708:	445a      	add	r2, fp
 801370a:	9209      	str	r2, [sp, #36]	; 0x24
 801370c:	f89a 3000 	ldrb.w	r3, [sl]
 8013710:	2b00      	cmp	r3, #0
 8013712:	f000 80a2 	beq.w	801385a <_vfiprintf_r+0x20e>
 8013716:	2300      	movs	r3, #0
 8013718:	f04f 32ff 	mov.w	r2, #4294967295
 801371c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013720:	f10a 0a01 	add.w	sl, sl, #1
 8013724:	9304      	str	r3, [sp, #16]
 8013726:	9307      	str	r3, [sp, #28]
 8013728:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801372c:	931a      	str	r3, [sp, #104]	; 0x68
 801372e:	4654      	mov	r4, sl
 8013730:	2205      	movs	r2, #5
 8013732:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013736:	4858      	ldr	r0, [pc, #352]	; (8013898 <_vfiprintf_r+0x24c>)
 8013738:	f7ec fdd2 	bl	80002e0 <memchr>
 801373c:	9a04      	ldr	r2, [sp, #16]
 801373e:	b9d8      	cbnz	r0, 8013778 <_vfiprintf_r+0x12c>
 8013740:	06d1      	lsls	r1, r2, #27
 8013742:	bf44      	itt	mi
 8013744:	2320      	movmi	r3, #32
 8013746:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801374a:	0713      	lsls	r3, r2, #28
 801374c:	bf44      	itt	mi
 801374e:	232b      	movmi	r3, #43	; 0x2b
 8013750:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013754:	f89a 3000 	ldrb.w	r3, [sl]
 8013758:	2b2a      	cmp	r3, #42	; 0x2a
 801375a:	d015      	beq.n	8013788 <_vfiprintf_r+0x13c>
 801375c:	9a07      	ldr	r2, [sp, #28]
 801375e:	4654      	mov	r4, sl
 8013760:	2000      	movs	r0, #0
 8013762:	f04f 0c0a 	mov.w	ip, #10
 8013766:	4621      	mov	r1, r4
 8013768:	f811 3b01 	ldrb.w	r3, [r1], #1
 801376c:	3b30      	subs	r3, #48	; 0x30
 801376e:	2b09      	cmp	r3, #9
 8013770:	d94e      	bls.n	8013810 <_vfiprintf_r+0x1c4>
 8013772:	b1b0      	cbz	r0, 80137a2 <_vfiprintf_r+0x156>
 8013774:	9207      	str	r2, [sp, #28]
 8013776:	e014      	b.n	80137a2 <_vfiprintf_r+0x156>
 8013778:	eba0 0308 	sub.w	r3, r0, r8
 801377c:	fa09 f303 	lsl.w	r3, r9, r3
 8013780:	4313      	orrs	r3, r2
 8013782:	9304      	str	r3, [sp, #16]
 8013784:	46a2      	mov	sl, r4
 8013786:	e7d2      	b.n	801372e <_vfiprintf_r+0xe2>
 8013788:	9b03      	ldr	r3, [sp, #12]
 801378a:	1d19      	adds	r1, r3, #4
 801378c:	681b      	ldr	r3, [r3, #0]
 801378e:	9103      	str	r1, [sp, #12]
 8013790:	2b00      	cmp	r3, #0
 8013792:	bfbb      	ittet	lt
 8013794:	425b      	neglt	r3, r3
 8013796:	f042 0202 	orrlt.w	r2, r2, #2
 801379a:	9307      	strge	r3, [sp, #28]
 801379c:	9307      	strlt	r3, [sp, #28]
 801379e:	bfb8      	it	lt
 80137a0:	9204      	strlt	r2, [sp, #16]
 80137a2:	7823      	ldrb	r3, [r4, #0]
 80137a4:	2b2e      	cmp	r3, #46	; 0x2e
 80137a6:	d10c      	bne.n	80137c2 <_vfiprintf_r+0x176>
 80137a8:	7863      	ldrb	r3, [r4, #1]
 80137aa:	2b2a      	cmp	r3, #42	; 0x2a
 80137ac:	d135      	bne.n	801381a <_vfiprintf_r+0x1ce>
 80137ae:	9b03      	ldr	r3, [sp, #12]
 80137b0:	1d1a      	adds	r2, r3, #4
 80137b2:	681b      	ldr	r3, [r3, #0]
 80137b4:	9203      	str	r2, [sp, #12]
 80137b6:	2b00      	cmp	r3, #0
 80137b8:	bfb8      	it	lt
 80137ba:	f04f 33ff 	movlt.w	r3, #4294967295
 80137be:	3402      	adds	r4, #2
 80137c0:	9305      	str	r3, [sp, #20]
 80137c2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80138a8 <_vfiprintf_r+0x25c>
 80137c6:	7821      	ldrb	r1, [r4, #0]
 80137c8:	2203      	movs	r2, #3
 80137ca:	4650      	mov	r0, sl
 80137cc:	f7ec fd88 	bl	80002e0 <memchr>
 80137d0:	b140      	cbz	r0, 80137e4 <_vfiprintf_r+0x198>
 80137d2:	2340      	movs	r3, #64	; 0x40
 80137d4:	eba0 000a 	sub.w	r0, r0, sl
 80137d8:	fa03 f000 	lsl.w	r0, r3, r0
 80137dc:	9b04      	ldr	r3, [sp, #16]
 80137de:	4303      	orrs	r3, r0
 80137e0:	3401      	adds	r4, #1
 80137e2:	9304      	str	r3, [sp, #16]
 80137e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80137e8:	482c      	ldr	r0, [pc, #176]	; (801389c <_vfiprintf_r+0x250>)
 80137ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80137ee:	2206      	movs	r2, #6
 80137f0:	f7ec fd76 	bl	80002e0 <memchr>
 80137f4:	2800      	cmp	r0, #0
 80137f6:	d03f      	beq.n	8013878 <_vfiprintf_r+0x22c>
 80137f8:	4b29      	ldr	r3, [pc, #164]	; (80138a0 <_vfiprintf_r+0x254>)
 80137fa:	bb1b      	cbnz	r3, 8013844 <_vfiprintf_r+0x1f8>
 80137fc:	9b03      	ldr	r3, [sp, #12]
 80137fe:	3307      	adds	r3, #7
 8013800:	f023 0307 	bic.w	r3, r3, #7
 8013804:	3308      	adds	r3, #8
 8013806:	9303      	str	r3, [sp, #12]
 8013808:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801380a:	443b      	add	r3, r7
 801380c:	9309      	str	r3, [sp, #36]	; 0x24
 801380e:	e767      	b.n	80136e0 <_vfiprintf_r+0x94>
 8013810:	fb0c 3202 	mla	r2, ip, r2, r3
 8013814:	460c      	mov	r4, r1
 8013816:	2001      	movs	r0, #1
 8013818:	e7a5      	b.n	8013766 <_vfiprintf_r+0x11a>
 801381a:	2300      	movs	r3, #0
 801381c:	3401      	adds	r4, #1
 801381e:	9305      	str	r3, [sp, #20]
 8013820:	4619      	mov	r1, r3
 8013822:	f04f 0c0a 	mov.w	ip, #10
 8013826:	4620      	mov	r0, r4
 8013828:	f810 2b01 	ldrb.w	r2, [r0], #1
 801382c:	3a30      	subs	r2, #48	; 0x30
 801382e:	2a09      	cmp	r2, #9
 8013830:	d903      	bls.n	801383a <_vfiprintf_r+0x1ee>
 8013832:	2b00      	cmp	r3, #0
 8013834:	d0c5      	beq.n	80137c2 <_vfiprintf_r+0x176>
 8013836:	9105      	str	r1, [sp, #20]
 8013838:	e7c3      	b.n	80137c2 <_vfiprintf_r+0x176>
 801383a:	fb0c 2101 	mla	r1, ip, r1, r2
 801383e:	4604      	mov	r4, r0
 8013840:	2301      	movs	r3, #1
 8013842:	e7f0      	b.n	8013826 <_vfiprintf_r+0x1da>
 8013844:	ab03      	add	r3, sp, #12
 8013846:	9300      	str	r3, [sp, #0]
 8013848:	462a      	mov	r2, r5
 801384a:	4b16      	ldr	r3, [pc, #88]	; (80138a4 <_vfiprintf_r+0x258>)
 801384c:	a904      	add	r1, sp, #16
 801384e:	4630      	mov	r0, r6
 8013850:	f3af 8000 	nop.w
 8013854:	4607      	mov	r7, r0
 8013856:	1c78      	adds	r0, r7, #1
 8013858:	d1d6      	bne.n	8013808 <_vfiprintf_r+0x1bc>
 801385a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801385c:	07d9      	lsls	r1, r3, #31
 801385e:	d405      	bmi.n	801386c <_vfiprintf_r+0x220>
 8013860:	89ab      	ldrh	r3, [r5, #12]
 8013862:	059a      	lsls	r2, r3, #22
 8013864:	d402      	bmi.n	801386c <_vfiprintf_r+0x220>
 8013866:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013868:	f7ff fe13 	bl	8013492 <__retarget_lock_release_recursive>
 801386c:	89ab      	ldrh	r3, [r5, #12]
 801386e:	065b      	lsls	r3, r3, #25
 8013870:	f53f af12 	bmi.w	8013698 <_vfiprintf_r+0x4c>
 8013874:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013876:	e711      	b.n	801369c <_vfiprintf_r+0x50>
 8013878:	ab03      	add	r3, sp, #12
 801387a:	9300      	str	r3, [sp, #0]
 801387c:	462a      	mov	r2, r5
 801387e:	4b09      	ldr	r3, [pc, #36]	; (80138a4 <_vfiprintf_r+0x258>)
 8013880:	a904      	add	r1, sp, #16
 8013882:	4630      	mov	r0, r6
 8013884:	f000 f880 	bl	8013988 <_printf_i>
 8013888:	e7e4      	b.n	8013854 <_vfiprintf_r+0x208>
 801388a:	bf00      	nop
 801388c:	08016e14 	.word	0x08016e14
 8013890:	08016e34 	.word	0x08016e34
 8013894:	08016df4 	.word	0x08016df4
 8013898:	08016e54 	.word	0x08016e54
 801389c:	08016e5e 	.word	0x08016e5e
 80138a0:	00000000 	.word	0x00000000
 80138a4:	08013627 	.word	0x08013627
 80138a8:	08016e5a 	.word	0x08016e5a

080138ac <_printf_common>:
 80138ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80138b0:	4616      	mov	r6, r2
 80138b2:	4699      	mov	r9, r3
 80138b4:	688a      	ldr	r2, [r1, #8]
 80138b6:	690b      	ldr	r3, [r1, #16]
 80138b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80138bc:	4293      	cmp	r3, r2
 80138be:	bfb8      	it	lt
 80138c0:	4613      	movlt	r3, r2
 80138c2:	6033      	str	r3, [r6, #0]
 80138c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80138c8:	4607      	mov	r7, r0
 80138ca:	460c      	mov	r4, r1
 80138cc:	b10a      	cbz	r2, 80138d2 <_printf_common+0x26>
 80138ce:	3301      	adds	r3, #1
 80138d0:	6033      	str	r3, [r6, #0]
 80138d2:	6823      	ldr	r3, [r4, #0]
 80138d4:	0699      	lsls	r1, r3, #26
 80138d6:	bf42      	ittt	mi
 80138d8:	6833      	ldrmi	r3, [r6, #0]
 80138da:	3302      	addmi	r3, #2
 80138dc:	6033      	strmi	r3, [r6, #0]
 80138de:	6825      	ldr	r5, [r4, #0]
 80138e0:	f015 0506 	ands.w	r5, r5, #6
 80138e4:	d106      	bne.n	80138f4 <_printf_common+0x48>
 80138e6:	f104 0a19 	add.w	sl, r4, #25
 80138ea:	68e3      	ldr	r3, [r4, #12]
 80138ec:	6832      	ldr	r2, [r6, #0]
 80138ee:	1a9b      	subs	r3, r3, r2
 80138f0:	42ab      	cmp	r3, r5
 80138f2:	dc26      	bgt.n	8013942 <_printf_common+0x96>
 80138f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80138f8:	1e13      	subs	r3, r2, #0
 80138fa:	6822      	ldr	r2, [r4, #0]
 80138fc:	bf18      	it	ne
 80138fe:	2301      	movne	r3, #1
 8013900:	0692      	lsls	r2, r2, #26
 8013902:	d42b      	bmi.n	801395c <_printf_common+0xb0>
 8013904:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013908:	4649      	mov	r1, r9
 801390a:	4638      	mov	r0, r7
 801390c:	47c0      	blx	r8
 801390e:	3001      	adds	r0, #1
 8013910:	d01e      	beq.n	8013950 <_printf_common+0xa4>
 8013912:	6823      	ldr	r3, [r4, #0]
 8013914:	68e5      	ldr	r5, [r4, #12]
 8013916:	6832      	ldr	r2, [r6, #0]
 8013918:	f003 0306 	and.w	r3, r3, #6
 801391c:	2b04      	cmp	r3, #4
 801391e:	bf08      	it	eq
 8013920:	1aad      	subeq	r5, r5, r2
 8013922:	68a3      	ldr	r3, [r4, #8]
 8013924:	6922      	ldr	r2, [r4, #16]
 8013926:	bf0c      	ite	eq
 8013928:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801392c:	2500      	movne	r5, #0
 801392e:	4293      	cmp	r3, r2
 8013930:	bfc4      	itt	gt
 8013932:	1a9b      	subgt	r3, r3, r2
 8013934:	18ed      	addgt	r5, r5, r3
 8013936:	2600      	movs	r6, #0
 8013938:	341a      	adds	r4, #26
 801393a:	42b5      	cmp	r5, r6
 801393c:	d11a      	bne.n	8013974 <_printf_common+0xc8>
 801393e:	2000      	movs	r0, #0
 8013940:	e008      	b.n	8013954 <_printf_common+0xa8>
 8013942:	2301      	movs	r3, #1
 8013944:	4652      	mov	r2, sl
 8013946:	4649      	mov	r1, r9
 8013948:	4638      	mov	r0, r7
 801394a:	47c0      	blx	r8
 801394c:	3001      	adds	r0, #1
 801394e:	d103      	bne.n	8013958 <_printf_common+0xac>
 8013950:	f04f 30ff 	mov.w	r0, #4294967295
 8013954:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013958:	3501      	adds	r5, #1
 801395a:	e7c6      	b.n	80138ea <_printf_common+0x3e>
 801395c:	18e1      	adds	r1, r4, r3
 801395e:	1c5a      	adds	r2, r3, #1
 8013960:	2030      	movs	r0, #48	; 0x30
 8013962:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013966:	4422      	add	r2, r4
 8013968:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801396c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013970:	3302      	adds	r3, #2
 8013972:	e7c7      	b.n	8013904 <_printf_common+0x58>
 8013974:	2301      	movs	r3, #1
 8013976:	4622      	mov	r2, r4
 8013978:	4649      	mov	r1, r9
 801397a:	4638      	mov	r0, r7
 801397c:	47c0      	blx	r8
 801397e:	3001      	adds	r0, #1
 8013980:	d0e6      	beq.n	8013950 <_printf_common+0xa4>
 8013982:	3601      	adds	r6, #1
 8013984:	e7d9      	b.n	801393a <_printf_common+0x8e>
	...

08013988 <_printf_i>:
 8013988:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801398c:	460c      	mov	r4, r1
 801398e:	4691      	mov	r9, r2
 8013990:	7e27      	ldrb	r7, [r4, #24]
 8013992:	990c      	ldr	r1, [sp, #48]	; 0x30
 8013994:	2f78      	cmp	r7, #120	; 0x78
 8013996:	4680      	mov	r8, r0
 8013998:	469a      	mov	sl, r3
 801399a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801399e:	d807      	bhi.n	80139b0 <_printf_i+0x28>
 80139a0:	2f62      	cmp	r7, #98	; 0x62
 80139a2:	d80a      	bhi.n	80139ba <_printf_i+0x32>
 80139a4:	2f00      	cmp	r7, #0
 80139a6:	f000 80d8 	beq.w	8013b5a <_printf_i+0x1d2>
 80139aa:	2f58      	cmp	r7, #88	; 0x58
 80139ac:	f000 80a3 	beq.w	8013af6 <_printf_i+0x16e>
 80139b0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80139b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80139b8:	e03a      	b.n	8013a30 <_printf_i+0xa8>
 80139ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80139be:	2b15      	cmp	r3, #21
 80139c0:	d8f6      	bhi.n	80139b0 <_printf_i+0x28>
 80139c2:	a001      	add	r0, pc, #4	; (adr r0, 80139c8 <_printf_i+0x40>)
 80139c4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80139c8:	08013a21 	.word	0x08013a21
 80139cc:	08013a35 	.word	0x08013a35
 80139d0:	080139b1 	.word	0x080139b1
 80139d4:	080139b1 	.word	0x080139b1
 80139d8:	080139b1 	.word	0x080139b1
 80139dc:	080139b1 	.word	0x080139b1
 80139e0:	08013a35 	.word	0x08013a35
 80139e4:	080139b1 	.word	0x080139b1
 80139e8:	080139b1 	.word	0x080139b1
 80139ec:	080139b1 	.word	0x080139b1
 80139f0:	080139b1 	.word	0x080139b1
 80139f4:	08013b41 	.word	0x08013b41
 80139f8:	08013a65 	.word	0x08013a65
 80139fc:	08013b23 	.word	0x08013b23
 8013a00:	080139b1 	.word	0x080139b1
 8013a04:	080139b1 	.word	0x080139b1
 8013a08:	08013b63 	.word	0x08013b63
 8013a0c:	080139b1 	.word	0x080139b1
 8013a10:	08013a65 	.word	0x08013a65
 8013a14:	080139b1 	.word	0x080139b1
 8013a18:	080139b1 	.word	0x080139b1
 8013a1c:	08013b2b 	.word	0x08013b2b
 8013a20:	680b      	ldr	r3, [r1, #0]
 8013a22:	1d1a      	adds	r2, r3, #4
 8013a24:	681b      	ldr	r3, [r3, #0]
 8013a26:	600a      	str	r2, [r1, #0]
 8013a28:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8013a2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013a30:	2301      	movs	r3, #1
 8013a32:	e0a3      	b.n	8013b7c <_printf_i+0x1f4>
 8013a34:	6825      	ldr	r5, [r4, #0]
 8013a36:	6808      	ldr	r0, [r1, #0]
 8013a38:	062e      	lsls	r6, r5, #24
 8013a3a:	f100 0304 	add.w	r3, r0, #4
 8013a3e:	d50a      	bpl.n	8013a56 <_printf_i+0xce>
 8013a40:	6805      	ldr	r5, [r0, #0]
 8013a42:	600b      	str	r3, [r1, #0]
 8013a44:	2d00      	cmp	r5, #0
 8013a46:	da03      	bge.n	8013a50 <_printf_i+0xc8>
 8013a48:	232d      	movs	r3, #45	; 0x2d
 8013a4a:	426d      	negs	r5, r5
 8013a4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013a50:	485e      	ldr	r0, [pc, #376]	; (8013bcc <_printf_i+0x244>)
 8013a52:	230a      	movs	r3, #10
 8013a54:	e019      	b.n	8013a8a <_printf_i+0x102>
 8013a56:	f015 0f40 	tst.w	r5, #64	; 0x40
 8013a5a:	6805      	ldr	r5, [r0, #0]
 8013a5c:	600b      	str	r3, [r1, #0]
 8013a5e:	bf18      	it	ne
 8013a60:	b22d      	sxthne	r5, r5
 8013a62:	e7ef      	b.n	8013a44 <_printf_i+0xbc>
 8013a64:	680b      	ldr	r3, [r1, #0]
 8013a66:	6825      	ldr	r5, [r4, #0]
 8013a68:	1d18      	adds	r0, r3, #4
 8013a6a:	6008      	str	r0, [r1, #0]
 8013a6c:	0628      	lsls	r0, r5, #24
 8013a6e:	d501      	bpl.n	8013a74 <_printf_i+0xec>
 8013a70:	681d      	ldr	r5, [r3, #0]
 8013a72:	e002      	b.n	8013a7a <_printf_i+0xf2>
 8013a74:	0669      	lsls	r1, r5, #25
 8013a76:	d5fb      	bpl.n	8013a70 <_printf_i+0xe8>
 8013a78:	881d      	ldrh	r5, [r3, #0]
 8013a7a:	4854      	ldr	r0, [pc, #336]	; (8013bcc <_printf_i+0x244>)
 8013a7c:	2f6f      	cmp	r7, #111	; 0x6f
 8013a7e:	bf0c      	ite	eq
 8013a80:	2308      	moveq	r3, #8
 8013a82:	230a      	movne	r3, #10
 8013a84:	2100      	movs	r1, #0
 8013a86:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013a8a:	6866      	ldr	r6, [r4, #4]
 8013a8c:	60a6      	str	r6, [r4, #8]
 8013a8e:	2e00      	cmp	r6, #0
 8013a90:	bfa2      	ittt	ge
 8013a92:	6821      	ldrge	r1, [r4, #0]
 8013a94:	f021 0104 	bicge.w	r1, r1, #4
 8013a98:	6021      	strge	r1, [r4, #0]
 8013a9a:	b90d      	cbnz	r5, 8013aa0 <_printf_i+0x118>
 8013a9c:	2e00      	cmp	r6, #0
 8013a9e:	d04d      	beq.n	8013b3c <_printf_i+0x1b4>
 8013aa0:	4616      	mov	r6, r2
 8013aa2:	fbb5 f1f3 	udiv	r1, r5, r3
 8013aa6:	fb03 5711 	mls	r7, r3, r1, r5
 8013aaa:	5dc7      	ldrb	r7, [r0, r7]
 8013aac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8013ab0:	462f      	mov	r7, r5
 8013ab2:	42bb      	cmp	r3, r7
 8013ab4:	460d      	mov	r5, r1
 8013ab6:	d9f4      	bls.n	8013aa2 <_printf_i+0x11a>
 8013ab8:	2b08      	cmp	r3, #8
 8013aba:	d10b      	bne.n	8013ad4 <_printf_i+0x14c>
 8013abc:	6823      	ldr	r3, [r4, #0]
 8013abe:	07df      	lsls	r7, r3, #31
 8013ac0:	d508      	bpl.n	8013ad4 <_printf_i+0x14c>
 8013ac2:	6923      	ldr	r3, [r4, #16]
 8013ac4:	6861      	ldr	r1, [r4, #4]
 8013ac6:	4299      	cmp	r1, r3
 8013ac8:	bfde      	ittt	le
 8013aca:	2330      	movle	r3, #48	; 0x30
 8013acc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8013ad0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8013ad4:	1b92      	subs	r2, r2, r6
 8013ad6:	6122      	str	r2, [r4, #16]
 8013ad8:	f8cd a000 	str.w	sl, [sp]
 8013adc:	464b      	mov	r3, r9
 8013ade:	aa03      	add	r2, sp, #12
 8013ae0:	4621      	mov	r1, r4
 8013ae2:	4640      	mov	r0, r8
 8013ae4:	f7ff fee2 	bl	80138ac <_printf_common>
 8013ae8:	3001      	adds	r0, #1
 8013aea:	d14c      	bne.n	8013b86 <_printf_i+0x1fe>
 8013aec:	f04f 30ff 	mov.w	r0, #4294967295
 8013af0:	b004      	add	sp, #16
 8013af2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013af6:	4835      	ldr	r0, [pc, #212]	; (8013bcc <_printf_i+0x244>)
 8013af8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8013afc:	6823      	ldr	r3, [r4, #0]
 8013afe:	680e      	ldr	r6, [r1, #0]
 8013b00:	061f      	lsls	r7, r3, #24
 8013b02:	f856 5b04 	ldr.w	r5, [r6], #4
 8013b06:	600e      	str	r6, [r1, #0]
 8013b08:	d514      	bpl.n	8013b34 <_printf_i+0x1ac>
 8013b0a:	07d9      	lsls	r1, r3, #31
 8013b0c:	bf44      	itt	mi
 8013b0e:	f043 0320 	orrmi.w	r3, r3, #32
 8013b12:	6023      	strmi	r3, [r4, #0]
 8013b14:	b91d      	cbnz	r5, 8013b1e <_printf_i+0x196>
 8013b16:	6823      	ldr	r3, [r4, #0]
 8013b18:	f023 0320 	bic.w	r3, r3, #32
 8013b1c:	6023      	str	r3, [r4, #0]
 8013b1e:	2310      	movs	r3, #16
 8013b20:	e7b0      	b.n	8013a84 <_printf_i+0xfc>
 8013b22:	6823      	ldr	r3, [r4, #0]
 8013b24:	f043 0320 	orr.w	r3, r3, #32
 8013b28:	6023      	str	r3, [r4, #0]
 8013b2a:	2378      	movs	r3, #120	; 0x78
 8013b2c:	4828      	ldr	r0, [pc, #160]	; (8013bd0 <_printf_i+0x248>)
 8013b2e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013b32:	e7e3      	b.n	8013afc <_printf_i+0x174>
 8013b34:	065e      	lsls	r6, r3, #25
 8013b36:	bf48      	it	mi
 8013b38:	b2ad      	uxthmi	r5, r5
 8013b3a:	e7e6      	b.n	8013b0a <_printf_i+0x182>
 8013b3c:	4616      	mov	r6, r2
 8013b3e:	e7bb      	b.n	8013ab8 <_printf_i+0x130>
 8013b40:	680b      	ldr	r3, [r1, #0]
 8013b42:	6826      	ldr	r6, [r4, #0]
 8013b44:	6960      	ldr	r0, [r4, #20]
 8013b46:	1d1d      	adds	r5, r3, #4
 8013b48:	600d      	str	r5, [r1, #0]
 8013b4a:	0635      	lsls	r5, r6, #24
 8013b4c:	681b      	ldr	r3, [r3, #0]
 8013b4e:	d501      	bpl.n	8013b54 <_printf_i+0x1cc>
 8013b50:	6018      	str	r0, [r3, #0]
 8013b52:	e002      	b.n	8013b5a <_printf_i+0x1d2>
 8013b54:	0671      	lsls	r1, r6, #25
 8013b56:	d5fb      	bpl.n	8013b50 <_printf_i+0x1c8>
 8013b58:	8018      	strh	r0, [r3, #0]
 8013b5a:	2300      	movs	r3, #0
 8013b5c:	6123      	str	r3, [r4, #16]
 8013b5e:	4616      	mov	r6, r2
 8013b60:	e7ba      	b.n	8013ad8 <_printf_i+0x150>
 8013b62:	680b      	ldr	r3, [r1, #0]
 8013b64:	1d1a      	adds	r2, r3, #4
 8013b66:	600a      	str	r2, [r1, #0]
 8013b68:	681e      	ldr	r6, [r3, #0]
 8013b6a:	6862      	ldr	r2, [r4, #4]
 8013b6c:	2100      	movs	r1, #0
 8013b6e:	4630      	mov	r0, r6
 8013b70:	f7ec fbb6 	bl	80002e0 <memchr>
 8013b74:	b108      	cbz	r0, 8013b7a <_printf_i+0x1f2>
 8013b76:	1b80      	subs	r0, r0, r6
 8013b78:	6060      	str	r0, [r4, #4]
 8013b7a:	6863      	ldr	r3, [r4, #4]
 8013b7c:	6123      	str	r3, [r4, #16]
 8013b7e:	2300      	movs	r3, #0
 8013b80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013b84:	e7a8      	b.n	8013ad8 <_printf_i+0x150>
 8013b86:	6923      	ldr	r3, [r4, #16]
 8013b88:	4632      	mov	r2, r6
 8013b8a:	4649      	mov	r1, r9
 8013b8c:	4640      	mov	r0, r8
 8013b8e:	47d0      	blx	sl
 8013b90:	3001      	adds	r0, #1
 8013b92:	d0ab      	beq.n	8013aec <_printf_i+0x164>
 8013b94:	6823      	ldr	r3, [r4, #0]
 8013b96:	079b      	lsls	r3, r3, #30
 8013b98:	d413      	bmi.n	8013bc2 <_printf_i+0x23a>
 8013b9a:	68e0      	ldr	r0, [r4, #12]
 8013b9c:	9b03      	ldr	r3, [sp, #12]
 8013b9e:	4298      	cmp	r0, r3
 8013ba0:	bfb8      	it	lt
 8013ba2:	4618      	movlt	r0, r3
 8013ba4:	e7a4      	b.n	8013af0 <_printf_i+0x168>
 8013ba6:	2301      	movs	r3, #1
 8013ba8:	4632      	mov	r2, r6
 8013baa:	4649      	mov	r1, r9
 8013bac:	4640      	mov	r0, r8
 8013bae:	47d0      	blx	sl
 8013bb0:	3001      	adds	r0, #1
 8013bb2:	d09b      	beq.n	8013aec <_printf_i+0x164>
 8013bb4:	3501      	adds	r5, #1
 8013bb6:	68e3      	ldr	r3, [r4, #12]
 8013bb8:	9903      	ldr	r1, [sp, #12]
 8013bba:	1a5b      	subs	r3, r3, r1
 8013bbc:	42ab      	cmp	r3, r5
 8013bbe:	dcf2      	bgt.n	8013ba6 <_printf_i+0x21e>
 8013bc0:	e7eb      	b.n	8013b9a <_printf_i+0x212>
 8013bc2:	2500      	movs	r5, #0
 8013bc4:	f104 0619 	add.w	r6, r4, #25
 8013bc8:	e7f5      	b.n	8013bb6 <_printf_i+0x22e>
 8013bca:	bf00      	nop
 8013bcc:	08016e65 	.word	0x08016e65
 8013bd0:	08016e76 	.word	0x08016e76

08013bd4 <_sbrk_r>:
 8013bd4:	b538      	push	{r3, r4, r5, lr}
 8013bd6:	4d06      	ldr	r5, [pc, #24]	; (8013bf0 <_sbrk_r+0x1c>)
 8013bd8:	2300      	movs	r3, #0
 8013bda:	4604      	mov	r4, r0
 8013bdc:	4608      	mov	r0, r1
 8013bde:	602b      	str	r3, [r5, #0]
 8013be0:	f7ed fa02 	bl	8000fe8 <_sbrk>
 8013be4:	1c43      	adds	r3, r0, #1
 8013be6:	d102      	bne.n	8013bee <_sbrk_r+0x1a>
 8013be8:	682b      	ldr	r3, [r5, #0]
 8013bea:	b103      	cbz	r3, 8013bee <_sbrk_r+0x1a>
 8013bec:	6023      	str	r3, [r4, #0]
 8013bee:	bd38      	pop	{r3, r4, r5, pc}
 8013bf0:	240037f0 	.word	0x240037f0

08013bf4 <__sread>:
 8013bf4:	b510      	push	{r4, lr}
 8013bf6:	460c      	mov	r4, r1
 8013bf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013bfc:	f000 fa6c 	bl	80140d8 <_read_r>
 8013c00:	2800      	cmp	r0, #0
 8013c02:	bfab      	itete	ge
 8013c04:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013c06:	89a3      	ldrhlt	r3, [r4, #12]
 8013c08:	181b      	addge	r3, r3, r0
 8013c0a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013c0e:	bfac      	ite	ge
 8013c10:	6563      	strge	r3, [r4, #84]	; 0x54
 8013c12:	81a3      	strhlt	r3, [r4, #12]
 8013c14:	bd10      	pop	{r4, pc}

08013c16 <__swrite>:
 8013c16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c1a:	461f      	mov	r7, r3
 8013c1c:	898b      	ldrh	r3, [r1, #12]
 8013c1e:	05db      	lsls	r3, r3, #23
 8013c20:	4605      	mov	r5, r0
 8013c22:	460c      	mov	r4, r1
 8013c24:	4616      	mov	r6, r2
 8013c26:	d505      	bpl.n	8013c34 <__swrite+0x1e>
 8013c28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013c2c:	2302      	movs	r3, #2
 8013c2e:	2200      	movs	r2, #0
 8013c30:	f000 f9d0 	bl	8013fd4 <_lseek_r>
 8013c34:	89a3      	ldrh	r3, [r4, #12]
 8013c36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013c3a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013c3e:	81a3      	strh	r3, [r4, #12]
 8013c40:	4632      	mov	r2, r6
 8013c42:	463b      	mov	r3, r7
 8013c44:	4628      	mov	r0, r5
 8013c46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013c4a:	f000 b869 	b.w	8013d20 <_write_r>

08013c4e <__sseek>:
 8013c4e:	b510      	push	{r4, lr}
 8013c50:	460c      	mov	r4, r1
 8013c52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013c56:	f000 f9bd 	bl	8013fd4 <_lseek_r>
 8013c5a:	1c43      	adds	r3, r0, #1
 8013c5c:	89a3      	ldrh	r3, [r4, #12]
 8013c5e:	bf15      	itete	ne
 8013c60:	6560      	strne	r0, [r4, #84]	; 0x54
 8013c62:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013c66:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013c6a:	81a3      	strheq	r3, [r4, #12]
 8013c6c:	bf18      	it	ne
 8013c6e:	81a3      	strhne	r3, [r4, #12]
 8013c70:	bd10      	pop	{r4, pc}

08013c72 <__sclose>:
 8013c72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013c76:	f000 b8db 	b.w	8013e30 <_close_r>
	...

08013c7c <__swbuf_r>:
 8013c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013c7e:	460e      	mov	r6, r1
 8013c80:	4614      	mov	r4, r2
 8013c82:	4605      	mov	r5, r0
 8013c84:	b118      	cbz	r0, 8013c8e <__swbuf_r+0x12>
 8013c86:	6983      	ldr	r3, [r0, #24]
 8013c88:	b90b      	cbnz	r3, 8013c8e <__swbuf_r+0x12>
 8013c8a:	f7ff fb51 	bl	8013330 <__sinit>
 8013c8e:	4b21      	ldr	r3, [pc, #132]	; (8013d14 <__swbuf_r+0x98>)
 8013c90:	429c      	cmp	r4, r3
 8013c92:	d12b      	bne.n	8013cec <__swbuf_r+0x70>
 8013c94:	686c      	ldr	r4, [r5, #4]
 8013c96:	69a3      	ldr	r3, [r4, #24]
 8013c98:	60a3      	str	r3, [r4, #8]
 8013c9a:	89a3      	ldrh	r3, [r4, #12]
 8013c9c:	071a      	lsls	r2, r3, #28
 8013c9e:	d52f      	bpl.n	8013d00 <__swbuf_r+0x84>
 8013ca0:	6923      	ldr	r3, [r4, #16]
 8013ca2:	b36b      	cbz	r3, 8013d00 <__swbuf_r+0x84>
 8013ca4:	6923      	ldr	r3, [r4, #16]
 8013ca6:	6820      	ldr	r0, [r4, #0]
 8013ca8:	1ac0      	subs	r0, r0, r3
 8013caa:	6963      	ldr	r3, [r4, #20]
 8013cac:	b2f6      	uxtb	r6, r6
 8013cae:	4283      	cmp	r3, r0
 8013cb0:	4637      	mov	r7, r6
 8013cb2:	dc04      	bgt.n	8013cbe <__swbuf_r+0x42>
 8013cb4:	4621      	mov	r1, r4
 8013cb6:	4628      	mov	r0, r5
 8013cb8:	f000 f950 	bl	8013f5c <_fflush_r>
 8013cbc:	bb30      	cbnz	r0, 8013d0c <__swbuf_r+0x90>
 8013cbe:	68a3      	ldr	r3, [r4, #8]
 8013cc0:	3b01      	subs	r3, #1
 8013cc2:	60a3      	str	r3, [r4, #8]
 8013cc4:	6823      	ldr	r3, [r4, #0]
 8013cc6:	1c5a      	adds	r2, r3, #1
 8013cc8:	6022      	str	r2, [r4, #0]
 8013cca:	701e      	strb	r6, [r3, #0]
 8013ccc:	6963      	ldr	r3, [r4, #20]
 8013cce:	3001      	adds	r0, #1
 8013cd0:	4283      	cmp	r3, r0
 8013cd2:	d004      	beq.n	8013cde <__swbuf_r+0x62>
 8013cd4:	89a3      	ldrh	r3, [r4, #12]
 8013cd6:	07db      	lsls	r3, r3, #31
 8013cd8:	d506      	bpl.n	8013ce8 <__swbuf_r+0x6c>
 8013cda:	2e0a      	cmp	r6, #10
 8013cdc:	d104      	bne.n	8013ce8 <__swbuf_r+0x6c>
 8013cde:	4621      	mov	r1, r4
 8013ce0:	4628      	mov	r0, r5
 8013ce2:	f000 f93b 	bl	8013f5c <_fflush_r>
 8013ce6:	b988      	cbnz	r0, 8013d0c <__swbuf_r+0x90>
 8013ce8:	4638      	mov	r0, r7
 8013cea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013cec:	4b0a      	ldr	r3, [pc, #40]	; (8013d18 <__swbuf_r+0x9c>)
 8013cee:	429c      	cmp	r4, r3
 8013cf0:	d101      	bne.n	8013cf6 <__swbuf_r+0x7a>
 8013cf2:	68ac      	ldr	r4, [r5, #8]
 8013cf4:	e7cf      	b.n	8013c96 <__swbuf_r+0x1a>
 8013cf6:	4b09      	ldr	r3, [pc, #36]	; (8013d1c <__swbuf_r+0xa0>)
 8013cf8:	429c      	cmp	r4, r3
 8013cfa:	bf08      	it	eq
 8013cfc:	68ec      	ldreq	r4, [r5, #12]
 8013cfe:	e7ca      	b.n	8013c96 <__swbuf_r+0x1a>
 8013d00:	4621      	mov	r1, r4
 8013d02:	4628      	mov	r0, r5
 8013d04:	f000 f81e 	bl	8013d44 <__swsetup_r>
 8013d08:	2800      	cmp	r0, #0
 8013d0a:	d0cb      	beq.n	8013ca4 <__swbuf_r+0x28>
 8013d0c:	f04f 37ff 	mov.w	r7, #4294967295
 8013d10:	e7ea      	b.n	8013ce8 <__swbuf_r+0x6c>
 8013d12:	bf00      	nop
 8013d14:	08016e14 	.word	0x08016e14
 8013d18:	08016e34 	.word	0x08016e34
 8013d1c:	08016df4 	.word	0x08016df4

08013d20 <_write_r>:
 8013d20:	b538      	push	{r3, r4, r5, lr}
 8013d22:	4d07      	ldr	r5, [pc, #28]	; (8013d40 <_write_r+0x20>)
 8013d24:	4604      	mov	r4, r0
 8013d26:	4608      	mov	r0, r1
 8013d28:	4611      	mov	r1, r2
 8013d2a:	2200      	movs	r2, #0
 8013d2c:	602a      	str	r2, [r5, #0]
 8013d2e:	461a      	mov	r2, r3
 8013d30:	f7ed f909 	bl	8000f46 <_write>
 8013d34:	1c43      	adds	r3, r0, #1
 8013d36:	d102      	bne.n	8013d3e <_write_r+0x1e>
 8013d38:	682b      	ldr	r3, [r5, #0]
 8013d3a:	b103      	cbz	r3, 8013d3e <_write_r+0x1e>
 8013d3c:	6023      	str	r3, [r4, #0]
 8013d3e:	bd38      	pop	{r3, r4, r5, pc}
 8013d40:	240037f0 	.word	0x240037f0

08013d44 <__swsetup_r>:
 8013d44:	4b32      	ldr	r3, [pc, #200]	; (8013e10 <__swsetup_r+0xcc>)
 8013d46:	b570      	push	{r4, r5, r6, lr}
 8013d48:	681d      	ldr	r5, [r3, #0]
 8013d4a:	4606      	mov	r6, r0
 8013d4c:	460c      	mov	r4, r1
 8013d4e:	b125      	cbz	r5, 8013d5a <__swsetup_r+0x16>
 8013d50:	69ab      	ldr	r3, [r5, #24]
 8013d52:	b913      	cbnz	r3, 8013d5a <__swsetup_r+0x16>
 8013d54:	4628      	mov	r0, r5
 8013d56:	f7ff faeb 	bl	8013330 <__sinit>
 8013d5a:	4b2e      	ldr	r3, [pc, #184]	; (8013e14 <__swsetup_r+0xd0>)
 8013d5c:	429c      	cmp	r4, r3
 8013d5e:	d10f      	bne.n	8013d80 <__swsetup_r+0x3c>
 8013d60:	686c      	ldr	r4, [r5, #4]
 8013d62:	89a3      	ldrh	r3, [r4, #12]
 8013d64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013d68:	0719      	lsls	r1, r3, #28
 8013d6a:	d42c      	bmi.n	8013dc6 <__swsetup_r+0x82>
 8013d6c:	06dd      	lsls	r5, r3, #27
 8013d6e:	d411      	bmi.n	8013d94 <__swsetup_r+0x50>
 8013d70:	2309      	movs	r3, #9
 8013d72:	6033      	str	r3, [r6, #0]
 8013d74:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013d78:	81a3      	strh	r3, [r4, #12]
 8013d7a:	f04f 30ff 	mov.w	r0, #4294967295
 8013d7e:	e03e      	b.n	8013dfe <__swsetup_r+0xba>
 8013d80:	4b25      	ldr	r3, [pc, #148]	; (8013e18 <__swsetup_r+0xd4>)
 8013d82:	429c      	cmp	r4, r3
 8013d84:	d101      	bne.n	8013d8a <__swsetup_r+0x46>
 8013d86:	68ac      	ldr	r4, [r5, #8]
 8013d88:	e7eb      	b.n	8013d62 <__swsetup_r+0x1e>
 8013d8a:	4b24      	ldr	r3, [pc, #144]	; (8013e1c <__swsetup_r+0xd8>)
 8013d8c:	429c      	cmp	r4, r3
 8013d8e:	bf08      	it	eq
 8013d90:	68ec      	ldreq	r4, [r5, #12]
 8013d92:	e7e6      	b.n	8013d62 <__swsetup_r+0x1e>
 8013d94:	0758      	lsls	r0, r3, #29
 8013d96:	d512      	bpl.n	8013dbe <__swsetup_r+0x7a>
 8013d98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013d9a:	b141      	cbz	r1, 8013dae <__swsetup_r+0x6a>
 8013d9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013da0:	4299      	cmp	r1, r3
 8013da2:	d002      	beq.n	8013daa <__swsetup_r+0x66>
 8013da4:	4630      	mov	r0, r6
 8013da6:	f7ff fb7d 	bl	80134a4 <_free_r>
 8013daa:	2300      	movs	r3, #0
 8013dac:	6363      	str	r3, [r4, #52]	; 0x34
 8013dae:	89a3      	ldrh	r3, [r4, #12]
 8013db0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013db4:	81a3      	strh	r3, [r4, #12]
 8013db6:	2300      	movs	r3, #0
 8013db8:	6063      	str	r3, [r4, #4]
 8013dba:	6923      	ldr	r3, [r4, #16]
 8013dbc:	6023      	str	r3, [r4, #0]
 8013dbe:	89a3      	ldrh	r3, [r4, #12]
 8013dc0:	f043 0308 	orr.w	r3, r3, #8
 8013dc4:	81a3      	strh	r3, [r4, #12]
 8013dc6:	6923      	ldr	r3, [r4, #16]
 8013dc8:	b94b      	cbnz	r3, 8013dde <__swsetup_r+0x9a>
 8013dca:	89a3      	ldrh	r3, [r4, #12]
 8013dcc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013dd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013dd4:	d003      	beq.n	8013dde <__swsetup_r+0x9a>
 8013dd6:	4621      	mov	r1, r4
 8013dd8:	4630      	mov	r0, r6
 8013dda:	f000 f931 	bl	8014040 <__smakebuf_r>
 8013dde:	89a0      	ldrh	r0, [r4, #12]
 8013de0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013de4:	f010 0301 	ands.w	r3, r0, #1
 8013de8:	d00a      	beq.n	8013e00 <__swsetup_r+0xbc>
 8013dea:	2300      	movs	r3, #0
 8013dec:	60a3      	str	r3, [r4, #8]
 8013dee:	6963      	ldr	r3, [r4, #20]
 8013df0:	425b      	negs	r3, r3
 8013df2:	61a3      	str	r3, [r4, #24]
 8013df4:	6923      	ldr	r3, [r4, #16]
 8013df6:	b943      	cbnz	r3, 8013e0a <__swsetup_r+0xc6>
 8013df8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8013dfc:	d1ba      	bne.n	8013d74 <__swsetup_r+0x30>
 8013dfe:	bd70      	pop	{r4, r5, r6, pc}
 8013e00:	0781      	lsls	r1, r0, #30
 8013e02:	bf58      	it	pl
 8013e04:	6963      	ldrpl	r3, [r4, #20]
 8013e06:	60a3      	str	r3, [r4, #8]
 8013e08:	e7f4      	b.n	8013df4 <__swsetup_r+0xb0>
 8013e0a:	2000      	movs	r0, #0
 8013e0c:	e7f7      	b.n	8013dfe <__swsetup_r+0xba>
 8013e0e:	bf00      	nop
 8013e10:	24000030 	.word	0x24000030
 8013e14:	08016e14 	.word	0x08016e14
 8013e18:	08016e34 	.word	0x08016e34
 8013e1c:	08016df4 	.word	0x08016df4

08013e20 <abort>:
 8013e20:	b508      	push	{r3, lr}
 8013e22:	2006      	movs	r0, #6
 8013e24:	f000 f992 	bl	801414c <raise>
 8013e28:	2001      	movs	r0, #1
 8013e2a:	f7ed f865 	bl	8000ef8 <_exit>
	...

08013e30 <_close_r>:
 8013e30:	b538      	push	{r3, r4, r5, lr}
 8013e32:	4d06      	ldr	r5, [pc, #24]	; (8013e4c <_close_r+0x1c>)
 8013e34:	2300      	movs	r3, #0
 8013e36:	4604      	mov	r4, r0
 8013e38:	4608      	mov	r0, r1
 8013e3a:	602b      	str	r3, [r5, #0]
 8013e3c:	f7ed f89f 	bl	8000f7e <_close>
 8013e40:	1c43      	adds	r3, r0, #1
 8013e42:	d102      	bne.n	8013e4a <_close_r+0x1a>
 8013e44:	682b      	ldr	r3, [r5, #0]
 8013e46:	b103      	cbz	r3, 8013e4a <_close_r+0x1a>
 8013e48:	6023      	str	r3, [r4, #0]
 8013e4a:	bd38      	pop	{r3, r4, r5, pc}
 8013e4c:	240037f0 	.word	0x240037f0

08013e50 <__sflush_r>:
 8013e50:	898a      	ldrh	r2, [r1, #12]
 8013e52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013e56:	4605      	mov	r5, r0
 8013e58:	0710      	lsls	r0, r2, #28
 8013e5a:	460c      	mov	r4, r1
 8013e5c:	d458      	bmi.n	8013f10 <__sflush_r+0xc0>
 8013e5e:	684b      	ldr	r3, [r1, #4]
 8013e60:	2b00      	cmp	r3, #0
 8013e62:	dc05      	bgt.n	8013e70 <__sflush_r+0x20>
 8013e64:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013e66:	2b00      	cmp	r3, #0
 8013e68:	dc02      	bgt.n	8013e70 <__sflush_r+0x20>
 8013e6a:	2000      	movs	r0, #0
 8013e6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013e72:	2e00      	cmp	r6, #0
 8013e74:	d0f9      	beq.n	8013e6a <__sflush_r+0x1a>
 8013e76:	2300      	movs	r3, #0
 8013e78:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013e7c:	682f      	ldr	r7, [r5, #0]
 8013e7e:	602b      	str	r3, [r5, #0]
 8013e80:	d032      	beq.n	8013ee8 <__sflush_r+0x98>
 8013e82:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013e84:	89a3      	ldrh	r3, [r4, #12]
 8013e86:	075a      	lsls	r2, r3, #29
 8013e88:	d505      	bpl.n	8013e96 <__sflush_r+0x46>
 8013e8a:	6863      	ldr	r3, [r4, #4]
 8013e8c:	1ac0      	subs	r0, r0, r3
 8013e8e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013e90:	b10b      	cbz	r3, 8013e96 <__sflush_r+0x46>
 8013e92:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013e94:	1ac0      	subs	r0, r0, r3
 8013e96:	2300      	movs	r3, #0
 8013e98:	4602      	mov	r2, r0
 8013e9a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013e9c:	6a21      	ldr	r1, [r4, #32]
 8013e9e:	4628      	mov	r0, r5
 8013ea0:	47b0      	blx	r6
 8013ea2:	1c43      	adds	r3, r0, #1
 8013ea4:	89a3      	ldrh	r3, [r4, #12]
 8013ea6:	d106      	bne.n	8013eb6 <__sflush_r+0x66>
 8013ea8:	6829      	ldr	r1, [r5, #0]
 8013eaa:	291d      	cmp	r1, #29
 8013eac:	d82c      	bhi.n	8013f08 <__sflush_r+0xb8>
 8013eae:	4a2a      	ldr	r2, [pc, #168]	; (8013f58 <__sflush_r+0x108>)
 8013eb0:	40ca      	lsrs	r2, r1
 8013eb2:	07d6      	lsls	r6, r2, #31
 8013eb4:	d528      	bpl.n	8013f08 <__sflush_r+0xb8>
 8013eb6:	2200      	movs	r2, #0
 8013eb8:	6062      	str	r2, [r4, #4]
 8013eba:	04d9      	lsls	r1, r3, #19
 8013ebc:	6922      	ldr	r2, [r4, #16]
 8013ebe:	6022      	str	r2, [r4, #0]
 8013ec0:	d504      	bpl.n	8013ecc <__sflush_r+0x7c>
 8013ec2:	1c42      	adds	r2, r0, #1
 8013ec4:	d101      	bne.n	8013eca <__sflush_r+0x7a>
 8013ec6:	682b      	ldr	r3, [r5, #0]
 8013ec8:	b903      	cbnz	r3, 8013ecc <__sflush_r+0x7c>
 8013eca:	6560      	str	r0, [r4, #84]	; 0x54
 8013ecc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013ece:	602f      	str	r7, [r5, #0]
 8013ed0:	2900      	cmp	r1, #0
 8013ed2:	d0ca      	beq.n	8013e6a <__sflush_r+0x1a>
 8013ed4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013ed8:	4299      	cmp	r1, r3
 8013eda:	d002      	beq.n	8013ee2 <__sflush_r+0x92>
 8013edc:	4628      	mov	r0, r5
 8013ede:	f7ff fae1 	bl	80134a4 <_free_r>
 8013ee2:	2000      	movs	r0, #0
 8013ee4:	6360      	str	r0, [r4, #52]	; 0x34
 8013ee6:	e7c1      	b.n	8013e6c <__sflush_r+0x1c>
 8013ee8:	6a21      	ldr	r1, [r4, #32]
 8013eea:	2301      	movs	r3, #1
 8013eec:	4628      	mov	r0, r5
 8013eee:	47b0      	blx	r6
 8013ef0:	1c41      	adds	r1, r0, #1
 8013ef2:	d1c7      	bne.n	8013e84 <__sflush_r+0x34>
 8013ef4:	682b      	ldr	r3, [r5, #0]
 8013ef6:	2b00      	cmp	r3, #0
 8013ef8:	d0c4      	beq.n	8013e84 <__sflush_r+0x34>
 8013efa:	2b1d      	cmp	r3, #29
 8013efc:	d001      	beq.n	8013f02 <__sflush_r+0xb2>
 8013efe:	2b16      	cmp	r3, #22
 8013f00:	d101      	bne.n	8013f06 <__sflush_r+0xb6>
 8013f02:	602f      	str	r7, [r5, #0]
 8013f04:	e7b1      	b.n	8013e6a <__sflush_r+0x1a>
 8013f06:	89a3      	ldrh	r3, [r4, #12]
 8013f08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013f0c:	81a3      	strh	r3, [r4, #12]
 8013f0e:	e7ad      	b.n	8013e6c <__sflush_r+0x1c>
 8013f10:	690f      	ldr	r7, [r1, #16]
 8013f12:	2f00      	cmp	r7, #0
 8013f14:	d0a9      	beq.n	8013e6a <__sflush_r+0x1a>
 8013f16:	0793      	lsls	r3, r2, #30
 8013f18:	680e      	ldr	r6, [r1, #0]
 8013f1a:	bf08      	it	eq
 8013f1c:	694b      	ldreq	r3, [r1, #20]
 8013f1e:	600f      	str	r7, [r1, #0]
 8013f20:	bf18      	it	ne
 8013f22:	2300      	movne	r3, #0
 8013f24:	eba6 0807 	sub.w	r8, r6, r7
 8013f28:	608b      	str	r3, [r1, #8]
 8013f2a:	f1b8 0f00 	cmp.w	r8, #0
 8013f2e:	dd9c      	ble.n	8013e6a <__sflush_r+0x1a>
 8013f30:	6a21      	ldr	r1, [r4, #32]
 8013f32:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013f34:	4643      	mov	r3, r8
 8013f36:	463a      	mov	r2, r7
 8013f38:	4628      	mov	r0, r5
 8013f3a:	47b0      	blx	r6
 8013f3c:	2800      	cmp	r0, #0
 8013f3e:	dc06      	bgt.n	8013f4e <__sflush_r+0xfe>
 8013f40:	89a3      	ldrh	r3, [r4, #12]
 8013f42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013f46:	81a3      	strh	r3, [r4, #12]
 8013f48:	f04f 30ff 	mov.w	r0, #4294967295
 8013f4c:	e78e      	b.n	8013e6c <__sflush_r+0x1c>
 8013f4e:	4407      	add	r7, r0
 8013f50:	eba8 0800 	sub.w	r8, r8, r0
 8013f54:	e7e9      	b.n	8013f2a <__sflush_r+0xda>
 8013f56:	bf00      	nop
 8013f58:	20400001 	.word	0x20400001

08013f5c <_fflush_r>:
 8013f5c:	b538      	push	{r3, r4, r5, lr}
 8013f5e:	690b      	ldr	r3, [r1, #16]
 8013f60:	4605      	mov	r5, r0
 8013f62:	460c      	mov	r4, r1
 8013f64:	b913      	cbnz	r3, 8013f6c <_fflush_r+0x10>
 8013f66:	2500      	movs	r5, #0
 8013f68:	4628      	mov	r0, r5
 8013f6a:	bd38      	pop	{r3, r4, r5, pc}
 8013f6c:	b118      	cbz	r0, 8013f76 <_fflush_r+0x1a>
 8013f6e:	6983      	ldr	r3, [r0, #24]
 8013f70:	b90b      	cbnz	r3, 8013f76 <_fflush_r+0x1a>
 8013f72:	f7ff f9dd 	bl	8013330 <__sinit>
 8013f76:	4b14      	ldr	r3, [pc, #80]	; (8013fc8 <_fflush_r+0x6c>)
 8013f78:	429c      	cmp	r4, r3
 8013f7a:	d11b      	bne.n	8013fb4 <_fflush_r+0x58>
 8013f7c:	686c      	ldr	r4, [r5, #4]
 8013f7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013f82:	2b00      	cmp	r3, #0
 8013f84:	d0ef      	beq.n	8013f66 <_fflush_r+0xa>
 8013f86:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013f88:	07d0      	lsls	r0, r2, #31
 8013f8a:	d404      	bmi.n	8013f96 <_fflush_r+0x3a>
 8013f8c:	0599      	lsls	r1, r3, #22
 8013f8e:	d402      	bmi.n	8013f96 <_fflush_r+0x3a>
 8013f90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013f92:	f7ff fa7d 	bl	8013490 <__retarget_lock_acquire_recursive>
 8013f96:	4628      	mov	r0, r5
 8013f98:	4621      	mov	r1, r4
 8013f9a:	f7ff ff59 	bl	8013e50 <__sflush_r>
 8013f9e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013fa0:	07da      	lsls	r2, r3, #31
 8013fa2:	4605      	mov	r5, r0
 8013fa4:	d4e0      	bmi.n	8013f68 <_fflush_r+0xc>
 8013fa6:	89a3      	ldrh	r3, [r4, #12]
 8013fa8:	059b      	lsls	r3, r3, #22
 8013faa:	d4dd      	bmi.n	8013f68 <_fflush_r+0xc>
 8013fac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013fae:	f7ff fa70 	bl	8013492 <__retarget_lock_release_recursive>
 8013fb2:	e7d9      	b.n	8013f68 <_fflush_r+0xc>
 8013fb4:	4b05      	ldr	r3, [pc, #20]	; (8013fcc <_fflush_r+0x70>)
 8013fb6:	429c      	cmp	r4, r3
 8013fb8:	d101      	bne.n	8013fbe <_fflush_r+0x62>
 8013fba:	68ac      	ldr	r4, [r5, #8]
 8013fbc:	e7df      	b.n	8013f7e <_fflush_r+0x22>
 8013fbe:	4b04      	ldr	r3, [pc, #16]	; (8013fd0 <_fflush_r+0x74>)
 8013fc0:	429c      	cmp	r4, r3
 8013fc2:	bf08      	it	eq
 8013fc4:	68ec      	ldreq	r4, [r5, #12]
 8013fc6:	e7da      	b.n	8013f7e <_fflush_r+0x22>
 8013fc8:	08016e14 	.word	0x08016e14
 8013fcc:	08016e34 	.word	0x08016e34
 8013fd0:	08016df4 	.word	0x08016df4

08013fd4 <_lseek_r>:
 8013fd4:	b538      	push	{r3, r4, r5, lr}
 8013fd6:	4d07      	ldr	r5, [pc, #28]	; (8013ff4 <_lseek_r+0x20>)
 8013fd8:	4604      	mov	r4, r0
 8013fda:	4608      	mov	r0, r1
 8013fdc:	4611      	mov	r1, r2
 8013fde:	2200      	movs	r2, #0
 8013fe0:	602a      	str	r2, [r5, #0]
 8013fe2:	461a      	mov	r2, r3
 8013fe4:	f7ec fff2 	bl	8000fcc <_lseek>
 8013fe8:	1c43      	adds	r3, r0, #1
 8013fea:	d102      	bne.n	8013ff2 <_lseek_r+0x1e>
 8013fec:	682b      	ldr	r3, [r5, #0]
 8013fee:	b103      	cbz	r3, 8013ff2 <_lseek_r+0x1e>
 8013ff0:	6023      	str	r3, [r4, #0]
 8013ff2:	bd38      	pop	{r3, r4, r5, pc}
 8013ff4:	240037f0 	.word	0x240037f0

08013ff8 <__swhatbuf_r>:
 8013ff8:	b570      	push	{r4, r5, r6, lr}
 8013ffa:	460e      	mov	r6, r1
 8013ffc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014000:	2900      	cmp	r1, #0
 8014002:	b096      	sub	sp, #88	; 0x58
 8014004:	4614      	mov	r4, r2
 8014006:	461d      	mov	r5, r3
 8014008:	da07      	bge.n	801401a <__swhatbuf_r+0x22>
 801400a:	2300      	movs	r3, #0
 801400c:	602b      	str	r3, [r5, #0]
 801400e:	89b3      	ldrh	r3, [r6, #12]
 8014010:	061a      	lsls	r2, r3, #24
 8014012:	d410      	bmi.n	8014036 <__swhatbuf_r+0x3e>
 8014014:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014018:	e00e      	b.n	8014038 <__swhatbuf_r+0x40>
 801401a:	466a      	mov	r2, sp
 801401c:	f000 f8b2 	bl	8014184 <_fstat_r>
 8014020:	2800      	cmp	r0, #0
 8014022:	dbf2      	blt.n	801400a <__swhatbuf_r+0x12>
 8014024:	9a01      	ldr	r2, [sp, #4]
 8014026:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801402a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801402e:	425a      	negs	r2, r3
 8014030:	415a      	adcs	r2, r3
 8014032:	602a      	str	r2, [r5, #0]
 8014034:	e7ee      	b.n	8014014 <__swhatbuf_r+0x1c>
 8014036:	2340      	movs	r3, #64	; 0x40
 8014038:	2000      	movs	r0, #0
 801403a:	6023      	str	r3, [r4, #0]
 801403c:	b016      	add	sp, #88	; 0x58
 801403e:	bd70      	pop	{r4, r5, r6, pc}

08014040 <__smakebuf_r>:
 8014040:	898b      	ldrh	r3, [r1, #12]
 8014042:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014044:	079d      	lsls	r5, r3, #30
 8014046:	4606      	mov	r6, r0
 8014048:	460c      	mov	r4, r1
 801404a:	d507      	bpl.n	801405c <__smakebuf_r+0x1c>
 801404c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014050:	6023      	str	r3, [r4, #0]
 8014052:	6123      	str	r3, [r4, #16]
 8014054:	2301      	movs	r3, #1
 8014056:	6163      	str	r3, [r4, #20]
 8014058:	b002      	add	sp, #8
 801405a:	bd70      	pop	{r4, r5, r6, pc}
 801405c:	ab01      	add	r3, sp, #4
 801405e:	466a      	mov	r2, sp
 8014060:	f7ff ffca 	bl	8013ff8 <__swhatbuf_r>
 8014064:	9900      	ldr	r1, [sp, #0]
 8014066:	4605      	mov	r5, r0
 8014068:	4630      	mov	r0, r6
 801406a:	f7ff fa6b 	bl	8013544 <_malloc_r>
 801406e:	b948      	cbnz	r0, 8014084 <__smakebuf_r+0x44>
 8014070:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014074:	059a      	lsls	r2, r3, #22
 8014076:	d4ef      	bmi.n	8014058 <__smakebuf_r+0x18>
 8014078:	f023 0303 	bic.w	r3, r3, #3
 801407c:	f043 0302 	orr.w	r3, r3, #2
 8014080:	81a3      	strh	r3, [r4, #12]
 8014082:	e7e3      	b.n	801404c <__smakebuf_r+0xc>
 8014084:	4b0d      	ldr	r3, [pc, #52]	; (80140bc <__smakebuf_r+0x7c>)
 8014086:	62b3      	str	r3, [r6, #40]	; 0x28
 8014088:	89a3      	ldrh	r3, [r4, #12]
 801408a:	6020      	str	r0, [r4, #0]
 801408c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014090:	81a3      	strh	r3, [r4, #12]
 8014092:	9b00      	ldr	r3, [sp, #0]
 8014094:	6163      	str	r3, [r4, #20]
 8014096:	9b01      	ldr	r3, [sp, #4]
 8014098:	6120      	str	r0, [r4, #16]
 801409a:	b15b      	cbz	r3, 80140b4 <__smakebuf_r+0x74>
 801409c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80140a0:	4630      	mov	r0, r6
 80140a2:	f000 f881 	bl	80141a8 <_isatty_r>
 80140a6:	b128      	cbz	r0, 80140b4 <__smakebuf_r+0x74>
 80140a8:	89a3      	ldrh	r3, [r4, #12]
 80140aa:	f023 0303 	bic.w	r3, r3, #3
 80140ae:	f043 0301 	orr.w	r3, r3, #1
 80140b2:	81a3      	strh	r3, [r4, #12]
 80140b4:	89a0      	ldrh	r0, [r4, #12]
 80140b6:	4305      	orrs	r5, r0
 80140b8:	81a5      	strh	r5, [r4, #12]
 80140ba:	e7cd      	b.n	8014058 <__smakebuf_r+0x18>
 80140bc:	080132c9 	.word	0x080132c9

080140c0 <__malloc_lock>:
 80140c0:	4801      	ldr	r0, [pc, #4]	; (80140c8 <__malloc_lock+0x8>)
 80140c2:	f7ff b9e5 	b.w	8013490 <__retarget_lock_acquire_recursive>
 80140c6:	bf00      	nop
 80140c8:	240037f8 	.word	0x240037f8

080140cc <__malloc_unlock>:
 80140cc:	4801      	ldr	r0, [pc, #4]	; (80140d4 <__malloc_unlock+0x8>)
 80140ce:	f7ff b9e0 	b.w	8013492 <__retarget_lock_release_recursive>
 80140d2:	bf00      	nop
 80140d4:	240037f8 	.word	0x240037f8

080140d8 <_read_r>:
 80140d8:	b538      	push	{r3, r4, r5, lr}
 80140da:	4d07      	ldr	r5, [pc, #28]	; (80140f8 <_read_r+0x20>)
 80140dc:	4604      	mov	r4, r0
 80140de:	4608      	mov	r0, r1
 80140e0:	4611      	mov	r1, r2
 80140e2:	2200      	movs	r2, #0
 80140e4:	602a      	str	r2, [r5, #0]
 80140e6:	461a      	mov	r2, r3
 80140e8:	f7ec ff10 	bl	8000f0c <_read>
 80140ec:	1c43      	adds	r3, r0, #1
 80140ee:	d102      	bne.n	80140f6 <_read_r+0x1e>
 80140f0:	682b      	ldr	r3, [r5, #0]
 80140f2:	b103      	cbz	r3, 80140f6 <_read_r+0x1e>
 80140f4:	6023      	str	r3, [r4, #0]
 80140f6:	bd38      	pop	{r3, r4, r5, pc}
 80140f8:	240037f0 	.word	0x240037f0

080140fc <_raise_r>:
 80140fc:	291f      	cmp	r1, #31
 80140fe:	b538      	push	{r3, r4, r5, lr}
 8014100:	4604      	mov	r4, r0
 8014102:	460d      	mov	r5, r1
 8014104:	d904      	bls.n	8014110 <_raise_r+0x14>
 8014106:	2316      	movs	r3, #22
 8014108:	6003      	str	r3, [r0, #0]
 801410a:	f04f 30ff 	mov.w	r0, #4294967295
 801410e:	bd38      	pop	{r3, r4, r5, pc}
 8014110:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8014112:	b112      	cbz	r2, 801411a <_raise_r+0x1e>
 8014114:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014118:	b94b      	cbnz	r3, 801412e <_raise_r+0x32>
 801411a:	4620      	mov	r0, r4
 801411c:	f000 f830 	bl	8014180 <_getpid_r>
 8014120:	462a      	mov	r2, r5
 8014122:	4601      	mov	r1, r0
 8014124:	4620      	mov	r0, r4
 8014126:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801412a:	f000 b817 	b.w	801415c <_kill_r>
 801412e:	2b01      	cmp	r3, #1
 8014130:	d00a      	beq.n	8014148 <_raise_r+0x4c>
 8014132:	1c59      	adds	r1, r3, #1
 8014134:	d103      	bne.n	801413e <_raise_r+0x42>
 8014136:	2316      	movs	r3, #22
 8014138:	6003      	str	r3, [r0, #0]
 801413a:	2001      	movs	r0, #1
 801413c:	e7e7      	b.n	801410e <_raise_r+0x12>
 801413e:	2400      	movs	r4, #0
 8014140:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014144:	4628      	mov	r0, r5
 8014146:	4798      	blx	r3
 8014148:	2000      	movs	r0, #0
 801414a:	e7e0      	b.n	801410e <_raise_r+0x12>

0801414c <raise>:
 801414c:	4b02      	ldr	r3, [pc, #8]	; (8014158 <raise+0xc>)
 801414e:	4601      	mov	r1, r0
 8014150:	6818      	ldr	r0, [r3, #0]
 8014152:	f7ff bfd3 	b.w	80140fc <_raise_r>
 8014156:	bf00      	nop
 8014158:	24000030 	.word	0x24000030

0801415c <_kill_r>:
 801415c:	b538      	push	{r3, r4, r5, lr}
 801415e:	4d07      	ldr	r5, [pc, #28]	; (801417c <_kill_r+0x20>)
 8014160:	2300      	movs	r3, #0
 8014162:	4604      	mov	r4, r0
 8014164:	4608      	mov	r0, r1
 8014166:	4611      	mov	r1, r2
 8014168:	602b      	str	r3, [r5, #0]
 801416a:	f7ec feb3 	bl	8000ed4 <_kill>
 801416e:	1c43      	adds	r3, r0, #1
 8014170:	d102      	bne.n	8014178 <_kill_r+0x1c>
 8014172:	682b      	ldr	r3, [r5, #0]
 8014174:	b103      	cbz	r3, 8014178 <_kill_r+0x1c>
 8014176:	6023      	str	r3, [r4, #0]
 8014178:	bd38      	pop	{r3, r4, r5, pc}
 801417a:	bf00      	nop
 801417c:	240037f0 	.word	0x240037f0

08014180 <_getpid_r>:
 8014180:	f7ec bea0 	b.w	8000ec4 <_getpid>

08014184 <_fstat_r>:
 8014184:	b538      	push	{r3, r4, r5, lr}
 8014186:	4d07      	ldr	r5, [pc, #28]	; (80141a4 <_fstat_r+0x20>)
 8014188:	2300      	movs	r3, #0
 801418a:	4604      	mov	r4, r0
 801418c:	4608      	mov	r0, r1
 801418e:	4611      	mov	r1, r2
 8014190:	602b      	str	r3, [r5, #0]
 8014192:	f7ec ff00 	bl	8000f96 <_fstat>
 8014196:	1c43      	adds	r3, r0, #1
 8014198:	d102      	bne.n	80141a0 <_fstat_r+0x1c>
 801419a:	682b      	ldr	r3, [r5, #0]
 801419c:	b103      	cbz	r3, 80141a0 <_fstat_r+0x1c>
 801419e:	6023      	str	r3, [r4, #0]
 80141a0:	bd38      	pop	{r3, r4, r5, pc}
 80141a2:	bf00      	nop
 80141a4:	240037f0 	.word	0x240037f0

080141a8 <_isatty_r>:
 80141a8:	b538      	push	{r3, r4, r5, lr}
 80141aa:	4d06      	ldr	r5, [pc, #24]	; (80141c4 <_isatty_r+0x1c>)
 80141ac:	2300      	movs	r3, #0
 80141ae:	4604      	mov	r4, r0
 80141b0:	4608      	mov	r0, r1
 80141b2:	602b      	str	r3, [r5, #0]
 80141b4:	f7ec feff 	bl	8000fb6 <_isatty>
 80141b8:	1c43      	adds	r3, r0, #1
 80141ba:	d102      	bne.n	80141c2 <_isatty_r+0x1a>
 80141bc:	682b      	ldr	r3, [r5, #0]
 80141be:	b103      	cbz	r3, 80141c2 <_isatty_r+0x1a>
 80141c0:	6023      	str	r3, [r4, #0]
 80141c2:	bd38      	pop	{r3, r4, r5, pc}
 80141c4:	240037f0 	.word	0x240037f0

080141c8 <_init>:
 80141c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80141ca:	bf00      	nop
 80141cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80141ce:	bc08      	pop	{r3}
 80141d0:	469e      	mov	lr, r3
 80141d2:	4770      	bx	lr

080141d4 <_fini>:
 80141d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80141d6:	bf00      	nop
 80141d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80141da:	bc08      	pop	{r3}
 80141dc:	469e      	mov	lr, r3
 80141de:	4770      	bx	lr
